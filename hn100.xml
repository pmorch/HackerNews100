<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 21 Jul 2023 18:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[In the LLM space, "open source" is being used to mean "downloadable weights" (106 pts)]]></title>
            <link>https://www.alessiofanelli.com/blog/llama2-isnt-open-source</link>
            <guid>36815255</guid>
            <pubDate>Fri, 21 Jul 2023 15:49:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.alessiofanelli.com/blog/llama2-isnt-open-source">https://www.alessiofanelli.com/blog/llama2-isnt-open-source</a>, See on <a href="https://news.ycombinator.com/item?id=36815255">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2>LLaMA2 isn't "Open Source" - and why it doesn't matter<br><span>Posted on <!-- -->7/20/2023</span></h2><p>Almost a decade ago I started an open source company, and I’ve since been involved in the OSS community as a founder, contributor, speaker, and investor. The internet wouldn’t be what it is today if it wasn’t for the amazing open source projects that power most of the digital infrastructure of our world, so it’s a topic that has always been close to my heart.</p><p>When LLaMA2 came out, many of the folks I respect in the community were upset about misusing the term “open source” when referring to the model.</p><p><img src="https://www.alessiofanelli.com/images/yann.png" alt="Yann" parentname="p"></p><p>While it’s mostly open, there are caveats such as you can’t use the model commercially if you had more than 700M MAUs as of the release date, and you also cannot use the model output to train another large language model. These types of restrictions don’t play well with the open source ethos. But while I agree that LLaMA2 cannot be called open source in the traditional meaning of the word, I also think that it doesn’t matter. The term “open source” needs to evolve (once again) in the world of AI models.</p><h2>From Free to Open</h2><p>I wrote a long history of the free software and open source movement <a href="https://www.alessiofanelli.com/blog/history-of-open-source-licensing" parentname="p">here</a>, so I won’t bore you with the details again. What you need to know is that since the 1976 “Open Letter to Hobbyists”, there’s always been tension between the commercial interests of software companies and the curiosity of hackers who wanted to circumvent its restriction. The “free software” movement started in the 70s in the MIT AI lab with Richard Stallman and eventually the GNU project in 1983. The GPL “copyleft” license was created, and projects like Red Hat, MySQL, Git, and Ubuntu adopted it.</p><p>The term “open source” came to be in 1998 thanks to MIT’s Christine Peterson; at the “Freeware Summit”, the term “free software” was officially deprecated in favor of “open source software”. As time went by, the “free” and “open source” software communities diverged as they had different ideas of what free and open meant. Free software, as specified by the Free Software Foundation, is only a subset of open source software and uses very permissive licenses such as GPL and Apache.</p><p>In the last decade, there was another bifurcation, this time created by the tension between commercial open source companies and the cloud hyperscalers. Elastic and MongoDB transitioned their open source projects to the “Server-Side Public License” (SSPL) which allows developers to use the product commercially, as long as what they are offering isn’t a hosted version of the product. The goal was to block AWS from re-hosting their products as cloud services and profiting from them. The SSPL also infringes on the OSS ideals and is not recognized by the OSI as an open source license. Yet, the majority of developers still say that MongoDB is open source. More and more the term "open source" is losing its freedom connotations and turning almost synonymous with "source available" in developers' minds.</p><h2>From Source to Weights</h2><p>With the rise of open models like Dolly, MPT, LLaMA, etc., we are seeing a similar bifurcation in the community. For most AI engineers, “open source” today means “downloadable weights”, nothing more. Heather Meeker has proposed a definition for <a href="https://github.com/Open-Weights/Definition" parentname="p">“open weights”</a>, but there’s still no community consensus. The question is whether or not open weights are enough for a model to be called open source; a software analogy would be a project releasing its binaries without the source code to re-build it from scratch.</p><p>For a model to be truly open source and retrainable from scratch, the creators would need to share all their training code, pre-training dataset, fine-tuning preferences, RLHF examples, etc. The problem is the cost of these training runs: even if someone were to release everything, it’s cost-prohibitive to train models from scratch for most developers and companies, so having access to the final weights is preferred anyway.</p><p><img src="https://www.alessiofanelli.com/images/open-models.png" alt="Open Models" parentname="p"></p><p>In the LLMs space, the term "open source" is used interchangeably to define a wide range of openness levels:</p><ul><li parentname="ul"><strong parentname="li">Open models:</strong> these are models like RedPajama and MPT-7B, they have open weights available for commercial use (under Apache 2.0 license), but can also be re-trained from scratch since the dataset is open source. You can find a guide on how to train your own RedPajama model <a href="https://github.com/Lightning-AI/lit-llama/blob/main/howto/train_redpajama.md" parentname="li">here</a>.</li><li parentname="ul"><strong parentname="li">Open weights:</strong> StableLM is an open model trained by StabilityAI. While the weights are available and are licensed under Apache 2.0, the dataset used to train isn’t available to the public. From their README: “StableLM-Base-Alpha is pre-trained on a new experimental dataset built atop The Pile and is threes times larger at approximately 1.5T tokens.”</li><li parentname="ul"><strong parentname="li">Restricted weights:</strong> this is LLaMA2. The pre-training dataset is also unavailable, and while the weights are supposed to be open for commercial use, they have specific limitations that we mentioned above.</li><li parentname="ul"><strong parentname="li">Contaminated weights:</strong> models like Dolly 1.0 and LLaMA1 are part of this category. The weights are released openly, but the dataset used to train them doesn’t allow for commercial use, making it technically open but practically unusable.</li></ul><p>For the foreseeable future, open source and open weights will be used interchangeably, and I think that’s okay. The important thing is that more and more of this work is done as openly as possible. It’s okay to be disappointed with the LLaMA2 license, but Meta just packaged ~$2M worth of FLOPS into a Github repo, and I think that will be a net positive for the progress of this space.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[By 2028 there must be fast chargers every 60 km on the EU’s key motorways (108 pts)]]></title>
            <link>https://www.fleeteurope.com/en/new-energies/europe/article/fast-chargers-every-60-km-key-eu-motorways?a=FJA05&amp;t%5B0%5D=Charging&amp;curl=1</link>
            <guid>36814754</guid>
            <pubDate>Fri, 21 Jul 2023 15:11:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.fleeteurope.com/en/new-energies/europe/article/fast-chargers-every-60-km-key-eu-motorways?a=FJA05&#x26;t%5B0%5D=Charging&#x26;curl=1">https://www.fleeteurope.com/en/new-energies/europe/article/fast-chargers-every-60-km-key-eu-motorways?a=FJA05&#x26;t%5B0%5D=Charging&#x26;curl=1</a>, See on <a href="https://news.ycombinator.com/item?id=36814754">Hacker News</a></p>
<div id="readability-page-1" class="page"><div property="content:encoded">
        <p>By 2028, there must be fast chargers at least every 60 km on the EU’s key motorways. That is the most eyecatching measure of several approved by the European Parliament to improve EV charging. Others focus on increasing charging speed and making it easier to pay for charging. All are part of the EU’s ‘Fit for 55’ package, aimed at reducing emissions by 55% by 2030.</p>  <p>The maximum-distance rule for fast chargers applies to TEN-T (<em>pictured)</em>, an EU-wide network of key traffic corridors with a total length of 24,500 km. The mandated fast chargers along these roads all must have an output of at least 400 kW by 2026, and 600 kW by 2028.&nbsp;</p>  <p>Specifically for electric buses and trucks, the European Parliament mandated charging points at most 120 km apart by 2028 on at least half the network, each heavy-duty charger with an output of 1,400 to 2,800 kW, depending on the road.&nbsp;</p>  <p>In addition to these minimum requirements for the density and speed of the fast charger network, the European parliament also wants more simplicity and transparency when it comes to payment:</p>  <ul> 	<li>All customers must be able to pay with cards or contactless devices (at present, some charging networks require subscriptions or app downloads).&nbsp;</li> 	<li>All prices must be clearly displayed to the customers: in euros per kW or per minute/session. &nbsp;</li> 	<li>By 2027, the EU will develop a public database of charging stations, with information on pricing, availability, and waiting times.&nbsp;</li> </ul>  <p>Not forgetting other sustainable alternatives to ICEs, the European Parliament mandated at least one hydrogen refueling station every 200 km along TEN-T motorways by 2031.&nbsp;</p>  <p>The new alternative fuel infrastructure rules have already been approved by the European Parliament, but will only enter into force six months after approval by the European Council.&nbsp;</p>  <p>In a separate move, the UK has formulated similar proposals to improve the availability and reliability of public EV charging. For example: the British government wants to reduce the share of charging stations out of service from 8% in 2019 to 1% (as is already the case in the Netherlands), and will require that charging station operators provide a 24-hour helpline for their customers.</p>  <p><em>Image: Directorate-General for Mobility and Transport, European Commission – CC BY-SA 4.0</em></p> 
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Dementia risk linked to blood-protein imbalance in middle age (247 pts)]]></title>
            <link>https://www.nature.com/articles/d41586-023-02374-2</link>
            <guid>36813564</guid>
            <pubDate>Fri, 21 Jul 2023 13:34:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nature.com/articles/d41586-023-02374-2">https://www.nature.com/articles/d41586-023-02374-2</a>, See on <a href="https://news.ycombinator.com/item?id=36813564">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    <figure>
 <picture>
  <source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-023-02374-2/d41586-023-02374-2_25825424.jpg?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-023-02374-2/d41586-023-02374-2_25825424.jpg?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px">
  <img alt="Visualization showing a brain affected by Alzheimer's disease." loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-023-02374-2/d41586-023-02374-2_25825424.jpg">
  <figcaption>
   <p><span>A slice through the brain of a person with Alzheimer’s disease, the most common cause of dementia.</span><span>Credit: Anatomical Travelogue/Science Photo Library</span></p>
  </figcaption>
 </picture>
</figure><p>A study that followed thousands of people over 25 years has identified proteins linked to the development of dementia if their levels are unbalanced during middle age.</p><p>The findings, published in <i>Science Translational Medicine </i>on 19 July<sup><a href="#ref-CR1" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">1</a></sup>, could contribute to the development of new diagnostic tests, or even treatments, for dementia-causing diseases.</p><p>Most of the proteins have functions unrelated to the brain.</p><p>“We’re seeing so much involvement of the peripheral biology decades before the typical onset of dementia,” says study author Keenan Walker, a neuroscientist at the US National Institute on Aging in Bethesda, Maryland.</p><article data-label="Related">
  <a href="https://www.nature.com/articles/d41586-023-00954-w" data-track="click" data-track-label="recommended article"><img alt="" src="https://media.nature.com/w400/magazine-assets/d41586-023-02374-2/d41586-023-02374-2_25434040.jpg"><p>Conquering Alzheimer’s: a look at the therapies of the future</p></a>
 </article><p>Equipped with blood samples from more than 10,000 participants, Walker and his colleagues questioned whether they could find predictors of dementia years before its onset by looking at a person’s proteome — the collection of all the proteins expressed throughout the body. They searched for any signs of dysregulation — when proteins are at levels much higher or lower than normal.</p><p>The samples were collected as part of an ongoing study that began in 1987. Participants returned for examination six times over three decades, and during this time, around 1 in 5 of them developed dementia.</p><p>The researchers found 32 proteins that, if dysregulated in people aged 45 to 60, were strongly associated with an elevated chance of developing dementia in later life. It is unclear how exactly these proteins might be involved in the disease, but the link is “highly unlikely to be due to just chance alone”, says Walker.</p><p>“Not all the proteins showed changes in both plasma and brain tissues,” says Nicholas Seyfried, a biochemist and neurologist at Emory University in Atlanta, Georgia. For example, one of the proteins found with the strongest association with dementia risk — called GDF15 — was not detected in the brain, suggesting that “mechanisms below the neck could also play a role”, he adds.</p><p>Walker says that although a person’s proteome by itself cannot predict their risk of getting dementia, it could perhaps bolster the strength of existing predictors — such as age and family history.</p><h2>Protein balance</h2><p>As expected, some of the proteins that researchers identified are active in the brain — but most have other roles in the body. A handful were linked to proteostasis — the process of carefully balancing protein levels in the proteome.</p><p>This regulation is important in preventing proteins from going rogue and clumping together, which is what happens to the amyloid and tau proteins in the brains of people with Alzheimer’s disease, the most common cause of dementia.</p><article data-label="Related">
  <a href="https://www.nature.com/news/how-to-defeat-dementia-1.20949" data-track="click" data-track-label="recommended article"><img alt="" src="https://media.nature.com/w400/magazine-assets/d41586-023-02374-2/d41586-023-02374-2_15713358.jpg"><p>How to defeat dementia</p></a>
 </article><p>The study found altered levels of many of the proteins both in the brain tissues of those who had died with Alzheimer’s disease, and in the blood of those still living with it. These were associated with the presence of amyloid and tau proteins, which suggests they are somehow involved in processes specific to the disease.</p><p>Other proteins identified in the study were linked to the immune system, adding to “growing evidence for the role of innate and adaptive immune function in dementia”, says Jin-Tai Yu, a physician-scientist who specializes in dementia at Fudan University in Shanghai, China. Yu and his team have previously found that people with immune diseases are more vulnerable to Alzheimer’s later in life<sup><a href="#ref-CR2" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">2</a></sup>.</p><p>There is still a long way to go in understanding exactly how any of these proteins fit into the physiology of dementia, and a much better understanding of the underlying mechanisms is needed before people can benefit. Such insights “could potentially open doors for early interventions”, says Seyfried. For Walker, the aim in future is to determine whether these proteins could potentially be used as markers to identify various dysregulated pathways in people with dementia and to help provide more personalized treatments.</p>
                </div><div id="references" aria-labelledby="Bib1"><h2 id="Bib1">References</h2></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[90s Internet: When 20 hours online triggered an email from my ISP’s president (108 pts)]]></title>
            <link>https://arstechnica.com/gadgets/2023/07/the-90s-internet-when-20-hours-online-triggered-an-email-from-my-isps-president/</link>
            <guid>36813210</guid>
            <pubDate>Fri, 21 Jul 2023 12:56:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/gadgets/2023/07/the-90s-internet-when-20-hours-online-triggered-an-email-from-my-isps-president/">https://arstechnica.com/gadgets/2023/07/the-90s-internet-when-20-hours-online-triggered-an-email-from-my-isps-president/</a>, See on <a href="https://news.ycombinator.com/item?id=36813210">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2023/07/banj-edwards-terminally-online2-800x450.jpg" alt="The ‘90s Internet: When 20 hours online triggered an email from my ISP’s president">
      <figcaption><p>Banj Edwards | Aurich Lawson | Getty Images</p></figcaption>  </figure>

  




<!-- cache hit 288:single/related:a53e128e87d5db82176cc5af52b3d616 --><!-- empty -->
<p>"When checking the system this morning, I noticed your account logged in for over 20 hours," begins a December 1998 email from the president of my dial-up Internet service provider (ISP) at the time. "Our service is unlimited, but we ask that you actually be using the connection while logged in."</p>

<p>Today, when it seems like everyone is online 24/7 through smartphones and broadband, I'd be weird if I <em>wasn't online</em> for 20 hours straight. But 1998 in Raleigh, North Carolina, was different. In an age of copper telephone lines and dial-up modems, Internet access wasn't usually an always-on situation for a home user in the US. Each occupied telephone line meant another ISP customer couldn't use it—and no one could call you, either.</p>
<p>But I'm getting ahead of myself—why do I have an email from 1998?</p>
<h2>A voice from the past</h2>

<p>I save everything. It's just <a href="https://www.pcmag.com/news/gear-envy-my-collection-of-500-plus-pieces-of-computer-and-gaming-hardware">what I do</a>.</p>
<p>Being an amateur data archivist has served me well during my <a href="https://benjedwards.com/works.php">career</a> writing about tech. About eight years ago, I decided to search my archives for old email files and import them all into Apple Mail for OS X, organizing them chronologically so I could look at them all in one place. I found Internet emails going as far back as 1995, when I started using a POP3 client instead of <a href="https://en.wikipedia.org/wiki/Pine_(email_client)">Pine</a>. While browsing emails from 1998, I found a curious nugget from another era that blew me away.</p>
<blockquote><p>From: Eugene J. Fourney III<br>
Date: December 18, 1998 11:21 AM<br>
Subject: Online for 20 hours straight</p>
<p>Thank you for allowing NetWorks to provide Internet service.</p>
<p>I am writing because when checking the system this morning, I<br>
noticed your account logged in for over 20 hours.</p>
<p>Our service is unlimited, but we ask that you actually be using the<br>
connection while logged in. This has not been the case on occasion with<br>
your account.</p>
<p>We must ask that you take measures to ensure that you disconnect after<br>
any given session. Our resources must be shared between many customers,<br>
and the only way to accomplish that is for people to close the<br>
connection when they are not actively using it.</p>
<p>Please help with this by checking your dialer settings, and setting it<br>
to disconnect after 30 minutes of inactivity. Please also uncheck the<br>
option in your email program that automatically checks mail every 10<br>
minutes, or set it to some number higher than 30 minutes.</p>
<p>If you need help in locating these settings or want to discuss this<br>
further, please contact me at this email address or at our offices at<br>
518-0351 or 518-8034.</p>
<p>Gene Fourney</p></blockquote>
<p>I vaguely remember getting this email and thinking it was ridiculous because the connection was supposedly "unlimited." My family paid NetWorks a monthly fee (a $24.95 "Family Plan" for three user IDs) that allowed me, my dad, and my brother to connect to the Internet as much as we wanted—or so I thought. I showed the email to my father, who shrugged it off.</p>                                            
                                                        

<p>Between 1995 and 2000, I used a dial-up ISP, which meant that I had to call in to the ISP using a regular copper phone line and a dial-up modem running at anywhere between 14.4Kbps to 56Kbps over the years. Since most people also used their telephone lines for talking with their voice, there was a basic assumption that most calls to the ISP would be temporary. If your line was occupied, you would miss incoming calls. In my situation, my parents had set up a second phone line exclusively for my BBS in 1993 so I could spend as much time online as necessary without worrying about blocking incoming phone calls to my family.</p>
<p>A key issue I had with the email was the implication that I wasn't using my Internet connection during those 20 hours. I'm pretty sure I was using it, and not just for automatically checking my email every 30 minutes, as the email suggests.</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Primo – a visual CMS with Svelte blocks, a code editor, and SSG (195 pts)]]></title>
            <link>https://primocms.org</link>
            <guid>36813086</guid>
            <pubDate>Fri, 21 Jul 2023 12:38:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://primocms.org">https://primocms.org</a>, See on <a href="https://news.ycombinator.com/item?id=36813086">Hacker News</a></p>
<div id="readability-page-1" class="page">

    
    <div id="section-885d7628">
        <header>
            
            <div>
                <h2><!-- HTML_TAG_START -->
                    <p>Primo is a visual CMS that makes it a blast to build <strong>pages</strong>, manage <strong>content</strong>, and edit <strong>code</strong> - one block at a time.</p><!-- HTML_TAG_END -->
                </h2>


                
            </div>
            <div>
                <figure><iframe src="https://player.vimeo.com/video/838469641?h=df40df2d2c&amp;badge=0&amp;loop=1&amp;autopause=0&amp;player_id=0&amp;autoplay=1&amp;muted=1&amp;loop=1&amp;title=0&amp;sidedock=0&amp;controls=&amp;app_id=58479" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen="" title="Landing Page Demo"></iframe></figure>
                
            </div>
        </header>

    </div>
    <section id="section-ddd59217">
            <header>
                <h2>The modern monolithic CMS</h2>
                <h3>Primo combines delightful content management with the power of modern development</h3>
            </header>
            <div>
                <div>
                    <div>
                        <h2>Drag-n-drop page building</h2>
                        <p>Build your site's pages by dragging and dropping your directly blocks onto the page, unencumbered by overwhelming design options.</p>
                    </div>
                    <figure><img src="https://kdtzsoeklezpgshpzqtf.supabase.co/storage/v1/object/public/images/7c1dc1a3-c9eb-4364-b31b-951ecfc2641d/1682111950401Screen%20Shot%202023-04-21%20at%205.17.27%20PM.png" alt=""></figure>
                </div>
                <div>
                    <div>
                        <h2>Visual content editing</h2>
                        <p>Update your text, images, and links directly on the page or open up the Fields view to manage your content from a structured view.</p>
                    </div>
                    <figure><img src="https://kdtzsoeklezpgshpzqtf.supabase.co/storage/v1/object/public/images/7c1dc1a3-c9eb-4364-b31b-951ecfc2641d/Screen%20Shot%202023-04-21%20at%205.22.39%20PM.png1682112222228" alt=""></figure>
                </div>
                <div>
                    <div>
                        <h2>Integrated development</h2>
                        <p>Access each block's code with a click - right from your browser. And since each block is a <a href="https://svelte.dev/">Svelte</a> component, there's no limit to what you can make.</p>
                    </div>
                    <figure><img src="https://kdtzsoeklezpgshpzqtf.supabase.co/storage/v1/object/public/images/7c1dc1a3-c9eb-4364-b31b-951ecfc2641d/Screen%20Shot%202023-04-21%20at%205.25.06%20PM.png1682112330379" alt=""></figure>
                </div>
            </div>
        </section>
    <div id="section-d294b81b">
                <ul>
                    <li>
                        <h3><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="" role="img" width="1em" height="1em" viewBox="0 0 256 256"><!-- HTML_TAG_START -->
                                <path fill="currentColor" d="m213.66 66.34l-40-40A8 8 0 0 0 168 24H88a16 16 0 0 0-16 16v16H56a16 16 0 0 0-16 16v144a16 16 0 0 0 16 16h112a16 16 0 0 0 16-16v-16h16a16 16 0 0 0 16-16V72a8 8 0 0 0-2.34-5.66ZM136 192H88a8 8 0 0 1 0-16h48a8 8 0 0 1 0 16Zm0-32H88a8 8 0 0 1 0-16h48a8 8 0 0 1 0 16Zm64 24h-16v-80a8 8 0 0 0-2.34-5.66l-40-40A8 8 0 0 0 136 56H88V40h76.69L200 75.31Z"></path><!-- HTML_TAG_END -->
                            </svg>
                            <span><!-- HTML_TAG_START -->Static Sites<!-- HTML_TAG_END --></span>
                        </h3>
                        <p>Your websites are secure, scalable to millions, and fast-loading - no fancy plugins necessary.</p>
                    </li>
                    <li>
                        <h3><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="" role="img" width="1em" height="1em" viewBox="0 0 24 24"><!-- HTML_TAG_START -->
                                <path fill="currentColor" d="M12 5.5A3.5 3.5 0 0 1 15.5 9a3.5 3.5 0 0 1-3.5 3.5A3.5 3.5 0 0 1 8.5 9A3.5 3.5 0 0 1 12 5.5M5 8c.56 0 1.08.15 1.53.42c-.15 1.43.27 2.85 1.13 3.96C7.16 13.34 6.16 14 5 14a3 3 0 0 1-3-3a3 3 0 0 1 3-3m14 0a3 3 0 0 1 3 3a3 3 0 0 1-3 3c-1.16 0-2.16-.66-2.66-1.62a5.536 5.536 0 0 0 1.13-3.96c.45-.27.97-.42 1.53-.42M5.5 18.25c0-2.07 2.91-3.75 6.5-3.75s6.5 1.68 6.5 3.75V20h-13v-1.75M0 20v-1.5c0-1.39 1.89-2.56 4.45-2.9c-.59.68-.95 1.62-.95 2.65V20H0m24 0h-3.5v-1.75c0-1.03-.36-1.97-.95-2.65c2.56.34 4.45 1.51 4.45 2.9V20Z"></path><!-- HTML_TAG_END -->
                            </svg>
                            <span><!-- HTML_TAG_START -->Real-time collaboration<!-- HTML_TAG_END --></span>
                        </h3>
                        <p>Invite any number of collaborators as developers or content editors and edit your pages together. </p>
                    </li>
                    <li>
                        <h3><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="" role="img" width="1em" height="1em" viewBox="0 0 24 24"><!-- HTML_TAG_START -->
                                <g fill="currentColor">
                                    <path fill-rule="evenodd" d="M14 7a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1h-4Zm3 2h-2v6h2V9Z" clip-rule="evenodd"></path>
                                    <path d="M6 7a1 1 0 0 0 0 2h4a1 1 0 1 0 0-2H6Zm0 4a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H6Zm-1 5a1 1 0 0 1 1-1h4a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Z"></path>
                                    <path fill-rule="evenodd" d="M4 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h16a3 3 0 0 0 3-3V6a3 3 0 0 0-3-3H4Zm16 2H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1Z" clip-rule="evenodd"></path>
                                </g><!-- HTML_TAG_END -->
                            </svg>
                            <span><!-- HTML_TAG_START -->Multisite to the max<!-- HTML_TAG_END --></span>
                        </h3>
                        <p data-key="items[2].description"><!-- HTML_TAG_START -->
                            <h2>Create an unlimited number of websites on a single server and start new sites in seconds.</h2><!-- HTML_TAG_END -->
                        </p>
                    </li>
                    <li>
                        <h3><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="" role="img" width="1em" height="1em" viewBox="0 0 24 24"><!-- HTML_TAG_START -->
                                <path fill="currentColor" d="M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33c.85 0 1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2Z"></path><!-- HTML_TAG_END -->
                            </svg>
                            <span><!-- HTML_TAG_START -->Deploy to Github<!-- HTML_TAG_END --></span>
                        </h3>
                        <p data-key="items[3].description"><!-- HTML_TAG_START -->
                            <h2 id="deployyoursitetoagithubrepositoryfromthereyoucaneasilydeployittoanywebhost">Deploy your site to a Github repository. From there you can easily deploy it to any web host.</h2><!-- HTML_TAG_END -->
                        </p>
                    </li>
                    <li>
                        <h3><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="" role="img" width="1em" height="1em" viewBox="0 0 24 24"><!-- HTML_TAG_START -->
                                <g fill="currentColor">
                                    <path fill-rule="evenodd" d="M14 7a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1h-4Zm3 2h-2v6h2V9Z" clip-rule="evenodd"></path>
                                    <path d="M6 7a1 1 0 0 0 0 2h4a1 1 0 1 0 0-2H6Zm0 4a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H6Zm-1 5a1 1 0 0 1 1-1h4a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Z"></path>
                                    <path fill-rule="evenodd" d="M4 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h16a3 3 0 0 0 3-3V6a3 3 0 0 0-3-3H4Zm16 2H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1Z" clip-rule="evenodd"></path>
                                </g><!-- HTML_TAG_END -->
                            </svg>
                            <span><!-- HTML_TAG_START -->
                                Themes
                                <!-- HTML_TAG_END --></span>
                        </h3>
                        <p>Hit the ground running with one of Primo's free themes and customize it in seconds using CSS variables.</p>
                    </li>
                    <li>
                        <h3><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="" role="img" width="1em" height="1em" viewBox="0 0 24 24"><!-- HTML_TAG_START -->
                                <g fill="currentColor">
                                    <path d="M8.51 2h6.98c.232 0 .41 0 .566.015c1.108.109 2.015.775 2.4 1.672H5.544c.385-.897 1.292-1.563 2.4-1.672C8.098 2 8.276 2 8.51 2Zm-2.2 2.723c-1.39 0-2.53.84-2.91 1.954a2.587 2.587 0 0 0-.024.07c.398-.12.813-.2 1.232-.253c1.08-.139 2.446-.139 4.032-.139h6.892c1.586 0 2.951 0 4.032.139c.42.054.834.132 1.232.253a2.173 2.173 0 0 0-.023-.07c-.38-1.114-1.52-1.954-2.911-1.954H6.31Z"></path>
                                    <path fill-rule="evenodd" d="M8.672 7.542h6.656c3.374 0 5.062 0 6.01.987c.947.987.724 2.511.278 5.56l-.422 2.892c-.35 2.391-.525 3.587-1.422 4.303c-.897.716-2.22.716-4.867.716h-5.81c-2.646 0-3.97 0-4.867-.716c-.897-.716-1.072-1.912-1.422-4.303l-.422-2.891c-.447-3.05-.67-4.574.278-5.561c.948-.987 2.636-.987 6.01-.987ZM8 18c0-.414.373-.75.833-.75h6.334c.46 0 .833.336.833.75s-.373.75-.833.75H8.833c-.46 0-.833-.336-.833-.75Z" clip-rule="evenodd"></path>
                                </g><!-- HTML_TAG_END -->
                            </svg>
                            <span><!-- HTML_TAG_START -->Primo Library<!-- HTML_TAG_END --></span>
                        </h3>
                        <p>Access a growing library of pre-built blocks which automatically adapt to your site's design.</p>
                    </li>
                </ul>

                </div>
    <div id="section-3d86c4f7">
                <h2>Spin up speedy, secure, scalable static sites in seconds.</h2>
                <p><!-- HTML_TAG_START -->
                    <h2>Set up your own Primo server in under 5 minutes and manage unlimited sites with ease. Don't want to manage your own server? Try Primo Cloud for free.</h2><!-- HTML_TAG_END -->
                </p>
                <p><a href="https://docs.primocms.org/getting-started"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="" role="img" width="1em" height="1em" viewBox="0 0 512 512"><!-- HTML_TAG_START -->
                            <ellipse cx="256" cy="128" fill="none" stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" rx="192" ry="80"></ellipse>
                            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" d="M448 214c0 44.18-86 80-192 80S64 258.18 64 214m384 86c0 44.18-86 80-192 80S64 344.18 64 300"></path>
                            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" d="M64 127.24v257.52C64 428.52 150 464 256 464s192-35.48 192-79.24V127.24"></path><!-- HTML_TAG_END -->
                        </svg>
                        Self-host
                    </a>
                    <a href="https://primocms.org/cloud"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="" role="img" width="1em" height="1em" viewBox="0 0 24 24"><!-- HTML_TAG_START -->
                            <path fill="currentColor" d="M12 6c2.62 0 4.88 1.86 5.39 4.43l.3 1.5l1.53.11A2.98 2.98 0 0 1 22 15c0 1.65-1.35 3-3 3H6c-2.21 0-4-1.79-4-4c0-2.05 1.53-3.76 3.56-3.97l1.07-.11l.5-.95A5.469 5.469 0 0 1 12 6m0-2C9.11 4 6.6 5.64 5.35 8.04A5.994 5.994 0 0 0 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5c0-2.64-2.05-4.78-4.65-4.96A7.49 7.49 0 0 0 12 4z"></path><!-- HTML_TAG_END -->
                        </svg>
                        Primo Cloud
                    </a>
                </p>
            </div>
    <section id="section-dbc84ff9">
            <h2>Frequently Asked Questions</h2>
            <div><p>Primo is under full-time development and is in the process of becoming a nonprofit organization. Any funds generated from White Glove and Cloud will go towards funding further development, in the same vein as <a href="https://ghost.org/">Ghost CMS</a>.</p>
                    
                </div>
        </section>
    <div id="section-b18b744b">
                <div>
                    <h2>Hear about future updates, including:</h2>
                    <h3><!-- HTML_TAG_START -->
                        <ul>
                            <li>
                                <p><strong>Using it headless</strong> alongside SvelteKit, NextJS, etc.</p>
                            </li>
                            <li>
                                <p><strong>Design fields</strong> to give content editors predefined style options.</p>
                            </li>
                            <li>
                                <p><strong>Cloud functions</strong> for writing backend code from Primo.</p>
                            </li>
                        </ul><!-- HTML_TAG_END -->
                    </h3>
                </div>
                <div>
                    
                    <p><img src="https://track.mailerlite.com/webforms/o/5039306/j2m2z7?v1637419080" width="1" height="1" alt=".">
                </p></div>
                
                
            </div>
    

    


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tell HN: Upgrade your Metabase installation immediately (170 pts)]]></title>
            <link>https://github.com/metabase/metabase/releases/tag/v0.46.6.1</link>
            <guid>36812256</guid>
            <pubDate>Fri, 21 Jul 2023 10:45:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/metabase/metabase/releases/tag/v0.46.6.1">https://github.com/metabase/metabase/releases/tag/v0.46.6.1</a>, See on <a href="https://news.ycombinator.com/item?id=36812256">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pjax="true" data-test-selector="body-content" data-view-component="true"><p><strong>Upgrade your Metabase installation IMMEDIATELY.</strong></p>
<p>A recently discovered security vulnerability almost certainly affects you, and we recommend you upgrade your Metabase Installation right away.</p>
<p><strong>Upgrading</strong></p>
<p>You can download a .jar of the release, or get the latest on Docker. Make sure to back up your Metabase<br>
database before you upgrade! Need help? Check out our<br>
<a href="https://metabase.com/docs/latest/operations-guide/upgrading-metabase.html" rel="nofollow">upgrading instructions</a>.</p>
<p>Docker image: <code>metabase/metabase:v0.46.6.1</code><br>
Download the JAR here: <a href="https://downloads.metabase.com/v0.46.6.1/metabase.jar" rel="nofollow">https://downloads.metabase.com/v0.46.6.1/metabase.jar</a></p>
<p><strong>Notes</strong></p>
<p>SHA-256 checksum for the v0.46.6.1 JAR:</p>
<div data-snippet-clipboard-copy-content="12d267bf515a238944bb65fceed1ef83f5ae63451c11ad5b7f7adbeaf612e5c6"><pre><code>12d267bf515a238944bb65fceed1ef83f5ae63451c11ad5b7f7adbeaf612e5c6
</code></pre></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I have written a JVM in Rust (479 pts)]]></title>
            <link>https://andreabergia.com/blog/2023/07/i-have-written-a-jvm-in-rust/</link>
            <guid>36811554</guid>
            <pubDate>Fri, 21 Jul 2023 08:48:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://andreabergia.com/blog/2023/07/i-have-written-a-jvm-in-rust/">https://andreabergia.com/blog/2023/07/i-have-written-a-jvm-in-rust/</a>, See on <a href="https://news.ycombinator.com/item?id=36811554">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
  <article>
    <header>
      

      <div>
        <p>
          Published Wednesday, Jul 12, 2023
          -
          2164 words, 11 minutes
        </p>

        
      </div>
    </header>

    <p>Lately I’ve been spending quite a bit of time learning Rust, and as any sane person would do, after writing a few 100 lines programs I’ve decided to take on something <em>a little bit</em> more ambitious: I have written a Java Virtual Machine in Rust. 🎉 With a lot of originality, I have called it <code>rjvm</code>. The code is available <a href="https://github.com/andreabergia/rjvm">on GitHub</a>.</p>
<p>I want to stress that this is a toy JVM, built for learning purposes and not a serious implementation. In particular, it does not support:</p>
<ul>
<li>generics</li>
<li>threads</li>
<li>reflection</li>
<li>annotations</li>
<li>I/O</li>
<li>just in time compiler</li>
<li>string interning</li>
</ul>
<p>However, there are quite a few non-trivial things implemented:</p>
<ul>
<li>control flow statements (<code>if, for, ...</code>)</li>
<li>primitive and object creations</li>
<li>virtual and static method invocation</li>
<li>exceptions</li>
<li>garbage collection</li>
<li>class resolution from a <code>jar</code> file</li>
</ul>
<p>For example, the following is part of the test suite:</p>
<div><pre><code data-lang="java"><span>class</span> <span>StackTracePrinting</span> <span>{</span>
    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span>String<span>[]</span> args<span>)</span> <span>{</span>
        Throwable ex <span>=</span> <span>new</span> Exception<span>();</span>
        StackTraceElement<span>[]</span> stackTrace <span>=</span> ex<span>.</span><span>getStackTrace</span><span>();</span>
        <span>for</span> <span>(</span>StackTraceElement element <span>:</span> stackTrace<span>)</span> <span>{</span>
            tempPrint<span>(</span>
                    element<span>.</span><span>getClassName</span><span>()</span> <span>+</span> <span>"::"</span> <span>+</span> element<span>.</span><span>getMethodName</span><span>()</span> <span>+</span> <span>" - "</span> <span>+</span>
                            element<span>.</span><span>getFileName</span><span>()</span> <span>+</span> <span>":"</span> <span>+</span> element<span>.</span><span>getLineNumber</span><span>());</span>
        <span>}</span>
    <span>}</span>

    <span>// We use this in place of System.out.println because we don't have real I/O
</span><span></span>    <span>private</span> <span>static</span> <span>native</span> <span>void</span> <span>tempPrint</span><span>(</span>String value<span>);</span>
<span>}</span>
</code></pre></div><p>It uses the real <code>rt.jar</code> containing the classes from the <a href="https://openjdk.org/projects/jdk7/">OpenJDK 7</a> - thus, in the example above, the <code>java.lang.StackTraceElement</code> class comes from a real JDK!</p>
<p>I am very happy with what I have learned, about Rust and about how to implement a virtual machine. In particular, I am <em>super</em> happy about having implemented a real, working, garbage collector. It’s quite mediocre, but it’s mine and I love it. 💘 Given that I have achieved what I set out to do originally, I have decided to stop the project here. I know there are bugs, but I do not plan to fix them.</p>
<h2 id="overview">
  Overview
  <a href="#overview">
    
  </a>
</h2>
<p>In this post, I will give you an overview of how my JVM works. In further articles, I will go into more detail about some of the aspects discussed here.</p>
<h2 id="code-organization">
  Code organization
  <a href="#code-organization">
    
  </a>
</h2>
<p>The code is a standard Rust project. I have split it into three crates (i.e. packages):</p>
<ul>
<li><code>reader</code>, which is able to read <code>.class</code> files and contains various types that model their content;</li>
<li><code>vm</code>, which contains the virtual machine that can execute the code as a library;</li>
<li><code>vm_cli</code>, which contains a very simple command-line launcher to run the VM, in the spirit of the <code>java</code> executable.</li>
</ul>
<p>I’m considering extracting the <code>reader</code> crate in a separate repository and publishing it on <a href="https://crates.io/">crates.io</a>, since it could actually be useful to someone else.</p>
<h2 id="parsing-a-class-file">
  Parsing a <code>.class</code> file
  <a href="#parsing-a-class-file">
    
  </a>
</h2>
<p>As you know, Java is a compiled language - the <code>javac</code> compiler takes your <code>.java</code> source files and produces various <code>.class</code> files, generally distributed in a <code>.jar</code> file - which is just a <code>zip</code>. Thus, the first thing to do to execute some Java code is to load a <code>.class</code> file, containing the bytecode generated by the compiler. A class file contains various things:</p>
<ul>
<li>metadata about the class, such as its name or the source file name</li>
<li>the superclass name</li>
<li>the implemented interfaces</li>
<li>the fields, along with their types and annotations</li>
<li>and the methods with:
<ul>
<li>their descriptor, which is a string representing the type of each parameter and the method’s return type</li>
<li>metadata such as the <code>throws</code> clause, annotation, generics information</li>
<li>and the bytecode, along with some extra metadata such as the exception handler table and the line numbers table.</li>
</ul>
</li>
</ul>
<p>As mentioned above, for <code>rjvm</code> I have created a separate crate, named <code>reader</code>, which can parse a class file and return a <a href="https://github.com/andreabergia/rjvm/blob/main/reader/src/class_file.rs">Rust struct</a> that models a class and all its content.</p>
<h2 id="executing-methods">
  Executing methods
  <a href="#executing-methods">
    
  </a>
</h2>
<p>The main API of the <code>vm</code> crate is <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/vm.rs#L164"><code>Vm::invoke</code></a>, which is used to execute a method. It takes a <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/call_stack.rs"><code>CallStack</code></a>, which will contain the various <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/call_frame.rs#L58"><code>CallFrame</code></a>, one for each method being executed. For executing <code>main</code>, the call stack will initially be empty, and a new frame will be created to run it. Then, each function invocation will add a new frame to the call stack. When a method’s execution completes, its corresponding frame will be dropped and removed from the call stack.</p>
<p>Most methods will be implemented in Java, and thus their bytecode will be executed. However, <code>rjvm</code> also supports <em>native</em> methods, i.e. methods that are implemented directly by the JVM and not in the Java bytecode. There are quite a few of them in the “lower parts” of the Java API, where interaction with the operating system (for example, to do I/O) or the support runtime is necessary. Some examples of the latter you might have seen include <code>System::currentTimeMillis</code>, <code>System::arraycopy</code>, or <code>Throwable::fillInStackTrace</code>. In <code>rjvm</code>, these are implemented by <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/native_methods_impl.rs">Rust functions</a>.</p>
<p>The JVM is a <a href="https://andreabergia.com/blog/2015/03/stack-based-virtual-machines-1/">stack-based virtual machine</a>, i.e. the bytecode instructions operate mainly on a value stack. There is also a set of local variables, identified by an index, that can be used to store values and pass arguments to methods. These are associated with each call frame in <code>rjvm</code>.</p>
<h2 id="modeling-values-and-objects">
  Modeling values and objects
  <a href="#modeling-values-and-objects">
    
  </a>
</h2>
<p>The type <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/value.rs"><code>Value</code></a> models a possible value of a local variable, stack element, or object’s field, and is implemented as follows:</p>
<div><pre><code data-lang="rust"><span>/// Models a generic value that can be stored in a local variable or on the stack.
</span><span></span><span>#[derive(Debug, Default, Clone, PartialEq)]</span>
<span>pub</span> <span>enum</span> <span>Value</span><span>&lt;</span><span>'a</span><span>&gt;</span> {
    <span>/// An unitialized element. Should never be on the stack,
</span><span></span>    <span>/// but it is the default state for local variables.
</span><span></span>    <span>#[default]</span>
    Uninitialized,

    <span>/// Models all the 32-or-lower-bits types in the jvm: `boolean`,
</span><span></span>    <span>/// `byte`, `char`, `short`, and `int`.
</span><span></span>    Int(<span>i32</span>),

    <span>/// Models a `long` value.
</span><span></span>    Long(<span>i64</span>),

    <span>/// Models a `float` value.
</span><span></span>    Float(<span>f32</span>),

    <span>/// Models a `double` value.
</span><span></span>    Double(<span>f64</span>),

    <span>/// Models an object value
</span><span></span>    Object(AbstractObject<span>&lt;</span><span>'a</span><span>&gt;</span>),

    <span>/// Models a null object
</span><span></span>    Null,
}
</code></pre></div><p>As an aside, this is one place where a sum type, such as Rust’s <code>enum</code>, is a wonderful abstraction - it is great for expressing the fact that a value might be of multiple different types.</p>
<p>For storing objects and their values, I initially used a simple struct called <code>Object</code> containing a reference to the class (to model the object’s type) and a <code>Vec&lt;Value&gt;</code> for storing fields' values. However, when I implemented the garbage collector, I modified this to use a lower-level implementation, with a ton of pointers and casts - quite C style! In the current implementation, an <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/abstract_object.rs"><code>AbstractObject</code></a> (which models a “real” object, or an array) is simply a pointer to an array of bytes, which contain a couple of header words and then the fields' values.</p>
<h2 id="executing-instructions">
  Executing instructions
  <a href="#executing-instructions">
    
  </a>
</h2>
<p>Executing a method means executing its bytecode instructions, one at a time. The JVM has a wide list of instructions (over two hundred!), encoded by one byte in the bytecode. Many instructions are followed by arguments, and some have a variable length. This is modeled in the code by the type <a href="https://github.com/andreabergia/rjvm/blob/main/reader/src/instruction.rs"><code>Instruction</code></a>:</p>
<div><pre><code data-lang="rust"><span>/// Represents a Java bytecode instruction.
</span><span></span><span>#[derive(Clone, Copy, Debug, Eq, PartialEq)]</span>
<span>pub</span> <span>enum</span> <span>Instruction</span> {
    Aaload,
    Aastore,
    Aconst_null,
    Aload(<span>u8</span>),
    <span>// ...
</span></code></pre></div><p>The execution of a method will keep, as mentioned above, a stack and an array of local variables, referred by the instructions via their index. It will also initialize the program counter to zero - that is, the address of the next instruction to execute. The instruction will be processed and the program counter updated - generally advanced by one, but various jump instructions can move it to a different location. These are used to implement all flow control statements, such as <code>if</code>, <code>for</code>, or <code>while</code>.</p>
<p>A special family of instruction is made of those that can invoke another method. There are various ways of resolving <em>which</em> method should be invoked: virtual or static lookup are the main ones, but there are others. After resolving the correct instruction, <code>rjvm</code> will add a new frame to the call stack and start the method’s execution. The method’s return value will be pushed to the stack unless it is <code>void</code>, and execution will resume.</p>
<p>The Java bytecode format is quite interesting and I plan to dedicate a post to the various kind of instructions.</p>
<h2 id="exceptions">
  Exceptions
  <a href="#exceptions">
    
  </a>
</h2>
<p>Exceptions are quite a complex beast to implement since they break the normal control flow, and might return early from a method (and propagate on the call stack!). I am pretty happy with the way I have implemented them, though, and I am going to show you some of the relevant code.</p>
<p>The first thing you need to know is that any <code>catch</code> block corresponds to an entry of a method’s exception table - each entry contains the range of covered program counters, the address for the first instruction in the catch block, and the exception’s class name which the block catches.</p>
<p>Next, the signature of <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/call_frame.rs#L349"><code>CallFrame::execute_instruction</code></a> is as follows:</p>
<div><pre><code data-lang="rust"><span>fn</span> <span>execute_instruction</span>(
    <span>&amp;</span><span>mut</span> self,
    vm: <span>&amp;</span><span>mut</span> Vm<span>&lt;</span><span>'a</span><span>&gt;</span>,
    call_stack: <span>&amp;</span><span>mut</span> CallStack<span>&lt;</span><span>'a</span><span>&gt;</span>,
    instruction: <span>Instruction</span>,
) -&gt; Result<span>&lt;</span>InstructionCompleted<span>&lt;</span><span>'a</span><span>&gt;</span>, MethodCallFailed<span>&lt;</span><span>'a</span><span>&gt;&gt;</span>
</code></pre></div><p>Where the types are:</p>
<div><pre><code data-lang="rust"><span>/// Possible execution result of an instruction
</span><span></span><span>enum</span> <span>InstructionCompleted</span><span>&lt;</span><span>'a</span><span>&gt;</span> {
    <span>/// Indicates that the instruction executed was one of the return family. The caller
</span><span></span>    <span>/// should stop the method execution and return the value.
</span><span></span>    ReturnFromMethod(Option<span>&lt;</span>Value<span>&lt;</span><span>'a</span><span>&gt;&gt;</span>),

    <span>/// Indicates that the instruction was not a return, and thus the execution should
</span><span></span>    <span>/// resume from the instruction at the program counter.
</span><span></span>    ContinueMethodExecution,
}

<span>/// Models the fact that a method execution has failed
</span><span></span><span>pub</span> <span>enum</span> <span>MethodCallFailed</span><span>&lt;</span><span>'a</span><span>&gt;</span> {
    InternalError(VmError),
    ExceptionThrown(JavaException<span>&lt;</span><span>'a</span><span>&gt;</span>),
}
</code></pre></div><p>and the standard Rust <code>Result</code> type is:</p>
<div><pre><code data-lang="rust"><span>enum</span> Result<span>&lt;</span>T, E<span>&gt;</span> {
   Ok(T),
   Err(E),
}
</code></pre></div><p>Thus, executing an instruction can result in four possible states:</p>
<ul>
<li>the instruction was executed successfully, and the execution of the current method can continue (the standard case);</li>
<li>the instruction was executed successfully, and it was a return instruction, thus the current method should return with (optionally) a return value;</li>
<li>the instruction could not be executed, because some internal VM error happened;</li>
<li>or the instruction could not be executed, because a standard Java exception was thrown.</li>
</ul>
<p>The code that <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/call_frame.rs#L298">executes a method</a> is thus as follows:</p>
<div><pre><code data-lang="rust"><span>/// Executes the whole method
</span><span></span><span>impl</span><span>&lt;</span><span>'a</span><span>&gt;</span> CallFrame<span>&lt;</span><span>'a</span><span>&gt;</span> {
    <span>pub</span> <span>fn</span> <span>execute</span>(
        <span>&amp;</span><span>mut</span> self,
        vm: <span>&amp;</span><span>mut</span> Vm<span>&lt;</span><span>'a</span><span>&gt;</span>,
        call_stack: <span>&amp;</span><span>mut</span> CallStack<span>&lt;</span><span>'a</span><span>&gt;</span>,
    ) -&gt; <span>MethodCallResult</span><span>&lt;</span><span>'a</span><span>&gt;</span> {
        self.debug_start_execution();

        <span>loop</span> {
            <span>let</span> executed_instruction_pc <span>=</span> self.pc;
            <span>let</span> (instruction, new_address) <span>=</span>
                Instruction::parse(
                    self.code, 
                    executed_instruction_pc.<span>0.</span>into_usize_safe()
                ).map_err(<span>|</span>_<span>|</span> MethodCallFailed::InternalError(
                    VmError::ValidationException)
                )<span>?</span>;
            self.debug_print_status(<span>&amp;</span>instruction);

            <span>// Move pc to the next instruction, _before_ executing it, 
</span><span></span>            <span>// since we want a "goto" to override this
</span><span></span>            self.pc <span>=</span> ProgramCounter(new_address <span>as</span> <span>u16</span>);

            <span>let</span> instruction_result <span>=</span> 
                self.execute_instruction(vm, call_stack, instruction);
            <span>match</span> instruction_result {
                Ok(ReturnFromMethod(return_value)) <span>=&gt;</span> <span>return</span> Ok(return_value),
                Ok(ContinueMethodExecution) <span>=&gt;</span> { <span>/* continue the loop */</span> }

                Err(MethodCallFailed::InternalError(err)) <span>=&gt;</span> {
                    <span>return</span> Err(MethodCallFailed::InternalError(err))
                }

                Err(MethodCallFailed::ExceptionThrown(exception)) <span>=&gt;</span> {
                    <span>let</span> exception_handler <span>=</span> self.find_exception_handler(
                        vm,
                        call_stack,
                        executed_instruction_pc,
                        <span>&amp;</span>exception,
                    );
                    <span>match</span> exception_handler {
                        Err(err) <span>=&gt;</span> <span>return</span> Err(err),
                        Ok(None) <span>=&gt;</span> {
                            <span>// Bubble exception up to the caller
</span><span></span>                            <span>return</span> Err(MethodCallFailed::ExceptionThrown(exception));
                        }
                        Ok(Some(catch_handler_pc)) <span>=&gt;</span> {
                            <span>// Re-push exception on the stack and continue
</span><span></span>                            <span>// execution of this method from the catch handler
</span><span></span>                            self.stack.push(Value::Object(exception.<span>0</span>))<span>?</span>;
                            self.pc <span>=</span> catch_handler_pc;
                        }
                    }
                }
            }
        }
    }
}
</code></pre></div><p>I know that there are quite a few implementation details in this code, but I hope it gives an idea of how using Rust’s <code>Result</code> and pattern matching maps really well to the description of the behavior above. I have to say I am rather proud of this code. 😊</p>
<h2 id="garbage-collection">
  Garbage collection
  <a href="#garbage-collection">
    
  </a>
</h2>
<p>The final milestone in <code>rjvm</code> has been the implementation of the garbage collector. The algorithm I have chosen is a stop-the-world (which trivially follows from not having threads!) semispace copying collector. I have <a href="https://github.com/andreabergia/rjvm/blob/main/vm/src/gc.rs">implemented</a> a (poorer) variant of <a href="https://en.wikipedia.org/wiki/Cheney%27s_algorithm">Cheney’s algorithm</a> - but I really should go and implement the real thing… 😅</p>
<p>The idea is to split the available memory into two parts, called semispaces: one will be active and used to allocate objects, and the other will be unused. When full, a garbage collection will be triggered and all alive objects will be copied to the other semispace. Then, all references to objects will be updated, so that they point to the new copies. Finally, the role of the two will be swapped - similar to how <a href="https://www.redhat.com/en/topics/devops/what-is-blue-green-deployment">blue-green</a> deployment works.</p>
<p><img src="https://andreabergia.com/images/2023/07/gc1.png" alt="">
<img src="https://andreabergia.com/images/2023/07/gc2.png" alt="">
<img src="https://andreabergia.com/images/2023/07/gc3.png" alt="">
<img src="https://andreabergia.com/images/2023/07/gc4.png" alt=""></p>
<p>This algorithm has the following characteristics:</p>
<ul>
<li>obviously, it wastes a lot of memory (half of the possible max memory!);</li>
<li>allocations are super fast (bumping a pointer);</li>
<li>copying and compacting objects means that it does not have to deal with memory fragmentation;</li>
<li>compacting objects can improve performances, due to better cache line utilization.</li>
</ul>
<p>Real Java VMs use far more sophisticated algorithms, generally <a href="https://www.digitalocean.com/community/tutorials/java-jvm-memory-model-memory-management-in-java">generational garbage collectors</a>, such as G1 or the parallel GC, which use evolutions of the copying strategy.</p>
<h2 id="conclusions">
  Conclusions
  <a href="#conclusions">
    
  </a>
</h2>
<p>In writing <code>rjvm</code>, I learned <strong>a lot</strong> and I had a lot of fun. Can’t ask for more from a side project… but maybe next time I will pick something <em>a bit</em> less ambitious to learn a new programming language! 🤭</p>
<p>As an aside, I want to say that I had a lot of fun with Rust. I think it is a great language, <a href="https://andreabergia.com/blog/2022/11/languages-opinion-part-two-rust/">as I have written before</a>, and I have really enjoyed using it for implementing my JVM!</p>
<p>If you are interested in further details on how <code>rjvm</code> is implemented (and on how the JVM actually works), stay tuned for the upcoming posts!</p>

  </article>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: What are some low cost payment processing alternatives to Stripe? (136 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=36811026</link>
            <guid>36811026</guid>
            <pubDate>Fri, 21 Jul 2023 07:30:16 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=36811026">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="36811249"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811249" href="https://news.ycombinator.com/vote?id=36811249&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>The most low-cost I know of with widest reach (most countries) is <a href="https://www.adyen.com/pricing" rel="nofollow noreferrer">https://www.adyen.com/pricing</a><p>Because you can choose which processor you want to use and there are many low-cost ones, including some inter-bank ones with fixed cost (no %)</p><p>Most shops like WooCommerce and Shopify have ready-to-use plugins for it.</p><p>(I'm not affiliated, but i build e-commerce for brands)
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811342"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811342" href="https://news.ycombinator.com/vote?id=36811342&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>On a related note, you can look at hyperswitch [1], which is an open-source payment orchestrator that supports multiple payment processors. You can self-host it or they have a hosted version as well.<p>1. <a href="https://github.com/juspay/hyperswitch">https://github.com/juspay/hyperswitch</a></p><p>(not affiliated with this project in any way)
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811454"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36811454" href="https://news.ycombinator.com/vote?id=36811454&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Do you use this?<p>I can't seem to figure what their pricing strategy is or who's running it.</p><p>&gt; Free-tier
&gt; Free-tier for startups. Lowest Price for others.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811725"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36811725" href="https://news.ycombinator.com/vote?id=36811725&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Hyperswitch is free to use for the first 10k transactions of the month. After that it costs $0.04 per transaction. It is a payment switch that comes pre integrated with major processors. So as a merchant your business relationship with processors like Stripe or Adyen remains the same
(I'm affiliated with this product)</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811552"><td></td></tr>
                <tr id="36812280"><td></td></tr>
                              <tr id="36811432"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811432" href="https://news.ycombinator.com/vote?id=36811432&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Adyen is a good option, however they have a monthly fixed fee ($120) and looks like they might not onboard small merchants with less than $50M ARR</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812711"><td></td></tr>
            <tr id="36812064"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812064" href="https://news.ycombinator.com/vote?id=36812064&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Are you sure about the fixed fee? Their website says it isn't.<p>&gt; We do not have monthly fees, set-up fees, integration fees or closure fees. We do have a minimum invoice depending on industry or business model. Please speak to a member of our sales team for more details.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812390"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36812390" href="https://news.ycombinator.com/vote?id=36812390&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>The minimum invoice is $120. Though it seems they can waive that if they like you during sales. It's all a little vague which I honestly despise.</span></p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="36811281"><td></td></tr>
                <tr id="36811295"><td></td></tr>
                        <tr id="36812363"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812363" href="https://news.ycombinator.com/vote?id=36812363&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>While we're talking about Stripe alternatives, anyone have a good Stripe Tax alternative?<p>Their pricing is actually insane as they charge per API call rather than transaction amount. That sort of pricing made sense for TaxJar because it was their whole deal, but post-acquisition it would've made more sense to treat the tax product as a complement to the core business and just tack on a small 50c fee for successful tax collection.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812578"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812578" href="https://news.ycombinator.com/vote?id=36812578&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Hey mbStavola, Khem from the Paddle team here. We see quite a few sites switch over from Stripe Tax - offloading tax (including the filing) is our core competency (rather than bundling loads of tools together) and we'd charge per transaction for everything to save you paying unnecessary fees. Happy to chat if you'd like to learn more :)</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812748"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812748" href="https://news.ycombinator.com/vote?id=36812748&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>I'd absolutely love to switch to Paddle, the product seems great. Unfortunately, my business is a marketplace which I don't believe Paddle supports. Happy to be wrong on that though!<p>Are there any plans to have a marketplace offering?
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36812757"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812757" href="https://news.ycombinator.com/vote?id=36812757&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Post your fee schedule and any relevant details <i>here</i> if you don't want your post flagged as spam.<p>"Call me for details" is the worst possible way to engage on HN even if you tack on a smiley.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                        <tr id="36812501"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812501" href="https://news.ycombinator.com/vote?id=36812501&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Have you considered going to one of the archaic platforms and getting a proper merchant account? Moneris, banks (Chase, Wells Fargo), etc? Pretty much all of them will probably offer better support (a customer support line) and cheaper transaction fee.<p>You lose the developer friendliness, so you'll have to debate if that matters to you. To me it never did.</p><p>Or you could take a look at stax <a href="https://staxpayments.com/" rel="nofollow noreferrer">https://staxpayments.com/</a>
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36811298"><td></td></tr>
                <tr id="36811333"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811333" href="https://news.ycombinator.com/vote?id=36811333&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>This is the first I've heard of it. Thank you for bringing it to my attention.<p>Great for those starting in Europe, it seems. And PayPal!!!!
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36811404"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811404" href="https://news.ycombinator.com/vote?id=36811404&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>I've had a bad experience with them (though that was a few years ago). Back then they manually reviewed each website before enabling payment processing (which is fine), but then just didn't get back to us. We tried messaging them for a status update, but only got a generic answer that it'd take another couple days. After three or four weeks and another back and forth we just gave up.<p>As I said, this was a couple years ago, so things might be very different now (we might've been an outlier even back then), but it left a bad taste, because the customer service was so unhelpful, even though they were much smaller than stripe.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36811601"><td></td></tr>
                  <tr id="36811366"><td></td></tr>
                <tr id="36811541"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811541" href="https://news.ycombinator.com/vote?id=36811541&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Braintree is a good chunk more expensive than Stripe for OP's needs if they're in the US.<p>Based on the info they shared:</p><p>• Braintree: 2.59% + $0.49</p><p>&gt; Braintree fees: $17,570 cost for 20K txns/month ($15 AOV)</p><p>• Stripe: 2.9% + $0.30</p><p>&gt; Stripe fees: $14,700 cost for 20K txns/month ($15 AOV)</p><p>So Stripe is around 16% cheaper for their use case on standard pricing alone.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812455"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812455" href="https://news.ycombinator.com/vote?id=36812455&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Though I suppose that 16% does depend on what the average transaction fee is. If you are higher then $15 it does scale towards Braintree being cheaper.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812483"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36812483" href="https://news.ycombinator.com/vote?id=36812483&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>For sure, although I based it on OP's stated transaction value + volume ("20k transactions a month with an average ticket size of $15 per transaction").<p>If you're doing ~$300K/month, it’s likely you would've already spoken to our sales team and we would work out custom pricing for your business.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                        <tr id="36811379"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811379" href="https://news.ycombinator.com/vote?id=36811379&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>I've been using braintree for 9 years on one of my projects, and while it does "work", there doesn't seem to be much innovation happening, sadly.<p>I use them for their direct integration with paypal, who owns them
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812238"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812238" href="https://news.ycombinator.com/vote?id=36812238&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>What features are missing?<p>In contrast, I almost feel like Stripe is innovating too much. I wish they stopped product development, no more redesigns, no more API breaking changes, it already "just works" so why rewrite and "improve" everything endlessly.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                        <tr id="36812415"><td></td></tr>
                <tr id="36812447"><td></td></tr>
            <tr id="36812544"><td></td></tr>
                  <tr id="36812603"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812603" href="https://news.ycombinator.com/vote?id=36812603&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Hey NavyG - Khem from the Paddle team here. We offer a merchant of record model which takes all of the manual work/integrations away and can migrate customers seamlessly over so you can focus on the product. Happy to chat if you'd like to learn more.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811809"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811809" href="https://news.ycombinator.com/vote?id=36811809&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Not at your volume. It would probably cost you more to switch than you'd save, considering the time and training investment involved.<p>Assuming $250k per year at $15/transaction gives ~16,666 transactions a year. With base Stripe pricing, that means you're paying $5k for the $0.30 per transaction fee and another $7.2k for the 2.9% interchange plus fee. So $12.2k in fees per $250k processed, or 4.9% of processed dollars. Adyen is probably going to be about the same given your volume.</p><p>It's important to know that Stripe charges the same fee even though the fee for processing American Express is different from Visa, which is different from Discover and all are more expensive than debit cards. If your business skews highly towards American Express, than Stripe is actually giving you the best rate you could hope for. If you're volume skews debit cards, than Stripe is giving you the worst rate.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811840"><td></td></tr>
                <tr id="36812313"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812313" href="https://news.ycombinator.com/vote?id=36812313&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Other answers are good but keep in mind that other brands can be pretty expensive.  If you are B2B but most of your business is using a credit card, Visa and Mastercard business card and government purchase card transactions are more costly than American Express.<p>I don't think Stripe loses any money on a transaction.  All interchange rates are less than 2.99%, but some are very close.  For very low volume/low ticket price, stripe is a pretty good deal.  But if high volume, there's bound to be a better option that pays off considerably the sooner you implement it.</p><p>Now, if you can get most of your customers using debit cards or ACH-type transactions, you can really achieve a low cost if you use a processor with interchange-based pricing.</p><p>Why support American Express?  Their members tend to be better customers in my experience, and they appreciate that you support their preference.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="36811913"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36811913" href="https://news.ycombinator.com/vote?id=36811913&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>It's how they pay for their best-in-class rewards and offerings. This means card holders are more likely to make big purchases on an Amex than other cards, and why many small ma n' pa shops don't accept them.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811908"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36811908" href="https://news.ycombinator.com/vote?id=36811908&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>In my country, they offer some of the best rewards rates and customer care services. Their no-frills chargeback protections and airport lounge network are somewhat better than what I have with my Visa card. However, Amex lacks offline acceptance and can be quite challenging to meet the "milestones" for annual fee waiver.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811917"><td></td></tr>
                        <tr id="36811939"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811939" href="https://news.ycombinator.com/vote?id=36811939&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Only tangentially related, but does someone know good competitors to Stripe in Japan? I need support for subscriptions in USD and EUR.<p>Last time I checked, there were a few choices (besides Stripe and PayPal), but many supported either only JPY, or only one time payments...
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812018"><td></td></tr>
                  <tr id="36812097"><td></td></tr>
            <tr id="36811272"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811272" href="https://news.ycombinator.com/vote?id=36811272&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Every country has couple, if not dozens, of payment processors. Most of them will support foreign customers as well. So you have hundreds and thousands of options here. Bottom line will be that they are all essentially the same when it comes to functionality and pricing because they are the middlemen between you and visa/mastercard/... and not much else. So there is very little variety possible in this little space. It will mostly come down to how "pretty" their gateway is(unless you are doing direct integration without redirection), how responsive their support team is and how they bill you and provide transaction information. Again, not much variety. So pick the cheapest one and be done with it.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812722"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812722" href="https://news.ycombinator.com/vote?id=36812722&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Exactly my concern, I'm basically looking to get a service provider that is as close to card networks or banks as possible. Not looking at which one is "pretty" at all. Willing to work with that provider to integrate them with my website</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36811300"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36811300" href="https://news.ycombinator.com/vote?id=36811300&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Outside of the US this is not true at all. There are plenty of ways to transfer money without touching the CC networks but instead use interbank communications.
iDeal, Klarna, SEPA: all fixed pricing instead of percentage based fees.
It depends on where you want to provide your services.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36811375"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36811375" href="https://news.ycombinator.com/vote?id=36811375&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>&gt; Outside of the US this is not true at all<p>I think you meant "not entirely true". Yes, there are other options.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36811461"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36811461" href="https://news.ycombinator.com/vote?id=36811461&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>In Poland barely anyone uses cards for online payments. There are couple of different options: one-time automatic transfers that support major banks, BLIK (payment via one-time code), etc.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36811919"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_36811919" href="https://news.ycombinator.com/vote?id=36811919&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Exactly, and it works well. Unfortunately as a customer you don't have the level of protection with these services a CC or a specialised top up "virtual" debit card has. Charge backs etc. It's one of the reasons why these alternative payment methods are a lot less risky to process and therefore cheaper for the merchants.<p>So it makes me wonder why global companies like Google are so "credit card" centric. For example. You can attach a debit card as a payment mechanism for Google cloud services, but it can't be a top up one... Why? It is very annoying I have to open an extra account with overdraft block just to maintain some control on the spending if they suddenly decide to charge a wrong amount.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812307"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_36812307" href="https://news.ycombinator.com/vote?id=36812307&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>&gt; Unfortunately as a customer you don't have the level of protection with these services a CC or a specialised top up "virtual" debit card has.<p>Generally, you'd have to have your bank account hacked to have a reason to reverse a charge on these types of systems. It happens, but very, very rarely and the banks have a lot of reasons to make sure it doesn't happen. That or you gave money to a scammer and that's your own fault (but they'll still help you).</p><p>This is why the fees are much, much lower. Often these systems even verify that you actually have the money and can transfer the amount to your business bank account on the same day. You can't do that with credit cards.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812401"><td><table>  <tbody><tr>    <td indent="6"><img src="https://news.ycombinator.com/s.gif" height="1" width="240"></td><td>
      <center><a id="up_36812401" href="https://news.ycombinator.com/vote?id=36812401&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>&gt; That or you gave money to a scammer and that's your own fault (but they'll still help you).<p>Is it really that merchant-friendly / anti-consumer? I have used chargebacks when merchants fail to deliver as promised, even when most people wouldn’t call them “some scammer”.</p><p>For instance recently a package was shipped that didn’t include one of many items. I asked for a refund, they claimed it was in the package. No worries, I’ll just do a chargeback.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                                                <tr id="36811739"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811739" href="https://news.ycombinator.com/vote?id=36811739&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Hello, 
(I’m co-founder of MonoPayments, white label payment platform for fintechs.)<p>If you want to pay less, you have to use local processors with local currencies. This would be a complex operation.</p><p>1. Establish a company at that jurisdiction
2. Make agreements with processors, it could be banks or wallet providers. 
3. You need a treasurer (or CFO)
4. Foreign Exchange rates will be a concern after a while.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812659"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812659" href="https://news.ycombinator.com/vote?id=36812659&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>I currently operate only in US and I am willing to put in the effort for integration, PCI compliance etc. Do you have any recommendations for the local processors you mentioned?</span></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="36811841"><td></td></tr>
                <tr id="36812584"><td></td></tr>
                <tr id="36812600"><td></td></tr>
                <tr id="36812627"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_36812627" href="https://news.ycombinator.com/vote?id=36812627&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>Khem from Paddle here - we'll be able to fight chargebacks on your behalf too as part of that :)<p>The price above includes the entire payments stack (filing and remitting of taxes too), so you're compliant globally out of the box.</p><p>We often help teams avoid having to hire lots of external accounting resource.</p><p>Happy to chat if you'd like to learn more :)
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812754"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_36812754" href="https://news.ycombinator.com/vote?id=36812754&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Curious: you must have done a lot of groundwork to provide the whole stack as a solution, would love to hear from you how you internally select the processors you work with. Or are you directly integrated with banks and card networks?</span></p></div></td></tr>
        </tbody></table></td></tr>
                                    <tr id="36812680"><td></td></tr>
            <tr id="36811399"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811399" href="https://news.ycombinator.com/vote?id=36811399&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Has anyone used Helcim or Stax? These processors pricing seems to be around $0.15 per transaction. If this is true why don't so many people use it?</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812474"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812474" href="https://news.ycombinator.com/vote?id=36812474&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>I’ve used stax in the past. It is cheaper than stripe, but you’re also paying a monthly fee. In our case, it was $120 a month for a physical terminal in the office. I don’t know what the differences are for API transactions. It wasn’t something we were doing.<p>We are now with mxmerchant and they are okay? I’ve never seen a credit card merchant go down and not take transactions, but in the 1.5 years we’ve used them, they’ve gone down twice.</p><p>But we need to use them because they are the only processor the software uses and we need to now take cards through their system
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812771"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_36812771" href="https://news.ycombinator.com/vote?id=36812771&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Interesting, have you also tried online payments (card not present) with them? If so how is the reliability in that case?</span></p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="36812163"><td></td></tr>
                <tr id="36812678"><td></td></tr>
                  <tr id="36812264"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812264" href="https://news.ycombinator.com/vote?id=36812264&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Full disclosure, I work for Stripe. The question you want to ask is why are these alternatives cheaper than Stripe? What is the tradeoff.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="36812794"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812794" href="https://news.ycombinator.com/vote?id=36812794&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Yes, want to understand the trade off and would like to know what the challenge is in integrating directly with a payment provider that is closer to the networks / banks. I love Stripe for how easy it is to get started with but I am looking for opportunities to save cost further but getting closer to the acquirer</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36812336"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812336" href="https://news.ycombinator.com/vote?id=36812336&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>One obvious answer is that Stripe has name recognition and fame, which means they can afford to charge more and get away with it. And smaller companies have an incentive to prioritize growth and user acquisition over immediate profit.<p>But what other tradeoffs are you implying there to be? I understand in a vague sense that payment processors deal with a lot of ugly behind-the-scenes stuff like mind-boggling varieties of frauds, dispute resolutions, regulations, etc., but what exactly is the difference in this specific case, and how might it affect a potential user in practice?
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                  <tr id="36812369"><td></td></tr>
            <tr id="36811875"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36811875" href="https://news.ycombinator.com/vote?id=36811875&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Depends on where you tap into the digital payments chain. At the highest level (with highest fees) are the payfacs (Payment facilitators). Above them are the payment acquirers with comparatively low fees, higher joining fees, more rigorous certification process and the PCI compliance is a chore you need to repeat every year. Above that is not that easy to tap into such as direct link to credit card networks and banks. At your volume, PayFac like Stripe is the best option IMO.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36812229"><td></td></tr>
                <tr id="36812682"><td></td></tr>
                  <tr id="36812058"><td></td></tr>
                <tr id="36812062"><td></td></tr>
            <tr id="36812085"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812085" href="https://news.ycombinator.com/vote?id=36812085&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>This is definitely the more robust, durable and cheaper alternative. But clearly is a utopia for today.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="36812083"><td></td></tr>
                  <tr id="36811751"><td></td></tr>
                <tr id="36812255"><td></td></tr>
                  <tr id="36812084"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_36812084" href="https://news.ycombinator.com/vote?id=36812084&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><p><span>For over a decade I've been having free bank accounts with free Visa and MasterCard debit and credit cards, and I've been using them with services that allow me to create as many free virtual credit cards I wish.<p>I thought these services were already widespread.</p><p>Are people still paying for debit and credit cards?
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="36812262"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_36812262" href="https://news.ycombinator.com/vote?id=36812262&amp;how=up&amp;goto=item%3Fid%3D36811026"></a></center>    </td><td><br><div>
                  <p><span>Hey I was referring to accepting payments online on my website. So this is the payment processing fees I was referring to</span></p></div></td></tr>
        </tbody></table></td></tr>
                  </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Quench of LHC inner triplet magnet causes a small leak with major consequences (196 pts)]]></title>
            <link>https://home.cern/news/news/accelerators/accelerator-report-quench-lhc-inner-triplet-magnet-causes-small-leak-major</link>
            <guid>36811018</guid>
            <pubDate>Fri, 21 Jul 2023 07:29:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://home.cern/news/news/accelerators/accelerator-report-quench-lhc-inner-triplet-magnet-causes-small-leak-major">https://home.cern/news/news/accelerators/accelerator-report-quench-lhc-inner-triplet-magnet-causes-small-leak-major</a>, See on <a href="https://news.ycombinator.com/item?id=36811018">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>At 1.00 a.m. + 17 seconds on Monday, 17 July, the LHC beams were dumped after only 9 minutes in collision due to a radiofrequency interlock caused by an electrical perturbation. Approximately 300 milliseconds after the beams were cleanly dumped, several superconducting magnets around the LHC quenched – i.e. they lost their superconducting state. Among these magnets were the inner triplet magnets located to the left of Point 8 (LHCb), which play a crucial role in focusing the beams for the LHCb experiment.</p>

<p>While this sequence of events may not happen very often during beam operation, it is not exceptional for the LHC, as occasional quenches of some superconducting magnets are to be expected.</p>

<p>In this particular case, the electrical perturbation caused the quench protection system (QPS) to trigger the quench heaters of the magnets concerned. These quench heaters consist of an electrical resistor embedded in the magnet coils; they are designed to heat up quickly when a localised quench occurs somewhere in the magnet, in order to effectively bring the whole magnet out of the superconducting state in a controlled and homogenous manner. During such a quench, the liquid helium in the magnet warms up and turns into a gas that is recovered by the cryogenic system to be re-liquified, ready to cool down the magnets again.</p>

<figure id="CERN-HOMEWEB-PHO-2023-098-1"><a href="https://cds.cern.ch/images/CERN-HOMEWEB-PHO-2023-098-1" title="View on CDS"><img alt="home.cern,Accelerators" src="https://cds.cern.ch/images/CERN-HOMEWEB-PHO-2023-098-1/file?size=large"></a>
<figcaption>The cryostat containing the inner triplet magnets. The tiny amount of very cold helium that replaced the insulation vacuum cooled down the cryostat, causing condensation of the tunnel air on the cryostat, which then froze. Several hours later, the thin layer of ice had melted again as the cryostat returned to room temperature. (Image: CERN)</figcaption></figure><p>Despite this being a normal and expected behaviour, the mechanical stresses involved in this process are significant and, in very rare cases, can lead to damage. Unfortunately, in the case of the inner triplet magnet located to the left of Point 8, a small leak has appeared between the cryogenic circuit, which contains the liquid helium, and the insulation vacuum that separates the cold magnet from the warm outer vessel, known as the cryostat. This vacuum barrier is crucial for preventing heat transfer from the surrounding LHC tunnel to the interior of the cryostat (this is similar to the functioning of a thermos flask). As a result of the leak, this insulation was lost: the insulation vacuum filled with helium gas, cooling down the cryostat and causing condensation to form and freeze on the outside.</p>

<p>As I write, investigations are ongoing to identify the source of the leak, to allow a repair strategy to be elaborated. Nevertheless, it is clear that an intervention with the inner triplet magnet at room temperature will be required. This incident will probably have a great impact on the LHC schedule, with machine operation unlikely to resume for at least several weeks.</p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nanosecond timestamp collisions are common (205 pts)]]></title>
            <link>https://www.evanjones.ca/nanosecond-collisions.html</link>
            <guid>36810818</guid>
            <pubDate>Fri, 21 Jul 2023 07:01:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.evanjones.ca/nanosecond-collisions.html">https://www.evanjones.ca/nanosecond-collisions.html</a>, See on <a href="https://news.ycombinator.com/item?id=36810818">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<h3>[ 2023-July-20 17:39 ]</h3>
<p>I was wondering: how often do nanosecond timestamps collide on modern systems? The answer is: very often, like 5% of all samples, when reading the clock on all 4 physical cores at the same time. As a result, I think it is unsafe to assume that a raw nanosecond timestamp is a unique identifier.</p>

<p>I wrote a <a href="https://github.com/evanj/nanocollision">small test program</a> to test this. I used Go, which records both the "absolute" time and the "monotonic clock" relative time on each call to time.Now(), so I compared both the relative difference between consecutive timestamps, as well as just the absolute timestamps. As expected, the behavior depends on the system, so I observe very different results on Mac OS X and Linux. On Linux, within a single thread, both the absolute and monotonic times always increase. On my system, the minimum increment was 32 ns. Between threads, approximately 5% of the absolute times were exactly the same as other threads. Even with 2 threads on a 4 core system, approximately 2% of timestamps collided. On Mac OS X: the absolute time has microsecond resolution, so there are an astronomical number of collisions when I repeat this same test. Even within a thread I often observe the monotonic clock not increment.</p>

<p>See the <a href="https://github.com/evanj/nanocollision">test program on Github</a> if you are curious.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amazon shuts down customer’s smart home (196 pts)]]></title>
            <link>https://forums.macrumors.com/threads/amazon-shuts-down-customers-smart-home.2392704/</link>
            <guid>36810075</guid>
            <pubDate>Fri, 21 Jul 2023 04:42:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://forums.macrumors.com/threads/amazon-shuts-down-customers-smart-home.2392704/">https://forums.macrumors.com/threads/amazon-shuts-down-customers-smart-home.2392704/</a>, See on <a href="https://news.ycombinator.com/item?id=36810075">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>
			Hello, everybody. How's it going? I hope you're loving a lovely day. Today, I would like to go over reason number 80 million that you should not be having stuff in your house.</p><p>

Connect to Amazon servers for things like critical infrastructure, whether it is your camera systems, your doorbell, or any part of your home. This comes from Mr. Brandon Jackson.</p><p>

It says, On Wednesday, May 31, 2023, I finally regained access to my Amazon account after an unexpected and unwarranted lockout that lasted about a week from Thursday, May 25. This wasn't just a simple inconvenience. I have a smart home.</p><p>

Smart home, and my primary method of interfacing with all the devices and automations is through Amazon Echo devices via Alexa. The incident left me with a house full of unresponsive devices, a silent Alexa, and a lot of questions. The sequence of events that led to this digital exile began.</p><p>

Innocuously enough, a package was delivered to my house on Wednesday, May 24, and everything seemed fine. The following day, however, I found that my Echo show had signed out, and I was unable to interact with my smart home devices. My initial assumption was that somebody might have attempted to access my account repeatedly, triggering a lockout.</p><p>

I use a fairly old email address from my Amazon account, and it's plausible that an old password might have been exposed in a past data breach. However, I currently use strong autogenerated passwords via Apple and employ two factor authentication with an authenticator app, so unauthorized access seemed unlikely. I swiftly checked my other accounts social media, streaming, et cetera, to ensure that I hadn’t been compromised.</p><p>

All seemed normal, with no flood of notifications from Microsoft Authenticator that would indicate an attempted breach. Puzzled, I found the advice of the Amazon app and dialed the customer service number it provided. That's when things began to take a surreal turn.</p><p>

The representative told me that I should have received an email, which I indeed found in my inbox. It was from an executive at Amazon. As I dialed the number provided in the email, I half wondered if Amazon was experiencing some issues and I was unwittingly falling for a scam.</p><p>

You don't expect trillion dollar companies to email you and then have them say, call me back, bro, so I completely understand where he's coming from. When I connected with the executive, they asked if I knew why my account had been locked. When I answered, I was unsure.</p><p>

Their tone turned somewhat accusatory. I was told that the driver who had delivered my package reported receiving racist remarks from my ring doorbell. It's actually a UFI, but I'll let that slide.</p><p>

Here's where things got even more baffling. First, I have multiple cameras recording everything that happens on my property. By the way, I hope those cameras are going to a local NVR.</p><p>

If the driver's claims were accurate, I could easily verify them with video footage. Second, most delivery drivers in my area share the same race as me and my family. It seems highly unlikely that we would make such remarks.</p><p>

Finally, when I asked what time the alleged incident occurred, I realized it was practically impossible for anyone in my house to have made those comments, as nobody was home around that time, approximately six five P-M-I reviewed the footage and confirmed that no such comments had been made. Instead, the UFI doorbell had issued an automated response. Excuse me, can I help you? The driver who was walking away and wearing headphones must have misinterpreted the message.</p><p>

Nevertheless, by the following day, my Amazon account was locked and all my Echo devices were logged out. Let me be clear. I fully support Amazon taking measures to ensure the safety of their drivers.</p><p>

However, I question why my entire smart home had to be rendered unusable during their internal investigation. It seems more sensible to impose a temporary delivery restriction or purchasing ban on my account. Submitting video evidence from multiple angles right after my initial call with the executive appeared to have little impact on their decision to disable my account.</p><p>

This incident has led me to question my relationship with Amazon. After nearly a decade of loyalty, I’ve been given a harsh reminder that a misunderstanding can lead to such drastic measures. It seems more reasonable to handle such issues in a more compartmentalized way, rather than a blanket shutdown of all services.</p><p>

Due to this experience, I'm seriously considering discontinuing my use of Amazon Echo devices and will caution others about this incident. BlackBerry, you are on the wrong side of the chair, and if you step on my keyboard and hit the spacebar, you are going to get it, girl. You're going to get it.</p><p>

Left side of the chair, Barry. Good, Barry. Due to this experience, I am seriously considering discontinuing my use of Amazon Echo devices and will caution others about this incident.</p><p>

This ordeal has made the case for a more personalized home assistance system, perhaps using Raspberry Pi devices scattered around the house. Despite promptly submitting video evidence immediately upon learning of my issue, my account remained locked. The timing couldn't have been worse.</p><p>

The onset of Labor Day weekend was approaching, and I was keen to resolve the issue before the long weekend. However, despite numerous calls and emails, it wasn't until Friday afternoon that I had received confirmation that the investigation had started. I was told to expect the response within two business days, meaning not until Tuesday of the following week at the earliest.</p><p>

In the end, my account was unlocked on Wednesday with no follow up email to inform me of the resolution. This is one of those things where instead of this drives me nuts. So instead of apologizing for the fact that they ****ed with somebody who purchased items in their home that apparently they don’t have permission to use, if a delivery driver mishears a ****ing automated doorbell, that they can't even just say, hey, man, we're sorry we ****ed up.</p><p>

We realized there was nobody actually there. Have you ever dealt with one of those situations where there’s somebody in your life that does something massively screwed up and they realize that they did something massively screwed up, and then the moment they realize it and they undo whatever it is that they did, they just walk away? Or they just say well, they just don't say anything. Don't even make eye contact.</p><p>

Rather than be mad enough to go, hey, man, I'm sorry I screwed up. It's just a piece of **** way to behave. Speaking of piece of **** ways to behave, somebody is supposed to stay on the left side of the chair like Barry.</p><p>

This incident stands as a stark reminder of the need for better customer service and a more nuanced approach to incident management. Through sharing my experience, I hope to encourage Amazon to reform and rethink their approach to handling such situations. In the future, it's essential for customers tofeel confident in the security and reliability of their services, especially when those services are integral tothe functionality of their homes.</p><p>

It's time for Amazon to take a more customer focused approach to problem solving and conflict resolution. So let's get this straight. If a delivery driver for the company disapproves of you for any reason, you can have your actual account shut down.</p><p>

The devices that you use in your home may not work. Have you ever had an issue with a postal worker, an Ups delivery person, a FedEx delivery person before in your life? Can you imagine if that issue that you had with that delivery person resulted in items inside of your home that you bought and paid for, no longer functioning and working? This is why I think it is paramount that the infrastructure in your home be as sovereign as possible. Do not have your light switches or your radios or anything else in your home connecting to other people's servers to get permission to turn on.</p><p>

That is a mess waiting to happen, because again, all it takes is an Amazon delivery driver who's having a bad day to literally ruin your home. An unfounded accusation of racism means that infrastructure inside your home can stop working. This is the problem.</p><p>

When you give too much control to one company, and particularly when that control that you're giving is your devices inside of your home connecting to their servers. You could literally be in a situation where somebody making an unfounded, untrue, demonstrably proven untrue accusation of racism against you causes your internal home infrastructure to stop working. That's ****ing insane.</p><p>

I completely understand and respect that. The target demographic of this channel. The people that tend to show up in my comment section and show up to meetups are not the people who need to hear this public service announcement.<br>
You guys are ripping the computers out of as many things as possible that do not read a computer because you don't want to live in a world where the infrastructure in your house stops working because some douchebag at Amazon decided to listen to the unverified claims of someone who misheard a ring doorbell. However, there are many other people out there that actually believe it's a good idea to have the infrastructure in their house connect to somebody else's servers. Sending those other people information, making their house completely dependent on some douchebag that works at Amazon for the ability of their devices at home to work that doesn't even have the courtesy to apologize when proven that they were wrong for turning off what you bought and paid for.</p><p>

Don't have this stuff inside your house. You don't need a smart home. Am I allowed to say that you don’t need a home that connects to other people's servers? You are fine without it.</p><p>

You don't need it. Now, if you want a light to turn on, turn the ****ing switch. What I have over here, if I want to listen to music, got a computer.</p><p>

That computer has a program that runs locally, plays my music when I wand that I ripped off of my albums. That plugs into a nice little rotel RB 1090 amplifier over there. That thing doesn't connect to the internet at all.</p><p>

Jeff Bezos can't turn that thing off if he wants to. Hell, that thing doesn't even have a remote. I had to get a separate thing that you can plug an item into that doesn't have a remote that is literally just a relay so that I can turn it on and off when I want to without having to get up and walk over to it.</p><p>

That plugs into a set of nice Vanderstein model threes. I got all my acoustic panels over here. This thing sounds way better than some ****** ass little cloud bluetooth speaker.</p><p>

Listen to this. Ten times better than the Amazon ********. Really, honestly, truly, in your heart of hearts, how much **** in your house do you need to connect to the ****ing internet? And goddamn, it sounds great.</p><p>

And it don't connect to **** that I don't want it to connect to. And that's how it is. I have a folder of music.</p><p>

I play it. It's beautiful. It's great.</p><p>

I can have a nice romantic evening. I could play shastakovich. I could play opera whatever I want.</p><p>

I got acoustic panels everywhere. There are so many ways to have fun in your home without connecting Amazon. Why do you got to connect Amazon? The turn all your **** on.</p><p>

Turn the **** on yourself. That's it for today. And as always, I hope you learned something.</p><p>

I'll see you in the next video. Bye now.
		</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Study finds billions of nanoplastics released when microwaving containers (435 pts)]]></title>
            <link>https://news.unl.edu/newsrooms/today/article/nebraska-study-finds-billions-of-nanoplastics-released-when-microwaving/</link>
            <guid>36809565</guid>
            <pubDate>Fri, 21 Jul 2023 03:10:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.unl.edu/newsrooms/today/article/nebraska-study-finds-billions-of-nanoplastics-released-when-microwaving/">https://news.unl.edu/newsrooms/today/article/nebraska-study-finds-billions-of-nanoplastics-released-when-microwaving/</a>, See on <a href="https://news.ycombinator.com/item?id=36809565">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <p>The fastest way to heat food and drink might also rank as the fastest route to ingesting massive quantities of minuscule plastic particles, says new research from the University of&nbsp;Nebraska–Lincoln.</p>

<p>Experiments have shown that microwaving plastic baby food containers available on the shelves of U.S. stores can release huge numbers of plastic particles — in some cases, <a href="https://pubs.acs.org/doi/10.1021/acs.est.3c01942">more than 2 billion nanoplastics and 4 million microplastics</a> for every square centimeter of&nbsp;container.</p>

<p>Though the health effects of consuming micro- and nanoplastics remain unclear, the Nebraska team further found that three-quarters of cultured embryonic kidney cells had died after two days of being introduced to those same particles. A 2022 report from the World Health Organization recommended limiting exposure to such&nbsp;particles.</p>

<p>“It is really important to know how many micro- and nanoplastics we are taking in,” said Kazi Albab Hussain, the study’s lead author and a doctoral student in civil and environmental engineering at the University of Nebraska–Lincoln. “When we eat specific foods, we are generally informed or have an idea about their caloric content, sugar levels, other nutrients. I believe it’s equally important that we are aware of the number of plastic particles present in our&nbsp;food.</p>

<p>“Just as we understand the impact of calories and nutrients on our health, knowing the extent of plastic particle ingestion is crucial in understanding the potential harm they may cause. Many studies, including ours, are demonstrating that the toxicity of micro- and nanoplastics is highly linked to the level of&nbsp;exposure.”</p>

<p>The team embarked on its study in 2021, the same year that Hussain became a father. While prior research had investigated the release of plastic particles from baby bottles, the team realized that no studies had examined the sorts of plastic containers and pouches that Hussain found himself shopping for, and that millions of other parents regularly do,&nbsp;too.</p>

<p>Hussain and his colleagues decided to conduct experiments with two baby food containers made from polypropylene and a reusable pouch made of polyethylene, both plastics approved by the U.S. Food and Drug Administration. In one experiment, the researchers filled the containers with either deionized water or 3% acetic acid — the latter intended to simulate dairy products, fruits, vegetables and other relatively acidic consumables — then heated them at full power for three minutes in a 1,000-watt microwave. Afterward, they analyzed the liquids for evidence of micro- and nanoplastics: the micro being particles at least 1/1,000th of a millimeter in diameter, the nano any particles&nbsp;smaller.</p>

<p>The actual number of each particle released by the microwaving depended on multiple factors, including the plastic container and the liquid within it. But based on a model that factored in particle release, body weight, and per-capita ingestion of various food and drink, the team estimated that infants drinking products with microwaved water and toddlers consuming microwaved dairy products are taking in the greatest relative concentrations of plastic. Experiments designed to simulate the refrigeration and room-temperature storage of food or drink over a six-month span also suggested that both could lead to the release of micro- and&nbsp;nanoplastics.</p>

<p>“For my baby, I was unable to completely avoid the use of plastic,” Hussain said. “But I was able to avoid those (scenarios) which were causing more of the release of micro- and nanoplastics. People also deserve to know those, and they should choose&nbsp;wisely.”</p>

<p>With the help of Svetlana Romanova from the University of Nebraska Medical Center, the team then cultured and exposed embryonic kidney cells to the actual plastic particles released from the containers — a first, as far as Hussain can tell. Rather than introduce just the number of particles released by one container, the researchers instead exposed the cells to particle concentrations that infants and toddlers might accumulate over days or from multiple&nbsp;sources.</p>




<p>After two days, just 23% of kidney cells exposed to the highest concentrations had managed to survive — a much higher mortality rate than that observed in earlier studies of micro- and nanoplastic toxicity. The team suspects that kidney cells might be more susceptible to the particles than are other cell types examined in prior research. But those earlier studies also tended to examine the effects of larger polypropylene particles, some of them potentially too large to penetrate cells. If so, the Hussain-led study could prove especially sobering: Regardless of its experimental conditions, the Husker team found that polypropylene containers and polyethylene pouches generally release about 1,000 times more nanoplastics than&nbsp;microplastics.</p>

<p>The question of cell infiltration is just one among many that will require answers, Hussain said, before determining the true risks of consuming micro- and nanoplastics. But to the extent that they do pose a health threat — and that plastics remain a go-to for baby food storage — parents would have a vested interest in seeing that the companies manufacturing plastic containers seek out viable alternatives, he&nbsp;said.</p>

<p>“We need to find the polymers which release fewer (particles),” Hussain said. “Probably, researchers will be able to develop plastics that do not release any micro- or nanoplastics — or, if they do, the release would be&nbsp;negligible.</p>

<p>“I am hopeful that a day will come when these products display labels that read ‘microplastics-free’ or&nbsp;‘nanoplastics-free.’”</p>

<p>The team reported its findings in the journal <a href="https://pubs.acs.org/doi/10.1021/acs.est.3c01942">Environmental Science <span>&amp;</span> Technology</a>. Hussain and Romanova authored the study with the University of Nebraska–Lincoln’s Yusong Li, Mathias Schubert, Yongfeng Lu, Lucía Fernández-Ballester, Bing Wang, Xi Huang, Jesse Kuebler, Dong Zhang and Ilhami Okur. The researchers received support from the National Science Foundation and the Buffett Early Childhood&nbsp;Institute.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sub-Pixel Distance Transform (154 pts)]]></title>
            <link>https://acko.net/blog/subpixel-distance-transform/</link>
            <guid>36809404</guid>
            <pubDate>Fri, 21 Jul 2023 02:40:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://acko.net/blog/subpixel-distance-transform/">https://acko.net/blog/subpixel-distance-transform/</a>, See on <a href="https://news.ycombinator.com/item?id=36809404">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<h2>SDFs</h2>

<p>The idea behind SDFs is quite simple. To draw a crisp, anti-aliased shape at any size, you start from a field or image that records the distance to the shape's edge at every point, as a gradient. Lighter grays are inside, darker grays are outside. This can be a lower resolution than the target.</p>

</div><div><p>Then you increase the contrast until the gradient is exactly 1 pixel wide at the target size. You can sample it to get a perfectly anti-aliased opacity mask:</p></div><div>

<p>This works fine for text at typical sizes, and handles fractional shifts and scales perfectly with zero shimmering. It's also reasonably correct from a signal processing math point-of-view: it closely approximates averaging over a pixel-sized circular window, i.e. a low-pass convolution.</p>

<p>Crucially, it takes a rendered glyph as input, which means I can remain blissfully unaware of TrueType font specifics, and bezier rasterization, and just offload that to an existing library.</p>

<p>To generate an SDF, I started with MapBox's <a href="https://github.com/mapbox/tiny-sdf" target="_blank">TinySDF</a> library. Except, what comes out of it is wrong:</p>

</div><div>

<p>The contours are noticeably wobbly and pixelated. The only reason the glyph itself looks okay is because the errors around the zero-level are symmetrical and cancel out. If you try to dilate or contract the outline, which is supposed to be one of SDF's killer features, you get ugly gunk.</p>

<p>Compare to:</p>

</div><div>

<p>The original <a href="https://steamcdn-a.akamaihd.net/apps/valve/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf" target="_blank">Valve paper</a> glosses over this aspect and uses high resolution inputs (4k) for a highly downscaled result (64). That is not an option for me because it's too slow. But I did get it to work. As a result Use.GPU has a novel subpixel-accurate distance transform (ESDT), which even does emoji. It's a combination CPU/GPU approach, with the CPU generating SDFs and the GPU rendering them, including all the debug viz.</p>


<h2>The Classic EDT</h2>

<p>The common solution is a <a href="https://cs.brown.edu/~pff/papers/dt-final.pdf">Euclidean Distance Transform</a>. Given a binary mask, it will produce an <em>unsigned</em> distance field. This holds the squared distance <code>d²</code> for either the inside or outside area, which you can <code>sqrt</code>.</p>

</div><div>

<p>Like a Fourier Transform, you can apply it to 2D images by applying it horizontally on each row X, then vertically on each column Y (or vice versa). To make a <em>signed</em> distance field, you do this for both the inside and outside separately, and then combine the two as <code>inside – outside</code> or vice versa.</p>

<p>The algorithm is one of those clever bits of 80s-style C code which is <code>O(N)</code>, has lots of 1-letter variable names, and is very CPU cache friendly. Often copy/pasted, but rarely understood. In TypeScript it looks like this, where <code>array</code> is modified in-place and <code>f</code>, <code>v</code> and <code>z</code> are temporary buffers up to 1 row/column long. The arguments <code>offset</code> and <code>stride</code> allow the code to be used in either the X or Y direction in a flattened 2D&nbsp;array.</p>

<pre><code>for (let q = 1, k = 0, s = 0; q &lt; length; q++) {
  f[q] = array[offset + q * stride];

  do {
    let r = v[k];
    s = (f[q] - f[r] + q * q - r * r) / (q - r) / 2;
  } while (s &lt;= z[k] &amp;&amp; --k &gt; -1);

  k++;
  v[k] = q;
  z[k] = s;
  z[k + 1] = INF;
}

for (let q = 0, k = 0; q &lt; length; q++) {
  while (z[k + 1] &lt; q) k++;
  let r = v[k];
  let d = q - r;
  array[offset + q * stride] = f[r] + d * d;
}
</code></pre>


<p>To explain what this code does, let's start with a naive version instead.</p>

</div><div>

<p>Given a 1D input array of zeroes (filled), with an area masked out with infinity (empty):</p>

<pre><code>O = [·, ·, ·, 0, 0, 0, 0, 0, ·, 0, 0, 0, ·, ·, ·]</code></pre>


<p>Make a matching sequence <code>… 3 2 1 0 1 2 3 …</code> for each element, centering the 0 at each index:</p>

<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14] + ∞
[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13] + ∞
[2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12] + ∞
[3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11] + 0
[4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10] + 0
[5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 0
[6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8] + 0
[7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7] + 0
[8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6] + ∞
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5] + 0
[10,9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4] + 0
[11,10,9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3] + 0
[12,11,10,9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2] + ∞
[13,12,11,10,9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1] + ∞
[14,13,12,11,10,9, 8, 7, 6, 5, 4, 3, 2, 1, 0] + ∞
</code></pre>


<p>You then add the value from the array to each element in the row:</p>

<pre><code>[∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]
[∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]
[∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]
[3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11]
[4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10]
[5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8]
[7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7]
[∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]
[10,9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4]
[11,10,9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3]
[∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]
[∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]
[∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]
</code></pre>


<p>And then take the minimum of each column:</p>

<pre><code>P = [3, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 3]</code></pre>


<p>This sequence counts up inside the masked out area, away from the zeroes. This is the positive distance field P.</p>

<p>You can do the same for the inverted mask:</p>

<pre><code>I = [0, 0, 0, ·, ·, ·, ·, ·, 0, ·, ·, ·, 0, 0, 0]</code></pre>


<p>to get the complementary area, i.e. the negative distance field N:</p>

<pre><code>N = [0, 0, 0, 1, 2, 3, 2, 1, 0, 1, 2, 1, 0, 0, 0]</code></pre>


<p>That's what the EDT does, except it uses square distance <code>… 9 4 1 0 1 4 9 …</code>:</p>

</div><div>

<p>When you apply it a second time in the second dimension, these outputs are the new input, i.e. values other than <code>0</code> or <code>∞</code>. It still works because of Pythagoras' rule: <code>d² = x² + y²</code>. This wouldn't be true if it used linear distance instead. The net effect is that you end up intersecting a series of parabolas, somewhat like a 1D slice of a Voronoi diagram:</p>

<pre><code>I' = [0, 0, 1, 4, 9, 4, 4, 4, 1, 1, 4, 9, 4, 9, 9]</code></pre>


</div><div><p>Each parabola sitting above zero is the 'shadow' of a zero-level paraboloid located some distance in a perpendicular dimension:</p></div><div>

<p>The code is just a more clever way to do that, without generating the entire <code>N²</code> grid per row/column. It instead scans through the array left to right, building up a list <code>v[k]</code> of significant minima, with thresholds <code>s[k]</code> where two parabolas intersect. It adds them as candidates (<code>k++</code>) and discards them (<code>--k</code>) if they are eclipsed by a newer value. This is the first <code>for</code>/<code>while</code> loop:</p>

<pre><code>for (let q = 1, k = 0, s = 0; q &lt; length; q++) {
  f[q] = array[offset + q * stride];

  do {
    let r = v[k];
    s = (f[q] - f[r] + q * q - r * r) / (q - r) / 2;
  } while (s &lt;= z[k] &amp;&amp; --k &gt; -1);

  k++;
  v[k] = q;
  z[k] = s;
  z[k + 1] = INF;
}
</code></pre>


<p>Then it goes left to right again (<code>for</code>), and fills out the values, skipping ahead to the right minimum (<code>k++</code>). This is the squared distance from the current index <code>q</code> to the nearest minimum <code>r</code>, plus the minimum's value <code>f[r]</code> itself. The <a href="https://cs.brown.edu/~pff/papers/dt-final.pdf" target="_blank">paper</a> has more details:</p>

<pre><code>for (let q = 0, k = 0; q &lt; length; q++) {
  while (z[k + 1] &lt; q) k++;
  let r = v[k];
  let d = q - r;
  array[offset + q * stride] = f[r] + d * d;
}
</code></pre>



<h2>The Broken EDT</h2>

<p>So what's the catch? The above assumes a binary mask.</p>

</div><div>

<p>As it happens, if you try to subtract a binary N from P, you have an off-by-one error:</p>

<pre><code>    O = [·, ·, ·, 0, 0, 0, 0, 0, ·, 0, 0, 0, ·, ·, ·]
    I = [0, 0, 0, ·, ·, ·, ·, ·, 0, ·, ·, ·, 0, 0, 0]

    P = [3, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 3]
    N = [0, 0, 0, 1, 2, 3, 2, 1, 0, 1, 2, 1, 0, 0, 0]

P - N = [3, 2, 1,-1,-2,-3,-2,-1, 1,-1,-2,-1, 1, 2, 3]
</code></pre>


<p>It goes directly from <code>1</code> to <code>-1</code> and back. You could add +/- 0.5 to fix that.</p>

</div><div>

<p>But if there is a gray pixel in between each white and black, which we classify as both inside (<code>0</code>) and outside (<code>0</code>), it seems to work out just fine:</p>

<pre><code>    O = [·, ·, ·, 0, 0, 0, 0, 0, ·, 0, 0, 0, ·, ·, ·]
    I = [0, 0, 0, 0, ·, ·, ·, 0, 0, 0, ·, 0, 0, 0, 0]

    P = [3, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 3]
    N = [0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0]

P - N = [3, 2, 1, 0,-1,-2,-1, 0, 1, 0,-1, 0, 1, 2, 3]
</code></pre>


<p>This is a realization that somebody must've had, and they <a href="https://github.com/mapbox/tiny-sdf/blob/main/index.js#L90" target="_blank">reasoned on</a>: "<em>The above is correct for a 50% opaque pixel, where the edge between inside and outside falls exactly in the middle of a pixel."</em></p>

<p><em>"Lighter grays are more inside, and darker grays are more outside. So all we need to do is treat <code>l = level - 0.5</code> as a signed distance, and use <code>l²</code> for the initial inside or outside value for gray pixels. This will cause either the positive or negative distance field to shift by a subpixel amount <code>l</code>. And then the EDT will propagate this in both X and Y directions."</em></p>

<p>The initial idea is correct, because this is just running SDF rendering in reverse. A gray pixel in an opacity mask is what you get when you contrast adjust an SDF and do not blow it out into pure black or white. The information inside the gray pixels is "correct", up to rounding.</p>

<p>But there are two mistakes here.</p>

<p>The first is that even in an anti-aliased image, you can have white pixels right next to black ones. Especially with fonts, which are pixel-hinted. So the SDF is wrong there, because it goes directly from <code>-1</code> to <code>1</code>. This causes the contours to double up, e.g. around this bottom edge:</p>

</div><div>

<p>To solve this, you can eliminate the crisp case by deliberately making those edges very dark or light gray.</p>

<p>But the second mistake is more subtle. The EDT works in 2D because you can feed the <em>output</em> of X in as the <em>input</em> of Y. But that means that any non-zero <em>input</em> to X represents another dimension Z, separate from X and Y. The resulting squared distance will be <code>x² + y² + z²</code>. This is a 3D distance, not 2D.</p>

<p>If an edge is shifted by 0.5 pixels in X, you would expect a 1D SDF like:</p>

<pre><code>  […, 0.5, 1.5, 2.5, 3.5, …]
= […, 0.5, 1 + 0.5, 2 + 0.5, 3 + 0.5, …]
</code></pre>


<p>Instead, because of the squaring + square root, you will get:</p>

<pre><code>  […, 0.5, 1.12, 2.06, 3.04, …]
= […, sqrt(0.25), sqrt(1 + 0.25), sqrt(4 + 0.25), sqrt(9 + 0.25), …]
</code></pre>


<p>The effect of <code>l² = 0.25</code> rapidly diminishes as you get away from the edge, and is significantly wrong even just one pixel over.</p>

<p>The correct shift would need to be folded into <code>(x + …)² + (y + …)²</code> and depends on the direction. e.g. If an edge is shifted horizontally, it ought to be <code>(x + l)² + y²</code>, which means there is a term of <code>2*x*l</code> missing. If the shift is vertical, it's <code>2*y*l</code> instead. This is also a <em>signed</em> value, not positive/unsigned.</p>

<p>Given all this, it's a miracle this worked at all. The only reason this isn't more visible in the final glyph is because the positive and negative fields contains the same but opposite errors around their respective gray pixels.</p>

<h2>The Not-Subpixel EDT</h2>

<p>As mentioned before, the EDT algorithm is essentially making a 1D Voronoi diagram every time. It finds the distance to the nearest minimum for every array index. But there is no reason for those minima themselves to lie at integer offsets, because the second <code>for</code> loop effectively <em>resamples</em> the data.</p>

<p>So you can take an input mask, and tag each index with a horizontal offset <code>Δ</code>:</p>

<pre><code>O = [·, ·, ·, 0, 0, 0, 0, 0, ·, ·, ·]
Δ = [A, B, C, D, E, F, G, H, I, J, K]
</code></pre>


<p>As long as the offsets are small, no two indices will swap order, and the code still works. You then build the Voronoi diagram out of the shifted parabolas, but sample the result at unshifted indices.</p>

</div><div>

<h3>Problem 1 - Opposing Shifts</h3>

<p>This lead me down the first rabbit hole, which was an attempt to make the EDT subpixel capable without losing its appealing simplicity. I started by investigating the nuances of subpixel EDT in 1D. This was a bit of a mirage, because most real problems only pop up in 2D. Though there was one important insight here.</p>

<pre><code>O = [·, ·, ·, 0, 0, 0, 0, 0, ·, ·, ·]
Δ = [·, ·, ·, A, ·, ·, ·, B, ·, ·, ·]
</code></pre>


<p>Given a mask of zeroes and infinities, you can only shift the first and last point of each segment. Infinities don't do anything, while middle zeroes should remain zero.</p>

</div><div>

<p>Using an offset <code>A</code> works sort of as expected: this will increase or decrease the values filled in by a fractional pixel, calculating a squared distance <code>(d + A)²</code> where <code>A</code> can be positive or negative. But the value at the shifted index itself is always <code>(0 + A)²</code> (positive). This means it is always outside, regardless of whether it is moving left or&nbsp;right.</p>

<p>If <code>A</code> is moving left (–), the point is inside, and the (unsigned) distance should be <code>0</code>. At <code>B</code> the situation is reversed: the distance should be <code>0</code> if <code>B</code> is moving right (+). It might seem like this is annoying but fixable, because the zeroes can be filled in by the opposite signed field. But this is only looking at the binary 1D case, where there are only zeroes and infinities.</p>

<p>In 2D, a second pass has non-zero distances, so every index can be shifted:</p>

<pre><code>O = [a, b, c, d, e, f, g, h, i, j, k]
Δ = [A, B, C, D, E, F, G, H, I, J, K]
</code></pre>


<p>Now, resolving every subpixel unambiguously is harder than you might think:</p>

</div><div>

<p>It's important to notice that the function being sampled by an EDT is not actually smooth: it is the minimum of a discrete set of parabolas, which cross at an angle. The square root of the output only produces a smooth linear gradient because it samples each parabola at integer offsets. Each center only shifts upward by the square of an integer in every pass, so the crossings are predictable. You never sample the 'wrong' side of <code>(d + ...)²</code>. A subpixel EDT does not have this luxury.</p>

<p>Subpixel EDTs are not irreparably broken though. Rather, they are only valid if they cause the unsigned distance field to increase, i.e. if they dilate the empty space. This is a problem: any shift that dilates the positive field contracts the negative, and vice versa.</p>

<p>To fix this, you need to get out of the handwaving stage and actually understand P and N as continuous 2D fields.</p>

<h3>Problem 2 - Diagonals</h3>

<p>Consider an aliased, sloped edge. To understand how the classic EDT resolves it, we can turn it into a voronoi diagram for all the white pixel centers:</p>

</div><div><p>Near the bottom, the field is dominated by the white pixels on the corners: they form diagonal sections downwards. Near the edge itself, the field runs perfectly vertical inside a roughly triangular section. In both cases, an arrow pointing back towards the cell center is only vaguely perpendicular to the true diagonal edge.</p></div><div>

<p>Near perfect diagonals, the edge distances are just wrong. The distance of edge pixels goes up or right (<code>1</code>), rather than the more logical diagonal <code>0.707…</code>. The true closest point on the edge is not part of the grid.</p>

<p>These fields don't really resolve properly until 6-7 pixels out. You could hide these flaws with e.g. an 8x downscale, but that's 64x more pixels. Either way, you shouldn't expect perfect numerical accuracy from an EDT. Just because it's mathematically separable doesn't mean it's particularly good.</p>

<p>In fact, it's only separable because it isn't very good at all.</p>


<h3>Problem 3 - Gradients</h3>

<p>In 2D, there is also only one correct answer to the gray case. Consider a diagonal edge, anti-aliased:</p>

</div><div><p>Thresholding it into black, grey or white, you get:</p></div><div><p>If you now classify the grays as both inside and outside, then the highlighted pixels will be part of both masks. Both the positive and negative field will be exactly zero there, and so will the SDF <code>(P - N)</code>:</p></div><div>

<p>This creates a phantom vertical edge that pushes apart P and N, and causes the average slope to be less than 45º. The field simply has the wrong shape, because gray pixels can be surrounded by other gray pixels.</p>

<p>This also explains why TinySDF magically seemed to work despite being so pixelized. The <code>l²</code> gray correction fills in exactly the gaps in the bad <code>(P - N)</code> field where it is zero, and it interpolates towards a symmetrically wrong P and N field on each side.</p>

<p>If we instead classify grays as neither inside nor outside, then <code>P</code> and <code>N</code> overlap in the boundary, and it is possible to resolve them into a coherent SDF with a clean 45 degree slope, if you do it right:</p>

</div><div>

<p>What seemed like an off-by-one error is actually the right approach in 2D or higher. The subpixel SDF will then be a modified version of this field, where the P and N sides are changed in lock-step to remain mutually consistent.</p>

<p>Though we will get there in a roundabout way.</p>

<h3>Problem 4 - Commuting</h3>

<p>It's worth pointing out: a subpixel EDT simply <em>cannot</em> commute in 2D.</p>

<p>First, consider the data flow of an ordinary EDT:</p>

</div><div>

<p>Information from a corner pixel can flow through empty space both when doing X-then-Y <em>and</em> Y-then-X. But information from the horizontal edge pixels can only flow vertically <em>then</em> horizontally. This is okay because the separating lines between adjacent pixels are purely vertical too: the red arrows never 'win'.</p>

<p>But if you introduce subpixel shifts, the separating lines can turn:</p>

</div><div>

<p>The data flow is still limited to the original EDT pattern, so the edge pixels at the top can only propagate by starting downward. They can only influence adjacent columns if the order is <em>Y-then-X</em>. For vertical edges it's the opposite.</p>

<p>That said, this is only a problem on shallow concave curves, where there aren't any corner pixels nearby. The error is that it 'snaps' to the wrong edge point, but only when it is already several pixels away from the edge. In that case, the smaller <code>x²</code> term is dwarfed by the much larger <code>y²</code> term, so the absolute error is small after&nbsp;<code>sqrt</code>.</p>

<h2>The ESDT</h2>

<p>Knowing all this, here's how I assembled a "true" Euclidean Subpixel Distance Transform.</p>

<h3>Subpixel offsets</h3>

<p>To start we need to determine the subpixel offsets. We can still treat <code>level - 0.5</code> as the signed distance for any gray pixel, and ignore all white and black for now.</p>

<p>The tricky part is determining the exact direction of that distance. As an approximation, we can examine the 3x3 neighborhood around each gray pixel and do a least-squares fit of a plane. As long as there is at least one white and one black pixel in this neighborhood, we get a vector pointing towards where the actual edge is. In practice I apply some horizontal/vertical smoothing here using a simple <code>[1 2 1]</code> kernel.</p>

<p>The result is numerically very stable, because the originally rasterized image is visually consistent.</p>

</div><div><p>This logic is disabled for thin creases and spikes, where it doesn't work. Such points are treated as fully masked out, so that neighboring distances propagate there instead. This is needed e.g. for the pointy negative space of a <code>W</code> to come out right.</p></div><div><p>I also implemented a relaxation step that will smooth neighboring vectors if they point in similar directions. However, the effect is quite minimal, and it rounds very sharp corners, so I ended up disabling it by default.</p></div><div>

<p>The goal is then to do an ESDT that uses these shifted positions for the minima, to get a subpixel accurate distance field.</p>

<h3>P and N junction</h3>

<p>We saw earlier that only <em>non-masked</em> pixels can have offsets that influence the output (#1). We only have offsets for gray pixels, yet we concluded that gray pixels should be <em>masked out</em>, to form a connected SDF with the right shape (#3). This can't work.</p>

<p>SDFs are both the problem and the solution here. Dilating and contracting SDFs is easy: add or subtract a constant. So you can expand both P and N fields ahead of time geometrically, and then undo it numerically. This is done by pushing their respective gray pixel centers in opposite directions, by half a pixel, on top of the originally calculated offset:</p>

</div><div>

<p>This way, they can remain masked <em>in</em> in both fields, but are always pushed between 0 and 1 pixel inwards. The distance between the P and N gray pixel offsets is always exactly 1, so the non-zero overlap between P and N is guaranteed to be exactly 1 pixel wide everywhere. It's a perfect join anywhere we sample it, because the line between the two ends crosses through a pixel center.</p>

<p>When we then calculate the final SDF, we do the opposite, shifting each by half a pixel and trimming it off with a <code>max</code>:</p>

<pre><code>SDF = max(0, P - 0.5) - max(0, N - 0.5)
</code></pre>


<p>Only one of P or N will be &gt; 0.5 at a time, so this is exact.</p>

<p>To deal with pure black/white edges, I treat any black neighbor of a white pixel (horizontal or vertical only) as gray with a 0.5 pixel offset (before P/N dilation). No actual blurring needs to happen, and the result is numerically exact minus epsilon, which is nice.</p>

<h3>ESDT state</h3>

<p>The state for the ESDT then consists of remembering a signed X and Y offset for every pixel, rather than the squared distance. These are factored into the distance and threshold calculations, separated into its proper parallel and orthogonal components, i.e. X/Y or Y/X. Unlike an EDT, each X or Y pass has to be aware of both axes. But the algorithm is mostly unchanged otherwise, here <em>X-then-Y</em>.</p>

<p>The X pass:</p>

</div><div>

<p>At the start, only gray pixels have offsets and they are all in the range <code>-1…1</code> (exclusive). With each pass of ESDT, a winning minima's offsets propagate to its affecting range, tracking the total distance <code>(Δx, Δy)</code> (&gt; 1). At the end, each pixel's offset points to the nearest edge, so the squared distance can be derived as <code>Δx² + Δy²</code>.</p>

<p>The Y pass:</p>

</div><div>

<p>You can see that the vertical distances in the top-left are practically vertical, and not oriented perpendicular to the contour on average: they have not had a chance to propagate horizontally. But they do factor in the vertical subpixel offset, and this is the dominant component. So even without correction it still creates a smooth SDF with a surprisingly small error.</p>


<h3>Fix ups</h3>

<p>The commutativity errors are all biased positively, meaning we get an upper bound of the true distance field.</p>

<p>You could take the <code>min</code> of <code>X then Y</code> and <code>Y then X</code>. This would re-use all the same prep and would restore rotation-independence at the cost of 2x as many ESDTs. You could try <code>X then Y then X</code> at 1.5x cost with some hacks. But neither would improve diagonal areas, which were still busted in the original EDT.</p>

<p>Instead I implemented an additional relaxation pass. It visits every pixel's target, and double checks whether one of the 4 immediate neighbors (with subpixel offset) isn't a better solution:</p>

</div><div><p>It's a good heuristic because if the target is &gt;1px off there is either a viable commutative propagation path, or you're so far away the error is negligible. It fixes up the diagonals, creating tidy lines when the resolution allows for it:</p></div><div>

<p>You could take this even further, given that you know the offsets are supposed to be perpendicular to the glyph contour. You could add reprojection with a few dot products here, but getting it to not misfire on edge cases would be tricky.</p>
  
<p>While you can tell the unrelaxed offsets are wrong when visualized, and the fixed ones are better, the visual difference in the output glyphs is tiny. You need to blow glyphs up to enormous size to see the difference side by side. So it too is disabled by default. The diagonals in the original EDT were wrong too and you could barely tell.</p>

<h3>Emoji</h3>

<p>An emoji is generally stored as a full color transparent PNG or SVG. The ESDT can be applied directly to its opacity mask to get an SDF, so no problem there.</p>

</div><div>

<p>There are an extremely rare handful of emoji with semi-transparent areas, but you can get away with making those solid. For this I just use a filter that detects '+' shaped arrangements of pixels that have (almost) the same transparency level. Then I dilate those by 3x3 to get the average transparency level in each area. Then I divide by it to only keep the anti-aliased edges transparent.</p>

<p>The real issue is blending the colors at the edges, when the emoji is being rendered and scaled. The RGB color of transparent pixels is undefined, so whatever values are there will blend into the surrounding pixels, e.g. creating a subtle black halo:</p>

</div><div>

<p>A common solution is <em>premultiplied alpha</em>. The opacity is baked into the RGB channels as <code>(R * A, G * A, B * A, A)</code>, and transparent areas must be fully transparent black. This allows you to use a premultiplied blend mode where the RGB channels are added directly without further scaling, to cancel out the error.</p>

<p>But the alpha channel of an SDF glyph is dynamic, and is independent of the colors, so it cannot be premultiplied. We need valid color values even for the fully transparent areas, so that up- or downscaling is still clean.</p>

<p>Luckily the ESDT calculates X and Y offsets which point from each pixel directly to the nearest edge. We can use them to propagate the colors outward in a single pass, filling in the entire background. It doesn't need to be very accurate, so no filtering is&nbsp;required.</p>

</div><div><p>The result looks pretty great. At normal sizes, the crisp edge hides the fact that the interior is somewhat blurry. Emoji fonts are supported via the underlying <code>ab_glyph</code> library, but are too big for the web (10MB+). So you can just load .PNGs on demand instead, at whatever resolution you need. Hooking it up to the 2D canvas to render native system emoji is left as an exercise for the reader.</p></div><div>

<p>Use.GPU does not support complex Unicode scripts or RTL text yet—both are a can of worms I wish to offload too—but it does support composite emoji like "pirate flag" (white flag + skull and crossbones) or "male astronaut" (astronaut + man) when formatted using the usual Zero-Width Joiners (U+200D) or modifiers.</p>

<h2>Shading</h2>

<p>Finally, a note on how to actually render with SDFs, which is more nuanced than you might think.</p>

</div><div>

<p>I pack all the SDF glyphs into an atlas on-demand, the same I use elsewhere in Use.GPU. This has a custom layout algorithm that doesn't backtrack, optimized for filling out a layout at run-time with pieces of a similar size. Glyphs are rasterized at 1.5x their normal font size, after rounding up to the nearest power of two. The extra 50% ensures small fonts on low-DPI displays still use a higher quality SDF, while high-DPI displays just upscale that SDF without noticeable quality loss. The rounding ensures similar font sizes reuse the same SDFs. You can also override the detail independent of font size.</p>

<p>To determine the contrast factor to draw an SDF, you generally use screen-space derivatives. There are good and bad ways of doing this. Your goal is to get a ratio of SDF pixels to screen pixels, so the best thing to do is give the GPU the coordinates of the <em>SDF texture pixels</em>, and ask it to calculate the difference for that between neighboring <em>screen pixels</em>. This works for surfaces in 3D at an angle too. Bad ways of doing this will instead work off relative texture coordinates, and introduce additional scaling factors based on the view or atlas size, when they are all just supposed to cancel out.</p>

<p>As you then adjust the contrast of an SDF to render it, it's important to do so around the zero-level. The glyph's ideal vector shape should not expand or contract as you scale it. Like TinySDF, I use 75% gray as the zero level, so that more SDF range is allocated to the outside than the inside, as dilating glyphs is much more common than contraction.</p>

</div><div>

<p>At the same time, a pixel whose center sits exactly <em>on</em> the zero level edge is actually half inside, half outside, i.e. 50% opaque. So, after scaling the SDF, you need to add 0.5 to the value to get the correct opacity for a blend. This gives you a <em>mathematically accurate</em> font rendering that approximates convolution with a pixel-sized circle or box.</p>

<p>But I go further. Fonts were not invented for screens, they were designed for paper, with ink that bleeds. Certain renderers, e.g. MacOS, replicate this effect. The physical bleed distance is relatively constant, so the larger the font, the smaller the effect of the bleed proportionally. I got the best results with a 0.25 pixel bleed at 32px or more. For smaller sizes, it tapers off linearly. When you zoom out blocks of text, they get subtly fatter instead of thinning out, and this is actually a great effect when viewing document thumbnails, where lines of text become a solid mass at the point where the SDF resolution fails anyway.</p>

</div><div>

<p>In Use.GPU I prefer to use gamma correct, linear RGB color, even for 2D. What surprised me the most is just how unquestionably superior this looks. Text looks rock solid and readable even at small sizes on low-DPI. Because the SDF scales, there is no true font hinting, but it really doesn't need it, it would just be a nice extra.</p>

<p>Presumably you could track hinted points or edges inside SDF glyphs and then do a dynamic distortion somehow, but this is an order of magnitude more complex than what it is doing now, which is splat a contrasted texture on screen. It does have snapping you can turn on, which avoids jiggling of individual letters. But if you turn it off, you get smooth subpixel everything:</p>

</div><div>

<p>I was always a big fan of the 3x1 subpixel rendering used on color LCDs (i.e. <em>ClearType</em> and the like), and I was sad when it was phased out due to the popularity of high-DPI displays. But it turns out the 3x res only offered marginal benefits... the real improvement was always that it had a custom gamma correct blend mode, which is a thing a lot of people still get wrong. Even without RGB subpixels, gamma correct AA looks great. Converting the entire desktop to Linear RGB is also not going to happen in our lifetime, but I really want it more now.</p>

<p>The "blurry text" that some people associate with anti-aliasing is usually just text blended with the wrong gamma curve, and without an appropriate bleed for the font in question.</p>

<p>* * *</p>

<p>If you want to make SDFs from existing input data, subpixel accuracy is crucial. Without it, fully crisp strokes actually become uneven, diagonals can look bumpy, and you cannot make clean dilated outlines or shadows. If you use an EDT, you have to start from a high resolution source and then downscale away all the errors near the edges. But if you use an ESDT, you can upscale even emoji PNGs with decent&nbsp;results.</p>

<p>It might seem pretty obvious in hindsight, but there is a massive difference between getting it sort of working, and actually getting all the details right. There were many false starts and dead ends, because subpixel accuracy also means one bad pixel ruins&nbsp;it.</p>

<p>In some circles, SDF text is an old party trick by now... but a solid and reliable implementation is still a fair amount of work, with very little to go off for the harder&nbsp;parts.</p>

<p>By the way, I did see if I could use voronoi techniques directly, but in terms of computation it is much more involved. Pretty tho:</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[“I give permission to IBM, ..., to use JSLint for evil.” (240 pts)]]></title>
            <link>https://gist.github.com/kemitchell/fdc179d60dc88f0c9b76e5d38fe47076</link>
            <guid>36809065</guid>
            <pubDate>Fri, 21 Jul 2023 01:37:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gist.github.com/kemitchell/fdc179d60dc88f0c9b76e5d38fe47076">https://gist.github.com/kemitchell/fdc179d60dc88f0c9b76e5d38fe47076</a>, See on <a href="https://news.ycombinator.com/item?id=36809065">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="" data-tab-size="8" data-paste-markdown-skip="" data-tagsearch-lang="" data-tagsearch-path="crockford-on-json-license">
        <tbody><tr>
          <td id="file-crockford-on-json-license-L1" data-line-number="1"></td>
          <td id="file-crockford-on-json-license-LC1">https://youtu.be/-C-JoyNuQJs?t=39m45s</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L2" data-line-number="2"></td>
          <td id="file-crockford-on-json-license-LC2">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L3" data-line-number="3"></td>
          <td id="file-crockford-on-json-license-LC3">When I put the reference implementation onto the website I needed to</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L4" data-line-number="4"></td>
          <td id="file-crockford-on-json-license-LC4">put a software license on it.</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L5" data-line-number="5"></td>
          <td id="file-crockford-on-json-license-LC5">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L6" data-line-number="6"></td>
          <td id="file-crockford-on-json-license-LC6">And I looked at all the licenses that were avilable, and there were a lot</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L7" data-line-number="7"></td>
          <td id="file-crockford-on-json-license-LC7">of them. And I decided that the one I liked the best was the MIT License,</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L8" data-line-number="8"></td>
          <td id="file-crockford-on-json-license-LC8">which was a notice that you would put on your source and it would say,</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L9" data-line-number="9"></td>
          <td id="file-crockford-on-json-license-LC9">"you're allowed to use this for any purpose you want, just leave the</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L10" data-line-number="10"></td>
          <td id="file-crockford-on-json-license-LC10">notice in the source and don't sue me."</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L11" data-line-number="11"></td>
          <td id="file-crockford-on-json-license-LC11">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L12" data-line-number="12"></td>
          <td id="file-crockford-on-json-license-LC12">I love that licnese.  It's really good.</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L13" data-line-number="13"></td>
          <td id="file-crockford-on-json-license-LC13">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L14" data-line-number="14"></td>
          <td id="file-crockford-on-json-license-LC14">But this was late in 2002, you know, we'd just started the war on terror,</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L15" data-line-number="15"></td>
          <td id="file-crockford-on-json-license-LC15">and, you know, we were going after the evildoers with the president and</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L16" data-line-number="16"></td>
          <td id="file-crockford-on-json-license-LC16">the vice president, and I felt like, "I need to do my part".</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L17" data-line-number="17"></td>
          <td id="file-crockford-on-json-license-LC17">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L18" data-line-number="18"></td>
          <td id="file-crockford-on-json-license-LC18">So I added one more line to my license, was that, "the Software shall</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L19" data-line-number="19"></td>
          <td id="file-crockford-on-json-license-LC19">be used for Good, not Evil."  And thought: I've done my job!</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L20" data-line-number="20"></td>
          <td id="file-crockford-on-json-license-LC20">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L21" data-line-number="21"></td>
          <td id="file-crockford-on-json-license-LC21">About once a year I'll get a letter from a crank who says, "I should</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L22" data-line-number="22"></td>
          <td id="file-crockford-on-json-license-LC22">have a right to use it for evil! I'm not gonna use it until you change</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L23" data-line-number="23"></td>
          <td id="file-crockford-on-json-license-LC23">your license!"</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L24" data-line-number="24"></td>
          <td id="file-crockford-on-json-license-LC24">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L25" data-line-number="25"></td>
          <td id="file-crockford-on-json-license-LC25">Or they'll write to me and say, "how do I know if it's evil or not? I</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L26" data-line-number="26"></td>
          <td id="file-crockford-on-json-license-LC26">don't think it's evil, but someone else might think it's evil, so I'm</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L27" data-line-number="27"></td>
          <td id="file-crockford-on-json-license-LC27">not gonna use it."</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L28" data-line-number="28"></td>
          <td id="file-crockford-on-json-license-LC28">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L29" data-line-number="29"></td>
          <td id="file-crockford-on-json-license-LC29">Great. It's working. My license works. I'm stopping the evildoers.</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L30" data-line-number="30"></td>
          <td id="file-crockford-on-json-license-LC30">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L31" data-line-number="31"></td>
          <td id="file-crockford-on-json-license-LC31">...</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L32" data-line-number="32"></td>
          <td id="file-crockford-on-json-license-LC32">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L33" data-line-number="33"></td>
          <td id="file-crockford-on-json-license-LC33">Also about once a year, I get a letter from a lawyer, every year a</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L34" data-line-number="34"></td>
          <td id="file-crockford-on-json-license-LC34">different lawyer, at a company. I don't want to embarrass the company by</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L35" data-line-number="35"></td>
          <td id="file-crockford-on-json-license-LC35">saying their name, so I'll just say their initials, "IBM," saying that</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L36" data-line-number="36"></td>
          <td id="file-crockford-on-json-license-LC36">they want to use something that I wrote, 'cause I put this on everything</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L37" data-line-number="37"></td>
          <td id="file-crockford-on-json-license-LC37">I write now. They want to use something that I wrote and something that</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L38" data-line-number="38"></td>
          <td id="file-crockford-on-json-license-LC38">they wrote and they're pretty sure they weren't gonna use it for evil,</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L39" data-line-number="39"></td>
          <td id="file-crockford-on-json-license-LC39">but they couldn't say for sure about their customers. So, could I give</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L40" data-line-number="40"></td>
          <td id="file-crockford-on-json-license-LC40">them a special license for that?</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L41" data-line-number="41"></td>
          <td id="file-crockford-on-json-license-LC41">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L42" data-line-number="42"></td>
          <td id="file-crockford-on-json-license-LC42">So, of course!</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L43" data-line-number="43"></td>
          <td id="file-crockford-on-json-license-LC43">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L44" data-line-number="44"></td>
          <td id="file-crockford-on-json-license-LC44">So I wrote back---this happened literally two weeks ago---I said, "I</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L45" data-line-number="45"></td>
          <td id="file-crockford-on-json-license-LC45">give permission to IBM, its customers, partners, and minions, to use</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L46" data-line-number="46"></td>
          <td id="file-crockford-on-json-license-LC46">JSLint for evil."</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L47" data-line-number="47"></td>
          <td id="file-crockford-on-json-license-LC47">
</td>
        </tr>
        <tr>
          <td id="file-crockford-on-json-license-L48" data-line-number="48"></td>
          <td id="file-crockford-on-json-license-LC48">And the attorney wrote back and said, "Thanks very much, Douglas!"</td>
        </tr>
  </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Texas worker accused of being on drugs was dying of heatstroke (102 pts)]]></title>
            <link>https://www.theguardian.com/us-news/2023/jul/20/texas-construction-worker-death-lawsuit-greg-abbott</link>
            <guid>36808906</guid>
            <pubDate>Fri, 21 Jul 2023 01:13:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/us-news/2023/jul/20/texas-construction-worker-death-lawsuit-greg-abbott">https://www.theguardian.com/us-news/2023/jul/20/texas-construction-worker-death-lawsuit-greg-abbott</a>, See on <a href="https://news.ycombinator.com/item?id=36808906">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>The mother of a 24-year-old worker who died from heatstroke while working for a construction firm in San Antonio, Texas, has <a href="https://law.einnews.com/amp/pr_news/644571042/hilliard-law-responds-to-lawsuit-filed-against-b-comm-constructors-highlighting-tragic-consequences-of-hb2127" data-link-name="in body link">filed </a>a lawsuit against his employer.</p><p>Gabriel Infante was working for B Comm Constructors in San Antonio, <a href="https://www.theguardian.com/us-news/texas" data-link-name="in body link" data-component="auto-linked-tag">Texas</a>, on 23 June 2022, digging in the hot summer sun to move internet fiber optic cable, a job he had recently started with a childhood best friend while they were finishing college.</p><p>The lawsuit comes after Texas’s Republican governor, Greg Abbott, signed a controversial bill into law on 14 June that prohibits local municipalities from enacting heat protection standards for construction workers. The bill <a href="https://www.theguardian.com/us-news/2023/jun/23/greg-abbott-texas-governor-bill-water-breaks-heatwave" data-link-name="in body link">nullifies</a> ordinances previously passed in Austin and Dallas that mandated 10-minute breaks for workers every four hours. A <a href="https://www.expressnews.com/news/article/heat-illness-prevention-ordinance-hb2127-preempt-18119180.php" data-link-name="in body link">similar ordinance </a>was being considered in San Antonio before the state bill was passed.</p><p>According to the lawsuit, Infante began exhibiting <a href="https://www.mayoclinic.org/diseases-conditions/heat-stroke/symptoms-causes/syc-20353581#:~:text=A%20core%20body%20temperature%20of,can%20all%20result%20from%20heatstroke." data-link-name="in body link">heatstroke symptoms</a> including confusion, altered mental state, dizziness and loss of consciousness. His friend and co-worker Joshua Espinoza began pouring cold water over him, trying to cool him down. A foreman insisted Espinoza call the police, claiming Infante’s bizarre behavior was due to drugs, and the foreman pushed for a drug test when emergency medical services arrived.</p><p>On the day of the incident, temperatures in San Antonio reached in excess of 100F (37.7C) with humidity levels reaching as high as 75%, noted the lawsuit.</p><p>Infante later died in a hospital from severe heatstroke and had a recorded internal temperature of 109.8F (43.2C). The Center for Disease Control <a href="https://www.cdc.gov/disasters/extremeheat/warning.html" data-link-name="in body link">states</a> a body temperature of 103F (39.4C) or higher is a main symptom of heatstroke.</p><p>“Nobody called me. It was Joshua’s mom who called me to tell me I needed to get a hold of Joshua because Gabriel had an accident,” said Velma Infante, Gabriel’s mother . “To this day, I have never, ever gotten a phone call from the owner of the company to offer his condolences for my son’s death. Or, an ‘I’m sorry,’ or nothing like that. I mean, of course it doesn’t make a difference. But I mean, it’s the gesture. To this day no ‘I’m sorry Mrs Infante for your loss,’ Nothing.”</p><p>Since her son’s death, Infante said, she panics and suffers from anxiety if her kids don’t return phone calls right away.</p><p>“We have difficult days; I have difficult days. When I go out in public I put on a different face because when I get home it’s all there waiting for me. It just consumes me. I don’t sleep. I cry, I eat and I eat junk food,” added Infante. “I don’t understand how they can allow these people to work out in this type of heat, I’ve seen so many deaths already, in different fields that you start to think what are these companies thinking?”</p><p>She explained the recent heatwaves in Texas had hit her hard because they bring back emotions about what her son experienced in the extreme heat and that Gabriel’s best friends had recently graduated from University of Texas-San Antonio, where Gabriel was also attending at the time, and attending their graduation parties was painful.</p><p>“All I did was cry that evening. I was happy for him, but my son wasn’t going to be able to do the same thing,” said Infante. “He’s never going to finish school, he’s not going to graduate, he’s not going to get married, he’s not going to give me the grandbabies that I want. He was a jokester, he was quiet, he was laid-back like his dad, and he would give you the shirt off his back.”</p><p>She is currently trying to establish a music scholarship under her son’s name as Gabriel wanted to continue his education in music and played the saxophone since he was a young child and loved music. She said when he was four years old he learned and would sing the lyrics to the Beatles song <a href="https://www.youtube.com/watch?v=2xbycIC9WbU" data-link-name="in body link">From Me to You</a> to her and his father to get out of trouble.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-12">skip past newsletter promotion</a><p id="EmailSignup-skip-link-12" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>“He didn’t even get to see his first paycheck,” Joshua Espinoza, Infante’s co-worker and best friend since childhood, told <a href="https://www.expressnews.com/business/article/san-antonio-worker-s-heat-death-raises-questions-18178118.php" data-link-name="in body link">the San Antonio Express</a>. “My friend Gabe is the epitome of why this bill is ridiculous,” he added of Abbott’s bill. “It’s important for us not to go backward, to learn from our mistakes … It’s blatant process over people. Greg Abbott doesn’t care about workers at all.”</p><p>The Occupational Safety and Health Administration <a href="https://www.osha.gov/ords/imis/establishment.violation_detail?id=1604112.015&amp;citation_id=01001" data-link-name="in body link">proposed</a> a fine of $13,052 against the construction firm for failing to protect workers from heat hazards on the job, which the company is contesting.</p><p>Infante’s mother is seeking $1m in damages for her son’s death in the lawsuit, noting there were no safeguards or protections in place by the employer to protect workers from extreme heat, nor were there any training or heat-related illness prevention programs or policies in place by the employer at the time.</p><p>B Comm Constructors did not respond to multiple requests for comment.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FTC warns board game content creators, publishers to disclose relationships (155 pts)]]></title>
            <link>https://boardgamewire.com/index.php/2023/07/17/ftc-warns-board-game-influencers-publishers-over-failing-to-properly-disclose-relationships-free-gifts/</link>
            <guid>36808430</guid>
            <pubDate>Fri, 21 Jul 2023 00:00:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://boardgamewire.com/index.php/2023/07/17/ftc-warns-board-game-influencers-publishers-over-failing-to-properly-disclose-relationships-free-gifts/">https://boardgamewire.com/index.php/2023/07/17/ftc-warns-board-game-influencers-publishers-over-failing-to-properly-disclose-relationships-free-gifts/</a>, See on <a href="https://news.ycombinator.com/item?id=36808430">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			
<p>Board game reviewers and influencers are falling foul of FTC rules prohibiting ‘unfair or deceptive’ acts by failing to properly disclose when they receive free games – putting themselves and publishers in the firing line for court action.</p>



<p>The US Federal Trade Commission, the government agency in charge of consumer protection, has<a href="https://www.ftc.gov/business-guidance/advertising-marketing/endorsements-influencers-reviews"> just updated its 14-year-old guidance on ‘endorsements and testimonials in advertising’</a> to include online influencers working across social media platforms like Twitter, Twitch, Instagram and TikTok.</p>



<p>The new guidance makes it clear reviewers and other media creators should clearly disclose when they receive free products or other perks from a company, even if they aren’t specifically asked to mention those products.</p>



<p>That includes a content creator posting a picture of a board game on social media, or a video of someone using the game, which the FTC says “could convey – even without words – that you like and approve of the product”.</p>



<p>The FTC says disclosures should be kept simple, such as “This is an ad for BRAND”, and should be prominent on each piece of media which contains that product.</p>



<p>It said a single disclosure on a home page is not sufficient, nor are single disclosures in the description of videos rather than the video itself, or on social media where a user has to click ‘read more’ to view the disclosure.</p>



<p>The FTC added that multiple disclosures through a video or live stream are preferable, and that pictures on platforms such as Snapchat and Instagram Stories should feature a disclosure superimposed over the image.</p>



<p>Disclosures are not limited to free games, but also cover cash payments, other gifts, and travel and accommodation costs. </p>



<p>An FTC spokesperson told BoardGameWire, “The&nbsp;FTC&nbsp;Act and the principles underlying the Endorsement Guides apply to game companies and game influencers.&nbsp; </p>



<p>“If some followers of game influencers don’t expect them to get the games for free and if knowing about the free games would affect the credibility that followers give to the endorsements, then the free games should be disclosed.&nbsp; </p>



<p>“We have brought cases against companies whose influencers have not disclosed material connections.”</p>



<p>Rob Freund, a digital marketing and e-commerce lawyer for brands, agencies and creators, took to Twitter to discuss the new FTC guidance.</p>



<p>He said, “The FTC could sue the brand, the influencer, and any involved intermediary to enforce violations of the FTC Act related to these guidelines. They have done so many times before.”</p>



<p>He added, “Regulators can’t be everywhere at once, but expect more aggressive enforcement around these issues.”</p>



<p>One former board game influencer who now works for a publisher, who did not wish to be named, told BoardGameWire, “The FTC requirements have been that review copies should be disclosed for a long while… and the hobby industry, especially creators, have definitely ignored that. </p>



<p>“Some do the correct thing. Some don’t. I’ll point out the change and requirements in the interactions I or my companies have with influencers.”</p>



<p>Jamey Stegmaier, the co-founder of Wingspan and Scythe publisher <a href="https://stonemaiergames.com/">Stonemaier Games</a>, maintains a list of more than 300 board game reviewers who he periodically contacts about review copies.</p>



<p>He said, “I’ve noticed more creators in Instagram tagging their content as ‘paid promotion from the publisher’ for games we’ve sent to them. </p>



<p>“I’d like to see Instagram offer more accurate tags/labels, as there is a literal difference between getting a cardboard box and receiving money to express an opinion, but it will do for now.</p>



<p>“Up until now I’ve put the impetus on reviewers to be transparent about receiving free review copies, but this is a good reminder and opportunity to take some of the responsibility ourselves. </p>



<p>“So I’ve added a paragraph about this on our reviewer guidelines and in the template I use when I contact reviewers each month.”</p>



<p>Sarah Shah, an attorney and the creator and host of the <a href="https://www.youtube.com/c/boardgamesinaminute">Board Games in a Minute</a> YouTube channel, told BoardGameWire, “I know that I have failed to disclose in Instagram and Facebook posts when I have received a review copy of a game when posting about that game, but going forward, I am going to start doing this more diligently. </p>



<p>“I’ve already been disclosing in video content when I have received a review copy of a game. As for other content creators, I see many who do not disclose even when they are paid to create a video about a certain game, which I feel is deceptive, as it’s giving the impression that their opinion is entirely free from bias. </p>



<p>“I hope more content creators will be mindful of these new laws and follow them more carefully. I know I will.”</p>
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fly.io Postgres cluster down for 3 days, no word from them about it (753 pts)]]></title>
            <link>https://webcache.googleusercontent.com/search?q=cache:2T9NpG8thZgJ:https://community.fly.io/t/service-interruption-cant-destroy-machine-deploy-or-restart/14227&amp;cd=9&amp;hl=en&amp;ct=clnk&amp;gl=au</link>
            <guid>36808296</guid>
            <pubDate>Thu, 20 Jul 2023 23:42:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://webcache.googleusercontent.com/search?q=cache:2T9NpG8thZgJ:https://community.fly.io/t/service-interruption-cant-destroy-machine-deploy-or-restart/14227&#x26;cd=9&#x26;hl=en&#x26;ct=clnk&#x26;gl=au">https://webcache.googleusercontent.com/search?q=cache:2T9NpG8thZgJ:https://community.fly.io/t/service-interruption-cant-destroy-machine-deploy-or-restart/14227&#x26;cd=9&#x26;hl=en&#x26;ct=clnk&#x26;gl=au</a>, See on <a href="https://news.ycombinator.com/item?id=36808296">Hacker News</a></p>
Couldn't get https://webcache.googleusercontent.com/search?q=cache:2T9NpG8thZgJ:https://community.fly.io/t/service-interruption-cant-destroy-machine-deploy-or-restart/14227&cd=9&hl=en&ct=clnk&gl=au: Error: Request failed with status code 404]]></description>
        </item>
        <item>
            <title><![CDATA[Hollywood movie aside, just how good a physicist was Oppenheimer? (150 pts)]]></title>
            <link>https://www.science.org/content/article/movie-adds-oppenheimer-s-celebrity-just-how-good-physicist-was-he</link>
            <guid>36808001</guid>
            <pubDate>Thu, 20 Jul 2023 23:07:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/movie-adds-oppenheimer-s-celebrity-just-how-good-physicist-was-he">https://www.science.org/content/article/movie-adds-oppenheimer-s-celebrity-just-how-good-physicist-was-he</a>, See on <a href="https://news.ycombinator.com/item?id=36808001">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/movie-adds-oppenheimer-s-celebrity-just-how-good-physicist-was-he: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[An invitation to a secret society (200 pts)]]></title>
            <link>https://www.experimental-history.com/p/an-invitation-to-a-secret-society</link>
            <guid>36807763</guid>
            <pubDate>Thu, 20 Jul 2023 22:42:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.experimental-history.com/p/an-invitation-to-a-secret-society">https://www.experimental-history.com/p/an-invitation-to-a-secret-society</a>, See on <a href="https://news.ycombinator.com/item?id=36807763">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg" width="402" height="512.7688442211055" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1523,&quot;width&quot;:1194,&quot;resizeWidth&quot;:402,&quot;bytes&quot;:210556,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F548f103c-9c2a-4e20-aa3f-c0cec659b902_1194x1523.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Photo cred: my dad</figcaption></figure></div><p>I hereby invite every curious human to do science and post it on the internet.&nbsp;</p><p>Ask questions, collect data, write stuff, and make it available to everyone. You should feel as free to do and share research as you would feel uploading a video to YouTube or a song to Spotify.</p><p>You don’t actually need my or anyone else’s permission to do this, but sometimes people need a little encouragement, so: come on in!</p><p><span>Actually, let me make that a little more urgent: </span><em>Please come in, we need you</em><span>.</span></p><p><span>See, scientific progress has </span><a href="https://www.nature.com/articles/s41586-022-05543-x" rel="">slowed</a><span>. We fund more research than ever and </span><a href="https://www.theatlantic.com/science/archive/2018/11/diminishing-returns-science/575665/" rel="">get way less bang for our buck</a><span>. We spend 15,000 years of collective effort every year on a peer review system that </span><a href="https://www.experimental-history.com/p/the-rise-and-fall-of-peer-review" rel="">doesn’t do its job</a><span>. Fraudsters can publish </span><a href="https://retractionwatch.com/the-retraction-watch-leaderboard/" rel="">dozens</a><span> of papers before they get caught, if they get caught at all.</span></p><p>This is bad. Our world is full of problems, and science is the main way we solve them. We’ve got climate change, an obesity epidemic, and a lot of sad people. There are folks dying of poverty and preventable disease. Heck, we still mainly make electricity by burning dinosaur bones. This can’t be as good as it gets.</p><p><span>Lots of people have lots of ideas about how to get science started again. Give out</span><a href="https://www.psychologicalscience.org/publications/badges" rel=""> badges</a><span> for good behavior! Do </span><a href="https://www.science.org/doi/full/10.1126/science.aac4716?casa_token=Tg8kLVSrqm8AAAAA:VwyG3JnP8P-myr_yw4qoWqRV0mAbfcOmF08kfOb2VLq7rXwhan7n5pSOib0Lq_wCNdHBVuwpE1Yms2U" rel="">giant replication studies</a><span>! Demand </span><a href="https://www.nature.com/articles/s41562-017-0189-z" rel="">tinier</a><span> p-values!</span></p><p><span>I don’t think any of these solutions will work because they’re trying to solve the wrong problem. They’re aimed at stamping out the worst research, but </span><a href="https://www.experimental-history.com/p/science-is-a-strong-link-problem" rel="">science is a strong link problem</a><span>: we make progress by producing good stuff, not by preventing bad stuff. When you’re in a strong-link problem, the answer is to turn up the weirdness. More wild hypotheses! More risky research! The useless ideas will die from disuse, but the useful ideas will live on.</span></p><p>This is where you come in.</p><p>Professional science does a lot of good stuff. It gives people paychecks, health insurance, research funding, offices, and colleagues. It allows large groups to work together on big projects like launching telescopes into space. And it gives young, curious people a place to start: if you want to ask and answer questions about the universe, academia is an obvious career path.</p><p><span>But that good stuff comes at a price. Professions are bundles of </span><a href="https://www.experimental-history.com/p/science-is-a-strong-link-problem" rel="">weak-link</a><span> interventions; they keep out quacks, but they also keep out revolutionaries. They enforce standards, which tends to make things…standard. They select for a pretty homogenous group of people—in this case, folks who got good grades in college, did research in the right institutions with the right people and published in the right journals. Then they make all those people even more similar to one another, steeping them in the same culture and putting them in competition for the same rewards, like grants, jobs, and citations.</span></p><p><span>Right now, professional science is like a world where every organism is trying to be a mammal. Mammals are great: milk-producing glands, body hair, ears that have three bones in them, what’s not to like? But if you’ve </span><em>only</em><span> got mammals, you’re in big trouble. Monocultures are fragile and prone to collapse because every single organism has identical weaknesses. What you need is an ecosystem—hawks, sea urchins, fungi, various types of fern, and so on.</span></p><p>Creating diverse ecosystems is hard for humans because they like to do whatever everyone else is doing, even when they know it’s wrong. So when you’re trying to be a mammal and you see someone else trying to be a lizard, you might think they’re just doing a bad job being a mammal. “You should try having little hairs all over your body,” you might tell them. But a lizard isn’t a bad mammal. It’s a lizard. Its job is to eat flies and bask on rocks.</p><p><span>What I’m saying is: </span><em>be the lizard</em><span>. The mammals—that is, mainstream scientists, the ones who get PhDs and professor jobs—have their niche covered. What we need is more people doing botany in their backyards. We need basement chemists. We need amateur geologists and meteorologists.&nbsp;</span></p><p>Heck, if some mammals want to try a different niche, so much the better: ditch the projects you think are pointless, do the thing you think is most important, write it in your own words, and put it on the internet. There’s plenty of space for everyone.</p><p>It will be! But remember two things.</p><ol><li><p><span>Most of the professional science we produce right now is bad. Seriously, pick a paper at random and see how well it holds up. We recently found out that the chair of a Harvard department </span><a href="https://datacolada.org/109" rel="">probably faked a bunch of her data</a><span>. The bar is not high, folks!</span></p></li><li><p><span>Bad stuff is okay. I cannot stress enough that </span><a href="https://www.experimental-history.com/p/science-is-a-strong-link-problem" rel="">science is a strong-link problem</a><span>, and what we really care about is how much </span><em>good </em><span>stuff we get, even if it means we also get a bunch of bad stuff.</span></p></li></ol><p>What I’m proposing here isn’t actually new. In fact, it’s ancient. People have been making knowledge in all sorts of ways ever since Socrates started walking around and saying stuff.&nbsp;</p><p><span>Some of these people didn’t have traditional jobs because they didn’t have to. </span><a href="https://en.wikipedia.org/wiki/Francis_Galton" rel="">Francis Galton</a><span>, the guy who came up with (among many other things), correlation, twin studies, fingerprinting, weather maps, and questionnaires, was independently wealthy. So were </span><a href="https://en.wikipedia.org/wiki/Charles_Darwin" rel="">Darwin</a><span> and </span><a href="https://en.wikipedia.org/wiki/Robert_Boyle" rel="">Boyle</a><span> and many of the members of the original </span><a href="https://en.wikipedia.org/wiki/Royal_Society" rel="">Royal Society</a><span> and</span><a href="https://en.wikipedia.org/wiki/British_Science_Association" rel=""> British Association</a><span>. As I wrote in </span><a href="https://www.experimental-history.com/p/how-to-keep-cakes-moist-and-cause" rel="">my review of Galton’s autobiography</a><span>, dabbling in science used to be a common pastime for rich dudes—a little astronomy here, a little vivisection there.</span></p><p><span>Money makes everything easier, obviously, but plenty of now-legendary scientists had to do their thing part-time while finding other ways to pay the bills. </span><a href="https://en.wikipedia.org/wiki/Albert_Einstein" rel="">Einstein</a><span> published some of his most important work while he was still a patent clerk. </span><a href="https://en.wikipedia.org/wiki/Thomas_Bayes" rel="">Thomas Bayes</a><span>, whose theory of probability still sets nerd hearts aflutter, was a priest. </span><a href="https://www.britannica.com/biography/Gregor-Mendel" rel="">Gregor Mendel</a><span>, the pea plant guy who founded genetics, was a monk. </span><a href="https://en.wikipedia.org/wiki/Galileo_Galilei" rel="">Galileo</a><span> and </span><a href="https://en.wikipedia.org/wiki/Leonardo_da_Vinci" rel="">Da Vinci</a><span> spent much of their careers trying to worm their way into the good graces of various</span><a href="https://escholarship.org/uc/item/94q0q1gq" rel=""> patrons</a><span>. </span><a href="https://en.wikipedia.org/wiki/Marie_Curie" rel="">Marie Curie</a><span> did her early work in a shed next to a French university; they only gave her a job after she got famous. </span><a href="https://en.wikipedia.org/wiki/Antonie_van_Leeuwenhoek" rel="">Antonie van Leeuwenhoek</a><span> sold drapes to support his side hustle of inventing microbiology.</span></p><p><span>I predict that these last few decades, in which professional science nearly eradicated the dabbler and the part-timer, will turn out to be a blip in history, for two reasons. First, the structures of academia are so warped, competition is so fierce, and opportunities are so scarce that even its biggest adherents spend most of their time complaining about it. When numerous Nobel Laureates are saying that </span><a href="https://www.experimental-history.com/p/science-is-a-strong-link-problem" rel="">they couldn’t have done their Nobel Prize-winning work in today’s system</a><span>, something’s bound to break.</span></p><p><span>And second, for the first time in human history, the tools of science are cheap, and knowledge is nearly free. Your laptop can store and analyze more data than Galileo could have even imagined. Internet </span><a href="https://sci-hub.se/" rel="">pirates</a><span> have toppled the scientific paywall and made nearly every paper ever written freely accessible to everybody. Nobody can stop you from </span><a href="https://psyarxiv.com/2uxwk/" rel="">uploading a PDF of your research to the internet</a><span>, where tens of thousands of people might see it. The only thing stopping you from jumping in is your own fear.</span></p><p>If you're interested in accepting this invitation, here are four ways I can help.</p><p><strong>#1: If you email me for help on a scientific project, I will respond.</strong></p><p>I might not respond right away—I’m pretty slow at email—but I will get back to you eventually. I will take your ideas seriously and talk to you like a colleague, because we are all colleagues in the great project of understanding the universe. That also means if your ideas seem crazy or your methods seem flawed, I’ll tell you. I can't keep up every email chain indefinitely, but I’ll reply to everyone at least once, or until I simply can’t keep up.</p><p>Of course, there are lots of subjects that I know nothing about, which brings me to:</p><p><strong>#2: I’ll connect you to other people who have similar interests.</strong></p><p>I set up a Discord server for folks doing science, and I’ll add anyone who reaches out and explains what they’re looking to do. Once we reach a critical mass, this could be a place where people go for advice, to discuss ideas, and find collaborators.</p><p>I'll check in occasionally, but I expect to be pretty hands-off. I’m intending this to be a place where people talk to each other, not to me.</p><p><strong>#3: If I see you doing good stuff, I'll link to it.</strong></p><p>Self-explanatory. And finally:</p><p><strong>#4: I'll answer a few questions to get you started.</strong></p><p><strong>Where do I start?</strong></p><p>Probably with something that seems weird to you. Something that annoys you because you don't understand it. Some parts of research can be boring; wanting to know the answer really bad will help keep you going.</p><p><span>Also, read </span><a href="https://slimemoldtimemold.com/2022/02/10/the-scientific-virtues/" rel="">The Scientific Virtues</a><span>.</span></p><p><strong>What if I don’t have any formal training or credentials?</strong></p><p>Formal scientific training is way less formal than you think.</p><p><span>You might imagine that when you enter a PhD program, a wise old scientist sits you down and tells you all the secrets of science. This doesn't happen. You take a few classes, most of them totally irrelevant to the research you end up doing. When you have a question about statistics, you go to </span><a href="https://stackoverflow.com/" rel="">StackOverflow</a><span>. Most of the papers you read are the ones you find for yourself, probably using </span><a href="https://sci-hub.se/" rel="">Sci-Hub</a><span> because it's easier and faster than accessing papers legally through your university.&nbsp;</span></p><p>I was lucky enough to have a terrific advisor who taught me a ton, but that's pretty rare—plenty of people spend years of their PhD just waiting for their boss to respond to an email. So if your scientific education is mostly DIY, well, so is everyone’s.</p><p><strong>Haven’t all the easy ideas been taken?</strong></p><p><span>No, and if you say that again </span><a href="https://www.experimental-history.com/p/ideas-arent-getting-harder-to-find" rel="">I will fight you</a><span>. If you start with something you don’t understand, there’s a good chance that soon enough you’ll bump up against something that no one understands.&nbsp;</span></p><p><strong>How can I do anything useful when I don’t have any resources?</strong></p><p><span>You can do a lot of interesting stuff with cheap, simple methods. </span><a href="https://www.experimental-history.com/p/pop-culture-has-become-an-oligopoly" rel="">Pop culture has become an oligopoly</a><span> was just "copy data off the internet and make some graphs."</span><a href="https://www.pnas.org/doi/10.1073/pnas.2011809118" rel=""> Do conversations end when people want them to?</a><span> was just "have people talk and then ask them when they wanted to stop." Slime Mold Time Mold's </span><a href="https://slimemoldtimemold.com/2022/07/12/lose-10-6-pounds-in-four-weeks-with-this-one-weird-trick-discovered-by-local-slime-hive-mind-doctors-grudgingly-respect-them-hope-to-become-friends/" rel="">Potato Trial</a><span> and </span><a href="https://slimemoldtimemold.com/tag/community-trial/" rel="">Half-Tato Trial</a><span> were just "get people on the internet to eat potatoes and weigh themselves." Rita Levi-Montalcini discovered how the nervous system develops by </span><a href="https://archive.is/S1aLJ#selection-3189.233-3189.607" rel="">poking chicken eggs with a needle</a><span> in her bedroom/laboratory.</span></p><p>In fact, if you're willing to use simple methods, you actually have an advantage over professional scientists. The pros wanna look cool to their colleagues (and win big grant money from the government), so they have to use the fanciest, most advanced techniques, even when simpler stuff would do them better. That's great for you, because it means the professionals will rarely investigate important questions if they don't require giant magnets or ten thousand computer cores or whatever. Cheap ideas are just lying around for you to scoop up. So scoop ‘em, darn it!</p><p><strong>What if I do a bad job?</strong></p><p>If you work on a project that goes nowhere, who cares? Move on to the next one. Don't worry about making mistakes—there is a 100% chance you will make a mistake, so when it happens, go "oops" and fix it. Be honest and transparent. The stakes are way lower than they seem.</p><p><strong>What if no one listens to me?</strong></p><p><span>That might happen! It's happened to lots of people who turned out to be right, like </span><a href="https://en.wikipedia.org/wiki/Ignaz_Semmelweis" rel="">the guy who told doctors they should wash their hands</a><span>, and </span><a href="https://en.wikipedia.org/wiki/Alfred_Wegener" rel="">the guy who hypothesized that all the Earth's landmasses used to be one big Pangea</a><span>.</span></p><p>In my experience, though, the internet is smaller than you imagine, and good work tends to travel. But you should do this because you think it's important and you like doing it. If you're doing it because you want influence and affirmation, reconsider!</p><p><strong>What if people yell at me?</strong></p><p>They might. Whenever you post something publicly, there's a chance people will be mean to you, because some people think that being nasty makes them look smart. Unfortunately, the only solution is to ignore them.</p><p><strong>Is it legal to do science on your own?</strong></p><p>Don't laugh—I've had professional scientists ask me this!</p><p>In short: yes. You don't need a license to do science. But you still have to obey the law. You can't pretend to be a doctor, steal people's data, secretly lace someone's lunch with chemicals and watch their reaction, etc. You shouldn’t do anything illegal or immoral in pursuit of scientific truth, just like you shouldn’t do it in pursuit of anything else.</p><p><strong>How do I know whether someone has tested my idea already?</strong></p><p><span>Career scientists don’t get any credit for re-dos, so they worry a lot about making sure no one has scooped them. But it’s actually good for science if people are replicating previous work, so long as the idea was a useful one in the first place. Many studies are bad, some of them are straight-up fraudulent, and it’s pretty likely that you’ll ask the question in a different way than your predecessors did. Plus, replicating previous work is </span><a href="https://slimemoldtimemold.com/2022/03/23/the-only-true-wisdom-is-knowing-that-you-cant-draw-a-bicycle/" rel="">good practice</a><span>. So if you really want to get to the bottom of something, just go for it.</span></p><p><strong>What can I do that a professional scientist can’t?</strong></p><p><span>Oh man, </span><em>tons</em><span>. Here are just a few things.</span></p><ul><li><p>Screw around on projects that might be a total waste of time, just for fun.</p></li><li><p>Write a paper that’s like “Hey here’s a weird thing I found and I have no idea why it happens”</p></li><li><p>Research stuff that’s bizarre or unpopular or disconnected from any existing literature.</p></li><li><p>Write a paper that’s like “Hey my hypothesis was totally wrong, what’s up with that”</p></li><li><p>Work on super long-term projects that only bear fruit after decades of work</p></li></ul><p><strong>Do you have any helpful examples of people doing science outside of professional institutions?</strong></p><p>Yes!</p><p><a href="https://aella.substack.com/" rel="">Aella</a><span> is a sex worker and a scientist. She runs big surveys about people’s sexual behaviors and tries to learn from them.&nbsp;</span></p><p><a href="https://exfatloss.substack.com/?utm_source=substack&amp;utm_medium=web&amp;utm_campaign=substack_profile" rel="">Experimental Fat Loss</a><span> is a pseudonymous blogger who has run lots of self-experiments on weight loss.&nbsp;</span></p><p><a href="https://theeggandtherock.substack.com/" rel="">Julian Gough</a><span> is unspooling a theory of the universe on his Substack, which involves making </span><a href="https://theeggandtherock.substack.com/p/last-minute-gravitational-wave-predictions" rel="">detailed predictions</a><span> for what the International Pulsar Timing Array will detect.</span></p><p><a href="https://slimemoldtimemold.com/" rel="">Slime Mold Time Mold</a><span> are mad scientists who are, among other things, trying to solve the obesity epidemic. They also have a terrific </span><a href="https://slimemoldtimemold.com/2023/06/28/n1-bite-the-bullet/" rel="">series</a><span> on how to run one-person or few-person studies, which could be a good place to start.</span></p><p><strong>This sounds cool, but I don’t know if I really want to do science. Are there other ways I could help?</strong></p><p>Science needs programmers, project managers, grant writers, editors, research assistants, funders, and a million other things besides. If you want to be involved, get aboard! The Discord will be a good place to start.</p><p><span>If you call what I’m describing here “citizen science,” I will karate chop you. I </span><em>despise</em><span> that phrase. All science is science, regardless of the author’s credentials. Slapping the label “citizen” on science done by people working outside of institutions is just a way of widening the moat around the ivory tower, of reinforcing the false idea that only people with PhDs and academic jobs get to do “real” science.&nbsp;</span></p><p><span>You can have impeccable academic credentials, land a fancy job at an elite university, and publish hundreds of papers, all without ever putting a useful piece of knowledge into the world. Many people pull this off! Sometimes they do it by writing papers that are true but meaningless. Other times they do it by opening up an Excel spreadsheet and </span><a href="https://www.nytimes.com/2013/04/28/magazine/diederik-stapels-audacious-academic-fraud.html" rel="">typing in some fake data</a><span>. These people are not scientists, no matter what it says on their office doors.</span></p><p>So I don’t care if you’re a nobody from nowhere. I don’t care if you pay your bills by cleaning toilets, selling Beanie Babies on eBay, or managing an Olive Garden. If you discover some useful nugget of truth about the universe, you’re a scientist.</p><p>One more thing: I believe that anything that people make on their own, anything they create for pure pleasure, is beautiful.&nbsp;</p><p>People will sit alone in their basements playing guitar simply because they like the sound. They’ll paint, write poems, and whittle wood into little figurines without any expectation of gaining money or fame. It just makes 'em feel good. All of that is beautiful.</p><p><span>Anything that humans only produce in exchange for money, on the other hand, is ugly.&nbsp;No one designs billboards or writes instruction manuals for microwaves on a lark. When people pick up a guitar of their own accord, they sing about love and longing, not about how Tide laundry detergent cleans even the toughest stains. That doesn’t mean these endeavors are </span><em>bad</em><span>—someone’s gotta tell you how to work your microwave—but it means they aren’t beautiful.</span></p><p><span>Right now, almost no one sits down and writes a scientific paper for pure pleasure. I talk to people all the time who signed up for academia thinking they were going to uncover the mysteries of the universe, and they ended up doing something that </span><em>kind of </em><span>looks like that, but isn't really, and somehow feels pretty bad a lot of the time. They say things like, "I usually come to hate my papers by the time I get them published."</span></p><p>That doesn't mean that science is inherently ugly. It means we aren't doing it the beautiful way. When you do science under duress, you produce something that looks a lot more like a Tide commercial than a love song. It's still possible to make something useful that way, but it's very hard to make something beautiful.</p><p>You, though, can do things the beautiful way. You can make knowledge the same way you would make music in your basement: just because you like doing it. I hope you will. I'll be waiting to hear from you.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A 17th-century font in a 21st-century thesis (448 pts)]]></title>
            <link>https://www.linyangchen.com/Typography-Fell-Types-font</link>
            <guid>36807108</guid>
            <pubDate>Thu, 20 Jul 2023 21:38:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.linyangchen.com/Typography-Fell-Types-font">https://www.linyangchen.com/Typography-Fell-Types-font</a>, See on <a href="https://news.ycombinator.com/item?id=36807108">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="sm-page-widget-rbd4vSp7" data-typeid="10174308" data-layout-column="0" data-layout-row="S"><p>
©<i>Lin Yangchen</i></p><p>
I was never completely happy with most digital fonts for flowing text, even those like Caslon and Garamond. They are&nbsp;too uniform and disciplined. The letters are sized and aligned to nanometer accuracy, the serifs are exactly the same, it's like laser, like a robot. They are&nbsp;missing one of the endearing characteristics of the old letterpress typefaces: the handcut, manually typeset&nbsp;look. Faithful&nbsp;digital reproductions of original letterpress typefaces are hard to come by; one of them is Founder's Caslon (<a title="Justin Howes Founder's Caslon Tugboat sample" href="https://www.tug.org/TUGboat/tb24-3/wong.pdf" target="_blank">sample pdf</a>) by Justin Howes. Sadly it is no longer commercially available after he died of a heart attack at the age of 41 in 2005.
</p><center><img src="http://www.linyangchen.com/photos/i-G9xQbXV/0/X3/i-G9xQbXV-X3.jpg" height="800" alt="William Caslon typeface specimen sheet 1741"><br><span>One of the original specimen sheets of William Caslon, printed in London in 1741.</span></center>
<p>
One day, I decided to visit my university library to see the&nbsp;original specimen sheet printed by William Caslon in 1741, in the library's rare book collection. It was a timeless experience seeing and handling the specimen sheet itself, not a digital scan of it.&nbsp;It was like a live performance of the Vienna Philharmonic at the Musikverein, versus an mp3 on the iPod. I began to look for a way to emulate letterpress printing in <a href="https://linyangchen.files.wordpress.com/2015/10/lin_yangchen_phd_thesis.pdf" target="_blank">my PhD dissertation</a>. Fortunately, the university did not stipulate that I must format it in Times New Roman font size 12.
</p><p>
The&nbsp;so-called '<a title="Dutch Fell Types wikipedia" href="http://en.wikipedia.org/wiki/History_of_Western_typography#Fell_types" target="_blank">Dutch Fell types</a>' from c. 1670 quickly captured my attention, as they are the primeval typeface from which Caslon was&nbsp;derived and they predate Caslon by about half a century. It turns out that type engineer Igino Marini has embarked on a labour of love in the last decade to faithfully digitize the Fell types, empower it with all the advanced typographic features of OpenType, and make it <a title="IM Fell types digital revival font Igino Marini" href="http://iginomarini.com/fell/the-revival-fonts/" target="_blank">freely available</a>&nbsp;for the benefit of humanity. More recently it became available in Google Fonts. In fact, you are reading it right now.
</p><center><img src="http://www.linyangchen.com/photos/i-Whp25CZ/0/X3/i-Whp25CZ-X3.jpg" width="800" alt="Fell Types Specimen 1693 Oxford University Press"></center>
<p><span>The very first specimen book of the Fell types, printed at Oxford University Press in 1693, when J. S. Bach was only 8 years old. Only four copies are known to exist. Furthermore, many of the original punches and matrices, some of which were made of wood, have been lost (Oxford University Press 1900), so these specimens are the only record.</span></p><p>
Fell is quite a badass typeface, even by letterpress standards. It has an inconsistent x-height and ragged baseline, and no two serifs are the same.&nbsp;But the person who cast these types was no reckless driver. Inspect the characters and you'll see that underlying all the noise is an exquisite sense of balance not only within any given character, but also in the `flow' from one character to the next, making it quite comfortable to read despite the noise. Indeed, these qualities characterized&nbsp;similar typefaces widely used in northwestern continental Europe during the time, from the Netherlands (see&nbsp;Enschedé 1978) to Denmark (see Nielsen 1934), and would later go on to take the world by storm in Caslon, and they are still celebrated today. They have the spontaneity of a live performance of a great symphony, in which musical instruments played by humans are never perfectly in tune and occasionally quite far out of tune, and with all the harmonic transients at the beginning and end of every note that make the music breathe like a living organism.
</p><p>
If you compare Caslon and the Fell types glyph by glyph, there are mainly superficial differences. But I realized from viewing the&nbsp;blocks of text as a whole that there is a more significant, though subtle, difference at the level of words, lines and paragraphs. At reading-text optical sizes, the Fell types are slightly heavier in the vertical strokes than Caslon, giving the former not only a slightly darker colour on the page but also a slightly more `picket-fence' look. In extreme cases, the `picket-fence' effect can make a typeface harder to read at least to the modern eye (<a title="Blackletter gothic script Wikipedia" href="http://en.wikipedia.org/wiki/Blackletter" target="_blank">Gothic script</a>&nbsp;comes to mind).&nbsp;The `picket fence' can make the reader feel a little `held back', especially in long passages of text. The abnormally large line spacing required by universities for dissertations only exacerbates the imbalance between vertical and horizontal density.
</p><center><img src="http://www.linyangchen.com/photos/i-FKtDFgJ/0/X3/i-FKtDFgJ-X3.jpg" height="600" alt="Fell types English Roman and English Italic 1693 specimen Oxford"></center>
<p><span>The English Roman and English Italic of the Fell types in the original 1693 specimen. Note the slight `picket-fence' effect of the English Roman text as a whole, caused by relatively thick vertical strokes, which I tried to alleviate by increasing the letterspacing (see main text below).</span></p><center><img src="http://www.linyangchen.com/photos/i-K7mHNX9/0/X3/i-K7mHNX9-X3.png" width="360" alt="William Caslon 1741 Specimen English Roman"></center>
<p><span>The corresponding English Roman from the Caslon specimen, showing slightly less `picket fencing' because the strokes within individual letters are more uniform in weight.</span></p><p>
Igino Marini very kindly contributed his views in 2015: <i>The Fell Types project premise was that of reproducing as much as possible the original types without any other active interpretation. Applied both to the digitized shapes and the global spacing tightness. So I can't say anything about the latter because I didn't decide it. The punchcutter could. Eventually the original samples from Carter and Morison's books were set even tighter. It's obvious that a digital typeface, like Adobe Caslon, conceived in a different century, intended to be used at a different size on different media for a different audience may be somewhat different. The Fell Types were meant to be faithful not pleasant nor modern.</i> — Igino Marini
</p><p>
After careful consideration, I decided&nbsp;to break one of the cardinal rules of typesetting: that one should never change the letterspacing of the lowercase letters, because it has already been perfected by the original creator for optimal appearance and readability. I am perhaps more liberal with this rule, as I believe that typography, like music, is an art that that might be subject to some nuances of interpretation. One should of course be wary of overdoing it. In this case I spaced out all the letters just enough that the vertical and horizontal 'resistances' of the text felt just about equal, using the <a href="https://ctan.org/pkg/fontspec" target="_blank">fontspec</a> package in LaTeX. The difference between the end result and the original is almost unnoticeable at the microscopic level, but at the macroscopic level there is in my eyes a very subtle and positive release of 'pressure' that allows the text to breathe and read more freely. It is certainly not as far-fetched as Leonard Bernstein's <a title="Leonard Bernstein BBC Symphony Orchestra Elgar Enigma Variations Nimrod" href="http://youtu.be/JWsqEbCxh-w" target="_blank">controversially slow reading</a> of <i>Nimrod</i> from Elgar's <i>Enigma Variations</i> with the BBC Symphony Orchestra.
</p><center><img src="https://www.linyangchen.com/photos/i-t4KNDRt/1/O/i-t4KNDRt.png" width="560" alt="IM Fell English Pro default letterspacing"><br><span>Fell English Roman at default letterspacing, exhibiting 'picket fencing' (but less so compared to many other typefaces).</span>
<p>
<img src="https://www.linyangchen.com/photos/i-xrdBT36/1/O/i-xrdBT36.png" width="560" alt="IM Fell English Pro increased letterspacing"></p></center>
<p><span>The same paragraph with increased letterspacing in LaTeX to reduce `picket fencing'. The difference is hardly noticeable but may reduce eye strain over long periods of continuous reading. Also notice the margin kerning (protrusion) in both cases, achieved using the <a href="https://www.ctan.org/pkg/microtype" target="_blank">microtype</a> package in LaTeX.</span></p><p>
But it turned out that that wasn't the end of the story. After spacing out the lowercase letters it was noticed that the italic type now looked too spaced out, because italic letters resembling handwriting are predisposed to be somewhat more connected together than roman letters. I therefore compressed the italic words back to their default letterspacing, which looked and read better. Then I noticed that the italics in the page headers, which were rendered at a smaller font size, looked too cramped. A&nbsp;re-examination of&nbsp;the 1693 specimen revealed that italics at smaller font sizes were actually&nbsp;set with a larger letterspacing, improving their readability. So I re-adjusted my headers to space out the italics there until they looked perfect, which required an increase in spacing larger than that applied previously in the main roman text. All in a day's work for typesetting—they had an even harder time positioning every single character individually back then. When I awoke the next morning, the normal-sized italics in the main text looked too tight to my rejuvenated eyes, &nbsp;so I re-adjusted them again. <i>Now</i> they look right. See <a href="https://linyangchen.files.wordpress.com/2015/10/lin_yangchen_phd_thesis.pdf" target="_blank">my dissertation</a> for the final result.
</p><p>
A word about LaTeX. The Fell font file exploits such advanced configurations of digital font standards that one encounters a series of challenges getting it to typeset in LaTeX and getting the pdf to display and print properly; see <a href="http://tex.stackexchange.com/questions/201595/accented-letters-with-im-fell-fonts/" target="_blank">this thread on Stack Exchange</a> where fellow users and I discuss some of our problems and solutions.
</p><p>
<b>Adjustments to individual characters</b></p><p>
Finally, I manually enhanced some of glyph shapes and kerning in&nbsp;the font,&nbsp;the final step in making my thesis&nbsp;typographically unique and achieving my personal typographic ideal.&nbsp;Changes to the glyph shapes and kerning tables of a font cannot be made in a word processor or Adobe Illustrator; a specialized font editing programme is needed. I used <a title="FontForge" href="https://fontforge.org/" target="_blank">FontForge</a>. With it, you can take a font apart, explore its gears, springs and nuts and sculpt it to perfection like an artisan with a hammer and chisel.&nbsp;The IM Fell fonts came with the SIL Open Font License at the time I made the changes.
</p><p>

The IM Fell font is actually not exactly identical to the original Fell types, because it was digitized from a later reproduction of the originals using letters newly cast in the late 19th century, which I found to be slightly different by comparing with the original specimens from 1693 in the library. However, the quest for originality wasn't my main motivation for making changes; it was that a few of the letters in IM Fell had (faithfully reproduced) obvious kinks, presumably introduced during the 19th-century recasting process, that detracted from its readability.&nbsp;The digitized font is actually slightly&nbsp;overweight compared to the original (see illustrations above), but I decided not to try reducing its weight, because there is a real risk of distortion when trying to reduce the thicker parts more than the thinner parts, and the current colour of the text block as a whole does not come across as too dark for reading comfort, somewhat thanks to my increased letterspacing.
</p><p>
LIST OF MODIFICATIONS
</p><p>
1. Removed the overlap between the solidus and the dot of 'i', which can occur occasionally e.g. 'out/in'. Another option is to use a dotless i in a sort of '/i'-ligature—in LaTeX just use {\i} to get the dotless i. But the solidus should ideally not be used in prose.
</p><p>
<img src="http://www.linyangchen.com/photos/i-xK3JjSG/0/O/i-xK3JjSG.png" alt="" width="411" height="410"><br><span>Before: solidus overlapping with dot of i.</span></p><p>

<img src="http://www.linyangchen.com/photos/i-TD2tnsR/0/O/i-TD2tnsR.png" alt="" width="411" height="410"><br><span>After: overlap removed.</span></p><p>
2. Fixed the upwards-protruding upper right serif of letter u. In the original specimen of the Fell types there is no protrusion (see specimen above). I also made the serif horizontally shorter so that it doesn't appear joined to the left-hand stroke, making it more readable.
</p><p>
<img src="http://www.linyangchen.com/photos/i-cgfhzp6/0/O/i-cgfhzp6.png" alt="" width="381" height="368"><br><span>Letter u before, with protruding right serif.</span></p><p>
<img src="http://www.linyangchen.com/photos/i-sNHnbTL/0/O/i-sNHnbTL.png" alt="" width="385" height="370"><br><span>Letter u after.</span></p><p>

3. Made the small-cap C look less like G. In this case the specimen&nbsp;itself looks like G, but it is most likely an unintended aberration caused by imperfect cutting or printing, because all the other C's don't look like that.
</p><p>
<img src="http://www.linyangchen.com/photos/i-bKjhV2T/0/O/i-bKjhV2T.png" alt="" width="357" height="362"><br><span>Small-cap C before, resembling G.</span></p><p>
<img src="http://www.linyangchen.com/photos/i-cp74Spg/0/O/i-cp74Spg.png" alt="" width="359" height="365"><br><span>Small-cap C after.</span></p><p>

4. Lengthened the&nbsp;en dash and em dash, which previously looked like the hyphen and en dash respectively. Also made them sleeker so they blend better into the 'colour' of the text block as a whole.
</p><p>
5. Not modified: overlap of adjacent italic g's. I left it alone, although this is physically impossible in letterpress unless cut together, because separating the bottoms would result in too much space between the two characters. Unfortunately there is no example in the specimen book to indicate how this would have been typeset back then. Short of drawing a custom gg ligature, it doesn't look too bad as it is; a little intimacy won't hurt.
<br>
<img src="http://www.linyangchen.com/photos/i-Gww4BZN/0/O/i-Gww4BZN.png" alt="" height="154"></p><p>
6. Finally, it seems there's no way around this other than avoiding words that did not exist at the time:
<br>
<img src="https://www.linyangchen.com/photos/i-Wm3LTrq/0/O/i-Wm3LTrq.png" alt=""></p><p>
In these close-up illustrations of the glyphs one can see how badass the font is with its kinks and nicks. The wood and metal type itself was unlikely to have had so many defects; the roughness of papers made at the time also had a role to play. When printed at normal size on modern-day smooth papers, these&nbsp;kinks and nicks achieve the intended effect of&nbsp;making it look like handmade paper pressed onto handcut letters.
</p><center><img src="http://www.linyangchen.com/photos/i-6XML3fX/0/O/i-6XML3fX.jpg" alt="2001: A Space Odyssey dawn of man prehistoric ape" width="818" height="574"></center><p>
Did I take things a little too far? Should a dissertation&nbsp;involving 21st-century computing resemble a book printed in the Renaissance? Perhaps the answer lies in this scene from <i>2001: A Space Odyssey</i>, where the distant past meets the distant future.
</p><p>

<b>Literature cited</b></p><p>
Enschedé, C. 1978. <i>Typefoundries in the Netherlands from the Fifteenth to the Nineteenth Century.</i> Stichting Museum&nbsp;Enschedé, Haarlem.
</p><p>
Nielsen, L. 1934. <i>Dansk Typografisk Atlas 1482–1600.</i> J. Jørgensen &amp; Co., København.
</p><p>
Oxford University Press 1900.<i> Notes on a Century of Typography at the University Press, Oxford 1693–1794.
</i></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My Beautiful Friend (120 pts)]]></title>
            <link>https://thepointmag.com/examined-life/my-beautiful-friend/</link>
            <guid>36807071</guid>
            <pubDate>Thu, 20 Jul 2023 21:35:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thepointmag.com/examined-life/my-beautiful-friend/">https://thepointmag.com/examined-life/my-beautiful-friend/</a>, See on <a href="https://news.ycombinator.com/item?id=36807071">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
						            <p>Toward the end of my teens, it began to dawn on me that my face was probably fully formed. That no radical change was forthcoming. That even back when I still held out hope, my features were meanwhile settling, treacherous, into a mediocrity which surprised, humiliated, crushed me. In other words, I was not going to be any great beauty. I was only going to be what I was: attractive occasionally, like most people, relative to whoever happened to stand nearby. I was horrified; I couldn’t get over it. Being average-looking is, by definition, completely normal. Why hadn’t anyone prepared me for it?</p>
<p>I could not have discovered I was plain without discovering K was pretty. She is my friend of many years. Back then, it obsesses me: how we make each other exist. We attend elementary school together, then high school. She enrolls at a nearby college. Her tall grants me my short; my plump her skinny; her leonine features my pedestrian ones. I resent her as much as I exult in her company. In between us, and without words for it, the female universe dilates, a continuum whose comparative alchemy seems designed to confront me, make me suffer, lift her up. Her protagonism diminishes me, or does it? I confuse myself for a long time thinking I am the planet, and K is the sun. It takes me a long time to forgive her.</p>
<p>Comparison steals my joy, but it also gives me a narrative. All in all, it feels radical to make a world together, she and I, a silent tournament of first kisses, compliments, report cards. I live at a fixed point from K, her lucky arms, her lucky neck, her lucky elbows. I pursue beautiful friends like some women do men who will strike them in bed at night. On account of our addictive relativity. On account of my envy, which I’ve made, like many women, the secret passion of my life.<span>&nbsp;</span></p>
<p>●</p>
<p>There’s something gorgeously petty about many women’s lives. They’re not trying to be great. They’re trying to be better. It’s why women diet together; dye their hair light, then dark, then light again; dress for each other; race to get engaged; wait to get divorced; find a taken man more attractive than a free one. Become girlbosses in droves and then give it up. A woman can spend her whole life in real or imagined competition with her friends, finding herself in the gaps between them. Especially in the game of looks, there is no excellence that is not another woman’s inadequacy, no abundance that does not mean lack. A great beauty is discovered, like crude oil, or gold. That means in a parched desert, or a dirty riverbed, where the rest of us must languish. Our democratic sensibility commands us to raze all unfairness. Yet the way we sacralize beauty, our treatment of the women who try to level it, our satisfaction when no one can, calls our bluff.</p>
<p>For me, the humiliations stack up. I nurse them like little children. I pick at them like scabs. The horrid boy I desperately love, who pretends to love me, studying K’s legs on the trampoline. We are seventeen, and I study them too. Up and down, slender, hairless, vanishing up the thighs, into the sun. Later he sends her a message on Facebook. She does nothing to betray me. What I want is for those legs and the mat of the trampoline to go rigid, to snap, for her bones to spray and splinter, to pierce me through the eyes, so I cannot look at either of us anymore.<span>&nbsp;</span></p>
<p>Or, a couple years later, when I believe I’ve matured, gotten over it, displaying my fake ID at a college party. It’s my friend’s, I explain. It’s K’s. How funny. It works, we look <i>just enough</i> alike. A drunken classmate laughs. “Yes,” he says. “Except she’s hotter than you.” My face silences him, then the room. His words spread my legs, pass a hand through me, find something dying. He apologizes until I console him. I return to my dorm and drown in abjection, almost pleasurably at this point. I’d like to call my mother, whom I resemble. Except that in all of our talks of puberty, she omitted this. She gave me my face and felt guilty; I had to learn for myself how my suffering held something up.</p>
<p><span>My own inglorious adolescence ends with me dumped, over brunch, at twenty. He has a strong jaw which dazes and a soft birthmark, near the mouth. He is ten years older than me. That last bit is not the part that hurts. It’s that he’s telling me about another girl. “She’s amazing,” he says. “I haven’t felt like this in a long time.” I think of what we’ve done for a long time and I go to the bathroom and vomit. When I come back he’s still speaking. I wonder, in silence, what it would be like to be the sort of girl about whom they say, he can’t shut up about her. “She’s a writer,” he tells me, with love in his eyes. He looks so handsome, I want to kiss him, exactly now, when, <i>because</i>, he can’t shut up about her. I go home, look her up, write a poem, get over him as soon as I get it published, thinking vaguely, see, there, that was easy, take that—I might be less lovely, but there are other competitions, I can be a writer too.</span></p>
<p>●</p>
<p>In those bad <span>years</span> I read and reread a story by Émile Zola called “Rentafoil.” A satire, it tells of a wicked entrepreneur, Durandeau, who cooks up a nasty scheme of renting out ugly women as living foils for better-looking ones. Strolling around nineteenth-century Paris, observing “two girls tripping along,” one pretty and one ugly, Durandeau realizes that the ugly woman is an “adornment worn” by her prettier companion. She makes her look good. Her asymmetry sets off her symmetry; her dull face, her shining one. For five francs an hour, Durandeau’s agency makes available to the “upper crust” ugly women to drag about town. There’s nothing like the “pleasure of a pretty woman leaning on the arm of an ugly one,” knowing herself enhanced. And nothing like the sorrow of their Foils, who “fret and fume and sob” at night. Finally, the narrator confesses that he “may write the <i>Secret Memoirs of a Foil</i>,” inspired by one “terribly jealous” employee, lovesick and bitter, who reads too much. “Can you imagine her resentment?” the narrator asks. I could.</p>
<p>But take the first plain girl that inspires Durandeau. She isn’t employed or receiving a salary, but she must be getting something. Or else why on earth would she tolerate it? The unfairness of beauty, the pinch of being its friend. The comforting fable says: the great beauty hurts us like a splinter but helps us like a measuring stick to understand ourselves. Affords us insight, depth. An opportunity to compensate. After all, it’s the plain woman about whom the narrator of “Rentafoil” wants to write, not the beautiful one. I study that poem by Yeats. Waxing about “Two girls in silk kimonos, both / Beautiful, one a gazelle.” How casual, I think. How vicious. If she read that, the girl who wasn’t a gazelle, she probably never recovered. It strikes me only later that she might not have wanted to. For what we tolerate of beauty—that pinch—is also, curiously, what we reap from it.</p>
<p>From Austen to Ferrante, women’s literature is ripe with dyads of women, made up of a beautiful half and a less beautiful half. Here, the arbitrariness of beauty plays out in long, anguished plots, games of chutes and ladders, whereby some women find themselves socially, magically, economically mobile, and others do not, at least not so easily. We recognize the “winner” as soon as we read what she looks like. In first-person stories, more often than not, it’s not the narrator. These plain heroines yearn for, resent, are fascinated by, love, hate, cannot stay away from, their more beautiful, fortunate counterparts. They articulate a precisely feminine pain I know well, worse than menstrual cramps. A sense of one’s own plainness. Inferiority. An envy so profound and wistful it is almost sexually charged.</p>
<p>This tone in women’s literature, this snake twist of the belly that signals envy in the same place as desire, engrosses me. Some of the most exquisite passages of eroticism are in the voice of women envious of other women. Wanting them? Sometimes. Wanting to be them? Naturally. I watch K do the dishes, in her bikini top and her peasant skirt, and the tight abdomen that is an insult, and the overhead light that haloes her hair, careless, the soap, the suds, the satisfaction she must feel. In that moment, I want to take the dishcloth and wipe my face from the face of the earth.</p>
<p>●</p>
<p>I<span>&nbsp;</span>read, at first, in search of consolation prizes.</p>
<p><span>In the Neapolitan quartet, Elena Ferrante shows how unfairness, like money, accumulates; beauty forms the mask of what crushes, monopolizes, outshines. Lenù, the narrator, is a dogged teacher’s pet, born into poverty, who becomes a successful feminist writer mainly thanks to her diligence. Lila, her best friend, is a wünderkind. Along with “virtuosity” and the power to invent, Lila gets “an odor of wildness” and an “energy that dazed” men, “like the swelling sound of beauty arriving” to Naples. Lenù gets pimples and glasses. Some sirocco wind is always at Lila’s back, making her wealthy; making her loved; making her angry, brave, righteous; almost a model, or perhaps an actress, except she is married so young; the hero, the innovator, the victim, the star.</span></p>
<p>My insistence on fairness nearly convinces me that, in losing, Lenù must be winning something else. After all, what she envies of Lila is exactly what Lila, in turn, provides her with: content. That’s why Lenù sticks around. When a woman resembles a movie star, her conditions of living take cinematic turns. Life occurs to her quickly, impossibly, like the montage of romance, while the plainer girl plods along, a subject better suited to a documentary. But Lila’s shimmering existence seeps into Lenù’s. The “daily exercise” of noting the “convergences and divergences” between them, the “lines between moments and events” and those deus ex machinas which evade one and land on the other. Envy makes Lenù observant, a student of contrast. Which is to say a better writer—good thing, since we all write ourselves. While everyone plays the main character of their own lives, the plain girl is forced to be a little more thoughtful. She’d be written by Woolf, not Hemingway.</p>
<p>Doesn’t being graceful just mean not having to think? Nothing is laborious, everything is effortless, every morning Christmas morning since puberty left so many gifts. The awkward plain girl is driven, instead, to self-obsession. To make a craft of her posture, her eating habits, her odor, her laugh, why they fail her, how to improve them, the variations that make them superior and winsome in that favored someone else. The symbol of being a plain girl is a heart trying hard. Erasing, scribbling. Romanticizing her contours. Narrativizing her lack.<span>&nbsp;</span></p>
<p>This is the bone Ferrante throws the plain girls, only to toss it out. Lenù becomes the writer, sure, but even what shines in her writing, we are given to understand, derives from Lila’s unpublished work, effortless, with a “force of seduction” Lenù can only contain, transmit, emulate, as if tracing the path of a comet with her stubby pencil. Whatever prompt for reflection or observation Lenù extracts from Lila, Lila extracts from Lenù too. In other words, don’t kid yourself, even Lenù’s silver lining lies in Lila’s shadow.</p>
<p><img decoding="async" loading="lazy" src="https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4.jpg" alt="" width="1200" height="600" srcset="https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4.jpg 1200w, https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4-300x150.jpg 300w, https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4-1024x512.jpg 1024w, https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4-768x384.jpg 768w, https://thepointmag.com/wp-content/uploads/2023/07/Christie_PrudenceFlint_web4-600x300.jpg 600w" sizes="(max-width: 1200px) 100vw, 1200px"></p>
<p>Perhaps the plight of the plain girl is redeemed by its realism. Women age terribly. The homely woman gets there first. Everyone knows the genetically blessed woman remains better insulated, to some degree, from humiliation, male disdain, poverty. That Joan Didion thought the streetlights would turn green for her strikes one as rather unhinged, until one sees her photograph, and knows it with certainty. Beauty opens like a trapdoor, to second chances, the benefit of the doubt, a job you’re unqualified for, someone who will marry you, if you so require. The cost may be a life out of touch. The plain woman operates under fewer illusions, always a little closer to the truth. In <i>Wives and Daughters</i>, Elizabeth Gaskell’s last, unfinished Victorian novel, provincial Molly finds herself the stepsister of worldly Cynthia, whose “beautiful, tall, swaying figure” brews predictable scandal and then sidesteps it, at Molly’s cost. For Cynthia wears “her armor of magic”—they all do, letting her slip, eellike, out of the usual scrapes, if only to then get into others. The unfortunate and nameless protagonist of Marguerite Duras’s <i>The Lover</i>, fifteen, compares herself to her classmate, Hélène Lagonelle. Hélène is a virgin, her body “the most beautiful of all the things given by God.” One feels, as one reads, the monsoon brewing. Hélène is “infinitely more marriageable,” but “doesn’t know” what the girl with no name does, of typical survival. Of course not. We’ve read what she looks like. Such knowledge might be worth the price of plainness, if only it didn’t require knowing women like Hélène. “She makes you want to kill her,” the girl confesses.</p>
<p>And what of that final possible solace: that beauty is attended by its own kind of suffering. Objectification. Underestimation. Abuse. Too many men and their egos. Even more seductive an idea: Do beauty’s higher highs mean lower lows? Does whatever miracle that plucks a beauty from the crowd set her up, too, for catastrophe? Crowns her a princess just to cut off her head? Look at Lila in the Neapolitan quartet; she might get special treatment, but she also gets beaten. She loses a child; her anguish is as sharp as her fine bones. Plain Lenù studies, applies herself to an uphill climb, a subdued figure against a headwind, yes, but she does end up, on the whole, better off.</p>
<p>Yet whatever delusional peace this line of inquiry brings us, Ferrante snatches back. No suffering of Lila’s stops Lenù from being jealous of her. “What more do you want?” Lenù asks Lila, bitterly. But what more does Lenù want of Lila? The answer is as simple and complicated, as shallow and treacherously deep, as: Lila’s face, Lila’s body. The Neapolitan quartet undercuts that old, soothing sentence, that compulsive effort to compensate, to equalize, one that my own brother noted I used spitefully in high school, whenever he mentioned a pretty girl: “Yes, she’s beautiful, <i>but</i>…” But nothing. We might identify with Lenù, but who reads Ferrante’s books and wants to be anyone but Lila? It’s not all good, it’s just everything.</p>
<p>●</p>
<p>I<span>&nbsp;</span>fly from Marrakech to London. I wait in line at the airport as a young man is berating a young woman, who begins to cry. I board and discover that by some hellish providence, the woman is sitting next to me. I’m looking good these days, perhaps because I’m finally well-loved, but that’s for another story. The girl tells me everything. She lists atrocities but saves, in a quiet voice, the worst for last. “He said I was average-looking.” I can hardly stand to meet her eyes. The boy is a few rows behind us, chatting up a pretty stranger. “You’re not,” I say. “It doesn’t matter.” I touch her back. Something is happening between us, very wonderful and sad. Then in the middle of her sobs she holds her hands up, and laughs a little. “I’m sorry,” she says, and then crying harder, her voice breaking: “It’s just your hair. It looks so… beautiful. It seems so… soft.” It’s hurting her. I put it up.</p>
<p>In the first of the Neapolitan novels, Ferrante places a wealthy, “superior” girl in green—green shoes, green jacket, green bowler hat—green, the color of envy, in Lenù and Lila’s path. By the second book Lila remains worried over her. “You’re much prettier than the girl in green,” Lenù consoles her, then thinks, “It’s not true, I’m lying.”<span>&nbsp;</span></p>
<p>●</p>
<p>Some evenings i watch the reality TV show <i>Love Is Blind</i>, where the hierarchy of beauty I resent is toppled, then reasserted, to my masochistic schadenfreude. Singles date without laying eyes on each other, only meeting after becoming engaged. No one fares worse in the program than the unattractive woman paired with the better-looking man. Consider her fate as I do, on the couch, over ice cream. Alone, she meets her new fiancé. He kisses, compliments, gropes her, perhaps sincerely. She’s gorgeous, he says. She isn’t. We eye him as suspiciously as she is beside herself with joy. Days later, at a pool party, the couples reconvene. He sees the other women for the first time, and beside them, her, the one he chose, at last in context. His face falls. It is precisely at this moment he ceases to love her.</p>
<p>Other evenings I switch on <i>I Am Georgina</i>, on Netflix. It infuriates me, her story, the whole premise, Georgina Rodríguez, the surprising partner of football superstar Cristiano Ronaldo. How, like millions of other women, she once worked in a shop, playing nice with her customers, despising her days. How, unlike millions of other women, there existed something in her face so naturally beautiful as to unnerve Ronaldo, to stop him in his tracks when shopping, to impel him to take an interest in her. To move her into his mansions, where she might live in luxury, taking care of his mysterious, surrogate-born children, accruing Instagram followers, purses, a reality show, the guiltless blessings of the born lucky. She goes to work by bus. She leaves by Bugatti, forever. It riles me up. I turn on the television and I watch her and watch her until I love her and hate her, as I might a friend.</p>
<p>●</p>
<p>At the first faint signs of aging, relentless K is swift to get work done. Botox. It rankles me. We’re 26 now; isn’t she tired? Energy is neither created nor destroyed, so I search my forehead for her wrinkles and find them. I visit her dermatologist, taking the long way, dragging my feet, vain enough to have booked the appointment but not so vain I would have gone unprompted. The doctor prescribes me: one syringe of filler, to raise me from one level to another, as she did my friend. I infer: two syringes, to close our gap, make us level. An old wish. I nod, close my eyes, grip the table. Beauty, incoming. She readies the needle, then the first injection site. My eyes sting, I think, at the scent of the alcohol pad. Then some misgiving in my face stops her. “You know,” she says, slowly, “You and K are not the same, you are different types of… attractive, you don’t need to rush this.” Implicitly: I’m not as pretty. I have no such pressure, to prejuvenate, or invest. I sit up. The insult frees me. I could almost kiss her. I float to my car and drive home dancing, catching my flaws in the rearview mirror, like darlings an editor didn’t make me cut.</p>
<p>I’d gone to finally compete with K but settled for comparison, that poignant force that had always pushed me, turned my page, compelled me to try harder, thickened our plot by lending it subtext. I’m not the beautiful friend; that’s not my <i>category</i>. In the schema of how I understand myself, it’s simply not my place. The hierarchy of beauty parcels out different experiences of femininity. Mine mattered, and had grown on me, or perhaps I had grown around it.</p>
<p>And we reach a point where we can talk about it. Not our own looks, which we always discussed, but the no-man’s-land that always sprawled between them. We thought it was contested, but really it was ours. I broach it carefully, at first, like it will bring her power over me. I broach it more boldly when I realize it brings power to us both. A sense of freedom. K reads the draft of this essay. I act out the fake ID scene and we laugh. It’s different than when we were thirteen, at the beach, and I asked the child we babysat who was prettier, and then I put my face in the water like a Victorian heroine and tried to drown myself, but not very hard. Something has changed. We’re getting older. The breathtaking beauty of a young girl eventually exhales, deflates, we all start looking similar, in a decade or two we’ll fall into some binary of well-kept or not well-kept, and then what’ll matter is money, which fingers crossed I’ll have. But with beauty slowly, imperceptibly, leaving her, am I losing something also?</p>
<p>I might be no great beauty, but I’m no innocent, either: the only thing that feels better than being chosen is being slighted. I knew what I was doing, with that boy, with my classmate, the child we babysat, forcing each to play a test where the right answer, K, would always be wrong, would always shock me, gloriously, painfully, but never surprise me, confirming as it did what I already, irrevocably, knew. The rehearsed and yet devastated response it gives me license to perform. Admit it. There’s a power to melodrama; it’s why they call it drama <i>queen</i>. I have a stunning friend who applies lotion to her stunning body, religiously, every night, from her clavicle to her small Egyptian toes, and perhaps this is my version of that. A confused self-caress, interspersed with slaps, which smarts, yes, but says: this is my body, I am here, give me a story, send pathos in my direction, eye rolls allowed.</p>
<p>We play these scenes over and over again like dirges. When Nino picks Lila over Lenù in the second book of the Neapolitan quartet, the sky falls in our stomachs. Yet why does it feel so good? Who can explain our anticipation of that, our desire to see it exercised, exorcised? I’m trying. The night that Lenù learns that Lila and Nino have kissed, she uses “poems and novels as tranquilizers” to subdue her grief. She crafts a narrative, a “frame of unattainability” in which her bitterness becomes “utterable.” Isn’t that what, by reading, we are doing? Isn’t that why I stay less pretty than K? For the sake of extra practice. Practice at making, as we all must, a bearable poetry, a livable story, with characters and twists, of that which would otherwise kill us.</p>
<p><em>Art credit: (1) Prudence Flint, </em>The Promise<em>, oil on linen, 135 × 107 cm, 2021;&nbsp;(2) </em>Second Hang<em>, oil on linen, 142 × 109 cm, 2022. Courtesy of <a href="https://prudenceflint.com/">the artist</a> and <a href="http://www.motherstankstation.com/">mother’s tankstation Dublin | London</a>.</em></p>
								</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Good code is like a love letter to the next developer who will maintain it (300 pts)]]></title>
            <link>https://addyosmani.com/blog/good-code/</link>
            <guid>36807028</guid>
            <pubDate>Thu, 20 Jul 2023 21:32:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://addyosmani.com/blog/good-code/">https://addyosmani.com/blog/good-code/</a>, See on <a href="https://news.ycombinator.com/item?id=36807028">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
    <header>
        
        <h2>July 20, 2023</h2>
    </header>
    <section id="post-body">
        <p>We often romanticize the notion of programming, presenting it as an abstract form of art, a science, or even a form of magic. The truth, however, is much more practical and grounded. Code, in its essence, is communication. At the start of my book, <a href="https://www.amazon.com/Learning-JavaScript-Design-Patterns-Developers/dp/1098139879/">Learning JavaScript Design Patterns</a>, I say "good code is like a love letter to the next developer who will maintain it". It is an intimate correspondence, from one developer to another, spanning time and space.</p>

<h2>The Language of Love</h2>

<p>A love letter is personal, sincere, and considerate. It's a poetic testament of feelings, often meticulously crafted, with the intent to convey emotions accurately. Good code shares these characteristics. It's personal, as it mirrors the logic and approach of the coder. <strong>Good code is sincere and unadorned with unnecessary complexity</strong>. It's considerate, mindful of the next developer who will decipher it. And above all, it's meticulously crafted to solve a problem with utmost efficiency.</p>

<h2>Patterns and Principles</h2>

<p>Just like we have grammar rules and linguistic structures to frame our words and feelings into comprehensible sentences, we have design patterns and principles to shape our code. Patterns don't just make code scalable, maintainable, and efficient, but also readable and understandable. They provide a shared vocabulary for developers, enabling them to express intricate software designs with universally recognized structures.</p>

<p>Good code, therefore, leverages these patterns strategically, just like a seasoned poet would use poetic devices to create resonance. It does not apply patterns just for the sake of it, but because they add value to the solution, they make the code more comprehensible, and they ensure the longevity of the codebase.</p>

<p>SOLID, DRY, KISS, and YAGNI are not merely principles but are cornerstones of crafting good code. They guide a developer to make wise decisions, balance between under and over-engineering, and ultimately, write a 'love letter' that the receiver cherishes.</p>

<h2>Best Practices</h2>

<p>Good code also adheres to established best practices, much like a love letter would follow certain social etiquettes. Proper naming conventions, modularization, and thorough commenting are all part of this. They are not just rules to be followed, but they are the norms that define how considerate the code (or coder) is towards the next developer. They are there to make sure the intent of the coder is not lost in translation.</p>

<h2>Embracing Tests</h2>

<p>Just as a writer proofreads their letter, so should a developer with their code. Rigorous testing and the practice of Test-Driven Development (TDD) are indicators of a carefully crafted 'love letter'. Tests validate the performance of code under various scenarios, uncovering potential flaws and blind spots. The presence of a robust testing framework is often a testament to the quality of the code.</p>

<h2>Empathy and Respect</h2>

<p>Above all, the core of a love letter is empathy and respect for the reader, and so it is with good code. Writing code that others can read, understand, and maintain, is a form of professional respect. It signals the coder's understanding that their work is part of a larger, ongoing effort, that software is a living entity that evolves, and that many hands will shape its destiny over time.</p>

<h2>Conclusion</h2>

<p>In the end, coding is an act of creation, not unlike writing a poem or painting a picture. The beauty of our creations, however, is not judged solely by the elegance of our algorithms or the efficiency of our code, but by the joy and ease with which others can build upon our work. As developers, our task is not just to solve today's problems but also to ensure we do not become tomorrow's problem. </p>

<p><strong>Good code, therefore, is not just a love letter, but it is our lasting legacy to those who follow us.</strong></p>

    </section>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Richard Rhodes wrote a classic book about Oppenheimer and the atomic bomb (127 pts)]]></title>
            <link>https://www.theatlantic.com/technology/archive/2023/07/richard-rhodes-making-of-the-atomic-bomb-ai/674777/</link>
            <guid>36806922</guid>
            <pubDate>Thu, 20 Jul 2023 21:22:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theatlantic.com/technology/archive/2023/07/richard-rhodes-making-of-the-atomic-bomb-ai/674777/">https://www.theatlantic.com/technology/archive/2023/07/richard-rhodes-making-of-the-atomic-bomb-ai/674777/</a>, See on <a href="https://news.ycombinator.com/item?id=36806922">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header data-event-module="hero"><div><div><p>Richard Rhodes wrote a classic book about Oppenheimer and the atomic bomb. AI researchers are eager to see themselves in it.</p></div><div><figure><div><picture><img alt="Picture of Richard Rhodes" sizes="(min-width: 1440px) 656px, (min-width:1024px) calc(50vw - 64px), (min-width: 768px) calc(50vw - 48px), (min-width: 375px) calc(100vw - 103px), (min-width: 320px) calc(100vw - 64px), calc(100vw - 48px)" srcset="https://cdn.theatlantic.com/thumbor/YUV6q5-OHg5dghqgvStRcofjKmo=/0x117:1000x1367/296x370/media/img/2023/07/20/_IAN8067_1/original.jpg 296w, https://cdn.theatlantic.com/thumbor/jH-qjVMk0FznAvRXrUiX2fNGjzc=/0x117:1000x1367/311x389/media/img/2023/07/20/_IAN8067_1/original.jpg 311w, https://cdn.theatlantic.com/thumbor/zwyC30hi1D39ugk8wi8UBOleKfA=/0x117:1000x1367/592x740/media/img/2023/07/20/_IAN8067_1/original.jpg 592w, https://cdn.theatlantic.com/thumbor/_w_UYa9fTedyl1TDZKuoKqPwbWo=/0x117:1000x1367/622x778/media/img/2023/07/20/_IAN8067_1/original.jpg 622w, https://cdn.theatlantic.com/thumbor/h-myfZVcCY6iiHpKXStlwxQoqRI=/0x117:1000x1367/665x831/media/img/2023/07/20/_IAN8067_1/original.jpg 665w, https://cdn.theatlantic.com/thumbor/6TCdr65tu8uunHRCqCTdK3iD0lM=/0x117:1000x1367/960x1200/media/img/2023/07/20/_IAN8067_1/original.jpg 960w" src="https://cdn.theatlantic.com/thumbor/1tVnLk7bxG-lNG_8oCyX236pyy0=/0x117:1000x1367/648x810/media/img/2023/07/20/_IAN8067_1/original.jpg" width="648" height="810"></picture></div><figcaption>Photograph by Ian Allen for The Atlantic</figcaption></figure></div></div><div><p><time datetime="2023-07-20T20:34:22Z">July 20, 2023, 4:34 PM ET</time></p></div><gpt-ad format="injector" sizes-at-0="mobile-wide" targeting-pos="injector-article-start" sizes-at-976="desktop-wide"></gpt-ad></header><section data-event-module="article body"><p>D<span>oom lurks in</span> <span>every nook and cranny</span> of Richard Rhodes’s home office. A framed photograph of three men in military fatigues hangs above his desk. They’re tightening straps on what first appear to be two water heaters but are, in fact, thermonuclear weapons. Resting against a nearby wall is a black-and-white print depicting the first billionth of a second after the detonation of an atomic bomb: a thousand-foot-tall ghostly amoeba. And above us, dangling from the ceiling like the sword of Damocles, is a plastic model of the Hindenburg.</p><p>Depending on how you choose to look at it, Rhodes’s office is either a shrine to awe-inspiring technological progress or a harsh reminder of its power to incinerate us all in the blink of an eye. Today, it feels like the nexus of our cultural and technological universes. Rhodes is the 86-year-old author of <a data-event-element="inline link" href="https://tertulia.com/book/the-making-of-the-atomic-bomb-richard-rhodes/9781451677614?affiliate_id=atl-347"><em>The Making of the Atomic Bomb</em></a>, a Pulitzer Prize–winning book that has become a kind of holy text for a certain type of AI researcher—namely, the type who believes their creations might have the power to kill us all. On Friday afternoon, he will take his seat in a West Seattle theater and, like many other moviegoers, watch <a data-event-element="inline link" href="https://www.theatlantic.com/culture/archive/2023/07/oppenheimer-movie-review-christopher-nolan/674749/"><em>Oppenheimer</em></a>, Christopher Nolan’s summer blockbuster about the Manhattan Project. (The film is not based on his book, though he suspects his text served as a research aid; he’s excited to see it anyway.)</p><p id="injected-recirculation-link-0" data-view-action="view link - injected link - item 1" data-event-element="injected link" data-event-position="1"><a href="https://www.theatlantic.com/culture/archive/2023/07/oppenheimer-movie-review-christopher-nolan/674749/">Read: <em>Oppenheimer </em>is more than a creation myth about the atomic bomb</a></p><p>I first encountered <em>The Making of the Atomic Bomb</em> in March, when I spoke with an AI researcher who said he carts the doorstop-size book around every day. (It’s a reminder that his mandate is to push the bounds of technological progress, he explained—and a motivational tool to work 17-hour days.) Since then, I’ve heard the book mentioned on <a data-event-element="inline link" href="https://www.nytimes.com/2023/03/21/podcasts/ezra-klein-podcast-transcript-kelsey-piper.html">podcasts</a> and cited in conversations I’ve had with people who fear that artificial intelligence will doom us all. “I know tons of people working on AI policy who’ve been reading Rhodes’s book for inspiration,” <em>Vox</em>’s Dylan Matthews <a data-event-element="inline link" href="https://www.vox.com/future-perfect/2023/6/29/23762219/ai-artificial-intelligence-new-nuclear-weapons-future">wrote</a> recently. A <em>New York Times</em> <a data-event-element="inline link" href="https://www.nytimes.com/2023/07/11/technology/anthropic-ai-claude-chatbot.html">profile</a> of the AI company Anthropic notes that Rhodes’s book is “popular among the company’s employees,” some of whom “compared themselves to modern-day Robert Oppenheimers.”</p><p>Like Oppenheimer before them, <a data-event-element="inline link" href="https://www.nytimes.com/2023/03/31/technology/sam-altman-open-ai-chatgpt.html">many merchants of AI</a> believe their creations might change the course of history, and so they wrestle with profound moral concerns. Even as they build the technology, they worry about what will happen if <a data-event-element="inline link" href="https://www.nytimes.com/2023/05/30/technology/ai-threat-warning.html">AI becomes smarter than humans</a> and goes rogue, a speculative possibility that has morphed into an unshakable neurosis as generative-AI models take in <a data-event-element="inline link" href="https://www.theatlantic.com/technology/archive/2023/01/artificial-intelligence-ai-chatgpt-dall-e-2-learning/672754/">vast quantities of information</a> and appear ever more capable. More than 40 years ago, Rhodes set out to write the definitive account of one of the most consequential achievements in human history. Today, it’s scrutinized like an instruction manual.</p><p>Rhodes isn’t a doomer himself, but he understands the parallels between the work at Los Alamos in the 1940s and what’s happening in Silicon Valley today. “Oppenheimer talked a lot about how the bomb was both the peril and the hope,” Rhodes told me—it could end the war while simultaneously threatening to end humanity. He has <a data-event-element="inline link" href="https://www.dwarkeshpatel.com/p/richard-rhodes#details">said</a> that AI might be as transformative as nuclear energy, and has watched with interest as Silicon Valley’s biggest companies have engaged in a frenzied competition to build and deploy it.</p><p id="injected-recirculation-link-1" data-view-action="view link - injected link - item 2" data-event-element="injected link" data-event-position="2"><a href="https://www.theatlantic.com/technology/archive/2023/06/ai-regulation-sam-altman-bill-gates/674278/">Read: AI doomerism is a decoy</a></p><p>AI boosters and builders would no doubt take comfort in an argument Rhodes once made, in the foreword to the 25th-anniversary edition of his book, that the discovery of nuclear fission, and thereby the bomb, was inevitable. “To stop it, you would have had to stop physics,” he writes. This argument echoes in the rhetoric of bullish AI companies <a data-event-element="inline link" href="https://www.axios.com/2023/06/29/us-china-chip-export-restrictions-ai-race">and governments</a> who see the technology as part of a global informational arms race. Democratic nations cannot pause or wait for laws to catch up, the logic goes, lest we lose out to China or some other hostile power.</p><p>That idea helps explain why a technologist would construct an AI system even as they believe it could extinguish human life—and so does the epigraph in the first section of <em>The Making of the Atomic Bomb</em>. Here Rhodes quotes Oppenheimer: “It is a profound and necessary truth that the deep things in science are not found because they are useful; they are found because it was possible to find them.”</p><p>As a technology writer, I have spent much of my career grappling with people who possess an impulse to build, consequences be damned. I’m fascinated and confounded by the mindset I’ve observed in AI founders and researchers who say they’re terrified of the very things they’re actively working to bring into existence. I’ve struggled to square this personality trait with my own inclinations: toward caution, toward a paralyzing obsession with matrices of unintended consequences. What is it, I asked Rhodes. What is the unifying quality that possesses people to open Pandora’s box? The question hung in the air, just below the dangling model of the Hindenburg, as I imagined Rhodes flipping through a set of interviews and dog-eared biographies in his head.</p><p>He began to explain. Any great scientist, “before their 12th year,” he said, has “some formative experience that pushed them in the direction they were going in, and made them decide they wanted to go through the grueling process of learning mathematics or science until they could push the boundaries.” Enrico Fermi, the inventor of the first nuclear reactor and a chief architect of the atomic bomb, lost a beloved brother as a teenager, and not long after that, he grew obsessed with measuring and quantifying all areas of his life. “He could tell you how many steps he’d walked down the street,” Rhodes said. “He appeared so much like someone who found in numbers the kind of certainty that he’d lost when he lost his brother.” As a 10-year-old, Leo Szilard had been so disturbed by a Hungarian epic about the sun dying out that he grew fixated on rockets as a way to save the planet, Rhodes said—a quest that, eventually, led him to discover the nuclear chain reaction.</p><p>“It’s no coincidence that so many of the people who ended up in the bomb program were Jews who had escaped from Nazi Germany,” he said. “They’d seen what was happening there, they were all around it, and they knew it was horrible and terrifying and had to be stopped.” Rhodes sees the shadows of his childhood in his own work too, which was marked by physical abuse and starvation at the hands of his stepmother: “It’s not surprising that all my books are, in some way, about human violence and how you deal with it, seeing as I’m an expert in that department.”</p><p>Perhaps this is another lesson in duality—in the grand scheme of things, our nightmares and dreams are of a piece. If there is a concept Rhodes wants AI researchers and founders to take away from <em>The Making of the Atomic Bomb</em>, it is the notion of <em>complementarity</em>. This is an idea from quantum physics that the Nobel Prize–winning Danish physicist Niels Bohr, who, according to Rhodes, traveled to Los Alamos to impart to Oppenheimer during the darkest days of the Manhattan Project. In very basic terms, complementarity describes how objects have conflicting properties that cannot be observed at the same time. The world contains multitudes.</p><p>Bohr, according to Rhodes, developed an entire philosophical worldview from this observation. It boils down to the notion that a terrible weapon might simultaneously be a wonderful tool. “Bohr’s idea brought hope to Los Alamos,” Rhodes said. “He told the physicists who were concerned about this weapon of mass destruction that this thing is going to change this condition of war, and thereby change the whole structure of international politics. It could either end the war altogether or destroy the world. The former gave them hope.”</p><p>The grand lesson, as Rhodes sees it, is that you may build an apocalyptic weapon that turns out to be a flawed agent of precarious peace. But the opposite could also be true: A tool designed to perpetuate human flourishing might bring about catastrophe. And so for Rhodes, the true fear regarding AI is simply that we are on an undefined path, that we are moving too fast and creating systems that may work against their intended purposes: instruments of productivity that end up destroying jobs; synthetic media that ultimately blur the lines between human-made and machine-made, between fact and hallucination. “What is most disturbing about it is how little time society will have to absorb and adapt to it,” Rhodes said of AI’s ascent.</p><p>On our way out of his office, Rhodes pauses to show me a jar the size of a film canister with what looks like some rocks in it. A faded typewritten label says <span>Trinitite</span>, the name for the residue scraped from the desert floor in New Mexico after the Trinity nuclear-bomb test in July 1945. The blast was so hot that it turned the sand to glass. “Pretty spooky, isn’t it?” Rhodes said with a smile. It’s clear to me now why he keeps these relics so close. They are the physical manifestation of Bohr’s philosophy and the through line of much of Rhodes’s work—complementarity as interior design. A reminder that the joy and the horror of both the natural world and the one we build for ourselves is the fact that very little behaves as we expect it to. Try as we may, we can’t observe it all simultaneously. It is a reminder of the excitement and terror inherent in the unsolvable mystery that is being alive.</p><div data-view-action="view - affiliate module" data-view-label="The Making Of The Atomic Bomb"><a href="https://web.tertulia.com/book/9781451677614?affiliate=atl-347" rel="noopener noreferrer" data-label="The Making Of The Atomic Bomb" data-action="click link - affiliate module - book cover" target="_blank"><picture><img alt="" loading="lazy" srcset="https://cdn.theatlantic.com/thumbor/vb6iK9WZvF0Z27jG7g2Nd7wdsMw=/0x0:331x500/79x120/media/img/book_reviews/2023/07/20/41VMmAPoeQL._SL500_-1/original.jpg, https://cdn.theatlantic.com/thumbor/DoTE_oKxpKjKPsFHWqsvmOV471U=/0x0:331x500/158x240/media/img/book_reviews/2023/07/20/41VMmAPoeQL._SL500_-1/original.jpg 2x" src="https://cdn.theatlantic.com/thumbor/vb6iK9WZvF0Z27jG7g2Nd7wdsMw=/0x0:331x500/79x120/media/img/book_reviews/2023/07/20/41VMmAPoeQL._SL500_-1/original.jpg" width="79" height="120"></picture></a></div><div><hr><p>​When you buy a book using a link on this page, we receive a commission. Thank you for supporting<!-- --> <span>The Atlantic.</span></p></div></section><gpt-ad format="injector" sizes-at-0="mobile-wide,native,house" targeting-pos="injector-most-popular" sizes-at-976="desktop-wide,native,house"></gpt-ad></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Python Cheatsheet (269 pts)]]></title>
            <link>https://gto76.github.io/python-cheatsheet/</link>
            <guid>36806753</guid>
            <pubDate>Thu, 20 Jul 2023 21:06:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gto76.github.io/python-cheatsheet/">https://gto76.github.io/python-cheatsheet/</a>, See on <a href="https://news.ycombinator.com/item?id=36806753">Hacker News</a></p>
<div id="readability-page-1" class="page">
  <header>
    
    
  </header>

   <div><br><div><h2 id="toc"><a href="#toc" name="toc">#</a>Contents</h2><pre><code><strong>ToC</strong> = {
    <strong><span><span>'1. Collections'</span></span></strong>: [<a href="#list">List</a>, <a href="#dictionary">Dictionary</a>, <a href="#set">Set</a>, <a href="#tuple">Tuple</a>, <a href="#range">Range</a>, <a href="#enumerate">Enumerate</a>, <a href="#iterator">Iterator</a>, <a href="#generator">Generator</a>],
    <strong><span><span>'2. Types'</span></span></strong>:       [<a href="#type">Type</a>, <a href="#string">String</a>, <a href="#regex">Regular_Exp</a>, <a href="#format">Format</a>, <a href="#numbers">Numbers</a>, <a href="#combinatorics">Combinatorics</a>, <a href="#datetime">Datetime</a>],
    <strong><span><span>'3. Syntax'</span></span></strong>:      [<a href="#arguments">Args</a>, <a href="#inline">Inline</a>, <a href="#imports">Import</a>, <a href="#decorator">Decorator</a>, <a href="#class">Class</a>, <a href="#ducktypes">Duck_Types</a>, <a href="#enum">Enum</a>, <a href="#exceptions">Exception</a>],
    <strong><span><span>'4. System'</span></span></strong>:      [<a href="#exit">Exit</a>, <a href="#print">Print</a>, <a href="#input">Input</a>, <a href="#commandlinearguments">Command_Line_Arguments</a>, <a href="#open">Open</a>, <a href="#paths">Path</a>, <a href="#oscommands">OS_Commands</a>],
    <strong><span><span>'5. Data'</span></span></strong>:        [<a href="#json">JSON</a>, <a href="#pickle">Pickle</a>, <a href="#csv">CSV</a>, <a href="#sqlite">SQLite</a>, <a href="#bytes">Bytes</a>, <a href="#struct">Struct</a>, <a href="#array">Array</a>, <a href="#memoryview">Memory_View</a>, <a href="#deque">Deque</a>],
    <strong><span><span>'6. Advanced'</span></span></strong>:    [<a href="#threading">Threading</a>, <a href="#operator">Operator</a>, <a href="#introspection">Introspection</a>, <a href="#metaprogramming">Metaprograming</a>, <a href="#eval">Eval</a>, <a href="#coroutines">Coroutine</a>],
    <strong><span><span>'7. Libraries'</span></span></strong>:   [<a href="#progressbar">Progress_Bar</a>, <a href="#plot">Plot</a>, <a href="#table">Table</a>, <a href="#curses">Curses</a>, <a href="#logging">Logging</a>, <a href="#scraping">Scraping</a>, <a href="#web">Web</a>, <a href="#profiling">Profile</a>,
                       <a href="#numpy">NumPy</a>, <a href="#image">Image</a>, <a href="#audio">Audio</a>, <a href="#pygame">Games</a>, <a href="#pandas">Data</a>]
}
</code></pre></div></div>






<div><h2 id="main"><a href="#main" name="main">#</a>Main</h2><pre><code><span>if</span> __name__ == <span>'__main__'</span>:     <span># Runs main() if file wasn't imported.</span>
    main()
</code></pre></div>

<div><h2 id="list"><a href="#list" name="list">#</a>List</h2><pre><code>&lt;list&gt; = &lt;list&gt;[&lt;slice&gt;]       <span># Or: &lt;list&gt;[from_inclusive : to_exclusive : ±step]</span>
</code></pre></div>

<pre><code>&lt;list&gt;.append(&lt;el&gt;)            <span># Or: &lt;list&gt; += [&lt;el&gt;]</span>
&lt;list&gt;.extend(&lt;collection&gt;)    <span># Or: &lt;list&gt; += &lt;collection&gt;</span>
</code></pre>
<pre><code>&lt;list&gt;.sort()                  <span># Sorts in ascending order.</span>
&lt;list&gt;.reverse()               <span># Reverses the list in-place.</span>
&lt;list&gt; = sorted(&lt;collection&gt;)  <span># Returns a new sorted list.</span>
&lt;iter&gt; = reversed(&lt;list&gt;)      <span># Returns reversed iterator.</span>
</code></pre>
<pre><code>sum_of_elements  = sum(&lt;collection&gt;)
elementwise_sum  = [sum(pair) <span>for</span> pair <span>in</span> zip(list_a, list_b)]
sorted_by_second = sorted(&lt;collection&gt;, key=<span>lambda</span> el: el[<span>1</span>])
sorted_by_both   = sorted(&lt;collection&gt;, key=<span>lambda</span> el: (el[<span>1</span>], el[<span>0</span>]))
flatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))
product_of_elems = functools.reduce(<span>lambda</span> out, el: out * el, &lt;collection&gt;)
list_of_chars    = list(&lt;str&gt;)
</code></pre>
<ul>
<li><strong>For details about sorted(), min() and max() see <a href="#sortable">sortable</a>.</strong></li>
<li><strong>Module <a href="#operator">operator</a> provides functions itemgetter() and mul() that offer the same functionality as <a href="#lambda">lambda</a> expressions above.</strong></li>
</ul>
<pre><code>&lt;list&gt;.insert(&lt;int&gt;, &lt;el&gt;)     <span># Inserts item at index and moves the rest to the right.</span>
&lt;el&gt;  = &lt;list&gt;.pop([&lt;int&gt;])    <span># Removes and returns item at index or from the end.</span>
&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)     <span># Returns number of occurrences. Also works on strings.</span>
&lt;int&gt; = &lt;list&gt;.index(&lt;el&gt;)     <span># Returns index of the first occurrence or raises ValueError.</span>
&lt;list&gt;.remove(&lt;el&gt;)            <span># Removes first occurrence of the item or raises ValueError.</span>
&lt;list&gt;.clear()                 <span># Removes all items. Also works on dictionary and set.</span>
</code></pre>
<div><h2 id="dictionary"><a href="#dictionary" name="dictionary">#</a>Dictionary</h2><pre><code>&lt;view&gt; = &lt;dict&gt;.keys()                          <span># Coll. of keys that reflects changes.</span>
&lt;view&gt; = &lt;dict&gt;.values()                        <span># Coll. of values that reflects changes.</span>
&lt;view&gt; = &lt;dict&gt;.items()                         <span># Coll. of key-value tuples that reflects chgs.</span>
</code></pre></div>

<pre><code>value  = &lt;dict&gt;.get(key, default=<span>None</span>)          <span># Returns default if key is missing.</span>
value  = &lt;dict&gt;.setdefault(key, default=<span>None</span>)   <span># Returns and writes default if key is missing.</span>
&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        <span># Returns a dict with default value of type.</span>
&lt;dict&gt; = collections.defaultdict(<span>lambda</span>: <span>1</span>)     <span># Returns a dict with default value 1.</span>
</code></pre>
<pre><code>&lt;dict&gt; = dict(&lt;collection&gt;)                     <span># Creates a dict from coll. of key-value pairs.</span>
&lt;dict&gt; = dict(zip(keys, values))                <span># Creates a dict from two collections.</span>
&lt;dict&gt; = dict.fromkeys(keys [, value])          <span># Creates a dict from collection of keys.</span>
</code></pre>
<pre><code>&lt;dict&gt;.update(&lt;dict&gt;)                           <span># Adds items. Replaces ones with matching keys.</span>
value = &lt;dict&gt;.pop(key)                         <span># Removes item or raises KeyError.</span>
{k <span>for</span> k, v <span>in</span> &lt;dict&gt;.items() <span>if</span> v == value}    <span># Returns set of keys that point to the value.</span>
{k: v <span>for</span> k, v <span>in</span> &lt;dict&gt;.items() <span>if</span> k <span>in</span> keys}  <span># Returns a dictionary, filtered by keys.</span>
</code></pre>
<div><h3 id="counter">Counter</h3><pre><code><span>&gt;&gt;&gt; </span><span>from</span> collections <span>import</span> Counter
<span>&gt;&gt;&gt; </span>colors = [<span>'blue'</span>, <span>'blue'</span>, <span>'blue'</span>, <span>'red'</span>, <span>'red'</span>]
<span>&gt;&gt;&gt; </span>counter = Counter(colors)
<span>&gt;&gt;&gt; </span>counter[<span>'yellow'</span>] += <span>1</span>
Counter({<span>'blue'</span>: <span>3</span>, <span>'red'</span>: <span>2</span>, <span>'yellow'</span>: <span>1</span>})
<span>&gt;&gt;&gt; </span>counter.most_common()[<span>0</span>]
(<span>'blue'</span>, <span>3</span>)
</code></pre></div>

<div><h2 id="set"><a href="#set" name="set">#</a>Set</h2><pre><code>&lt;set&gt; = set()                                   <span># `{}` returns a dictionary.</span>
</code></pre></div>

<pre><code>&lt;set&gt;.add(&lt;el&gt;)                                 <span># Or: &lt;set&gt; |= {&lt;el&gt;}</span>
&lt;set&gt;.update(&lt;collection&gt; [, ...])              <span># Or: &lt;set&gt; |= &lt;set&gt;</span>
</code></pre>
<pre><code>&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   <span># Or: &lt;set&gt; | &lt;set&gt;</span>
&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            <span># Or: &lt;set&gt; &amp; &lt;set&gt;</span>
&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              <span># Or: &lt;set&gt; - &lt;set&gt;</span>
&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    <span># Or: &lt;set&gt; ^ &lt;set&gt;</span>
&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                <span># Or: &lt;set&gt; &lt;= &lt;set&gt;</span>
&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              <span># Or: &lt;set&gt; &gt;= &lt;set&gt;</span>
</code></pre>
<pre><code>&lt;el&gt; = &lt;set&gt;.pop()                              <span># Raises KeyError if empty.</span>
&lt;set&gt;.remove(&lt;el&gt;)                              <span># Raises KeyError if missing.</span>
&lt;set&gt;.discard(&lt;el&gt;)                             <span># Doesn't raise an error.</span>
</code></pre>
<div><h3 id="frozenset">Frozen Set</h3><ul>
<li><strong>Is immutable and hashable.</strong></li>
<li><strong>That means it can be used as a key in a dictionary or as an element in a set.</strong></li>
</ul><pre><code>&lt;frozenset&gt; = frozenset(&lt;collection&gt;)
</code></pre></div>


<div><h2 id="tuple"><a href="#tuple" name="tuple">#</a>Tuple</h2><p><strong>Tuple is an immutable and hashable list.</strong></p><pre><code>&lt;tuple&gt; = ()                                <span># Empty tuple.</span>
&lt;tuple&gt; = (&lt;el&gt;,)                           <span># Or: &lt;el&gt;,</span>
&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])          <span># Or: &lt;el_1&gt;, &lt;el_2&gt; [, ...]</span>
</code></pre></div>


<div><h3 id="namedtuple">Named Tuple</h3><p><strong>Tuple's subclass with named elements.</strong></p><pre><code><span>&gt;&gt;&gt; </span><span>from</span> collections <span>import</span> namedtuple
<span>&gt;&gt;&gt; </span>Point = namedtuple(<span>'Point'</span>, <span>'x y'</span>)
<span>&gt;&gt;&gt; </span>p = Point(<span>1</span>, y=<span>2</span>)
Point(x=<span>1</span>, y=<span>2</span>)
<span>&gt;&gt;&gt; </span>p[<span>0</span>]
<span>1</span>
<span>&gt;&gt;&gt; </span>p.x
<span>1</span>
<span>&gt;&gt;&gt; </span>getattr(p, <span>'y'</span>)
<span>2</span>
</code></pre></div>


<div><h2 id="range"><a href="#range" name="range">#</a>Range</h2><p><strong>Immutable and hashable sequence of integers.</strong></p><pre><code>&lt;range&gt; = range(stop)                       <span># range(to_exclusive)</span>
&lt;range&gt; = range(start, stop)                <span># range(from_inclusive, to_exclusive)</span>
&lt;range&gt; = range(start, stop, ±step)         <span># range(from_inclusive, to_exclusive, ±step_size)</span>
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>[i <span>for</span> i <span>in</span> range(<span>3</span>)]
[<span>0</span>, <span>1</span>, <span>2</span>]
</code></pre>
<div><h2 id="enumerate"><a href="#enumerate" name="enumerate">#</a>Enumerate</h2><pre><code><span>for</span> i, el <span>in</span> enumerate(&lt;collection&gt; [, i_start]):
    ...
</code></pre></div>

<div><h2 id="iterator"><a href="#iterator" name="iterator">#</a>Iterator</h2><pre><code>&lt;iter&gt; = iter(&lt;collection&gt;)                 <span># `iter(&lt;iter&gt;)` returns unmodified iterator.</span>
&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)     <span># A sequence of return values until 'to_exclusive'.</span>
&lt;el&gt;   = next(&lt;iter&gt; [, default])           <span># Raises StopIteration or returns 'default' on end.</span>
&lt;list&gt; = list(&lt;iter&gt;)                       <span># Returns a list of iterator's remaining elements.</span>
</code></pre></div>

<div><h3 id="itertools">Itertools</h3><pre><code><span>import</span> itertools <span>as</span> it
</code></pre></div>

<pre><code>&lt;iter&gt; = it.count(start=<span>0</span>, step=<span>1</span>)          <span># Returns updated value endlessly. Accepts floats.</span>
&lt;iter&gt; = it.repeat(&lt;el&gt; [, times])          <span># Returns element endlessly or 'times' times.</span>
&lt;iter&gt; = it.cycle(&lt;collection&gt;)             <span># Repeats the sequence endlessly.</span>
</code></pre>
<pre><code>&lt;iter&gt; = it.chain(&lt;coll&gt;, &lt;coll&gt; [, ...])   <span># Empties collections in order (figuratively).</span>
&lt;iter&gt; = it.chain.from_iterable(&lt;coll&gt;)     <span># Empties collections inside a collection in order.</span>
</code></pre>
<pre><code>&lt;iter&gt; = it.islice(&lt;coll&gt;, to_exclusive)    <span># Only returns first 'to_exclusive' elements.</span>
&lt;iter&gt; = it.islice(&lt;coll&gt;, from_inc, …)     <span># `to_exclusive, +step_size`. Indices can be None.</span>
</code></pre>
<div><h2 id="generator"><a href="#generator" name="generator">#</a>Generator</h2><ul>
<li><strong>Any function that contains a yield statement returns a generator.</strong></li>
<li><strong>Generators and iterators are interchangeable.</strong></li>
</ul><pre><code><span><span>def</span> <span>count</span><span>(start, step)</span>:</span>
    <span>while</span> <span>True</span>:
        <span>yield</span> start
        start += step
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>counter = count(<span>10</span>, <span>2</span>)
<span>&gt;&gt;&gt; </span>next(counter), next(counter), next(counter)
(<span>10</span>, <span>12</span>, <span>14</span>)
</code></pre>
<div><h2 id="type"><a href="#type" name="type">#</a>Type</h2><ul>
<li><strong>Everything is an object.</strong></li>
<li><strong>Every object has a type.</strong></li>
<li><strong>Type and class are synonymous.</strong></li>
</ul><pre><code>&lt;type&gt; = type(&lt;el&gt;)                          <span># Or: &lt;el&gt;.__class__</span>
&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            <span># Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)</span>
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>type(<span>'a'</span>), <span>'a'</span>.__class__, str
(&lt;<span><span>class</span> '<span>str</span>'&gt;, &lt;<span>class</span> '<span>str</span>'&gt;, &lt;<span>class</span> '<span>str</span>'&gt;)
</span></code></pre>
<div><h4 id="sometypesdonothavebuiltinnamessotheymustbeimported">Some types do not have built-in names, so they must be imported:</h4><pre><code><span>from</span> types <span>import</span> FunctionType, MethodType, LambdaType, GeneratorType, ModuleType
</code></pre></div>

<div><h3 id="abstractbaseclasses">Abstract Base Classes</h3><p><strong>Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not. ABC can also manually decide whether or not a specific class is its virtual subclass, usually based on which methods the class has implemented. For instance, Iterable ABC looks for method iter(), while Collection ABC looks for iter(), contains() and len().</strong></p><pre><code><span>&gt;&gt;&gt; </span><span>from</span> collections.abc <span>import</span> Iterable, Collection, Sequence
<span>&gt;&gt;&gt; </span>isinstance([<span>1</span>, <span>2</span>, <span>3</span>], Iterable)
<span>True</span>
</code></pre></div>


<pre><code>┏━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┓
┃                  │  Iterable  │ Collection │  Sequence  ┃
┠──────────────────┼────────────┼────────────┼────────────┨
┃ list, range, str │     ✓      │     ✓      │     ✓      ┃
┃ dict, set        │     ✓      │     ✓      │            ┃
┃ iter             │     ✓      │            │            ┃
┗━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━┛
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span><span>from</span> numbers <span>import</span> Number, Complex, Real, Rational, Integral
<span>&gt;&gt;&gt; </span>isinstance(<span>123</span>, Number)
<span>True</span>
</code></pre>
<pre><code>┏━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┓
┃                    │  Number  │  Complex │   Real   │ Rational │ Integral ┃
┠────────────────────┼──────────┼──────────┼──────────┼──────────┼──────────┨
┃ int                │    ✓     │    ✓     │    ✓     │    ✓     │    ✓     ┃
┃ fractions.Fraction │    ✓     │    ✓     │    ✓     │    ✓     │          ┃
┃ float              │    ✓     │    ✓     │    ✓     │          │          ┃
┃ complex            │    ✓     │    ✓     │          │          │          ┃
┃ decimal.Decimal    │    ✓     │          │          │          │          ┃
┗━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┛
</code></pre>
<div><h2 id="string"><a href="#string" name="string">#</a>String</h2><pre><code>&lt;str&gt;  = &lt;str&gt;.strip()                       <span># Strips all whitespace characters from both ends.</span>
&lt;str&gt;  = &lt;str&gt;.strip(<span>'&lt;chars&gt;'</span>)              <span># Strips all passed characters from both ends.</span>
</code></pre></div>

<pre><code>&lt;list&gt; = &lt;str&gt;.split()                       <span># Splits on one or more whitespace characters.</span>
&lt;list&gt; = &lt;str&gt;.split(sep=<span>None</span>, maxsplit=<span>-1</span>)  <span># Splits on 'sep' str at most 'maxsplit' times.</span>
&lt;list&gt; = &lt;str&gt;.splitlines(keepends=<span>False</span>)    <span># On [\n\r\f\v\x1c-\x1e\x85\u2028\u2029] and \r\n.</span>
&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       <span># Joins elements using string as a separator.</span>
</code></pre>
<pre><code>&lt;bool&gt; = &lt;sub_str&gt; <span>in</span> &lt;str&gt;                  <span># Checks if string contains the substring.</span>
&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         <span># Pass tuple of strings for multiple options.</span>
&lt;bool&gt; = &lt;str&gt;.endswith(&lt;sub_str&gt;)           <span># Pass tuple of strings for multiple options.</span>
&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               <span># Returns start index of the first match or -1.</span>
&lt;int&gt;  = &lt;str&gt;.index(&lt;sub_str&gt;)              <span># Same, but raises ValueError if missing.</span>
</code></pre>
<pre><code>&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   <span># Replaces 'old' with 'new' at most 'count' times.</span>
&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            <span># Use `str.maketrans(&lt;dict&gt;)` to generate table.</span>
</code></pre>
<pre><code>&lt;str&gt;  = chr(&lt;int&gt;)                          <span># Converts int to Unicode character.</span>
&lt;int&gt;  = ord(&lt;str&gt;)                          <span># Converts Unicode character to int.</span>
</code></pre>
<ul>
<li><strong>Also: <code><span>'lstrip()'</span></code>, <code><span>'rstrip()'</span></code> and <code><span>'rsplit()'</span></code>.</strong></li>
<li><strong>Also: <code><span>'lower()'</span></code>, <code><span>'upper()'</span></code>, <code><span>'capitalize()'</span></code> and <code><span>'title()'</span></code>.</strong></li>
</ul>
<div><h3 id="propertymethods">Property Methods</h3><pre><code>┏━━━━━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┓
┃               │ [ !#$%…] │ [a-zA-Z] │  [¼½¾]   │  [²³¹]   │  [0-9]   ┃
┠───────────────┼──────────┼──────────┼──────────┼──────────┼──────────┨
┃ isprintable() │    ✓     │    ✓     │    ✓     │    ✓     │    ✓     ┃
┃ isalnum()     │          │    ✓     │    ✓     │    ✓     │    ✓     ┃
┃ isnumeric()   │          │          │    ✓     │    ✓     │    ✓     ┃
┃ isdigit()     │          │          │          │    ✓     │    ✓     ┃
┃ isdecimal()   │          │          │          │          │    ✓     ┃
┗━━━━━━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┛
</code></pre></div>

<ul>
<li><strong><code><span>'isspace()'</span></code> checks for whitespaces: <code><span>'[ \t\n\r\f\v\x1c-\x1f\x85\xa0\u1680…]'</span></code>.</strong></li>
</ul>
<div><h2 id="regex"><a href="#regex" name="regex">#</a>Regex</h2><pre><code><span>import</span> re
&lt;str&gt;   = re.sub(&lt;regex&gt;, new, text, count=<span>0</span>)  <span># Substitutes all occurrences with 'new'.</span>
&lt;list&gt;  = re.findall(&lt;regex&gt;, text)            <span># Returns all occurrences as strings.</span>
&lt;list&gt;  = re.split(&lt;regex&gt;, text, maxsplit=<span>0</span>)  <span># Use brackets in regex to include the matches.</span>
&lt;Match&gt; = re.search(&lt;regex&gt;, text)             <span># Searches for first occurrence of the pattern.</span>
&lt;Match&gt; = re.match(&lt;regex&gt;, text)              <span># Searches only at the beginning of the text.</span>
&lt;iter&gt;  = re.finditer(&lt;regex&gt;, text)           <span># Returns all occurrences as Match objects.</span>
</code></pre></div>

<ul>
<li><strong>Argument 'new' can be a function that accepts a Match object and returns a string.</strong></li>
<li><strong>Search() and match() return None if they can't find a match.</strong></li>
<li><strong>Argument <code><span>'flags=re.IGNORECASE'</span></code> can be used with all functions.</strong></li>
<li><strong>Argument <code><span>'flags=re.MULTILINE'</span></code> makes <code><span>'^'</span></code> and <code><span>'$'</span></code> match the start/end of each line.</strong></li>
<li><strong>Argument <code><span>'flags=re.DOTALL'</span></code> makes <code><span>'.'</span></code> also accept the <code><span>'\n'</span></code>.</strong></li>
<li><strong>Use <code><span>r'\1'</span></code> or <code><span>'\\1'</span></code> for backreference (<code><span>'\1'</span></code> returns a character with octal code 1).</strong></li>
<li><strong>Add <code><span>'?'</span></code> after <code><span>'*'</span></code> and <code><span>'+'</span></code> to make them non-greedy.</strong></li>
</ul>
<div><h3 id="matchobject">Match Object</h3><pre><code>&lt;str&gt;   = &lt;Match&gt;.group()                      <span># Returns the whole match. Also group(0).</span>
&lt;str&gt;   = &lt;Match&gt;.group(<span>1</span>)                     <span># Returns part in the first bracket.</span>
&lt;tuple&gt; = &lt;Match&gt;.groups()                     <span># Returns all bracketed parts.</span>
&lt;int&gt;   = &lt;Match&gt;.start()                      <span># Returns start index of the match.</span>
&lt;int&gt;   = &lt;Match&gt;.end()                        <span># Returns exclusive end index of the match.</span>
</code></pre></div>

<div><h3 id="specialsequences">Special Sequences</h3><pre><code><span>'\d'</span> == <span>'[0-9]'</span>                                <span># Matches decimal characters.</span>
<span>'\w'</span> == <span>'[a-zA-Z0-9_]'</span>                         <span># Matches alphanumerics and underscore.</span>
<span>'\s'</span> == <span>'[ \t\n\r\f\v]'</span>                        <span># Matches whitespaces.</span>
</code></pre></div>

<ul>
<li><strong>By default, decimal characters, alphanumerics and whitespaces from all alphabets are matched unless <code><span>'flags=re.ASCII'</span></code> argument is used.</strong></li>
<li><strong>As shown above, it restricts all special sequence matches to the first 128 characters and prevents <code><span>'\s'</span></code> from accepting <code><span>'[\x1c-\x1f]'</span></code> (the so-called separator characters).</strong></li>
<li><strong>Use a capital letter for negation (all non-ASCII characters will be matched when used in combination with ASCII flag).</strong></li>
</ul>
<div><h2 id="format"><a href="#format" name="format">#</a>Format</h2><pre><code>&lt;str&gt; = <span>f'<span>{&lt;el_1&gt;}</span>, <span>{&lt;el_2&gt;}</span>'</span>            <span># Curly brackets can also contain expressions.</span>
&lt;str&gt; = <span>'{}, {}'</span>.format(&lt;el_1&gt;, &lt;el_2&gt;)  <span># Or: '{0}, {a}'.format(&lt;el_1&gt;, a=&lt;el_2&gt;)</span>
&lt;str&gt; = <span>'%s, %s'</span> % (&lt;el_1&gt;, &lt;el_2&gt;)      <span># Redundant and inferior C-style formatting.</span>
</code></pre></div>

<div><h3 id="example">Example</h3><pre><code><span>&gt;&gt;&gt; </span>Person = collections.namedtuple(<span>'Person'</span>, <span>'name height'</span>)
<span>&gt;&gt;&gt; </span>person = Person(<span>'Jean-Luc'</span>, <span>187</span>)
<span>&gt;&gt;&gt; </span><span>f'<span>{person.name}</span> is <span>{person.height / <span>100</span>}</span> meters tall.'</span>
<span>'Jean-Luc is 1.87 meters tall.'</span>
</code></pre></div>

<div><h3 id="generaloptions">General Options</h3><pre><code>{&lt;el&gt;:&lt;<span>10</span>}                               <span># '&lt;el&gt;      '</span>
{&lt;el&gt;:^<span>10</span>}                               <span># '   &lt;el&gt;   '</span>
{&lt;el&gt;:&gt;<span>10</span>}                               <span># '      &lt;el&gt;'</span>
{&lt;el&gt;:.&lt;<span>10</span>}                              <span># '&lt;el&gt;......'</span>
{&lt;el&gt;:<span>0</span>}                                 <span># '&lt;el&gt;'</span>
</code></pre></div>

<ul>
<li><strong>Options can be generated dynamically: <code><span>f'<span>{&lt;el&gt;:{&lt;str/int&gt;}</span>[…]}'</span></code>.</strong></li>
<li><strong>Adding <code><span>'='</span></code> to the expression prepends it to the output: <code><span>f'<span>{<span>1</span>+<span>1</span>=}</span>'</span></code> returns <code><span>'1+1=2'</span></code>.</strong></li>
<li><strong>Adding <code><span>'!r'</span></code> to the expression converts object to string by calling its <a href="#class">repr()</a> method.</strong></li>
</ul>
<div><h3 id="strings">Strings</h3><pre><code>{<span>'abcde'</span>:<span>10</span>}                             <span># 'abcde     '</span>
{<span>'abcde'</span>:<span>10.3</span>}                           <span># 'abc       '</span>
{<span>'abcde'</span>:<span>.3</span>}                             <span># 'abc'</span>
{<span>'abcde'</span>!r:<span>10</span>}                           <span># "'abcde'   "</span>
</code></pre></div>

<div><h3 id="numbers-1">Numbers</h3><pre><code>{<span>123456</span>:<span>10</span>}                              <span># '    123456'</span>
{<span>123456</span>:<span>10</span>,}                             <span># '   123,456'</span>
{<span>123456</span>:<span>10</span>_}                             <span># '   123_456'</span>
{<span>123456</span>:+<span>10</span>}                             <span># '   +123456'</span>
{<span>123456</span>:=+<span>10</span>}                            <span># '+   123456'</span>
{<span>123456</span>: }                               <span># ' 123456'</span>
{<span>-123456</span>: }                              <span># '-123456'</span>
</code></pre></div>

<div><h3 id="floats">Floats</h3><pre><code>{<span>1.23456</span>:<span>10.3</span>}                           <span># '      1.23'</span>
{<span>1.23456</span>:<span>10.3</span>f}                          <span># '     1.235'</span>
{<span>1.23456</span>:<span>10.3</span>e}                          <span># ' 1.235e+00'</span>
{<span>1.23456</span>:<span>10.3</span>%}                          <span># '  123.456%'</span>
</code></pre></div>

<div><h4 id="comparisonofpresentationtypes">Comparison of presentation types:</h4><pre><code>┏━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┓
┃              │    {&lt;float&gt;}   │   {&lt;float&gt;:f}  │   {&lt;float&gt;:e}  │   {&lt;float&gt;:%}  ┃
┠──────────────┼────────────────┼────────────────┼────────────────┼────────────────┨
┃  0.000056789 │   '5.6789e-05' │    '0.000057'  │ '5.678900e-05' │    '0.005679%' ┃
┃  0.00056789  │   '0.00056789' │    '0.000568'  │ '5.678900e-04' │    '0.056789%' ┃
┃  0.0056789   │   '0.0056789'  │    '0.005679'  │ '5.678900e-03' │    '0.567890%' ┃
┃  0.056789    │   '0.056789'   │    '0.056789'  │ '5.678900e-02' │    '5.678900%' ┃
┃  0.56789     │   '0.56789'    │    '0.567890'  │ '5.678900e-01' │   '56.789000%' ┃
┃  5.6789      │   '5.6789'     │    '5.678900'  │ '5.678900e+00' │  '567.890000%' ┃
┃ 56.789       │  '56.789'      │   '56.789000'  │ '5.678900e+01' │ '5678.900000%' ┃
┗━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┓
┃              │  {&lt;float&gt;:.2}  │  {&lt;float&gt;:.2f} │  {&lt;float&gt;:.2e} │  {&lt;float&gt;:.2%} ┃
┠──────────────┼────────────────┼────────────────┼────────────────┼────────────────┨
┃  0.000056789 │    '5.7e-05'   │      '0.00'    │   '5.68e-05'   │      '0.01%'   ┃
┃  0.00056789  │    '0.00057'   │      '0.00'    │   '5.68e-04'   │      '0.06%'   ┃
┃  0.0056789   │    '0.0057'    │      '0.01'    │   '5.68e-03'   │      '0.57%'   ┃
┃  0.056789    │    '0.057'     │      '0.06'    │   '5.68e-02'   │      '5.68%'   ┃
┃  0.56789     │    '0.57'      │      '0.57'    │   '5.68e-01'   │     '56.79%'   ┃
┃  5.6789      │    '5.7'       │      '5.68'    │   '5.68e+00'   │    '567.89%'   ┃
┃ 56.789       │    '5.7e+01'   │     '56.79'    │   '5.68e+01'   │   '5678.90%'   ┃
┗━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┛
</code></pre></div>


<ul>
<li><strong><code><span>'{&lt;float&gt;:g}'</span></code> is <code><span>'{&lt;float&gt;:.6}'</span></code> with stripped zeros, exponent starting at 7 figures.</strong></li>
<li><strong>When both rounding up and rounding down are possible, the one that returns result with even last digit is chosen. That makes <code><span>'{6.5:.0f}'</span></code> a <code><span>'6'</span></code> and <code><span>'{7.5:.0f}'</span></code> an <code><span>'8'</span></code>.</strong></li>
<li><strong>This rule only effects numbers that can be represented exactly by a float (<code><span>.5</span></code>, <code><span>.25</span></code>, …).</strong></li>
</ul>
<div><h3 id="ints">Ints</h3><pre><code>{<span>90</span>:c}                                   <span># 'Z'</span>
{<span>90</span>:b}                                   <span># '1011010'</span>
{<span>90</span>:X}                                   <span># '5A'</span>
</code></pre></div>

<div><h2 id="numbers"><a href="#numbers" name="numbers">#</a>Numbers</h2><pre><code>&lt;int&gt;      = int(&lt;float/str/bool&gt;)                <span># Or: math.floor(&lt;float&gt;)</span>
&lt;float&gt;    = float(&lt;int/str/bool&gt;)                <span># Or: &lt;real&gt;e±&lt;int&gt;</span>
&lt;complex&gt;  = complex(real=<span>0</span>, imag=<span>0</span>)              <span># Or: &lt;real&gt; ± &lt;real&gt;j</span>
&lt;Fraction&gt; = fractions.Fraction(<span>0</span>, <span>1</span>)             <span># Or: Fraction(numerator=0, denominator=1)</span>
&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int&gt;)           <span># Or: Decimal((sign, digits, exponent))</span>
</code></pre></div>

<ul>
<li><strong><code><span>'int(&lt;str&gt;)'</span></code> and <code><span>'float(&lt;str&gt;)'</span></code> raise ValueError on malformed strings.</strong></li>
<li><strong>Decimal numbers are stored exactly, unlike most floats where <code><span>'1.1 + 2.2 != 3.3'</span></code>.</strong></li>
<li><strong>Floats can be compared with: <code><span>'math.isclose(&lt;float&gt;, &lt;float&gt;)'</span></code>.</strong></li>
<li><strong>Precision of decimal operations is set with: <code><span>'decimal.getcontext().prec = &lt;int&gt;'</span></code>.</strong></li>
</ul>
<div><h3 id="basicfunctions">Basic Functions</h3><pre><code>&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                         <span># Or: &lt;num&gt; ** &lt;num&gt;</span>
&lt;num&gt; = abs(&lt;num&gt;)                                <span># &lt;float&gt; = abs(&lt;complex&gt;)</span>
&lt;num&gt; = round(&lt;num&gt; [, ±ndigits])                 <span># `round(126, -1) == 130`</span>
</code></pre></div>

<div><h3 id="math">Math</h3><pre><code><span>from</span> math <span>import</span> e, pi, inf, nan, isinf, isnan    <span># `&lt;el&gt; == nan` is always False.</span>
<span>from</span> math <span>import</span> sin, cos, tan, asin, acos, atan  <span># Also: degrees, radians.</span>
<span>from</span> math <span>import</span> log, log10, log2                 <span># Log can accept base as second arg.</span>
</code></pre></div>

<div><h3 id="statistics">Statistics</h3><pre><code><span>from</span> statistics <span>import</span> mean, median, variance     <span># Also: stdev, quantiles, groupby.</span>
</code></pre></div>

<div><h3 id="random">Random</h3><pre><code><span>from</span> random <span>import</span> random, randint, choice        <span># Also: shuffle, gauss, triangular, seed.</span>
&lt;float&gt; = random()                                <span># A float inside [0, 1).</span>
&lt;int&gt;   = randint(from_inc, to_inc)               <span># An int inside [from_inc, to_inc].</span>
&lt;el&gt;    = choice(&lt;sequence&gt;)                      <span># Keeps the sequence intact.</span>
</code></pre></div>

<div><h3 id="binhex">Bin, Hex</h3><pre><code>&lt;int&gt; = ±<span>0</span>b&lt;bin&gt;                                  <span># Or: ±0x&lt;hex&gt;</span>
&lt;int&gt; = int(<span>'±&lt;bin&gt;'</span>, <span>2</span>)                          <span># Or: int('±&lt;hex&gt;', 16)</span>
&lt;int&gt; = int(<span>'±0b&lt;bin&gt;'</span>, <span>0</span>)                        <span># Or: int('±0x&lt;hex&gt;', 0)</span>
&lt;str&gt; = bin(&lt;int&gt;)                                <span># Returns '[-]0b&lt;bin&gt;'.</span>
</code></pre></div>

<div><h3 id="bitwiseoperators">Bitwise Operators</h3><pre><code>&lt;int&gt; = &lt;int&gt; &amp; &lt;int&gt;                             <span># And (0b1100 &amp; 0b1010 == 0b1000).</span>
&lt;int&gt; = &lt;int&gt; | &lt;int&gt;                             <span># Or  (0b1100 | 0b1010 == 0b1110).</span>
&lt;int&gt; = &lt;int&gt; ^ &lt;int&gt;                             <span># Xor (0b1100 ^ 0b1010 == 0b0110).</span>
&lt;int&gt; = &lt;int&gt; &lt;&lt; n_bits                           <span># Left shift. Use &gt;&gt; for right.</span>
&lt;int&gt; = ~&lt;int&gt;                                    <span># Not. Also -&lt;int&gt; - 1.</span>
</code></pre></div>

<div><h2 id="combinatorics"><a href="#combinatorics" name="combinatorics">#</a>Combinatorics</h2><ul>
<li><strong>Every function returns an iterator.</strong></li>
<li><strong>If you want to print the iterator, you need to pass it to the list() function first!</strong></li>
</ul><pre><code><span>import</span> itertools <span>as</span> it
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>it.product([<span>0</span>, <span>1</span>], repeat=<span>3</span>)
[(<span>0</span>, <span>0</span>, <span>0</span>), (<span>0</span>, <span>0</span>, <span>1</span>), (<span>0</span>, <span>1</span>, <span>0</span>), (<span>0</span>, <span>1</span>, <span>1</span>),
 (<span>1</span>, <span>0</span>, <span>0</span>), (<span>1</span>, <span>0</span>, <span>1</span>), (<span>1</span>, <span>1</span>, <span>0</span>), (<span>1</span>, <span>1</span>, <span>1</span>)]
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span>it.product(<span>'abc'</span>, <span>'abc'</span>)                     <span>#   a  b  c</span>
[(<span>'a'</span>, <span>'a'</span>), (<span>'a'</span>, <span>'b'</span>), (<span>'a'</span>, <span>'c'</span>),             <span># a x  x  x</span>
 (<span>'b'</span>, <span>'a'</span>), (<span>'b'</span>, <span>'b'</span>), (<span>'b'</span>, <span>'c'</span>),             <span># b x  x  x</span>
 (<span>'c'</span>, <span>'a'</span>), (<span>'c'</span>, <span>'b'</span>), (<span>'c'</span>, <span>'c'</span>)]             <span># c x  x  x</span>
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span>it.combinations(<span>'abc'</span>, <span>2</span>)                    <span>#   a  b  c</span>
[(<span>'a'</span>, <span>'b'</span>), (<span>'a'</span>, <span>'c'</span>),                         <span># a .  x  x</span>
 (<span>'b'</span>, <span>'c'</span>)]                                     <span># b .  .  x</span>
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span>it.combinations_with_replacement(<span>'abc'</span>, <span>2</span>)   <span>#   a  b  c</span>
[(<span>'a'</span>, <span>'a'</span>), (<span>'a'</span>, <span>'b'</span>), (<span>'a'</span>, <span>'c'</span>),             <span># a x  x  x</span>
 (<span>'b'</span>, <span>'b'</span>), (<span>'b'</span>, <span>'c'</span>),                         <span># b .  x  x</span>
 (<span>'c'</span>, <span>'c'</span>)]                                     <span># c .  .  x</span>
</code></pre>
<pre><code><span>&gt;&gt;&gt; </span>it.permutations(<span>'abc'</span>, <span>2</span>)                    <span>#   a  b  c</span>
[(<span>'a'</span>, <span>'b'</span>), (<span>'a'</span>, <span>'c'</span>),                         <span># a .  x  x</span>
 (<span>'b'</span>, <span>'a'</span>), (<span>'b'</span>, <span>'c'</span>),                         <span># b x  .  x</span>
 (<span>'c'</span>, <span>'a'</span>), (<span>'c'</span>, <span>'b'</span>)]                         <span># c x  x  .</span>
</code></pre>
<div><h2 id="datetime"><a href="#datetime" name="datetime">#</a>Datetime</h2><ul>
<li><strong>Module 'datetime' provides 'date' <code><span>&lt;D&gt;</span></code>, 'time' <code><span>&lt;T&gt;</span></code>, 'datetime' <code><span>&lt;DT&gt;</span></code> and 'timedelta' <code><span>&lt;TD&gt;</span></code> classes. All are immutable and hashable.</strong></li>
<li><strong>Time and datetime objects can be 'aware' <code><span>&lt;a&gt;</span></code>, meaning they have defined timezone, or 'naive' <code><span>&lt;n&gt;</span></code>, meaning they don't.</strong></li>
<li><strong>If object is naive, it is presumed to be in the system's timezone.</strong></li>
</ul><pre><code><span>from</span> datetime <span>import</span> date, time, datetime, timedelta
<span>from</span> dateutil.tz <span>import</span> UTC, tzlocal, gettz, datetime_exists, resolve_imaginary
</code></pre></div>


<div><h3 id="constructors">Constructors</h3><pre><code>&lt;D&gt;  = date(year, month, day)               <span># Only accepts valid dates from 1 to 9999 AD.</span>
&lt;T&gt;  = time(hour=<span>0</span>, minute=<span>0</span>, second=<span>0</span>)     <span># Also: `microsecond=0, tzinfo=None, fold=0`.</span>
&lt;DT&gt; = datetime(year, month, day, hour=<span>0</span>)   <span># Also: `minute=0, second=0, microsecond=0, …`.</span>
&lt;TD&gt; = timedelta(weeks=<span>0</span>, days=<span>0</span>, hours=<span>0</span>)  <span># Also: `minutes=0, seconds=0, microseconds=0`.</span>
</code></pre></div>

<ul>
<li><strong>Use <code><span>'&lt;D/DT&gt;.weekday()'</span></code> to get the day of the week as an int, with Monday being 0.</strong></li>
<li><strong><code><span>'fold=1'</span></code> means the second pass in case of time jumping back for one hour.</strong></li>
<li><strong>Timedelta normalizes arguments to ±days, seconds (&lt; 86 400) and microseconds (&lt; 1M).</strong></li>
<li><strong><code><span>'&lt;DTa&gt; = resolve_imaginary(&lt;DTa&gt;)'</span></code> fixes DTs that fall into the missing hour.</strong></li>
</ul>
<div><h3 id="now">Now</h3><pre><code>&lt;D/DTn&gt;  = D/DT.today()                     <span># Current local date or naive datetime.</span>
&lt;DTn&gt;    = DT.utcnow()                      <span># Naive datetime from current UTC time.</span>
&lt;DTa&gt;    = DT.now(&lt;tzinfo&gt;)                 <span># Aware datetime from current tz time.</span>
</code></pre></div>

<ul>
<li><strong>To extract time use <code><span>'&lt;DTn&gt;.time()'</span></code>, <code><span>'&lt;DTa&gt;.time()'</span></code> or <code><span>'&lt;DTa&gt;.timetz()'</span></code>.</strong></li>
</ul>
<div><h3 id="timezone">Timezone</h3><pre><code>&lt;tzinfo&gt; = UTC                              <span># UTC timezone. London without DST.</span>
&lt;tzinfo&gt; = tzlocal()                        <span># Local timezone. Also gettz().</span>
&lt;tzinfo&gt; = gettz(<span>'&lt;Continent&gt;/&lt;City&gt;'</span>)      <span># 'Continent/City_Name' timezone or None.</span>
&lt;DTa&gt;    = &lt;DT&gt;.astimezone(&lt;tzinfo&gt;)        <span># Datetime, converted to the passed timezone.</span>
&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  <span># Unconverted object with a new timezone.</span>
</code></pre></div>

<div><h3 id="encode">Encode</h3><pre><code>&lt;D/T/DT&gt; = D/T/DT.fromisoformat(<span>'&lt;iso&gt;'</span>)    <span># Object from ISO string. Raises ValueError.</span>
&lt;DT&gt;     = DT.strptime(&lt;str&gt;, <span>'&lt;format&gt;'</span>)   <span># Datetime from str, according to format.</span>
&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          <span># D/DTn from days since the Gregorian NYE 1.</span>
&lt;DTn&gt;    = DT.fromtimestamp(&lt;real&gt;)         <span># Local time DTn from seconds since the Epoch.</span>
&lt;DTa&gt;    = DT.fromtimestamp(&lt;real&gt;, &lt;tz.&gt;)  <span># Aware datetime from seconds since the Epoch.</span>
</code></pre></div>

<ul>
<li><strong>ISO strings come in following forms: <code><span>'YYYY-MM-DD'</span></code>, <code><span>'HH:MM:SS.mmmuuu[±HH:MM]'</span></code>, or both separated by an arbitrary character. All parts following the hours are optional.</strong></li>
<li><strong>Python uses the Unix Epoch: <code><span>'1970-01-01 00:00 UTC'</span></code>, <code><span>'1970-01-01 01:00 CET'</span></code>, …</strong></li>
</ul>
<div><h3 id="decode">Decode</h3><pre><code>&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep=<span>'T'</span>)      <span># Also `timespec='auto/hours/minutes/seconds/…'`.</span>
&lt;str&gt;    = &lt;D/T/DT&gt;.strftime(<span>'&lt;format&gt;'</span>)    <span># Custom string representation.</span>
&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               <span># Days since Gregorian NYE 1, ignoring time and tz.</span>
&lt;float&gt;  = &lt;DTn&gt;.timestamp()                <span># Seconds since the Epoch, from DTn in local tz.</span>
&lt;float&gt;  = &lt;DTa&gt;.timestamp()                <span># Seconds since the Epoch, from aware datetime.</span>
</code></pre></div>

<div><h3 id="format-1">Format</h3><pre><code><span>&gt;&gt;&gt; </span>dt = datetime.strptime(<span>'2015-05-14 23:39:00.00 +0200'</span>, <span>'%Y-%m-%d %H:%M:%S.%f %z'</span>)
<span>&gt;&gt;&gt; </span>dt.strftime(<span>"%A, %dth of %B '%y, %I:%M%p %Z"</span>)
<span>"Thursday, 14th of May '15, 11:39PM UTC+02:00"</span>
</code></pre></div>

<ul>
<li><strong>Format code <code><span>'%z'</span></code> accepts <code><span>'±HH[:]MM'</span></code> and returns <code><span>'±HHMM'</span></code> (or <code><span>''</span></code> if datetime is naive).</strong></li>
<li><strong>For abbreviated weekday and month use <code><span>'%a'</span></code> and <code><span>'%b'</span></code>.</strong></li>
</ul>
<div><h3 id="arithmetics">Arithmetics</h3><pre><code>&lt;D/DT&gt;   = &lt;D/DT&gt;  ± &lt;TD&gt;                   <span># Returned datetime can fall into missing hour.</span>
&lt;TD&gt;     = &lt;D/DTn&gt; - &lt;D/DTn&gt;                <span># Returns the difference. Ignores time jumps.</span>
&lt;TD&gt;     = &lt;DTa&gt;   - &lt;DTa&gt;                  <span># Ignores time jumps if they share tzinfo object.</span>
&lt;TD&gt;     = &lt;TD&gt;    * &lt;real&gt;                 <span># Also: &lt;TD&gt; = abs(&lt;TD&gt;) and &lt;TD&gt; = &lt;TD&gt; ±% &lt;TD&gt;.</span>
&lt;float&gt;  = &lt;TD&gt;    / &lt;TD&gt;                   <span># How many weeks/years there are in TD. Also //.</span>
</code></pre></div>

<div><h2 id="arguments"><a href="#arguments" name="arguments">#</a>Arguments</h2><div><h3 id="insidefunctioncall">Inside Function Call</h3><pre><code>func(&lt;positional_args&gt;)                           <span># func(0, 0)</span>
func(&lt;keyword_args&gt;)                              <span># func(x=0, y=0)</span>
func(&lt;positional_args&gt;, &lt;keyword_args&gt;)           <span># func(0, y=0)</span>
</code></pre></div></div>


<div><h3 id="insidefunctiondefinition">Inside Function Definition</h3><pre><code><span><span>def</span> <span>func</span><span>(&lt;nondefault_args&gt;)</span>:</span> ...                  <span># def func(x, y): ...</span>
<span><span>def</span> <span>func</span><span>(&lt;default_args&gt;)</span>:</span> ...                     <span># def func(x=0, y=0): ...</span>
<span><span>def</span> <span>func</span><span>(&lt;nondefault_args&gt;, &lt;default_args&gt;)</span>:</span> ...  <span># def func(x, y=0): ...</span>
</code></pre></div>

<ul>
<li><strong>Default values are evaluated when function is first encountered in the scope.</strong></li>
<li><strong>Any mutation of a mutable default value will persist between invocations!</strong></li>
</ul>
<div><h2 id="splatoperator"><a href="#splatoperator" name="splatoperator">#</a>Splat Operator</h2><div><h3 id="insidefunctioncall-1">Inside Function Call</h3><p><strong>Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments.</strong></p><pre><code>args   = (<span>1</span>, <span>2</span>)
kwargs = {<span>'x'</span>: <span>3</span>, <span>'y'</span>: <span>4</span>, <span>'z'</span>: <span>5</span>}
func(*args, **kwargs)
</code></pre></div></div>



<div><h4 id="isthesameas">Is the same as:</h4><pre><code>func(<span>1</span>, <span>2</span>, x=<span>3</span>, y=<span>4</span>, z=<span>5</span>)
</code></pre></div>

<div><h3 id="insidefunctiondefinition-1">Inside Function Definition</h3><p><strong>Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.</strong></p><pre><code><span><span>def</span> <span>add</span><span>(*a)</span>:</span>
    <span>return</span> sum(a)
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>add(<span>1</span>, <span>2</span>, <span>3</span>)
<span>6</span>
</code></pre>
<div><h4 id="legalargumentcombinations">Legal argument combinations:</h4><pre><code><span><span>def</span> <span>f</span><span>(*args)</span>:</span> ...               <span># f(1, 2, 3)</span>
<span><span>def</span> <span>f</span><span>(x, *args)</span>:</span> ...            <span># f(1, 2, 3)</span>
<span><span>def</span> <span>f</span><span>(*args, z)</span>:</span> ...            <span># f(1, 2, z=3)</span>
</code></pre></div>

<pre><code><span><span>def</span> <span>f</span><span>(**kwargs)</span>:</span> ...            <span># f(x=1, y=2, z=3)</span>
<span><span>def</span> <span>f</span><span>(x, **kwargs)</span>:</span> ...         <span># f(x=1, y=2, z=3) | f(1, y=2, z=3)</span>
</code></pre>
<pre><code><span><span>def</span> <span>f</span><span>(*args, **kwargs)</span>:</span> ...     <span># f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span>
<span><span>def</span> <span>f</span><span>(x, *args, **kwargs)</span>:</span> ...  <span># f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span>
<span><span>def</span> <span>f</span><span>(*args, y, **kwargs)</span>:</span> ...  <span># f(x=1, y=2, z=3) | f(1, y=2, z=3)</span>
</code></pre>
<pre><code><span><span>def</span> <span>f</span><span>(*, x, y, z)</span>:</span> ...          <span># f(x=1, y=2, z=3)</span>
<span><span>def</span> <span>f</span><span>(x, *, y, z)</span>:</span> ...          <span># f(x=1, y=2, z=3) | f(1, y=2, z=3)</span>
<span><span>def</span> <span>f</span><span>(x, y, *, z)</span>:</span> ...          <span># f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)</span>
</code></pre>
<div><h3 id="otheruses">Other Uses</h3><pre><code>&lt;list&gt;  = [*&lt;coll.&gt; [, ...]]    <span># Or: list(&lt;collection&gt;) [+ ...]</span>
&lt;tuple&gt; = (*&lt;coll.&gt;, [...])     <span># Or: tuple(&lt;collection&gt;) [+ ...]</span>
&lt;set&gt;   = {*&lt;coll.&gt; [, ...]}    <span># Or: set(&lt;collection&gt;) [| ...]</span>
&lt;dict&gt;  = {**&lt;dict&gt; [, ...]}    <span># Or: dict(**&lt;dict&gt; [, ...])</span>
</code></pre></div>

<pre><code>head, *body, tail = &lt;coll.&gt;     <span># Head or tail can be omitted.</span>
</code></pre>
<div><h2 id="inline"><a href="#inline" name="inline">#</a>Inline</h2><div><h3 id="lambda">Lambda</h3><pre><code>&lt;func&gt; = <span>lambda</span>: &lt;return_value&gt;                     <span># A single statement function.</span>
&lt;func&gt; = <span>lambda</span> &lt;arg_1&gt;, &lt;arg_2&gt;: &lt;return_value&gt;    <span># Also accepts default arguments.</span>
</code></pre></div></div>


<div><h3 id="comprehensions">Comprehensions</h3><pre><code>&lt;list&gt; = [i+<span>1</span> <span>for</span> i <span>in</span> range(<span>10</span>)]                   <span># Or: [1, 2, ..., 10]</span>
&lt;iter&gt; = (i <span>for</span> i <span>in</span> range(<span>10</span>) <span>if</span> i &gt; <span>5</span>)            <span># Or: iter([6, 7, 8, 9])</span>
&lt;set&gt;  = {i+<span>5</span> <span>for</span> i <span>in</span> range(<span>10</span>)}                   <span># Or: {5, 6, ..., 14}</span>
&lt;dict&gt; = {i: i*<span>2</span> <span>for</span> i <span>in</span> range(<span>10</span>)}                <span># Or: {0: 0, 1: 2, ..., 9: 18}</span>
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span>[l+r <span>for</span> l <span>in</span> <span>'abc'</span> <span>for</span> r <span>in</span> <span>'abc'</span>]
[<span>'aa'</span>, <span>'ab'</span>, <span>'ac'</span>, ..., <span>'cc'</span>]
</code></pre>
<div><h3 id="mapfilterreduce">Map, Filter, Reduce</h3><pre><code><span>from</span> functools <span>import</span> reduce
</code></pre></div>

<pre><code>&lt;iter&gt; = map(<span>lambda</span> x: x + <span>1</span>, range(<span>10</span>))            <span># Or: iter([1, 2, ..., 10])</span>
&lt;iter&gt; = filter(<span>lambda</span> x: x &gt; <span>5</span>, range(<span>10</span>))         <span># Or: iter([6, 7, 8, 9])</span>
&lt;obj&gt;  = reduce(<span>lambda</span> out, x: out + x, range(<span>10</span>))  <span># Or: 45</span>
</code></pre>
<div><h3 id="anyall">Any, All</h3><pre><code>&lt;bool&gt; = any(&lt;collection&gt;)                          <span># Is `bool(&lt;el&gt;)` True for any element.</span>
&lt;bool&gt; = all(&lt;collection&gt;)                          <span># Is True for all elements or empty.</span>
</code></pre></div>

<div><h3 id="conditionalexpression">Conditional Expression</h3><pre><code>&lt;obj&gt; = &lt;exp&gt; <span>if</span> &lt;condition&gt; <span>else</span> &lt;exp&gt;             <span># Only one expression gets evaluated.</span>
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span>[a <span>if</span> a <span>else</span> <span>'zero'</span> <span>for</span> a <span>in</span> (<span>0</span>, <span>1</span>, <span>2</span>, <span>3</span>)]      <span># `any([0, '', [], None]) == False`</span>
[<span>'zero'</span>, <span>1</span>, <span>2</span>, <span>3</span>]
</code></pre>
<div><h3 id="namedtupleenumdataclass">Named Tuple, Enum, Dataclass</h3><pre><code><span>from</span> collections <span>import</span> namedtuple
Point = namedtuple(<span>'Point'</span>, <span>'x y'</span>)                  <span># Creates a tuple's subclass.</span>
point = Point(<span>0</span>, <span>0</span>)                                 <span># Returns its instance.</span>
</code></pre></div>

<pre><code><span>from</span> enum <span>import</span> Enum
Direction = Enum(<span>'Direction'</span>, <span>'N E S W'</span>)            <span># Creates an enum.</span>
direction = Direction.N                             <span># Returns its member.</span>
</code></pre>
<pre><code><span>from</span> dataclasses <span>import</span> make_dataclass
Player = make_dataclass(<span>'Player'</span>, [<span>'loc'</span>, <span>'dir'</span>])   <span># Creates a class.</span>
player = Player(point, direction)                   <span># Returns its instance.</span>
</code></pre>
<div><h2 id="imports"><a href="#imports" name="imports">#</a>Imports</h2><pre><code><span>import</span> &lt;module&gt;            <span># Imports a built-in or '&lt;module&gt;.py'.</span>
<span>import</span> &lt;package&gt;           <span># Imports a built-in or '&lt;package&gt;/__init__.py'.</span>
<span>import</span> &lt;package&gt;.&lt;module&gt;  <span># Imports a built-in or '&lt;package&gt;/&lt;module&gt;.py'.</span>
</code></pre></div>

<ul>
<li><strong>Package is a collection of modules, but it can also define its own objects.</strong></li>
<li><strong>On a filesystem this corresponds to a directory of Python files with an optional init script.</strong></li>
<li><strong>Running <code><span>'import &lt;package&gt;'</span></code> does not automatically provide access to the package's modules unless they are explicitly imported in its init script.</strong></li>
</ul>
<div><h2 id="closure"><a href="#closure" name="closure">#</a>Closure</h2><p><strong>We have/get a closure in Python when:</strong></p><ul>
<li><strong>A nested function references a value of its enclosing function and then</strong></li>
<li><strong>the enclosing function returns the nested function.</strong></li>
</ul><pre><code><span><span>def</span> <span>get_multiplier</span><span>(a)</span>:</span>
    <span><span>def</span> <span>out</span><span>(b)</span>:</span>
        <span>return</span> a * b
    <span>return</span> out
</code></pre></div>



<pre><code><span>&gt;&gt;&gt; </span>multiply_by_3 = get_multiplier(<span>3</span>)
<span>&gt;&gt;&gt; </span>multiply_by_3(<span>10</span>)
<span>30</span>
</code></pre>
<ul>
<li><strong>If multiple nested functions within enclosing function reference the same value, that value gets shared.</strong></li>
<li><strong>To dynamically access function's first free variable use <code><span>'&lt;function&gt;.__closure__[0].cell_contents'</span></code>.</strong></li>
</ul>
<div><h3 id="partial">Partial</h3><pre><code><span>from</span> functools <span>import</span> partial
&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt;, &lt;arg_2&gt;, ...])
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span><span><span>def</span> <span>multiply</span><span>(a, b)</span>:</span>
<span>... </span>    <span>return</span> a * b
<span>&gt;&gt;&gt; </span>multiply_by_3 = partial(multiply, <span>3</span>)
<span>&gt;&gt;&gt; </span>multiply_by_3(<span>10</span>)
<span>30</span>
</code></pre>
<ul>
<li><strong>Partial is also useful in cases when function needs to be passed as an argument because it enables us to set its arguments beforehand.</strong></li>
<li><strong>A few examples being: <code><span>'defaultdict(&lt;function&gt;)'</span></code>, <code><span>'iter(&lt;function&gt;, to_exclusive)'</span></code> and dataclass's <code><span>'field(default_factory=&lt;function&gt;)'</span></code>.</strong></li>
</ul>
<div><h3 id="nonlocal">Non-Local</h3><p><strong>If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.</strong></p><pre><code><span><span>def</span> <span>get_counter</span><span>()</span>:</span>
    i = <span>0</span>
    <span><span>def</span> <span>out</span><span>()</span>:</span>
        <span>nonlocal</span> i
        i += <span>1</span>
        <span>return</span> i
    <span>return</span> out
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>counter = get_counter()
<span>&gt;&gt;&gt; </span>counter(), counter(), counter()
(<span>1</span>, <span>2</span>, <span>3</span>)
</code></pre>
<div><h2 id="decorator"><a href="#decorator" name="decorator">#</a>Decorator</h2><ul>
<li><strong>A decorator takes a function, adds some functionality and returns it.</strong></li>
<li><strong>It can be any <a href="#callable">callable</a>, but is usually implemented as a function that returns a <a href="#closure">closure</a>.</strong></li>
</ul><pre><code><span>@decorator_name</span>
<span><span>def</span> <span>function_that_gets_passed_to_decorator</span><span>()</span>:</span>
    ...
</code></pre></div>


<div><h3 id="debuggerexample">Debugger Example</h3><p><strong>Decorator that prints function's name every time the function is called.</strong></p><pre><code><span>from</span> functools <span>import</span> wraps

<span><span>def</span> <span>debug</span><span>(func)</span>:</span>
<span>    @wraps(func)</span>
    <span><span>def</span> <span>out</span><span>(*args, **kwargs)</span>:</span>
        print(func.__name__)
        <span>return</span> func(*args, **kwargs)
    <span>return</span> out

<span>@debug</span>
<span><span>def</span> <span>add</span><span>(x, y)</span>:</span>
    <span>return</span> x + y
</code></pre></div>


<ul>
<li><strong>Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out).</strong></li>
<li><strong>Without it <code><span>'add.__name__'</span></code> would return <code><span>'out'</span></code>.</strong></li>
</ul>
<div><h3 id="lrucache">LRU Cache</h3><p><strong>Decorator that caches function's return values. All function's arguments must be hashable.</strong></p><pre><code><span>from</span> functools <span>import</span> lru_cache

<span>@lru_cache(maxsize=None)</span>
<span><span>def</span> <span>fib</span><span>(n)</span>:</span>
    <span>return</span> n <span>if</span> n &lt; <span>2</span> <span>else</span> fib(n-<span>2</span>) + fib(n-<span>1</span>)
</code></pre></div>


<ul>
<li><strong>Default size of the cache is 128 values. Passing <code><span>'maxsize=None'</span></code> makes it unbounded.</strong></li>
<li><strong>CPython interpreter limits recursion depth to 1000 by default. To increase it use <code><span>'sys.setrecursionlimit(&lt;depth&gt;)'</span></code>.</strong></li>
</ul>
<div><h3 id="parametrizeddecorator">Parametrized Decorator</h3><p><strong>A decorator that accepts arguments and returns a normal decorator that accepts a function.</strong></p><pre><code><span>from</span> functools <span>import</span> wraps

<span><span>def</span> <span>debug</span><span>(print_result=<span>False</span>)</span>:</span>
    <span><span>def</span> <span>decorator</span><span>(func)</span>:</span>
<span>        @wraps(func)</span>
        <span><span>def</span> <span>out</span><span>(*args, **kwargs)</span>:</span>
            result = func(*args, **kwargs)
            print(func.__name__, result <span>if</span> print_result <span>else</span> <span>''</span>)
            <span>return</span> result
        <span>return</span> out
    <span>return</span> decorator

<span>@debug(print_result=True)</span>
<span><span>def</span> <span>add</span><span>(x, y)</span>:</span>
    <span>return</span> x + y
</code></pre></div>


<ul>
<li><strong>Using only <code><span>'@debug'</span></code> to decorate the add() function would not work here, because debug would then receive the add() function as a 'print_result' argument. Decorators can however manually check if the argument they received is a function and act accordingly.</strong></li>
</ul>
<div><h2 id="class"><a href="#class" name="class">#</a>Class</h2><pre><code><span><span>class</span> &lt;<span>name</span>&gt;:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__repr__</span><span>(self)</span>:</span>
        class_name = self.__class__.__name__
        <span>return</span> <span>f'<span>{class_name}</span>(<span>{self.a!r}</span>)'</span>
    <span><span>def</span> <span>__str__</span><span>(self)</span>:</span>
        <span>return</span> str(self.a)

<span>    @classmethod</span>
    <span><span>def</span> <span>get_class_name</span><span>(cls)</span>:</span>
        <span>return</span> cls.__name__
</code></pre></div>

<ul>
<li><strong>Return value of repr() should be unambiguous and of str() readable.</strong></li>
<li><strong>If only repr() is defined, it will also be used for str().</strong></li>
<li><strong>Methods decorated with <code><span>'@staticmethod'</span></code> do not receive 'self' nor 'cls' as their first arg.</strong></li>
</ul>
<div><h4 id="expressionsthatcallthestrmethod">Expressions that call the str() method:</h4><pre><code>print(&lt;el&gt;)
<span>f'<span>{&lt;el&gt;}</span>'</span>
logging.warning(&lt;el&gt;)
csv.writer(&lt;file&gt;).writerow([&lt;el&gt;])
<span>raise</span> Exception(&lt;el&gt;)
</code></pre></div>

<div><h4 id="expressionsthatcallthereprmethod">Expressions that call the repr() method:</h4><pre><code>print/str/repr([&lt;el&gt;])
print/str/repr({&lt;el&gt;: &lt;el&gt;})
<span>f'<span>{&lt;el&gt;!r}</span>'</span>
Z = dataclasses.make_dataclass(<span>'Z'</span>, [<span>'a'</span>]); print/str/repr(Z(&lt;el&gt;))
<span>&gt;&gt;&gt; </span>&lt;el&gt;
</code></pre></div>

<div><h3 id="constructoroverloading">Constructor Overloading</h3><pre><code><span><span>class</span> &lt;<span>name</span>&gt;:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a=<span>None</span>)</span>:</span>
        self.a = a
</code></pre></div>

<div><h3 id="inheritance">Inheritance</h3><pre><code><span><span>class</span> <span>Person</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, name, age)</span>:</span>
        self.name = name
        self.age  = age

<span><span>class</span> <span>Employee</span><span>(Person)</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, name, age, staff_num)</span>:</span>
        super().__init__(name, age)
        self.staff_num = staff_num
</code></pre></div>

<div><h3 id="multipleinheritance">Multiple Inheritance</h3><pre><code><span><span>class</span> <span>A</span>:</span> <span>pass</span>
<span><span>class</span> <span>B</span>:</span> <span>pass</span>
<span><span>class</span> <span>C</span><span>(A, B)</span>:</span> <span>pass</span>
</code></pre></div>

<p><strong>MRO determines the order in which parent classes are traversed when searching for a method or an attribute:</strong></p>
<pre><code><span>&gt;&gt;&gt; </span>C.mro()
[&lt;<span><span>class</span> '<span>C</span>'&gt;, &lt;<span>class</span> '<span>A</span>'&gt;, &lt;<span>class</span> '<span>B</span>'&gt;, &lt;<span>class</span> '<span>object</span>'&gt;]
</span></code></pre>
<div><h3 id="property">Property</h3><p><strong>Pythonic way of implementing getters and setters.</strong></p><pre><code><span><span>class</span> <span>Person</span>:</span>
<span>    @property</span>
    <span><span>def</span> <span>name</span><span>(self)</span>:</span>
        <span>return</span> <span>' '</span>.join(self._name)

<span>    @name.setter</span>
    <span><span>def</span> <span>name</span><span>(self, value)</span>:</span>
        self._name = value.split()
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>person = Person()
<span>&gt;&gt;&gt; </span>person.name = <span>'\t Guido  van Rossum \n'</span>
<span>&gt;&gt;&gt; </span>person.name
<span>'Guido van Rossum'</span>
</code></pre>
<div><h3 id="dataclass">Dataclass</h3><p><strong>Decorator that automatically generates init(), repr() and eq() special methods.</strong></p><pre><code><span>from</span> dataclasses <span>import</span> dataclass, field

<span>@dataclass(order=False, frozen=False)</span>
<span><span>class</span> &lt;<span>class_name</span>&gt;:</span>
    &lt;attr_name&gt;: &lt;type&gt;
    &lt;attr_name&gt;: &lt;type&gt; = &lt;default_value&gt;
    &lt;attr_name&gt;: list/dict/set = field(default_factory=list/dict/set)
</code></pre></div>


<ul>
<li><strong>Objects can be made <a href="#sortable">sortable</a> with <code><span>'order=True'</span></code> and immutable with <code><span>'frozen=True'</span></code>.</strong></li>
<li><strong>For object to be <a href="#hashable">hashable</a>, all attributes must be hashable and 'frozen' must be True.</strong></li>
<li><strong>Function field() is needed because <code><span>'&lt;attr_name&gt;: list = []'</span></code> would make a list that is shared among all instances. Its 'default_factory' argument can be any <a href="#callable">callable</a>.</strong></li>
<li><strong>For attributes of arbitrary type use <code><span>'typing.Any'</span></code>.</strong></li>
</ul>
<div><h4 id="inline-1">Inline:</h4><pre><code><span>from</span> dataclasses <span>import</span> make_dataclass
&lt;class&gt; = make_dataclass(<span>'&lt;class_name&gt;'</span>, &lt;coll_of_attribute_names&gt;)
&lt;class&gt; = make_dataclass(<span>'&lt;class_name&gt;'</span>, &lt;coll_of_tuples&gt;)
&lt;tuple&gt; = (<span>'&lt;attr_name&gt;'</span>, &lt;type&gt; [, &lt;default_value&gt;])</code></pre></div>

<div><h4 id="restoftypeannotationscpythoninterpreterignoresthemall">Rest of type annotations (CPython interpreter ignores them all):</h4><pre><code><span>import</span> typing <span>as</span> tp, collections.abc <span>as</span> abc
&lt;var_name&gt;: list/set/abc.Iterable/abc.Sequence/tp.Optional[&lt;type&gt;] [= &lt;obj&gt;]
&lt;var_name&gt;: dict/tuple/tp.Union[&lt;type&gt;, ...] [= &lt;obj&gt;]
<span><span>def</span> <span>func</span><span>(&lt;arg_name&gt;: &lt;type&gt; [= &lt;obj&gt;])</span> -&gt; &lt;type&gt;:</span> ...
</code></pre></div>

<div><h3 id="slots">Slots</h3><p><strong>Mechanism that restricts objects to attributes listed in 'slots' and significantly reduces their memory footprint.</strong></p><pre><code><span><span>class</span> <span>MyClassWithSlots</span>:</span>
    __slots__ = [<span>'a'</span>]
    <span><span>def</span> <span>__init__</span><span>(self)</span>:</span>
        self.a = <span>1</span>
</code></pre></div>


<div><h3 id="copy">Copy</h3><pre><code><span>from</span> copy <span>import</span> copy, deepcopy
&lt;object&gt; = copy(&lt;object&gt;)
&lt;object&gt; = deepcopy(&lt;object&gt;)
</code></pre></div>

<div><h2 id="ducktypes"><a href="#ducktypes" name="ducktypes">#</a>Duck Types</h2><p><strong>A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.</strong></p><div><h3 id="comparable">Comparable</h3><ul>
<li><strong>If eq() method is not overridden, it returns <code><span>'id(self) == id(other)'</span></code>, which is the same as <code><span>'self is other'</span></code>.</strong></li>
<li><strong>That means all objects compare not equal by default.</strong></li>
<li><strong>Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted. False is returned if both return NotImplemented.</strong></li>
<li><strong>Ne() automatically works on any object that has eq() defined.</strong></li>
</ul><pre><code><span><span>class</span> <span>MyComparable</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__eq__</span><span>(self, other)</span>:</span>
        <span>if</span> isinstance(other, type(self)):
            <span>return</span> self.a == other.a
        <span>return</span> <span>NotImplemented</span>
</code></pre></div></div>




<div><h3 id="hashable">Hashable</h3><ul>
<li><strong>Hashable object needs both hash() and eq() methods and its hash value should never change.</strong></li>
<li><strong>Hashable objects that compare equal must have the same hash value, meaning default hash() that returns <code><span>'id(self)'</span></code> will not do.</strong></li>
<li><strong>That is why Python automatically makes classes unhashable if you only implement eq().</strong></li>
</ul><pre><code><span><span>class</span> <span>MyHashable</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self._a = a
<span>    @property</span>
    <span><span>def</span> <span>a</span><span>(self)</span>:</span>
        <span>return</span> self._a
    <span><span>def</span> <span>__eq__</span><span>(self, other)</span>:</span>
        <span>if</span> isinstance(other, type(self)):
            <span>return</span> self.a == other.a
        <span>return</span> <span>NotImplemented</span>
    <span><span>def</span> <span>__hash__</span><span>(self)</span>:</span>
        <span>return</span> hash(self.a)
</code></pre></div>


<div><h3 id="sortable">Sortable</h3><ul>
<li><strong>With 'total_ordering' decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods and the rest will be automatically generated.</strong></li>
<li><strong>Functions sorted() and min() only require lt() method, while max() only requires gt(). However, it is best to define them all so that confusion doesn't arise in other contexts.</strong></li>
<li><strong>When two lists, strings or dataclasses are compared, their values get compared in order until a pair of unequal values is found. The comparison of this two values is then returned. The shorter sequence is considered smaller in case of all values being equal.</strong></li>
<li><strong>Characters are compared by their Unicode IDs. Use module 'locale' for proper alphabetical order.</strong></li>
</ul><pre><code><span>from</span> functools <span>import</span> total_ordering

<span>@total_ordering</span>
<span><span>class</span> <span>MySortable</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__eq__</span><span>(self, other)</span>:</span>
        <span>if</span> isinstance(other, type(self)):
            <span>return</span> self.a == other.a
        <span>return</span> <span>NotImplemented</span>
    <span><span>def</span> <span>__lt__</span><span>(self, other)</span>:</span>
        <span>if</span> isinstance(other, type(self)):
            <span>return</span> self.a &lt; other.a
        <span>return</span> <span>NotImplemented</span>
</code></pre></div>


<div><h3 id="iterator-1">Iterator</h3><ul>
<li><strong>Any object that has methods next() and iter() is an iterator.</strong></li>
<li><strong>Next() should return next item or raise StopIteration.</strong></li>
<li><strong>Iter() should return 'self'.</strong></li>
</ul><pre><code><span><span>class</span> <span>Counter</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self)</span>:</span>
        self.i = <span>0</span>
    <span><span>def</span> <span>__next__</span><span>(self)</span>:</span>
        self.i += <span>1</span>
        <span>return</span> self.i
    <span><span>def</span> <span>__iter__</span><span>(self)</span>:</span>
        <span>return</span> self
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>counter = Counter()
<span>&gt;&gt;&gt; </span>next(counter), next(counter), next(counter)
(<span>1</span>, <span>2</span>, <span>3</span>)
</code></pre>
<div><h4 id="pythonhasmanydifferentiteratorobjects">Python has many different iterator objects:</h4><ul>
<li><strong>Sequence iterators returned by the <a href="#iterator">iter()</a> function, such as list_iterator and set_iterator.</strong></li>
<li><strong>Objects returned by the <a href="#itertools">itertools</a> module, such as count, repeat and cycle.</strong></li>
<li><strong>Generators returned by the <a href="#generator">generator functions</a> and <a href="#comprehensions">generator expressions</a>.</strong></li>
<li><strong>File objects returned by the <a href="#open">open()</a> function, etc.</strong></li>
</ul><div><h3 id="callable">Callable</h3><ul>
<li><strong>All functions and classes have a call() method, hence are callable.</strong></li>
<li><strong>When this cheatsheet uses <code><span>'&lt;function&gt;'</span></code> as an argument, it actually means <code><span>'&lt;callable&gt;'</span></code>.</strong></li>
</ul><pre><code><span><span>class</span> <span>Counter</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self)</span>:</span>
        self.i = <span>0</span>
    <span><span>def</span> <span>__call__</span><span>(self)</span>:</span>
        self.i += <span>1</span>
        <span>return</span> self.i
</code></pre></div></div>




<pre><code><span>&gt;&gt;&gt; </span>counter = Counter()
<span>&gt;&gt;&gt; </span>counter(), counter(), counter()
(<span>1</span>, <span>2</span>, <span>3</span>)
</code></pre>
<div><h3 id="contextmanager">Context Manager</h3><ul>
<li><strong>With statements only work with objects that have enter() and exit() special methods.</strong></li>
<li><strong>Enter() should lock the resources and optionally return an object.</strong></li>
<li><strong>Exit() should release the resources.</strong></li>
<li><strong>Any exception that happens inside the with block is passed to the exit() method.</strong></li>
<li><strong>The exit() method can suppress the exception by returning a true value.</strong></li>
</ul><pre><code><span><span>class</span> <span>MyOpen</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, filename)</span>:</span>
        self.filename = filename
    <span><span>def</span> <span>__enter__</span><span>(self)</span>:</span>
        self.file = open(self.filename)
        <span>return</span> self.file
    <span><span>def</span> <span>__exit__</span><span>(self, exc_type, exception, traceback)</span>:</span>
        self.file.close()
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span><span>with</span> open(<span>'test.txt'</span>, <span>'w'</span>) <span>as</span> file:
<span>... </span>    file.write(<span>'Hello World!'</span>)
<span>&gt;&gt;&gt; </span><span>with</span> MyOpen(<span>'test.txt'</span>) <span>as</span> file:
<span>... </span>    print(file.read())
Hello World!
</code></pre>
<div><h2 id="iterableducktypes"><a href="#iterableducktypes" name="iterableducktypes">#</a>Iterable Duck Types</h2><div><h3 id="iterable">Iterable</h3><ul>
<li><strong>Only required method is iter(). It should return an iterator of object's items.</strong></li>
<li><strong>Contains() automatically works on any object that has iter() defined.</strong></li>
</ul><pre><code><span><span>class</span> <span>MyIterable</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__iter__</span><span>(self)</span>:</span>
        <span>return</span> iter(self.a)
    <span><span>def</span> <span>__contains__</span><span>(self, el)</span>:</span>
        <span>return</span> el <span>in</span> self.a
</code></pre></div></div>



<pre><code><span>&gt;&gt;&gt; </span>obj = MyIterable([<span>1</span>, <span>2</span>, <span>3</span>])
<span>&gt;&gt;&gt; </span>[el <span>for</span> el <span>in</span> obj]
[<span>1</span>, <span>2</span>, <span>3</span>]
<span>&gt;&gt;&gt; </span><span>1</span> <span>in</span> obj
<span>True</span>
</code></pre>
<div><h3 id="collection">Collection</h3><ul>
<li><strong>Only required methods are iter() and len(). Len() should return the number of items.</strong></li>
<li><strong>This cheatsheet actually means <code><span>'&lt;iterable&gt;'</span></code> when it uses <code><span>'&lt;collection&gt;'</span></code>.</strong></li>
<li><strong>I chose not to use the name 'iterable' because it sounds scarier and more vague than 'collection'. The only drawback of this decision is that a reader could think a certain function doesn't accept iterators when it does, since iterators are the only built-in objects that are iterable but are not collections.</strong></li>
</ul><pre><code><span><span>class</span> <span>MyCollection</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__iter__</span><span>(self)</span>:</span>
        <span>return</span> iter(self.a)
    <span><span>def</span> <span>__contains__</span><span>(self, el)</span>:</span>
        <span>return</span> el <span>in</span> self.a
    <span><span>def</span> <span>__len__</span><span>(self)</span>:</span>
        <span>return</span> len(self.a)
</code></pre></div>


<div><h3 id="sequence">Sequence</h3><ul>
<li><strong>Only required methods are getitem() and len().</strong></li>
<li><strong>Getitem() should return an item at the passed index or raise IndexError.</strong></li>
<li><strong>Iter() and contains() automatically work on any object that has getitem() defined.</strong></li>
<li><strong>Reversed() automatically works on any object that has getitem() and len() defined.</strong></li>
</ul><pre><code><span><span>class</span> <span>MySequence</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__iter__</span><span>(self)</span>:</span>
        <span>return</span> iter(self.a)
    <span><span>def</span> <span>__contains__</span><span>(self, el)</span>:</span>
        <span>return</span> el <span>in</span> self.a
    <span><span>def</span> <span>__len__</span><span>(self)</span>:</span>
        <span>return</span> len(self.a)
    <span><span>def</span> <span>__getitem__</span><span>(self, i)</span>:</span>
        <span>return</span> self.a[i]
    <span><span>def</span> <span>__reversed__</span><span>(self)</span>:</span>
        <span>return</span> reversed(self.a)
</code></pre></div>


<div><h4 id="discrepanciesbetweenglossarydefinitionsandabstractbaseclasses">Discrepancies between glossary definitions and abstract base classes:</h4><ul>
<li><strong>Glossary defines iterable as any object with iter() or getitem() and sequence as any object with getitem() and len(). It does not define collection.</strong></li>
<li><strong>Passing ABC Iterable to isinstance() or issubclass() checks whether object/class has method iter(), while ABC Collection checks for iter(), contains() and len().</strong></li>
</ul></div>




<div><h3 id="abcsequence">ABC Sequence</h3><ul>
<li><strong>It's a richer interface than the basic sequence.</strong></li>
<li><strong>Extending it generates iter(), contains(), reversed(), index() and count().</strong></li>
<li><strong>Unlike <code><span>'abc.Iterable'</span></code> and <code><span>'abc.Collection'</span></code>, it is not a duck type. That is why <code><span>'issubclass(MySequence, abc.Sequence)'</span></code> would return False even if MySequence had all the methods defined. It however recognizes list, tuple, range, str, bytes, bytearray, array, memoryview and deque, because they are registered as its virtual subclasses.</strong></li>
</ul><pre><code><span>from</span> collections <span>import</span> abc

<span><span>class</span> <span>MyAbcSequence</span><span>(abc.Sequence)</span>:</span>
    <span><span>def</span> <span>__init__</span><span>(self, a)</span>:</span>
        self.a = a
    <span><span>def</span> <span>__len__</span><span>(self)</span>:</span>
        <span>return</span> len(self.a)
    <span><span>def</span> <span>__getitem__</span><span>(self, i)</span>:</span>
        <span>return</span> self.a[i]
</code></pre></div><div><h4 id="tableofrequiredandautomaticallyavailablespecialmethods">Table of required and automatically available special methods:</h4><pre><code>┏━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━┓
┃            │  Iterable  │ Collection │  Sequence  │ abc.Sequence ┃
┠────────────┼────────────┼────────────┼────────────┼──────────────┨
┃ iter()     │     !      │     !      │     ✓      │      ✓       ┃
┃ contains() │     ✓      │     ✓      │     ✓      │      ✓       ┃
┃ len()      │            │     !      │     !      │      !       ┃
┃ getitem()  │            │            │     !      │      !       ┃
┃ reversed() │            │            │     ✓      │      ✓       ┃
┃ index()    │            │            │            │      ✓       ┃
┃ count()    │            │            │            │      ✓       ┃
┗━━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━┛
</code></pre></div>

<ul>
<li><strong>Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping.</strong></li>
<li><strong>Names of their required methods are stored in <code><span>'&lt;abc&gt;.__abstractmethods__'</span></code>.</strong></li>
</ul>
<div><h2 id="enum"><a href="#enum" name="enum">#</a>Enum</h2><pre><code><span>from</span> enum <span>import</span> Enum, auto
</code></pre></div>

<pre><code><span><span>class</span> &lt;<span>enum_name</span>&gt;<span>(Enum)</span>:</span>
    &lt;member_name&gt; = auto()
    &lt;member_name&gt; = &lt;value&gt;
    &lt;member_name&gt; = &lt;value&gt;, &lt;value&gt;
</code></pre>
<ul>
<li><strong>Function auto() returns an increment of the last numeric value or 1.</strong></li>
<li><strong>Accessing a member named after a reserved keyword causes SyntaxError.</strong></li>
<li><strong>Methods receive the member they were called on as the 'self' argument.</strong></li>
</ul>
<pre><code>&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;           <span># Returns a member.</span>
&lt;member&gt; = &lt;enum&gt;[<span>'&lt;member_name&gt;'</span>]        <span># Returns a member. Raises KeyError.</span>
&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)                <span># Returns a member. Raises ValueError.</span>
&lt;str&gt;    = &lt;member&gt;.name                  <span># Returns member's name.</span>
&lt;obj&gt;    = &lt;member&gt;.value                 <span># Returns member's value.</span>
</code></pre>
<pre><code>&lt;list&gt;   = list(&lt;enum&gt;)                   <span># Returns enum's members.</span>
&lt;list&gt;   = [a.name <span>for</span> a <span>in</span> &lt;enum&gt;]       <span># Returns enum's member names.</span>
&lt;list&gt;   = [a.value <span>for</span> a <span>in</span> &lt;enum&gt;]      <span># Returns enum's member values.</span>
&lt;member&gt; = random.choice(list(&lt;enum&gt;))    <span># Returns a random member.</span>
</code></pre>
<pre><code><span><span>def</span> <span>get_next_member</span><span>(member)</span>:</span>
    members = list(type(member))
    index = members.index(member) + <span>1</span>
    <span>return</span> members[index % len(members)]
</code></pre>
<div><h3 id="inline-2">Inline</h3><pre><code>Cutlery = Enum(<span>'Cutlery'</span>, <span>'FORK KNIFE SPOON'</span>)
Cutlery = Enum(<span>'Cutlery'</span>, [<span>'FORK'</span>, <span>'KNIFE'</span>, <span>'SPOON'</span>])
Cutlery = Enum(<span>'Cutlery'</span>, {<span>'FORK'</span>: <span>1</span>, <span>'KNIFE'</span>: <span>2</span>, <span>'SPOON'</span>: <span>3</span>})
</code></pre></div>

<div><h4 id="userdefinedfunctionscannotbevaluessotheymustbewrapped">User-defined functions cannot be values, so they must be wrapped:</h4><pre><code><span>from</span> functools <span>import</span> partial
LogicOp = Enum(<span>'LogicOp'</span>, {<span>'AND'</span>: partial(<span>lambda</span> l, r: l <span>and</span> r),
                           <span>'OR'</span>:  partial(<span>lambda</span> l, r: l <span>or</span> r)})
</code></pre></div>

<div><h2 id="exceptions"><a href="#exceptions" name="exceptions">#</a>Exceptions</h2><pre><code><span>try</span>:
    &lt;code&gt;
<span>except</span> &lt;exception&gt;:
    &lt;code&gt;
</code></pre></div>

<div><h3 id="complexexample">Complex Example</h3><pre><code><span>try</span>:
    &lt;code_1&gt;
<span>except</span> &lt;exception_a&gt;:
    &lt;code_2_a&gt;
<span>except</span> &lt;exception_b&gt;:
    &lt;code_2_b&gt;
<span>else</span>:
    &lt;code_2_c&gt;
<span>finally</span>:
    &lt;code_3&gt;
</code></pre></div>

<ul>
<li><strong>Code inside the <code><span>'else'</span></code> block will only be executed if <code><span>'try'</span></code> block had no exceptions.</strong></li>
<li><strong>Code inside the <code><span>'finally'</span></code> block will always be executed (unless a signal is received).</strong></li>
<li><strong>All variables that are initialized in executed blocks are also visible in all subsequent blocks, as well as outside the try/except clause (only function blocks delimit scope).</strong></li>
<li><strong>To catch signals use <code><span>'signal.signal(signal_number, &lt;func&gt;)'</span></code>.</strong></li>
</ul>
<div><h3 id="catchingexceptions">Catching Exceptions</h3><pre><code><span>except</span> &lt;exception&gt;: ...
<span>except</span> &lt;exception&gt; <span>as</span> &lt;name&gt;: ...
<span>except</span> (&lt;exception&gt;, [...]): ...
<span>except</span> (&lt;exception&gt;, [...]) <span>as</span> &lt;name&gt;: ...
</code></pre></div>

<ul>
<li><strong>Also catches subclasses of the exception.</strong></li>
<li><strong>Use <code><span>'traceback.print_exc()'</span></code> to print the error message to stderr.</strong></li>
<li><strong>Use <code><span>'print(&lt;name&gt;)'</span></code> to print just the cause of the exception (its arguments).</strong></li>
<li><strong>Use <code><span>'logging.exception(&lt;message&gt;)'</span></code> to log the passed message, followed by the full error message of the caught exception.</strong></li>
</ul>
<div><h3 id="raisingexceptions">Raising Exceptions</h3><pre><code><span>raise</span> &lt;exception&gt;
<span>raise</span> &lt;exception&gt;()
<span>raise</span> &lt;exception&gt;(&lt;el&gt; [, ...])
</code></pre></div>

<div><h4 id="reraisingcaughtexception">Re-raising caught exception:</h4><pre><code><span>except</span> &lt;exception&gt; [<span>as</span> &lt;name&gt;]:
    ...
    <span>raise</span>
</code></pre></div>

<div><h3 id="exceptionobject">Exception Object</h3><pre><code>arguments = &lt;name&gt;.args
exc_type  = &lt;name&gt;.__class__
filename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename
func_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name
line      = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)
trace_str = <span>''</span>.join(traceback.format_tb(&lt;name&gt;.__traceback__))
error_msg = <span>''</span>.join(traceback.format_exception(exc_type, &lt;name&gt;, &lt;name&gt;.__traceback__))
</code></pre></div>

<div><h3 id="builtinexceptions">Built-in Exceptions</h3><pre><code>BaseException
 ├── SystemExit                   <span># Raised by the sys.exit() function.</span>
 ├── KeyboardInterrupt            <span># Raised when the user hits the interrupt key (ctrl-c).</span>
 └── Exception                    <span># User-defined exceptions should be derived from this class.</span>
      ├── ArithmeticError         <span># Base class for arithmetic errors such as ZeroDivisionError.</span>
      ├── AssertionError          <span># Raised by `assert &lt;exp&gt;` if expression returns false value.</span>
      ├── AttributeError          <span># Raised when object doesn't have requested attribute/method.</span>
      ├── EOFError                <span># Raised by input() when it hits an end-of-file condition.</span>
      ├── LookupError             <span># Base class for errors when a collection can't find an item.</span>
      │    ├── IndexError         <span># Raised when a sequence index is out of range.</span>
      │    └── KeyError           <span># Raised when a dictionary key or set element is missing.</span>
      ├── MemoryError             <span># Out of memory. Could be too late to start deleting vars.</span>
      ├── NameError               <span># Raised when nonexistent name (variable/func/class) is used.</span>
      │    └── UnboundLocalError  <span># Raised when local name is used before it's being defined.</span>
      ├── OSError                 <span># Errors such as FileExistsError/PermissionError (see #Open).</span>
      │    └── ConnectionError    <span># Errors such as BrokenPipeError/ConnectionAbortedError.</span>
      ├── RuntimeError            <span># Raised by errors that don't fall into other categories.</span>
      │    ├── NotImplementedErr  <span># Can be raised by abstract methods or by unfinished code.</span>
      │    └── RecursionError     <span># Raised when the maximum recursion depth is exceeded.</span>
      ├── StopIteration           <span># Raised by next() when run on an empty iterator.</span>
      ├── TypeError               <span># Raised when an argument is of the wrong type.</span>
      └── ValueError              <span># When argument has the right type but inappropriate value.</span>
</code></pre></div>

<div><h4 id="collectionsandtheirexceptions">Collections and their exceptions:</h4><pre><code>┏━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┓
┃           │    List    │    Set     │    Dict    ┃
┠───────────┼────────────┼────────────┼────────────┨
┃ getitem() │ IndexError │            │  KeyError  ┃
┃ pop()     │ IndexError │  KeyError  │  KeyError  ┃
┃ remove()  │ ValueError │  KeyError  │            ┃
┃ index()   │ ValueError │            │            ┃
┗━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━┛
</code></pre></div>

<div><h4 id="usefulbuiltinexceptions">Useful built-in exceptions:</h4><pre><code><span>raise</span> TypeError(<span>'Argument is of the wrong type!'</span>)
<span>raise</span> ValueError(<span>'Argument has the right type but an inappropriate value!'</span>)
<span>raise</span> RuntimeError(<span>'None of above!'</span>)
</code></pre></div>

<div><h3 id="userdefinedexceptions">User-defined Exceptions</h3><pre><code><span><span>class</span> <span>MyError</span><span>(Exception)</span>:</span> <span>pass</span>
<span><span>class</span> <span>MyInputError</span><span>(MyError)</span>:</span> <span>pass</span>
</code></pre></div>

<div><h2 id="exit"><a href="#exit" name="exit">#</a>Exit</h2><p><strong>Exits the interpreter by raising SystemExit exception.</strong></p><pre><code><span>import</span> sys
sys.exit()                        <span># Exits with exit code 0 (success).</span>
sys.exit(&lt;el&gt;)                    <span># Prints to stderr and exits with 1.</span>
sys.exit(&lt;int&gt;)                   <span># Exits with passed exit code.</span>
</code></pre></div>


<div><h2 id="print"><a href="#print" name="print">#</a>Print</h2><pre><code>print(&lt;el_1&gt;, ..., sep=<span>' '</span>, end=<span>'\n'</span>, file=sys.stdout, flush=<span>False</span>)
</code></pre></div>

<ul>
<li><strong>Use <code><span>'file=sys.stderr'</span></code> for messages about errors.</strong></li>
<li><strong>Use <code><span>'flush=True'</span></code> to forcibly flush the stream.</strong></li>
</ul>
<div><h3 id="prettyprint">Pretty Print</h3><pre><code><span>from</span> pprint <span>import</span> pprint
pprint(&lt;collection&gt;, width=<span>80</span>, depth=<span>None</span>, compact=<span>False</span>, sort_dicts=<span>True</span>)
</code></pre></div>

<ul>
<li><strong>Levels deeper than 'depth' get replaced by '…'.</strong></li>
</ul>
<div><h2 id="input"><a href="#input" name="input">#</a>Input</h2><p><strong>Reads a line from the user input or pipe if present.</strong></p><pre><code>&lt;str&gt; = input(prompt=<span>None</span>)
</code></pre></div>


<ul>
<li><strong>Trailing newline gets stripped.</strong></li>
<li><strong>Prompt string is printed to the standard output before reading input.</strong></li>
<li><strong>Raises EOFError when user hits EOF (ctrl-d/ctrl-z⏎) or input stream gets exhausted.</strong></li>
</ul>
<div><h2 id="commandlinearguments"><a href="#commandlinearguments" name="commandlinearguments">#</a>Command Line Arguments</h2><pre><code><span>import</span> sys
scripts_path = sys.argv[<span>0</span>]
arguments    = sys.argv[<span>1</span>:]
</code></pre></div>

<div><h3 id="argumentparser">Argument Parser</h3><pre><code><span>from</span> argparse <span>import</span> ArgumentParser, FileType
p = ArgumentParser(description=&lt;str&gt;)
p.add_argument(<span>'-&lt;short_name&gt;'</span>, <span>'--&lt;name&gt;'</span>, action=<span>'store_true'</span>)  <span># Flag.</span>
p.add_argument(<span>'-&lt;short_name&gt;'</span>, <span>'--&lt;name&gt;'</span>, type=&lt;type&gt;)          <span># Option.</span>
p.add_argument(<span>'&lt;name&gt;'</span>, type=&lt;type&gt;, nargs=<span>1</span>)                    <span># First argument.</span>
p.add_argument(<span>'&lt;name&gt;'</span>, type=&lt;type&gt;, nargs=<span>'+'</span>)                  <span># Remaining arguments.</span>
p.add_argument(<span>'&lt;name&gt;'</span>, type=&lt;type&gt;, nargs=<span>'*'</span>)                  <span># Optional arguments.</span>
args  = p.parse_args()                                            <span># Exits on error.</span>
value = args.&lt;name&gt;
</code></pre></div>

<ul>
<li><strong>Use <code><span>'help=&lt;str&gt;'</span></code> to set argument description that will be displayed in help message.</strong></li>
<li><strong>Use <code><span>'default=&lt;el&gt;'</span></code> to set the default value.</strong></li>
<li><strong>Use <code><span>'type=FileType(&lt;mode&gt;)'</span></code> for files. Accepts 'encoding', but 'newline' is None.</strong></li>
</ul>
<div><h2 id="open"><a href="#open" name="open">#</a>Open</h2><p><strong>Opens the file and returns a corresponding file object.</strong></p><pre><code>&lt;file&gt; = open(&lt;path&gt;, mode=<span>'r'</span>, encoding=<span>None</span>, newline=<span>None</span>)
</code></pre></div>


<ul>
<li><strong><code><span>'encoding=None'</span></code> means that the default encoding is used, which is platform dependent. Best practice is to use <code><span>'encoding="utf-8"'</span></code> whenever possible.</strong></li>
<li><strong><code><span>'newline=None'</span></code> means all different end of line combinations are converted to '\n' on read, while on write all '\n' characters are converted to system's default line separator.</strong></li>
<li><strong><code><span>'newline=""'</span></code> means no conversions take place, but input is still broken into chunks by readline() and readlines() on every '\n', '\r' and '\r\n'.</strong></li>
</ul>
<div><h3 id="modes">Modes</h3><ul>
<li><strong><code><span>'r'</span></code>  - Read (default).</strong></li>
<li><strong><code><span>'w'</span></code>  - Write (truncate).</strong></li>
<li><strong><code><span>'x'</span></code>  - Write or fail if the file already exists.</strong></li>
<li><strong><code><span>'a'</span></code>  - Append.</strong></li>
<li><strong><code><span>'w+'</span></code> - Read and write (truncate).</strong></li>
<li><strong><code><span>'r+'</span></code> - Read and write from the start.</strong></li>
<li><strong><code><span>'a+'</span></code> - Read and write from the end.</strong></li>
<li><strong><code><span>'t'</span></code>  - Text mode (default).</strong></li>
<li><strong><code><span>'b'</span></code>  - Binary mode (<code><span>'br'</span></code>, <code><span>'bw'</span></code>, <code><span>'bx'</span></code>, …).</strong></li>
</ul><div><h3 id="exceptions-1">Exceptions</h3><ul>
<li><strong><code><span>'FileNotFoundError'</span></code> can be raised when reading with <code><span>'r'</span></code> or <code><span>'r+'</span></code>.</strong></li>
<li><strong><code><span>'FileExistsError'</span></code> can be raised when writing with <code><span>'x'</span></code>.</strong></li>
<li><strong><code><span>'IsADirectoryError'</span></code> and <code><span>'PermissionError'</span></code> can be raised by any.</strong></li>
<li><strong><code><span>'OSError'</span></code> is the parent class of all listed exceptions.</strong></li>
</ul><div><h3 id="fileobject">File Object</h3><pre><code>&lt;file&gt;.seek(<span>0</span>)                      <span># Moves to the start of the file.</span>
&lt;file&gt;.seek(offset)                 <span># Moves 'offset' chars/bytes from the start.</span>
&lt;file&gt;.seek(<span>0</span>, <span>2</span>)                   <span># Moves to the end of the file.</span>
&lt;bin_file&gt;.seek(±offset, &lt;anchor&gt;)  <span># Anchor: 0 start, 1 current position, 2 end.</span>
</code></pre></div></div></div>





<pre><code>&lt;str/bytes&gt; = &lt;file&gt;.read(size=<span>-1</span>)  <span># Reads 'size' chars/bytes or until EOF.</span>
&lt;str/bytes&gt; = &lt;file&gt;.readline()     <span># Returns a line or empty string/bytes on EOF.</span>
&lt;list&gt;      = &lt;file&gt;.readlines()    <span># Returns a list of remaining lines.</span>
&lt;str/bytes&gt; = next(&lt;file&gt;)          <span># Returns a line using buffer. Do not mix.</span>
</code></pre>
<pre><code>&lt;file&gt;.write(&lt;str/bytes&gt;)           <span># Writes a string or bytes object.</span>
&lt;file&gt;.writelines(&lt;collection&gt;)     <span># Writes a coll. of strings or bytes objects.</span>
&lt;file&gt;.flush()                      <span># Flushes write buffer. Runs every 4096/8192 B.</span>
</code></pre>
<ul>
<li><strong>Methods do not add or strip trailing newlines, even writelines().</strong></li>
</ul>
<div><h3 id="readtextfromfile">Read Text from File</h3><pre><code><span><span>def</span> <span>read_file</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, encoding=<span>'utf-8'</span>) <span>as</span> file:
        <span>return</span> file.readlines()
</code></pre></div>

<div><h3 id="writetexttofile">Write Text to File</h3><pre><code><span><span>def</span> <span>write_to_file</span><span>(filename, text)</span>:</span>
    <span>with</span> open(filename, <span>'w'</span>, encoding=<span>'utf-8'</span>) <span>as</span> file:
        file.write(text)
</code></pre></div>

<div><h2 id="paths"><a href="#paths" name="paths">#</a>Paths</h2><pre><code><span>import</span> os, glob
<span>from</span> pathlib <span>import</span> Path
</code></pre></div>

<pre><code>&lt;str&gt;  = os.getcwd()                <span># Returns the current working directory.</span>
&lt;str&gt;  = os.path.join(&lt;path&gt;, ...)  <span># Joins two or more pathname components.</span>
&lt;str&gt;  = os.path.realpath(&lt;path&gt;)   <span># Resolves symlinks and calls path.abspath().</span>
</code></pre>
<pre><code>&lt;str&gt;  = os.path.basename(&lt;path&gt;)   <span># Returns final component of the path.</span>
&lt;str&gt;  = os.path.dirname(&lt;path&gt;)    <span># Returns path without the final component.</span>
&lt;tup.&gt; = os.path.splitext(&lt;path&gt;)   <span># Splits on last period of the final component.</span>
</code></pre>
<pre><code>&lt;list&gt; = os.listdir(path=<span>'.'</span>)       <span># Returns filenames located at the path.</span>
&lt;list&gt; = glob.glob(<span>'&lt;pattern&gt;'</span>)     <span># Returns paths matching the wildcard pattern.</span>
</code></pre>
<pre><code>&lt;bool&gt; = os.path.exists(&lt;path&gt;)     <span># Or: &lt;Path&gt;.exists()</span>
&lt;bool&gt; = os.path.isfile(&lt;path&gt;)     <span># Or: &lt;DirEntry/Path&gt;.is_file()</span>
&lt;bool&gt; = os.path.isdir(&lt;path&gt;)      <span># Or: &lt;DirEntry/Path&gt;.is_dir()</span>
</code></pre>
<pre><code>&lt;stat&gt; = os.stat(&lt;path&gt;)            <span># Or: &lt;DirEntry/Path&gt;.stat()</span>
&lt;real&gt; = &lt;stat&gt;.st_mtime/st_size/…  <span># Modification time, size in bytes, ...</span>
</code></pre>
<div><h3 id="direntry">DirEntry</h3><p><strong>Unlike listdir(), scandir() returns DirEntry objects that cache isfile, isdir and on Windows also stat information, thus significantly increasing the performance of code that requires it.</strong></p><pre><code>&lt;iter&gt; = os.scandir(path=<span>'.'</span>)       <span># Returns DirEntry objects located at the path.</span>
&lt;str&gt;  = &lt;DirEntry&gt;.path            <span># Returns the whole path as a string.</span>
&lt;str&gt;  = &lt;DirEntry&gt;.name            <span># Returns final component as a string.</span>
&lt;file&gt; = open(&lt;DirEntry&gt;)           <span># Opens the file and returns a file object.</span>
</code></pre></div>


<div><h3 id="pathobject">Path Object</h3><pre><code>&lt;Path&gt; = Path(&lt;path&gt; [, ...])       <span># Accepts strings, Paths and DirEntry objects.</span>
&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    <span># First or second path must be a Path object.</span>
&lt;Path&gt; = &lt;Path&gt;.resolve()           <span># Resolves symlinks and calls &lt;Path&gt;.absolute().</span>
</code></pre></div>

<pre><code>&lt;Path&gt; = Path()                     <span># Returns relative cwd. Also Path('.').</span>
&lt;Path&gt; = Path.cwd()                 <span># Returns absolute cwd. Also Path().resolve().</span>
&lt;Path&gt; = Path.home()                <span># Returns user's home directory (absolute).</span>
&lt;Path&gt; = Path(__file__).resolve()   <span># Returns script's path if cwd wasn't changed.</span>
</code></pre>
<pre><code>&lt;Path&gt; = &lt;Path&gt;.parent              <span># Returns Path without the final component.</span>
&lt;str&gt;  = &lt;Path&gt;.name                <span># Returns final component as a string.</span>
&lt;str&gt;  = &lt;Path&gt;.stem                <span># Returns final component without extension.</span>
&lt;str&gt;  = &lt;Path&gt;.suffix              <span># Returns final component's extension.</span>
&lt;tup.&gt; = &lt;Path&gt;.parts               <span># Returns all components as strings.</span>
</code></pre>
<pre><code>&lt;iter&gt; = &lt;Path&gt;.iterdir()           <span># Returns directory contents as Path objects.</span>
&lt;iter&gt; = &lt;Path&gt;.glob(<span>'&lt;pattern&gt;'</span>)   <span># Returns Paths matching the wildcard pattern.</span>
</code></pre>
<pre><code>&lt;str&gt;  = str(&lt;Path&gt;)                <span># Returns path as a string.</span>
&lt;file&gt; = open(&lt;Path&gt;)               <span># Also &lt;Path&gt;.read/write_text/bytes().</span>
</code></pre>
<div><h2 id="oscommands"><a href="#oscommands" name="oscommands">#</a>OS Commands</h2><pre><code><span>import</span> os, shutil, subprocess
</code></pre></div>

<pre><code>os.chdir(&lt;path&gt;)                    <span># Changes the current working directory.</span>
os.mkdir(&lt;path&gt;, mode=<span>0o777</span>)        <span># Creates a directory. Permissions are in octal.</span>
os.makedirs(&lt;path&gt;, mode=<span>0o777</span>)     <span># Creates all path's dirs. Also `exist_ok=False`.</span>
</code></pre>
<pre><code>shutil.copy(from, to)               <span># Copies the file. 'to' can exist or be a dir.</span>
shutil.copy2(from, to)              <span># Also copies creation and modification time.</span>
shutil.copytree(from, to)           <span># Copies the directory. 'to' must not exist.</span>
</code></pre>
<pre><code>os.rename(from, to)                 <span># Renames/moves the file or directory.</span>
os.replace(from, to)                <span># Same, but overwrites file 'to' even on Windows.</span>
shutil.move(from, to)               <span># Rename() that moves into 'to' if it's a dir.</span>
</code></pre>
<pre><code>os.remove(&lt;path&gt;)                   <span># Deletes the file.</span>
os.rmdir(&lt;path&gt;)                    <span># Deletes the empty directory.</span>
shutil.rmtree(&lt;path&gt;)               <span># Deletes the directory.</span>
</code></pre>
<ul>
<li><strong>Paths can be either strings, Paths or DirEntry objects.</strong></li>
<li><strong>Functions report OS related errors by raising either OSError or one of its <a href="#exceptions-1">subclasses</a>.</strong></li>
</ul>
<div><h3 id="shellcommands">Shell Commands</h3><pre><code>&lt;pipe&gt; = os.popen(<span>'&lt;command&gt;'</span>)      <span># Executes command in sh/cmd. Returns its stdout pipe.</span>
&lt;str&gt;  = &lt;pipe&gt;.read(size=<span>-1</span>)       <span># Reads 'size' chars or until EOF. Also readline/s().</span>
&lt;int&gt;  = &lt;pipe&gt;.close()             <span># Closes the pipe. Returns None on success (returncode 0).</span>
</code></pre></div>

<div><h4 id="sends11tothebasiccalculatorandcapturesitsoutput">Sends '1 + 1' to the basic calculator and captures its output:</h4><pre><code><span>&gt;&gt;&gt; </span>subprocess.run(<span>'bc'</span>, input=<span>'1 + 1\n'</span>, capture_output=<span>True</span>, text=<span>True</span>)
CompletedProcess(args=<span>'bc'</span>, returncode=<span>0</span>, stdout=<span>'2\n'</span>, stderr=<span>''</span>)
</code></pre></div>

<div><h4 id="sendstestintothebasiccalculatorrunninginstandardmodeandsavesitsoutputtotestout">Sends test.in to the basic calculator running in standard mode and saves its output to test.out:</h4><pre><code><span>&gt;&gt;&gt; </span><span>from</span> shlex <span>import</span> split
<span>&gt;&gt;&gt; </span>os.popen(<span>'echo 1 + 1 &gt; test.in'</span>)
<span>&gt;&gt;&gt; </span>subprocess.run(split(<span>'bc -s'</span>), stdin=open(<span>'test.in'</span>), stdout=open(<span>'test.out'</span>, <span>'w'</span>))
CompletedProcess(args=[<span>'bc'</span>, <span>'-s'</span>], returncode=<span>0</span>)
<span>&gt;&gt;&gt; </span>open(<span>'test.out'</span>).read()
<span>'2\n'</span>
</code></pre></div>

<div><h2 id="json"><a href="#json" name="json">#</a>JSON</h2><p><strong>Text file format for storing collections of strings and numbers.</strong></p><pre><code><span>import</span> json
&lt;str&gt;    = json.dumps(&lt;object&gt;)     <span># Converts object to JSON string.</span>
&lt;object&gt; = json.loads(&lt;str&gt;)        <span># Converts JSON string to object.</span>
</code></pre></div>


<div><h3 id="readobjectfromjsonfile">Read Object from JSON File</h3><pre><code><span><span>def</span> <span>read_json_file</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, encoding=<span>'utf-8'</span>) <span>as</span> file:
        <span>return</span> json.load(file)
</code></pre></div>

<div><h3 id="writeobjecttojsonfile">Write Object to JSON File</h3><pre><code><span><span>def</span> <span>write_to_json_file</span><span>(filename, an_object)</span>:</span>
    <span>with</span> open(filename, <span>'w'</span>, encoding=<span>'utf-8'</span>) <span>as</span> file:
        json.dump(an_object, file, ensure_ascii=<span>False</span>, indent=<span>2</span>)
</code></pre></div>

<div><h2 id="pickle"><a href="#pickle" name="pickle">#</a>Pickle</h2><p><strong>Binary file format for storing Python objects.</strong></p><pre><code><span>import</span> pickle
&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)   <span># Converts object to bytes object.</span>
&lt;object&gt; = pickle.loads(&lt;bytes&gt;)    <span># Converts bytes object to object.</span>
</code></pre></div>


<div><h3 id="readobjectfromfile">Read Object from File</h3><pre><code><span><span>def</span> <span>read_pickle_file</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, <span>'rb'</span>) <span>as</span> file:
        <span>return</span> pickle.load(file)
</code></pre></div>

<div><h3 id="writeobjecttofile">Write Object to File</h3><pre><code><span><span>def</span> <span>write_to_pickle_file</span><span>(filename, an_object)</span>:</span>
    <span>with</span> open(filename, <span>'wb'</span>) <span>as</span> file:
        pickle.dump(an_object, file)
</code></pre></div>

<div><h2 id="csv"><a href="#csv" name="csv">#</a>CSV</h2><p><strong>Text file format for storing spreadsheets.</strong></p><pre><code><span>import</span> csv
</code></pre></div>


<div><h3 id="read">Read</h3><pre><code>&lt;reader&gt; = csv.reader(&lt;file&gt;)       <span># Also: `dialect='excel', delimiter=','`.</span>
&lt;list&gt;   = next(&lt;reader&gt;)           <span># Returns next row as a list of strings.</span>
&lt;list&gt;   = list(&lt;reader&gt;)           <span># Returns a list of remaining rows.</span>
</code></pre></div>

<ul>
<li><strong>File must be opened with a <code><span>'newline=""'</span></code> argument, or newlines embedded inside quoted fields will not be interpreted correctly!</strong></li>
<li><strong>To print the spreadsheet to the console use <a href="#table">Tabulate</a> library.</strong></li>
<li><strong>For XML and binary Excel files (xlsx, xlsm and xlsb) use <a href="#dataframeplotencodedecode">Pandas</a> library.</strong></li>
<li><strong>Reader accepts any iterator of strings, not just files.</strong></li>
</ul>
<div><h3 id="write">Write</h3><pre><code>&lt;writer&gt; = csv.writer(&lt;file&gt;)       <span># Also: `dialect='excel', delimiter=','`.</span>
&lt;writer&gt;.writerow(&lt;collection&gt;)     <span># Encodes objects using `str(&lt;el&gt;)`.</span>
&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)  <span># Appends multiple rows.</span>
</code></pre></div>

<ul>
<li><strong>File must be opened with a <code><span>'newline=""'</span></code> argument, or '\r' will be added in front of every '\n' on platforms that use '\r\n' line endings!</strong></li>
</ul>
<div><h3 id="parameters">Parameters</h3><ul>
<li><strong><code><span>'dialect'</span></code> - Master parameter that sets the default values. String or a 'csv.Dialect' object.</strong></li>
<li><strong><code><span>'delimiter'</span></code> - A one-character string used to separate fields.</strong></li>
<li><strong><code><span>'quotechar'</span></code> - Character for quoting fields that contain special characters.</strong></li>
<li><strong><code><span>'doublequote'</span></code> - Whether quotechars inside fields are/get doubled or escaped.</strong></li>
<li><strong><code><span>'skipinitialspace'</span></code> - Is space character at the start of the field stripped by the reader.</strong></li>
<li><strong><code><span>'lineterminator'</span></code> - How writer terminates rows. Reader is hardcoded to '\n', '\r', '\r\n'.</strong></li>
<li><strong><code><span>'quoting'</span></code> - 0: As necessary, 1: All, 2: All but numbers which are read as floats, 3: None.</strong></li>
<li><strong><code><span>'escapechar'</span></code> - Character for escaping quotechars if doublequote is False.</strong></li>
</ul><div><h3 id="dialects">Dialects</h3><pre><code>┏━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━┓
┃                  │     excel    │   excel-tab  │     unix     ┃
┠──────────────────┼──────────────┼──────────────┼──────────────┨
┃ delimiter        │       ','    │      '\t'    │       ','    ┃
┃ quotechar        │       '"'    │       '"'    │       '"'    ┃
┃ doublequote      │      True    │      True    │      True    ┃
┃ skipinitialspace │     False    │     False    │     False    ┃
┃ lineterminator   │    '\r\n'    │    '\r\n'    │      '\n'    ┃
┃ quoting          │         0    │         0    │         1    ┃
┃ escapechar       │      None    │      None    │      None    ┃
┗━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━┛
</code></pre></div></div>



<div><h3 id="readrowsfromcsvfile">Read Rows from CSV File</h3><pre><code><span><span>def</span> <span>read_csv_file</span><span>(filename, dialect=<span>'excel'</span>)</span>:</span>
    <span>with</span> open(filename, encoding=<span>'utf-8'</span>, newline=<span>''</span>) <span>as</span> file:
        <span>return</span> list(csv.reader(file, dialect))
</code></pre></div>

<div><h3 id="writerowstocsvfile">Write Rows to CSV File</h3><pre><code><span><span>def</span> <span>write_to_csv_file</span><span>(filename, rows, dialect=<span>'excel'</span>)</span>:</span>
    <span>with</span> open(filename, <span>'w'</span>, encoding=<span>'utf-8'</span>, newline=<span>''</span>) <span>as</span> file:
        writer = csv.writer(file, dialect)
        writer.writerows(rows)
</code></pre></div>

<div><h2 id="sqlite"><a href="#sqlite" name="sqlite">#</a>SQLite</h2><p><strong>A server-less database engine that stores each database into a separate file.</strong></p><pre><code><span>import</span> sqlite3
&lt;conn&gt; = sqlite3.connect(&lt;path&gt;)                <span># Opens existing or new file. Also ':memory:'.</span>
&lt;conn&gt;.close()                                  <span># Closes the connection.</span>
</code></pre></div>


<div><h3 id="read-1">Read</h3><pre><code>&lt;cursor&gt; = &lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>)            <span># Can raise a subclass of sqlite3.Error.</span>
&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                  <span># Returns next row. Also next(&lt;cursor&gt;).</span>
&lt;list&gt;   = &lt;cursor&gt;.fetchall()                  <span># Returns remaining rows. Also list(&lt;cursor&gt;).</span>
</code></pre></div>

<div><h3 id="write-1">Write</h3><pre><code>&lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>)                       <span># Can raise a subclass of sqlite3.Error.</span>
&lt;conn&gt;.commit()                                 <span># Saves all changes since the last commit.</span>
&lt;conn&gt;.rollback()                               <span># Discards all changes since the last commit.</span>
</code></pre></div>

<div><h4 id="or">Or:</h4><pre><code><span>with</span> &lt;conn&gt;:                                    <span># Exits the block with commit() or rollback(),</span>
    &lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>)                   <span># depending on whether any exception occurred.</span>
</code></pre></div>

<div><h3 id="placeholders">Placeholders</h3><pre><code>&lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>, &lt;list/tuple&gt;)         <span># Replaces '?'s in query with values.</span>
&lt;conn&gt;.execute(<span>'&lt;query&gt;'</span>, &lt;dict/namedtuple&gt;)    <span># Replaces ':&lt;key&gt;'s with values.</span>
&lt;conn&gt;.executemany(<span>'&lt;query&gt;'</span>, &lt;coll_of_above&gt;)  <span># Runs execute() multiple times.</span>
</code></pre></div>

<ul>
<li><strong>Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetime.</strong></li>
<li><strong>Bools will be stored and returned as ints and dates as <a href="#encode">ISO formatted strings</a>.</strong></li>
</ul>
<div><h3 id="example-1">Example</h3><p><strong>Values are not actually saved in this example because <code><span>'conn.commit()'</span></code> is omitted!</strong></p><pre><code><span>&gt;&gt;&gt; </span>conn = sqlite3.connect(<span>'test.db'</span>)
<span>&gt;&gt;&gt; </span>conn.execute(<span>'CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)'</span>)
<span>&gt;&gt;&gt; </span>conn.execute(<span>'INSERT INTO person VALUES (NULL, ?, ?)'</span>, (<span>'Jean-Luc'</span>, <span>187</span>)).lastrowid
<span>1</span>
<span>&gt;&gt;&gt; </span>conn.execute(<span>'SELECT * FROM person'</span>).fetchall()
[(<span>1</span>, <span>'Jean-Luc'</span>, <span>187</span>)]
</code></pre></div>


<div><h3 id="sqlalchemy">SqlAlchemy</h3><pre><code><span># $ pip3 install sqlalchemy</span>
<span>from</span> sqlalchemy <span>import</span> create_engine, text
&lt;engine&gt; = create_engine(<span>'&lt;url&gt;'</span>)               <span># Url: 'dialect://user:password@host/dbname'.</span>
&lt;conn&gt;   = &lt;engine&gt;.connect()                   <span># Creates a connection. Also &lt;conn&gt;.close().</span>
&lt;cursor&gt; = &lt;conn&gt;.execute(text(<span>'&lt;query&gt;'</span>), …)   <span># Replaces ':&lt;key&gt;'s with keyword arguments.</span>
<span>with</span> &lt;conn&gt;.begin(): ...                        <span># Exits the block with commit or rollback.</span>
</code></pre></div>

<pre><code>┏━━━━━━━━━━━━┯━━━━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Dialect    │ pip3 install │ import   │           Dependencies           ┃
┠────────────┼──────────────┼──────────┼──────────────────────────────────┨
┃ mysql      │ mysqlclient  │ MySQLdb  │ www.pypi.org/project/mysqlclient ┃
┃ postgresql │ psycopg2     │ psycopg2 │ www.pypi.org/project/psycopg2    ┃
┃ mssql      │ pyodbc       │ pyodbc   │ www.pypi.org/project/pyodbc      ┃
┃ oracle     │ oracledb     │ oracledb │ www.pypi.org/project/oracledb    ┃
┗━━━━━━━━━━━━┷━━━━━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
</code></pre>
<div><h2 id="bytes"><a href="#bytes" name="bytes">#</a>Bytes</h2><p><strong>Bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.</strong></p><pre><code>&lt;bytes&gt; = <span>b'&lt;str&gt;'</span>                          <span># Only accepts ASCII characters and \x00-\xff.</span>
&lt;int&gt;   = &lt;bytes&gt;[&lt;index&gt;]                  <span># Returns an int in range from 0 to 255.</span>
&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]                  <span># Returns bytes even if it has only one element.</span>
&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)     <span># Joins elements using bytes as a separator.</span>
</code></pre></div>


<div><h3 id="encode-1">Encode</h3><pre><code>&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)             <span># Ints must be in range from 0 to 255.</span>
&lt;bytes&gt; = bytes(&lt;str&gt;, <span>'utf-8'</span>)             <span># Or: &lt;str&gt;.encode('utf-8')</span>
&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, …)        <span># `byteorder='big/little', signed=False`.</span>
&lt;bytes&gt; = bytes.fromhex(<span>'&lt;hex&gt;'</span>)            <span># Hex pairs can be separated by whitespaces.</span>
</code></pre></div>

<div><h3 id="decode-1">Decode</h3><pre><code>&lt;list&gt;  = list(&lt;bytes&gt;)                     <span># Returns ints in range from 0 to 255.</span>
&lt;str&gt;   = str(&lt;bytes&gt;, <span>'utf-8'</span>)             <span># Or: &lt;bytes&gt;.decode('utf-8')</span>
&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, …)        <span># `byteorder='big/little', signed=False`.</span>
<span>'&lt;hex&gt;'</span> = &lt;bytes&gt;.hex()                     <span># Returns hex pairs. Accepts `sep=&lt;str&gt;`.</span>
</code></pre></div>

<div><h3 id="readbytesfromfile">Read Bytes from File</h3><pre><code><span><span>def</span> <span>read_bytes</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, <span>'rb'</span>) <span>as</span> file:
        <span>return</span> file.read()
</code></pre></div>

<div><h3 id="writebytestofile">Write Bytes to File</h3><pre><code><span><span>def</span> <span>write_bytes</span><span>(filename, bytes_obj)</span>:</span>
    <span>with</span> open(filename, <span>'wb'</span>) <span>as</span> file:
        file.write(bytes_obj)
</code></pre></div>

<div><h2 id="struct"><a href="#struct" name="struct">#</a>Struct</h2><ul>
<li><strong>Module that performs conversions between a sequence of numbers and a bytes object.</strong></li>
<li><strong>System’s type sizes, byte order, and alignment rules are used by default.</strong></li>
</ul><pre><code><span>from</span> struct <span>import</span> pack, unpack
&lt;bytes&gt; = pack(<span>'&lt;format&gt;'</span>, &lt;el_1&gt; [, ...])  <span># Packages arguments or raises struct.error.</span>
&lt;tuple&gt; = unpack(<span>'&lt;format&gt;'</span>, &lt;bytes&gt;)       <span># Use iter_unpack() for iterator of tuples.</span>
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>pack(<span>'&gt;hhl'</span>, <span>1</span>, <span>2</span>, <span>3</span>)
<span>b'\x00\x01\x00\x02\x00\x00\x00\x03'</span>
<span>&gt;&gt;&gt; </span>unpack(<span>'&gt;hhl'</span>, <span>b'\x00\x01\x00\x02\x00\x00\x00\x03'</span>)
(<span>1</span>, <span>2</span>, <span>3</span>)
</code></pre>
<h3 id="format-2">Format</h3><div><h4 id="forstandardtypesizesandmanualalignmentpaddingstartformatstringwith">For standard type sizes and manual alignment (padding) start format string with:</h4><ul>
<li><strong><code><span>'='</span></code> - System's byte order (usually little-endian).</strong></li>
<li><strong><code><span>'&lt;'</span></code> - Little-endian.</strong></li>
<li><strong><code><span>'&gt;'</span></code> - Big-endian (also <code><span>'!'</span></code>).</strong></li>
</ul><div><h4 id="besidesnumberspackandunpackalsosupportbytesobjectsaspartofthesequence">Besides numbers, pack() and unpack() also support bytes objects as part of the sequence:</h4><ul>
<li><strong><code><span>'c'</span></code> - A bytes object with a single element. For pad byte use <code><span>'x'</span></code>.</strong></li>
<li><strong><code><span>'&lt;n&gt;s'</span><span></span></code> - A bytes object with n elements.</strong></li>
</ul></div></div><div><div><h4 id="integertypesuseacapitalletterforunsignedtypeminimumandstandardsizesareinbrackets">Integer types. Use a capital letter for unsigned type. Minimum and standard sizes are in brackets:</h4><ul>
<li><strong><code><span>'b'</span></code> - char (1/1)</strong></li>
<li><strong><code><span>'h'</span></code> - short (2/2)</strong></li>
<li><strong><code><span>'i'</span></code> - int (2/4)</strong></li>
<li><strong><code><span>'l'</span></code> - long (4/4)</strong></li>
<li><strong><code><span>'q'</span></code> - long long (8/8)</strong></li>
</ul></div><div><h4 id="floatingpointtypes">Floating point types:</h4><ul>
<li><strong><code><span>'f'</span></code> - float (4/4)</strong></li>
<li><strong><code><span>'d'</span></code> - double (8/8)</strong></li>
</ul></div></div>








<div><h2 id="array"><a href="#array" name="array">#</a>Array</h2><p><strong>List that can only hold numbers of a predefined type. Available types and their minimum sizes in bytes are listed above. Sizes and byte order are always determined by the system, however bytes of each element can be swapped with byteswap() method.</strong></p><pre><code><span>from</span> array <span>import</span> array
&lt;array&gt; = array(<span>'&lt;typecode&gt;'</span>, &lt;collection&gt;)    <span># Array from collection of numbers.</span>
&lt;array&gt; = array(<span>'&lt;typecode&gt;'</span>, &lt;bytes&gt;)         <span># Array from bytes object.</span>
&lt;array&gt; = array(<span>'&lt;typecode&gt;'</span>, &lt;array&gt;)         <span># Treats array as a sequence of numbers.</span>
&lt;bytes&gt; = bytes(&lt;array&gt;)                       <span># Or: &lt;array&gt;.tobytes()</span>
&lt;file&gt;.write(&lt;array&gt;)                          <span># Writes array to the binary file.</span>
</code></pre></div>


<div><h2 id="memoryview"><a href="#memoryview" name="memoryview">#</a>Memory View</h2><ul>
<li><strong>A sequence object that points to the memory of another object.</strong></li>
<li><strong>Each element can reference a single or multiple consecutive bytes, depending on format.</strong></li>
<li><strong>Order and number of elements can be changed with slicing.</strong></li>
<li><strong>Casting only works between char and other types and uses system's sizes.</strong></li>
<li><strong>Byte order is always determined by the system.</strong></li>
</ul><pre><code>&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  <span># Immutable if bytes, else mutable.</span>
&lt;real&gt;  = &lt;mview&gt;[&lt;index&gt;]                     <span># Returns an int or a float.</span>
&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     <span># Mview with rearranged elements.</span>
&lt;mview&gt; = &lt;mview&gt;.cast(<span>'&lt;typecode&gt;'</span>)           <span># Casts memoryview to the new format.</span>
&lt;mview&gt;.release()                              <span># Releases the object's memory buffer.</span>
</code></pre></div>


<pre><code>&lt;bytes&gt; = bytes(&lt;mview&gt;)                       <span># Returns a new bytes object.</span>
&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       <span># Joins mviews using bytes object as sep.</span>
&lt;array&gt; = array(<span>'&lt;typecode&gt;'</span>, &lt;mview&gt;)         <span># Treats mview as a sequence of numbers.</span>
&lt;file&gt;.write(&lt;mview&gt;)                          <span># Writes mview to the binary file.</span>
</code></pre>
<pre><code>&lt;list&gt;  = list(&lt;mview&gt;)                        <span># Returns a list of ints or floats.</span>
&lt;str&gt;   = str(&lt;mview&gt;, <span>'utf-8'</span>)                <span># Treats mview as a bytes object.</span>
&lt;int&gt;   = int.from_bytes(&lt;mview&gt;, …)           <span># `byteorder='big/little', signed=False`.</span>
<span>'&lt;hex&gt;'</span> = &lt;mview&gt;.hex()                        <span># Treats mview as a bytes object.</span>
</code></pre>
<div><h2 id="deque"><a href="#deque" name="deque">#</a>Deque</h2><p><strong>A thread-safe list with efficient appends and pops from either side. Pronounced "deck".</strong></p><pre><code><span>from</span> collections <span>import</span> deque
&lt;deque&gt; = deque(&lt;collection&gt;, maxlen=<span>None</span>)
</code></pre></div>


<pre><code>&lt;deque&gt;.appendleft(&lt;el&gt;)                       <span># Opposite element is dropped if full.</span>
&lt;deque&gt;.extendleft(&lt;collection&gt;)               <span># Collection gets reversed.</span>
&lt;el&gt; = &lt;deque&gt;.popleft()                       <span># Raises IndexError if empty.</span>
&lt;deque&gt;.rotate(n=<span>1</span>)                            <span># Rotates elements to the right.</span>
</code></pre>
<div><h2 id="threading"><a href="#threading" name="threading">#</a>Threading</h2><ul>
<li><strong>CPython interpreter can only run a single thread at a time.</strong></li>
<li><strong>That is why using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation.</strong></li>
</ul><pre><code><span>from</span> threading <span>import</span> Thread, RLock, Semaphore, Event, Barrier
<span>from</span> concurrent.futures <span>import</span> ThreadPoolExecutor, as_completed
</code></pre></div>


<div><h3 id="thread">Thread</h3><pre><code>&lt;Thread&gt; = Thread(target=&lt;function&gt;)           <span># Use `args=&lt;collection&gt;` to set the arguments.</span>
&lt;Thread&gt;.start()                               <span># Starts the thread.</span>
&lt;bool&gt; = &lt;Thread&gt;.is_alive()                   <span># Checks if the thread has finished executing.</span>
&lt;Thread&gt;.join()                                <span># Waits for the thread to finish.</span>
</code></pre></div>

<ul>
<li><strong>Use <code><span>'kwargs=&lt;dict&gt;'</span></code> to pass keyword arguments to the function.</strong></li>
<li><strong>Use <code><span>'daemon=True'</span></code>, or the program will not be able to exit while the thread is alive.</strong></li>
</ul>
<div><h3 id="lock">Lock</h3><pre><code>&lt;lock&gt; = RLock()                               <span># Lock that can only be released by acquirer.</span>
&lt;lock&gt;.acquire()                               <span># Waits for the lock to be available.</span>
&lt;lock&gt;.release()                               <span># Makes the lock available again.</span>
</code></pre></div>

<div><h4 id="or-1">Or:</h4><pre><code><span>with</span> &lt;lock&gt;:                                   <span># Enters the block by calling acquire() and</span>
    ...                                        <span># exits it with release(), even on error.</span>
</code></pre></div>

<div><h3 id="semaphoreeventbarrier">Semaphore, Event, Barrier</h3><pre><code>&lt;Semaphore&gt; = Semaphore(value=<span>1</span>)               <span># Lock that can be acquired by 'value' threads.</span>
&lt;Event&gt;     = Event()                          <span># Method wait() blocks until set() is called.</span>
&lt;Barrier&gt;   = Barrier(n_times)                 <span># Wait() blocks until it's called n_times.</span>
</code></pre></div>

<div><h3 id="queue">Queue</h3><pre><code>&lt;Queue&gt; = queue.Queue(maxsize=<span>0</span>)               <span># A thread-safe FIFO queue. Also LifoQueue.</span>
&lt;Queue&gt;.put(&lt;el&gt;)                              <span># Blocks until queue stops being full.</span>
&lt;Queue&gt;.put_nowait(&lt;el&gt;)                       <span># Raises queue.Full exception if full.</span>
&lt;el&gt; = &lt;Queue&gt;.get()                           <span># Blocks until queue stops being empty.</span>
&lt;el&gt; = &lt;Queue&gt;.get_nowait()                    <span># Raises queue.Empty exception if empty.</span>
</code></pre></div>

<div><h3 id="threadpoolexecutor">Thread Pool Executor</h3><pre><code>&lt;Exec&gt; = ThreadPoolExecutor(max_workers=<span>None</span>)  <span># Or: `with ThreadPoolExecutor() as &lt;name&gt;: …`</span>
&lt;iter&gt; = &lt;Exec&gt;.map(&lt;func&gt;, &lt;args_1&gt;, ...)     <span># Multithreaded and non-lazy map(). Keeps order.</span>
&lt;Futr&gt; = &lt;Exec&gt;.submit(&lt;func&gt;, &lt;arg_1&gt;, ...)   <span># Creates a thread and returns its Future obj.</span>
&lt;Exec&gt;.shutdown(wait=<span>True</span>)                     <span># Blocks until all threads finish executing.</span>
</code></pre></div>

<pre><code>&lt;bool&gt; = &lt;Future&gt;.done()                       <span># Checks if the thread has finished executing.</span>
&lt;obj&gt;  = &lt;Future&gt;.result(timeout=<span>None</span>)         <span># Waits for thread to finish and returns result.</span>
&lt;bool&gt; = &lt;Future&gt;.cancel()                     <span># Returns False if thread is already running.</span>
&lt;iter&gt; = as_completed(&lt;coll_of_Futures&gt;)       <span># Each Future is yielded as it completes.</span>
</code></pre>
<ul>
<li><strong>Map() and as_completed() also accept 'timeout' argument that causes TimeoutError if result isn't available in 'timeout' seconds after next() is called.</strong></li>
<li><strong>Exceptions that happen inside threads are raised when next() is called on map's iterator or when result() is called on a Future. Its exception() method returns exception or None.</strong></li>
<li><strong>An object with the same interface called ProcessPoolExecutor provides true parallelism by running a separate interpreter in each process. Arguments/results must be <a href="#pickle">pickable</a>.</strong></li>
</ul>
<div><h2 id="operator"><a href="#operator" name="operator">#</a>Operator</h2><p><strong>Module of functions that provide the functionality of operators.</strong></p><pre><code><span>import</span> operator <span>as</span> op
&lt;obj&gt;     = op.add/sub/mul/truediv/floordiv/mod(&lt;obj&gt;, &lt;obj&gt;)     <span># +, -, *, /, //, %</span>
&lt;int/set&gt; = op.and_/or_/xor(&lt;int/set&gt;, &lt;int/set&gt;)                 <span># &amp;, |, ^</span>
&lt;bool&gt;    = op.eq/ne/lt/le/gt/ge(&lt;sortable&gt;, &lt;sortable&gt;)          <span># ==, !=, &lt;, &lt;=, &gt;, &gt;=</span>
&lt;func&gt;    = op.itemgetter/attrgetter/methodcaller(&lt;obj&gt; [, ...])  <span># [index/key], .name, .name()</span>
</code></pre></div>


<pre><code>elementwise_sum  = map(op.add, list_a, list_b)
sorted_by_second = sorted(&lt;collection&gt;, key=op.itemgetter(<span>1</span>))
sorted_by_both   = sorted(&lt;collection&gt;, key=op.itemgetter(<span>1</span>, <span>0</span>))
product_of_elems = functools.reduce(op.mul, &lt;collection&gt;)
union_of_sets    = functools.reduce(op.or_, &lt;coll_of_sets&gt;)
first_element    = op.methodcaller(<span>'pop'</span>, <span>0</span>)(&lt;list&gt;)
</code></pre>
<ul>
<li><strong>Binary operators require objects to have and(), or(), xor() and invert() special methods, unlike logical operators that work on all types of objects.</strong></li>
<li><strong>Also: <code><span>'&lt;bool&gt; = &lt;bool&gt; &amp;|^ &lt;bool&gt;'</span></code> and <code><span>'&lt;int&gt; = &lt;bool&gt; &amp;|^ &lt;int&gt;'</span></code>.</strong></li>
</ul>
<div><h2 id="introspection"><a href="#introspection" name="introspection">#</a>Introspection</h2><p><strong>Inspecting code at runtime.</strong></p><div><h3 id="variables">Variables</h3><pre><code>&lt;list&gt; = dir()                             <span># Names of local variables (incl. functions).</span>
&lt;dict&gt; = vars()                            <span># Dict of local variables. Also locals().</span>
&lt;dict&gt; = globals()                         <span># Dict of global variables.</span>
</code></pre></div></div>



<div><h3 id="attributes">Attributes</h3><pre><code>&lt;list&gt; = dir(&lt;object&gt;)                     <span># Names of object's attributes (incl. methods).</span>
&lt;dict&gt; = vars(&lt;object&gt;)                    <span># Dict of writable attributes. Also &lt;obj&gt;.__dict__.</span>
&lt;bool&gt; = hasattr(&lt;object&gt;, <span>'&lt;attr_name&gt;'</span>)  <span># Checks if getattr() raises an AttributeError.</span>
value  = getattr(&lt;object&gt;, <span>'&lt;attr_name&gt;'</span>)  <span># Raises AttributeError if attribute is missing.</span>
setattr(&lt;object&gt;, <span>'&lt;attr_name&gt;'</span>, value)    <span># Only works on objects with '__dict__' attribute.</span>
delattr(&lt;object&gt;, <span>'&lt;attr_name&gt;'</span>)           <span># Same. Also `del &lt;object&gt;.&lt;attr_name&gt;`.</span>
</code></pre></div>

<div><h3 id="parameters-1">Parameters</h3><pre><code>&lt;Sig&gt;  = inspect.signature(&lt;function&gt;)     <span># Function's Signature object.</span>
&lt;dict&gt; = &lt;Sig&gt;.parameters                  <span># Dict of Parameter objects.</span>
&lt;memb&gt; = &lt;Param&gt;.kind                      <span># Member of ParameterKind enum.</span>
&lt;obj&gt;  = &lt;Param&gt;.default                   <span># Default value or Parameter.empty.</span>
&lt;type&gt; = &lt;Param&gt;.annotation                <span># Type or Parameter.empty.</span>
</code></pre></div>

<div><p><strong>Code that generates code.</strong></p><div><h3 id="type-1">Type</h3><p><strong>Type is the root class. If only passed an object it returns its type (class). Otherwise it creates a new class.</strong></p><pre><code>&lt;class&gt; = type(<span>'&lt;class_name&gt;'</span>, &lt;tuple_of_parents&gt;, &lt;dict_of_class_attributes&gt;)</code></pre></div></div>




<pre><code><span>&gt;&gt;&gt; </span>Z = type(<span>'Z'</span>, (), {<span>'a'</span>: <span>'abcde'</span>, <span>'b'</span>: <span>12345</span>})
<span>&gt;&gt;&gt; </span>z = Z()
</code></pre>
<div><h3 id="metaclass">Meta Class</h3><p><strong>A class that creates classes.</strong></p><pre><code><span><span>def</span> <span>my_meta_class</span><span>(name, parents, attrs)</span>:</span>
    attrs[<span>'a'</span>] = <span>'abcde'</span>
    <span>return</span> type(name, parents, attrs)
</code></pre></div>


<div><h4 id="or-2">Or:</h4><pre><code><span><span>class</span> <span>MyMetaClass</span><span>(type)</span>:</span>
    <span><span>def</span> <span>__new__</span><span>(cls, name, parents, attrs)</span>:</span>
        attrs[<span>'a'</span>] = <span>'abcde'</span>
        <span>return</span> type.__new__(cls, name, parents, attrs)
</code></pre></div>

<ul>
<li><strong>New() is a class method that gets called before init(). If it returns an instance of its class, then that instance gets passed to init() as a 'self' argument.</strong></li>
<li><strong>It receives the same arguments as init(), except for the first one that specifies the desired type of the returned instance (MyMetaClass in our case).</strong></li>
<li><strong>Like in our case, new() can also be called directly, usually from a new() method of a child class (</strong><code><span><span>def</span> <span>__new__</span><span>(cls)</span>:</span> <span>return</span> super().__new__(cls)</code><strong>).</strong></li>
<li><strong>The only difference between the examples above is that my_meta_class() returns a class of type type, while MyMetaClass() returns a class of type MyMetaClass.</strong></li>
</ul>
<div><h3 id="metaclassattribute">Metaclass Attribute</h3><p><strong>Right before a class is created it checks if it has the 'metaclass' attribute defined. If not, it recursively checks if any of his parents has it defined and eventually comes to type().</strong></p><pre><code><span><span>class</span> <span>MyClass</span><span>(metaclass=MyMetaClass)</span>:</span>
    b = <span>12345</span>
</code></pre></div>


<pre><code><span>&gt;&gt;&gt; </span>MyClass.a, MyClass.b
(<span>'abcde'</span>, <span>12345</span>)
</code></pre>
<div><h3 id="typediagram">Type Diagram</h3><pre><code>type(MyClass) == MyMetaClass         <span># MyClass is an instance of MyMetaClass.</span>
type(MyMetaClass) == type            <span># MyMetaClass is an instance of type.</span>
</code></pre></div>

<pre><code>┏━━━━━━━━━━━━━┯━━━━━━━━━━━━━┓
┃   Classes   │ Metaclasses ┃
┠─────────────┼─────────────┨
┃   MyClass ←──╴MyMetaClass ┃
┃             │     ↑       ┃
┃    object ←─────╴type ←╮  ┃
┃             │     │ ╰──╯  ┃
┃     str ←─────────╯       ┃
┗━━━━━━━━━━━━━┷━━━━━━━━━━━━━┛
</code></pre>
<div><h3 id="inheritancediagram">Inheritance Diagram</h3><pre><code>MyClass.__base__ == object           <span># MyClass is a subclass of object.</span>
MyMetaClass.__base__ == type         <span># MyMetaClass is a subclass of type.</span>
</code></pre></div>

<pre><code>┏━━━━━━━━━━━━━┯━━━━━━━━━━━━━┓
┃   Classes   │ Metaclasses ┃
┠─────────────┼─────────────┨
┃   MyClass   │ MyMetaClass ┃
┃      ↑      │     ↑       ┃
┃    object╶─────→ type     ┃
┃      ↓      │             ┃
┃     str     │             ┃
┗━━━━━━━━━━━━━┷━━━━━━━━━━━━━┛
</code></pre>
<div><h2 id="eval"><a href="#eval" name="eval">#</a>Eval</h2><pre><code><span>&gt;&gt;&gt; </span><span>from</span> ast <span>import</span> literal_eval
<span>&gt;&gt;&gt; </span>literal_eval(<span>'[1, 2, 3]'</span>)
[<span>1</span>, <span>2</span>, <span>3</span>]
<span>&gt;&gt;&gt; </span>literal_eval(<span>'1 + 2'</span>)
ValueError: malformed node or string
</code></pre></div>

<div><h2 id="coroutines"><a href="#coroutines" name="coroutines">#</a>Coroutines</h2><ul>
<li><strong>Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don’t use as much memory.</strong></li>
<li><strong>Coroutine definition starts with <code><span>'async'</span></code> and its call with <code><span>'await'</span></code>.</strong></li>
<li><strong><code><span>'asyncio.run(&lt;coroutine&gt;)'</span></code> is the main entry point for asynchronous programs.</strong></li>
<li><strong>Functions wait(), gather() and as_completed() start multiple coroutines at the same time.</strong></li>
<li><strong>Asyncio module also provides its own <a href="#queue">Queue</a>, <a href="#semaphoreeventbarrier">Event</a>, <a href="#lock">Lock</a> and <a href="#semaphoreeventbarrier">Semaphore</a> classes.</strong></li>
</ul><div><h4 id="runsaterminalgamewhereyoucontrolanasteriskthatmustavoidnumbers">Runs a terminal game where you control an asterisk that must avoid numbers:</h4><pre><code><span>import</span> asyncio, collections, curses, curses.textpad, enum, random

P = collections.namedtuple(<span>'P'</span>, <span>'x y'</span>)         <span># Position</span>
D = enum.Enum(<span>'D'</span>, <span>'n e s w'</span>)                  <span># Direction</span>
W, H = <span>15</span>, <span>7</span>                                   <span># Width, Height</span>

<span><span>def</span> <span>main</span><span>(screen)</span>:</span>
    curses.curs_set(<span>0</span>)                         <span># Makes cursor invisible.</span>
    screen.nodelay(<span>True</span>)                       <span># Makes getch() non-blocking.</span>
    asyncio.run(main_coroutine(screen))        <span># Starts running asyncio code.</span>

<span>async</span> <span><span>def</span> <span>main_coroutine</span><span>(screen)</span>:</span>
    moves = asyncio.Queue()
    state = {<span>'*'</span>: P(<span>0</span>, <span>0</span>), **{id_: P(W//<span>2</span>, H//<span>2</span>) <span>for</span> id_ <span>in</span> range(<span>10</span>)}}
    ai    = [random_controller(id_, moves) <span>for</span> id_ <span>in</span> range(<span>10</span>)]
    mvc   = [human_controller(screen, moves), model(moves, state), view(state, screen)]
    tasks = [asyncio.create_task(cor) <span>for</span> cor <span>in</span> ai + mvc]
    <span>await</span> asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

<span>async</span> <span><span>def</span> <span>random_controller</span><span>(id_, moves)</span>:</span>
    <span>while</span> <span>True</span>:
        d = random.choice(list(D))
        moves.put_nowait((id_, d))
        <span>await</span> asyncio.sleep(random.triangular(<span>0.01</span>, <span>0.65</span>))

<span>async</span> <span><span>def</span> <span>human_controller</span><span>(screen, moves)</span>:</span>
    <span>while</span> <span>True</span>:
        key_mappings = {<span>258</span>: D.s, <span>259</span>: D.n, <span>260</span>: D.w, <span>261</span>: D.e}
        <span>if</span> d := key_mappings.get(screen.getch()):
            moves.put_nowait((<span>'*'</span>, d))
        <span>await</span> asyncio.sleep(<span>0.005</span>)

<span>async</span> <span><span>def</span> <span>model</span><span>(moves, state)</span>:</span>
    <span>while</span> state[<span>'*'</span>] <span>not</span> <span>in</span> (state[id_] <span>for</span> id_ <span>in</span> range(<span>10</span>)):
        id_, d = <span>await</span> moves.get()
        x, y   = state[id_]
        deltas = {D.n: P(<span>0</span>, <span>-1</span>), D.e: P(<span>1</span>, <span>0</span>), D.s: P(<span>0</span>, <span>1</span>), D.w: P(<span>-1</span>, <span>0</span>)}
        state[id_] = P((x + deltas[d].x) % W, (y + deltas[d].y) % H)

<span>async</span> <span><span>def</span> <span>view</span><span>(state, screen)</span>:</span>
    offset = P(curses.COLS//<span>2</span> - W//<span>2</span>, curses.LINES//<span>2</span> - H//<span>2</span>)
    <span>while</span> <span>True</span>:
        screen.erase()
        curses.textpad.rectangle(screen, offset.y-<span>1</span>, offset.x-<span>1</span>, offset.y+H, offset.x+W)
        <span>for</span> id_, p <span>in</span> state.items():
            screen.addstr(offset.y + (p.y - state[<span>'*'</span>].y + H//<span>2</span>) % H,
                          offset.x + (p.x - state[<span>'*'</span>].x + W//<span>2</span>) % W, str(id_))
        screen.refresh()
        <span>await</span> asyncio.sleep(<span>0.005</span>)

<span>if</span> __name__ == <span>'__main__'</span>:
    curses.wrapper(main)
</code></pre></div></div>




<div><h2 id="libraries">Libraries</h2><div><h2 id="progressbar"><a href="#progressbar" name="progressbar">#</a>Progress Bar</h2><pre><code><span># $ pip3 install tqdm</span>
<span>&gt;&gt;&gt; </span><span>from</span> tqdm <span>import</span> tqdm
<span>&gt;&gt;&gt; </span><span>from</span> time <span>import</span> sleep
<span>&gt;&gt;&gt; </span><span>for</span> el <span>in</span> tqdm([<span>1</span>, <span>2</span>, <span>3</span>], desc=<span>'Processing'</span>):
<span>... </span>    sleep(<span>1</span>)
Processing: 100%|████████████████████| 3/3 [00:03&lt;00:00,  1.00s/it]
</code></pre></div></div>


<div><h2 id="plot"><a href="#plot" name="plot">#</a>Plot</h2><pre><code><span># $ pip3 install matplotlib</span>
<span>import</span> matplotlib.pyplot <span>as</span> plt
plt.plot/bar/scatter(x_data, y_data [, label=&lt;str&gt;])  <span># Or: plt.plot(y_data)</span>
plt.legend()                                          <span># Adds a legend.</span>
plt.savefig(&lt;path&gt;)                                   <span># Saves the figure.</span>
plt.show()                                            <span># Displays the figure.</span>
plt.clf()                                             <span># Clears the figure.</span>
</code></pre></div>

<div><h2 id="table"><a href="#table" name="table">#</a>Table</h2><div><h4 id="printsacsvfileasanasciitable">Prints a CSV file as an ASCII table:</h4><pre><code><span># $ pip3 install tabulate</span>
<span>import</span> csv, tabulate
<span>with</span> open(<span>'test.csv'</span>, encoding=<span>'utf-8'</span>, newline=<span>''</span>) <span>as</span> file:
    rows   = csv.reader(file)
    header = next(rows)
    table  = tabulate.tabulate(rows, header)
print(table)
</code></pre></div></div>


<div><h2 id="curses"><a href="#curses" name="curses">#</a>Curses</h2><div><h4 id="runsabasicfileexplorerintheterminal">Runs a basic file explorer in the terminal:</h4><pre><code><span>import</span> curses, curses.ascii, os
<span>from</span> curses <span>import</span> A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER

<span><span>def</span> <span>main</span><span>(screen)</span>:</span>
    ch, first, selected, paths = <span>0</span>, <span>0</span>, <span>0</span>, os.listdir()
    <span>while</span> ch != curses.ascii.ESC:
        height, width = screen.getmaxyx()
        screen.erase()
        <span>for</span> y, filename <span>in</span> enumerate(paths[first : first+height]):
            color = A_REVERSE <span>if</span> filename == paths[selected] <span>else</span> <span>0</span>
            screen.addstr(y, <span>0</span>, filename[:width-<span>1</span>], color)
        ch = screen.getch()
        selected += (ch == KEY_DOWN) - (ch == KEY_UP)
        selected = max(<span>0</span>, min(len(paths)-<span>1</span>, selected))
        first += (selected &gt;= first + height) - (selected &lt; first)
        <span>if</span> ch <span>in</span> [KEY_LEFT, KEY_RIGHT, KEY_ENTER, ord(<span>'\n'</span>), ord(<span>'\r'</span>)]:
            new_dir = <span>'..'</span> <span>if</span> ch == KEY_LEFT <span>else</span> paths[selected]
            <span>if</span> os.path.isdir(new_dir):
                os.chdir(new_dir)
                first, selected, paths = <span>0</span>, <span>0</span>, os.listdir()

<span>if</span> __name__ == <span>'__main__'</span>:
    curses.wrapper(main)
</code></pre></div></div>




<pre><code>logging.basicConfig(filename=&lt;path&gt;)              <span># Configures the root logger.</span>
logging.debug/info/warning/error/critical(&lt;str&gt;)  <span># Logs to the root logger.</span>
&lt;Logger&gt; = logging.getLogger(__name__)            <span># Logger named after the module.</span>
&lt;Logger&gt;.&lt;level&gt;(&lt;str&gt;)                           <span># Messages propagate to the root logger.</span>
&lt;Logger&gt;.exception(&lt;str&gt;)                         <span># Calls error() with caught exception.</span>
</code></pre>
<div><h3 id="setup">Setup</h3><pre><code>logging.basicConfig(
    filename=<span>None</span>,                                <span># Logs to console by default.</span>
    format=<span>'%(levelname)s:%(name)s:%(message)s'</span>,  <span># Add `%(asctime)s` for datetime.</span>
    level=logging.WARNING,                        <span># Drops messages with lower priority.</span>
    handlers=[logging.StreamHandler()]            <span># Uses FileHandler if filename is set.</span>
)
</code></pre></div>

<pre><code>&lt;Formatter&gt; = logging.Formatter(<span>'&lt;format&gt;'</span>)       <span># Creates a Formatter.</span>
&lt;Handler&gt; = logging.FileHandler(&lt;path&gt;)           <span># Creates a Handler.</span>
&lt;Handler&gt;.setFormatter(&lt;Formatter&gt;)               <span># Adds Formatter to the Handler.</span>
&lt;Handler&gt;.setLevel(&lt;int/str&gt;)                     <span># Processes all messages by default.</span>
&lt;Logger&gt;.addHandler(&lt;Handler&gt;)                    <span># Adds Handler to the Logger.</span>
&lt;Logger&gt;.setLevel(&lt;int/str&gt;)                      <span># What is sent to handlers and parent.</span>
</code></pre>
<ul>
<li><strong>Parent logger can be specified by naming the child logger <code><span>'&lt;parent&gt;.&lt;name&gt;'</span></code>.</strong></li>
<li><strong>Formatter also supports: pathname, filename, funcName, lineno, thread and process.</strong></li>
<li><strong>A <code><span>'handlers.RotatingFileHandler'</span></code> creates and deletes log files based on 'maxBytes' and 'backupCount' arguments.</strong></li>
</ul>
<div><h4 id="createsaloggerthatwritesallmessagestoafileandsendsthemtotherootloggerthatprintstostdout">Creates a logger that writes all messages to a file and sends them to the root logger that prints to stdout:</h4><pre><code><span>&gt;&gt;&gt; </span>logging.basicConfig(level=<span>'WARNING'</span>)
<span>&gt;&gt;&gt; </span>logger = logging.getLogger(<span>'my_module'</span>)
<span>&gt;&gt;&gt; </span>handler = logging.FileHandler(<span>'test.log'</span>)
<span>&gt;&gt;&gt; </span>formatter = logging.Formatter(<span>'%(asctime)s %(levelname)s:%(name)s:%(message)s'</span>)
<span>&gt;&gt;&gt; </span>handler.setFormatter(formatter)
<span>&gt;&gt;&gt; </span>logger.addHandler(handler)
<span>&gt;&gt;&gt; </span>logger.critical(<span>'Running out of disk space.'</span>)
CRITICAL:my_module:Running out of disk space.
<span>&gt;&gt;&gt; </span>print(open(<span>'test.log'</span>).read())
2023-02-07 23:21:01,430 CRITICAL:my_module:Running out of disk space.
</code></pre></div>

<div><h2 id="scraping"><a href="#scraping" name="scraping">#</a>Scraping</h2><div><h4 id="scrapespythonsurlversionnumberandlogofromitswikipediapage">Scrapes Python's URL, version number and logo from its Wikipedia page:</h4><pre><code><span># $ pip3 install requests beautifulsoup4</span>
<span>import</span> requests, bs4, os, sys

WIKI_URL = <span>'https://en.wikipedia.org/wiki/Python_(programming_language)'</span>
<span>try</span>:
    html       = requests.get(WIKI_URL).text
    document   = bs4.BeautifulSoup(html, <span>'html.parser'</span>)
    table      = document.find(<span>'table'</span>, class_=<span>'infobox vevent'</span>)
    python_url = table.find(<span>'th'</span>, text=<span>'Website'</span>).next_sibling.a[<span>'href'</span>]
    version    = table.find(<span>'th'</span>, text=<span>'Stable release'</span>).next_sibling.strings.__next__()
    logo_url   = table.find(<span>'img'</span>)[<span>'src'</span>]
    logo       = requests.get(<span>f'https:<span>{logo_url}</span>'</span>).content
    filename   = os.path.basename(logo_url)
    <span>with</span> open(filename, <span>'wb'</span>) <span>as</span> file:
        file.write(logo)
    print(<span>f'<span>{python_url}</span>, <span>{version}</span>, file://<span>{os.path.abspath(filename)}</span>'</span>)
<span>except</span> requests.exceptions.ConnectionError:
    print(<span>"You've got problems with connection."</span>, file=sys.stderr)
</code></pre></div></div>


<div><h2 id="web"><a href="#web" name="web">#</a>Web</h2><p><strong>Flask is a micro web framework/server. If you just want to open a html file in a web browser use <code><span>'webbrowser.open(&lt;path&gt;)'</span></code> instead.</strong></p><pre><code><span># $ pip3 install flask</span>
<span>from</span> flask <span>import</span> Flask, send_from_directory, render_template_string, request
</code></pre></div>


<pre><code>app = Flask(__name__)
app.run(host=<span>None</span>, debug=<span>None</span>)
</code></pre>
<ul>
<li><strong>Starts the app at <code><span>'http://localhost:5000'</span></code>. Use <code><span>'host="0.0.0.0"'</span></code> to run externally.</strong></li>
<li><strong>Install a WSGI server like <a href="https://flask.palletsprojects.com/en/latest/deploying/waitress/">Waitress</a> and a HTTP server such as <a href="https://flask.palletsprojects.com/en/latest/deploying/nginx/">Nginx</a> for better security.</strong></li>
<li><strong>Debug mode restarts the app whenever script changes and displays errors in the browser.</strong></li>
</ul>
<div><h3 id="staticrequest">Static Request</h3><pre><code><span>@app.route('/img/&lt;path:filename&gt;')</span>
<span><span>def</span> <span>serve_file</span><span>(filename)</span>:</span>
    <span>return</span> send_from_directory(<span>'dirname/'</span>, filename)
</code></pre></div>

<div><h3 id="dynamicrequest">Dynamic Request</h3><pre><code><span>@app.route('/&lt;sport&gt;')</span>
<span><span>def</span> <span>serve_html</span><span>(sport)</span>:</span>
    <span>return</span> render_template_string(<span>'&lt;h1&gt;{{title}}&lt;/h1&gt;'</span>, title=sport)
</code></pre></div>

<ul>
<li><strong>To return an error code use <code><span>'abort(&lt;int&gt;)'</span></code> and to redirect use <code><span>'redirect(&lt;url&gt;)'</span></code>.</strong></li>
<li><strong><code><span>'request.args[&lt;str&gt;]'</span></code> returns parameter from the query string (URL part after '?').</strong></li>
<li><strong>Use <code><span>'session[key] = value'</span></code> to store session data like username, etc.</strong></li>
</ul>
<div><h3 id="restrequest">REST Request</h3><pre><code><span>@app.post('/&lt;sport&gt;/odds')</span>
<span><span>def</span> <span>serve_json</span><span>(sport)</span>:</span>
    team = request.form[<span>'team'</span>]
    <span>return</span> {<span>'team'</span>: team, <span>'odds'</span>: [<span>2.09</span>, <span>3.74</span>, <span>3.68</span>]}
</code></pre></div>

<div><h4 id="startstheappinitsownthreadandqueriesitwithapostrequest">Starts the app in its own thread and queries it with a post request:</h4><pre><code><span># $ pip3 install requests</span>
<span>&gt;&gt;&gt; </span><span>import</span> threading, requests
<span>&gt;&gt;&gt; </span>threading.Thread(target=app.run, daemon=<span>True</span>).start()
<span>&gt;&gt;&gt; </span>url = <span>'http://localhost:5000/football/odds'</span>
<span>&gt;&gt;&gt; </span>request_data = {<span>'team'</span>: <span>'arsenal f.c.'</span>}
<span>&gt;&gt;&gt; </span>response = requests.post(url, data=request_data)
<span>&gt;&gt;&gt; </span>response.json()
{<span>'team'</span>: <span>'arsenal f.c.'</span>, <span>'odds'</span>: [<span>2.09</span>, <span>3.74</span>, <span>3.68</span>]}
</code></pre></div>

<div><h2 id="profiling"><a href="#profiling" name="profiling">#</a>Profiling</h2><pre><code><span>from</span> time <span>import</span> perf_counter
start_time = perf_counter()
...
duration_in_seconds = perf_counter() - start_time
</code></pre></div>

<div><h3 id="timingasnippet">Timing a Snippet</h3><pre><code><span>&gt;&gt;&gt; </span><span>from</span> timeit <span>import</span> timeit
<span>&gt;&gt;&gt; </span>timeit(<span>'list(range(10000))'</span>, number=<span>1000</span>, globals=globals(), setup=<span>'pass'</span>)
<span>0.19373</span>
</code></pre></div>

<div><h3 id="profilingbyline">Profiling by Line</h3><pre><code>$ pip3 install line_profiler
$ echo "@profile
def main():
    a = list(range(10000))
    b = set(range(10000))
main()" &gt; test.py
$ kernprof -lv test.py
Line #   Hits     Time  Per Hit   % Time  Line Contents
=======================================================
     1                                    @profile
     2                                    def main():
     3      1    219.0    219.0     31.1      a = list(range(10000))
     4      1    487.0    487.0     68.9      b = set(range(10000))
</code></pre></div>

<div><h3 id="callandflamegraphs">Call and Flame Graphs</h3><pre><code>$ pip3 install gprof2dot snakeviz; apt/brew install graphviz
$ tail -n 4 test.py &gt; test.py
$ python3 -m cProfile -o test.prof test.py
$ gprof2dot -f pstats test.prof | dot -Tpng -o test.png; xdg-open/open test.png
$ snakeviz test.prof
</code></pre></div>

<div><h3 id="samplingandmemoryprofilers">Sampling and Memory Profilers</h3><pre><code>┏━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━┓
┃ pip3 install │          How to run           │   Target   │   Type   │ Live ┃
┠──────────────┼───────────────────────────────┼────────────┼──────────┼──────┨
┃ py-spy       │ py-spy top -- python3 test.py │    CPU     │ Sampling │ Yes  ┃
┃ pyinstrument │ pyinstrument test.py          │    CPU     │ Sampling │ No   ┃
┃ scalene      │ scalene test.py               │ CPU+Memory │ Sampling │ No   ┃
┃ memray       │ memray run --live test.py     │   Memory   │ Tracing  │ Yes  ┃
┃ filprofiler  │ fil-profile run test.py       │   Memory   │ Tracing  │ No   ┃
┗━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━┛
</code></pre></div>

<div><h2 id="numpy"><a href="#numpy" name="numpy">#</a>NumPy</h2><p><strong>Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code. An even faster alternative that runs on a GPU is called CuPy.</strong></p><pre><code><span># $ pip3 install numpy</span>
<span>import</span> numpy <span>as</span> np
</code></pre></div>


<pre><code>&lt;array&gt; = np.array(&lt;list/list_of_lists&gt;)                <span># Returns a 1d/2d NumPy array.</span>
&lt;array&gt; = np.zeros/ones(&lt;shape&gt;)                        <span># Also np.full(&lt;shape&gt;, &lt;el&gt;).</span>
&lt;array&gt; = np.arange(from_inc, to_exc, ±step)            <span># Also np.linspace(start, stop, len).</span>
&lt;array&gt; = np.random.randint(from_inc, to_exc, &lt;shape&gt;)  <span># Also np.random.random(&lt;shape&gt;).</span>
</code></pre>
<pre><code>&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)                      <span># Also `&lt;array&gt;.shape = &lt;shape&gt;`.</span>
&lt;array&gt; = &lt;array&gt;.flatten()                             <span># Also `&lt;view&gt; = &lt;array&gt;.ravel()`.</span>
&lt;view&gt;  = &lt;array&gt;.transpose()                           <span># Or: &lt;array&gt;.T</span>
</code></pre>
<pre><code>&lt;array&gt; = np.copy/abs/sqrt/log/int64(&lt;array&gt;)           <span># Returns new array of the same shape.</span>
&lt;array&gt; = &lt;array&gt;.sum/max/mean/argmax/all(axis)         <span># Passed dimension gets aggregated.</span>
&lt;array&gt; = np.apply_along_axis(&lt;func&gt;, axis, &lt;array&gt;)    <span># Func can return a scalar or array.</span>
</code></pre>
<pre><code>&lt;array&gt; = np.concatenate(&lt;list_of_arrays&gt;, axis=<span>0</span>)      <span># Links arrays along first axis (rows).</span>
&lt;array&gt; = np.row_stack/column_stack(&lt;list_of_arrays&gt;)   <span># Treats 1d arrays as rows or columns.</span>
&lt;array&gt; = np.tile/repeat(&lt;array&gt;, &lt;int/list&gt;)           <span># Tiles array or repeats its elements.</span>
</code></pre>
<ul>
<li><strong>Shape is a tuple of dimension sizes. A 100x50 RGB image has shape (50, 100, 3).</strong></li>
<li><strong>Axis is an index of the dimension that gets aggregated. Leftmost dimension has index 0. Summing the RGB image along axis 2 will return a greyscale image with shape (50, 100).</strong></li>
</ul>
<div><h3 id="indexing">Indexing</h3><pre><code>&lt;el&gt;       = &lt;2d_array&gt;[row_index, column_index]        <span># &lt;3d_a&gt;[table_i, row_i, column_i]</span>
&lt;1d_view&gt;  = &lt;2d_array&gt;[row_index]                      <span># &lt;3d_a&gt;[table_i, row_i]</span>
&lt;1d_view&gt;  = &lt;2d_array&gt;[:, column_index]                <span># &lt;3d_a&gt;[table_i, :, column_i]</span>
&lt;2d_view&gt;  = &lt;2d_array&gt;[rows_slice, columns_slice]      <span># &lt;3d_a&gt;[table_i, rows_s, columns_s]</span>
</code></pre></div>

<pre><code>&lt;2d_array&gt; = &lt;2d_array&gt;[row_indexes]                    <span># &lt;3d_a&gt;[table_i/is, row_is]</span>
&lt;2d_array&gt; = &lt;2d_array&gt;[:, column_indexes]              <span># &lt;3d_a&gt;[table_i/is, :, column_is]</span>
&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_indexes]    <span># &lt;3d_a&gt;[table_i/is, row_is, column_is]</span>
&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_index]      <span># &lt;3d_a&gt;[table_i/is, row_is, column_i]</span>
</code></pre>
<pre><code>&lt;2d_bools&gt; = &lt;2d_array&gt; &gt;&lt;== &lt;el/1d/2d_array&gt;           <span># 1d_array must have size of a row.</span>
&lt;1d/2d_a&gt;  = &lt;2d_array&gt;[&lt;2d/1d_bools&gt;]                  <span># 1d_bools must have size of a column.</span>
</code></pre>
<ul>
<li><strong>Indexes should not be tuples because Python converts <code><span>'obj[i, j]'</span></code>  to <code><span>'obj[(i, j)]'</span></code>!</strong></li>
<li><strong>Any value that is broadcastable to the indexed shape can be assigned to the selection.</strong></li>
</ul>
<div><h3 id="broadcasting">Broadcasting</h3><p><strong>Set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions.</strong></p><pre><code>left  = [[<span>0.1</span>], [<span>0.6</span>], [<span>0.8</span>]]                           <span># Shape: (3, 1)</span>
right = [ <span>0.1</span> ,  <span>0.6</span> ,  <span>0.8</span> ]                           <span># Shape: (3,)</span>
</code></pre></div>


<div><h4 id="1ifarrayshapesdifferinlengthleftpadtheshortershapewithones">1. If array shapes differ in length, left-pad the shorter shape with ones:</h4><pre><code>left  = [[<span>0.1</span>], [<span>0.6</span>], [<span>0.8</span>]]                           <span># Shape: (3, 1)</span>
right = [[<span>0.1</span> ,  <span>0.6</span> ,  <span>0.8</span>]]                           <span># Shape: (1, 3) &lt;- !</span>
</code></pre></div>

<div><h4 id="2ifanydimensionsdifferinsizeexpandtheonesthathavesize1byduplicatingtheirelements">2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements:</h4><pre><code>left  = [[<span>0.1</span>,  <span>0.1</span>,  <span>0.1</span>],                             <span># Shape: (3, 3) &lt;- !</span>
         [<span>0.6</span>,  <span>0.6</span>,  <span>0.6</span>],
         [<span>0.8</span>,  <span>0.8</span>,  <span>0.8</span>]]

right = [[<span>0.1</span>,  <span>0.6</span>,  <span>0.8</span>],                             <span># Shape: (3, 3) &lt;- !</span>
         [<span>0.1</span>,  <span>0.6</span>,  <span>0.8</span>],
         [<span>0.1</span>,  <span>0.6</span>,  <span>0.8</span>]]
</code></pre></div>

<div><h3 id="example-2">Example</h3><div><h4 id="foreachpointreturnsindexofitsnearestpoint010608121">For each point returns index of its nearest point (<code>[<span>0.1</span>, <span>0.6</span>, <span>0.8</span>] =&gt; [<span>1</span>, <span>2</span>, <span>1</span>]</code>):</h4><pre><code><span>&gt;&gt;&gt; </span>points = np.array([<span>0.1</span>, <span>0.6</span>, <span>0.8</span>])
 [ <span>0.1</span>,  <span>0.6</span>,  <span>0.8</span>]
<span>&gt;&gt;&gt; </span>wrapped_points = points.reshape(<span>3</span>, <span>1</span>)
[[ <span>0.1</span>],
 [ <span>0.6</span>],
 [ <span>0.8</span>]]
<span>&gt;&gt;&gt; </span>distances = wrapped_points - points
[[ <span>0.</span> , <span>-0.5</span>, <span>-0.7</span>],
 [ <span>0.5</span>,  <span>0.</span> , <span>-0.2</span>],
 [ <span>0.7</span>,  <span>0.2</span>,  <span>0.</span> ]]
<span>&gt;&gt;&gt; </span>distances = np.abs(distances)
[[ <span>0.</span> ,  <span>0.5</span>,  <span>0.7</span>],
 [ <span>0.5</span>,  <span>0.</span> ,  <span>0.2</span>],
 [ <span>0.7</span>,  <span>0.2</span>,  <span>0.</span> ]]
<span>&gt;&gt;&gt; </span>i = np.arange(<span>3</span>)
[<span>0</span>, <span>1</span>, <span>2</span>]
<span>&gt;&gt;&gt; </span>distances[i, i] = np.inf
[[ inf,  <span>0.5</span>,  <span>0.7</span>],
 [ <span>0.5</span>,  inf,  <span>0.2</span>],
 [ <span>0.7</span>,  <span>0.2</span>,  inf]]
<span>&gt;&gt;&gt; </span>distances.argmin(<span>1</span>)
[<span>1</span>, <span>2</span>, <span>1</span>]
</code></pre></div></div>


<div><h2 id="image"><a href="#image" name="image">#</a>Image</h2><pre><code><span># $ pip3 install pillow</span>
<span>from</span> PIL <span>import</span> Image, ImageDraw
</code></pre></div>

<pre><code>&lt;Image&gt; = Image.new(<span>'&lt;mode&gt;'</span>, (width, height))  <span># Also `color=&lt;int/tuple/str&gt;`.</span>
&lt;Image&gt; = Image.open(&lt;path&gt;)                    <span># Identifies format based on file contents.</span>
&lt;Image&gt; = &lt;Image&gt;.convert(<span>'&lt;mode&gt;'</span>)             <span># Converts image to the new mode.</span>
&lt;Image&gt;.save(&lt;path&gt;)                            <span># Selects format based on the path extension.</span>
&lt;Image&gt;.show()                                  <span># Opens image in the default preview app.</span>
</code></pre>
<pre><code>&lt;int/tuple&gt; = &lt;Image&gt;.getpixel((x, y))          <span># Returns a pixel.</span>
&lt;Image&gt;.putpixel((x, y), &lt;int/tuple&gt;)           <span># Writes a pixel to the image.</span>
&lt;ImagingCore&gt; = &lt;Image&gt;.getdata()               <span># Returns a flattened view of the pixels.</span>
&lt;Image&gt;.putdata(&lt;list/ImagingCore&gt;)             <span># Writes a flattened sequence of pixels.</span>
&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                  <span># Writes passed image to the image.</span>
</code></pre>
<pre><code>&lt;Image&gt; = &lt;Image&gt;.filter(&lt;Filter&gt;)              <span># `&lt;Filter&gt; = ImageFilter.&lt;name&gt;([&lt;args&gt;])`</span>
&lt;Image&gt; = &lt;Enhance&gt;.enhance(&lt;float&gt;)            <span># `&lt;Enhance&gt; = ImageEnhance.&lt;name&gt;(&lt;Image&gt;)`</span>
</code></pre>
<pre><code>&lt;array&gt; = np.array(&lt;Image&gt;)                     <span># Creates NumPy array from the image.</span>
&lt;Image&gt; = Image.fromarray(np.uint8(&lt;array&gt;))    <span># Use &lt;array&gt;.clip(0, 255) to clip the values.</span>
</code></pre>
<div><h3 id="modes-1">Modes</h3><ul>
<li><strong><code><span>'1'</span></code> - 1-bit pixels, black and white, stored with one pixel per byte.</strong></li>
<li><strong><code><span>'L'</span></code> - 8-bit pixels, greyscale.</strong></li>
<li><strong><code><span>'RGB'</span></code> - 3x8-bit pixels, true color.</strong></li>
<li><strong><code><span>'RGBA'</span></code> - 4x8-bit pixels, true color with transparency mask.</strong></li>
<li><strong><code><span>'HSV'</span></code> - 3x8-bit pixels, Hue, Saturation, Value color space.</strong></li>
</ul><div><h3 id="examples">Examples</h3><div><h4 id="createsapngimageofarainbowgradient">Creates a PNG image of a rainbow gradient:</h4><pre><code>WIDTH, HEIGHT = <span>100</span>, <span>100</span>
n_pixels = WIDTH * HEIGHT
hues = (<span>255</span> * i/n_pixels <span>for</span> i <span>in</span> range(n_pixels))
img = Image.new(<span>'HSV'</span>, (WIDTH, HEIGHT))
img.putdata([(int(h), <span>255</span>, <span>255</span>) <span>for</span> h <span>in</span> hues])
img.convert(<span>'RGB'</span>).save(<span>'test.png'</span>)
</code></pre></div></div></div>




<div><h4 id="addsnoisetoapngimage">Adds noise to a PNG image:</h4><pre><code><span>from</span> random <span>import</span> randint
add_noise = <span>lambda</span> value: max(<span>0</span>, min(<span>255</span>, value + randint(<span>-20</span>, <span>20</span>)))
img = Image.open(<span>'test.png'</span>).convert(<span>'HSV'</span>)
img.putdata([(add_noise(h), s, v) <span>for</span> h, s, v <span>in</span> img.getdata()])
img.show()
</code></pre></div>

<div><h3 id="imagedraw">Image Draw</h3><pre><code>&lt;ImageDraw&gt; = ImageDraw.Draw(&lt;Image&gt;)           <span># Object for adding 2D graphics to the image.</span>
&lt;ImageDraw&gt;.point((x, y))                       <span># Draws a point. Truncates floats into ints.</span>
&lt;ImageDraw&gt;.line((x1, y1, x2, y2 [, ...]))      <span># To get anti-aliasing use Image's resize().</span>
&lt;ImageDraw&gt;.arc((x1, y1, x2, y2), deg1, deg2)   <span># Always draws in clockwise direction.</span>
&lt;ImageDraw&gt;.rectangle((x1, y1, x2, y2))         <span># To rotate use Image's rotate() and paste().</span>
&lt;ImageDraw&gt;.polygon((x1, y1, x2, y2, ...))      <span># Last point gets connected to the first.</span>
&lt;ImageDraw&gt;.ellipse((x1, y1, x2, y2))           <span># To rotate use Image's rotate() and paste().</span>
&lt;ImageDraw&gt;.text((x, y), text, font=&lt;Font&gt;)     <span># `&lt;Font&gt; = ImageFont.truetype(&lt;path&gt;, size)`</span>
</code></pre></div>

<ul>
<li><strong>Use <code><span>'fill=&lt;color&gt;'</span></code> to set the primary color.</strong></li>
<li><strong>Use <code><span>'width=&lt;int&gt;'</span></code> to set the width of lines or contours.</strong></li>
<li><strong>Use <code><span>'outline=&lt;color&gt;'</span></code> to set the color of the contours.</strong></li>
<li><strong>Color can be an int, tuple, <code><span>'#rrggbb[aa]'</span></code> string or a color name.</strong></li>
</ul>
<div><h2 id="animation"><a href="#animation" name="animation">#</a>Animation</h2><div><h4 id="createsagifofabouncingball">Creates a GIF of a bouncing ball:</h4><pre><code><span># $ pip3 install imageio</span>
<span>from</span> PIL <span>import</span> Image, ImageDraw
<span>import</span> imageio

WIDTH, HEIGHT, R = <span>126</span>, <span>126</span>, <span>10</span>
frames = []
<span>for</span> velocity <span>in</span> range(<span>1</span>, <span>16</span>):
    y = sum(range(velocity))
    frame = Image.new(<span>'L'</span>, (WIDTH, HEIGHT))
    draw  = ImageDraw.Draw(frame)
    draw.ellipse((WIDTH/<span>2</span>-R, y, WIDTH/<span>2</span>+R, y+R*<span>2</span>), fill=<span>'white'</span>)
    frames.append(frame)
frames += reversed(frames[<span>1</span>:<span>-1</span>])
imageio.mimsave(<span>'test.gif'</span>, frames, duration=<span>0.03</span>)
</code></pre></div></div>




<pre><code>&lt;Wave_read&gt;  = wave.open(<span>'&lt;path&gt;'</span>, <span>'rb'</span>)        <span># Opens the WAV file.</span>
framerate    = &lt;Wave_read&gt;.getframerate()       <span># Number of frames per second.</span>
nchannels    = &lt;Wave_read&gt;.getnchannels()       <span># Number of samples per frame.</span>
sampwidth    = &lt;Wave_read&gt;.getsampwidth()       <span># Sample size in bytes.</span>
nframes      = &lt;Wave_read&gt;.getnframes()         <span># Number of frames.</span>
&lt;params&gt;     = &lt;Wave_read&gt;.getparams()          <span># Immutable collection of above.</span>
&lt;bytes&gt;      = &lt;Wave_read&gt;.readframes(nframes)  <span># Returns next 'nframes' frames.</span>
</code></pre>
<pre><code>&lt;Wave_write&gt; = wave.open(<span>'&lt;path&gt;'</span>, <span>'wb'</span>)        <span># Truncates existing file.</span>
&lt;Wave_write&gt;.setframerate(&lt;int&gt;)                <span># 44100 for CD, 48000 for video.</span>
&lt;Wave_write&gt;.setnchannels(&lt;int&gt;)                <span># 1 for mono, 2 for stereo.</span>
&lt;Wave_write&gt;.setsampwidth(&lt;int&gt;)                <span># 2 for CD quality sound.</span>
&lt;Wave_write&gt;.setparams(&lt;params&gt;)                <span># Sets all parameters.</span>
&lt;Wave_write&gt;.writeframes(&lt;bytes&gt;)               <span># Appends frames to the file.</span>
</code></pre>
<ul>
<li><strong>Bytes object contains a sequence of frames, each consisting of one or more samples.</strong></li>
<li><strong>In a stereo signal, the first sample of a frame belongs to the left channel.</strong></li>
<li><strong>Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment.</strong></li>
<li><strong>If sample width is one byte, then the integer should be encoded unsigned.</strong></li>
<li><strong>For all other sizes, the integer should be encoded signed with little-endian byte order.</strong></li>
</ul>
<div><h3 id="samplevalues">Sample Values</h3><pre><code>┏━━━━━━━━━━━┯━━━━━━━━━━━┯━━━━━━┯━━━━━━━━━━━┓
┃ sampwidth │    min    │ zero │    max    ┃
┠───────────┼───────────┼──────┼───────────┨
┃     <span>1</span>     │         <span>0</span> │  <span>128</span> │       <span>255</span> ┃
┃     <span>2</span>     │    <span>-32768</span> │    <span>0</span> │     <span>32767</span> ┃
┃     <span>3</span>     │  <span>-8388608</span> │    <span>0</span> │   <span>8388607</span> ┃
┗━━━━━━━━━━━┷━━━━━━━━━━━┷━━━━━━┷━━━━━━━━━━━┛
</code></pre></div>

<div><h3 id="readfloatsamplesfromwavfile">Read Float Samples from WAV File</h3><pre><code><span><span>def</span> <span>read_wav_file</span><span>(filename)</span>:</span>
    <span><span>def</span> <span>get_int</span><span>(bytes_obj)</span>:</span>
        an_int = int.from_bytes(bytes_obj, <span>'little'</span>, signed=(sampwidth != <span>1</span>))
        <span>return</span> an_int - <span>128</span> * (sampwidth == <span>1</span>)
    <span>with</span> wave.open(filename, <span>'rb'</span>) <span>as</span> file:
        sampwidth = file.getsampwidth()
        frames = file.readframes(<span>-1</span>)
    bytes_samples = (frames[i : i+sampwidth] <span>for</span> i <span>in</span> range(<span>0</span>, len(frames), sampwidth))
    <span>return</span> [get_int(b) / pow(<span>2</span>, sampwidth * <span>8</span> - <span>1</span>) <span>for</span> b <span>in</span> bytes_samples]
</code></pre></div>

<div><h3 id="writefloatsamplestowavfile">Write Float Samples to WAV File</h3><pre><code><span><span>def</span> <span>write_to_wav_file</span><span>(filename, float_samples, nchannels=<span>1</span>, sampwidth=<span>2</span>, framerate=<span>44100</span>)</span>:</span>
    <span><span>def</span> <span>get_bytes</span><span>(a_float)</span>:</span>
        a_float = max(<span>-1</span>, min(<span>1</span> - <span>2e-16</span>, a_float))
        a_float += sampwidth == <span>1</span>
        a_float *= pow(<span>2</span>, sampwidth * <span>8</span> - <span>1</span>)
        <span>return</span> int(a_float).to_bytes(sampwidth, <span>'little'</span>, signed=(sampwidth != <span>1</span>))
    <span>with</span> wave.open(filename, <span>'wb'</span>) <span>as</span> file:
        file.setnchannels(nchannels)
        file.setsampwidth(sampwidth)
        file.setframerate(framerate)
        file.writeframes(<span>b''</span>.join(get_bytes(f) <span>for</span> f <span>in</span> float_samples))
</code></pre></div>

<div><h3 id="examples-1">Examples</h3><div><h4 id="savesa440hzsinewavetoamonowavfile">Saves a 440 Hz sine wave to a mono WAV file:</h4><pre><code><span>from</span> math <span>import</span> pi, sin
samples_f = (sin(i * <span>2</span> * pi * <span>440</span> / <span>44100</span>) <span>for</span> i <span>in</span> range(<span>100_000</span>))
write_to_wav_file(<span>'test.wav'</span>, samples_f)
</code></pre></div></div>


<div><h4 id="addsnoisetoamonowavfile">Adds noise to a mono WAV file:</h4><pre><code><span>from</span> random <span>import</span> random
add_noise = <span>lambda</span> value: value + (random() - <span>0.5</span>) * <span>0.03</span>
samples_f = (add_noise(f) <span>for</span> f <span>in</span> read_wav_file(<span>'test.wav'</span>))
write_to_wav_file(<span>'test.wav'</span>, samples_f)
</code></pre></div>

<div><h4 id="playsawavfile">Plays a WAV file:</h4><pre><code><span># $ pip3 install simpleaudio</span>
<span>from</span> simpleaudio <span>import</span> play_buffer
<span>with</span> wave.open(<span>'test.wav'</span>, <span>'rb'</span>) <span>as</span> file:
    p = file.getparams()
    frames = file.readframes(<span>-1</span>)
    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)
</code></pre></div>

<div><h3 id="texttospeech">Text to Speech</h3><pre><code><span># $ pip3 install pyttsx3</span>
<span>import</span> pyttsx3
engine = pyttsx3.init()
engine.say(<span>'Sally sells seashells by the seashore.'</span>)
engine.runAndWait()
</code></pre></div>

<div><h2 id="synthesizer"><a href="#synthesizer" name="synthesizer">#</a>Synthesizer</h2><div><h4 id="playspopcornbygershonkingsley">Plays Popcorn by Gershon Kingsley:</h4><pre><code><span># $ pip3 install simpleaudio</span>
<span>import</span> array, itertools <span>as</span> it, math, simpleaudio

F  = <span>44100</span>
P1 = <span>'71♩,69♪,,71♩,66♪,,62♩,66♪,,59♩,,'</span>
P2 = <span>'71♩,73♪,,74♩,73♪,,74♪,,71♪,,73♩,71♪,,73♪,,69♪,,71♩,69♪,,71♪,,67♪,,71♩,,'</span>
get_pause   = <span>lambda</span> seconds: it.repeat(<span>0</span>, int(seconds * F))
sin_f       = <span>lambda</span> i, hz: math.sin(i * <span>2</span> * math.pi * hz / F)
get_wave    = <span>lambda</span> hz, seconds: (sin_f(i, hz) <span>for</span> i <span>in</span> range(int(seconds * F)))
get_hz      = <span>lambda</span> key: <span>8.176</span> * <span>2</span> ** (int(key) / <span>12</span>)
parse_note  = <span>lambda</span> note: (get_hz(note[:<span>2</span>]), <span>1</span>/<span>4</span> <span>if</span> <span>'♩'</span> <span>in</span> note <span>else</span> <span>1</span>/<span>8</span>)
get_samples = <span>lambda</span> note: get_wave(*parse_note(note)) <span>if</span> note <span>else</span> get_pause(<span>1</span>/<span>8</span>)
samples_f   = it.chain.from_iterable(get_samples(n) <span>for</span> n <span>in</span> <span>f'<span>{P1}</span>,<span>{P1}</span>,<span>{P2}</span>'</span>.split(<span>','</span>))
samples_i   = array.array(<span>'h'</span>, (int(f * <span>30000</span>) <span>for</span> f <span>in</span> samples_f))
simpleaudio.play_buffer(samples_i, <span>1</span>, <span>2</span>, F)
</code></pre></div></div>


<div><h2 id="pygame"><a href="#pygame" name="pygame">#</a>Pygame</h2><pre><code><span># $ pip3 install pygame</span>
<span>import</span> pygame <span>as</span> pg

pg.init()
screen = pg.display.set_mode((<span>500</span>, <span>500</span>))
rect = pg.Rect(<span>240</span>, <span>240</span>, <span>20</span>, <span>20</span>)
<span>while</span> <span>not</span> pg.event.get(pg.QUIT):
    deltas = {pg.K_UP: (<span>0</span>, <span>-20</span>), pg.K_RIGHT: (<span>20</span>, <span>0</span>), pg.K_DOWN: (<span>0</span>, <span>20</span>), pg.K_LEFT: (<span>-20</span>, <span>0</span>)}
    <span>for</span> event <span>in</span> pg.event.get(pg.KEYDOWN):
        dx, dy = deltas.get(event.key, (<span>0</span>, <span>0</span>))
        rect = rect.move((dx, dy))
    screen.fill((<span>0</span>, <span>0</span>, <span>0</span>))
    pg.draw.rect(screen, (<span>255</span>, <span>255</span>, <span>255</span>), rect)
    pg.display.flip()
</code></pre></div>

<div><h3 id="rectangle">Rectangle</h3><p><strong>Object for storing rectangular coordinates.</strong></p><pre><code>&lt;Rect&gt; = pg.Rect(x, y, width, height)           <span># Floats get truncated into ints.</span>
&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/…           <span># Top, right, bottom, left. Allows assignments.</span>
&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/…                <span># Topright, bottomright, bottomleft. Same.</span>
&lt;Rect&gt; = &lt;Rect&gt;.move((delta_x, delta_y))        <span># Use move_ip() to move in-place.</span>
</code></pre></div>


<pre><code>&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            <span># Checks if rectangle contains the point.</span>
&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             <span># Checks if two rectangles overlap.</span>
&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     <span># Returns index of first colliding Rect or -1.</span>
&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  <span># Returns indexes of all colliding rectangles.</span>
</code></pre>
<div><h3 id="surface">Surface</h3><p><strong>Object for representing images.</strong></p><pre><code>&lt;Surf&gt; = pg.display.set_mode((width, height))   <span># Opens new window and returns its surface.</span>
&lt;Surf&gt; = pg.Surface((width, height))            <span># New RGB surface. RGBA if `flags=pg.SRCALPHA`.</span>
&lt;Surf&gt; = pg.image.load(&lt;path/file&gt;)             <span># Loads the image. Format depends on source.</span>
&lt;Surf&gt; = pg.surfarray.make_surface(&lt;np_array&gt;)  <span># Also `&lt;np_arr&gt; = surfarray.pixels3d(&lt;Surf&gt;)`.</span>
&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              <span># Creates a new surface from the cutout.</span>
</code></pre></div>


<pre><code>&lt;Surf&gt;.fill(color)                              <span># Tuple, Color('#rrggbb[aa]') or Color(&lt;name&gt;).</span>
&lt;Surf&gt;.set_at((x, y), color)                    <span># Updates pixel. Also &lt;Surf&gt;.get_at((x, y)).</span>
&lt;Surf&gt;.blit(&lt;Surf&gt;, (x, y))                     <span># Draws passed surface to the surface.</span>
</code></pre>
<pre><code><span>from</span> pygame.transform <span>import</span> scale, ...
&lt;Surf&gt; = scale(&lt;Surf&gt;, (width, height))         <span># Returns scaled surface.</span>
&lt;Surf&gt; = rotate(&lt;Surf&gt;, anticlock_degrees)      <span># Returns rotated and scaled surface.</span>
&lt;Surf&gt; = flip(&lt;Surf&gt;, x_bool, y_bool)           <span># Returns flipped surface.</span>
</code></pre>
<pre><code><span>from</span> pygame.draw <span>import</span> line, ...
line(&lt;Surf&gt;, color, (x1, y1), (x2, y2), width)  <span># Draws a line to the surface.</span>
arc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_rad, to_rad)    <span># Also ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0).</span>
rect(&lt;Surf&gt;, color, &lt;Rect&gt;, width=<span>0</span>)            <span># Also polygon(&lt;Surf&gt;, color, points, width=0).</span>
</code></pre>
<div><h3 id="font">Font</h3><pre><code>&lt;Font&gt; = pg.font.Font(&lt;path/file&gt;, size)        <span># Loads TTF file. Pass None for default font.</span>
&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color)  <span># Background color can be specified at the end.</span>
</code></pre></div>

<div><h3 id="sound">Sound</h3><pre><code>&lt;Sound&gt; = pg.mixer.Sound(&lt;path/file/bytes&gt;)     <span># Loads WAV file or array of signed shorts.</span>
&lt;Sound&gt;.play/stop()                             <span># Also &lt;Sound&gt;.set_volume(&lt;float&gt;).</span>
</code></pre></div>

<div><h3 id="basicmariobrothersexample">Basic Mario Brothers Example</h3><pre><code><span>import</span> collections, dataclasses, enum, io, itertools <span>as</span> it, pygame <span>as</span> pg, urllib.request
<span>from</span> random <span>import</span> randint

P = collections.namedtuple(<span>'P'</span>, <span>'x y'</span>)          <span># Position</span>
D = enum.Enum(<span>'D'</span>, <span>'n e s w'</span>)                   <span># Direction</span>
W, H, MAX_S = <span>50</span>, <span>50</span>, P(<span>5</span>, <span>10</span>)                  <span># Width, Height, Max speed</span>

<span><span>def</span> <span>main</span><span>()</span>:</span>
    <span><span>def</span> <span>get_screen</span><span>()</span>:</span>
        pg.init()
        <span>return</span> pg.display.set_mode((W*<span>16</span>, H*<span>16</span>))
    <span><span>def</span> <span>get_images</span><span>()</span>:</span>
        url = <span>'https://gto76.github.io/python-cheatsheet/web/mario_bros.png'</span>
        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))
        <span>return</span> [img.subsurface(get_rect(x, <span>0</span>)) <span>for</span> x <span>in</span> range(img.get_width() // <span>16</span>)]
    <span><span>def</span> <span>get_mario</span><span>()</span>:</span>
        Mario = dataclasses.make_dataclass(<span>'Mario'</span>, <span>'rect spd facing_left frame_cycle'</span>.split())
        <span>return</span> Mario(get_rect(<span>1</span>, <span>1</span>), P(<span>0</span>, <span>0</span>), <span>False</span>, it.cycle(range(<span>3</span>)))
    <span><span>def</span> <span>get_tiles</span><span>()</span>:</span>
        border = [(x, y) <span>for</span> x <span>in</span> range(W) <span>for</span> y <span>in</span> range(H) <span>if</span> x <span>in</span> [<span>0</span>, W-<span>1</span>] <span>or</span> y <span>in</span> [<span>0</span>, H-<span>1</span>]]
        platforms = [(randint(<span>1</span>, W-<span>2</span>), randint(<span>2</span>, H-<span>2</span>)) <span>for</span> _ <span>in</span> range(W*H // <span>10</span>)]
        <span>return</span> [get_rect(x, y) <span>for</span> x, y <span>in</span> border + platforms]
    <span><span>def</span> <span>get_rect</span><span>(x, y)</span>:</span>
        <span>return</span> pg.Rect(x*<span>16</span>, y*<span>16</span>, <span>16</span>, <span>16</span>)
    run(get_screen(), get_images(), get_mario(), get_tiles())

<span><span>def</span> <span>run</span><span>(screen, images, mario, tiles)</span>:</span>
    clock = pg.time.Clock()
    pressed = set()
    <span>while</span> <span>not</span> pg.event.get(pg.QUIT) <span>and</span> clock.tick(<span>28</span>):
        keys = {pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w}
        pressed |= {keys.get(e.key) <span>for</span> e <span>in</span> pg.event.get(pg.KEYDOWN)}
        pressed -= {keys.get(e.key) <span>for</span> e <span>in</span> pg.event.get(pg.KEYUP)}
        update_speed(mario, tiles, pressed)
        update_position(mario, tiles)
        draw(screen, images, mario, tiles, pressed)

<span><span>def</span> <span>update_speed</span><span>(mario, tiles, pressed)</span>:</span>
    x, y = mario.spd
    x += <span>2</span> * ((D.e <span>in</span> pressed) - (D.w <span>in</span> pressed))
    x += (x &lt; <span>0</span>) - (x &gt; <span>0</span>)
    y += <span>1</span> <span>if</span> D.s <span>not</span> <span>in</span> get_boundaries(mario.rect, tiles) <span>else</span> (D.n <span>in</span> pressed) * <span>-10</span>
    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))

<span><span>def</span> <span>update_position</span><span>(mario, tiles)</span>:</span>
    x, y = mario.rect.topleft
    n_steps = max(abs(s) <span>for</span> s <span>in</span> mario.spd)
    <span>for</span> _ <span>in</span> range(n_steps):
        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))
        mario.rect.topleft = x, y = x + (mario.spd.x / n_steps), y + (mario.spd.y / n_steps)

<span><span>def</span> <span>get_boundaries</span><span>(rect, tiles)</span>:</span>
    deltas = {D.n: P(<span>0</span>, <span>-1</span>), D.e: P(<span>1</span>, <span>0</span>), D.s: P(<span>0</span>, <span>1</span>), D.w: P(<span>-1</span>, <span>0</span>)}
    <span>return</span> {d <span>for</span> d, delta <span>in</span> deltas.items() <span>if</span> rect.move(delta).collidelist(tiles) != <span>-1</span>}

<span><span>def</span> <span>stop_on_collision</span><span>(spd, bounds)</span>:</span>
    <span>return</span> P(x=<span>0</span> <span>if</span> (D.w <span>in</span> bounds <span>and</span> spd.x &lt; <span>0</span>) <span>or</span> (D.e <span>in</span> bounds <span>and</span> spd.x &gt; <span>0</span>) <span>else</span> spd.x,
             y=<span>0</span> <span>if</span> (D.n <span>in</span> bounds <span>and</span> spd.y &lt; <span>0</span>) <span>or</span> (D.s <span>in</span> bounds <span>and</span> spd.y &gt; <span>0</span>) <span>else</span> spd.y)

<span><span>def</span> <span>draw</span><span>(screen, images, mario, tiles, pressed)</span>:</span>
    <span><span>def</span> <span>get_marios_image_index</span><span>()</span>:</span>
        <span>if</span> D.s <span>not</span> <span>in</span> get_boundaries(mario.rect, tiles):
            <span>return</span> <span>4</span>
        <span>return</span> next(mario.frame_cycle) <span>if</span> {D.w, D.e} &amp; pressed <span>else</span> <span>6</span>
    screen.fill((<span>85</span>, <span>168</span>, <span>255</span>))
    mario.facing_left = (D.w <span>in</span> pressed) <span>if</span> {D.w, D.e} &amp; pressed <span>else</span> mario.facing_left
    screen.blit(images[get_marios_image_index() + mario.facing_left * <span>9</span>], mario.rect)
    <span>for</span> t <span>in</span> tiles:
        screen.blit(images[<span>18</span> <span>if</span> t.x <span>in</span> [<span>0</span>, (W-<span>1</span>)*<span>16</span>] <span>or</span> t.y <span>in</span> [<span>0</span>, (H-<span>1</span>)*<span>16</span>] <span>else</span> <span>19</span>], t)
    pg.display.flip()

<span>if</span> __name__ == <span>'__main__'</span>:
    main()
</code></pre></div>

<div><h2 id="pandas"><a href="#pandas" name="pandas">#</a>Pandas</h2><pre><code><span># $ pip3 install pandas matplotlib</span>
<span>import</span> pandas <span>as</span> pd, matplotlib.pyplot <span>as</span> plt
</code></pre></div>

<div><h3 id="series">Series</h3><p><strong>Ordered dictionary with a name.</strong></p><pre><code><span>&gt;&gt;&gt; </span>pd.Series([<span>1</span>, <span>2</span>], index=[<span>'x'</span>, <span>'y'</span>], name=<span>'a'</span>)
x    <span>1</span>
y    <span>2</span>
Name: a, dtype: int64
</code></pre></div>


<pre><code>&lt;Sr&gt; = pd.Series(&lt;list&gt;)                       <span># Assigns RangeIndex starting at 0.</span>
&lt;Sr&gt; = pd.Series(&lt;dict&gt;)                       <span># Takes dictionary's keys for index.</span>
&lt;Sr&gt; = pd.Series(&lt;dict/Series&gt;, index=&lt;list&gt;)  <span># Only keeps items with keys specified in index.</span>
</code></pre>
<pre><code>&lt;el&gt; = &lt;Sr&gt;.loc[key]                           <span># Or: &lt;Sr&gt;.iloc[index]</span>
&lt;Sr&gt; = &lt;Sr&gt;.loc[keys]                          <span># Or: &lt;Sr&gt;.iloc[indexes]</span>
&lt;Sr&gt; = &lt;Sr&gt;.loc[from_key : to_key_inclusive]   <span># Or: &lt;Sr&gt;.iloc[from_i : to_i_exclusive]</span>
</code></pre>
<pre><code>&lt;el&gt; = &lt;Sr&gt;[key/index]                         <span># Or: &lt;Sr&gt;.key</span>
&lt;Sr&gt; = &lt;Sr&gt;[keys/indexes]                      <span># Or: &lt;Sr&gt;[&lt;keys_slice/slice&gt;]</span>
&lt;Sr&gt; = &lt;Sr&gt;[bools]                             <span># Or: &lt;Sr&gt;.loc/iloc[bools]</span>
</code></pre>
<pre><code>&lt;Sr&gt; = &lt;Sr&gt; &gt;&lt;== &lt;el/Sr&gt;                       <span># Returns a Series of bools.</span>
&lt;Sr&gt; = &lt;Sr&gt; +-*/ &lt;el/Sr&gt;                       <span># Items with non-matching keys get value NaN.</span>
</code></pre>
<pre><code>&lt;Sr&gt; = pd.concat(&lt;coll_of_Sr&gt;)                 <span># Concats multiple Series into one long Series.</span>
&lt;Sr&gt; = &lt;Sr&gt;.combine_first(&lt;Sr&gt;)                <span># Adds items that are not yet present.</span>
&lt;Sr&gt;.update(&lt;Sr&gt;)                              <span># Updates items that are already present.</span>
</code></pre>
<pre><code>&lt;Sr&gt;.plot.line/area/bar/pie/hist()             <span># Generates a Matplotlib plot.</span>
plt.show()                                     <span># Displays the plot. Also plt.savefig(&lt;path&gt;).</span>
</code></pre>
<div><h4 id="seriesaggregatetransformmap">Series — Aggregate, Transform, Map:</h4><pre><code>&lt;el&gt; = &lt;Sr&gt;.sum/max/mean/idxmax/all()          <span># Or: &lt;Sr&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span>
&lt;Sr&gt; = &lt;Sr&gt;.rank/diff/cumsum/ffill/interpl()   <span># Or: &lt;Sr&gt;.agg/transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span>
&lt;Sr&gt; = &lt;Sr&gt;.fillna(&lt;el&gt;)                       <span># Or: &lt;Sr&gt;.agg/transform/map(lambda &lt;el&gt;: &lt;el&gt;)</span>
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span>sr = pd.Series([<span>1</span>, <span>2</span>], index=[<span>'x'</span>, <span>'y'</span>])
x    <span>1</span>
y    <span>2</span>
</code></pre>
<pre><code>┏━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━┓
┃               │    <span>'sum'</span>    │   [<span>'sum'</span>]   │ {<span>'s'</span>: <span>'sum'</span>}  ┃
┠───────────────┼─────────────┼─────────────┼───────────────┨
┃ sr.apply(…)   │      <span>3</span>      │    sum  <span>3</span>   │     s  <span>3</span>      ┃
┃ sr.agg(…)     │             │             │               ┃
┗━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━┓
┃               │    <span>'rank'</span>   │   [<span>'rank'</span>]  │ {<span>'r'</span>: <span>'rank'</span>} ┃
┠───────────────┼─────────────┼─────────────┼───────────────┨
┃ sr.apply(…)   │             │      rank   │               ┃
┃ sr.agg(…)     │     x  <span>1</span>    │   x     <span>1</span>   │    r  x  <span>1</span>    ┃
┃               │     y  <span>2</span>    │   y     <span>2</span>   │       y  <span>2</span>    ┃
┗━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━┛
</code></pre>

<ul>
<li><strong>Keys/indexes/bools can't be tuples because <code><span>'obj[x, y]'</span></code> is converted to <code><span>'obj[(x, y)]'</span></code>!</strong></li>
<li><strong>Methods ffill(), interpolate(), fillna() and dropna() accept <code><span>'inplace=True'</span></code>.</strong></li>
<li><strong>Last result has a hierarchical index. Use <code><span>'&lt;Sr&gt;[key_1, key_2]'</span></code> to get its values.</strong></li>
</ul>
<div><h3 id="dataframe">DataFrame</h3><p><strong>Table with labeled rows and columns.</strong></p><pre><code><span>&gt;&gt;&gt; </span>pd.DataFrame([[<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>]], index=[<span>'a'</span>, <span>'b'</span>], columns=[<span>'x'</span>, <span>'y'</span>])
   x  y
a  <span>1</span>  <span>2</span>
b  <span>3</span>  <span>4</span>
</code></pre></div>


<pre><code>&lt;DF&gt;    = pd.DataFrame(&lt;list_of_rows&gt;)         <span># Rows can be either lists, dicts or series.</span>
&lt;DF&gt;    = pd.DataFrame(&lt;dict_of_columns&gt;)      <span># Columns can be either lists, dicts or series.</span>
</code></pre>
<pre><code>&lt;el&gt;    = &lt;DF&gt;.loc[row_key, column_key]        <span># Or: &lt;DF&gt;.iloc[row_index, column_index]</span>
&lt;Sr/DF&gt; = &lt;DF&gt;.loc[row_key/s]                  <span># Or: &lt;DF&gt;.iloc[row_index/es]</span>
&lt;Sr/DF&gt; = &lt;DF&gt;.loc[:, column_key/s]            <span># Or: &lt;DF&gt;.iloc[:, column_index/es]</span>
&lt;DF&gt;    = &lt;DF&gt;.loc[row_bools, column_bools]    <span># Or: &lt;DF&gt;.iloc[row_bools, column_bools]</span>
</code></pre>
<pre><code>&lt;Sr/DF&gt; = &lt;DF&gt;[column_key/s]                   <span># Or: &lt;DF&gt;.column_key</span>
&lt;DF&gt;    = &lt;DF&gt;[row_bools]                      <span># Keeps rows as specified by bools.</span>
&lt;DF&gt;    = &lt;DF&gt;[&lt;DF_of_bools&gt;]                  <span># Assigns NaN to False values.</span>
</code></pre>
<pre><code>&lt;DF&gt;    = &lt;DF&gt; &gt;&lt;== &lt;el/Sr/DF&gt;                 <span># Returns DF of bools. Sr is treated as a row.</span>
&lt;DF&gt;    = &lt;DF&gt; +-*/ &lt;el/Sr/DF&gt;                 <span># Items with non-matching keys get value NaN.</span>
</code></pre>
<pre><code>&lt;DF&gt;    = &lt;DF&gt;.set_index(column_key)           <span># Replaces row keys with values from a column.</span>
&lt;DF&gt;    = &lt;DF&gt;.reset_index(drop=<span>False</span>)         <span># Drops or moves row keys to column named index.</span>
&lt;DF&gt;    = &lt;DF&gt;.sort_index(ascending=<span>True</span>)      <span># Sorts rows by row keys. Use `axis=1` for cols.</span>
&lt;DF&gt;    = &lt;DF&gt;.sort_values(column_key/s)       <span># Sorts rows by the passed column/s. Same.</span>
</code></pre>
<div><h4 id="dataframemergejoinconcat">DataFrame — Merge, Join, Concat:</h4><pre><code><span>&gt;&gt;&gt; </span>l = pd.DataFrame([[<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>]], index=[<span>'a'</span>, <span>'b'</span>], columns=[<span>'x'</span>, <span>'y'</span>])
   x  y
a  <span>1</span>  <span>2</span>
b  <span>3</span>  <span>4</span>
<span>&gt;&gt;&gt; </span>r = pd.DataFrame([[<span>4</span>, <span>5</span>], [<span>6</span>, <span>7</span>]], index=[<span>'b'</span>, <span>'c'</span>], columns=[<span>'y'</span>, <span>'z'</span>])
   y  z
b  <span>4</span>  <span>5</span>
c  <span>6</span>  <span>7</span>
</code></pre></div>

<pre><code>┏━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                        │    <span>'outer'</span>    │   <span>'inner'</span>  │   <span>'left'</span>   │       Description        ┃
┠────────────────────────┼───────────────┼────────────┼────────────┼──────────────────────────┨
┃ l.merge(r, on=<span>'y'</span>,     │    x   y   z  │ x   y   z  │ x   y   z  │ Merges on column if <span>'on'</span> ┃
┃            how=…)      │ <span>0</span>  <span>1</span>   <span>2</span>   .  │ <span>3</span>   <span>4</span>   <span>5</span>  │ <span>1</span>   <span>2</span>   .  │ or <span>'left/right_on'</span> are   ┃
┃                        │ <span>1</span>  <span>3</span>   <span>4</span>   <span>5</span>  │            │ <span>3</span>   <span>4</span>   <span>5</span>  │ set, else on shared cols.┃
┃                        │ <span>2</span>  .   <span>6</span>   <span>7</span>  │            │            │ Uses <span>'inner'</span> by default. ┃
┠────────────────────────┼───────────────┼────────────┼────────────┼──────────────────────────┨
┃ l.join(r, lsuffix=<span>'l'</span>, │    x yl yr  z │            │ x yl yr  z │ Merges on row keys.      ┃
┃           rsuffix=<span>'r'</span>, │ a  <span>1</span>  <span>2</span>  .  . │ x yl yr  z │ <span>1</span>  <span>2</span>  .  . │ Uses <span>'left'</span> by default.  ┃
┃           how=…)       │ b  <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> │ <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> │ <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> │ If r is a Series, it is  ┃
┃                        │ c  .  .  <span>6</span>  <span>7</span> │            │            │ treated as a column.     ┃
┠────────────────────────┼───────────────┼────────────┼────────────┼──────────────────────────┨
┃ pd.concat([l, r],      │    x   y   z  │     y      │            │ Adds rows at the bottom. ┃
┃           axis=<span>0</span>,      │ a  <span>1</span>   <span>2</span>   .  │     <span>2</span>      │            │ Uses <span>'outer'</span> by default. ┃
┃           join=…)      │ b  <span>3</span>   <span>4</span>   .  │     <span>4</span>      │            │ A Series is treated as a ┃
┃                        │ b  .   <span>4</span>   <span>5</span>  │     <span>4</span>      │            │ column. To add a row use ┃
┃                        │ c  .   <span>6</span>   <span>7</span>  │     <span>6</span>      │            │ pd.concat([l, DF([sr])]).┃
┠────────────────────────┼───────────────┼────────────┼────────────┼──────────────────────────┨
┃ pd.concat([l, r],      │    x  y  y  z │            │            │ Adds columns at the      ┃
┃           axis=<span>1</span>,      │ a  <span>1</span>  <span>2</span>  .  . │ x  y  y  z │            │ right end. Uses <span>'outer'</span>  ┃
┃           join=…)      │ b  <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> │ <span>3</span>  <span>4</span>  <span>4</span>  <span>5</span> │            │ by default. A Series is  ┃
┃                        │ c  .  .  <span>6</span>  <span>7</span> │            │            │ treated as a column.     ┃
┠────────────────────────┼───────────────┼────────────┼────────────┼──────────────────────────┨
┃ l.combine_first(r)     │    x   y   z  │            │            │ Adds missing rows and    ┃
┃                        │ a  <span>1</span>   <span>2</span>   .  │            │            │ columns. Also updates    ┃
┃                        │ b  <span>3</span>   <span>4</span>   <span>5</span>  │            │            │ items that contain NaN.  ┃
┃                        │ c  .   <span>6</span>   <span>7</span>  │            │            │ R must be a DataFrame.   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━┛
</code></pre>
<div><h4 id="dataframeaggregatetransformmap">DataFrame — Aggregate, Transform, Map:</h4><pre><code>&lt;Sr&gt; = &lt;DF&gt;.sum/max/mean/idxmax/all()          <span># Or: &lt;DF&gt;.apply/agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span>
&lt;DF&gt; = &lt;DF&gt;.rank/diff/cumsum/ffill/interpl()   <span># Or: &lt;DF&gt;.apply/agg/transfrm(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span>
&lt;DF&gt; = &lt;DF&gt;.fillna(&lt;el&gt;)                       <span># Or: &lt;DF&gt;.applymap(lambda &lt;el&gt;: &lt;el&gt;)</span>
</code></pre></div>

<ul>
<li><strong>All operations operate on columns by default. Pass <code><span>'axis=1'</span></code> to process the rows instead.</strong></li>
</ul>
<pre><code><span>&gt;&gt;&gt; </span>df = pd.DataFrame([[<span>1</span>, <span>2</span>], [<span>3</span>, <span>4</span>]], index=[<span>'a'</span>, <span>'b'</span>], columns=[<span>'x'</span>, <span>'y'</span>])
   x  y
a  <span>1</span>  <span>2</span>
b  <span>3</span>  <span>4</span>
</code></pre>
<pre><code>┏━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━┓
┃                 │    <span>'sum'</span>    │   [<span>'sum'</span>]   │ {<span>'x'</span>: <span>'sum'</span>}  ┃
┠─────────────────┼─────────────┼─────────────┼───────────────┨
┃ df.apply(…)     │             │       x  y  │               ┃
┃ df.agg(…)       │     x  <span>4</span>    │  sum  <span>4</span>  <span>6</span>  │     x  <span>4</span>      ┃
┃                 │     y  <span>6</span>    │             │               ┃
┗━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━┓
┃                 │    <span>'rank'</span>   │   [<span>'rank'</span>]  │ {<span>'x'</span>: <span>'rank'</span>} ┃
┠─────────────────┼─────────────┼─────────────┼───────────────┨
┃ df.apply(…)     │      x  y   │      x    y │        x      ┃
┃ df.agg(…)       │   a  <span>1</span>  <span>1</span>   │   rank rank │     a  <span>1</span>      ┃
┃ df.transform(…) │   b  <span>2</span>  <span>2</span>   │ a    <span>1</span>    <span>1</span> │     b  <span>2</span>      ┃
┃                 │             │ b    <span>2</span>    <span>2</span> │               ┃
┗━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━┛
</code></pre>

<ul>
<li><strong>Use <code><span>'&lt;DF&gt;[col_key_1, col_key_2][row_key]'</span></code> to get the fifth result's values.</strong></li>
</ul>
<div><h4 id="dataframeplotencodedecode">DataFrame — Plot, Encode, Decode:</h4><pre><code>&lt;DF&gt;.plot.line/area/bar/hist/scatter/box()     <span># Also: `x=column_key, y=column_key/s`.</span>
plt.show()                                     <span># Displays the plot. Also plt.savefig(&lt;path&gt;).</span>
</code></pre></div>

<pre><code>&lt;DF&gt; = pd.read_json/html(<span>'&lt;str/path/url&gt;'</span>)     <span># Run `$ pip3 install beautifulsoup4 lxml`.</span>
&lt;DF&gt; = pd.read_csv/pickle/excel(<span>'&lt;path/url&gt;'</span>)  <span># Use `sheet_name=None` to get all Excel sheets.</span>
&lt;DF&gt; = pd.read_sql(<span>'&lt;table/query&gt;'</span>, &lt;conn.&gt;)   <span># Accepts SQLite3 or SQLAlchemy connection.</span>
&lt;DF&gt; = pd.read_clipboard()                     <span># Reads a copied table from the clipboard.</span>
</code></pre>
<pre><code>&lt;dict&gt; = &lt;DF&gt;.to_dict([<span>'d/l/s/…'</span>])             <span># Returns columns as dicts, lists or series.</span>
&lt;str&gt;  = &lt;DF&gt;.to_json/html/csv([&lt;path&gt;])       <span># Also to_markdown/latex([&lt;path&gt;]).</span>
&lt;DF&gt;.to_pickle/excel(&lt;path&gt;)                   <span># Run `$ pip3 install "pandas[excel]" odfpy`.</span>
&lt;DF&gt;.to_sql(<span>'&lt;table_name&gt;'</span>, &lt;connection&gt;)      <span># Accepts SQLite3 or SQLAlchemy connection.</span>
</code></pre>
<div><h3 id="groupby">GroupBy</h3><p><strong>Object that groups together rows of a dataframe based on the value of the passed column.</strong></p><pre><code><span>&gt;&gt;&gt; </span>df = pd.DataFrame([[<span>1</span>, <span>2</span>, <span>3</span>], [<span>4</span>, <span>5</span>, <span>6</span>], [<span>7</span>, <span>8</span>, <span>6</span>]], list(<span>'abc'</span>), list(<span>'xyz'</span>))
<span>&gt;&gt;&gt; </span>df.groupby(<span>'z'</span>).get_group(<span>6</span>)
   x  y  z
b  <span>4</span>  <span>5</span>  <span>6</span>
c  <span>7</span>  <span>8</span>  <span>6</span>
</code></pre></div>


<pre><code>&lt;GB&gt; = &lt;DF&gt;.groupby(column_key/s)              <span># Splits DF into groups based on passed column.</span>
&lt;DF&gt; = &lt;GB&gt;.apply(&lt;func&gt;)                      <span># Maps each group. Func can return DF, Sr or el.</span>
&lt;GB&gt; = &lt;GB&gt;[column_key]                        <span># Single column GB. All operations return a Sr.</span>
</code></pre>
<div><h4 id="groupbyaggregatetransformmap">GroupBy — Aggregate, Transform, Map:</h4><pre><code>&lt;DF&gt; = &lt;GB&gt;.sum/max/mean/idxmax/all()          <span># Or: &lt;GB&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span>
&lt;DF&gt; = &lt;GB&gt;.rank/diff/cumsum/ffill()           <span># Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span>
&lt;DF&gt; = &lt;GB&gt;.fillna(&lt;el&gt;)                       <span># Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span>
</code></pre></div>

<pre><code><span>&gt;&gt;&gt; </span>gb = df.groupby(<span>'z'</span>)
      x  y  z
<span>3</span>: a  <span>1</span>  <span>2</span>  <span>3</span>
<span>6</span>: b  <span>4</span>  <span>5</span>  <span>6</span>
   c  <span>7</span>  <span>8</span>  <span>6</span>
</code></pre>
<pre><code>┏━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━┓
┃                 │    <span>'sum'</span>    │    <span>'rank'</span>   │   [<span>'rank'</span>]  │ {<span>'x'</span>: <span>'rank'</span>} ┃
┠─────────────────┼─────────────┼─────────────┼─────────────┼───────────────┨
┃ gb.agg(…)       │      x   y  │      x  y   │      x    y │        x      ┃
┃                 │  z          │   a  <span>1</span>  <span>1</span>   │   rank rank │     a  <span>1</span>      ┃
┃                 │  <span>3</span>   <span>1</span>   <span>2</span>  │   b  <span>1</span>  <span>1</span>   │ a    <span>1</span>    <span>1</span> │     b  <span>1</span>      ┃
┃                 │  <span>6</span>  <span>11</span>  <span>13</span>  │   c  <span>2</span>  <span>2</span>   │ b    <span>1</span>    <span>1</span> │     c  <span>2</span>      ┃
┃                 │             │             │ c    <span>2</span>    <span>2</span> │               ┃
┠─────────────────┼─────────────┼─────────────┼─────────────┼───────────────┨
┃ gb.transform(…) │      x   y  │      x  y   │             │               ┃
┃                 │  a   <span>1</span>   <span>2</span>  │   a  <span>1</span>  <span>1</span>   │             │               ┃
┃                 │  b  <span>11</span>  <span>13</span>  │   b  <span>1</span>  <span>1</span>   │             │               ┃
┃                 │  c  <span>11</span>  <span>13</span>  │   c  <span>2</span>  <span>2</span>   │             │               ┃
┗━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━┛
</code></pre>
<div><h3 id="rolling">Rolling</h3><p><strong>Object for rolling window calculations.</strong></p><pre><code>&lt;RSr/RDF/RGB&gt; = &lt;Sr/DF/GB&gt;.rolling(win_size)   <span># Also: `min_periods=None, center=False`.</span>
&lt;RSr/RDF/RGB&gt; = &lt;RDF/RGB&gt;[column_key/s]        <span># Or: &lt;RDF/RGB&gt;.column_key</span>
&lt;Sr/DF&gt;       = &lt;R&gt;.mean/sum/max()             <span># Or: &lt;R&gt;.apply/agg(&lt;agg_func/str&gt;)</span>
</code></pre></div>


<div><h2 id="plotly"><a href="#plotly" name="plotly">#</a>Plotly</h2><pre><code><span># $ pip3 install plotly kaleido</span>
<span>from</span> plotly.express <span>import</span> line
&lt;Figure&gt; = line(&lt;DF&gt;, x=&lt;col_name&gt;, y=&lt;col_name&gt;)           <span># Or: line(x=&lt;list&gt;, y=&lt;list&gt;)</span>
&lt;Figure&gt;.update_layout(margin=dict(t=<span>0</span>, r=<span>0</span>, b=<span>0</span>, l=<span>0</span>), …)  <span># `paper_bgcolor='rgb(0, 0, 0)'`.</span>
&lt;Figure&gt;.write_html/json/image(<span>'&lt;path&gt;'</span>)                    <span># Also &lt;Figure&gt;.show().</span>
</code></pre></div>

<div><h4 id="displaysalinechartoftotalcoronavirusdeathspermilliongroupedbycontinent">Displays a line chart of total coronavirus deaths per million grouped by continent:</h4><pre><code>covid = pd.read_csv(<span>'https://covid.ourworldindata.org/data/owid-covid-data.csv'</span>,
                    usecols=[<span>'iso_code'</span>, <span>'date'</span>, <span>'total_deaths'</span>, <span>'population'</span>])
continents = pd.read_csv(<span>'https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff'</span>
                         <span>'846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv'</span>,
                         usecols=[<span>'Three_Letter_Country_Code'</span>, <span>'Continent_Name'</span>])
df = pd.merge(covid, continents, left_on=<span>'iso_code'</span>, right_on=<span>'Three_Letter_Country_Code'</span>)
df = df.groupby([<span>'Continent_Name'</span>, <span>'date'</span>]).sum().reset_index()
df[<span>'Total Deaths per Million'</span>] = df.total_deaths * <span>1e6</span> / df.population
df = df[df.date &gt; <span>'2020-03-14'</span>]
df = df.rename({<span>'date'</span>: <span>'Date'</span>, <span>'Continent_Name'</span>: <span>'Continent'</span>}, axis=<span>'columns'</span>)
line(df, x=<span>'Date'</span>, y=<span>'Total Deaths per Million'</span>, color=<span>'Continent'</span>).show()
</code></pre></div>



<div><h4 id="displaysamultiaxislinechartoftotalcoronaviruscasesandchangesinpricesofbitcoindowjonesandgold">Displays a multi-axis line chart of total coronavirus cases and changes in prices of Bitcoin, Dow Jones and gold:</h4><pre><code><span>import</span> pandas <span>as</span> pd, plotly.graph_objects <span>as</span> go

<span><span>def</span> <span>main</span><span>()</span>:</span>
    display_data(wrangle_data(*scrape_data()))

<span><span>def</span> <span>scrape_data</span><span>()</span>:</span>
    <span><span>def</span> <span>scrape_covid</span><span>()</span>:</span>
        url = <span>'https://covid.ourworldindata.org/data/owid-covid-data.csv'</span>
        df = pd.read_csv(url, usecols=[<span>'location'</span>, <span>'date'</span>, <span>'total_cases'</span>])
        <span>return</span> df[df.location == <span>'World'</span>].set_index(<span>'date'</span>).total_cases
    <span><span>def</span> <span>scrape_yahoo</span><span>(slug)</span>:</span>
        url = (<span>f'https://query1.finance.yahoo.com/v7/finance/download/<span>{slug}</span>?'</span>
               <span>'period1=1579651200&amp;period2=9999999999&amp;interval=1d&amp;events=history'</span>)
        df = pd.read_csv(url, usecols=[<span>'Date'</span>, <span>'Close'</span>])
        <span>return</span> df.set_index(<span>'Date'</span>).Close
    out = scrape_covid(), scrape_yahoo(<span>'BTC-USD'</span>), scrape_yahoo(<span>'GC=F'</span>), scrape_yahoo(<span>'^DJI'</span>)
    <span>return</span> map(pd.Series.rename, out, [<span>'Total Cases'</span>, <span>'Bitcoin'</span>, <span>'Gold'</span>, <span>'Dow Jones'</span>])

<span><span>def</span> <span>wrangle_data</span><span>(covid, bitcoin, gold, dow)</span>:</span>
    df = pd.concat([bitcoin, gold, dow], axis=<span>1</span>)  <span># Joins columns on dates.</span>
    df = df.sort_index().interpolate()            <span># Sorts by date and interpolates NaN-s.</span>
    df = df.loc[<span>'2020-02-23'</span>:]                    <span># Discards rows before '2020-02-23'.</span>
    df = (df / df.iloc[<span>0</span>]) * <span>100</span>                  <span># Calculates percentages relative to day 1.</span>
    df = df.join(covid)                           <span># Adds column with covid cases.</span>
    <span>return</span> df.sort_values(df.index[<span>-1</span>], axis=<span>1</span>)   <span># Sorts columns by last day's value.</span>

<span><span>def</span> <span>display_data</span><span>(df)</span>:</span>
    figure = go.Figure()
    <span>for</span> col_name <span>in</span> reversed(df.columns):
        yaxis = <span>'y1'</span> <span>if</span> col_name == <span>'Total Cases'</span> <span>else</span> <span>'y2'</span>
        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)
        figure.add_trace(trace)
    figure.update_layout(
        yaxis1=dict(title=<span>'Total Cases'</span>, rangemode=<span>'tozero'</span>),
        yaxis2=dict(title=<span>'%'</span>, rangemode=<span>'tozero'</span>, overlaying=<span>'y'</span>, side=<span>'right'</span>),
        legend=dict(x=<span>1.1</span>),
        height=<span>450</span>
    )
    figure.show()

<span>if</span> __name__ == <span>'__main__'</span>:
    main()
</code></pre></div>



<div><h2 id="pysimplegui"><a href="#pysimplegui" name="pysimplegui">#</a>PySimpleGUI</h2><pre><code><span># $ pip3 install PySimpleGUI</span>
<span>import</span> PySimpleGUI <span>as</span> sg

layout = [[sg.Text(<span>"What's your name?"</span>)], [sg.Input()], [sg.Button(<span>'Ok'</span>)]]
window = sg.Window(<span>'Window Title'</span>, layout)
event, values = window.read()
print(<span>f'Hello <span>{values[<span>0</span>]}</span>!'</span> <span>if</span> event == <span>'Ok'</span> <span>else</span> <span>''</span>)
</code></pre></div>

<div><h2 id="appendix"><a href="#appendix" name="appendix">#</a>Appendix</h2><div><h3 id="cython">Cython</h3><p><strong>Library that compiles Python code into C.</strong></p><pre><code><span># $ pip3 install cython</span>
<span>import</span> pyximport; pyximport.install()
<span>import</span> &lt;cython_script&gt;
&lt;cython_script&gt;.main()
</code></pre></div></div>



<div><h4 id="definitions">Definitions:</h4><ul>
<li><strong>All <code><span>'cdef'</span></code> definitions are optional, but they contribute to the speed-up.</strong></li>
<li><strong>Script needs to be saved with a <code><span>'pyx'</span></code> extension.</strong></li>
</ul><pre><code>cdef &lt;ctype&gt; &lt;var_name&gt; = &lt;el&gt;
cdef &lt;ctype&gt;[n_elements] &lt;var_name&gt; = [&lt;el&gt;, &lt;el&gt;, ...]
cdef &lt;ctype/void&gt; &lt;func_name&gt;(&lt;ctype&gt; &lt;arg_name&gt;): ...
</code></pre></div>


<pre><code>cdef <span><span>class</span> &lt;<span>class_name</span>&gt;:</span>
    cdef public &lt;ctype&gt; &lt;attr_name&gt;
    <span><span>def</span> <span>__init__</span><span>(self, &lt;ctype&gt; &lt;arg_name&gt;)</span>:</span>
        self.&lt;attr_name&gt; = &lt;arg_name&gt;
</code></pre>
<pre><code>cdef enum &lt;enum_name&gt;: &lt;member_name&gt;, &lt;member_name&gt;, ...
</code></pre>
<div><h3 id="pyinstaller">PyInstaller</h3><pre><code>$ pip3 install pyinstaller
$ pyinstaller script.py                        <span># Compiles into './dist/script' directory.</span>
$ pyinstaller script.py --onefile              <span># Compiles into './dist/script' console app.</span>
$ pyinstaller script.py --windowed             <span># Compiles into './dist/script' windowed app.</span>
$ pyinstaller script.py --add-data '&lt;path&gt;:.'  <span># Adds file to the root of the executable.</span>
</code></pre></div>

<ul>
<li><strong>File paths need to be updated to <code><span>'os.path.join(sys._MEIPASS, &lt;path&gt;)'</span></code>.</strong></li>
</ul>
<div><h3 id="basicscripttemplate">Basic Script Template</h3><pre><code><span>#!/usr/bin/env python3</span>
<span>#</span>
<span># Usage: .py</span>
<span>#</span>

<span>from</span> sys <span>import</span> argv, exit
<span>from</span> collections <span>import</span> defaultdict, namedtuple
<span>from</span> dataclasses <span>import</span> make_dataclass
<span>from</span> enum <span>import</span> Enum
<span>import</span> functools <span>as</span> ft, itertools <span>as</span> it, operator <span>as</span> op, re


<span><span>def</span> <span>main</span><span>()</span>:</span>
    <span>pass</span>


<span>###</span>
<span>##  UTIL</span>
<span>#</span>

<span><span>def</span> <span>read_file</span><span>(filename)</span>:</span>
    <span>with</span> open(filename, encoding=<span>'utf-8'</span>) <span>as</span> file:
        <span>return</span> file.readlines()


<span>if</span> __name__ == <span>'__main__'</span>:
    main()
</code></pre></div>

<div><h2 id="index"><a href="#index" name="index">#</a>Index</h2><ul><li><strong>Only available in the <a href="https://transactions.sendowl.com/products/78175486/4422834F/view">PDF</a>.</strong></li>
<li><strong>Ctrl+F / ⌘F is usually sufficient.</strong></li>
<li><strong>Searching <code><span>'#&lt;title&gt;'</span></code> will limit the search to the titles.</strong></li>
</ul></div>
 

  

  <span><i></i></span>

  
  
  
  
  
  



</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lit: Simple, fast web components (180 pts)]]></title>
            <link>https://lit.dev/</link>
            <guid>36806747</guid>
            <pubDate>Thu, 20 Jul 2023 21:05:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lit.dev/">https://lit.dev/</a>, See on <a href="https://news.ycombinator.com/item?id=36806747">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><section id="intro"><div id="splashLogo" role="heading" aria-level="1"><p><img fetchpriority="high" src="https://lit.dev/images/logo.svg" aria-label="Lit" width="425" height="200"></p></div><p id="tagline"><span>Simple.</span> <span>Fast.</span> <span>Web Components.</span></p></section><div id="advantages"><div><div><p><img fetchpriority="high" loading="lazy" src="https://lit.dev/images/home/standards.svg" width="300" height="300" alt=""></p><h2>Simple</h2></div><p>Skip the boilerplate</p><p>Building on top of the Web Components standards, Lit adds just what you need to be happy and productive: reactivity, declarative templates and a handful of thoughtful features to reduce boilerplate and make your job easier. Every Lit feature is carefully designed with web platform evolution in mind.</p></div><div><div><p><img fetchpriority="high" loading="lazy" src="https://lit.dev/images/home/lightning.svg" width="300" height="300" alt=""></p><h2>Fast</h2></div><p>Tiny footprint, instant updates</p><p>Weighing in at around 5 KB (minified and compressed), Lit helps keep your bundle size small and your loading time short. And rendering is blazing fast, because Lit touches only the dynamic parts of your UI when updating — no need to rebuild a virtual tree and diff it with the DOM.</p></div><div><div><p><img fetchpriority="high" loading="lazy" src="https://lit.dev/images/home/future.svg" width="300" height="300" alt=""></p><h2>Web Components</h2></div><p>Interoperable &amp; future-ready</p><p>Every Lit component is a native web component, with the superpower of interoperability. Web components work anywhere you use HTML, with any framework or none at all. This makes Lit ideal for building shareable components, design systems, or maintainable, future-ready sites and apps.</p></div></div><div id="tour"><div id="tourCode"><litdev-code-language-switch></litdev-code-language-switch><div id="tourTsCode"><figure><pre role="presentation"><span role="presentation"><span>import</span> {<span>html</span>, <span>css</span>, <span>LitElement</span>} <span>from</span> <span>'lit'</span>;</span></pre><pre role="presentation"><span role="presentation"><span>import</span> {<span>customElement</span>, <span>property</span>} <span>from</span> <span>'lit/decorators.js'</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">@<span>customElement</span>(<span>'simple-greeting'</span>)</span></pre><pre role="presentation"><span role="presentation"><span>export</span> <span>class</span> <span>SimpleGreeting</span> <span>extends</span> <span>LitElement</span> {</span></pre><pre role="presentation"><span role="presentation">  <span>static</span> <span>styles</span> <span>=</span> <span>css</span><span>`</span><span>p</span> { <span>color</span>: <span>blue</span> }<span>`</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  @<span>property</span>()</span></pre><pre role="presentation"><span role="presentation">  <span>name</span> <span>=</span> <span>'Somebody'</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>render</span>() {</span></pre><pre role="presentation"><span role="presentation">    <span>return</span> <span>html</span><span>`</span><span>&lt;p&gt;</span>Hello, <span>${</span><span>this</span>.<span>name</span><span>}</span>!<span>&lt;/p&gt;</span><span>`</span>;</span></pre><pre role="presentation"><span role="presentation">  }</span></pre><pre role="presentation"><span role="presentation">}</span></pre></figure></div><div id="tourJsCode"><figure><pre role="presentation"><span role="presentation"><span>import</span> {<span>html</span>, <span>css</span>, <span>LitElement</span>} <span>from</span> <span>'lit'</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation"><span>export</span> <span>class</span> <span>SimpleGreeting</span> <span>extends</span> <span>LitElement</span> {</span></pre><pre role="presentation"><span role="presentation">  <span>static</span> <span>styles</span> = <span>css</span><span>`</span><span>p</span> { <span>color</span>: <span>blue</span> }<span>`</span>;</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>static</span> <span>properties</span> <span>=</span> {</span></pre><pre role="presentation"><span role="presentation">    <span>name</span>: {<span>type</span>: <span>String</span>},</span></pre><pre role="presentation"><span role="presentation">  };</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>constructor</span>() {</span></pre><pre role="presentation"><span role="presentation">    <span>super</span>();</span></pre><pre role="presentation"><span role="presentation">    <span>this</span>.<span>name</span> <span>=</span> <span>'Somebody'</span>;</span></pre><pre role="presentation"><span role="presentation">  }</span></pre><pre role="presentation"><span role="presentation"><span cm-text="">
</span></span></pre><pre role="presentation"><span role="presentation">  <span>render</span>() {</span></pre><pre role="presentation"><span role="presentation">    <span>return</span> <span>html</span><span>`</span><span>&lt;p&gt;</span>Hello, <span>${</span><span>this</span>.<span>name</span><span>}</span>!<span>&lt;/p&gt;</span><span>`</span>;</span></pre><pre role="presentation"><span role="presentation">  }</span></pre><pre role="presentation"><span role="presentation">}</span></pre><pre role="presentation"><span role="presentation"><span>customElements</span>.<span>define</span>(<span>'simple-greeting'</span>, <span>SimpleGreeting</span>);</span></pre></figure></div><div id="tourHtmlCode"><figure><pre role="presentation"><span role="presentation"><span>&lt;simple-greeting</span> <span>name</span>=<span>"World"</span><span>&gt;&lt;/simple-greeting&gt;</span></span></pre></figure></div><p><a id="playgroundLink" href="https://lit.dev/playground/">Edit this example in the Lit Playground</a></p></div><div id="tourNotes"><div id="tourNoteCustomElements" tabindex="0"><h2>Custom Elements</h2><p>Lit components are standard <em>custom elements</em>, so the browser treats them exactly like built-in elements. Use them in hand-written HTML or framework code, output them from your CMS or static site builder, even create instances in JavaScript — they just work!</p></div><div id="tourNoteStyles" tabindex="0"><h2>Scoped styles</h2><p>Lit scopes your styles by default, using <em>Shadow DOM</em>. This keeps your CSS selectors simple and ensures that your component’s styles don't affect — and aren't affected by — any other styles on the page.</p></div><div id="tourNoteProperties" tabindex="0"><h2>Reactive properties</h2><p>Declare <em>reactive properties</em> to model your component’s API and internal state. A Lit component efficiently re-renders whenever a reactive property (or corresponding HTML attribute) changes.</p></div><div id="tourNoteTemplates" tabindex="0"><h2>Declarative templates</h2><p>Lit templates, based on <em>tagged template literals</em>, are simple, expressive and fast, featuring HTML markup with native JavaScript expressions inline. No custom syntax to learn, no compilation required.</p></div></div></div><section id="buildAnythingWrapper"><h2>Build anything with Lit</h2><div id="buildAnything"><div><div><h2>Shareable Components</h2></div><p>Need to deliver interactive content or features that drop into any site, built on any stack? Because they're natively supported by browsers, web components are the perfect solution — and Lit makes them easy to build.</p></div><div><div><h2>Design Systems</h2></div><p>A design system helps you create experiences that are consistently excellent and on brand. But what if your organization uses multiple frameworks? With Lit, you can build one set of components that works for every team.</p></div><div><div><h2>Sites and Apps</h2></div><p>Use Lit components to progressively enhance a static site, or build an entire app. By embracing Web Components, Lit minimizes lock-in and promotes maintainability: update or migrate one component at a time, without disrupting product development.</p></div></div></section><div id="whoIsUsing"><h2>Many of the world's most forward-looking organizations are building with Lit</h2></div><section id="explore"><h2>Explore Lit</h2><div id="exploreItems"><h2>Try our live tutorials — no installation needed</h2><p><a href="https://lit.dev/tutorials/">Tutorials</a></p></div></section><div id="connect"><div id="connectLhs"><h2>Connect with Lit and the web components community</h2><p>Stay up to date with new releases, learn more about how to use web components and share projects and feedback with our team. All community participation is subject to Lit’s Code of Conduct — be excellent to each other!</p></div><div id="connectRhs"><ol id="connectList"><li><a href="https://lit.dev/discord/" target="_blank" rel="noopener"><span>Lit Discord</span> <span>Chat about Lit with the Lit community and dev team</span></a></li><li><a href="https://twitter.com/buildWithLit" target="_blank" rel="noopener"><span>Twitter</span> <span>Stay up to date with the latest news</span></a></li><li><a href="https://github.com/lit/lit/" target="_blank" rel="noopener"><span>GitHub</span> <span>File issues, read the code, and make contributions</span></a></li><li><a href="https://stackoverflow.com/questions/tagged/lit+or+lit-html+or+lit-element" target="_blank" rel="noopener"><span>Stack Overflow</span> <span>Ask and answer questions about Lit</span></a></li></ol></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Oxide Computer: Docs (268 pts)]]></title>
            <link>https://docs.oxide.computer/guides/introduction</link>
            <guid>36806539</guid>
            <pubDate>Thu, 20 Jul 2023 20:48:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://docs.oxide.computer/guides/introduction">https://docs.oxide.computer/guides/introduction</a>, See on <a href="https://news.ycombinator.com/item?id=36806539">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><div><h2 data-sectnum=""><a id="_overview"></a><a href="#_overview">Overview</a></h2><div><p>Oxide Computer is an efficient, rack-scale computing system complete with hardware and software. It has many of the same benefits of cloud hyperscale infrastructure in terms of developer productivity but at a much lower long-term infrastructure cost. The product is intended for use in on-premises deployments and the unit of purchase is a fully-integrated rack of systems.</p><p>The rack consists of several major components:</p><div><ul><li><p>Up to 32 "Gimlet" Compute Sleds, each featuring:</p><div><ul><li><p>One 225W TDP 64-core AMD Milan CPU</p></li><li><p>Support for up to 1 TiB of DRAM across 16 DIMMs (2 DIMMs per channel)</p></li><li><p>8-12 front-facing hot-swappable PCIe Gen 4 U.2 storage devices</p></li><li><p>2 internal M.2 devices</p></li><li><p>2 ports of 100 GbE networking</p></li><li><p>Root of Trust (RoT) and Service Processor (SP)</p></li></ul></div></li><li><p>Two "Sidecar" Rack Switches, featuring:</p><div><ul><li><p>Based on Intel’s Tofino 2 ASIC supporting 64 200 GbE ports</p></li><li><p>32 front facing QSFP28 ports for uplink and inter-rack connectivity</p></li><li><p>32 rear facing ports that are blind mated to servers</p></li><li><p>Integrated management network ASIC</p></li><li><p>Root of Trust (RoT) and Service Processor (SP)</p></li><li><p>Termination of presence and power control auxiliary signals</p></li><li><p>Connects to a server over PCIe for Tofino 2 ASIC management</p></li></ul></div></li><li><p>An Integrated AC→DC Power Shelf:</p><div><ul><li><p>Able to deliver 15 kW of power to the rack at 54.5V</p></li><li><p>Supports 6 rectifiers in N+1 or N+N configuration</p></li><li><p>Contains an Oxide Power Shelf Controller (PSC)</p><div><ul><li><p>Provides telemetry and management for the power shelf</p></li><li><p>Root of Trust (RoT) and Service Processor (SP)</p></li></ul></div></li></ul></div></li><li><p>A custom cabled backplane:</p><div><ul><li><p>Allows all servers to blind mate all Ethernet, power, and auxiliary signaling</p></li><li><p>With planned support for up to 200GBASE-CR4</p></li></ul></div></li><li><p>A fiber patch panel</p></li><li><p>An integrated control plane:</p><div><ul><li><p>Comes with an API, a portal, and various SDKs through which operators and developers can provision compute infrastructure (virtual machines), storage (elastic block storage), and networking (VPC-like networking capabilities)</p></li><li><p>Provides operator the visibility into major rack component information such as software version, status, health, and other useful metrics</p></li></ul></div></li></ul></div><p>Racks will eventually be connected together to build a single pool of infrastructure (from a management and user perspective). Support for this is currently not available but is a key priority on the product roadmap.</p></div></div><div><h2 data-sectnum=""><a id="_feature_highlights"></a><a href="#_feature_highlights">Feature Highlights</a></h2><div><div><h3 data-sectnum=".."><a id="_device_placement_and_cabling"></a><a href="#_device_placement_and_cabling">Device Placement and Cabling</a></h3><div><p>The rack form factor is based on the OCP Open Rack version 3 (ORV3). It uses a Cubby design for physical housing of compute servers. Each cubby consists of two side-by-side bays and occupies 2 Open U (96mm) in height each. These cubbies provide a fixed-pitch mechanical framework for servers, allowing the units to be hot pluggable/unpluggable during maintenance.</p><p>To support full serviceability from the front (cold aisle), the rack cable management design allows a trench running under each cubby to route any rear-facing cabling from back to front.</p></div></div><div><h3 data-sectnum=".."><a id="_power_surface_and_distribution"></a><a href="#_power_surface_and_distribution">Power Surface and Distribution</a></h3><div><p>For optimal efficiency, power is distributed throughout a single power shelf via a low-voltage DC bus bar pair, with the maximum power consumption below 18 kW.</p><p>The out-of-band management interface for the power shelf is a RJ-45 Ethernet port on each of the two switches that allows access from the network. The ports, located on the front panel, are connected over 1000BASE-T (or equivalent) Cat 6 cables to the uplinks.</p></div></div><div><h3 data-sectnum=".."><a id="_compute_servers"></a><a href="#_compute_servers">Compute Servers</a></h3><div><p>Each computer server, also known as “sled”, uses a single AMD Milan processor package. The processor choice is based on factors such as performance, power and thermal characteristics, price, susceptibility to known security vulnerabilities, as well as other architectural and operational considerations. The choice of NVMe storage and NIC is also based on rigorous evaluations of many of the same factors.</p><p>Every Oxide system board includes a hardware root-of-trust and an embedded service processor in place of the traditional BMC design incorporated into servers.</p></div></div><div><h3 data-sectnum=".."><a id="_backplane"></a><a href="#_backplane">Backplane</a></h3><div><p>The Identity and Presence Backplane (IPB) encompasses a series of small PCBAs and cabling that allows each server to identify its location within the rack, and a central management server to determine the number of cubbies in the rack and the current population status of each.</p></div></div><div><h3 data-sectnum=".."><a id="_virtual_machine_and_network_management"></a><a href="#_virtual_machine_and_network_management">Virtual Machine and Network Management</a></h3><div><p>VM instance and networking features are designed to provide a self-service experience similar to that of public clouds. Virtual machines support Unicast traffic with emulated broadcast/multicast for ARP/NDP. Useful defaults are provided for getting started quickly whereas full customization is available for more advanced workload deployment.</p><p>Each project is given their own notion of a Virtual Private Cloud (VPC) for address control, isolation, and traffic control. Each VPC is built on top of Geneve which provides UDP encapsulation with custom headers.</p><p>Oxide Rack uses Delay Driven Multipath (DDM) for routing internally but interfaces with common networking gear seamlessly. Boundary services leverage Tofino 2 Programmable ASIC and P4 functionality where packets are encapsulated on the way into the rack and decapsulated on the way out. This allows the rack to adapt to different network environments.</p><p>The Oxide Packet Transformation Engine (OPTE) sits between Virtual Machines and Physical Interfaces which services core functionality such as firewalling, routing, NATing, encapsulation and decapsulation. Each sled connects to both switches in the rack via multipath routing for high availability.</p></div></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[IRS moves forward with a new free-file tax return system (408 pts)]]></title>
            <link>https://www.pbs.org/newshour/politics/irs-moves-forward-with-a-new-free-file-tax-return-system-that-has-both-supporters-and-critics-mobilizing</link>
            <guid>36804710</guid>
            <pubDate>Thu, 20 Jul 2023 18:35:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.pbs.org/newshour/politics/irs-moves-forward-with-a-new-free-file-tax-return-system-that-has-both-supporters-and-critics-mobilizing">https://www.pbs.org/newshour/politics/irs-moves-forward-with-a-new-free-file-tax-return-system-that-has-both-supporters-and-critics-mobilizing</a>, See on <a href="https://news.ycombinator.com/item?id=36804710">Hacker News</a></p>
<div id="readability-page-1" class="page"><article itemprop="articleBody">
                <div>
                    <p>WASHINGTON (AP) — An IRS plan to&nbsp;test drive a new electronic free-file tax return system&nbsp;next year has got supporters and critics of the idea mobilizing to sway the public and Congress over whether the government should set up a permanent program to help people file their taxes without needing to pay somebody else to figure out what they owe.</p>
<p>On one side, civil society groups this week launched a coalition to promote the move toward a government-run free-file program. On the other, tax preparation firms like Intuit — the <a href="https://www.pbs.org/newshour/economy/ftc-sues-intuit-to-stop-turbotax-ads-for-free-filings">parent company of TurboTax</a> — and H&amp;R Block have been pouring millions into trying to stop the idea cold.</p>
<p>The advocacy groups are exponentially out-monied.</p>
<p>An April AP analysis found that overall, Intuit, H&amp;R Block, and other private companies and advocacy groups for large tax preparation businesses, as well as proponents in favor of electronic free file, have reported spending $39.3 million since 2006 to lobby on “free-file” and other matters. Federal law doesn’t require domestic lobbyists to itemize expenses by specific issue, so the sums are not limited to free-file.</p>
<p>Intuit spent at least $25.6 million since 2006 on lobbying, H&amp;R Block about $9.6 million and the conservative Americans for Tax Reform roughly $3 million.</p>
<p>In contrast, the NAACP has spent $140,000 lobbying on “free-file” since 2006 and Public Citizen has spent $110,000 in the same time frame.</p>
<p>“What we have on our side is public opinion,” said Igor Volsky, executive director of the liberal Groundwork Action advocacy group.</p>
<p><a href="https://www.pbs.org/newshour/politics/irs-reduces-tax-return-backlog-by-80-percent-and-improves-customer-service"><strong>READ MORE:</strong> IRS reduces tax return backlog by 80 percent and improves customer service, report says</a></p>
<p>Volsky’s organization and leaders from Public Citizen, the Center for the Study of Social Policy, Code for America, the Economic Security Project and others launched the “Coalition for Free and Fair Filing” on Wednesday. The group’s mission is to “ensure all U.S. taxpayers can easily file tax returns and get the tax credits they deserve by safeguarding and expanding” the new IRS program.</p>
<p>“The overwhelming majority of people demand a free-file option,” Volsky said. “Now the question for us is how do you channel that into effective political pressure.”</p>
<p>The IRS in May&nbsp;<a href="https://apnews.com/article/tax-irs-taxpayers-direct-file-ef2e9f92ad45984487fd368b851773af">released a report</a>&nbsp;that said most taxpayers are interested in filing their taxes directly to the IRS for free, and concurrently announced plans to launch the pilot program for the 2024 filing season. The goal is to test a direct file system that will help the IRS decide whether to move forward with a more permanent program.</p>
<p>That idea has faced the immediate threat of budget cuts from congressional Republicans.</p>
<p>Republicans on the House Appropriations Committee in June proposed a budget rider that would&nbsp;<a href="https://appropriations.house.gov/sites/republicans.appropriations.house.gov/files/documents/FY24%20Financial%20Services%20and%20General%20Government%20-%20Full%20Committee%20Mark.pdf">prohibit funds</a>&nbsp;to be used for the IRS to create a government-run tax preparation software, unless approved by a group of House and Senate committees.</p>
<p>The move “safeguards the IRS from an obvious conflict of interest where the tax collector becomes the tax preparer,” the bill’s summary states.</p>
<p>A&nbsp;Government Accountability Report in April 2022 found that 70 percent of taxpayers were eligible to use an existing free-file program but just 3 percent actually used the service. That program consists of a public-private partnership of tax software companies that offers free services to certain taxpayers outside of the IRS website.</p>
<p>Additionally, anyone can prepare and mail in their taxes for free, but the tax code is so complex that almost 50 percent of Americans use a tax prep company. IRS officials have estimated individual taxpayers pay an average of $140 preparing their tax returns each year.</p>
<p>Derrick Plummer, a spokesman for Intuit, stressed the free options that already were available.</p>
<p>“An IRS direct-to-e-file system is redundant and will not be free – not free to build, not free to operate, and not free for taxpayers,” Plummer said, adding that it “will unnecessarily cost taxpayers billions of dollars.”</p>
<p>H&amp;R Block said in a statement the direct e-file pilot “continues to be a solution in search of a problem.”</p>
<p>Citing the free-filing options for Americans under a certain income threshold through the existing&nbsp;<a href="https://www.irs.gov/e-file-providers/about-the-free-file-alliance">Free File Alliance</a>, H&amp;R Block said, “this pilot is unnecessary and faces significant barriers to providing comprehensive tax preparation services.”</p>
<p>H&amp;R Block came under fire after congressional Democrats last week released a report stating that it was one of three large tax preparation firms that sent “extraordinarily sensitive” information on tens of millions of taxpayers to&nbsp;Facebook parent company Meta&nbsp;and Google over the course of at least two years.</p>
<p>Susan Harley, Congress Watch managing director at Public Citizen, said “we’re outgunned as far as money being spent, but we have the moral higher ground” in supporting the free-file program over third-party tax preparers.</p>
<p>Nations like Germany, Japan, the U.K. and other Organization for Economic Cooperation and Development countries already offer their taxpayers some form of pre-populated tax document.</p>
<p>Some countries also use “tax agency reconciliation,” where taxpayers who opt to participate provide the government with basic employment status information and the tax administrator sends them a return with their calculated tax liability.</p>
<p><a href="https://www.nber.org/papers/w30008">Research conducted</a> last year by a group of Treasury, Federal Reserve and other academics shows that the IRS could pre-populate 42 to 48 percent of all tax returns.</p>
<p>The IRS has already seen cuts to its funding since the passage of the&nbsp;Inflation Reduction Act&nbsp;that&nbsp;President Joe Biden signed&nbsp;last August gave the agency $80 billion to modernize and hire more workers and move toward the free-file program.</p>
<p>House Republicans built a $1.4 billion reduction to the IRS into the debt ceiling and budget cuts package passed by Congress this summer. The White House said the debt deal also has a separate agreement to take $20 billion from the IRS over the next two years and divert that money to other non-defense programs.</p>

                </div>
            </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In 1961 a Gallup poll showed only 33% of Americans in favor of moon landing (191 pts)]]></title>
            <link>https://newsletter.pessimistsarchive.org/p/the-moon-landing-was-opposed-by-majority</link>
            <guid>36804394</guid>
            <pubDate>Thu, 20 Jul 2023 18:12:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newsletter.pessimistsarchive.org/p/the-moon-landing-was-opposed-by-majority">https://newsletter.pessimistsarchive.org/p/the-moon-landing-was-opposed-by-majority</a>, See on <a href="https://news.ycombinator.com/item?id=36804394">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><em><strong>Today marks the 54th anniversary of the moon landing.</strong></em><span> In retrospect it has almost unanimous support and adoration in the US. </span><em>However</em><span>, before that giant leap for mankind actually took place - less than one third of Americans were in favor of a moon landing: in 1961 a Gallup poll showed only </span><a href="https://www.newspapers.com/article/arizona-republic/128550438/" rel="">33%</a><span> of Americans in favor.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg" width="956" height="701.8983516483516" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg&quot;,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:1069,&quot;width&quot;:1456,&quot;resizeWidth&quot;:956,&quot;bytes&quot;:1419223,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F42503f30-47ac-4af7-9a27-da9a1913fc9d_7932x5826.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>George Gallup would publish the findings, in an article syndicated in newspapers across the US.</figcaption></figure></div><p><span>This isn’t something you often </span><a href="https://www.theatlantic.com/technology/archive/2012/09/moondoggle-the-forgotten-opposition-to-the-apollo-program/262254/" rel="">hear about</a><span> regarding the history of the moon mission. It is </span><a href="https://www.theatlantic.com/technology/archive/2012/09/moondoggle-the-forgotten-opposition-to-the-apollo-program/262254/" rel="">conveniently ignored</a><span> in the popular mind, in lieu of a story of collective triumph against the USSR, a narrative that pleases the left as an example of the power of public funding and the right, as a triumph of the </span><em>capitalist west</em><span> against the </span><em>communist east</em><span>. The retroactive support now is as bi-partisan as the opposition was then.</span></p><p>Noted fiscal hawk Barry Goldwater dismissed the lofty ambitions of lunar exploration as a "wasteful endeavor," an ironic stance given he voiced his criticism at a glitzy dinner that cost each attendee a cool $100 - close to $1000 in 2023. In the very same year, he decried the United States as "moon struck." President Kennedy’s early suggestion of teaming up with Russia to reach the moon drew opposition from Republicans too.  </p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg" width="1026" height="617.2912087912088" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg&quot;,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:876,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1026,&quot;bytes&quot;:484490,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff0a04b25-35e0-4d21-9147-5c8b47ad0ebd_4772x2870.jpeg 1456w" sizes="100vw"></picture></div></a></figure></div><p><span>Ex-president Dwight D. Eisenhower - the very man responsible for birthing and funding NASA - expressed his own reservations, dismissing Kennedy's lunar ambition as </span><em>"almost hysterical"</em><span> saying </span><em>“Anybody who would spend $40 billion in a race to the moon for national prestige is nuts…” </em><span>Other Republicans labelled it a Moondoggle - a term coined in 1961 by AI pioneer (and </span><a href="https://newsletter.pessimistsarchive.org/p/the-original-ai-doomer-dr-norbert" rel="">original AI doomer</a><span>) Norbert Wiener - who held </span><a href="https://links.org.au/socialism-norbert-wiener#:~:text=Wiener%20was%20also%20a%20highly,which%20he%20linked%20to%20capitalism." rel="">noted</a><span> left wing views. More left wing opposition revolved around the desire for more spending on the needs of citizens.</span></p><p><a href="https://site.nhd.org/73136591/uploaded/Public_Opinion_Polls_and_Perceptions_of.pdf" rel="">Aggregations</a><span> of opinion polls in the 1960s and 70s have shown approval of the moon landing was consistently lower than disapproval. Even astronomers polled, were majority against the mission. Only in the weeks before the moon mission was approval </span><a href="https://www.newspapers.com/article/the-bangor-daily-news/128556617/" rel="">recorded</a><span> at 51% in one Harris poll.</span></p><p><span>In the aftermath of the moon landing, approval for that specific mission didn’t </span><a href="https://www.theatlantic.com/technology/archive/2012/09/moondoggle-the-forgotten-opposition-to-the-apollo-program/262254/" rel="">meaningfully budge</a><span>. 47% said it was worth it a decade later, in 1979 and it would take 20 years for amnesia to set it and this number to reach 77% in 1989. Meanwhile opposition to further moon missions remained higher than support for one until at least the mid-1990s. The US hasn’t been back to the moon since 1972.</span></p><p>Lack of ambition by NASA was one of the reasons that prompted some of America’s wealthiest to move space exploration beyond the realms of nation states, with numerous private individuals exploring the star with some - like Jeff Bezos and Elon Musk securing NASA contracts for among other things, a new moon landing.</p><p><span>This time around, fiscal conservatives are less opposed, since private efficiencies  like re-usable rockets have lowered the tax burden of space exploration. Left wing critics like Bernie Sanders </span><a href="https://www.theguardian.com/commentisfree/2022/apr/22/jeff-bezos-space-elon-musk-billionaires-bernie-sanders" rel="">complain</a><span> - argue in outlets like The Guardian - that those private dollars invested in space ought to have been taxed away to fund public programs like Apollo - ignoring the fact those kind of programs have always been politically unpopular. Sanders would have likely made the </span><a href="https://www.thedailybeast.com/bernie-sanders-would-have-voted-against-the-moon-landing" rel="">same arguments</a><span> about Apollo had he been a Senator in the 1960s.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png" width="496" height="585.3619834710744" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1428,&quot;width&quot;:1210,&quot;resizeWidth&quot;:496,&quot;bytes&quot;:1502806,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1cc99d32-898c-404a-8897-6ce2c750ba16_1210x1428.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Ironically in July 1969, that same out let in which Sanders wrote - </span><em>The Guardian -</em><span> </span><a href="https://twitter.com/PessimistsArc/status/1417468837151264772" rel="">called</a><span> a teachers’ union officer a </span><em>“cynic”</em><span> for calling America’s moonshot </span><em>“A trivial prestige exercise”</em><span> that </span><em>“ignored the social conditions existing in the world”,</em><span> reporting that when man first set foot on the moon, he had not even been watching it on TV.</span></p><p data-attrs="{&quot;url&quot;:&quot;https://newsletter.pessimistsarchive.org/?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share Pessimists Archive Newsletter&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://newsletter.pessimistsarchive.org/?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share Pessimists Archive Newsletter</span></a></p><p><span>We recommend </span><em><a href="http://newart.press/" rel="">Newart.Press</a><span>, </span></em><span>a publication exploring the past of creativity and technology, to help us understand the future.</span></p><p><em>Recommended reads:</em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif" width="272" height="56.41481481481482" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif&quot;,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:56,&quot;width&quot;:270,&quot;resizeWidth&quot;:272,&quot;bytes&quot;:1081645,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/gif&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F929ec824-cdc2-46d0-8e1b-67e6b1fe0d77_270x56.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div data-attrs="{&quot;url&quot;:&quot;e_trim:10:transparent/h_56,c_limit,f_auto,q_auto:good,fl_progressive:steep/https://substack-post-media.s3.amazonaws.com/public/images/effe6ef7-3afa-4fd2-924a-d4c83951ae0a_757x157.gif&quot;}" data-component-name="AssetErrorToDOM"><picture><img src="https://newsletter.pessimistsarchive.org/img/missing-image.png" height="455" width="728"></picture></div></div></article></div></div>]]></description>
        </item>
    </channel>
</rss>