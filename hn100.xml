<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 12 Apr 2025 23:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Nice Things with SVG (269 pts)]]></title>
            <link>https://fuma-nama.vercel.app/blog/svg-art</link>
            <guid>43666439</guid>
            <pubDate>Sat, 12 Apr 2025 17:40:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fuma-nama.vercel.app/blog/svg-art">https://fuma-nama.vercel.app/blog/svg-art</a>, See on <a href="https://news.ycombinator.com/item?id=43666439">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><a href="#svg"></a>
<p>More about SVG.
Note that the example code is written in JSX (or React), not ordinary HTML.</p>
<a href="#animated-wires"><h3 id="animated-wires"><span>#</span>Animated Wires</h3></a>
<p>Make the line, using <code>line</code> or <code>path</code>.</p>
<svg viewBox="0 0 50 50"><g><line x1="0" y1="0" x2="0" y2="50" stroke="white" stroke-width="1"></line></g></svg>
<pre tabindex="0"><code><span><span>&lt;</span><span>svg</span><span> viewBox</span><span>=</span><span>"0 0 50 50"</span><span> className</span><span>=</span><span>"bg-neutral-900 max-w-[100px] mx-auto"</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>g</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>line</span><span> x1</span><span>=</span><span>"0"</span><span> y1</span><span>=</span><span>"0"</span><span> x2</span><span>=</span><span>"0"</span><span> y2</span><span>=</span><span>"50"</span><span> stroke</span><span>=</span><span>"white"</span><span> strokeWidth</span><span>=</span><span>"1"</span><span> /&gt;</span></span>
<span><span>  &lt;/</span><span>g</span><span>&gt;</span></span>
<span><span>&lt;/</span><span>svg</span><span>&gt;</span></span>
<span></span></code></pre>
<p>Make it a mask.</p>
<svg viewBox="0 0 50 50"><g><rect x="0" y="0" width="50" height="10" fill="red" mask="url(#line)"></rect><mask id="line"><line id="" x1="0" y1="0" x2="0" y2="50" stroke="white" stroke-width="1"></line></mask></g></svg>
<pre tabindex="0"><code><span><span>&lt;</span><span>svg</span><span> viewBox</span><span>=</span><span>"0 0 50 50"</span><span> className</span><span>=</span><span>"bg-neutral-900 max-w-[100px] mx-auto"</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>g</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>rect</span><span> x</span><span>=</span><span>"0"</span><span> y</span><span>=</span><span>"0"</span><span> width</span><span>=</span><span>"50"</span><span> height</span><span>=</span><span>"10"</span><span> fill</span><span>=</span><span>"red"</span><span> mask</span><span>=</span><span>"url(#line)"</span><span> /&gt;</span></span>
<span><span>    &lt;</span><span>mask</span><span> id</span><span>=</span><span>"line"</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>line</span><span> id</span><span>=</span><span>""</span><span> x1</span><span>=</span><span>"0"</span><span> y1</span><span>=</span><span>"0"</span><span> x2</span><span>=</span><span>"0"</span><span> y2</span><span>=</span><span>"50"</span><span> stroke</span><span>=</span><span>"white"</span><span> strokeWidth</span><span>=</span><span>"1"</span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span>mask</span><span>&gt;</span></span>
<span><span>  &lt;/</span><span>g</span><span>&gt;</span></span>
<span><span>&lt;/</span><span>svg</span><span>&gt;</span></span>
<span></span></code></pre>
<p>Add animation.</p>
<svg viewBox="0 0 50 50"><g><rect x="0" y="0" width="50" height="10" fill="red" mask="url(#animated_line)" style="animation:to-down linear infinite 2s"></rect><mask id="animated_line"><line x1="0" y1="0" x2="0" y2="50" stroke="white" stroke-width="1"></line></mask></g></svg>

<pre tabindex="0"><code><span><span>&lt;</span><span>svg</span><span> viewBox</span><span>=</span><span>"0 0 50 50"</span><span> className</span><span>=</span><span>"bg-neutral-900 max-w-[100px] mx-auto"</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>g</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>rect</span></span>
<span><span>      x</span><span>=</span><span>"0"</span></span>
<span><span>      y</span><span>=</span><span>"0"</span></span>
<span><span>      width</span><span>=</span><span>"50"</span></span>
<span><span>      height</span><span>=</span><span>"10"</span></span>
<span><span>      fill</span><span>=</span><span>"red"</span></span>
<span><span>      mask</span><span>=</span><span>"url(#animated_line)"</span></span>
<span><span>      style</span><span>=</span><span>{{</span></span>
<span><span>        animation: </span><span>"to-down linear infinite 2s"</span><span>,</span></span>
<span><span>      }}</span></span>
<span><span>    /&gt;</span></span>
<span><span>    &lt;</span><span>mask</span><span> id</span><span>=</span><span>"animated_line"</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>line</span><span> x1</span><span>=</span><span>"0"</span><span> y1</span><span>=</span><span>"0"</span><span> x2</span><span>=</span><span>"0"</span><span> y2</span><span>=</span><span>"50"</span><span> stroke</span><span>=</span><span>"white"</span><span> strokeWidth</span><span>=</span><span>"1"</span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span>mask</span><span>&gt;</span></span>
<span><span>  &lt;/</span><span>g</span><span>&gt;</span></span>
<span><span>&lt;/</span><span>svg</span><span>&gt;</span></span>
<span></span></code></pre>
<pre tabindex="0"><code><span><span>@keyframes</span><span> to-down</span><span> {</span></span>
<span><span>  0%</span><span> {</span></span>
<span><span>    transform</span><span>: </span><span>translateY</span><span>(</span><span>-10</span><span>px</span><span>);</span></span>
<span><span>  }</span></span>
<span></span>
<span><span>  100%</span><span> {</span></span>
<span><span>    transform</span><span>: </span><span>translateY</span><span>(</span><span>50</span><span>px</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<p>Make styles.</p>
<svg viewBox="0 0 50 50"><g><line x1="0" y1="0" x2="0" y2="50" stroke="rgb(50,50,50)" stroke-width="2"></line><rect x="0" y="0" width="100%" height="20" fill="url(#line_color)" mask="url(#animated_line_fancy)" style="--height:20px;animation:to-down-2 linear infinite 3s"></rect><defs><linearGradient id="line_color" x1="0" x2="0" y1="0" y2="1"><stop offset="0%" stop-color="rgba(255,0,255,0.1)"></stop><stop offset="100%" stop-color="rgb(255,100,255)"></stop></linearGradient></defs><mask id="animated_line_fancy"><line x1="0" y1="0" x2="0" y2="50" stroke="white" stroke-width="2"></line></mask></g></svg>

<pre tabindex="0"><code><span><span>&lt;</span><span>svg</span><span> viewBox</span><span>=</span><span>"0 0 50 50"</span><span> className</span><span>=</span><span>"bg-neutral-900 max-w-[100px] mx-auto"</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>g</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>line</span><span> x1</span><span>=</span><span>"0"</span><span> y1</span><span>=</span><span>"0"</span><span> x2</span><span>=</span><span>"0"</span><span> y2</span><span>=</span><span>"50"</span><span> stroke</span><span>=</span><span>"rgb(50,50,50)"</span><span> strokeWidth</span><span>=</span><span>"2"</span><span> /&gt;</span></span>
<span><span>    &lt;</span><span>rect</span></span>
<span><span>      x</span><span>=</span><span>"0"</span></span>
<span><span>      y</span><span>=</span><span>"0"</span></span>
<span><span>      width</span><span>=</span><span>"100%"</span></span>
<span><span>      height</span><span>=</span><span>"20"</span></span>
<span><span>      fill</span><span>=</span><span>"url(#line_color)"</span></span>
<span><span>      mask</span><span>=</span><span>"url(#animated_line_fancy)"</span></span>
<span><span>      style</span><span>=</span><span>{{</span></span>
<span><span>        "--height"</span><span>: </span><span>"20px"</span><span>,</span></span>
<span><span>        animation: </span><span>"to-down-2 linear infinite 3s"</span><span>,</span></span>
<span><span>      }}</span></span>
<span><span>    /&gt;</span></span>
<span><span>    &lt;</span><span>defs</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>linearGradient</span><span> id</span><span>=</span><span>"line_color"</span><span> x1</span><span>=</span><span>"0"</span><span> x2</span><span>=</span><span>"0"</span><span> y1</span><span>=</span><span>"0"</span><span> y2</span><span>=</span><span>"1"</span><span>&gt;</span></span>
<span><span>        &lt;</span><span>stop</span><span> offset</span><span>=</span><span>"0%"</span><span> stopColor</span><span>=</span><span>"rgba(255,0,255,0.1)"</span><span> /&gt;</span></span>
<span><span>        &lt;</span><span>stop</span><span> offset</span><span>=</span><span>"100%"</span><span> stopColor</span><span>=</span><span>"rgb(255,100,255)"</span><span> /&gt;</span></span>
<span><span>      &lt;/</span><span>linearGradient</span><span>&gt;</span></span>
<span><span>    &lt;/</span><span>defs</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>mask</span><span> id</span><span>=</span><span>"animated_line_fancy"</span><span>&gt;</span></span>
<span><span>      &lt;</span><span>line</span><span> x1</span><span>=</span><span>"0"</span><span> y1</span><span>=</span><span>"0"</span><span> x2</span><span>=</span><span>"0"</span><span> y2</span><span>=</span><span>"50"</span><span> stroke</span><span>=</span><span>"white"</span><span> strokeWidth</span><span>=</span><span>"2"</span><span> /&gt;</span></span>
<span><span>    &lt;/</span><span>mask</span><span>&gt;</span></span>
<span><span>  &lt;/</span><span>g</span><span>&gt;</span></span>
<span><span>&lt;/</span><span>svg</span><span>&gt;</span></span>
<span></span></code></pre>
<pre tabindex="0"><code><span><span>@keyframes</span><span> to-down-2</span><span> {</span></span>
<span><span>  0%</span><span> {</span></span>
<span><span>    transform</span><span>: </span><span>translateY</span><span>(</span><span>calc</span><span>(</span><span>var</span><span>(</span><span>--height</span><span>) </span><span>*</span><span> -1</span><span>));</span></span>
<span><span>  }</span></span>
<span></span>
<span><span>  100%</span><span> {</span></span>
<span><span>    transform</span><span>: </span><span>translateY</span><span>(</span><span>100</span><span>%</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<p>Most of these similar things are using the same technique.
Mask out an animated block, putting some animations and probably designed some parts in Figma or other SVG editors.</p>
<p><a href="https://unkey.dev/" target="_blank" rel="noreferrer noopener">Unkey</a>'s landing page is a nice example.</p>
<a href="#clerk-toc"><h3 id="clerk-toc"><span>#</span>Clerk TOC</h3></a>
<p>I made a clerk-like style Table Of Contents (TOC) on <a href="https://fumadocs.vercel.app/" target="_blank" rel="noreferrer noopener">Fumadocs</a>, you can try it out and play with the nice TOC.</p>
<div><p><img src="https://fuma-nama.vercel.app/blog/fumadocs-toc.png" alt="preview"></p></div>
<p>To implement it, we have to render the TOC outline on server, without client-side JavaScript to make it compatible with SSR.</p>
<p>Since we're on server, we don't know the exact positions of elements.
My approach is to use <code>absolute</code> positions, render the outline as different "components", and snitch them together.</p>
<p><img src="https://fuma-nama.vercel.app/blog/toc.png" alt="toc"></p>
<p>This isn't hard, but we also want to render a highlighted part of outline where the items are active, or their corresponding heading is visible in the viewport.</p>
<p>Like:</p>
<p><img src="https://fuma-nama.vercel.app/blog/clerk-toc-highlight.png" alt="example"></p>
<p>I'll call it the <strong>thumb</strong>. It has to be animated, so we can't just change the color of these outline components.</p>
<p><img src="https://fuma-nama.vercel.app/blog/toc-2.png" alt="toc"></p>
<p>We cannot animate the thumb with simple CSS solutions, lucky we have the exact rendered positions of TOC items, since the thumb is meant to be interactive, it is <strong>rendered on client!</strong></p>
<p>Using the information from our browser, we can construct a "mask map" on client, look like this:</p>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14 236"><path d="M1 0 L1 20 L13 36 L13 56 L1 72 L1 92 L13 108 L13 128 L1 144 L1 164 L1 180 L1 200 L13 216 L13 236" stroke="white" stroke-width="1" fill="none"></path></svg>
<p>The method to construct this map is <strong>SVG</strong> - yes, our old friend.</p>
<pre tabindex="0"><code><span><span>&lt;</span><span>svg</span><span> xmlns</span><span>=</span><span>"http://www.w3.org/2000/svg"</span><span> viewBox</span><span>=</span><span>"0 0 14 236"</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>path</span></span>
<span><span>    d</span><span>=</span><span>"M1 0 L1 20 L13 36 L13 56 L1 72 L1 92 L13 108 L13 128 L1 144 L1 164 L1 180 L1 200 L13 216 L13 236"</span></span>
<span><span>    stroke</span><span>=</span><span>"white"</span></span>
<span><span>    strokeWidth</span><span>=</span><span>"1"</span></span>
<span><span>    fill</span><span>=</span><span>"none"</span></span>
<span><span>  /&gt;</span></span>
<span><span>&lt;/</span><span>svg</span><span>&gt;</span></span>
<span></span></code></pre>
<p>The <code>d</code> property of SVG <code>&lt;path /&gt;</code> isn't a nonsense auto-generated string, it's a list of commands.
See the <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths" target="_blank" rel="noreferrer noopener">Web Docs</a> for more details, it's quite a powerful tool.</p>
<p>With our new tool, we can tell SVG to render a line connecting each point of the outline.</p>
<p><img src="https://fuma-nama.vercel.app/blog/toc-3.png" alt="toc"></p>
<p>This constructed a SVG that's <em>identical</em> to our original TOC outline pre-rendered on server.</p>
<p>Similar to the technique we've learnt from Animated Wires, we can use the CSS <code>mask-image</code> property to mask an animated <code>div</code> block to render the thumb - a highlighted part of outline.</p>
<pre tabindex="0"><code><span><span>&lt;</span><span>div</span></span>
<span><span>  style</span><span>=</span><span>{{</span></span>
<span><span>    maskImage: </span><span>`url("data:image/svg+xml,${</span></span>
<span><span>      // URI encoded SVG image</span></span>
<span><span>      encodeURIComponent</span><span>(</span></span>
<span><span>        `&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14 236"&gt;...&lt;/svg&gt;`</span></span>
<span><span>      )</span></span>
<span><span>    })`</span><span>,</span></span>
<span><span>  }}</span></span>
<span><span>&gt;</span></span>
<span><span>  &lt;</span><span>div</span></span>
<span><span>    style</span><span>=</span><span>{{</span></span>
<span><span>      width: </span><span>1</span><span>,</span></span>
<span><span>      height: thumb.height,</span></span>
<span><span>      transform: </span><span>`translateY(${</span><span>thumb</span><span>.</span><span>top</span><span>}px)`</span><span>,</span></span>
<span><span>      transition: </span><span>"all 500ms"</span><span>,</span></span>
<span><span>      backgroundColor: </span><span>"white"</span><span>,</span></span>
<span><span>    }}</span></span>
<span><span>  /&gt;</span></span>
<span><span>&lt;/</span><span>div</span><span>&gt;</span></span>
<span></span></code></pre>
<p>Check the <a href="https://github.com/fuma-nama/fumadocs/blob/755554d6acbb22efcdedf31d40b1a83f54e2cf1a/packages/ui/src/components/layout/toc-clerk.tsx" target="_blank" rel="noreferrer noopener">source code</a> to see my implementation in React.js.</p>
<p>Huge thanks to Clerk for inspiring me on this, I've never thought the TOC of a documentation site can be that interesting to play with.</p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Paris said au revoir to cars. Air pollution maps reveal a dramatic change (422 pts)]]></title>
            <link>https://www.washingtonpost.com/climate-solutions/2025/04/12/air-pollution-paris-health-cars/</link>
            <guid>43665793</guid>
            <pubDate>Sat, 12 Apr 2025 16:26:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.washingtonpost.com/climate-solutions/2025/04/12/air-pollution-paris-health-cars/">https://www.washingtonpost.com/climate-solutions/2025/04/12/air-pollution-paris-health-cars/</a>, See on <a href="https://news.ycombinator.com/item?id=43665793">Hacker News</a></p>
Couldn't get https://www.washingtonpost.com/climate-solutions/2025/04/12/air-pollution-paris-health-cars/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Tunarr: Create and configure live TV channels from media on your servers (139 pts)]]></title>
            <link>https://tunarr.com/</link>
            <guid>43665201</guid>
            <pubDate>Sat, 12 Apr 2025 15:26:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tunarr.com/">https://tunarr.com/</a>, See on <a href="https://news.ycombinator.com/item?id=43665201">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-md-component="container">
      
      
        
          
        
      
      <main data-md-component="main">
        <div data-md-component="content">
              <article>
                
                  


  
  



<p>Create live TV channels from media on your Plex/Jellyfin servers, and more!</p>
<p>Configure your channels, programs, commercials, and settings using the Tunarr web UI.</p>
<p>Watch your channels by adding the spoofed Tunarr HDHomerun tuner to Plex, Jellyfin, or Emby. Or utilize generated M3U files with any 3rd party IPTV player app.</p>
<h2 id="what-is-this">What is this?<a href="#what-is-this" title="Permanent link">¶</a></h2>
<p>Tunarr was originally a fork of <a href="https://github.com/vexorian/dizquetv"><strong>dizqueTV</strong></a> (which in itself was a fork of other projects!) which evolved into a near-complete rewrite. This project was born out of both a love for TV and an appreciation for the work put into dizqueTV and its predecessors.</p>
<p>Tunarr has the following goals:</p>
<ul>
<li>Modernize the stack, both backend and frontend</li>
<li>Provide an <a href="https://tunarr.com/getting-started/setup/#migrating-from-dizquetv">migration path</a> for existing users</li>
<li>Stabilize the program, fix bugs, and improve performance (Tunarr currently is developed and tested on Node 20.11.1, which offers <a href="https://blog.rafaelgss.dev/state-of-nodejs-performance-2023">non-trivial performance improvements</a> over previous versions)</li>
<li>Modernize and "prettify" the Web UI</li>
<li>And of course, <strong>Add a ton great new features!</strong></li>
</ul>












                
              </article>
            </div>
        
      </main>
      
        
      
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Emacs Lisp Elements (158 pts)]]></title>
            <link>https://protesilaos.com/emacs/emacs-lisp-elements</link>
            <guid>43665046</guid>
            <pubDate>Sat, 12 Apr 2025 15:09:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://protesilaos.com/emacs/emacs-lisp-elements">https://protesilaos.com/emacs/emacs-lisp-elements</a>, See on <a href="https://news.ycombinator.com/item?id=43665046">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content" aria-label="Content">

        

        

        

        <article>

	

	<div>
		<p>
This book, written by Protesilaos Stavrou, also known as “Prot”, provides a big picture view of the Emacs Lisp programming language.
</p>

<p>
The information furnished herein corresponds to stable version 1.0.0, released on 2025-04-12.
</p>

<ul>
<li>Official page: <a href="https://protesilaos.com/emacs/emacs-lisp-elements">https://protesilaos.com/emacs/emacs-lisp-elements</a></li>
<li>Git repository: <a href="https://github.com/protesilaos/emacs-lisp-elements">https://github.com/protesilaos/emacs-lisp-elements</a></li>
</ul>

<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#h:getting-started-with-emacs-lisp">1. Getting started with Emacs Lisp</a></li>
<li><a href="#h:evaluate-emacs-lisp">2. Evaluate Emacs Lisp</a></li>
<li><a href="#h:side-effect-and-return-value">3. Side effect and return value</a></li>
<li><a href="#h:buffers-as-data-structures">4. Buffers as data structures</a></li>
<li><a href="#h:text-has-its-own-properties">5. Text has its own properties</a></li>
<li><a href="#h:symbols-balanced-expressions-and-quoting">6. Symbols, balanced expressions, and quoting</a></li>
<li><a href="#h:partial-evaluation-inside-of-a-list">7. Partial evaluation inside of a list</a></li>
<li><a href="#h:evaluation-inside-of-a-macro-or-special-form">8. Evaluation inside of a macro or special form</a></li>
<li><a href="#h:mapping-through-a-list-of-elements">9. Mapping through a list of elements</a></li>
<li><a href="#h:the-match-data-of-the-last-search">10. The match data of the last search</a></li>
<li><a href="#h:switching-to-another-buffer-window-or-narrowed-state">11. Switching to another buffer, window, or narrowed state</a></li>
<li><a href="#h:basic-control-flow-with-if-cond-and-others">12. Basic control flow with <code>if</code>, <code>cond</code>, and others</a></li>
<li><a href="#h:control-flow-with-if-let-and-friends">13. Control flow with <code>if-let*</code> and friends</a></li>
<li><a href="#h:pattern-match-with-pcase-and-related">14. Pattern match with <code>pcase</code> and related</a></li>
<li><a href="#h:run-some-code-or-fall-back-to-some-other-code">15. Run some code or fall back to some other code</a></li>
<li><a href="#h:when-to-use-a-named-function-or-a-lambda-function">16. When to use a named function or a lambda function</a></li>
<li><a href="#h:make-your-interactive-function-also-work-from-lisp-calls">17. Make your interactive function also work from Lisp calls</a></li>
<li><a href="#h:copying">18. COPYING</a></li>
<li><a href="#h:gnu-free-documentation-license">19. GNU Free Documentation License</a></li>
<li><a href="#h:indices">20. Indices</a>
<ul>
<li><a href="#h:function-index">20.1. Function index</a></li>
<li><a href="#h:variable-index">20.2. Variable index</a></li>
<li><a href="#h:concept-index">20.3. Concept index</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-h:getting-started-with-emacs-lisp">
<h2 id="h:getting-started-with-emacs-lisp"><span>1.</span> Getting started with Emacs Lisp</h2>
<div id="text-h:getting-started-with-emacs-lisp">
<p>
The purpose of this book is to provide you with a big picture view of Emacs Lisp, also known as “Elisp”. This is the programming language you use to extend Emacs. Emacs is a programmable text editor: it interprets Emacs Lisp and behaves accordingly. You can use Emacs without ever writing a single line of code: it already has lots of features. Though you can, at any time, program it to do exactly what you want by evaluating some Elisp that either you wrote yourself or got from another person, such as in the form of a package.
</p>

<p>
Programming your own text editor is both useful and fun. You can, for example, streamline a sequence of actions you keep doing by combining them in a single command that you then assign to a key binding: type the key and—bam!—perform all the intermediate tasks in one go. This makes you more efficient while it turns the editor into a comfortable working environment.
</p>

<p>
The fun part is how you go about writing the code. There are no duties you have to conform with. None! You program for the sake of programming. It is a recreational activity that expands your horizons. Plus, you cultivate your Elisp skills, which can prove helpful in the future, should you choose to modify some behaviour of Emacs.
</p>

<p>
Tinkering with Emacs is part of the experience. It teaches you to be unapologetically opinionated about how your editor works. The key is to know enough Elisp so that you do not spend too much time having fun or getting frustrated because something trivial does not work. I am writing this as a tinkerer myself with no background in computer science or neighbouring studies: I learnt Emacs Lisp through trial and error by playing around with the editor. My nominal goal was to improve certain micro-motions I was repeating over and over: I sought efficiency only to discover something much more profound. Learning to extend my editor has been a fulfilling experience and I am more productive as a result. Emacs does what I want it to do and I am happy with it.
</p>

<p>
Each chapter herein is generally short and to-the-point. Some are more friendly to beginners while others dive deeper into advanced topics. There are links between the chapters, exactly how a reference manual is supposed to be done. You may then go back and forth to find what you need.
</p>

<p>
The text you will find here is a combination of prose and code. The latter may be actual Elisp or pseudo-code which captures the underlying pattern. I encourage you to read this book either inside of Emacs or with Emacs readily available. This way, you can play around with the functions I give you, to further appreciate their nuances.
</p>

<p>
The “big picture view” approach I am adopting is about covering the concepts that I encounter frequently while working with Emacs Lisp. This book is no substitute for the Emacs Lisp Reference Manual and should by no means be treated as the source of truth for any of the Elisp forms I comment on.
</p>

<p>
Good luck and enjoy!
</p>
</div>
</div>
<div id="outline-container-h:evaluate-emacs-lisp">
<h2 id="h:evaluate-emacs-lisp"><span>2.</span> Evaluate Emacs Lisp</h2>
<div id="text-h:evaluate-emacs-lisp">
<p>
Everything you do in Emacs calls some function. It evaluates Emacs Lisp code, reading the return values and producing side effects (<a href="#h:side-effect-and-return-value">Side effect and return value</a>).
</p>

<p>
You type a key on your keyboard and a character is written to the current buffer. That is a function bound to a key. It actually is an <i>interactive</i> function, because you are calling it via a key binding rather than through some program. Interactive functions are known as “commands”. Though do not let the implementation detail of interactivity distract you from the fact that every single action you perform in Emacs involves the evaluation of Emacs Lisp.
</p>

<p>
Another common pattern of interaction is with the M-x (<code>execute-extended-command</code>) key, which by default runs the command <code>execute-extended-command</code>: it produces a minibuffer prompt that asks you to select a command by its name and proceeds to execute it.
</p>

<p>
Emacs can evaluate Elisp code from anywhere. If you have some Elisp in your buffer, you can place the cursor at the end of its closing parenthesis and type C-x C-e (<code>eval-last-sexp</code>). Similarly, you can use the commands <code>eval-buffer</code> and <code>eval-region</code> to operate on the current buffer or highlighted region, respectively.
</p>

<p>
The <code>eval-last-sexp</code> also works on symbols (<a href="#h:symbols-balanced-expressions-and-quoting">Symbols, balanced expressions, and quoting</a>). For example, if you place the cursor at the end of the variable <code>buffer-file-name</code> and use C-x C-e (<code>eval-last-sexp</code>), you will get the value of that variable, which is either <code>nil</code> or the file system path to the file you are editing.
</p>

<p>
Sometimes the above are not appropriate for what you are trying to do. Suppose you intend to write a command that copies the file path of the current buffer. To do that, you need your code to test the value of the variable <code>buffer-file-name</code> (<a href="#h:buffers-as-data-structures">Buffers as data structures</a>). But you do not want to type out <code>buffer-file-name</code> in your actual file, then use one of the aforementioned commands for Elisp evaluation, and then undo your edits. That is cumbersome and prone to mistakes! The best way to run Elisp in the current buffer is to type M-: (<code>eval-expression</code>): it opens the minibuffer and expects you to write the code you want to evaluate. Type RET from there to proceed. The evaluation is done with the last buffer as current (the buffer that was current prior to calling <code>eval-expression</code>).
</p>

<p>
Here is some Emacs Lisp you may want to try in (i) a buffer that corresponds to a file versus (ii) a buffer that is not associated with any file on disk.
</p>

<div>
<pre>;; Use `eval-expression' to evaluate this code in a file-visiting
;; buffer versus a buffer that does not visit any file.
(if buffer-file-name
    (message "The path to this file is `%s'" buffer-file-name)
  (message "Sorry mate, this buffer is not visiting a file"))
</pre>
</div>

<p>
When you are experimenting with code, you want to test how it behaves. Use the command <code>ielm</code> to open an interactive shell. It puts you at a prompt where you can type any Elisp and hit RET to evaluate it. The return value is printed right below. Alternatively, switch to the <code>*scratch*</code> buffer. If it is using the major mode <code>lisp-interaction-mode</code>, which is the default value of the variable <code>initial-major-mode</code>, then you can move around freely in that buffer and type C-j (<code>eval-print-last-sexp</code>) at the end of some code to evaluate it. This works almost the same way as <code>eval-last-sexp</code>, with the added effect of putting the return value right below the expression you just evaluated.
</p>

<p>
In addition to these, you can rely on the self-documenting nature of Emacs to figure out what the current state is. For example, to learn about the buffer-local value of the variable <code>major-mode</code>, you can do C-h v (<code>describe-variable</code>), and then search for that variable. The resulting Help buffer will inform you about the current value of <code>major-mode</code>. This help command and many others like <code>describe-function</code>, <code>describe-keymap</code>, <code>describe-key</code>, and <code>describe-symbol</code>, provide insight into what Emacs knows about a given object. The Help buffer will show relevant information, such as the path to the file that defines the given function or whether a variable is declared as buffer-local.
</p>

<p>
Emacs is “self-documenting” because it reports on its state. You do not need to explicitly update the Help buffers. This happens automatically by virtue of evaluating the relevant code: Emacs effectively shows you the latest value of whatever it is you are working with.
</p>
</div>
</div>
<div id="outline-container-h:side-effect-and-return-value">
<h2 id="h:side-effect-and-return-value"><span>3.</span> Side effect and return value</h2>
<div id="text-h:side-effect-and-return-value">
<p>
Emacs Lisp has functions. They take inputs and produce outputs. In its purest form, a function is a computation that only returns a value: it does not change anything in its environment. The return value of a function is used as input for another function, in what effectively is a chain of computations. You can thus rely on a function’s return value to express something like “if this works, then also do this other thing, otherwise do something else or even nothing.”
</p>

<p>
Elisp is the language that extends and controls Emacs. This means that it also affects the state of the editor. When you run a function, it can make permanent changes, such as to insert some text at the point of the cursor, delete a buffer, create a new window, and so on. These changes will have an impact on future function calls. For example, if the previous function deleted a certain buffer, the next function which was supposed to write to that same buffer can no longer do its job: the buffer is gone!
</p>

<p>
When you write Elisp, you have to account for both the return value and the side effects. If you are sloppy, you will get unintended results caused by all those ill-considered changes to the environment. But if you use side effects meticulously, you are empowered to take Elisp to its full potential. For instance, imagine you define a function that follows the logic of “create a buffer, go there, write some text, save the buffer to a file at my preferred location, and then come back where I was before I called this function, while leaving the created buffer open.” All these are side effects and they are all useful. Your function may have some meaningful return value as well that you can employ as the input of another function. For example, your function would return the buffer object it generated, so that the next function can do something there like display that buffer in a separate frame and make its text larger.
</p>

<p>
The idea is to manipulate the state of the editor, to make Emacs do what you envision. Sometimes this means your code has side effects. At other times, side effects are useless or even run counter to your intended results. You will keep refining your intuition about what needs to be done as you gain more experience and expand the array of your skills (<a href="#h:symbols-balanced-expressions-and-quoting">Symbols, balanced expressions, and quoting</a>). No problem; no stress!
</p>
</div>
</div>
<div id="outline-container-h:buffers-as-data-structures">
<h2 id="h:buffers-as-data-structures"><span>4.</span> Buffers as data structures</h2>
<div id="text-h:buffers-as-data-structures">
<p>
A buffer holds data as a sequence of characters. For example, this data is the text you are looking at when you open a file. Each character exists at a given position, which is a number. The function <code>point</code> gives you the position at the point you are on, which typically corresponds to where the cursor is (<a href="#h:evaluate-emacs-lisp">Evaluate Emacs Lisp</a>). At the beginning of a buffer, <code>point</code> returns the value of <code>1</code> (<a href="#h:side-effect-and-return-value">Side effect and return value</a>). There are plenty of functions that return a buffer position, such as <code>point-min</code>, <code>point-max</code>, <code>line-beginning-position</code>, and <code>re-search-forward</code>. Some of those will have side effects, like <code>re-search-forward</code> which moves the cursor to the given match.
</p>

<p>
When you program in Emacs Lisp, you frequently rely on buffers to do some of the following:
</p>

<dl>
<dt>Extract file contents as a string</dt><dd>Think of the buffer as a large string. You can get the entirety of its contents as one potentially massive string by using the function <code>buffer-string</code>. You may also get a substring between two buffer positions, such as with the <code>buffer-substring</code> function or its <code>buffer-substring-no-properties</code> counterpart (<a href="#h:text-has-its-own-properties">Text has its own properties</a>). Imagine you do this as part of a wider operation that (i) opens a file, (ii) goes to a certain position, (iii) copies the text it found, (iv) switches to another buffer, and (v) writes what it found to this new buffer.</dd>
</dl>

<dl>
<dt>Present the results of some operation</dt><dd>You may have a function that shows upcoming holidays. Your code does the computations behind the scenes and ultimately writes some text to a buffer. The end product is on display. Depending on how you go about it, you will want to evaluate the function <code>get-buffer-create</code> or its more strict <code>get-buffer</code> alternative. If you need to clear the contents of an existing buffer, you might use the <code>with-current-buffer</code> macro to temporarily switch to the buffer you are targetting and then either call the function <code>erase-buffer</code> to delete everything or limit the deletion to the range betweeen two buffer positions with <code>delete-region</code>. Finally, the functions <code>display-buffer</code> or <code>pop-to-buffer</code> will place the buffer in an Emacs window.</dd>
</dl>

<dl>
<dt>Associate variables with a given buffer</dt><dd>In Emacs Lisp, variables can take a buffer-local value which differs from its global counterpart. Some variables are even declared to always be buffer-local, such as the <code>buffer-file-name</code>, <code>fill-column</code>, and <code>default-directory</code>. Suppose you are doing something like returning a list of buffers that visit files in a given directory. You would iterate through the return value of the <code>buffer-list</code> function to filter the results accordingly by testing for a certain value of <code>buffer-file-name</code> (<a href="#h:basic-control-flow-with-if-cond-and-others">Basic control flow with <code>if</code>, <code>cond</code>, and others</a>). This specific variable is always available, though you can always use the <code>setq-local</code> macro to assign a value to a variable in the current buffer.</dd>
</dl>

<p>
The latter point is perhaps the most open-ended one. Buffers are like a bundle of variables, which includes their contents, the major mode they are running, and all the buffer-local values they have. In the following code block, I am using the <code>seq-filter</code> function to iterate through the return value of the function <code>buffer-list</code> (<a href="#h:symbols-balanced-expressions-and-quoting">Symbols, balanced expressions, and quoting</a>).
</p>

<div>
<pre>(seq-filter
 (lambda (buffer)
   "Return BUFFER if it is visible and its major mode derives from `text-mode'."
   (with-current-buffer buffer
     ;; The convention for buffers which are not meant to be seen by
     ;; the user is to start their name with an empty space.  We are
     ;; not interested in those right now.
     (and (not (string-prefix-p " " (buffer-name buffer)))
          (derived-mode-p 'text-mode))))
 (buffer-list))
</pre>
</div>

<p>
This will return a list of buffer objects that pass the test of (i) being “visible” to the user and (ii) their major mode is either <code>text-mode</code> or derived therefrom. The above may also be written thus (<a href="#h:when-to-use-a-named-function-or-a-lambda-function">When to use a named function or a lambda function</a>):
</p>

<div>
<pre>(defun my-buffer-visble-and-text-p (buffer)
  "Return BUFFER if it is visible and its major mode derives from `text-mode'."
  (with-current-buffer buffer
    ;; The convention for buffers which are not meant to be seen by
    ;; the user is to start their name with an empty space.  We are
    ;; not interested in those right now.
    (and (not (string-prefix-p " " (buffer-name buffer)))
         (derived-mode-p 'text-mode))))

(seq-filter #'my-buffer-visble-and-text-p (buffer-list))
</pre>
</div>

<p>
As with buffers, Emacs windows and frames have their own parameters. I will not cover those as their utility is more specialised and the concepts are the same. Just know that they are data structures that you may use to your advantage, including by iterating through them (<a href="#h:mapping-through-a-list-of-elements">Mapping through a list of elements</a>).
</p>
</div>
</div>
<div id="outline-container-h:text-has-its-own-properties">
<h2 id="h:text-has-its-own-properties"><span>5.</span> Text has its own properties</h2>
<div id="text-h:text-has-its-own-properties">
<p>
Just as with buffers that work like data structures (<a href="#h:buffers-as-data-structures">Buffers as data structures</a>), any text may also have properties associated with it. This is metadata that you inspect using Emacs Lisp. For example, when you see syntax highlighting in some programming buffer, this is the effect of text properties. Some function takes care to “propertise” or to “fontify” the relevant text and decides to apply to it an object known as “face”. Faces are constructs that bundle together typographic and colour attributes, such as the font family and weight, as well as foreground and background hues. To get a Help buffer with information about the text properties at the point of the cursor, type M-x (<code>execute-extended-command</code>) and then invoke the command <code>describe-char</code>. It will tell you about the character it sees, what font it is rendered with, which code point it is, and what its text properties are.
</p>

<p>
Suppose you are writings your own major mode. At the early stage of experimentation, you want to manually add text properties to all instances of the phrase <code>I have properties</code> in a buffer whose major mode is <code>fundamental-mode</code>, so you do something like this (<a href="#h:the-match-data-of-the-last-search">The match data of the last search</a>):
</p>

<div>
<pre>(defun my-add-properties ()
  "Add properties to the text \"I have properties\" across the current buffer."
  (goto-char (point-min))
  (while (re-search-forward "I have properties" nil t)
    (add-text-properties (match-beginning 0) (match-end 0) '(face error))))
</pre>
</div>

<p>
Actually try this. Use C-x b (<code>switch-to-buffer</code>), type in some random characters that do not match an existing buffer, and then hit RET to visit that new buffer. It runs <code>fundamental-mode</code>, meaning that there is no “fontification” happening and, thus, <code>my-add-properties</code> will work as intented. Now paste the following:
</p>

<div>
<pre>This is some sample text. Will the phrase "I have properties" use the `bold' face?

What does it even mean for I have properties to be bold?
</pre>
</div>

<p>
Continue with M-: (<code>eval-expression</code>) and call the function <code>my-add-properties</code>. Did it work? The face it is applying is called <code>error</code>. Ignore the semantics of that word: I picked it simply because it typically is styled in a fairly intense and obvious way (though your current theme may do things differently).
</p>

<p>
There are functions which find the properties at a given buffer position and others which can search forward and backward for a given property. The specifics do not matter right now. All I want you to remember is that the text can be more than just its constituent characters. For more details, type M-x (<code>execute-extended-command</code>) to call the command <code>shortdoc</code>. It will ask you for a documentation group. Pick <code>text-properties</code> to learn more. Well, use <code>shortdoc</code> for everything listed there. I do it all the time.
</p>
</div>
</div>
<div id="outline-container-h:symbols-balanced-expressions-and-quoting">
<h2 id="h:symbols-balanced-expressions-and-quoting"><span>6.</span> Symbols, balanced expressions, and quoting</h2>
<div id="text-h:symbols-balanced-expressions-and-quoting">
<p>
To someone not familiar with Emacs Lisp, it is a language that has so many parentheses! Here is a simple function definition:
</p>

<div>
<pre>(defun my-greet-person (name)
  "Say hello to the person with NAME."
  (message "Hello %s" name))
</pre>
</div>

<p>
I just defined the function with the name <code>my-greet-person</code>. It has a list of parameters, specifically, a list of one parameter, called <code>name</code>. Then is the optional documentation string, which is for users to make sense of the code and/or understand the intent of the function. <code>my-greet-person</code> takes <code>name</code> and passes it to the function <code>message</code> as an argument to ultimately print a greeting. The <code>message</code> function logs the text in the <code>*Messages*</code> buffer, which you can visit directly with C-h e (<code>view-echo-area-messages</code>). At any rate, this is how you call <code>my-greet-person</code> with the one argument it expects:
</p>

<div>
<pre>(my-greet-person "Protesilaos")
</pre>
</div>

<p>
Now do the same with more than one parameters:
</p>

<div>
<pre>(defun my-greet-person-from-country (name country)
  "Say hello to the person with NAME who lives in COUNTRY."
  (message "Hello %s of %s" name country))
</pre>
</div>

<p>
And call it thus:
</p>

<div>
<pre>(my-greet-person-from-country "Protesilaos" "Cyprus")
</pre>
</div>

<p>
Even for the most basic tasks, you have lots of parentheses. But fear not! These actually make it simpler to have a structural understanding of your code. If it does not feel this way right now, it is because you are not used to it yet. Once you do, there is no going back.
</p>

<p>
The basic idea of any dialect of Lisp, Emacs Lisp being one of them, is that you have parentheses which delimit lists. A list consists of elements. Lists are either evaluated to produce the results of some computation or returned as they are for use in some other evaluation (<a href="#h:side-effect-and-return-value">Side effect and return value</a>):
</p>

<dl>
<dt>The list as a function call</dt><dd>When a list is evaluated, the first element is the name of the function and the remaining elements are the arguments passed to it. You already saw this play out above with how I called <code>my-greet-person</code> with <code>"Protesilaos"</code> as its argument. Same principle for <code>my-greet-person-from-country</code>, with <code>"Protesilaos"</code> and <code>"Cyprus"</code> as its arguments.</dd>

<dt>The list as data</dt><dd>When a list is not evaluated, then none of its elements has any special meaning at the outset. They are all returned as a list without further changes. When you do not want your list to be evaluated, you prefix it with a single quote character. For example, <code>'("Protesilaos" "Prot" "Cyprus")</code> is a list of three elements that should be returned as-is.</dd>
</dl>

<p>
Consider the latter case, which you have not seen yet. You have a list of elements and you want to get some data out of it. At the most basic level, the functions <code>car</code> and <code>cdr</code> return the first element and the list of all remaining elements, respectively:
</p>

<div>
<pre>(car '("Protesilaos" "Prot" "Cyprus"))
;; =&gt; "Protesilaos"

(cdr '("Protesilaos" "Prot" "Cyprus"))
;; =&gt; ("Prot" "Cyprus")
</pre>
</div>

<p>
The single quote here is critical, because it instructs Emacs to not evaluate the list. Otherwise, the evaluation of this list would treat the first element, namely <code>"Protesilaos"</code>, as the name of a function and the remainder of the list as the arguments to that function. As you do not have the definition of such a function, you get an error.
</p>

<p>
Certain data types in Emacs Lisp are “self-evaluating”. This means that if you evaluate them, their return value is what you are already seeing. For example, the return value of the string of characters <code>"Protesilaos"</code> is <code>"Protesilaos"</code>. This is true for strings, numbers, keywords, symbols, and the special <code>nil</code> or <code>t</code>. Here is a list with a sample of each of these, which you construct by calling the function <code>list</code>:
</p>

<div>
<pre>(list "Protesilaos" 1 :hello 'my-greet-person-from-country nil t)
;; =&gt; ("Protesilaos" 1 :hello 'my-greet-person-from-country nil t)
</pre>
</div>

<p>
The <code>list</code> function evaluates the arguments passed to it, unless they are quoted. The reason you get the return value without any apparent changes is because of self-evaluation. Notice that <code>my-greet-person-from-country</code> is quoted the same way we quote a list we do not want to evaluate. Without it, <code>my-greet-person-from-country</code> would be evaluated, which would return an error unless that was also defined as a variable.
</p>

<p>
Think of the single quote as an unambiguous instruction: “do not evaluate the following.” More specifically, it is an instruction to not perform evaluation if it would have normally happened in that context (<a href="#h:partial-evaluation-inside-of-a-list">Partial evaluation inside of a list</a>). In other words, you do not want to quote something inside of a quoted list, because that is the same as quoting it twice:
</p>

<div>
<pre>;; This is the correct way:
'(1 :hello my-greet-person-from-country)

;; It is wrong to quote `my-greet-person-from-country' because the
;; entire list would not have been evaluated anyway.  The mistake here
;; is that you are quoting what is already quoted, like doing
;; ''my-greet-person-from-country.
'(1 :hello 'my-greet-person-from-country)
</pre>
</div>

<p>
Now you may be wondering why did we quote <code>my-greet-person-from-country</code> but nothing else? The reason is that everything else you saw there is effectively “self-quoting”, i.e. the flip-side of self-evaluation. Whereas <code>my-greet-person-from-country</code> is a symbol. A “symbol” is a reference to something other than itself: it either represents some computation—a function—or the value of a variable. If you write a symbol without quoting it, you are effectively telling Emacs “give me the value this symbol represents.” In the case of <code>my-greet-person-from-country</code>, you will get an error if you try that because this symbol is not a variable and thus trying to get a value out of it is not going to work.
</p>

<p>
Keep in mind that Emacs Lisp has a concept of “macro”, which basically is a templating system to write code that actually expands into some other code which is then evaluated. Inside of a macro, you control how quoting is done, meaning that the aforementioned may not apply to calls that involve the macro, even if they are still used inside of the macro’s expanded form (<a href="#h:evaluation-inside-of-a-macro-or-special-form">Evaluation inside of a macro or special form</a>).
</p>

<p>
As you expose yourself to more Emacs Lisp code, you will encounter quotes that are preceded by the hash sign, like <code>#'some-symbol</code>. This “sharp quote”, as it is called, is the same as the regular quote with the added semantics of referring to a function in particular. The programmer can thus better articulate the intent of a given expression, while the byte compiler may internally perform the requisite checks and optimisations. In this light, read about the functions <code>quote</code> and <code>function</code> which correspond to the quote and sharp quote, respectively.
</p>
</div>
</div>
<div id="outline-container-h:partial-evaluation-inside-of-a-list">
<h2 id="h:partial-evaluation-inside-of-a-list"><span>7.</span> Partial evaluation inside of a list</h2>
<div id="text-h:partial-evaluation-inside-of-a-list">
<p>
You already have an idea of how Emacs Lisp code looks like (<a href="#h:symbols-balanced-expressions-and-quoting">Symbols, balanced expressions, and quoting</a>). You have a list that is either evaluated or taken as-is. There is another case where a list should be partially evaluated or, more specifically, where it should be treated as data instead of a function call with some elements inside of it still subject to evaluation.
</p>

<p>
In the following code block, I am defining a variable called <code>my-greeting-in-greek</code>, which is a common phrase in Greek that literally means “health to you” and is pronounced as “yah sou”. Why Greek? Well, you got the <code>lambda</code> that engendered this whole business with Lisp, so you might as well get all the rest (<a href="#h:when-to-use-a-named-function-or-a-lambda-function">When to use a named function or a lambda function</a>)!
</p>

<div>
<pre>(defvar my-greeting-in-greek "Γεια σου"
  "Basic greeting in Greek to wish health to somebody.")
</pre>
</div>

<p>
Now I want to experiment with the <code>message</code> function to better understand how evaluation works. Let me start with the scenario of quoting the list, thus taking it as-is:
</p>

<div>
<pre>(message "%S" '(one two my-greeting-in-greek four))
;;=&gt; "(one two my-greeting-in-greek four)"
</pre>
</div>

<p>
You will notice that the variable <code>my-greeting-in-greek</code> is not evaluated. I get the symbol, the actual <code>my-greeting-in-greek</code>, but not the value it represents. This is the expected result, because the entire list is quoted and, ipso facto, everything inside of it is not evaluated.
</p>

<p>
Now check the next code block to understand how I can tell Emacs that I want the entire list to still be quoted but for <code>my-greeting-in-greek</code> in particular to be evaluated, so it is replaced by its value:
</p>

<div>
<pre>(message "%S" `(one two ,my-greeting-in-greek four))
;; =&gt; "(one two \"Γεια σου\" four)"
</pre>
</div>

<p>
Pay close attention to the syntax here. Instead of a single quote, I am using the backtick or back quote, which is also known as a “quasi quote” in our case. This behaves like the single quote except for anything that is preceded by a comma. The comma is an instruction to “evaluate the thing that follows” and only works inside of a quasi-quoted list. The “thing” that follows is either a symbol or a list. The list can, of course, be a function call. Let me then use <code>concat</code> to greet a certain person all while returning everything as a list:
</p>

<div>
<pre>(message "%S" `(one two ,(concat my-greeting-in-greek " " "Πρωτεσίλαε") four))
;; =&gt; "(one two \"Γεια σου Πρωτεσίλαε\" four)"
</pre>
</div>

<p>
Bear in mind that you would get an error if you were not quoting this list at all, because the first element <code>one</code> would be treated as the symbol a function, which would be called with all other elements as its arguments. Chances are that <code>one</code> is not defined as a function in your current Emacs session or those arguments are not meaningful to it, anyway. Plus, <code>two</code> and <code>four</code> would then be treated as variables, since they are not quoted, in which case those would have to be defined as well, else more errors would ensue.
</p>

<p>
Other than the comma operator, there is the <code>,@</code> (how is this even pronounced? “comma at”, perhaps?), which is notation for “splicing”. This is jargon in lieu of saying “the return value is a list and I want you to remove the outermost parentheses of it.” In effect, the code that would normally return <code>'(one two three)</code> now returns <code>one two three</code>. This difference may not make much sense in a vacuum, though it does once you consider those elements as expressions that should work in their own right, rather than simply be elements of a quoted list. I will not elaborate on an example here, as I think this is best covered in the context of defining macros (<a href="#h:evaluation-inside-of-a-macro-or-special-form">Evaluation inside of a macro or special form</a>).
</p>

<p>
Chances are you will not need to use the knowledge of partial evaluation. It is more common in macros, though can be applied anywhere. Be aware of it regardless, as there are scenaria where you will, at the very least, want to understand what some code you depend on is doing.
</p>

<p>
Lastly, since I introduced you to some Greek words, I am now considering you my friend. Here is a joke from when I was a kid. I was trying to explain some event to my English instructor. As I lacked the vocabulary to express myself, I started using Greek words. My instructor had a strict policy of only responding to English, so she said “It is all Greek to me.” Not knowing that her answer is an idiom for “I do not understand you”, I blithely replied, “Yes, Greek madame; me no speak England very best.” I was not actually a beginner at the time, though I would not pass on the opportunity to make fun of the situation. Just how you should remember to enjoy the time spent tinkering with Emacs. But enough of that! Back to reading this book.
</p>
</div>
</div>
<div id="outline-container-h:evaluation-inside-of-a-macro-or-special-form">
<h2 id="h:evaluation-inside-of-a-macro-or-special-form"><span>8.</span> Evaluation inside of a macro or special form</h2>
<div id="text-h:evaluation-inside-of-a-macro-or-special-form">
<p>
In the most basic case of Emacs Lisp code, you have lists that are either evaluated or not (<a href="#h:symbols-balanced-expressions-and-quoting">Symbols, balanced expressions, and quoting</a>). If you get a little more fancy, you have lists that are only partially evaluated (<a href="#h:partial-evaluation-inside-of-a-list">Partial evaluation inside of a list</a>). Sometimes though, you look at a piece of code and cannot understand why the normal rules of quoting and evaluation do not apply. Before you see this in action, inspect a typical function call that also involves the evaluation of a variable:
</p>

<div>
<pre>(concat my-greeting-in-greek " " "Πρωτεσίλαε")
</pre>
</div>

<p>
You encountered this code in the section about partial evaluation. What you have here is a call to the function <code>concat</code>, followed by three arguments. One of these arguments is a variable, the <code>my-greeting-in-greek</code>. When this list is evaluated, what Emacs actually does is to first evaluate the arguments, including <code>my-greeting-in-greek</code>, in order to get their respective values and only then to call <code>concat</code> with those values. You can think of the entire operation as follows:
</p>

<ul>
<li>Here is a list.</li>
<li>It is not quoted.</li>
<li>So you should evaluate it.</li>
<li>The first element is the name of the function.</li>
<li>The remaining elements are arguments passed to that function.</li>
<li>Check what the arguments are.</li>
<li>Evaluate each of the arguments to resolve it to its actual value.</li>
<li>Strings are self-evaluating, while the <code>my-greeting-in-greek</code> is a variable.</li>
<li>You now have the value of each of the arguments, including the value of the symbol <code>my-greeting-in-greek</code>.</li>
<li>Call <code>concat</code> with all the values you got.</li>
</ul>

<p>
In other words, the following two yield the same results (assuming a constant <code>my-greeting-in-greek</code>):
</p>

<div>
<pre>(concat my-greeting-in-greek " " "Πρωτεσίλαε")

(concat "Γεια σου" " " "Πρωτεσίλαε")
</pre>
</div>

<p>
This is predictable. It follows the basic logic of the single quote: if it is quoted, do not evaluate it and return it as-is, otherwise evaluate it and return its value. But you will find plenty of cases where this expected pattern is seemingly not followed. Consider this common case of using <code>setq</code> to bind a symbol to the given value:
</p>

<div>
<pre>(setq my-test-symbol "Protesilaos of Cyprus")
</pre>
</div>

<p>
The above expression looks like a function call, meaning that (i) the list is not quoted, (ii) the first element is the name of a function, and (iii) the remaining elements are arguments passed to that function. In a way, this is all true. Though you would then expect the <code>my-test-symbol</code> to be treated as a variable, which would be evaluated in place to return its result which would, in turn, be the actual argument passed to the function. However, this is not how <code>setq</code> works. The reason is that it is a special case that internally does this:
</p>

<div>
<pre>(set 'my-test-symbol "Protesilaos of Cyprus")
</pre>
</div>

<p>
This is where things are as expected. There is no magic happening behind the scenes. The <code>setq</code>, then, is a convenience for the user to not quote the symbol each time. Yes, this makes it a bit more difficult to reason about it, though you get used to it and eventually it all makes sense. Hopefully, you will get used to such special forms, as you find them with <code>setq</code> but also with <code>defun</code>, among many others. Here is a function you have already seen:
</p>

<div>
<pre>(defun my-greet-person-from-country (name country)
  "Say hello to the person with NAME who lives in COUNTRY."
  (message "Hello %s of %s" name country))
</pre>
</div>

<p>
If the normal rules of evaluation applied, then the list of parametes should be quoted. Otherwise, you would expect <code>(name country)</code> to be interpreted as a function call with <code>name</code> as the symbol of the function and <code>country</code> as its argument which would also be a variable. But this is not what is happening because <code>defun</code> will internally treat that list of parameters as if it was quoted.
</p>

<p>
Another common scenario is with <code>let</code> (<a href="#h:control-flow-with-if-let-and-friends">Control flow with <code>if-let*</code> and friends</a>). Its general form is as follows:
</p>

<div>
<pre>;; This is pseudo-code
(let LIST-OF-LISTS-AS-VARIABLE-BINDINGS
  BODY-OF-THE-FUNCTION)
</pre>
</div>

<p>
The <code>LIST-OF-LISTS-AS-VARIABLE-BINDINGS</code> is a list in which each element is a list of the form <code>(SYMBOL VALUE)</code>. Here is some actual code:
</p>

<div>
<pre>(let ((name "Protesilaos")
      (country "Cyprus"))
  (message "Hello %s of %s" name country))
</pre>
</div>

<p>
Continuing with the theme of special forms, if <code>let</code> was a typical function call, the <code>LIST-OF-LISTS-AS-VARIABLE-BINDINGS</code> would have to be quoted. Otherwise, it would be evaluated, in which case the first element would be the name of the function. But that would return an error, as the name of the function would correspond to another list, the <code>(name "Protesilaos")</code>, rather than a symbol. Things work fine with <code>let</code> because it internally does the quoting of its <code>LIST-OF-LISTS-AS-VARIABLE-BINDINGS</code>.
</p>

<p>
Expect similar behaviour with many special forms as well as with macros such as the popular <code>use-package</code>, which is used to configure packages inside of your Emacs initialisation file. How each of those macros works depends on the way it is designed. I will not delve into the technicalities here, as I want the book to be useful long-term, focusing on the principles rather than the implementation details that might change over time.
</p>

<p>
To learn what a given macro actually expands to, place the cursor at the end of its closing parenthesis and call the command <code>pp-macroexpand-last-sexp</code>. It will produce a new buffer showing the expanded Emacs Lisp code. This is what is actually evaluated in the macro’s stead.
</p>

<p>
With those granted, it is time to write a macro. This is like a template, which empowers you to not repeat yourself. Syntactically, a macro will most probably depend on the use of the quasi-quote, the comma operator, and the mechanics of splicing (<a href="#h:partial-evaluation-inside-of-a-list">Partial evaluation inside of a list</a>). Here is a simple scenario where we want to run some code in a temporary buffer while setting the <code>default-directory</code> to the user’s home directory.
</p>

<div>
<pre>(defmacro my-work-in-temp-buffer-from-home (&amp;rest expressions)
  "Evaluate EXPRESSIONS in a temporary buffer with `default-directory' set to the user's home."
  `(let ((default-directory ,(expand-file-name "~/")))
     (with-temp-buffer
       (message "Running all expression from the `%s' directory" default-directory)
       ,@expressions)))
</pre>
</div>

<p>
In this definition, the <code>&amp;rest</code> makes the following parameter a list. So you can pass an arbitrary number of arguments to it, all of which will be collected into a single list called <code>EXPRESSIONS</code>. The judicious use of partial evaluation ensures that the macro will not be evaluated right now but only when it is called. The arguments passed to it will be placed where you have specified. Here is a call that uses this macro:
</p>

<div>
<pre>(progn
  (message "Now we are doing something unrelated to the macro")
  (my-work-in-temp-buffer-from-home
   (message "We do stuff inside the macro")
   (+ 1 1)
   (list "Protesilaos" "Cyprus")))
</pre>
</div>

<p>
If you place the cursor at the closing parenthesis of <code>my-work-in-temp-buffer-from-home</code>, you will be able to confirm what it expands to by typing M-x (<code>execute-extended-command</code>) and then invoking the command <code>pp-macroexpand-last-sexp</code>. This is what I get:
</p>

<div>
<pre>(let ((default-directory "/home/prot/"))
  (with-temp-buffer
    (message "Running all expression from the `%s' directory" default-directory)
    (message "We do stuff inside the macro")
    (+ 1 1)
    (list "Protesilaos" "Cyprus")))
</pre>
</div>

<p>
Piecing it together with the rest of the code in its context, I arrive at this:
</p>

<div>
<pre>(progn
  (message "Now we are doing something unrelated to the macro")
  (let ((default-directory "/home/prot/"))
    (with-temp-buffer
      (message "Running all expression from the `%s' directory" default-directory)
      (message "We do stuff inside the macro")
      (+ 1 1)
      (list "Protesilaos" "Cyprus"))))
</pre>
</div>

<p>
With this example in mind, consider Elisp macros to be a way of saying “this little thing here helps me express this larger procedure more succinctly, while the actual code that runs is still that of the latter.”
</p>

<p>
The above macro I wrote has its body start with a quasi-quote, so you do not get to appreciate the nuances of evaluation within it. Let me show you this other approach, instead, where I write a macro that lets me define several almost identical interactive functions (<a href="#h:make-your-interactive-function-also-work-from-lisp-calls">Make your interactive function also work from Lisp calls</a>).
</p>

<div>
<pre>(defmacro my-define-command (name &amp;rest expressions)
  "Define command with specifier NAME that evaluates EXPRESSIONS."
  (declare (indent 1))
  (unless (symbolp name)
    (error "I want NAME to be a symbol"))
  (let ((modifined-name (format "modified-version-of-%s" name)))
    `(defun ,(intern modifined-name) ()
       (interactive)
       ,(message "The difference between `%s' and `%s'" modifined-name name)
       ,@expressions)))
</pre>
</div>

<p>
The <code>my-define-command</code> can be broadly divided into two parts: (i) what gets evaluated outright and (ii) what gets expanded for further evaluation. The latter part starts with the quasi-quote. This distinction is important when we call the macro, because the former part will be executed right away so if we hit the error, it will never expand and then run the <code>EXPRESSIONS</code>. Try <code>pp-macroexpand-last-sexp</code> with the following to see what I mean. For your convenience, I include the macro expansions right below each case.
</p>

<div>
<pre>(my-define-command first-demo
  (message "This is what my function does")
  (+ 1 10)
  (message "And this"))
;; =&gt;
;;
;; (defun modified-version-of-first-demo nil
;;   (interactive)
;;   "The difference between ‘modified-version-of-first-demo’ and ‘first-demo’"
;;   (message "This is what my function does")
;;   (+ 1 10)
;;   (message "And this"))


(my-define-command second-demo
  (list "Protesilaos" "Cyprus")
  (+ 1 1)
  (message "Arbitrary expressions here"))
;; =&gt;
;;
;; (defun modified-version-of-second-demo nil
;;   (interactive)
;;   "The difference between ‘modified-version-of-second-demo’ and ‘second-demo’"
;;   (list "Protesilaos" "Cyprus")
;;   (+ 1 1)
;;   (message "Arbitrary expressions here"))


(my-define-command "error scenario"
  (list "Will" "Not" "Reach" "This")
  (/ 2 0))
;; =&gt; ERROR...
</pre>
</div>

<p>
Do you need macros? Not always, though there will be cases where a well-defined macro makes your code more elegant. What matters is that you have a sense of how evaluation works so that you do not get confused by all those parentheses. Otherwise you might expect something different to happen than what you actually get.
</p>
</div>
</div>
<div id="outline-container-h:mapping-through-a-list-of-elements">
<h2 id="h:mapping-through-a-list-of-elements"><span>9.</span> Mapping through a list of elements</h2>
<div id="text-h:mapping-through-a-list-of-elements">
<p>
A common routine in programming is to work through a list of items and perform some computation on each of them. Emacs Lisp has the generic <code>while</code> loop, as well as a whole range of more specialised functions to map over a list of elements, such as <code>mapcar</code>, <code>mapc</code>, <code>dolist</code>, <code>seq-filter</code>, <code>seq-remove</code>, and many more. Depending on what you are doing, you map through elements with the intent to produce some side effect and/or to test for a return value (<a href="#h:side-effect-and-return-value">Side effect and return value</a>). I will show you some examples and let you decide which is the most appropriate tool for the task at hand.
</p>

<p>
Starting with <code>mapcar</code>, it applies a function to each element of a list. It then takes the return value at each iteration and collects it into a new list. This is the return value of <code>mapcar</code> as a whole. In the following code block, I use <code>mapcar</code> over a list of numbers to increment them by <code>10</code> and return a new list of the incremented numbers.
</p>

<div>
<pre>(mapcar
 (lambda (number)
   (+ 10 number))
 '(1 2 3 4 5))
;; =&gt; (11 12 13 14 15)
</pre>
</div>

<p>
In the code block above, I am using a <code>lambda</code>, else an anonymous function (<a href="#h:when-to-use-a-named-function-or-a-lambda-function">When to use a named function or a lambda function</a>). Here is the same code, but with an eponymous function, i.e. a named function:
</p>

<div>
<pre>(defun my-increment-by-ten (number)
  "Add 10 to NUMBER."
  (+ 10 number))

(mapcar #'my-increment-by-ten '(1 2 3 4 5))
;; =&gt; (11 12 13 14 15)
</pre>
</div>

<p>
Notice that here we quote the eponymous function (<a href="#h:symbols-balanced-expressions-and-quoting">Symbols, balanced expressions, and quoting</a>).
</p>

<p>
The <code>mapcar</code> collects the return values into a new list. Sometimes this is useless. Suppose you want to evaluate a function that saves all unsaved buffers which visit a file. In this scenario, you do not care about accumulating the results: you just want the side effect of saving the buffer outright. To this end, you may use <code>mapc</code>, which always returns the list it operated on:
</p>

<div>
<pre>(mapc
 (lambda (buffer)
   (when (and (buffer-file-name buffer)
              (buffer-modified-p buffer))
     (save-buffer)))
 (buffer-list))
</pre>
</div>

<p>
An alternative to the above is <code>dolist</code>, which is used for side effects but always returns <code>nil</code>:
</p>

<div>
<pre>(dolist (buffer (buffer-list))
  (when (and (buffer-file-name buffer)
             (buffer-modified-p buffer))
    (save-buffer)))
</pre>
</div>

<p>
You will notice that the <code>dolist</code> is a macro, so some parts of it seem to behave differently than with basic lists and the evaluation rules that apply to them (<a href="#h:evaluation-inside-of-a-macro-or-special-form">Evaluation inside of a macro or special form</a>). This is a matter of getting used to how the code is expressed.
</p>

<p>
When to use a <code>dolist</code> as opposed to a <code>mapc</code> is a matter of style. If you are using a named function, a <code>mapc</code> looks cleaner to my eyes. Otherwise a <code>dolist</code> is easier to read. Here is my approach with some pseudo-code:
</p>

<div>
<pre>;; I like this:
(mapc #'NAMED-FUNCTION LIST)

;; I also like a `dolist' instead of a `mapc' with a `lambda':
(dolist (element LIST)
  (OPERATE-ON element))

;; I do not like this:
(mapc
 (lambda (element)
   (OPERATE-ON element))
 LIST)
</pre>
</div>

<p>
While <code>dolist</code> and <code>mapc</code> are for side effects, you can still employ them in the service of accumulating results, with the help of <code>let</code> and related forms (<a href="#h:control-flow-with-if-let-and-friends">Control flow with <code>if-let*</code> and friends</a>). Depending on the specifics, this approach may make more sense than relying on a <code>mapcar</code>. Here is an annotated sketch:
</p>

<div>
<pre>;; Start with an empty list of `found-strings'.
(let ((found-strings nil))
  ;; Use `dolist' to test each element of the list '("Protesilaos" 1 2 3 "Cyprus").
  (dolist (element '("Protesilaos" 1 2 3 "Cyprus"))
    ;; If the element is a string, then `push' it to the `found-strings', else skip it.
    (when (stringp element)
      (push element found-strings)))
  ;; Now that we are done with the `dolist', return the new value of `found-strings'.
  found-strings)
;; =&gt; ("Cyprus" "Protesilaos")


;; As above but reverse the return value, which makes more sense:
(let ((found-strings nil))
  (dolist (element '("Protesilaos" 1 2 3 "Cyprus"))
    (when (stringp element)
      (push element found-strings)))
  (nreverse found-strings))
;; =&gt; ("Protesilaos" "Cyprus")
</pre>
</div>

<p>
For completeness, the previous example would have to be done as follows with the use of <code>mapcar</code>:
</p>

<div>
<pre>(mapcar
 (lambda (element)
   (when (stringp element)
     element))
 '("Protesilaos" 1 2 3 "Cyprus"))
;; =&gt; ("Protesilaos" nil nil nil "Cyprus")


(delq nil
      (mapcar
       (lambda (element)
         (when (stringp element)
           element))
       '("Protesilaos" 1 2 3 "Cyprus")))
;; =&gt; ("Protesilaos" "Cyprus")
</pre>
</div>

<p>
Because <code>mapcar</code> happily accumulates all the return values, it returns a list that includes <code>nil</code>. If you wanted that, you would probably not even bother with the <code>when</code> clause there. The <code>delq</code> is thus applied to the return value of the <code>mapcar</code> to delete all the instances of <code>nil</code>. Now compare this busy work to <code>seq-filter</code>:
</p>

<div>
<pre>(seq-filter #'stringp '("Protesilaos" 1 2 3 "Cyprus"))
;; =&gt; ("Protesilaos" "Cyprus")
</pre>
</div>

<p>
The <code>seq-filter</code> is the best tool when all you need is to test if the element satisfies a predicate function and then return that element. But you cannot return something else. Whereas <code>mapcar</code> will take any return value without complaints, such as the following:
</p>

<div>
<pre>(delq nil
      (mapcar
       (lambda (element)
         (when (stringp element)
           ;; `mapcar' accumulates any return value, so we can change
           ;; the element to generate the results we need.
           (upcase element)))
       '("Protesilaos" 1 2 3 "Cyprus")))
;; =&gt; ("PROTESILAOS" "CYPRUS")

(seq-filter
 (lambda (element)
   (when (stringp element)
     ;; `seq-filter' only returns elements that have a non-nil return
     ;; value here, but it returns the elements, not what we return
     ;; here.  In other words, this `lambda' does unnecessary work.
     (upcase element)))
 '("Protesilaos" 1 2 3 "Cyprus"))
;; =&gt; ("Protesilaos" "Cyprus")
</pre>
</div>

<p>
How you go about mapping over a list of elements will depend on what you are trying to do. There is no one single function that does everything for you. Understand the nuances and you are good to go. Oh, and do look into the built-in <code>seq</code> library (use M-x (<code>execute-extended-command</code>), invoke <code>find-library</code>, and then search for <code>seq</code>). You are now looking at the source code of <code>seq.el</code>: it defines plenty of functions like <code>seq-take</code>, <code>seq-find</code>, <code>seq-union</code>. Another way is to invoke the command <code>shortdoc</code> and read about the documentation groups <code>list</code> as well as <code>sequence</code>.
</p>
</div>
</div>
<div id="outline-container-h:the-match-data-of-the-last-search">
<h2 id="h:the-match-data-of-the-last-search"><span>10.</span> The match data of the last search</h2>
<div id="text-h:the-match-data-of-the-last-search">
<p>
As you work with Emacs Lisp, you will encounter the concept of “match data” and the concomitant functions <code>match-data</code>, <code>match-beginning</code>, <code>match-string</code>, and so on. These refer to the results of the last search, which is typically performed by the functions <code>re-search-forward</code>, <code>looking-at</code>, <code>string-match</code>, and related. Each time you perform a search, the match data gets updated. Be mindful of this common side effect (<a href="#h:side-effect-and-return-value">Side effect and return value</a>). If you forget about it, chances are your code will not do the right thing.
</p>

<p>
In the following code block, I define a function that performs a search in the current buffer and returns a list of match data without text properties, where relevant (<a href="#h:text-has-its-own-properties">Text has its own properties</a>).
</p>

<div>
<pre>(defun my-get-match-data (regexp)
  "Search forward for REGEXP and return its match data, else nil."
  (when (re-search-forward regexp nil t)
    (list
     :beginning (match-beginning 0)
     :end (match-end 0)
     :string (match-string-no-properties 0))))
</pre>
</div>

<p>
You may then call it with a string argument, representing an Emacs Lisp regular expression:
</p>

<div>
<pre>(my-get-match-data "Protesilaos.*Cyprus")
</pre>
</div>

<p>
If the regular expression matches, then you get the match data. Here is some sample text:
</p>

<div>
<pre>Protesilaos lives in the mountains of Cyprus.
</pre>
</div>

<p>
Place the cursor before that text and use M-: (<code>eval-expression</code>) to evaluate <code>my-get-match-data</code> with the regexp I show above. You will get a return value, as intended.
</p>

<p>
The way <code>my-get-match-data</code> is written, it does two things: (i) it has the side effect of moving the cursor to the end of the text it found and (ii) it returns a list with the match data I specified. There are many scenaria where you do not want the aforementioned side effect: the cursor should stay where it is. As such, you can wrap your code in a <code>save-excursion</code> (<a href="#h:switching-to-another-buffer-window-or-narrowed-state">Switching to another buffer, window, or narrowed state</a>): it will do what it must and finally restore the <code>point</code> (<a href="#h:run-some-code-or-fall-back-to-some-other-code">Run some code or fall back to some other code</a>):
</p>

<div>
<pre>(defun my-get-match-data (regexp)
  "Search forward for REGEXP and return its match data, else nil."
  (save-excursion ; we wrap our code in a `save-excursion' to inhibit the side effect
    (when (re-search-forward regexp nil t)
      (list
       :beginning (match-beginning 0)
       :end (match-end 0)
       :string (match-string-no-properties 0)))))
</pre>
</div>

<p>
If you evaluate this version of <code>my-get-match-data</code> and then retry the function call I had above, you will notice how you get the expected return value without the side effect of the cursor moving to the end of the matching text. In practice, this is a useful tool that may be combined with <code>save-match-data</code>. Imagine you want to do a search forward inside of another search you are performing, such as to merely test if there is a match for a regular expression in the context, but need to inhibit the modification of the match data you planned to operate on. As such:
</p>

<div>
<pre>(defun my-get-match-data-with-extra-check (regexp)
  "Search forward for REGEXP followed by no spaces and return its match data, else nil."
  (save-excursion
    (when (and (re-search-forward regexp nil t)
               (save-match-data (not (looking-at "[\s\t]+"))))
      ;; Return the match data of the first search.  The second one
      ;; which tests for spaces or tabs is just an extra check, but we
      ;; do not want to use its match data, hence the `save-match-data'
      ;; around it.
      (list
       :beginning (match-beginning 0)
       :end (match-end 0)
       :string (match-string-no-properties 0)))))
</pre>
</div>

<p>
Evaluate the function <code>my-get-match-data-with-extra-check</code> and then call with M-: (<code>eval-expression</code>) to test that it returns a non-<code>nil</code> value with the second example below, but not the first one. This is the expected outcome.
</p>

<div>
<pre>(my-get-match-data-with-extra-check "Protesilaos.*Cyprus")
;; =&gt; nil


;; Protesilaos, also known as "Prot", lives in the mountains of Cyprus   .

(my-get-match-data-with-extra-check "Protesilaos.*Cyprus")
;; =&gt; (:beginning 41988 :end 42032 :string "Protesilaos lives in the mountains of Cyprus")


;; Protesilaos lives in the mountains of Cyprus.
</pre>
</div>
</div>
</div>
<div id="outline-container-h:switching-to-another-buffer-window-or-narrowed-state">
<h2 id="h:switching-to-another-buffer-window-or-narrowed-state"><span>11.</span> Switching to another buffer, window, or narrowed state</h2>
<div id="text-h:switching-to-another-buffer-window-or-narrowed-state">
<p>
As you use Emacs Lisp to do things programmatically, you encounter cases where you need to move away from where you are. You may have to switch to another buffer, change to the window of a given buffer, or even modify what is visible in the buffer you are editing. At all times, this involves one or more side effects which, most probably, should be undone when your function finishes its job (<a href="#h:side-effect-and-return-value">Side effect and return value</a>).
</p>

<p>
Perhaps the most common case is to restore the <code>point</code>. You have some code that moves back or forth in the buffer to perform a match for a given piece of text. But then, you need to leave the cursor where it originally was, otherwise the user will lose their orientation. Wrap your code in a <code>save-excursion</code> and you are good to go, as I show elsewhere (<a href="#h:the-match-data-of-the-last-search">The match data of the last search</a>):
</p>

<div>
<pre>(save-excursion ; restore the `point' after you are done
  MOVE-AROUND-IN-THIS-BUFFER)
</pre>
</div>

<p>
Same principle for <code>save-window-excursion</code>, which allows you to select another window, such as with <code>select-window</code>, move around in its buffer, and then restore the windows as they were:
</p>

<div>
<pre>(save-window-excursion
  (select-window SOME-WINDOW)
  MOVE-AROUND-IN-THIS-BUFFER)
</pre>
</div>

<p>
The <code>save-restriction</code> allows you to restore the current narrowing state of the buffer. You may then choose to either <code>widen</code> or <code>narrow-to-region</code> (and related commands like <code>org-narrow-to-subtree</code>), do what you must, and then restore the buffer to its original state.
</p>

<div>
<pre>;; Here we assume that we start in a widened state.  Then we narrow to
;; the current Org heading to get all of its contents as one massive
;; string.  Then we widen again, courtesy of `save-restriction'.
(save-restriction
  (org-narrow-to-subtree)
  (buffer-string))
</pre>
</div>

<p>
Depending on the specifics, you will want to combine the aforementioned. Beware that the documentation of <code>save-restriction</code> tells you to use <code>save-excursion</code> as the outermost call. Other than that, you will also find cases that require a different approach to perform some conditional behaviour (<a href="#h:run-some-code-or-fall-back-to-some-other-code">Run some code or fall back to some other code</a>).
</p>
</div>
</div>
<div id="outline-container-h:basic-control-flow-with-if-cond-and-others">
<h2 id="h:basic-control-flow-with-if-cond-and-others"><span>12.</span> Basic control flow with <code>if</code>, <code>cond</code>, and others</h2>
<div id="text-h:basic-control-flow-with-if-cond-and-others">
<p>
You do not need any conditional logic to perform basic operations. For example, if you write a command that moves 15 lines down, it will naturally stop at the end of the buffer when it cannot move past the number you specified. Using <code>defun</code>, you write an interactive function (i.e. a “command”) to unconditionally move down 15 lines using <code>forward-line</code> internally (call it with a negative number to move in the opposite direction):
</p>

<div>
<pre>(defun my-15-lines-down ()
  "Move at most 15 lines down."
  (interactive)
  (forward-line 15))
</pre>
</div>

<p>
The <code>my-15-lines-down</code> is about as simple as it gets: it wraps around a basic function and passes to it a fixed argument, in this case the number <code>15</code>. Use M-x (<code>execute-extended-command</code>) and then call this command by its name. It works! Things get more involved as soon as you decide to perform certain actions only once a given condition is met. This “control flow” between different branches of a logical sequence is expressed with <code>if</code>, <code>when</code>, <code>unless</code>, and <code>cond</code>, among others. Depending on the specifics of the case, <code>and</code> as well as <code>or</code> may suffice.
</p>

<p>
How about you make your <code>my-15-lines-down</code> a bit smarter? When it is at the absolute end of the buffer, have it move 15 lines up. Why? Because this is a demonstration, so why not? The predicate function that tests if the point is at the end of the buffer is <code>eobp</code>. A “predicate” is a function that returns true, technically non-<code>nil</code>, when its condition is met, else it returns <code>nil</code> (<a href="#h:side-effect-and-return-value">Side effect and return value</a>). As for the weird name, the convention in Emacs Lisp is to end predicate functions with the <code>p</code> suffix: if the name of the function consists of multiple words, typically separated by dashes, then the predicate function is named <code>NAME-p</code>, like <code>string-match-p</code>, otherwise it is <code>NAMEp</code>, like <code>stringp</code>.
</p>

<div>
<pre>(defun my-15-lines-down-or-up ()
  "Move at most 15 lines down or go back if `eobp' is non-nil."
  (interactive)
  (if (eobp)
      (forward-line -15)
    (forward-line 15)))
</pre>
</div>

<p>
Evaluate this function, then type M-x (<code>execute-extended-command</code>) and invoke <code>my-15-lines-down-or-up</code> to get a feel for it. Below is a similar idea, which throws and error and exits what it was doing if <code>eobp</code> returns non-<code>nil</code>:
</p>

<div>
<pre>(defun my-15-lines-down-or-error ()
  "Throw an error if `eobp' returns non-nil, else move 15 lines down."
  (interactive)
  (if (eobp)
      (error "Already at the end; will not move further")
    (forward-line 15)))
</pre>
</div>

<p>
A quirk of Emacs Lisp, which may be a feature all along, is how indentation is done. Just mark the code you have written and type TAB: Emacs will take care to indent it the way it should be done. In the case of the <code>if</code> statement, the “then” part is further in than the “else” part of the logic. There is no special meaning to this indentation: you could write everything on a single line like <code>(if COND THIS ELSE)</code>, which looks like your typical list, by the way (<a href="#h:symbols-balanced-expressions-and-quoting">Symbols, balanced expressions, and quoting</a>). What the indentation does is help you identify imbalances in your parentheses. If the different expressions all line up in a way that looks odd, then you are most probably missing a parentheses or have too many of them. Generally, expressions at the same level will all line up the same way. Those deeper in will have more indentation, and so on. Experience will allow you to spot mistakes with mismatching parentheses. But even if you do not identify them, you will get an error eventually. Rest assured!
</p>

<p>
The way <code>if</code> is written is like a function that takes two or more arguments. The “or more” all counts as part of the “else” logic. As such, <code>(if COND THIS)</code> has no “else” consequence, while <code>(if COND THIS ELSE1 ELSE2 ELSE3)</code> will run <code>ELSE1</code>, <code>ELSE2</code>, and <code>ELSE3</code> in order as part of the “else” branch. Here is how this looks once you factor in proper indentation:
</p>

<div>
<pre>(if COND
    THIS
  ELSE1
  ELSE2
  ELSE3)
</pre>
</div>

<p>
Now what if the <code>THIS</code> part needs to be more than one function call? Elisp has the <code>progn</code> form, which you can use to wrap function calls and pass them as a single argument. Putting it all together, your code will now look this like:
</p>

<div>
<pre>(if COND
    (progn
      THIS1
      THIS2
      THIS3)
  ELSE1
  ELSE2
  ELSE3)
</pre>
</div>

<p>
If you do not need the “else” part, use <code>when</code> to express your intention. Internally, this is a macro which actually stands for <code>(if COND (progn EXPRESSIONS))</code>, where <code>EXPRESSIONS</code> is one or more expressions. A <code>when</code> looks like this:
</p>

<div>
<pre>(when COND
  THIS1
  THIS2
  THIS3)
</pre>
</div>

<p>
Similarly, the <code>unless</code> has the meaning of <code>(when (not COND) EXPRESSIONS)</code>. It, too, is a macro that expands to an <code>if</code> statement:
</p>

<div>
<pre>(unless COND
  THIS1
  THIS2
  THIS3)
</pre>
</div>

<p>
When the condition you are testing for has multiple parts, you can rely on <code>and</code> as well as <code>or</code>:
</p>

<div>
<pre>(when (or THIS THAT)
  EXPRESSIONS)

(when (and THIS THAT)
  EXPRESSIONS)

(when (or (and THIS THAT) OTHER)
  EXPRESSIONS)
</pre>
</div>

<p>
Depending on the specifics of the case, the combination of multiple <code>if</code>, <code>when</code>, <code>or</code>, <code>and</code> will look awkward. You can break down the logic to distinct conditions, which are tested in order from top to bottom, using <code>cond</code>. The way <code>cond</code> is written is as a list of lists, which do not need quoting (<a href="#h:evaluation-inside-of-a-macro-or-special-form">Evaluation inside of a macro or special form</a>). In abstract, it looks like this:
</p>

<div>
<pre>(cond
 (CONDITION1
  CONSEQUENCES1)
 (CONDITION2
  CONSEQUENCES2)
 (CONDITION3
  CONSEQUENCES3)
 (t
  CONSEQUENCES-FALLBACK))
</pre>
</div>

<p>
Each of the consequences can be any number of expressions, like you saw above with <code>when</code>. This is a toy function to show how <code>cond</code> behaves:
</p>

<div>
<pre>(defun my-toy-cond (argument)
  "Return a response depending on the type of ARGUMENT."
  (cond
   ((and (stringp argument)
         (string-blank-p argument))
    (message "You just gave me a blank string; try harder!"))
   ((stringp argument)
    (message "I see you can do non-blanks string; I call that progress."))
   ((null argument)
    (message "Yes, the nil is an empty list like (), but do not worry about it"))
   ((listp argument)
    (message "Oh, I see you are in the flow of using lists!"))
   ((symbolp argument)
    (message "What's up with the symbols, mate?"))
   ((natnump argument)
    (message "I fancy those natural numbers!"))
   ((numberp argument)
    (message "You might as well be a math prodigy!"))
   (t
    (message "I have no idea what type of thing your argument `%s' is" argument))))
</pre>
</div>

<p>
I want you to evaluate it and pass it different arguments to test what it does (<a href="#h:evaluate-emacs-lisp">Evaluate Emacs Lisp</a>). Here are two examples:
</p>

<div>
<pre>(my-toy-cond "")
;; =&gt; "You just gave me a blank string; try harder!"

(my-toy-cond '(1 2 3))
;; =&gt; "Oh, I see you are in the flow of using lists!"
</pre>
</div>

<p>
All of the above are common in Emacs Lisp. Another powerful macro is <code>pcase</code>, which we will consider separately due to its particularities (<a href="#h:pattern-match-with-pcase-and-related">Pattern match with <code>pcase</code> and related</a>).
</p>
</div>
</div>
<div id="outline-container-h:control-flow-with-if-let-and-friends">
<h2 id="h:control-flow-with-if-let-and-friends"><span>13.</span> Control flow with <code>if-let*</code> and friends</h2>
<div id="text-h:control-flow-with-if-let-and-friends">
<p>
The <code>let</code> and <code>let*</code> declare variables that are available only within the current scope, else the <code>BODY</code> of the <code>let</code>. As such:
</p>

<div>
<pre>(let BINDINGS
  BODY)

(let ((variable1 value1)
      (variable2 value2))
  BODY)
</pre>
</div>

<p>
The <code>BINDINGS</code> is a list of lists, which does not need to be quoted (<a href="#h:evaluation-inside-of-a-macro-or-special-form">Evaluation inside of a macro or special form</a>). While <code>BODY</code> consists of one or more expressions, which I have also named <code>EXPRESSIONS</code> elsewhere in this book. The difference between <code>let</code> and <code>let*</code> (pronounced “let star”) is that the latter makes earlier bindings available to later bindings. Like this:
</p>

<div>
<pre>;; This works because `greeting' can access `name' and `country',
;; courtesy of `let*':
(let* ((name "Protesilaos")
       (country "Cyprus")
       (greeting (format "Hello %s of %s" name country)))
  (DO-STUFF-WITH greeting))

;; But this fails...
(let ((name "Protesilaos")
      (country "Cyprus")
      (greeting (format "Hello %s of %s" name country)))
  (DO-STUFF-WITH greeting))
</pre>
</div>

<p>
Sometimes what you want to do is create those bindings if—and only if—they are all non-<code>nil</code>. If their value is <code>nil</code>, then they are useless to you, in which case you do something else (<a href="#h:basic-control-flow-with-if-cond-and-others">Basic control flow with <code>if</code>, <code>cond</code>, and others</a>). Values may or may not be <code>nil</code> when you are creating a binding with the return value of a function call or some other variable. You could always write code like this:
</p>

<div>
<pre>(let ((variable1 (SOME-FUNCTION SOME-ARGUMENT))
      (variable2 (OTHER-FUNCTION OTHER-ARGUMENT)))
  (if (and variable1 variable2) ; simply test both for non-nil
      THIS
    ELSE))
</pre>
</div>

<p>
But you can do the same with <code>if-let*</code>, where the <code>THIS</code> part runs only if all the bindings are non-<code>nil</code>:
</p>

<div>
<pre>(if-let* ((variable1 (SOME-FUNCTION SOME-ARGUMENT))
          (variable2 (OTHER-FUNCTION OTHER-ARGUMENT)))
    THIS
  ELSE)
</pre>
</div>

<p>
In the <code>ELSE</code> part, the bindings <code>variable1</code> and <code>variable2</code> do not exist: they only exist for the <code>THIS</code> part of the code.
</p>

<p>
The <code>when-let*</code> is the same as <code>when</code>, meaning that it has no “else” logic. If one of its bindings is <code>nil</code>, then the whole <code>when-let*</code> returns <code>nil</code>. No need to belabour that point.
</p>

<p>
As you dig dipper into the Emacs Lisp ecosystem, you will come across uses of <code>if-let*</code> that (i) create multiple bindings like <code>let</code> or <code>let*</code> but (ii) also call a predicate function to test if they should continue with the <code>THIS</code> part of their logic. Remember that <code>if-let*</code> goes straight to <code>ELSE</code> if one of its bindings returns <code>nil</code>. Consider this example:
</p>

<div>
<pre>(if-let* ((variable1 (SOME-FUNCTION SOME-ARGUMENT))
          ;; The _ signifies intent: "do not bind this; I only care
          ;; about the return value being non-nil".  What we are doing
          ;; here is test if `variable1' is a string: if it is, we
          ;; continue with the bindings, otherwise we move to the ELSE
          ;; part of the code.
          (_ (string-match-p variable1))
          (variable2 (OTHER-FUNCTION OTHER-ARGUMENT)))
    THIS
  ELSE)
</pre>
</div>

<p>
There is no inherently superior way of doing things. It is a matter of using the right tool for the task at hand. Sometimes you want the bindings to be created, even if their value is <code>nil</code>. Choose what makes sense.
</p>
</div>
</div>

<div id="outline-container-h:run-some-code-or-fall-back-to-some-other-code">
<h2 id="h:run-some-code-or-fall-back-to-some-other-code"><span>15.</span> Run some code or fall back to some other code</h2>
<div id="text-h:run-some-code-or-fall-back-to-some-other-code">
<p>
Your typical code will rely on <code>if</code>, <code>cond</code>, and the like for control flow (<a href="#h:basic-control-flow-with-if-cond-and-others">Basic control flow with <code>if</code>, <code>cond</code>, and others</a>). Depending on your specific needs or stylistic considerations, it may even include <code>pcase</code> (<a href="#h:pattern-match-with-pcase-and-related">Pattern match with <code>pcase</code> and related</a>) as well as <code>if-let*</code> (<a href="#h:control-flow-with-if-let-and-friends">Control flow with <code>if-let*</code> and friends</a>). There are some cases, nonetheless, that make it imperative you run additional code after your primary operation concludes or exits. The idea is to clean up whatever intermediate state you created. The logic is “do this with all the necessary side effects, then whatever happens to it do that now to, inter alia, undo the side effects.” This is the concept of “unwinding”, which is implemented via <code>unwind-protect</code>.
</p>

<p>
In the following code block, I define a function which produces a minibuffer prompt asking you to provide a <code>y</code> or <code>n</code> answer, which is shorthand notation for “yes” or “no”. It tests the return value of <code>y-or-n-p</code> to determine what it needs to do. While the prompt is open, the function highlights all instances of the regular expression <code>(defun</code> in the current buffer. Those highlights must go away after you are done with the minibuffer and its consequences.
</p>

<div>
<pre>(defun my-prompt-with-temporary-highlight ()
  "Ask for confirmation and highlight all instances of a regexp while waiting."
  (let ((regexp "(defun"))
    (unwind-protect
        (progn
          (highlight-regexp regexp)
          (if (y-or-n-p "Should we proceed or not? ")
              (message "You have decided to proceed")
            (message "You prefer not to continue")))
      (unhighlight-regexp regexp))))
</pre>
</div>

<p>
Try the above in your Emacs to get a feel for it. While the “yes or no” prompt is active, also do C-g (<code>keyboard-quit</code>) or C-] (<code>abort-recursive-edit</code>) to confirm that the highlights are removed even though the code never gets past the prompting phase. You may even modify the function to produce an error: it will create a backtrace, which will still have the effect of unwinding after you do q (<code>debugger-quit</code>) from the <code>*Backtrace*</code> window.
</p>

<div>
<pre>(defun my-prompt-with-temporary-highlight-try-with-error ()
  "Ask for confirmation and highlight all instances of a regexp while waiting."
  (let ((regexp "(defun"))
    (unwind-protect
        (progn
          (highlight-regexp regexp)
          (error "This error makes no sense here; close the backtrace to test the unwinding")
          (if (y-or-n-p "Should we proceed or not? ")
              (message "You have decided to proceed")
            (message "You prefer not to continue")))
      (unhighlight-regexp regexp))))
</pre>
</div>

<p>
Taking a step back, you will figure out how <code>unwind-protect</code> is a more general form of specialists like <code>save-excursion</code> and <code>save-restriction</code> (<a href="#h:switching-to-another-buffer-window-or-narrowed-state">Switching to another buffer, window, or narrowed state</a>), while it underpins the <code>save-match-data</code> (<a href="#h:the-match-data-of-the-last-search">The match data of the last search</a>) among many other functions/macros, such as <code>with-temp-buffer</code> and <code>save-window-excursion</code>. What <code>unwind-protect</code> does not do is respond specially to signals, such as those coming from the <code>error</code> function: it will allow the error to happen, meaning that a backtrace will be displayed and your code will exit right there (but the unwinding will still work, as I already explained, once you dismiss the backtrace). To make your code treat signals in a more controlled fashion, you must rely on <code>condition-case</code>.
</p>

<p>
With <code>condition-case</code> you assume full control over the behaviour of your code, including how it should deal with errors. Put differently, your Elisp will express the intent of “I want to do this, but if I get an error I want to do that instead.” There are many signals to consider, all of which come from the <code>signal</code> function. These include the symbols <code>error</code>, <code>user-error</code>, <code>args-out-of-range</code>, <code>wrong-type-argument</code>, <code>wrong-length-argument</code>, and <code>quit</code>, in addition to anything else the programmer may consider necessary. In the following code blocks, I show you how <code>condition-case</code> looks like. Remember that sometimes you do not do quoting the usual way because of how the underlying form is implemented (<a href="#h:evaluation-inside-of-a-macro-or-special-form">Evaluation inside of a macro or special form</a>). The example I am using is the same I had for <code>unwind-protect</code>.
</p>

<div>
<pre>(defun my-prompt-with-temporary-highlight-and-signal-checks ()
  "Ask for confirmation and highlight all instances of a regexp while waiting."
  (let ((regexp "(defun"))
    (condition-case nil
        (progn
          (highlight-regexp regexp)
          (if (y-or-n-p "Should we proceed or not? ")
              (user-error "You have decided to proceed; but we need to return a `user-error'")
            (error "You prefer not to continue; but we need to return an `error'")))
      (:success
       (unhighlight-regexp regexp)
       (message "No errors, but still need to unwind what we did, plus whatever else we want here"))
      (quit
       (unhighlight-regexp regexp)
       (message "This is our response to the user aborting the prompt"))
      (user-error
       (unhighlight-regexp regexp)
       (message "This is our response to the `user-error' signal"))
      (error
       (unhighlight-regexp regexp)
       (message "This is our response to the `error' signal")))))
</pre>
</div>

<p>
The above function illustrates both the aforementioned concept of unwinding and the mechanics of handling signals. The abstract structure of <code>condition-case</code> looks to me like an amalgamation of <code>let</code>, <code>unwind-protect</code>, and <code>cond</code>. These conditions may include the special handler of <code>:success</code>, as I show there. Granted, the code I wrote will never lead to that specific success case, though you can modify what happens after the prompt to, say, call <code>message</code> instead of the <code>user-error</code> function, which will then count as a successful conclusion. Otherwise, I think the expressions I wrote tell you exactly how this program responds to the signals it receives.
</p>

<p>
What I have not covered yet, is the aspect of <code>condition-case</code> that is like the <code>let</code>, namely, how it binds the error data to a variable within this scope. In my implementation above, it is the <code>nil</code> you see there, meaning that I choose not to perform such a binding, as I have no use for its data. Below I decide to use it, just for the sake of demonstration.
</p>

<div>
<pre>(defun my-prompt-with-temporary-highlight-and-signal-checks-with-error-report ()
  "Ask for confirmation and highlight all instances of a regexp while waiting."
  (let ((regexp "(defun"))
    (condition-case error-data-i-got
        (progn
          (highlight-regexp regexp)
          (if (y-or-n-p "Should we proceed or not? ")
              (user-error "You have decided to proceed; but we need to return a `user-error'")
            (error "You prefer not to continue; but we need to return an `error'")))
      (:success
       (unhighlight-regexp regexp)
       (message "No errors, but still need to unwind what we did, plus whatever else we want here")
       (message "The error is `%s' and its data is `%S'" (car error-data-i-got) (cdr error-data-i-got)))
      (quit
       (unhighlight-regexp regexp)
       (message "This is our response to the user aborting the prompt")
       (message "The error is `%s' and its data is `%S'" (car error-data-i-got) (cdr error-data-i-got)))
      (user-error
       (unhighlight-regexp regexp)
       (message "This is our response to the `user-error' signal")
       (message "The error is `%s' and its data is `%S'" (car error-data-i-got) (cdr error-data-i-got)))
      (error
       (unhighlight-regexp regexp)
       (message "This is our response to the `error' signal")
       (message "The error is `%s' and its data is `%S'" (car error-data-i-got) (cdr error-data-i-got))))))
</pre>
</div>

<p>
There will be times when <code>unwind-protect</code> and <code>condition-case</code> are the right tools for the job. My hope is that these examples have given you the big picture view and you are now ready to write your own programs in Emacs Lisp.
</p>
</div>
</div>
<div id="outline-container-h:when-to-use-a-named-function-or-a-lambda-function">
<h2 id="h:when-to-use-a-named-function-or-a-lambda-function"><span>16.</span> When to use a named function or a lambda function</h2>
<div id="text-h:when-to-use-a-named-function-or-a-lambda-function">
<p>
The <code>lambda</code> is an anonymous function. It stands in juxtaposition to <code>defun</code>, which defines a function with a given name. When to use one or the other is largely a matter of style. Though there are some cases where a certain approach is more appropriate. The rule of thumb is this: if you need to use the function more than once, then give it a name and then call it by its name. Otherwise, you will effectively be redefining it each time, which makes it hard for you to rewrite your program. By contrast, if the function is only relevant ad-hoc, then a <code>lambda</code> is fine.
</p>

<p>
In some cases, you will have a named function that employs a <code>lambda</code> internally. To modify one of the examples you will find in this book (<a href="#h:mapping-through-a-list-of-elements">Mapping through a list of elements</a>):
</p>

<div>
<pre>(defun my-increment-numbers-by-ten (numbers)
  "Add 10 to each number in NUMBERS and return the new list."
  (mapcar
   (lambda (number)
     (+ 10 number))
   numbers))

(my-increment-numbers-by-ten '(1 2 3))
;; =&gt; (11 12 13)
</pre>
</div>

<p>
A <code>lambda</code> inside of a named function may also be used to do something over and over again, with the help of <code>let</code>. You may, for instance, have a function that needs to greet a list of people as a side effect with <code>mapc</code> and you do not want to define the same function more than once:
</p>

<div>
<pre>(defun my-greet-teams (&amp;rest teams)
  "Say hello to each person in TEAMS and return list with all persons per team.
Each member of TEAMS is a list of strings."
  (let* ((greet-name (lambda (name)
                       (message "Hello %s" name)))
         (greet-team-and-names (lambda (team)
                                 (message "Greeting the team of `%s'..." team)
                                 (mapc greet-name team))))
    (mapcar greet-team-and-names teams)))

(my-greet-teams
 '("Pelé" "Ronaldo")
 '("Maradona" "Messi")
 '("Beckenbauer" "Neuer")
 '("Platini" "Zidane")
 '("Baresi" "Maldini")
 '("Eusebio" "Cristiano Ronaldo")
 '("Xavi" "Iniesta")
 '("Charlton" "Shearer")
 '("Puskas" "Kubala")
 '("All of the Greece Euro 2004 squad ;)"))
;; =&gt; (("Pelé" "Ronaldo") ("Maradona" "Messi") ...)
</pre>
</div>

<p>
The greetings are a side effect in this case and are available in the <code>*Messages*</code> buffer. You can quickly access that buffer with C-h e (<code>view-echo-area-messages</code>). It does not really matter what <code>my-greet-teams</code> is doing. Focus on the combination of a named function and anonymous functions inside of it.
</p>
</div>
</div>
<div id="outline-container-h:make-your-interactive-function-also-work-from-lisp-calls">
<h2 id="h:make-your-interactive-function-also-work-from-lisp-calls"><span>17.</span> Make your interactive function also work from Lisp calls</h2>
<div id="text-h:make-your-interactive-function-also-work-from-lisp-calls">
<p>
Functions can be used interactively when they are declared with the <code>interactive</code> specification. This turns them into “commands”. They can be called via their name by first doing M-x (<code>execute-extended-command</code>) and then finding the command. They may also be assigned to a key and invoked directly by pressing that key. In its simplest form, the <code>interactive</code> specification is an unquoted list like <code>(interactive)</code>. Here is a trivial example that calls <code>read-string</code> to produce a minibuffer prompt which accepts user input and returns it as a string:
</p>

<div>
<pre>(defun my-greet-person ()
  (interactive)
  (message "Hello %s" (read-string "Whom to greet? ")))
</pre>
</div>

<p>
The problem with the above implementation is that it is only useful in interactive use. If you want to issue such a greeting non-interactively through a program, you need to write another function that does practically the same thing except that it takes a <code>NAME</code> argument. Like this:
</p>

<div>
<pre>(defun my-greet-person-with-name (name)
  "Greet person with NAME."
  (message "Hello %s" name))
</pre>
</div>

<p>
You do not need to write two separate functions which practically do the same thing. Instead, you can have one function, with its parameters, which decides how to get the values of the arguments passed to it depending on if it is called interactively or programmatically. Consider this scenario:
</p>

<div>
<pre>(defun my-greet-interactive-and-non-interactive (name)
  "Greet person with NAME.
When called interactively, produce a minibuffer prompt asking for NAME.

When called from Lisp, NAME is a string."
  (interactive (list (read-string "Whom to greet? ")))
  (message "Hello %s" name))
</pre>
</div>

<p>
The documentation I wrote there tells you exactly what is happening. Though let me explain <code>interactive</code> in further detail: it takes an argument, which is a list that corresponds to the argument list of the current <code>defun</code>. In this case, the <code>defun</code> has a list of arguments that includes a single element, the <code>NAME</code>. Thus, <code>interactive</code> also has a list with one element, whose value corresponds to <code>NAME</code>. If the parameters were more than one, then the <code>interactive</code> would have to be written accordingly: each of its elements would correspond to the parameter at the same index on the list.
</p>

<p>
This list of expressions you pass to <code>interactive</code> essentially is the preparatory work that binds values to the parameters. When you call the above function interactively, you practically tell Emacs that in this case <code>NAME</code> is the return value of the call to <code>read-string</code>. For more parameters, you get the same principle but I write it down just to be clear:
</p>

<div>
<pre>(defun my-greet-with-two-parameters (name country)
  "Greet person with NAME from COUNTRY.
When called interactively, produce a minibuffer prompt asking for NAME
and then another prompt for COUNTRY.

When called from Lisp, NAME and COUNTRY are strings."
  (interactive
   (list
    (read-string "Whom to greet? ")
    (read-string "Where from? ")))
  (message "Hello %s of %s" name country))

(my-greet-with-two-parameters "Protesilaos" "Cyprus")
;; =&gt; "Hello Protesilaos of Cyprus"
</pre>
</div>

<p>
Write <code>interactive</code> specifications with care and you will end up with a rich corpus of code that is economical and flexible.
</p>
</div>
</div>
<div id="outline-container-h:copying">
<h2 id="h:copying"><span>18.</span> COPYING</h2>
<div id="text-h:copying">
<p>
Copyright (C) 2025 Protesilaos Stavrou
</p>

<blockquote>
<p>
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being “A GNU Manual,” and
with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled “GNU Free Documentation License.”
</p>

<p>
(a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
modify this GNU manual.”
</p>
</blockquote>
</div>
</div>
<div id="outline-container-h:gnu-free-documentation-license">
<h2 id="h:gnu-free-documentation-license"><span>19.</span> GNU Free Documentation License</h2>
<div id="text-h:gnu-free-documentation-license">
<pre>
                GNU Free Documentation License
                 Version 1.3, 3 November 2008


 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https: fsf.org="">
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document "free" in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of
the Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no
other conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled "History", Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. For any section Entitled "Acknowledgements" or "Dedications",
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section Entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled "Endorsements"
   or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all sections
Entitled "Endorsements".


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy
that is included in the collection, provided that you follow the rules
of this License for verbatim copying of each of the documents in all
other respects.

You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.  See
https://www.gnu.org/licenses/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
"Massive Multiauthor Collaboration" (or "MMC") contained in the site
means any set of copyrightable works thus published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in
part, as part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole or
in part into the MMC, (1) had no cover texts or invariant sections, and
(2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</https:></pre>

<!--
</div>
</div>
<div id="outline-container-h:indices" class="outline-2">
<h2 id="h:indices"><span class="section-number-2">20.</span> Indices</h2>
<div class="outline-text-2" id="text-h:indices">
</div>
<div id="outline-container-h:function-index" class="outline-3">
<h3 id="h:function-index"><span class="section-number-3">20.1.</span> Function index</h3>
<div class="outline-text-3" id="text-h:function-index">
</div>
</div>
<div id="outline-container-h:variable-index" class="outline-3">
<h3 id="h:variable-index"><span class="section-number-3">20.2.</span> Variable index</h3>
<div class="outline-text-3" id="text-h:variable-index">
</div>
</div>
<div id="outline-container-h:concept-index" class="outline-3">
<h3 id="h:concept-index"><span class="section-number-3">20.3.</span> Concept index</h3>
<div class="outline-text-3" id="text-h:concept-index">
-->
</div>
</div>
</div>

	</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple, Nvidia, Dell, and Others Get a Tariffs Exemption Under New Rules (207 pts)]]></title>
            <link>https://www.barrons.com/articles/tariffs-exclusions-exemptions-apple-nvidia-dell-smartphones-pcs-b2e069ff</link>
            <guid>43664665</guid>
            <pubDate>Sat, 12 Apr 2025 14:26:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.barrons.com/articles/tariffs-exclusions-exemptions-apple-nvidia-dell-smartphones-pcs-b2e069ff">https://www.barrons.com/articles/tariffs-exclusions-exemptions-apple-nvidia-dell-smartphones-pcs-b2e069ff</a>, See on <a href="https://news.ycombinator.com/item?id=43664665">Hacker News</a></p>
Couldn't get https://www.barrons.com/articles/tariffs-exclusions-exemptions-apple-nvidia-dell-smartphones-pcs-b2e069ff: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA["Slow Pay, Low Pay or No Pay": Blue Cross Approved Surgeries Then Refused to Pay (158 pts)]]></title>
            <link>https://www.propublica.org/article/blue-cross-blue-shield-louisiana-insurance-lawsuit-breast-cancer-doctors</link>
            <guid>43664660</guid>
            <pubDate>Sat, 12 Apr 2025 14:25:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.propublica.org/article/blue-cross-blue-shield-louisiana-insurance-lawsuit-breast-cancer-doctors">https://www.propublica.org/article/blue-cross-blue-shield-louisiana-insurance-lawsuit-breast-cancer-doctors</a>, See on <a href="https://news.ycombinator.com/item?id=43664660">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pp-location="article body">

                    


        
                    <div data-pp-location="top-note">
                

                                                
            <p>ProPublica is a nonprofit newsroom that investigates abuses of power. Sign up to receive <a href="https://www.propublica.org/newsletters/the-big-story?source=www.propublica.org&amp;placement=top-note&amp;region=national">our biggest stories</a> as soon as they’re published.</p>

                

            </div><!-- end .article-body__top-notes -->
        
                    

<div>
    <h3>Reporting Highlights</h3>
    <ul>
                    <li><span>Shortchanged: </span> Blue Cross Louisiana OK’d mastectomies and breast reconstructions for women with cancer but refused to pay a hospital’s full bills. For some claims, it paid nothing.</li>
            <li><span>Exceptions: </span> Blue Cross denied payments for thousands of procedures involved in breast reconstruction. But it approved special deals for treatment for executives’ wives.</li>
            <li><span>Verdict: </span> A jury found Blue Cross liable for fraud and awarded the hospital $421 million. The insurance company denied wrongdoing and has appealed.</li>
            </ul>
    <p>
        These highlights were written by the reporters and editors who worked on this story. <span id="survey-placeholder"></span>
    </p>
</div>





        
        




                    

<figure data-pp-id="1" data-pp-blocktype="embed">

    


                        
            
    
<figcaption>
    
    
    
    </figcaption>


</figure>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="2.0">On a late afternoon in November 2017, Witney Arch told her 1-1/2-year-old son to stop playing and come inside. Upset, he grabbed her right breast when she picked him up. She experienced a shock of pain but did not think it was anything serious. A week later, however, the ache had not subsided. After trips to several doctors, a biopsy revealed that Arch had early-stage breast cancer. Her surgeon told her that it was likely invasive and aggressive.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="3.0">By the end of January, she had made two critical decisions. She would get a double mastectomy. And she wanted her operation at the Center for Restorative Breast Surgery in New Orleans, a medical facility renowned for its highly specialized approach to breast cancer care and reconstruction. The two surgeons who founded it had pioneered techniques that used a woman’s own body tissue to form new breasts post mastectomy. The idea of a natural restoration appealed to Arch. “I don’t judge anybody for getting implants, especially if you’ve had cancer,” she said. “But I felt like I was taking something foreign out of my body, cancer, and I did not want to put something foreign back in.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="4.0">Arch was a 42-year-old preschool teacher for her church, with four young children, living in a suburb of New Orleans. The 1-1/2-year-old had been born with Sturge-Weber syndrome, a rare neurological disorder. Caring for him consumed her life. By nature upbeat and optimistic, Arch felt blessed that her son’s act of defiance had led to an early diagnosis. “We’re going to pray about this and we’re going to figure it out,” she told her husband.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="5.0">Arch asked her insurer, Blue Cross and Blue Shield of Louisiana, for approval to go to the center for her care, and the company granted it, a process known as prior authorization. Then, a week or so before her surgery, Arch was wrangling child care and meal plans when she got a call from the insurer. The representative on the line was trying to persuade her to have the surgery elsewhere. She urged Arch to seek a hospital that, unlike the center, was in network and charged less. “Do you realize how much this is going to cost?” Arch remembered the agent asking. Arch did not need more stress, but here it was — from her own health plan. “I feel very comfortable with my decision,” she replied. “My doctor teaches other doctors around the world how to do this.” Over the next year, Arch underwent five operations to rid herself of cancer and reconstruct her breasts.</p>
        
    
                    

<figure data-pp-id="6" data-pp-blocktype="image">

    


                    
    


    <img alt="" width="3000" height="2000" loading="lazy" js-autosizes="" src="https://img.assets-d.propublica.org/v5/images/20250212-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=d9b3c6739554731046442c6cd39c0fb2" srcset="https://img.assets-d.propublica.org/v5/images/20250212-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=267&amp;q=75&amp;w=400&amp;s=a2f3d69de164367138257dca213ac881 400w, https://img.assets-d.propublica.org/v5/images/20250212-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=d9b3c6739554731046442c6cd39c0fb2 800w, https://img.assets-d.propublica.org/v5/images/20250212-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=800&amp;q=75&amp;w=1200&amp;s=52ae76f6cefb7c9f3c150796d20b1d78 1200w, https://img.assets-d.propublica.org/v5/images/20250212-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=867&amp;q=75&amp;w=1300&amp;s=11df6d45519843240a0dce3bb2e351ef 1300w, https://img.assets-d.propublica.org/v5/images/20250212-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=967&amp;q=75&amp;w=1450&amp;s=0216175c1ece258d481c21787a514d58 1450w, https://img.assets-d.propublica.org/v5/images/20250212-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1067&amp;q=75&amp;w=1600&amp;s=e7fb8ae67ad8e8d76cc76ee3732caeb3 1600w, https://img.assets-d.propublica.org/v5/images/20250212-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1333&amp;q=75&amp;w=2000&amp;s=aea81806a739cb5826602f1fd9186e45 2000w">

            
    
<figcaption>
        <span>Witney Arch received authorization from Blue Cross and Blue Shield of Louisiana for her mastectomy and breast restoration, but the insurer did not pay the full bill from the Center for Restorative Breast Surgery.</span>
    
        <span>
        <span>Credit: </span>
        Daniella Zalcman for ProPublica
    </span>
    
    
    </figcaption>

</figure>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="7.0">Arch did not know it at the time, but her surgery would become evidence in a long-running legal fight between the breast center’s founders, surgeons Frank DellaCroce and Scott Sullivan, and Blue Cross, Louisiana’s biggest health insurance company, with an estimated two-thirds share of the market. DellaCroce and Sullivan had repeatedly sued the insurer, alleging that it granted approvals for surgery but then denied payments or paid only a fraction of patients’ bills. They pointed to calls like the one Arch received as proof of the company’s effort to drive away patients. The aggressive legal attack, they knew, was fraught. Litigation against the $3.4 billion company would take a long time and a lot of money. The chances of winning were slight. “You fight dragons at great peril,” DellaCroce would tell friends. But this September, after 18 years and several defeats in court, jurors found Blue Cross liable for fraud. They awarded the center $421 million — one of the largest verdicts ever to a single medical practice outside of a class-action lawsuit. <a href="https://www.documentcloud.org/documents/25893394-statement-from-blue-cross-and-blue-shield-of-louisiana/">In a statement</a>, Blue Cross said it “disagrees with the jury’s decision, which we believe was wrong on the facts and the law. We have filed an appeal and expect to be successful.”</p>
        
    
                        
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="9.0">Frustration with insurers is at an all-time high. The December fatal shooting of United Healthcare CEO Brian Thompson allegedly by Luigi Mangione serves as an extreme and tragic example. Doctors and insurers are locked into a perpetual conflict over health care costs, with patients caught in the middle. Doctors accuse insurance plans of blocking payments for health care treatments that can save the patients’ lives. Insurance companies insist they shouldn’t pay for procedures that they say are unnecessary or overpriced. It is easy to emerge from an examination of the American health care system with a cynicism that both sides are broken and corrupt.</p>
        
    
                    
    
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="11.0">However, interviews with scores of doctors, patients and insurance executives, as well as reviews of internal documents, regulatory filings and academic studies, reveal a fundamental truth: The two sides are not evenly matched. Insurance companies are players in the fight over money, and they are also the referees. Insurers produce their own guidelines to determine whether to pay claims. When a doctor appeals a denial, insurers make all the initial decisions. In legal settings, insurers are often given favorable standing in their ability to set what conditions they are required to cover. Federal and state insurance regulators lack the resources to pursue individual complaints against multibillion-dollar companies. Six major insurers, which include some of the nation’s largest companies, cover half of all Americans. They are pitted against tens of thousands of doctors’ practices and large hospital chains.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="13.0">The Blue Cross trial provides a rare opportunity to expose in detail the ways that health insurance companies wield power over doctors and their patients. Blue Cross executives testified that the breast center charged too much money — sometimes more than $180,000 for an operation. The center, they said, deserved special attention because it had a history of questionable charges. But the insurer’s defense went even further, to the very meaning of “prior authorization,” which it had granted women like Arch to pursue surgery. The authorization, they said in court, recognized that a procedure was medically necessary, but it also contained a clause that it was “<em>not</em> a guarantee of payment.” Blue Cross was not obliged to pay the center anything, top executives testified. “Let me be clear: The authorization never says we’re going to pay you,” said Steven Udvarhelyi, who was the CEO for the insurer from 2016 to 2024, <a href="https://www.documentcloud.org/documents/25882446-steven-udvarhelyi-deposition/#document/p1/a2630959">in a deposition</a>. “That’s why there’s a disclaimer.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="14.0">From 2015 through 2023, the Baton Rouge-based insurer paid, on average, less than 9% of the charges billed by the breast center for more than 7,800 individual medical procedures — even though it had authorized all of them. Thousands of such claims were never paid at all, according to court records. Testimony revealed that the health plan never considered thousands of appeals filed by the center. Corporate documents showed Blue Cross executives had set up secret processes for approving operations and reimbursing the clinic and its doctors that resulted in reduced fees and payment delays. One lucrative strategy: A national-level policy allowed Blue Cross Louisiana to take a cut of any savings it achieved in paying the breast center on behalf of patients covered by out-of-state Blue Cross companies, meaning the less the insurer paid out, the more it earned.</p>
        
    
                    <figure data-pp-id="15" data-pp-blocktype="pull-quote">

    <blockquote>
        <p>Let me be clear: The authorization never says we’re going to pay you. That’s why there’s a disclaimer.</p>

    </blockquote>
        <figcaption>
        —Steven Udvarhelyi, former Blue Cross and Blue Shield of Louisiana CEO

    </figcaption>
    
</figure>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="16.0">In Sullivan’s words, the insurer was hypocritical, “morally bankrupt.” Blue Cross had stranded many of the center’s patients with high bills, amounts that it had absorbed over the years. On several occasions, though, Blue Cross executives had signed special one-time deals with the center, known as single case agreements, to pay for their wives’ cancer treatment. To Sullivan, it seemed the insurer was willing to pay the center when patients had connections but would fight when patients did not.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="17.0">Blue Cross declined to comment on any individual cases but said in a statement that single case agreements were “common in the industry” and were available to all members when needed to access out-of-network providers.</p>
        
    
                    

<figure data-pp-id="18" data-pp-blocktype="image">

    


                    
    


    <img alt="" width="3000" height="2000" loading="lazy" js-autosizes="" src="https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-017_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=5478a63f7dce159592f2fdff70bd53b5" srcset="https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-017_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=267&amp;q=75&amp;w=400&amp;s=d2da40b7bf2879b9dbec724de1c90384 400w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-017_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=5478a63f7dce159592f2fdff70bd53b5 800w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-017_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=800&amp;q=75&amp;w=1200&amp;s=615d2c3e71985994a86da1aef52d8f7e 1200w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-017_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=867&amp;q=75&amp;w=1300&amp;s=a742ecfd78eb703ecb3b38b46c0a9ff5 1300w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-017_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=967&amp;q=75&amp;w=1450&amp;s=cdf89671325ba0f4bd54380cf22a86e5 1450w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-017_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1067&amp;q=75&amp;w=1600&amp;s=553d75db6fc2164cd50562e46f48a58d 1600w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-017_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1333&amp;q=75&amp;w=2000&amp;s=74199eabf4f797f7d0cac8ee28ca64eb 2000w">

            
    
<figcaption>
        <span>Dr. Scott Sullivan, left, and Dr. Frank DellaCroce, the founding surgeons of the Center for Restorative Breast Surgery and St. Charles Surgical Hospital</span>
    
        <span>
        <span>Credit: </span>
        Daniella Zalcman for ProPublica
    </span>
    
    
    </figcaption>

</figure>

        
    
                    <p><span>Chapter 1</span></p><h3 data-pp-id="19" data-pp-blocktype="heading" id="the-center">
    The Center
</h3>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="20.0">Nobody would take <a href="https://www.breastcenter.com/">the breast center and its adjoining hospital</a> as an ordinary medical establishment. The two facilities take up a city block along St. Charles Avenue, the thoroughfare famous for its streetcars, Mardi Gras parades and Queen Anne mansions. Patients access the complex — created by merging a former law office, funeral home, car dealership and Dunkin’ Donuts — by driving around back where a porte cochere leads into a soaring atrium. Light pours in through windows set in the high ceiling. Arrangements of white orchids are scattered among comfortable couches and chairs. Here, women consult with doctors to plan their treatment. Surgeries are performed at the 39-bed hospital, which has an Icee machine in a family room. New-age music plays softly throughout the building. Rooms are designed to be as homey as possible, with medical gear hidden away and seascapes by a local artist hanging on the wall. One patient’s husband referred to it as a “spa-spital.”</p>
        
    
                        
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="22.0">The idea of combining the luxury feel of an upscale plastic surgery practice with the mission-driven zeal of a medical clinic came to DellaCroce and Sullivan while they were young surgeons. The two grew up in Louisiana. Sullivan spent much of his childhood in Mandeville, a suburb of New Orleans on the north side of Lake Ponchartrain, his dad employed in the oil and gas industry. His mother wanted him to be a priest or a doctor. “I definitely was not going to become a priest,” he said. DellaCroce’s father worked at the paper mill in West Monroe in the state’s northern neck. His mother, a nurse, gave him an appreciation for medicine as a career that was “meaningful and challenging.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="23.0">They became friends while working at the Louisiana State University medical center, where they earned the nickname “the Sushi Brothers” for their favorite lunch. They were drawn to microsurgery and breast reconstruction because it was an emerging field that was innovating and improving care. Both men became board-certified in plastic surgery. Sullivan, 60, is the hard-charging businessman, stocky, direct and blunt. DellaCroce, 58, with a ponytail, goatee and soft drawl, is more the diplomat, patient and cerebral. The pair have lectured around the world and written numerous medical journal articles.</p>
        
    
                    

<figure data-pp-id="24" data-pp-blocktype="image">

    


                    
    


    <img alt="" width="3000" height="2000" loading="lazy" js-autosizes="" src="https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-029_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=174b02e34a3bc96953cf1ecc9cdc177a" srcset="https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-029_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=267&amp;q=75&amp;w=400&amp;s=9377bbc7c9ec613ef5be734d1b3794ff 400w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-029_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=174b02e34a3bc96953cf1ecc9cdc177a 800w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-029_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=800&amp;q=75&amp;w=1200&amp;s=c9cbad3a014b8a97e1ce22a669950d45 1200w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-029_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=867&amp;q=75&amp;w=1300&amp;s=3896a57c2e26720feb9cd902d9a24301 1300w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-029_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=967&amp;q=75&amp;w=1450&amp;s=7831862bd1926415492b611e12901658 1450w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-029_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1067&amp;q=75&amp;w=1600&amp;s=9d4cd2c147cbe231f747539c1d866201 1600w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-029_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1333&amp;q=75&amp;w=2000&amp;s=0e1e233c04b57a686695f31ca8281432 2000w">

            
    
<figcaption>
        <span>A patient room in the St. Charles Surgical Hospital in New Orleans</span>
    
        <span>
        <span>Credit: </span>
        Daniella Zalcman for ProPublica
    </span>
    
    
    </figcaption>

</figure>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="25.0">They opened their first office in 2003 in a single room rented from a fellow doctor at what was then known as Memorial Medical Center, the hulking private hospital in New Orleans. They performed operations at facilities throughout the region but found that most gave little consideration to their patients’ comfort. They wanted to build a different kind of hospital. “Can we give them that little bit of extra without breaking the budget to make the experience less awful? Can’t make it great, but can you make it less awful?” DellaCroce explained. “Can you attend to the human side of this patient and give them the added value of peace and confidence?” Hurricane Katrina set back their construction plans, and the new edifice, named the St. Charles Surgical Hospital, did not open its doors until 2009. It boasts of being the only hospital in the country devoted solely to care for breast cancer patients who have received mastectomies. The center does not provide radiation or chemotherapy treatments. The majority of patients come from out of state.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="26.0">Women seeking to have their breasts restored after a mastectomy face two paths. Some choose a relatively straightforward surgical procedure using implants filled with silicon or another gel. The center specializes in the other option, what’s known as autologous tissue reconstruction, where a woman’s own fat is taken from one part of the body, like the bottom or the stomach, and used to rebuild the breast. The procedure requires a longer recovery time, but the new breasts become part of the body.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="27.0">The transplant surgery is lengthy and complex. Operations can last up to 12 hours with big medical teams involved. One surgeon performs the mastectomy while another creates a new breast by knitting together layers of fat and tissue. Concentration is intense. The surgeons stare through glasses with microscopes to connect new blood vessels with a needle that’s thinner than an eyelash, using thread less than half the width of a human hair. DellaCroce and Sullivan invented techniques, for example, allowing tissue to be taken from multiple sites when a woman did not have enough fat in one part of her body for a full restoration.</p>
        
    
                    

<figure data-pp-id="28" data-pp-blocktype="image">

    


                    
    


    <img alt="" width="3000" height="2000" loading="lazy" js-autosizes="" src="https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-032_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=95f690320a087a34962f33073241962d" srcset="https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-032_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=267&amp;q=75&amp;w=400&amp;s=868d35917a841ea74e1e30ce7fd06f3c 400w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-032_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=95f690320a087a34962f33073241962d 800w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-032_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=800&amp;q=75&amp;w=1200&amp;s=6e3ca99f0bd64e64c5de2ac3c418bb95 1200w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-032_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=867&amp;q=75&amp;w=1300&amp;s=01131df2905fc8401f16f5635110a354 1300w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-032_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=967&amp;q=75&amp;w=1450&amp;s=3a4a2a1022f02d610d1b3b28b54fc40e 1450w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-032_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1067&amp;q=75&amp;w=1600&amp;s=68ccc24d7e02ac27dde87ec3376371f2 1600w, https://img.assets-d.propublica.org/v5/images/20250122-Zalcman-Insurance-Denials-Sequence-032_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1333&amp;q=75&amp;w=2000&amp;s=63023591bcf90aac5e994f1aabb48ad5 2000w">

            
    
<figcaption>
        <span>Sullivan operates on a patient at St. Charles Surgical Hospital.</span>
    
        <span>
        <span>Credit: </span>
        Daniella Zalcman for ProPublica
    </span>
    
    
    </figcaption>

</figure>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="29.0">One afternoon last fall, DellaCroce strode into a cavernous operating room to check on a patient. On the table in front of him, a woman lay covered in curtains of blue surgical cloth, only her torso exposed. Earlier in the day, a surgical oncologist had removed her right breast as part of a mastectomy to treat her cancer. Later, another surgeon had taken flaps of fat from her stomach and interlaced them with blood vessels to create a new breast to replace the lost one. Now, in the fifth hour of surgery, a physician’s assistant leaned over her midsection, closing an incision along her side with some final stitches. Nurses hurried around the space, preparing to wrap up the operation. Paul Simon’s “<a href="https://www.youtube.com/watch?v=uq-gYOrU8bA">You Can Call Me Al</a>” played in the background. The smell of burnt flesh hung in the air. A blue light signaled that the new arteries were successfully pumping blood. “Wow, that woman looks really good,” DellaCroce told the physician’s assistant. “Nice job.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="30.0">There is no denying that the center’s high-end treatment means high costs. The median charge for an operation and hospital stay is about $165,000. DellaCroce and Sullivan hired consultants to review other well-regarded practices, who advised them their prices were competitive with their peers. “We weren’t asking to be paid Lebron James, best of the best, even though we feel we’re in the top 1 or 2% of the country,” Sullivan said. “We just wanted something fair.”</p>
        
    
                    <p><span>Chapter 2</span></p><h3 data-pp-id="31" data-pp-blocktype="heading" id="blue-cross-and-blue-shield">
    Blue Cross and Blue Shield
</h3>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="32.0">It is one of the quirks of the American health care system that insurers almost never pay the prices for procedures demanded by doctors and hospitals.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="33.0">To understand why requires a tour of the grand bargain at the heart of the health insurance system. Insurance companies negotiate with hospitals and doctors to discount reimbursements on medical procedures, like office visits or MRI scans. Providers who sign these contracts are in network. Insurance companies like in-network doctors because they can budget for health expenses and set premiums accordingly. Doctors and hospitals agree to be in network because they get a steady stream of insured patients.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="34.0">DellaCroce and Sullivan held contracts with insurers that resulted in average payments to the center’s doctors in the $20,000 to $30,000 range. But DellaCroce and Sullivan never came to an agreement with Blue Cross. That made them an exception in Louisiana — the insurer is so dominant that 97% of local physicians and hospitals are in network. DellaCroce and Sullivan said the company was not offering them enough money — in some cases not even enough to cover the cost of the surgeries, they argued in court documents. The doctors and their hospital remained out of network, meaning they charged Blue Cross the full price for their procedures.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="35.0">Such charges are controversial. Insurance companies and many health experts say they are too often inflated and untethered from actual costs. Physicians and hospitals say their fees are justified, reflecting the true price of medical care. In the end, insurers — especially in states like Louisiana, with few competitors — use their market power in negotiations to set reimbursements at what they want to pay, not what doctors charge.</p>
        
    
                        
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="37.0">At Blue Cross, Dwight Brower was charged with reviewing the bills from the breast center. He had worked as a physician at a small family practice in Baton Rouge and then at a local hospital before joining Blue Cross as a medical director. He helped oversee prior authorizations. While many patients assume that an approval means an insurer will pay for an operation, it is simply a recognition that a procedure is medically necessary. Federal law mandates that private insurers cover breast restorations for women who undergo mastectomies because of cancer or genetic risk. And patients, in general, are allowed to choose their own doctors.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="38.0">However, since the center was out of network and had no contract with the insurer, Blue Cross determined how much it would pay for the treatment, and Brower believed that the breast center’s bills were exorbitant. “I did not think that they were reasonable,” <a href="https://www.documentcloud.org/documents/25537636-2024-09-13-st-charles-20240913-am/?mode=document#document/p47/a2630973">he would later testify</a>. Surgeons doing lung transplants or brain surgery rarely billed Blue Cross more than $50,000 for their work. Why should DellaCroce and Sullivan get so much more? “Don’t get me wrong. The surgeons at the center are extremely skilled,” he acknowledged. The operations were often lengthy. “But so are open-heart surgeries,” he said. “Relative to some of the other extremely complicated surgeries done by other surgeons in other areas of the body, it just seemed like their fee schedule was extremely high.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="39.0">Blue Cross Louisiana executives testified that they did not even consider doctors’ invoices when making decisions on what to reimburse because such charges were “unregulated” and “nonstandard.” Instead, they paid “<a href="https://www.documentcloud.org/documents/25555648-2017-12-04-blue-cross-blue-shield-payment-for-out-of-network-providers/">an amount we establish</a>” — unless the doctor’s bill was cheaper. In the end, the insurer said it settled on reimbursing the breast center about the same as in-network doctors performing similar operations, even though DellaCroce and Sullivan did not benefit from having patients referred to them. In practice, that meant the insurer paid out a fraction of the breast center’s bills. Of the 7,837 medical procedures in dispute in the lawsuit, involving 1,680 patients, Blue Cross paid about $43 million on invoices totaling $500 million. Some 60% of the claims weren’t reimbursed at all. The difference between the bill and the payment could be striking. For example, in the case of Arch, Blue Cross paid $8,580 out of $102,722 for one operation. For another, it paid $3,190 out of $34,975.</p>
        
    
                    <figure data-pp-id="40" data-pp-blocktype="pull-quote">

    <blockquote>
        <p>Fundamentally, I think their problem was that we were doctors who had control. That was regarded as a threat.</p>

    </blockquote>
        <figcaption>
        —Dr. Frank DellaCroce, Center for Restorative Breast Surgery co-founder

    </figcaption>
    
</figure>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="41.0">Executives said the Blue Cross reimbursements were fair, designed to keep premiums low for the nearly 2 million Louisianans who depended on the insurer to cover their health care.&nbsp;Paying the breast center’s full fees would add to its customers’ burden, they said. “If we were to just agree to any rates or any prices set by physicians or any providers, it would cause cost to be exorbitantly high for both the plan and for members particularly, because we wouldn’t be able to forecast or make sure those plans are actually sound,” <a href="https://www.documentcloud.org/documents/25537645-208c471/#document/p5/a2630982">said</a> Curtis Anders, the vice president of provider networks for Blue Cross. “Premiums would increase.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="42.0">For many out-of-network doctors, payments lower than their invoices are an infuriating part of doing business. They absorb the costs, or pass them on to their patients, a practice known as balance billing that can result in medical debt. DellaCroce and Sullivan were the rare physicians with the tenacity to fight. The center collected money from both insurers and patients — but it carried the unpaid portion of invoices on its books. That amount grew every year as it battled Blue Cross.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="43.0">DellaCroce and Sullivan were convinced that Blue Cross had singled them out for their obstreperousness, but they had no proof. Then, during a phone call one day, an employee for the center was talking to a Blue Cross representative to obtain a prior authorization. The representative let slip that the request required special handling. The breast center’s doctors were flagged on an internal roster. It was called the targeted list.</p>
        
    
                    <p><span>Chapter 3</span></p><h3 data-pp-id="44" data-pp-blocktype="heading" id="discoveries">
    Discoveries
</h3>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="45.0">On Dec. 8, 2023, several dozen attorneys and paralegals from Chehardy Sherman Williams, one of New Orleans’ top law firms, were celebrating their annual holiday party. They had gathered in a private dining room with gilded mirrors and shimmering chandeliers at Arnaud’s restaurant, a bastion of Creole cuisine in the heart of the French Quarter. The waiters served shrimp remoulade, prime rib and turtle soup. Small talk filled the air.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="46.0">Suddenly, several attorneys’ cellphones buzzed as they all received the same email, a message from the lawyers for Blue Cross. It contained discovery for the case, more than 42,000 pages of internal documents, emails and policies. Matthew Sherman, one of the attorneys representing the center, turned to a colleague. “Can you believe this?” he asked. It was like something from a John Grisham novel, the kind of thing he and his friends had joked about at law school, a document dump at Christmas time. By long tradition, many of New Orleans’ biggest law firms hold their holiday parties on the same Friday afternoon in December. Afterward, rival attorneys from around town gather for drinks under a flag of truce at a local bar. Sherman realized there would be no afterparty this year. Nor much of a holiday vacation.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="47.0">The delivery of the documents was a Christmas gift nearly 20 years in the making. DellaCroce and Sullivan’s <a href="https://www.documentcloud.org/documents/25883705-2006-6487-crbs-v-bcbs-early-lawsuit/">first lawsuits</a> against Blue Cross, involving 88 breach-of-contract claims filed in a Louisiana civil court beginning in 2006, were dismissed because of a federal court ruling regarding jurisdiction. A <a href="https://www.documentcloud.org/documents/25883734-2010-04-06-2010-03356-crbs-v-bcbsla-complaint/">second lawsuit</a>, which lasted from 2010 through 2017, resulted in limited discovery and a two-day trial in federal court. Jurors found that Blue Cross had failed to tell the center how much it would pay for procedures, but they also ruled the center had not been financially harmed. A judge dismissed the remaining claims.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="48.0">DellaCroce and Sullivan launched their <a href="https://www.documentcloud.org/documents/25537857-2019-10-10-3rd-amended-complaint/">third lawsuit</a> in February 2017 with a novel legal theory: They accused Blue Cross of fraud. They contended that for years the insurer had issued prior authorizations without the intention of paying the actual bills. Their lawyers had sought the targeted list during discovery to help prove the case. Blue Cross denied it existed.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="49.0">But now, as Sherman and fellow attorney Patrick Follette began poring over the thousands of documents, they came upon a spreadsheet that said “<a href="https://www.documentcloud.org/documents/25537631-2024-09-06-am-st-charles-surgical-20240906-am/?mode=document#document/p56/a2624531">Targeted Provider List</a>.” The first names on the list were DellaCroce and Sullivan. It was labeled “confidential” and dated June 2007 — about a year after the pair had filed their first lawsuit against Blue Cross alleging nonpayment. More digging turned up other documents. There was a “blocked” list that also featured the two doctors.</p>
        
    
                        
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="51.0">A corporate policy document provided what DellaCroce and Sullivan considered the most revealing explanation for Blue Cross’ financial motivation. Blue Cross insurers are independent companies that operate under a common set of rules, similar to franchisees in a fast-food chain. When a person covered by Blue Cross in their home state receives treatment in another state, the Blue Cross where the treatment occurs pays the provider and then recoups the cost from the home-state plan. What the attorneys discovered was that Blue Cross Louisiana would receive a share of any savings it could generate for the home-state plan. Say, for instance, Blue Cross Alabama was facing a bill of $5,000 for a procedure. If Blue Cross Louisiana instead paid $1,000, it saved the Alabama plan $4,000. The policy allowed Blue Cross Louisiana <a href="https://www.documentcloud.org/documents/25537637-20736f1/?mode=document#document/p36/a2631133">to earn 16% of the savings</a> — in this scenario, $640.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="52.0">For DellaCroce and Sullivan, the revelations cemented their belief that Blue Cross was a bad corporate actor more interested in power and control than health care. The percentage fee incentivized the insurer to pay the doctors as little as possible. The bigger the savings, the more Blue Cross made. “It’s win-win,” DellaCroce said. “That’s their pay day.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="53.0">As the trial approached, Blue Cross attempted to settle the case. DellaCroce and Sullivan refused the offer as too low.</p>
        
    
                    

<figure data-pp-id="54" data-pp-blocktype="image">

    


                    
    


    <img alt="" width="3000" height="2000" loading="lazy" js-autosizes="" src="https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=d3ffc06f375bb3b7fb9223511311cf95" srcset="https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=267&amp;q=75&amp;w=400&amp;s=91fa7636a1a7bd9bbaa1f903c790d8a2 400w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=d3ffc06f375bb3b7fb9223511311cf95 800w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=800&amp;q=75&amp;w=1200&amp;s=8c6c0a411805309f0d54fc4e0a128e6c 1200w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=867&amp;q=75&amp;w=1300&amp;s=894966614600d619cc84ec1b65de42bb 1300w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=967&amp;q=75&amp;w=1450&amp;s=d8a0c3c15c60d52a0c5b87b93cda0ee8 1450w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1067&amp;q=75&amp;w=1600&amp;s=d8a0c693f5af6f61c9342cbb2156cf09 1600w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-011_preview_maxWidth_3000_maxHeight_3000_ppi_72_embedColorProfile_true_quality_95.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1333&amp;q=75&amp;w=2000&amp;s=f19d2f994f7163f1eca809eafae85c4f 2000w">

            
    
<figcaption>
        <span>James Williams, left, and Matthew Sherman, the lawyers who represented DellaCroce and Sullivan in their suit against Blue Cross and Blue Shield of Louisiana</span>
    
        <span>
        <span>Credit: </span>
        Daniella Zalcman for ProPublica
    </span>
    
    
    </figcaption>

</figure>

        
    
                    <p><span>Chapter 4</span></p><h3 data-pp-id="55" data-pp-blocktype="heading" id="the-trial">
    The Trial
</h3>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="56.0">On the afternoon of Sept. 5, 2024, the case — St. Charles Surgical Hospital, L.L.C. and Center for Restorative Breast Surgery, L.L.C. v. Louisiana Health Service &amp; Indemnity Company D/B/A Blue Cross/Blue Shield of Louisiana, Blue Cross &amp; Blue Shield of Louisiana, Inc. and HMO Louisiana, Inc. — opened in Division C of the Orleans Parish Civil District Court, a high-ceilinged room with dark brown benches and tables, fake marble columns and fluorescent lights. James Williams, the chief litigator for the hospital, had already impressed the 45 potential jurors by memorizing all their names and backgrounds during jury selection. Now, he stood up and placed a football on the plaintiff’s table in front of the 12 chosen to try the case, which included a third grade teacher, a movie stunt double and a hotel manager. He warned them that they would hear a lot of “insurance talk” from Blue Cross. “I’m going to ask you, ladies and gentlemen on the jury, keep your eye on the ball. Keep your eye on what this case is about,” Williams told them. “If they start saying things like, ‘Well, oh, we paid them what we thought was fair, 9%,’ keep your eye on the ball, right?”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="57.0">Over 10 days — interrupted by a two-day break to allow a hurricane to pass across Louisiana — Williams made his case that Blue Cross had defrauded his clients by making promises to pay but failing to deliver.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="58.0">Much of Blue Cross’ defense had relied on the notice that a prior authorization was no guarantee of payment. The insurer had not committed fraud, it said, since it never explicitly promised the center to reimburse anything. Udvarhelyi, the former CEO, had insisted on that. But on the stand, Blue Cross witnesses provided a more nuanced explanation. They acknowledged that the disclaimer was not meant as a general excuse to free the company from paying bills. A prior authorization “usually” resulted in a payment, testified Brower, who reviewed the center’s bills. He said that the notice was intended for specific situations. For instance, Blue Cross would not cover a woman who dropped out of her insurance before the operation. Nor would it pay anything if a patient had not met her deductible. But otherwise, Brower said, Blue Cross intended to compensate for a procedure that it had authorized. “It’s inappropriate for us as a company to approve a code and then turn around and deny it,” <a href="https://www.documentcloud.org/documents/25537637-20736f1/?mode=document#document/p13/a2624462">Brower said</a>.</p>
        
    
                    

<figure data-pp-id="59" data-pp-blocktype="image">

    


                    
    


    <img alt="" width="3000" height="2000" loading="lazy" js-autosizes="" src="https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-022_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=2e048152efb16bfc48351754778160b8" srcset="https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-022_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=267&amp;q=75&amp;w=400&amp;s=f78baa175bfe656474e4cdc97d167397 400w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-022_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=533&amp;q=75&amp;w=800&amp;s=2e048152efb16bfc48351754778160b8 800w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-022_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=800&amp;q=75&amp;w=1200&amp;s=03ba3082b2ff7342cd1d2219af825316 1200w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-022_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=867&amp;q=75&amp;w=1300&amp;s=0298f851424932f63367c103df49df4a 1300w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-022_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=967&amp;q=75&amp;w=1450&amp;s=dcee1cca8016f1524b0aad10e5d9ccdb 1450w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-022_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1067&amp;q=75&amp;w=1600&amp;s=555094ff374ca0e9b11f47d0254253f0 1600w, https://img.assets-d.propublica.org/v5/images/20250205-Zalcman-Insurance-Denials-022_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1333&amp;q=75&amp;w=2000&amp;s=789452952ae9948ed4ff3ef0965ae013 2000w">

            
    
<figcaption>
        <span>During the trial, Williams told jurors to “keep your eye on the ball.”</span>
    
        <span>
        <span>Credit: </span>
        Daniella Zalcman for ProPublica
    </span>
    
    
    </figcaption>

</figure>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="60.0">Over the years, the center had appealed thousands of reimbursements for being too low. It hired additional employees to manage the paperwork. At the trial, Blue Cross revealed that it had never considered any of the appeals — nor had it ever told the center that they were pointless. “An appeal is not available to review an underpayment,” <a href="https://www.documentcloud.org/documents/25537645-208c471/#document/p37/a2630979">acknowledged</a> Paula Shepherd, a Blue Cross executive vice president. The insurer simply issued an edict — the payment was correct.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="61.0">This was the core of the case. The insurer set the rules. The insurer set the prices. Doctors could appeal to a state insurance regulator. But if that failed, and it often did, the only recourse was a long, costly lawsuit.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="62.0">Williams <a href="https://www.documentcloud.org/documents/25537630-2024-02/?mode=document#document/p27/a2631151">summed up</a> for the jury the center’s treatment at the hands of Blue Cross: “Our payments are slow pay, low pay or no pay.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="63.0">In countering those arguments, Blue Cross witnesses explained that the insurer was committed to paying for Louisianans’ health care and keeping costs low. As a nonprofit, it directed any excess revenue from operations back into the business. (Udvarhelyi, the CEO, did acknowledge that his salary, over $1 million, included bonuses that depended on hitting revenue targets and increasing membership.)</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="64.0">Brian West, a Blue Cross executive who monitored payments, <a href="https://www.documentcloud.org/documents/25537635-2024-09-10-st-charles-20240910/?mode=document#document/p14/a2631153">said the center</a> had engaged in “egregious” billing practices. “They are bad actors in the billing world,” he said. But company witnesses offered only a handful of examples. Sometimes the center mistakenly coded its bills in a way that appeared to charge for four separate breast reconstructions in a single operation. In other cases, the center asked for payment for two surgeons in the room at the same time. But Blue Cross, following Medicare guidelines, would pay two surgeons only 20% more than the reimbursement for a single surgeon.</p>
        
    
                    <figure data-pp-id="65" data-pp-blocktype="pull-quote">

    <blockquote>
        <p>An appeal is not available to review an underpayment.</p>

    </blockquote>
        <figcaption>
        —Paula Shepherd, Blue Cross Louisiana executive vice president

    </figcaption>
    
</figure>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="66.0">Blue Cross did not accuse the center of any intentional miscoding — but the sloppy billing led to additional scrutiny, the company’s witnesses said. The targeted list, a witness testified, had been created especially for the center, requiring all prior authorization requests to bypass normal routes for a special review by company doctors. The blocked list meant that each bill from the center received a manual scrub by payment specialists before reimbursement. <a href="https://www.documentcloud.org/documents/25537635-2024-09-10-st-charles-20240910/#document/p17/a2631155">Blue Cross acknowledged</a> the careful checking often resulted in the need for more information from the center, which could result in slower processing of claims. But the lists, executives insisted, were not designed to reduce payments. “Basically, no harm was done,” <a href="https://www.documentcloud.org/documents/25537634-2058691/#document/p55/a2631154">said</a> Becky Juncker, who was involved in approving surgical procedures.</p>
        
    
                        
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="68.0">Company witnesses explained that the 16% received in saving money for out-of-state Blue Cross insurers was a fee to cover the costs of handling adjustments of the claim — though they were not able to explain why Blue Cross did not charge a flat fee for its services.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="69.0">Blue Cross also defended itself against the accusation that it had paid nothing for 60% of the charges for individual procedures. Witnesses said the insurer had followed industry practice in bundling charges to make a single payment for an operation. An attorney for the center noted that it had never agreed to take bundled payments — Blue Cross had imposed them.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="70.0">As to the calls to women like Arch? That was an effort to save members money. “Our medical area would reach out to our members who were utilizing out-of-network providers to help them understand the, I would say, the financial implications,” said Shepherd, the Blue Cross executive vice president, <a href="https://www.documentcloud.org/documents/25892223-2023-12-11-paula-shepherd-depo/?mode=document#document/p1/a2631176">in a deposition</a>. “It could be financially catastrophic to a member to have an out-of-network claim that they are financially responsible for. It’s a huge difference.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="71.0">In summing up the case, Kim Boyle, the lead attorney for the company, told jurors that Blue Cross had not committed fraud. It had acted to ensure the company and its members paid a fair price for the center’s services, she said. “There’s no scheme. There’s no plot. There’s no mafia. There are no Blue Cross employees of Louisiana that are sitting in some smoke-filled room in Baton Rouge, plotting against these plaintiffs on St. Charles Avenue in New Orleans,” Boyle said. “It’s fiction; it’s fancy; it’s completely made up.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="72.0">On Sept. 20, at 1:57 p.m., Judge Sidney H. Cates IV sent the jurors to deliberate. The center attorneys retreated to a nearby hotel to await the verdict. About two hours later, they were summoned back to Division C. Williams put his head down and swore. He worried that such a quick return in the legally complex case meant victory for Blue Cross.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="73.0">The center’s lawyers paid close attention to Cates as he reviewed the jurors’ decision. It was a two-page form. If the jurors found in favor of Blue Cross, the judge would have no reason to read on. Cates flipped to the second page: The jurors had found Blue Cross liable for fraud. “Please express in dollars the total monetary compensation, if any, Blue Cross owes the hospital and the center for the damages,” Cates said, <a href="https://www.documentcloud.org/documents/25892343-2024-09-27-jury-form-with-verdict/?mode=document">reading from the verdict</a>. “Net damages, $421,488,633.” The center’s lawyers stood and shook hands as the insurer’s attorneys prepared to leave the courtroom.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="74.0">DellaCroce was in surgery at the hospital, having expected a longer deliberation. Sullivan was in the courtroom to hear the verdict. Afterward, jurors approached and thanked him for his work. He teared up. “We would have given more if we had been asked for more. That’s how egregious the fraud was,” Juliet Laughlin, a 58-year-old property manager who served as forewoman, later said. “There had been wrong done.”</p>
        
    
                                  
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="76.0">Blue Cross has appealed the verdict. A health insurance trade group has warned that the finding sets a dangerous precedent. If allowed to stand, insurance companies in Louisiana may find themselves forced to pay whatever price is demanded by out-of-network doctors — which in turn could raise health insurance premiums across the state, the Louisiana Association of Health Plans said in a statement.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="77.0">For DellaCroce and Sullivan, the verdict was vindication. They had refused to sign contracts they thought unfair. They had rejected settlement offers they thought too low. The trial had revealed Blue Cross’ domineering behavior. “Fundamentally, I think their problem was that we were doctors who had control,” DellaCroce said. “That was regarded as a threat.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="78.0">In the months since the judgment, Blue Cross has not changed its practices, the doctors said. It has not approached with an offer that would bring the hospital in network. It still issues prior authorizations for women’s surgeries. And it still pays only a fraction of the billed fees.</p>
        
    
                    
<hr>

        
    
                    
        
    
                    <div data-pp-location="bottom-note">
                                    

                                    
        <p>Freelance photographer Daniella Zalcman contributed reporting.</p>

    
            </div><!-- end .article-body__bottom-notes -->
        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Trump exempts phones, computers, chips from 'reciprocal' tariffs (115 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2025-04-12/trump-exempts-phones-computers-chips-from-reciprocal-tariffs</link>
            <guid>43664121</guid>
            <pubDate>Sat, 12 Apr 2025 13:18:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2025-04-12/trump-exempts-phones-computers-chips-from-reciprocal-tariffs">https://www.bloomberg.com/news/articles/2025-04-12/trump-exempts-phones-computers-chips-from-reciprocal-tariffs</a>, See on <a href="https://news.ycombinator.com/item?id=43664121">Hacker News</a></p>
Couldn't get https://www.bloomberg.com/news/articles/2025-04-12/trump-exempts-phones-computers-chips-from-reciprocal-tariffs: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Open source and self hostable/private file converter (408 pts)]]></title>
            <link>https://vert.sh</link>
            <guid>43663865</guid>
            <pubDate>Sat, 12 Apr 2025 12:40:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://vert.sh">https://vert.sh</a>, See on <a href="https://news.ycombinator.com/item?id=43663865">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><!--[--><!----><path d="M20 6 9 17l-5-5"><!----></path><!----><!--]--><!----><!----><!----><!----></svg><!----> Fully supported</p> <p><b>Status:</b> not ready</p> <p><b>Supported formats:</b> .png, .jpeg, .jpg, .webp, .gif, .hdr, .jpe, .mat, .pbm, .pfm, .pgm, .pnm, .ppm, .raw, .tif, .tiff, .jfif</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI can't stop making up software dependencies and sabotaging everything (171 pts)]]></title>
            <link>https://www.theregister.com/2025/04/12/ai_code_suggestions_sabotage_supply_chain/</link>
            <guid>43663777</guid>
            <pubDate>Sat, 12 Apr 2025 12:22:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2025/04/12/ai_code_suggestions_sabotage_supply_chain/">https://www.theregister.com/2025/04/12/ai_code_suggestions_sabotage_supply_chain/</a>, See on <a href="https://news.ycombinator.com/item?id=43663777">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>The rise of AI-powered code generation tools is reshaping how developers write software - and introducing new risks to the software supply chain in the process.</p>
<p>AI coding assistants, like large language models in general, have a habit of hallucinating. They suggest code that incorporates software packages that don't exist.</p>
<p>As we noted <a target="_blank" href="https://www.theregister.com/2024/03/28/ai_bots_hallucinate_software_packages/">in March</a> and <a target="_blank" href="https://www.theregister.com/2024/09/30/ai_code_helpers_invent_packages/">September</a> last year, security and academic researchers have found that AI code assistants invent package names. In a recent study, researchers found that about 5.2 percent of package suggestions from commercial models didn't exist, compared to 21.7 percent from open source models.</p>

    

<p>Running that code should result in an error when importing a non-existent package. But miscreants have realized that they can hijack the hallucination for their own benefit.</p>

        


        

<p>All that's required is to create a malicious software package under a hallucinated package name and then upload the bad package to a package registry or index like PyPI or npm for distribution. Thereafter, when an AI code assistant re-hallucinates the co-opted name, the process of installing dependencies and executing the code will run the malware.</p>
<p>The recurrence appears to follow a bimodal pattern - some hallucinated names show up repeatedly when prompts are re-run, while others vanish entirely - suggesting certain prompts reliably produce the same phantom packages.</p>

        

<p>As <a target="_blank" rel="nofollow" href="https://socket.dev/blog/slopsquatting-how-ai-hallucinations-are-fueling-a-new-class-of-supply-chain-attacks">noted</a> by security firm Socket recently, the academic researchers who explored the subject last year found that re-running the same hallucination-triggering prompt ten times resulted in 43 percent of hallucinated packages being repeated every time and 39 percent never reappearing.</p>
<p>Exploiting hallucinated package names represents a form of <a target="_blank" rel="nofollow" href="https://capec.mitre.org/data/definitions/630.html">typosquatting</a>, where variations or misspellings of common terms are used to dupe people. Seth Michael Larson, security developer-in-residence at the Python Software Foundation, has dubbed it "slopsquatting" – "slop" being a common pejorative for AI model output.</p>
<p>"We're in the very early days looking at this problem from an ecosystem level," Larson told <em>The Register</em>. "It's difficult, and likely impossible, to quantify how many attempted installs are happening because of LLM hallucinations without more transparency from LLM providers. Users of LLM generated code, packages, and information should be double-checking LLM outputs against reality before putting any of that information into operation, otherwise there can be real-world consequences."</p>

        

<p>Larson said that there are many reasons a developer might attempt to install a package that doesn't exist, including mistyping the package name, incorrectly installing internal packages without checking to see whether those names already exist in a public index (dependency confusion), differences in the package name and the module name, and so on.</p>
<p>"We’re seeing a real shift in how developers write code," Feross Aboukhadijeh, CEO of security firm Socket, told <em>The Register</em>. "With AI tools becoming the default assistant for many, '<a target="_blank" rel="nofollow" href="https://x.com/karpathy/status/1886192184808149383">vibe coding</a>' is happening constantly. Developers prompt the AI, copy the suggestion, and move on. Or worse, the AI agent just goes ahead and installs the recommended packages itself.</p>
<blockquote>

<p>The problem is, these code suggestions often include hallucinated package names that sound real but don't exist</p>
</blockquote>
<p>"The problem is, these code suggestions often include hallucinated package names that sound real but don’t exist. I’ve seen this firsthand. You paste it into your terminal and the install fails – or worse, it doesn’t fail, because someone has slop-squatted that exact package name."</p>
<p>Aboukhadijeh said these fake packages can look very convincing.</p>
<p>"When we investigate, we sometimes find realistic looking READMEs, fake GitHub repos, even sketchy blogs that make the package seem authentic," he said, adding that Socket's security scans will catch these packages because they analyze the way the code works.</p>
<blockquote>

<p>What a world we live in: AI hallucinated packages are validated and rubber-stamped by another AI that is too eager to be helpful</p>
</blockquote>
<p>"Even worse, when you Google one of these slop-squatted package names, you’ll often get an AI-generated summary from Google itself confidently praising the package, saying it’s useful, stable, well-maintained. But it’s just parroting the package’s own README, no skepticism, no context. To a developer in a rush, it gives a false sense of legitimacy.</p>
<p>"What a world we live in: AI hallucinated packages are validated and rubber-stamped by another AI that is too eager to be helpful."</p>
<p>Aboukhadijeh pointed to <a target="_blank" rel="nofollow" href="https://socket.dev/blog/gmail-for-exfiltration-malicious-npm-packages-target-solana-private-keys-and-drain-victim-s">an incident in January</a> in which Google's AI Overview, which responds to search queries with AI-generated text, suggested a malicious npm package @async-mutex/mutex, which was typosquatting the legitimate package async-mutex.</p>
<p>He also noted that recently a threat actor using the name "_Iain" published a playbook on a dark web forum detailing how to build a blockchain-based botnet using malicious npm packages.</p>
<p>Aboukhadijeh explained that _Iain "automated the creation of thousands of typo-squatted packages (many targeting crypto libraries) and even used ChatGPT to generate realistic-sounding variants of real package names at scale. He shared video tutorials walking others through the process, from publishing the packages to executing payloads on infected machines via a GUI. It’s a clear example of how attackers are weaponizing AI to accelerate software supply chain attacks."</p>
<ul>

<li><a href="https://www.theregister.com/2025/03/17/supply_chain_attack_github/">GitHub supply chain attack spills secrets from 23,000 projects</a></li>

<li><a href="https://www.theregister.com/2025/01/29/lazarus_groups_supply_chain_attack/">North Koreans clone open source projects to plant backdoors, steal credentials</a></li>

<li><a href="https://www.theregister.com/2025/01/14/snyk_npm_deployment_removed/">Snyk appears to deploy 'malicious' packages targeting Cursor for unknown reason</a></li>

<li><a href="https://www.theregister.com/2024/11/05/typosquatting_npm_campaign/">Ongoing typosquatting campaign impersonates hundreds of popular npm packages</a></li>
</ul>
<p>Larson said the Python Software Foundation is working constantly to make package abuse more difficult, adding such work takes time and resources.</p>
<p>"Alpha-Omega has sponsored the work of Mike Fiedler, our PyPI Safety &amp; Security Engineer, to work on reducing the risks of malware on PyPI such as by implementing an programmatic API to report malware, partnering with existing malware reporting teams, and implementing better detections for typo-squatting of top projects," he said.</p>
<p>"Users of PyPI and package managers in general should be checking that the package they are installing is an existing well-known package, that there are no typos in the name, and that the content of the package has been reviewed before installation. Even better, organizations can mirror a subset of PyPI within their own organizations to have much more control over which packages are available for developers." ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[$70M in 60 Seconds: How Insider Info Helped Someone 28x Their Money (713 pts)]]></title>
            <link>https://data-and-politics.ghost.io/70-million-in-60-seconds-how-insider-information-helped-someone-28x-their-money/</link>
            <guid>43661680</guid>
            <pubDate>Sat, 12 Apr 2025 05:47:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://data-and-politics.ghost.io/70-million-in-60-seconds-how-insider-information-helped-someone-28x-their-money/">https://data-and-politics.ghost.io/70-million-in-60-seconds-how-insider-information-helped-someone-28x-their-money/</a>, See on <a href="https://news.ycombinator.com/item?id=43661680">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
            <p>On April 9, 2025, someone risked about $2.5 million—and walked away with more than $70 million in under an hour.</p><p>The trade was simple, but bold: buy a specific kind of option tied to SPY, the exchange-traded fund (ETF) that tracks the S&amp;P 500, the most widely followed index of large-cap U.S. companies. The option—known as a call—gave the buyer the right to purchase SPY at $509 per share. That might not sound strange, except that SPY was trading below $500 when they placed the bet. And the option was set to expire the same day.</p><p>These are known as zero-day expiry options. They’re cheap because they’re risky. If the market doesn’t move in your favor, they expire worthless. If the market does move, they can pay off massively. But you have to be exactly right on both direction and timing.</p><p>In this case, the timing was perfect. The trade was placed just before 1:01 pm Eastern Time. At 1:30 pm, Donald Trump posted on Truth Social that he was pausing most of the tariffs he had imposed earlier that month. The market exploded upward. SPY surged well past the 509 mark. Those options that had cost just 85 cents were suddenly worth more than $25.</p><figure><img src="https://data-and-politics.ghost.io/content/images/2025/04/Screenshot-2025-04-11-at-20.55.36.png" alt="" loading="lazy" width="934" height="924" srcset="https://data-and-politics.ghost.io/content/images/size/w600/2025/04/Screenshot-2025-04-11-at-20.55.36.png 600w, https://data-and-politics.ghost.io/content/images/2025/04/Screenshot-2025-04-11-at-20.55.36.png 934w" sizes="(min-width: 720px) 720px"><figcaption><span>Notice the spike in trade at 17:00 GMT.</span></figcaption></figure><p>This was not a small-volume trade. About 30,000 contracts changed hands. That’s a $2.5 million position that turned into more than $70 million. And that’s just one strike. Similar trades occurred in SPY 504, 505, 507, and QQQ contracts as well, suggesting that the total take may have been far larger.</p><p>It wasn’t just the profit. It was the precision. The market moved before the news. The options were bought before the rally. The volume spiked in contracts that almost never see this kind of interest unless something is expected. And the pattern wasn’t visible on previous trading days. This wasn’t a trend. It was a singular event.</p><p>And it wasn’t just options. At exactly 1:01 pm EST, trading volume in SPY shares themselves spiked. Nearly 2.75 million shares were bought in that single minute. If those shares were sold at the closing price of $533.94, the buyers would have locked in a gain of more than $36 per share—earning over $100 million in profit in sixty seconds.</p><p>Over the next fifteen minutes, volume remained elevated. If the same rate of trading continued, that window alone could account for more than 41 million shares traded. That means more than $1.5 billion in potential profit—all before the public even knew why the market was moving.</p><p>If the trades hadn’t worked out, the losses would have been swift and total. Zero-day options don’t forgive bad timing. The entire $2.5 million could have evaporated by the close of trading. Even with SPY shares, any unexpected reversal would have meant millions in losses. That’s what makes this kind of trading so revealing. Institutions hedge. Retail investors chase momentum. But this? This was conviction. Or it was information.</p><p>I checked comparable moments in market history: emergency rate cuts in 2008, the first quantitative easing program in 2009. These were true market shocks. But in those cases, SPY volume was flat before the announcements. The price didn’t move until after the news hit the wire. No sign of early bets. No one placing $2 million chips on the right number just minutes before the roulette wheel stopped.</p><figure><img src="https://data-and-politics.ghost.io/content/images/2025/04/Screenshot-2025-04-09-at-21.15.58.png" alt="" loading="lazy" width="1528" height="938" srcset="https://data-and-politics.ghost.io/content/images/size/w600/2025/04/Screenshot-2025-04-09-at-21.15.58.png 600w, https://data-and-politics.ghost.io/content/images/size/w1000/2025/04/Screenshot-2025-04-09-at-21.15.58.png 1000w, https://data-and-politics.ghost.io/content/images/2025/04/Screenshot-2025-04-09-at-21.15.58.png 1528w" sizes="(min-width: 720px) 720px"></figure><figure><img src="https://data-and-politics.ghost.io/content/images/2025/04/Screenshot-2025-04-09-at-21.16.07.png" alt="" loading="lazy" width="1524" height="936" srcset="https://data-and-politics.ghost.io/content/images/size/w600/2025/04/Screenshot-2025-04-09-at-21.16.07.png 600w, https://data-and-politics.ghost.io/content/images/size/w1000/2025/04/Screenshot-2025-04-09-at-21.16.07.png 1000w, https://data-and-politics.ghost.io/content/images/2025/04/Screenshot-2025-04-09-at-21.16.07.png 1524w" sizes="(min-width: 720px) 720px"></figure><p>This time was different. April 9 shows all the hallmarks of pre-positioning—where a trader takes a major position just before a known catalyst. Sometimes it’s just a hunch. Sometimes it’s a coincidence. And sometimes it’s something else entirely.</p><p>We don’t know who placed the trades. We don’t know what they knew. But we do know this: if they were guessing, they guessed better than almost anyone in modern market history. And if they weren’t guessing, then someone made a fortune off of information the public didn’t yet have.</p>
        </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rust to C compiler – 95.9% test pass rate, odd platforms (241 pts)]]></title>
            <link>https://fractalfir.github.io/generated_html/cg_clr_odd_platforms.html</link>
            <guid>43661329</guid>
            <pubDate>Sat, 12 Apr 2025 04:21:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fractalfir.github.io/generated_html/cg_clr_odd_platforms.html">https://fractalfir.github.io/generated_html/cg_clr_odd_platforms.html</a>, See on <a href="https://news.ycombinator.com/item?id=43661329">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>This is an update on the progress I have made on my Rust to C compiler. I am experimenting a bit with a new article format: instead of an overarching theme, this is more of a collection of smaller bits and pieces, sewn together.</p>

<h2 id="the_big_news">The big news</h2>

<p>I will first start with the biggest news: I am going to be giving <a href="https://rustweek.org/talks/michal/">a talk about the project</a> during Rust Week(in Utrecht, Netherlands).</p>

<p>Creating this talk has been an interesting challenge: I tried to strike a good balance between being approachable for beginners, while still talking about a pretty advanced topic.</p>

<p>So, if you are attending Rust Week, and are interested in what I have to say, you can come and hear it in person! If you see me during the conference, and want to talk, don’t be shy to say hi.</p>

<p>Now that this is out of the way...</p>

<h2 id="passing_more_tests">Passing more tests</h2>

<p>I have also been slowly working on fixing as many tests as possible, and I can already boast a 95.9 % core test pass rate. This is a nice bump from the 92% pass rate two months ago.</p>

<p>There still are about 65 tests that need fixing, but they all seem to have pretty similar causes. So, fixing them should not be too difficult.</p>

<p>The .NET side of the project has also heavily benefited from the fixes I implemented: now, 96.3 % of Rust core tests run in .NET.</p>

<h2 id="bugfixes">Bugfixes</h2>

<h2 id="128_bit_ints">128 bit ints</h2>

<p>Most of the current improvements come from fixes to 128 bit intrinsics, checked arithmetics, and subslicing.</p>

<p>The C popcount intrinsic has 3 variants: <code>__builtin_popcount</code>(int), <code>__builtin_popcountl</code>(long) and <code>__builtin_popcountll</code>(<strong>long long</strong>).<br></p>

<p>It might seem logical to assume that the C intrinsic <code>__builtin_popcountll</code> works on 128 bit ints - it does not.</p>

<p>It works on the <code>long long</code> type, which is not the same as <code>__int128_t</code>. At least on Linux, <code>long</code> and <code>long long</code> are both 64 bits in size. This is something I knew about, but I did not consider that 2 differently named intrinsics would end up just being one and the same thing.</p>

<pre><code>int pop_count64(long num) {
   return __builtin_popcountl(num);
}
int pop_count128(__int128_t num) {
   return __builtin_popcountll(num);
}</code></pre>

<pre><code>pop_count64:
       xor     eax, eax
       popcnt  rax, rdi
       ret
pop_count128:
       xor     eax, eax
       popcnt  rax, rdi
       ret</code></pre>

<p>It turns out that my implementation of most of the bit counting intrinsics(count leading / trailing zeroes) have been silently truncating 128 bit ints to 64 bit ones, and only them performing the needed calculations. That obviously yields incorrect results.</p>

<p>However, emulating those 128 bit intrinsics is not too difficult. The <code>popcount</code> intrinsic simply checks how many bits are set in an integer. So, I can add up the number of bits set in the lower and higher half of that integer, and get the correct result .</p>

<pre><code>static inline __uint128_t pop_count128(__uint128_t val) {
   return __builtin_popcountl((uint64_t)val) +  __builtin_popcountl((uint64_t)(val&gt;&gt;64));
}</code></pre>

<p>I have also finally fully implemented the very last checked arithmetic operations. Checking for overflows during 128 bit int multiplication is hard. For quite some time. I have been trying to come up with some clever ideas for fast overflow checks. Sadly none of them ended up working out for 128 bit multiplication.</p>

<p>After much deliberation, I decided to simply settle for the easy, but inefficient check. Basically, as long as <code>(a * b) / b == a</code>, and b is not zero, overflow did not occur.</p>

<pre><code>bool u128_mul_ovf_check(__uint128_t A0 ,__uint128_t A1 ){
bb0:
	if((A1) != (0)) goto bb1;
	return false;
bb1:
	return (((A0) * (A1)) / (A1)) == (A1);
}</code></pre>

<p>This is nothing groundbreaking, but they - at least it works, and it gets a few more tests to pass.</p>

<h2 id="subslicing">Subslicing</h2>

<p>The subslicing bug was quite embarrassing: I forgot a sizeof, and was offsetting the slice’s data pointer by bytes instead of elements. It is not hard to see why this is wrong.</p>

<p>With how simple this bug is, you might wonder how on earth it has managed to stay undetected for so long. Well, the code was only broken for subslicing from the end of the slice, and not its beginning. To my knowledge, that sub slicing mode is mainly used in pattern matching.</p>

<pre><code>let ok = slice[2..5];
let still_ok = slice[5..];
// broken
if let [start, reminder] = slice{
	panic!();
};</code></pre>

<p>So, subslicing was only broken for this specific pattern, and always worked fine for byte/string slices(bytes and UTF8 code <em>units</em> are a 1 byte in size). This allowed it to sneak past my own tests, and only showed up when running the whole Rust compiler test suite.</p>

<h2 id="fallback_intrinsics">Fallback intrinsics</h2>

<p>It turns out I did not have to implement <em>some</em> intrinsics manually - the Rust compiler already supports emulating them. For certain intrinsics, this is a god send - since they are a pain to implement by hand.</p>

<p>For example, <a href="https://doc.rust-lang.org/nightly/core/intrinsics/fn.carrying_mul_add.html">carrying_mul_add</a> requires you to perform multiplication on an integer 2x larger than the input one. This is fine up to 64 bits, but… what integer is larger than 128 bits? LLVM supports 256 bit ints, but C(and .NET) does not. </p>

<pre><code>define void @carrying_mul_add(ptr dead_on_unwind noalias nocapture noundef writable writeonly sret([32 x i8]) align 16 dereferenceable(32) initializes((0, 32)) %_0, i128 noundef %a, i128 noundef %b, i128 noundef %c, i128 noundef %d) unnamed_addr #0 !dbg !7 {
  %0 = zext i128 %a to i256, !dbg !25
  %1 = zext i128 %b to i256, !dbg !25
  %2 = zext i128 %c to i256, !dbg !25
  %3 = zext i128 %d to i256, !dbg !25
  %4 = mul nuw i256 %1, %0, !dbg !25
  %5 = add nuw i256 %4, %2, !dbg !25
  %6 = add nuw i256 %5, %3, !dbg !25
  %7 = trunc i256 %6 to i128, !dbg !25
  %8 = lshr i256 %6, 128, !dbg !25
  %9 = trunc nuw i256 %8 to i128, !dbg !25
  store i128 %7, ptr %_0, align 16, !dbg !25
  %10 = getelementptr inbounds nuw i8, ptr %_0, i64 16, !dbg !25
  store i128 %9, ptr %10, align 16, !dbg !25
  ret void, !dbg !26
}</code></pre>

<p>So, the ability to <em>just</em> use a built-in emulated version of this intrinsic is amazing: this means I don’t need to fiddle around and find my own solution to this problem.</p>

<p>This is also very interesting for another reason: since <code>carrying_mul_add</code> performs 256 bit multiplication and addition using 128 bit integers, it means it is capable of performing 128 bit operations using 64 bit ints.</p>

<p>I am currently looking into understanding that fallback implementation a little bit better, in order to base my own emulation of 128 bit ints on that.</p>

<p>While a lot of modern C compilers and platforms support 128 bit ints without a major hassle, I want to support as many platforms as possible.</p>

<h2 id="supporting_more_c_compilers.">Supporting more C compilers.</h2>

<p>Besides that, I have been working on improving C compiler compatibility. You might have seen Rust code <a href="">running on a Game boy</a>, <a href="https://www.reddit.com/r/rust/comments/1ji6cmk/media_a_rust_program_compiled_to_only_move/">compiled to movs</a>, or the April Fool's special of Rust running on <a href="https://www.reddit.com/r/rust/comments/1jp9227/media_rust_compiled_to_holly_c_running_on_templeos/">Temple OS</a>.</p>

<p>The more obscure C compilers I support(to any degree) the higher the chance Rust code will run with proprietary C compilers I have no direct access to.</p>

<p>This has been a bigger problem for the project as of late. Turns out, a lot of platforms are not supported for a good reason(lack of docs + lack of access). Not supporting those platforms is a bit of a hindrance for the project.</p>

<p>To give an example: there have been discussions about writing <a href="https://lwn.net/Articles/998115/">some new parts of Git in Rust</a>.</p>

<p>Sadly, doing that would mean degrading / dropping Git support for the proprietary platform NonStop - since it does not support Rust(or LLVM or even GCC), at all.</p>

<p>Originally, I was a bit optimistic about situations like this: if my project compiled Rust to C, it could eliminate this problem altogether.</p>

<p>In <em>theory</em> Rust would be able to run anywhere C can. There are some big asterisks to this(I am still unsure if I can work around certain issues on <em>all platforms</em>), but hey - this might be the best shot at supporting Rust there, save for companies stepping in and adding LLVM support, which I feel is… unlikely.</p>

<p>Recently, I wanted to check if "Supporting Rust by compling it to C" is a viable strategy in a case like this.</p>

<p>However, I immediately hit a stone wall. I could find no legal way of obtaining a compiler for this platform without buying a server, which is definitely <strong>way, way outside my budget</strong>.</p>

<p>So, I don't belive Rust is going to run on a platform like this any time soon.</p>

<h2 id="plan_for_now">Plan for now</h2>

<p>For now, the plan is to get as close to standard-compliant C99(or maybe even ANSI C) as possible, and only use standard POSIX APIs(I need some threading support to properly initialise thread-locals).<br></p>

<p>That means I have my own fallbacks for certain intrinsics, and I am slowly but surely working on expanding that list. I have had some success running <em>very, very simple</em> Rust programs on ANSI C compilers, so there is definitely some hope.</p>

<p>Fingers crossed, that’ll mean that adding support for currently unviable platforms is easy enough when a need for that arises.</p>

<h2 id="tiny_perf_improvements">Tiny perf improvements</h2>

<p>I have also worked on a wide variety of performance improvements. The smallest changes were related to integer literals. I realized that, for integers smaller than 2^32, their hex form is always bigger if not as big as their decimal form, due to the <code>0x</code> prefix. Eg. 255 is a byte shorter than 0xFF, and so is 65536(0xFFFF). Only for 2^32 things start to even out. This may seem like a negligible change. However, I generate <em>a lot</em> of C code. In some more extreme cases(transpling the entire Rust compiler to C), I have generated up to 1GB of C source files. At that point, shaving even a fraction of a percent of the total file size has an impact.</p>

<p>My way of embedding debug info(using the <code>#line</code> directive) also got a bit smarter - the source file name will not repeat, and is only included when that changes.</p>

<p>So this:</p>

<pre><code>#line 1 great.rs
L0 = A0 + A0;
#line 2 great.rs
L1 = L0 * 5.5;
#line 1 amazing.rs
L2 = L1 * L1 * L1;
#line 4 great.rs
L3 = L2 - A0</code></pre>

<p>Is written like this, instead:</p>

<pre><code>#line 1 great.rs
L0 = A0 + A0;
#line 2 
L1 = L0 * 5.5;
#line 1 amazing.rs
L2 = L1 * L1 * L1;
#line 4 great.rs
L3 = L2 - A0</code></pre>

<p>It may seem like a tiny change, but it reduces file sizes by a lot(when using debug info).</p>

<h2 id="refactors">Refactors</h2>

<p><code>rustc_codegen_clr</code> has seen some big, internal refactors. I have managed to split some parts of it into separate crates, which speeds up incremental builds. That makes development a bit easier.</p>

<p>I am also progressing along with my move to a more memory-efficient interned IR. Along the way, I am also slowly removing some jank from the old IR.</p>

<p>The main issue is that there exist some rather exotic r/lvalues which don’t map too well to C. They are quite hard to show without going into some more obscure features of Rust, like dynamically sized types. You can safely skip this section.</p>

<p>Consider this piece of Rust code:</p>

<pre><code>/// Custom DST.
struct MyStr{
	sized:u8,
	s:str
}
impl MyStr{
	fn inner_str(&amp;self)-&gt;&amp;str{
    		&amp;self.s
	}
}</code></pre>

<p>This line <code>&amp;self.s</code> may seem <em>simple</em> but it is not. Since <code>MyStr</code> is a dynamically sized type, so the pointer to it is “fat” - it contains metadata.</p>

<p>Let us think about what kind of C code this function will produce.</p>

<pre><code>FatPtr_str inner_str(FatPtr_MyStr self){
	// What goes here?
}</code></pre>

<p>Here, we need to do 2 things: Offset the “data” pointer of our <code>self</code> fat pointer by <code>1</code>(the size of the fixed-size fields) Create a new slice from that data pointer, and some metadata. This is quite easy to do in modern C.</p>

<pre><code>struct FatPtr_str inner_str(struct FatPtr_MyStr self){
   return (struct FatPtr_str){self.data + 1, self.meta};
}</code></pre>

<p>However, compound literals were not part of the language until C99, and a lot of old/obscure compilers don’t support that.</p>

<p>Instead, we need to do something like this:</p>

<pre><code>struct FatPtr_str inner_str(struct FatPtr_MyStr self){
   struct FatPtr_str tmp;
   tmp.data = self.data;
   tmp.meta =  self.meta;
   return tmp;
}</code></pre>

<p>This is an ANSI-C compliant way of doing things. <strong>However</strong> you might notice that 1 line of Rust(and MIR) now corresponds to multiple lines of C. That is a pain to manage on the IR level. The old IR had an odd way of dealing with this: it essentially allowed you to create an inner scope, with a temporary local, and some “sub-statements”.</p>

<p>This is quite messy, and frankly an idiotic way of dealing with this problem. Well, at least I now know that I will not be making this exact mistake again. The new way of doing things is a bit more complex in the setup phase, but it makes the whole IR much more simple.</p>

<p>There are other cases where this “temporary scope” was useful, but now, only 1 of the most annoying cases like this remains. Once I get that solved, I’ll be able to entirely get rid of this abomination of a feature.</p>

<p>This will allow me to fully move to the new IR, which is going to be very neat.<br></p>

<h2 id="conclusion">Conclusion</h2>

<p>I have made a fair bit of progress during the last few months. There definitely are some diminishing results to bug fixing: the less bugs there are, the more time I need to track them all down. Still, there is something new to learn about both C and Rust every day. I have been working on <a href="https://github.com/FractalFir/rustc_codegen_clr">`rustc_codegen_clr`</a> for 1.5 years now - that feels a bit... odd. A lot has happened in that time: both in my personal life, and in the wider world.</p>

<p>Truth be told, that sometimes feels like it was a lifetime ago.</p>

<p>In this strange, new world, there is a bit of comfort in the monotony of work - each day, I inch towards a grander goal. I learned a lot along the way, but with each passing moment, I see there is so much more to know. It is calming.</p>

<p>But I digress - you have come here to hear about Rust, and compilers.</p>

<p>I have some interesting things coming: I am working on finishing the part 2 of "Rust panics under the hood" - a step by step explanation of the Rust panicking process. I am considering splitting that article in two: It is already 10 minutes long, and I have only just finished explaining how panic messages are created.</p>

<p>Besides that, I have been working on a few odd things, including a tiny(2K LOC), but very accurate memory profiler for Rust. My schedule is quite tight, but I hope I will write something about this in the coming weeks.</p>

<p>If you like this project(<a href="https://github.com/FractalFir/rustc_codegen_clr">`rustc_codegen_clr`</a>), and think somebody else might find my work interesting, feel free to share my posts on <a href="https://bsky.app/profile/fractalfir.bsky.social/post/3lmkvtvtjas2u">Bluesky</a> and <a href="https://www.linkedin.com/posts/micha%C5%82-kostrubiec-85a037269_corrosive-c-compiling-rust-to-c-to-target-activity-7316567775995473921-WFsL?utm_source=share&amp;utm_medium=member_desktop&amp;rcm=ACoAAEGttwYBp9Jq-yY40d-9Ar3X7NxZ4rcqM2Q">Linkedin</a>.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Is Winning on Every AI Front (787 pts)]]></title>
            <link>https://www.thealgorithmicbridge.com/p/google-is-winning-on-every-ai-front</link>
            <guid>43661235</guid>
            <pubDate>Sat, 12 Apr 2025 03:58:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thealgorithmicbridge.com/p/google-is-winning-on-every-ai-front">https://www.thealgorithmicbridge.com/p/google-is-winning-on-every-ai-front</a>, See on <a href="https://news.ycombinator.com/item?id=43661235">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><span>Even in my most bullish days for OpenAI, I secretly preferred DeepMind. I felt Demis Hassabis was trustworthy in a way Sam Altman couldn't be—a true scientist, not a businessman. Also, </span><a href="https://deepmind.google/research/breakthroughs/alphago/" rel="">AlphaGo</a><span> and </span><a href="https://deepmind.google/discover/blog/alphazero-shedding-new-light-on-chess-shogi-and-go/" rel="">AlphaZero</a><span>. To me, they're not historical milestones but nostalgia. ChatGPT is cool, but do you remember </span><em><a href="https://www.wired.com/2016/03/two-moves-alphago-lee-sedol-redefined-future/" rel="">move 37</a></em><span>? And the </span><a href="https://www.youtube.com/watch?v=ZHfumZVPjVA&amp;list=PLDnx7w_xuguFDbrYDxxvPH-aoQkEX0rHv&amp;ab_channel=agadmator%27sChessChannel" rel="">AlphaZero-Stockfish 8 chess games</a><span>? My love and interest for AI grew parallel to DeepMind’s successes. I was rooting, almost like a sports fan, for them.</span></p><p><span>So, for years, I’ve been low-key saddened by their constant </span><em>fumbling</em><span>. They had the tech, the talent, the money, the infrastructure, the prestige, and the conviction to make ChatGPT—or whatever else they wanted—before OpenAI. They didn't. CEO Sundar Pichai was afraid to thwart Google’s main revenue source (search and ads). He chose prudence over boldness. Good—they didn’t shoot themselves in the foot.</span></p><p><span>Because they didn’t shoot </span><em>at all.</em></p><p>But that was the last mistake they made. Today, two and a half years after the ChatGPT debacle, Google DeepMind is winning. They are winning so hard right now that they’re screaming, “Please, please, we can’t take it anymore, it’s too much winning!” No, but really—I wonder if the only reason OpenAI, Anthropic, Meta, and Co. ever had the slightest chance to win is because Google fumbled that one time. They don’t anymore.</p><p><span>I’d been holding off on writing about Gemini 2.5. Focusing on the AI model didn’t feel like enough to tell the full story of Google’s comeback. Gemini 2.5 is only a piece—albeit a big one—of something much larger. Back in December 2024, I said they would </span><a href="https://www.thealgorithmicbridge.com/p/20-predictions-for-ai-in-2025" rel="">come out on top by the end of 2025</a><span>. We’re not even halfway there and it’s already happened. (For reasons I still don’t understand, some people genuinely thought </span><a href="https://polymarket.com/event/which-company-has-best-ai-model-end-of-april?tid=1744284231922" rel="">xAI had a shot</a><span>.)</span></p><p>Anyway, to avoid turning this post into an over-stylized narrative—which I do more often than I’d like—I’m keeping it to bullet points. It hits harder that way. You’ll see what I mean when the list just... doesn’t end.</p><p>Google and DeepMind fans: enjoy the long-overdue rebirth.</p><ul><li><p><a href="https://blog.google/technology/google-deepmind/gemini-model-thinking-updates-march-2025/#gemini-2-5-thinking" rel="">Gemini 2.5 Pro Experimental</a><span> is the best model in the world. Number one on the </span><a href="https://lmarena.ai/?leaderboard" rel="">LMArena</a><span>, </span><a href="https://x.com/EpochAIResearch/status/1907519991252992508" rel="">GPQA Diamond</a><span>, </span><a href="https://scale.com/leaderboard/humanitys_last_exam" rel="">Humanity's Last Exam</a><span>, and AIME (math competition). It's also the best on private benchmarks like </span><a href="https://aider.chat/docs/leaderboards/" rel="">Aider Polyglot</a><span> (code), </span><a href="https://livebench.ai/#/" rel="">Live Bench</a><span> (diverse). It's better than Claude Sonnet at </span><a href="https://m.twitch.tv/gemini_plays_pokemon" rel="">playing Pokemon</a><span> (a promising agentic playground) and rising quickly on </span><a href="https://mcbench.ai/leaderboard" rel="">Minecraft Bench</a><span> (some </span><a href="https://x.com/wintermoat/status/1909787050640920894" rel="">examples</a><span>). It is decent at </span><a href="https://x.com/emollick/status/1904656593083396541" rel="">creative writing</a><span> (e.g., </span><a href="https://fiction.live/stories/Fiction-liveBench-Mar-25-2025/oQdzQvKHw8JyXbN87" rel="">long-context comprehension</a><span>), which has been an elusive milestone for years.</span></p></li><li><p><span>Perhaps most importantly, the benchmark scores match the signal I receive from vibes checks, high-taste testers, and firsthand testimonials: </span><em><a href="https://x.com/MatthewBerman/status/1904714953095078004" rel="">people</a><span> </span><a href="https://www.reddit.com/r/Bard/s/TTXsRTWJdA" rel="">are</a></em><span> </span><em><a href="https://x.com/emollick/status/1910208856480768283" rel="">reporting</a><span> </span><a href="https://artificialanalysis.ai/models/gemini-2-5-pro?models=o1%2Cgpt-4o%2Co3-mini-high%2Cllama-4-maverick%2Cgemini-2-5-pro%2Cclaude-35-sonnet%2Cclaude-3-7-sonnet%2Cdeepseek-r1%2Cgrok-beta#intelligence" rel="">en masse</a><span> </span></em><a href="https://x.com/cgarciae88/status/1907457306947702925" rel="">that</a><span> </span><a href="https://www.reddit.com/r/ClaudeAI/s/30nIFOtVMP" rel="">Gemini</a><span> </span><a href="https://www.reddit.com/r/GeminiAI/s/ihTsYvDxIY" rel="">2.5</a><span> </span><a href="https://www.reddit.com/r/ClaudeAI/s/khkte9Bq49" rel="">Pro</a><span> </span><a href="https://x.com/xf1280/status/1904587791868322036" rel="">is</a><span> </span><a href="https://x.com/emollick/status/1909748270249001248" rel="">indeed</a><span> </span><a href="https://x.com/daniel_mac8/status/1910058485150269797" rel="">the</a><span> </span><a href="https://x.com/petergyang/status/1906007718961492391" rel="">best</a><span> </span><a href="https://www.reddit.com/r/ChatGPTCoding/s/O3qJuHRsWA" rel="">model</a><span> </span><a href="https://www.reddit.com/r/GeminiAI/s/aLDvqH12oq" rel="">today</a><span>. A rare sight to witness. (Watch </span><a href="https://x.com/MatthewBerman/status/1904715099862098109" rel="">Matthew Berman’s clip</a><span> below.)</span></p></li><li><p><span>And that's just pure performance. Add to the above that Gemini 2.5, compared to models of its category, is </span><a href="https://artificialanalysis.ai/models/gemini-2-5-pro?models=o1%2Cgpt-4o%2Co3-mini-high%2Cllama-4-maverick%2Cgemini-2-5-pro%2Cclaude-35-sonnet%2Cclaude-3-7-sonnet%2Cdeepseek-r1%2Cgrok-beta#speed" rel="">fast</a><span> and </span><a href="https://artificialanalysis.ai/models/gemini-2-5-pro?models=o1%2Cgpt-4o%2Co3-mini-high%2Cllama-4-maverick%2Cgemini-2-5-pro%2Cclaude-35-sonnet%2Cclaude-3-7-sonnet%2Cdeepseek-r1%2Cgrok-beta#pricing" rel="">cheap</a><span>—I mean, they're </span><a href="https://x.com/sundarpichai/status/1908173216499093625" rel="">giving away free access</a><span>!—has a gigantic </span><a href="https://artificialanalysis.ai/models/gemini-2-5-pro?models=o1%2Cgpt-4o%2Co3-mini-high%2Cllama-4-maverick%2Cgemini-2-5-pro%2Cclaude-35-sonnet%2Cclaude-3-7-sonnet%2Cdeepseek-r1%2Cgrok-beta#context-window" rel="">context window of 1 million tokens</a><span> (only recently surpassed by Meta’s Llama 4) and it’s connected to the entire Google suite of products (more on that soon).</span></p></li><li><p><span>Gemini 2.5 Flash (</span><a href="https://techcrunch.com/2025/04/09/googles-newest-gemini-ai-model-focuses-on-efficiency/" rel="">launching soon</a><span>) is Gemini 2.5 Pro’s little brother. It is just as amazing but for a different reason. Together with old versions of Flash (</span><a href="https://deepmind.google/technologies/gemini/flash/" rel="">2.0</a><span>, </span><a href="https://deepmind.google/technologies/gemini/flash-lite/" rel="">Lite</a><span>, </span><a href="https://deepmind.google/technologies/gemini/flash-thinking/" rel="">Thinking</a><span>), it will be </span><a href="https://artificialanalysis.ai/models/gemini-2-0-flash#speed" rel="">extremely fast</a><span> and </span><a href="https://x.com/deedydas/status/1883355957838897409" rel="">extremely cheap</a><span> (much cheaper than comparable models from competitors, </span><a href="https://artificialanalysis.ai/models/gemini-2-0-flash?models=gemini-2-0-flash%2Cdeepseek-r1%2Cdeepseek-v3&amp;endpoints=#pricing" rel="">even DeepSeek’s</a><span>, famous for </span><a href="https://x.com/EMostaque/status/1881310721746804810" rel="">being cheap</a><span>). They're also small, which makes them perfect for edge applications and phone integration.</span></p></li><li><p><span>Then there’s </span><a href="https://blog.google/technology/developers/gemma-3/" rel="">Gemma 3</a><span>—Google’s open source model, </span><a href="https://storage.googleapis.com/deepmind-media/gemma/Gemma3Report.pdf" rel="">competitive with the best open-source models</a><span>, including Llama 4 (</span><a href="https://x.com/jeremyphoward/status/1908607345393098878" rel="">too big</a><span>) and DeepSeek-V3.</span></p></li><li><p><a href="https://x.com/swyx/status/1908215411214344669" rel="">Swyx plotted a graph</a><span> revealing that “Google owns the Pareto frontier” with Gemini 2.0/2.5 (both Pro and Flash) on the two most important metrics: performance and cost. Not only that, but Google's most performant models </span><em>remain cost-effective,</em><span> and its most cost-effective models </span><em>remain performant</em><span>. Google is bullying the competition at this point; Gemini is off the charts, literally.</span></p></li><li><p><span>The LLMs that underlie chatbots like Gemini and ChatGPT are the main attraction but far from the only one. Google dominates the other generative AI areas just as clearly as it dominates text-based models. They announced they will integrate the other AI tools they have into </span><a href="https://cloud.google.com/blog/products/ai-machine-learning/expanding-generative-media-for-enterprise-on-vertex-ai" rel="">Vertex AI</a><span>: </span><a href="https://deepmind.google/discover/blog/transforming-the-future-of-music-creation/" rel="">Lyria</a><span> (music), </span><a href="https://deepmind.google/technologies/imagen-3/" rel="">Imagen 3</a><span> (image), </span><a href="https://deepmind.google/technologies/veo/veo-2/" rel="">Veo 2</a><span> (video), and </span><a href="https://cloud.google.com/text-to-speech/docs/chirp3-hd" rel="">Chirp 3</a><span> (voice/speech). These are, in a way, side-projects for Google. Still, they’re world-class in their respective categories. Arguably, </span><a href="https://openai.com/index/introducing-4o-image-generation/" rel="">ChatGPT’s image generation</a><span> is better, but Veo 2, for instance, compelled me to write an article I entitled “</span><a href="https://www.thealgorithmicbridge.com/p/you-must-see-how-far-ai-video-has" rel="">You Must See How Far AI Video Has Come</a><span>,” whereas </span><a href="https://www.thealgorithmicbridge.com/p/openai-sora-turbo-a-very-expensive" rel="">OpenAI Sora is pure slop</a><span>. (The clip below is from Veo 2.)</span></p></li><li><p><span>What about agents? Gemini 2.5 Pro in </span><a href="https://x.com/demishassabis/status/1910143772635078754" rel="">Deep Research mode</a><span> it's </span><em><a href="https://x.com/AdvaitOnline/status/1909721368259960957" rel="">twice as good</a></em><span> as OpenAI’s Deep Research (until now, widely considered the most important AI product for investigative work). Google DeepMind is further cooking with </span><a href="https://deepmind.google/technologies/project-astra/" rel="">Project Astra</a><span> (assistant) and </span><a href="https://deepmind.google/technologies/project-mariner/" rel="">Project Mariner</a><span> (computer interaction).</span></p></li><li><p><span>If that wasn’t enough, they’ve built an </span><a href="https://developers.googleblog.com/en/a2a-a-new-era-of-agent-interoperability/" rel="">Agent2Agent protocol</a><span> complementary to and compatible with the </span><a href="https://www.anthropic.com/news/model-context-protocol" rel="">Model Context Protocol</a><span>, which they </span><em><a href="https://x.com/demishassabis/status/1910107859041271977" rel="">will also build</a></em><span> after listening to the community’s feedback. I can’t take any more </span><em>mogging.</em></p></li><li><p><span>To top it off, they keep chugging high-quality papers to </span><a href="https://www.nature.com/nature-index/institution-outputs/United%20Kingdom%20%28UK%29/Google%20DeepMind/54ee76b8140ba0f7058b4567" rel="">publish in Nature</a><span> or present at </span><a href="https://deepmind.google/discover/blog/google-deepmind-at-iclr-2024/" rel="">ICLR</a><span> or </span><a href="https://deepmind.google/discover/blog/google-deepmind-at-neurips-2024/" rel="">NeurIPS</a><span> or some other world-class journal or conference. And if by chance that doesn’t happen, you can either way tell they take both </span><a href="https://deepmind.google/discover/blog/taking-a-responsible-path-to-agi/" rel="">AGI efforts</a><span> as well as </span><a href="https://www.kaggle.com/whitepaper-prompt-engineering" rel="">industrial AI</a><span> very seriously.</span></p></li></ul><p>Is that all? Not really. Let's not forget that Google is a consumer software company as much as an AI company. They build better models than OpenAI and Anthropic, but they do plenty of other things no one else can do.</p><p><em><strong>Hello friend!</strong></em></p><p><em><strong>Before you read on, a quick note: I write this newsletter in an attempt to understand AI and offer that understanding to others who may find themselves similarly disoriented (who isn’t these days…)</strong></em></p><p><em><strong>The project continues thanks to a small group of generous readers who support it with ~$2/week (ChatGPT costs twice as much!). If you find value here—or simply wish for this quiet effort to persist—you are most welcome to join them.</strong></em></p><p><em><strong>If you already have, my sincere thanks. This exists because of you.</strong></em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[That groan you hear is users' reaction to Recall going back into Windows (101 pts)]]></title>
            <link>https://arstechnica.com/security/2025/04/microsoft-is-putting-privacy-endangering-recall-back-into-windows-11/</link>
            <guid>43660914</guid>
            <pubDate>Sat, 12 Apr 2025 02:50:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/security/2025/04/microsoft-is-putting-privacy-endangering-recall-back-into-windows-11/">https://arstechnica.com/security/2025/04/microsoft-is-putting-privacy-endangering-recall-back-into-windows-11/</a>, See on <a href="https://news.ycombinator.com/item?id=43660914">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                      
                      
          <p>Security and privacy advocates are girding themselves for another uphill battle against Recall, the AI tool rolling out in Windows 11 that will screenshot, index, and store everything a user does every three seconds.</p>
<p>When Recall was first introduced in May 2024, security practitioners roundly castigated it for creating a gold mine for malicious insiders, criminals, or nation-state spies if they managed to gain even brief administrative access to a Windows device. Privacy advocates warned that Recall was ripe for abuse in intimate partner violence settings. They also noted that there was nothing stopping Recall from preserving sensitive disappearing content sent through privacy-protecting messengers such as Signal.</p>
<h2>Enshittification at a new scale</h2>
<p>Following months of backlash, Microsoft later suspended Recall. On Thursday, the company <a href="https://blogs.windows.com/windows-insider/2025/04/10/releasing-windows-11-build-26100-3902-to-the-release-preview-channel/">said</a> it was reintroducing Recall. It currently is available only to insiders with access to the Windows 11 Build 26100.3902 preview version. Over time, the feature will be rolled out more broadly. Microsoft officials wrote:</p>
<blockquote><p>Recall (preview)* saves you time by offering an entirely new way to search for things you’ve seen or done on your PC securely. With the AI capabilities of Copilot+ PCs, it’s now possible to quickly find and get back to any app, website, image, or document just by describing its content. To use Recall, you will need to opt-in to saving snapshots, which are images of your activity, and enroll in Windows Hello to confirm your presence so only you can access your snapshots. You are always in control of what snapshots are saved and can pause saving snapshots at any time. As you use your Copilot+ PC throughout the day working on documents or presentations, taking video calls, and context switching across activities, Recall will take regular snapshots and help you find things faster and easier. When you need to find or get back to something you’ve done previously, open Recall and authenticate with Windows Hello. When you’ve found what you were looking for, you can reopen the application, website, or document, or use Click to Do to act on any image or text in the snapshot you found.</p></blockquote>
<p>Microsoft is hoping that the concessions requiring opt-in and the ability to pause Recall will help quell the collective revolt that broke out last year. It likely won’t for various reasons.</p>

          
                      
                  </div></div>]]></description>
        </item>
    </channel>
</rss>