<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 20 Dec 2024 02:30:15 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Kelly Can't Fail (134 pts)]]></title>
            <link>https://win-vector.com/2024/12/19/kelly-cant-fail/</link>
            <guid>42466676</guid>
            <pubDate>Thu, 19 Dec 2024 23:07:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://win-vector.com/2024/12/19/kelly-cant-fail/">https://win-vector.com/2024/12/19/kelly-cant-fail/</a>, See on <a href="https://news.ycombinator.com/item?id=42466676">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-17429">
	
		<p>
By  on <a href="https://win-vector.com/2024/12/19/kelly-cant-fail/" title="3:05 pm" rel="bookmark"><time datetime="2024-12-19T15:05:19-08:00">December 19, 2024</time></a>	• 
	</p>
	<section>

<div data-mime-type="text/markdown" tabindex="0">
<h2 id="Introduction">Introduction<a href="#Introduction"> </a></h2>
<p>You may have heard of the <a href="https://en.wikipedia.org/wiki/Kelly_criterion">Kelly bet allocation strategy</a>. It is a system for correctly exploiting information or bias in a gambling situation. It is also known as a maximally aggressive or high variance strategy, in that betting more than the Kelly selection can be quite ruinous.<br>
I recently ran into a strange card game where the Kelly strategy is risk free with <em>zero variance</em>. Peter Winkler calls the game “Next Card Bet” in his remarkable book <em>Mathematical Puzzles</em>. The problem and solution appear to come from Thomas Cover. I find this betting game and its analysis amazing, and want to share them with you here.
</p></div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="The-Game">The Game<a href="#The-Game"> </a></h2>
<p>The game is played as follows. A standard 52 card deck consisting of 26 red cards and 26 black cards is shuffled and the player start with a stake of $1. Each card is exposed one at a time, without being replaced in the deck. The player is allowed to bet any fraction of their current stake on whether the next card is black or red at a one to one payoff.<br>
The player clearly has advantageous strategies involving counting the number of black and red cards seen. Counting cards seen lets them know how many cards of each color remain in the unseen portion of the deck. For example they can safely double their stake by not betting on any card other than the last. This allows them to safely bet their entire stake on the now inferable color of the final unseen card.
</p></div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="The-Kelly-strategy">The Kelly strategy<a href="#The-Kelly-strategy"> </a></h2>
<p>The Kelly strategy is to pick a bet that maximizes the expected logarithm of the stake. We can derive it as follows.<br>
Let <code>r</code> be the number red cards remaining in the deck and <code>b</code> black cards remaining. Without loss of generality assume <code>r &gt; b</code>. We then want to maximize <code>P[draw red] * log(1 + bet_fraction) + P[draw black] * log(1 - bet_fraction)</code> as a function of <code>bet_fraction</code>. This expression is maximized where its derivative is zero. The probability of drawing red next is <code>r/(r + b)</code>. So we need to solve <code>(r/(r + b)) / (1 + bet_fraction) - (b/(r + b)) / (1 - bet_fraction) = 0</code>. Some algebra tells us <code>bet_fraction = (r - b) / (r + b)</code>.<br>
The entire Kelly betting strategy is then:</p>
<ul>
<li>If <code>r = b</code>, then no bet</li>
<li>If <code>r &gt; b</code> bet a <code>|r - b| / (r + b)</code> fraction of your stake on “red”</li>
<li>If <code>b &gt; r</code> bet a <code>|r - b| / (r + b)</code> fraction of your stake on “black.”</li>
</ul>
</div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="Trying-the-strategy">Trying the strategy<a href="#Trying-the-strategy"> </a></h2>
<p>You really should see this strategy in action. It is a strong claim that it is in fact zero variance, so we really should insist on that being confirmed. We will work the example in Python.
</p></div>
<div tabindex="0">
<p>In[1]:</p>
<div data-type="inline">
<pre><span></span><span># import tools</span>
<span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
</pre>
</div>
</div>
<div tabindex="0">
<p>In[2]:</p>
<div data-type="inline">
<pre><span></span><span># set up our pseudo-random number generator to produce shuffled decks</span>
<span>rng</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>default_rng</span><span>(</span><span>2024</span><span>)</span>
</pre>
</div>
</div>
<div tabindex="0">
<p>In[3]:</p>
<div data-type="inline">
<pre><span></span><span># define our deck shuffling tool</span>
<span>def</span> <span>k_array_with_t_true</span><span>(</span><span>k</span><span>:</span> <span>int</span><span>,</span> <span>t</span><span>:</span> <span>int</span><span>):</span>
<span>    </span><span>"""Create a length-k boolean array with t-True values"""</span>
    <span>is_true</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>([</span><span>False</span><span>]</span> <span>*</span> <span>k</span><span>,</span> <span>dtype</span><span>=</span><span>bool</span><span>)</span>
    <span>is_true</span><span>[</span><span>rng</span><span>.</span><span>choice</span><span>(</span><span>k</span><span>,</span> <span>size</span><span>=</span><span>t</span><span>,</span> <span>replace</span><span>=</span><span>False</span><span>)]</span> <span>=</span> <span>True</span>
    <span>return</span> <span>is_true</span>
</pre>
</div>
</div>
<div tabindex="0">
<p>In[4]:</p>
<div data-type="inline">
<pre><span></span><span># implement our betting strategy</span>
<span>def</span> <span>run_bets</span><span>(</span><span>is_red</span><span>)</span> <span>-&gt;</span> <span>float</span><span>:</span>
<span>    </span><span>"""Run the Kelly betting strategy"""</span>
    <span>stake</span> <span>=</span> <span>1.0</span>
    <span>n_red_remaining</span> <span>=</span> <span>int</span><span>(</span><span>np</span><span>.</span><span>sum</span><span>(</span><span>is_red</span><span>))</span>
    <span>n_black_remaining</span> <span>=</span> <span>len</span><span>(</span><span>is_red</span><span>)</span> <span>-</span> <span>n_red_remaining</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span><span>is_red</span><span>)):</span>
        <span># form bet</span>
        <span>bet_red</span> <span>=</span> <span>0</span>
        <span>bet_black</span> <span>=</span> <span>0</span>
        <span>fraction</span> <span>=</span> <span>np</span><span>.</span><span>abs</span><span>(</span><span>n_red_remaining</span> <span>-</span> <span>n_black_remaining</span><span>)</span> <span>/</span> <span>(</span><span>n_red_remaining</span> <span>+</span> <span>n_black_remaining</span><span>)</span>
        <span>if</span> <span>n_red_remaining</span> <span>&gt;</span> <span>n_black_remaining</span><span>:</span>
            <span>bet_red</span> <span>=</span> <span>stake</span> <span>*</span> <span>fraction</span>
        <span>elif</span> <span>n_black_remaining</span> <span>&gt;</span> <span>n_red_remaining</span><span>:</span>
            <span>bet_black</span> <span>=</span> <span>stake</span> <span>*</span> <span>fraction</span>
        <span># derive outcome</span>
        <span>stake</span> <span>=</span> <span>stake</span> <span>-</span> <span>(</span><span>bet_red</span> <span>+</span> <span>bet_black</span><span>)</span>
        <span>if</span> <span>is_red</span><span>[</span><span>i</span><span>]:</span>
            <span>stake</span> <span>=</span> <span>stake</span> <span>+</span> <span>2</span> <span>*</span> <span>bet_red</span>
            <span>n_red_remaining</span> <span>=</span> <span>n_red_remaining</span> <span>-</span> <span>1</span>
        <span>else</span><span>:</span>
            <span>stake</span> <span>=</span> <span>stake</span> <span>+</span> <span>2</span> <span>*</span> <span>bet_black</span>
            <span>n_black_remaining</span> <span>=</span> <span>n_black_remaining</span> <span>-</span> <span>1</span>
    <span>return</span> <span>stake</span>
</pre>
</div>
</div>
<div>
<div tabindex="0">
<p>In[5]:</p>
<div data-type="inline">
<pre><span></span><span># play the game 10000 times</span>
<span>payoffs</span> <span>=</span> <span>[</span>
    <span>run_bets</span><span>(</span><span>k_array_with_t_true</span><span>(</span><span>52</span><span>,</span> <span>26</span><span>))</span> <span>for</span> <span>_</span> <span>in</span> <span>range</span><span>(</span><span>10000</span><span>)</span>
<span>]</span>
<span>assert</span> <span>np</span><span>.</span><span>max</span><span>(</span><span>payoffs</span><span>)</span> <span>-</span> <span>1e-8</span> <span>&lt;</span> <span>np</span><span>.</span><span>min</span><span>(</span><span>payoffs</span><span>)</span> 

<span>(</span><span>np</span><span>.</span><span>min</span><span>(</span><span>payoffs</span><span>),</span> <span>np</span><span>.</span><span>max</span><span>(</span><span>payoffs</span><span>))</span>
</pre>
</div>
</div>
<div>
<p>Out[5]:</p>
<div data-mime-type="text/plain" tabindex="0">
<pre>(9.081329549427776, 9.081329549427803)</pre>
</div>
</div>
</div>
<div tabindex="0">

<p>
For each run we made a return of <code>9.08</code> times our starting stake. It is remarkable that there was no variation or variance in the outcomes. Notice this <code>9.08</code> times return is much larger than the <code>2</code> times return of the simple “wait to the end” strategy.<br>
This result is very unusual for a Kelly strategy. Kelly strategies guarantee to not “bust” (lose all of the money) and to maximize the expected growth rate of the logarithm of the stake. But they usually guarantee little else, can in fact lose money, and are usually high variance. How is it that in this case Kelly <em>can’t</em> fail?
</p>
</div>
<div data-mime-type="text/markdown" tabindex="0">
<h2 id="An-explanation">An explanation<a href="#An-explanation"> </a></h2>
<p>There is a remarkable proof that the strategy is zero variance.<br>
There are <code>(52 choose 26) = 495,918,532,948,104</code> possible arrangements of red versus black cards. It is a standard result (not proven here) that each of these arrangements is in fact equally likely in a properly shuffled deck.<br>
We define a new “portfolio” strategy as follows.</p>
<ul>
<li>Each of the <code>(52 choose 26)</code> possible red/black arrangements is assigned as a sub-strategy in our portfolio.</li>
<li>We allocate a <code>1/(52 choose 26)</code> fraction of our initial stake to each sub-strategy. We allow each sub-strategy to keep its own money and do not re-allocate money between sub-strategies.</li>
<li>Each sub-strategy assumes its assigned red/black arrangement is what is going to happen in the actual deck. The sub-strategy bets its entire stake on each card, betting the card exposed will match the corresponding one it its own defining arrangement.</li>
</ul>
<p>All but one of the portfolio sub-strategies will lose all of their money- as they eventually bet all their stake on a wrong guess. The single strategy that correctly guesses the entire deck ends experiences <code>52</code> doublings and no losses. Thus this strategy multiplies its starting stake by <code>2^(52)</code>. So our portfolio strategy itself always experiences a total aggregate return of <code>$1/(52 choose 26) * 2^(52) ~ $9.08</code> on an initial <code>$1</code> stake. This ending portfolio return is independent of the order of the cards.<br>
The claim to finish the argument is: the new portfolio strategy is in fact identical to the earlier Kelly strategy.<br>
Consider what happens to the portfolio when we draw a red card. In our portfolio strategy a <code>r / (r + b)</code> fraction of the non-bankrupt sub-strategies expect the next card to be “red”, and a <code>b / (r + b)</code> fraction of the non-bankrupt sub-strategies expect the next card to be “black”. The next draw bankrupts one of these families, and doubles the other (depending on the drawn color). Some though shows the portfolio strategy evolves its combined stake as follows:</p>
<ul>
<li>Aggregate <code>stake</code> goes to <code>stake * 2 * b / (r + b)</code> on drawing “red”</li>
<li>Aggregate <code>stake</code> goes to <code>stake * 2 * r / (r + b)</code> on drawing “black.”</li>
</ul>
<p>It is a matter of algebra to confirm this portfolio payoff is <em>exactly</em> the payoff pattern for our earlier Kelly strategy of putting <code>|r - b| / (r + b)</code> on the most common color remaining. The Kelly strategy has exactly the same payoffs as the portfolio strategy, and we have our result that the two strategies are one and the same.<br>
The Kelly strategy is zero variance because it is identical to the portfolio strategy that is itself zero variance.
</p></div>
<div data-mime-type="text/markdown" tabindex="0">

<p>An idea I like to take away is as follows. As we are betting on majority color, every time we lose a bet the deck becomes more unbalanced and more favorable to us. If we make the bet small enough then the gain in edge on a wrong bet offsets the loss of capital. In this case the Kelly strategy is pricing information or pricing uncertainty just right. This is similar to considerations of “exploration versus exploitation phases” in problems such as A/B testing.<br>
The proof given is from Winkler <em>Mathematical Puzzles</em>. I <em>strongly</em> recommend picking up the book to see his writeup on this and many other problems. The proof itself is very much the style of Cover. This is the Cover who later goes on to invent the <a href="https://isl.stanford.edu/~cover/papers/paper93.pdf">universal portfolio</a> investment strategy.
</p></div>
		<p>Categories: <a href="https://win-vector.com/category/mathematics/" rel="category tag">Mathematics</a> <a href="https://win-vector.com/category/quantitative-finance/" rel="category tag">Quantitative Finance</a> <a href="https://win-vector.com/category/tutorials/" rel="category tag">Tutorials</a>		</p>
<p>Tagged as: <a href="https://win-vector.com/tag/betting/" rel="tag">betting</a> <a href="https://win-vector.com/tag/ipython/" rel="tag">iPython</a> <a href="https://win-vector.com/tag/kelly-criterion/" rel="tag">Kelly Criterion</a> <a href="https://win-vector.com/tag/pydata/" rel="tag">pydata</a> <a href="https://win-vector.com/tag/python/" rel="tag">python</a></p>	<div>
		<p><img alt="" src="https://secure.gravatar.com/avatar/a4b2fbd7b2c8df820b3ee6832ce2152b?s=100&amp;d=identicon&amp;r=g" srcset="https://secure.gravatar.com/avatar/a4b2fbd7b2c8df820b3ee6832ce2152b?s=200&amp;d=identicon&amp;r=g 2x" height="100" width="100" decoding="async"></p><h3>John Mount</h3>
			</div>
	</section>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Satellite powered estimation of global solar potential (173 pts)]]></title>
            <link>https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/</link>
            <guid>42465535</guid>
            <pubDate>Thu, 19 Dec 2024 20:44:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/">https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/</a>, See on <a href="https://news.ycombinator.com/item?id=42465535">Hacker News</a></p>
Couldn't get https://research.google/blog/satellite-powered-estimation-of-global-solar-potential/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Hardware Security Exploit Research – Xbox 360 (109 pts)]]></title>
            <link>https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md</link>
            <guid>42465378</guid>
            <pubDate>Thu, 19 Dec 2024 20:26:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md">https://github.com/kooscode/srgh-matrix-trinity/blob/main/README.md</a>, See on <a href="https://news.ycombinator.com/item?id=42465378">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Hardware Security Exploit Research - XBOX 360</h2><a id="user-content-hardware-security-exploit-research---xbox-360" aria-label="Permalink: Hardware Security Exploit Research - XBOX 360" href="#hardware-security-exploit-research---xbox-360"></a></p>
<p dir="auto">I'm fairly well versed with original XBOX and writing home-brew code for it 20 years ago, but I have since not spent much time on the XBOX 360 or XBOX One platforms beyond tons of gaming and I have always been interrested in how exactly the XBOX 360 security was defeated.</p>
<p dir="auto">So - here is a hopefully informative write up of my Journey to figuring out how these guys were running unsigned code in 2011 on a XBOX 360..   Buckle up.. its a long read :)</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Original XBOX (Released 2001)</h2><a id="user-content-original-xbox-released-2001" aria-label="Permalink: Original XBOX (Released 2001)" href="#original-xbox-released-2001"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xbox.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xbox.jpg" alt="XBOX"></a></p>
<p dir="auto">The Original XBOX was released in 2001 and the security of that system was defeated by hardware reverse engineering fairly soon after launch and folks were able to run Linux on the system.  There mistakes made in the security for the original XBOX, the biggest of them were probably the basic oversights around implementation of weak and outdated security encryption algorithms used as hashing algorithms. The system saw 6 hardware revisions through its short 4 year life span and every single one those included fixes to address security flaws and each of those "fixes" were in turn defeated within weeks of release. Today the original XBOX still is one of my favourite systems and I have quite a few of them squirreled away..</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">XBOX 360 (Released 2005)</h2><a id="user-content-xbox-360-released-2005" aria-label="Permalink: XBOX 360 (Released 2005)" href="#xbox-360-released-2005"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xbox_360.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xbox_360.jpg" alt="XBOX"></a></p>
<p dir="auto">This cat and mouse game ended with the XBOX 360 being released in November 2005 and security on this system was priority No.1. The system is pretty solid and secure and I wont go through all the details, but suffice to say that every step of the way during the loading and execution of any code, there are hardware layers to make sure only Microsoft "signed code" can run. but.. Like in life, not everything is always perfect..</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">XBOX 360 Security defeated - 2011</h2><a id="user-content-xbox-360-security-defeated---2011" aria-label="Permalink: XBOX 360 Security defeated - 2011" href="#xbox-360-security-defeated---2011"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/gligli.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/gligli.png" alt="XBOX"></a></p>
<p dir="auto">In late 2011, about six years after the launch of the XBOX 360, a couple of very smart hardware hackers (Gligli and Tiros) managed to defeat the XBOX 360 security by using a hardware "glitching" method and made the XBOX CPU essentially think the code it was executing is pure Microsoft provided "signed" code, when in fact it was tampered with.. i.e. You can run any code you want!! And thus the XBOX 360 RGH (Reset Glitch Hack) exploit was born!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">"Hardware Glitching"</h2><a id="user-content-hardware-glitching" aria-label="Permalink: &quot;Hardware Glitching&quot;" href="#hardware-glitching"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/hardware_glitch.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/hardware_glitch.jpg" alt="XBOX"></a></p>
<p dir="auto">Turns out, hardware is pretty susceptible to electrial interference and in specific, digital logic chips like CPU's dont like very noisy or unstable power, data or reset lines..</p>
<p dir="auto">So, you can alter the behaviour of a software system by manually injecting anomalies or errors onto the power, reset and data lines of underlying hardware. These anomalies makes the hardware execute the software instructions in unexpected ways and with a very cleverly crafted "anomaly" you can make hardware do things you want to software.. Like [SPOILER] skip verification checks!!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How the XBOX 360 "Glitch" hack works</h2><a id="user-content-how-the-xbox-360-glitch-hack-works" aria-label="Permalink: How the XBOX 360 &quot;Glitch&quot; hack works" href="#how-the-xbox-360-glitch-hack-works"></a></p>
<p dir="auto">Super High level explanation of XBOX 360 boot process.</p>
<ul dir="auto">
<li>The XBOX 360 starts up and starts loading sequences of Boot Loader (BL) code</li>
<li>During this process, it supplies 8-bit "post codes" on an 8-bit bus present on the motherboard</li>
<li>You can read these pins for post codes and each code represents a different step of the boot process.</li>
<li>At post code 0xD8, BL RC4 decryption is done (RC4 Encrypted BL stored on flash chip)</li>
<li>At post code 0xDA, BL SHA1 verification is done (compares hardware embedded signature to loaded code signature)</li>
<li>If signatures match, it is MS signed code and the system continues to start up</li>
<li>If the loaded code signature does not match the hardware embedded signature, the system resets</li>
<li>After a small number of resets and retry loops, the system halts</li>
</ul>
<p dir="auto">The "Glitch"</p>
<ul dir="auto">
<li>Glitching is done by injecting a very short 3-10 nanosecond pulse on CPU RESET line</li>
<li>The Glitch is timed to happen EXACTLY when a "memory compare" function is executing</li>
<li>This <code>memcmp</code> function is inside the SHA1 verification when comparing BL signatures</li>
<li>The glitch will make <code>memcmp</code> return 0x00, meaning a perfect match, regardless of actual data compared</li>
<li>If you can fake-out the CPU into thinking signatures match, you can run ANY code you want..</li>
</ul>
<p dir="auto">Step by step glitching an XBOX 360</p>
<ul dir="auto">
<li>Create a NAND image with custom code and flash to onboard NAND chip</li>
<li>Wait for post code 0xD8 (BL decryption)</li>
<li>Issue a command on the I2C bus to slow down the CPU significantly</li>
<li>Wait for post code 0xDA (BL verification)</li>
<li>Wait EXACTLY until <code>memcmp</code> executes to compare signatures</li>
<li>Send a 3-10ns pulse on CPU RESET line to glitch a 0x00 return from <code>memcmp</code></li>
<li>The system will "think" the signatures match and will continue to run un-trusted code</li>
<li>Issue a command on the I2C bus to speed up the CPU back to normal</li>
<li>Tadaa - you are now running fully un-trusted code!!</li>
<li>The custom NAND image also contains a custom SMC (Systems Management Controller)</li>
<li>If this custom SMC does not detect a success within a specific timeout, it resets and tries again.</li>
<li>The custom SMC will also override the halt and continiously loop and reset until the glitch works.</li>
</ul>
<p dir="auto">You can read the full technical details and description from Gligli here:
<a href="https://github.com/gligli/tools/blob/master/reset_glitch_hack/reset_glitch_hack.txt">https://github.com/gligli/tools/blob/master/reset_glitch_hack/reset_glitch_hack.txt</a></p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">Reverse Engineering the XBOX 360 RGH Exploit</h2><a id="user-content-reverse-engineering-the-xbox-360-rgh-exploit" aria-label="Permalink: Reverse Engineering the XBOX 360 RGH Exploit" href="#reverse-engineering-the-xbox-360-rgh-exploit"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/glitch_reverse.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/glitch_reverse.jpg" alt="XBOX"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Learning by standing on the shoulders of giants</h2><a id="user-content-learning-by-standing-on-the-shoulders-of-giants" aria-label="Permalink: Learning by standing on the shoulders of giants" href="#learning-by-standing-on-the-shoulders-of-giants"></a></p>
<p dir="auto">I have always been very intrigued at the inner workings of this incredible feat and wanted to duplicate this hardware glitch hack from scratch and really understand how it works. But, one of the barriers of entry was the timings of these attacks. You have to be EXTREMELY precise.. We are talking about TWO HUNDRED MILLIONTH of a second precise! Or more succinctly, you need te able to inject a single 3-10 nano second pulse at a VERY precise time after post code 0xDA shows up on the post bus. It has to align within 3-5 nanoseconds window of the <code>memcmp</code> function execution that verifies the signatures.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: XBOX 360</h2><a id="user-content-tools-of-the-trade-xbox-360" aria-label="Permalink: Tools of the trade: XBOX 360" href="#tools-of-the-trade-xbox-360"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/craigslist.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/craigslist.png" alt="XBOX"></a></p>
<ul dir="auto">
<li>Step 1 - Get a XBOX 360</li>
<li>XBOX 360 acquired from Craigslist for $40!!!</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: FPGA or CPLD</h2><a id="user-content-tools-of-the-trade-fpga-or-cpld" aria-label="Permalink: Tools of the trade: FPGA or CPLD" href="#tools-of-the-trade-fpga-or-cpld"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/matrix.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/matrix.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>Generating VERY precise timing and pulses, you need FPGA's or CPLD's</li>
<li>Instead of re-inventing the wheel, as Gligli mentions, they used Xilinx CoolRunner II CPLD (xc2c64a)</li>
<li>I found cheap xc2c64a boards on ebay that is actually specifically built for XBOX360 glitching</li>
<li>This board has an onboard 48Mhz clock, but you can disable it and hook into the XBOX standbly Clock</li>
<li>You can buy these from Amazon, Ebay or various online stores</li>
<li><a href="https://www.amazon.com/gp/product/B07KDCDN5H" rel="nofollow">https://www.amazon.com/gp/product/B07KDCDN5H</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: CPLD and NAND programmer</h2><a id="user-content-tools-of-the-trade-cpld-and-nand-programmer" aria-label="Permalink: Tools of the trade: CPLD and NAND programmer" href="#tools-of-the-trade-cpld-and-nand-programmer"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/jr_programmer.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/jr_programmer.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>You need to program the CPLD with glitch code</li>
<li>And you need to flash a custom NAND image to the XBOX 360</li>
<li>Turns out, there is a really handy tool that can do BOTH!</li>
<li>I used a <code>J-R Programmer</code> that you can buy off E-Bay or Amazon</li>
<li><a href="https://www.amazon.com/gp/product/B01MTUWLVJ" rel="nofollow">https://www.amazon.com/gp/product/B01MTUWLVJ</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools of the trade: Logic Analyzer</h2><a id="user-content-tools-of-the-trade-logic-analyzer" aria-label="Permalink: Tools of the trade: Logic Analyzer" href="#tools-of-the-trade-logic-analyzer"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/kingst.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/kingst.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>You need to visualize data on the POST, RESET, DB2G3 and I2C lines</li>
<li>I have a Saleae 8 channel 100Mhz, which turned out not to be fast enough</li>
<li>I found a not too expensive 200Mhz Kingst LA2016 Logic Analyzer on Amazon</li>
<li>There are better and more expensive, but this will do just fine.</li>
<li><a href="https://www.amazon.com/gp/product/B07D35FNYL" rel="nofollow">https://www.amazon.com/gp/product/B07D35FNYL</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Running existing RGH exploit</h2><a id="user-content-running-existing-rgh-exploit" aria-label="Permalink: Running existing RGH exploit" href="#running-existing-rgh-exploit"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/muffin.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/muffin.jpg" alt="XBOX"></a></p>
<ul dir="auto">
<li>I installed the "Matrix" board and was able to get the existing exploit running.</li>
<li>This particular board uses an install called "Project Muffin" for XBOX 360 Slim systems</li>
<li>"Project Muffin" does not connect to the I2C bus, but connects to the GPIO_0 pin on South Bridge marked "DB2G3" on the mainboard.</li>
<li>The default custom NAND image just loads "XELL Reloaded", an open source boot loader</li>
<li>After install, the Xell bootloader came up within 5-10 seconds.. the glitch works!!</li>
<li><a href="https://github.com/Free60Project/xell-reloaded">https://github.com/Free60Project/xell-reloaded</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Looking under the hood (Matrix board)</h2><a id="user-content-looking-under-the-hood-matrix-board" aria-label="Permalink: Looking under the hood (Matrix board)" href="#looking-under-the-hood-matrix-board"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/analyzer_connected.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/analyzer_connected.jpg" alt="XBOX"></a></p>
<p dir="auto">After install and sucessfull "Glitch", I started to look under the hood how this hack actually works and I connected the Logic Analyzer to the RESET (A), POST (B), CLK (C) and DB2G3 (E) pads of the Matrix board and additionally hooked it up to the XBOX 360's I2C bus SDA and SCL pins to monitor I2C traffic.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/matrix_pads.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/matrix_pads.jpg" alt="XBOX"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">RESET (Matrix A &gt;&gt; XBOX RESET)</h4><a id="user-content-reset-matrix-a--xbox-reset" aria-label="Permalink: RESET (Matrix A >> XBOX RESET)" href="#reset-matrix-a--xbox-reset"></a></p>
<ul dir="auto">
<li>The RESET pad is connected to XBOX CPU RESET pin, HIGH = Running, LOW = reset condition.</li>
<li>When the system resets and starts boot the RESET pin goes HIGH and stays HIGH</li>
<li>This is also the pin where the 5ns glitch pulse gets injected  by pulling it LOW</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">POST (Matrix B &gt;&gt; XBOX Post Bit 1)</h4><a id="user-content-post-matrix-b--xbox-post-bit-1" aria-label="Permalink: POST (Matrix B >> XBOX Post Bit 1)" href="#post-matrix-b--xbox-post-bit-1"></a></p>
<ul dir="auto">
<li>With every post message sent to the XBOX's 8-Bit post bus, the value gets incremented by 1</li>
<li>The POST pad is only connected on a single bit of XBOX 8-Bit Post bus - Bit[1]</li>
<li>Connecting to Bit[1], means every SECOND post will toggle this pin HIGH/LOW</li>
<li>This means you can count posts by counting every rising and falling edge of a single pin</li>
<li>Should be easy to count posts to find post 0xD8 and 0xDA</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">CLK (Matrix C &gt;&gt; XBOX Standby CLK)</h4><a id="user-content-clk-matrix-c--xbox-standby-clk" aria-label="Permalink: CLK (Matrix C >> XBOX Standby CLK)" href="#clk-matrix-c--xbox-standby-clk"></a></p>
<ul dir="auto">
<li>I disabled the Matrix onboard oscillator by removing a zero ohm resistor.</li>
<li>The CLK connects to the 48Mhz standby CLK on the XBOX 360</li>
<li>The CLK signal is left unmodified, it clocks the CPLD and was ignored for my reversing purposes.</li>
<li>Note - Newer revisions of XBOX 360 has no access to CLK and you must use Matrix oscillator</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">DB2G3 (Matrix E &gt;&gt; South Bridge GPIO_0 / DB2G3)</h4><a id="user-content-db2g3-matrix-e--south-bridge-gpio_0--db2g3" aria-label="Permalink: DB2G3 (Matrix E >> South Bridge GPIO_0 / DB2G3)" href="#db2g3-matrix-e--south-bridge-gpio_0--db2g3"></a></p>
<ul dir="auto">
<li>This pad connects to a the GPIO_0 pin of the South Bridge marked "DB2G3" on XBOX 360 mainboard</li>
<li>I was not sure exactly what this did in regards to this "Project Muffin" method (yet)</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">SDA &amp; SCL ( XBOX I2C Bus SDA &amp; SCL )</h4><a id="user-content-sda--scl--xbox-i2c-bus-sda--scl-" aria-label="Permalink: SDA &amp; SCL ( XBOX I2C Bus SDA &amp; SCL )" href="#sda--scl--xbox-i2c-bus-sda--scl-"></a></p>
<ul dir="auto">
<li>I wanted to also monitor the I2C traffic to see what devices are on the bus</li>
<li>The I2C was not connected to anything on the Matrix board at this time.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Reading the Tea leaves..</h2><a id="user-content-reading-the-tea-leaves" aria-label="Permalink: Reading the Tea leaves.." href="#reading-the-tea-leaves"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/glitch_dump1.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/glitch_dump1.png" alt="XBOX"></a></p>
<p dir="auto">I captured a few runs of the glitch and this is what I saw during the glitch</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">RESET (PINK)</h4><a id="user-content-reset-pink" aria-label="Permalink: RESET (PINK)" href="#reset-pink"></a></p>
<ul dir="auto">
<li>The RESET pin toggles LOW/HIGH and after a while a VERY short LOW/HIGH pulse and then cycle repeats</li>
<li>I suspect the first toggle is simply a system reset</li>
<li>the super short less than 10ns pulse is highly likely to be the glitch pulse</li>
<li>the subsequent RESET toggles are probably retry attempts when the glitch failed</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">POST (BLUE)</h4><a id="user-content-post-blue" aria-label="Permalink: POST (BLUE)" href="#post-blue"></a></p>
<ul dir="auto">
<li>There are 20 post bit 1 HIGH/LOW toggles that I counted during RESET LOW period</li>
<li>I refer to these HIGH/LOW rising and falling edges as "post counts", 1 count each per edge</li>
<li>Then there are 10 post counts before the DB2G3 pin goes HIGH</li>
<li>Post count 10 is likely post bus message 0xD8 (BL Decrypt) and DB2G3 HIGH is likely CPU slow down</li>
<li>After 1 more post pin toggle at post count 11 there is the ~5ns pulse on RESET line</li>
<li>It is highly likely that post count 11 is post message 0xDA (SHA signature verify)</li>
<li>The RESET pulse right after post count 11 is likely the <code>memcmp</code> glitch</li>
<li>The DB2G3 line goes HIGH again right after the the glitch pulse, likely indicating CPU speed up</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">DB2G3 (ORANGE) (Marked as DEBUG in trace)</h4><a id="user-content-db2g3-orange-marked-as-debug-in-trace" aria-label="Permalink: DB2G3 (ORANGE) (Marked as DEBUG in trace)" href="#db2g3-orange-marked-as-debug-in-trace"></a></p>
<ul dir="auto">
<li>The DB2G3 pin on the South Bridge has a single long HIGH/LOW period during a RESET cycle</li>
<li>It is highly likely that this is what controls CPU slow down and speed up</li>
<li>I disconnected this pin and the time between post count 10 and 11 was WAAAAAY less..</li>
<li>This told me that DB2G3 HIGH at post count 10 is for sure CPU slow down and LOW is speed up at count 11</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">SDA &amp; SCL (GREEN &amp; YELLOW)</h4><a id="user-content-sda--scl-green--yellow" aria-label="Permalink: SDA &amp; SCL (GREEN &amp; YELLOW)" href="#sda--scl-green--yellow"></a></p>
<ul dir="auto">
<li>The I2C bus has a bunch of traffic, but after a number of RESET cycle captures, I found a pattern!</li>
<li>Right after the DB2G3 line goes HIGH, there is always a <code>0xCD,0x04,0x4E,0x08,0x80,0x03</code> message</li>
<li>Right after the DB2G3 line goes LOW, there is always a  <code>0xCD,0x04,0x4E,0x80,0x0C,0x02</code> message</li>
<li>These two messages are identical except for th last 3 bytes, so they must be related!</li>
<li>more captures by disconnecting the DB2G3 pin had none of these messages</li>
<li>Confirmed DB2G3 HIGH/LOW is for slowdown/speedup and it triggers these I2C messages</li>
<li>So, instead of using the DB2G3 pin, injecting these messages directly on the I2C should have same effect</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Glitching the XBOX 360 and running unsigned code!!!</h2><a id="user-content-glitching-the-xbox-360-and-running-unsigned-code" aria-label="Permalink: Glitching the XBOX 360 and running unsigned code!!!" href="#glitching-the-xbox-360-and-running-unsigned-code"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/muffin_full_cycle.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/muffin_full_cycle.png" alt="XBOX"></a></p>
<p dir="auto">I ran a bunch of Logic Analyzer dumps, measured all the timings between events and was able to to piece together the EXACT timings and steps I needed to perform the XBOX 360 Reset Glitch Hack.</p>
<ul dir="auto">
<li>STEP 1 - Wait for RESET to complete and start counting post Rising/Falling edges</li>
<li>STEP 2 - At post count 10 - Issue a "slow down" I2C message <code>0xCD,0x04,0x4E,0x08,0x80,0x03</code></li>
<li>STEP 3 - At post count 11 - start a "Glitch Timer"</li>
<li>STEP 4 - After EXACTLY 180,840 nano seconds, send a 10 nanosecond LOW/HIGH pulse on RESET (Glitch!)</li>
<li>STEP 5 - Issue a "speed up" I2C message <code>0xCD,0x04,0x4E,0x80,0x0C,0x02</code> to restore CPU clock</li>
<li>If RESET gets pulled LOW and there are post counts, this means the glitch failed and system reset</li>
<li>If system reset, start over again from Step 1</li>
</ul>
<p dir="auto">I did not want to use the South Bridge GPIO_0 (DB2G3) pin, since I have heard rumours about repurposing the South Bridge output pin as a SMC input pin was not healthy for the South Bridge.. Jury is still out, but I wanted to use the tried and true Gligli method using just the I2C bus.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xilinx_ise.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xilinx_ise.jpg" alt="XBOX"></a></p>
<p dir="auto">So after reading a book and few tutorials on Verilog, I downloaded the free Xilinx ISE 14.7 IDE and went about implementing the all the code in this repo to perform steps 1 through 5 and all the rest of the logic to auto restart and retry and additionally use I2C based slowdown instead of South Bridge GPIO_0 (DB2G3) "Muffin" style slowdown.</p>
<p dir="auto">I have to say, getting everything to work and fit into a 64 cell CPLD, was REALLY tricky!! Everyone I spoke to told me that it can't be done..  Well.. I finally cracked it and it all fit and seemed to work as planned.</p>
<p dir="auto">I played with the Glitch Timer values and I finally got it to glitch and XELL loaded up!!! HOLY SHIT, IT WORKS!!!! but it was VERY inconsistent.. I could only get it to sucessfully glitch like once or twice after many many many reset cycles..</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/xell.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/xell.jpg" alt="XBOX"></a></p>
<p dir="auto">Finally I reached out to some folks on Discord familiar with XBOX 360 RGH (Mena and Octal450) and I learnt that the XBOX 360's standby clock at 48Mhz is waay too slow for consistent glitches. You can process the clock on Dual Edge Triggering (DET) with a Xilinx Coolrunner CPLD, meaning you can process on both rising and falling edges of a clock and in theory the processing happens at 96Mhz, but still even working with ~10 nanosecond periods it seemed too slow.  I saw notes in existing exploit files that it was running at 192Mhz and getting 48Mhz to 192Mhz with this tiny CPLD seemed pretty darn impossible!</p>
<p dir="auto">There are no built-in IP logic on CPLD's to perform frequency multiplication using Phased Lock Loops (PLL) or Digital Clock Managers (DCM's) or other features you typically get for free in FPGA's..  After some serious Google fu and head scratching, I found an archive on Xilinx Forums on a way to DOUBLE the frequency of a digital circuit by phase delaying the signal a little and then XOR'ing an inverse of the delayed signal with the original and boom! you can double the Frequency!</p>
<p dir="auto">Super cool tecnique I found on now defunct Xiling Forums: <a href="https://web.archive.org/web/20201215191757/https://forums.xilinx.com/t5/General-Technical-Discussion/the-implement-of-frequency-multiplier/m-p/199162/highlight/true#M9312" rel="nofollow">https://web.archive.org/web/20201215191757/https://forums.xilinx.com/t5/General-Technical-Discussion/the-implement-of-frequency-multiplier/m-p/199162/highlight/true#M9312</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/freq_doubler_sch.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/freq_doubler_sch.png" alt="XBOX"></a></p>
<p dir="auto">I implemented this Flip-Flop with clock XOR trick on the 48Mhz clock that should produce a 96Mhz clock and then did Dual Edge Triggering ontop of that to theoretically get to 192Mhz!  Now to test it out and check the output frequencies!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/48_48_phase.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/48_48_phase.jpg" alt="XBOX"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/48_to_96mhz.jpg"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/48_to_96mhz.jpg" alt="XBOX"></a></p>
<p dir="auto">I hooked up my Oscilloscope to the board and after some tests involving basic frequency measurements, I confirmed the CPLD was doing exactly what the Xilinx forum suggested.. It delayed the input 48Mhz clock phase by a few degrees, then XOR'ed the Input 48Mhz and delayed 48Mhz clock signals to produce a DOUBLE frequency clock signal at 96Mhz - Then you can do Dual Edge Triggering to process signals at 192Mhz!!!!  Thats pretty crazy to process at 4x the input clock speed without any PLL's or DCM's!!!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Now I could process and produce signals on the CPLD in 5.208333 nanosecond periods - that is a pretty darn accurate clock !!</h3><a id="user-content-now-i-could-process-and-produce-signals-on-the-cpld-in-5208333-nanosecond-periods---that-is-a-pretty-darn-accurate-clock-" aria-label="Permalink: Now I could process and produce signals on the CPLD in 5.208333 nanosecond periods - that is a pretty darn accurate clock !!" href="#now-i-could-process-and-produce-signals-on-the-cpld-in-5208333-nanosecond-periods---that-is-a-pretty-darn-accurate-clock-"></a></p>
<p dir="auto">After these Changes and some more input from Octal450 on glitch timing fine tuning and a suggestion to delay the "slow down" message until 30-50ms after post count 10, I found the magic numbers..  and BOOM!!  I was able to glitch the XBOX 360 pretty much within 1-5 seconds EVERY single time!! using code I created entirely from a Logic Analyzer output !!!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/all_good.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/all_good.png" alt="XBOX"></a></p>
<p dir="auto">This was a WILD ride! I learnt so much during the process about hardware glitching and how powerful of a tool such a teeny tiny little anomaly at the right time could be!</p>
<p dir="auto">I am still AMAZED at the people who researched this hack 10 years ago and found all the puzzle pieces to pull it off..  This is a very advanced hack and to get to to work so well and so consistently is pretty darn incredible.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Thanks Octal450 and Mena on Discord for your help and guidance, it certainly was a cool journey.</h4><a id="user-content-thanks-octal450-and-mena-on-discord-for-your-help-and-guidance-it-certainly-was-a-cool-journey" aria-label="Permalink: Thanks Octal450 and Mena on Discord for your help and guidance, it certainly was a cool journey." href="#thanks-octal450-and-mena-on-discord-for-your-help-and-guidance-it-certainly-was-a-cool-journey"></a></p>
<p dir="auto">Feel free to ping me if anyone has any questions about the code or the process</p>
<p dir="auto">ENJOY!</p>
<p dir="auto">Koos</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/kooscode/srgh-matrix-trinity/blob/main/images/happy_pepe.png"><img src="https://github.com/kooscode/srgh-matrix-trinity/raw/main/images/happy_pepe.png" alt="XBOX"></a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Music and Geometry: Intervals and Scales (107 pts)]]></title>
            <link>https://roelsworld.eu/blog-music/music-geometry-intervals-scales/</link>
            <guid>42464557</guid>
            <pubDate>Thu, 19 Dec 2024 18:52:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://roelsworld.eu/blog-music/music-geometry-intervals-scales/">https://roelsworld.eu/blog-music/music-geometry-intervals-scales/</a>, See on <a href="https://news.ycombinator.com/item?id=42464557">Hacker News</a></p>
Couldn't get https://roelsworld.eu/blog-music/music-geometry-intervals-scales/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Mizu.js – Lightweight HTML templating library for any-side rendering (136 pts)]]></title>
            <link>https://mizu.sh</link>
            <guid>42464310</guid>
            <pubDate>Thu, 19 Dec 2024 18:25:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mizu.sh">https://mizu.sh</a>, See on <a href="https://news.ycombinator.com/item?id=42464310">Hacker News</a></p>
Couldn't get https://mizu.sh: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: WebGPU Tech Demo (113 pts)]]></title>
            <link>https://gnikoloff.github.io/webgpu-sponza-demo/</link>
            <guid>42463525</guid>
            <pubDate>Thu, 19 Dec 2024 17:14:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gnikoloff.github.io/webgpu-sponza-demo/">https://gnikoloff.github.io/webgpu-sponza-demo/</a>, See on <a href="https://news.ycombinator.com/item?id=42463525">Hacker News</a></p>
Couldn't get https://gnikoloff.github.io/webgpu-sponza-demo/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[A Replacement for Bert (266 pts)]]></title>
            <link>https://huggingface.co/blog/modernbert</link>
            <guid>42463315</guid>
            <pubDate>Thu, 19 Dec 2024 16:53:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://huggingface.co/blog/modernbert">https://huggingface.co/blog/modernbert</a>, See on <a href="https://news.ycombinator.com/item?id=42463315">Hacker News</a></p>
Couldn't get https://huggingface.co/blog/modernbert: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Clay – UI Layout Library (124 pts)]]></title>
            <link>https://www.nicbarker.com/clay</link>
            <guid>42463123</guid>
            <pubDate>Thu, 19 Dec 2024 16:36:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nicbarker.com/clay">https://www.nicbarker.com/clay</a>, See on <a href="https://news.ycombinator.com/item?id=42463123">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Nullboard: Kanban board in a single HTML file (308 pts)]]></title>
            <link>https://github.com/apankrat/nullboard</link>
            <guid>42461688</guid>
            <pubDate>Thu, 19 Dec 2024 14:29:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/apankrat/nullboard">https://github.com/apankrat/nullboard</a>, See on <a href="https://news.ycombinator.com/item?id=42461688">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Nullboard</h2><a id="user-content-nullboard" aria-label="Permalink: Nullboard" href="#nullboard"></a></p>
<p dir="auto">Nullboard is a minimalist take on a kanban board / a task list manager, designed to be compact, readable and quick in use.</p>
<p dir="auto"><a href="https://nullboard.io/preview" rel="nofollow">https://nullboard.io/preview</a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-example-alt.png"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-example-alt.png" alt="Nullboard"></a></p>
<p dir="auto">The name also happens to abbreviate to <a href="https://en.wikipedia.org/wiki/Nota_bene" rel="nofollow">NB</a>, which I think is a nice touch.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dead simple</h2><a id="user-content-dead-simple" aria-label="Permalink: Dead simple" href="#dead-simple"></a></p>
<ul dir="auto">
<li>Single-page web app - just one HTML file, an ancient jQuery package and a webfont pack.</li>
<li>Can be used completely offline. In fact, it's written exactly with this use in mind.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Locally stored</h2><a id="user-content-locally-stored" aria-label="Permalink: Locally stored" href="#locally-stored"></a></p>
<ul dir="auto">
<li>All data is stored locally, for now using <a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage" rel="nofollow">localStorage</a>.</li>
<li>The data can be exported to- or imported from a plain text file in a simple JSON format.</li>
<li>The data can also be automatically backed up to a local disk with the help of:
<ul dir="auto">
<li><a href="https://nullboard.io/backups" rel="nofollow">Nullboard Agent</a> - a native Windows app</li>
<li><a href="https://github.com/justinpchang/nullboard-agent-express">Nullboard Agent Express Port</a> - an express.js-based portable app</li>
<li><a href="https://github.com/luismedel/nbagent">nbagent</a> - a version for Unix systems, in Python</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Beta</h2><a id="user-content-beta" aria-label="Permalink: Beta" href="#beta"></a></p>
<p dir="auto">Still very much in beta. Caveat emptor and all that.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">UI &amp; UX</h2><a id="user-content-ui--ux" aria-label="Permalink: UI &amp; UX" href="#ui--ux"></a></p>
<p dir="auto">The whole thing is largely about making it convenient to use.</p>
<p dir="auto">Everything is editable in place, all changes are saved automatically and last 50 revisions are kept for undo/redo:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-inplace-editing.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-inplace-editing.gif" alt="In-place editing" data-animated-image=""></a></p>
<p dir="auto">New notes can be quickly added directly where they are needed, e.g. before or after existing notes:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-ctrl-add-note.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-ctrl-add-note.gif" alt="Ctrl-add note" data-animated-image=""></a></p>
<p dir="auto">Notes can also be dragged around, including to and from other lists:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-drag-n-drop.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-drag-n-drop.gif" alt="Drag-n-drop" data-animated-image=""></a></p>
<p dir="auto">Nearly all controls are hidden by default to reduce visual clutter to its minimum:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-hidden-controls.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-hidden-controls.gif" alt="Hidden controls" data-animated-image=""></a></p>
<p dir="auto">Longer notes can be collapsed to show just the first line, for even more compact view of the board:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-collapsed-notes.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-collapsed-notes.gif" alt="Collapsed notes" data-animated-image=""></a></p>
<p dir="auto">The default font is <a href="https://tribby.com/fonts/barlow/" rel="nofollow">Barlow</a> - it's both narrow <em>and</em> still very legible. Absolutely fantastic design!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/barlow-specimen.png"><img src="https://github.com/apankrat/nullboard/raw/master/images/barlow-specimen.png" alt="Barlow speciment"></a></p>
<p dir="auto">Notes can also be set to look a bit different. This is useful for partitioning lists into sections:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-raw-notes.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-raw-notes.gif" alt="Raw notes" data-animated-image=""></a></p>
<p dir="auto">Links starting with https:// and http:// are recognized. They will "pulse" on mouse hover and can be opened via the right-click menu.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-links-on-hover.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-links-on-hover.gif" alt="Links on hover" data-animated-image=""></a></p>
<p dir="auto">Pressing CapsLock will highlight all links and make them left-clickable.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-links-reveal.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-links-reveal.gif" alt="Links reveal" data-animated-image=""></a></p>
<p dir="auto">Lists can be moved around as well, though not as flashy as notes:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-list-swap.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-list-swap.gif" alt="List swapping" data-animated-image=""></a></p>
<p dir="auto">The font can be changed; its size and line height can be adjusted:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-ui-preferences.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-ui-preferences.gif" alt="Theme and zoom" data-animated-image=""></a></p>
<p dir="auto">The color theme can be inverted:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/apankrat/nullboard/blob/master/images/nullboard-dark-theme.gif"><img src="https://github.com/apankrat/nullboard/raw/master/images/nullboard-dark-theme.gif" alt="Dark theme" data-animated-image=""></a></p>
<p dir="auto">Also:</p>
<ul dir="auto">
<li>Support for multiple boards with near-instant switching</li>
<li>Undo/redo for 50 revisions per board (configurable in the code)</li>
<li>Keyboard shortcuts, including Tab'ing through notes</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Caveats</h2><a id="user-content-caveats" aria-label="Permalink: Caveats" href="#caveats"></a></p>
<ul dir="auto">
<li>Written for desktop and keyboard/mouse use</li>
<li>Essentially untested on mobile devices and against tap/touch input</li>
<li>Works in Firefox, tested in Chrome, should work in Safari and may work in Edge (or what it's called now)</li>
<li>Uses localStorage for storing boards/lists/notes, so be careful around <a href="https://stackoverflow.com/questions/9948284/how-persistent-is-localstorage" rel="nofollow">clearing your cache</a></li>
</ul>
<p dir="auto">You spot a bug, file an issue.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dockerized version</h2><a id="user-content-dockerized-version" aria-label="Permalink: Dockerized version" href="#dockerized-version"></a></p>
<p dir="auto">See <a href="https://github.com/rsoper/nullboard">this fork</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Background</h2><a id="user-content-background" aria-label="Permalink: Background" href="#background"></a></p>
<p dir="auto">Nullboard is something that handles ToDo lists in the way that works really well. For <em>me</em> that is.</p>
<p dir="auto">Tried a lot of options, some were almost <em>it</em>, but none was 100%.</p>
<p dir="auto"><strong>Trello</strong> wasn't bad, but never was comfortable with the idea of storing my data in cloud without any actual need.</p>
<p dir="auto"><strong>Wekan</strong> looked promising, but ultimately too heavy and had no offline usage support or a local storage option.</p>
<p dir="auto"><strong>Things</strong> was beautiful, but not the right tool for the job.</p>
<p dir="auto"><strong>Inkscape</strong> - I kid you not - with a laundry list of text items was actually OK, but didn't scale well.</p>
<p dir="auto">Ditto for the plain <strong>text files</strong>.</p>
<p dir="auto">Pieces of <strong>paper</strong> were almost there, but rearranging items can be quite a hassle.</p>
<p dir="auto">So finally got annoyed enough to sit down and write exactly what I wanted.</p>
<p dir="auto">And, voilà, Nullboard came out  =&gt;  <a href="https://nullboard.io/preview" rel="nofollow">https://nullboard.io/preview</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">The <a href="https://opensource.org/licenses/BSD-2-Clause/" rel="nofollow">2-clause BSD license</a> with the <a href="https://commonsclause.com/" rel="nofollow">Commons Clause</a>.</p>
<p dir="auto">That is, you can use, change and re-distribute it for as long as you don't try and sell it.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Updates</h2><a id="user-content-updates" aria-label="Permalink: Updates" href="#updates"></a></p>
<p dir="auto">Primary feed is through <a href="https://twitter.com/nullboard" rel="nofollow">@nullboard</a> on Twitter.</p>
<p dir="auto">The changelog is here =&gt; <a href="https://nullboard.io/changes" rel="nofollow">https://nullboard.io/changes</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How do you do, fellow web developers? A growing disconnect (152 pts)]]></title>
            <link>https://rakhim.exotext.com/web-developers-a-growing-disconnect</link>
            <guid>42461264</guid>
            <pubDate>Thu, 19 Dec 2024 13:39:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rakhim.exotext.com/web-developers-a-growing-disconnect">https://rakhim.exotext.com/web-developers-a-growing-disconnect</a>, See on <a href="https://news.ycombinator.com/item?id=42461264">Hacker News</a></p>
Couldn't get https://rakhim.exotext.com/web-developers-a-growing-disconnect: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Alignment faking in large language models (264 pts)]]></title>
            <link>https://www.anthropic.com/research/alignment-faking</link>
            <guid>42458752</guid>
            <pubDate>Thu, 19 Dec 2024 05:43:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.anthropic.com/research/alignment-faking">https://www.anthropic.com/research/alignment-faking</a>, See on <a href="https://news.ycombinator.com/item?id=42458752">Hacker News</a></p>
Couldn't get https://www.anthropic.com/research/alignment-faking: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Markov Keyboard: keyboard layout that changes by Markov frequency (159 pts)]]></title>
            <link>https://github.com/shapr/markovkeyboard</link>
            <guid>42458599</guid>
            <pubDate>Thu, 19 Dec 2024 05:12:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/shapr/markovkeyboard">https://github.com/shapr/markovkeyboard</a>, See on <a href="https://news.ycombinator.com/item?id=42458599">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">markovkeyboard</h2><a id="user-content-markovkeyboard" aria-label="Permalink: markovkeyboard" href="#markovkeyboard"></a></p>
<p dir="auto">keyboard layout that changes by markov frequency</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/shapr/markovkeyboard/blob/master/screenshot.png"><img src="https://github.com/shapr/markovkeyboard/raw/master/screenshot.png" alt="screenshot"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">the big idea</h2><a id="user-content-the-big-idea" aria-label="Permalink: the big idea" href="#the-big-idea"></a></p>
<p dir="auto">Static keyboard layouts are boring and predictable. Let's spice up the whole idea of keyboard layouts by having the layout <em>CHANGE WHILE YOU ARE TYPING</em>!</p>
<p dir="auto">The layout will update itself to move the keys that most frequently come next to the home row.
For example, if you type only "the" all day, then when you press the letter 't' the letter 'h' will be on the home row.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">how do I type?</h2><a id="user-content-how-do-i-type" aria-label="Permalink: how do I type?" href="#how-do-i-type"></a></p>
<p dir="auto">There are minor challenges involved if your keyboard layout could change with every keypress, thus this prototype is an emacs library that displays and updates the current layout with every keypress.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">does it work?</h2><a id="user-content-does-it-work" aria-label="Permalink: does it work?" href="#does-it-work"></a></p>
<p dir="auto">Pretty much! It only remaps the letters from a-zA-Z, but it does work!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">how do I make it go?</h2><a id="user-content-how-do-i-make-it-go" aria-label="Permalink: how do I make it go?" href="#how-do-i-make-it-go"></a></p>
<p dir="auto">Use the pre-trained markov-all.el with M-x load-file then type in /path/to/markovkeyboard/markov-all.el</p>
<p dir="auto">After that, use M-x set-input-method and choose markov-insanity-a or replace a with any letter you prefer!</p>
<p dir="auto">If you want a different set of 26 keymaps:</p>
<p dir="auto">Download a plain text file for training the markov chain, then run "python crunch_freqs.py filename.txt" and that will generate a markov-all.el file that you can use with M-x load-file .</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">how do I make it stop?</h2><a id="user-content-how-do-i-make-it-stop" aria-label="Permalink: how do I make it stop?" href="#how-do-i-make-it-stop"></a></p>
<p dir="auto">C-\ is bound to toggle-input-method in stock emacs, and the keybindings are all buffer local, so the code shouldn't make your life too difficult.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">what needs to be done?</h2><a id="user-content-what-needs-to-be-done" aria-label="Permalink: what needs to be done?" href="#what-needs-to-be-done"></a></p>
<ul>
<li> define a new input-method for markov</li>
<li> display the keyboard layout when enabling the mode</li>
<li> port to X11 to ease getting started</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amazon workers to strike at multiple US warehouses during busy holiday season (361 pts)]]></title>
            <link>https://www.reuters.com/technology/amazon-workers-strike-multiple-us-warehouses-during-busy-holiday-season-2024-12-19/</link>
            <guid>42458431</guid>
            <pubDate>Thu, 19 Dec 2024 04:27:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/technology/amazon-workers-strike-multiple-us-warehouses-during-busy-holiday-season-2024-12-19/">https://www.reuters.com/technology/amazon-workers-strike-multiple-us-warehouses-during-busy-holiday-season-2024-12-19/</a>, See on <a href="https://news.ycombinator.com/item?id=42458431">Hacker News</a></p>
Couldn't get https://www.reuters.com/technology/amazon-workers-strike-multiple-us-warehouses-during-busy-holiday-season-2024-12-19/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Firenvim – Turn the browser into a Neovim client (161 pts)]]></title>
            <link>https://github.com/glacambre/firenvim</link>
            <guid>42457816</guid>
            <pubDate>Thu, 19 Dec 2024 02:34:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/glacambre/firenvim">https://github.com/glacambre/firenvim</a>, See on <a href="https://news.ycombinator.com/item?id=42457816">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">
<p dir="auto">Turn your browser¹ into a Neovim client (demos: <a href="https://www.youtube.com/watch?v=suvh0yFfIB8" rel="nofollow">justinmk 🇺🇸</a>, <a href="https://www.youtube.com/watch?v=dNQJONKnJrg" rel="nofollow">Sean Feng 🇨🇳</a>).</p>
<p dir="auto">¹ <sub>Firefox and Chrome are specifically supported. Other Chromium based browsers such as Brave, Vivaldi, Opera, and Arc should also work but are not specifically tested.</sub></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/glacambre/firenvim/blob/master/firenvim.gif"><img src="https://github.com/glacambre/firenvim/raw/master/firenvim.gif" alt="Firenvim demo" data-animated-image=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How to use</h2><a id="user-content-how-to-use" aria-label="Permalink: How to use" href="#how-to-use"></a></p>
<p dir="auto">Just click on any textarea and it will be immediately replaced by an instance of Firenvim. To set the content of the now hidden textarea to the content of the Neovim instance, simply <code>:w</code>. If you want to close the Firenvim overlay and return to the textarea, use <code>:q</code>. If you selected an element where you expected the Firenvim frame to appear and it didn't, try pressing <code>&lt;C-e&gt;</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installing</h2><a id="user-content-installing" aria-label="Permalink: Installing" href="#installing"></a></p>
<p dir="auto">Before installing anything please read <a href="https://github.com/glacambre/firenvim/blob/master/SECURITY.md">SECURITY.md</a> and make sure you're okay with everything mentioned. In the event you think of a way to compromise Firenvim, please send me an email (you can find my address on my website).</p>
<ol dir="auto">
<li>
<p dir="auto">Install Firenvim as a regular NeoVim plugin, then run the built-in post-install script.</p>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/folke/lazy.nvim">lazy</a></p>
<div dir="auto" data-snippet-clipboard-copy-content="{ 'glacambre/firenvim', build = &quot;:call firenvim#install(0)&quot; }
"><pre>{ <span><span>'</span>glacambre/firenvim<span>'</span></span>, <span>build</span> <span>=</span> <span><span>"</span>:call firenvim#install(0)<span>" </span></span>}
</pre></div>
</li>
<li>
<p dir="auto"><a href="https://github.com/junegunn/vim-plug">vim-plug</a></p>
<div dir="auto" data-snippet-clipboard-copy-content="Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }"><pre>Plug <span><span>'</span>glacambre/firenvim<span>'</span></span>, { <span><span>'</span>do<span>'</span></span>: { _ <span>-</span>&gt; <span>firenvim#install</span>(<span>0</span>) } }</pre></div>
</li>
<li>
<p dir="auto"><a href="https://github.com/k-takata/minpac">minpac</a></p>
<div dir="auto" data-snippet-clipboard-copy-content="call minpac#add('glacambre/firenvim', { 'type': 'opt', 'do': 'packadd firenvim | call firenvim#install(0)'})
if exists('g:started_by_firenvim')
  packadd firenvim
endif"><pre><span>call</span> <span>minpac#add</span>(<span><span>'</span>glacambre/firenvim<span>'</span></span>, { <span><span>'</span>type<span>'</span></span>: <span><span>'</span>opt<span>'</span></span>, <span><span>'</span>do<span>'</span></span>: <span><span>'</span>packadd firenvim | call firenvim#install(0)<span>'</span></span>})
<span>if</span> <span>exists</span>(<span><span>'</span>g:started_by_firenvim<span>'</span></span>)
  <span>packadd</span> firenvim
<span>endif</span></pre></div>
</li>
<li>
<p dir="auto"><a href="https://github.com/VundleVim/Vundle.vim">vundle</a>, others</p>
<p dir="auto">Install the plugin as you usually would, then run this shell command:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ nvim --headless &quot;+call firenvim#install(0) | q&quot;"><pre>$ nvim --headless <span><span>"</span>+call firenvim#install(0) | q<span>"</span></span></pre></div>
</li>
</ul>
</li>
<li>
<p dir="auto">Install the Firenvim addon for your browser from <a href="https://addons.mozilla.org/en-US/firefox/addon/firenvim/" rel="nofollow">Mozilla's store</a> or <a href="https://chrome.google.com/webstore/detail/firenvim/egpjdkipkomnmjhjmdamaniclmdlobbo" rel="nofollow">Google's</a>.</p>
</li>
</ol>
<p dir="auto">If you would rather build and install Firenvim from source, check <a href="https://github.com/glacambre/firenvim/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Other browsers</h4><a id="user-content-other-browsers" aria-label="Permalink: Other browsers" href="#other-browsers"></a></p>
<p dir="auto">Other browsers aren't supported for now. Opera, Vivaldi and other Chromium-based browsers should however work just like in Chromium and have similar install steps. Brave, Edge, and Arc might work, Safari doesn't (it doesn't support Webextensions).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Permissions</h2><a id="user-content-permissions" aria-label="Permalink: Permissions" href="#permissions"></a></p>
<p dir="auto">Firenvim currently requires the following permissions for the following reasons:</p>
<ul dir="auto">
<li><a href="https://support.mozilla.org/en-US/kb/permission-request-messages-firefox-extensions?as=u&amp;utm_source=inproduct#w_access-your-data-for-all-websites" rel="nofollow">Access your data for all websites</a>: this is necessary in order to be able to append elements (= the neovim iframe) to the DOM.</li>
<li><a href="https://support.mozilla.org/en-US/kb/permission-request-messages-firefox-extensions?as=u#w_exchange-messages-with-programs-other-than-firefox" rel="nofollow">Exchange messages with programs other than Firefox</a>: this is necessary in order to be able to start neovim instances.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Configuring Firenvim</h2><a id="user-content-configuring-firenvim" aria-label="Permalink: Configuring Firenvim" href="#configuring-firenvim"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Manually triggering Firenvim</h3><a id="user-content-manually-triggering-firenvim" aria-label="Permalink: Manually triggering Firenvim" href="#manually-triggering-firenvim"></a></p>
<p dir="auto">You can configure the keybinding to manually trigger Firenvim (<code>&lt;C-e&gt;</code> by default) in <a href="https://support.mozilla.org/en-US/kb/manage-extension-shortcuts-firefox" rel="nofollow">the shortcuts menu in <code>about://addons</code></a> on Firefox, or in <code>chrome://extensions/shortcuts</code> on Chrome.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Temporarily disabling Firenvim in a tab</h3><a id="user-content-temporarily-disabling-firenvim-in-a-tab" aria-label="Permalink: Temporarily disabling Firenvim in a tab" href="#temporarily-disabling-firenvim-in-a-tab"></a></p>
<p dir="auto">Temporarily disabling (and re-enabling) Firenvim in a tab can be done either by clicking on the Firenvim button next to the urlbar or by configuring a browser shortcut (see the previous section to find out how browser shortcuts can be configured).</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building a Firenvim-specific config</h3><a id="user-content-building-a-firenvim-specific-config" aria-label="Permalink: Building a Firenvim-specific config" href="#building-a-firenvim-specific-config"></a></p>
<p dir="auto">Note: If you would prefer VimScript examples, you can consult the (outdated) readme from commit 132979166a02319f0b49815135e60a4e4599de91 or earlier.</p>
<p dir="auto"><strong>New</strong>: With Neovim nightly builds from 2023/02/17 or more recent, you can use <a href="https://neovim.io/doc/user/starting.html#$NVIM_APPNAME" rel="nofollow">$NVIM_APPNAME</a> to define a completely separate firenvim config. In order to do that, make sure "NVIM_APPNAME" is appropriately set when you run firenvim#install().</p>
<p dir="auto">When it starts Neovim, Firenvim sets the variable <code>g:started_by_firenvim</code> which you can check to run different code in your init.lua. For example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="if vim.g.started_by_firenvim == true then
  vim.o.laststatus = 0
else
  vim.o.laststatus = 2
end"><pre><span>if</span> <span>vim</span>.<span>g</span>.<span>started_by_firenvim</span> <span>==</span> <span>true</span> <span>then</span>
  <span>vim</span>.<span>o</span>.<span>laststatus</span> <span>=</span> <span>0</span>
<span>else</span>
  <span>vim</span>.<span>o</span>.<span>laststatus</span> <span>=</span> <span>2</span>
<span>end</span></pre></div>
<p dir="auto">Alternatively, you can detect when Firenvim connects to Neovim by using the <code>UIEnter</code> autocmd event:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'UIEnter'}, {
    callback = function(event)
        local client = vim.api.nvim_get_chan_info(vim.v.event.chan).client
        if client ~= nil and client.name == &quot;Firenvim&quot; then
            vim.o.laststatus = 0
        end
    end
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>UIEnter<span>'</span></span>}, {
    <span>callback</span> <span>=</span> <span>function</span>(<span>event</span>)
        <span>local</span> <span>client</span> <span>=</span> <span>vim</span>.<span>api</span>.<span>nvim_get_chan_info</span>(<span>vim</span>.<span>v</span>.<span>event</span>.<span>chan</span>).<span>client</span>
        <span>if</span> <span>client</span> <span>~=</span> <span>nil</span> <span>and</span> <span>client</span>.<span>name</span> <span>==</span> <span><span>"</span>Firenvim<span>" </span></span><span>then</span>
            <span>vim</span>.<span>o</span>.<span>laststatus</span> <span>=</span> <span>0</span>
        <span>end</span>
    <span>end</span>
})</pre></div>
<p dir="auto">Similarly, you can detect when Firenvim disconnects from a Neovim instance with the <code>UILeave</code> autocommand.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Using different settings depending on the url/page/element being edited</h3><a id="user-content-using-different-settings-depending-on-the-urlpageelement-being-edited" aria-label="Permalink: Using different settings depending on the url/page/element being edited" href="#using-different-settings-depending-on-the-urlpageelement-being-edited"></a></p>
<p dir="auto">The nvim buffer loaded into a textarea is given a unique name. All buffers are named something like this: <code>domainname_page_selector.txt</code> (see the <a href="https://github.com/glacambre/firenvim/blob/master/src/utils/utils.ts">toFileName function</a>).</p>
<p dir="auto">This alows you to configure different settings by creating autocommands targeting/matching the buffername for that url/page/element. For example, this will set file type to markdown for all GitHub buffers:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'BufEnter'}, {
    pattern = &quot;github.com_*.txt&quot;,
    command = &quot;set filetype=markdown&quot;
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>BufEnter<span>'</span></span>}, {
    <span>pattern</span> <span>=</span> <span><span>"</span>github.com_*.txt<span>"</span></span>,
    <span>command</span> <span>=</span> <span><span>"</span>set filetype=markdown<span>"</span></span>
})</pre></div>
<p dir="auto">To view the buffername of your nvim instance in a textarea, use <code>:buffers</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Understanding Firenvim's configuration object</h3><a id="user-content-understanding-firenvims-configuration-object" aria-label="Permalink: Understanding Firenvim's configuration object" href="#understanding-firenvims-configuration-object"></a></p>
<p dir="auto">You can configure everything else about Firenvim by creating a dictionary named <code>vim.g.firenvim_config</code> in your init.lua and setting the keys "globalSettings" and "localSettings". In the dictionary <code>vim.g.firenvim_config["localSettings"]</code> you can map Javascript patterns that match against the full URL to settings that are used for all URLs matched by that pattern. When multiple patterns match a URL, the pattern with the highest "priority" value is used. Here is an example (the settings and their possible values will be explained in the next subsections):</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    globalSettings = { alt = &quot;all&quot; },
    localSettings = {
        [&quot;.*&quot;] = {
            cmdline  = &quot;neovim&quot;,
            content  = &quot;text&quot;,
            priority = 0,
            selector = &quot;textarea&quot;,
            takeover = &quot;always&quot;
        }
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>globalSettings</span> <span>=</span> { <span>alt</span> <span>=</span> <span><span>"</span>all<span>" </span></span>},
    <span>localSettings</span> <span>=</span> {
        [<span><span>"</span>.*<span>"</span></span>] <span>=</span> {
            <span>cmdline</span>  <span>=</span> <span><span>"</span>neovim<span>"</span></span>,
            <span>content</span>  <span>=</span> <span><span>"</span>text<span>"</span></span>,
            <span>priority</span> <span>=</span> <span>0</span>,
            <span>selector</span> <span>=</span> <span><span>"</span>textarea<span>"</span></span>,
            <span>takeover</span> <span>=</span> <span><span>"</span>always<span>"</span></span>
        }
    }
}</pre></div>
<p dir="auto">With this configuration, <code>takeover</code> will be set to <code>always</code> on all websites. If we wanted to override this value on british websites, we could add the following lines to our init.vim. Notice how the priority of this new regex is higher than that of the <code>.*</code> regex:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings[&quot;https?://[^/]+\\.co\\.uk/&quot;] = { takeover = 'never', priority = 1 }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>"</span>https?://[^/]+<span>\\</span>.co<span>\\</span>.uk/<span>"</span></span>] <span>=</span> { <span>takeover</span> <span>=</span> <span><span>'</span>never<span>'</span></span>, <span>priority</span> <span>=</span> <span>1</span> }</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Configuring what elements Firenvim should appear on</h3><a id="user-content-configuring-what-elements-firenvim-should-appear-on" aria-label="Permalink: Configuring what elements Firenvim should appear on" href="#configuring-what-elements-firenvim-should-appear-on"></a></p>
<p dir="auto">The <code>selector</code> attribute of a localSetting controls what elements Firenvim automatically takes over. Here's the default value:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { selector = 'textarea:not([readonly], [aria-readonly]), div[role=&quot;textbox&quot;]' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>selector</span> <span>=</span> <span><span>'</span>textarea:not([readonly], [aria-readonly]), div[role="textbox"]<span>' </span></span>}</pre></div>
<p dir="auto">If you don't want to use Firenvim with rich text editors (e.g. Gmail, Outlook, Slack…) as a general rule, you might want to restrict Firenvim to simple textareas:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { selector = 'textarea' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>selector</span> <span>=</span> <span><span>'</span>textarea<span>' </span></span>}</pre></div>
<p dir="auto">Since <code>selector</code> is just a CSS selector, you have access to all of CSS's pseudo selectors, including <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:not" rel="nofollow"><code>:not()</code></a>, which allows you to exclude elements that have certain attributes, like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { selector = 'textarea:not([class=xxx])' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>selector</span> <span>=</span> <span><span>'</span>textarea:not([class=xxx])<span>' </span></span>}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Configuring Firenvim to not always take over elements</h3><a id="user-content-configuring-firenvim-to-not-always-take-over-elements" aria-label="Permalink: Configuring Firenvim to not always take over elements" href="#configuring-firenvim-to-not-always-take-over-elements"></a></p>
<p dir="auto">Firenvim has a setting named <code>takeover</code> that can be set to <code>always</code>, <code>empty</code>, <code>never</code>, <code>nonempty</code> or <code>once</code>. When set to <code>always</code>, Firenvim will always take over elements for you. When set to <code>empty</code>, Firenvim will only take over empty elements. When set to <code>never</code>, Firenvim will never automatically appear, thus forcing you to use a keyboard shortcut in order to make the Firenvim frame appear. When set to <code>nonempty</code>, Firenvim will only take over elements that aren't empty. When set to <code>once</code>, Firenvim will take over elements the first time you select them, which means that after <code>:q</code>'ing Firenvim, you'll have to use the keyboard shortcut to make it appear again. Here's how to use the <code>takeover</code> setting:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { takeover = 'always' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>takeover</span> <span>=</span> <span><span>'</span>always<span>' </span></span>}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Choosing a command line</h3><a id="user-content-choosing-a-command-line" aria-label="Permalink: Choosing a command line" href="#choosing-a-command-line"></a></p>
<p dir="auto">You can chose between neovim's built-in command line, firenvim's command line and no command line at all by setting the localSetting named <code>cmdline</code> to either <code>neovim</code>, <code>firenvim</code> or <code>none</code>, e.g.:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { cmdline = 'firenvim' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>cmdline</span> <span>=</span> <span><span>'</span>firenvim<span>' </span></span>}</pre></div>
<p dir="auto">Choosing <code>none</code> does not make sense unless you have alternative way to display the command line such as <a href="https://github.com/folke/noice.nvim">noice.nvim</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Editing HTML directly</h3><a id="user-content-editing-html-directly" aria-label="Permalink: Editing HTML directly" href="#editing-html-directly"></a></p>
<p dir="auto">The <code>content</code> localSetting controls how Firenvim should read the content of an element. Setting it to <code>html</code> will make Firenvim fetch the content of elements as HTML, <code>text</code> will make it use plaintext. The default value is <code>text</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config.localSettings['.*'] = { content = 'html' }"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span>.<span>localSettings</span>[<span><span>'</span>.*<span>'</span></span>] <span>=</span> { <span>content</span> <span>=</span> <span><span>'</span>html<span>' </span></span>}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Special characters on MacOS</h3><a id="user-content-special-characters-on-macos" aria-label="Permalink: Special characters on MacOS" href="#special-characters-on-macos"></a></p>
<p dir="auto">On MacOS, the default keyboard layouts emit special characters when the alt (i.e. option) key is held down. From the perspective of the browser, these special characters replace the underlying "main" character of a keystroke event while retaining the modifier. For example, in the standard US layout the key chord alt-o is received in the browser as alt-ø rather than alt-o. Further, certain alt-chords represent "dead keys", which apply a diacritic to the next character entered. Pressing alt-e followed by a produces the single character "á" while alt-u followed by a produces "ä". To produce this behavior, diacritic-mapped strokes like alt-e and alt-u are themselves mapped to a <a href="https://en.wikipedia.org/wiki/Dead_key" rel="nofollow">"Dead key" character</a>.</p>
<p dir="auto">These behaviors complicate the support of special character and alt/meta (A- or M-) vim mappings on MacOS in two ways:</p>
<ol dir="auto">
<li>
<p dir="auto">There is no way to generate unmodified special character key events. For example, since the only way to generate the character "ø" via the keyboard is by holding down alt, any key event with the "ø" character will also have an alt modifier. If we forward this directly to Vim, it will be received as <code>&lt;M-ø&gt;</code>.</p>
</li>
<li>
<p dir="auto">There is no way to generate alt-modified plain alphanumeric characters. For example, an <code>&lt;M-o&gt;</code> mapping won't work because pressing alt-o generates <code>&lt;M-ø&gt;</code> rather than <code>&lt;M-o&gt;</code>.</p>
</li>
</ol>
<p dir="auto">Terminal and standalone GUI applications can solve these problems by changing the interpretation of the alt key at the application level. <code>Terminal.app</code> and <code>iTerm2</code>, for instance, both provide a "use Option as Meta key" preference that converts incoming alt-chords at the application level. Firenvim, however, is a browser extension that operates off of browser keystroke events rather than application-level events. At present, we are unsure how to implement this "use option as meta" functionality at the browser event level (help here is welcome!). However, there are some workarounds.</p>
<p dir="auto">For problem (1), Firenvim will by default drop the alt key on MacOS for any special character, defined here as non-alphanumeric (not matching <code>/[a-zA-Z0-9]/</code>). This means alt-o will be forwarded to NeoVim as "ø" rather than "M-ø". Note that this behavior can be changed by setting the <code>alt</code> setting of the <code>globalSettings</code> configuration to <code>all</code>, like this:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Making Firenvim ignore keys</h3><a id="user-content-making-firenvim-ignore-keys" aria-label="Permalink: Making Firenvim ignore keys" href="#making-firenvim-ignore-keys"></a></p>
<p dir="auto">You can make Firenvim ignore key presses (thus letting the browser handle them) by setting key-value pairs in <code>globalSettings.ignoreKeys</code>. The key needs to be the neovim mode the key press should be ignored in and the value should be an array containing the textual representation of the key press you want ignored. If you want to ignore a key press in all modes, you can use <code>all</code> as mode key.</p>
<p dir="auto">For example, if you want to make Firenvim ignore <code>&lt;C-1&gt;</code> and <code>&lt;C-2&gt;</code> in normal mode and <code>&lt;C--&gt;</code> in all modes to let your browser handle them, you should define ignoreKeys like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    globalSettings = {
        ignoreKeys = {
            all = { '<C-->' },
            normal = { '<C-1>', '<C-2>' }
        }
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>globalSettings</span> <span>=</span> {
        <span>ignoreKeys</span> <span>=</span> {
            <span>all</span> <span>=</span> { <span><span>'</span>&lt;C--&gt;<span>' </span></span>},
            <span>normal</span> <span>=</span> { <span><span>'</span>&lt;C-1&gt;<span>'</span></span>, <span><span>'</span>&lt;C-2&gt;<span>' </span></span>}
        }
    }
}</pre></div>
<p dir="auto">Mode names are defined in <a href="https://github.com/neovim/neovim/blob/master/src/nvim/cursor_shape.c">Neovim's cursor_shape.c</a>. Note that if the key press contains multiple modifiers, Shift needs to be first, Alt second, Control third and OS/Meta last (e.g. <code>Ctrl+Alt+Shift+1</code> needs to be <code>&lt;SAC-1&gt;</code>). If your keyboard layout requires you to press shift in order to press numbers, shift should be present in the key representation (e.g. on french azerty keyboards, <code>&lt;C-1&gt;</code> should actually be <code>&lt;SC-1&gt;</code>).</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Interacting with the page</h3><a id="user-content-interacting-with-the-page" aria-label="Permalink: Interacting with the page" href="#interacting-with-the-page"></a></p>
<p dir="auto">You can execute javascript in the page by using <code>firenvim#eval_js</code>. The code has to be a valid javascript expression (NOT a statement). You can provide the name of a function that should be executed with the result of the expression. Note that some pages prevent evaluating JavaScript with their <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" rel="nofollow">CSP</a> and this can't be worked around. Here's an example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.fn['firenvim#eval_js']('alert(&quot;Hello World!&quot;)', 'MyFunction')"><pre><span>vim</span>.<span>fn</span>[<span><span>'</span>firenvim#eval_js<span>'</span></span>](<span><span>'</span>alert("Hello World!")<span>'</span></span>, <span><span>'</span>MyFunction<span>'</span></span>)</pre></div>
<p dir="auto">You can move focus from the editor back to the page or the input field by calling <code>firenvim#focus_page</code> or <code>firenvim#focus_input</code>. Here's an example that does exactly this if you press <code>&lt;Esc&gt;</code> twice while in normal mode:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_set_keymap(&quot;n&quot;, &quot;<Esc><Esc>&quot;, &quot;<Cmd>call firenvim#focus_page()<CR>&quot;, {})"><pre><span>vim</span>.<span>api</span>.<span>nvim_set_keymap</span>(<span><span>"</span>n<span>"</span></span>, <span><span>"</span>&lt;Esc&gt;&lt;Esc&gt;<span>"</span></span>, <span><span>"</span>&lt;Cmd&gt;call firenvim#focus_page()&lt;CR&gt;<span>"</span></span>, {})</pre></div>
<p dir="auto">There is also a function named <code>firenvim#hide_frame()</code> which will temporarily hide the Firenvim frame. You will then be able to bring the neovim frame back either by unfocusing and refocusing the textarea or by using the <a href="https://github.com/glacambre/firenvim#manually-triggering-firenvim">keybinding to manually trigger Firenvim</a>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_set_keymap(&quot;n&quot;, &quot;<C-z>&quot;, &quot;<Cmd>call firenvim#hide_frame()<CR>&quot;, {})"><pre><span>vim</span>.<span>api</span>.<span>nvim_set_keymap</span>(<span><span>"</span>n<span>"</span></span>, <span><span>"</span>&lt;C-z&gt;<span>"</span></span>, <span><span>"</span>&lt;Cmd&gt;call firenvim#hide_frame()&lt;CR&gt;<span>"</span></span>, {})</pre></div>
<p dir="auto">A function named <code>firenvim#press_keys()</code> will allow you to send key events to the underlying input field by taking a list of vim-like keys (e.g. <code>a</code>, <code>&lt;CR&gt;</code>, <code>&lt;Space&gt;</code>…) as argument. Note that this only "triggers" an event, it does not add text to the input field. For example if you'd like firenvim to send <code>&lt;CR&gt;</code> to the webpage when you press <code>&lt;CR&gt;</code> in the editor, you can use the following mapping which is useful with chat apps:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'BufEnter', {
    pattern = &quot;riot.im_*&quot;,
    command = [[inoremap <CR> <Esc>:w<CR>:call firenvim#press_keys(&quot;<LT>CR>&quot;)<CR>ggdGa]],
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>BufEnter<span>'</span></span>, {
    <span>pattern</span> <span>=</span> <span><span>"</span>riot.im_*<span>"</span></span>,
    <span>command</span> <span>=</span> <span><span>[[</span>inoremap &lt;CR&gt; &lt;Esc&gt;:w&lt;CR&gt;:call firenvim#press_keys("&lt;LT&gt;CR&gt;")&lt;CR&gt;ggdGa<span>]]</span></span>,
})</pre></div>
<p dir="auto">Note that our goal is to make the mapping type <code>firenvim#press_keys("&lt;CR&gt;")</code> in vim's command prompt and then execute it. Since we want the keys <code>&lt;CR&gt;</code> to be typed and not <kbd>Enter</kbd> to be pressed, we can't use <code>&lt;CR&gt;</code> because it would be interpreted by <code>inoremap</code>. Hence we use <code>&lt;LT&gt;CR&gt;</code> in order to type the keys <code>&lt;CR&gt;</code>. Similarly, if you want to type the keys <code>&lt;C-CR&gt;</code> you'd use <code>&lt;LT&gt;C-CR&gt;</code>.</p>
<p dir="auto">Known Issues: some websites do not react to <code>firenvim#press_keys</code> (e.g. Slack).</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Automatically syncing changes to the page</h3><a id="user-content-automatically-syncing-changes-to-the-page" aria-label="Permalink: Automatically syncing changes to the page" href="#automatically-syncing-changes-to-the-page"></a></p>
<p dir="auto">Since Firenvim simply uses the BufWrite event in order to detect when it needs to write neovim's buffers to the page, Firenvim can be made to automatically synchronize all changes like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'TextChanged', 'TextChangedI'}, {
    nested = true,
    command = &quot;write&quot;
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>TextChanged<span>'</span></span>, <span><span>'</span>TextChangedI<span>'</span></span>}, {
    <span>nested</span> <span>=</span> <span>true</span>,
    <span>command</span> <span>=</span> <span><span>"</span>write<span>"</span></span>
})</pre></div>
<p dir="auto">Depending on how large the edited buffer is, this could be a little slow. This more sophisticated approach will throttle writes:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.api.nvim_create_autocmd({'TextChanged', 'TextChangedI'}, {
    callback = function(e)
        if vim.g.timer_started == true then
            return
        end
        vim.g.timer_started = true
        vim.fn.timer_start(10000, function()
            vim.g.timer_started = false
            vim.cmd('silent write')
        end)
    end
})"><pre><span>vim</span>.<span>api</span>.<span>nvim_create_autocmd</span>({<span><span>'</span>TextChanged<span>'</span></span>, <span><span>'</span>TextChangedI<span>'</span></span>}, {
    <span>callback</span> <span>=</span> <span>function</span>(<span>e</span>)
        <span>if</span> <span>vim</span>.<span>g</span>.<span>timer_started</span> <span>==</span> <span>true</span> <span>then</span>
            <span>return</span>
        <span>end</span>
        <span>vim</span>.<span>g</span>.<span>timer_started</span> <span>=</span> <span>true</span>
        <span>vim</span>.<span>fn</span>.<span>timer_start</span>(<span>10000</span>, <span>function</span>()
            <span>vim</span>.<span>g</span>.<span>timer_started</span> <span>=</span> <span>false</span>
            <span>vim</span>.<span>cmd</span>(<span><span>'</span>silent write<span>'</span></span>)
        <span>end</span>)
    <span>end</span>
})</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Configuring message timeout</h3><a id="user-content-configuring-message-timeout" aria-label="Permalink: Configuring message timeout" href="#configuring-message-timeout"></a></p>
<p dir="auto">Due to space constraints, the external command line covers part of the buffer. This can be a problem as sometimes neovim will send a message that tells Firenvim to draw the command line, and then never send the message to tell Firenvim to stop displaying it. In order to work around this problem, a "cmdlineTimeout" configuration option has been implemented, which makes Firenvim hide the external command line after the cursor has moved and some amount of milliseconds have passed:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    globalSettings = {
        cmdlineTimeout = 3000
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>globalSettings</span> <span>=</span> {
        <span>cmdlineTimeout</span> <span>=</span> <span>3000</span>
    }
}</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Configuring the filename</h3><a id="user-content-configuring-the-filename" aria-label="Permalink: Configuring the filename" href="#configuring-the-filename"></a></p>
<p dir="auto">It is possible to configure the name of the file used by Firenvim with the <code>filename</code> localSetting. This setting is a format string where each element in curly braces will be replaced with a value and where the maximum length can be specified with a percentage. Possible format elements are <code>hostname</code> (= the domain name of the website), <code>pathname</code> (= the path of the page), <code>selector</code> (= the CSS selector of the text area), <code>timestamp</code> (= the current date) and <code>extension</code> (the language extension when using Firenvim on a code editor or <code>txt</code> otherwise). For example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    localSettings = {
        ['.*'] = {
            filename = '/tmp/{hostname}_{pathname%10}.{extension}'
        }
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>localSettings</span> <span>=</span> {
        [<span><span>'</span>.*<span>'</span></span>] <span>=</span> {
            <span>filename</span> <span>=</span> <span><span>'</span>/tmp/{hostname}_{pathname%10}.{extension}<span>'</span></span>
        }
    }
}</pre></div>
<p dir="auto">Will result in Firenvim using <code>/tmp/github.com_issues-new.txt</code> on Github's new issue page. The default value of this setting is <code>{hostname%32}_{pathname%32}_{selector%32}_{timestamp%32}.{extension}</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Drawbacks</h2><a id="user-content-drawbacks" aria-label="Permalink: Drawbacks" href="#drawbacks"></a></p>
<p dir="auto">Some keybindings, such as <code>&lt;C-n&gt;</code>, <code>&lt;C-t&gt;</code> and <code>&lt;C-w&gt;</code> are not overridable through usual means. This means that you have to tell your browser to let Firenvim override them by using <a href="https://support.mozilla.org/en-US/kb/manage-extension-shortcuts-firefox" rel="nofollow">the shortcuts menu in <code>about://addons</code></a> on Firefox and <code>chrome://extensions/shortcuts</code> in Chrome.</p>
<p dir="auto">When it is possible to do so, if you press one of these keyboard shortcuts while not in a Firenvim frame, Firenvim will attempt to emulate the expected behavior of the shortcut. For example, pressing <code>&lt;C-w&gt;</code> in a Firenvim frame will tell neovim you pressed <code>&lt;C-w&gt;</code>, but outside of it it will tell the browser to close the current tab.</p>
<p dir="auto">Controlling whether Firenvim should attempt to emulate the browser's default behavior can be done with global settings. The following snippet will tell Firenvim to simulate <code>&lt;C-n&gt;</code>'s default behavior while never simulating <code>&lt;C-w&gt;</code>'s:</p>
<div dir="auto" data-snippet-clipboard-copy-content="vim.g.firenvim_config = {
    globalSettings = {
      ['<C-w>'] = 'noop',
      ['<C-n>'] = 'default'
    }
}"><pre><span>vim</span>.<span>g</span>.<span>firenvim_config</span> <span>=</span> {
    <span>globalSettings</span> <span>=</span> {
      [<span><span>'</span>&lt;C-w&gt;<span>'</span></span>] <span>=</span> <span><span>'</span>noop<span>'</span></span>,
      [<span><span>'</span>&lt;C-n&gt;<span>'</span></span>] <span>=</span> <span><span>'</span>default<span>'</span></span>
    }
}</pre></div>
<p dir="auto">Note that on Firefox on Linux some keyboard shortcuts might not be overridable. I circumvent this issue by running a <a href="https://github.com/glacambre/firefox-patches">patched</a> version of Firefox (note: once Firefox is patched, you won't need to setup webextension keyboard shortcuts).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">You might also like</h2><a id="user-content-you-might-also-like" aria-label="Permalink: You might also like" href="#you-might-also-like"></a></p>
<ul dir="auto">
<li><a href="https://github.com/tridactyl/tridactyl">Tridactyl</a>, provides vim-like keybindings to use Firefox. Also lets you edit input fields and text areas in your favourite editor with its <code>:editor</code> command.</li>
<li><a href="https://github.com/GhostText/GhostText">GhostText</a>, lets you edit text areas in your editor with a single click. Requires installing a plugin in your editor too. Features live updates!</li>
<li><a href="https://github.com/jlebon/textern">Textern</a>, a Firefox addon that lets you edit text areas in your editor without requiring you to install a plugin in your editor.</li>
<li><a href="https://github.com/asamuzaK/withExEditor">withExEditor</a>, same thing as Textern, except you can also edit/view a page's source with your editor.</li>
</ul>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>