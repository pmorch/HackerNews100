<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 26 Oct 2025 11:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[What If Tariffs? (148 pts)]]></title>
            <link>https://www.swatch.com/en-en/what-if-tariffs-so34z106/SO34Z106.html</link>
            <guid>45710021</guid>
            <pubDate>Sun, 26 Oct 2025 08:23:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.swatch.com/en-en/what-if-tariffs-so34z106/SO34Z106.html">https://www.swatch.com/en-en/what-if-tariffs-so34z106/SO34Z106.html</a>, See on <a href="https://news.ycombinator.com/item?id=45710021">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget="lazyLoad">































<header role="banner" data-widget="contextLoader" data-context="header" data-init-on-load="true" data-animation="error-page-header">

    





    

    








    <div data-ref="dialog" data-widget="menuPanel" data-event-click="closeOnBackdrop">
                
                <div data-animation="error-page-block" data-ref="desktopUtilityComponents">
                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" focusable="false">
    <title>Logo</title>
    <defs>
        <filter id="shadow">
            
                
                <feColorMatrix type="matrix" values="0 0 0 0  0 0 0 0 0  0 0 0 0 0  0 0 0 0 1 0"></feColorMatrix>
            
        </filter>
        <filter id="shadow-white">
            
                
                <feColorMatrix type="matrix" values="255 255 255 0  0 255 255 255 0  0 255 255 255 0  0 0 0 0 1 0"></feColorMatrix>
            
        </filter>
    </defs>
</svg>

                    







<div>

            
                


            

            
                


            

            
<ul data-ref="utility-right">
    
        <li>
            <span></span>
            <a href="https://www.swatch.com/customer-service/">
                Customer service
            </a>
        </li>
    
    
        <li>
            <span></span>
            <a href="https://www.swatch.com/en-en/swatch-club.html">
                Swatch Club
            </a>
        </li>
    
    
        <li>
            <span></span>
            <a href="https://www.swatch.com/en-en/stores">
                
                Find a store
                
            </a>
        </li>
    

    






    <li data-widget="langSwitcher" data-multiple-lang-switches="false" data-multiple-lang-switches-popup-url="/en-en/country-selector-lang-switches-popup.html" data-brand="swatch" data-id-hash="833976d6-43a5-82e2" data-url="/on/demandware.store/Sites-swarp-INT-Site/en/Page-SetLocale">
        <span></span>
        <a data-event-click="openSwitcher" href="#" title="English">
            English
        </a>

        
            <div data-ref="switcher">
<h3>
Select your country or region

</h3>
<div data-id-hash="4069eda2-4dfe-9789" data-widget="countrySelectorTabs" data-active-panel="Europe-4069eda2-4dfe-9789">
<div role="navigation">
<ul>

<li data-event-keyup="handleKeyup">
<p>
Europe
</p>
</li>

<li data-event-keyup="handleKeyup">
<p>
America
</p>
</li>

<li data-event-keyup="handleKeyup">
<p>
Middle East &amp; Africa
</p>
</li>

<li data-event-keyup="handleKeyup">
<p>
Pacific &amp; Asia
</p>
</li>

</ul>
</div>
<div>

<p><span data-id="button-accordion-Europe-4069eda2-4dfe-9789" data-widget="button" data-panel-name="Europe-4069eda2-4dfe-9789" data-widget-event-click="handleTabClick" data-event-click.prevent="handleClick">
Europe
</span>
<span data-widget="button" data-panel-name="Europe-4069eda2-4dfe-9789" data-widget-event-click="activateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconExpand_Europe-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
        <line x1="8.5" y1="0.5" x2="8.5" y2="15.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
<span data-widget="button" data-panel-name="Europe-4069eda2-4dfe-9789" data-widget-event-click="deactivateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconCollapse_Europe-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
</p>
<div id="Europe-4069eda2-4dfe-9789" data-widget="countrySelectorTabPanel" data-url="/on/demandware.store/Sites-swarp-INT-Site/en/Page-SetLocale" data-brand="swatch" data-classes-active="m-active">
<ul>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>
<div data-code="CH">
    

    <p><span>
        Switzerland
    </span>

    
        <span>
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="de_CH" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="de" data-gtm-selected-language="en" data-gtm-country="CH" data-gtm-selected-country="INT" data-gtm-country-code="CH" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    de
                </span>

                
                    <span arial-hidden="true">|</span>
                
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="fr_CH" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="fr" data-gtm-selected-language="en" data-gtm-country="CH" data-gtm-selected-country="INT" data-gtm-country-code="CH" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    fr
                </span>

                
                    <span arial-hidden="true">|</span>
                
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="it_CH" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="it" data-gtm-selected-language="en" data-gtm-country="CH" data-gtm-selected-country="INT" data-gtm-country-code="CH" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    it
                </span>

                
                    <span arial-hidden="true">|</span>
                
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="en_CH" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="en" data-gtm-selected-language="en" data-gtm-country="CH" data-gtm-selected-country="INT" data-gtm-country-code="CH" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    en
                </span>

                
            
        </span>
    
</p></div>

</li>

<li>


</li>

<li>


</li>

</ul>
</div>

<p><span data-id="button-accordion-America-4069eda2-4dfe-9789" data-widget="button" data-panel-name="America-4069eda2-4dfe-9789" data-widget-event-click="handleTabClick" data-event-click.prevent="handleClick">
America
</span>
<span data-widget="button" data-panel-name="America-4069eda2-4dfe-9789" data-widget-event-click="activateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconExpand_America-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
        <line x1="8.5" y1="0.5" x2="8.5" y2="15.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
<span data-widget="button" data-panel-name="America-4069eda2-4dfe-9789" data-widget-event-click="deactivateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconCollapse_America-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
</p>


<p><span data-id="button-accordion-MiddleEastAndAfrica-4069eda2-4dfe-9789" data-widget="button" data-panel-name="MiddleEastAndAfrica-4069eda2-4dfe-9789" data-widget-event-click="handleTabClick" data-event-click.prevent="handleClick">
Middle East &amp; Africa
</span>
<span data-widget="button" data-panel-name="MiddleEastAndAfrica-4069eda2-4dfe-9789" data-widget-event-click="activateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconExpand_MiddleEastAndAfrica-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
        <line x1="8.5" y1="0.5" x2="8.5" y2="15.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
<span data-widget="button" data-panel-name="MiddleEastAndAfrica-4069eda2-4dfe-9789" data-widget-event-click="deactivateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconCollapse_MiddleEastAndAfrica-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
</p>


<p><span data-id="button-accordion-PacificAndAsia-4069eda2-4dfe-9789" data-widget="button" data-panel-name="PacificAndAsia-4069eda2-4dfe-9789" data-widget-event-click="handleTabClick" data-event-click.prevent="handleClick">
Pacific &amp; Asia
</span>
<span data-widget="button" data-panel-name="PacificAndAsia-4069eda2-4dfe-9789" data-widget-event-click="activateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconExpand_PacificAndAsia-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
        <line x1="8.5" y1="0.5" x2="8.5" y2="15.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
<span data-widget="button" data-panel-name="PacificAndAsia-4069eda2-4dfe-9789" data-widget-event-click="deactivateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconCollapse_PacificAndAsia-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
</p>
<div id="PacificAndAsia-4069eda2-4dfe-9789" data-widget="countrySelectorTabPanel" data-url="/on/demandware.store/Sites-swarp-INT-Site/en/Page-SetLocale" data-brand="swatch" data-classes-active="m-active">
<ul>

<li>


</li>

<li>


</li>

<li>
<div data-code="HK">
    

    <p><span>
        Hong Kong SAR (香港特别行政区)
    </span>

    
        <span>
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="zh_HK" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="zh" data-gtm-selected-language="en" data-gtm-country="HK" data-gtm-selected-country="INT" data-gtm-country-code="HK" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    zh
                </span>

                
                    <span arial-hidden="true">|</span>
                
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="en_HK" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="en" data-gtm-selected-language="en" data-gtm-country="HK" data-gtm-selected-country="INT" data-gtm-country-code="HK" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    en
                </span>

                
            
        </span>
    
</p></div>

</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

</ul>
</div>

</div>
</div>
</div>

            
        
    </li>

    <li data-widget="countrySelectorModal" data-id="countrySelectorModal" data-brand="swatch" data-id-hash="833976d6-43a5-82e2" data-url="/on/demandware.store/Sites-swarp-INT-Site/en/Page-CountrySelectorTabs?brand=swatch" data-hide-only-dialog="true">
        <span></span>

        <a data-event-click.prevent="showModal" href="#" title="English">
            <span>eng</span>
            <span>INT</span>

            
                <span>
                    <svg width="15" height="15" viewBox="0 0 15 15" xmlns="http://www.w3.org/2000/svg">
                        <title>INT</title>
                        <path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M7 1.01894C6.88719 1.02753 6.77518 1.03899 6.66405 1.05326C5.93592 1.83863 5.3482 2.68245 4.91192 3.56622C5.64785 3.65754 6.33408 3.71458 7 3.73792V1.01894ZM5.00424 1.4964C4.55624 2.11065 4.17774 2.75403 3.87449 3.42036C3.47392 3.35797 3.05701 3.28665 2.61991 3.20631C3.26928 2.46883 4.08319 1.87972 5.00424 1.4964ZM3.49779 4.37313C3.00857 4.2942 2.49774 4.203 1.95928 4.09965C1.433 4.95538 1.0994 5.94231 1.01894 7H3.00784C3.04476 6.10155 3.2117 5.22203 3.49779 4.37313ZM3.02054 8H1.01894C1.09878 9.04951 1.42786 10.0294 1.94711 10.8805C2.47523 10.7619 3.0107 10.66 3.55032 10.5748C3.25212 9.71633 3.0773 8.85477 3.02054 8ZM4.02309 8H7V10.2592C6.18978 10.2804 5.3738 10.3391 4.56266 10.4351C4.25909 9.61621 4.08277 8.80107 4.02309 8ZM7 7H4.00879C4.0477 6.15646 4.21562 5.32622 4.50491 4.52207C5.38585 4.63947 6.20361 4.71189 7 4.73849V7ZM8 8V10.252C8.84416 10.2622 9.67715 10.3137 10.4867 10.4067C10.7326 9.59245 10.875 8.78864 10.9228 8H8ZM10.933 7H8V4.74763C8.8337 4.73468 9.65886 4.66987 10.5257 4.55418C10.7611 5.35093 10.8995 6.16818 10.933 7ZM11.9245 8C11.8783 8.83985 11.7349 9.68991 11.4885 10.5451C12.0276 10.6326 12.5533 10.7395 13.0618 10.8659C13.5759 10.0182 13.9017 9.04352 13.9811 8H11.9245ZM13.9811 7H11.9338C11.9013 6.1134 11.761 5.24552 11.5228 4.40234C12.0106 4.31947 12.5161 4.22193 13.047 4.10987C13.5697 4.96323 13.9009 5.94652 13.9811 7ZM11.2053 3.44155C11.5879 3.37853 11.983 3.30576 12.3949 3.22317C11.8306 2.57791 11.1409 2.04521 10.3637 1.66318C10.6929 2.23961 10.9748 2.83321 11.2053 3.44155ZM8 3.74751C8.71979 3.73574 9.43659 3.68325 10.1896 3.5893C9.84931 2.74321 9.39838 1.92415 8.84676 1.1397C8.57056 1.0815 8.2879 1.04085 8 1.01894V3.74751ZM7 11.2595C6.32817 11.2778 5.65151 11.3229 4.97676 11.3948C5.39873 12.2505 5.9637 13.1059 6.68369 13.9492C6.78837 13.9624 6.89383 13.973 7 13.9811V11.2595ZM2.5941 11.7642C3.03667 11.6733 3.48368 11.5945 3.9331 11.5278C4.24256 12.2053 4.63076 12.8786 5.10037 13.5427C4.12745 13.156 3.27001 12.5412 2.5941 11.7642ZM8 11.2521C8.72827 11.2612 9.44674 11.3024 10.1466 11.3754C9.81726 12.198 9.3807 13.0291 8.82796 13.8642C8.55774 13.9203 8.28137 13.9597 8 13.9811V11.2521ZM11.1683 11.507C10.9345 12.126 10.6459 12.7468 10.3004 13.3675C11.1171 12.977 11.8396 12.4209 12.4244 11.7428C12.0163 11.6515 11.5969 11.5729 11.1683 11.507ZM9.40956 14.7867L9.37628 14.7634C8.77661 14.9178 8.1479 15 7.5 15C3.35786 15 0 11.6421 0 7.5C0 3.35786 3.35786 0 7.5 0C8.14113 0 8.76348 0.0804471 9.35749 0.231798L9.39995 0.199951L9.43974 0.253256C12.6416 1.10814 15 4.02866 15 7.5C15 10.9724 12.6403 13.8936 9.43691 14.7475L9.40956 14.7867Z"></path>
                    </svg>
                </span>
            
        </a>

        
        

        
    </li>


</ul>


            
        </div>

                </div>

                
                

                
                <div data-ref="mobileNavigationComponents">
    <nav aria-label="Main menu" itemscope="" itemtype="http://www.schema.org/SiteNavigationElement">
        <ul data-animation="error-page-block" role="menubar" aria-label="Main categories" data-event-keydown="handleKeydown" data-widget="menuBar">
            
                
                    
                    
                    
                    

                    <li role="menuitem" data-id="menuitem-new-arrivals" data-widget="menuItem" data-event-mouseenter="handleMouseEnter" data-event-mouseleave="handleMouseLeave">
                        <a data-widget="gtmButton" data-event-click="handleClick" data-widget-event-click="handleClick" data-ref="category-link" aria-label="New arrivals" itemprop="url" href="https://www.swatch.com/en-en/watches/new-watch-releases/" data-gtm-event="datalayer.navigation.top.menu.invoke" data-menu-item="New arrivals" data-menu-path="New arrivals">
                            <span itemprop="name">New arrivals</span>
                        </a>

                        
                        
                    </li>
                
                    
                    
                    
                    
                        
                    
                        
                    
                        
                    
                        
                    
                        
                    
                        
                            
                        
                    

                    <li role="menuitem" data-id="menuitem-watches" data-widget="menuItem" data-event-mouseenter="handleMouseEnter" data-event-mouseleave="handleMouseLeave">
                        <a data-widget="gtmButton" data-event-click="handleClick" data-widget-event-click="handleClick" data-ref="category-link" aria-label="Watches" itemprop="url" href="https://www.swatch.com/en-en/watches/" data-gtm-event="datalayer.navigation.top.menu.invoke" data-menu-item="Watches" data-menu-path="Watches">
                            <span itemprop="name">Watches</span>
                        </a>

                        
                        
                            
                        
                    </li>
                
                    
                    
                    
                    
                        
                    
                        
                    
                        
                            
                        
                    

                    <li role="menuitem" data-id="menuitem-moonswatch" data-widget="menuItem" data-event-mouseenter="handleMouseEnter" data-event-mouseleave="handleMouseLeave">
                        <a data-widget="gtmButton" data-event-click="handleClick" data-widget-event-click="handleClick" data-ref="category-link" aria-label="MOONSWATCH" itemprop="url" href="https://www.swatch.com/en-en/bioceramic-moonswatch-collection.html" data-gtm-event="datalayer.navigation.top.menu.invoke" data-menu-item="MOONSWATCH" data-menu-path="MOONSWATCH">
                            <span itemprop="name">MOONSWATCH</span>
                        </a>

                        
                        
                            
                        
                    </li>
                
                    
                    
                    
                    
                        
                    
                        
                    
                        
                            
                        
                    

                    <li role="menuitem" data-id="menuitem-scuba50fathoms" data-widget="menuItem" data-event-mouseenter="handleMouseEnter" data-event-mouseleave="handleMouseLeave">
                        <a data-widget="gtmButton" data-event-click="handleClick" data-widget-event-click="handleClick" data-ref="category-link" aria-label="SCUBA FIFTY FATHOMS" itemprop="url" href="https://www.swatch.com/en-en/bioceramic-scuba-fifty-fathoms.html" data-gtm-event="datalayer.navigation.top.menu.invoke" data-menu-item="SCUBA FIFTY FATHOMS" data-menu-path="SCUBA FIFTY FATHOMS">
                            <span itemprop="name">SCUBA FIFTY FATHOMS</span>
                        </a>

                        
                        
                            
                        
                    </li>
                
                    
                    
                    
                    

                    <li role="menuitem" data-id="menuitem-swatch-finder" data-widget="menuItem" data-event-mouseenter="handleMouseEnter" data-event-mouseleave="handleMouseLeave">
                        <a data-widget="gtmButton" data-event-click="handleClick" data-widget-event-click="handleClick" data-ref="category-link" aria-label="Swatch Finder" itemprop="url" href="https://www.swatch.com/en-en/swatch-finder/" data-gtm-event="datalayer.navigation.top.menu.invoke" data-menu-item="Swatch Finder" data-menu-path="Swatch Finder">
                            <span itemprop="name">Swatch Finder</span>
                        </a>

                        
                        
                    </li>
                
                    
                    
                    
                    
                        
                    
                        
                    
                        
                    
                        
                    
                        
                            
                        
                    

                    <li role="menuitem" data-id="menuitem-swatch" data-widget="menuItem" data-event-mouseenter="handleMouseEnter" data-event-mouseleave="handleMouseLeave">
                        <a data-widget="gtmButton" data-event-click="handleClick" data-widget-event-click="handleClick" data-ref="category-link" aria-label="OUR WORLD" itemprop="url" href="https://www.swatch.com/en-en/our-world.html" data-gtm-event="datalayer.navigation.top.menu.invoke" data-menu-item="OUR WORLD" data-menu-path="OUR WORLD">
                            <span itemprop="name">OUR WORLD</span>
                        </a>

                        
                        
                            
                        
                    </li>
                
            
        </ul>
    </nav>
</div>

                
                <div data-ref="mobileUtilityComponents">

            

            

            
<ul data-ref="utility-right">
    
        <li>
            <span></span>
            <a href="https://www.swatch.com/customer-service/">
                Customer service
            </a>
        </li>
    
    
        <li>
            <span></span>
            <a href="https://www.swatch.com/en-en/swatch-club.html">
                Swatch Club
            </a>
        </li>
    
    
        <li>
            <span></span>
            <a href="https://www.swatch.com/en-en/stores">
                
                Find a store
                
            </a>
        </li>
    

    






    <li data-widget="langSwitcher" data-multiple-lang-switches="false" data-multiple-lang-switches-popup-url="/en-en/country-selector-lang-switches-popup.html" data-brand="swatch" data-id-hash="0c2c9ff8-41d5-9381" data-url="/on/demandware.store/Sites-swarp-INT-Site/en/Page-SetLocale">
        <span></span>
        <a data-event-click="openSwitcher" href="#" title="English">
            English
        </a>

        
            <div data-ref="switcher">
<h3>
Select your country or region

</h3>
<div data-id-hash="4069eda2-4dfe-9789" data-widget="countrySelectorTabs" data-active-panel="Europe-4069eda2-4dfe-9789">
<div role="navigation">
<ul>

<li data-event-keyup="handleKeyup">
<p>
Europe
</p>
</li>

<li data-event-keyup="handleKeyup">
<p>
America
</p>
</li>

<li data-event-keyup="handleKeyup">
<p>
Middle East &amp; Africa
</p>
</li>

<li data-event-keyup="handleKeyup">
<p>
Pacific &amp; Asia
</p>
</li>

</ul>
</div>
<div>

<p><span data-id="button-accordion-Europe-4069eda2-4dfe-9789" data-widget="button" data-panel-name="Europe-4069eda2-4dfe-9789" data-widget-event-click="handleTabClick" data-event-click.prevent="handleClick">
Europe
</span>
<span data-widget="button" data-panel-name="Europe-4069eda2-4dfe-9789" data-widget-event-click="activateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconExpand_Europe-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
        <line x1="8.5" y1="0.5" x2="8.5" y2="15.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
<span data-widget="button" data-panel-name="Europe-4069eda2-4dfe-9789" data-widget-event-click="deactivateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconCollapse_Europe-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
</p>
<div id="Europe-4069eda2-4dfe-9789" data-widget="countrySelectorTabPanel" data-url="/on/demandware.store/Sites-swarp-INT-Site/en/Page-SetLocale" data-brand="swatch" data-classes-active="m-active">
<ul>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>
<div data-code="CH">
    

    <p><span>
        Switzerland
    </span>

    
        <span>
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="de_CH" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="de" data-gtm-selected-language="en" data-gtm-country="CH" data-gtm-selected-country="INT" data-gtm-country-code="CH" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    de
                </span>

                
                    <span arial-hidden="true">|</span>
                
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="fr_CH" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="fr" data-gtm-selected-language="en" data-gtm-country="CH" data-gtm-selected-country="INT" data-gtm-country-code="CH" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    fr
                </span>

                
                    <span arial-hidden="true">|</span>
                
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="it_CH" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="it" data-gtm-selected-language="en" data-gtm-country="CH" data-gtm-selected-country="INT" data-gtm-country-code="CH" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    it
                </span>

                
                    <span arial-hidden="true">|</span>
                
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="en_CH" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="en" data-gtm-selected-language="en" data-gtm-country="CH" data-gtm-selected-country="INT" data-gtm-country-code="CH" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    en
                </span>

                
            
        </span>
    
</p></div>

</li>

<li>


</li>

<li>


</li>

</ul>
</div>

<p><span data-id="button-accordion-America-4069eda2-4dfe-9789" data-widget="button" data-panel-name="America-4069eda2-4dfe-9789" data-widget-event-click="handleTabClick" data-event-click.prevent="handleClick">
America
</span>
<span data-widget="button" data-panel-name="America-4069eda2-4dfe-9789" data-widget-event-click="activateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconExpand_America-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
        <line x1="8.5" y1="0.5" x2="8.5" y2="15.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
<span data-widget="button" data-panel-name="America-4069eda2-4dfe-9789" data-widget-event-click="deactivateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconCollapse_America-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
</p>


<p><span data-id="button-accordion-MiddleEastAndAfrica-4069eda2-4dfe-9789" data-widget="button" data-panel-name="MiddleEastAndAfrica-4069eda2-4dfe-9789" data-widget-event-click="handleTabClick" data-event-click.prevent="handleClick">
Middle East &amp; Africa
</span>
<span data-widget="button" data-panel-name="MiddleEastAndAfrica-4069eda2-4dfe-9789" data-widget-event-click="activateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconExpand_MiddleEastAndAfrica-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
        <line x1="8.5" y1="0.5" x2="8.5" y2="15.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
<span data-widget="button" data-panel-name="MiddleEastAndAfrica-4069eda2-4dfe-9789" data-widget-event-click="deactivateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconCollapse_MiddleEastAndAfrica-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
</p>


<p><span data-id="button-accordion-PacificAndAsia-4069eda2-4dfe-9789" data-widget="button" data-panel-name="PacificAndAsia-4069eda2-4dfe-9789" data-widget-event-click="handleTabClick" data-event-click.prevent="handleClick">
Pacific &amp; Asia
</span>
<span data-widget="button" data-panel-name="PacificAndAsia-4069eda2-4dfe-9789" data-widget-event-click="activateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconExpand_PacificAndAsia-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
        <line x1="8.5" y1="0.5" x2="8.5" y2="15.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
<span data-widget="button" data-panel-name="PacificAndAsia-4069eda2-4dfe-9789" data-widget-event-click="deactivateHandler" data-event-click.prevent="handleClick" data-id="showMoreIconCollapse_PacificAndAsia-4069eda2-4dfe-9789">

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
        <line x1="0.5" y1="8.5" x2="15.5" y2="8.5" stroke="#000" stroke-linecap="round"></line>
    </svg>


</span>
</p>
<div id="PacificAndAsia-4069eda2-4dfe-9789" data-widget="countrySelectorTabPanel" data-url="/on/demandware.store/Sites-swarp-INT-Site/en/Page-SetLocale" data-brand="swatch" data-classes-active="m-active">
<ul>

<li>


</li>

<li>


</li>

<li>
<div data-code="HK">
    

    <p><span>
        Hong Kong SAR (香港特别行政区)
    </span>

    
        <span>
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="zh_HK" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="zh" data-gtm-selected-language="en" data-gtm-country="HK" data-gtm-selected-country="INT" data-gtm-country-code="HK" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    zh
                </span>

                
                    <span arial-hidden="true">|</span>
                
            
                <span data-widget-event-click="switchLocale" data-event-click="handleClick" data-widget-event-keyup="handleKeyup" data-event-keyup="handleKeyup" data-locale="en_HK" data-widget="countrySelectorLocale" role="link" tabindex="0" data-gtm-event-change-language="datalayer.navigation.language.change.invoke" data-gtm-language="en" data-gtm-selected-language="en" data-gtm-country="HK" data-gtm-selected-country="INT" data-gtm-country-code="HK" data-gtm-event-change-country="datalayer.navigation.country.change.invoke">
                    en
                </span>

                
            
        </span>
    
</p></div>

</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

<li>


</li>

</ul>
</div>

</div>
</div>
</div>

            
        
    </li>

    <li data-widget="countrySelectorModal" data-id="countrySelectorModal" data-brand="swatch" data-id-hash="0c2c9ff8-41d5-9381" data-url="/on/demandware.store/Sites-swarp-INT-Site/en/Page-CountrySelectorTabs?brand=swatch" data-hide-only-dialog="true">
        <span></span>

        <a data-event-click.prevent="showModal" href="#" title="English">
            <span>eng</span>
            <span>INT</span>

            
                <span>
                    <svg width="15" height="15" viewBox="0 0 15 15" xmlns="http://www.w3.org/2000/svg">
                        <title>INT</title>
                        <path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M7 1.01894C6.88719 1.02753 6.77518 1.03899 6.66405 1.05326C5.93592 1.83863 5.3482 2.68245 4.91192 3.56622C5.64785 3.65754 6.33408 3.71458 7 3.73792V1.01894ZM5.00424 1.4964C4.55624 2.11065 4.17774 2.75403 3.87449 3.42036C3.47392 3.35797 3.05701 3.28665 2.61991 3.20631C3.26928 2.46883 4.08319 1.87972 5.00424 1.4964ZM3.49779 4.37313C3.00857 4.2942 2.49774 4.203 1.95928 4.09965C1.433 4.95538 1.0994 5.94231 1.01894 7H3.00784C3.04476 6.10155 3.2117 5.22203 3.49779 4.37313ZM3.02054 8H1.01894C1.09878 9.04951 1.42786 10.0294 1.94711 10.8805C2.47523 10.7619 3.0107 10.66 3.55032 10.5748C3.25212 9.71633 3.0773 8.85477 3.02054 8ZM4.02309 8H7V10.2592C6.18978 10.2804 5.3738 10.3391 4.56266 10.4351C4.25909 9.61621 4.08277 8.80107 4.02309 8ZM7 7H4.00879C4.0477 6.15646 4.21562 5.32622 4.50491 4.52207C5.38585 4.63947 6.20361 4.71189 7 4.73849V7ZM8 8V10.252C8.84416 10.2622 9.67715 10.3137 10.4867 10.4067C10.7326 9.59245 10.875 8.78864 10.9228 8H8ZM10.933 7H8V4.74763C8.8337 4.73468 9.65886 4.66987 10.5257 4.55418C10.7611 5.35093 10.8995 6.16818 10.933 7ZM11.9245 8C11.8783 8.83985 11.7349 9.68991 11.4885 10.5451C12.0276 10.6326 12.5533 10.7395 13.0618 10.8659C13.5759 10.0182 13.9017 9.04352 13.9811 8H11.9245ZM13.9811 7H11.9338C11.9013 6.1134 11.761 5.24552 11.5228 4.40234C12.0106 4.31947 12.5161 4.22193 13.047 4.10987C13.5697 4.96323 13.9009 5.94652 13.9811 7ZM11.2053 3.44155C11.5879 3.37853 11.983 3.30576 12.3949 3.22317C11.8306 2.57791 11.1409 2.04521 10.3637 1.66318C10.6929 2.23961 10.9748 2.83321 11.2053 3.44155ZM8 3.74751C8.71979 3.73574 9.43659 3.68325 10.1896 3.5893C9.84931 2.74321 9.39838 1.92415 8.84676 1.1397C8.57056 1.0815 8.2879 1.04085 8 1.01894V3.74751ZM7 11.2595C6.32817 11.2778 5.65151 11.3229 4.97676 11.3948C5.39873 12.2505 5.9637 13.1059 6.68369 13.9492C6.78837 13.9624 6.89383 13.973 7 13.9811V11.2595ZM2.5941 11.7642C3.03667 11.6733 3.48368 11.5945 3.9331 11.5278C4.24256 12.2053 4.63076 12.8786 5.10037 13.5427C4.12745 13.156 3.27001 12.5412 2.5941 11.7642ZM8 11.2521C8.72827 11.2612 9.44674 11.3024 10.1466 11.3754C9.81726 12.198 9.3807 13.0291 8.82796 13.8642C8.55774 13.9203 8.28137 13.9597 8 13.9811V11.2521ZM11.1683 11.507C10.9345 12.126 10.6459 12.7468 10.3004 13.3675C11.1171 12.977 11.8396 12.4209 12.4244 11.7428C12.0163 11.6515 11.5969 11.5729 11.1683 11.507ZM9.40956 14.7867L9.37628 14.7634C8.77661 14.9178 8.1479 15 7.5 15C3.35786 15 0 11.6421 0 7.5C0 3.35786 3.35786 0 7.5 0C8.14113 0 8.76348 0.0804471 9.35749 0.231798L9.39995 0.199951L9.43974 0.253256C12.6416 1.10814 15 4.02866 15 7.5C15 10.9724 12.6403 13.8936 9.43691 14.7475L9.40956 14.7867Z"></path>
                    </svg>
                </span>
            
        </a>

        
        

        
    </li>


</ul>


            
                


            
        </div>
            </div>
</header>

<main id="maincontent" itemprop="mainContentOfPage" role="main">










<!-- CQuotient Activity Tracking (viewProduct-cquotient.js) -->


<div id="9c417d30e9122e45cedae6d062" data-widget="swatchProductDetail" data-viewport-event-name="datalayer.pagedesigner.promo.viewport.on" data-analytics="{&quot;name&quot;:&quot;WHAT IF...TARIFFS?&quot;,&quot;id&quot;:&quot;SO34Z106&quot;,&quot;brand&quot;:&quot;ORIGINALS&quot;,&quot;category&quot;:&quot;BIOCERAMIC WHAT IF? COLLECTION&nbsp;&quot;,&quot;variant&quot;:&quot;SQUARE BIOCERAMIC&quot;,&quot;product_colour&quot;:&quot;Beige&quot;,&quot;product_size&quot;:&quot;M&quot;,&quot;product_material&quot;:&quot;Silicone&quot;,&quot;product_label&quot;:&quot;Swatch&quot;,&quot;price&quot;:null,&quot;product_availability&quot;:&quot;available&quot;,&quot;product_status&quot;:&quot;sale&quot;,&quot;product_ean&quot;:&quot;7610522901223&quot;,&quot;product_collection&quot;:&quot;BIOCERAMIC WHAT IF? COLLECTION&nbsp;&quot;,&quot;position&quot;:null}" data-classes-flyout-active="m-show" data-is-special-product="false" data-is-giftcard="null" data-is-transactional="false" data-pid="SO34Z106" data-available="true" data-ready-to-order="true" data-selected-quantity="1" data-variation-attributes="null" data-selected-option-values="[]" data-variation-attr-ids="" data-add-to-cart-url="/on/demandware.store/Sites-swarp-INT-Site/en/Cart-AddProduct" data-minicart-popover-timeout="4000" data-product-line="SW134" data-attr-selection-event="product.detail.attributes.selection" data-add-to-cart-available-event="product.detail.addtocart.available" data-add-to-cart-unavailable-event="product.detail.addtocart.unavailable" data-add-to-cart-submitted-event="product.detail.addtocart.submitted" data-list="main" data-position="1">
        <div id="46c02034365700a2de2f7d6879" data-ref="imagesRegion">
            <picture>
                
                <source media="(max-width: 1200px) and (orientation: portrait), (max-width: 768px)" srcset="https://www.swatch.com/dw/image/v2/BDNV_PRD/on/demandware.static/-/Library-Sites-swarp-global/default/dw667f15ba/images/Swatch/collections/2025/whatiftariffs/whatiftariffs-pdp.jpg">
                <source media="(min-width: 768px) and (orientation: landscape), (min-width: 1200px)" srcset="https://www.swatch.com/dw/image/v2/BDNV_PRD/on/demandware.static/-/Library-Sites-swarp-global/default/dw667f15ba/images/Swatch/collections/2025/whatiftariffs/whatiftariffs-pdp.jpg">

                <img src="https://www.swatch.com/dw/image/v2/BDNV_PRD/on/demandware.static/-/Library-Sites-swarp-global/default/dw667f15ba/images/Swatch/collections/2025/whatiftariffs/whatiftariffs-pdp.jpg" data-src="https://www.swatch.com/dw/image/v2/BDNV_PRD/on/demandware.static/-/Library-Sites-swarp-global/default/dw667f15ba/images/Swatch/collections/2025/whatiftariffs/whatiftariffs-pdp.jpg" alt="SO34Z106" width="1080" height="1080">
                
            </picture>
        </div>

        <div>
                    
                    
                        <h2>
                            WHAT IF...TARIFFS?
                        </h2>
                    

                    
                        <p> The inspiration behind the WHAT IF…TARIFFS? model lies in the current events unfolding in today’s world. The unique details on its dial and battery cover hint at the US tariffs imposed on Switzerland.&nbsp;</p>
                    

                    
                </div>
    </div>



</main>







    





    













    

    
        
            
        
        
    
    

    


    









    



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pico-Banana-400k (240 pts)]]></title>
            <link>https://github.com/apple/pico-banana-400k</link>
            <guid>45708524</guid>
            <pubDate>Sun, 26 Oct 2025 02:01:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/apple/pico-banana-400k">https://github.com/apple/pico-banana-400k</a>, See on <a href="https://news.ycombinator.com/item?id=45708524">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">🍌 Pico-Banana-400K: A Large-Scale Dataset for Text-Guided Image Editing</h2><a id="user-content--pico-banana-400k-a-large-scale-dataset-for-text-guided-image-editing" aria-label="Permalink: 🍌 Pico-Banana-400K: A Large-Scale Dataset for Text-Guided Image Editing" href="#-pico-banana-400k-a-large-scale-dataset-for-text-guided-image-editing"></a></p>

<p dir="auto"><strong>Pico-Banana-400K</strong> is a large-scale dataset of <strong>~400K text–image–edit triplets</strong> designed to advance research in <strong>text-guided image editing</strong>.<br>
Each example contains:</p>
<ul dir="auto">
<li>an <strong>original image</strong> (from <a href="https://storage.googleapis.com/openimages/web/factsfigures.html" rel="nofollow">Open Images</a>),</li>
<li>a <strong>human-like edit instruction</strong>, and</li>
<li>the <strong>edited result</strong> generated and verified by the <em>Nano-Banana</em> model.</li>
</ul>
<p dir="auto">The dataset spans <strong>35 edit operations</strong> across <strong>8 semantic categories</strong>, covering diverse transformations—from low-level color adjustments to high-level object, scene, and stylistic edits.</p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">🧩 Key Features</h2><a id="user-content--key-features" aria-label="Permalink: 🧩 Key Features" href="#-key-features"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Feature</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Total Samples</strong></td>
<td>~257K single-turn text–image–edit triplets for SFT, ~56K single-turn text-image(positive) - image(negative)-edit for preference learning, and ~72K multi-turn texts-images-edits for multi-turn applications</td>
</tr>
<tr>
<td><strong>Source</strong></td>
<td><a href="https://storage.googleapis.com/openimages/web/factsfigures.html" rel="nofollow">Open Images</a></td>
</tr>
<tr>
<td><strong>Edit Operations</strong></td>
<td>35 across 8 semantic categories</td>
</tr>
<tr>
<td><strong>Categories</strong></td>
<td>Pixel &amp; Photometric, Object-Level, Scene Composition, Stylistic, Text &amp; Symbol, Human-Centric, Scale &amp; Perspective, Spatial/Layout</td>
</tr>
<tr>
<td><strong>Image Resolution</strong></td>
<td>512–1024 px</td>
</tr>
<tr>
<td><strong>Prompt Generator</strong></td>
<td><a href="https://deepmind.google/discover/blog/gemini-2-5/" rel="nofollow">Gemini-2.5-Flash</a></td>
</tr>
<tr>
<td><strong>Editing Model</strong></td>
<td>Nano-Banana</td>
</tr>
<tr>
<td><strong>Self-Evaluation</strong></td>
<td>Automated judging pipeline using Gemini-2.5-Pro for edit quality</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">🏗️ Dataset Construction</h2><a id="user-content-️-dataset-construction" aria-label="Permalink: 🏗️ Dataset Construction" href="#️-dataset-construction"></a></p>
<p dir="auto">Pico-Banana-400K is built using a <strong>two-stage multimodal generation pipeline</strong>:</p>
<ol dir="auto">
<li><strong>Instruction Generation</strong><br>
Each Open Images sample is passed to <em>Gemini-2.5-Flash</em>, which writes concise, natural-language editing instructions grounded in visible content. We also provide short instructions summarized by Qwen-2.5-Instruct-7B.
Example:
<div dir="auto" data-snippet-clipboard-copy-content="{
  &quot;instruction&quot;: &quot;Change the red car to blue.&quot;
}

"><pre>{
  <span>"instruction"</span>: <span><span>"</span>Change the red car to blue.<span>"</span></span>
}

</pre></div>
</li>
<li><strong>Editing + Self-Evaluation</strong>
The Nano-Banana model performs the edit, then automatically evaluates the result using a structured quality prompt that measures:
Instruction Compliance (40%)
Editing Realism (25%)
Preservation Balance (20%)
Technical Quality (15%)
Only edits scoring above a strict threshold (~0.7) are labeled as successful, forming the main dataset; the remaining ~56K are retained as failure cases for robustness and preference learning.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">📊 Dataset Statistics</h2><a id="user-content--dataset-statistics" aria-label="Permalink: 📊 Dataset Statistics" href="#-dataset-statistics"></a></p>
<p dir="auto"><strong>Nano-Banana-400K</strong> contains <strong>~400K image editing data</strong>, covering a wide visual and semantic range drawn from real-world imagery.</p>
<hr>
<p dir="auto"><h3 tabindex="-1" dir="auto">🧭 Category Distribution</h3><a id="user-content--category-distribution" aria-label="Permalink: 🧭 Category Distribution" href="#-category-distribution"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Category</th>
<th>Description</th>
<th>Percentage</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Object-Level Semantic</strong></td>
<td>Add, remove, replace, or relocate objects</td>
<td><strong>35%</strong></td>
</tr>
<tr>
<td><strong>Scene Composition &amp; Multi-Subject</strong></td>
<td>Contextual and environmental transformations</td>
<td><strong>20%</strong></td>
</tr>
<tr>
<td><strong>Human-Centric</strong></td>
<td>Edits involving clothing, expression, or appearance</td>
<td><strong>18%</strong></td>
</tr>
<tr>
<td><strong>Stylistic</strong></td>
<td>Domain and artistic style transfer</td>
<td><strong>10%</strong></td>
</tr>
<tr>
<td><strong>Text &amp; Symbol</strong></td>
<td>Edits involving visible text, signs, or symbols</td>
<td><strong>8%</strong></td>
</tr>
<tr>
<td><strong>Pixel &amp; Photometric</strong></td>
<td>Brightness, contrast, and tonal adjustments</td>
<td><strong>5%</strong></td>
</tr>
<tr>
<td><strong>Scale &amp; Perspective</strong></td>
<td>Zoom, viewpoint, or framing changes</td>
<td><strong>2%</strong></td>
</tr>
<tr>
<td><strong>Spatial / Layout</strong></td>
<td>Outpainting, composition, or canvas extension</td>
<td><strong>2%</strong></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<hr>
<p dir="auto"><h3 tabindex="-1" dir="auto">📂 Data Composition</h3><a id="user-content--data-composition" aria-label="Permalink: 📂 Data Composition" href="#-data-composition"></a></p>
<ul dir="auto">
<li><strong>Single-Turn SFT samples (successful edits):</strong> ~257K</li>
<li><strong>Single-Turn Preference samples (failure cases):</strong> ~56K</li>
<li><strong>Multi-Turn SFT samples (successful cases):</strong> ~72K</li>
<li><strong>Gemini-generated instructions:</strong> concise, natural, and image-aware</li>
<li><strong>Edit coverage:</strong> 35 edit types across 8 semantic categories</li>
<li><strong>Image diversity:</strong> includes humans, objects, text-rich scenes, etc from Open Images</li>
</ul>
<hr>
<p dir="auto"><h3 tabindex="-1" dir="auto">🖼️ Visualization</h3><a id="user-content-️-visualization" aria-label="Permalink: 🖼️ Visualization" href="#️-visualization"></a></p>
<p dir="auto">Below are representative examples from different categories:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Category</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>Object-Level</td>
<td>“Replace the red apple with a green one.”</td>
</tr>
<tr>
<td>Scene Composition</td>
<td>“Add sunlight streaming through the window.”</td>
</tr>
<tr>
<td>Human-Centric</td>
<td>“Change the person’s expression to smiling.”</td>
</tr>
<tr>
<td>Text &amp; Symbol</td>
<td>“Uppercase the text on the billboard.”</td>
</tr>
<tr>
<td>Stylistic</td>
<td>“Convert the image to a Van Gogh painting style.”</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<hr>
<p dir="auto">Pico-Banana-400K provides both <strong>breadth</strong> (diverse edit operations) and <strong>depth</strong> (quality-controlled multimodal supervision), making it a strong foundation for training and evaluating text-guided image editing models.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🧠 Applications</h2><a id="user-content--applications" aria-label="Permalink: 🧠 Applications" href="#-applications"></a></p>
<p dir="auto"><strong>Pico-Banana-400K</strong> serves as a versatile resource for advancing controllable and instruction-aware image editing.<br>
Beyond single-step editing, the dataset enables <strong>multi-turn, conversational editing</strong> and <strong>reward-based training paradigms</strong>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">📦 Dataset Download Guide</h2><a id="user-content--dataset-download-guide" aria-label="Permalink: 📦 Dataset Download Guide" href="#-dataset-download-guide"></a></p>
<p dir="auto">The <strong>Pico-Banana-400K</strong> dataset is hosted on Apple’s public CDN.<br>
You can download each component (single-turn, multi-turn, and preference data) using the provided manifest files.</p>
<hr>
<p dir="auto"><h3 tabindex="-1" dir="auto">🖼️ 1. Single-Turn Edited Images</h3><a id="user-content-️-1-single-turn-edited-images" aria-label="Permalink: 🖼️ 1. Single-Turn Edited Images" href="#️-1-single-turn-edited-images"></a></p>
<p dir="auto">Manifest files: <a href="https://ml-site.cdn-apple.com/datasets/pico-banana-300k/nb/manifest/sft_manifest.txt" rel="nofollow">sft link</a> and <a href="https://ml-site.cdn-apple.com/datasets/pico-banana-300k/nb/manifest/preference_manifest.txt" rel="nofollow">preference link</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">🖼️ 2. Multi-Turn Edited Images</h3><a id="user-content-️-2-multi-turn-edited-images" aria-label="Permalink: 🖼️ 2. Multi-Turn Edited Images" href="#️-2-multi-turn-edited-images"></a></p>
<p dir="auto">Manifest file: <a href="https://ml-site.cdn-apple.com/datasets/pico-banana-300k/nb/manifest/multi_turn_manifest.txt" rel="nofollow">multi-turn link</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">🖼️ 3. Source Images</h3><a id="user-content-️-3-source-images" aria-label="Permalink: 🖼️ 3. Source Images" href="#️-3-source-images"></a></p>
<p dir="auto">Urls to download source images are provided along with edit instructions in <a href="https://ml-site.cdn-apple.com/datasets/pico-banana-300k/nb/jsonl/sft.jsonl" rel="nofollow">sft link</a>, <a href="https://ml-site.cdn-apple.com/datasets/pico-banana-300k/nb/jsonl/preference.jsonl" rel="nofollow">preference link</a>, and <a href="https://ml-site.cdn-apple.com/datasets/pico-banana-300k/nb/jsonl/multi-turn.jsonl" rel="nofollow">multi-turn link</a>. If you hit rate limit with Flickr when downloading images, you can either request higher rate limit with Flickr or follow steps below.</p>
<p dir="auto">Another way to download the source images is to download packed files train_0.tar.gz and train_1.tar.gz from <a href="https://github.com/cvdfoundation/open-images-dataset#download-images-with-bounding-boxes-annotations">Open Images</a>, then map with the urls we provide. We also provide a sample mapping code <a href="https://github.com/apple/pico-banana-400k/blob/main/map_openimage_url_to_local.py">here</a>. Due to legal requirements, we cannot provide the source image files directly.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# install awscli(https://aws.amazon.com/cli/)
# Download Open Images packed files 
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_0.tar.gz . 
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_1.tar.gz . 

# Create folder for extracted images 
mkdir openimage_source_images

# Extract the tar files 
tar -xvzf train_0.tar.gz -C openimage_source_images
tar -xvzf train_1.tar.gz -C openimage_source_images

# Download metadata CSV (ImageID ↔ OriginalURL mapping)  
wget https://storage.googleapis.com/openimages/2018_04/train/train-images-boxable-with-rotation.csv

# Map urls to local paths
python map_openimage_url_to_local.py #please modify variable is_multi_turn and file paths as needed"><pre><span><span>#</span> install awscli(https://aws.amazon.com/cli/)</span>
<span><span>#</span> Download Open Images packed files </span>
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_0.tar.gz <span>.</span> 
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_1.tar.gz <span>.</span> 

<span><span>#</span> Create folder for extracted images </span>
mkdir openimage_source_images

<span><span>#</span> Extract the tar files </span>
tar -xvzf train_0.tar.gz -C openimage_source_images
tar -xvzf train_1.tar.gz -C openimage_source_images

<span><span>#</span> Download metadata CSV (ImageID ↔ OriginalURL mapping)  </span>
wget https://storage.googleapis.com/openimages/2018_04/train/train-images-boxable-with-rotation.csv

<span><span>#</span> Map urls to local paths</span>
python map_openimage_url_to_local.py <span><span>#</span>please modify variable is_multi_turn and file paths as needed</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">🧩 License</h2><a id="user-content--license" aria-label="Permalink: 🧩 License" href="#-license"></a></p>
<p dir="auto">Pico-Banana-400K is released under the Creative Commons Attribution–NonCommercial–NoDerivatives (CC BY-NC-ND 4.0) license.
✅ Free for research and non-commercial use
❌ Commercial use and derivative redistribution are not permitted
🖼️ Source images follow the Open Images (CC BY 2.0) license
By using this dataset, you agree to comply with the terms of both licenses.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">📘 Citation</h2><a id="user-content--citation" aria-label="Permalink: 📘 Citation" href="#-citation"></a></p>
<p dir="auto">If you use <strong>🍌 Pico-Banana-400K</strong> in your research, please cite it as follows:</p>
<div dir="auto" data-snippet-clipboard-copy-content="@inproceedings{Qian2025PicoBanana400KAL,
  title={Pico-Banana-400K: A Large-Scale Dataset for Text-Guided Image Editing},
  author={Yusu Qian and Eli Bocek-Rivele and Liangchen Song and Jialing Tong and Yinfei Yang and Jiasen Lu and Wenze Hu and Zhe Gan},
  year={2025},
  url={https://api.semanticscholar.org/CorpusID:282272484}
}

"><pre><span>@inproceedings</span>{<span>Qian2025PicoBanana400KAL</span>,
  <span>title</span>=<span><span>{</span>Pico-Banana-400K: A Large-Scale Dataset for Text-Guided Image Editing<span>}</span></span>,
  <span>author</span>=<span><span>{</span>Yusu Qian and Eli Bocek-Rivele and Liangchen Song and Jialing Tong and Yinfei Yang and Jiasen Lu and Wenze Hu and Zhe Gan<span>}</span></span>,
  <span>year</span>=<span><span>{</span>2025<span>}</span></span>,
  <span>url</span>=<span><span>{</span>https://api.semanticscholar.org/CorpusID:282272484<span>}</span></span>
}

</pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A worker fell into a nuclear reactor pool (438 pts)]]></title>
            <link>https://www.nrc.gov/reading-rm/doc-collections/event-status/event/2025/20251022en?brid=vscAjql9kZL1FfGE7TYHVw#en57996:~:text=TRANSPORT%20OF%20CONTAMINATED%20PERSON%20OFFSITE</link>
            <guid>45708292</guid>
            <pubDate>Sun, 26 Oct 2025 01:15:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nrc.gov/reading-rm/doc-collections/event-status/event/2025/20251022en?brid=vscAjql9kZL1FfGE7TYHVw#en57996:~:text=TRANSPORT%20OF%20CONTAMINATED%20PERSON%20OFFSITE">https://www.nrc.gov/reading-rm/doc-collections/event-status/event/2025/20251022en?brid=vscAjql9kZL1FfGE7TYHVw#en57996:~:text=TRANSPORT%20OF%20CONTAMINATED%20PERSON%20OFFSITE</a>, See on <a href="https://news.ycombinator.com/item?id=45708292">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="block-nrc-uswds-content">

  
  <div>
    <p>U.S. Nuclear Regulatory Commission<br>Operations Center</p>
    <p>EVENT REPORTS FOR<br>10/21/2025 - 10/22/2025 </p>
  </div>

      <p><b>EVENT NUMBERS</b>
      <br>
      <a href="#en57994">57994</a><a href="#en57996">57996</a><a href="#en57997">57997</a><a href="#en57990">57990</a><a href="#en57991">57991</a><a href="#en57992">57992</a><a href="#en57998">57998</a><a href="#en58002">58002</a>
    </p>

          <div id="en57994">
        <p>Power Reactor</p>
        <p>Event Number: 57994</p>
        <p><b>Facility:</b> Wolf Creek<br>
            <b>Region:</b> 4 &nbsp; &nbsp; <b>State:</b> KS<br>
            <b>Unit:</b> [1] [] []<br>
            <b>RX Type:</b> [1] W-4-LP<br>
                                <b>NRC Notified By:</b> Michael J. Payne<br>
          <b>HQ OPS Officer:</b> Josue Ramirez
        </p>
        <p><b>Notification Date:</b> 10/21/2025<br>
          <b>Notification Time:</b> 14:37 [ET]<br>
          <b>Event Date:</b> 10/21/2025<br>
          <b>Event Time:</b> 06:10 [CDT]<br>
          <b>Last Update Date:</b> 10/21/2025
        </p>
        <p><b>Emergency Class:</b> Non Emergency<br>
          10 CFR Section:<br>
                                                              50.72(b)(3)(v)(D) -
                            Accident Mitigation
                                                    </p>
        <p><b>Person (Organization):</b><br>
                      Vossmar, Patricia (R4DO)<br ?="">
                                                          </p>
      </div>

              <table data-striping="1">
      <caption>Power Reactor Unit Info</caption>
  
  
      <thead>
      <tr>
                  <th>Unit</th>
                  <th>SCRAM Code</th>
                  <th>RX Crit</th>
                  <th>Initial PWR</th>
                  <th>Initial RX Mode</th>
                  <th>Current PWR</th>
                  <th>Current RX Mode</th>
              </tr>
    </thead>
  
      <tbody>
              <tr>
                      <td>1</td>
                      <td>N</td>
                      <td>N</td>
                      <td>0</td>
                      <td></td>
                      <td>0</td>
                      <td></td>
                  </tr>
          </tbody>
    </table>

      
      <p><b>Event Text</b></p><div><p>
        BOTH TRAINS OF CONTROL ROOM EMERGENCY VENTILATION SYSTEM INOPERABLE</p><p>

The following is a summary of information provided by the licensee via phone and email:</p><p>

On October 21, 2025, at 0610 CDT, while reloading fuel to the reactor vessel, an electrical perturbation initiated a control room ventilation isolation signal (CRVIS). The control room air conditioning system (CRACS) 'A' train A/C unit did not start upon the CRVIS due to a blown fuse. The 'B' CRACS A/C unit was out of service for planned maintenance at the time. At 1020 CDT, the 'A' train CRACS A/C unit was returned to service. Both trains of the control room emergency ventilation system (CREVS) were inoperable for 10 minutes. Due to both trains of CRACS and CREVS being inoperable, this condition is being reported as an eight-hour, non-emergency notification per 10 CFR 50.72(b)(3)(v).</p><p>

This condition caused entry into technical specification (TS) limiting condition for operation (LCO) 3.7.10 condition `E' and 3.7.11 condition `D'. Upon discovery of the condition, fuel movement and core alterations were suspended in accordance with the TS LCO required actions.</p><p>

There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector was notified.
      </p></div>
      <div id="en57996">
        <p>Power Reactor</p>
        <p>Event Number: 57996</p>
        <p><b>Facility:</b> Palisades<br>
            <b>Region:</b> 3 &nbsp; &nbsp; <b>State:</b> MI<br>
            <b>Unit:</b> [1] [] []<br>
            <b>RX Type:</b> [1] CE<br>
                                <b>NRC Notified By:</b> Scott Moore<br>
          <b>HQ OPS Officer:</b> Josue Ramirez
        </p>
        <p><b>Notification Date:</b> 10/21/2025<br>
          <b>Notification Time:</b> 16:52 [ET]<br>
          <b>Event Date:</b> 10/21/2025<br>
          <b>Event Time:</b> 16:32 [EDT]<br>
          <b>Last Update Date:</b> 10/21/2025
        </p>
        <p><b>Emergency Class:</b> Non Emergency<br>
          10 CFR Section:<br>
                                                              50.72(b)(3)(xii) -
                            Offsite Medical
                                                    </p>
        <p><b>Person (Organization):</b><br>
                      Edwards, Rhex (R3DO)<br ?="">
                                Grant, Jeffery (IRMOC)<br ?="">
                                Phil McKenna (NRR EO)<br ?="">
                                      </p>
      </div>

              <table data-striping="1">
      <caption>Power Reactor Unit Info</caption>
  
  
      <thead>
      <tr>
                  <th>Unit</th>
                  <th>SCRAM Code</th>
                  <th>RX Crit</th>
                  <th>Initial PWR</th>
                  <th>Initial RX Mode</th>
                  <th>Current PWR</th>
                  <th>Current RX Mode</th>
              </tr>
    </thead>
  
      <tbody>
              <tr>
                      <td>1</td>
                      <td>N</td>
                      <td>N</td>
                      <td>0</td>
                      <td></td>
                      <td>0</td>
                      <td></td>
                  </tr>
          </tbody>
    </table>

      
      <p><b>Event Text</b></p><div><p>
        TRANSPORT OF CONTAMINATED PERSON OFFSITE</p><p>

The following information was provided by the licensee via phone and email:</p><p>

"On 10/21/2025 at 0930 EDT an individual fell into the reactor cavity. The reactor cavity is full of water. They ingested some amount of cavity water. The individual was decontaminated by radiation protection personnel but had 300 counts per minute detected in their hair. At 1632 EDT they were sent off site to seek medical attention.</p><p>

"This is an eight-hour notification, non-emergency, for the transportation of a contaminated person offsite. This event is reportable in accordance with 10 CFR 50.72(b)(3)(xii).</p><p>

"The NRC Resident Inspector has been notified."
      </p></div>
      <div id="en57997">
        <p>Power Reactor</p>
        <p>Event Number: 57997</p>
        <p><b>Facility:</b> North Anna<br>
            <b>Region:</b> 2 &nbsp; &nbsp; <b>State:</b> VA<br>
            <b>Unit:</b> [1] [] []<br>
            <b>RX Type:</b> [1] W-3-LP,[2] W-3-LP,[3] M-4-LP<br>
                                <b>NRC Notified By:</b> Nick Wilson<br>
          <b>HQ OPS Officer:</b> Josue Ramirez
        </p>
        <p><b>Notification Date:</b> 10/21/2025<br>
          <b>Notification Time:</b> 23:10 [ET]<br>
          <b>Event Date:</b> 10/21/2025<br>
          <b>Event Time:</b> 21:08 [EDT]<br>
          <b>Last Update Date:</b> 10/21/2025
        </p>
        <p><b>Emergency Class:</b> Non Emergency<br>
          10 CFR Section:<br>
                                                              50.72(b)(2)(iv)(B) -
                            RPS Actuation - Critical
                                                                50.72(b)(3)(iv)(A) -
                            Valid Specif Sys Actuation
                                                    </p>
        <p><b>Person (Organization):</b><br>
                      Mckown, Louis J (R2DO)<br ?="">
                                                          </p>
      </div>

              <table data-striping="1">
      <caption>Power Reactor Unit Info</caption>
  
  
      <thead>
      <tr>
                  <th>Unit</th>
                  <th>SCRAM Code</th>
                  <th>RX Crit</th>
                  <th>Initial PWR</th>
                  <th>Initial RX Mode</th>
                  <th>Current PWR</th>
                  <th>Current RX Mode</th>
              </tr>
    </thead>
  
      <tbody>
              <tr>
                      <td>1</td>
                      <td>A/R</td>
                      <td>Y</td>
                      <td>74</td>
                      <td></td>
                      <td>0</td>
                      <td></td>
                  </tr>
          </tbody>
    </table>

      
      <p><b>Event Text</b></p><div><p>
        AUTOMATIC REACTOR TRIP</p><p>

The following information was provided by the licensee via email and phone:</p><p>

"On October 21, 2025, at 2108 EDT, Unit 1 automatically tripped from 74 percent power due to a negative rate trip. The unit has been stabilized in mode 3 at normal operating temperature and pressure. The reactor trip was uncomplicated, and all control rods fully inserted into the core. This reactor protection system actuation is reportable per 10 CFR 50.72(b)(2)(iv)(B). The auxiliary feedwater pumps actuated as designed because of the reactor trip and is reportable per 10 CFR 50.72(b)(3)(iv)(A) for a valid engineered safety feature (ESF) actuation. Decay heat is being removed via the steam generator power-operated relief valves and Unit 1 is in a normal shutdown electrical lineup. Unit 2 was not affected by this event."</p><p>

The NRC Resident Inspector has been notified.
      </p></div>
      <div id="en57990">
        <p>Agreement State</p>
        <p>Event Number: 57990</p>
        <p><b>Rep Org:</b> Georgia Radioactive Material Pgm<br>
            <b>Licensee:</b> Piedmont Heart Institute<br>
            <b>Region:</b> 1<br>
            <b>City:</b> Douglasville &nbsp; <b>State:</b> GA<br>
            <b>County:</b> <br>
            <b>License #:</b> GA 1195-2<br>
            <b>Agreement:</b> Y<br>
            <b>Docket:</b> <br>
                    <b>NRC Notified By:</b> Avionne Fortner <br>
          <b>HQ OPS Officer:</b> Karen Cotton
        </p>
        <p><b>Notification Date:</b> 10/16/2025<br>
          <b>Notification Time:</b> 08:20 [ET]<br>
          <b>Event Date:</b> 10/08/2025<br>
          <b>Event Time:</b> 00:00 [EDT]<br>
          <b>Last Update Date:</b> 10/16/2025
        </p>
        <p><b>Emergency Class:</b> Non Emergency<br>
          10 CFR Section:<br>
                                                            Agreement State
                                                    </p>
        <p><b>Person (Organization):</b><br>
                      Young, Matt (R1DO)<br ?="">
                                NMSS_EVENTS_NOTIFICATION (EMAIL)<br ?="">
                                                </p>
      </div>

      
      <p><b>Event Text</b></p><div><p>
        AGREEMENT STATE REPORT - LEAKING SOURCE</p><p>

The following information was provided by the Georgia Radioactive Material Program (the Department) via email:</p><p>

"On October 8, 2025, a leaking source was discovered while performing a routine leak test. The leak test revealed more than 0.005 mCi of removable contamination of Cs-137. The definitive cause of the leakage was not determined; however, cracks in the source were noticed through visible inspection. The leaking source was placed in a lead pig. The pig and cleanup waste were placed in a double bagged plastic bag and stored behind lead bricks. Removable contamination surveys were performed at the site of the leaking source and on the hands of the physicists. All areas and personnel were found to be free of removable contamination. The licensee will contact a company for waste disposal and will notify the department when the disposal is completed. The incident was reported to our office on October 10, 2025."</p><p>

GA Incident Number: 109
      </p></div>
      <div id="en57991">
        <p>Agreement State</p>
        <p>Event Number: 57991</p>
        <p><b>Rep Org:</b> NV Div of Rad Health<br>
            <b>Licensee:</b> Universal Engineering Services<br>
            <b>Region:</b> 4<br>
            <b>City:</b> Reno &nbsp; <b>State:</b> NV<br>
            <b>County:</b> <br>
            <b>License #:</b> 00-11-14033-01<br>
            <b>Agreement:</b> Y<br>
            <b>Docket:</b> <br>
                    <b>NRC Notified By:</b> Corey Creveling<br>
          <b>HQ OPS Officer:</b> Ian Howard
        </p>
        <p><b>Notification Date:</b> 10/16/2025<br>
          <b>Notification Time:</b> 13:51 [ET]<br>
          <b>Event Date:</b> 10/16/2025<br>
          <b>Event Time:</b> 08:15 [PDT]<br>
          <b>Last Update Date:</b> 10/16/2025
        </p>
        <p><b>Emergency Class:</b> Non Emergency<br>
          10 CFR Section:<br>
                                                            Agreement State
                                                    </p>
        <p><b>Person (Organization):</b><br>
                      Vossmar, Patricia (R4DO)<br ?="">
                                NMSS_EVENTS_NOTIFICATION (EMAIL)<br ?="">
                                ILTAB,    (EMAIL) (EMAIL)<br ?="">
                                      </p>
      </div>

      
      <p><b>Event Text</b></p><div><p>
        AGREEMENT STATE REPORT - STOLEN GAUGE</p><p>

The following information was provided by the Nevada Radiation Control Program via phone and email:</p><p>

"The radiation safety officer for Universal Engineering Services, [license number] 00-11-14033-01, reported to the Nevada Radiation Control Program that a portable gauge had been stolen from the back of a pick-up truck (all chains were cut) at a hotel where an employee was staying in Reno, this morning at 0815 PDT. The gauge in question is a Troxler, model 3430, serial number 37385, with americium-241/beryllium neutron sealed source with an activity of 40 mCi, and a cesium-137 sealed source with an activity of 8 mCi. The licensee is filing a report to the Reno Police Department for the stolen gauge and has been reaching out to local pawn shops.</p><p>

"Notification is made under 10 CFR 20.2201(a)(1)(i)."</p><p>

THIS MATERIAL EVENT CONTAINS A 'Less than Cat 3' LEVEL OF RADIOACTIVE MATERIAL</p><p>

Sources that are "Less than IAEA Category 3 sources," are either sources that are very unlikely to cause permanent injury to individuals or contain a very small amount of radioactive material that would not cause any permanent injury. Some of these sources, such as moisture density gauges or thickness gauges that are Category 4, the amount of unshielded radioactive material, if not safely managed or securely protected, could possibly - although it is unlikely - temporarily injure someone who handled it or were otherwise in contact with it, or who were close to it for a period of many weeks. For additional information go to  http://www-pub.iaea.org/MTCD/publications/PDF/Pub1227_web.pdf
      </p></div>
      <div id="en57992">
        <p>Agreement State</p>
        <p>Event Number: 57992</p>
        <p><b>Rep Org:</b> Illinois Emergency Mgmt. Agency<br>
            <b>Licensee:</b> Elmhurst Hospital<br>
            <b>Region:</b> 3<br>
            <b>City:</b> Elmhurst &nbsp; <b>State:</b> IL<br>
            <b>County:</b> <br>
            <b>License #:</b> IL-01612-01<br>
            <b>Agreement:</b> Y<br>
            <b>Docket:</b> <br>
                    <b>NRC Notified By:</b> Kimberly Stice<br>
          <b>HQ OPS Officer:</b> Ian Howard
        </p>
        <p><b>Notification Date:</b> 10/16/2025<br>
          <b>Notification Time:</b> 16:35 [ET]<br>
          <b>Event Date:</b> 10/15/2025<br>
          <b>Event Time:</b> 00:00 [CDT]<br>
          <b>Last Update Date:</b> 10/16/2025
        </p>
        <p><b>Emergency Class:</b> Non Emergency<br>
          10 CFR Section:<br>
                                                            Agreement State
                                                    </p>
        <p><b>Person (Organization):</b><br>
                      Ziolkowski, Michael (R3DO)<br ?="">
                                NMSS_EVENTS_NOTIFICATION (EMAIL)<br ?="">
                                                </p>
      </div>

      
      <p><b>Event Text</b></p><div><p>
        AGREEMENT STATE REPORT - UNPLANNED CONTAMINATION</p><p>

The following information was provided by the Illinois Emergency Management Agency and Office of Homeland Security (the Agency) via phone and email:</p><p>

"The Agency was contacted on 10/15/25 by the radiation safety officer for Elmhurst Hospital (IL-01612-01) to advise of a contamination incident. Reportedly, a vial containing 200 millicuries of Lu-177 was dropped in the facility's hot lab and contaminated a technician. Decontamination efforts are ongoing. Inspectors are headed to the facility to gather additional details and determine the likelihood of exposures exceeding regulatory limits.</p><p>

"Based on the information currently available. this matter is a reportable unplanned contamination event under 32 Illinois Administrative Code 340.1220(c)(1). It is reportable within 24 hours, which the licensee met.</p><p>

"Additional updates will be provided as they become available."</p><p>

Illinois Reference Number: IL250044
      </p></div>
      <div id="en57998">
        <p>Power Reactor</p>
        <p>Event Number: 57998</p>
        <p><b>Facility:</b> Palisades<br>
            <b>Region:</b> 3 &nbsp; &nbsp; <b>State:</b> MI<br>
            <b>Unit:</b> [1] [] []<br>
            <b>RX Type:</b> [1] CE<br>
                                <b>NRC Notified By:</b> Scott Moore<br>
          <b>HQ OPS Officer:</b> Robert A. Thompson
        </p>
        <p><b>Notification Date:</b> 10/22/2025<br>
          <b>Notification Time:</b> 08:06 [ET]<br>
          <b>Event Date:</b> 10/22/2025<br>
          <b>Event Time:</b> 04:52 [EDT]<br>
          <b>Last Update Date:</b> 10/22/2025
        </p>
        <p><b>Emergency Class:</b> Non Emergency<br>
          10 CFR Section:<br>
                                                              50.72(b)(2)(xi) -
                            Offsite Notification
                                                    </p>
        <p><b>Person (Organization):</b><br>
                      Edwards, Rhex (R3DO)<br ?="">
                                                          </p>
      </div>

              <table data-striping="1">
      <caption>Power Reactor Unit Info</caption>
  
  
      <thead>
      <tr>
                  <th>Unit</th>
                  <th>SCRAM Code</th>
                  <th>RX Crit</th>
                  <th>Initial PWR</th>
                  <th>Initial RX Mode</th>
                  <th>Current PWR</th>
                  <th>Current RX Mode</th>
              </tr>
    </thead>
  
      <tbody>
              <tr>
                      <td>1</td>
                      <td>N</td>
                      <td>N</td>
                      <td>0</td>
                      <td></td>
                      <td>0</td>
                      <td></td>
                  </tr>
          </tbody>
    </table>

      
      <p><b>Event Text</b></p><div><p>
        OFFSITE NOTIFICATION</p><p>

The following information was provided by the licensee via phone and email:</p><p>

"On October 22, 2025, at 0452 EDT, chemistry determined that a report to the State of Michigan, Department of Environment, Great Lakes, and Energy, would be required based on exceeding the National Pollutant Discharge Elimination System permit limit for hydrazine. This exceedance did not exceed any NRC regulations or reporting criteria. This notification is being made solely as a four-hour, non-emergency notification for a notification to another government agency. This event is a 4-hour non-emergency report in accordance with 10 CFR 50.72(b)(2)(xi). There was no impact on the health and safety of the public or plant personnel.</p><p>

"The NRC Resident Inspector will be notified."
      </p></div>
      <div id="en58002">
        <p>Power Reactor</p>
        <p>Event Number: 58002</p>
        <p><b>Facility:</b> Clinton<br>
            <b>Region:</b> 3 &nbsp; &nbsp; <b>State:</b> IL<br>
            <b>Unit:</b> [1] [] []<br>
            <b>RX Type:</b> [1] GE-6<br>
                                <b>NRC Notified By:</b> Pat Bulpitt<br>
          <b>HQ OPS Officer:</b> Josue Ramirez
        </p>
        <p><b>Notification Date:</b> 10/22/2025<br>
          <b>Notification Time:</b> 18:57 [ET]<br>
          <b>Event Date:</b> 10/22/2025<br>
          <b>Event Time:</b> 15:35 [CDT]<br>
          <b>Last Update Date:</b> 10/22/2025
        </p>
        <p><b>Emergency Class:</b> Non Emergency<br>
          10 CFR Section:<br>
                                                              50.72(b)(2)(iv)(B) -
                            RPS Actuation - Critical
                                                    </p>
        <p><b>Person (Organization):</b><br>
                      Edwards, Rhex (R3DO)<br ?="">
                                                          </p>
      </div>

              <table data-striping="1">
      <caption>Power Reactor Unit Info</caption>
  
  
      <thead>
      <tr>
                  <th>Unit</th>
                  <th>SCRAM Code</th>
                  <th>RX Crit</th>
                  <th>Initial PWR</th>
                  <th>Initial RX Mode</th>
                  <th>Current PWR</th>
                  <th>Current RX Mode</th>
              </tr>
    </thead>
  
      <tbody>
              <tr>
                      <td>1</td>
                      <td>M/R</td>
                      <td>Y</td>
                      <td>86</td>
                      <td></td>
                      <td>0</td>
                      <td></td>
                  </tr>
          </tbody>
    </table>

      
      <p><b>Event Text</b></p><div><p>
        MANUAL REACTOR SCRAM</p><p>

The following information was provided by the licensee via phone and email:</p><p>

"At 1535 CDT on 10/22/2025, with Unit 1 in mode 1 at 86 percent power, the reactor was manually tripped due to low turbine electro-hydraulic control (EHC) oil system reservoir level, caused by a leak developing in the heater bay. The trip was not complex, with all systems responding normally post-trip. Due to the reactor protection system actuation while critical, this event is being reported as a four-hour, non-emergency notification per 10 CFR 50.72(b)(2)(iv)(B).</p><p>

"Operations responded using the emergency operating procedure for reactor pressure vessel control and stabilized the plant in mode 3. Decay heat is being removed by discharging steam to the main condenser using the turbine bypass valves, which have a separate EHC oil system.</p><p>

"There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector has been notified."
      </p></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I'm drowning in AI features I never asked for and I hate it (289 pts)]]></title>
            <link>https://www.makeuseof.com/ai-features-being-rammed-down-our-throats/</link>
            <guid>45708066</guid>
            <pubDate>Sun, 26 Oct 2025 00:29:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.makeuseof.com/ai-features-being-rammed-down-our-throats/">https://www.makeuseof.com/ai-features-being-rammed-down-our-throats/</a>, See on <a href="https://news.ycombinator.com/item?id=45708066">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article-body" itemprop="articleBody"><p>At first, all of this AI stuff felt exciting. I was curious to try everything (I was actually one of the few naive people who thought the Rabbit R1 was a good product before it eventually launched), and for a while, it felt useful.</p>    <!-- No AdsNinja v10 Client! --><!-- No AdsNinja v10 Client! --><p>But over time, I realized <a href="https://www.makeuseof.com/why-ai-features-ruin-smartphone-innovation/" target="_blank">AI isn't just affecting smartphones</a>; it's creeping into all consumer tech, often making products worse instead of better. What started as something promising has become a constant stream of gimmicks and distractions I didn't ask for.</p>    <!-- No AdsNinja v10 Client! --><h2 id="ai-features-are-making-products-worse-not-better">
                        AI features are making products worse, not better
               </h2><h3 id="good-products-replaced-with-trendy-gimmicks">
            Good products replaced with trendy gimmicks
    </h3>


            
    
<p>Somewhere along the way, tech companies forgot what made their products great in the first place. Every update now seems to revolve around AI, even if it means breaking what already worked. The focus isn't on refining the experience anymore; it's about finding new places to wedge in an AI assistant, a chatbot, or some vaguely "smart" feature that adds little value to the people actually using it.</p>    <p>Gemini is a perfect example. Google replaced Assistant with something that was supposed to be smarter, but in practice, it just got in the way. Simple commands started taking longer, and half the time, it couldn't even do something as basic as turning on my lights.</p>    <p>The LLM inference delay alone made me stop using it altogether. <a href="https://www.makeuseof.com/im-done-with-gemini-i-went-back-to-google-assistant/" target="_blank">I went back to the old Google Assistant</a> because, at least, it worked when I needed it to. Apple isn't doing much better. Siri was already horrible to begin with, but with Apple Intelligence, it has somehow managed to get even worse.</p>    <p>Microsoft has fallen into the same trap. Copilot is everywhere in Windows now — pinned to the taskbar, forced into apps, and even sometimes showing up as ads on the lock screen. It feels less like a helpful feature and more like something Microsoft wants to constantly shove in my face, taking up space I'd rather use for things that actually matter.</p>    
                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                        
    
    

    
    <div data-img-url="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/07/dia-browser-open-on-a-macbook-connected-to-a-monitor.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Raghav Sethi\/MakeUseOf&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/07/dia-browser-open-on-a-macbook-connected-to-a-monitor.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/07/dia-browser-open-on-a-macbook-connected-to-a-monitor.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/07/dia-browser-open-on-a-macbook-connected-to-a-monitor.jpg?q=49&amp;fit=crop&amp;w=800&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/07/dia-browser-open-on-a-macbook-connected-to-a-monitor.jpg?q=49&amp;fit=crop&amp;w=800&amp;dpr=2">
        <source media="(max-width: 1023px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/07/dia-browser-open-on-a-macbook-connected-to-a-monitor.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/07/dia-browser-open-on-a-macbook-connected-to-a-monitor.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2">
        <img width="1650" height="1100" loading="lazy" decoding="async" alt="Dia browser open on a MacBook connected to a monitor" data-img-url="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/07/dia-browser-open-on-a-macbook-connected-to-a-monitor.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2" src="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/07/dia-browser-open-on-a-macbook-connected-to-a-monitor.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2">
        </picture><small>Credit:&nbsp;Raghav Sethi/MakeUseOf</small></figure>
            
        </div>
<p> Even Arc, which has been my daily browser since its beta days, couldn't escape it. Its successor, <a href="https://www.makeuseof.com/arc-supposed-successor-not-even-close/" target="_blank">Dia, went all-in on AI and lost everything that made the original special</a>. It's yet another example of a great idea being replaced by something that exists purely to fit the trend. And Dia now pretty much exists as the same product as Perplexity's Comet, or OpenAI's new ChatGPT Atlas browser.</p>    <p>At this point, AI isn't even about improving products anymore. It's a marketing checkbox companies use to convince shareholders they're staying ahead in this artificial race. Whether it's a feature nobody asked for or a chatbot no one uses, it's all about being able to say "we have AI too." That constant push for relevance is exactly what's ruining the products that used to feel polished and well-thought-out.</p>    <!-- No AdsNinja v10 Client! --><h2 id="the-internet-itself-feels-worse-because-of-generative-ai">
                        The internet itself feels worse because of generative AI
               </h2><h3 id="forums-and-communities-are-losing-authentic-voices">
            Forums and communities are losing authentic voices
    </h3>

                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                            
    
    

    
    <div data-img-url="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2025/10/screenshot-2025-10-24-at-1-06-31-am.png" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2025/10/screenshot-2025-10-24-at-1-06-31-am.png?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2025/10/screenshot-2025-10-24-at-1-06-31-am.png?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2025/10/screenshot-2025-10-24-at-1-06-31-am.png?q=49&amp;fit=crop&amp;w=800&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2025/10/screenshot-2025-10-24-at-1-06-31-am.png?q=49&amp;fit=crop&amp;w=800&amp;dpr=2">
        <source media="(max-width: 1023px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2025/10/screenshot-2025-10-24-at-1-06-31-am.png?q=49&amp;fit=crop&amp;w=825&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2025/10/screenshot-2025-10-24-at-1-06-31-am.png?q=49&amp;fit=crop&amp;w=825&amp;dpr=2">
        <img width="1650" height="1002" loading="lazy" decoding="async" alt="LinkedIn AI slop post about Tesla phone" data-img-url="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2025/10/screenshot-2025-10-24-at-1-06-31-am.png?q=49&amp;fit=crop&amp;w=825&amp;dpr=2" src="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/2025/10/screenshot-2025-10-24-at-1-06-31-am.png?q=49&amp;fit=crop&amp;w=825&amp;dpr=2">
        </picture></figure>
            
        </div>
<p> <a href="https://www.makeuseof.com/dead-internet-theory-explained/" target="_blank">The dead internet theory</a> suggests that most of the content we see online isn't made by real people anymore, but by bots and automated systems that mimic human behavior. It used to sound far-fetched, but these days, it feels pretty close to reality.</p>    <p>I've felt it most on X. It used to be one of the apps I opened every day, but now it feels like half the posts are written by ChatGPT. The comments under most tweets follow the same robotic tone, and it's obvious that a lot of them exist only to farm engagement. Since X pays verified users for impressions and boosts their visibility, the top replies are usually just spam from accounts pretending to be real people. It's not a community anymore; it's a loop of bots talking to other bots for profit.</p>    <p>That same emptiness is spreading everywhere. Instagram and YouTube are filled with recycled, AI-written scripts. Reddit threads feel more like generated summaries than real discussions. There's no sense of authenticity left, just the same rephrased, SEO-optimized noise designed to go viral.</p>    
    
    
    
<p>Even Google Search, which used to be the foundation for finding real information, now struggles with its own AI additions. The new AI overviews are often wrong, confidently spitting out hallucinated facts instead of reliable results. And the worst part is that Google treats them like an upgrade, when in reality, they're a downgrade from what used to work perfectly fine.</p>    <p>The internet used to be messy, human, and unpredictable. That's what made it interesting. Generative AI has flattened all of that into a lifeless feed of content that looks real but isn't.</p>    <!-- No AdsNinja v10 Client! --><h2 id="there-39-s-nothing-ethical-about-how-this-stuff-is-built">
                        There's nothing ethical about how this stuff is built
               </h2><h3 id="models-trained-on-stolen-work-with-no-consent">
            Models trained on stolen work with no consent
    </h3>

                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                        
    
    

    
    <div data-img-url="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-atlas-browser-front-on-view-macos.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Amir Bohlooli \/ MakeUseOf&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-atlas-browser-front-on-view-macos.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-atlas-browser-front-on-view-macos.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-atlas-browser-front-on-view-macos.jpg?q=49&amp;fit=crop&amp;w=800&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-atlas-browser-front-on-view-macos.jpg?q=49&amp;fit=crop&amp;w=800&amp;dpr=2">
        <source media="(max-width: 1023px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-atlas-browser-front-on-view-macos.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-atlas-browser-front-on-view-macos.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2">
        <img width="1650" height="1238" loading="lazy" decoding="async" alt="chatgpt atlas browser front on view macos." data-img-url="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-atlas-browser-front-on-view-macos.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2" src="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-atlas-browser-front-on-view-macos.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2">
        </picture><small>Credit:&nbsp;Amir Bohlooli / MakeUseOf</small></figure>
            
        </div>
<p> The problem with generative AI goes far deeper than annoying features. It starts with how these models are trained. Large language models learn by analyzing massive amounts of data scraped from the internet, like books, articles, photos, videos, and social media posts — all taken without asking permission. What it really means is that someone's original work is being used to build a commercial product they'll never profit from.</p>    <p>Every creative field has been affected. Writers, artists, and photographers have found their work inside datasets used to train AI tools that can now mimic their style. In most cases, there's no credit, no payment, and no consent involved. When an AI tool generates an article, an image, or even a song, it's built on the collective effort of thousands of people who never agreed to be part of the process.</p>    <p>If you engage with a post that features an AI-generated video, your view still counts as engagement. That interaction feeds money and visibility to whoever uploaded it, not to the original artists whose work the model learned from. The system rewards the wrong side of creativity while quietly taking more data from users to fuel itself.</p>    <!-- No AdsNinja v10 Client! --><h3 id="your-data-is-training-the-next-model">
            Your data is training the next model
    </h3>

                
    
    
    
                
    
                
        
                                                            
                                                                                                                        
                                        
    
    

    
    <div data-img-url="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-personas-feature-image.jpg" data-modal-id="single-image-modal" data-modal-container-id="single-image-modal-container" data-img-caption="&quot;Saikat Basu\/MakeUseOf&quot;">
                                                                                            <figure><picture><source media="(max-width: 480px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-personas-feature-image.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-personas-feature-image.jpg?q=49&amp;fit=crop&amp;w=500&amp;dpr=2">
        <source media="(max-width: 767px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-personas-feature-image.jpg?q=49&amp;fit=crop&amp;w=800&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-personas-feature-image.jpg?q=49&amp;fit=crop&amp;w=800&amp;dpr=2">
        <source media="(max-width: 1023px)" data-srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-personas-feature-image.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2" srcset="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-personas-feature-image.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2">
        <img width="1650" height="1100" loading="lazy" decoding="async" alt="ChatGPT personas settings in the iOS ChatGPT app." data-img-url="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-personas-feature-image.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2" src="https://static0.makeuseofimages.com/wordpress/wp-content/uploads/wm/2025/10/chatgpt-personas-feature-image.jpg?q=49&amp;fit=crop&amp;w=825&amp;dpr=2">
        </picture><small>Credit:&nbsp;Saikat Basu/MakeUseOf</small></figure>
            
        </div>
<p> These systems also depend on constant data collection to improve their output. Every prompt you type, every voice query you make, and every interaction you have with an AI product is stored, analyzed, and often used to refine future models.</p>    <!-- No AdsNinja v10 Client! --><p>What's worse is how personal these systems have become. People talk to models like ChatGPT in ways they'd never talk to a human. They share ideas, insecurities, life problems, and things that paint a detailed picture of who they are. And that's data too. Every conversation helps these companies build a psychological profile that's far more accurate than anything traditional advertising could ever create.</p>    <p>Think about how much Google already knows about you. Now, when you use Gemini with the same Google account, they know even more. Between your search history, emails, location, and other activity, they can build a very detailed picture of you. Every interaction with the AI adds more to that picture. While you could avoid this by <a href="https://www.makeuseof.com/ill-never-pay-for-ai-again/" target="_blank">running LLMs on your own computer</a>, that requires pretty powerful hardware to work well.</p>    <h3 id="i-wish-this-trend-dies-soon">
            I wish this trend dies soon
    </h3>
<p>Generative AI and LLMs are impressive tools, and they can be genuinely useful when used thoughtfully. The problem is that they're treated like the centerpiece of every product instead of a supporting feature.</p>    <p>I wish companies would step back and focus on what actually makes their products work well for people, rather than piling on AI just to look innovative.</p>    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Linux Boot Process: From Power Button to Kernel (266 pts)]]></title>
            <link>https://www.0xkato.xyz/linux-boot/</link>
            <guid>45707658</guid>
            <pubDate>Sat, 25 Oct 2025 23:04:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.0xkato.xyz/linux-boot/">https://www.0xkato.xyz/linux-boot/</a>, See on <a href="https://news.ycombinator.com/item?id=45707658">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        

            



<nav>
    <ul>
        
            <li>
                <a href="https://www.0xkato.xyz/">Home</a>
            </li>
        

        
            
                <li>
                    <a href="https://www.0xkato.xyz/blog">Blog</a>
                </li>
            
        

        
            
                <li>
                    <a href="https://www.0xkato.xyz/projects">Research</a>
                </li>
            
        

        
            
                <li>
                    <a href="https://www.0xkato.xyz/about">About</a>
                </li>
            
        

        
            <li>
                <a href="https://github.com/0xkato/Portfolio/tree/main">Portfolio</a>
            </li>
        
    </ul>
</nav>







<p><span>
    <time datetime="25-10-2025">Saturday. October 25, 2025</time>
     - <span title="Estimated read time">
    

    
        15 mins
    
</span>

</span></p>


<h2 id="part-1--from-power-button-to-the-kernels-first-breath">Part 1 — From power button to the kernel’s first breath</h2>

<p>You press the power button. A second later a wall of text scrolls by, or a logo fades in, and eventually Linux appears. What happens in between is not magic. It is a careful handshake between tiny programs and a very literal CPU. This part follows that handshake until the very first line of C code inside the Linux kernel runs.</p>

<h3 id="the-very-first-instruction">The very first instruction</h3>

<p>When power stabilizes, the CPU resets itself to a tiny, old‑fashioned mode called real mode. Real mode dates back to the original 8086 chip. The rules are simple on purpose. Memory addresses are built from two values the CPU keeps in special fast storage called registers. You combine a segment and an offset like this:</p>

<p><code>physical_address = (segment &lt;&lt; 4) + offset</code></p>

<p>If you see numbers like <code>0xFFFFFFF0</code>, that is hexadecimal. Hex is base 16. We write <code>0x</code> in front to make that clear. <code>0x10</code> is 16 in everyday counting. <code>0x100000</code> is 1 megabyte. Hex lines up nicely with how hardware stores bits, which is why you see it everywhere in low‑level code.</p>

<p>Right after reset the CPU jumps to a special address called the reset vector at <code>0xFFFFFFF0</code>. Think of it as a permanent bookmark that says “start here.” There is room for almost nothing at that address, so manufacturers put a short jump there that passes control to the firmware on your motherboard.</p>

<p><strong>Tiny explainer: register</strong>
A register is a tiny slot inside the CPU. It holds a number the CPU is using right now. Names like CS and IP are register names. CS means “code segment,” which marks the current neighborhood for instructions. IP means “instruction pointer,” which marks which instruction comes next.</p>

<h3 id="bios-and-uefi">BIOS and UEFI</h3>

<p>The firmware is a small starter program baked into your board.</p>

<p>BIOS stands for Basic Input Output System. It is the older style. BIOS does a quick health check called POST, looks at the boot order, and tries each device. If it finds a disk whose very first 512‑byte sector ends with the marker bytes <code>0x55</code> and <code>0xAA</code>, it treats that device as bootable. BIOS copies that sector to memory at <code>0x7C00</code> and jumps there. That sector is tiny, so it usually knows only how to load the next, larger piece.</p>

<p>UEFI is the modern replacement. It still starts the machine, but it understands filesystems directly and can load bigger boot programs without the old “first sector” dance. UEFI also passes richer information to the operating system. Different path, same goal: hand control to a boot program that can load Linux.</p>

<h3 id="meet-the-bootloader">Meet the bootloader</h3>

<p>The bootloader is the usher that gets the operating system into place. GRUB is a popular choice on PCs. It reads its configuration, shows a menu if you installed one, and loads the Linux kernel into memory. The Linux kernel file actually contains two things:</p>

<ul>
  <li>a small setup program that still runs in real mode</li>
  <li>the larger compressed kernel that will be unpacked a little later</li>
</ul>

<p>GRUB also fills out a small structure called the setup header with useful facts: where it placed the kernel, where the command line lives, where the initrd is if you have one. Then it jumps into the setup program.</p>

<h3 id="the-setup-program-makes-a-safe-room">The setup program makes a safe room</h3>

<p>Before Linux can do anything interesting, the setup code creates a predictable workspace.</p>

<p>It lines up the segment registers so memory copies behave the same way every time. Names you’ll see here are CS for code, DS for data, and SS for stack. It also clears a single CPU bit called the “direction flag” so copy instructions move forward through memory.</p>

<p>It creates a stack. The stack is a last‑in, first‑out workbench where functions store temporary values. SS says which segment the stack uses. SP is the pointer to the current top of the stack.</p>

<p>It clears a region called BSS. BSS is where global variables that must start as zero live. C code assumes BSS is zero. The setup program writes zeros over that entire span to keep that promise.</p>

<p>If you passed <code>earlyprintk</code> on the kernel command line, the setup code also programs the serial port so it can print very early messages. This is useful when graphics are not ready yet.</p>

<p>Finally the setup program asks the firmware “how much usable RAM do we really have and where are the holes.” On old BIOS this is a call people often nickname e820, which returns a simple list of usable and reserved ranges. The kernel will use that list to avoid stepping on the firmware’s toes.</p>

<p>With that done, the setup code calls its first C function, which is literally named <code>main</code>. We are still in the small old real mode at this point. The next job is to leave it.</p>

<p><strong>Tiny explainer: interrupt</strong>
An interrupt is a hardware or software “excuse me” that pauses what the CPU is doing and runs a small handler for something urgent. A timer tick is an interrupt. A key press is an interrupt. There are two flavors here. Maskable interrupts follow your rules and can be temporarily blocked so they do not fire during delicate moments. Non‑maskable interrupts, often called NMI, always cut in because they usually report serious hardware issues. We will control both while switching modes so nothing surprises us halfway through.</p>

<h2 id="part-2--leaving-real-mode-stepping-through-32bit-land-and-arriving-in-64bit">Part 2 — Leaving real mode, stepping through 32‑bit land, and arriving in 64‑bit</h2>

<p>Modern Linux on PCs runs in long mode, which is the 64‑bit mode of x86_64. You cannot jump there directly from real mode. The path is real mode to protected mode and then protected mode to long mode. This part covers that path and explains the vocabulary on the way.</p>

<h3 id="protected-mode-without-the-jargon-haze">Protected mode, without the jargon haze</h3>

<p>Protected mode is the 32‑bit world introduced to get past the limits of the 1980s. It adds two central ideas.</p>

<p>The Global Descriptor Table, or GDT, is a short list of segment descriptions. A description says “this segment starts here, covers this much, and is allowed to do these things.” Linux keeps this simple. It uses a flat model, which means the base is zero and the size covers the whole 32‑bit space. When everything is flat, addresses look like plain numbers again.</p>

<p>The Interrupt Descriptor Table, or IDT, is a directory of “phone numbers” for emergency calls. If an interrupt arrives, the CPU looks up the entry in the IDT and jumps to the handler listed there. During the switch we load a tiny placeholder IDT because we are about to block interrupts anyway. The full‑featured IDT arrives later once the real kernel is in charge.</p>

<h3 id="the-careful-switch">The careful switch</h3>

<p>The setup code turns off the noisy parts first. It disables maskable interrupts with a single instruction. It quiets the old PIC chips so hardware interrupts are fully blocked for a moment. It opens the A20 line. This is a historical quirk. Early PCs made addresses wrap at 1 megabyte. Opening A20 removes that wrap so higher addresses work like you expect. It resets the math coprocessor so the floating point state is clean.</p>

<p>Then it loads a tiny GDT with only what we need right now and a tiny IDT. Finally it sets a single bit named PE in a control register named CR0 and performs a far jump. That jump reloads the code segment from the GDT and locks in protected mode. It reloads the data and stack segments and fixes the stack pointer to match the new flat world.</p>

<p>We are now in 32‑bit protected mode.</p>

<p><strong>Tiny explainer: control registers</strong>
The CPU has a few special registers for on off switches. CR0 turns on protected mode. CR3 holds the address of the top of the page tables, which we will need in a second. CR4 enables a set of extended features such as larger page table entries.</p>

<h3 id="why-we-still-are-not-done">Why we still are not done</h3>

<p>Linux wants 64‑bit. That is long mode. Two things are needed.</p>

<p>Paging must be on. Paging is the translator between virtual addresses and physical addresses. Programs use virtual addresses. The hardware reads and writes physical memory. Page tables map one to the other in fixed‑size chunks called pages. On PCs a normal page is 4 kilobytes. There are also bigger pages. Early in boot the kernel uses 2 megabyte pages to describe low memory quickly.</p>

<p>A single bit named LME in a special register called EFER must be set to allow long mode. EFER is a model specific register, which is a fancy way of saying “a register used for certain CPU features.”</p>

<h3 id="building-just-enough-paging">Building just enough paging</h3>

<p>The 32‑bit prologue builds a small set of page tables that say “for this region, virtual equals physical.” That is called an identity map. It is enough to flip paging on safely.</p>

<p>To make this work the code enables PAE in CR4 so larger entries are used. It builds a minimal set of tables that cover low memory in 2 megabyte chunks. It writes the address of the top table into CR3. Paging is now ready.</p>

<p>Finally it sets LME in EFER and performs a far return into a label that is written as 64‑bit code. Long mode is now active. Segments are still “flat,” but addresses and registers are 64‑bit wide.</p>

<p><strong>Why all the extra care</strong>
Switching modes while a live system runs is like changing a car tire while rolling. The code blocks interruptions, prepares the minimum needed tables, flips the bit, and only then invites interrupts back. Slow and steady prevents weird half‑switched states.</p>

<h2 id="part-3--unpacking-the-real-kernel-fixing-addresses-and-why-linux-sometimes-moves-itself">Part 3 — Unpacking the real kernel, fixing addresses, and why Linux sometimes moves itself</h2>

<p>We have a 64‑bit CPU with paging on and a compressed kernel in memory. Now the small 64‑bit stub does the practical work: get out of the way if needed, unpack the kernel, fix addresses if the kernel is not at its default spot, and jump.</p>

<h3 id="clearing-a-path-and-setting-safety-nets">Clearing a path and setting safety nets</h3>

<p>The stub first figures out where it is actually running. Early code is linked as if it lived at address zero and then computes its real base at runtime. If the planned destination for the decompressed kernel would overlap the stub, it copies itself to a safe place.</p>

<p>It clears its own BSS so global state starts clean.</p>

<p>It loads a minimal IDT with two handlers. One for page fault and one for NMI. A page fault happens when the CPU cannot find a mapping for a virtual address it just tried to use. In our early identity‑mapped world, the tiny page fault handler can add the missing mapping on the fly and continue. The NMI handler is there so a non‑maskable interrupt does not crash the machine while we are still bringing things up.</p>

<p>It also builds identity mappings for the regions it will touch next. That includes the future home of the kernel, the small boot parameters page the bootloader filled in, and the command line buffer.</p>

<h3 id="decompressing-linux">Decompressing Linux…</h3>

<p>A C function commonly named <code>extract_kernel</code> takes over. It sets aside a tiny heap for temporary buffers, prints the classic line, and unpacks the kernel using whatever algorithm the kernel was built with. gzip, xz, zstd, lzo, and others all plug into the same wrapper.</p>

<p>When the bytes are out, the decompressor reads the kernel’s ELF headers. ELF, short for Executable and Linkable Format, is both a file format and a map. It says which chunks are code, which are data, and exactly where each chunk wants to live. The decompressor copies each chunk where it belongs.</p>

<p>If the kernel is being loaded at a different address than it was built for, the decompressor applies relocations. A relocation is a small fix‑up that adjusts a pointer or an instruction that contains an address. The decompressor walks a list of these and patches each place so it points to the right spot in the address space we are actually using.</p>

<p>When everything is in place, the decompressor returns the entry point of the real kernel and jumps there, passing a pointer to the boot parameters. From that moment you are in the full kernel. The first function you meet is <code>start_kernel</code>, and the big initialization begins.</p>

<h3 id="why-the-kernel-sometimes-moves-itself-on-purpose">Why the kernel sometimes moves itself on purpose</h3>

<p>You may see kASLR mentioned in kernel logs. That stands for Kernel Address Space Layout Randomization. The idea is simple. If attackers do not know where the kernel lives in memory, certain attacks get a lot harder.</p>

<p>Early in boot, if kASLR is enabled, the decompressor chooses two “bases” at random:</p>

<ul>
  <li>a physical base, which is where the bytes will live in RAM</li>
  <li>a virtual base, the starting virtual address the kernel will use once full paging is set up</li>
</ul>

<p>How does it choose without breaking anything</p>

<p>It builds a do not touch list. That includes the decompressor itself, the compressed image, the initial ramdisk, the boot parameters page, and the command line buffer. It can also include ranges you reserve with a <code>memmap=</code> option on the command line.</p>

<p>It scans the memory map from firmware to find large free regions. For each free region it counts how many aligned “slots” of the right size would fit. It draws a random number using the best early entropy source it has. On modern CPUs that might be a hardware random instruction. It reduces the number to the total number of slots and picks the matching slot. That becomes the physical base. The virtual base is chosen the same way, but within the kernel’s virtual address window.</p>

<p>If nothing suitable exists, the code falls back to the default addresses and prints a small warning. If you pass <code>nokaslr</code> on the command line, the randomization step is skipped by design.</p>

<hr>

<h2 id="a-quick-glossary-you-can-bookmark">A quick glossary you can bookmark</h2>

<p><strong>Hexadecimal.</strong> Base 16 numbers written with <code>0x</code>. <code>0x10</code> is 16. <code>0x100000</code> is 1 megabyte. Hex maps cleanly to bits, which is why low‑level code uses it.</p>

<p><strong>Register.</strong> A tiny slot inside the CPU that holds a number right now. Examples: CS, DS, SS, IP, SP.</p>

<p><strong>Segment and offset.</strong> The two pieces used to build real‑mode addresses. Physical address equals segment times 16 plus offset.</p>

<p><strong>BIOS.</strong> Older firmware that starts the machine, checks hardware, and loads the first boot sector into memory.</p>

<p><strong>UEFI.</strong> Modern firmware that understands filesystems and loads larger boot programs directly.</p>

<p><strong>Bootloader.</strong> The usher that places the kernel in memory and passes facts about the system to it. GRUB is a common one.</p>

<p><strong>Stack.</strong> A last‑in, first‑out workbench for functions. SS selects its segment. SP points at the current top.</p>

<p><strong>BSS.</strong> A region where global variables that must start as zero live. The kernel setup code clears it before C runs.</p>

<p><strong>Interrupt.</strong> A fast “excuse me” from hardware or software. The CPU pauses, runs a small handler, then resumes. Maskable interrupts can be blocked for a moment. NMI cannot.</p>

<p><strong>GDT.</strong> Global Descriptor Table. Short list of segment descriptors. Linux sets it to a simple flat model.</p>

<p><strong>IDT.</strong> Interrupt Descriptor Table. Directory of interrupt handlers. Early boot uses a minimal one. The full kernel installs the real one later.</p>

<p><strong>A20 line.</strong> Historical switch that must be opened to address above 1 megabyte correctly on old PCs.</p>

<p><strong>Protected mode.</strong> 32‑bit mode that introduces the GDT and IDT and allows paging.</p>

<p><strong>Long mode.</strong> 64‑bit mode on x86_64. Requires paging and a bit named LME set in the EFER register.</p>

<p><strong>Paging.</strong> The translator from virtual addresses to physical memory. Implemented with page tables.</p>

<p><strong>Page tables.</strong> The data structure that maps virtual pages to physical pages. Early boot uses identity maps. Normal pages are 4 KB. Early boot often uses 2 MB pages to cover ground quickly.</p>

<p><strong>CR0, CR3, CR4.</strong> Control registers. CR0 turns on protected mode. CR3 points to the top of the page tables. CR4 enables extended features such as PAE.</p>

<p><strong>EFER.</strong> A model‑specific register that holds Long Mode Enable among other bits.</p>

<p><strong>ELF.</strong> The kernel’s on‑disk format with a built‑in map of what belongs where.</p>

<p><strong>Relocation.</strong> A fix‑up that adjusts addresses when code is loaded at a different base than it was built for.</p>

<p><strong>kASLR.</strong> Randomizes kernel base addresses at boot to make exploitation harder.</p>



    



    



<section>
    <p>
        Feedback is extremely welcomed! You can reach out to me on X <a href="https://x.com/0xkato" target="_blank" rel="noopener noreferrer">@0xkato</a>
    </p>
</section>



    







            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[D2: Diagram Scripting Language (149 pts)]]></title>
            <link>https://d2lang.com/tour/intro/</link>
            <guid>45707539</guid>
            <pubDate>Sat, 25 Oct 2025 22:40:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://d2lang.com/tour/intro/">https://d2lang.com/tour/intro/</a>, See on <a href="https://news.ycombinator.com/item?id=45707539">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><header></header>
<p><strong>D2</strong> is a diagram scripting language that turns text to diagrams. It stands for
<strong>Declarative Diagramming</strong>. Declarative, as in, you describe what you want diagrammed, it
generates the image.</p>
<p>For example, download the CLI, create a file named <code>input.d2</code>, copy paste the following,
run this command, and you get the image below.</p>
<!-- -->
<p><!--?xml version="1.0" encoding="utf-8"?--><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid meet" viewBox="0 0 711 1702"><svg width="711" height="1702" viewBox="11 11 711 1702"><rect x="11.000000" y="11.000000" width="711.000000" height="1702.000000" rx="0.000000" stroke-width="0"></rect><defs><pattern id="dots-d2-901143380" x="0" y="0" width="15" height="15" patternUnits="userSpaceOnUse">
<g style="mix-blend-mode:multiply" opacity="0.1">
<rect x="2" y="2" width="1" height="1" fill="#0A0F25"></rect>
</g>
<g style="mix-blend-mode:multiply" opacity="0.1">
<rect x="12" y="2" width="1" height="1" fill="#0A0F25"></rect>
</g>
<g style="mix-blend-mode:multiply" opacity="0.1">
<rect x="12" y="12" width="1" height="1" fill="#0A0F25"></rect>
</g>
<g style="mix-blend-mode:multiply" opacity="0.1">
<rect x="2" y="12" width="1" height="1" fill="#0A0F25"></rect>
</g>
<g style="mix-blend-mode:multiply" opacity="0.1">
<rect x="2" y="7" width="1" height="1" fill="#0A0F25"></rect>
</g>
<g style="mix-blend-mode:multiply" opacity="0.1">
<rect x="12" y="7" width="1" height="1" fill="#0A0F25"></rect>
</g>
<g style="mix-blend-mode:multiply" opacity="0.1">
<rect x="7" y="2" width="1" height="1" fill="#0A0F25"></rect>
</g>
<g style="mix-blend-mode:multiply" opacity="0.1">
<rect x="7" y="12" width="1" height="1" fill="#0A0F25"></rect>
</g>
<g style="mix-blend-mode:multiply" opacity="0.1">
<rect x="7" y="7" width="1" height="1" fill="#0A0F25"></rect>
</g>
</pattern>
</defs><g><g><rect x="12.000000" y="311.000000" width="621.000000" height="922.000000" style="stroke-width:2;"></rect><rect x="12.000000" y="311.000000" width="621.000000" height="922.000000" style="stroke-width:2;"></rect><rect x="17.000000" y="316.000000" width="611.000000" height="912.000000" fill="transparent" style="stroke-width:2;"></rect></g><text x="322.500000" y="344.000000" style="text-anchor:middle;font-size:28px">NETWORK</text></g><g><g><path d="M 348 99 H 218 V 98 C 218 83 232 70 255 63 C 242 58 235 50 235 40 C 235 25 256 12 283 12 C 309 12 331 25 331 40 C 331 49 324 58 311 63 C 333 69 348 83 348 98 V 99 H 348 Z" style="stroke-width:2;"></path></g><text x="283.000000" y="120.000000" style="text-anchor:middle;font-size:16px">USER</text></g><g><g><rect x="341.000000" y="1388.000000" width="142.000000" height="66.000000" style="stroke-width:2;"></rect></g><text x="412.000000" y="1426.500000" style="text-anchor:middle;font-size:16px">API SERVER</text></g><g><g><path d="M 377 1615 H 437 C 438 1615 439 1615 440 1616 L 457 1632 C 458 1633 458 1634 458 1635 V 1702 C 458 1702 458 1702 458 1702 H 377 C 376 1702 376 1702 376 1702 V 1616 C 376 1615 376 1615 377 1615 Z" style="stroke-width:2;"></path><path d="M 457 1702 H 377 C 376 1702 376 1702 376 1701 V 1616 C 376 1615 376 1615 377 1615 H 436 C 437 1615 437 1615 437 1616 V 1633 C 437 1634 438 1635 439 1635 H 457 C 458 1635 458 1635 458 1636 V 1701 C 457 1702 458 1702 457 1702 Z" style="stroke-width:2;"></path><path d="M 367 1625 H 427 C 428 1625 429 1625 430 1626 L 447 1642 C 448 1643 448 1644 448 1645 V 1712 C 448 1712 448 1712 448 1712 H 367 C 366 1712 366 1712 366 1712 V 1626 C 366 1625 366 1625 367 1625 Z" style="stroke-width:2;"></path><path d="M 447 1712 H 367 C 366 1712 366 1712 366 1711 V 1626 C 366 1625 366 1625 367 1625 H 426 C 427 1625 427 1625 427 1626 V 1643 C 427 1644 428 1645 429 1645 H 447 C 448 1645 448 1645 448 1646 V 1711 C 447 1712 448 1712 447 1712 Z" style="stroke-width:2;"></path></g><text x="407.000000" y="1674.000000" style="text-anchor:middle;font-size:16px">LOGS</text></g><g><g><rect x="62.000000" y="361.000000" width="271.000000" height="423.000000" style="stroke-width:2;"></rect><rect x="62.000000" y="361.000000" width="271.000000" height="423.000000" style="stroke-width:2;"></rect></g><text x="197.500000" y="390.000000" style="text-anchor:middle;font-size:24px">CELL TOWER</text></g><g><g><rect x="353.000000" y="366.000000" width="230.000000" height="169.000000" style="stroke-width:2;"></rect><rect x="353.000000" y="366.000000" width="230.000000" height="169.000000" style="stroke-width:2;"></rect></g><text x="468.000000" y="395.000000" style="text-anchor:middle;font-size:24px">ONLINE PORTAL</text></g><g><g><rect x="75.000000" y="955.000000" width="245.000000" height="228.000000" style="stroke-width:2;"></rect><rect x="75.000000" y="955.000000" width="245.000000" height="228.000000" style="stroke-width:2;"></rect></g><text x="197.500000" y="984.000000" style="text-anchor:middle;font-size:24px">DATA PROCESSOR</text></g><g><g><path d="M 137 411 H 283 C 279 411 268 429 268 444 C 268 459 279 477 283 477 H 137 C 133 477 122 459 122 444 C 122 429 133 411 137 411 Z" style="stroke-width:2;"></path><path d="M 127 421 H 273 C 269 421 258 439 258 454 C 258 469 269 487 273 487 H 127 C 123 487 112 469 112 454 C 112 439 123 421 127 421 Z" style="stroke-width:2;"></path></g><text x="192.500000" y="459.500000" style="text-anchor:middle;font-size:16px">SATELLITES</text></g><g><g><rect x="122.000000" y="668.000000" width="151.000000" height="66.000000" style="stroke-width:2;"></rect></g><text x="197.500000" y="706.500000" style="text-anchor:middle;font-size:16px">TRANSMITTER</text></g><g><g><path d="M 448 416 L 428 450 L 448 485 L 488 485 L 508 450 L 488 416 Z" style="stroke-width:2;"></path></g><text x="468.000000" y="456.000000" style="text-anchor:middle;font-size:16px">UI</text></g><g><g><path d="M 146 1029 C 146 1005 196 1005 202 1005 C 208 1005 258 1005 258 1029 V 1099 C 258 1123 208 1123 202 1123 C 196 1123 146 1123 146 1099 V 1029 Z" style="stroke-width:2;"></path><path d="M 146 1029 C 146 1053 196 1053 202 1053 C 208 1053 258 1053 258 1029" style="stroke-width:2;"></path><path d="M 136 1039 C 136 1015 186 1015 192 1015 C 198 1015 248 1015 248 1039 V 1109 C 248 1133 198 1133 192 1133 C 186 1133 136 1133 136 1109 V 1039 Z" style="stroke-width:2;"></path><path d="M 136 1039 C 136 1063 186 1063 192 1063 C 198 1063 248 1063 248 1039" style="stroke-width:2;"></path></g><text x="192.000000" y="1091.500000" style="text-anchor:middle;font-size:16px">STORAGE</text></g><g><marker id="mk-d2-901143380-3488378134" markerWidth="10.000000" markerHeight="12.000000" refX="7.000000" refY="6.000000" viewBox="0.000000 0.000000 10.000000 12.000000" orient="auto" markerUnits="userSpaceOnUse"> <polygon points="0.000000,0.000000 10.000000,6.000000 0.000000,12.000000" stroke-width="2"></polygon> </marker><path d="M 148.005525 488.999992 L 148.488950 664.000015" fill="none" style="stroke-width:2;" marker-end="url(#mk-d2-901143380-3488378134)" mask="url(#d2-901143380)"></path><text x="148.000000" y="583.000000" style="text-anchor:middle;font-size:16px">SEND</text></g><g><path d="M 197.011050 488.999969 L 197.977901 664.000061" fill="none" style="stroke-width:2;" marker-end="url(#mk-d2-901143380-3488378134)" mask="url(#d2-901143380)"></path><text x="198.000000" y="583.000000" style="text-anchor:middle;font-size:16px">SEND</text></g><g><path d="M 246.005525 488.999992 L 246.488950 664.000015" fill="none" style="stroke-width:2;" marker-end="url(#mk-d2-901143380-3488378134)" mask="url(#d2-901143380)"></path><text x="246.000000" y="583.000000" style="text-anchor:middle;font-size:16px">SEND</text></g><g><path d="M 197.503690 735.999997 L 197.992620 1001.000007" fill="none" style="stroke-width:2;" marker-end="url(#mk-d2-901143380-3488378134)" mask="url(#d2-901143380)"></path><text x="198.000000" y="875.000000" style="text-anchor:middle;font-size:16px">PHONE LOGS</text></g><g><path d="M 261.665985 127.000000 L 261.665985 165.000000 S 261.665985 165.000000 261.665985 165.000000 L 117.916000 165.000000 S 117.916000 165.000000 117.916000 165.000000 L 117.916000 357.000000" fill="none" style="stroke-width:2;" marker-end="url(#mk-d2-901143380-3488378134)" mask="url(#d2-901143380)"></path><text x="118.000000" y="177.000000" style="text-anchor:middle;font-size:16px">MAKE CALL</text></g><g><marker id="mk-d2-901143380-2177206569" markerWidth="10.000000" markerHeight="12.000000" refX="7.000000" refY="6.000000" viewBox="0.000000 0.000000 10.000000 12.000000" orient="auto" markerUnits="userSpaceOnUse"> <polygon points="0.000000,0.000000 10.000000,6.000000 0.000000,12.000000" stroke-width="2"></polygon> </marker><path d="M 305.000000 127.000000 L 305.000000 165.000000 S 305.000000 165.000000 305.000000 165.000000 L 448.750000 165.000000 S 448.750000 165.000000 448.750000 165.000000 L 448.996016 412.000002" fill="none" style="stroke-width:2;stroke-dasharray:6.000000,5.919384;" marker-end="url(#mk-d2-901143380-2177206569)" mask="url(#d2-901143380)"></path><text x="449.000000" y="204.000000" style="text-anchor:middle;font-size:16px">ACCESS</text></g><g><path d="M 435.665985 1386.000000 L 435.665985 1348.000000 S 435.665985 1348.000000 435.665985 1348.000000 L 687.500000 1348.000000 S 687.500000 1348.000000 687.500000 1348.000000 L 687.500000 266.000000 S 687.500000 266.000000 687.500000 266.000000 L 481.333008 266.000000 S 481.333008 266.000000 481.333008 266.000000 L 481.008880 412.000010" fill="none" style="stroke-width:2;" marker-end="url(#mk-d2-901143380-3488378134)" mask="url(#d2-901143380)"></path><text x="687.500000" y="780.000000" style="text-anchor:middle;font-size:16px">DISPLAY</text></g><g><path d="M 412.000000 1456.000000 L 412.000000 1611.000000" fill="none" style="stroke-width:2;" marker-end="url(#mk-d2-901143380-3488378134)" mask="url(#d2-901143380)"></path><text x="412.000000" y="1540.000000" style="text-anchor:middle;font-size:16px">PERSIST</text></g><g><path d="M 136.500000 1185.000000 L 136.500000 1348.000000 S 136.500000 1348.000000 136.500000 1348.000000 L 388.333008 1348.000000 S 388.333008 1348.000000 388.333008 1348.000000 L 388.333008 1384.000000" fill="none" style="stroke-width:2;" marker-end="url(#mk-d2-901143380-3488378134)" mask="url(#d2-901143380)"></path></g><mask id="d2-901143380" maskUnits="userSpaceOnUse" x="11" y="11" width="711" height="1702">
<rect x="11" y="11" width="711" height="1702" fill="white"></rect>
<rect x="127.000000" y="567.000000" width="42" height="21" fill="black"></rect>
<rect x="177.000000" y="567.000000" width="42" height="21" fill="black"></rect>
<rect x="225.000000" y="567.000000" width="42" height="21" fill="black"></rect>
<rect x="148.000000" y="859.000000" width="100" height="21" fill="black"></rect>
<rect x="73.000000" y="161.000000" width="90" height="21" fill="black"></rect>
<rect x="418.000000" y="188.000000" width="62" height="21" fill="black"></rect>
<rect x="651.000000" y="764.000000" width="73" height="21" fill="black"></rect>
<rect x="376.000000" y="1524.000000" width="72" height="21" fill="black"></rect>
</mask></svg></svg>
</p>
<!-- -->
<h2 id="using-the-cli-watch-mode">Using the CLI watch mode<a href="#using-the-cli-watch-mode" aria-label="Direct link to Using the CLI watch mode" title="Direct link to Using the CLI watch mode">​</a></h2>
<p><img width="100%" src="https://d2lang.com/assets/images/cli-d53efad8a27f22b9520d9cd7dc9658d1.gif" alt="D2 CLI"></p><p>You can finish this tour in about 5-10 minutes, and at the end, there's a cheat sheet you
can download and refer to. If you want just the bare essentials, <a href="https://d2lang.com/tour/hello-world/">Getting Started</a> takes
~2 mins.</p>

<div><p><span><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</p><div><p>For each D2 snippet, you can hover over it to open directly in the Playground and tinker.</p><p>There's some exceptions like snippets that use imports.</p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How programs get run: ELF binaries (2015) (107 pts)]]></title>
            <link>https://lwn.net/Articles/631631/</link>
            <guid>45706938</guid>
            <pubDate>Sat, 25 Oct 2025 21:03:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/Articles/631631/">https://lwn.net/Articles/631631/</a>, See on <a href="https://news.ycombinator.com/item?id=45706938">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<b>We're bad at marketing</b>
<p>
We can admit it, marketing is not our strong suit. Our strength is
writing the kind of articles that developers, administrators, and
free-software supporters depend on to know what is going on in the
Linux world. Please <a href="https://lwn.net/Promo/nsn-bad/subscribe">subscribe today</a> to help us keep doing that, and so
we don’t have to get good at marketing.
</p></blockquote>

<p>
      The <a href="https://lwn.net/Articles/630727/">previous article</a>
      in this series described the general
      mechanisms that the Linux kernel has for executing programs as a result of a user-space call
      to <tt>execve()</tt>.  However, the particular format handlers described in that article each deferred the
      process of execution to an inner call to <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L1352"><tt>search_binary_handler()</tt></a>.  That
      recursion almost always ends with the invocation of an ELF binary program, which is the subject of this
      article.
    </p>


    <h4>The ELF format</h4>
    <p>
      The ELF (<a href="http://en.wikipedia.org/wiki/Executable_and_Linkable_Format">Executable and Linkable Format</a>)
      format is the main binary format in use on modern Linux systems, and support for it is implemented
      in the file <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c"><tt>fs/binfmt_elf.c</tt></a>.  It's also a slightly complicated format
      for the kernel to handle;
      the main <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L571"><tt>load_elf_binary()</tt></a> function spans over 400 lines,
      and the ELF support code is more than four times as big as the
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_aout.c">code that supports the old a.out format</a>.
    </p>
    <p>
      An ELF file for an executable program (rather than a shared library or an object file) must always contain
      a <a href="http://www.sco.com/developers/gabi/latest/ch5.pheader.html">program header table</a> near the
      start of the file, after the <a href="http://www.sco.com/developers/gabi/latest/ch4.eheader.html">ELF
      header</a>; each entry in this table provides information that is needed to run the program.
    </p>
    <p>
      The kernel only really cares about three types of program header
    entries.  The first type is the <tt>PT_LOAD</tt> segment,
      which describes areas of the new program's running memory.  This
    includes code and data sections that come from the
      executable file, together with the size of a <a href="http://en.wikipedia.org/wiki/.bss">BSS</a> section.  The BSS will
      be filled with zeroes (thus only its length needs to be stored in the executable file).  The second entry of
      interest is a <tt>PT_INTERP</tt> entry, which identifies the run-time linker needed to assemble the complete
      program; for the time being, we'll assume a statically linked ELF binary and return to dynamic linking later.
      Finally, the kernel also gets a single bit of information from a <tt>PT_GNU_STACK</tt> entry, if present,
      which indicates whether the program's stack should be made executable or not.
    </p>
    <p>
      (This article only focuses on what's needed to load an ELF program, rather than exploring all of the details of
      the format.  The interested reader can find much more information via the <a href="http://en.wikipedia.org/wiki/Executable_and_Linkable_Format#References">references</a> linked from
      Wikipedia's ELF article or
      by exploring real binaries with the
      <a href="http://man7.org/linux/man-pages/man1/objdump.1.html"><tt>objdump</tt></a> tool.)
    </p>


    <h4>Processing ELF binaries</h4>
    <p>
      Loading an ELF binary is handled by the <tt>load_elf_binary()</tt> function, which starts by examining the ELF
      header to check that the file in question does indeed <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L603">look like a supported ELF format</a>.
      The handler needs the whole of the ELF program header, whether it is
    within the first 128 bytes read into <tt>buf</tt> in
    <tt>linux_binprm</tt> or not,
      so it needs to <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L626">read it</a> into some scratch space.
    </p>
    <p>
      The code now loops over the program header entries, checking for an
    interpreter (<tt>PT_INTERP</tt>) and whether the program's stack should
   be executable (from the <tt>PT_GNU_STACK</tt> entry).  With this
      preparation done, the code needs to initialize those attributes of the new program that are not inherited from the
      old program;
      the <a href="http://en.wikipedia.org/wiki/Single_UNIX_Specification">Single
    UNIX Specification</a> version 3 (SUSv3) <a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html"><tt>exec</tt></a>
      specification describes most of the required behavior
      (and table 28-4 of <a href="http://man7.org/tlpi/index.html"><i>The Linux Programming Interface</i></a>
      gives an excellent summary of the attributes involved).
    </p>
    <p>
      The process of setting up the new program starts with a <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L722">call</a> to
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L1054"><tt>flush_old_exec()</tt></a>, which clears up state in the kernel that refers to the
      previous program.  Any <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L892">other threads</a> of the old program are killed so the new program
      starts with a single thread, and the signal-handling information for the process
      is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L995">unshared</a> so that it can be safely altered later.
      Any pending POSIX timers for the old program are <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L992">cleared</a>, and the location of
      the <a href="https://elixir.bootlin.com/linux/v3.18/source/kernel/fork.c#L672">executable file</a> for the program (visible
      at <tt>/proc/<i>pid</i>/exe</tt>) is updated.
      The <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L819">virtual memory mappings</a> for the old program are released, which also
      <a href="https://elixir.bootlin.com/linux/v3.18/source/kernel/fork.c#L655">kills any pending asynchronous I/O operations</a>
      and <a href="https://elixir.bootlin.com/linux/v3.18/source/kernel/fork.c#L654">frees</a> any <a href="https://lwn.net/Articles/499190/">uprobes</a>.
      Finally, the <a href="http://man7.org/linux/man-pages/man2/personality.2.html">personality</a> of the process
      is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L1081">updated</a> to remove any features that could affect security, as previously recorded
      in the <tt>per_clear</tt> field in <tt>linux_binprm</tt>.
      The main handler code also <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L728">calls</a> the <tt>SET_PERSONALITY()</tt> macro to
      <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/kernel/process_64.c#L385">set the thread flags appropriately</a> for a new 64-bit
      program.
    </p>
    <p>
      A corresponding <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L735">call</a> to <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L1097"><tt>setup_new_exec()</tt></a> now sets up
      the kernel's internal state for the new program.  This function starts by <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L1104">determining</a>
      whether the new program can generate a core dump (or have <tt>ptrace()</tt> attach to it); this
      is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L69">disabled by default</a> for setuid or setgid programs. Dumping is
      also <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L1123">disabled</a> when the <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L1090">program file isn't readable</a> under the
      current credentials.
      A call to <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L1045"><tt>__set_task_comm()</tt></a> sets the current
      task's <tt>comm</tt> field to the basename of the originally invoked filename; this value is used as
      a thread name, and is accessible to user space via the <tt>PR_GET_NAME</tt> and <tt>PR_SET_NAME</tt>
      <a href="http://man7.org/linux/man-pages/man2/prctl.2.html"><tt>prctl()</tt></a> operations.  A call
      to <a href="https://elixir.bootlin.com/linux/v3.18/source/kernel/signal.c#L484"><tt>flush_signal_handlers()</tt></a> sets up the signal handlers for the
      new program; any signal handler that's not <tt>SIG_IGN</tt> gets set to the default <tt>SIG_DFL</tt> value (so any
      ignored signals are inherited by the new program).  Finally, a call
      to <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/file.c#L596"><tt>do_close_on_exec()</tt></a> closes all of the old program's file descriptors
      that have the <tt>O_CLOEXEC</tt> flag set; other file descriptors will be inherited by the new program.
    </p>
    <p>
      The virtual memory for the new program also needs to be set up. To improve security (by helping protect against
<a href="http://en.wikipedia.org/wiki/Stack_buffer_overflow">stack
overflow attacks</a>), the highest address
      for the stack is typically moved <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L555">downward by a random offset</a>.
      An initial <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L739">call</a>
      to <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L640"><tt>setup_arg_pages()</tt></a> then sets up the kernel's memory tracking
      structures, and <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L671">adjusts</a> for the <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L711">new location</a> of the stack.
      The code <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L746">loops</a> through all of the <tt>PT_LOAD</tt> segments in the program file and
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L816">maps</a>
    them into the process's address space, setting up the new program's
    memory layout. It then sets up zero-filled pages that
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L874">correspond to the program's BSS segment</a>. Also, additional special pages — such as
      the <a href="https://lwn.net/Articles/615809/">virtual dynamic shared object (vDSO)</a> pages — need to be mapped, which is taken care of by
      a <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L925">call</a>
      to <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/vdso/vma.c#L202"><tt>arch_setup_additional_pages()</tt></a>.
    An empty page may
      also be <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L952">mapped
    at the zero address</a> in the program's address space for
    backward-compatibility reasons (old SVr4
      programs apparently assume that reading from a <tt>NULL</tt> pointer would return zeros rather
      than <tt>SIGSEGV</tt>).
    </p>
    <p>
      Next, the credentials for the new program are set up via a call
      to <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L1187"><tt>install_exec_creds()</tt></a>.
    This function lets any active Linux Security Module (LSM) know about the
      change in credentials (through the
      <a href="https://elixir.bootlin.com/linux/v3.18/source/include/linux/security.h#L223"><tt>bprm_committing_creds</tt></a> and
      <a href="https://elixir.bootlin.com/linux/v3.18/source/include/linux/security.h#L232"><tt>bprm_committed_creds</tt></a> LSM hooks), and the inner
      <a href="https://elixir.bootlin.com/linux/v3.18/source/kernel/cred.c#L414"><tt>commit_creds()</tt></a> function performs the assignment.
    </p>
    <p>
      The final preparation for running the new program is to set up the rest of its stack (in its new randomized
      location), by calling the <tt>create_elf_tables()</tt> function; this is described in a separate section below.
    </p>
    <p>
      All of the preparation has now been done, and the new program can be launched.
      An <a href="https://lwn.net/Articles/604287/">earlier article</a> explained how the kernel's <tt>system_call</tt>
      entry point pushes the user-space CPU registers to the kernel stack before entering the main kernel code, and these
      registers are correspondingly restored when the system call completes. The area of the stack that holds the saved
      registers is <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/include/asm/processor.h#L928">cast to</a>
      a <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/include/asm/ptrace.h#L33"><tt>pt_regs</tt></a> structure, and the saved user-space CPU registers can thus be <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/include/asm/elf.h#L171">overwritten with</a>
      suitable values (zeroes) for the start of the new program. The <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L975">call</a> to the
      <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/kernel/process_64.c#L230"><tt>start_thread()</tt></a> function also sets the saved
      instruction pointer to the entry point of the program (or the dynamic linker), and the saved stack pointer to the
      current top of the stack (from the <tt>p</tt> field in <tt>linux_binprm</tt>).  The zero return code from the
      handler indicates success, and the <tt>execve()</tt> syscall returns to user space — but to a completely
      different user space, where the process's memory has been remapped, and the restored registers have values that
      start the execution of the new program.
    </p>


    <h4>Populating the stack: the auxiliary vector, environment and arguments</h4>
    <p>
      The <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L149"><tt>create_elf_tables()</tt></a> function adds more information to the
      new program's stack, below the argument and environment information added by the generic code, as two distinct
      chunks.  An initial <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L176">call</a> to <tt>arch_align_stack()</tt>
      <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/kernel/process.c#L459">rounds down</a> the existing stack position to a 16-byte
      boundary, and may also further randomize the stack position downward slightly.
    </p>
    <p>
      The first collection of information forms the ELF auxiliary vector, a collection of (id, value) pairs that
      describe useful information about the program being run and the environment it is running in, communicated
      from the kernel to user space.   To build this vector, the handler code first needs to push onto the stack
      any information that doesn't fit within a 64-bit value; for x86_64 this is a
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L178">platform capability description</a> (the
      string <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/include/asm/elf.h#L237"><tt>"x86_64"</tt></a>) and
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L206">16
    bytes of random data</a> (to help seed user-space random number generators).
    </p>
    <p>
      Next, the code <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L233">assembles</a> the (id, value) pairs for the auxiliary
      vector in the <a href="https://elixir.bootlin.com/linux/v3.18/source/include/linux/mm_types.h#L387"><tt>saved_auxv</tt></a> space within
      the <tt>mm_struct</tt>.  An <a href="https://lwn.net/Articles/519085/">LWN article</a> from Michael Kerrisk describes
      the contents of this vector, so here we just mention a few interesting entries:
    </p>
    <ul>
      <li>The (architecture-specific) first entry in the vector is the <tt>AT_SYSINFO_EHDR</tt> value for x86_64; this indicates
        the location of the vDSO page, as referenced in an <a href="https://lwn.net/Articles/604515/#vdso">earlier article</a>.</li>
      <li>The <tt>AT_PLATFORM</tt> value is the location of the <tt>"x86_64"</tt> platform capability description pushed
        earlier.</li>
      <li>The <tt>AT_RANDOM</tt> value is the location of the random data pushed earlier.</li>
      <li>The <tt>AT_EXECFN</tt> value holds the location of the program filename that was pushed as the very first
        thing on the stack (and whose location was stored in the <tt>exec</tt> field of <tt>linux_binprm</tt>), above
        the arguments and environment values.</li>
      <li>The <tt>AT_ENTRY</tt> value holds the entry point for the text segment, i.e. where program execution should
        start.</li>
    </ul>
    <p>
      Once this auxiliary vector is created, the code now assembles the rest of the new program's stack.  The required
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L278">space is calculated</a>, and then the entries are inserted from low addresses
      to higher ones:
    </p>
    <ul>
      <li>The <tt>argc</tt> argument count is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L294">inserted</a> first.</li>
      <li>An array of argument pointers is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L301">inserted</a> next, ending with a
        NULL pointer.  This is where <tt>main()</tt>'s <tt>argv</tt> will eventually point.</li>
      <li>An array of environment pointers is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L313">inserted</a> next, ending with
        a NULL pointer.  This is
        where <a href="http://man7.org/linux/man-pages/man7/environ.7.html"><tt>environ</tt></a> will point.</li>
      <li>The auxiliary vector is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L326">put at the highest address</a>, just below the
        additional values it references.</li>
    </ul>
    <p>
      Taken together, the top of the new program's address space will have contents like the following example
      (<a href="http://www.win.tue.nl/~aeb/linux/hh/stack-layout.html">this page</a> has a similar example):
    
</p><pre>    ------------------------------------------------------------- 0x7fff6c845000
     0x7fff6c844ff8: 0x0000000000000000
            _  4fec: './stackdump\0'                      &lt;------+
      env  /   4fe2: 'ENVVAR2=2\0'                               |    &lt;----+
           \_  4fd8: 'ENVVAR1=1\0'                               |   &lt;---+ |
           /   4fd4: 'two\0'                                     |       | |     &lt;----+
     args |    4fd0: 'one\0'                                     |       | |    &lt;---+ |
           \_  4fcb: 'zero\0'                                    |       | |   &lt;--+ | |
               3020: random gap padded to 16B boundary           |       | |      | | |
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -|       | |      | | |
               3019: 'x86_64\0'                        &lt;-+       |       | |      | | |
     auxv      3009: random data: ed99b6...2adcc7        | &lt;-+   |       | |      | | |
     data      3000: zero padding to align stack         |   |   |       | |      | | |
    . . . . . . . . . . . . . . . . . . . . . . . . . . .|. .|. .|       | |      | | |
               2ff0: AT_NULL(0)=0                        |   |   |       | |      | | |
               2fe0: AT_PLATFORM(15)=0x7fff6c843019    --+   |   |       | |      | | |
               2fd0: AT_EXECFN(31)=0x7fff6c844fec      ------|---+       | |      | | |
               2fc0: AT_RANDOM(25)=0x7fff6c843009      ------+           | |      | | |
      ELF      2fb0: AT_SECURE(23)=0                                     | |      | | |
    auxiliary  2fa0: AT_EGID(14)=1000                                    | |      | | |
     vector:   2f90: AT_GID(13)=1000                                     | |      | | |
    (id,val)   2f80: AT_EUID(12)=1000                                    | |      | | |
      pairs    2f70: AT_UID(11)=1000                                     | |      | | |
               2f60: AT_ENTRY(9)=0x4010c0                                | |      | | |
               2f50: AT_FLAGS(8)=0                                       | |      | | |
               2f40: AT_BASE(7)=0x7ff6c1122000                           | |      | | |
               2f30: AT_PHNUM(5)=9                                       | |      | | |
               2f20: AT_PHENT(4)=56                                      | |      | | |
               2f10: AT_PHDR(3)=0x400040                                 | |      | | |
               2f00: AT_CLKTCK(17)=100                                   | |      | | |
               2ef0: AT_PAGESZ(6)=4096                                   | |      | | |
               2ee0: AT_HWCAP(16)=0xbfebfbff                             | |      | | |
               2ed0: AT_SYSINFO_EHDR(33)=0x7fff6c86b000                  | |      | | |
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        | |      | | |
               2ec8: environ[2]=(nil)                                    | |      | | |
               2ec0: environ[1]=0x7fff6c844fe2         ------------------|-+      | | |
               2eb8: environ[0]=0x7fff6c844fd8         ------------------+        | | |
               2eb0: argv[3]=(nil)                                                | | |
               2ea8: argv[2]=0x7fff6c844fd4            ---------------------------|-|-+
               2ea0: argv[1]=0x7fff6c844fd0            ---------------------------|-+
               2e98: argv[0]=0x7fff6c844fcb            ---------------------------+
     0x7fff6c842e90: argc=3
</pre>

    <p>
      Note that although there are two randomizations in the stack layout (the position of the top of memory and the
      size of the gap between the argument values and the auxiliary
      vector), the newly running program can still figure
      out where all of the information on the stack is.  The SP register tells the program where the top of the stack is
      (i.e. the lowest address), and the command-line arguments are arranged upwards in memory from there, with a NULL
      pointer to mark where they end.  The environment values are found next, again with a NULL pointer to terminate,
      and the auxiliary vector is found at the next consecutive addresses, closing with an <tt>AT_NULL</tt> ID. The
      values found within all of this information give the addresses of the argument strings, environment strings, and
      auxiliary data values, so no explicit information about the size of the random gap is needed.
    </p>


    <h4>Dynamically linked programs</h4>
    <p>
      So far we've assumed the program being executed is statically linked and skipped over steps that would be
      triggered by the presence of a <tt>PT_INTERP</tt> entry in the ELF program header.  However, most programs are
      dynamically linked, meaning that required <a href="http://lurklurk.org/linkers/linkers.html#sharedlibs">shared
      libraries</a> have to be located and linked at run-time.  This is performed by the <a href="http://man7.org/linux/man-pages/man8/ld.so.8.html">runtime linker</a> (typically
      something
      like <tt>/lib64/ld-linux-x86-64.so.2</tt>), and
      the identity of this linker is specified by the <tt>PT_INTERP</tt> program header entry.
    </p>
    <p>
      To cope with a runtime linker, the ELF handler first <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L660">reads the ELF interpreter file name</a>
      into scratch space, then <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L673">opens the executable file</a>
      with <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/exec.c#L786"><tt>open_exec()</tt></a>.  The first 128 bytes of the file are read into
      the <tt>bprm-&gt;buf</tt> scratch area, replacing the contents of the original program file and
      allowing <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L694">access</a> to the ELF header of the interpreter program — which
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L711">must</a> therefore be an ELF binary itself, rather than any other format.
    </p>
    <p>
      After the program code has been loaded into memory as described previously,
      the ELF handler also <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L890">loads the ELF interpreter program</a> into memory
      with <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L395"><tt>load_elf_interp()</tt></a>.  This process is similar to the process of loading the
      original program: the code <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L408">checks the format information in the ELF header</a>,
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L427">reads in the ELF program header</a>, <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L470">maps</a> all of
      the <tt>PT_LOAD</tt> segments from the file into the new program's memory, and <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L518">leaves room</a>
      for the interpreter's BSS segment.
    </p>
    <p>
      The execution start address for the program is also <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L900">set
    to be the entry point</a> of the
      interpreter, rather than that of the program itself.  When the <tt>execve()</tt> system call completes, execution
      then begins with the ELF interpreter, which takes care of satisfying the linkage requirements of the program from
      user space — finding and loading the shared libraries that the program depends on, and resolving the
      program's undefined symbols to the correct definitions in those libraries.  Once this linkage process is done (which
      relies on a much deeper understanding of the ELF format than the kernel has), the interpreter
      can start the execution of the new program itself,
      <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/dl-sysdep.c;h=65a90469c6bdd12cba03c5a21a283971db39868d;hb=c758a6861537815c759cba2018a3b1abb1943842#l129">at
      the address previously recorded</a> in the <tt>AT_ENTRY</tt> auxiliary value.
    </p>


    <h4>Compatibility with other architectures</h4>
    <p>
      As <a href="https://lwn.net/Articles/604515/#x86_32">described previously</a>, a modern 64-bit (x86_64) Linux
      system can also support running 32-bit binaries of two types: normal 32-bit binaries (x86_32),
      and <a href="http://en.wikipedia.org/wiki/X32_ABI">x32 ABI</a> programs (which can make use of additional
      x86_64 registers).  So how does the kernel support these binaries?
    </p>
    <p>
      The key file that provides support for these formats
      is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/compat_binfmt_elf.c"><tt>compat_binfmt_elf.c</tt></a>, which is included in the kernel when the
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/Kconfig.binfmt#L26"><tt>CONFIG_COMPAT_BINFMT_ELF</tt></a> config option is set.  This file
      didn't appear in our earlier list of places that register binary handlers, because the file contains almost no
      code of its own.  Instead, it <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/compat_binfmt_elf.c#L145">includes</a> the main <tt>binfmt_elf.c</tt> ELF handler
      code (using <tt>#include</tt>), and uses the preprocessor to redirect various internal functions and values to 32-bit compatibility
      versions.  Other than these changes, the format handler therefore behaves the same as the normal ELF handler
      described above.
    </p>
    <p>
      One set of changes <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/compat_binfmt_elf.c#L34">uses 32-bit versions</a> of the structures describing the layout of
      the ELF file;
      similarly, the appropriate <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/compat_binfmt_elf.c#L81">constant values</a> for 32-bit binaries are used, which ensures
      that the compatibility handler only claims support for the relevant ELF binary types.  In particular,
      the <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L609"><tt>elf_check_arch()</tt></a> call is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/compat_binfmt_elf.c#L79">replaced</a> with a
      <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/include/asm/elf.h#L163"><tt>compat_elf_check_arch()</tt></a> version
      that checks for either x86_32 or (if configured) x32.
    </p>
    <p>
      The preprocessor changes also redirect some of the inner functionality of the ELF handler code.
      The <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c#L728">invocation</a> of the <tt>SET_PERSONALITY()</tt> macro is
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/compat_binfmt_elf.c#L116">redirected</a>
      to <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/kernel/process_64.c#L405"><tt>set_personality_ia32()</tt></a>  so that
      the relevant thread flags for the 32-bit architecture are set and,
    similarly, 
      the <tt>arch_setup_additional_pages()</tt> function is <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/compat_binfmt_elf.c#L130">replaced</a> with
      a <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/vdso/vma.c#L211">version</a> that sets up a 32-bit vDSO.
      More significantly, the <tt>start_thread()</tt> function is
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/compat_binfmt_elf.c#L121">replaced</a> with <tt>compat_start_thread()</tt>,
      which <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/include/asm/elf.h#L190">maps</a>
      to <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/kernel/process_64.c#L255"><tt>start_thread_ia32()</tt></a>.  This alters
      the arguments to the inner <tt>start_thread_common()</tt> function so that the saved segment registers are
      initialized differently than for x86_64 binaries (and
      the <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/include/asm/elf.h#L186"><tt>ELF_PLAT_INIT()</tt></a> macro is also
      <a href="https://elixir.bootlin.com/linux/v3.18/source/fs/compat_binfmt_elf.c#L111">adjusted</a> to <a href="https://elixir.bootlin.com/linux/v3.18/source/arch/x86/include/asm/elf.h#L186">match</a>).
    </p>




    <h4>Epilogue</h4>
    <p>
      Every program that runs on a Linux system passes through the portal of <tt>execve()</tt>; as such it's a key
      piece of kernel functionality that's worth understanding in detail.  Although the kernel natively supports script
      and other machine-code format programs, program execution on a modern Linux system eventually involves running an
      ELF binary.  ELF is a complicated format, but fortunately the kernel can ignore most of that complexity — it
      only needs to understand just enough ELF to load segments into memory, and to invoke a user space run-time linker
      program to finish the job of assembling a complete running program.
    </p><br clear="all"><table>
           <tbody><tr><th colspan="2">Index entries for this article</th></tr>
           <tr><td><a href="https://lwn.net/Kernel/Index">Kernel</a></td><td><a href="https://lwn.net/Kernel/Index#exec">exec()</a></td></tr>
            <tr><td><a href="https://lwn.net/Archives/GuestIndex/">GuestArticles</a></td><td><a href="https://lwn.net/Archives/GuestIndex/#Drysdale_David">Drysdale, David</a></td></tr>
            </tbody></table><br clear="all">
<hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[An Update on TinyKVM (119 pts)]]></title>
            <link>https://fwsgonzo.medium.com/an-update-on-tinykvm-7a38518e57e9</link>
            <guid>45706866</guid>
            <pubDate>Sat, 25 Oct 2025 20:51:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fwsgonzo.medium.com/an-update-on-tinykvm-7a38518e57e9">https://fwsgonzo.medium.com/an-update-on-tinykvm-7a38518e57e9</a>, See on <a href="https://news.ycombinator.com/item?id=45706866">Hacker News</a></p>
Couldn't get https://fwsgonzo.medium.com/an-update-on-tinykvm-7a38518e57e9: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Diagram as code tool with draggable customizations (191 pts)]]></title>
            <link>https://github.com/RohanAdwankar/oxdraw</link>
            <guid>45706792</guid>
            <pubDate>Sat, 25 Oct 2025 20:38:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/RohanAdwankar/oxdraw">https://github.com/RohanAdwankar/oxdraw</a>, See on <a href="https://news.ycombinator.com/item?id=45706792">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><details open="">
  <summary>
    
    <span>oxdraw_demo.mov</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/39285979/505614361-de5222bb-9b65-43cf-a35b-5613d06343e8.mov?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjE0NDYxMDMsIm5iZiI6MTc2MTQ0NTgwMywicGF0aCI6Ii8zOTI4NTk3OS81MDU2MTQzNjEtZGU1MjIyYmItOWI2NS00M2NmLWEzNWItNTYxM2QwNjM0M2U4Lm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTEwMjYlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUxMDI2VDAyMzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTIyMmYxNDEzYTBhMzRkZTFlZmI5MWRiYzdkMDlmNTc2YWExMGNmZmI2ODBjYTFjNzk3ZGY2Zjc1NDdjYzdlYjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.sU8SGNSaFCDCGc4pdMi1IC5rseQ84ExHZBQhHfIhsiI" data-canonical-src="https://private-user-images.githubusercontent.com/39285979/505614361-de5222bb-9b65-43cf-a35b-5613d06343e8.mov?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjE0NDYxMDMsIm5iZiI6MTc2MTQ0NTgwMywicGF0aCI6Ii8zOTI4NTk3OS81MDU2MTQzNjEtZGU1MjIyYmItOWI2NS00M2NmLWEzNWItNTYxM2QwNjM0M2U4Lm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTEwMjYlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUxMDI2VDAyMzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTIyMmYxNDEzYTBhMzRkZTFlZmI5MWRiYzdkMDlmNTc2YWExMGNmZmI2ODBjYTFjNzk3ZGY2Zjc1NDdjYzdlYjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.sU8SGNSaFCDCGc4pdMi1IC5rseQ84ExHZBQhHfIhsiI" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">Overview</h2><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">The goal of <code>oxdraw</code> is to make it easy to create and maintain high-quality diagrams using a declarative and reproducible syntax.
Charts are written in <a href="https://mermaid.js.org/" rel="nofollow">Mermaid</a> syntax, while a web interface allows users to fine-tune positions connector paths, colors, and other styling components. Whenever a diagram is tweaked visually, the structural changes are persisted back to the source file as declarative code so that everything remains deterministic and versionable.
The changes are saved as comments in the mermaid file so it remains compatible with other Mermaid tools.
The repo is composed of the Rust CLI to compile <code>.mmd</code> files into images and the React based web interface to editing the files.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Vision</h2><a id="user-content-vision" aria-label="Permalink: Vision" href="#vision"></a></p>
<p dir="auto">The reason I started this project was I used Mermaid a lot in the past when making architecture diagrams or trying to understand large codebases through having AI tools generate .mmd files to visualize them. However what typically happened was since these diagrams couldn't be edited minutely for example cleaning up joints and chart organization, I would have to move over the diagrams I started to things like Lucidchart. So the big picture goal of this project is to unite the benefits of code generated diagramming like Mermaid with the customizability of diagram software like Lucidchart.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Install fom Cargo</h3><a id="user-content-install-fom-cargo" aria-label="Permalink: Install fom Cargo" href="#install-fom-cargo"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Render a diagram from a file</h3><a id="user-content-render-a-diagram-from-a-file" aria-label="Permalink: Render a diagram from a file" href="#render-a-diagram-from-a-file"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Launch the interactive editor</h3><a id="user-content-launch-the-interactive-editor" aria-label="Permalink: Launch the interactive editor" href="#launch-the-interactive-editor"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="oxdraw --input flow.mmd --edit"><pre>oxdraw --input flow.mmd --edit</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">CLI Flags</h3><a id="user-content-cli-flags" aria-label="Permalink: CLI Flags" href="#cli-flags"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Flag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-i, --input &lt;PATH&gt;</code></td>
<td>Read a Mermaid source file; pass <code>-</code> to consume stdin instead.</td>
</tr>
<tr>
<td><code>-o, --output &lt;PATH&gt;</code></td>
<td>Write the rendered asset to a specific path; pass <code>-</code> to stream SVG to stdout. Defaults to <code>&lt;input&gt;.svg</code> (or <code>&lt;input&gt;.&lt;format&gt;</code> if an explicit format is chosen) and <code>out.svg</code> when reading from stdin.</td>
</tr>
<tr>
<td><code>--png</code></td>
<td>Shorthand for <code>--output-format png</code></td>
</tr>
<tr>
<td><code>--scale &lt;FACTOR&gt;</code></td>
<td>Scale multiplier for PNG rasterization (default <code>10.0</code>); values must be greater than zero. Ignored for SVG output.</td>
</tr>
<tr>
<td><code>--edit</code></td>
<td>Launch the interactive editor pointing at the supplied diagram instead of emitting an asset once.</td>
</tr>
<tr>
<td><code>--serve-host &lt;ADDR&gt;</code></td>
<td>Override the bind address used while <code>--edit</code> is active (default <code>127.0.0.1</code>).</td>
</tr>
<tr>
<td><code>--serve-port &lt;PORT&gt;</code></td>
<td>Override the HTTP port while <code>--edit</code> is active (default <code>5151</code>).</td>
</tr>
<tr>
<td><code>-b, --background-color &lt;COLOR&gt;</code></td>
<td>Background fill passed to the renderer (currently SVG only). Applies to both one-off renders and the editor preview.</td>
</tr>
<tr>
<td><code>-q, --quiet</code></td>
<td>Suppress informational stdout such as the success message after rendering to disk.</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h3 tabindex="-1" dir="auto">Frontend Features</h3><a id="user-content-frontend-features" aria-label="Permalink: Frontend Features" href="#frontend-features"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Control</th>
<th>What it does</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Delete selected</code></td>
<td>Removes the currently selected node or edge; available via the Delete/Backspace keys as well.</td>
</tr>
<tr>
<td>Node Fill/Stroke/Text pickers</td>
<td>Apply per-node color overrides; double-clicking a node clears its override.</td>
</tr>
<tr>
<td><code>Reset node style</code></td>
<td>Remove all color overrides for the selected node.</td>
</tr>
<tr>
<td>Edge Color picker</td>
<td>Override the selected edge stroke color.</td>
</tr>
<tr>
<td>Edge Line selector</td>
<td>Toggle between solid and dashed stroke styles.</td>
</tr>
<tr>
<td>Edge Arrow selector</td>
<td>Choose arrow directions (forward/backward/both/none).</td>
</tr>
<tr>
<td><code>Add control point</code></td>
<td>Insert a new draggable waypoint on the selected edge to fine-tune routing.</td>
</tr>
<tr>
<td><code>Reset edge style</code></td>
<td>Drop edge-specific styling and revert to defaults; double-clicking an edge handle also clears its manual path.</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><strong>Canvas and editor interactions</strong></p>
<ul dir="auto">
<li>Drag nodes to update their stored positions with grid snapping and live alignment guides; Shift+Arrow nudges the selection in grid-sized jumps.</li>
<li>Drag edge handles (or the label handle) to reshape routes; double-click an edge to insert a handle and double-click a handle to remove overrides.</li>
<li>Drag an entire subgraph container to move all of its member nodes (and any edge overrides) together while maintaining separation from sibling groups.</li>
<li>The source panel mirrors the Mermaid file, auto-saves after short idle periods, and surfaces pending/saving/error states alongside the current selection.</li>
<li>Status text in the top toolbar signals loading, saving, and the currently edited file path.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">The Diagram Algorithm</h2><a id="user-content-the-diagram-algorithm" aria-label="Permalink: The Diagram Algorithm" href="#the-diagram-algorithm"></a></p>
<details open="">
  <summary>
    
    <span>path_algo.mov</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/39285979/505616593-4430147a-83d8-4d83-aca6-7beec197c0e3.mov?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjE0NDYxMDMsIm5iZiI6MTc2MTQ0NTgwMywicGF0aCI6Ii8zOTI4NTk3OS81MDU2MTY1OTMtNDQzMDE0N2EtODNkOC00ZDgzLWFjYTYtN2JlZWMxOTdjMGUzLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTEwMjYlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUxMDI2VDAyMzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWQyNTU2MmY2NzFjZTNlYzYxY2VkMWU2Y2RjOTYzNzVkYjY0ZDdiNzNhNTg3M2ExMDQ1NDYzMzM1NTJlNWM2OTImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Bk9Ha7ndG_yK9zyXk7XVMjnUqNYVVoK9eRpuwoUUyoc" data-canonical-src="https://private-user-images.githubusercontent.com/39285979/505616593-4430147a-83d8-4d83-aca6-7beec197c0e3.mov?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjE0NDYxMDMsIm5iZiI6MTc2MTQ0NTgwMywicGF0aCI6Ii8zOTI4NTk3OS81MDU2MTY1OTMtNDQzMDE0N2EtODNkOC00ZDgzLWFjYTYtN2JlZWMxOTdjMGUzLm1vdj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTEwMjYlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUxMDI2VDAyMzAwM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWQyNTU2MmY2NzFjZTNlYzYxY2VkMWU2Y2RjOTYzNzVkYjY0ZDdiNzNhNTg3M2ExMDQ1NDYzMzM1NTJlNWM2OTImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Bk9Ha7ndG_yK9zyXk7XVMjnUqNYVVoK9eRpuwoUUyoc" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto">The path drawing algorithm is fun because there is a lot of ambiguity with what optimal behavior could be.
Some prefer smooth lines because there is less total line but I prefer strong edges to make the diagram a bit more clear.
Some prefer no overlapping lines but I sometimes prefer an overlap rather than letting the lines get super long and string out of the diagram very far.
This is an example of using the delete key to remove one relationship and then using the arrow keys to move around one the nodes and seeing how the algorithm recomputes the positioning.
There's definitely some improvements to be made to this algorithm so I imagine this will keep getting better :)</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[California invests in battery energy storage, leaving rolling blackouts behind (273 pts)]]></title>
            <link>https://www.latimes.com/environment/story/2025-10-17/california-made-it-through-another-summer-without-a-flex-alert</link>
            <guid>45706527</guid>
            <pubDate>Sat, 25 Oct 2025 19:58:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.latimes.com/environment/story/2025-10-17/california-made-it-through-another-summer-without-a-flex-alert">https://www.latimes.com/environment/story/2025-10-17/california-made-it-through-another-summer-without-a-flex-alert</a>, See on <a href="https://news.ycombinator.com/item?id=45706527">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-element="story-body" data-subscriber-content=""> <p>For decades, rolling blackouts and urgent calls for energy conservation were part of life in California — a reluctant summer ritual almost as reliable as the heat waves that drove them. But the state has undergone a quiet shift in recent years, and the California Independent System Operator hasn’t issued a single one of those emergency pleas, known as Flex Alerts, since 2022.</p><p>Experts and officials say the Golden State has reached a turning point, reflecting years of investment in making its electrical grid stronger, cleaner and more dependable. Much of that is new battery energy storage, which captures and stores electricity for later use. </p><p>In fact, batteries have been transformative for California, state officials say. In late afternoon, when the sun stops hitting solar panels and people are home using electricity, batteries now push stored solar energy onto the grid. </p><p>California has invested heavily in the technology, helping it mature and get cheaper in recent years. Battery storage in the state has grown more than  3,000% in six years — from 500 megawatts in 2020 to more than 15,700 megawatts today.</p><p>“There is no question that the battery fleet that has grown rapidly since 2020, along with the state’s expanding portfolio of other supply and demand-side resources, has been a real game changer for reliability during summer periods of peak demand,” said Elliot Mainzer, CAISO’s president and chief executive.</p><p>It was only five years ago that a record-shattering heat wave pushed the grid to its limit and <a href="https://www.latimes.com/california/story/2020-08-15/worst-heat-wave-in-years-causes-rolling-blackouts-dangerous-conditions-across-california">plunged much of the state into darkness.</a> In the wake of that event, California’s energy leaders <a href="https://www.caiso.com/Documents/Final-Root-Cause-Analysis-Mid-August-2020-Extreme-Heat-Wave.pdf" target="_blank">vowed to take action</a> to make the grid more resilient.</p><p>Since then, CAISO has overseen a massive build-out of new energy and storage resources, including more than 26,000 megawatts of new capacity overall, which has also helped make the grid more stable, Mainzer said. The state hasn’t seen rolling blackouts since 2020.</p><p>“Extreme weather events, wildfires and other emergencies can pose reliability challenges for any bulk electric system,” he said. “But the CAISO battery fleet, along with the additional capacity and close coordination with state and regional partners, have provided an indisputable benefit to reliability.” </p><p>Batteries are now key to California’s climate goals, including its mandate of <a href="https://www.latimes.com/environment/story/2022-11-16/carlifornia-unveils-plan-to-reach-carbon-neutrailty-by-2045">100% carbon neutrality by 2045</a>. </p><div data-click="enhancement" data-align-center-expanded=""><figure> <picture>    <source type="image/webp" srcset="https://ca-times.brightspotcdn.com/dims4/default/ab445bf/2147483647/strip/true/crop/3600x2400+0+0/resize/320x213!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 320w,https://ca-times.brightspotcdn.com/dims4/default/660f63d/2147483647/strip/true/crop/3600x2400+0+0/resize/568x379!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 568w,https://ca-times.brightspotcdn.com/dims4/default/5fc0252/2147483647/strip/true/crop/3600x2400+0+0/resize/768x512!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 768w,https://ca-times.brightspotcdn.com/dims4/default/49e65a8/2147483647/strip/true/crop/3600x2400+0+0/resize/1080x720!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 1080w,https://ca-times.brightspotcdn.com/dims4/default/fe1e076/2147483647/strip/true/crop/3600x2400+0+0/resize/1240x826!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 1240w,https://ca-times.brightspotcdn.com/dims4/default/f8baf74/2147483647/strip/true/crop/3600x2400+0+0/resize/1440x960!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 1440w,https://ca-times.brightspotcdn.com/dims4/default/0bbf4f1/2147483647/strip/true/crop/3600x2400+0+0/resize/2160x1440!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 2160w" sizes="100vw">       <img alt="The LADWP's biggest solar and battery storage plant, the Eland Solar and Storage Center in the Mojave Desert. " srcset="https://ca-times.brightspotcdn.com/dims4/default/2c9a77c/2147483647/strip/true/crop/3600x2400+0+0/resize/320x213!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 320w,https://ca-times.brightspotcdn.com/dims4/default/fce21cb/2147483647/strip/true/crop/3600x2400+0+0/resize/568x379!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 568w,https://ca-times.brightspotcdn.com/dims4/default/4783f82/2147483647/strip/true/crop/3600x2400+0+0/resize/768x512!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 768w,https://ca-times.brightspotcdn.com/dims4/default/2e70f52/2147483647/strip/true/crop/3600x2400+0+0/resize/1080x720!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 1080w,https://ca-times.brightspotcdn.com/dims4/default/a575dc5/2147483647/strip/true/crop/3600x2400+0+0/resize/1240x826!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 1240w,https://ca-times.brightspotcdn.com/dims4/default/2959229/2147483647/strip/true/crop/3600x2400+0+0/resize/1440x960!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 1440w,https://ca-times.brightspotcdn.com/dims4/default/acbe47a/2147483647/strip/true/crop/3600x2400+0+0/resize/2160x1440!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg 2160w" sizes="100vw" width="2000" height="1333" src="https://ca-times.brightspotcdn.com/dims4/default/97bc90e/2147483647/strip/true/crop/3600x2400+0+0/resize/2000x1333!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2F60%2F46%2Fe7815bd24596b27f02aecb479118%2F1484362-me-dwp-solar-battery-storage-plant-15-brv.jpg" decoding="async" loading="lazy">   </picture>   <div>   <p>Solar panels and battery storage units at the Eland Solar and Storage Center in the Mojave Desert of Kern County on Nov. 25, 2024.</p>   <p>(Brian van der Brug / Los Angeles Times)</p>   </div>   </figure> </div><p>Already, batteries have enabled the grid to operate with dramatic decreases in the use of planet-warming fossil fuels. Now they’re becoming a more cost-effective and reliable replacement for aging gas-fired power plants, according to Maia Leroy, founder of the California energy consulting firm Lumenergy LLC and co-author of a <a href="https://ceert.org/wp-content/uploads/2025/06/Gas-vs-BESS-Report.pdf" target="_blank">recent report</a> on the rise of battery storage over gas generation in California. </p><p>“Historically, Flex Alerts have always come through in summertime when it’s super hot and everyone is cranking their AC,” Leroy said. “But also in the summertime, we’re seeing that gas plants underperform because combustion doesn’t work well with ambient heat. So when we’re able to shift that need from having to use gas plants to something more stable, dispatchable and flexible like battery storage, then we’re able to meet that demand in the summer without having to rely on those underperforming gas plants.” </p><p>Battery energy storage is not without challenges, however. Lithium-ion batteries — the most common type used for energy storage — typically have about  four to six hours of capacity. It’s enough to support the grid during peak hours as the sun sets, but can still leave some gaps to be filled by natural gas.</p><p>Nikhil Kumar, program director with the energy policy nonprofit GridLab, said the technology already exists for longer-duration batteries, including through different chemistries such as iron-air batteries, which release energy through oxidation, and flow batteries, which store energy in liquid chemicals that flow through a reactor.</p><p>Those batteries are not yet as mature and can be more expensive and larger than their lithium-ion counterparts, Kumar said. But a <a href="https://gridlab.org/portfolio-item/gas-tubine-cost-report/" target="_blank">recent GridLab report</a> indicates that equation is changing, with the average cost of a new gas plant often on par with  four-hour lithium-ion batteries and only slightly less expensive than longer-duration battery technologies. </p><p>“Batteries are going to get cheaper,” Kumar said. “Gas isn’t.” </p><p>The battery storage shift is occurring as the Trump administration takes steps to stifle solar and other forms of renewable energy in favor of fossil fuels such as oil, gas and coal. At the end of September, the administration announced that it would <a href="https://www.latimes.com/environment/story/2025-09-29/trump-administration-coal-mining-land-coal-fired-power-plants"><u>open 13 million acres of federal lands for coal mining</u></a> and provide $625 million to recommission or modernize coal-fired powered plants, which officials said would help strengthen the economy, protect jobs and advance American energy.</p><p>During an hourlong  news conference on the initiative, Interior Secretary Doug Burgum described wind and solar energy as intermittent sources that are “literally dependent on the weather” — but neither he nor any other official mentioned the growth of battery storage that has made those sources more reliable and more promising. </p><p>It’s not a partisan issue. ERCOT, which operates Texas’ electrical grid, has <a href="https://www.ercot.com/files/docs/2025/08/06/ERCOT-Monthly-July-2025.pdf" target="_blank">more than 14,000 megawatts</a> of batteries online, a nearly threefold increase from early 2023. California and Texas are constantly trading places as the top state for battery storage. </p><div data-click="enhancement" data-align-center-expanded=""><figure> <picture>    <source type="image/webp" srcset="https://ca-times.brightspotcdn.com/dims4/default/b6efc90/2147483647/strip/true/crop/3600x2400+0+0/resize/320x213!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 320w,https://ca-times.brightspotcdn.com/dims4/default/8184fd7/2147483647/strip/true/crop/3600x2400+0+0/resize/568x379!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 568w,https://ca-times.brightspotcdn.com/dims4/default/231b71f/2147483647/strip/true/crop/3600x2400+0+0/resize/768x512!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 768w,https://ca-times.brightspotcdn.com/dims4/default/a027ac4/2147483647/strip/true/crop/3600x2400+0+0/resize/1080x720!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 1080w,https://ca-times.brightspotcdn.com/dims4/default/2c17f99/2147483647/strip/true/crop/3600x2400+0+0/resize/1240x826!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 1240w,https://ca-times.brightspotcdn.com/dims4/default/b5d77b4/2147483647/strip/true/crop/3600x2400+0+0/resize/1440x960!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 1440w,https://ca-times.brightspotcdn.com/dims4/default/5334f0e/2147483647/strip/true/crop/3600x2400+0+0/resize/2160x1440!/format/webp/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 2160w" sizes="100vw">       <img alt="Battery storage units at the Los Angeles Department of Water and Power's biggest solar and battery storage plant." srcset="https://ca-times.brightspotcdn.com/dims4/default/f318a37/2147483647/strip/true/crop/3600x2400+0+0/resize/320x213!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 320w,https://ca-times.brightspotcdn.com/dims4/default/76e973b/2147483647/strip/true/crop/3600x2400+0+0/resize/568x379!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 568w,https://ca-times.brightspotcdn.com/dims4/default/15de2bf/2147483647/strip/true/crop/3600x2400+0+0/resize/768x512!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 768w,https://ca-times.brightspotcdn.com/dims4/default/5b5f7ac/2147483647/strip/true/crop/3600x2400+0+0/resize/1080x720!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 1080w,https://ca-times.brightspotcdn.com/dims4/default/7284bef/2147483647/strip/true/crop/3600x2400+0+0/resize/1240x826!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 1240w,https://ca-times.brightspotcdn.com/dims4/default/52e5d6e/2147483647/strip/true/crop/3600x2400+0+0/resize/1440x960!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 1440w,https://ca-times.brightspotcdn.com/dims4/default/169dbb7/2147483647/strip/true/crop/3600x2400+0+0/resize/2160x1440!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg 2160w" sizes="100vw" width="2000" height="1333" src="https://ca-times.brightspotcdn.com/dims4/default/fe38c1c/2147483647/strip/true/crop/3600x2400+0+0/resize/2000x1333!/quality/75/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff4%2F07%2F9b38950540828ad26a7fb2dd83b2%2F1484362-me-dwp-solar-battery-storage-plant-34-brv.jpg" decoding="async" loading="lazy">   </picture>   <div>   <p>Battery storage units at the Eland Solar and Storage Center in the Mojave Desert of Kern County on Nov. 25, 2024.</p>   <p>(Brian van der Brug / Los Angeles Times)</p>   </div>   </figure> </div><p>But Trump has made moves to support the production of batteries in the U.S. Currently, about three-quarters of the world’s batteries are made in China, and Trump’s tariffs — including a <a href="https://www.latimes.com/world-nation/story/2025-10-10/trump-threatens-tech-export-limits-new-100-tariff-on-chinese-imports-starting-nov-1-or-sooner">proposed 100% tariff on China</a> — have been good for at least one Sacramento-based battery manufacturer, Sparkz.</p><p>“The administration wants critical material manufacturing to happen in the U.S.,” said Sanjiv Malhotra, founder and chief executive. “They basically are very much in favor of domestic manufacturing of batteries.”</p><p>Sparkz is making lithium-iron batteries that don’t use nickel and cobalt — a composition that has long been an industry darling but that depends on imported metals. Instead, their lithium-iron-phosphate batteries have a supply chain that is entirely based in the U.S., which means they can take advantage of federal tax credits that favor the production of clean energy components made mostly of domestic parts, Malhotra said. The company’s clients include data centers and utilities. </p><p>Malhotra added that California has done an excellent job “beefing up” the grid’s storage capacity in the last few years. He said batteries are a major reason why the state hasn’t seen a Flex Alert since 2022.</p><p>“The numbers basically tell the story that it was all because of, essentially, energy storage,” he said.</p><p>There is still work to do. While the state’s grid has seen improvements, it is more than a century old and was built primarily for gas plants. Experts and officials agree that it needs additional substantial upgrades and reforms to meet current energy demands and goals. </p><p>Permitting is also a hurdle, as California typically requires lengthy environmental review for new projects. The state, <a href="https://www.latimes.com/california/story/2025-08-25/battery-solar-project-darden-fresno-county-community-impacts">sometimes controversially,</a> is now speeding review, and recently approved a massive solar and battery storage farm, the Darden Clean Energy Project in Fresno County, through a new fast-track permitting program. It will make enough electricity to power 850,000 homes for four hours, according to the California Energy Commission. </p><p>Safety remains a considerable concern. In January, a fire tore through one of the <a href="https://www.latimes.com/california/story/2025-01-26/horrifying-fire-at-california-battery-plant-sparks-call-for-new-clean-energy-rules">world’s largest battery storage facilities</a> in Moss Landing, Monterey County. The facility housed around 100,000 lithium-ion batteries, which are exceptionally dangerous when ignited because they burn extremely hot and cannot be extinguished with water, which can trigger a violent chemical reaction. The blaze emitted dangerous levels of <a href="https://www.latimes.com/california/story/2025-01-29/heavy-metals-found-in-monterey-estuary-after-moss-landing-lithium-battery-fire" data-autoplayable-video="true">nickel, cobalt and manganese</a> that were measured within miles of the site. </p><p>“When you’re dealing with large technologies in general, there’s always going to be some kind of danger,” said Leroy, of Lumenergy. “This points to the big need for diversifying the technologies that we use.”</p><p>Other forms of energy, such as oil and coal, also pose considerable health and safety risks including the emission of air pollution — soot, mercury, nitrogen dioxide and carbon dioxide contributing to climate change. </p><p>California is in the process of eliminating coal power and expects to be <a href="https://www.latimes.com/environment/newsletter/2025-10-02/boiling-point-california-quitting-coal">completely coal-free by November.</a> And while natural gas still makes up a large piece of the state’s portfolio, renewables represented nearly 60% of California’s in-state electricity generation in 2024, according to the U.S. Energy Information Administration. </p><p>The numbers continue to trend upward. In the first six months of this year, CAISO’s grid was powered by 100% clean energy for an average of <a href="https://www.gov.ca.gov/2025/07/14/in-historic-first-california-powered-by-two-thirds-clean-energy-becoming-largest-economy-in-the-world-to-achieve-milestone/" target="_blank">almost seven hours each day.</a> </p><p>“We have literally just demonstrated that California is able to run with super clean resources, with backups from natural gas,” said Kumar, of GridLab. “And it works. We don’t have Flex Alerts.”</p><div data-list-id="00000192-be43-dc88-abfe-fefbb2770003" data-module-id="00000192-be43-dc88-abfe-fefbb2770003" data-excluded-ids="00000198-7b22-d4e5-a7dc-7f2718c40000" data-click="enhancement" data-align-center="">  <p data-element="element-header" data-click="liZZListTitleCTA">  <h3 data-element="element-header-title" data-counter="3">More to Read </h3>  </p>      </div> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI, Wikipedia, and uncorrected machine translations of vulnerable languages (102 pts)]]></title>
            <link>https://www.technologyreview.com/2025/09/25/1124005/ai-wikipedia-vulnerable-languages-doom-spiral/</link>
            <guid>45706518</guid>
            <pubDate>Sat, 25 Oct 2025 19:57:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.technologyreview.com/2025/09/25/1124005/ai-wikipedia-vulnerable-languages-doom-spiral/">https://www.technologyreview.com/2025/09/25/1124005/ai-wikipedia-vulnerable-languages-doom-spiral/</a>, See on <a href="https://news.ycombinator.com/item?id=45706518">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content--body"><div> <p>When Kenneth Wehr started managing the Greenlandic-language version of Wikipedia four years ago, his first act was to delete almost everything. It had to go, he thought, if it had any chance of surviving.</p>  <p>Wehr, who’s 26, isn’t from Greenland—he grew up in Germany—but he had become obsessed with the island, an autonomous Danish territory, after visiting as a teenager. He’d spent years writing obscure Wikipedia articles in his native tongue on virtually everything to do with it. He even ended up moving to Copenhagen to study Greenlandic, a language spoken by some 57,000 mostly Indigenous Inuit people scattered across dozens of far-flung Arctic villages.&nbsp;</p> </div><div> <p>The Greenlandic-language edition was added to Wikipedia around 2003, just a few years after the site launched in English. By the time Wehr took its helm nearly 20 years later, hundreds of Wikipedians had contributed to it and had collectively written some 1,500 articles totaling over tens of thousands of words. It seemed to be an impressive vindication of the crowdsourcing approach that has made Wikipedia the go-to source for information online, demonstrating that it could work even in the unlikeliest places.&nbsp;</p>    <p>There was only one problem: The Greenlandic Wikipedia was a mirage.&nbsp;</p> </div><div> <p>Virtually every single article had been published by people who did not actually speak the language. Wehr, who now teaches Greenlandic in Denmark, speculates that perhaps only one or two Greenlanders had ever contributed. But what worried him most was something else: Over time, he had noticed that a growing number of articles appeared to be copy-pasted into Wikipedia by people using machine translators. They were riddled with elementary mistakes—from grammatical blunders to meaningless words to more significant inaccuracies, like an entry that claimed Canada had only 41 inhabitants. Other pages sometimes contained random strings of letters spat out by machines that were unable to find suitable Greenlandic words to express themselves.&nbsp;</p>  <p>“It might have looked Greenlandic to [the authors], but they had no way of knowing,” complains Wehr. </p> 
 <p>“Sentences wouldn’t make sense at all, or they would have obvious errors,” he adds. “AI translators are really bad at Greenlandic.”&nbsp;&nbsp;</p>  <p>What Wehr describes is not unique to the Greenlandic edition.&nbsp;</p> 
 <p>Wikipedia is the most ambitious multilingual project after the Bible: There are editions in over 340 languages, and a further 400 even more obscure ones are being developed and tested. Many of these smaller editions have been swamped with automatically translated content as AI has become increasingly accessible. Volunteers working on four African languages, for instance, estimated to <em>MIT Technology Review </em>that between 40% and 60% of articles in their Wikipedia editions were uncorrected machine translations. And after auditing the Wikipedia edition in Inuktitut, an Indigenous language close to Greenlandic that’s spoken in Canada, <em>MIT Technology Review </em>estimates that more than two-thirds of pages containing more than several sentences feature portions created this way.&nbsp;</p>  <p>This is beginning to cause a <a href="https://www.technologyreview.com/2024/06/26/1093692/book-review-technological-complexity-problems/">wicked problem</a>. AI systems, from Google Translate to ChatGPT, learn to “speak” new languages by scraping huge quantities of text from the internet. Wikipedia is sometimes the largest source of online linguistic data for languages with few speakers—so any errors on those pages, grammatical or otherwise, can poison the wells that AI is expected to draw from. That can make the models’ translation of these languages particularly error-prone, which creates a sort of linguistic doom loop as people continue to add more and more poorly translated Wikipedia pages using those tools, and AI models continue to train from poorly translated pages. It’s a complicated problem, but it boils down to a simple concept: <a href="https://www.technologyreview.com/2024/10/15/1105533/a-data-bottleneck-is-holding-ai-science-back-says-new-nobel-winner/">Garbage in, garbage out</a>.&nbsp;</p>  <p>“These models are built on raw data,” says Kevin Scannell, a former professor of computer science at Saint Louis University who now builds computer software tailored for endangered languages. “They will try and learn everything about a language from scratch. There is no other input. There are no grammar books. There are no dictionaries. There is nothing other than the text that is inputted.”</p>  <p>There isn’t perfect data on the scale of this problem, particularly because a lot of AI training data is kept confidential and the field continues to evolve rapidly. But back in 2020, Wikipedia was <a href="https://aclanthology.org/2020.lrec-1.325.pdf">estimated</a> to make up more than half the training data that was fed into AI models translating some languages spoken by millions across Africa, including Malagasy, Yoruba, and Shona. In 2022, a research team from Germany that looked into what data could be obtained by online scraping <a href="https://aclanthology.org/anthology-files/anthology-files/pdf/dclrl/2022.dclrl-1.5.pdf">even found</a> that Wikipedia was the sole easily accessible source of online linguistic data for 27 under-resourced languages.&nbsp;</p> </div><div> <p>This could have significant repercussions in cases where Wikipedia is poorly written—potentially pushing the most vulnerable languages on Earth toward the precipice as future generations begin to turn away from them.&nbsp;</p>  <p>“Wikipedia will be reflected in the AI models for these languages,” says Trond Trosterud, a computational linguist at the University of Tromsø in Norway, who has been raising the alarm about the potentially harmful outcomes of badly run Wikipedia editions for years. “I find it hard to imagine it will not have consequences. And, of course, the more dominant position that Wikipedia has, the worse it will be.”&nbsp;</p>  <h3>Use responsibly</h3>  <p>Automation has been built into Wikipedia since the very earliest days. Bots keep the platform operational: They repair broken links, fix bad formatting, and even correct spelling mistakes. These repetitive and mundane tasks can be automated away with little problem. There is even an army of bots that scurry around generating short articles about rivers, cities, or animals by slotting their names into formulaic phrases. They have generally made the platform better.&nbsp;</p>  <div> <p>But AI is different. Anybody can use it to cause massive damage with a few clicks.&nbsp;</p>    <p>Wikipedia has managed the onset of the AI era better than many other websites. It has not been flooded with AI bots or disinformation, as social media has been. It largely retains the innocence that characterized the earlier internet age. Wikipedia is open and free for anyone to use, edit, and pull from, and it’s run by the very same community it serves. It is transparent and easy to use. But community-run platforms live and die on the size of their communities. English has triumphed, while Greenlandic has sunk.&nbsp;</p> </div>  <p>“We need good Wikipedians. This is something that people take for granted. It is not magic,” says Amir Aharoni, a member of the volunteer Language Committee, which oversees requests to open or close Wikipedia editions. “If you use machine translation responsibly, it can be efficient and useful. Unfortunately, you cannot trust all people to use it responsibly.”&nbsp;</p> 

 <p>Trosterud has studied the behavior of users on small Wikipedia editions and says AI has empowered a subset that he terms “Wikipedia hijackers.” These users can range widely—from naive teenagers creating pages about their hometowns or their favorite YouTubers to well-meaning Wikipedians who think that by creating articles in minority languages they are in some way “helping” those communities.&nbsp;</p>  <p>“The problem with them nowadays is that they are armed with Google Translate,” Trosterud says, adding that this is allowing them to produce much longer and more plausible-looking content than they ever could before: “Earlier they were armed only with dictionaries.”&nbsp;</p>  <p>This has effectively industrialized the acts of destruction—which affect vulnerable languages most, since AI translations are typically far less reliable for them. There can be lots of different reasons for this, but a meaningful part of the issue is the relatively small amount of source text that is available online. And sometimes models struggle to identify a language because it is similar to others, or because some, including Greenlandic and most Native American languages, have structures that make them badly suited to the way most machine translation systems work. (Wehr notes that in Greenlandic most words are agglutinative, meaning they are built by attaching prefixes and suffixes to stems. As a result, many words are extremely context specific and can express ideas that in other languages would take a full sentence.)&nbsp;</p>  <p><a href="https://arxiv.org/pdf/2205.03983">Research produced</a> by Google before a major expansion of Google Translate rolled out three years ago found that translation systems for lower-resourced languages were generally of a lower quality than those for better-resourced ones. Researchers found, for example, that their model would often mistranslate basic nouns across languages, including the names of animals and colors. (In a statement to <em>MIT</em> <em>Technology Review</em>, Google wrote that it is “committed to meeting a high standard of quality for all 249 languages” it supports “by rigorously testing and improving [its] systems, particularly for languages that may have limited public text resources on the web.”)&nbsp;</p> </div><div> <p>Wikipedia itself offers a built-in editing tool called Content Translate, which allows users to automatically translate articles from one language to another—the idea being that this will save time by preserving the references and fiddly formatting of the originals. But it piggybacks on external machine translation systems, so it’s largely plagued by the same weaknesses as other machine translators—a problem that the Wikimedia Foundation says is hard to solve. It’s up to each edition’s community to decide whether this tool is allowed, and some have decided against it. (Notably, English-language Wikipedia has largely banned its use, claiming that some 95% of articles created using Content Translate failed to meet an acceptable standard without significant additional work.) But it’s at least easy to tell when the program has been used; Content Translate adds a tag on the Wikipedia back end.&nbsp;</p>  <p>Other AI programs can be harder to monitor. Still, many Wikipedia editors I spoke with said that once their languages were added to major online translation tools, they noticed a corresponding spike in the frequency with which poor, likely machine-translated pages were created.&nbsp;</p>  <p>Some Wikipedians using AI to translate content do occasionally admit that they do not speak the target languages. They may see themselves as providing smaller communities with rough-cut articles that speakers can then fix—essentially following the same model that has worked well for more active Wikipedia editions.&nbsp;&nbsp;</p>  <blockquote> <h2><strong>Google Translate, for instance, says the Fulfulde word for January means June, while ChatGPT says it’s August or September. The programs also suggest the Fulfulde word for “harvest” means “fever” or “well-being,” among other possibilities.&nbsp;&nbsp;</strong></h2> </blockquote>  <p>But once error-filled pages are produced in small languages, there is usually not an army of knowledgeable people who speak those languages standing ready to improve them. There are few readers of these editions, and sometimes not a single regular editor.&nbsp;</p> 
 <p>Yuet Man Lee, a Canadian teacher in his 20s, says that he used a mix of Google Translate and ChatGPT to translate a handful of articles that he had written for the English Wikipedia into Inuktitut, thinking it’d be nice to pitch in and help a smaller Wikipedia community. He says he added a note to one saying that it was only a rough translation. “I did not think that anybody would notice [the article],” he explains. “If you put something out there on the smaller Wikipedias—most of the time nobody does.”&nbsp;</p>  <p>But at the same time, he says, he still thought “someone might see it and fix it up”—adding that he had wondered whether the Inuktitut translation that the AI systems generated was grammatically correct. Nobody has touched the article since he created it.</p> 
 <p>Lee, who teaches social sciences in Vancouver and first started editing entries in the English Wikipedia a decade ago, says that users familiar with more active Wikipedias can fall victim to this mindset, which he terms a “bigger-Wikipedia arrogance”: When they try to contribute to smaller Wikipedia editions, they assume that others will come along to fix their mistakes. It can sometimes work. Lee says he had previously contributed several articles to Wikipedia in Tatar, a language spoken by several million people mainly in Russia, and at least one of those was eventually corrected. But the Inuktitut Wikipedia is, by comparison, a “barren wasteland.”&nbsp;</p>  <p>He emphasizes that his intentions had been good: He wanted to add more articles to an Indigenous Canadian Wikipedia. “I am now thinking that it may have been a bad idea. I did not consider that I could be contributing to a recursive loop,” he says. “It was about trying to get content out there, out of curiosity and for fun, without properly thinking about the consequences.”&nbsp;</p> </div><div> <h3>&nbsp;“Totally, completely no future”</h3>  <p>Wikipedia is a project that is driven by wide-eyed optimism. Editing can be a thankless task, involving weeks spent bickering with faceless, pseudonymous people, but devotees put in hours of unpaid labor because of a commitment to a higher cause. It is this commitment that drives many of the regular small-language editors I spoke with. They all feared what would happen if garbage continued to appear on their pages.</p>  <p>Abdulkadir Abdulkadir, a 26-year-old agricultural planner who spoke with me over a crackling phone call from a busy roadside in northern Nigeria, said that he spends three hours every day fiddling with entries in his native Fulfulde, a language used mainly by pastoralists and farmers across the Sahel. “But the work is too much,” he said.&nbsp;</p>  <p>Abdulkadir sees an urgent need for the Fulfulde Wikipedia to work properly. He has been suggesting it as one of the few online resources for farmers in remote villages, potentially offering information on which seeds or crops might work best for their fields in a language they can understand. If you give them a machine-translated article, Abdulkadir told me, then it could “easily harm them,” as the information will probably not be translated correctly into Fulfulde.&nbsp;</p>  <p>Google Translate, for instance, says the Fulfulde word for January means June, while ChatGPT says it’s August or September. The programs also suggest the Fulfulde word for “harvest” means “fever” or “well-being,” among other possibilities.&nbsp;&nbsp;</p> 
 <p>Abdulkadir said he had recently been forced to correct an article about cowpeas, a foundational cash crop across much of Africa, after discovering that it was largely illegible.&nbsp;</p>  <p>If someone wants to create pages on the Fulfulde Wikipedia, Abdulkadir said, they should be translated manually. Otherwise, “whoever will read your articles will [not] be able to get even basic knowledge,” he tells these Wikipedians. Nevertheless, he estimates that some 60% of articles are still uncorrected machine translations. Abdulkadir told me that unless something important changes with how AI systems learn and are deployed, then the outlook for Fulfulde looks bleak. “It is going to be terrible, honestly,” he said. “Totally, completely no future.”&nbsp;</p>  <p>Across the country from Abdulkadir, Lucy Iwuala contributes to Wikipedia in Igbo, a language spoken by several million people in southeastern Nigeria. “The harm has already been done,” she told me, opening the two most recently created articles. Both had been automatically translated via Wikipedia’s Content Translate and contained so many mistakes that she said it would have given her a headache to continue reading them. “There are some terms that have not even been translated. They are still in English,” she pointed out. She recognized the username that had created the pages as a serial offender. “This one even includes letters that are not used in the Igbo language,” she said.&nbsp;</p>  <p>Iwuala began regularly contributing to Wikipedia three years ago out of concern that Igbo was being displaced by English. It is a worry that is common to many who are active on smaller Wikipedia editions. “This is my culture. This is who I am,” she told me. “That is the essence of it all: to ensure that you are not erased.”&nbsp;</p> 
</div><div> <p>Iwuala, who now works as a professional translator between English and Igbo, said the users doing the most damage are inexperienced and see AI translations as a way to quickly increase the profile of the Igbo Wikipedia. She often finds herself having to explain at online edit-a-thons she organizes, or over email to various error-prone editors, that the results can be the exact opposite, pushing users away: “You will be discouraged and you will no longer want to visit this place. You will just abandon it and go back to the English Wikipedia.”&nbsp;&nbsp;</p>  <p>These fears are echoed by Noah Ha‘alilio Solomon, an assistant professor of Hawaiian language at the University of Hawai‘i. He reports that some 35% of words on some pages in the Hawaiian Wikipedia are incomprehensible. “If this is the Hawaiian that is going to exist online, then it will do more harm than anything else,” he says.&nbsp;</p>  <p>Hawaiian, which was teetering on the verge of extinction several decades ago, has been undergoing a recovery effort led by Indigenous activists and academics. Seeing such poor Hawaiian on such a widely used platform as Wikipedia is upsetting to Ha‘alilio Solomon.&nbsp;</p>  <p>“It is painful, because it reminds us of all the times that our culture and language has been appropriated,” he says. “We have been fighting tooth and nail in an uphill climb for language revitalization. There is nothing easy about that, and this can add extra impediments. People are going to think that this is an accurate representation of the Hawaiian language.”&nbsp;</p>  <p>The consequences of all these Wikipedia errors can quickly become clear. AI translators that have undoubtedly ingested these pages in their training data are now assisting in the production, for instance, of error-strewn AI-generated books aimed at learners of languages as diverse as Inuktitut <a href="https://www.aptnnews.ca/national-news/amazon-removes-questionable-plains-cree-language-book-after-being-contacted-by-aptn-news/">and Cree</a>, <a href="https://www.montrealgazette.com/news/article562709.html">Indigenous</a> languages spoken in Canada, and Manx, a small Celtic language spoken on the Isle of Man. Many of these have been popping up for sale on Amazon. “It was just complete nonsense,” says Richard Compton, a linguist at the University of Quebec in Montreal, of a volume he reviewed that had purported to be an introductory phrasebook for Inuktitut.&nbsp;</p>  <p>Rather than making minority languages more accessible, AI is now creating an ever expanding minefield for students and speakers of those languages to navigate. “It is a slap in the face,” Compton says. He worries that younger generations in Canada, hoping to learn languages in communities that have fought uphill battles against discrimination to pass on their heritage, might turn to online tools such as ChatGPT or phrasebooks on Amazon and simply make matters worse. “It is fraud,” he says.</p>  <h3>A race against time</h3>  <p>According to UNESCO, a language is declared extinct every two weeks. But whether the Wikimedia Foundation, which runs Wikipedia, has an obligation to the languages used on its platform is an open question. When I spoke to Runa Bhattacharjee, a senior director at the foundation, she said that it was up to the individual communities to make decisions about what content they wanted to exist on their Wikipedia. “Ultimately, the responsibility really lies with the community to see that there is no vandalism or unwanted activity, whether through machine translation or other means,” she said. Usually, Bhattacharjee added, editions were considered for closure only if a specific complaint was raised about them.&nbsp;</p>  <p>But if there is no active community, how can an edition be fixed or even have a complaint raised?&nbsp;</p> </div><div> <p>Bhattacharjee explained that the Wikimedia Foundation sees its role in such cases as about maintaining the Wikipedia platform in case someone comes along to revive it: “It is the space that we provide for them to grow and develop. That is where we are at.”&nbsp;&nbsp;&nbsp;</p>  <p>Inari Saami, spoken in a single remote community in northern Finland, is a poster child for how people can take good advantage of Wikipedia. The language was headed toward extinction four decades ago; there were only four children who spoke it. Their parents created the Inari Saami Language Association in a last-ditch bid to keep it going. The efforts worked. There are now several hundred speakers, schools that use Inari Saami as a medium of instruction, and 6,400 Wikipedia articles in the language, each one copy-edited by a fluent speaker.&nbsp;</p>  <p>This success highlights how Wikipedia can indeed provide small and determined communities with a unique vehicle to promote their languages’ preservation. “We don’t care about quantity. We care about quality,” says Fabrizio Brecciaroli, a member of the Inari Saami Language Association. “We are planning to use Wikipedia as a repository for the written language. We need to provide tools that can be used by the younger generations. It is important for them to be able to use Inari Saami digitally.”&nbsp;</p> </div><div> <p>This has been such a success that Wikipedia has been integrated into the curriculum at the Inari Saami–speaking schools, Brecciaroli adds. He fields phone calls from teachers asking him to write up simple pages on topics from tornadoes to Saami folklore. Wikipedia has even offered a way to introduce words into Inari Saami. “We have to make up new words all the time,” Brecciaroli says. “Young people need them to speak about sports, politics, and video games. If they are unsure how to say something, they now check Wikipedia.”</p>  <p>Wikipedia is a monumental intellectual experiment. What’s happening with Inari Saami suggests that with maximum care, it can work in smaller languages. “The ultimate goal is to make sure that Inari Saami survives,” Brecciaroli says. “It might be a good thing that there isn’t a Google Translate in Inari Saami.”&nbsp;</p>  <p>That may be true—though large language models like ChatGPT can be made to translate phrases into languages that more traditional machine translation tools do not offer. Brecciaroli told me that ChatGPT isn’t great in Inari Saami but that the quality varies significantly depending on what you ask it to do; if you ask it a question in the language, then the answer will be filled with words from Finnish and even words it invents. But if you ask it something in English, Finnish, or Italian and then ask it to reply in Inari Saami, it will perform better.&nbsp;</p>  <p>In light of all this, creating as much high-quality content online as can possibly be written becomes a race against time. “ChatGPT only needs a lot of words,” Brecciaroli says. “If we keep putting good material in, then sooner or later, we will get something out. That is the hope.” This is an idea supported by multiple linguists I spoke with—that it may be possible to end the “garbage in, garbage out” cycle. (OpenAI, which operates ChatGPT, did not respond to a request for comment.)</p>  <p>Still, <a href="https://www.technologyreview.com/2024/07/24/1095263/ai-that-feeds-on-a-diet-of-ai-garbage-ends-up-spitting-out-nonsense/">the overall problem is likely to grow and grow</a>, since many languages are not as lucky as Inari Saami—and their AI translators will most likely be trained on more and more AI slop. Wehr, unfortunately, seems far less optimistic about the future of his beloved Greenlandic.&nbsp;</p> </div><div><p>Since deleting much of the Greenlandic-language Wikipedia, he has spent years trying to recruit speakers to help him revive it. He has appeared in Greenlandic media and made social media appeals. But he hasn’t gotten much of a response; he says it has been demoralizing.&nbsp;</p>  <p>“There is nobody in Greenland who is interested in this, or who wants to contribute,” he says. “There is completely no point in it, and that is why it should be closed.”&nbsp;</p>  <p>Late last year, he began a process requesting that the Wikipedia Language Committee shut down the Greenlandic-language edition. Months of bitter debate followed between dozens of Wikipedia bureaucrats; some seemed to be surprised that a superficially healthy-seeming edition could be gripped by so many problems.&nbsp;</p>  <p>Then, earlier this month, Wehr’s proposal was accepted: Greenlandic Wikipedia is set to be shuttered, and any articles that remain will be moved into the Wikipedia Incubator, where new language editions are tested and built. Among the reasons cited by the Language Committee is the use of AI tools, which have “frequently produced nonsense that could misrepresent the language.”&nbsp;&nbsp;&nbsp;</p>  <p>Nevertheless, it may be too late—mistakes in Greenlandic already seem to have become embedded in machine translators. If you prompt either Google Translate or ChatGPT to do something as simple as count to 10 in proper Greenlandic, neither program can deliver.&nbsp;</p>  <p><em>Jacob Judah is an investigative journalist based in London.&nbsp;</em> </p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Shadcn/UI theme editor – Design and share Shadcn themes (113 pts)]]></title>
            <link>https://shadcnthemer.com</link>
            <guid>45706487</guid>
            <pubDate>Sat, 25 Oct 2025 19:51:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://shadcnthemer.com">https://shadcnthemer.com</a>, See on <a href="https://news.ycombinator.com/item?id=45706487">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><div><p><a href="https://shadcnthemer.com/"><img alt="ShadcnThemer" width="435" height="69" decoding="async" data-nimg="1" srcset="https://shadcnthemer.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flogo-3x.dfd90889.png&amp;w=640&amp;q=100&amp;dpl=dpl_Bq7LHZZ5qxzrzfqPftxSbpvHba1k 1x, https://shadcnthemer.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flogo-3x.dfd90889.png&amp;w=1080&amp;q=100&amp;dpl=dpl_Bq7LHZZ5qxzrzfqPftxSbpvHba1k 2x" src="https://shadcnthemer.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flogo-3x.dfd90889.png&amp;w=1080&amp;q=100&amp;dpl=dpl_Bq7LHZZ5qxzrzfqPftxSbpvHba1k"></a></p><p>Create, customize, and share beautiful themes for shadcn/ui. Build your perfect color palette with our intuitive theme editor.</p><p><a href="https://github.com/miketromba/shadcn-themer" target="_blank" rel="noopener noreferrer" data-slot="button"><svg xmlns="http://www.w3.org/2000/svg" role="img" viewBox="0 0 24 24"><title>GitHub</title><path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"></path></svg><span>GitHub</span></a></p></div><div><p><a href="https://shadcnthemer.com/terms">Terms of Service</a><a href="https://shadcnthemer.com/privacy">Privacy Policy</a><a href="https://shadcnthemer.com/contact">Contact Us</a></p></div></div><p>© <!-- -->2025<!-- --> ShadcnThemer.com. All rights reserved.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Journey Before main() (233 pts)]]></title>
            <link>https://amit.prasad.me/blog/before-main</link>
            <guid>45706380</guid>
            <pubDate>Sat, 25 Oct 2025 19:33:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://amit.prasad.me/blog/before-main">https://amit.prasad.me/blog/before-main</a>, See on <a href="https://news.ycombinator.com/item?id=45706380">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>A while back, I worked on a <a href="https://github.com/AmitPr/RISCuit" rel="nofollow">RISC-V-based userspace simulator</a> for fun. In doing so, taught myself a lot more than I wanted to know about what happens in-between when the Kernel is asked to run a program, and when the first line of our program’s <code>main</code> function is actually executed. Here’s a summary of that rabbit hole.</p> <h2>In the beginning…</h2> <p>First question: When is the OS kernel actually asked to run any program? The answer, at least on Linux, is the <code>execve</code> system call (“syscall”). Let’s take a quick look at that:</p> <!----><pre tabindex="0"><code><span><span>int</span><span> execve</span><span>(</span><span>const</span><span> char</span><span> *</span><span>filename</span><span>,</span><span> char</span><span> *</span><span>const</span><span> argv</span><span>[]</span><span>,</span><span> char</span><span> *</span><span>const</span><span> envp</span><span>[]</span><span>)</span><span>;</span></span></code></pre><!----> <p>This is actually quite straightforward! We pass the name of the exectuable file, a list of arguments, and a list of environment variables. This signals to the kernel where, and how, to start loading the program.</p> <p>Many programming languages provide an interface to execute commands that eventually call <code>execve</code> under the hood. For example, in Rust, we have:</p> <!----><pre tabindex="0"><code><span><span>use</span><span> std</span><span>::</span><span>process</span><span>::</span><span>Command</span><span>;</span></span>
<span></span>
<span><span>Command</span><span>::</span><span>new</span><span>(</span><span>"ls"</span><span>)</span><span>.</span><span>arg</span><span>(</span><span>"-l"</span><span>)</span><span>.</span><span>spawn</span><span>();</span></span></code></pre><!----> <p>In these higher-level wrappers, the language’s standard library often handles translation of the command name to a full path, acting similarly to how a shell would resolve the command via the <code>PATH</code> environment variable. The kernel itself, however, expects a proper path to an executable file.</p> <blockquote><p>A note on interpreters: If the executable file starts with a shebang (<code>#!</code>), the kernel will use the shebang-specified interpreter to run the program. For example, <code>#!/usr/bin/python3</code> will run the program using the Python interpreter, <code>#!/bin/bash</code> will run the program using the Bash shell, etc.</p></blockquote> <h2>ELF</h2> <p>What does an executable file look like? On Linux, it’s <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format" rel="nofollow">ELF</a>, which the kernel knows how to parse. Other operating systems have different formats (e.g. Mach-O on MacOS, PE on Windows), but ELF is the most common format on Linux. I won’t go into too much detail here, to keep things brief, but ELF files have grown out of the original <code>a.out</code> format, and are expressive enough to support pretty much every program you’ll ever write. Here’s what the header of an ELF file looks like:</p> <!----><pre tabindex="0"><code><span><span>%</span><span> readelf</span><span> -h</span><span> main</span><span> # main is an ELF file</span></span>
<span><span>ELF</span><span> Header:</span></span>
<span><span>  Magic:</span><span>   7f</span><span> 45</span><span> 4c</span><span> 46</span><span> 01</span><span> 01</span><span> 01</span><span> 03</span><span> 00</span><span> 00</span><span> 00</span><span> 00</span><span> 00</span><span> 00</span><span> 00</span><span> 00</span></span>
<span><span>  Class:</span><span>                             ELF32</span></span>
<span><span>  Data:</span><span>                              2</span><span>'s complement, little endian</span></span>
<span><span>  Version:                           1 (current)</span></span>
<span><span>  OS/ABI:                            UNIX - GNU</span></span>
<span><span>  ABI Version:                       0</span></span>
<span><span>  Type:                              EXEC (Executable file)</span></span>
<span><span>  Machine:                           RISC-V</span></span>
<span><span>  Version:                           0x1</span></span>
<span><span>  Entry point address:               0x10358</span></span>
<span><span>  Start of program headers:          52 (bytes into file)</span></span>
<span><span>  Start of section headers:          675776 (bytes into file)</span></span>
<span><span>  Flags:                             0x1, RVC, soft-float ABI</span></span>
<span><span>  Size of this header:               52 (bytes)</span></span>
<span><span>  Size of program headers:           32 (bytes)</span></span>
<span><span>  Number of program headers:         7</span></span>
<span><span>  Size of section headers:           40 (bytes)</span></span>
<span><span>  Number of section headers:         32</span></span>
<span><span>  Section header string table index: 31</span></span></code></pre><!----> <p>The important parts here are:</p> <ol><li>The “ELF Magic” bytes, which tell the kernel that this is, indeed, an ELF file. <code>45 4c 46</code> is ASCII for “ELF”!</li> <li>“Class” tells us we’re dealing with a 32-bit executable.</li> <li>“Start of …” tells us <em>where</em> things are in the file, and “Size of …” tells us how big they are; The kernel is effectively given a map of the file.</li> <li>“Entry point address” — Relatively self-explanatory! But we’ll be coming back to this.</li></ol> <p>Other ELF files will have different entries and specific values, but the general structure is what we’re after here.</p> <blockquote><p>As you can see by the numerous mentions to “RISC-V”, this is an ELF file I compiled and linked targeting the RV32 architecture (which the aforementioned emulator is built for), hence the “32” in “ELF32”, the “RVC” flag, and the “RISC-V” machine type.</p></blockquote> <h3>More than just a header</h3> <p>ELF files contain everything our program needs to run, including the code, data, symbols, and more. We can see this again with the <code>readelf</code> command with the <code>-a</code> flag. Here’s what we care about:</p> <!----><pre tabindex="0"><code><span><span>Section Headers:</span></span>
<span><span>  [Nr] Name              Type            Addr     Off    Size</span></span>
<span><span>  [ 0]                   NULL            00000000 000000 000000</span></span>
<span><span>  [ 1] .note.ABI-tag     NOTE            00010114 000114 000020</span></span>
<span><span>  [ 2] .rela.plt         RELA            00010134 000134 00000c</span></span>
<span><span>  [ 3] .plt              PROGBITS        00010140 000140 000010</span></span>
<span><span>  [ 4] .text             PROGBITS        00010150 000150 03e652</span></span>
<span><span>  [ 5] .rodata           PROGBITS        0004e7b0 03e7b0 01b208</span></span>
<span><span>  ...</span></span>
<span><span>  [16] .data             PROGBITS        0007a008 069008 000dec</span></span>
<span><span>  [17] .sdata            PROGBITS        0007adf4 069df4 000004</span></span>
<span><span>  [18] .bss              NOBITS          0007adf8 069df8 002b6c</span></span>
<span><span>  ...</span></span>
<span><span>  [29] .symtab           SYMTAB          00000000 095124 009040</span></span>
<span><span>  [30] .strtab           STRTAB          00000000 09e164 006d10</span></span></code></pre><!----> <p>These sections contain code (<code>.text</code>), data (<code>.data</code>), space for global variables (<code>.bss</code>), shims for accessing shared library functions (<code>.plt</code>), and quite a bit more (including symbol tables for debugging, relocation tables, etc.), most of which we won’t be discussing.</p> <p>So evidently, there’s some code that we care about in the <code>.text</code> section, so we copy that and call it a day? Not quite. There’s a massive amount of machinery inside the kernel to make all sorts of programs under all sorts of conditions run.</p> <p>For example, the “PLT” (Procedure Linkage Table) is a section that allows us to call functions in “shared libraries”, for example, <code>libc</code>, without having to package them alongside our program (“dynamically” vs “statically linking”). The ELF file contains a dynamic section which tells the kernel which shared libraries to load, and another section which tells the kernel to dynamically “relocate” pointers to those functions, so everything checks out.</p> <blockquote><p><code>libc</code> is the C standard library, which contains all the “useful” functions: <code>printf</code>, <code>malloc</code>, etc. Various flavors implementing the <code>libc</code> interfaces exist, most commonly <code>glibc</code> and <code>musl</code>. Most of the binaries that are discussed in this post are compiled and linked against <code>musl</code>, since it’s much easier to statically link.</p></blockquote> <p>The symbol table looks something like this:</p> <!----><pre tabindex="0"><code><span><span>Symbol table '.symtab' contains 2308 entries:</span></span>
<span><span>   Num:    Value  Size Type    Bind   Vis      Ndx Name</span></span>
<span><span>     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND</span></span>
<span><span>     1: 00010114     0 SECTION LOCAL  DEFAULT    1 .note.ABI-tag</span></span>
<span><span>     2: 00010134     0 SECTION LOCAL  DEFAULT    2 .rela.plt</span></span>
<span><span>     3: 00010140     0 SECTION LOCAL  DEFAULT    3 .plt</span></span>
<span><span>     4: 00010150     0 SECTION LOCAL  DEFAULT    4 .text</span></span>
<span><span>     ...</span></span>
<span><span>     1782: 00010358    30 FUNC    GLOBAL HIDDEN     4 _start</span></span>
<span><span>     ...</span></span>
<span><span>     1917: 00010430    52 FUNC    GLOBAL DEFAULT    4 main</span></span>
<span><span>     2201: 00010506   450 FUNC    GLOBAL HIDDEN     4 __libc_start_main</span></span>
<span><span>     ...</span></span></code></pre><!----> <p>You may ask: “Wow! <code>2308</code> looks like a lot, right? What behemoth of a program could possibly need that many symbols?“.</p> <p>Good question! Here’s the behemoth:</p> <!----><pre tabindex="0"><code><span><span>#include</span><span> &lt;stdio.h&gt;</span></span>
<span></span>
<span><span>int</span><span> main</span><span>() {</span></span>
<span><span>  printf</span><span>(</span><span>"Hello, World!</span><span>\n</span><span>"</span><span>)</span><span>;</span></span>
<span><span>  return</span><span> 0</span><span>;</span></span>
<span><span>}</span></span></code></pre><!----> <p>Yeah, that’s it. Now, <code>2308</code> may be <em>slightly</em> bloated because we link against <code>musl</code> instead of <code>glibc</code>, but the point still stands: There’s <em>a lot</em> of stuff going on behind the scenes here.</p> <p>The kernel’s job here is to iterate over each section, loading those marked as “loadable”. Some security mitigations start to become relevant here, such as moving sections around in memory (ASLR — Address Space Layout Randomization), marking sections as non-executable (NX bit — hardware-level security), etc. But ultimately, the kernel loads the code and data into memory, sets up the stack, and prepares to jump to the entry point of the program.</p> <h2>The stack</h2> <p>Ah yes, the infamous stack! Fortunately for most of us, the stack is something we take for granted. Unfortunately for the kernel, the stack is not some omnipotent magical space that just exists — it needs to be set up properly before our program can run.</p> <p>As a reminder: stack space is typically used for variables, function arguments, “frames” (to keep track of function-local variables, call trees, etc), and a variety of other things, depending on what, and how your program is running.</p> <p>Hypothetically, if we simplify a bit and say that the ELF file is loaded into memory starting at the zero address, the stack is typically placed at the “opposite end” of the memory, from a high address, and grows “downwards” towards the lower addresses, with the space in-between used as heap space, and for other data (shared libraries, mmapped files, etc). This is a simplification, but in fairness, there is significant ambiguity as much of the semantics here depend on the program itself.</p> <p>The stack is also something that is non-empty! Remember <code>argv</code> and <code>envp</code> from the <code>execve</code> call above? Those are passed to the program via the stack. In most programming languages we frequently access these via the various <code>args</code> and <code>env</code> utilities, whether that be directly, like in C, or more indirectly, like in Rust (<code>std::env</code>) or Python (<code>sys.argv</code>).</p> <p>The kernel also stores something called the “ELF auxiliary vector” in the nascent stack. This “auxv” contains information about the environment, such as the memory page size, metadata from the ELF file, and other system information. These are important! For example, <code>musl</code> uses the “page size” entry of the auxv so that <code>malloc</code> can request and manage memory more optimally. There are over 30 entries in the auxiliary vectors, but not all of them are used by every program (and some may not be defined by the kernel).</p> <p>Let’s pretend we’re the kernel. Here’s a simplified version of how we might setup the stack of a new process (taken and simplified from my RISC-V emulator, which also emulates parts of the kernel):</p> <!----><pre tabindex="0"><code><span><span>// Choose an arbitrary high address for the stack</span></span>
<span><span>let</span><span> mut</span><span> sp </span><span>=</span><span> 0xCFFF_F000</span><span>u32</span><span>; </span><span>// sp = "stack pointer"</span></span>
<span><span>let</span><span> mut</span><span> stack_init</span><span>:</span><span> Vec</span><span>&lt;</span><span>u32</span><span>&gt; </span><span>=</span><span> vec!</span><span>[]; </span><span>// The stack begins empty.</span></span>
<span></span>
<span><span>stack_init</span><span>.</span><span>push</span><span>(args</span><span>.</span><span>len</span><span>()); </span><span>// argc: number of arguments</span></span>
<span><span>for</span><span> &amp;</span><span>arg </span><span>in</span><span> args</span><span>.</span><span>iter</span><span>()</span><span>.</span><span>rev</span><span>() {</span></span>
<span><span>    // Copy each argument to the stack</span></span>
<span><span>    sp </span><span>-=</span><span> arg</span><span>.</span><span>len</span><span>() </span><span>// move "downwards" in address space</span></span>
<span><span>    mem</span><span>.</span><span>copy_to</span><span>(sp, arg);</span></span>
<span></span>
<span><span>    // Keep track of the arg pointer in the init vector</span></span>
<span><span>    stack_init</span><span>.</span><span>push</span><span>(sp);</span></span>
<span><span>}</span></span>
<span><span>stack_init</span><span>.</span><span>push</span><span>(</span><span>0</span><span>); </span><span>// argv NULL terminator</span></span>
<span></span>
<span><span>// Environment variables are similar:</span></span>
<span><span>for</span><span> &amp;</span><span>e </span><span>in</span><span> env</span><span>.</span><span>iter</span><span>()</span><span>.</span><span>rev</span><span>() {</span></span>
<span><span>    sp </span><span>-=</span><span> e</span><span>.</span><span>len</span><span>();</span></span>
<span><span>    mem</span><span>.</span><span>copy_to</span><span>(sp, e);</span></span>
<span></span>
<span><span>    stack_init</span><span>.</span><span>push</span><span>(sp);</span></span>
<span><span>}</span></span>
<span><span>stack_init</span><span>.</span><span>push</span><span>(</span><span>0</span><span>); </span><span>// envp NULL terminator</span></span>
<span></span>
<span><span>// Setup the auxiliary vector</span></span>
<span><span>stack_init</span><span>.</span><span>push</span><span>(</span><span>libc_riscv32</span><span>::</span><span>AT_PAGESZ</span><span>); </span><span>// Keys for auxv</span></span>
<span><span>stack_init</span><span>.</span><span>push</span><span>(</span><span>0x1000</span><span>); </span><span>// Values for auxv; this specifies a 4 KiB page size</span></span>
<span><span>stack_init</span><span>.</span><span>push</span><span>(</span><span>libc_riscv32</span><span>::</span><span>AT_ENTRY</span><span>);</span></span>
<span><span>stack_init</span><span>.</span><span>push</span><span>(</span><span>self</span><span>.</span><span>pc); </span><span>// N.B.: We'll be coming back to this</span></span>
<span><span>// ...</span></span>
<span></span>
<span><span>// Copy the stack init vector, with all the pointers, to the stack</span></span>
<span><span>sp </span><span>-=</span><span> (stack_init</span><span>.</span><span>len</span><span>() </span><span>*</span><span> 4</span><span>);</span></span>
<span></span>
<span><span>mem</span><span>.</span><span>copy_to</span><span>(sp, </span><span>&amp;</span><span>stack_init)</span></span></code></pre><!----> <p>A diagram might help illustrate what the address space looks like at this point:</p> <!----> <h2>Entrypoint</h2> <p>Finally, we get to the “entry point” address, mentioned at several points. This is the address of the first instruction to run in the process. Typically, this is under a function called <code>_start</code>. Both glibc and musl provide implementations of <code>_start</code>, but it’s also possible to write your own. Again, here’s a Rust example:</p> <!----><pre tabindex="0"><code><span><span>// Disable the language runtime, we're DIYing it.</span></span>
<span><span>#![no_std]</span></span>
<span><span>#![no_main]</span></span>
<span></span>
<span><span>#[panic_handler]</span></span>
<span><span>fn</span><span> panic</span><span>(_info</span><span>:</span><span> &amp;</span><span>core</span><span>::</span><span>panic</span><span>::</span><span>PanicInfo</span><span>) </span><span>-&gt;</span><span> !</span><span> {</span></span>
<span><span>    loop</span><span> {}</span></span>
<span><span>}</span></span>
<span></span>
<span><span>#[no_mangle]</span></span>
<span><span>pub</span><span> extern</span><span> "C"</span><span> fn</span><span> _start</span><span>() </span><span>-&gt;</span><span> !</span><span> {</span></span>
<span><span>    // Instead of "waiting" for main, we can immediately start execution.</span></span>
<span><span>    loop</span><span> {}</span></span>
<span><span>}</span></span></code></pre><!----> <p>Depending on your program, <code>_start</code> may be the only thing between the entrypoint and your main function, but most languages have some sort of runtime that needs to be initialized first. For example, Rust has <code>std::rt::lang_start</code>. It’s at this part that things like global constructors, thread-local storage, and other language-specific features are set up.</p> <p>Here, our journey comes to an end — things become much more language-specific from this point on. Most languages will set up their own runtimes (yes, even C and C++ have a “runtime”!), and eventually call the standard <code>main</code> function we’re normally familiar with.</p> <p>In Rust, the generated code ends up looking like the following:</p> <!----><pre tabindex="0"><code><span><span>// the user defined main function</span></span>
<span><span>fn</span><span> main</span><span>() { </span><span>println!</span><span>(</span><span>"Hello, world!"</span><span>); }</span></span>
<span></span>
<span><span>// the generated _start function</span></span>
<span><span>fn</span><span> _start</span><span>() </span><span>-&gt;</span><span> {</span></span>
<span><span>    let</span><span> argc </span><span>=</span><span> ...</span><span>; </span><span>// get argc from stack</span></span>
<span><span>    let</span><span> argv </span><span>=</span><span> ...</span><span>; </span><span>// get argv from stack</span></span>
<span><span>    let</span><span> envp </span><span>=</span><span> ...</span><span>; </span><span>// get envp from stack</span></span>
<span><span>    let</span><span> main_fn </span><span>=</span><span> main; </span><span>// pointer to user main function</span></span>
<span><span>    std</span><span>::</span><span>rt</span><span>::</span><span>lang_start</span><span>(argc, argv, main_fn);</span></span>
<span><span>}</span></span></code></pre><!----> <p>With the <code>lang_start</code> function (defined here)[https://github.com/rust-lang/rust/blob/04ff05c9c0cfbca33115c5f1b8bb20a66a54b799/library/std/src/rt.rs#L199] and taking care of the rest.</p> <p>C and C++ have similar, minimal setups. Languages that are traditionally thought to have “heavier” runtimes, such as Java or Python, work the same way, but with the <code>std::rt::lang_start</code> equivalent doing far more than the Rust/C/C++ runtimes.</p> <p>And there you have it! I’m missing lots of detail here, but hopefully this gives a rough idea of what happens before <code>main()</code> gets called. I’ve left out complexity that is mostly internal to “real” linux kernels, such as how the kernel sets up address space, the process tables, various group semantics, and et cetera, but I hope this still serves as a decent primer.</p> <p>Feel free to reach out to me with any questions or corrections!</p><!----></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Libera Chat receives legal advice that the Online Safety Act does not apply to (250 pts)]]></title>
            <link>https://libera.chat/news/advised</link>
            <guid>45705381</guid>
            <pubDate>Sat, 25 Oct 2025 17:07:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://libera.chat/news/advised">https://libera.chat/news/advised</a>, See on <a href="https://news.ycombinator.com/item?id=45705381">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
  
  
  

  <p>
    <a href="https://libera.chat/news/advised"><time pubdate="" datetime="2025-10-25">25th October 2025</time></a>
    
    by She
    
  </p>

  
  <p>First of all, a <em>massive</em> thank you to everyone who donated since
<a href="https://libera.chat/news/advice">our last post</a>. Our income on <a href="https://liberapay.com/liberachat">Liberapay</a> has roughly
quadrupled from what it was before the post. We have also had people reach out
to us for large one-time monetary and hardware donations. Your support is
truly appreciated!</p>

<p>And now for a followup from our last post. TL;DR: the legal firm we’ve engaged
has sent us a memo indicating that in their opinion <strong>we can reasonably argue
we do not have sufficient links to the UK for the Online Safety Act to be
applicable to us</strong>. They also believe we would be at low risk of attempted
enforcement action even if <a href="https://en.wikipedia.org/wiki/Ofcom">Ofcom</a> does
consider us to be in-scope for the OSA. We will continue to ensure that this
is the case by keeping internal estimates of our UK user base and by
continuing with our current efforts to keep Libera.Chat reasonably safe. We
have no plans to institute any ID requirements for the forseeable future.</p>

<p>If that’s all you wanted to know, then feel free to stop here.
However, we feel it’s in the best interest of online communities
like ours for us to summarise the advice we were given in hopes that it
will be useful to others. <strong>This is not legal advice from us to you.
This advice was provided to Libera Chat as an assessment of our specific
case. We accept no responsibility if you decide to apply advice given to us
to your own online service.</strong></p>

<h2 id="why-does-this-even-matter">Why does this even matter?</h2>

<p>You might be asking why we’ve even bothered to get legal advice on this
matter. Libera Chat (the non-profit that runs the Libera.Chat IRC network)
is based in Sweden. Our bank is Swedish, and we do not rely on any UK-based
payment providers. We have a few servers in the UK, but they can be migrated
on short notice. In other words, the British government has relatively little
authority over us. The most damaging action they can reasonably take is to
instruct internet service providers in the UK to deny access to us.</p>

<p>Relatedly, some online communities have decided that they want to minimise
the authority the British government has over them. In response to critical
analyses of the OSA pointing out its potential for regulatory overreach,
some online communities have taken the understandable precaution of entirely
blocking access from known UK IP addresses, thus cutting off any reasonable
argument that they somehow have links to the UK (more on that later).</p>

<p>The end result is the same: a denial of service to people in the UK solely
because of the country they live in. It’s not an insurmountable barrier to
access in either case, but it shouldn’t be necessary for individuals in the
UK to look into censorship-defeating proxies just to engage with
free software developers and peer-directed projects that choose to have a
community on our IRC network. It doesn’t serve our users, it doesn’t serve
our communities, and it doesn’t serve the UK open source movement.
Therefore, it’s in everyone’s best interest for us look into what’s necessary
to keep things from getting to the point where users in the UK cannot access
Libera.Chat, and that means getting guidance on the OSA.</p>

<h2 id="who-does-the-osa-apply-to">Who does the OSA apply to?</h2>

<p>As the OSA is fairly vague in its definitions, Ofcom has
significant latitude in deciding where the thresholds are for whether an
organisation meets certain criteria or not. Ofcom also hasn’t been forthcoming
with its opinions on where those thresholds are, so there are relatively few
hard guarantees about the applicability of the OSA. Still, there is a strong
argument that while we definitely meet one of the criteria for the OSA to
apply to us, we do not meet the other.</p>

<p>The OSA applies to online service providers that provide a regulated service
<em>and</em> have links to the UK. We unarguably provide a regulated service because
Libera.Chat is a so-called U2U service, i.e. it “allows
‘user-generated content’ to be encountered by another user of the service”.
This is an incredibly broad class of services. Some exceptions are made for
user content that is posted in relation to service content
(e.g. the comment section of a blog) and a few other service types,
but none of them reasonably apply to us. <strong>Every chat service, forum,
federated social media server, or code forge counts as a regulated service</strong>,
and therefore meets one of the criteria for the OSA to apply to them.</p>

<p>So be it. What about our links to the UK? To quote the memo:</p>

<blockquote>
  <p>An online service provider has “links to the UK” for the purposes of the OSA
if any one or more of the following apply:</p>

  <ul>
    <li>the service has a “significant number of UK users”</li>
    <li>UK users form a “target market” of the service; or</li>
    <li>the service is capable of being used by individuals in the UK,
and there are reasonable grounds to believe that there is a material risk
of significant harm to individuals in the UK presented by the content
generated by the service.</li>
  </ul>
</blockquote>

<p>One factor that does <em>not</em> automatically give us links to the UK is the fact
that we have staff members in the UK. Curiously, employees of the
service provider who do not engage with that service as users are actually
excluded for the purposes of determining whether a service has a
“significant number of UK users”. Our staffers are also users, but our
UK staffers make up an insignificant portion of our user base.</p>

<p>Speaking of which, the memo implies that “significance” in this context is
interpreted as being relative to the population of the UK, <em>not</em> relative to
the user base of the service. We have seen risk assessments that take the
other interpretation and consider their UK user base to be “significant”
because it makes up a large portion of their overall user base, but the advice
we received suggests we should not use this interpretation. The exact fraction
of the UK’s online population that must use a given service to be considered
“significant” is unknown, but based on our counsel’s observations of Ofcom’s
previous regulatory actions, it appears to be much higher than our internal
estimates of how large our UK user base is.</p>

<p>The “target market” criterion is meant to capture services with a low number
of UK users that target the UK <em>specifically</em>. While our target market
(people interested in using an IRC-based platform for discussing free
software or other peer-directed projects) is inclusive of UK users, it isn’t
<em>specifically</em> for them. Our network is predominantly English-speaking, but
we do not promote, direct, or tailor our service to UK users in particular.</p>

<p>Finally, there is no atypical material risk of significant harm to
individuals in the UK presented by the messages on Libera.Chat. We block spam
and client exploits. We are proactive in ensuring that our network’s
<a href="https://libera.chat/policies/#unwanted-content-and-behaviour">acceptable use policy</a> is upheld. We do not tolerate incitement to
violence, doxxing, or defamation. And finally, we do not provide file hosting
that can be used to distribute pornographic or sexual abuse media, though when
we sought legal advice from the firm, we acknowledged the existence of DCC
as a commonly-supported mechanism for transferring files using an IRC network
to establish a peer-to-peer connection.</p>

<p>In the coming weeks, we will be finalising a statement
<a href="https://onlinesafetyact.co.uk/ra_irc_service_for_customer_support/">similar to this risk assessment</a> that we can provide to
Ofcom should we ever be contacted by them about the OSA.</p>

<h2 id="what-if-the-osa-does-apply-to-us">What if the OSA does apply to us?</h2>

<p>While it is our opinion that the OSA does not apply to us, Ofcom might
disagree, and appealing that disagreement would likely involve further
legal expenses. So, what is the risk that Ofcom would decide to try to
impose fines or other regulatory penalties on us?</p>

<p>For the time being, services like ours do not appear to be Ofcom’s priority.
Currently, according to our legal sources, the focus appears to be file and
image hosts that are at high risk of being used to transmit sexually-explicit
depictions of minors. IRC has been used as a way to facilitate piracy, but
those days are generally in the past thanks to more attractive options. Even
if they weren’t, using Libera.Chat for this purpose is risky. We prefer to
exercise the minimum power necessary to keep the network clean, but that
doesn’t mean we don’t have the tools necessary to proactively stop the network
from being used for piracy or CSAM distribution.</p>

<p>We have also been reassured that Ofcom is very likely to contact us with
concerns before attempting any sort of action against us. There are some
classes of concerns that we would certainly be willing to hear out,
and we do prefer a constructive approach to problem resolution where possible.
We’re confident that there isn’t anything for them to be reasonably
concerned about, but we are willing to engage with good-faith reports of
potential abuse of our service.</p>

<h2 id="will-liberachat-ever-require-my-id">Will Libera.Chat ever require my ID?</h2>

<p>We have no plans to require users to provide us with proof of identity
and will take every reasonable measure to avoid requiring it.
The justification for us to compromise the privacy of our users
given <a href="https://libera.chat/policies/#unwanted-content-and-behaviour">the content we forbid on Libera.Chat</a> is not adequate,
and the risk of material harm should an identity verification mechanism
compromise our users’ privacy far outweighs the plausible harms caused by
not having such a system. Such violations of privacy aren’t hypothetical;
another chat platform recently was affected by a data breach that potentially
exposed the legal identities of <a href="https://discord.com/press-releases/update-on-security-incident-involving-third-party-customer-service">tens of thousands of its users</a>.</p>

<p>That said, it’s conceivable that legislation will be created that could apply
to us and could force us to identify or spy on our users.
If that happens, we will evaluate our options once drafts of such legislation
reach a point where they can conceivably pass. Until then, we hope that the
general public will remain vocally opposed to such attempts at overreach.
Popular opposition
<a href="https://www.patrick-breyer.de/en/citizen-protest-halts-chat-control-breyer-celebrates-major-victory-for-digital-privacy/">stalled Chat Control earlier this month</a>.
There will probably always be efforts to compromise the free internet,
but their success is not inevitable.</p>


  
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rock Tumbler Instructions (181 pts)]]></title>
            <link>https://rocktumbler.com/tips/rock-tumbler-instructions/</link>
            <guid>45705125</guid>
            <pubDate>Sat, 25 Oct 2025 16:32:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rocktumbler.com/tips/rock-tumbler-instructions/">https://rocktumbler.com/tips/rock-tumbler-instructions/</a>, See on <a href="https://news.ycombinator.com/item?id=45705125">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>

<div><br><h3>Directions for Turning Rough Rocks into Beautiful Tumbled Stones</h3></div>

<section>
<div><center><img src="https://rocktumbler.com/300/polished-stones-in-barrel.jpg" alt="rock tumbler barrel and tumbled stones"><p>Working to transform rough rock into beautiful tumbled stones gives most people a great feeling of accomplishment. It doesn't matter how old you are or how many batches of rock you have tumbled in the past - when you finish the last tumbling step, rinse off the polish, and see a super-bright luster on colorful polished stones - you are amazed at what you have done.</p></center></div>

<h2>Rock Tumbling Is Easy</h2>
<p>

Using a <a href="https://rocktumbler.com/rotary.shtml">rock tumbler</a> to convert <a href="https://rocktumbler.com/rough/">rough rock</a> into sparkling <a href="https://rocktumbler.com/gemstones/">tumbled stones</a> is easy if you follow a simple procedure and observe a few rules. We are writing this to share the procedure that we have used for many years with a number of <a href="https://rocktumbler.com/rotary.shtml">rotary tumblers</a>. 
</p><p>

This procedure works well with materials that have the following properties:
</p><ul>
<li> of adequate quality to accept a polish</li>
<li> a  <a href="https://rocktumbler.com/tips/mohs-hardness/">Mohs hardness</a> between 6 and 7</li>
<li> a size between 3/8" and 1 1/2"</li>
</ul>


Listed below are some of the most commonly tumbled materials that perform well using the instructions detailed below.   
<h3>Chalcedony</h3>: agate, bloodstone, carnelian, chrysoprase, jasper, chert, flint, and petrified (silicified) wood.
<h3>Quartz</h3>:  amethyst, aventurine, citrine, milky quartz, rock crystal, rose quartz, smoky quartz, tiger's-eye.
<h3>Rock Types</h3>:  andesite, basalt, diorite, gabbro, granite, mookaite, novaculite, quartzite, unakite.
<br>
</section>
<br>




<section>
<h2>The "Golden Rules" of Rock Tumbling</h2>
<p>

We follow three "Golden Rules" in all aspects of rock tumbling.  They are:
</p><ol>
<li> "Garbage in means garbage out"</li>
<li> "Avoid contamination"</li>
<li> "Great results take time."</li>
</ol>

Information on each of these rules is provided below.
<div><center><img src="https://rocktumbler.com/polished-rough.jpg" alt="tumbler rough and polished stones"><p>Tumbling will enable you to turn the <a href="https://rocktumbler.com/rough/">rough rock</a> on the left side of this photo into the sparkling <a href="https://rocktumbler.com/gemstones/">tumbled stones</a> on the right side of the photo. The results are amazing!</p></center></div>


<h3>"Garbage in Means Garbage Out"</h3>
<p>

If you start with garbage (low-quality rough), you should expect low-quality tumbled stones.  So, don't hesitate to discard a rock that is porous, fractured, misshapen, or that is  not expected to produce an attractive tumbled stone.
</p><p>

You will spend a lot of time and valuable supplies tumbling a batch of rocks.  Using quality rough saves time,  gives you better value for your money, and produces <a href="https://rocktumbler.com/gemstones/tumbled-stones.shtml">tumbled stones</a> that are of much higher quality. 
</p><p>

We buy lots of tumbling rough from online vendors as part of our hobby and to educate ourselves.  We have the best experience buying rough from vendors who:  1) provide clear written descriptions and large clear photos of the rough they are selling, 2) show photos of tumbled stones that they produced themselves from the rock they are selling, and, 3) provide a detailed description of the steps that they followed to tumble the stones.  We have the best experience buying rough from people who are actively involved in rock tumbling.  
</p></section>




<section>
<h3>"Avoid Contamination"</h3>
<p>

You will use a different size <a href="https://rocktumbler.com/grit.shtml">tumbler grit</a> for each step of the tumbling process.  If coarse grit gets into your medium grit step, it will scratch up the rocks and you might need to do the medium grit step over again.
</p><p>

Avoiding this type of contamination is easy:  just thoroughly clean the rocks, the tumbler barrel, and your tools when you change from one grit size to another.   
</p><p>

Another way that contamination occurs is when you include rocks that are brittle, or have a granular texture.  These rocks might break or shed grains in the tumbler. These grains and broken pieces  can scratch up every rock in the barrel.
</p><p>

Here is a test that we use to detect rocks that will shed grains in the tumbler.  We pick up a piece of rough in each hand.  We then rub them together while applying a bit of pressure.  If we are easily dislodging grains from the rock, we believe that the rock will likely shed grains during tumbling.
</p><p>

This type of contamination is also easy to avoid. Simply examine your rocks before tumbling, and don't tumble suspect rocks in the same barrel with quality rough.  Tumble new types of rough or suspicious materials separately.
</p></section>



<section>
<h3>"Great Results Take Time"</h3>
<p>
Don't be in a hurry.  Spend time doing a great job.  If you tumble a batch of rocks through the coarse grit step and they still have a few rough edges or are not nicely rounded, don't hesitate to run them through the coarse grit step again.  Also, spend the time needed to thoroughly clean your work area, tumbler barrel, rocks, and tools between steps to avoid contamination.
</p></section>




<section>
<div><center><img src="https://rocktumbler.com/300/bad-rough.jpg" alt="Inspect your rough"><p>"Garbage in means garbage out." The rocks in this photo do not have the potential to become nice tumbled stones. A rock with voids should be thrown away - the voids will trap grit and contaminate your pre-polish and polishing steps. Protrusions can be trimmed off with a rock saw  - and that might yield two nicely rounded rocks.</p></center></div>

<h2>Inspecting Your Rough</h2>
<p>
Remember the rule "garbage in means garbage out."   Practice that by starting with quality rough, and you will have a chance to produce high-quality tumbled stones.  We prepare to tumble by examining our rough rock.  If we find porous pieces that might carry grit from one step to the next, we discard them.
</p><p>

Rocks that are fractured will break while tumbling and scratch other rocks in the batch.  When we see a fractured rock in our rough, we discard it or break it along that fracture before it is placed in the barrel.  
</p><p>

For best results, your tumbler barrel should be loaded with rocks of mixed sizes (from about 1/4 inch up to about 1 1/2 inches in diameter for a 2-pound or 3-pound-capacity barrel).  If we need more rocks to fill the barrel to the proper level, we often add rocks that were previously polished but have a rough spot or a blemish that, if ground away, will improve the rock's appearance. 
</p><p>

Two final tips before we load the barrel:   
</p><p>

1.) Tumbling works best when all of the rocks in the barrel are about the same hardness.  If soft rocks are tumbled with harder rocks, the softer rocks will wear away quickly - before the harder rocks are properly shaped and smoothed.
</p><p>

2.) Tumbling works best when all rocks in the barrel are of the same type. If you mix rock types, problems can result - and they will be difficult to diagnose.
</p></section>



<section>
<div><center>
<img src="https://rocktumbler.com/300/rough-sm-md-lg.jpg" alt="Rough particle sizes"><p>When loading the tumbler barrel, you should have pieces of rough with a range of particle sizes. We would mix the above sizes together in the barrel. If you load the barrel with just a few large pieces, there will be very few points of contact between the rocks in the load. Those points of contact are where grit is trapped between the rocks and where grinding occurs. If you have lots of small pieces of rough between the big pieces, there will be many points of contact between the rocks of the load, and the tumbling process will be faster and more effective.</p>
<br>
<img src="https://rocktumbler.com/300/ceramic-media.jpg" alt="rock tumbler media"><p>If you don't have small pieces of rock to tumble, you can add <a href="https://rocktumbler.com/media.shtml">small ceramic media</a> to the tumbler barrel. Ceramic media are used as small-size "filler" in tumbling. These tiny cylinders will also act like roller bearings in the barrel and make your load tumble with a smooth action - that  smooth action will improve the grinding in the barrel and keep your stones from being bruised.  See our video about selecting the right <a href="https://rocktumbler.com/tips/using-the-right-tumbling-media/">tumbling media</a>.</p>
</center></div>


<h2>The Four-Step Tumbling Process</h2>
<p>
Now you are ready to begin what most people call the "Four-Step Tumbling Process."  This is described below for a rotary tumbler with a three-pound-capacity barrel such as the  <a href="https://rocktumbler.com/thumlers/model-ar-1.shtml">Thumler's Model A-R1</a>, <a href="https://rocktumbler.com/thumlers/model-ar-2.shtml">Thumler's Model A-R2</a>, Lortone Model 3A, or the Lortone Model 33B.
</p><p>

If you are tumbling with the <a href="https://rocktumbler.com/thumlers/model-mp-1.shtml">Thumler's Model MP-1</a> tumbler (which has a two-pound-capacity barrel), you can follow the instructions below, but use about two level tablespoons of grit or polish in each of the tumbling steps (Step 1 through Step 4).
</p><h2>Loading the Tumbler Barrel</h2>
<p>
Before you load the tumbler barrel, be sure that it is perfectly clean.  There should be no grit or rock fragments left in the barrel from a previous tumble. To prevent leaks, the rim of the barrel and the lid should be totally free from grit or rock particles. 
</p><p>

Once you have a clean barrel, add enough rock to fill the barrel about  1/2 to 2/3 full.   With small tumblers it is best to tumble rocks that are between about 1/4" and 1 1/2 inches in size.   If you don't have enough rough to fill the barrel at least 2/3 full, the rocks might be tossed around in the tumbler and bruised. (Varieties of quartz bruise very easily.)
</p><p>

It is best to add a variety of rock sizes to the barrel.  If you use only large pieces there will be very few contact points between the rocks and very little grinding will occur.  If you add a range of rock sizes the small rocks will fill the spaces between the large rocks, creating many more points of contact between the rocks.  Grinding occurs when particles of grit get caught between the rocks - so the more points of contact you have, the more effective the grinding.  
</p></section>




<section>

<div><center><img src="https://rocktumbler.com/rough-grit-barrel.jpg" alt="Tumbler rough, grit, and barrel">
  <p>When tumbling you will place enough rocks in the barrel to make it about 1/2 to 2/3 full. Then, add about two  level tablespoons of grit for each pound of rock. Finally, add enough water to almost cover the rock. Now seal the barrel and place it on the tumbler.</p></center></div>
  
<h2>STEP 1 - Coarse Grind</h2>
<p>
 The first step of the four-step tumbling process is to run the rocks in the tumbler with <a href="https://rocktumbler.com/grit.shtml">coarse grit</a>.  We begin with a barrel that is about 1/2 to 2/3 full of <a href="https://rocktumbler.com/rough/">tumbling rough</a>, then  add two  level tablespoons of coarse grit (we use 60/90 grit silicon carbide) for each pound of rock.  Then, add water until the water line is just below the top of the rocks.   Seal the barrel and run for about seven days. 
</p><p>

At the end of seven days, open the barrel. You will find a barrel of rocks in very muddy water! Dump the contents into a screen or a colander over a plastic bucket and rinse off every speck of grit and mud. <strong>Wear safety glasses to protect your eyes from a splash of mud.</strong></p><div><center><img src="https://rocktumbler.com/300/no-sink-drain.gif" alt="DO NOT pour down the drain"><p>Used grit and rock mud should never be washed down a  drain. It can clog your plumbing system. We wash rocks in a plastic colander over a plastic bucket to keep the mud out of the drain.</p></center></div>

DO NOT ALLOW THE GRIT OR MUD TO GO DOWN THE DRAIN - it will clog the pipes.   To avoid getting grit and mud down the drain, we wash the rocks in a colander over a plastic bucket.
<h3>Inspecting the Rocks:</h3> &nbsp;
Now that you have washed the rocks, it is time to inspect them.  Your goal is to determine if they are ready to move on to STEP 2, or if another week in STEP 1 would improve their appearance.  We almost always tumble the rocks for a second week in coarse grit.  We believe that improves their shape and removes more blemishes from their surface.  Then, we usually move all of the rocks to the medium grit step.
<h3>Perfectionist Tumbling:</h3>  Some people want to have more control over the tumbling process and only admit excellent rocks into STEP 2.  These people sort their rocks into three categories:   
<br>
<ul>
<li><b>1)</b> those that are ready for STEP 2</li>
<li><b>2)</b> those that could be improved by another week in STEP 1</li>
<li><b>3)</b> those that should be discarded or trimmed and returned to STEP 1</li>
</ul>

They then repeat STEP 1 until they have enough nicely shaped rocks that are ready for STEP 2.  People who follow this process produce really nice tumbled stones. This process is very time consuming, but the results can be spectacular stones! People who use this method also add a few new rocks (enough to bring the barrel up to about 1/2 to 2/3 full) each time they restart STEP 1. Adding a few new rocks keeps the barrel loaded to the proper level.
</section>


<section>
<div><center><img src="https://rocktumbler.com/300/cleaning-rocks.jpg" alt="washing tumbled stones"><div><p>Here are some rocks right out of STEP 1. Note how they are  covered with a gray "mud." This mud is spent grit and tiny rock particles that were worn off of the rocks during tumbling. Wash the rocks thoroughly so none of this grit goes into STEP 2. We wash our rocks in a colander over a plastic bucket so none of the mud goes down the drain.
</p><p>
IT IS VERY IMPORTANT TO WASH THE MUD FROM THE ROCKS IMMEDIATELY.  If the rock mud is allowed to dry on the rocks, it is almost impossible to wash off.</p></div></center></div>


<h2>STEP 2 - Medium Grind</h2>
<p>
 The second step of the four-step tumbling process is to run the rocks in the tumbler with <a href="https://rocktumbler.com/grit.shtml">medium  grit</a>.  Before you begin it is extremely important to clean all of the coarse grit and rock mud from the rocks, from the tumbler barrel, and from the barrel lid.  It is very important to avoid having even a few grains of coarse grit in the medium grind step. 
</p><p>

During STEP 1, your rocks were reduced in size.  When you return them to the barrel for STEP 2, they will probably not fill the barrel to the recommended 1/2 to 2/3 full level.  If the barrel is only 1/2 full or less, the rocks can be tossed violently around in the tumbler.  This can break or damage fragile materials such as quartz.  So, when tumbling quartz or another fragile material, we always add enough <a href="https://rocktumbler.com/media.shtml">ceramic media</a> (or some rocks that need a little more tumbling) to bring the barrel up to the 1/2 to 2/3 full level.
</p><p>

(This is less important with varieties of chalcedony because it is a more durable material.  However, if your tumbler barrel travels at more than about 60 revolutions per minute, we recommend adding enough ceramic media to bring it up to the 2/3 full level regardless of what type of rock is being tumbled.)
</p><p>

After your barrel is at the proper level, add two level tablespoons of medium grit (we use 110/220 grit or 150/220 grit silicon carbide) for each pound of rock (and ceramic media).  Then add water until the water line is just below the top of the rocks.  Now tumble for seven days.
</p><p>

At the end of seven days, open the barrel and clean all of the grit from the rocks, barrel, and lid (don't let any grit go down the drain).  At this point in the tumbling process, a dry rock should have a smooth frosted surface. Inspect the rocks, looking for any that are cracked or broken.  If you find any, these rocks should be discarded or saved for the next time you run Step 1.
</p></section>
  

<section>
<div><br><center><img src="https://rocktumbler.com/300/no-sink-drain.gif" alt="DO NOT pour down the drain"><p>Used grit and rock mud should never be washed down a  drain. It can clog your plumbing system. We wash rocks in a plastic colander over a plastic bucket to keep the mud out of the drain.</p></center></div>
<br>

<h2>STEP 3 - Fine Grind / Pre-polish</h2>
<p>
 The third step of the four-step tumbling process is a week in a <a href="https://rocktumbler.com/grit.shtml">fine grit</a> such as 600 grit or 500 grit silicon carbide.  Begin with a barrel that is perfectly clean.  Place your rough and any ceramics that are with them into the barrel, and add two level tablespoons of fine grit per pound of material.  Then add water until it fills the barrel up to just below the top of the rocks.  Run this for about seven days, and then do a thorough cleaning of the rocks, the barrel, and the lid.
</p><p>
Remove any rocks that have broken or show signs of fracturing. At this point in the process, the rocks should be extremely smooth, and some of them might display a slight luster.
</p></section>


<section>
<div><center><img src="https://rocktumbler.com/300/clean-tumbler-barrel.jpg" alt="clean tumbler barrel"><p>Be very clean! Before you replace the lid on your barrel, be sure that both the lid and the rim are perfectly clean. This will allow the lid to fit tightly and prevent leaks.</p></center></div>

<h2>STEP 4 - Polish </h2><p>
 Now you are down to the final step - the one that puts a bright shine onto your tumbled stones.  Be sure that the rocks and the equipment are perfectly clean. (Some people have an <a href="https://rocktumbler.com/barrel.shtml">extra barrel</a> that they use only for the polishing step.) A few specks of grit could ruin a great polish.  
</p><p>

Place the rocks in the barrel and add two level tablespoons of <a href="https://rocktumbler.com/polish/">rock polish</a> (we use TXP aluminum oxide powder for almost all of our rotary tumbling) per pound of material in the barrel. Add water to just below the top of the rocks.  Then, close the barrel and run for about seven days. 
</p><p>

When you finish this step, your rocks should be bright and shiny. If they are, congratulations!  Admire them for a while and share them with your friends.   
</p><p>

If the stones have an extremely smooth surface but do not shine, they might need to be cleaned up using the burnishing step described below.  If they have scratches on them, then you will need to go back to STEP 2 and repeat the medium grind, fine grind, and polishing steps.
</p></section>


<section>
<div><center><img src="https://rocktumbler.com/300/rock-burnishing.jpg" alt="burnishing tumbled stones"><p>For burnishing we grate up a bar of Ivory Soap with a vegetable grater.  Then we add 1/2 tablespoon of grated soap for each pound of rock plus enough warm water to almost cover the rocks. See our video about <a href="https://rocktumbler.com/tips/burnishing/">burnishing polished stones</a>.</p></center></div>

<h2>Burnishing</h2><p>
 Sometimes our stones are a little "hazy" when they come out of the polish, or small particles of polish are in micro-size crevices. We shine and clean them up by tumbling for an hour or so in soapy water. This is called "<a href="https://rocktumbler.com/tips/burnishing/">burnishing</a>." 
</p><p>

To burnish, we place the stones in our polish barrel with the normal amount of water, and then we add about 1/2 tablespoon of grated "Ivory" bar soap for each pound of rock (we use "ORIGINAL" Ivory soap - don't use a soap with aloe or abrasive or any other additive - honestly, just get a bar of Ivory soap).  Burnishing usually makes the tumbled stones a little brighter, but sometimes it really kicks up the shine.
</p></section>


<section>
<div><center><img src="https://rocktumbler.com/300/rock-tumbler-log-.jpg" alt="rock tumbler log"><p>Print a copy of our <a href="https://rocktumbler.com/rock-tumbling-log.pdf">free tumbling log</a> and use it to keep your records.</p><br><img src="https://rocktumbler.com/300/polished-rocks.jpg" alt="tumbled stones"><p>Here are a few of our favorite tumbled stones!</p></center></div>

<h2>Keeping Records</h2>
<p>
It is easy to forget what day you started the tumbler or what type of grit was used - especially if you are running multiple tumblers.   Keeping records will keep you on track and provide a history that will help you learn.  We record material tumbled, start date, abrasive used, media used, finishing date and duration, along with any comments or observations about the results.
</p><p>

To help you with your record keeping, we have prepared a <a href="https://rocktumbler.com/rock-tumbling-log.pdf">printable tumbling log</a>.  
</p><p>

We usually have multiple tumblers running here, and we record every barrel of rock that we tumble on these logs. Even if your memory is better than ours, record-keeping is a good idea. When you learn something that works or something that doesn't, you will have it recorded. This information can help you repeat great results and avoid repeating bad ones. Also, we have trouble remembering which day a barrel of rocks was started. Using the log takes away the chance of forgetting.
</p><h2>Happy Tumbling!</h2> <img src="https://rocktumbler.com/wink.gif" width="21" height="21">
</section>

<section>
<h3>RockTumbler.com Authors</h3><br>
<hr noshade="">
<table>
<tbody><tr><td><img src="https://rocktumbler.com/65/hobart-king-75.jpg" alt="Hobart King"></td>
<td><a href="https://rocktumbler.com/about-us.shtml#who">Hobart M. King</a> has decades of rock tumbling experience and writes most of the articles on RockTumbler.com.  He has a PhD in geology and is a GIA graduate gemologist.  He also writes the articles about rocks, minerals and gems on Geology.com.</td>
</tr></tbody></table>
</section>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Windows 10 Deadline Boosts Mac Sales (129 pts)]]></title>
            <link>https://www.macrumors.com/2025/10/25/windows-10-deadline-boosts-mac-sales/</link>
            <guid>45704616</guid>
            <pubDate>Sat, 25 Oct 2025 15:26:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.macrumors.com/2025/10/25/windows-10-deadline-boosts-mac-sales/">https://www.macrumors.com/2025/10/25/windows-10-deadline-boosts-mac-sales/</a>, See on <a href="https://news.ycombinator.com/item?id=45704616">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main" id="maincontent"><article expanded="true"><div data-io-article-url="/2025/10/25/windows-10-deadline-boosts-mac-sales/"><p>The Windows 10 end-of-support deadline is driving the largest coordinated PC replacement cycle in years across the industry, and Apple is emerging as one of the main beneficiaries as Mac shipments accelerate.</p>
<p><img src="https://images.macrumors.com/t/cqrHzLORZ6hL8qbd28-qz_CEtp0=/400x0/article-new/2025/03/M4-MacBook-Air-13-and-15-inch-Feature-Pink-and-Teal.jpg?lossy" srcset="https://images.macrumors.com/t/cqrHzLORZ6hL8qbd28-qz_CEtp0=/400x0/article-new/2025/03/M4-MacBook-Air-13-and-15-inch-Feature-Pink-and-Teal.jpg?lossy 400w,https://images.macrumors.com/t/Q-VN4lAsTZJUBBsu5xxhCaXT8Yk=/800x0/article-new/2025/03/M4-MacBook-Air-13-and-15-inch-Feature-Pink-and-Teal.jpg?lossy 800w,https://images.macrumors.com/t/CFc-soWoVhYuE38Bq-R4wbPhydw=/1600x0/article-new/2025/03/M4-MacBook-Air-13-and-15-inch-Feature-Pink-and-Teal.jpg 1600w,https://images.macrumors.com/t/4o0TLhWdqPYrJyYxjfKlq3jzKIE=/2500x0/filters:no_upscale()/article-new/2025/03/M4-MacBook-Air-13-and-15-inch-Feature-Pink-and-Teal.jpg 2500w" sizes="(max-width: 900px) 100vw, 697px" alt="M4 MacBook Air 13 and 15 inch Feature Pink and Teal" width="2500" height="1406"><br><a href="https://counterpointresearch.com/en/insights/global-pc-market-q3-2025">Counterpoint Research</a> this week reported that nearly 40% of the global installed PC base was still running Windows 10 ahead of the October 2025 cutoff, triggering early fleet renewals across both commercial and consumer channels. This pressure lifted shipments for most large brands, and the Mac is among the strongest gainers. According to Counterpoint, Apple's global Mac shipments grew 14.9% year-over-year in the third quarter of 2025, supported by demand for new MacBook models and rising enterprise adoption of Apple hardware.</p>
<p>Lenovo remained the largest PC vendor and had the highest annual growth at 17.4% year-over-year. Asus saw 14.1% year-over-year growth. HP followed with a 10.3% increase, driven by commercial penetration. Dell shipments declined 0.9% year-over-year. Counterpoint said that the top five vendors together controlled nearly three-quarters of the global PC market in the period, while smaller brands were flat or down.</p>
<p>Counterpoint noted that computer companies have started marketing systems with neural processing units and integrated AI features. While these features have not yet converted into a primary sales driver at scale, enterprise buyers are beginning to incorporate AI capability requirements into forward procurement so as not to retire devices before emerging AI workflows arrive.</p>
</div></article><p><h2>Popular Stories</h2></p><div><h3><a href="https://www.macrumors.com/2025/10/22/report-virtually-no-demand-for-iphone-air/">Report: 'Virtually No Demand' for iPhone Air</a></h3><p>Apple is "drastically" cutting production of the iPhone Air and shifting focus toward the iPhone 17 and iPhone 17 Pro models, Nikkei Asia reports.
The business publication claims to have learned of a major cut to iPhone Air production motivated by weaker-than-expected consumer interest, nearly to "end of production levels." Despite early reports of the iPhone Air selling out within hours of...</p></div><div><h3><a href="https://www.macrumors.com/2025/10/22/sam-sung-name-change/">Former Apple Employee Sam Sung Changed His Name to Avoid Attention</a></h3><p>Wednesday October 22, 2025 4:44 pm PDT by <a href="https://www.macrumors.com/author/juli-clover/" rel="author">Juli Clover</a></p><p>Back in 2012, an Apple retail employee named Sam Sung went viral because his name is similar to Samsung, one of Apple's main competitors. In a recent interview with Business Insider, he detailed that period in his life, how Apple responded, and he explained why he ultimately changed his name.
Someone posted an image of Sung's Apple business card on Reddit in 2012, and it spread rapidly....</p></div><div><h3><a href="https://www.macrumors.com/2025/10/22/ios-26-1-features/">iOS 26.1 Coming Soon With These 8 New Features for Your iPhone</a></h3><p>Wednesday October 22, 2025 6:15 am PDT by <a href="https://www.macrumors.com/author/joe-rossignol/" rel="author">Joe Rossignol</a></p><p>The upcoming iOS 26.1 update includes a handful of new features and changes for iPhones, including a toggle for changing the appearance of the Liquid Glass design, "slide to stop" for alarms in the Clock app, and more.
iOS 26.1 is currently in beta testing. The update will likely be released in the first half of November, and it is compatible with the iPhone 11 series and newer, but some...</p></div><div><h3><a href="https://www.macrumors.com/2025/10/22/gm-phasing-out-carplay-all-cars/">GM to Remove CarPlay from All Future Vehicles, Including Gas Cars [Updated]</a></h3><p>Wednesday October 22, 2025 11:34 am PDT by <a href="https://www.macrumors.com/author/juli-clover/" rel="author">Juli Clover</a></p><p>General Motors began phasing out support for CarPlay in its electric vehicles back in 2023, leading to complaints from iPhone users, but the company has no plans to back down.
In fact, GM is going further and plans to remove CarPlay from all future gas vehicles, too. In an interview with The Verge, GM CEO Mary Barra said that the company opted to prioritize its platform for EVs, but the...</p></div><div><h3><a href="https://www.macrumors.com/2025/10/24/ios-26-1-liquid-glass-battery-test/">iOS 26.1 Beta Liquid Glass Battery Drain Test: Tinted vs Clear Mode</a></h3><p>Friday October 24, 2025 2:30 pm PDT by <a href="https://www.macrumors.com/author/juli-clover/" rel="author">Juli Clover</a></p><p>In the fourth iOS 26.1 beta, Apple added a "Tinted" option that reduces the translucency of Liquid Glass for those who prefer a more opaque look. I saw some comments wondering whether the setting might preserve battery life, so I thought I'd do some testing.
Test Settings
I did four separate tests using the iPhone 17 Pro Max, and I kept the parameters as similar as possible. Here are the...</p></div><div><h3><a href="https://www.macrumors.com/2025/10/22/three-new-iphone-designs-allegedly-revealed/">Apple's Plan to Launch Three New iPhone Designs Allegedly Revealed</a></h3><p>Apple plans to launch a new type of iPhone every year for the foreseeable future, according to an Asia-based source.
The detailed information was shared by the account "yeux1122" in a blog post on the Korean platform Naver, citing domestic trend and component research companies. 
Corroborating other reports, Apple will apparently launch its first foldable iPhone in 2026, featuring a...</p></div><div><h3><a href="https://www.macrumors.com/2025/10/23/apple-to-skip-iphone-19-name/">Report: Apple to Skip 'iPhone 19' Name for 'iPhone 20'</a></h3><p>Apple's new iPhone lineup launched in the fall of 2027 will be called the "iPhone 20" models, rather than the "iPhone 19," according to research firm Omdia.
Speaking at a conference in Seoul (via ETNews), Omdia Chief Researcher Heo Moo-yeol corroborated rumors that Apple plans to move the launch of its standard iPhone to the first half of the year and provided some additional clarity about...</p></div><div><h3><a href="https://www.macrumors.com/2025/10/22/iphone-air-supply-chain-cuts/">Apple's iPhone Air Experiment Fails as Supply Chain Cuts Production by 80%</a></h3><p>Wednesday October 22, 2025 10:48 am PDT by <a href="https://www.macrumors.com/author/juli-clover/" rel="author">Juli Clover</a></p><p>iPhone Air demand failed to meet Apple's expectations and the company's supply chain is scaling back shipments and production, reports Apple analyst Ming-Chi Kuo.
Subscribe to the MacRumors YouTube channel for more videos. 
Suppliers are expected to reduce capacity by more than 80 percent between now and the first quarter of 2026, and some components with longer lead times will be discontinued ...</p></div><div><h3><a href="https://www.macrumors.com/2025/10/23/apple-donating-trump-ballroom/">Apple Donating to Trump's $350M White House Ballroom Project</a></h3><p>Thursday October 23, 2025 3:55 pm PDT by <a href="https://www.macrumors.com/author/juli-clover/" rel="author">Juli Clover</a></p><p>Apple is one of several tech companies that will contribute to the construction of U.S. President Donald Trump's 90,000-square-foot ballroom, reports CNN.
Construction began on the ballroom this week, and the White House's east wing was torn down. Trump claims that the ballroom will cost $350 million, and that it will be privately funded through donations. The cost has already increased $150 ...</p></div><div><h3><a href="https://www.macrumors.com/2025/10/23/iphone-wallet-drivers-license-12th-state/">iPhone Driver's License Feature in Apple Wallet App Launches in Another U.S. State</a></h3><p>Thursday October 23, 2025 7:44 am PDT by <a href="https://www.macrumors.com/author/joe-rossignol/" rel="author">Joe Rossignol</a></p><p>In select U.S. states, residents can add their driver's license or state ID to the Wallet app on the iPhone and Apple Watch, providing a convenient and contactless way to display proof of identity or age at select airports and businesses, and in select apps.
Starting today, the feature is available to residents of West Virginia. To set it up, open the Wallet app and tap on the plus sign in...</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Synadia and TigerBeetle Commit $512k USD to the Zig Software Foundation (397 pts)]]></title>
            <link>https://www.synadia.com/blog/synadia-tigerbeetle-zig-foundation-pledge</link>
            <guid>45703716</guid>
            <pubDate>Sat, 25 Oct 2025 13:24:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.synadia.com/blog/synadia-tigerbeetle-zig-foundation-pledge">https://www.synadia.com/blog/synadia-tigerbeetle-zig-foundation-pledge</a>, See on <a href="https://news.ycombinator.com/item?id=45703716">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> 
<p>Synadia and TigerBeetle have together pledged a combined <strong>$512,000 USD</strong> to the <strong>Zig Software Foundation (ZSF)</strong> over the next two years, demonstrating a shared belief in Zig’s potential to shape the next era of high-performance, reliable, and maintainable software.</p>
<h2 id="synadias-mission-connecting-everything">Synadia’s Mission: Connecting Everything</h2>
<p>At <strong>Synadia</strong>, we help some of the world’s largest enterprises design and scale innovative architectures across cloud regions, cloud providers, and all the way to the far edge. Often described as a “decentralized nervous system,” we enable secure, reliable communication between services and data, no matter the environment or topology - so our customers can deliver incredible digital products and experiences.</p>
<p>From the beginning, our mission has been bold yet simple: to <strong>connect everything</strong>. Built on top of <a href="http://nats.io/">NATS.io</a>, our platform enables organizations to modernize, digitize, and extend their systems all the way to the edge. Synadia’s technology enables organizations to build and scale microservices, streaming and telemetry platforms, and event sourcing systems, while leveraging modern data primitives such as key-value and object stores anywhere within those systems.</p>
<p>Our customers span industries from <strong>financial services</strong> and <strong>e-commerce</strong> to <strong>gaming</strong>, <strong>manufacturing</strong>, <strong>industrial IoT</strong>, <strong>connected and autonomous vehicles</strong>, <strong>energy systems</strong>, and <strong>embodied AI</strong>. They continually challenge us to push the limits of what’s possible - delivering secure, real-time communications and data movement anywhere with minimal overhead.</p>

<p>Beyond the language itself, the most impressive aspect of Zig has been the quality of projects built with it: <strong>TigerBeetle</strong>, <strong>Bun</strong>, <strong>Ghostty</strong>, and others. Among these, <strong>TigerBeetle</strong> stands out.</p>
<p>I first met <strong>Joran Dirk Greef</strong>, TigerBeetle’s founder, at the first <em>Distributed Systems Conference</em> in Cape Town, which they hosted. Since then, I’ve had the chance to see how Joran and his team approach engineering for their financial database product, guided by their philosophy called <a href="https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md">“TigerStyle.”</a> It focuses on correctness, clarity, and reliability — values that deeply resonate with us at Synadia and our customers.</p>
<p>Our goals align closely. Synadia is building industrial-grade solutions designed for smaller, more efficient, and deterministic deployments. Like TigerBeetle, we believe software should be predictable, simple, and trustworthy by design.</p>
<p>When Joran and I met again in New York recently, he told me TigerBeetle would be increasing its support for the Zig Foundation and asked whether Synadia would like to join forces. I didn’t have to think twice. There’s no better company or person to partner with in supporting Zig.</p>
<h2 id="supporting-the-zig-software-foundation">Supporting the Zig Software Foundation</h2>
<p>We are grateful to <strong>Andrew Kelley</strong>, the founder and president of the Zig Software Foundation, whose leadership continues to inspire developers building serious systems software. Andrew’s cohesive and focused vision mirrors how we operate at Synadia.</p>
<p>We’re proud to support <strong>Andrew</strong>, <strong>Loris Cro</strong>, and <strong>the entire Zig community</strong> as they continue to advance the state of systems programming.</p>
<blockquote>
<p>“Zig’s approach to control, performance, and simplicity is redefining what’s possible in modern systems software. We’re honored to contribute alongside TigerBeetle to help the Zig Foundation continue this vital work.”
— Derek Collison, Founder &amp; CEO, Synadia</p>
</blockquote>
<blockquote>
<p>“We’re delighted to stand with Synadia in supporting Zig’s growth. Together, we believe Zig will play a foundational role in the next generation of reliable distributed systems.”
— Joran Dirk Greef, Founder &amp; CEO, TigerBeetle</p>
</blockquote>
<hr>
<h3 id="about-the-zig-software-foundation">About the Zig Software Foundation</h3>
<p>The <a href="https://ziglang.org/zsf/">Zig Software Foundation</a> (ZSF) is a non-profit organization dedicated to supporting the development of Zig, a programming language designed for performance, reliability, and maintainability. Led by Andrew Kelley, Zig empowers developers to write robust software without hidden control flow or unpredictable behavior and is increasingly being adopted for systems, embedded, and high-performance applications.</p>
<h3 id="about-synadia">About Synadia</h3>
<p><strong>Synadia Communications, Inc.</strong> is the creator of the <strong>Synadia Platform</strong> and the maintainer of the <strong>NATS.io</strong> ecosystem. Synadia provides secure, zero-trust messaging and connectivity across cloud, edge, and on-premises environments. Its technology powers mission-critical systems for leading enterprises in finance, manufacturing, automotive, energy, and AI.</p>
<h3 id="about-tigerbeetle">About TigerBeetle</h3>
<p><a href="https://tigerbeetle.com/">TigerBeetle</a> is the financial transactions database designed for mission-critical safety and performance to power the next thirty years of transaction processing.</p> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Making a micro Linux distro (2023) (173 pts)]]></title>
            <link>https://popovicu.com/posts/making-a-micro-linux-distro/</link>
            <guid>45703556</guid>
            <pubDate>Sat, 25 Oct 2025 13:01:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://popovicu.com/posts/making-a-micro-linux-distro/">https://popovicu.com/posts/making-a-micro-linux-distro/</a>, See on <a href="https://news.ycombinator.com/item?id=45703556">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="article" role="article">
      <p><a href="https://twitter.com/popovicu94?ref_src=twsrc%5Etfw" data-show-count="false">Follow @popovicu94</a></p>
<p>In this article, we’ll talk about building up a tiny (micro) Linux “distribution” from scratch. This distribution really won’t do much, but it will be built from scratch.</p>
<p>We will build the Linux kernel on our own, and write some software to package our micro-distro.</p>
<p>Lastly, we are doing this example on the RISC-V architecture, specifically QEMU’s <code>riscv64 virt</code> machine. There’s very little in this article that is specific to this architecture, so you might as well do an almost identical exercise for other architectures like <code>x86</code>. We recently went through the <a href="https://popovicu.com/posts/risc-v-sbi-and-full-boot-process">RISC-V boot process with SBI</a> and <a href="https://popovicu.com/posts/bare-metal-programming-risc-v/">bare metal programming for RISC-V</a>, so this is just a continuation up the software stack.</p>
<p><strong><em>Warning: This article is a very simplified view of a Linux distribution. There are things written below that are not 100% accurate, but more like 99.9%. This article is meant for beginners and helping them form a basic mental framework for understanding Linux systems. More advanced users may be triggered by over-simplification in some parts.</em></strong></p>
<h2 id="table-of-contents">Table of contents</h2>
<details><summary>Open Table of contents</summary>
<ul>
<li>
<p><a href="#what-is-an-os-kernel">What is an OS kernel?</a></p>
</li>
<li>
<p><a href="#what-is-a-linux-distribution">What is a Linux distribution?</a></p>
</li>
<li>
<p><a href="#how-does-infrastructure-on-top-of-infrastructure-run">How does “infrastructure on top of infrastructure” run?</a></p>
</li>
<li>
<p><a href="#the-init-process-and-its-children">The <code>init</code> process (and its “children”)</a></p>
</li>
<li>
<p><a href="#building-our-almost-useless-linux-micro-distrbibution">Building our almost useless Linux micro distrbibution</a></p>
<ul>
<li>
<p><a href="#building-a-linux-operating-system-for-risc-v">Building a Linux operating system for RISC-V</a></p>
<ul>
<li><a href="#first-obstacles">First obstacles</a></li>
<li><a href="#building-the-initramfs">Building the <code>initramfs</code></a></li>
</ul>
</li>
<li>
<p><a href="#so-what-is-an-operating-system">So what is an operating system?</a></p>
</li>
<li>
<p><a href="#bonus-section-making-an-actually-useful-micro-distribution-with-u-root">Bonus section: making an actually useful micro distribution with <code>u-root</code></a></p>
</li>
<li>
<p><a href="#visit-googlecom-from-this">Visit google.com from this!</a></p>
</li>
</ul>
</li>
<li>
<p><a href="#package-managers">Package managers</a></p>
</li>
<li>
<p><a href="#the-monster-of-init">The monster of <code>init</code></a></p>
</li>
<li>
<p><a href="#github-repo">GitHub repo</a></p>
</li>
</ul>
</details>
<h2 id="what-is-an-os-kernel">What is an OS kernel?</h2>
<p>Let’s assume we’re working on a single-core machine. They’re still around us, maybe not in our laptops and phones, but in some smaller devices, and historically they have been actually widely used even in our “big” personal devices like desktops. The latter ones have been capable of running multiple program <em>simultaneously</em> for many years, even as single cores. We’ll get into what <em>simultaneous</em> really means in a bit, but for now let’s just note that the one of the <strong>operating system kernel’s</strong> big tasks is to make that happen.</p>
<p>If you go back to the articles about bare metal programming and SBI on RISC-V, you can see how at the lowest layers of software we interact with our I/O devices. It usually (most often, but not necessarily <strong>always</strong>) boils down to the CPU writing some data at the appropriate address. Imagine if the application developers had to keep all these addresses in mind and they had to know which values exactly to send to those addresses! That would mean we’d have far fewer applications today, but we don’t, and that’s owing to the <strong>operating system kernels</strong> which abstract away these details and provide some simple high-level interfaces instead. In the <a href="https://popovicu.com/posts/risc-v-sbi-and-full-boot-process">RISC-V SBI article</a>, we looked at an example of such interface for Linux on <code>x86</code> — instead of knowing which addresses to write to and what values to send there, we focused on the <strong>logic</strong> and basically just told to the OS kernel that “we want message so and so written to the standard output”, and then the OS kernel dealt with the details of interacting with the hardware. So that’s another big task for the OS kernel: managing the hardware on the machine and making the interaction with it easier.</p>
<p>Going further, the OS kernel offers some really high-level programming interfaces like <strong>the filesystems</strong>. This may or may not be about managing some hardware and abstracting operations over it. For example, the most common case for the filesystems, of course, is to store some data on the disk and retrieve it later, and this has to do with the OS kernel managing the hardware related to disks on the machine (i.e. sending some data to certain addresses, which makes those hard disk devices respond in some way). However, this is not always the case, the files are not always some data stored on disk, and so filesystem is an <strong>interface</strong> exposed to us, meaning it’s a way of talking to the OS kernel, not necessarily a way to talk to the data. We’ll cover the filesystems in great detail in some other article, but let’s keep this in mind for now — the OS kernel needs to provide a straightforward way of doing high-level things through multiple interfaces.</p>
<p>Finally, the last thing I wanted to cover about the kernels is that they provide <strong>a programming model</strong>. Remember how we mentioned (as I’m sure you already know) that multiple programs can run even on a single-core device simultaneously? The OS enables the running applications to be programmed to not even know about each other, in other words, an application can live its lifecycle acting like it is the only application running on the computer and no one else is touching its memory. Imagine a world where your Python Django server needs to know about that texting app on your device in order to be working — we’d have far fewer Django apps and texting apps, for sure, as coding them would quickly get gnarly. However, the apps can also know about each other’s existence on the same machine. The operating system kernel facilitates <strong>both</strong>. It gives a programming model in which you can insulate applications from each other, or join a few apps in isolation from other apps, etc.</p>
<p>Basically, the OS kernel does a lot of heavy lifting to enable you to run your code easily on a very generic and complicated machinery such as your smartphone. What is written above probably doesn’t do full justice to the kernels, they do a whole lot of things, but the few paragraphs above should give a fairly good idea of kernel’s main tasks, and there are many.</p>
<p><strong>Linux</strong> is an extremely popular operating system kernel. It can be built to run on many architectures (really, <strong>a lot</strong>), it is open source and free to use. And a lot of people are “Linux users”, but what does it exactly mean that someone “uses Linux”? Those Linux users typically install something like Debian, or Ubuntu on their machines, and they use Linux that way, and what does that mean?</p>
<h2 id="what-is-a-linux-distribution">What is a Linux distribution?</h2>
<p>We talked above about what kernels do, i.e. what are their tasks and we said Linux is an OS kernel, but can we really just take bare Linux and as end users who just want to watch YouTube, do something with it? The answer is likely no, we need a lot more layers on top of Linux to get to firing up a Chrome browser and watching YouTube.</p>
<p>How to go all the way towards the top of the software stack where we can just use those super simple and intuitive apps like graphical web browsers? We have previously discussed <a href="https://popovicu.com/posts/risc-v-sbi-and-full-boot-process">the boot process</a>, and we went all the way from the very first operations on the machine after the power on, to the moment we land in the operating system kernel. We did not cover the bootloaders in any detail, we just briefly mentioned them because we were able to get QEMU to directly load our fake kernel into the memory in one go, which is typically not possible with full blown systems like desktop Linux (there is an intermediate booting stage where the bootloader fetches the OS image from something like a disk, or maybe even network and loads it into the memory). The kernel we wrote was a fake little stub that does effectively nothing, and so we ended our last article at the point where the OS kernel is in memory and ready to go, it’s just we had no kernel to run.</p>
<p>Based on what we see above, I think the right mental model for the kernel right now is that it is the <strong>infrastructure</strong> for running user applications on a complex machine, but it really doesn’t do anything for the user’s business logic. This is what I meant when I said the bare Linux on its own cannot fire up Chrome and let you watch YouTube — it is merely the <strong>infrastructure</strong> that the <strong>application developer uses</strong> to implement Chrome, and its streaming capabilities.</p>
<p>However, the kernel alone is not infrastructure for Chrome to run. We need to run sort of “infrastructure on top of infrastructure” to achieve the full infrastructure to run Chrome. Again, much like in the SBI article, we’re just layering abstractions on top of each other in some way, so essentially there is nothing new here, just the way we do it.</p>
<p>For example, in order for a machine to connect to the Internet, the OS kernel first needs to be able to drive the network device on the machine to send the signals out of the machine (to the switch, router, another machine or whatever it is connected to). However, in Linux, there is more or less where the kernel stops. Which networks you connect to, are you using VPN, how do you assign IPs to your machine (statically or dynamically) and that kind of business, it happens in the upper layers of the infrastructure.</p>
<p>You may now guess where this is going — a Linux distribution is really <strong>the Linux kernel <em>plus</em> the infrastructure on top of the kernel infrastructure</strong>. Let’s dig into it.</p>
<h2 id="how-does-infrastructure-on-top-of-infrastructure-run">How does “infrastructure on top of infrastructure” run?</h2>
<p>Again, the kernel does a whole bunch of things, a million times more than what we can cover in a single article, but it definitely has its limits and it doesn’t do all the heavy lifting on your everyday personal device — and this is where something <em>outside</em> of the kernel gets into the picture.</p>
<p><strong>Disclaimer: You can get really creative with Linux in a million different ways, and from this point on we’re going with a very basic, textbook-like, simple view of what happens in the mainstream distributions. There are many super complex things we can do, and there are lots of details we’re leaving out, but my hope here is that you get a general idea and enough knowledge to be able to understand more advanced material on this topic; there is plenty of it on the Internet.</strong></p>
<p>The reason why I wrote the disclaimer above is mainly because we’re going to be assuming that your Linux has a filesystem going forward, as this is the most common path. How many times have you seen a Linux deployment without a filesystem? It certainly seems possible to do, but it may be borderline useless except for some super edge/advanced cases, and we’ll disregard them in this article. Check out <a href="https://unix.stackexchange.com/questions/507837/does-the-linux-kernel-need-a-file-system-to-run">this</a> page to get more idea of what I’m talking about.</p>
<p>So what is the stuff <em>outside</em> the kernel? It’s what we call the <strong>user code</strong>! It’s just a normal code that runs within the Linux environment, just like you run basically anything on your Linux machine. Sure, some code is more privileged than the other, and there are a million more details that can get involved, but let’s just focus on the main distinction here: when you are running Linux on a machine, there is <strong>kernel code</strong> running, as well as the <strong>user code</strong> running, and everything that’s a part of the <strong>kernel</strong> itself is running in the <strong>kernel space</strong>, and everything that is running on the machine that is <em>not</em> a part of the kernel is running in the <strong>user space</strong>, and they are fairly isolated from each other.</p>
<p>So this “infrastructure on top of infrastructure” that we have talked about runs in the user space. Sure, it needs to bubble down to the kernel for many primitives, and we’ve seen already how that happens. Linux has a well defined ABI that exposes a set of services that the user space code can invoke in the kernel space. And where does this user space code come into the picture?</p>
<h2 id="the-init-process-and-its-children">The <code>init</code> process (and its “children”)</h2>
<p>Once the kernel is done loading and making itself comfortable on the machine, it kicks off the first bit of the code in user space — the <code>init</code> process. This is a piece of user space code that lives in a binary that sits somewhere on your filesystem, and the kernel will look for it in a few locations, beginning with <code>/init</code> (if it doesn’t find it there, it will give a few more shots at different locations before throwing its hands up). Let’s say the kernel found a binary in the filesystem at <code>/init</code> — it’s going to start it and assign the ID <code>1</code>. This is basically the only user process that the kernel will start: the <code>init</code> process then is the ancestor of <strong>all</strong> other user space processes. This means that <code>init</code> will start some other processes, these other processes will in turn start some other processes, and so on. Very shortly you have a bunch of processes running on your machine, hopefully each one of them useful for the desired operations on the machine. The machine should at this point start actively interacting with the world around it: whether we’re talking about a smartphone giving the UI to its user, an embedded device that collects data off the sensors and sending it into the cloud, etc. Additionally, the machine will often have various tools available that are not actively running on the machine, but can be invoked in certain situations for some high level operations (e.g. a Python script can invoke a couple of tools like <code>ls</code>, <code>cat</code> or something to get a snapshot of what’s going on with the machine and then sending the data somewhere). Quick note is that even these periodically-started or ad-hoc tools are in some way descendants of <code>init</code>; it’s not too important to know now, but it’s good to keep in mind.</p>
<p>The collection of kernel, the processes that get launched right after the kernel, and the tools that are available at your disposal represent <strong>the Linux distribution</strong>. It’s essentially a packaging for the kernel alongside all these useful tools that do more around the machine than what the kernel alone does (but it still provides the <strong>infrastructure</strong> for everything outside of the kernel to run, nothing bypasses the kernel).</p>
<p>Even a distrbution minimally useful for everyday use can get crufty pretty quickly. If you go onto the path of building your own custom little distro, as we actually will now, you will almost inevitably hit a lot of roadblocks where something that you expect to be working is just not working and the full solution is either to code some of your own software to talk to the kernel to get something done on the system, or just use an off-the-shelf software to do so. The latter is the path of least resistance, and you’ll likely keep adding stuff until you end up with a deployment that can do something remotely useful for you. At this point, you will have likely accumulated a significant number of software packages.</p>
<p>On the other hand, you have probably heard people criticizing certain distributions as being “bloated”, probably meaning they accumulated so much complexity in their packaging, they waste a lot of hardware resources doing things that are not useful, etc. Without discipline, I can easily see distrbution developers just randomly throwing different tools at the system just to get that one missing thing going, without retroactively cleaning up the excess later and just moving onto the next feature where they do the same — a (sadly) common pattern in software engineering.</p>
<p>Some distributions draw the line at different places where they just make a decision for the user and do something on the system, versus letting the user make the full decision and be more hands on. For example, you can install Arch Linux in a minimal way where it’s just a little more than the kernel booted up with a shell. All the subsequent decisions are on you, and you have to be very hands on in order to get it to a point where it’s very graphical and highly interactive. Or you can decide it’s just not worth your time setting it up so much, and just install a very user-friendly Ubuntu distrbution, which may be “bloated” for someone’s taste, but it gets you up and running very fast (I personally like it).</p>
<h2 id="building-our-almost-useless-linux-micro-distrbibution">Building our almost useless Linux micro distrbibution</h2>
<p>Let’s get our hands dirty and build something that’s basically useless but we’ll actually end up booting it for real. You may want to refresh your memory on the <a href="https://popovicu.com/posts/risc-v-sbi-and-full-boot-process">RISC-V boot process</a>, I think it will be rewarding here.</p>
<p>First things first, let’s build the kernel.</p>
<h3 id="building-a-linux-operating-system-for-risc-v">Building a Linux operating system for RISC-V</h3>
<p>I’m on an <code>x86</code> platform here, so I will depend heavily on the cross-platform toolchain to build things for RISC-V. You will likely do something similar (I’m not sure I have yet seen someone build the RISC-V kernel on RISC-V itself).</p>
<p>Let’s get the source code for Linux. Linux development is done on top of the Git version control system, but we’ll take a shortcut here and just download a tarball with the sources for one branch, we won’t be syncing the whole Linux codebase with all the Git branches, experimental stuff and so on. We’ll be downloading the tarball from <code>kernel.org</code> for version <code>6.5.2</code> (<a href="https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.5.2.tar.xz">here</a>). You can also just download any tarball for whatever the latest stable version is from kernel.org homepage. Once it’s downloaded, go ahead and unpack that. Let’s also <code>cd</code> into that directory.</p>
<p>Now is the time to configure the build. The first step is to make the <code>defconfig</code> which basically initiates your configuration file.</p>
<p><strong><em>Note: Here and below, you may want to use a different <code>CROSS_COMPILE</code> prefix, depending on how the cross compilation tool is identified on your machine</em></strong></p>
<pre is:raw="" tabindex="0"><code><span><span>make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- defconfig</span></span></code></pre>
<p>This was hopefully quick and the <code>.config</code> file should be generated. The config file should contain a lot of IDs for individual configurations and the values for those, very often in yes/no format (e.g. <code>CONFIG_FOO=y</code> or <code>CONFIG_FOO=n</code>). You could edit the file manually, but I personally wouldn’t recommend it, especially as a beginner (I don’t consider myself an expert at this either). A better way to edit this is through the <code>curses</code>-based pseudo-interface. You can get there by running</p>
<pre is:raw="" tabindex="0"><code><span><span>make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- menuconfig</span></span></code></pre>
<p>This interface has a few benefits.</p>
<ol>
<li>You have a more readable, folder-like overview of the configs.</li>
<li>There are insights into dependencies between the configs, i.e. it may only make sense to be able to enable config <code>foo</code> if <code>bar</code> and <code>baz</code> are also enabled.</li>
<li>This interface has a search feature, activated by pressing the <code>/</code> button (I don’t think you’ll get far by searching there in natural language; my way of getting around here is by searching on Google and finding which exactly config key am I looking for, for example <code>CONFIG_TTY_PRINTK</code>). When you find what you’re looking for, hit the button you see in the parentheses.</li>
</ol>
<p>We won’t be tweaking anything here for now, let’s just exit and move on.</p>
<p>It’s time to build the kernel! Quick note here, the make process famously has the <code>-j</code> flag, which basically sets the concurrency in the build process, meaning it allows the build process to run a few things simultaneously. If you want to build faster, but not sure what to do, count the number of cores, and if it’s something like 8, just pass the flag <code>-j8</code> below, as so. I will run the command like this (I’m on a 16-core machine):</p>
<pre is:raw="" tabindex="0"><code><span><span>make ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- -j16</span></span></code></pre>
<p>This can take some time, though for the RISC-V build, it shouldn’t take awfully long, but I would expect at least a few minutes.</p>
<p>Once this is done, you will probably see something like this near the very bottom:</p>
<pre is:raw="" tabindex="0"><code><span><span>OBJCOPY arch/riscv/boot/Image</span></span></code></pre>
<p>and this is the file we will be feeding to QEMU.</p>
<p>Great, let’s fire up QEMU!</p>
<pre is:raw="" tabindex="0"><code><span><span>qemu-system-riscv64 -machine virt -kernel arch/riscv/boot/Image</span></span></code></pre>
<p>Switching to the UART view, we see that OpenSBI tidily started and the Linux took over! Great! We even see some references to the SBI layer that we have discussed before:</p>
<pre is:raw="" tabindex="0"><code><span><span>[    0.000000] Linux version 6.5.2 (uros@uros-debian-desktop) (riscv64-linux-gnu-gcc (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2) #1 SMP Mon Sep 11 00:45:40 PDT 2023</span></span>
<span><span>[    0.000000] Machine model: riscv-virtio,qemu</span></span>
<span><span>[    0.000000] SBI specification v0.2 detected</span></span>
<span><span>[    0.000000] SBI implementation ID=0x1 Version=0x8</span></span>
<span><span>[    0.000000] SBI TIME extension detected</span></span>
<span><span>[    0.000000] SBI IPI extension detected</span></span>
<span><span>[    0.000000] SBI RFENCE extension detected</span></span></code></pre>
<p>After reading about <a href="https://popovicu.com/posts/risc-v-sbi-and-full-boot-process">the boot process</a>, we should now have a full understanding of what is going on here. This happened super early in the boot phase. There is a lot happening in these logs, and I’ll highlight a few things:</p>
<pre is:raw="" tabindex="0"><code><span><span>[    0.000000] riscv: base ISA extensions acdfim</span></span></code></pre>
<p>Seems like Linux is capable of dynamically figuring out the capability of the underlying RISC-V hardware. I’m not sure what exactly is the mechanism behind it, could it be somehow passed through the device tree that we mentioned in the previous article, or something in the ISA itself tells this to the kernel, I’m not sure.</p>
<pre is:raw="" tabindex="0"><code><span><span>[    0.000000] Kernel command line:</span></span></code></pre>
<p>This is interesting, a kernel has a command line? Turns out that the kernel, much like your everyday binaries, has startup flags. The kernel bootloader usually sets those up — after all, it knows how to fire up the kernel, and this could simply be a part of the starting process. With QEMU, remember, we’re sort of short circuiting the whole bootloader thing, and with passing the <code>-kernel</code> flag, we let QEMU also wear the bootloader hat here by loading the kernel image into the memory and starting it up. QEMU actually has a flag called <code>-append</code> with which you can append to this kernel command line. The command line itself is baked into the config file under <code>Boot options</code> somewhere, I leave it to the reader to search for it, and the QEMU flag basically lets you adjust it with a VM launch, instead of having to rebuild the kernel to tweak the command line. In this case, the command line is just blank by default.</p>
<pre is:raw="" tabindex="0"><code><span><span>[    0.003376] printk: console [tty0] enabled</span></span></code></pre>
<p>I guess this means that <code>printk</code> will now write to <code>tty0</code>? <code>printk</code> is basically a way to write out messages from the kernel space. Remember, your typical <code>printf</code> from C’s <code>stdio.h</code> is meant for running in the user space, not kernel space, so kernel space must have its own solution, and it is <code>printk</code>.</p>
<pre is:raw="" tabindex="0"><code><span><span>[    0.211634] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled</span></span>
<span><span>[    0.221544] 10000000.uart: ttyS0 at MMIO 0x10000000 (irq = 12, base_baud = 230400) is a 16550A</span></span>
<span><span>[    0.222659] printk: console [ttyS0] enabled</span></span></code></pre>
<p>Great, Linux knows there is UART at <code>0x10000000</code>, just like we established before. Linux can now choose whether to use the SBI interface to drive the UART, or talk to it directly (if the S-mode allows it on that machine, that is). On many platforms, the OS can disregard that a lower level software like BIOS may offer to interact with the hardware, and from what I hear, this actually indeed happens a lot.</p>
<p>There’s also a lot of other stuff in the kernel logs:</p>
<pre is:raw="" tabindex="0"><code><span><span>[    0.250030] SuperH (H)SCI(F) driver initialized</span></span></code></pre>
<p>I don’t think we need this? I guess we can go back to the kernel config and not bake this driver into the kernel and thus slim the kernel down. What we’re building here is a generic build, really. We didn’t customize anything and presumably the authors of the default config thought this is a reasonable default that should just run on a lot of different setups, so they probably included a lot of things to be on the safe side. If you’re working on smaller hardware, with less generous memory, CPU, etc. you do have to carefully choose what gets baked into the kernel and what doesn’t.</p>
<p>Additionally, this generic build is smart enough to figure out that the console should go to the right UART device, which is really handy for us. Otherwise, we’d probably have to do a bunch of configs like making sure TTY (let’s not overfocus on what this is now) is enabled, we want to enable printing to UART as the kernel boots, etc. All this is basically configurable in the <code>menuconfig</code> interface.</p>
<p>We’ll keep it simple in this article, and we won’t customize anything in the kernel unless we have to.</p>
<h4 id="first-obstacles">First obstacles</h4>
<p>Scrolling down closer to the bottom of the output, we see this:</p>
<pre is:raw="" tabindex="0"><code><span><span>[    0.330411] /dev/root: Can't open blockdev</span></span>
<span><span>[    0.330743] VFS: Cannot open root device "" or unknown-block(0,0): error -6</span></span>
<span><span>[    0.330984] Please append a correct "root=" boot option; here are the available partitions:</span></span>
<span><span>[    0.331648] List of all bdev filesystems:</span></span>
<span><span>[    0.331785]  ext3</span></span>
<span><span>[    0.331803]  ext2</span></span>
<span><span>[    0.331882]  ext4</span></span>
<span><span>[    0.331950]  vfat</span></span>
<span><span>[    0.332028]  msdos</span></span>
<span><span>[    0.332098]  iso9660</span></span>
<span><span>[    0.332181]</span></span>
<span><span>[    0.332405] Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)</span></span>
<span><span>[    0.332756] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 6.5.2 #1</span></span>
<span><span>[    0.333018] Hardware name: riscv-virtio,qemu (DT)</span></span>
<span><span>[    0.333248] Call Trace:</span></span>
<span><span>[    0.333442] [&lt;ffffffff8000537a&gt;] dump_backtrace+0x1c/0x24</span></span>
<span><span>[    0.333940] [&lt;ffffffff808890f8&gt;] show_stack+0x2c/0x38</span></span>
<span><span>[    0.334138] [&lt;ffffffff80894a48&gt;] dump_stack_lvl+0x3c/0x54</span></span>
<span><span>[    0.334318] [&lt;ffffffff80894a74&gt;] dump_stack+0x14/0x1c</span></span>
<span><span>[    0.334493] [&lt;ffffffff80889500&gt;] panic+0x102/0x29e</span></span>
<span><span>[    0.334683] [&lt;ffffffff80a015c6&gt;] mount_root_generic+0x1e8/0x29c</span></span>
<span><span>[    0.334891] [&lt;ffffffff80a0186c&gt;] mount_root+0x1f2/0x224</span></span>
<span><span>[    0.335108] [&lt;ffffffff80a01a68&gt;] prepare_namespace+0x1ca/0x222</span></span>
<span><span>[    0.335320] [&lt;ffffffff80a010c8&gt;] kernel_init_freeable+0x23e/0x262</span></span>
<span><span>[    0.335539] [&lt;ffffffff80896264&gt;] kernel_init+0x1e/0x10a</span></span>
<span><span>[    0.335714] [&lt;ffffffff800034c2&gt;] ret_from_fork+0xa/0x1c</span></span>
<span><span>[    0.336208] ---[ end Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0) ]---</span></span></code></pre>
<p>Whoops, we crashed! The kernel has fallen into a <strong>panic</strong>.</p>
<p>Remember how we talked that pretty much always Linux needs a filesystem to be useful and how all the “infrastructure on top of infrastructure” is in the user space? Well, we didn’t really pass anything related to the filesystem explicitly and we surely didn’t pass any user space code to serve as the <code>init</code>, though we didn’t even get to the latter.</p>
<p>You might imagine that the filesystem needs to be on a disk, but that’s not necessarily the case. We’ll talk some other time about filesystems in great detail, but you can really have a filesystem be backed by RAM memory too. And this is actually very often used by Linux, most notably in the boot up phase. When the kernel gets to where it crashed for us just now, in a normal, typical situation, it will find the whole, fully functional filesystem actually loaded into the RAM. If this confuses you, just think about it this way — a disk is just a bunch of bytes, just like RAM is, though RAM is faster but much smaller; conceptually they’re basically the same. Who and how loads this memory?</p>
<p>One way is to bake the filesystem directly into the kernel image. In this case, as the kernel loads, so does the initial, memory-backed filesystem, and our system would be ready to go if we had done that. If you don’t want to bulk up your kernel image and you want your initial filesystem to be loaded by some other means, like through a bootloader or something, then you package it separately. In QEMU case, we can shortcircuit things a little bit again, and make it wear a few more hats — we’ll make it also load the initial filesystem into the memory as well. If you’re interested in building the filesystem into the kernel, read the discussion <a href="https://stackoverflow.com/questions/65868294/if-i-build-linux-kernel-from-source-does-it-contain-initramfs-inside-by-default">here</a> and try it as an exercise after you’re done with this guide.</p>
<p>This initial filesystem has a name: <code>initramfs</code>. You’ll often hear it called <code>initrd</code> too (I imagine <code>rd</code> is short for ramdisk?). The latter is how QEMU takes in the filesystem for loading (<code>-initrd</code> flag).</p>
<p>The filesystem is packaged as a <code>cpio</code> archive, which is conceptually similar to <code>tar</code>, but it’s not the same binary format. Short discussion can be read <a href="https://unix.stackexchange.com/questions/7276/why-use-cpio-for-initramfs">here</a>.</p>
<h4 id="building-the-initramfs">Building the <code>initramfs</code></h4>
<p>The only real requirement for the <code>initramfs</code> from the kernel is that it has a binary it can start up as the <code>init</code> process, and the first place where the kernel will look for it is at the filesystem root, so the path is <code>/init</code>. If you have absolutely nothing else on your filesystem, it’s questionably useful, but this is the bare requirement. Let’s start by writing the <code>init</code> process in C. This process can be really anything, Linux won’t stop you from writing a useless <code>init</code>, it will happily just execute it. We can go with a ‘hello world’ then?</p>
<pre is:raw="" tabindex="0"><code><span><span>#include</span><span> </span><span>&lt;stdio.h&gt;</span></span>
<span></span>
<span><span>int</span><span> </span><span>main</span><span>(</span><span>int</span><span> </span><span>argc</span><span>,</span><span> </span><span>char</span><span> </span><span>*</span><span>argv</span><span>[]</span><span>) {</span></span>
<span><span>  </span><span>printf</span><span>(</span><span>"Hello world</span><span>\n</span><span>"</span><span>);</span></span>
<span><span>  </span><span>return</span><span> </span><span>0</span><span>;</span></span>
<span><span>}</span></span></code></pre>
<p>Great, now let’s package it up into a <code>cpio</code> archive.</p>
<pre is:raw="" tabindex="0"><code><span><span>riscv64-linux-gnu-gcc -static -o init init.c</span></span>
<span><span>cpio -o -H newc &lt; file_list.txt &gt; initramfs.cpio</span></span></code></pre>
<p>The <code>file_list.txt</code> has a single line:</p>
<pre is:raw="" tabindex="0"><code><span><span>init</span></span></code></pre>
<ol>
<li>We’re building a static binary because we do not want to dynamically depend on the standard C library. The filesystem won’t have it, we’re making a filesystem with <code>init</code> alone.</li>
<li>Linux expects the <code>initramfs</code> archive to be built with the <code>-H newc</code> flag.</li>
</ol>
<p>Let’s run QEMU.</p>
<pre is:raw="" tabindex="0"><code><span><span>qemu-system-riscv64 -machine virt -kernel arch/riscv/boot/Image -initrd /PATH/TO/NEWLY_BUILT/initramfs.cpio</span></span></code></pre>
<p>The kernel stil falls into a panic, but a different one!</p>
<pre is:raw="" tabindex="0"><code><span><span>[    0.351894] Run /init as init process</span></span>
<span><span>Hello world</span></span>
<span><span>[    0.379006] Kernel panic - not syncing: Attempted to kill init! exitcode=0x00000000</span></span>
<span><span>[    0.379360] CPU: 0 PID: 1 Comm: init Not tainted 6.5.2 #1</span></span>
<span><span>[    0.379597] Hardware name: riscv-virtio,qemu (DT)</span></span>
<span><span>[    0.379812] Call Trace:</span></span>
<span><span>[    0.380005] [&lt;ffffffff8000537a&gt;] dump_backtrace+0x1c/0x24</span></span>
<span><span>[    0.380724] [&lt;ffffffff808890f8&gt;] show_stack+0x2c/0x38</span></span>
<span><span>[    0.380906] [&lt;ffffffff80894a48&gt;] dump_stack_lvl+0x3c/0x54</span></span>
<span><span>[    0.381095] [&lt;ffffffff80894a74&gt;] dump_stack+0x14/0x1c</span></span>
<span><span>[    0.381283] [&lt;ffffffff80889500&gt;] panic+0x102/0x29e</span></span>
<span><span>[    0.381447] [&lt;ffffffff80013fd0&gt;] do_exit+0x760/0x766</span></span>
<span><span>[    0.381623] [&lt;ffffffff80014154&gt;] do_group_exit+0x24/0x70</span></span>
<span><span>[    0.381806] [&lt;ffffffff800141b8&gt;] __wake_up_parent+0x0/0x20</span></span>
<span><span>[    0.382009] [&lt;ffffffff80895482&gt;] do_trap_ecall_u+0xe6/0xfa</span></span>
<span><span>[    0.382218] [&lt;ffffffff8000337c&gt;] ret_from_exception+0x0/0x64</span></span>
<span><span>[    0.382808] ---[ end Kernel panic - not syncing: Attempted to kill init! exitcode=0x00000000 ]---</span></span></code></pre>
<p>I guess this just means <code>init</code> shouldn’t finish, so it should be easy to fix? Let’s just make it print something every 10 seconds and never stop. Important to note: our output worked, we see a “Hello world” string!</p>
<p>We’ll write a new <code>init</code>, but let’s also make our <code>initramfs</code> a little more complex too. Let’s remember how we said that <code>init</code> starts up all the other processes on the machine. Wouldn’t it be nice if we actually had some sort of a shell? After all, that’s what we typically have with Linux — shells go well with Linux. We’ll build a useless shell, the one that just tells us what we asked it to do (echoes back the input).</p>
<p>Let’s first write the <code>init</code> process. Before it begins looping and printing something every 10 seconds, it has an important job of spawning our “little shell”. The way a process can spawn another process in Linux is through 2 operations: <code>fork</code> and <code>exec</code>. <code>fork</code> will start a new process by literally cloning the current process at the moment of <code>fork</code>. The way the underlying code can differentiate the “parent” and “child” processes after that is by checking the return value of the <code>fork</code> operation. If it is 0, this means the process is the child process, and it’s a parent otherwise (-1 is returned in an error case).</p>
<p>Next, it’s not useful for us here to just keep executing the <code>init</code> program in 2 different processes. That’s where one of the many <code>exec</code> operations come into the picture. When I say there are many <code>exec</code> operations available on Linux, I mean there are <code>execl</code>, <code>execlp</code>, <code>execle</code>, etc. Take a look at more documentation <a href="https://man7.org/linux/man-pages/man3/exec.3.html">here</a>, please. We’re going with <code>execl</code> here, and the first parameter is which binary do we want to launch. We’ll package our fake shell as the <code>little_shell</code> binary on the root. The rest of the parameters do not really matter (as evidenced by the value of the second parameter). More important, the mechanism of this operation is that we’re calling into the kernel to take whatever is running in the current process and replace it with the program that is loaded for execution from the binary listed as the first parameter. This is how programs get launched on Linux and when you’re working in your Bash shell, and you end up launching a program, this is what happens — a sequence of <code>fork</code> and <code>exec</code>-style calls.</p>
<pre is:raw="" tabindex="0"><code><span><span>#include</span><span> </span><span>&lt;stdio.h&gt;</span></span>
<span><span>#include</span><span> </span><span>&lt;unistd.h&gt;</span></span>
<span></span>
<span><span>int</span><span> </span><span>main</span><span>(</span><span>int</span><span> </span><span>argc</span><span>,</span><span> </span><span>char</span><span> </span><span>*</span><span>argv</span><span>[]</span><span>) {</span></span>
<span><span>  </span><span>pid_t</span><span> pid </span><span>=</span><span> </span><span>fork</span><span>();</span></span>
<span></span>
<span><span>  </span><span>if</span><span> (pid </span><span>==</span><span> </span><span>-</span><span>1</span><span>) {</span></span>
<span><span>    </span><span>printf</span><span>(</span><span>"Unable to fork!"</span><span>);</span></span>
<span><span>    </span><span>return</span><span> </span><span>-</span><span>1</span><span>;</span></span>
<span><span>  }</span></span>
<span></span>
<span><span>  </span><span>if</span><span> (pid </span><span>==</span><span> </span><span>0</span><span>) {</span></span>
<span><span>    </span><span>// This is a child process.</span></span>
<span><span>    </span><span>int</span><span> status </span><span>=</span><span> </span><span>execl</span><span>(</span><span>"/little_shell"</span><span>, </span><span>"irrelevant"</span><span>, </span><span>NULL</span><span>);</span></span>
<span></span>
<span><span>    </span><span>if</span><span> (status </span><span>==</span><span> </span><span>-</span><span>1</span><span>) {</span></span>
<span><span>      </span><span>printf</span><span>(</span><span>"Forked process cannot start the little_shell"</span><span>);</span></span>
<span><span>      </span><span>return</span><span> </span><span>-</span><span>2</span><span>;</span></span>
<span><span>    }</span></span>
<span><span>  }</span></span>
<span></span>
<span><span>  </span><span>int</span><span> count </span><span>=</span><span> </span><span>1</span><span>;</span></span>
<span></span>
<span><span>  </span><span>while</span><span> (</span><span>1</span><span>) {</span></span>
<span><span>    </span><span>printf</span><span>(</span><span>"Hello from the original init! </span><span>%d</span><span>\n</span><span>"</span><span>, count);</span></span>
<span><span>    count</span><span>++</span><span>;</span></span>
<span><span>    </span><span>sleep</span><span>(</span><span>10</span><span>);</span></span>
<span><span>  }</span></span>
<span></span>
<span><span>  </span><span>return</span><span> </span><span>0</span><span>;</span></span>
<span><span>}</span></span></code></pre>
<p>We build the <code>init</code> the same way as we did before:</p>
<pre is:raw="" tabindex="0"><code><span><span>riscv64-linux-gnu-gcc -static -o init init.c</span></span></code></pre>
<p>For the “shell” we’re building, I want to get a little more creative. Why don’t we write this one in Go instead of old school C?</p>
<pre is:raw="" tabindex="0"><code><span><span>package</span><span> </span><span>main</span></span>
<span></span>
<span><span>import</span><span> (</span></span>
<span><span>	</span><span>"bufio"</span></span>
<span><span>	</span><span>"fmt"</span></span>
<span><span>	</span><span>"os"</span></span>
<span><span>)</span></span>
<span></span>
<span><span>func</span><span> </span><span>main</span><span>() {</span></span>
<span><span>	fmt.</span><span>Println</span><span>(</span><span>"Hello world from Go!"</span><span>)</span></span>
<span></span>
<span><span>	</span><span>reader</span><span> </span><span>:=</span><span> bufio.</span><span>NewReader</span><span>(os.Stdin)</span></span>
<span></span>
<span><span>	</span><span>for</span><span> {</span></span>
<span><span>		fmt.</span><span>Print</span><span>(</span><span>"Enter your command: "</span><span>)</span></span>
<span><span>		</span><span>line</span><span>, </span><span>_</span><span> </span><span>:=</span><span> reader.</span><span>ReadString</span><span>(</span><span>'</span><span>\n</span><span>'</span><span>)</span></span>
<span><span>		fmt.</span><span>Printf</span><span>(</span><span>"Your command is: </span><span>%s</span><span>"</span><span>, line)</span></span>
<span><span>	}</span></span>
<span><span>}</span></span></code></pre>
<p>I am able to cross compile this to RISC-V out-of-the-box with my <code>go</code> compiler.</p>
<pre is:raw="" tabindex="0"><code><span><span>GOOS=linux GOARCH=riscv64 go build little_shell.go</span></span></code></pre>
<p>Nice thing that I really like about Go is that it’s very easy to reference other remote repositories on GitHub to include libraries, and things get neatly packaged up statically. I’m not going to lie, the <code>little_shell</code> Go binary is pretty thick, weighing in at 1.9M on my machine, compared to only 454K for the statically-linked simple init, but in the days of desktops/laptops/phones with hundreds of GB of storage, if you’re building a distro for these kinds of devices, you may want to consider the tradeoff.</p>
<p>Note, there are situations where you may not be able to simply run your Go binary just like that on top of a bare kernel, it could start throwing Go panics all over the place. In order to run Go, you need to build your kernel with the right features in it, futex support feature being one of them (I think I’ve identified only 2 in my past experience). If you encounter any problems running the Go applications and you suspect you may not have the right kernel support, carefully read through the panics and you will be able to identify what is missing. Good news here is that the default config for the RISC-V kernel is good enough for running Go.</p>
<p>Let’s update our <code>file_list.txt</code>:</p>
<pre is:raw="" tabindex="0"><code><span><span>init</span></span>
<span><span>little_shell</span></span></code></pre>
<p>Pack it all up again:</p>
<pre is:raw="" tabindex="0"><code><span><span>cpio -o -H newc &lt; file_list.txt &gt; initramfs.cpio</span></span></code></pre>
<p>Let’s run it!</p>
<pre is:raw="" tabindex="0"><code><span><span>qemu-system-riscv64 -machine virt -kernel arch/riscv/boot/Image -initrd /PATH/TO/NEWLY_BUILT/initramfs.cpio</span></span></code></pre>
<pre is:raw="" tabindex="0"><code><span><span>[    0.356314] Run /init as init process</span></span>
<span><span>Hello from the original init! 1</span></span>
<span><span>Hello world from Go!</span></span>
<span><span>Enter your command: [[[mkdir hello]]]</span></span>
<span><span>Your command is: mkdir hello</span></span>
<span><span>Enter your command: [[[ls]]]</span></span>
<span><span>Your command is: ls</span></span>
<span><span>Enter your command: Hello from the original init! 2</span></span>
<span><span>[[[echo 123]]</span></span>
<span><span>Your command is: echo 123</span></span>
<span><span>Enter your command: [[[exit]]]</span></span>
<span><span>Your command is: exit</span></span>
<span><span>Enter your command: Hello from the original init! 3</span></span>
<span><span>[[[I give up!]]]</span></span>
<span><span>Your command is: I give up!</span></span></code></pre>
<p>The bits in this console excerpt enclosed with triple square brackets are my user-provided input over UART. You can see 3 things interleaved on the UART</p>
<ol>
<li>Original <code>init</code>’s period output every 10 seconds.</li>
<li>Output from the <code>little_shell</code>.</li>
<li>Input from the user.</li>
</ol>
<p>We are using the sole UART device on the virtual machine for all this, but that is not the only reason why everything is mixed up here. <code>init</code> process prints to the standard output, just like <code>little_shell</code> does, and you may not be aware of it, but any sort of print on Linux is a print to an <strong>open file</strong>. Standard output, as far as Linux knows, is a file that is opened by a process and you are printing to the standard output by writing to that file. When we <code>fork</code>-ed the <code>little_shell</code> from <code>init</code>, the <code>little_shell</code> <strong>inherited</strong> the open files from <code>init</code>. So they are literally sharing all the standard input and output streams. Even if we had multiple I/O devices that we used on this machine, they’d still be sending outputs over to the same output stream. When <code>init</code> was started, its standard output was set to produce content over to UART, and this behavior was simply inherited by the <code>little_shell</code>.</p>
<p>And there we have it, we have a pretty useless, but home-made Linux distribution! Go ahead and send it over to your friends! :)</p>
<p>Jokes aside, you can make an exercise out of this and implement some sort of a mini shell out of this <code>little_shell</code>. Instead of just echoing back the commands given to it, you could make it actually understand what <code>mkdir</code> is. You can even have it fork off a process to execute that elsewhere. Sky is the limit, you’re in the Linux userspace!</p>
<p>Let’s just step back a little and see if Linux kernel achieved the initial few promises for us:</p>
<ol>
<li>
<p>It’s abstracting away the hardware. Our <code>init</code> and our shell didn’t know anything about the UART. All they knew was they’re writing to some Linux file handle. It happens to be mapped to something abstract in the Linux kernel that invokes the UART driver in the Linux kernel, which may or may not use the SBI under the hood (I have honestly not verified if the kernel removes its dependence on SBI after it boots).</p>
</li>
<li>
<p>It offers some high-level programming paradigms, like filesystems. Our <code>init</code> process located the other binary through the filesystem (the path was trivial, the binary was right in the root, but still, the paradigm is there).</p>
</li>
<li>
<p>There is a pretty clean isolation between the processes running. Once the shell was forked off from the <code>init</code>, the processes were basically running independently. The memory was not shared between them and they didn’t have to worry about each other’s memory layout. They did share something else, though, like the file handles, but this is a consequence of how they were launched into running. Linux enables you to actually change some of this behavior, e.g. you can set up some shared memory between the processes, if you explicitly want to.</p>
</li>
</ol>
<p>There are many other things the kernel does for us, but let’s just stop here for now and appreciate this. It may not look like a lot, but the kernel gives us a pretty solid, portable infrastructure with which we can develop high level software while often disregarding the complexities of the underlying machine.</p>
<h3 id="so-what-is-an-operating-system">So what is an operating system?</h3>
<p>This is now a game of words in my opinion. In my view, what matters is that the reader now has an understanding of what Linux as the kernel is, what “infrastructure” it offers, and what is running in the user space and what is running in the kernel space.</p>
<p>Some people may call the kernel itself an operating system, some people will refer to the whole distribution as the operating system, or they may come up with something completely different. I hope that at this point you have a good understanding of what is happening on a machine once Linux is started and where the responsibilities of each component end (or you can at least imagine the boundaries on a more complex system).</p>
<p>I hope this was useful!</p>
<h3 id="bonus-section-making-an-actually-useful-micro-distribution-with-u-root">Bonus section: making an actually useful micro distribution with <code>u-root</code></h3>
<p>I thought about wrapping up here, but it wouldn’t make for a flashy demo. Why don’t we instead boot into something that’s actually useful, meaning that you can do things you would typically do on a Linux-based system, like run your <code>ls</code>, <code>mkdir</code>, <code>echo</code> and whatnot. Let’s stick with the kernel we have previously built, and add some useful “infrastructure on top of infrastructure” in the user space domain to make the whole machine more useful.</p>
<p>I really like the <a href="https://github.com/u-root/u-root">u-root project</a> for this.</p>
<p><strong>Note: The title of their project mentions Go bootloaders, and this may stump you because as a careful reader, you know that Go programs are not really something you can run on bare metal. These bootloaders are somewhat exotic <em>userspace</em> bootloaders, meaning that they will actually run on top of a live Linux kernel, and then use this amazing Linux mechanism called <code>kexec</code> to re-load a different kernel into the memory from user space. We won’t be using these bootloaders for now, we’ll just focus on the other user space goodies they have available, but I thought a quick paragraph here would help the confused readers.</strong></p>
<p>The reason why I like the <code>u-root</code> project is because it’s so insanely easy to use. Its usage is a bit creative though, so there are really 2 steps here:</p>
<ol>
<li>Install <code>u-root</code> per their instructions. You should end up with a <code>u-root</code> binary in your <code>PATH</code>.</li>
<li>Now to actually generate a functional <code>initramfs</code> with <code>u-root</code>, the easiest way is to clone their Git repo and <code>cd</code> your way into the directory that you just cloned. From there, you can cross-compile a fully functional user space set of tools with a single command.</li>
</ol>
<pre is:raw="" tabindex="0"><code><span><span>git clone https://github.com/u-root/u-root.git</span></span>
<span><span>cd u-root</span></span>
<span><span>GOOS=linux GOARCH=riscv64 u-root</span></span></code></pre>
<p>I get a few lines of output, the last being:</p>
<pre is:raw="" tabindex="0"><code><span><span>18:31:31 Successfully built "/tmp/initramfs.linux_riscv64.cpio" (size 14827284).</span></span></code></pre>
<p>And that’s really it, this <code>cpio</code> file can now be just ran with QEMU and you’ll boot right into a shell! Go through the <code>u-root</code> documentation to understand how you can customize this <code>initramfs</code> image you get, including what sort of changes you can make to the <code>init</code> process behavior, but I think the default setup is so amazing to explore with.</p>
<pre is:raw="" tabindex="0"><code><span><span>qemu-system-riscv64 -machine virt -kernel arch/riscv/boot/Image -initrd /tmp/initramfs.linux_riscv64.cpio</span></span></code></pre>
<p>Wow, this booted really smoothly! Providing the bottom of the UART output.</p>
<pre is:raw="" tabindex="0"><code><span><span>[    0.400269] Run /init as init process</span></span>
<span><span>2023/09/12 01:34:33 Welcome to u-root!</span></span>
<span><span>                              _</span></span>
<span><span>   _   _      _ __ ___   ___ | |_</span></span>
<span><span>  | | | |____| '__/ _ \ / _ \| __|</span></span>
<span><span>  | |_| |____| | | (_) | (_) | |_</span></span>
<span><span>   \__,_|    |_|  \___/ \___/ \__|</span></span>
<span><span></span></span></code></pre>
<p>And as you can see by the little <code>/#</code> prompt, you’re actually in a shell! <code>u-root</code>’s <code>init</code> forked off a shell process and gave it the control over the UART.</p>
<pre is:raw="" tabindex="0"><code><span><span>/# ls</span></span>
<span><span>bbin</span></span>
<span><span>bin</span></span>
<span><span>buildbin</span></span>
<span><span>dev</span></span>
<span><span>env</span></span>
<span><span>etc</span></span>
<span><span>go</span></span>
<span><span>init</span></span>
<span><span>lib</span></span>
<span><span>lib64</span></span>
<span><span>proc</span></span>
<span><span>root</span></span>
<span><span>sys</span></span>
<span><span>tcz</span></span>
<span><span>tmp</span></span>
<span><span>ubin</span></span>
<span><span>usr</span></span>
<span><span>var</span></span>
<span><span>/# pwd</span></span>
<span><span>/</span></span>
<span><span>/# echo "Hello world!"</span></span>
<span><span>Hello world!</span></span></code></pre>
<p>This little shell that <code>u-root</code> gives even supports Tab-completion! I will say I have encountered some hiccups occassionally with it, it’s definitely not your full blown Bash, but it’s more than just a toy.</p>
<p>The standard tools like <code>ls</code> seem to be taking the standard flags:</p>
<pre is:raw="" tabindex="0"><code><span><span>/# ls -lah</span></span>
<span><span>dtrwxrwxrwx root 0 420 B  Sep 12 01:35 .</span></span>
<span><span>drwxr-xr-x  root 0 2.1 kB Jan  1 00:00 bbin</span></span>
<span><span>drwxr-xr-x  root 0 80 B   Jan  1 00:00 bin</span></span>
<span><span>drwxrwxrwx  root 0 40 B   Sep 12 01:34 buildbin</span></span>
<span><span>drwxr-xr-x  root 0 12 kB  Sep 12 01:34 dev</span></span>
<span><span>drwxr-xr-x  root 0 40 B   Sep 12 01:35 directory</span></span>
<span><span>drwxr-xr-x  root 0 40 B   Jan  1 00:00 env</span></span>
<span><span>drwxr-xr-x  root 0 80 B   Sep 12 01:34 etc</span></span>
<span><span>drwxrwxrwx  root 0 60 B   Sep 12 01:34 go</span></span>
<span><span>Lrwxrwxrwx  root 0 9 B    Jan  1 00:00 init -&gt; bbin/init</span></span>
<span><span>drwxrwxrwx  root 0 40 B   Sep 12 01:34 lib</span></span>
<span><span>drwxr-xr-x  root 0 40 B   Jan  1 00:00 lib64</span></span>
<span><span>dr-xr-xr-x  root 0 0 B    Sep 12 01:34 proc</span></span>
<span><span>drwx------  root 0 40 B   Sep 11 07:43 root</span></span>
<span><span>dr-xr-xr-x  root 0 0 B    Sep 12 01:34 sys</span></span>
<span><span>drwxr-xr-x  root 0 40 B   Jan  1 00:00 tcz</span></span>
<span><span>dtrwxrwxrwx root 0 60 B   Sep 12 01:34 tmp</span></span>
<span><span>drwxr-xr-x  root 0 40 B   Jan  1 00:00 ubin</span></span>
<span><span>drwxr-xr-x  root 0 60 B   Jan  1 00:00 usr</span></span>
<span><span>drwxr-xr-x  root 0 60 B   Jan  1 00:00 var</span></span></code></pre>
<h3 id="visit-googlecom-from-this">Visit google.com from this!</h3>
<p>One last flashy thing — let’s connect to google.com from this VM with our custom user-land!</p>
<p>First, we need to attach a network device. We add <code>-device virtio-net-device,netdev=usernet -netdev user,id=usernet,hostfwd=tcp::10000-:22</code> to our QEMU CLI. I think the last 2 numbers do not really matter as we won’t be SSH’ing into this machine (maybe you can do that exercise yourself, but I’m afraid it won’t be easy). The default kernel build should indeed bake in the <code>virtio</code> network device drivers, so this should more or less just work.</p>
<p>We’ll need a working IP address, and we’ll use something from <code>u-root</code> to obtain it. That something requires 3 things present in the kernel config: <code>CONFIG_VIRTIO_PCI</code>, <code>CONFIG_HW_RANDOM_VIRTIO</code> and <code>CONFIG_CRYPTO_DEV_VIRTIO</code>. My default settings for the kernel have all that flipped to <code>y</code>, so I’m good to go and you should be too, but you can double check just in case. If you have changed any kernel settings, please rebuild the kernel image.</p>
<p>Finally, we need to attach an RNG (doesn’t matter what it is) device to our QEMU machine so we can obtain our IP address. We simply add <code>-device virtio-rng-pci</code> to our QEMU CLI.</p>
<pre is:raw="" tabindex="0"><code><span><span>qemu-system-riscv64 -machine virt -kernel arch/riscv/boot/Image -initrd /tmp/initramfs.linux_riscv64.cpio -device virtio-net-device,netdev=usernet -netdev user,id=usernet,hostfwd=tcp::10000-:22 -device virtio-rng-pci</span></span></code></pre>
<p>Once we’re in, we can run <code>ip addr</code> to see what’s our IP address.</p>
<pre is:raw="" tabindex="0"><code><span><span>/# ip addr</span></span>
<span><span>1: lo: &lt;UP,LOOPBACK&gt; mtu 65536 state UNKNOWN</span></span>
<span><span>    link/loopback</span></span>
<span><span>    inet 127.0.0.1 scope host lo</span></span>
<span><span>       valid_lft forever preferred_lft forever</span></span>
<span><span>    inet6 ::1 scope host</span></span>
<span><span>       valid_lft forever preferred_lft forever</span></span>
<span><span>2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 state DOWN</span></span>
<span><span>    link/ether 52:54:00:12:34:56</span></span>
<span><span>3: sit0: &lt;0&gt; mtu 1480 state DOWN</span></span>
<span><span>    link/sit</span></span></code></pre>
<p>Our Ethernet is not set up. Let’s enable IPv4 networking (we don’t need 6). In this little setup, QEMU is running a virtualized network and it embeds a little DHCP server which can dynamically assign IPs (documentation is <a href="https://wiki.qemu.org/Documentation/Networking">here</a>). So let’s run a DHCP helper from <code>u-root</code> for this by running</p>
<pre is:raw="" tabindex="0"><code><span><span>dhclient -ipv6=false</span></span></code></pre>
<p>The output I got was the following:</p>
<pre is:raw="" tabindex="0"><code><span><span>2023/09/12 03:46:59 Bringing up interface eth0...</span></span>
<span><span>2023/09/12 03:47:00 Attempting to get DHCPv4 lease on eth0</span></span>
<span><span>2023/09/12 03:47:00 Got DHCPv4 lease on eth0: DHCPv4 Message</span></span>
<span><span>  opcode: BootReply</span></span>
<span><span>  hwtype: Ethernet</span></span>
<span><span>  hopcount: 0</span></span>
<span><span>  transaction ID: 0x05f008e1</span></span>
<span><span>  num seconds: 0</span></span>
<span><span>  flags: Unicast (0x00)</span></span>
<span><span>  client IP: 0.0.0.0</span></span>
<span><span>  your IP: 10.0.2.15</span></span>
<span><span>  server IP: 10.0.2.2</span></span>
<span><span>  gateway IP: 0.0.0.0</span></span>
<span><span>  client MAC: 52:54:00:12:34:56</span></span>
<span><span>  server hostname:</span></span>
<span><span>  bootfile name:</span></span>
<span><span>  options:</span></span>
<span><span>    Subnet Mask: ffffff00</span></span>
<span><span>    Router: 10.0.2.2</span></span>
<span><span>    Domain Name Server: 10.0.2.3</span></span>
<span><span>    IP Addresses Lease Time: 24h0m0s</span></span>
<span><span>    DHCP Message Type: ACK</span></span>
<span><span>    Server Identifier: 10.0.2.2</span></span>
<span><span>2023/09/12 03:47:00 Configured eth0 with IPv4 DHCP Lease IP 10.0.2.15/24</span></span>
<span><span>2023/09/12 03:47:00 Finished trying to configure all interfaces.</span></span></code></pre>
<p>The QEMU documentation will tell you why pinging won’t work, so let’s not bother with pinging. Let’s just “visit” google.com!</p>
<pre is:raw="" tabindex="0"><code><span><span>wget http://google.com</span></span></code></pre>
<p>You can now read the downloaded <code>index.html</code> file!</p>
<pre is:raw="" tabindex="0"><code><span><span>cat index.html</span></span></code></pre>
<p>You’ll get a lot of obfuscated JavaScript, but this is great! It means we have successfully visited google.com through <code>wget</code>! I hope this sparks your imagination to do some other cool things with <code>u-root</code>.</p>
<h2 id="package-managers">Package managers</h2>
<p>You might intuitively understand at this point that some of the most important software of a Linux distro is the package manager. It’s really the gateway to getting the functionality on your machine that you need. What we went through here is more of an embedded flow: we generated these somewhat monolithic software images and if we want to update something, we rebuild the whole image and re-image the device. This doesn’t work for desktops, phones, etc. Package managers are there to update, add or remove the software on our machines. We won’t be talking about them here, just giving them a brief shoutout and you can hopefully imagine from the high level how they work and what do they do.</p>
<h2 id="the-monster-of-init">The monster of <code>init</code></h2>
<p>The <code>init</code> we created is definitely just a toy, and in the end it just started some sort of a shell. However, make no mistake about it, <code>init</code> is an incredibly important thing on a Linux system and getting it right is a science. You’ll see a lot of strong opinions on different <code>init</code> systems for Linux online. <code>init</code> doesn’t usually just spawn one process off and call it a day, it can set up a whole bunch of things like different devices, for example. As an exercise, just run <code>ls /dev</code> from your <code>u-root</code>-based build and see all those devices set up. A lot of them come from the <code>init</code>’s setup and many are extremely useful. You can then read some of the <code>u-root</code> source code to see what’s going on there in <code>init</code>.</p>
<h2 id="github-repo">GitHub repo</h2>
<p>The code for this guide is available <a href="https://github.com/popovicu/linux-micro-distro">here</a>, where you can just sync and build the <code>initramfs</code> images.</p>
    </article></div>]]></description>
        </item>
    </channel>
</rss>