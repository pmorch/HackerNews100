<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 14 Apr 2024 07:00:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Obituary for a Quiet Life (126 pts)]]></title>
            <link>https://bittersoutherner.com/feature/2023/obituary-for-a-quiet-life</link>
            <guid>40028643</guid>
            <pubDate>Sun, 14 Apr 2024 04:24:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bittersoutherner.com/feature/2023/obituary-for-a-quiet-life">https://bittersoutherner.com/feature/2023/obituary-for-a-quiet-life</a>, See on <a href="https://news.ycombinator.com/item?id=40028643">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-block-type="2" data-border-radii="{&quot;topLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;topRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomLeft&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0},&quot;bottomRight&quot;:{&quot;unit&quot;:&quot;px&quot;,&quot;value&quot;:0.0}}" id="block-yui_3_17_2_1_1683818697887_232641">
  <p>What I’ll miss most is the sound of his voice, cooked up in the North Carolina mountains out of remnants from across an ocean. <em>There</em> always <em>thar</em>, <em>fire</em> always <em>far</em>. I loved the phrase <em>ever which a’way but loose</em>. Loved how things <em>liked to happen</em>. How <em>hello</em> was <em>what do you say</em> and how <em>being still</em> meant <em>setting awhile</em>.&nbsp;&nbsp;</p><p>Even his voice was quiet, throaty and clipped in the way of men in these mountains — a voice meant for conversations beyond a crowd, meant for the group of men eyeing the door, aiming to be outside where it’d be easier to talk about nothing or just as soon not talk at all.&nbsp;</p><p>He could go hours without saying a word, but a flash of wit always waited on his tongue. For nearly 70 years he kept up a constant, good-natured banter with Grandma over anything and everything.&nbsp;</p><p>“I can’t rightly remember,” she said on one of my story-seeking visits.</p><p>“You’re getting too old to remember all that, woman.”</p><p>“I surely am.”</p><p>“I know the feeling.”</p><p>A month before he passed, faded and worn down to a wheelchair, his head still popped up when Grandma walked into the kitchen: “Hey thar, pretty girl.”&nbsp;</p><p>The morning after Grandma called me, I took my boys by to see Papaw for the last time. He’d been unresponsive for a day, but when we entered the bedroom, he was awake again. He couldn’t find his voice — he’d been breathing through his mouth, and his throat was too dry to speak up — so I leaned in. He looked to my sons and said, “Hey, fellers.”</p><p>They waved.&nbsp;</p><p>“I love you,” I told him.</p><p>“Love you, buddy,” he whispered.&nbsp;</p><p>“You done good,” I said because that’s how he would’ve said it, but also because that’s how I meant it. He’d done so much good, even if it couldn’t be listed on official records or captured in the stat sheet of an obituary. The good of his life was ever-rippling water, quiet and steady, and my boys and I would long be swept up in it.&nbsp;</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Making Truth Social Comply with the AGPL (141 pts)]]></title>
            <link>https://boehs.org/node/truth-social</link>
            <guid>40028338</guid>
            <pubDate>Sun, 14 Apr 2024 03:10:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://boehs.org/node/truth-social">https://boehs.org/node/truth-social</a>, See on <a href="https://news.ycombinator.com/item?id=40028338">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><dl><dt><strong><a href="https://boehs.org/locations/">in</a></strong></dt><dd><a href="https://boehs.org/in/blog">blog</a></dd><dt><strong>date</strong></dt><dd><span itemprop="datePublished" content="Sat Apr 13 2024 00:00:00 GMT+0000 (Coordinated Universal Time)">4/13/2024</span></dd></dl><hr><p>A hot minute ago, there was this interesting trend of Republicans being ostracized by mainstream social media, then forming their own. In these places, their version of the truth can proliferate without the moderation they’ve grown to despise. To do this, the conventional strategy is to reskin open-source social media platforms without attribution. There is, of course, a certain irony to the fact that the labor they exploit is frequently performed by liberals, queers, socialists, and other groups they’ve sworn to destroy, but I digress.</p><p>Luckily, the platforms they leech off are not entirely defenseless. The code of Mastodon is released under the AGPL, a strict open source license that prevents redistribution without disclosure of derivative source code.&nbsp; Both gab and Truth Social have been identified as derivative work of Mastodon, and hence both are bound by the provisions of the AGPL. Mastodon has successfully defended its codebase a number of times, including in 2021, when they successfully convinced Truth Social to release its code. Truth Social continued these releases until December 20th, 2022, when the uploads stopped. How embarrassing.</p><p>To conduct a request under the AGPL, I need to prove that Truth Social uses AGPL licensed code, and that I have accessed said code. The latter is incredibly easy — the login page fetches <code>/api/v1/instance</code>, which is a pretty distinct Mastodon characteristic. Still, what’s to say that they didn’t just do a faithful, clean room implementation of the Mastodon API? The login page source code makes zero reference to ‘Mastodon’, so I was playing with this familiar API looking for a tell.</p><p>Yeah, I think I found it.</p><p><img src="https://boehs.org/assets/Pasted%20image%2020240411112921.png"></p><p>With this in mind, I set my sights on the legal department. Somehow, I doubted they would reply to me.</p><p><img src="https://boehs.org/assets/Pasted%20image%2020240411113030.png"></p><p>I also started poking around on the frontend, which is unambiguously powered by Soapbox, another piece of software licensed under the AGPL.</p><p><img src="https://boehs.org/assets/Pasted%20image%2020240411114228.png"></p><p>They also make “open source” releases of Soapbox. I was curious if these releases would be up-to-date (they aren’t), but what I found was really quite interesting:</p><p><img src="https://boehs.org/assets/Pasted%20image%2020240411115229.png"></p><p>Simply uploading your compiled code and calling it “open source” does <em>not</em> count as compliance, even if it was up-to-date.</p><p>At this point, the SFC was taking interest. While I have more than enough grounds for the above request, if they don’t comply, the next challenge before a public exposé is proving that the <em>Mastodon</em> codebase has actually been changed since its last open source release. This, of course, is incredibly plausible, given the frontend code obviously has. But we need proof.</p><p>Kindly, I was provided with a Truth Social account (I do not want my phone number on there, in the event that a little birdie gives maia arson crimew another issue of “<a href="https://maia.crimew.gay/posts/meet-the-shitpoasters/">the shitposters</a>”). I then clicked around, and discovered the following endpoints in a minute:</p><pre><code>/api/v4/truth/ads?device=desktop
/api/v1/truth/policies/pending
/api/v1/truth/carousels/suggestions
/api/v1/truth/policies/pending
/api/v1/groups/tags
</code></pre><p>Unsurprisingly, Mastodon does not have an ads endpoint. It also doesn’t have a v4 API. Neither does the open source release.</p><p>The truth directory does exist. It’s at <code>/app/controllers/api/v1/truth/</code>. Unfortunately for Trump Media &amp; Technology Group, the files are missing here.</p><pre><code>$ tree app/controllers/api/v1/truth
app/controllers/api/v1/truth
├── admin
│ &nbsp; └── accounts_controller.rb
├── emails_controller.rb
├── passwords_controller.rb
└── trending
&nbsp; &nbsp; └── truths_controller.rb
$ rg carousels | wc -l
0
</code></pre><p>Of course, Republicans are categorically inclusive, which is why they bundle code from a <em>third</em> fediverse codebase that’s AGPL licensed — Pleroma:</p><p><img src="https://boehs.org/assets/Pasted%20image%2020240411135059.png"><br>(nice localization, btw).</p><p>I was, of course, expecting this to go nowhere. I’m just Evan. TMTG could just drag their feet with the hopes that I give up. I, of course, had no intent of doing so — I was very serious when I said that I would take this matter to the press if I had to. Surprisingly, however, this story doesn’t end with a public boxing match between me and the 45th president. I decided that I would give them 7 days before escalating. This weekend, I received an email stating that they had complied — 2 days before my internal deadline. I checked the source code and sure enough, it is up-to-date as far as I can tell. I’ve released it here:</p><p><a href="https://github.com/boehs/truthsocial/tree/main">Automatically updated dump of Truth Social’s source code (reskinned Mastodon)</a></p><p>Once again, this was absolutely not the outcome I expected. Some people might be <em>disappointed</em> by it. I might be relieved. After I sent that email, I was a little worried about what I was getting myself into. The <em>Truth Social Legal Team</em>. Imagine. But it went my way. The real takeaway is that you do have power. Don’t be scared of the big guys. Speak their language, play on their court. Stand up for what you believe in. You can win. Finally, I want to thank Truth Social for complying appropriately. While we couldn’t be further apart politically, I respect that they followed the law in a timely manner without a fight.</p><p>In terms of the code — I haven’t looked at it yet. It’s diverged significantly from Mastodon, but the resemblance is there. They’ve cherry-picked specific commits from upstream, but not all of them. I’m sure there are some <a href="https://infosec.exchange/@bontchev/112257849039442072">goodies to be found</a>. I encourage all of you to go looking for them alongside me, as that is your right. Tell me what you find. God speed.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Super Mario 64's invisible walls explained [video] (114 pts)]]></title>
            <link>https://www.youtube.com/watch?v=YsXCVsDFiXA</link>
            <guid>40027249</guid>
            <pubDate>Sat, 13 Apr 2024 23:42:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=YsXCVsDFiXA">https://www.youtube.com/watch?v=YsXCVsDFiXA</a>, See on <a href="https://news.ycombinator.com/item?id=40027249">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Ford Mustang Mach-E using BlueCruise at time of crash: NTSB (103 pts)]]></title>
            <link>https://fordauthority.com/2024/04/ford-mustang-mach-e-using-bluecruise-at-time-of-crash-ntsb/</link>
            <guid>40026732</guid>
            <pubDate>Sat, 13 Apr 2024 22:26:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fordauthority.com/2024/04/ford-mustang-mach-e-using-bluecruise-at-time-of-crash-ntsb/">https://fordauthority.com/2024/04/ford-mustang-mach-e-using-bluecruise-at-time-of-crash-ntsb/</a>, See on <a href="https://news.ycombinator.com/item?id=40026732">Hacker News</a></p>
Couldn't get https://fordauthority.com/2024/04/ford-mustang-mach-e-using-bluecruise-at-time-of-crash-ntsb/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Summers: Inflation Reached 18% in 2022 Using the Government's Previous Formula (229 pts)]]></title>
            <link>https://www.forbes.com/sites/theapothecary/2024/03/23/summers-inflation-reached-18-in-2022-using-the-governments-previous-formula/</link>
            <guid>40025339</guid>
            <pubDate>Sat, 13 Apr 2024 19:24:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.forbes.com/sites/theapothecary/2024/03/23/summers-inflation-reached-18-in-2022-using-the-governments-previous-formula/">https://www.forbes.com/sites/theapothecary/2024/03/23/summers-inflation-reached-18-in-2022-using-the-governments-previous-formula/</a>, See on <a href="https://news.ycombinator.com/item?id=40025339">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><figure role="presentation"><figcaption><p>Former National Economic Council Director Lawrence Summers is pictured before President Barack Obama and Vice President Joe Biden spoke about Middle Class Working Families Task Force, Friday, Jan. 30, 2009, in the East Room of the White House in Washington. (AP Photo/Charles Dharapak)</p><small>Copyright 2009 AP. All rights reserved. This material may not be published, broadcast, rewritten or redistributed.</small></figcaption></figure>
<p>Numerous commentators—especially those defending President Biden’s economic record—have puzzled over why Americans are sour about the state of the U.S. economy. Unemployment rates have returned to pre-pandemic lows, commentators correctly point out, and the official rate of inflation is declining. So why are Americans ignoring the view of many experts that the economy is doing well?</p>

<fbs-ad position="top" progressive="" ad-id="article-0-top"></fbs-ad>
<p>According to a <a href="https://www.nber.org/papers/w32163" rel="nofollow noopener noreferrer" target="_blank" title="https://www.nber.org/papers/w32163" data-ga-track="ExternalLink:https://www.nber.org/papers/w32163" aria-label="striking new paper">striking new paper</a> by a group of economists from Harvard and the International Monetary Fund, headlined by former Treasury Secretary Larry Summers, the answer is that Americans have figured out something that the experts have ignored: that rising interest rates are as much a part of inflation as the rising price of ordinary goods. “Concerns over borrowing costs, which have historically tracked the cost of money, are at their highest levels” since the early 1980s, they write. “Alternative measures of inflation that include borrowing costs” account for most of the gap between the experts’ rosy pictures and Americans’ skeptical assessment.</p>

<h2><strong>Inflation is not an objective number, but a judgment call</strong></h2>
<p>At the heart of the issue is a misconception that bedevils academics, journalists, and ordinary Americans: the idea that the official inflation rate is an objective number, impervious to human biases, much in the way that someone’s height or weight can be objectively measured with a ruler and a scale.</p>

<p>In fact, the formula used to calculate the inflation rate is <em>subjective</em>. It requires economists to make hundreds of judgment calls about how one assesses the overall trajectory of prices. What goods and services should be included in the “basket” of prices in the formula? How should those goods and services be weighted against each other? How do we account for the fact that <a href="https://freopp.org/inflations-compounding-impact-on-the-poor-f82ea4d61d9b" rel="nofollow noopener noreferrer" target="_blank" title="https://freopp.org/inflations-compounding-impact-on-the-poor-f82ea4d61d9b" data-ga-track="ExternalLink:https://freopp.org/inflations-compounding-impact-on-the-poor-f82ea4d61d9b" aria-label="poor people consume different things than rich people">poor people consume different things than rich people</a>, or that people in different parts of the country may consume different things in different proportions?</p>

<p>And, most relevant to the new research: What is the best way to <em>measure</em> changes in the price of important things like housing? <a href="https://substack.freopp.org/p/inflation-is-far-worse-than-you-think" rel="nofollow noopener noreferrer" target="_blank" title="https://substack.freopp.org/p/inflation-is-far-worse-than-you-think" data-ga-track="ExternalLink:https://substack.freopp.org/p/inflation-is-far-worse-than-you-think" aria-label="There has always been considerable debate about this">There has always been considerable debate about this</a>.</p>

<p>The most widely used measure of inflation in the U.S. is the <a href="https://www.bls.gov/news.release/cpi.toc.htm" rel="nofollow noopener noreferrer" target="_blank" title="https://www.bls.gov/news.release/cpi.toc.htm" data-ga-track="ExternalLink:https://www.bls.gov/news.release/cpi.toc.htm" aria-label="Consumer Price Index for All Urban Consumers">Consumer Price Index for All Urban Consumers</a>, or CPI-U, which is put out by the U.S. Bureau of Labor Statistics (BLS). This formula has undergone <a href="https://www.bls.gov/cpi/additional-resources/historical-changes.htm" rel="nofollow noopener noreferrer" target="_blank" title="https://www.bls.gov/cpi/additional-resources/historical-changes.htm" data-ga-track="ExternalLink:https://www.bls.gov/cpi/additional-resources/historical-changes.htm" aria-label="numerous revisions">numerous revisions</a> from its creation in 1919 to the present day.</p>
<h2><strong>Consumer prices no longer include the price of money</strong></h2><fbs-ad position="topx" progressive="" ad-id="article-0-topx-1"></fbs-ad>
<p>Most notably, as Summers and his coauthors Marijn Bolhuis, Judd Cramer, and Karl Schulz point out, in 1983 the BLS eliminated interest costs from its calculations of consumer price inflation. The argument at the time, <a href="https://www.bls.gov/pir/journal/gj02.pdf" rel="nofollow noopener noreferrer" target="_blank" title="https://www.bls.gov/pir/journal/gj02.pdf" data-ga-track="ExternalLink:https://www.bls.gov/pir/journal/gj02.pdf" aria-label="made by BLS economist Robert Gillingham">made by BLS economist Robert Gillingham</a>, was that including home mortgage interest rates in the CPI formula was overstating inflation. Instead, Gillingham argued, the BLS should estimate what homeowners could charge if they rented out their homes, and use that to calculate housing inflation.</p>
<p>This change had a huge impact on the calculation of CPI, write Bolhuis et al., because the BLS removed housing prices and financing costs from the official CPI formula, even though everyday Americans still experienced those costs in the real world. “Owners’ equivalent rent”—the new CPI measure—amounts to over a quarter of the Consumer Price Index today.</p>
<p>Bolhuis et al. point out that the elimination of interest costs from CPI isn’t just about housing. “New and used vehicles combine to represent nearly 7 percent of the CPI,” they point out, but “exclude financing costs.” Given that four-fifths of all new cars were purchased using auto loans, this makes no sense.</p>
<p>Furthermore, more people buy consumer goods with credit cards than with cash—and yet the interest costs of credit cards aren’t included in the official BLS formula. “Measurements of the cost of living that exclude financing costs,” Bolhuis et al. argue, “will understate the pressure under which consumers, who rely on credit for many purchases, have found themselves.”</p><figure role="presentation"><figcaption><p>Inclusive of interest costs, inflation reached 18% in November 2022, and remains elevated.</p><small>NBER.org</small></figcaption></figure><fbs-ad position="topx" progressive="" ad-id="article-0-topx-2"></fbs-ad>
<h2><strong>What would inflation look like under the pre-1983 formula?</strong></h2>
<p>Bolhuis et al. then went on to see if they could recalculate the official CPI numbers using a pre-1983-like formula that incorporated the cost of mortgage interest, auto loan interest, and credit card interest on the cost of living. They found three things: first, that the pre-1983-like formula led to a dramatically different estimate of inflation in 2022 and 2023, peaking at 18 percent in November 2022.</p>
<p>Second, they found that consumer sentiment—as measured by the widely-used University of Michigan Index of Consumer Sentiment—correlated much more strongly with the pre-1983 CPI formula than it did with the modern one that excludes interest costs.</p>
<p>Third, they found these differences to be also true in Europe: higher interest rates were correlated with lower consumer sentiment, and vice versa. This was an important finding, as some have suggested that the gap between American consumer sentiment and the official government statistics is a result of Americans’ mistrust of institutions and mainstream sources of information. “We find little evidence that the United States, despite its rising partisanship, social distrust, and large reported levels of overall ‘referred pain’ differ meaningfully” in their economic perceptions from those in peer nations.</p>
<p>“Consumers are including the cost of money in their perspective on their economic well-being, while economists are not,” the authors conclude. Since home and auto purchases “are integral to American consumers’ sense of their economic well being but their price is not included in official inflation measures, it is no wonder that sentiment lags traditional measures of economic performance.”</p>
<h2><strong>The gap between CPI and the pre-1983 formula could widen over time</strong></h2><fbs-ad position="topx" progressive="" ad-id="article-0-topx-3"></fbs-ad>
<p>There are other obvious problems with relying on the declining <em>rate</em> of official CPI inflation to gauge what consumers should be feeling. Inflation is cumulative; a decline in the rate of inflation does not reverse the price increases from previous years; it simply means that prices are now rising at a slower rate.</p>
<p>Most importantly, the exclusion of interest costs from the CPI and the Federal Reserve’s preferred measure of <a href="https://www.bls.gov/cex/cecomparison/pce_profile.htm" rel="nofollow noopener noreferrer" target="_blank" title="https://www.bls.gov/cex/cecomparison/pce_profile.htm" data-ga-track="ExternalLink:https://www.bls.gov/cex/cecomparison/pce_profile.htm" aria-label="Personal Consumption Expenditures">Personal Consumption Expenditures</a> could become a growing problem over time, due to the ever-expanding federal debt.</p>
<p>As the debt increases, the federal government has to borrow more money from U.S. and foreign investors. But as would-be lenders to the U.S. see America as increasingly insolvent, investors will demand higher interest rates to lend us that money. Higher rates of government borrowing lead to higher rates for home mortgages, credit cards, student loans, car loans, and every other form of borrowing. And, as we’ve seen, these higher interest rates lead to higher price inflation, whether or not the Bureau of Labor Statistics recognizes it as such.</p>
<p>In recent years, the Federal Reserve has suppressed these higher interest rates by printing new dollars out of thin air to lend to the U.S. government. But printing new money can also cause inflation, by decreasing the purchasing power of each preexisting dollar in circulation.</p><fbs-ad position="topx" progressive="" ad-id="article-0-topx-4"></fbs-ad>
<h2><strong>We need a healthier debate on how to measure consumer price inflation</strong></h2>
<p>Those who believe in the primacy of experts have long attacked those who question the accuracy of the BLS’ inflation measures. Balaji Srinivasan, the venture capitalist and entrepreneur, was <a href="https://twitter.com/TheStalwart/status/1675863248501874692" rel="nofollow noopener noreferrer" target="_blank" title="https://twitter.com/TheStalwart/status/1675863248501874692" data-ga-track="ExternalLink:https://twitter.com/TheStalwart/status/1675863248501874692" aria-label="criticized">criticized</a> by mainstream commentators for investing in <a href="https://truflation.com/" rel="nofollow noopener noreferrer" target="_blank" title="https://truflation.com/" data-ga-track="ExternalLink:https://truflation.com/" aria-label="Truflation">Truflation</a>, an attempt at independently developing a measure of inflation using real-time price data from a variety of sources.</p>
<p>But whether one likes or dislikes Truflation’s methodology, we should be encouraging independent thinking on how best to measure prices in the economy. As the IMF-Harvard analysis shows, the Bureau of Labor Statistics is capable of making misjudgments. My colleagues Jackson Mejia and Jon Hartley at the Foundation for Research on Equal Opportunity <a href="https://freopp.org/inflations-compounding-impact-on-the-poor-f82ea4d61d9b" rel="nofollow noopener noreferrer" target="_blank" title="https://freopp.org/inflations-compounding-impact-on-the-poor-f82ea4d61d9b" data-ga-track="ExternalLink:https://freopp.org/inflations-compounding-impact-on-the-poor-f82ea4d61d9b" aria-label="have shown">have shown</a> that even relatively low rates of inflation disproportionately harm the poor, because the poor lack the financial wherewithal to absorb higher consumer prices.</p>
<p>It’s important—and healthy—for us to look at different measures of consumer prices. Everyone has a stake in the outcome, especially those who live paycheck to paycheck.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The darker side of being a doctor (436 pts)]]></title>
            <link>https://drericlevi.substack.com/p/the-darker-side-of-being-a-doctor</link>
            <guid>40025261</guid>
            <pubDate>Sat, 13 Apr 2024 19:10:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://drericlevi.substack.com/p/the-darker-side-of-being-a-doctor">https://drericlevi.substack.com/p/the-darker-side-of-being-a-doctor</a>, See on <a href="https://news.ycombinator.com/item?id=40025261">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>I’m a surgeon. I’d like to think that I’m resilient and well adjusted, having gone through medical school and rigorous surgical training. I’ve been a doctor for 13 years and much of that period has been spent training to be as good a surgeon as I could ever be. I have great family support, a physician wife who understands my work and I’ve never been diagnosed with a mental illness.</p><p>The suicide death of Dr Andrew Bryant, a Brisbane gastroenterologist last week hit a raw nerve. His wife wrote this honest and courageous letter.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg" width="374" height="588" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:588,&quot;width&quot;:374,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6a3736c1-1049-4bae-8748-536a27406ec6_374x588.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>Although I’ve never had serious suicidal thoughts, I – like many other doctors – have been through many dark seasons. Depression, anxiety, burnout, suicidality, hopelessness, lethargy, anhedonia, feeling flat, worry, and the like are all different flavours of the same phenomena: the negative human response to internal or external stressors. Of course, the causes are always multifactorial. It cannot and should not be oversimplified to family history, genetics, behavioural deficiencies, bad environment or poor social support.</p><p>When I carefully dissect my dark seasons, some common themes often emerge. Work is often the critical exacerbating and perpetuating factor in those dark times. Because as a surgeon I spend the vast majority of my lifetime at work, what happens there influences all other aspects of my life including my marriage, family and social life.</p><p><strong>Here are 3 common things that have thrown me into some dark pit of despair:</strong></p><p>I have lost control of my days. I had worked in a hospital where I was oncall 24/7, 12 days out of 14. I had fortnightly weekends off. When I was preparing for surgical exams, I’d be working and studying from 6.30am to 10pm everyday, seeing my family only on the weekends for lunch. I had worked in a hospital network that covered 4 campuses and drove 500kms a week when covering these sites. I had worked in a hospital where I didn’t get home for days at a time, sleeping overnight in hospital quarters, outpatient clinic benches and in my car. I used to have my sleeping bag, toiletries and change in the boot of my car because I didn’t know if I was going to make it home some nights. Plans change every single day at work because of emergencies. I can’t even be sure what the next hour will bring when I am on call. You might ask, why can’t you work less? It’s not as easy as that. If I decide to work less, who is going to cover the hospital? If the hospital aren’t employing other doctors, we can’t allow patients to go uncovered. I accept the fact that I have a duty of care to be on call. The intensity and personal damage of these on call periods are often forgotten.</p><p>Not only that, we are losing control of health care in general. Everyday, there’s a new form, a new guideline, a new protocol, a new health software, a new policy all dictating, restricting and modifying clinician activities. Some of these policies are written by people who do not see patients. There’s a whole paid industry dedicated to restructuring what doctors and nurses do to reduce costs and increase output.</p><p>Just imagine. I start my days at 6am. I wake up to an email alerting me of the number of discharge summaries that haven’t been completed and the various computer based modules I have to complete (hand washing, privacy, lifting patients, etc). Round starts at 7am. I see 15-20 patients with various travel forms, certificates, scripts that need completing. All to be done via the electronic health system, clunky, not user friendly, takes a long time to log in. Then I start an overbooked operating list at 8am. There are 7 cases booked. I have no say on who gets on the operating list and the order of patients. The first patient haven’t been checked in. The diabetic one is hypoglycaemic. The infant is cranky. The autistic child is running away. The interpreter is not here yet. The computer is still not logging in. The password is expired. I used to be able to arrange the operating list because I know that some operations take longer than others. But now, the bookings office determine that that all my tonsillectomies take 14 minutes because that’s the average time recorded on the computer. The moment I scrub in, the timer starts. The moment I unscrub timer stops. Click. Click. Click. Because the theatre bookings does not take into account the interpreter time, pre-med period or transfer to ICU, the list is running late. The nurse in charge is breathing down my neck to finish on time. I still took about 14 minutes on each case, but the team is delayed by external clinical reasons. The theatre team is anxious to finish, everything is rushed, and mistakes are bound to occur.</p><p>In the mean time, I field 12 phone calls from ED, GP and other units. By now there are 3 patients waiting for me in ED and 1 being flown in from another hospital. The operating list is finished late. I rushed to ED, and gulped down a cup of instant coffee. Then I arrive late to the afternoon clinic, which again is overbooked. Clinic nurses are not happy. I see 8-10 patients while taking more calls. I try to discuss complex surgeries with patients but I keep getting interrupted by calls and paperwork. Then I run back to theatre for an emergency case. By this time I’m set up for failure. I’m tired, cranky and my head is full of jobs to do. I do the afternoon round, see more consults, admit more patients and dictate letters. I have taken up to 70 calls on a 24h on call period. By 6pm I’m totally exhausted. I grab a packet of chips, ginger beer, and start working on the papers I was meant to write up. I review the case notes for the next couple of days. I get home between 7-8pm. Grab dinner and put the kids to bed. I get called back in and I take a patient to theatre for an emergency procedure. I come back just after midnight and sleep. I get called four more times between midnight and 6am.</p><p>6am. Repeat.</p><p>I have lost control of my days and I have lost support. When can I actually find support? I don’t have time to talk to my colleagues about life. I don’t have time with my family. I don’t have time to catch up with friends. Social ties are lost when one stepped into medical school. I’ve lost count of the number of significant life events I have missed (birthdays, anniversaries, reunions, school recitals, first walks, etc.)</p><p>I delivered my third child with my own hands because the obstetrician was stuck in a traffic jam. The following morning I went to work because if I didn’t 12 patients have to miss their surgeries, 2 anaesthetists and about 8 nurses will miss out on their day’s income. More importantly, admin would not be happy because a cancelled operating list is a huge financial loss to the hospital.</p><p>I know where I can get support, but practically, when and how am I going to get that support? </p><p>In addition, doctors who scream for help may be formally reported, therefore having restrictions placed on their practice and then incurring higher medical indemnity fees in some situations. Trainees who ask for help may be labelled as underperforming and have to be commenced on probation or remediation. We may not have practical access to the support that are often advertised. </p><p>Interestingly, the above physical and emotional stressors are reasonably manageable to me. I’m understanding my own physical and emotional limits. These stressors induce  exhaustion, but the excitement of the work and the intellectual challenge of the job bring a lot of personal satisfaction. I do get emotionally shaken at times because I deal with dying cancer patients, emergency airway disasters and sick complex children, but I get by.</p><p>I am realising more and more that what brings me greatest distress is the relentless administrative pressure which take away the meaningful clinical engagement I have with my patients. And I wonder if this is what many young doctors are experiencing as well. Medicine used to be a meaningful pursuit. Now it has become a tiresome industry. The joy, purpose and meaning of medicine has been codified, sterilised, protocolised, industrialised and regimented. Doctors are caught in a web of business, no longer a noble vocation. The altruism of young doctors have been replaced by the shackles of efficiency, productivity and key performance indicators.</p><p>I have little say in organising my very own operating lists or clinics. Even the power to re-order the operating list has been taken from the surgeon. The thing that I love doing (operating &amp; seeing patients) is being measured, recorded and benchmarked. The clinics are overbooked to get numbers through. The paperwork for each patient encounter is increasing with each passing year. There are so many other non-clinical departments dictating what I should do and how best to do it. The mantra is “cost-effectiveness and increased productivity.”</p><p>I went into medicine knowing that I will have to sacrifice much for the sake of my patients. What I am realising is that today in modern medicine, a doctor is just one of the many commodities in this complex industry. It’s no longer about the patient. It’s about the business of hospitals. Patient satisfaction officers, Theatre Utilisation officers, Patient Flow Coordinators. These are all business roles.</p><p>As a surgeon I spent a year in a hospital where I smiled on the way to work and I am so grateful for my job. I looked forward to long days because I knew what I was doing was significant. Another year in another hospital, I dreaded going to work. I hated being on call. I was burned out and I couldn’t control my emotions at work and at home. I’m not inherently an offensive or rude person, I’m just a person pushed to the limits and set to fail because of the circumstances around my work. Same surgeon, different jobs. The forces that pushed me to losing control of my emotions are likely the same forces that might push some of us to suicide. </p><p>To some hospitals and their business, I’m not a Surgeon. I’m just an employee. Overworked, burned out, replaceable. The noble call to Medicine has been suffocated by the bureaucratic force exerting itself as the medical industry. </p><p>Would you agree or disagree with my thoughts? What other “Dark Side of Doctoring” issues can you think of?</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: My $1k self-install, off-grid solar backup build for renters (195 pts)]]></title>
            <link>https://sunboxlabs.com</link>
            <guid>40025195</guid>
            <pubDate>Sat, 13 Apr 2024 18:59:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sunboxlabs.com">https://sunboxlabs.com</a>, See on <a href="https://news.ycombinator.com/item?id=40025195">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <p>Cables / Tender:</p>

<ul>
  <li><a href="https://amzn.to/43NkcuJ">https://amzn.to/43NkcuJ</a> - $14.79</li>
  <li><a href="https://amzn.to/4cwxY8Y">https://amzn.to/4cwxY8Y</a> - $30.42</li>
  <li><a href="https://amzn.to/4cuS3fx">https://amzn.to/4cuS3fx</a> - $13.00</li>
  <li><a href="https://amzn.to/43u3ikz">https://amzn.to/43u3ikz</a> x2 - $17.00</li>
  <li><a href="https://amzn.to/43u3r7B">https://amzn.to/43u3r7B</a> - $12.99</li>
  <li><a href="https://amzn.to/43y5Qhx">https://amzn.to/43y5Qhx</a> - $8.89</li>
  <li><strong>Total</strong>: $114.09</li>
</ul>

<p><strong>=&gt; $1,124 total</strong></p>

<p>Remote tracking (optional):</p>

<ul>
  <li><a href="https://amzn.to/3Vs3COI">https://amzn.to/3Vs3COI</a> - $7.99</li>
  <li><a href="https://amzn.to/3TPaXGI">https://amzn.to/3TPaXGI</a> - $23.92</li>
  <li><a href="https://amzn.to/4a6UMdI">https://amzn.to/4a6UMdI</a> - $6.99</li>
  <li><a href="https://solar-assistant.io/">https://solar-assistant.io</a> - $55.83</li>
  <li><strong>Total</strong> (additional): $94.73</li>
</ul>

<h3 id="how-to-guide">How to guide</h3>

<p>Coming soon, for now refer to Will Prowse’s wiring guide on his very-similar <a href="https://www.mobile-solarpower.com/mobile-48v-system.html">48V 3000W off-grid solar system</a> which I followed and works great for me!</p>

<h3 id="financial-payback--embodied-energy">Financial Payback &amp; Embodied Energy</h3>

<div><pre><code>Financial payback period for 3000W
System cost : $1,124 on Amazon in 2024
Yearly energy creation: 365d * 4.26hsun/d * 1.280kW = 2,000kWh/y (but more like 1,000kWh/year after losses)
Yearly value creation: 1,000kWh/y * $0.55/kWh in SF = $550/y energy created
100W system payback period: $1,124 / $550 = 2 years until payback
</code></pre></div>

<h3 id="how-green-is-it">How green is it:</h3>

<p>Production footprint PV (<a href="https://sustainability.stackexchange.com/questions/8317/what-is-the-typical-embodied-energy-of-a-solar-photovoltaic-panel">source</a>):
<code>2,900kWhee/kW * 1.28kW = 3,712kWh embodied energy</code></p>

<p>Production footprint LiFePo4 battery (<a href="https://ris.utwente.nl/ws/portalfiles/portal/189571307/10.1016_j.procir.2019.01.099.pdf">source</a>):
<code>106kWhee/kWh * 2.4kWh = 254kWh embodied energy</code></p>

<p>Annual energy production system: 1100kWh/y
<code>Payback period: 3966kWh / 1100kWh/y = 3.5 year footprint payback</code></p>

<h3 id="faq">FAQ</h3>

<p>What’s the catch? Seems to good to be true? Well, this thing sits between your devices and the wall. So you need to neatly run extension cables from every room in the house to the “sun box”, and then run one cable from the box to the panels, and another to the wall (optional, just so it can fall back to pulling power from the wall). Photos of this are coming soon.</p>

<p>Will it ever push power back into the wall? Nope! It’ll only ever draw from the wall in the event that both the sun is down and the battery is dead (so your fridge won’t go off overnight for example).</p>

<p>Is this legal? Yes, see above. No difference to plugging your fridge into your wall, as far as the utility is concerned.</p>

    </div><section>
  <h2>Want some help?</h2>
  <p>Set up a call with us and we can plan your system!</p>
  <a href="https://sunboxlabs.com/cdn-cgi/l/email-protection#462e232a2a290635332824293e2a2724356825292b">Email Us</a>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Harmful 5G Fast Lanes Are Coming; the FCC Needs to Stop Them (384 pts)]]></title>
            <link>https://cyberlaw.stanford.edu/blog/2024/04/harmful-5g-fast-lanes-are-coming-fcc-needs-stop-them</link>
            <guid>40024062</guid>
            <pubDate>Sat, 13 Apr 2024 16:09:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cyberlaw.stanford.edu/blog/2024/04/harmful-5g-fast-lanes-are-coming-fcc-needs-stop-them">https://cyberlaw.stanford.edu/blog/2024/04/harmful-5g-fast-lanes-are-coming-fcc-needs-stop-them</a>, See on <a href="https://news.ycombinator.com/item?id=40024062">Hacker News</a></p>
<div id="readability-page-1" class="page"><div property="content:encoded"><p dir="ltr">The FCC is <a href="https://www.fcc.gov/april-2024-open-commission-meeting">set to vote on April 25</a> to restore its authority over the companies we pay to get online, and reinstate federal net neutrality protections that were jettisoned by the Trump administration in 2017.&nbsp;</p>
<p dir="ltr">Net neutrality protections are supposed to ensure that we, not the internet service providers (ISPs) we pay to get online, get to decide what we do online.</p>
<p dir="ltr">The FCC released <a href="http://docs.fcc.gov/public/attachments/DOC-401676A1.pdf">its draft rules</a> early in April and there’s much to celebrate in them. Mobile carriers like T-Mobile, AT&amp;T and Verizon that have been degrading video quality for mobile users will have to stop. The FCC kept in place state neutrality protections like California’s net neutrality law, allowing for layers of enforcement. The FCC also made it harder for ISPs to evade net neutrality at the point where data enters their networks.</p>
<p dir="ltr"><strong>However, there’s a huge problem: the proposed rules make it possible for mobile ISPs to start picking applications and putting them in a fast lane - where they’ll perform better generally and much better if the network gets congested.</strong></p>
<p dir="ltr"><a href="https://www.t-mobile.com/news/network/t-mobile-expands-worlds-first-network-slicing-beta-nationwide">T-Mobile</a>, <a href="https://www.lightreading.com/oss-bss-cx/at-t-tests-gaming-traffic-prioritization-amid-net-neutrality-debate">AT&amp;T</a> and <a href="https://www.wsj.com/articles/carriers-look-to-offer-fast-lane-access-on-5g-networks-0ab57bcc">Verizon</a> are all testing ways to create these 5G fast lanes for apps such as video conferencing, games, and video where the ISP chooses and controls what gets boosted. They use a technical feature in 5G called network slicing, where part of their radio spectrum gets used as a special lane for the chosen app or apps, separated from the usual internet traffic.</p>
<p dir="ltr"><strong>The FCC’s draft order opens the door to these fast lanes, so long as the app provider isn’t charged for them.</strong></p>
<p dir="ltr">That means we could soon see fast lane offerings like this:</p>
<p dir="ltr"><img alt="" src="https://cyberlaw.stanford.edu/sites/default/files/20240411-mobile2.png"></p>
<p dir="ltr">Or we could see add-ons like Enhanced Video Conferencing for $10 a month, or one-time 24-hour passes to have Prioritized Online Gaming.</p>
<p dir="ltr"><img src="https://cyberlaw.stanford.edu/sites/default/files/20240411-mobile1.png"></p>
<p dir="ltr">This isn't imagination.</p>
<p dir="ltr">The ISPs write about this in their blogs and press releases. They talk about these efforts and dreams openly at conferences, and their equipment vendors plainly lay out how ISPs can chop up internet service into all manner of fast lanes.</p>
<p dir="ltr"><strong>These kinds of ISP-controlled fast lanes violate core net neutrality principles and would limit user choice, distort competition, hamper startups, and help cement platform dominance.</strong></p>
<p dir="ltr">Net neutrality means that we, the people who use the internet, get to decide what we do online, without interference from ISPs. ISPs do not get to interfere with our choices by blocking, speeding up or slowing down apps or kinds of apps. Apps compete on a level playing field, and users, not ISPs, determine which apps are successful.&nbsp;</p>
<p dir="ltr">Letting ISPs decide which apps get to be in a fast lane violates these principles. Apps that are in a fast lane work better than those that are not, especially when the network is busy and apps in the regular lane start suffering. If HBO Max is in a fast lane, it will continue to work well even if the network is busy, while all other video is buffering.</p>
<p dir="ltr">Differences in performance, including relative differences in performance, matter. Even small differences in load times affect how long people stay on a site, how much they pay, and whether they’ll come back. Those differences also affect how high up sites show in search results.</p>
<p dir="ltr">Thus, letting ISPs choose which apps get to be in a fast lane lets them, not users, pick winners and losers online.&nbsp;</p>
<p dir="ltr">And <a href="https://cyberlaw.stanford.edu/blog/2022/05/facebook-google-big-telecoms-want-keep-violating-net-neutrality-europe-regulators">as we’ve seen in the past</a>, programs like this favor the most popular apps, even when the program is supposedly open to all apps in a category and no apps are paying the ISP. So the biggest apps will end up in all the fast lanes, while most others would be left out. The ones left out would likely include messaging apps like Signal, local news sites, decentralized Fediverse apps like Mastodon and PeerTube, niche video sites like Dropout, indie music sites like Bandcamp, and the millions of other sites and apps in the long tail.&nbsp;</p>
<p dir="ltr">Legislators, government agencies, attorneys general in states both red and blue, public interest groups, startups, and open-source technologists are all working to reduce the power and dominance of the biggest platforms. The FCC should be working to help that effort by creating a level playing field and banning these ISP-controlled 5G fast lanes.</p>
<p dir="ltr"><strong>Meaningful net neutrality protections prohibit ISPs from speeding up and slowing down apps and kinds of apps.&nbsp;</strong></p>
<p dir="ltr">ISPs can pick winners and losers by putting winners in a fast lane or losers in a slow lane.</p>
<p dir="ltr">This is a what it would look like if an ISP put everything except YouTube and TikTok in a slow lane.&nbsp;</p>
<p dir="ltr"><img src="https://cyberlaw.stanford.edu/sites/default/files/20240411-mobile4.png"></p>
<p dir="ltr">This is what it would look like if an ISP put YouTube and TikTok in a fast lane.&nbsp;</p>
<p dir="ltr"><img p="" src="https://cyberlaw.stanford.edu/sites/default/files/20240411-mobile4.png"></p>
<p dir="ltr">It’s the same picture. The effect is the same. In either case, disfavored apps will find it harder to compete.</p>
<p dir="ltr">Meaningful net neutrality protections need to protect against both.&nbsp;</p>
<p dir="ltr"><strong>This is not controversial.</strong></p>
<p dir="ltr">President Obama’s <a href="https://obamawhitehouse.archives.gov/net-neutrality">November 2014 net neutrality proposal</a> included this protection:</p>
<p dir="ltr">“The rules I am asking for are simple, common-sense steps that reflect the Internet you and I use every day.” That included, he said, a brightline ban on ISPs “intentionally slow[ing] down some content or speed[ing] up others — through a process often called “throttling” — based on the type of service or your ISP’s preferences.”</p>
<p dir="ltr">Even proposed <a href="https://www.congress.gov/bill/115th-congress/house-bill/6393">Republican</a> <a href="https://www.congress.gov/bill/116th-congress/house-bill/1101/text?s=1&amp;r=98">net neutrality</a> <a href="https://cyberlaw.stanford.edu/sites/default/files/publication/files/RepublicanNetworkNeutralityBill-BILLS-114hr-PIH-OpenInternet.pdf">bills</a> prohibited ISPs from speeding up and slowing down apps and kinds of apps.&nbsp;</p>
<p dir="ltr">Many, including me, <a href="https://www.fcc.gov/ecfs/document/104020490613577/2">thought the 2015 Order did so</a>, too.</p>
<p dir="ltr">Almost certainly, the millions of Americans who celebrated the 2015 Open Internet Order and fought the 2017 repeal think that net neutrality protections ban fast lanes and slow lanes.</p>
<p dir="ltr"><strong>The draft order takes a different approach.&nbsp;</strong></p>
<p dir="ltr">The no-throttling rule that the FCC proposed in October explicitly prohibited ISPs from slowing down apps and classes of apps; it was silent on whether the rule also applies to speeding up.&nbsp;</p>
<p dir="ltr">Given the mobile ISPs’ public statements about their plans for 5G fast lanes, <a href="https://www.fcc.gov/ecfs/document/10328020156846/1">public</a> <a href="https://www.fcc.gov/ecfs/document/10401332717347/1">interest</a> <a href="https://www.fcc.gov/ecfs/document/10330745507976/1">groups</a>, <a href="https://www.fcc.gov/ecfs/document/1215041660232/1">startups</a>, and <a href="https://www.markey.senate.gov/imo/media/doc/letter_to_fcc_title_ii_4224.pdf">members of Congress</a> asked the FCC to clarify in the Order that the no-throttling rule also prohibits ISPs from speeding up apps and classes of apps.</p>
<p dir="ltr"><strong>The draft order did not do that.&nbsp;</strong></p>
<p dir="ltr">While <a href="https://docs.fcc.gov/public/attachments/DOC-401676A1.pdf">draft order</a> acknowledges that some speeding up of apps could violate the no-throttling rule, it added some unclear, nebulous language suggesting that the FCC would review any fast lanes case-by-case, without explaining how it would do that.<sup><a href="#one">1</a></sup> This language gives the FCC maximum flexibility to accept or reject specific fast lanes in the future as it sees fit.</p>
<p dir="ltr">According to the draft order, the agency “could” find a violation of the no-throttling rule, if:&nbsp;</p>
<ol>
<li dir="ltr">
<p dir="ltr">an ISP speeds up specific apps (but not necessarily classes of apps), and</p>
</li>
<li dir="ltr">
<p dir="ltr">the decision to speed up is “unreasonably discriminatory,” and</p>
</li>
<li dir="ltr">
<p dir="ltr">the speeding up has the effect of “‘impair[ing] or degrad[ing]’ other … apps not given the same treatment.”&nbsp;</p>
</li>
</ol>
<p dir="ltr"><strong>In other words, the proposed no-throttling rule is a bright line rule for slow lanes – ISPs can’t slow down apps or kinds of apps; but for fast lanes, it’s a fuzzy, unclear case-by-case standard.</strong></p>
<p dir="ltr">For example, would it be “unreasonably discriminatory” to create a 5G fast lane that includes the most popular apps in a category since it responds to consumer preferences? Does an unreasonably discriminatory fast lane need to technically degrade or impair the apps that are not in the fast lane for the FCC to find a violation of the no-throttling rule?&nbsp;</p>
<p dir="ltr"><strong>There is no way to predict which kinds of fast lanes the FCC might ultimately find to violate the no-throttling rule. This gives ISPs cover to flood the market with various fast-lane offerings, arguing that their version does not violate the no-throttling rule and daring the FCC to enforce its rule.&nbsp;</strong></p>
<p dir="ltr">And if the mobile ISPs do this, the cable companies will soon follow. Cable companies have the tech to build their own fast lanes, and increasingly they compete with 5G to the Home services. If T-Mobile and Verizon start selling home plans that have “enhanced streaming video,” you can bet the cable companies will launch their own version.</p>
<p dir="ltr">The FCC would then investigate these offerings case-by-case in lengthy and costly proceedings. In the meantime, apps that are not in the fast lane will suffer.&nbsp;</p>
<p dir="ltr">Entrepreneurs and application providers that are not included in a fast lane will have to decide whether to try to get into the fast lane, file an FCC complaint, or just silently suffer.&nbsp;</p>
<p dir="ltr">Companies that do file complaints will waste years litigating the meaning of “unreasonably discriminatory,” all the while going up against giant telecoms that stockpile lawyers and lobbyists.</p>
<p dir="ltr">Unless you are a high-paid telecom lawyer who bills by the hour, the proposed test for what’s a good or bad fast lane is a nightmare.&nbsp;</p>
<p dir="ltr"><strong>Not all 5G slices are harmful.&nbsp;</strong></p>
<p dir="ltr">Just to be clear, net neutrality proponents are not asking the FCC to ban network slicing. There’s lots of ways for ISPs to use slices for things that are not normal internet service such as a dedicated slice for a farming operation using remote controlled tractors, slices for telemetry data and oversight of autonomous cars, or providing a slice for a stadium’s video system at a crowded game.&nbsp;</p>
<p dir="ltr">There are good reasons to isolate this kind of traffic, and it can be done without reducing user choice or tilting the online playing field. Under the FCC’s draft order, such services would be so-called enterprise service offerings, to which the Open Internet protections don’t apply.&nbsp;</p>
<p dir="ltr">But the 5G fast lanes ISPs are imagining for regular internet access – where ISPs decide which apps or kind of apps get a fast lane – would cause real harm and violate the core tenets of net neutrality.&nbsp;</p>
<p dir="ltr">We don’t need our ISP deciding for us what’s important and what’s not; we want our ISP to let us decide and stick to the job of connecting our devices to the services we want to use.&nbsp;</p>
<p dir="ltr">It’s not even clear why such fast lanes are necessary for consumer internet access. As one industry analyst noted, isn’t 5G already supposed to be the fast lane for everything?&nbsp;</p>
<p dir="ltr"><strong>Luckily, there’s still time to fix this.</strong></p>
<p dir="ltr">The FCC can and should edit the draft order ahead of the vote on April 24 and clarify in the Order that the no-throttling rule also prohibits ISPs from creating fast lanes for select apps or kinds of apps.&nbsp;</p>
<p dir="ltr">The FCC just needs to put this fix in the fast lane to get it done before it votes on April 25.</p>
<hr>

<p><sup>1</sup> <a href="https://www.fcc.gov/document/promoting-fast-open-and-fair-internet">2024 Draft Order</a>, para. 492 (“Our interpretation of “throttling” encompasses a wide variety of conduct that could impair or degrade an end user’s ability to access content of their choosing; thus, we decline commenters’ request to modify the rule to explicitly include positive and negative discrimination of content. We agree, however, with Free Press that a BIAS provider’s “unreasonably discriminatory” decision to speed up specific content, applications, or services could “impair or degrade” other content, applications, or services not given the same treatment.” (footnotes omitted)).</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Old CSS, new CSS (2020) (112 pts)]]></title>
            <link>https://eev.ee/blog/2020/02/01/old-css-new-css/</link>
            <guid>40023892</guid>
            <pubDate>Sat, 13 Apr 2024 15:48:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://eev.ee/blog/2020/02/01/old-css-new-css/">https://eev.ee/blog/2020/02/01/old-css-new-css/</a>, See on <a href="https://news.ycombinator.com/item?id=40023892">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
            <p>I first got into web design/development in the late 90s, and only as I type this sentence do I realize how long ago that&nbsp;was.</p>
<p>And boy, it was horrendous.  I mean, being able to make stuff and put it online where other people could see it was pretty slick, but we did not have very much to work&nbsp;with.</p>
<p>I’ve been taking for granted that <em>most</em> folks doing web stuff still remember those days, or at least the decade that followed, but I think that assumption might be a wee bit out of date.  Some time ago I encountered a <a href="https://twitter.com/keinegurke_/status/1162309192855822339">tweet</a> marvelling at what we had to do without <code>border-radius</code>.  I still remember waiting with bated breath for it to be&nbsp;unprefixed!</p>
<p>But then, I suspect I also know a number of folks who only tried web design in the old days, and assume nothing about it has changed&nbsp;since.</p>
<p>I’m here to tell <em>all</em> of you to get off my lawn.  Here’s a history of <span>CSS</span> and web design, as I remember&nbsp;it.</p>


<hr>
<p>(Please bear in mind that this post is a fine blend of memory and research, so I can’t guarantee any of it is actually correct, <em>especially</em> the bits about causality.  You may want to try the <a href="https://www.w3.org/Style/CSS20/history.html"><span>W3C</span>’s history of <span>CSS</span></a>, which is considerably shorter, has a better chance of matching reality, and contains significantly less&nbsp;swearing.)</p>
<p>(Also, this would benefit greatly from more diagrams, but it took long enough just to <em>write</em>.)</p>
<h2 id="the-very-early-days"><a href="#the-very-early-days">The very early&nbsp;days</a></h2>
<p>In the beginning, there was no <span>CSS</span>.</p>
<p>This was very&nbsp;bad.</p>
<p>My favorite artifact of this era is the book that taught me <span>HTML</span>: O’Reilly’s <a href="https://isbnsearch.org/isbn/9781565924925"><span>HTML</span>: The Definitive Guide</a>, published in several editions in the mid to late 90s.  The book was indeed about <em><span>HTML</span></em>, with no mention of <span>CSS</span> at all.  I don’t have it any more and can’t readily find screenshots online, but here’s a page from <span>HTML</span> <span>&amp;</span> <span>XHTML</span>: The Definitive Guide, which seems to be a revision (I’ll get to <span>XHTML</span> later) with much the same style.  Here, then, is the cutting-edge web design advice of&nbsp;199X:</p>
<p><img src="https://eev.ee/media/2020-02-css/html-definitive-guide.png" alt="Screenshot of a plain website in IE, with plain black text on a white background with a simple image">
</p>

<p><span>“</span><em>Clearly delineate headers and footers with horizontal rules.</em>”</p>
<p>No, that’s not a <code>border-top</code>.  That’s an <code>&lt;hr&gt;</code>.  The page title is almost certainly centered with, well, <code>&lt;center&gt;</code>.</p>
<p>The page uses the default text color, background, and font.  Partly because this is a guidebook introducing concepts one at a time; partly because the book was printed in black and white; and partly, I’m sure, because it reflected the reality that coloring anything was a huge pain in the&nbsp;ass.</p>
<p>Let’s say you wanted all your <code>&lt;h1&gt;</code>s to be red, across your entire site.  You had to do&nbsp;this:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;</span><span>H1</span><span>&gt;&lt;</span><span>FONT</span> <span>COLOR</span><span>=</span><span>red</span><span>&gt;</span>...<span>&lt;/</span><span>FONT</span><span>&gt;&lt;/</span><span>H1</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>…<em>every single goddamn time</em>.  Hope you never decide to switch to&nbsp;blue!</p>
<p>Oh, and everyone wrote <span>HTML</span> tags in all caps.  I don’t remember why we all thought that was a good idea.  Maybe this was before syntax highlighting in text editors was very common (read: I was 12 and using Notepad), and uppercase tags were easier to distinguish from body&nbsp;text.</p>
<p>Keeping your site consistent was thus something of a nightmare.  One solution was to simply not style anything, which a lot of folks did.  This was nice, in some ways, since browsers let you change those defaults, so you could read the Web how you&nbsp;wanted.</p>
<p>A clever alternate solution, which I remember showing up in a lot of Geocities sites, was to simply give every page a completely different visual style.  Fuck it, right?  Just do whatever you want on each new&nbsp;page.</p>
<p>That trend was quite possibly the height of web&nbsp;design.</p>
<p>Damn, I miss those days.  There were no big walled gardens, no Twitter or Facebook.  If you had anything to say to anyone, you had to put together your own website.  It was <em>amazing</em>.  No one knew what they were doing; I’d wager that the vast majority of web designers at the time were clueless hobbyist tweens (like me) all copying from other clueless hobbyist tweens.  Half the Web was fan portals about Animorphs, with inexplicable splash pages warning you that their site worked best if you had a 640×480 screen.  (Any 12-year-old with insufficient resolution should, presumably, buy a new monitor with their allowance.)  Everyone who was cool and in the know used Internet Explorer 3, the most advanced browser, but some losers still used Netscape Navigator so you had to put a “Best in <span>IE</span>” animated <span>GIF</span> on your splash page&nbsp;too.</p>
<p>This was also the era of “web-safe colors” — a palette of 216 colors, where every channel was one of <code>00</code>, <code>33</code>, <code>66</code>, <code>99</code>, <code>cc</code>, or <code>ff</code> — which existed because some people still had 256-color monitors!  The things we take for granted now, like 24-bit&nbsp;color.</p>
<p>In fact, a <em>lot</em> of stuff we take for granted now was still a strange and untamed problem space.  You want to have the same navigation on every page on your website?  Okay, no problem: copy/paste it onto each page.  When you update it, be sure to update every page — but most likely you’ll forget some, and your whole site will become an archaeological dig into itself, with strata of increasingly bitrotted&nbsp;pages.</p>
<p>Much easier was to use <em>frames</em>, meaning the browser window is split into a grid and a different page loads in each section…  but then people would get confused if they landed on an individual page without the frames, as was common when coming from a search engine like AltaVista.  (I can’t believe I’m explaining frames, but no one has used them since like 2001.  You know iframes?  The “i” is for <em>inline</em>, to distinguish them from <em>regular</em> frames, which take up the entire&nbsp;viewport.)</p>
<p><span>PHP</span> wasn’t even called that yet, and nobody had heard of it.  This weird “Perl” and “<span>CGI</span>” thing was really strange and hard to understand, and it didn’t work on your own computer, and the errors were hard to find and diagnose, and anyway Geocities didn’t support it.  If you were <em>really</em> lucky and smart, your web host used Apache, and you could use its “server side include” syntax to do something like&nbsp;this:</p>
<table><tbody><tr><td><div><pre><span> 1</span>
<span> 2</span>
<span> 3</span>
<span> 4</span>
<span> 5</span>
<span> 6</span>
<span> 7</span>
<span> 8</span>
<span> 9</span>
<span>10</span>
<span>11</span>
<span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
<span>17</span></pre></div></td><td><div><pre><span></span><code><span>&lt;</span><span>BODY</span><span>&gt;</span>
    <span>&lt;</span><span>TABLE</span> <span>WIDTH</span><span>=</span><span>100%</span> <span>BORDER</span><span>=</span><span>0</span> <span>CELLSPACING</span><span>=</span><span>8</span> <span>CELLPADDING</span><span>=</span><span>0</span><span>&gt;</span>
        <span>&lt;</span><span>TR</span><span>&gt;</span>
            <span>&lt;</span><span>TD</span> <span>COLSPAN</span><span>=</span><span>2</span><span>&gt;</span>
                <span>&lt;!--#include virtual="/header.html" --&gt;</span> 
            <span>&lt;/</span><span>TD</span><span>&gt;</span>
        <span>&lt;/</span><span>TR</span><span>&gt;</span>
        <span>&lt;</span><span>TR</span><span>&gt;</span>
            <span>&lt;</span><span>TD</span> <span>WIDTH</span><span>=</span><span>20%</span><span>&gt;</span>
                <span>&lt;!--#include virtual="/navigation.html" --&gt;</span> 
            <span>&lt;/</span><span>TD</span><span>&gt;</span>
            <span>&lt;</span><span>TD</span><span>&gt;</span>
                (actual page content goes here)
            <span>&lt;/</span><span>TD</span><span>&gt;</span>
        <span>&lt;/</span><span>TR</span><span>&gt;</span>
    <span>&lt;/</span><span>TABLE</span><span>&gt;</span>
<span>&lt;/</span><span>BODY</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p><em>Mwah.</em>  Beautiful.  Apache would see the special comments, paste in the contents of the referenced files, and you’re off to the races.  The downside was that when you wanted to work on your site, all the navigation was missing, because you were doing it on your regular computer without Apache, and your web browser thought those were just regular <span>HTML</span> comments.  It was impossible to install Apache, of course, because you had a <em>computer</em>, not a <em>server</em>.</p>
<p>Sadly, that’s all gone now — paved over by homogenous timelines where anything that wasn’t made this week is old news and long forgotten.  The web was supposed to make information eternal, but instead, so much of it became ephemeral.  I miss when virtually everyone I knew had their own website.  Having a Twitter and an Instagram as your entire online presence is a poor&nbsp;substitute.</p>
<p>…</p>
<p>So, let’s look at the Space Jam&nbsp;website.</p>
<h2 id="case-study-space-jam"><a href="#case-study-space-jam">Case study: Space&nbsp;Jam</a></h2>
<p>Space Jam, if you’re not aware, is the greatest movie of all time.  It documents Bugs Bunny’s extremely short-lived basketball career, playing alongside a live action Michael Jordan to save the planet from aliens for some reason.  It was followed by a series of very successful and critically acclaimed <a href="https://www.talesofgames.com/related_game/barkley-shut-up-jam-gaiden/"><span>RPG</span> spinoffs</a>, which describe the fallout of the Space Jam and are extremely&nbsp;canon.</p>
<p>And we are truly blessed, for 24 years after it came out, its website is <a href="https://www.spacejam.com/1996/"><span>STILL</span> <span>UP</span></a>.  We can explore the pinnacle of 1996 web design, right here, right&nbsp;now.</p>
<p>First, notice that every page of this site is a static page.  Not only that, but it’s a static page ending in <code>.htm</code> rather than <code>.html</code>, because people on Windows versions before 95 were still beholden to 8.3 filenames.  Not sure why that mattered in a <span>URL</span>, as if you were going to run Windows 3.11 on a Web server, but there you&nbsp;go.</p>
<p>The <span>CSS</span> for the splash page looks like&nbsp;this:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;</span><span>body</span> <span>bgcolor</span><span>=</span><span>"#000000"</span> <span>background</span><span>=</span><span>"img/bg_stars.gif"</span> <span>text</span><span>=</span><span>"#ff0000"</span> <span>link</span><span>=</span><span>"#ff4c4c"</span> <span>vlink</span><span>=</span><span>"#ff4c4c"</span> <span>alink</span><span>=</span><span>"#ff4c4c"</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>Haha, just kidding!  What the fuck is <span>CSS</span>?  Space Jam predates it by a month.  (I do see a single line in the page source, but I’m pretty sure that was added much later to style some legally obligatory policy&nbsp;links.)</p>
<p>Notice the extremely precise positioning of these navigation links.  This feat was accomplished the same way everyone did everything in 1996: with&nbsp;tables.</p>
<p>In fact, tables have one functional advantage over <span>CSS</span> for layout, which was very important in those days, and not only because <span>CSS</span> didn’t exist yet.  You see, you can ctrl-click to select a table <em>cell</em> and even drag around to select all of them, which shows you how the cells are arranged and functions as a super retro layout debugger.  This was great because the first meaningful web debug tool, <a href="https://en.wikipedia.org/wiki/Firebug_%28software%29">Firebug</a>, wasn’t released until 2006 — a whole decade&nbsp;later!</p>
<p><img src="https://eev.ee/media/2020-02-css/space-jam-landing-table-cells.png" alt="Screenshot of the Space Jam website with the navigation table's cells selected, showing how the layout works">
</p>

<p>The markup for this table is overflowing with inexplicable blank lines, but with those removed, it looks like&nbsp;this:</p>
<table><tbody><tr><td><div><pre><span> 1</span>
<span> 2</span>
<span> 3</span>
<span> 4</span>
<span> 5</span>
<span> 6</span>
<span> 7</span>
<span> 8</span>
<span> 9</span>
<span>10</span>
<span>11</span>
<span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span>
<span>17</span>
<span>18</span>
<span>19</span>
<span>20</span>
<span>21</span>
<span>22</span>
<span>23</span>
<span>24</span>
<span>25</span>
<span>26</span>
<span>27</span>
<span>28</span>
<span>29</span>
<span>30</span>
<span>31</span>
<span>32</span>
<span>33</span>
<span>34</span>
<span>35</span>
<span>36</span>
<span>37</span>
<span>38</span></pre></div></td><td><div><pre><span></span><code><span>&lt;</span><span>table</span> <span>width</span><span>=</span><span>500</span> <span>border</span><span>=</span><span>0</span><span>&gt;</span>
<span>&lt;</span><span>TR</span><span>&gt;</span>
<span>&lt;</span><span>TD</span> <span>colspan</span><span>=</span><span>5</span> <span>align</span><span>=</span><span>right</span> <span>valign</span><span>=</span><span>top</span><span>&gt;</span>
<span>&lt;/</span><span>td</span><span>&gt;&lt;/</span><span>tr</span><span>&gt;</span>
<span>&lt;</span><span>tr</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>colspan</span><span>=</span><span>2</span> <span>align</span><span>=</span><span>right</span> <span>valign</span><span>=</span><span>middle</span><span>&gt;</span>
<span>&lt;</span><span>br</span><span>&gt;</span>
<span>&lt;</span><span>br</span><span>&gt;</span>
<span>&lt;</span><span>br</span><span>&gt;</span>
<span>&lt;</span><span>a</span> <span>href</span><span>=</span><span>"cmp/pressbox/pressboxframes.html"</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"img/p-pressbox.gif"</span> <span>height</span><span>=</span><span>56</span> <span>width</span><span>=</span><span>131</span> <span>alt</span><span>=</span><span>"Press Box Shuttle"</span> <span>border</span><span>=</span><span>0</span><span>&gt;&lt;/</span><span>a</span><span>&gt;</span>
<span>&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>align</span><span>=</span><span>center</span> <span>valign</span><span>=</span><span>middle</span><span>&gt;</span>
<span>&lt;</span><span>a</span> <span>href</span><span>=</span><span>"cmp/jamcentral/jamcentralframes.html"</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"img/p-jamcentral.gif"</span> <span>height</span><span>=</span><span>67</span> <span>width</span><span>=</span><span>55</span> <span>alt</span><span>=</span><span>"Jam Central"</span> <span>border</span><span>=</span><span>0</span><span>&gt;&lt;/</span><span>a</span><span>&gt;</span>
<span>&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>align</span><span>=</span><span>center</span> <span>valign</span><span>=</span><span>top</span><span>&gt;</span>
<span>&lt;</span><span>a</span> <span>href</span><span>=</span><span>"cmp/bball/bballframes.html"</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"img/p-bball.gif"</span> <span>height</span><span>=</span><span>62</span> <span>width</span><span>=</span><span>62</span> <span>alt</span><span>=</span><span>"Planet B-Ball"</span> <span>border</span><span>=</span><span>0</span><span>&gt;&lt;/</span><span>a</span><span>&gt;</span>
<span>&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>align</span><span>=</span><span>center</span> <span>valign</span><span>=</span><span>bottom</span><span>&gt;</span>
<span>&lt;</span><span>br</span><span>&gt;</span>
<span>&lt;</span><span>br</span><span>&gt;</span>
<span>&lt;</span><span>a</span> <span>href</span><span>=</span><span>"cmp/tunes/tunesframes.html"</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"img/p-lunartunes.gif"</span> <span>height</span><span>=</span><span>77</span> <span>width</span><span>=</span><span>95</span> <span>alt</span><span>=</span><span>"Lunar Tunes"</span> <span>border</span><span>=</span><span>0</span><span>&gt;&lt;/</span><span>a</span><span>&gt;</span>
<span>&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;/</span><span>tr</span><span>&gt;</span>
<span>&lt;</span><span>tr</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>align</span><span>=</span><span>middle</span> <span>valign</span><span>=</span><span>top</span><span>&gt;</span>
<span>&lt;</span><span>br</span><span>&gt;</span>
<span>&lt;</span><span>br</span><span>&gt;</span>
<span>&lt;</span><span>a</span> <span>href</span><span>=</span><span>"cmp/lineup/lineupframes.html"</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"img/p-lineup.gif"</span> <span>height</span><span>=</span><span>52</span> <span>width</span><span>=</span><span>63</span> <span>alt</span><span>=</span><span>"The Lineup"</span> <span>border</span><span>=</span><span>0</span><span>&gt;&lt;/</span><span>a</span><span>&gt;</span>
<span>&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>colspan</span><span>=</span><span>3</span> <span>rowspan</span><span>=</span><span>2</span> <span>align</span><span>=</span><span>right</span> <span>valign</span><span>=</span><span>middle</span><span>&gt;</span>
<span>&lt;</span><span>img</span> <span>src</span><span>=</span><span>"img/p-jamlogo.gif"</span> <span>height</span><span>=</span><span>165</span> <span>width</span><span>=</span><span>272</span> <span>alt</span><span>=</span><span>"Space Jam"</span> <span>border</span><span>=</span><span>0</span><span>&gt;</span>
<span>&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>align</span><span>=</span><span>right</span> <span>valign</span><span>=</span><span>bottom</span><span>&gt;</span>
<span>&lt;</span><span>a</span> <span>href</span><span>=</span><span>"cmp/jump/jumpframes.html"</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"img/p-jump.gif"</span> <span>height</span><span>=</span><span>52</span> <span>width</span><span>=</span><span>58</span> <span>alt</span><span>=</span><span>"Jump Station"</span> <span>border</span><span>=</span><span>0</span><span>&gt;&lt;/</span><span>a</span><span>&gt;</span>
<span>&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;/</span><span>tr</span><span>&gt;</span>
...
<span>&lt;/</span><span>table</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>That’s the first two rows, including the logo.  You get the idea.  Everything is laid out with <code>align</code> and <code>valign</code> on table cells; <code>rowspan</code>s and <code>colspan</code>s are used frequently; and there are some <code>&lt;br&gt;</code>s thrown in for good measure, to adjust vertical positioning by one line-height at a&nbsp;time.</p>
<p>Other fantastic artifacts to be found on this page include this header, which contains Apache <span>SSI</span> syntax!  This must’ve quietly broken when the site was moved over the years; it’s currently hosted on Amazon S3.  You know, Amazon?  The&nbsp;bookstore?</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;</span><span>table</span> <span>border</span><span>=</span><span>0</span> <span>cellpadding</span><span>=</span><span>0</span> <span>cellspacing</span><span>=</span><span>0</span> <span>width</span><span>=</span><span>488</span> <span>height</span><span>=</span><span>60</span><span>&gt;</span>
<span>&lt;</span><span>tr</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>align</span><span>=</span><span>"center"</span><span>&gt;</span><span>&lt;!--#include virtual="html.ng/site=spacejam&amp;type=movie&amp;home=no&amp;size=234&amp;page.allowcompete=no"--&gt;</span><span>&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>align</span><span>=</span><span>"center"</span> <span>width</span><span>=</span><span>"20"</span><span>&gt;&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;</span><span>td</span> <span>align</span><span>=</span><span>"center"</span><span>&gt;</span><span>&lt;!--#include virtual="html.ng/site=spacejam&amp;type=movie&amp;home=no&amp;size=234"--&gt;</span><span>&lt;/</span><span>td</span><span>&gt;</span>
<span>&lt;/</span><span>tr</span><span>&gt;</span>
<span>&lt;/</span><span>table</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>Okay, let’s check out <a href="https://www.spacejam.com/1996/cmp/jamcentral/jamcentralframes.html">jam central</a>.  I’ve used my browser dev tools to reduce the viewport to 640×480 for the authentic experience (although I’d also have lost some vertical space to the title bar, taskbar, and five or six <span>IE</span>&nbsp;toolbars).</p>
<p>Note the frames: the logo in the top left leads back to the landing page, cleverly saving screen space on repeating all that navigation, and the top right is a fucking ad banner which has been blocked like seven different ways.  All three parts are separate&nbsp;pages.</p>
<p><img src="https://eev.ee/media/2020-02-css/space-jam-central.png" alt="Screenshot of the Space Jam website's 'Jam Central'">
</p>

<p>Note also the utterly unreadable red text on a textured background, one of the truest hallmarks of 90s web design.  “Why not put that block of text on an easier-to-read background?” you might ask.  You imbecile.  How would I <em>possibly</em> do that?  Only the <code>&lt;body&gt;</code> has a <code>background</code> attribute!  I could use a table, but tables only support solid background colors, and that would look so&nbsp;boring!</p>
<p>But wait, what is this new navigation widget?  How are the links all misaligned like that?  Is this yet another table?  Well, no, although filling a table with chunks of a sliced-up image wasn’t uncommon.  But this is an <em>imagemap</em>, a long-forgotten <span>HTML</span> feature.  I’ll just show you the&nbsp;source:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;</span><span>img</span> <span>src</span><span>=</span><span>"img/m-central.jpg"</span> <span>height</span><span>=</span><span>301</span> <span>width</span><span>=</span><span>438</span> <span>border</span><span>=</span><span>0</span> <span>alt</span><span>=</span><span>"navigation map"</span> <span>usemap</span><span>=</span><span>"#map"</span><span>&gt;&lt;</span><span>br</span><span>&gt;</span>

<span>&lt;</span><span>map</span> <span>name</span><span>=</span><span>"map"</span><span>&gt;</span>
<span>&lt;</span><span>area</span> <span>shape</span><span>=</span><span>"rect"</span> <span>coords</span><span>=</span><span>"33,92,178,136"</span> <span>href</span><span>=</span><span>"prodnotesframes.html"</span> <span>target</span><span>=</span><span>"_top"</span><span>&gt;</span>
<span>&lt;</span><span>area</span> <span>shape</span><span>=</span><span>"rect"</span> <span>coords</span><span>=</span><span>"244,111,416,152"</span> <span>href</span><span>=</span><span>"photosframes.html"</span> <span>target</span><span>=</span><span>"_top"</span><span>&gt;</span>
<span>&lt;</span><span>area</span> <span>shape</span><span>=</span><span>"rect"</span> <span>coords</span><span>=</span><span>"104,138,229,181"</span> <span>href</span><span>=</span><span>"filmmakersframes.html"</span> <span>target</span><span>=</span><span>"_top"</span><span>&gt;</span>
<span>&lt;</span><span>area</span> <span>shape</span><span>=</span><span>"rect"</span> <span>coords</span><span>=</span><span>"230,155,334,197"</span> <span>href</span><span>=</span><span>"trailerframes.html"</span> <span>target</span><span>=</span><span>"_top"</span><span>&gt;</span>
<span>&lt;/</span><span>map</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>I assume this is more or less self-explanatory.  The <code>usemap</code> attribute attaches an image map, which is defined as a bunch of clickable areas, beautifully encoded as inscrutable lists of coordinates or&nbsp;something.</p>
<p>And this stuff still works!  This is in <span>HTML</span>!  You could use it right now!  Probably don’t&nbsp;though!</p>
<h3 id="the-thumbnail-grid"><a href="#the-thumbnail-grid">The thumbnail&nbsp;grid</a></h3>
<p>Let’s look at one more random page here.  I’d love to see some photos from the film.  (Wait, <em>photos</em>?  Did we not know what “screenshots” were&nbsp;yet?)</p>
<p><img src="https://eev.ee/media/2020-02-css/space-jam-photos.png" alt="Screenshot of the Space Jam website's photos page">
</p>

<p>Another frameset, but arranged differently this&nbsp;time.</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;</span><span>body</span> <span>bgcolor</span><span>=</span><span>"#7714bf"</span> <span>background</span><span>=</span><span>"img/bg-jamcentral.gif"</span> <span>text</span><span>=</span><span>"#ffffff"</span> <span>link</span><span>=</span><span>"#edb2fc"</span> <span>vlink</span><span>=</span><span>"#edb2fc"</span> <span>alink</span><span>=</span><span>"#edb2fc"</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>They did an important thing here: since they specified a background image (which is opaque), they <em>also</em> specified a background color.  Without it, if the background image failed to load, the page would be white text on the default white background, which would be&nbsp;unreadable.</p>
<p>(That’s <em>still</em> an important thing to keep in mind.  I feel like modern web development tends to assume everything will load, or sees loading as some sort of inconvenience to be worked around, but not everyone is working on a wired connection in a San Francisco office twenty feet away from a&nbsp;backbone.)</p>
<p>But about the page itself.  Thumbnail grids are a classic problem of web design, dating all the way back to…  er…  well, at least as far back as Space Jam.  The main issue is that you want to <em>put things next to each other</em>, whereas <span>HTML</span> defaults to stacking everything in one big column.  You could put all the thumbnails inline, in a single row of (wrapping) text, but that wouldn’t be much of a grid — and you usually want each one to have some sort of&nbsp;caption.</p>
<p>Space Jam’s approach was to use the only real tool anyone had in their toolbox at the time: a table.  It’s structured like&nbsp;this:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;</span><span>table</span> <span>cellpadding</span><span>=</span><span>10</span><span>&gt;</span>
<span>&lt;</span><span>tr</span><span>&gt;&lt;</span><span>td</span> <span>align</span><span>=</span><span>center</span><span>&gt;&lt;</span><span>a</span> <span>href</span><span>=</span><span>"..."</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"..."</span><span>&gt;&lt;/</span><span>a</span><span>&gt;&lt;/</span><span>td</span><span>&gt;</span>...<span>&lt;/</span><span>tr</span><span>&gt;</span>
<span>&lt;</span><span>tr</span><span>&gt;</span>...<span>&lt;/</span><span>tr</span><span>&gt;</span>
<span>&lt;</span><span>tr</span><span>&gt;</span>...<span>&lt;/</span><span>tr</span><span>&gt;</span>
<span>&lt;</span><span>table</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>A 3×3 grid of thumbnails, left to the browser to arrange.  (The last image, on a row of its own, isn’t actually part of the table.)  This can’t scale to fit your screen, but everyone’s screen was pretty tiny back then, so that was <em>slightly</em> less of a concern.  They didn’t add captions here, but since every thumbnail is wrapped in a table cell, they easily could&nbsp;have.</p>
<p>This was the state of the art in thumbnail grids in 1996.  We’ll be revisiting this little <span>UI</span> puzzle a few times; you can see live examples (and view source for sample markup) on a <a href="https://eev.ee/media/2020-02-css/thumbnail-grids.html#tables">separate page</a>.</p>
<p>But let’s take a moment to appreciate the size of the “full-size, full-color, internet-quality” movie screenshots on my current&nbsp;monitor.</p>
<p><img src="https://eev.ee/media/2020-02-css/space-jam-photo-size.png" alt="Screenshot of one of the Space Jam website's full-size photos, fullscreened on my monitor">
</p>

<p>Hey, though, they’re less than 16 <span>KB</span>!  That’ll only take nine seconds to&nbsp;download.</p>
<p>(I’m reminded of the problem of embedded <em>video</em>, which wasn’t solved until <span>HTML5</span>’s <code>&lt;video&gt;</code> tag some years later.  Until then, you had to use a binary plugin, and all of them were&nbsp;terrible.)</p>
<p>(Oh, by the way: images within links, by default, have a link-colored border around them.  Image links are <em>usually</em> self-evident, so this was largely annoying, and until <span>CSS</span> you had to disable them for every single image with <code>&lt;img border=0&gt;</code>.)</p>
<h2 id="the-regular-early-days"><a href="#the-regular-early-days">The regular early&nbsp;days</a></h2>
<p>So that’s where we started, and it sucked.  If you wanted <em>any</em> kind of consistency on more than a handful of pages, your options were very limited, and they were pretty much limited to a whole lot of copying and pasting.  The Space Jam website opted to, for the most part, not bother at all — as did many&nbsp;others.</p>
<p>Then <span>CSS</span> came along, it was a <em>fucking miracle</em>.  All that inline repetition went away.  You want all your top-level headings to be a particular color?  No&nbsp;problem:</p>
<table><tbody><tr><td></td><td>
</td></tr></tbody></table>
<p>Bam!  You’re done.  No matter how many <code>&lt;h1&gt;</code>s you have in your document, every single one of them will be eye-searing red, and you never have to think about it again.  Even better, you can put that snippet in its own file and have that questionable aesthetic choice applied to <em>every page of your whole site</em> with almost no effort!  The same applied to your gorgeous tiling background image, the colors of your links, and the size of the font in your&nbsp;tables.</p>
<p>(Just remember to wrap the contents of your <code>&lt;style&gt;</code> tags in <span>HTML</span> comments, or old browsers without <span>CSS</span> support will display them as&nbsp;text.)</p>
<p>You weren’t limited to styling tags en masse, either.  <span>CSS</span> introduced “classes” and “IDs” to target only specifically flagged elements.  A <em>selector</em> like <code>P.important</code> would only affect <code>&lt;P CLASS="important"&gt;</code>, and <code>#header</code> would only affect <code>&lt;H1 ID="header"&gt;</code>.  (The difference is that IDs are intended to be unique in a document, whereas classes can be used any number of times.)  With these tools, you could effectively invent your own tags, giving you a customized version of <span>HTML</span> specific to your&nbsp;website!</p>
<p>This was a huge leap forward, but at the time, no one (probably?) was thinking of using <span>CSS</span> to actually <em>arrange</em> the page.  When <a href="https://www.w3.org/TR/2008/REC-CSS1-20080411/"><span>CSS</span> 1</a> was made a recommendation in December ‘96, it barely addressed layout at all.  All it did was divorce <span>HTML</span>’s <em>existing</em> abilities from the tags they were attached to.  We had font colors and backgrounds <em>because</em> <code>&lt;FONT COLOR&gt;</code> and <code>&lt;BODY BACKGROUND&gt;</code> existed.  The only feature that even remotely affected where things were positioned was the <code>float</code> property, the equivalent to <code>&lt;IMG ALIGN&gt;</code>, which pulled an image to the side and let text flow around it, like in a magazine article.  Hardly&nbsp;whelming.</p>
<p>This wasn’t too surprising.  <span>HTML</span> hadn’t had any real answers for layout besides tables, and the table properties were too complicated to generalize in <span>CSS</span> and too entangled with the tag structure, so there was nothing for <span>CSS</span> 1 to inherit.  It merely reduced the repetition in what we were already doing with e.g. <code>&lt;FONT&gt;</code> tags — making Web design less tedious, less error-prone, less full of noise, and much more maintainable.  A pretty good step forward, and everyone happily adopted it for that, but tables remained king for arranging your&nbsp;page.</p>
<p>That was okay, though; all your blog really needed was a header and a sidebar, which tables could do just fine, and it wasn’t like you were going to overhaul that basic structure very often.  Copy/pasting a few lines of <code>&lt;TABLE BORDER=0&gt;</code> and <code>&lt;TD WIDTH=20%&gt;</code> wasn’t nearly as big a&nbsp;deal.</p>
<p>For some span of time — I want to say a couple years, but time passes more slowly when you’re a kid — this was the state of the Web.  Tables for layout, <span>CSS</span> for…  well, <em>style</em>.  Colors, sizes, bold, underline.  There was even this sick trick you could do with links where they’d <em>only</em> be underlined when the mouse was <em>pointing</em> at them.&nbsp;Tubular!</p>
<p>(Fun fact: <span>HTML</span> <em>email</em> is still basically trapped in this&nbsp;era.)</p>
<p>(And here’s about where I come in, at the ripe old age of 11, with no clue what I was doing and mostly learning from other 11-year-olds who also had no clue what they were doing.  But that was fine; a huge chunk of the Web was 11-year-olds making their own websites, and it was beautiful.  Why would you go to a <em>business</em> website when you can take a peek into the very specific hobbies of someone on the other side of the&nbsp;planet?)</p>
<h2 id="the-dark-times"><a href="#the-dark-times">The dark&nbsp;times</a></h2>
<p>A year and a half later, in mid ‘98, we were gifted <a href="https://www.w3.org/TR/2008/REC-CSS2-20080411/"><span>CSS</span> 2</a>.  (I <em>love</em> the background on this page, by the way.)  This was a modest upgrade that addressed a few deficiencies in various areas, but most interesting was the addition of a couple positioning primitives: the <code>position</code> property, which let you place elements at precise coordinates, and the <code>inline-block</code> display mode, which let you stick an element in a line of text like you could do with&nbsp;images.</p>
<p>Such tantalizing fruit, just out of reach!  Using <code>position</code> seemed nice, but pixel-perfect positioning was at serious odds with the fluid design of <span>HTML</span>, and it was difficult to make much of anything that didn’t fall apart on other screen sizes or have other serious drawbacks.  This humble <code>inline-block</code> thing <em>seemed</em> interesting enough; after all, it solved the core problem of <span>HTML</span> layout, which is <em>putting things next to each other</em>.  But at least for the moment, no browser implemented it, and it was largely&nbsp;ignored.</p>
<p>I can’t say for sure if it was the introduction of positioning or some other factor, but <em>something</em> around this time inspired folks to try doing layout in <span>CSS</span>.  Ideally, you would <em>completely</em> divorce the structure of your page from its appearance.  A website even came along to take this principle to the extreme — <a href="http://www.csszengarden.com/"><span>CSS</span> Zen Garden</a> is still around, and showcases the <em>same <span>HTML</span></em> being radically transformed into completely different designs by applying different&nbsp;stylesheets.</p>
<p>Trouble was, early <span>CSS</span> support was buggy as hell.  In retrospect, I suspect browser vendors merely plucked the behavior off of <span>HTML</span> tags and called it a day.  I’m delighted to say that RichInStyle still has <a href="http://www.richinstyle.com/bugs/">an extensive list of early browser <span>CSS</span> bugs</a> up; here are some of my&nbsp;favorites:</p>
<ul>
<li>
<p><span>IE</span> 3 would ignore all but the last <code>&lt;style&gt;</code> tag in a&nbsp;document.</p>
</li>
<li>
<p><span>IE</span> 3 ignored pseudo-classes, so <code>a:hover</code> would be treated as <code>a</code>.</p>
</li>
<li>
<p><span>IE</span> 3 and <span>IE</span> 4 treated <code>auto</code> margins as zero.  Actually, I think this one might’ve persisted all the way to <span>IE</span> 6.  But that was okay, because <span>IE</span> 6 also incorrectly applied <code>text-align: center</code> to block&nbsp;elements.</p>
</li>
<li>
<p>If you set a background image to an absolute <span>URL</span>, <span>IE</span> 3 would try to open the image in a local program, as though you’d downloaded&nbsp;it.</p>
</li>
<li>
<p>Netscape 4 understood an <span>ID</span> selector like <code>#id</code>, but ignored <code>h1#id</code> as&nbsp;invalid.</p>
</li>
<li>
<p>Netscape 4 didn’t inherit properties — including font and text color! — into table&nbsp;cells.</p>
</li>
<li>
<p>Netscape 4 applied properties on <code>&lt;li&gt;</code> to the list <em>marker</em>, rather than the&nbsp;contents.</p>
</li>
<li>
<p>If the same element has both <code>float</code> and <code>clear</code> (not unreasonable), Netscape 4 for Mac&nbsp;crashes.</p>
</li>
</ul>
<p>This is what we had to work with.  And folks wanted to use <span>CSS</span> to <em>lay out</em> an <em>entire page</em>?&nbsp;Ha.</p>
<p>Yet the idea grew in popularity.  It even became a sort of elitist rallying cry, a best practice used to beat other folks over the head.  Tables for layout are just plain bad, you’d hear!  They confuse screenreaders, they’re semantically incorrect, they interact poorly with <span>CSS</span> positioning!  All of which is true, but it was a much tougher pill to swallow when the alternative&nbsp;was—</p>
<p>Well, we’ll get to that in a moment.  First, some background on the Web landscape circa&nbsp;2000.</p>
<h3 id="the-end-of-the-browser-wars-and-subsequent-stagnation"><a href="#the-end-of-the-browser-wars-and-subsequent-stagnation">The end of the browser wars and subsequent&nbsp;stagnation</a></h3>
<p>The short version is: this company Netscape had been selling its Navigator browser (to businesses; it was free for personal use), and then Microsoft entered the market with its completely free Internet Explorer browser, and <em>then</em> Microsoft had the audacity to bundle <span>IE</span> with Windows.  Can you imagine?  An operating system that <em>comes with</em> a browser?  This was a whole big thing, <a href="https://en.wikipedia.org/wiki/United_States_v._Microsoft_Corp.">Microsoft was sued over it</a>, and they lost, and the consequence was basically&nbsp;nothing.</p>
<p>But it wouldn’t have mattered either way, because they’d still <em>done it</em>, and it had worked.  <span>IE</span> pretty much annihilated Netscape’s market share.  Both browsers were buggy as hell, and <em>differently</em> buggy as hell, so a site built exclusively against one was likely to be a big mess when viewed in the other — this meant that when Netscape’s market share dropped, web designers paid less and less attention to it, and less of the Web worked in it, and its market share dropped&nbsp;further.</p>
<p>Sucks for you if you don’t use Windows, I guess.  Which is funny, because there was an <span>IE</span> for Mac 5.5, and it was generally <em>less</em> buggy than <span>IE</span> 6.  (Incidentally, Bill Gates wasn’t so much a brilliant nerd as an aggressive and ruthless businessman who made his fortune by deliberately striving to annihilate any competition standing in his way and making computing worse overall as a result, just&nbsp;saying.)</p>
<p>By the time Windows <span>XP</span> shipped in mid 2001, with Internet Explorer 6 built in, Netscape had gone from a juggernaut to a tiny niche&nbsp;player.</p>
<p>And then, having completely and utterly dominated, Microsoft stopped.  Internet Explorer had seen a release every year or so since its inception, but <span>IE</span> 6 was the last release for more than five years.  It was still buggy, but that was less noticeable when there was no competition, and it was <em>good enough</em>.  Windows <span>XP</span>, likewise, was good enough to take over the desktop, and there wouldn’t be another Windows for just as&nbsp;long.</p>
<p>The <span>W3C</span>, the group who write the standards (not to be confused with W3Schools, who are shady <span>SEO</span> leeches), also stopped.  <span>HTML</span> had seen several revisions throughout the mid 90s, and then froze as <span>HTML</span> 4.  <span>CSS</span> had gotten an update in only a year and a half, and then no more; the minor update <a href="https://www.w3.org/TR/CSS21/"><span>CSS</span> 2.1</a> wouldn’t hit Candidate Recommendation status until early 2004, and took another seven years to be&nbsp;finalized.</p>
<p>With <span>IE</span> 6’s dominance, it was as if the entire Web was frozen in time.  Standards didn’t matter, because there was effectively only one browser, and whatever it did became the de facto standard.  As the Web grew in popularity, <span>IE</span>’s stranglehold also made it difficult to use any platform other than Windows, since <span>IE</span> was Windows-only and it was a coin flip whether a website would actually work with any other&nbsp;browser.</p>
<p>(One begins to suspect that monopolies are bad.  There oughta be a&nbsp;law!)</p>
<p>In the meantime, Netscape had put themselves in an even worse position by deciding to do a massive rewrite of their browser engine, culminating in the vastly more standards-compliant Netscape 6 — at the cost of several years away from the market while <span>IE</span> was kicking their ass.  It never broke 10% market share, while <span>IE</span>’s would peak at 96%.  On the other hand, the new engine was open sourced as the Mozilla Application Suite, which would be important in a few&nbsp;years.</p>
<p>Before we get to that, some other things were also&nbsp;happening.</p>
<h3 id="quirks-mode"><a href="#quirks-mode">Quirks&nbsp;mode</a></h3>
<p>All early <span>CSS</span> implementations were riddled with bugs, but one in particular is perhaps the most infamous <span>CSS</span> bug of all time: the <em>box model bug</em>.</p>
<p>You see, a box (the rectangular space taken up by an element) has several measurements: its own width and height, then surrounding whitespace called padding, then an optional border, then a margin separating it from neighboring boxes.  <span>CSS</span> specifies that these properties are all additive.  A box with these&nbsp;styles:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>    </span><span>width</span><span>:</span><span> </span><span>100px</span><span>;</span><span></span>
<span>    </span><span>padding</span><span>:</span><span> </span><span>10px</span><span>;</span><span></span>
<span>    </span><span>border</span><span>:</span><span> </span><span>2px</span><span> </span><span>solid</span><span> </span><span>black</span><span>;</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>…would thus be 124 pixels wide, from border to&nbsp;border.</p>
<p><span>IE</span> 4 and Netscape 4, on the other hand, took a different approach: they treated <code>width</code> and <code>height</code> as measuring from border to border, and they <em>subtracted</em> the border and padding to get the width of the element itself.  The same box in those browsers would be 100 pixels wide from border to border, with 76 pixels remaining for the&nbsp;content.</p>
<p>This conflict with the spec was not ideal, and <span>IE</span> 6 set out to fix it.  Unfortunately, simply making the change would mean completely breaking the design of a whole lot of websites that had previously worked in <em>both</em> <span>IE</span> and&nbsp;Netscape.</p>
<p>So the <span>IE</span> team came up with a very strange compromise: they declared the old behavior (along with several other major bugs) as “quirks mode” and made it the <em>default</em>.  The new “strict mode” or “standards mode” had to be opted <em>into</em>, by placing a “doctype” at the beginning of your document, before the <code>&lt;html&gt;</code> tag.  It would look something like&nbsp;this:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>Everyone had to paste this damn mess of a line at the top of every single <span>HTML</span> document for years.  (<span>HTML5</span> would later simplify it to <code>&lt;!DOCTYPE html&gt;</code>.)  In retrospect, it’s a really strange way to opt into correct <span>CSS</span> behavior; doctypes had been part of the <span>HTML</span> spec since way back when it was an <a href="https://tools.ietf.org/html/rfc1866"><span>RFC</span></a>.  I’m guessing the idea was that, since <em>nobody</em> bothered actually including one, it was a convenient way to allow opting in without requiring proprietary extensions just to avoid behavior that had been wrong in the first place.  Good for the <span>IE</span>&nbsp;team!</p>
<p>The funny thing is, quirks mode still exists <em>and is still the default</em> in all browsers, twenty years later!  The exact quirks have varied over time, and in particular neither Chrome nor Firefox use the <span>IE</span> box model even in quirks mode, but there are still <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Mozilla_quirks_mode_behavior">quite a few other emulated bugs</a>.</p>

<p>Modern browsers also have “almost standards” mode, which emulates only a single quirk, perhaps the second most infamous one: if a table cell contains only a single image, the space under the baseline is removed.  Under normal <span>CSS</span> rules, the image is sitting within a line of (otherwise empty) text, which requires some space reserved underneath for descenders — the tails on letters like y.  Early browsers didn’t handle this correctly, and some otherwise strict-mode websites from circa 2000 rely on it — e.g., by cutting up a large image and arranging the chunks in table cells, expecting them to display flush against each other — hence the intermediate mode to keep them limping&nbsp;along.</p>
<p>But getting back to the past: while this was certainly a win for standards (and thus interop), it created a new problem.  Since <span>IE</span> 6 dominated, and doctypes were optional, there was little compelling reason to bother with strict mode.  Other browsers ended up <em>emulating</em> it, and the non-standard behavior became its own de facto standard.  Web designers who cared about this sort of thing (and to our credit, there were a lot of us) made a rallying cry out of enabling strict mode, since it was the absolute barest minimum step towards ensuring compatibility with other&nbsp;browsers.</p>
<h3 id="the-rise-and-fall-of-xhtml"><a href="#the-rise-and-fall-of-xhtml">The rise and fall of&nbsp;XHTML</a></h3>
<p>Meanwhile, the <span>W3C</span> had lost interest in <span>HTML</span> in favor of developing <span>XHTML</span>, an attempt to redesign <span>HTML</span> with the syntax of <span>XML</span> rather than <span>SGML</span>.</p>
<p>(What on Earth is <span>SGML</span>, you ask?  I don’t know.  Nobody knows.  It’s the grammar <span>HTML</span> was built on, and that’s the only reason anyone has heard of&nbsp;it.)</p>
<p>To their credit, there were some good reasons to do this at the time.  <span>HTML</span> was generally hand-written (as it still is now), and anything hand-written is likely to have the occasional bugs.  Browsers weren’t in the habit of rejecting buggy <span>HTML</span> outright, so they had various error-correction techniques — and, as with everything else, different browsers handled errors differently.  Slightly malformed <span>HTML</span> might appear to work fine in <span>IE</span> 6 (where “work fine” means “does what you hoped for”), but turn into a horrible mess in anything&nbsp;else.</p>
<p>The <span>W3C</span>’s solution was <span>XML</span>, because their solution to fucking everything in the early 2000s was <span>XML</span>.  If you’re not aware, <span>XML</span> takes a much more explicit and aggressive approach to error handling — if your document contains a parse error, the <em>entire document</em> is invalid.  That means if you bank on <span>XHTML</span> and make a single typo somewhere, <strong>nothing at all</strong> renders.  Just an&nbsp;error.</p>
<p>This sucked.  It sounds okay on the face of things, but consider: generic <span>XML</span> is usually assembled dynamically with <em>libraries</em> that treat a document as a tree you manipulate, then turn it all into text when you’re done.  That’s great for the common use of <span>XML</span> as data serialization, where your data is already a tree and much of the <span>XML</span> structure is simple and repetitive and easy to squirrel away in&nbsp;functions.</p>
<p><span>HTML</span> is not like that.  An <span>HTML</span> document has little reliable repeating structure; even this blog post, constructed <em>mostly</em> from <code>&lt;p&gt;</code> tags, also contains surprise <code>&lt;em&gt;</code>s within body text and the occasional <code>&lt;h2&gt;</code> between paragraphs.  That’s not fun to express as a tree.  And this is a big deal, because server-side rendering was becoming popular around the same time, and generated <span>HTML</span> was — still is! — put together with <em>templates</em> that treat it as a text&nbsp;stream.</p>
<p>If <span>HTML</span> were only written as complete static documents, then <span>XHTML</span> might have worked out — you write a document, you see it in your browser, you know it works, no problem.  But generating it dynamically and risking that <em>particular edge cases</em> might replace your entire site with an unintelligible browser error?  That&nbsp;sucks.</p>
<p>It certainly didn’t help that we were just starting to hear about this newfangled Unicode thing around this time, and it was still not always clear how exactly to make that work, and one bad <span>UTF</span>-8 sequence is enough for an entire <span>XML</span> document to be considered&nbsp;malformed!</p>
<p>And so, after some dabbling, <span>XHTML</span> was largely forgotten.  Its legacy lives on in two&nbsp;ways:</p>
<ul>
<li>
<p>It got us all to stop using uppercase tag names!  So long <code>&lt;BODY&gt;</code>, hello <code>&lt;body&gt;</code>.  <span>XML</span> is case-sensitive, you see, and all the <span>XHTML</span> tags were defined in lowercase, so uppercase tags simply would not work.  (Fun fact: to this day, JavaScript APIs report <span>HTML</span> tag names in uppercase.)  The increased popularity of syntax highlighting probably also had something to do with this; we weren’t all still using Notepad as we had been in&nbsp;1997.</p>
</li>
<li>
<p>A bunch of folks <em>still</em> think self-closing tags are necessary.  You see, <span>HTML</span> has two kinds of tags: containers like <code>&lt;p&gt;...&lt;/p&gt;</code> and markers like <code>&lt;br&gt;</code>.  Since a <code>&lt;br&gt;</code> can’t possibly contain anything, there’s no such thing as <code>&lt;/br&gt;</code>.  <span>XML</span>, as a generic grammar, doesn’t have this distinction; every tag <em>must</em> be closed, but as a shortcut, you can write <code>&lt;br/&gt;</code> to mean <code>&lt;br&gt;&lt;/br&gt;</code>.</p>
<p><span>XHTML</span> has been dead for years, but for some reason, I still see folks write <code>&lt;br/&gt;</code> in regular <span>HTML</span> documents.  Outside of <span>XML</span>, that slash doesn’t do anything; <span>HTML5</span> has defined it for compatibility reasons, but it’s silently ignored.  It’s even actively harmful, since it might lead you to believe that <code>&lt;script/&gt;</code> is an empty <code>&lt;script&gt;</code> tag — but in <span>HTML</span>, it definitely is&nbsp;not!</p>
</li>
</ul>
<p>I do miss one thing about <span>XHTML</span>.  You could combine it with <span>XSLT</span>, the <span>XML</span> templating meta-language, to do in-browser templating (i.e., slot page-specific contents into your overall site layout) with no scripting required.  It’s the <em>only</em> way that’s ever been possible, and it was cool as all hell when it worked, but the drawbacks were too severe when it didn’t.  Also, <span>XSLT</span> is totally fucking&nbsp;incomprehensible.</p>
<h3 id="the-beginning-of-css-layout"><a href="#the-beginning-of-css-layout">The beginning of CSS&nbsp;layout</a></h3>
<p>Back to <span>CSS</span>!</p>
<p>You’re an aspiring web designer.  For whatever reason, you want to try using this <span>CSS</span> thing to lay out your whole page, even though it was <em>clearly</em> intended just for colors and stuff.  What do you&nbsp;do?</p>
<p>As I mentioned before, your core problem is <em>putting things next to each other</em>.  Putting things on <em>top</em> of each other is a non-problem — that’s the normal behavior of <span>HTML</span>.  The whole reason everyone uses tables is that you can slop stuff into table cells and have it laid out side-by-side, in&nbsp;columns.</p>
<p>Well, tables seem to be out.  <span>CSS</span> 2 had added some element display modes that corresponded to the parts of a table, but to use them, you’d have to have the same three levels of nesting as real tables: the table itself, then a row, then a cell.  That doesn’t seem like a huge step up, and anyway, <span>IE</span> won’t support them until the distant&nbsp;future.</p>
<p>There’s that <code>position</code> thing, but it seems to make things <em>overlap</em> more often than not.&nbsp;Hmm.</p>
<p>What does that&nbsp;leave?</p>
<p>Only one tool, really: <code>float</code>.</p>
<p>I said that <code>float</code> was intended for magazine-style “pull” images, which is true, but <span>CSS</span> had defined it fairly generically.  In <em>principle</em>, it could be applied to any element.  If you wanted a sidebar, you could tell it to float to the left and be 20% the width of the page, and you’d get something like&nbsp;this:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code>+---------+
| sidebar | Hello, and welcome to my website!
|         |
+---------+
</code></pre></div>
</td></tr></tbody></table>
<p>Alas!  Floating has the secondary behavior that text wraps around it.  If your page text was ever longer than your sidebar, it would wrap around <em>underneath</em> the sidebar, and the illusion would shatter.  But hey, no problem.  <span>CSS</span> specified that floats don’t wrap around each other, so all you needed to do was float the body as&nbsp;well!</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>+---------+</span><span> </span><span>+-----------------------------------+</span><span></span>
<span>| sidebar | | Hello</span><span>,</span><span> and welcome to my website! |</span>
<span>|         | |                                   |</span>
<span>+---------+</span><span> | Here's a longer paragraph to show |</span>
<span>            | that my galaxy brain CSS float    |</span>
<span>            | nonsense prevents text wrap</span><span>.</span><span>      |</span>
<span>            </span><span>+-----------------------------------+</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>This approach worked, but its limitations were much more obvious than those of tables.  If you added a footer, for example, then it would try to fit to the <em>right</em> of the body text — remember, all of that is “pull” floats, so as far as the browser is concerned, the “cursor” is still at the top.  So now you need to use <code>clear</code>, which bumps an element down below all floats, to fix that.  And if you made the sidebar 20% wide and the body 80% wide, then any margin between them would add to that 100%, making the page wider than the viewport, so now you have an ugly horizontal scrollbar, so you have to do some goofy math to fix that as well.  If you have borders or backgrounds on either part, then it was a little conspicuous that they were different heights, so now you have to do some <em>truly</em> grotesque stuff to fix <em>that</em>.  And the more conscientious authors noticed that screenreaders would read the entire sidebar before getting to the body text, which is a pretty rude thing to subject blind visitors to, so they came up with yet <em>more</em> elaborate setups to have a three-column layout with the middle column appearing first in the <span>HTML</span>.</p>
<p>The result was a design that looked nice and worked well and scaled correctly, but backed by a weird mess of <span>CSS</span>.  None of what you were <em>writing</em> actually corresponded to what you <em>wanted</em> — these are major parts of your design, not one-off pull quotes!  It was difficult to understand the relationship between the layout-related <span>CSS</span> and what appeared on the screen, and that would get much worse before it got&nbsp;better.</p>
<h3 id="thumbnail-grid-2"><a href="#thumbnail-grid-2">Thumbnail grid&nbsp;2</a></h3>
<p>Armed with a new toy, we can improve that thumbnail grid.  The original table-based layout was, even if you don’t care about tag semantics, incredibly tedious.  Now we can do&nbsp;better!</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;</span><span>ul</span> <span>class</span><span>=</span><span>"thumbnail-grid"</span><span>&gt;</span>
    <span>&lt;</span><span>li</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"..."</span><span>&gt;&lt;</span><span>br</span><span>&gt;</span>caption<span>&lt;/</span><span>li</span><span>&gt;</span>
    <span>&lt;</span><span>li</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"..."</span><span>&gt;&lt;</span><span>br</span><span>&gt;</span>caption<span>&lt;/</span><span>li</span><span>&gt;</span>
    <span>&lt;</span><span>li</span><span>&gt;&lt;</span><span>img</span> <span>src</span><span>=</span><span>"..."</span><span>&gt;&lt;</span><span>br</span><span>&gt;</span>caption<span>&lt;/</span><span>li</span><span>&gt;</span>
    ...
<span>&lt;/</span><span>ul</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>This is the dream of <span>CSS</span>: your <span>HTML</span> contains the page data in some sensible form, and then <span>CSS</span> describes how it actually&nbsp;looks.</p>
<p>Unfortunately, with <code>float</code> as the only tool available to us, the results are a bit rough.  This <a href="https://eev.ee/media/2020-02-css/thumbnail-grids.html#floats">new version</a> does adapt better to various screen sizes, but it requires some hacks: the cells have to be a fixed height, centering the whole grid is fairly complicated, and the grid effect falls apart entirely with wider elements.  It’s becoming clear that what we wanted is something more like a table, but with a flexible number of columns.  This is just faking&nbsp;it.</p>
<p>You also need this weird “clearfix” thing, an incantation that would become infamous during this era.  Remember that a float doesn’t move the “cursor” — a fake idea I’m using, but close enough.  That means that this <code>&lt;ul&gt;</code>, which is full <em>only</em> of floated elements, has no height at all.  It ends exactly where it begins, with all the floated thumbnails spilling out below it.  Worse, because any subsequent elements don’t have any floated <em>siblings</em>, they’ll ignore the thumbnails entirely and render normally from just below the empty “grid” — producing an overlapping&nbsp;mess!</p>
<p>The solution is to add a dummy element at the <em>end</em> of the list which takes up no space, but has the <span>CSS</span> <code>clear: both</code> — bumping it down below all floats.  That effectively pushes the bottom of the <code>&lt;ul&gt;</code> under all the individual thumbnails, so it fits snugly around&nbsp;them.</p>
<p>Browsers would later support the <code>::before</code> and <code>::after</code> <span>“</span>generated content” pseudo-elements, which let us avoid the dummy element entirely.  Stylesheets from the mid-00s were often littered with stuff like&nbsp;this:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>.</span><span>thumbnail-grid</span><span>::</span><span>after</span><span> </span><span>{</span><span></span>
<span>    </span><span>content</span><span>:</span><span> </span><span>''</span><span>;</span><span></span>
<span>    </span><span>display</span><span>:</span><span> </span><span>block</span><span>;</span><span></span>
<span>    </span><span>clear</span><span>:</span><span> </span><span>both</span><span>;</span><span></span>
<span>}</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>Still, it was better than&nbsp;tables.</p>
<h3 id="dhtml"><a href="#dhtml">DHTML</a></h3>
<p>As a quick aside into the world of JavaScript, the newfangled <code>position</code> property <em>did</em> give us the ability to do some layout things dynamically.  I heartily oppose such heresy, not least because no one has ever actually done it right, but it was nice for some&nbsp;toys.</p>
<p>Thus began the era of “dynamic <span>HTML</span>” — i.e., <span>HTML</span> affected by JavaScript, a term that has fallen entirely out of favor because we can’t even make a fucking static blog without JavaScript any more.  In the early days it was much more innocuous, with teenagers putting sparkles that trailed behind your mouse cursor or little analog clocks that ticked by in real&nbsp;time.</p>
<p>The most popular source of these things was <a href="http://www.dynamicdrive.com/">Dynamic Drive</a>, a site that miraculously still exists and probably has a bunch of toys not updated since the early&nbsp;00s.</p>
<p>But if you don’t like digging, here’s an example: every year (except this year when I forgot oops), I like to add confetti and other nonsense to my blog on my birthday.  I’m very lazy so I started this tradition by using <a href="http://www.schillmania.com/projects/snowstormv12_20041121a/script/snowstorm.js">this script I found somewhere</a>, originally intended for snowflakes.  It works by placing a bunch of images on the page, giving them <code>position: absolute</code>, and meticulously altering their coordinates over and&nbsp;over.</p>
<p>Contrast this with <a href="https://c.eev.ee/PARTYMODE/">the version I wrote from scratch a couple years ago</a>, which has only a <a href="https://c.eev.ee/PARTYMODE/partymode.js">tiny bit of <span>JS</span></a> to set up the images, then lets the browser animate them with <span>CSS</span>.  It’s slightly less featureful, but lets the browser do all the work, possibly even with hardware acceleration.  How far we’ve&nbsp;come.</p>
<h2 id="web-20"><a href="#web-20">Web&nbsp;2.0</a></h2>
<p>Dark times can’t last forever.  A combination of factors dragged us towards the&nbsp;light.</p>
<p>One of the biggest was <a href="https://www.mozilla.org/en-US/firefox/">Firefox</a> — or, if you were cool, originally Phoenix and then Firebird — which hit 1.0 in Nov ‘04 and went on to take a serious bite out of <span>IE</span>.  That rewritten Netscape 6 browser core, the heart of the Mozilla Suite, had been extracted into a standalone browser.  It was quick, it was simple, it was much more standard-compliant, and absolutely none of that&nbsp;mattered.</p>
<p>No, Firefox really got a foothold because it had <em>tabs</em>.  <span>IE</span> 6 did not have tabs; if you wanted to open a second webpage, you opened another window.  It fucking sucked, man.  Firefox was a&nbsp;miracle.</p>
<p>Firefox wasn’t the first tabbed browser, of course; the full Mozilla Suite’s browser had them, and the obscure (but scrappy!) Opera had had them for ages.  But it was Firefox that took off, for various reasons, not least of which was that it didn’t have a giant fucking ad bar at the top like Opera&nbsp;did.</p>
<p>Designers did push for Firefox on standards grounds, of course; it’s just that that angle primarily appealed to other designers, not so much to their parents.  One of the most popular and spectacular demonstrations was the <a href="https://en.wikipedia.org/wiki/Acid2">Acid2 test</a>, intended to test a variety of features of then-modern Web standards.  It had the advantage of producing a cute smiley face when rendered correctly, and a <a href="https://en.wikipedia.org/wiki/File:Ieacid2.png">fucking nightmare hellscape</a> in <span>IE</span> 6.  Early Firefox wasn’t perfect, but it was certainly much closer, and you could <em>see</em> it make progress until it fully passed with the release of Firefox&nbsp;3.</p>
<p>It also helped that Firefox had a faster JavaScript engine, even before <span>JIT</span> caught on.  Much, much faster.  Like, as I recall, <span>IE</span> 6 implemented <code>getElementById</code> by iterating over the entire document, even though IDs are unique.  Glance at some <a href="https://blog.jquery.com/2011/01/31/jquery-15-released/">old jQuery release announcements</a>; they usually have some performance charts, and everything else absolutely <em>dwarfs</em> <span>IE</span> 6 through&nbsp;8.</p>
<p>Oh, and there was that whole thing where <span>IE</span> 6 was a giant walking security hole, especially with its native support for arbitrary binary components that only needed a “yes” click on an arcane dialog to get full and unrestricted access to your system.  Probably didn’t help its&nbsp;reputation.</p>
<p>Anyway, with something other than <span>IE</span> taking over serious market share, even the most ornery designers couldn’t just target <span>IE</span> 6 and call it a day any more.  Now there was a <em>reason</em> to use strict mode, a reason to care about compatibility and standards — which Firefox was making a constant effort to follow better, while <span>IE</span> 6 remained&nbsp;stagnant.</p>
<p>(I’d argue that this effect opened the door for <span>OS</span> X to make some inroads, and also for the iPhone to exist at all.  I’m not kidding!  Think about it; if the iPhone browser hadn’t actually worked with anything because everyone was still targeting <span>IE</span> 6, it’d basically have been a more expensive Palm.  Remember, at first Apple didn’t even want native apps; it bet on the&nbsp;Web.)</p>
<p>(Speaking of which, Safari was released in Jan ‘03, based on a fork of the <span>KHTML</span> engine used in <span>KDE</span>’s Konqueror browser.  I think I was using <span>KDE</span> at the time, so this was very exciting, but no one else really cared about <span>OS</span> X and its 2% market&nbsp;share.)</p>
<p>Another major factor appeared on April Fools’ Day, 2004, when Google announced Gmail.  Ha, ha!  A funny joke.  Webmail that isn’t terrible?  That’s a good one,&nbsp;Google.</p>
<p>Oh.  Oh, fuck.  Oh they’re not kidding.  <em>How the fuck does this even&nbsp;work</em></p>
<p>The answer, as every web dev now knows, is XMLHttpRequest — named for the fact that nobody has ever once used it to request <span>XML</span>.  Apparently it was invented by Microsoft for use with Exchange, then cloned early on by Mozilla, but I’m just reading this from <a href="https://en.wikipedia.org/wiki/XMLHttpRequest">Wikipedia</a> and you can do that&nbsp;yourself.</p>
<p>The important thing is, it lets you make an <span>HTTP</span> request from JavaScript.  You could now update only <em>part</em> a page with new data, completely in the background, without reloading.  <em>Nobody</em> had heard of this thing before, so when Google dropped an entire email client based on it, it was like fucking&nbsp;magic.</p>
<p>Arguably the whole thing was a mistake and has led to a hell future where static pages load three paragraphs of text in the background using <span>XHR</span> for no goddamn reason, but that’s a <a href="https://eev.ee/blog/2016/03/06/maybe-we-could-tone-down-the-javascript/">different post</a>.</p>
<p>Along similar lines, August 2006 saw the release of <a href="https://jquery.com/">jQuery</a>, a similar miracle.  Not only did it paper over the differences between <span>IE</span>’s “JScript” APIs and the standard approaches taken by everyone else (which had been done before by other libraries), but it made it very easy to work with whole <em>groups</em> of elements at a time, something that had historically been a huge pain in the ass.  Now you could fairly easily apply <span>CSS</span> all over the place from JavaScript!  Which is a bad idea!  But everything was so bad that we did it&nbsp;anyway!</p>
<p>Hold on, I hear you cry.  These things are about JavaScript!  Isn’t this a post about <span>CSS</span>?</p>
<p>You’re absolutely right!  I mention the rise of JavaScript because I think it led directly to the modern state of <span>CSS</span>, thanks to an increase in one big&nbsp;factor:</p>
<h3 id="ambition"><a href="#ambition">Ambition</a></h3>
<p>Firefox showed us that we could have browsers that actually, like, <em>improve</em> — every new improvement on Acid2 was exciting.  Gmail showed us that the Web could do more than show plain text with snowflakes in&nbsp;front.</p>
<p>And folks started itching to get <em>fancy</em>.</p>
<p>The problem was, browsers hadn’t really gotten any better yet.  Firefox was faster in some respects, and it adhered more closely to the <span>CSS</span> spec, but it didn’t fundamentally do anything that browsers weren’t supposed to be able to do already.  Only the <em>tooling</em> had improved, and that mostly affected JavaScript.  <span>CSS</span> was a static language, so you couldn’t write a library to make it better.  Generating <span>CSS</span> with JavaScript was a possibility, but boy oh boy is that ever a bad&nbsp;idea.</p>
<p>Another problem was that <span>CSS</span> 2 was only really good at styling rectangles.  That was fine in the 90s, when every <span>OS</span> had the aesthetic of rectangles containing more rectangles.  But now we were in the days of Windows <span>XP</span> and <span>OS</span> X, where everything was shiny and glossy and made of curvy plastic.  It was a little embarrassing to have rounded corners and neatly shaded swooshes in your <em>file browser</em> and nowhere on the&nbsp;Web.</p>
<p>Thus began a new reign of&nbsp;darkness.</p>
<h3 id="the-era-of-css-hacks"><a href="#the-era-of-css-hacks">The era of CSS&nbsp;hacks</a></h3>
<p>Designers wanted a lot of things that <span>CSS</span> just could not&nbsp;offer.</p>
<ul>
<li>
<p>Round corners were a big one.  Square corners had fallen out of vogue, and now everyone wanted buttons with round corners, since they were The Future.  (Native buttons also went out of vogue, for some reason.)  Alas, <span>CSS</span> had no way to do this.  Your options&nbsp;were:</p>
<ol>
<li>
<p>Make a fixed-size background image of a rounded rectangle and put it on a fixed-size button.  Maybe drop the text altogether  and just make the whole thing an image.&nbsp;Eugh.</p>
</li>
<li>
<p>Make a <em>generic</em> background image and scale it to fit.  More clever, but the corners might end up not&nbsp;round.</p>
</li>
<li>
<p>Make the rounded rectangle, cut out the corner and edges, and put them in a 3×3 table with the button label in the middle.  Even better, use JavaScript to do this on the&nbsp;fly.</p>
</li>
<li>
<p>Fuck it, make your entire website one big Flash app&nbsp;lol</p>
</li>
</ol>
<p>Another problem was that <span>IE</span> 6 didn’t understand PNGs with 8-bit alpha; it could only correctly display PNGs with 1-bit alpha, i.e. every pixel is either fully opaque or fully transparent, like GIFs.  You had to settle for jagged edges, bake a solid background color into the image, or apply various fixes that centered around this fucking garbage&nbsp;nonsense:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>filter</span><span>:</span><span> </span><span>progid</span><span>:</span><span>DXImageTransform</span><span>.</span><span>Microsoft</span><span>.</span><span>AlphaImageLoader</span><span>(</span><span>src</span><span>=</span><span>'bite-my-ass.png'</span><span>);</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
</li>
<li>
<p>Along similar lines: gradients and drop shadows!  You can’t have fancy plastic buttons without those.  But here you were basically stuck with making images&nbsp;again.</p>
</li>
<li>
<p>Translucency was a bit of a mess.  Most browsers supported the <span>CSS</span> 3 <code>opacity</code> property since very early on…  except <span>IE</span>, which needed another wacky Microsoft-specific <code>filter</code> thing.  And if you wanted <em>only</em> the background translucent, you’d need a translucent <span>PNG</span>, which…  well, you&nbsp;know.</p>
</li>
<li>
<p>Since the beginning, jQuery shipped with built-in animated effects like <code>fadeIn</code>, and they started popping up all over the place.  It was kind of like the Web equivalent of how every Linux user in the mid-00s (and I include myself in this) used that fucking <a href="https://youtu.be/4QokOwvPxrE?t=118">Compiz cube effect</a>.</p>
<p>Obviously you need JavaScript to trigger an element’s disappearance in most interesting cases, but using it to control the actual animation was a bit heavy-handed and put a strain on browsers.  Tabbed browsing compounded this, since browsers were largely single-threaded, and for various reasons, every open page ran in the same&nbsp;thread.</p>
</li>
<li>
<p>Oh!  Alternating background colors on table rows.  This has since gone out of style, but I think that’s a shame, because <em>man</em> did it make tables easier to read.  But <span>CSS</span> had no answer for this, so you had to either give every other row a class like <code>&lt;tr class="odd"&gt;</code> (hope the table’s generated with code!) or do some jQuery&nbsp;nonsense.</p>
</li>
<li>
<p><span>CSS</span> 2 introduced the <code>&gt;</code> child selector, so you could write stuff like <code>ul.foo &gt; li</code> to style special lists without messing up nested lists, and <span>IE</span> 6!  Didn’t!  Fucking!  Support!&nbsp;It!</p>
</li>
</ul>
<p>All those are merely aesthetic concerns, though.  If you were interested in layout, well, the rise of Firefox had made your life at once much easier and much&nbsp;harder.</p>
<p>Remember <code>inline-block</code>?  Firefox 2 actually supported it!  It was buggy and hidden behind a vendor prefix, but it more or less worked, which let designers start playing with it.  And then Firefox 3 supported it more or less fully, which felt miraculous.  Version 3 of our <a href="https://eev.ee/media/2020-02-css/thumbnail-grids.html#inline-block">thumbnail grid</a> is as simple as a width and <code>inline-block</code>:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>.</span><span>thumbnails</span><span> </span><span>li</span><span> </span><span>{</span><span></span>
<span>    </span><span>display</span><span>:</span><span> </span><span>inline-block</span><span>;</span><span></span>
<span>    </span><span>width</span><span>:</span><span> </span><span>250</span><span>px</span><span>;</span><span></span>
<span>    </span><span>margin</span><span>:</span><span> </span><span>0.5</span><span>em</span><span>;</span><span></span>
<span>    </span><span>vertical-align</span><span>:</span><span> </span><span>top</span><span>;</span><span></span>
<span>}</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>The general idea of <code>inline-block</code> is that the <em>inside</em> acts like a block, but the block itself is placed in regular flowing text, like an image.  Each thumbnail is thus contained in a box, but the boxes all lie next to each other, and because of their equal widths, they flow into a grid.  And since it’s functionally a line of text, you don’t have to work around any weird impact on the rest of the page like you had to do with&nbsp;floats.</p>
<p>Sure, this had some drawbacks.  You couldn’t do anything with the leftover space, for example, so there was a risk of a big empty void on the right with pathological screen sizes.  You still had the problem of breaking the grid with a wide cell.  But at least it’s not&nbsp;floats.</p>
<p>One teeny problem: <span>IE</span> 6.  It did <em>technically</em> support <code>inline-block</code>, but only on elements that were naturally <code>inline</code> — ones like <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code>, not <code>&lt;li&gt;</code>.  So, not ones you’d actually want (or think) to use <code>inline-block</code> on.&nbsp;Sigh.</p>
<p>Lucky for us, at some point an absolute genius discovered <code>hasLayout</code>, an internal optimization in <span>IE</span> that marks whether an element…  uh…  has…  layout.  Look, I don’t know.  Basically it changes the rendering path for an element — making it <em>differently</em> buggy, like quirks mode on a per-element basis!  The upshot is that the above works in <span>IE</span> 6 if you add a couple&nbsp;lines:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>.</span><span>thumbnails</span><span> </span><span>li</span><span> </span><span>{</span><span></span>
<span>    </span><span>display</span><span>:</span><span> </span><span>inline-block</span><span>;</span><span></span>
<span>    </span><span>width</span><span>:</span><span> </span><span>250</span><span>px</span><span>;</span><span></span>
<span>    </span><span>margin</span><span>:</span><span> </span><span>0.5</span><span>em</span><span>;</span><span></span>
<span>    </span><span>vertical-align</span><span>:</span><span> </span><span>top</span><span>;</span><span></span>
<span>    </span><span>*</span><span>zoom</span><span>:</span><span> </span><span>1</span><span>;</span><span></span>
<span>    </span><span>*</span><span>display</span><span>:</span><span> </span><span>inline</span><span>;</span><span></span>
<span>}</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>The leading asterisks make the property invalid, so browsers should ignore the whole line…  but for some reason I cannot begin to fathom, <span>IE</span> 6 ignores the asterisks and accepts the rest of the rule.  (Almost any punctuation worked, including a hyphen or — my personal favorite — an underscore.)  The <code>zoom</code> property is a Microsoft extension that scales stuff, with the side effect that it grants the mystical property of “layout” to the element as well.  And <code>display: inline</code> <em>should</em> make each element spill its contents into one big line of text, but <span>IE</span> treats an <code>inline</code> element that has “layout” roughly like an <code>inline-block</code>.</p>
<p>And here we saw the true potential of <span>CSS</span> messes.  Browser-specific rules, with deliberate bad syntax that one browser would ignore, to replicate an effect that <em>still</em> isn’t clearly described by what you’re writing.  <a href="https://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/">Entire tutorials</a> written to explain how to accomplish something simple, like a <em>grid</em>, but have it actually work on most people’s browsers.  You’d also see <code>* html</code>, <code>html &gt; /**/ body</code>, and all kinds of other nonsense.  <a href="http://browserhacks.com/">Here’s a full list!</a>  And remember that “clearfix” hack from before?  The <a href="https://css-tricks.com/snippets/css/clear-fix/">full version</a>, compatible with <em>every</em> browser, is a bit&nbsp;worse:</p>
<table><tbody><tr><td><div><pre><span> 1</span>
<span> 2</span>
<span> 3</span>
<span> 4</span>
<span> 5</span>
<span> 6</span>
<span> 7</span>
<span> 8</span>
<span> 9</span>
<span>10</span>
<span>11</span>
<span>12</span>
<span>13</span></pre></div></td><td><div><pre><span></span><code><span>.</span><span>clearfix</span><span>:</span><span>after</span><span> </span><span>{</span><span></span>
<span>  </span><span>visibility</span><span>:</span><span> </span><span>hidden</span><span>;</span><span></span>
<span>  </span><span>display</span><span>:</span><span> </span><span>block</span><span>;</span><span></span>
<span>  </span><span>font-size</span><span>:</span><span> </span><span>0</span><span>;</span><span></span>
<span>  </span><span>content</span><span>:</span><span> </span><span>" "</span><span>;</span><span></span>
<span>  </span><span>clear</span><span>:</span><span> </span><span>both</span><span>;</span><span></span>
<span>  </span><span>height</span><span>:</span><span> </span><span>0</span><span>;</span><span></span>
<span>}</span><span></span>
<span>.</span><span>clearfix</span><span> </span><span>{</span><span> </span><span>display</span><span>:</span><span> </span><span>inline-block</span><span>;</span><span> </span><span>}</span><span></span>
<span>/* start commented backslash hack \*/</span><span></span>
<span>*</span><span> </span><span>html</span><span> </span><span>.</span><span>clearfix</span><span> </span><span>{</span><span> </span><span>height</span><span>:</span><span> </span><span>1</span><span>%</span><span>;</span><span> </span><span>}</span><span></span>
<span>.</span><span>clearfix</span><span> </span><span>{</span><span> </span><span>display</span><span>:</span><span> </span><span>block</span><span>;</span><span> </span><span>}</span><span></span>
<span>/* close commented backslash hack */</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>Is it any wonder folks started groaning about <span>CSS</span>?</p>
<p>This was an era of blind copy/pasting in the frustrated hopes of making the damn thing work.  Case in point: someone (I dug the original source up once but can’t find it now) had the bone-headed idea of always setting <code>body { font-size: 62.5% }</code> due to a combination of “relative units are good” and wanting to override the seemingly massive default browser font size of 16px (which, it turns out, <a href="https://www.smashingmagazine.com/2011/10/16-pixels-body-copy-anything-less-costly-mistake/">is correct</a>) and dealing with <span>IE</span> bugs.  He walked it back a short time later, but the damage had been done, and now <em>thousands</em> of websites start off that way as a “best practice”.  Which means if you want to change your browser’s default font size in either direction, you’re screwed — scale it down and a bunch of the Web becomes microscopic, scale it up and everything will still be much smaller than you’ve asked for, scale it up more to compensate and everything that actually respects your decision will be ginormous.  At least we have better page zoom now, I&nbsp;guess.</p>
<p>Oh, and do remember: Stack Overflow didn’t exist yet.  This stuff was passed around purely by word of mouth.  If you were lucky, you knew about some of the websites about websites, like <a href="https://www.quirksmode.org/">quirks mode</a> and <a href="https://meyerweb.com/">Eric Meyer’s website</a>.</p>
<p>In fact, check out Meyer’s <a href="https://meyerweb.com/eric/css/edge/index.html">css/edge</a> site for some wild examples of stuff folks were doing, even with just <span>CSS</span> 1, as far back as 2002.  I still think <a href="https://meyerweb.com/eric/css/edge/complexspiral/demo.html">complexspiral</a> is pure genius, even though you could do it nowadays with <code>opacity</code> and just one image.  The approach in <a href="https://meyerweb.com/eric/css/edge/raggedfloat/demo.html">raggedfloat</a> wouldn’t get native support in <span>CSS</span> until a few years ago, with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside"><code>shape-outside</code></a>!  He also brought us <a href="https://meyerweb.com/eric/tools/css/reset/"><span>CSS</span> reset</a>, eliminating differences between browsers’ default&nbsp;styles.</p>
<p>(I cannot understate how much of a <span>CSS</span> <em>pioneer</em> Eric Meyer is.  When his young daughter Rebecca died six years ago, she was uniquely immortalized with her own <span>CSS</span> color name, <a href="https://meyerweb.com/eric/thoughts/2014/06/19/rebeccapurple/"><code>rebeccapurple</code></a>.  That’s how highly the Web community thinks of him.  Also I have to go cry a bit over that story&nbsp;now.)</p>
<h2 id="the-future-arrives-gradually"><a href="#the-future-arrives-gradually">The future arrives,&nbsp;gradually</a></h2>
<p>Designers and developers were pushing the bounds of what browsers were capable of.  Browsers were handling it all somewhat poorly.  All the fixes and workarounds and libraries were arcane, brittle, error-prone, and/or&nbsp;heavy.</p>
<p>Clearly, browsers needed some new functionality.  But just slopping something in wouldn’t help; Microsoft had done plenty of that, and it had mostly made a&nbsp;mess.</p>
<p>Several struggling attempts began.  With the <span>W3C</span>’s head still squarely up its own ass — even explicitly rejecting proposed enhancements to <span>HTML</span>, in favor of snorting <span>XML</span> — some folks from (active) browser vendors Apple, Mozilla, and Opera decided to make their own clubhouse.  <span>WHATWG</span> came into existence in June 2004, and they began work on <span>HTML5</span>.  (It would end up defining error-handling very explicitly, which completely obviated the need for <span>XHTML</span> and eliminated a number of security concerns when working with arbitrary <span>HTML</span>.  Also it gave us some new goodies, like native audio, video, and form controls for dates and colors and other stuff that had been clumsily handled by JavaScript-powered custom controls.  And, um, still often&nbsp;are.)</p>
<p>Then there was <span>CSS</span> 3.  I’m not sure when it started to exist.  It emerged slowly, struggling, like a chick hatching from an egg and taking its damn sweet fucking time to actually get implemented&nbsp;anywhere.</p>
<p>I’m having to do a lot of educated guessing here, but I <em>think</em> it began with <code>border-radius</code>.  Specifically, with <code>-moz-border-radius</code>.  I don’t know when it was first introduced, but the Mozilla bug tracker has mentions of it as far back as&nbsp;1999.</p>
<p>See, Firefox’s own <span>UI</span> is rendered <em>with <span>CSS</span></em>.  If Mozilla wanted to do something that couldn’t be done with <span>CSS</span>, they added a property of their own, prefixed with <code>-moz-</code> to indicate it was their own invention.  And when there’s no real harm in doing so, they leave the property accessible to websites as&nbsp;well.</p>
<p>My guess, then, is that the push for <span>CSS</span> 3 really began when Firefox took off and designers discovered <code>-moz-border-radius</code>.  Suddenly, built-in rounded corners were available!  No more fucking around in Photoshop; you only needed to write a single line!  Practically overnight, everything everywhere had its corners filed&nbsp;down.</p>
<p>And from there, things snowballed.  Common problems were addressed one at a time by new <span>CSS</span> features, which were clustered together into a new <span>CSS</span> version: <span>CSS</span> 3.  The big ones were solutions to the design problems mentioned&nbsp;before:</p>
<ul>
<li>Rounded corners, provided by <code>border-radius</code>.</li>
<li>Gradients, provided by <code>linear-gradient()</code> and&nbsp;friends.</li>
<li>Multiple backgrounds, which weren’t exactly a pressing concern, but which turned out to make some other stuff&nbsp;easier.</li>
<li>Translucency, provided by <code>opacity</code> and colors with an alpha&nbsp;channel.</li>
<li>Box&nbsp;shadows.</li>
<li>Text shadows, which had been in <span>CSS</span> 2 but dropped in 2.1 and never implemented&nbsp;anyway.</li>
<li>Border images, so you could do even fancier things than mere rounded&nbsp;borders.</li>
<li>Transitions and animations, now doable with ease without needing jQuery (or any <span>JS</span> at&nbsp;all).</li>
<li><code>:nth-child()</code>, which solved the alternating rows problem with pure <span>CSS</span>.</li>
<li>Transformations.  Wait, what?  This kinda leaked in from <span>SVG</span>, which browsers were also being expected to implement, and which is built heavily around transforms.  The code was already there, so, hey, now we can rotate stuff with <span>CSS</span>!  Couldn’t do <em>that</em> before.&nbsp;Cool.</li>
<li>Web fonts, which had been in <span>CSS</span> for some time but only ever implemented in <span>IE</span> and only with some goofy <span>DRM</span>-laden font format.  Now we weren’t limited to the four bad fonts that ship with Windows and that no one else&nbsp;has!</li>
</ul>
<p>These were pretty great!  They didn’t solve any layout problems, but they <em>did</em> address aesthetic issues that designers had been clumsily working around by using loads of images and/or JavaScript.  That meant less stuff to download and more text used instead of images, both of which were pretty good for the&nbsp;Web.</p>
<p>The grand irony is that all the stuff you could do with these features went out of style almost immediately, and now we’re back to flat rectangles&nbsp;again.</p>
<h3 id="browser-prefixing-hell"><a href="#browser-prefixing-hell">Browser prefixing&nbsp;hell</a></h3>
<p>Alas!  All was still not right with the&nbsp;world.</p>
<p>Several of these new gizmos were, I believe, initially developed by browser vendors and prefixed.  Some later ones were designed by the <span>CSS</span> committee but implemented by browsers while the design was still in flux, and thus also&nbsp;prefixed.</p>
<p>So began <em>prefix hell</em>, which continues to this&nbsp;day.</p>
<p>Mozilla had <code>-moz-border-radius</code>, so when Safari implemented it, it was named <code>-webkit-border-radius</code> (“WebKit” being the name of Apple’s <span>KHTML</span> fork).  Then the <span>CSS</span> 3 spec standardized it and called it just <code>border-radius</code>.  That meant that if you wanted to use rounded borders, you actually needed to give <em>three</em>&nbsp;rules:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>element</span><span> </span><span>{</span><span></span>
<span>    </span><span>-moz-</span><span>border-radius</span><span>:</span><span> </span><span>1</span><span>em</span><span>;</span><span></span>
<span>    </span><span>-webkit-</span><span>border-radius</span><span>:</span><span> </span><span>1</span><span>em</span><span>;</span><span></span>
<span>    </span><span>border-radius</span><span>:</span><span> </span><span>1</span><span>em</span><span>;</span><span></span>
<span>}</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>The first two made the effect actually work in current browsers, and the last one was future-proofing: when browsers implemented the real rule and dropped the prefixed ones, it would take&nbsp;over.</p>
<p>You had to do this <em>every fucking time</em>, since <span>CSS</span> isn’t a programming language and has no macros or functions or the like.  Sometimes Opera and <span>IE</span> would have their own implementations with <code>-o-</code> and <code>-ms-</code> prefixes, bringing the total to five copies.  It got much worse with gradients; the syntax went through a number of major incompatible revisions, so you couldn’t even rely on copy/pasting and changing the property&nbsp;name!</p>
<p>And plenty of folks, well, fucked it up.  I can’t blame them too much; I mean, this sucks.  But enough pages used <em>only</em> the prefixed forms, and not the final form, that browsers had to keep supporting the prefixed form for longer than they would’ve liked to avoid breaking stuff.  And if the prefixed form still works and it’s what you’re used to writing, then maybe you still won’t bother with the unprefixed&nbsp;one.</p>
<p>Worse, <em>some</em> people would <em>only</em> use the form that worked in their pet choice of browser.  This got especially bad with the rise of mobile web browsers.  The built-in browsers on iOS and Android are Safari (WebKit) and Chrome (originally WebKit, now a fork), so you only “needed” to use the <code>-webkit-</code> properties.  Which made things difficult for Mozilla when it released <a href="https://www.mozilla.org/en-US/firefox/mobile/">Firefox for Android</a>.</p>
<p>Hey, remember that whole debacle with <span>IE</span> 6?  Here we are again!  It was bad enough that Mozilla eventually decided to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/WebKit_Extensions#Supported_in_Firefox_with_-webkit-_prefix">implement</a> a number of <code>-webkit-</code> properties, which remain supported even in desktop Firefox to this day.  The situation is goofy enough that Firefox now supports some effects <em>only</em> via these properties, like <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke"><code>-webkit-text-stroke</code></a>, which isn’t being&nbsp;standardized.</p>
<p>Even better, Chrome’s current forked engine is called Blink, so <em>technically</em> it shouldn’t be using <code>-webkit-</code> properties either.  And yet, here we are.  At least it’s not as bad as the <a href="https://webaim.org/blog/user-agent-string-history/">user agent string mess</a>.</p>
<p>Browser vendors have pretty much abandoned prefixing, now; instead they hide experimental features behind flags (so they’ll only work on the developer’s machine), and new features are theoretically designed to be smaller and easier to&nbsp;stabilize.</p>
<p>This mess was probably a huge motivating factor for the development of <a href="https://sass-lang.com/">Sass</a> and <a href="http://lesscss.org/"><span>LESS</span></a>, two languages that produce <span>CSS</span>.  Or…  two <span>CSS</span> preprocessors, maybe.  They have very similar goals: both add variables, functions, and some form of macros to <span>CSS</span>, allowing you to eliminate a lot of the repetition and browser hacks and other nonsense from your stylesheets.  Hell, this blog <a href="https://github.com/eevee/eev.ee/tree/988fc2b4547ee41388f29c4bad622c492c4c6f77/theme/static/sass">still uses <span>SCSS</span></a>, though its use has gradually decreased over&nbsp;time.</p>
<h3 id="flexbox"><a href="#flexbox">Flexbox</a></h3>
<p>But then, like an angel descending from heaven…  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout">flexbox</a>.</p>
<p>Flexbox has been around for a <em>long</em> time — <a href="https://www.caniuse.com/#feat=flexbox">allegedly</a> it had partial support in Firefox 2, back in 2006!  It went through several incompatible revisions and took ages to stabilize.  Then <span>IE</span> took ages to implement it, and you don’t really want to rely on layout tools that only work for half your audience.  It’s only relatively recently (2015?  Later?) that flexbox has had sufficiently broad support to use safely.  And I could swear I still run into folks whose current Safari doesn’t recognize it at all without prefixing, even though Safari supposedly dropped the prefixes five years&nbsp;ago…</p>
<p>Anyway, flexbox is a <span>CSS</span> implementation of a pretty common <span>GUI</span> layout tool: you have a parent with some children, and the parent has some amount of space available, and it gets divided automatically between the children.  You know, it <em>puts things next to each other</em>.</p>
<p>The general idea is that the browser computes how much space the parent has available and the “initial size” of each child, figures out how much extra space there is, and distributes it according to the flexibleness of each child.  Think of a toolbar: you might want each button to have a fixed size (a flex of 0), but want to add spacers that share any leftover space equally, so you’d give them a flex of&nbsp;1.</p>
<p>Once that’s done, you have a number of quality-of-life options at your disposal, too: you can distribute the extra space <em>between</em> the children instead, you can tell the children to stretch to the same height or align them in various ways, and you can even have them wrap into multiple rows if they won’t all&nbsp;fit!</p>
<p>With this, we can take yet another crack at that <a href="https://eev.ee/media/2020-02-css/thumbnail-grids.html#flexbox">thumbnail grid</a>:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>.</span><span>thumbnail-grid</span><span> </span><span>{</span><span></span>
<span>    </span><span>display</span><span>:</span><span> </span><span>flex</span><span>;</span><span></span>
<span>    </span><span>flex-wrap</span><span>:</span><span> </span><span>wrap</span><span>;</span><span></span>
<span>}</span><span></span>
<span>.</span><span>thumbnail-grid</span><span> </span><span>li</span><span> </span><span>{</span><span></span>
<span>    </span><span>flex</span><span>:</span><span> </span><span>1</span><span> </span><span>0</span><span> </span><span>250</span><span>px</span><span>;</span><span></span>
<span>}</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>This is miraculous.  I forgot all about <code>inline-block</code> overnight and mostly salivated over this until it was universally supported.  It even expresses very clearly what I&nbsp;want.</p>
<p>…almost.  It still has the problem that too-wide cells will break the grid, since it’s <em>still</em> a horizontal row wrapped onto several independent lines.  It’s pretty damn cool, though, and solves a number of other layout problems.  Surely this is good enough.&nbsp;Unless…?</p>
<p>I’d say mass adoption of flexbox marked the beginning of the modern era of <span>CSS</span>.  But there was one lingering&nbsp;problem…</p>
<h3 id="the-slow-agonizing-death-of-ie"><a href="#the-slow-agonizing-death-of-ie">The slow, agonizing death of&nbsp;IE</a></h3>
<p><span>IE</span> 6 took a long, long, <em>long</em> time to go away.  It didn’t drop below 10% market share (still a huge chunk) until early 2010 or&nbsp;so.</p>
<p>Firefox hit 1.0 at the end of 2004.  <span>IE</span> 7 wasn’t released until two years later, it offered only modest improvements, it suffered from compatibility problems with stuff built for <span>IE</span> 6, and the <span>IE</span> 6 holdouts (many of whom were not Computer People) generally saw no reason to upgrade.  Vista shipped with <span>IE</span> 7, but Vista was kind of a flop — I don’t believe it ever came close to overtaking <span>XP</span>, not in its entire&nbsp;lifetime.</p>
<p>Other factors included corporate <span>IT</span> policies, which often take the form of “never upgrade anything ever” — and often for good reason, as I heard endless tales of internal apps that only worked in <span>IE</span> 6 for all manner of horrifying reasons.  Then there was the <em>entirety of South Korea</em>, which was <em>legally required</em> to use <span>IE</span> 6 because they’d enshrined in law some <a href="https://www.washingtonpost.com/world/asia_pacific/due-to-security-law-south-korea-is-stuck-with-internet-explorer-for-online-shopping/2013/11/03/ffd2528a-3eff-11e3-b028-de922d7a3f47_story.html">security requirements</a> that could only be implemented with an <span>IE</span> 6 ActiveX&nbsp;control.</p>
<p>So if you maintained a website that was used — or worse, <em>required</em> — by people who worked for businesses or lived in other countries, you were pretty much stuck supporting <span>IE</span> 6.  Folks making little personal tools and websites abandoned <span>IE</span> 6 compatibility early on and plastered their sites with increasingly obnoxious banners taunting anyone who dared show up using it…  but if you were someone’s boss, why would you tell them it’s okay to drop 20% of your potential audience?  Just work&nbsp;harder!</p>
<p>The tension grew over the years, as <span>CSS</span> became more capable and <span>IE</span> 6 remained an anchor.  It still didn’t even understand <em><span>PNG</span> alpha</em> without workarounds, and meanwhile we were starting to get more critical features like native video in <span>HTML5</span>.  The workarounds grew messier, and the list of features you basically just couldn’t use grew longer.  (I’d show you what my blog looks like in <span>IE</span> 6, but I don’t think it can even connect — the <span>TLS</span> stuff it supports is so ancient and broken that it’s been disabled on most&nbsp;servers!)</p>
<p>Shoutouts, by the way, to some folks on the YouTube team, who in July 2009 <a href="https://www.theverge.com/2019/5/4/18529381/google-youtube-internet-explorer-6-kill-plot-engineer">added a warning banner</a> imploring <span>IE</span> 6 users to switch to <em>anything</em> else — without asking anyone for approval.  “Within one month…  over 10 percent of global <span>IE6</span> traffic had dropped off.”  Not all heroes wear&nbsp;capes.</p>
<p>I’d mark the beginning of the end as the day YouTube <em>actually</em> dropped <span>IE</span> 6 support — March 13, 2010, almost nine years after its release.  I don’t know how much of a <em>direct</em> impact YouTube has on corporate users or the South Korean government, but a massive web company dropping an entire browser sends a pretty strong&nbsp;message.</p>
<p>There were other versions of <span>IE</span>, of course, and many of them were messy headaches in their own right.  But each subsequent one became less of a pain, and nowadays you don’t even have to think too much about testing in <span>IE</span> (now Edge).  Just in time for Microsoft to scrap their own rendering engine and turn their browser into a Chrome&nbsp;clone.</p>
<h2 id="now"><a href="#now">Now</a></h2>
<p><span>CSS</span> is pretty great now.  You don’t need weird fucking hacks just to put things next to each other.  Browser dev tools are built in, now, and are fucking amazing — Firefox has started specifically warning you when some <span>CSS</span> properties won’t take effect because of the values of others!  Obscure implicit side effects like “stacking contexts” (whatever those are) can now be set explicitly, with properties like <code>isolation: isolate</code>.</p>
<p>In fact, let me just list everything that I can think of that you can do in <span>CSS</span> now.  This isn’t a guide to all possible uses of styling, but if your <span>CSS</span> knowledge hasn’t been updated since 2008, I hope this whets your appetite.  And this stuff is just <span>CSS</span>!  So many things that used to be impossible or painful or require clumsy plugins are now natively supported — audio, video, custom drawing, 3D rendering…  not to mention the vast ergonomic improvements to&nbsp;JavaScript.</p>
<h3 id="layout"><a href="#layout">Layout</a></h3>
<p>A <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout">grid</a> container can do pretty much anything tables can do, and more, including automatically determining how many columns will fit.  It’s fucking amazing.  More on that&nbsp;below.</p>
<p>A <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout">flexbox</a> container lays out its children in a row or column, allowing each child to declare its “default” size and what proportion of leftover space it wants to consume.  Flexboxes can wrap, rearrange children without changing source order, and align children in a number of&nbsp;ways.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Columns">Columns</a> will pour text into, well, multiple&nbsp;columns.</p>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing"><code>box-sizing</code></a> property lets you opt into the <span>IE</span> box model on a per-element basis, for when you need an entire element to take up a fixed amount of space and need padding/borders to <em>subtract</em> from&nbsp;that.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display: contents</code></a> dumps an element’s contents out into its parent, as if it weren’t there at all.  <code>display: flow-root</code> is basically an automatic clearfix, only a decade too&nbsp;late.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/width"><code>width</code></a> can now be set to <code>min-content</code>, <code>max-content</code>, or the <code>fit-content()</code> function for more flexible&nbsp;behavior.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/white-space"><code>white-space: pre-wrap</code></a> preserves whitespace, but breaks lines where necessary to avoid overflow.  Also useful is <code>pre-line</code>, which collapses sequences of spaces down to a single space, but preserves literal&nbsp;newlines.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow"><code>text-overflow</code></a> cuts off overflowing text with an ellipsis (or custom character) when it would overflow, rather than simply truncating it.  Also specced is the ability to fade out the text, but this is as yet&nbsp;unimplemented.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside"><code>shape-outside</code></a> alters the shape used when wrapping text around a float.  It can even use the alpha channel of an image as the&nbsp;shape.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/resize"><code>resize</code></a> gives an arbitrary element a resize handle (as long as it has <code>overflow</code>).</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode"><code>writing-mode</code></a> sets the direction that text flows.  If your design needs to work for multiple writing modes, a number of <span>CSS</span> properties that mention left/right/top/bottom have alternatives that describe directions in terms of the writing mode: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block"><code>inset-block</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline"><code>inset-inline</code></a> for position, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/block-size"><code>block-size</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size"><code>inline-size</code></a> for width/height, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-block"><code>border-block</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline"><code>border-inline</code></a> for borders, and similar for padding and&nbsp;margins.</p>
<h3 id="aesthetics"><a href="#aesthetics">Aesthetics</a></h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions">Transitions</a> smoothly interpolate a value whenever it changes, whether due to an effect like <code>:hover</code> or e.g. a class being added from JavaScript.  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations">Animations</a> are similar, but play a predefined animation automatically.  Both can use a number of different <a href="https://easings.net/en">easing functions</a>.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius"><code>border-radius</code></a> rounds off the corners of a box.  The corners can all be different sizes, and can be circular or elliptical.  The curve also applies to the border, background, and any box&nbsp;shadows.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow">Box shadows</a> can be used for the obvious effect of casting a drop shadow.  You can also use multiple shadows and <code>inset</code> shadows for a variety of clever&nbsp;effects.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow"><code>text-shadow</code></a> does what it says on the tin, though you can also stack several of them for a rough approximation of a text&nbsp;outline.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform"><code>transform</code></a> lets you apply an arbitrary matrix transformation to an element — that is, you can scale, rotate, skew, translate, and/or do perspective transform, all without affecting&nbsp;layout.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter"><code>filter</code></a> (distinct from the <span>IE</span> 6 one) offers a handful of specific visual filters you can apply to an element.  Most of them affect color, but there’s also a <code>blur()</code> and a <code>drop-shadow()</code> (which, unlike <code>box-shadow</code>, applies to an element’s appearance rather than its containing&nbsp;box).</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient"><code>linear-gradient()</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient"><code>radial-gradient()</code></a>, the new and less-supported <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/conic-gradient"><code>conic-gradient()</code></a>, and their <code>repeating-*</code> variants all produce gradient images and can be used anywhere in <span>CSS</span> that an image is expected, most commonly as a <code>background-image</code>.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-color"><code>scrollbar-color</code></a> changes the scrollbar color, with the downside of reducing the scrollbar to a very simple thumb-and-track in current&nbsp;browsers.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-size"><code>background-size: cover</code> and <code>contain</code></a> will scale a background image proportionally, either big enough to completely cover the element (even if cropped) or small enough to exactly fit inside it (even if it doesn’t cover the entire&nbsp;background).</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit"><code>object-fit</code></a> is a similar idea but for non-background media, like <code>&lt;img&gt;</code>s.  The related <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/object-position"><code>object-position</code></a> is like <code>background-position</code>.</p>
<p>Multiple backgrounds are possible, which is especially useful with gradients — you can stack multiple gradients, other background images, and a solid color on the&nbsp;bottom.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration"><code>text-decoration</code></a> is fancier than it used to be; you can now set the color of the line and use several different kinds of lines, including dashed, dotted, and&nbsp;wavy.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters"><span>CSS</span> counters</a> can be used to number arbitrary elements in an arbitrary way, exposing the counting ability of <code>&lt;ol&gt;</code> to any set of elements you&nbsp;want.  </p>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::marker"><code>::marker</code></a> pseudo-element allows you to style a list item’s marker box, or even replace it outright with a custom counter.  Browser support is spotty, but improving.  Similarly, the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style"><code>@counter-style</code></a> at-rule implements an entirely new counter style (like 1 2 3, i ii iii, A B C, etc.) which you can then use anywhere, though only Firefox supports it so&nbsp;far.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/image-set"><code>image-set()</code></a> provides a list of candidate images and lets the browser choose the most appropriate one based on the pixel density of the user’s&nbsp;screen.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"><code>@font-face</code></a> defines a font that can be downloaded, though you can avoid figuring out how to use it correctly by using <a href="https://developers.google.com/fonts/">Google Fonts</a>.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events"><code>pointer-events: none</code></a> makes an element ignore the mouse entirely; it can’t be hovered, and clicks will go straight through it to the element&nbsp;below.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering"><code>image-rendering</code></a> can force an image to be resized nearest-neighbor rather than interpolated, though browser support is still spotty and you may need to also include some vendor-specific&nbsp;properties.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path"><code>clip-path</code></a> crops an element to an arbitrary shape.  There’s also <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask"><code>mask</code></a> for arbitrary alpha masking, but browser support is spotty and hoo boy is this one&nbsp;complicated.</p>
<h3 id="syntax-and-misc"><a href="#syntax-and-misc">Syntax and&nbsp;misc</a></h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports"><code>@supports</code></a> lets you explicitly write different <span>CSS</span> depending on what the browser supports, though it’s nowhere near as useful nowadays as it would’ve been in&nbsp;2004.</p>
<p><code>A &gt; B</code> selects immediate children.  <code>A ~ B</code> selects siblings.  <code>A + B</code> selects immediate (element) siblings.  Square brackets can do a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors">bunch of stuff</a> to select based on attributes; most obvious is <code>input[type=checkbox]</code>, though you can also do interesting things with matching parts of <code>&lt;a href&gt;</code>.</p>
<p>There are a whole bunch of pseudo-classes now.  Many of them are for form elements: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:enabled"><code>:enabled</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:disabled"><code>:disabled</code></a>; <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:checked"><code>:checked</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate"><code>:indeterminate</code></a> (also apply to radio and <code>&lt;option&gt;</code>); <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:required"><code>:required</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:optional"><code>:optional</code></a>; <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:read-write"><code>:read-write</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:read-only"><code>:read-only</code></a>; <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:in-range"><code>:in-range</code></a>/<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range"><code>:out-of-range</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:valid"><code>:valid</code></a>/<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid"><code>:invalid</code></a> (for use with <span>HTML5</span> client-side form validation); <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:focus"><code>:focus</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within"><code>:focus-within</code></a>; and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:default"><code>:default</code></a> (which selects the default form button and any pre-selected checkboxes, radio buttons, and <code>&lt;option&gt;</code>s).</p>
<p>For targeting specific elements within a set of siblings, we have: <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:first-child"><code>:first-child</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:last-child"><code>:last-child</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:only-child"><code>:only-child</code></a>; <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:first-of-type"><code>:first-of-type</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:last-of-type"><code>:last-of-type</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:only-of-type"><code>:only-of-type</code></a> (where “type” means tag name); and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child"><code>:nth-child()</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-child"><code>:nth-last-child()</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-of-type"><code>:nth-of-type()</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-of-type"><code>:nth-last-of-type()</code></a> (to select every second, third, etc.&nbsp;element).</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:not"><code>:not()</code></a> inverts a selector.  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:empty"><code>:empty</code></a> selects elements with no children and no text.  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:target"><code>:target</code></a> selects the element jumped to with a <span>URL</span> fragment (e.g. if the address bar shows <code>index.html#foo</code>, this selects the element whose <span>ID</span> is <code>foo</code>).</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::before"><code>::before</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::after"><code>::after</code></a> should have two colons now, to indicate that they create pseudo-elements rather than merely scoping the selector they’re attached to.  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::selection"><code>::selection</code></a> customizes how selected text appears; <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder"><code>::placeholder</code></a> customizes how placeholder text (in text fields)&nbsp;appears.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media">Media queries</a> do just a whole bunch of stuff so your page can adapt based on how it’s being viewed.  The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"><code>prefers-color-scheme</code></a> media query tells you if the user’s system is set to a light or dark theme, so you can adjust accordingly without having to&nbsp;ask.</p>
<p>You can write translucent <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value">colors</a> as <code>#rrggbbaa</code> or <code>#rgba</code>, as well as using the <code>rgba()</code> and <code>hsla()</code> functions.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/angle">Angles</a> can be described as fractions of a full circle with the <code>turn</code> unit.  Of course, <code>deg</code> and <code>rad</code> (and <code>grad</code>) are also&nbsp;available.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"><span>CSS</span> variables</a> (officially, “custom properties”) let you specify arbitrary named values that can be used anywhere a value would appear.  You can use this to reduce the amount of <span>CSS</span> fiddling needs doing in JavaScript (e.g., recolor a complex part of a page by setting a <span>CSS</span> variable instead of manually adjusting a number of properties), or have a generic component that reacts to variables set by an&nbsp;ancestor.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc"><code>calc()</code></a> computes an arbitrary expression and updates automatically (though it’s somewhat obviated by <code>box-sizing</code>).</p>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length"><code>vw</code>, <code>vh</code>, <code>vmin</code>, and <code>vmax</code> units</a> let you specify lengths as a fraction of the viewport’s width or height, or whichever of the two is&nbsp;bigger/smaller.</p>
<hr>
<p>Phew!  I’m sure I’m forgetting plenty and folks will have even longer lists of interesting tidbits in the comments.  Thanks for saving me some effort!  Now I can stop browsing <span>MDN</span> and do this final fun&nbsp;part.</p>
<h3 id="state-of-the-art-thumbnail-grid"><a href="#state-of-the-art-thumbnail-grid">State of the art thumbnail&nbsp;grid</a></h3>
<p>At long last, we arrive at the final and objectively correct way to construct a thumbnail grid: using <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"><span>CSS</span> grid</a>.  You can tell this is the right thing to use because it has “grid” in the name.  Modern <span>CSS</span> features are pretty great about letting you say the thing you want and having it happen, rather than trying to coax it into happening implicitly via&nbsp;voodoo.</p>
<p>And it is oh so&nbsp;simple:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>.</span><span>thumbnail-grid</span><span> </span><span>{</span><span></span>
<span>    </span><span>display</span><span>:</span><span> </span><span>grid</span><span>;</span><span></span>
<span>    </span><span>grid</span><span>:</span><span> </span><span>auto</span><span>-</span><span>flow</span><span> </span><span>/</span><span> </span><span>repeat</span><span>(</span><span>auto</span><span>-fit</span><span>,</span><span> </span><span>minmax</span><span>(</span><span>250</span><span>px</span><span>,</span><span> </span><span>1</span><span>fr</span><span>));</span><span></span>
<span>}</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>Done!  That <a href="https://eev.ee/media/2020-02-css/thumbnail-grids.html#grid">gives you a grid</a>.  You have myriad other twiddles to play with, just as with flexbox, but that’s the basic idea.  You don’t even need to style the elements themselves; most of the layout work is done in the&nbsp;container.</p>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid"><code>grid</code> shorthand property</a> looks a little intimidating, but only because it’s so flexible.  It’s saying: fill the grid one row at a time, generating as many rows as necessary; make as many 250px columns as will fit, and share any leftover space between them&nbsp;equally.</p>
<p><span>CSS</span> grids are also handy for laying out <code>&lt;dl&gt;</code>s, something that’s historically been a massive pain to make work — a <code>&lt;dl&gt;</code> contains any number of <code>&lt;dt&gt;</code>s followed by any number of <code>&lt;dd&gt;</code>s (including zero), and the only way to style this until grid was to float the <code>&lt;dt&gt;</code>s, which meant they had to have a fixed width.  Now you can just tell the <code>&lt;dt&gt;</code>s to go in the first column and <code>&lt;dd&gt;</code>s to go in the second, and grid will take care of the&nbsp;rest.</p>
<p>And laying out your page?  That whole sidebar thing?  Check out how easy that&nbsp;is:</p>
<table><tbody><tr><td><div><pre><span> 1</span>
<span> 2</span>
<span> 3</span>
<span> 4</span>
<span> 5</span>
<span> 6</span>
<span> 7</span>
<span> 8</span>
<span> 9</span>
<span>10</span>
<span>11</span>
<span>12</span>
<span>13</span>
<span>14</span>
<span>15</span>
<span>16</span></pre></div></td><td><div><pre><span></span><code><span>body</span><span> </span><span>{</span><span></span>
<span>    </span><span>display</span><span>:</span><span> </span><span>grid</span><span>;</span><span></span>
<span>    </span><span>grid-template</span><span>:</span><span></span>
<span>        </span><span>"header         header          header"</span><span></span>
<span>        </span><span>"left-sidebar   main-content    right-sidebar"</span><span></span>
<span>        </span><span>"footer         footer          footer"</span><span></span>
<span>        </span><span>/</span><span> </span><span>1</span><span>fr</span><span>           </span><span>6</span><span>fr</span><span>             </span><span>1</span><span>fr</span><span></span>
<span>    </span><span>;</span><span></span>
<span>}</span><span></span>
<span>body</span><span> </span><span>&gt;</span><span> </span><span>header</span><span> </span><span>{</span><span></span>
<span>    </span><span>grid-area</span><span>:</span><span> </span><span>header</span><span>;</span><span></span>
<span>}</span><span></span>
<span>#</span><span>left-sidebar</span><span> </span><span>{</span><span></span>
<span>    </span><span>grid-area</span><span>:</span><span> </span><span>left</span><span>-</span><span>sidebar</span><span>;</span><span></span>
<span>}</span><span></span>
<span>/* ... etc ... */</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>Done.  Easy.  It doesn’t matter what order the parts appear in the markup,&nbsp;either.</p>
<h3 id="on-the-other-hand"><a href="#on-the-other-hand">On the other&nbsp;hand</a></h3>
<p>The web is still a <em>little bit</em> of a disaster.  A lot of folks don’t even know that flexbox and grid are supported <a href="https://www.caniuse.com/#feat=css-grid">almost universally</a> now; but given how long it took to get from early spec work to broad implementation, I can’t really blame them.  I saw a brand new little site just yesterday that consisted mostly of a huge list of “thumbnails” of various widths, and it used floats!  Not even <code>inline-block</code>!  I don’t know how we managed to teach everyone about all the hacks required to make that work, but somehow haven’t gotten the word out about&nbsp;flexbox.</p>
<p>But far worse than that: I still regularly encounter sites that do their entire page layout with <em>JavaScript</em>.  If you use <a href="https://addons.mozilla.org/en-US/firefox/addon/umatrix/">uMatrix</a>, your first experience is with a pile of text overlapping a pile of other text.  Surely this is a step backwards?  What are you possibly doing that your header and sidebar can only be laid out correctly by executing code?  It’s not like the page loads with <em>no</em> <span>CSS</span> — nothing in plain <span>HTML</span> will overlap by default!  You have to tell it to do&nbsp;that!</p>
<p>And then there’s the mobile web, which despite everyone’s good intentions, has kind of turned out to be a failure.  The idea was that you could use <span>CSS</span> media queries to fit your normal site on a phone screen, but instead, most major sites have entirely separate mobile versions.  Which means that either the mobile site is missing a bunch of important features and I’ll have to awkwardly navigate that on my phone anyway, or the desktop site is full of crap that nobody actually&nbsp;needs.</p>
<p>(Meanwhile, Google’s own Android versions of Docs/Sheets/etc. have, like, 5% of the features of the Web versions?  Not sure what to make of&nbsp;that.)</p>
<p>Hmm.  Strongly considering writing something that goes more into detail about improvements to <span>CSS</span> since the Firefox 3 era, similar to <a href="https://eev.ee/blog/2017/10/07/javascript-got-better-while-i-wasnt-looking/">the one I wrote for JavaScript</a>.  But this post is long&nbsp;enough.</p>
<h2 id="some-futures-that-never-were"><a href="#some-futures-that-never-were">Some futures that never&nbsp;were</a></h2>
<p>I don’t know what’s coming next in <span>CSS</span>, especially now that flexbox and grid have solved all our problems.  I’m vaguely aware of some work being done on more extensive math support, and possibly some functions for altering colors like in Sass.  There’s a <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API">painting <span>API</span></a> that lets you generate backgrounds on the fly with JavaScript using the canvas <span>API</span>, which is…  quite something.  Apparently it’s now in spec that you can use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/attr"><code>attr()</code></a> (which evaluates to the value of an <span>HTML</span> attribute) as the value for any property, which seems cool and might even let you implement <span>HTML</span> tables entirely in <span>CSS</span>, but you could do the same thing with variables.  I mean, um, custom properties.  I’m more excited about <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:is"><code>:is()</code></a>, which matches any of a list of selectors, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid">subgrid</a>, which lets you add some nesting to a grid but keep grandchildren still aligned to&nbsp;it.</p>
<p>Much easier is to list some things that <em>were</em> the future, but fizzled&nbsp;out.</p>
<ul>
<li>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display: run-in</code></a> has been part of <span>CSS</span> since version 2 (way back in ‘98), but it’s basically unsupported.  The idea is that a “run-in” box is inserted, inline, into the next block, so&nbsp;this:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;</span><span>h2</span> <span>style</span><span>=</span><span>"display: run-in;"</span><span>&gt;</span>Title<span>&lt;/</span><span>h2</span><span>&gt;</span>
<span>&lt;</span><span>p</span><span>&gt;</span>Paragraph<span>&lt;/</span><span>p</span><span>&gt;</span>
<span>&lt;</span><span>p</span><span>&gt;</span>Paragraph<span>&lt;/</span><span>p</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>displays like&nbsp;this:</p>
<blockquote>
<p><strong>Title</strong>&nbsp;Paragraph</p>
<p>Paragraph</p>
</blockquote>
<p>And, ah, hm, I’m starting to see why it’s unsupported.  It <em>used</em> to exist in WebKit, but was apparently so unworkable as to be removed six years&nbsp;ago.</p>
</li>
<li>
<p><span>“</span>Alternate stylesheets” were popular in the early 00s, at least on a few of my friends’ websites.  The idea was that you could list <em>more than one</em> stylesheet for your site (presumably for different themes), and the browser would give the user a list of them.  Alas, that list was always squirrelled away in a menu with no obvious indication of when it was actually populated, so in the end, everyone who wanted multiple themes just implemented an in-page theme switcher&nbsp;themselves.</p>
<p>This feature is <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets">still supported</a>, but apparently Chrome never bothered implementing it, so it’s effectively&nbsp;dead.</p>
</li>
<li>
<p>More generally, the original <span>CSS</span> spec clearly expects users to be able to write their own <span>CSS</span> for a website — right in paragraph 2 it&nbsp;says</p>
<blockquote>
<p>…the reader may have a personal style sheet to adjust for human or technological&nbsp;handicaps.</p>
</blockquote>
<p>Hey, that sounds cool.  But it never materialized as a browser feature.  Firefox has <a href="http://kb.mozillazine.org/UserContent.css"><code>userContent.css</code></a> and some <span>URL</span> selectors for writing per-site rules, but that’s relatively&nbsp;obscure.</p>
<p>Still, there’s clearly demand for the concept, as evidenced by the popularity of the Stylish extension — which does just this.  (Too bad it was <a href="https://robertheaton.com/2018/07/02/stylish-browser-extension-steals-your-internet-history/">bought by some chucklefucks who started using it to suck up browser data to sell to advertisers</a>.  Use <a href="https://addons.mozilla.org/en-US/firefox/addon/styl-us/">Stylus</a>&nbsp;instead.)</p>
</li>
<li>
<p>A common problem (well, for me) is that of styling the <em>label</em> for a checkbox, depending on its state.  Styling the checkbox itself is easy enough with the <code>:checked</code> pseudo-selector.  But if you arrange a checkbox and its label in the obvious&nbsp;way:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>&lt;</span><span>label</span><span>&gt;&lt;</span><span>input</span> <span>type</span><span>=</span><span>"checkbox"</span><span>&gt;</span> Description of what this does<span>&lt;/</span><span>label</span><span>&gt;</span>
</code></pre></div>
</td></tr></tbody></table>
<p>…then <span>CSS</span> has no way to target either the <code>&lt;label&gt;</code> element or the text node.  jQuery’s (originally custom) selector engine offered a custom <code>:has()</code> pseudo-class, which could be used to express&nbsp;this:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>/* checkbox label turns bold when checked */</span><span></span>
<span>label</span><span>:</span><span>has</span><span>(</span><span>input</span><span>:</span><span>checked</span><span>)</span><span> </span><span>{</span><span></span>
<span>    </span><span>font-weight</span><span>:</span><span> </span><span>bold</span><span>;</span><span></span>
<span>}</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>Early <span>CSS</span> 3 selector discussions seemingly wanted to avoid this, I guess for performance reasons?  The somewhat novel alternative was to write out the entire selector, but be able to alter which part of it the rules affected with a “subject” indicator.  At first this was a&nbsp;pseudo-class:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>label</span><span>:</span><span>subject</span><span> </span><span>input</span><span>:</span><span>checked</span><span> </span><span>{</span><span></span>
<span>    </span><span>font-weight</span><span>:</span><span> </span><span>bold</span><span>;</span><span></span>
<span>}</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>Then later, they introduced a <code>!</code> prefix&nbsp;instead:</p>
<table><tbody><tr><td></td><td><div><pre><span></span><code><span>!</span><span>label</span><span> </span><span>input</span><span>:</span><span>checked</span><span> </span><span>{</span><span></span>
<span>    </span><span>font-weight</span><span>:</span><span> </span><span>bold</span><span>;</span><span></span>
<span>}</span><span></span>
</code></pre></div>
</td></tr></tbody></table>
<p>Thankfully, this was decided to be a bad idea, so the current specced way to do this is…  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:has"><code>:has()</code></a>!  Unfortunately, it’s only allowed when querying from JavaScript, not in a live stylesheet, and nothing implements it anyway.  20 years and I’m still waiting for a way to style checkbox&nbsp;labels.</p>
</li>
<li>
<p><code>&lt;style scoped&gt;</code> was an attribute that would’ve made a <code>&lt;style&gt;</code> element’s <span>CSS</span> rules only apply to other elements within its immediate parent, meaning you could drop in arbitrary (possibly user-written) <span>CSS</span> without any risk of affecting the rest of the page.  Alas, this was quietly dropped some time ago, with shadow <span>DOM</span> suggested as a wildly inappropriate&nbsp;replacement.</p>
</li>
<li>
<p>I seem to recall that when I first heard about <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">Web components</a>, they were templates you could use to reduce duplication in pure <span>HTML</span>?  But I can’t find any trace of that concept now, and the current implementations require JavaScript to define them, so there’s nothing declarative linking a new tag to its implementation.  Which makes them completely unusable for anything that doesn’t have a compelling reason to rely on <span>JS</span>.&nbsp;Alas.</p>
</li>
<li>
<p><code>&lt;blink&gt;</code> and <code>&lt;marquee&gt;</code>.  <span>RIP</span>.  Though both can be easily replicated with <span>CSS</span>&nbsp;animations.</p>
</li>
</ul>
<h2 id="thats-it"><a href="#thats-it">That's&nbsp;it</a></h2>
<p>You’re still here?  It’s over.  Go&nbsp;home.</p>
<p>And maybe push back against Blink monoculture and use <a href="https://www.mozilla.org/en-US/firefox/">Firefox</a>, including <a href="https://www.mozilla.org/en-US/firefox/mobile/">on your phone</a>, unless for some reason you use an iPhone, which forbids other browser engines, which is far worse than anything Microsoft ever did, but we just kinda accept it for some&nbsp;reason.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: CTRL-F for YouTube Videos (106 pts)]]></title>
            <link>https://github.com/Evan-Wildenhain/CTRL-F-VIDEO</link>
            <guid>40023657</guid>
            <pubDate>Sat, 13 Apr 2024 15:17:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Evan-Wildenhain/CTRL-F-VIDEO">https://github.com/Evan-Wildenhain/CTRL-F-VIDEO</a>, See on <a href="https://news.ycombinator.com/item?id=40023657">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Actions&quot;,&quot;label&quot;:&quot;ref_cta:Actions;&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Packages&quot;,&quot;label&quot;:&quot;ref_cta:Packages;&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Security&quot;,&quot;label&quot;:&quot;ref_cta:Security;&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Codespaces&quot;,&quot;label&quot;:&quot;ref_cta:Codespaces;&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Copilot&quot;,&quot;label&quot;:&quot;ref_cta:Copilot;&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Code review&quot;,&quot;label&quot;:&quot;ref_cta:Code review;&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Issues&quot;,&quot;label&quot;:&quot;ref_cta:Issues;&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Discussions&quot;,&quot;label&quot;:&quot;ref_cta:Discussions;&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to GitHub Sponsors&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Sponsors;&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to The ReadME Project&quot;,&quot;label&quot;:&quot;ref_cta:The ReadME Project;&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
    <a data-analytics-event="{&quot;category&quot;:&quot;Header menu top item (logged out)&quot;,&quot;action&quot;:&quot;click to go to Pricing&quot;,&quot;label&quot;:&quot;ref_cta:Pricing;&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:Evan-Wildenhain/CTRL-F-VIDEO" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="lur7dpFOtHYyXKYKRV4btJJIM9u22AYeedv6HHqY7AU2a7Pjvc7J2yFpk7pjtYTXA--GgUoguUYYhb9jgqdjtg" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="Evan-Wildenhain/CTRL-F-VIDEO" data-current-org="" data-current-owner="Evan-Wildenhain" data-logged-in="false" data-copilot-chat-enabled="false" data-blackbird-indexed-repo-csrf="<esi:include src=&quot;/_esi/rails_csrf_token_form_hidden?r=8GlC4NfmKAAXUHUlUM9eVwo8KI%2FJFRzKWmMQsWn%2Fl5wUSd4gbRdh008W3qwJokAVEo7GJ7gbkqCFNyHNEx4Goxi%2BfDWktGTYQRTYZuO6DfNEEEtqGeU1TgTovSwkzrTfmQ%2BcrcBal6QRDCJ6mXDaJ%2B1EiH61pZqWMjC%2FEcXQHd2BPKZVfZVnnbT8peto57JAypWOLVU5Q%2FEDW3NINz0FfpbXmdvhPqSxZaAPTk0Y5BLzmjokFCYUI%2BrY7lmJBma8vnwhZ8wutUDhhl%2BwkBUo325AqFtkffXtEtkHSz%2FV7nJ58c8sJPMIgl57aC1pHSWXHSTUyOWoevUp82JvSCgEFqUwkssX1GgJonR8IHLnMq6xhlBPRlsdXykkQWYRcK0JIYUuA9oEKYuPaBMX3q45U7YPkt7PGbSWC%2FhggKLcoifuhKjuplqkwGkHB79ebjR0G%2FrZRnEYWmK%2F9%2BalGKBeNBPrCLazoTpYOyaAPlfUQYkSmA2fgmfCFnF%2FoIQXhs8sHszBU3ymDbrK%2B%2F0DYafRpGFaX4jmq53UHd7FOfeD--HQpcgke4bXSstuKx--rymu7LPeHfCYEmJ744PHHA%3D%3D&quot; />">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=Evan-Wildenhain%2FCTRL-F-VIDEO" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/Evan-Wildenhain/CTRL-F-VIDEO&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e1634abbbfe4873b43175044d30d251d0662cb28969b2bbcba42b7e4ab2dbb7e" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
              Sign up
            </a>
        </p></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tree-shaking, the horticulturally misguided algorithm (201 pts)]]></title>
            <link>https://wingolog.org/archives/2023/11/24/tree-shaking-the-horticulturally-misguided-algorithm</link>
            <guid>40023319</guid>
            <pubDate>Sat, 13 Apr 2024 14:20:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wingolog.org/archives/2023/11/24/tree-shaking-the-horticulturally-misguided-algorithm">https://wingolog.org/archives/2023/11/24/tree-shaking-the-horticulturally-misguided-algorithm</a>, See on <a href="https://news.ycombinator.com/item?id=40023319">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Let’s talk about tree-shaking!</p><h3>looking up from the trough</h3><p>But first, I need to talk about WebAssembly’s dirty secret: despite the
hype, WebAssembly has had limited success on the web.</p><p>There is
<a href="https://medium.com/@addyosmani/photoshop-is-now-on-the-web-38d70954365a">Photoshop</a>,
which does appear to be a real success.  5 years ago there was
<a href="https://www.figma.com/blog/figma-faster/">Figma</a>, though they don’t
talk much about Wasm these days.  There are quite a number of little NPM
libraries that use Wasm under the hood, usually compiled from C++ or
Rust.  I think
<a href="https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor">Blazor</a>
probably gets used for a few in-house corporate apps, though I could be
fooled by their marketing.</p><p>You might recall the hyped demos of 3D first-person-shooter
games with Unreal engine again from 5 years ago, but that was the previous major release of
Unreal and was always experimental; the current Unreal 5 does not support targetting
WebAssembly.</p><p>Don’t get me wrong, I think WebAssembly is great.  It is having fine
success in off-the-web environments, and I think it is going to be a key
and growing part of the Web platform.  I suspect, though, that we are
only just now getting past the <a href="https://en.wikipedia.org/wiki/Gartner_hype_cycle">trough of
disillusionment</a>.</p><p>It’s worth reflecting a bit on the nature of web Wasm’s successes and
failures.  Taking Photoshop as an example, I think we can say that Wasm
does very well at bringing large C++ programs to the web.  I know that
it took quite some work, but I understand the end result to be
essentially the same source code, just compiled for a different target.</p><p>Similarly for the JavaScript module case, Wasm finds success in getting
legacy C++ code to the web, and as a way to write new web-targetting
Rust code.  These are often tasks that JavaScript doesn’t do very well
at, or which need a shared implementation between client and server
deployments.</p><p>On the other hand, WebAssembly has not been a Web success for DOM-heavy
apps.  Nobody is talking about rewriting the front-end of 
<a href="https://wordpress.com/">wordpress.com</a> in Wasm, for example.  Why is
that?  It may sound like a silly question to you: Wasm just isn’t good
at that stuff.  But <i>why</i>?  If you dig down a bit, I think it’s that the
programming models are just too different: the Web’s primary programming
model is JavaScript, a language with dynamic typing and managed memory,
whereas WebAssembly 1.0 was about static typing and linear memory.
Getting to the DOM from Wasm was a hassle that was overcome only by the
most ardent of the true Wasm faithful.</p><p>Relatedly, Wasm has also not really been a success for languages that
aren’t, like, C or Rust.  I am guessing that wordpress.com isn’t written
mostly in C++.  One of the sticking points for this class of language.
is that C#, for example, will want to ship with a garbage collector, and
that it is annoying to have to do this.  Check my <a href="https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us">article from March
this year for more
details</a>.</p><p>Happily, this restriction is going away, as all browsers are going to
ship support for reference types and garbage collection within the next
months; Chrome and Firefox already ship Wasm GC, and Safari shouldn’t be
far behind thanks to the efforts from my colleague Asumu Takikawa.  This
is an extraordinarily exciting development that I think will kick off a
whole ‘nother Gartner hype cycle, as more languages start to update
their toolchains to support WebAssembly.</p><h3>if you don’t like my peaches</h3><p>Which brings us to the meat of today’s note: web Wasm will win where
compilers create compact code.  If your language’s compiler toolchain
can manage to produce useful Wasm in a file that is less than a handful
of over-the-wire kilobytes, you can win.  If your compiler can’t do that
yet, you will have to instead rely on hype and captured audiences for
adoption, which at best results in an unstable equilibrium until you
figure out what’s next.</p><p>In the JavaScript world, managing bloat and deliverable size is a huge
industry.  Bundlers like <a href="https://esbuild.github.io/">esbuild</a> are a
ubiquitous part of the toolchain, compiling down a set of JS modules to
a single file that should include only those functions and data types
that are used in a program, and additionally applying domain-specific
size-squishing strategies such as minification (making monikers more
minuscule).</p><p>Let’s focus on tree-shaking.  The visual metaphor is that you write a
bunch of code, and you only need some of it for any given page.  So you
imagine a tree whose, um, branches are the modules that you use, and
whose leaves are the individual definitions in the modules, and you then
violently shake the tree, probably killing it and also annoying any
nesting birds.  The only thing that’s left still attached is what is
actually needed.</p><p>This isn’t how trees work: holding the trunk doesn’t give you
information as to which branches are somehow necessary for the tree’s
mission.  It also <a href="https://pvk.ca/Blog/2012/02/19/fixed-points-and-strike-mandates/">primes your mind to look for the wrong fixed
point</a>,
removing unneeded code instead of keeping only the necessary code.</p><p>But, tree-shaking is an evocative name, and so despite its horticultural
and algorithmic inaccuracies, we will stick to it.</p><p>The thing is that maximal tree-shaking for languages with a thicker
run-time has not been a huge priority.  Consider Go: <a href="https://zchee.github.io/golang-wiki/WebAssembly/">according to the
golang wiki</a>, the most
trivial program compiled to WebAssembly from Go is 2 megabytes, and
adding imports can make this go to 10 megabytes or more.  Or look at
Pyodide, the Python WebAssembly port: the <a href="https://pyodide.org/en/stable/console.html">REPL
example</a> downloads about 20
megabytes of data.  These are fine sizes for technology demos or, in the
limit, very rich applications, but they aren’t winners for web
development.</p><h3>shake a different tree</h3><p>To be fair, both the built-in Wasm support for Go and the Pyodide port
of Python both derive from the upstream toolchains, where producing
small binaries is nice but not necessary: on a server, who cares how big
the app is?  And indeed when targetting smaller devices, we tend to see
alternate implementations of the toolchain, for example
<a href="https://micropython.org/">MicroPython</a> or
<a href="https://github.com/tinygo-org/tinygo">TinyGo</a>.  TinyGo has a Wasm
back-end that can apparently go down to less than a kilobyte, even!</p><p>These alternate toolchains often come with <a href="https://tinygo.org/docs/reference/lang-support/">some restrictions or
peculiarities</a>, and
although we can consider this to be an evil of sorts, it is to be
expected that the target platform exhibits some co-design feedback on
the language.  In particular, running in the sea of the DOM is
sufficiently weird that a Wasm-targetting Python program will
necessarily be different than a “native” Python program.  Still, I think
as toolchain authors we aim to provide the same language, albeit
possibly with a different implementation of the standard library.  I am
sure that the ClojureScript developers would prefer to remove their
<a href="https://clojurescript.org/about/differences">page documenting the differences with
Clojure</a> if they could, and
perhaps if Wasm becomes a viable target for Clojurescript, they will.</p><h3>on the algorithm</h3><p>To recap: now that it supports GC, Wasm could be a winner for web
development in Python and other languages.  You would need a different
toolchain and an effective tree-shaking algorithm, so that user
experience does not degrade.  So let’s talk about tree shaking!</p><p>I work on the <a href="https://gitlab.com/spritely/guile-hoot/">Hoot Scheme
compiler</a>, which targets Wasm
with GC.  We manage to get down to 70 kB or so right now, in the minimal
“main” compilation unit, and are aiming for lower; auxiliary compilation
units that import run-time facilities (the current exception handler and
so on) from the main module can be sub-kilobyte.  Getting here has been
tricky though, and I think it would be even trickier for Python.</p><p>Some background: <a href="https://wingolog.org/archives/2023/11/16/a-whiff-of-whiffle">like
Whiffle</a>,
the Hoot compiler prepends a
<a href="https://gitlab.com/spritely/guile-hoot/-/blob/main/module/hoot/prelude.scm">prelude</a>
onto user code.  Tree-shakind happens in a number of places:</p><ul><li><p><a href="https://git.savannah.gnu.org/cgit/guile.git/tree/module/language/tree-il/peval.scm">partial
evaluation</a>
will evaluate unused bindings for effect, possibly eliding them</p></li><li><p><a href="https://git.savannah.gnu.org/cgit/guile.git/tree/module/language/tree-il/fix-letrec.scm">fixing
letrec</a>
will do the same</p></li><li><p>CPS frequently traverses the program, following only referenced
function, value, and control edges, e.g. via
<a href="https://git.savannah.gnu.org/cgit/guile.git/tree/module/language/cps/renumber.scm">renumbering</a></p></li><li><p>There is an explicit <a href="https://git.savannah.gnu.org/cgit/guile.git/tree/module/language/cps/dce.scm">dead-code
elimination</a>
pass which tries to elide unused effect-free allocations, a situation
that can arise due to other optimizations</p></li><li><p>Finally there is a <a href="https://gitlab.com/spritely/guile-hoot/-/blob/main/module/hoot/stdlib.scm?ref_type=heads">standard library written in raw-ish
WebAssembly</a>,
whose definitions (globals, tables, imports, functions, etc) are
included in the residual binary <a href="https://gitlab.com/spritely/guile-hoot/-/blob/main/module/wasm/link.scm?ref_type=heads">only as
neeeded</a>.</p></li></ul><p>Generally speaking, procedure definitions (functions / closures) are the
easy part: you just include only those functions that are referenced by
the code.  In a language like Scheme, this gets you a long way.</p><p>However there are three immediate challenges.  One is that the
evaluation model for the definitions in the prelude is <tt>letrec*</tt>: the
scope is recursive but ordered.  Binding values can call or refer to
previously defined values, or capture values defined later.  If
evaluating the value of a binding requires referring to a value only
defined later, then that’s an error.  Again, for procedures this is
trivially OK, but as soon as you have non-procedure definitions,
sometimes the compiler won’t be able to prove this nice “only refers to
earlier bindings” property.  In that case the <a href="https://legacy.cs.indiana.edu/~dyb/pubs/letrec-reloaded-abstract.html">fixing <tt>letrec</tt>
(reloaded)</a>
algorithm will end up residualizing bindings that are <tt>set!</tt>, which of
all the tree-shaking passes above require the delicate DCE pass to
remove them.</p><p>Worse, some of those non-procedure definitions are <i>record types</i>, which
have vtables that define how to print a record, how to check if a value
is an instance of this record, and so on.  These vtable callbacks can
end up keeping a lot more code alive even if they are never used.  We’ll
get back to this later.</p><p>Similarly, say you print a string via
<a href="https://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-9.html#node_idx_832"><tt>display</tt></a>.
Well now not only are you bringing in the whole buffered I/O facility,
but you are also calling a highly polymorphic function: <tt>display</tt> can
print anything.  There’s a case for bitvectors, so you pull in code for
bitvectors.  There’s a case for pairs, so you pull in that code too.
And so on.</p><p>One solution is to instead call <tt>write-string</tt>, which only writes
strings and not general data.  You’ll still get the generic buffered I/O
facility (ports), though, even if your program only uses one kind of
port.</p><p>This brings me to my next point, which is that optimal tree-shaking is a
flow analysis problem.  Consider <tt>display</tt>: if we know that a program
will never have bitvectors, then any code in <tt>display</tt> that works on
bitvectors is dead and we can fold the branches that guard it.  But to
know this, we have to know what kind of arguments <tt>display</tt> is called
with, and for that we need <a href="https://wingolog.org/archives/2014/07/01/flow-analysis-in-guile">higher-level flow
analysis</a>.</p><p>The problem is exacerbated for Python in a few ways.  One, because
<a href="https://matt.might.net/articles/implementation-of-kcfa-and-0cfa/">object-oriented dispatch is higher-order
programming</a>.
How do you know what <tt>foo.bar</tt> actually means?  Depends on <tt>foo</tt>, which
means you have to thread around representations of what <tt>foo</tt> might be
everywhere and to everywhere’s caller and everywhere’s caller’s caller
and so on.</p><p>Secondly, lookup in Python is generally more dynamic than in Scheme: you
have <tt>__getattr__</tt> methods (is that it?; been a while since I’ve done
Python) everywhere and users might indeed use them.  Maybe this is not
so bad in practice and flow analysis can exclude this kind of dynamic
lookup.</p><p>Finally, and perhaps relatedly, the object of tree-shaking in Python is
a mess of modules, rather than a big term with lexical bindings.  This
is like JavaScript, but without the established ecosystem of
tree-shaking bundlers; Python has its work cut out for some years to go.</p><h3>in short</h3><p>With GC, Wasm makes it thinkable to do DOM programming in languages
other than JavaScript.  It will only be feasible for mass use, though,
if the resulting Wasm modules are small, and that means significant
investment on each language’s toolchain.  Often this will take the form
of alternate toolchains that incorporate experimental tree-shaking
algorithms, and whose alternate standard libraries facilitate the
tree-shaker.</p><p>Welp, I’m off to lunch.  Happy wassembling, comrades!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[350 tons of of chocolate and wine arrive on world’s largest cargo sailboat (121 pts)]]></title>
            <link>https://untappedcities.com/2024/04/12/grain-de-sail-ll/</link>
            <guid>40022801</guid>
            <pubDate>Sat, 13 Apr 2024 12:45:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://untappedcities.com/2024/04/12/grain-de-sail-ll/">https://untappedcities.com/2024/04/12/grain-de-sail-ll/</a>, See on <a href="https://news.ycombinator.com/item?id=40022801">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
<p>At&nbsp;<a href="https://untappedcities.com/2014/04/25/daily-what-south-street-seaport-mall-at-pier-17-demolition-fully-underway/" target="_blank" rel="noreferrer noopener">Pier 17</a>&nbsp;in the South Street Seaport, New Yorkers can find the world’s largest cargo sailboat, <em>Grain de Sail&nbsp;ll</em>. The wind-powered ship arrived in New York on Wednesday with 350 tons of goods. Everything from Grain de Sail brand fine chocolates and organic coffee to cosmetic products, wine, and French fashion house luxury goods were on board.</p>
<figure><img loading="lazy" decoding="async" width="800" height="533" data-attachment-id="590036" data-permalink="https://untappedcities.com/grain-de-sail-sailboat-untapped-new-york4/" data-orig-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York4.jpg" data-orig-size="800,533" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;6.3&quot;,&quot;credit&quot;:&quot;Untapped New York&quot;,&quot;camera&quot;:&quot;Canon EOS Rebel T6s&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1712912553&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;113&quot;,&quot;iso&quot;:&quot;100&quot;,&quot;shutter_speed&quot;:&quot;0.005&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Grain-de-Sail-Sailboat-Untapped New York4" data-image-description="" data-image-caption="<p>The Grain de Sail ll is the largest cargo sailboat. </p>
" data-medium-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York4-300x200.jpg" data-large-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York4.jpg" src="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York4.jpg" alt="The Grain de Sail ll is the largest cargo sailboat." srcset="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York4.jpg 800w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York4-300x200.jpg 300w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York4-768x512.jpg 768w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York4-560x373.jpg 560w" sizes="(max-width: 800px) 100vw, 800px"><figcaption>The Grain de Sail ll is the largest cargo sailboat. </figcaption></figure>
<p>“The best knowledge of what France is able to do is on this vessel,” said Jacques Barreau, CEO and Founder of Grain de Sail in France. <em>Grain de Sail ll </em>is the newest member of the company’s fleet of cargo sailboats. It stretches 52 meters, more than twice as long as <a href="https://untappedcities.com/2021/05/13/chocolate-wine-tasting-sailboat/" target="_blank" rel="noreferrer noopener">its predecessor.</a> It can travel to New York from Saint-Malo, France in about 18 days. </p>
<figure><img loading="lazy" decoding="async" width="800" height="533" data-attachment-id="590037" data-permalink="https://untappedcities.com/grain-de-sail-sailboat-untapped-new-york5/" data-orig-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York5.jpg" data-orig-size="800,533" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;13&quot;,&quot;credit&quot;:&quot;Untapped New York&quot;,&quot;camera&quot;:&quot;Canon EOS Rebel T6s&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1712915734&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;50&quot;,&quot;iso&quot;:&quot;100&quot;,&quot;shutter_speed&quot;:&quot;0.005&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Grain-de-Sail-Sailboat-Untapped New York5" data-image-description="" data-image-caption="<p>The Grain de Sail ll in New York City. </p>
" data-medium-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York5-300x200.jpg" data-large-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York5.jpg" src="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York5.jpg" alt="The Grain de Sail ll in New York City." srcset="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York5.jpg 800w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York5-300x200.jpg 300w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York5-768x512.jpg 768w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York5-560x373.jpg 560w" sizes="(max-width: 800px) 100vw, 800px"><figcaption>The Grain de Sail ll in New York City. </figcaption></figure>
<p>Grain de Sail’s cross-Atlantic voyages rely entirely on wind energy. The company’s mission is to empower zero-emission shipping with “retro-innovation,” blending ancestral technology with modern technology. This commitment to low emissions provides sustainable shipment options for Grain de Sail’s coffee, cacao, and wine brands, and other businesses that can now ship their products without contributing to worldwide maritime shipping’s global CO2 and methane emissions.&nbsp;</p>
<p>Compared to traditional cargo shipping, the process of unloading goods from Grain de Sail vessels averages about five days faster. This is because the sailboats have cranes directly on the deck. Thus, they can avoid harbor congestion and the long, strenuous process. Instead of taking 30-35 days to unload, Grain de Sail vessels take about 20 days.</p>
<figure><img loading="lazy" decoding="async" width="800" height="533" data-attachment-id="590038" data-permalink="https://untappedcities.com/grain-de-sail-sailboat-untapped-new-york6/" data-orig-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York6.jpg" data-orig-size="800,533" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;10&quot;,&quot;credit&quot;:&quot;Untapped New York&quot;,&quot;camera&quot;:&quot;Canon EOS Rebel T6s&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1712915477&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;35&quot;,&quot;iso&quot;:&quot;100&quot;,&quot;shutter_speed&quot;:&quot;0.004&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Grain-de-Sail-Sailboat-Untapped New York6" data-image-description="" data-image-caption="<p>One of the sailboat’s mates works on the mast aboard the Grain de Sail ll. </p>
" data-medium-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York6-300x200.jpg" data-large-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York6.jpg" src="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York6.jpg" alt="One of the sailboat's mates works on the mast aboard the Grain de Sail ll." srcset="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York6.jpg 800w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York6-300x200.jpg 300w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York6-768x512.jpg 768w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York6-560x373.jpg 560w" sizes="(max-width: 800px) 100vw, 800px"><figcaption>One of the sailboat’s mates works on the mast aboard the Grain de Sail ll. </figcaption></figure>
<p>Grain de Sail was founded in 2010 by two twin brothers, Olivier and Jacques Barreau, who are renewable energy experts from France. The company’s inception stemmed from its goal to reduce the carbon footprint of maritime transportation.&nbsp;<a href="https://untappedcities.com/2020/08/20/schooner-apollonia-brings-freight-by-sail-to-nyc-for-first-time-in-a-century/" target="_blank" rel="noreferrer noopener">Wind</a>&nbsp;is a reliable, savvy alternative to the high environmental costs of fossil fuels. Grain de Sail also emphasizes its promise to preserve the quality of goods, so you’re introduced to one of the only floating wine cellars. To properly maintain the quality of the bottles, the vessel is fitted with temperature and humidity control features.&nbsp;</p>
<p>“We must shift our focus on the quality rather than quantity,” said Barreau. “We must change our mindset to products that last longer and generate less pressure on the environment.”</p>
<figure><img loading="lazy" decoding="async" width="800" height="533" data-attachment-id="590034" data-permalink="https://untappedcities.com/grain-de-sail-sailboat-untapped-new-york2/" data-orig-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York2.jpg" data-orig-size="800,533" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;9&quot;,&quot;credit&quot;:&quot;Untapped New York&quot;,&quot;camera&quot;:&quot;Canon EOS Rebel T6s&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1712915495&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;18&quot;,&quot;iso&quot;:&quot;100&quot;,&quot;shutter_speed&quot;:&quot;0.005&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Grain-de-Sail-Sailboat-Untapped New York2" data-image-description="" data-image-caption="<p>Jacques Barreau, CEO and Founder of Grain de Sail, on board the Grain de Sail ll. </p>
" data-medium-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York2-300x200.jpg" data-large-file="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York2.jpg" src="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York2.jpg" alt="Jacques Barreau, CEO and Founder of Grain de Sail, on board the Grain de Sail ll." srcset="https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York2.jpg 800w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York2-300x200.jpg 300w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York2-768x512.jpg 768w, https://untappedcities.com/wp-content/uploads/2024/04/Grain-de-Sail-Sailboat-Untapped-New-York2-560x373.jpg 560w" sizes="(max-width: 800px) 100vw, 800px"><figcaption>Jacques Barreau, CEO and Founder of Grain de Sail, on board the Grain de Sail ll. </figcaption></figure>
<p>In New York City,&nbsp;<a href="https://graindesail-overseas.com/search-retailers" target="_blank" rel="noreferrer noopener">several retailers</a>&nbsp;sell goods delivered from the Grain de Sail. Not only can you support local businesses, but your conscious buying is helping to decarbonize shipping.&nbsp;</p>
<p>After the ship leaves New York City on April 15, 2024, <em>Grain de Sail ll</em> will return to France, loaded with various goods. This is the first load of many for the <em>Grain de Sail ll</em>. In total, this vessel plans to sail the seas five times a year, trekking from France to New York and then down through the Caribbean, where the sailboat will dispatch humanitarian aid, working alongside local NGOs. The sailboat will also restock its coffee and cacao supply on its journey through the Caribbean. That supply is then brought back across the sea to France, where the coffee is roasted, and fine chocolates are produced.</p>
<p><strong>Next, check out <a href="https://untappedcities.com/2024/04/11/energy-observer-nyc/" target="_blank" rel="noreferrer noopener">The Floating Energy Lab Docked in NYC for Earth Day</a></strong></p>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A disgruntled federal employee's 1980s desk calendar (2018) (164 pts)]]></title>
            <link>https://internationaltimes.it/a-disgruntled-federal-employees-1980s-desk-calendar/</link>
            <guid>40022709</guid>
            <pubDate>Sat, 13 Apr 2024 12:27:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://internationaltimes.it/a-disgruntled-federal-employees-1980s-desk-calendar/">https://internationaltimes.it/a-disgruntled-federal-employees-1980s-desk-calendar/</a>, See on <a href="https://news.ycombinator.com/item?id=40022709">Hacker News</a></p>
Couldn't get https://internationaltimes.it/a-disgruntled-federal-employees-1980s-desk-calendar/: Error: Request failed with status code 500]]></description>
        </item>
        <item>
            <title><![CDATA[Research into why some people have a better sense of direction (105 pts)]]></title>
            <link>https://knowablemagazine.org/content/article/society/2024/why-do-some-people-always-get-lost-but-others-dont</link>
            <guid>40022651</guid>
            <pubDate>Sat, 13 Apr 2024 12:17:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://knowablemagazine.org/content/article/society/2024/why-do-some-people-always-get-lost-but-others-dont">https://knowablemagazine.org/content/article/society/2024/why-do-some-people-always-get-lost-but-others-dont</a>, See on <a href="https://news.ycombinator.com/item?id=40022651">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<h2>Republish</h2>
<div>
<p>Thank you for your interest in republishing! This HTML is pre-formatted to adhere to our <a href="https://knowablemagazine.org/page/republish">guidelines</a>, which include: Crediting both the author and Knowable Magazine; preserving all hyperlinks; including the canonical link to the original article in the article metadata. Article text (including the headline) may not be edited without prior permission from Knowable Magazine staff. Photographs and illustrations are not included in this license. Please see our <a href="https://knowablemagazine.org/republish">full guidelines</a> for more information.</p>
</div>

<p><a href="#">close</a>
</p></div><p>http://instance.metastore.ingenta.com/content/article/society/2024/why-do-some-people-always-get-lost-but-others-dont</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Is .NET just miles ahead or am I delusional? (156 pts)]]></title>
            <link>https://old.reddit.com/r/dotnet/comments/18gpl24/is_net_just_miles_ahead_or_am_i_delusional/</link>
            <guid>40021758</guid>
            <pubDate>Sat, 13 Apr 2024 09:29:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://old.reddit.com/r/dotnet/comments/18gpl24/is_net_just_miles_ahead_or_am_i_delusional/">https://old.reddit.com/r/dotnet/comments/18gpl24/is_net_just_miles_ahead_or_am_i_delusional/</a>, See on <a href="https://news.ycombinator.com/item?id=40021758">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Professionally I've only ever worked in c# code bases. Obviously a lot of projects had a js SPA frontend attached, but I wasnt on that side.</p>

<p>I'm branching out into other languages, I'm pretty involved in reading newest tech twitter stuff, articles, youtube videos etc.</p>

<p>I get hit by incredible "what is going on, I had this in .net for  years, i dont even know how any ecosystem exists without it" more and more recently. How do others feel about this?</p>

<p>Some examples: </p>

<p>I just watched this video <a href="https://www.youtube.com/watch?v=zB9tEQYLPL4">https://www.youtube.com/watch?v=zB9tEQYLPL4</a>. Appearantly go + htmx have managed to recreate razor or blazor templates and people are gushing about how insane it is that they ALMOST make it typesafe. Its not really typesafe, more like typescript where its autocomplete, but not real.</p>

<p>I remember reading about one of the top javascript ORMs. Drizzle? People realized that it actually queried the entire database in the background and then did in memory query operations in its rust engine??? Generally I have to ignore any "ORM bad" comments people make, because I know their ORMs are actually bad. Its l ike using the original ef at best.</p>

<p>Build stuff and configuration in javascript specifically. In .net its so easy I don't even know what happens. It just works. I press F5 locally and I put it in whatever pipeline for production.Javascript mains just go babel webpack, they have conflicts, c make, i dont know whats going on...</p>

<p>The react server component meme a couple of months back where everyone was freaking out about either how insane it is or how insanely unsafe it is for sql injection. We had it in blazor for years.</p>

<p>Debugging... do I even need to say anything? There are unironic articles out there advocating for print debugging over attaching a debugger. Probably because it has actually some validity in other languages where you not just click the line number and smash F5.</p>

<p>I do like some things from other languages. I think just writing UIs in react, pressing strg s and instantly seeing the result is amazing. Much better than the blazor or razor dev experience.I like ... "hardcoded string options" as actual types. Its like enums but nicer I think. Dont know what that feature is actually called.</p>

<p>I also really like the typescript type magic. Autogenerating a type based on one object. Extending that type with 2 properties in 1 line and using that one. I miss that in c#. But in general these are small nice to haves, not "bro how do you even exist? How can some smart people not just steal ef core 1:1 for rust, go or js?"</p>

<p>I dont really know if I have a question. It just seems to me that these devs with a supposed breadth of knowledge are all missing the .net part. It feels like a weird island. It really feels like a waste.</p>
</div></div>]]></description>
        </item>
    </channel>
</rss>