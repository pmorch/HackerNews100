<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 26 Apr 2024 14:00:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Radicle is an open source, peer-to-peer code collaboration stack built on Git (111 pts)]]></title>
            <link>https://radicle.xyz/</link>
            <guid>40166736</guid>
            <pubDate>Fri, 26 Apr 2024 07:28:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://radicle.xyz/">https://radicle.xyz/</a>, See on <a href="https://news.ycombinator.com/item?id=40166736">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>
      <strong>Radicle</strong> is a sovereign
      <span id="definition">{code forge}</span> built on Git.
    </p>
    <nav>
      <span>
        <a href="#get-started">Get started ↓</a>
        <a href="https://radicle.xyz/guides/seeder">Run a seed →</a>
      </span>
      <span>
        <a href="https://radicle.xyz/guides">Guides</a>
        <a href="https://radicle.xyz/faq">FAQ</a>
        <a href="https://radicle.zulipchat.com/" target="_blank">Community</a>
        <a href="https://twitter.com/radicle" target="_blank">Tweets</a>
      </span>
    </nav>
    <h2 id="synopsis">Synopsis</h2>

<p>Radicle is an open source, peer-to-peer code collaboration stack built on Git.
Unlike centralized code hosting platforms, there is no single entity
controlling the network. Repositories are replicated across peers in a
decentralized manner, and users are in full control of their data and workflow.</p>

<p><a href="https://app.radicle.xyz/nodes/seed.radicle.xyz/rad:z3gqcJUoA1n9HaHKufZs5FCSGazv5" target="_blank" title="Heartwood is the latest generation of the Radicle protocol">
  <img src="https://radicle.xyz/assets/images/web-app-screenshot.png">
</a>
<small>
  The Radicle <code>heartwood</code> repository. Repository ID
  <code>rad:z3gqcJUoA1n9HaHKufZs5FCSGazv5</code>.
</small></p>



<h2 id="get-started">Get started</h2>



<blockquote id="release">
  <strong>Latest release</strong> 💾
  <span></span>
  <span>
    <a href="https://files.radicle.xyz/latest" id="release-info"></a>
    <span>·</span>
    <span id="release-timestamp"></span>
  </span>
</blockquote>



<p>To install Radicle on your system, simply run the <a href="https://radicle.xyz/install">install
script</a> from a POSIX shell. For now, Radicle only works on
Linux, macOS and BSD variants.</p>

<p>The following command downloads and runs the installation script on your
system:</p>



<p><code id="install-command">curl -sSf https://radicle.xyz/install | sh</code>
  <span id="install-copy">
    <svg width="16" height="16" viewBox="0 0 192 192" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect x="60" y="24" width="12" height="12" fill="currentColor"></rect>
      <rect x="72" y="24" width="12" height="12" fill="currentColor"></rect>
      <rect x="84" y="24" width="12" height="12" fill="currentColor"></rect>
      <rect x="96" y="24" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="24" width="12" height="12" fill="currentColor"></rect>
      <rect x="120" y="24" width="12" height="12" fill="currentColor"></rect>
      <rect x="132" y="24" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="24" width="12" height="12" fill="currentColor"></rect>
      <rect x="60" y="36" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="36" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="48" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="60" width="12" height="12" fill="currentColor"></rect>
      <rect x="36" y="60" width="12" height="12" fill="currentColor"></rect>
      <rect x="48" y="60" width="12" height="12" fill="currentColor"></rect>
      <rect x="60" y="60" width="12" height="12" fill="currentColor"></rect>
      <rect x="72" y="60" width="12" height="12" fill="currentColor"></rect>
      <rect x="84" y="60" width="12" height="12" fill="currentColor"></rect>
      <rect x="96" y="60" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="60" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="60" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="72" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="72" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="72" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="84" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="84" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="84" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="96" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="96" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="96" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="108" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="108" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="108" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="120" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="120" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="120" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="132" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="132" width="12" height="12" fill="currentColor"></rect>
      <rect x="132" y="132" width="12" height="12" fill="currentColor"></rect>
      <rect x="144" y="132" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="144" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="144" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="156" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="156" width="12" height="12" fill="currentColor"></rect>
      <rect x="24" y="168" width="12" height="12" fill="currentColor"></rect>
      <rect x="36" y="168" width="12" height="12" fill="currentColor"></rect>
      <rect x="48" y="168" width="12" height="12" fill="currentColor"></rect>
      <rect x="60" y="168" width="12" height="12" fill="currentColor"></rect>
      <rect x="72" y="168" width="12" height="12" fill="currentColor"></rect>
      <rect x="84" y="168" width="12" height="12" fill="currentColor"></rect>
      <rect x="96" y="168" width="12" height="12" fill="currentColor"></rect>
      <rect x="108" y="168" width="12" height="12" fill="currentColor"></rect>
    </svg>
  </span>
</p>

<p>Alternatively, you can build from <a href="https://app.radicle.xyz/nodes/seed.radicle.xyz/rad:z3gqcJUoA1n9HaHKufZs5FCSGazv5">source</a> or get the <a href="https://files.radicle.xyz/latest">binaries</a>.</p>

<p><a href="https://radicle.xyz/guides/user">Follow the guide →</a></p>

<h2 id="how-it-works">How it works</h2>

<p>The Radicle protocol leverages cryptographic identities for code and social
artifacts, utilizes Git for efficient data transfer between peers, and employs
a custom gossip protocol for exchanging repository metadata.</p>

<p><a href="https://radicle.xyz/guides/protocol">Learn more →</a></p>

<h2 id="your-data-forever-and-secure">Your Data, Forever and Secure</h2>

<p>All social artifacts are stored in Git, and signed using public-key
cryptography. Radicle verifies the authenticity and authorship of all data
for you.</p>

<h2 id="unparalleled-autonomy">Unparalleled Autonomy</h2>

<p>Radicle enables users to run their own nodes, ensuring censorship-resistant
code collaboration and fostering a resilient network without reliance on
third-parties.</p>

<h2 id="local-first">Local-first</h2>

<p>Radicle is <a href="https://www.inkandswitch.com/local-first/">local-first</a>, providing always-available functionality even
without internet access. Users own their data, making migration, backup, and
access easy both online and offline.</p>

<h2 id="evolvable--extensible">Evolvable &amp; Extensible</h2>

<p>Radicle’s <a href="https://radicle.xyz/guides/protocol#collaborative-objects">Collaborative Objects</a> (COBs) provide Radicle’s <em>social
primitive</em>. This enables features such as issues, discussions and code review
to be implemented as Git objects. Developers can extend Radicle’s capabilities
to build any kind of collaboration flow they see fit.</p>

<h2 id="modular-by-design">Modular by Design</h2>

<p>The Radicle Stack comes with a CLI, web interface and TUI, that are backed by
the Radicle Node and HTTP Daemon. It’s modular, so any part can be swapped out
and other clients can be developed.</p>

<pre>┌─────────────────┐┌────────────────┐
│  Radicle CLI    ││ Radicle Web    │
└─────────────────┘└────────────────┘
┌───────────────────────────────────┐
│  Radicle Repository               │
│ ┌────────┐ ┌────────┐ ┌─────────┐ │
│ │  code  │ │ issues │ │ patches │ │
│ └────────┘ └────────┘ └─────────┘ │
├───────────────────────────────────┤
│  Radicle Storage (Git)            │
└───────────────────────────────────┘
┌────────────────┐┌─────────────────┐
│  Radicle Node  ││  Radicle HTTPD  │
├────────────────┤├─────────────────┤
│    NoiseXK     ││   HTTP + JSON   │
└────────────────┘└─────────────────┘
</pre>

<p><a href="https://app.radicle.xyz/nodes/seed.radicle.xyz">Browse our repositories ↗</a></p>

<h2 id="updates">Updates</h2>

<ul>
  <li>26.03.2024 <a href="https://twitter.com/radicle/status/1772659708978991605">Radicle 1.0.0-rc.1</a> released! ✨</li>
  <li>10.03.2024 New Radicle homepage!</li>
  <li>05.03.2024 <a href="https://radicle.xyz/guides">Radicle Guides</a> launch.</li>
  <li>05.03.2024 <a href="https://news.ycombinator.com/item?id=39600810">Radicle makes it to the top of Hacker News</a>!</li>
  <li>18.04.2023 <a href="https://x.com/radicle/status/1648336186862194693?s=20">Radicle heartwood is announced</a>.</li>
</ul>

<h2 id="contributing">Contributing</h2>

<p>Radicle is <em>free and open source</em> software under the MIT and Apache 2.0
licenses. Get involved by <a href="https://app.radicle.xyz/nodes/seed.radicle.xyz/rad:z3gqcJUoA1n9HaHKufZs5FCSGazv5/tree/CONTRIBUTING.md">contributing code</a>.</p>



<p>Follow us on <a href="https://twitter.com/radicle">Twitter</a> to stay updated, or join our <a href="https://radicle.zulipchat.com/">Zulip</a>.</p>

<div><pre><code>                                                         .
                                                   *
                        .
              *                              --O--
                                              /|\
                 ,                     .
                                           .
..-.--*--.__-__..._.--..-._.---....~__..._.--..~._.---.--..____.--_--'`_---..
       -.--~--._  __..._.--..~._.--- - -.____.--_--'`_---..~.----_~
</code></pre></div>


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A BSD person tries Alpine Linux (122 pts)]]></title>
            <link>https://rubenerd.com/a-bsd-pserson-trying-alpine-linux/</link>
            <guid>40166670</guid>
            <pubDate>Fri, 26 Apr 2024 07:13:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rubenerd.com/a-bsd-pserson-trying-alpine-linux/">https://rubenerd.com/a-bsd-pserson-trying-alpine-linux/</a>, See on <a href="https://news.ycombinator.com/item?id=40166670">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>In February last year I wrote about <a href="https://rubenerd.com/its-worth-running-a-freebsd-or-netbsd-desktop/">running a FreeBSD desktop</a>, and concluded that sometimes you need to give yourself permission to tinker.</p>
<p>Well recently I’ve started tinkering with <a href="https://www.alpinelinux.org/">Alpine Linux</a>! It’s been recommended to me for years, so I’m finally getting around to checking it out. There’s a lot to like if you come from BSD, which we’ll dig into here.</p>
<figure><p><a target="_BLANK" href="https://rubenerd.com/files/2024/alpine-ovm-boot.png"><img src="https://rubenerd.com/files/2024/alpine-ovm-boot.png" alt="Booting a new Alpine ISO on OrionVM"></a></p></figure>
<h3 id="a-potted-history">A potted history</h3>
<p>The Alpine website <a href="https://www.alpinelinux.org/about/">describes it as</a>:</p>
<blockquote>
<p>an independent, non-commercial, general purpose Linux distribution designed for power users who appreciate security, simplicity and resource efficiency.</p>
</blockquote>
<p>Its small footprint and design decisions also make it more secure:</p>
<blockquote>
<p>All userland binaries are compiled as Position Independent Executables (PIE) with stack smashing protection. These proactive security features prevent exploitation of entire classes of zero-day and other vulnerabilities.</p>
</blockquote>
<p>Natanael Copa discussed the genesis of the project back in 2005, making it older than I realised. Like the BSDs, it’s found its way into embedded systems, routers, and mobile devices, as well as general purpose servers and desktops.</p>
<p>Alpine is also a popular base for use in Linux containers, owing to its compact size and limited dependencies. There are also <a href="https://github.com/alpinelinux/alpine-chroot-install/">toolchains</a> for easily running it in a <code>chroot(8)</code>, which is interesting for someone who uses <a href="https://man.netbsd.org/chroot.8">NetBSD chroots(8)</a> and <a href="https://docs.freebsd.org/en/books/handbook/jails/">FreeBSD jails</a> extensively for testing and deployments.</p>
<h3 id="installation">Installation</h3>
<p>Alpine comes in a <a href="https://alpinelinux.org/downloads/">few different versions</a>, including builds for ARM, PPC64, x86, and x86_64.</p>
<p>I downloaded the Xen ISO image because I was booting it on a VM at work, before realising I misread <em>Dom0</em> as <em>DomU</em>. The former refers to a Xen hypervisor, not a guest. Either way, it booted and installed the same as a standard ISO.</p>
<p>The install process is about as simple as you could make it. You log into the live environment with <code>root</code> and no password, then execute <code>setup-alpine</code>.</p>
<p>You’re asked basic questions for your keymap, networking, timezone, and root authentication. You can also inject an SSH key from the start, which is useful if you’re deploying a fleet of VMs or servers with an orchestration tool after the fact, or you’re deploying to a mediocre hosting provider that doesn’t give you an OOB console.</p>
<p>You’re also given the choice of a few different SSH servers and ntp clients, which let me choose my preferred OpenSSH and openntpd. It also correctly identified it was operating under Xen.</p>
<figure><p><a target="_BLANK" href="https://rubenerd.com/files/2024/alpine-install.png"><img src="https://rubenerd.com/files/2024/alpine-install.png" alt="Screenshot of a portion of the Alpine Linux installer, showing the mirror selection, user config, and Xen installation."></a></p></figure>
<p>It can also configure an LVM, but I stuck with what Alpine calls standard <code>sys</code> partitions for now. This uses <code>ext4</code>.</p>
<h3 id="post-install-and-exploration">Post-install and exploration</h3>
<p>Booting into Alpine for the first time, your given a hint as to why it’s special: <code>dmesg(1)</code> informs you you’re running <a href="https://github.com/OpenRC/openrc">OpenRC</a>! It’s portable, small, fast, efficient, transparent, and secure. It’s also very familiar to a BSD person used to writing rc scripts. <code>/etc/rc.conf</code> and <code>crond(8)</code>!? <strong>Yes!!!</strong></p>
<p>At the risk of embellishing my feelings about this, it is <em>such</em> a relief that there are Linux distros like Devuan, Gentoo, and Alpine using this. It’s a breath of alpine air, and has legitimately made Linux fun again.</p>
<figure><p><a target="_BLANK" href="https://rubenerd.com/files/2024/alpine-openrc.png"><img src="https://rubenerd.com/files/2024/alpine-openrc.png" alt="Screenshot showing dmesg output on first boot."></a></p></figure>
<p>Along with OpenRC, Alpine is bundled with <a href="https://wiki.alpinelinux.org/wiki/Musl">musl</a>, and runs busybox. Both are obviously more limited than GCC and the GNU coreutils, but they further contribute to the base system’s smaller size and attack surface. <a href="https://pkgs.alpinelinux.org/package/edge/main/x86_64/llvm-runtimes">llvm</a> is also available, as is the <a href="https://pkgs.alpinelinux.org/package/edge/main/x86_64/mksh">MirBSD Korn shell</a>, one of my two preferred interactive shells.</p>
<blockquote>
<p>Um, Ruben, I’d like to interject for a moment. What you are referring to as Linux, is in fact, GNU/Linux, or as I’ve recently taken to calling it, a GNU grilled cheese sandwich merely featuring Linux as the…</p>
</blockquote>
<p>… nope!</p>
<h3 id="packages">Packages</h3>
<p>Speaking of installing packages, let’s take a look at that. Alpine’s default package manager is <a href="https://docs.alpinelinux.org/user-handbook/0.1a/Working/apk.html" title="Working with the Alpine Package Keeper">apk</a>. As is normal on Linux, this handles updating the base system and all packages, because it makes no distinction. I’d be interested to see if I could also run an unprivileged copy of this as I like to do on the BSDs, but I haven’t checked yet. There’s also <a href="https://www.pkgsrc.org/#index2h3">pkgsrc</a>, so no biggie.</p>
<p>Configuration is in <code>/etc/apk/repositories</code>, where you can enable the community repo by uncommenting the second URL supplied by the installer. Alpine also has a <code>testing</code> repo, and you can add your own.</p>
<p>Usage is easy, though I’ve still been mistyping <code>apt install</code> instead of <code>apk add</code>, because old habits die hard. There’s an official <a href="https://pkgs.alpinelinux.org/">web interface</a>, and Alpine repos are on <a href="https://alpine.pkgs.org/">pkgs.org</a>.</p>
<p>A few packages later, and I had my “essentials” going, like I do on my <a href="https://rubenerd.com/my-freebsd-laptop-with-just-tmux/" title="My FreeBSD laptop... without a GUI!?">console-only laptop</a>:</p>
<figure><p><a href="https://rubenerd.com/files/2024/alpine-stuff.png"><img src="https://rubenerd.com/files/2024/alpine-stuff.png" alt="Alpine running tmux, htop, zpool, and cmatrix."></a></p></figure>
<p>Perhaps the package I was most surprised about was zfs. It was literally two commands to install and load the kernel module (though obviously root on ZFS would be more involved). What that would look like after an upgrade I’d have to see, but thus far I’m impressed.</p>
<pre><code># apk add zfs zfs-lts
# modprobe zfs
</code></pre>
<h3 id="conclusion">Conclusion</h3>
<p>I’ve barely scratched the surface, but there’s enough here for me to seriously consider a switch to it as my primary Linux distro for testing and servers. I love that <code>htop(1)</code> and <code>lsof(1)</code> only shows a small list of recognisable processes, that it uses OpenRC, that package management seems straight forward, and that it’s so simple to configure. I’ve wondered what a modern, functional “Occam’s Linux” would look like. This is it.</p>
<p>I’d be interested in seeing if <a href="https://github.com/uutils/coreutils">uutils</a> runs if I need something more than busybox, but for a server I doubt it.</p>
<figure><p><img src="https://rubenerd.com/files/2024/alpine-alpine.png" alt="Alpine running the Alpine mail client"></p></figure>
<p><em>I heard you liked Alpine, so I etc…</em></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Multiple Displays on a Mac Sucks (179 pts)]]></title>
            <link>https://wadetregaskis.com/multiple-displays-on-a-mac-sucks/</link>
            <guid>40166268</guid>
            <pubDate>Fri, 26 Apr 2024 05:46:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wadetregaskis.com/multiple-displays-on-a-mac-sucks/">https://wadetregaskis.com/multiple-displays-on-a-mac-sucks/</a>, See on <a href="https://news.ycombinator.com/item?id=40166268">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="text">
<div id="toc_container"><p>Contents</p><ul><li><a href="#The_Mac_operating_system_still_Just_Fucking_Sucks_at_remembering_where_windows_were_when_relaunching_apps">The Mac operating system still Just. Fucking. Sucks. at remembering where windows were, when relaunching apps.</a></li><li><a href="#Full-screen_apps_mostly_games_don8217t_handle_the_additional_displays_correctly">Full-screen apps (mostly games) don’t handle the additional display(s) correctly.</a></li><li><a href="#Side_Docks_aren8217t_practical">Side Docks aren’t practical.</a></li><li><a href="#The_menu_bar_is_particularly_petulant_when_multiple_displays_are_in_use">The menu bar is particularly petulant when multiple displays are in use.</a></li><li><a href="#Windows_appear_on_the_wrong_display_sometimes">Windows appear on the wrong display sometimes.</a></li><li><a href="#Multi-display_ergonomics_tend_to_suck">Multi-display ergonomics tend to suck.</a></li><li><a href="#Splitting_work_across_multiple_displays_is_hard">Splitting work across multiple displays is hard.</a></li></ul></div><p>So many people I’ve worked with have used multiple displays – typically a matched pair side-by-side – and sworn by them. It’s always mystified me, to be honest.</p>
<p>I’ve attempted the multi-display lifestyle a few times over the last thirty years. At first as a bourgeois indulgence, back when even having a single 17″ display was considered luxurious<sup data-fn="f3ad31a4-54b3-4c05-9f1f-e3057f4f8a73"><a href="#f3ad31a4-54b3-4c05-9f1f-e3057f4f8a73" id="f3ad31a4-54b3-4c05-9f1f-e3057f4f8a73-link">1</a></sup>, let-alone two displays. Just because I could. Then sporadically over the years in more practical attempts to expand my screen real estate.</p>
<p>The debut of 5k displays in 2014 relieved that pressure for a long while. It’s hard to overstate how profound that first 5k iMac was.</p>
<p>But in the last year or so I’ve felt a bit cramped – particularly as I’ve spent increasing amounts of time in Xcode, which is <em>okay</em> on a 5k display but not great. Especially if you try to do GUI design, whether AppKit or SwiftUI. Let-alone if you start working with iPad Pro simulators and the like.</p>
<p>So I’ve been considering, yet again, my options.</p>
<p>Sadly:</p>
<ol>
<li>I have an iMac Pro. Even if I were willing to waste the built-in display, I cannot – Apple does not allow iMacs to disable their internal displays.<p>I wouldn’t necessarily mind replacing the iMac Pro (it’s been a pretty shitty computer since the day it was made) but <a href="https://wadetregaskis.com/apples-timing-problem/" data-wpel-link="internal">Apple keep conspiring to discourage me from doing so</a><sup data-fn="2d929093-1c10-4680-a4bd-383b85a98e88"><a href="#2d929093-1c10-4680-a4bd-383b85a98e88" id="2d929093-1c10-4680-a4bd-383b85a98e88-link">2</a></sup>.</p></li>
<li>There aren’t any great options for larger displays.<p>Available 6k displays aren’t great<sup data-fn="85221166-1dce-4d95-b6be-6b7fa2b7c644"><a href="#85221166-1dce-4d95-b6be-6b7fa2b7c644" id="85221166-1dce-4d95-b6be-6b7fa2b7c644-link">3</a></sup>, although I’m glad there’s at least a couple of half-decent options. I never thought I’d be thankful that <em>Dell</em>, of all hardware companies, is still around and making better products than Apple.</p><p>8k displays practically don’t exist – I don’t have the physical space to use an 8k TV<sup data-fn="31755725-c69f-4729-b5d0-d0e1d2833f9f"><a href="#31755725-c69f-4729-b5d0-d0e1d2833f9f" id="31755725-c69f-4729-b5d0-d0e1d2833f9f-link">4</a></sup>, which is otherwise actually the best way to go, and <a href="https://www.dell.com/en-us/shop/dell-ultrasharp-32-8k-monitor-up3218k/apd/210-alez/monitors-monitor-accessories" data-wpel-link="external" target="_blank" rel="external noopener">the one 8k computer display</a> I know of is far too physically small for its resolution<sup data-fn="329e19a1-f614-448f-8975-7365a698f75a"><a href="#329e19a1-f614-448f-8975-7365a698f75a" id="329e19a1-f614-448f-8975-7365a698f75a-link">5</a></sup>.</p></li>
</ol>
<p>As it happened, I had an extra 5k display left over from working at LinkedIn (they wouldn’t provide decent displays to employees while I was there, so I had to buy my own out of my own pocket<sup data-fn="3f8979d6-ea6a-4991-afc8-845186aeb8a5"><a href="#3f8979d6-ea6a-4991-afc8-845186aeb8a5" id="3f8979d6-ea6a-4991-afc8-845186aeb8a5-link">6</a></sup>). So far as multi-display setups go it’s arguably ideal, since it’s basically the exact same panel as the iMac Pro’s display, so it should match quite well<sup data-fn="9cf23db5-75b6-40a4-88cd-48d1ad743001"><a href="#9cf23db5-75b6-40a4-88cd-48d1ad743001" id="9cf23db5-75b6-40a4-88cd-48d1ad743001-link">7</a></sup>. So a few months ago I went to some effort to rearrange my working space to accomodate it, and set to work with it.</p>
<p>And not a lot has changed in thirty years.</p>
<h2><span id="The_Mac_operating_system_still_Just_Fucking_Sucks_at_remembering_where_windows_were_when_relaunching_apps">The Mac operating system <em>still</em> Just. Fucking. Sucks. at remembering where windows were, when relaunching apps.</span></h2>
<p>For the first month or so it was mostly fine – a couple of apps would be <em>occasionally</em> problematic, but it was tolerable. Mostly. Xcode in particularly pisses me off in that it <em>always</em> forgets where the documentation window was, every time you open it<sup data-fn="08475590-6d49-4fed-ab6b-99455053ae2a"><a href="#08475590-6d49-4fed-ab6b-99455053ae2a" id="08475590-6d49-4fed-ab6b-99455053ae2a-link">8</a></sup>.</p>
<p>But then, something invisible to me apparently happened, and since then <em>every single boot every single window resets its position onto the built-in display</em>. Every single boot I have to spend a bunch of time digging buried windows out from the over-crowded main display and shifting them back to their correct positions on the second display.</p>
<p>I might dismiss this as particular bad luck, except I know from decades of experience that this is in fact normal.  It <em>always</em> happens, sooner or later.  And at some point it will unfuck itself and start [mostly] remembering where windows go.  Only to inevitably repeat the vicious cycle.</p>
<h2><span id="Full-screen_apps_mostly_games_don8217t_handle_the_additional_displays_correctly">Full-screen apps (mostly games) don’t handle the additional display(s) correctly.</span></h2>
<p>i.e. they ignore them, typically. It’s very distracting having a bright display right next to one on which you’re trying to play a game. Every time I launch or exit such an app I have to manually open System Settings, go to Display settings, click the secondary display, and manually changes its brightness.</p>
<p>My secondary display (<a href="https://www.lg.com/us/monitors/lg-27md5kl-b-5k-uhd-led-monitor" data-wpel-link="external" target="_blank" rel="external noopener">LG 5k</a>) doesn’t have a power button, and I found out real quick that unplugging the Thunderbolt cable confuses the hell out of macOS, resulting in windows going wild and some apps outright crashing.</p>
<h2><span id="Side_Docks_aren8217t_practical">Side Docks aren’t practical.</span></h2>
<p>When the Dock is on the side, it only appears on the display that is farthest to that side.  Having to move the mouse across <em>multiple</em> displays just to get to the Dock is untenably slow and awkward.</p>
<p>I have the Dock set to auto-hide, because I’m not a monster.  But that does mean I have to be careful about mouse movements near its edge of the screen.</p>
<p>I prefer having the Dock on the left-hand side because it’s the least intrusive place – there’s relatively little you have to mouse to or interact with on the left edge (the right side is second-best, but notably is the home of scrollbars).  It’s also slightly easier to mouse left (or right) than down, because moving the mouse ‘down’ (towards me) has extra tension from the USB cable.</p>
<p>With multiple monitors (in a typical horizontal arrangement), I’m forced to use a bottom Dock, which is the worst place to have the Dock because so much stuff is placed right at the bottom of the screen – window resize widgets, toolbars &amp; their buttons, horizontal scrollbars, etc.  It’s immensely irritating to have to finesse minute mouse movements in order to avoid triggering the Dock while somehow still getting the cursor within a few pixels of the edge of the screen.  Sometimes it’s necessary to move the entire window just to interact with its bottom parts – which can in turn require first resizing it from the top, in order to allow it to be moved upwards.</p>
<h2></h2>
<p>I have the menu bar set to auto-hide, partly for reasons of visual cleanliness and to save a little screen space, but also because the menubar ruined my previous iMac’s display by burning in, hard.</p>
<p>I also use the menubar a lot more than for just activating menus with the mouse – I have iStat Menus and a host of other monitoring utilities in there as well.  So I’m frequently mousing up to the top of the screen to reveal the menubar.  Which is not a burden in itself – flicking the mouse to the top of the screen is a completely trivial operation.</p>
<p>But it doesn’t work half the time, when you have multiple displays, because the menubar will only deign to reveal itself on the “active” display, which is often at a glance visually indistinguishable from the “inactive” display (thanks to Apple’s long-running war against clarity).</p>
<p>That defeats the instinct and muscle-memory to just flick the cursor to the top of the display in order to see the menubar.  Worse, since macOS has some design flaws regarding menu bar reveal (e.g. it refuses to reveal if the frontmost application’s main thread runloop isn’t idle, and whenever an application is launching), you can’t immediately tell if it’s refusing to reveal itself because the cursor’s on the “wrong” display.  So inevitably there’s wasted, distracting moments of pause and investigation, and possibly movement to a whole different display.  For an operation that happens hundreds of times a day, wasted seconds add up.</p>
<h2><span id="Windows_appear_on_the_wrong_display_sometimes">Windows appear on the wrong display sometimes.</span></h2>
<p>Enough said, really.  I have no idea why they appear in the wrong places, but then so much about macOS’s window management is inexplicably buggy like this, such as why some modal dialogs appear <em>behind</em> all existing windows.</p>
<h2><span id="Multi-display_ergonomics_tend_to_suck">Multi-display ergonomics tend to suck.</span></h2>
<p>If – in a typical horizontal arrangement – you give the two displays equal priority in placement, you end up with one to your left and one to your right, with a very irritating gap between them in the one place it’s natural to look – straight ahead of you.  Neither display is aligned with the keyboard or mouse, which I find impairs typing and mousing accuracy (especially with a treadmill desk where I’m constantly moving).  And I find I get a sore neck no matter what, because I’m spending all my time looking anywhere but centre.</p>
<p>If you keep a “primary” display front and centre, and put a second one off to a side, the second display becomes <em>much</em> less useful because it’s even more uncomfortable to actually look at.  Which couples with the fact that…</p>
<h2><span id="Splitting_work_across_multiple_displays_is_hard">Splitting work across multiple displays is <em>hard</em>.</span></h2>
<p>More so than it seems it should be. But in practice there’s a <em>big</em> difference between two windows side-by-side on one display, and two windows on separate displays (<em>especially</em> if the displays aren’t identical, or aren’t aligned on horizontal or vertical axes). Maybe it’s as a simple as the difference between moving your eyes and moving your head.</p>
<p>Whatever it is, I just cannot get comfortable moving between displays frequently. That then forces me to not put anything <em>important</em> on the second display (especially if it has an ergonomically inferior position compared to the primary display), so it ends up being kind of a dumping ground for stuff I don’t actually use that often – e.g. calendar, clipboard viewers, calculators, etc.</p>
<p>And since I don’t actually use them that often, there’s really not much advantage to having them on a second display, versus just bringing them to the front on the main display and then hiding them again when I’m done. In fact, sometimes it’s counter-productive as irrelevant animations on the second display distract me, whereas they’d be safely out of sight behind other windows on the main display.</p>
<p>The only meaningful use-case I have so far for genuine simultaneous use is moving information references – e.g. Xcode’s documentation window – to the second display. In fact that was the specific use-case that made me go to the trouble of hooking up the second display, since it’s practically impossible to fit a non-trivial Xcode project into just half a 5k display, and having to constantly toggle between code &amp; documentation is irritating and a little disruptive – there’s often a <em>lot</em> of rapid back-and-forth between code &amp; docs, which is of course much easier if they’re simultaneously visible.</p>
<ol><li id="f3ad31a4-54b3-4c05-9f1f-e3057f4f8a73">Apple’s first so-called 17″ display (it was actually only 16.5″) was the <a href="https://everymac.com/monitors/apple/multiple_scan/specs/multiple_scan_17.html" data-wpel-link="external" target="_blank" rel="external noopener">Apple Multiple Scan 17</a>, released in 1994 for USD$1,100 (not counting taxes). That’s equivalent to about $2,500 today. For a display that could do just 1024×768 – but, in a time when 640×480 was the vastly dominant standard, so that was a <em>huge</em> leap up in display resolution – 156%! It’s the same as going from a 4k to 6k display. <a href="#f3ad31a4-54b3-4c05-9f1f-e3057f4f8a73-link" aria-label="Jump to footnote reference 1">↩︎</a></li><li id="2d929093-1c10-4680-a4bd-383b85a98e88">I say that with some sense of humility and humour, of course. But the effect is real, even if arguably irrational. Nobody likes buying something that they know is about to be replaced, nor something that’s a bit outdated even at its start, irrespective of whether it’s functionally sufficient for their needs. <a href="#2d929093-1c10-4680-a4bd-383b85a98e88-link" aria-label="Jump to footnote reference 2">↩︎</a></li><li id="85221166-1dce-4d95-b6be-6b7fa2b7c644"><a href="https://www.apple.com/pro-display-xdr/" data-wpel-link="external" target="_blank" rel="external noopener">Apple’s 6k display</a> is stupidly over-priced, even by Apple standards, and uses a severely compromised design with its coarse backlight zoning system. That results in significant blooming, which is annoying even for casual use but particularly problematic for photography and videography. I’d rather have a uniform display with lower contrast – like existing 5k displays – as the lesser of the two evils, since that more faithfully reproduces images.<p><a href="https://www.dell.com/en-us/shop/dell-ultrasharp-32-6k-monitor-u3224kb/apd/210-bhbz/monitors-monitor-accessories#techspecs_section" data-wpel-link="external" target="_blank" rel="external noopener">Dell’s 6k display</a> is a better option, having made better decisions on key design compromises, but it’s still a bit pricey and it’s a bit dim at just 450 cd/m². Good enough for coding in a not too brightly lit room, but it’s pretty useless for working with HDR imagery. <a href="#85221166-1dce-4d95-b6be-6b7fa2b7c644-link" aria-label="Jump to footnote reference 3">↩︎</a></p></li><li id="31755725-c69f-4729-b5d0-d0e1d2833f9f">The smallest I can find is 65″, which would mean sitting at least a metre away from it to avoid seeing its individual pixels. Not <em>impossible</em>, but deeper than most people’s desks. And a corner desk (like mine) has a lot less usable depth due to the angle of the walls, making it completely impossible to fit a 65″ display at all, let-alone while maintaining a practical viewing distance. <a href="#31755725-c69f-4729-b5d0-d0e1d2833f9f-link" aria-label="Jump to footnote reference 4">↩︎</a></li><li id="329e19a1-f614-448f-8975-7365a698f75a">Apple pretty much nailed it with their 5k displays, right from the start; 27″ is a good size for them. At a healthy viewing distance of about 70cm, it’s about 111 PPD (pixels per degree) which is close enough to the limit of even excellent human vision (~130 PPD) to make it genuinely a ‘retina’ display (where you can’t typically distinguish individual pixels) for most people without <em>wasting</em> a lot of pixels. And if you have exceptionally good vision, situating yourself a little farther away is plausible in most setups. <p><a href="https://www.dell.com/en-us/shop/dell-ultrasharp-32-8k-monitor-up3218k/apd/210-alez/monitors-monitor-accessories" data-wpel-link="external" target="_blank" rel="external noopener">Dell’s 8k display</a>, on the other hand, is a mere 32″, yielding a PPD of 143 – <em>way</em> higher than necessary and meaning you can’t <em>actually</em> utilise its full resolution at typical viewing distances – it’d require being within 50cm, which might not sound all that bad but try it; 50cm is <em>really</em> close to any computer display, let-alone a relatively large one at 32″.</p><p>8k displays <em>should</em> be about 44″, to be optimal. <a href="#329e19a1-f614-448f-8975-7365a698f75a-link" aria-label="Jump to footnote reference 5">↩︎</a></p></li><li id="3f8979d6-ea6a-4991-afc8-845186aeb8a5">And lest you think I was just a fussy princess, know that quite a lot of my colleagues did the same. You could look around the office and get a pretty good idea about who really <em>cared</em> about their work (or at least their eyes), by looking at whether they had the company-issued displays or not. <a href="#3f8979d6-ea6a-4991-afc8-845186aeb8a5-link" aria-label="Jump to footnote reference 6">↩︎</a></li><li id="9cf23db5-75b6-40a4-88cd-48d1ad743001">In practice it doesn’t – they differ substantially in temperature, with the LG display being too warm, but I could probably fix that by properly calibrating the LG display… I just haven’t bothered. I <em>used</em> to obsess over monitor calibration, years ago, until I became more aware of just how incredibly situational and subjective human colour perception is anyway (and how well-calibrated Apple’s displays usually are already, out of the box).<p>It’s largely pointless stressing over small errors in colour when you have no control over the viewing context anyway – let-alone the fact that most people view content on tiny little phone displays that are comically not colour-accurate, and can’t see anything anyway. <a href="#9cf23db5-75b6-40a4-88cd-48d1ad743001-link" aria-label="Jump to footnote reference 7">↩︎</a></p></li><li id="08475590-6d49-4fed-ab6b-99455053ae2a">But then, it essentially forgets the windows contents themselves, anyway. It preserves <em>only</em> the first open tab, not any of the others. When I’m in the middle of development and I accidentally close the documentation window – losing a dozen open tabs that were very precisely tied to what I was working at that exact moment – I want to throw my whole god damn computer through a wall.<p>So, Xcode is an infuriating piece of shit even on one display, in that respect. Somehow that’s little consolation. <a href="#08475590-6d49-4fed-ab6b-99455053ae2a-link" aria-label="Jump to footnote reference 8">↩︎</a></p></li></ol></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Passkeys: A Shattered Dream (301 pts)]]></title>
            <link>https://fy.blackhats.net.au/blog/2024-04-26-passkeys-a-shattered-dream/</link>
            <guid>40165998</guid>
            <pubDate>Fri, 26 Apr 2024 04:36:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fy.blackhats.net.au/blog/2024-04-26-passkeys-a-shattered-dream/">https://fy.blackhats.net.au/blog/2024-04-26-passkeys-a-shattered-dream/</a>, See on <a href="https://news.ycombinator.com/item?id=40165998">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
        <p>At around 11pm last night my partner went to change our lounge room lights with our home
light control system. When she tried to login, her account couldn't be accessed. Her Apple
Keychain had deleted the Passkey she was using on that site.</p>
<p>This is just the icing on a long trail of <a href="https://en.wikipedia.org/wiki/Enshittification">enshittification</a>
that has undermined Webauthn. I'm over it at this point, and I think it's time to pour one out
for Passkeys. The irony is not lost on me that I'm about to release a new major version of
<a href="https://crates.io/crates/webauthn-rs">webauthn-rs</a> today as I write this.</p>
<h2 id="the-dream">The Dream</h2>
<p>In 2019 I flew to my mates place in Sydney and spent a week starting to write what is now
<em>the</em> Webauthn library for Rust. In that time I found a number of issues in the standard and
contributed improvements to the Webauthn workgroup, even though it took a few years
for those issues to be resolved. I started to review things and participate more.</p>
<p>At the time there was a lot of optimism that this technology could be the end of passwords. You had
three major use cases:</p>
<ul>
<li>Second Factor</li>
<li>Passwordless</li>
<li>Usernameless</li>
</ul>
<p>Second Factor was a stepping stone toward the latter two. Passwordless is where you would still type
in an account name then authenticate with PIN+Touch to your security key, and usernameless is where
the identity for your account was resident (discoverable) on the key. This was (from my view) seen
as a niche concept by developers since really - how hard is it for a site to have a checkbox that
says "remember me"?</p>
<p>This library ended up with Kanidm being (to my knowledge) the very first OpenSource IDM to implement
passwordless (now passkeys). The experience was wonderful. You went to Kanidm, typed
in your username and then were prompted to type your PIN and touch your key. Simple, fast, easy.</p>
<p>For devices like your iPhone or Android, you would do similar - just use your Touch ID and you're in.</p>
<p>It was so easy, so accessible, I remember how it almost felt impossible. That authentication could
be cryptographic in nature, but so usable and trivial for consumers. There really was the idea and
goal within FIDO and Webauthn that this could be "the end of passwords".</p>
<p>This is what motivated me to continue to improve webauthn-rs. It's reach has gone beyond what I
expected with parts of it being used in Firefox's authenticator-rs, a whole microcosm of Rust Identity Providers (IDPs)
being created from this library and my work, and even <em>other</em> language's Webauthn implementations
and password managers using our library as <em>the</em> reference implementation to test against. I can
not understate how humbled I am of the influence webauthn-rs has had.</p>
<h2 id="the-warnings">The Warnings</h2>
<p>However warnings started to appear that the standard was not as open as people envisaged. The issue
we have is well known - Chrome controls a huge portion of the browser market, and development is
tightly controlled by Google.</p>
<p>An example of this was the <a href="https://www.w3.org/TR/webauthn-1/#sctn-authenticator-selection-extension">Authenticator Selection Extension</a>.</p>
<p>This extension is <em>important</em> for sites that have strict security requirements because they will
attest the make and model of the authenticator in use. If you know that the attestation will only
accept certain devices, then the browser should filter out and only allow those devices to participate.</p>
<p>However Chrome simply never implemented it leading to it being <a href="https://github.com/w3c/webauthn/issues/1386">removed</a>.
And it was removed because Chrome never implemented it. As a result, if Chrome doesn't like something
in the specification they can just veto it without consequence.</p>
<p>Later the <a href="https://github.com/w3c/webauthn/issues/1688#issuecomment-1011516074">justification</a> for
this not being implemented was: "We have never implemented it because we don't feel that authenticator
discrimination is broadly a good thing. ... they [users] <em>should</em> have the expectation that a given
security key will broadly work where they want to use it."</p>
<p><em>I want you to remember this quote and it's implications.</em></p>
<p><em>Users should be able to use any device they choose without penalty.</em></p>
<p>Now I certainly agree with this notion for general sites on the internet, but within a business where
we have policy around what devices may be acceptable the ability to filter devices does matter.</p>
<p>This makes it very possible that you can go to a corporate site, enroll a security key and it appears to work
but then it will fail to register (even better if this burns one of your resident key slots that can
not be deleted without a full reset of your device) since the
IDP rejected the device attestation. That's right, even without this, IDP's can still "discriminate"
against devices without this extension, but the user experience is much worse, and the consequences far
more severe in some cases.</p>
<p>The kicker is that Chrome has internal feature flags that they can use for Google's needs. They
can simply enable their own magic features that control authenticator models for their policy, while
everyone else has to have a lesser experience.</p>
<p>The greater warning here is that many of these decisions are made at "F2F" or Face to Face meetings
held in the US. This excludes the majority of international participants leading some voices to be
stronger than others. It's hard to convince someone when you aren't in the room, even more so
when the room is in a country that has a list of <a href="https://www.smartraveller.gov.au/destinations/americas/united-states-america">travel advisories</a>
including "Violent crime is more common in the US than in Australia", "There is a persistent threat
of mass casualty violence and terrorist attacks in the US" and "Medical costs in the US are extremely
high. You may need to pay up-front for medical assistance". (As an aside, there are countries that
have a "do not travel" warning for less, but somehow the US gets a pass ...).</p>
<h2 id="the-descent">The Descent</h2>
<p>In 2022 Apple annouced <a href="https://appleinsider.com/articles/22/06/07/apple-passkey-feature-will-be-our-first-taste-of-a-truly-password-less-future">Passkeys</a>.</p>
<p>At the time this was just a really nice "marketing" term for passwordless, and Apple's Passkeys had
the ability to oppurtunistically be usernameless. It was all in all very polished and well done.</p>
<p>But of course, thought leaders exist, and Apple hadn't defined what a Passkey was. One of those
thought leaders took to the FIDO conference stage and announced "Passkeys are resident keys", at
the same time as the unleashed a passkeys dev website (I won't link to it out of principal).</p>
<p>The issue is described in detail in another of <a href="https://fy.blackhats.net.au/blog/2023-02-02-how-hype-will-turn-your-security-key-into-junk/">my blog posts</a>
but to summarise, this push to resident keys means that security keys are excluded because they often
have extremely low limits on storage, the highest being 25 for yubikeys. That simply won't cut it for
most people where they have more than 25 accounts.</p>
<p>Now with resident keys as passkeys as users we certainly don't have the expectation that our
security keys will work when we want to use them!</p>
<h2 id="the-enshittocene-period">The Enshittocene Period</h2>
<p>Since then Passkeys are now seen as a way to capture users and audiences into a platform. What better
way to encourage long term entrapment of users then by locking all their credentials into your platform,
and even better, credentials that can't be extracted or exported in any capacity.</p>
<p>Both Chrome and Safari will try to force you into using either hybrid (caBLE) where you scan a QR code
with your phone to authenticate - you have to click through menus to use a security key. caBLE is
not even a good experience, taking more than 60 seconds work in most cases. The UI is beyond
obnoxious at this point. Sometimes I think <a href="https://neal.fun/password-game/">the password game has a better ux</a>.</p>
<p>The more egregious offender is Android, which <a href="https://github.com/kanidm/webauthn-rs/issues/365#issuecomment-1756605203">won't even activate your security key</a>
if the website sends the set of options that are needed for Passkeys. This means the IDP gets to
choose what device you enroll without your input. And of course, all the developer examples only
show you the options to activate "Google Passkeys stored in Google Password Manager". After all,
why would you want to use anything else?</p>
<p>A sobering pair of reads are the <a href="https://github.com/orgs/community/discussions/54450">Github Passkey Beta</a>
and <a href="https://github.com/orgs/community/discussions/67791">Github Passkey</a> threads. There are instances of
users whose security keys are not able to be enrolled as the resident key slots are filled. Multiple
users describe that Android can not create Passkeys due to platform bugs. Some devices need firmware
resets to create Passkeys. Keys can be saved on the client but not the server leading to duplicate
account presence and credentials that don't work, or worse lead users to delete the
<a href="https://bugs.webkit.org/show_bug.cgi?id=270553">real credentials</a>.</p>
<p>The helplessness of users on these threads is obvious - and these are technical early adopters. The
users we need to be advocates for changing from passwords to passkeys. If these users can't make it
work how will people from other disciplines fare?</p>
<p>Externally there are other issues. Apple Keychain has personally wiped out all my Passkeys on
<em>three separate occasions</em>. There are external reports we have recieved of other users who's
Keychain Passkeys have been wiped just like mine.</p>
<p>Now as users we have the expectation that keys won't be created or they will have disappeared
when we need them most.</p>
<p>In order to try to resolve this the workgroup seems to be doubling down on more complex JS apis to
try to patch over the issues that they created in the first place. All this extra complexity comes
with fragility and more bad experiences, but without resolving the core problems.</p>
<p>It's a mess.</p>
<h2 id="the-future">The Future</h2>
<p>At this point I think that Passkeys will fail in the hands of the general consumer population. We
missed our golden chance to eliminate passwords through a desire to capture markets and promote hype.</p>
<p>Corporate interests have overruled good user experience once again. Just like ad-blockers, I predict
that Passkeys will only be used by a small subset of the technical population, and consumers will
generally reject them.</p>
<p>To reiterate - my partner, who is extremely intelligent, an avid computer gamer and <em>veterinary surgeon</em>
has sworn off Passkeys because the user experience is so shit. She wants to go back to passwords.</p>
<p>And I'm starting to agree - a password manager gives a better experience than passkeys.</p>
<p>That's right. I'm here saying <em>passwords are a better experience than passkeys</em>. Do you know how much
it pains me to write this sentence? (and yes, that means MFA with TOTP is still important for
passwords that require memorisation outside of a password manager).</p>
<p>So do yourself a favour. Get something like <a href="https://bitwarden.com/">bitwarden</a> or if you like
self hosting get <a href="https://github.com/dani-garcia/vaultwarden">vaultwarden</a>. Let it generate your
passwords and manage them. If you really want passkeys, put them in a password manager you control.
But don't use a platform controlled passkey store, and be very careful with security keys.</p>
<p>And if you do want to use a security key, just use it to unlock your password manager and your email.</p>
<p>Within enterprise there still is a place for attested security keys where you can
control the whole experience to avoid the vendor lockin parts. It still has
rough edges though. Just today I found a browser that has broken attestation which is not good. You still
have to dive through obnoxious UX elements that attempt to force you through caBLE even though
your IDP will only accept certain security models, so you're still likely to have some confused
users.</p>
<p>But at this point, in Kanidm we are looking into device certificates and smartcards instead. The UI
is genuinely better. Which says a lot considering the PKCS11 and PIV specifications. But at least
PIV won't fall prone to attempts to enshittify it.</p>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[MFJ is ceasing its on-site production (143 pts)]]></title>
            <link>https://mailchi.mp/62e24f2ccc99/a-heavy-sad-heart</link>
            <guid>40164793</guid>
            <pubDate>Fri, 26 Apr 2024 00:50:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mailchi.mp/62e24f2ccc99/a-heavy-sad-heart">https://mailchi.mp/62e24f2ccc99/a-heavy-sad-heart</a>, See on <a href="https://news.ycombinator.com/item?id=40164793">Hacker News</a></p>
<div id="readability-page-1" class="page"><div width="100%">
    <tbody>
        <tr>
            <td>
              	<!--[if mso]>
				<table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign="top" width="600" style="width:600px;">
				<![endif]-->
                <div>
                        
                            <h3><span>Dear Fellow Hams and Friends, </span></h3>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; April 25, 2024<br>
Dear Fellow Hams and Friends, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<p>
&nbsp;
&nbsp;&nbsp; It is with a sad heart as I write this letter.</p><p>
&nbsp;
&nbsp;&nbsp; As many of you have heard by now, MFJ is ceasing its on-site production in Starkville, Mississippi on May 17, 2024.&nbsp; This is also the same for our sister companies’ Ameritron, Hygain, Cushcraft, Mirage and Vectronics.</p><p>
&nbsp;
&nbsp;&nbsp; Times have changed since I started this business 52 years ago.&nbsp; Our product line grew and grew and prospered.&nbsp; Covid changed everything in businesses including ours.&nbsp; It was the hardest hit that we have ever had and we never fully recovered.&nbsp;</p><p>
&nbsp;
&nbsp;&nbsp; I turned 80 this year.&nbsp; I had never really considered retirement but life is so short and my time with my family is so precious.</p><p>
&nbsp;
&nbsp;&nbsp; I want to thank all of our employees who have helped build this company with me over the years.&nbsp; We have many employees who have made MFJ their career for 10, 20, 30, 40 and more years.&nbsp;</p><p>
&nbsp;
&nbsp;&nbsp; We are going to continue to sell MFJ products past May 17, 2024.&nbsp; We have a lot of stock on hand. We will continue to offer repair service work for out-of-warranty and in-warranty units for the foreseeable future.&nbsp;</p><p>
&nbsp;
&nbsp;&nbsp; Finally, a special thanks to all of our customers and our dealers who have made MFJ a worldwide name and a profitable business for so many years.&nbsp; You all are so much appreciated.</p><p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sincerely Yours, 73s</p><p>
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Martin F. Jue, K5FLU</p></span><br>
&nbsp;
                        </div>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Visualizing malicious IP addresses (112 pts)]]></title>
            <link>https://romeov.github.io/malicious_ip_addresses/malicious_ip_analysis.html</link>
            <guid>40164337</guid>
            <pubDate>Thu, 25 Apr 2024 23:32:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://romeov.github.io/malicious_ip_addresses/malicious_ip_analysis.html">https://romeov.github.io/malicious_ip_addresses/malicious_ip_analysis.html</a>, See on <a href="https://news.ycombinator.com/item?id=40164337">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Jeff Lawson Buys The Onion (307 pts)]]></title>
            <link>https://www.nytimes.com/2024/04/25/business/media/the-onion-sold.html</link>
            <guid>40164199</guid>
            <pubDate>Thu, 25 Apr 2024 23:11:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/04/25/business/media/the-onion-sold.html">https://www.nytimes.com/2024/04/25/business/media/the-onion-sold.html</a>, See on <a href="https://news.ycombinator.com/item?id=40164199">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/04/25/business/media/the-onion-sold.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Apple releases eight small AI language models aimed at on-device use (144 pts)]]></title>
            <link>https://arstechnica.com/information-technology/2024/04/apple-releases-eight-small-ai-language-models-aimed-at-on-device-use/</link>
            <guid>40163882</guid>
            <pubDate>Thu, 25 Apr 2024 22:30:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/information-technology/2024/04/apple-releases-eight-small-ai-language-models-aimed-at-on-device-use/">https://arstechnica.com/information-technology/2024/04/apple-releases-eight-small-ai-language-models-aimed-at-on-device-use/</a>, See on <a href="https://news.ycombinator.com/item?id=40163882">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h4>
      Inside the Apple core    —
</h4>
            
            <h2 itemprop="description">OpenELM mirrors efforts by Microsoft to make useful small AI language models that run locally.</h2>
                    </div><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/04/apple_toss_hero_1-800x450.jpg" alt="An illustration of a robot hand tossing an apple to a human hand.">
      <figcaption><p>Getty Images</p></figcaption>  </figure>

  




<!-- cache hit 417:single/related:a86d0b7aa942134b017bbd22e24da273 --><!-- empty -->
<p>In the world of AI, what might be called "small language models" have been growing in popularity recently because they can be run on a local device instead of requiring data center-grade computers in the cloud. On Wednesday, Apple<a href="https://huggingface.co/apple/OpenELM"> introduced</a> a set of tiny source-available AI language models called OpenELM that are small enough to run directly on a smartphone. They're mostly proof-of-concept research models for now, but they could form the basis of future on-device AI offerings from Apple.</p>

<p>Apple's new AI models, collectively named OpenELM for "Open-source Efficient Language Models," are currently available on the <a href="https://huggingface.co/apple/OpenELM">Hugging Face</a> under an <a href="https://huggingface.co/apple/OpenELM/blob/main/LICENSE">Apple Sample Code License</a>. Since there are some restrictions in the license, it may not fit the <a href="https://opensource.org/osd">commonly accepted definition</a> of "open source," but the source code for OpenELM is available.</p>
<p>On Tuesday, we covered <a href="https://arstechnica.com/information-technology/2024/04/microsofts-phi-3-shows-the-surprising-power-of-small-locally-run-ai-language-models/">Microsoft's Phi-3 models</a>, which aim to achieve something similar: a useful level of language understanding and processing performance in small AI models that can run locally. Phi-3-mini features 3.8 billion parameters, but some of Apple's OpenELM models are much smaller, ranging from 270 million to 3 billion parameters in eight distinct models.</p>
<p>In comparison, the largest model yet released in <a href="https://arstechnica.com/information-technology/2024/04/meta-releases-chatgpt-like-ai-site-and-open-weights-llama-3-model/">Meta's Llama 3</a> family includes 70 billion parameters (with a 400 billion version on the way), and OpenAI's GPT-3 from 2020 shipped with 175 billion parameters. Parameter count serves as a rough measure of AI model capability and complexity, but recent research has focused on making smaller AI language models as capable as larger ones were a few years ago.</p>
<p>The eight OpenELM models come in two flavors: four as "pretrained" (basically a raw, next-token version of the model) and four as instruction-tuned (fine-tuned for instruction following, which is more ideal for developing AI assistants and chatbots):</p>                                            
                                                        
<ul>
<li><a href="https://huggingface.co/apple/OpenELM-270M">OpenELM-270M</a></li>
<li><a href="https://huggingface.co/apple/OpenELM-450M">OpenELM-450M</a></li>
<li><a href="https://huggingface.co/apple/OpenELM-1_1B">OpenELM-1_1B</a></li>
<li><a href="https://huggingface.co/apple/OpenELM-3B">OpenELM-3B</a></li>
<li><a href="https://huggingface.co/apple/OpenELM-270M-Instruct">OpenELM-270M-Instruct</a></li>
<li><a href="https://huggingface.co/apple/OpenELM-450M-Instruct">OpenELM-450M-Instruct</a></li>
<li><a href="https://huggingface.co/apple/OpenELM-1_1B-Instruct">OpenELM-1_1B-Instruct</a></li>
<li><a href="https://huggingface.co/apple/OpenELM-3B-Instruct">OpenELM-3B-Instruct</a></li>
</ul>
<p>OpenELM features a 2048-token maximum context window. The models were trained on the publicly available datasets <a href="https://arxiv.org/abs/2306.01116">RefinedWeb</a>, a version of <a href="https://pile.eleuther.ai/">PILE</a> with duplications removed, a subset of <a href="https://github.com/togethercomputer/RedPajama-Data">RedPajama</a>, and a subset of <a href="https://huggingface.co/datasets/allenai/dolma">Dolma v1.6</a>, which Apple says totals around 1.8 trillion tokens of data. Tokens are fragmented representations of data used by AI language models for processing.</p>
<p>Apple says its approach with OpenELM includes a "layer-wise scaling strategy" that reportedly allocates parameters more efficiently across each layer, saving not only computational resources but also improving the model's performance while being trained on fewer tokens. According to Apple's released <a href="https://arxiv.org/pdf/2404.14619">white paper</a>, this strategy has enabled OpenELM to achieve a 2.36 percent improvement in accuracy over Allen AI's <a href="https://allenai.org/olmo">OLMo 1B</a> (another small language model) while requiring half as many pre-training tokens.</p>
<figure><a href="https://cdn.arstechnica.net/wp-content/uploads/2024/04/open_elm_table.jpg" data-height="312" data-width="1077" alt="An table comparing OpenELM with other small AI language models in a similar class, taken from the OpenELM research paper by Apple."><img alt="An table comparing OpenELM with other small AI language models in a similar class, taken from the OpenELM research paper by Apple." src="https://cdn.arstechnica.net/wp-content/uploads/2024/04/open_elm_table-640x185.jpg" width="640" height="185" srcset="https://cdn.arstechnica.net/wp-content/uploads/2024/04/open_elm_table.jpg 2x"></a><figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2024/04/open_elm_table.jpg" data-height="312" data-width="1077">Enlarge</a> <span>/</span> An table comparing OpenELM with other small AI language models in a similar class, taken from the OpenELM research paper by Apple.</p><p>Apple</p></figcaption></figure>
<p>Apple also released the code for <a href="https://github.com/apple/corenet">CoreNet</a>, a library it used to train OpenELM—and it also included reproducible training recipes that allow the weights (neural network files) to be replicated, which is unusual for a major tech company so far. As Apple says in its OpenELM paper abstract, transparency is a key goal for the company: "The reproducibility and transparency of large language models are crucial for advancing open research, ensuring the trustworthiness of results, and enabling investigations into data and model biases, as well as potential risks."</p>

<p>By releasing the source code, model weights, and training materials, Apple says it aims to "empower and enrich the open research community." However, it also cautions that since the models were trained on publicly sourced datasets, "there exists the possibility of these models producing outputs that are inaccurate, harmful, biased, or objectionable in response to user prompts."</p>
<p>While Apple has not yet integrated this new wave of AI language model capabilities into its consumer devices, the upcoming iOS 18 update (expected to be <a href="https://arstechnica.com/gadgets/2024/03/wwdc-2024-starts-on-june-10-with-announcements-about-ios-18-and-beyond/">revealed in June</a> at WWDC) is rumored to include new AI features that <a href="https://arstechnica.com/apple/2024/01/apple-aims-to-run-ai-models-directly-on-iphones-other-devices/">utilize on-device processing</a> to ensure user privacy—though the company may potentially <a href="https://arstechnica.com/information-technology/2024/03/apple-may-hire-google-to-power-new-iphone-ai-features-using-gemini-report/">hire Google</a> or OpenAI to handle more complex, off-device AI processing to give Siri a long-overdue boost.</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Open Sourcing DOS 4 (619 pts)]]></title>
            <link>https://www.hanselman.com/blog/open-sourcing-dos-4</link>
            <guid>40163405</guid>
            <pubDate>Thu, 25 Apr 2024 21:42:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.hanselman.com/blog/open-sourcing-dos-4">https://www.hanselman.com/blog/open-sourcing-dos-4</a>, See on <a href="https://news.ycombinator.com/item?id=40163405">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
        <section>
            
            <p><img title="Beta DOS Disks" alt="Beta DOS Disks" src="https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/Open-Sourcing-DOS-4_E712/clip_image002_5b6e1c02-95d8-4ee1-87af-ca53a8b0bd56.png" width="500" height="342"><em>See <a href="https://cloudblogs.microsoft.com/opensource/2024/04/25/open-sourcing-ms-dos-4-0/">the canonical version of this blog post at the Microsoft Open Source Blog</a>!</em>  </p><p>Ten years ago, <a href="https://devblogs.microsoft.com/commandline/re-open-sourcing-ms-dos-1-25-and-2-0/">Microsoft released the source for MS-DOS 1.25 and 2.0</a> to the Computer History Museum, and then <a href="https://github.com/microsoft/MS-DOS">later republished them</a> for reference purposes. This code holds an important place in history and is a fascinating read of an operating system that was written entirely in 8086 assembly code nearly 45 years ago. </p> <p>Today, in partnership with IBM and in the spirit of open innovation, we're releasing the source code to MS-DOS 4.00 under the MIT license. There's a somewhat complex and fascinating history behind the 4.0 versions of DOS, as Microsoft partnered with IBM for portions of the code but also created a branch of DOS called Multitasking DOS that did not see a wide release. </p> <p><a title="https://github.com/microsoft/MS-DOS?WT.mc_id=-blog-scottha" href="https://github.com/microsoft/MS-DOS?WT.mc_id=-blog-scottha"><strong>https://github.com/microsoft/MS-DOS</strong></a></p> <p>A young English researcher named <a href="https://starfrost.net/blog/001-mdos4-part-1/">Connor "Starfrost" Hyde</a> recently corresponded with former Microsoft Chief Technical Officer Ray Ozzie about some of the software in his collection. Amongst the floppies, Ray found unreleased beta binaries of DOS 4.0 that he was sent while he was at Lotus. Starfrost reached out to the Microsoft Open Source Programs Office (OSPO) to explore releasing DOS 4 source, as he is working on documenting the relationship between DOS 4, MT-DOS, and what would eventually become OS/2. Some later versions of these Multitasking DOS binaries can be found around the internet, but these new Ozzie beta binaries appear to be much earlier, unreleased, and also include the ibmbio.com source.&nbsp; </p> <p>Scott Hanselman, with the help of internet archivist and enthusiast Jeff Sponaugle, has imaged these original disks and carefully scanned the original printed documents from this "Ozzie Drop". Microsoft, along with our friends at IBM, think this is a fascinating piece of operating system history worth sharing.&nbsp; </p> <p>Jeff Wilcox and OSPO went to the Microsoft Archives, and while they were unable to find the full source code for MT-DOS, they did find MS DOS 4.00, which we're releasing today, alongside these additional beta binaries, PDFs of the documentation, and disk images. We will continue to explore the archives and may update this release if more is discovered.&nbsp; </p> <p>Thank you to Ray Ozzie, Starfrost, Jeff Sponaugle, Larry Osterman, our friends at the IBM OSPO, as well as the makers of such digital archeology software including, but not limited to Greaseweazle, Fluxengine, Aaru Data Preservation Suite, and the HxC Floppy Emulator. Above all, thank you to the original authors of this code, some of whom still work at Microsoft and IBM today! </p> <p>If you'd like to run this software yourself and explore, we have successfully run it directly on an original IBM PC XT, a newer Pentium, and within the open source PCem and 86box emulators.&nbsp; </p>



            <div>
                <div>
                    <h4>About Scott</h4>
                    <div>
                        <p>Scott Hanselman is a former professor, former Chief Architect in finance, now speaker, consultant, father, diabetic, and Microsoft employee. He is a failed stand-up comic, a cornrower, and a book author.</p>
                        <p><a href="https://facebook.com/shanselman"><img src="https://images.hanselman.com/main/icon-fb.png" alt="facebook"></a>
                        <a href="https://twitter.com/shanselman"><img src="https://images.hanselman.com/main/icon-twitter.png" alt="twitter"></a>
                        <a href="http://feeds.hanselman.com/ScottHanselman"><img src="https://images.hanselman.com/main/icon-rss.png" alt="subscribe"></a><br>
                        <a href="http://hanselman.com/about">About</a> &nbsp; <a href="http://www.hanselman.com/newsletter">Newsletter</a>
                    </p></div>
                </div>

                <div>
                    <p><strong>Hosting By</strong><br>
                        <a rel="nofollow" href="https://azure.microsoft.com/free"><img alt="Hosted in an Azure App Service" width="125" height="125" src="https://images.hanselman.com/main/azure-250x250.png"></a>
                    </p>

                </div>
            </div>

            


            

            
        </section>
            



















    

<a name="#comments-start"></a>





    </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Judge acquits Backpage co-founder Michael Lacey on most counts (197 pts)]]></title>
            <link>https://reason.com/2024/04/25/judge-acquits-backpage-co-founder-michael-lacey-on-most-counts/</link>
            <guid>40162433</guid>
            <pubDate>Thu, 25 Apr 2024 20:14:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://reason.com/2024/04/25/judge-acquits-backpage-co-founder-michael-lacey-on-most-counts/">https://reason.com/2024/04/25/judge-acquits-backpage-co-founder-michael-lacey-on-most-counts/</a>, See on <a href="https://news.ycombinator.com/item?id=40162433">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
																		<article>
	<header>
							<p>
				<a href="https://reason.com/tag/backpage/">Backpage</a>
			</p>
				
		
					<h2>The court found insufficient evidence to sustain 53 of 84 remaining counts against Lacey.</h2>
				<p>
								
				
						<span>|</span>
			<time datetime="2024-04-25T13:06:35-04:00">4.25.2024 1:06 PM</time>
			
</p>
					
										<div>
						<div>
			<picture>
									<source type="image/webp" data-lazy-srcset="https://d2eehagpk5cl65.cloudfront.net/img/c2400x1350-w2400-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-2400x1350.png.webp 2400w,https://d2eehagpk5cl65.cloudfront.net/img/c1200x675-w1200-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-1200x675.png.webp 1200w,https://d2eehagpk5cl65.cloudfront.net/img/c800x450-w800-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-800x450.png.webp 800w,https://d2eehagpk5cl65.cloudfront.net/img/c600x338-w600-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-600x338.png.webp 600w,https://d2eehagpk5cl65.cloudfront.net/img/c331x186-w331-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-331x186.png.webp 331w,https://d2eehagpk5cl65.cloudfront.net/img/c1200x675-w1200-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-1200x675.png.webp 1200w,https://d2eehagpk5cl65.cloudfront.net/img/c1920x1080-w1920-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-1920x1080.png.webp 1920w" sizes="(min-width: 753px) 70vw, (min-width: 1190px) 768px, 100vw">
											<source type="image/jpeg" data-lazy-srcset="https://d2eehagpk5cl65.cloudfront.net/img/c2400x1350-w2400-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-2400x1350.png 2400w,https://d2eehagpk5cl65.cloudfront.net/img/c1200x675-w1200-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-1200x675.png 1200w,https://d2eehagpk5cl65.cloudfront.net/img/c800x450-w800-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-800x450.png 800w,https://d2eehagpk5cl65.cloudfront.net/img/c600x338-w600-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-600x338.png 600w,https://d2eehagpk5cl65.cloudfront.net/img/c331x186-w331-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-331x186.png 331w,https://d2eehagpk5cl65.cloudfront.net/img/c1200x675-w1200-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-1200x675.png 1200w,https://d2eehagpk5cl65.cloudfront.net/img/c1920x1080-w1920-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-1920x1080.png 1920w" sizes="(min-width: 753px) 70vw, (min-width: 1190px) 768px, 100vw">
													<img src="https://d2eehagpk5cl65.cloudfront.net/img/c800x450-w800-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-800x450.png" width="1200" height="675" title="U.S. District Judge Diane Humetewa" alt="U.S. District Judge Diane Humetewa | screenshot from U.S. Courts video" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201200%20675'%3E%3C/svg%3E" data-lazy-src="https://d2eehagpk5cl65.cloudfront.net/img/c800x450-w800-q80/uploads/2024/04/Screen-Shot-2024-04-25-at-11.49.05-AM-800x450.png">
			</picture>
		</div>
							<p><span>
					 (screenshot from U.S. Courts video)				</span>
					</p>
								</div>
							
	</header>
	<div>
							<p>A federal judge has <a href="https://reason.com/wp-content/uploads/2024/04/usa-v-lacey-order-of-acquittal.pdf">acquitted</a> Backpage co-founder Michael Lacey of dozens of counts, including a majority of those on which federal prosecutors planned to retry Lacey later this year. U.S. District Judge Diane Humetewa also acquitted former Backpage executives Jed Brunst and Scott Spear on multiple counts of which they were convicted by a jury last fall.</p> <p>"After viewing the record in the light most favorable to the Government, the Court finds there is insufficient of evidence to support convictions under Counts 19–51 as to Mr. Lacey and Counts 66–99 as to Messrs. Lacey, Brunst, and Spear," concluded Humetewa.</p> <p>In November, <a href="https://reason.com/2023/11/29/the-backpage-defendants-never-stood-a-chance/">a jury found Lacey guilty</a> of just one the 86 counts against him and not guilty of one count as well. The jury was hung on the other 84 counts, including all charges that Lacey actively facilitated prostitution or participated in a conspiracy to facilitate prostitution via the online classifieds site he founded with his longtime newspaper partner James Larkin. (Larkin <a href="https://reason.com/2023/08/02/backpage-publisher-alt-weekly-entrepreneur-and-free-speech-warrior-james-larkin-has-died/">took his own life last summer</a> a few days before the trial was scheduled to begin.)</p> <p>The feds then decided to retry Lacey on those 84 counts, despite the fact that there had already been two trials on the same charges. (The first, in 2021, was <a href="https://reason.com/2021/09/14/biased-testimony-in-backpage-trial-triggers-more-calls-for-a-mistrial/">declared a mistrial</a> after prosecutors and their witnesses couldn't stop talking about sex trafficking despite none of the defendants facing sex trafficking charges.)</p> <p>Now, Humetewa has acquitted Lacey on 53 of the remaining 84 counts against him. Additionally, Humetewa acquitted Spear, former executive vice president of Backpage, of 10 of the counts on which he was found guilty by the jury and acquitted former Chief Financial Officer Brunst of 18 of the counts on which he was convicted.</p> <p>Two of the other defendants were acquitted on all charges by the jury.</p> <p>Lacey, Spear, and Brunst could still be in serious trouble.</p> <p>Lacey is still looking at a retrial later this year on the remaining counts against him, which include one count of conspiracy to violate the federal Travel Act by facilitating prostitution, 17 counts of violating the Travel Act by facilitating prostitution, and several different money laundering counts.</p> <p>And on June 17, Lacey is scheduled to be sentenced on the one count—international concealment of money laundering—on which the jury found him guilty. It comes with a possible sentence of up to 20 years in federal prison. Lacey plans to appeal his conviction on this count, and there seems like a good chance it will be successful, since the money he allegedly "concealed" was reported to the federal government with all the proper paperwork. But he could still face prison time as that appeals process plays out.</p> <p>Brunst is scheduled to be sentenced along with Lacey in June and even with Humetewa's acquittals, he still faces sentencing on 14 counts. And Spear, who is scheduled to be sentenced on July 9, still faces sentencing on 29 counts.</p>						</div>
		
</article>
<nav>
	
		<p>
        <a href="https://reason.com/2024/04/25/greenpeace-crusade-will-blind-and-kill-children/" data-ga-click="true" data-ga-action="Next Article Click" data-ga-label="Greenpeace Crusade Will Blind and Kill Children"><span>NEXT:</span> Greenpeace Crusade Will Blind and Kill Children</a>
    </p>
	
	<span><a rel="tag" href="https://reason.com/tag/backpage/">Backpage</a><a rel="tag" href="https://reason.com/category/nanny-state/prostitution/">Prostitution</a><a rel="tag" href="https://reason.com/category/civil-liberties/free-speech/">Free Speech</a><a rel="tag" href="https://reason.com/tag/first-amendment/">First Amendment</a><a rel="tag" href="https://reason.com/category/criminal-justice/law-enforcement/">Law enforcement</a><a rel="tag" href="https://reason.com/tag/advertising/">Advertising</a><a rel="tag" href="https://reason.com/category/nanny-state/sex-work/">Sex Work</a><a rel="tag" href="https://reason.com/category/immigration/trafficking/">Sex Trafficking</a><a rel="tag" href="https://reason.com/tag/money-laundering/">Money Laundering</a><a rel="tag" href="https://reason.com/tag/federal-courts/">Federal Courts</a><a rel="tag" href="https://reason.com/tag/department-of-justice/">Department of Justice</a><a rel="tag" href="https://reason.com/category/criminal-justice/">Criminal Justice</a></span>			
					</nav>
				
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Earning Q1 2024 [pdf] (148 pts)]]></title>
            <link>https://abc.xyz/assets/91/b3/3f9213d14ce3ae27e1038e01a0e0/2024q1-alphabet-earnings-release-pdf.pdf</link>
            <guid>40162354</guid>
            <pubDate>Thu, 25 Apr 2024 20:07:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://abc.xyz/assets/91/b3/3f9213d14ce3ae27e1038e01a0e0/2024q1-alphabet-earnings-release-pdf.pdf">https://abc.xyz/assets/91/b3/3f9213d14ce3ae27e1038e01a0e0/2024q1-alphabet-earnings-release-pdf.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=40162354">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Asian American women are getting lung cancer despite never smoking (132 pts)]]></title>
            <link>https://www.nbcnews.com/news/us-news/asian-american-women-lung-cancer-rcna138895</link>
            <guid>40161811</guid>
            <pubDate>Thu, 25 Apr 2024 19:16:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nbcnews.com/news/us-news/asian-american-women-lung-cancer-rcna138895">https://www.nbcnews.com/news/us-news/asian-american-women-lung-cancer-rcna138895</a>, See on <a href="https://news.ycombinator.com/item?id=40161811">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>It was fall 2021, and Aurora Lucas had a stubborn cough and chest pain. However, her doctors dismissed the symptoms, telling her to drink hot water and honey.&nbsp;</p><p>After three months of hospital visits, Lucas was diagnosed with stage 3 lung cancer at 28 years old, despite never having smoked. Lucas, who is Filipina American, represents a concerning trend for researchers.&nbsp;</p><p>According to a California study, lung cancer rates are dropping for every group except <a href="https://www.ajmc.com/view/digging-into-the-increasing-lung-cancer-rate-for-female-asian-never-smokers-dr-jeffrey-velotta" target="_blank">nonsmoking Asian American women</a> — for whom they’re actually increasing <a href="https://pubmed.ncbi.nlm.nih.gov/36934804/" target="_blank">by 2% per year</a>.&nbsp;</p><p>While lung cancer is traditionally associated with cigarettes, as many as 20% of U.S. cases happen in never-smokers every year. Among Asian American women who have lung cancer, more than <a href="https://pubmed.ncbi.nlm.nih.gov/34001502/" target="_blank">50%</a> have never smoked. And for Chinese and Indian American women who have lung cancer, the nonsmoking percentage rises to 80% to 90%.&nbsp;</p><p>Scientists are baffled by this pattern, and it has led to a recent surge of research. In two ongoing blockbuster studies at the University of California, San Francisco, and New York University, they’ve been searching for reasons why Asian American women are at especially high risk and for ways to catch their tumors earlier.</p><p>“It’s such a high rate; there <em>has</em> to be an explanation there,” Lucas said.</p><p>In May, the NYU researchers shared <a href="https://ascopubs.org/doi/abs/10.1200/JCO.2023.41.16_suppl.8510" target="_blank">preliminary data</a> at the American Society of Clinical Oncology conference showing that lung cancer screening in nonsmoking Asian American women works as well, if not better, than screening elderly, mostly white smokers. </p><p>Now, doctors are raising the alarm about increasing numbers of lung cancer cases in this community and working to reform the screening guidelines to better include Asian American women.</p><p>“As an Asian woman, I was taught to be quiet,” Lucas said. “I had a high respect for doctors and medical staff, so I would never really question what they were telling me,” even when they didn’t understand what was wrong.</p><h2><strong>Understanding the risk factors</strong></h2><p>UCSF epidemiologist Scarlett Gomez was born in Taiwan before she immigrated to the U.S. at 7 years old, her parents working in Chinese restaurants in Washington state. But that also meant they were continuously, unknowingly exposed to <a href="https://link.springer.com/article/10.1007/s13530-022-00163-4#:~:text=At%20high%20temperature%2C%20COF%20produced,meats%20and%20vegetables%20were%20studied." target="_blank">toxic</a> cooking oil fumes. </p><p>“Like many immigrant families, my parents were working in industries that were beneath their training,” Gomez said. “That was the job that they had to do to make it here.”</p><p>To date, studies of female nonsmokers in Asia have identified risk factors <a href="https://tlcr.amegroups.org/article/view/21745/17752" target="_blank">such</a> <a href="https://www.sciencedirect.com/science/article/pii/S095461111300320X" target="_blank">as</a> cooking oil fumes, secondhand smoke, air pollution and indoor heating with coal, but no research has focused on Asian <em>American</em> women, Gomez said.&nbsp;</p><p>Nevertheless, there’s probably some overlap. For example, a 2019 study <a href="https://www.ucsusa.org/sites/default/files/attach/2019/06/Inequitable-Exposure-to-Vehicle-Pollution-Northeast-Mid-Atlantic-Region.pdf" target="_blank">found</a> that Asian Americans breathe in 73% more tiny pollution particles than white Americans, most likely because of <a href="https://www.science.org/doi/10.1126/sciadv.abf4491" target="_blank">greater exposure</a> to construction, industry and vehicle emissions where they live. </p><p>Air pollution may also lead to <a href="https://www.nature.com/articles/s41586-023-05874-3" target="_blank">genetic changes</a> such that Asian patients have some of the <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4132036/" target="_blank">highest rates</a> of the cancer-causing epidermal growth factor receptor mutation, which leads healthy cells to divide uncontrollably and grow into tumors.&nbsp;</p><p>“I hope we’ll see more studies to address these unusual, emerging disparities among Asian Americans that we previously haven’t paid attention to,” Gomez said.</p><p>Given the lack of clarity, Gomez and Iona Cheng, a fellow epidemiologist at UCSF, launched the <a href="https://fansstudy.ucsf.edu/home" target="_blank">Female Asian Never Smokers, or FANS, study</a> in 2021. It’s a case-control study, in which the team is studying nonsmoking Asian American women who were either recently diagnosed with lung cancer (the cases) or who never had lung cancer (the controls).&nbsp;</p><p>Although the two groups are matched in terms of ethnicity and age, the researchers hope to find some differences in genetics, as assessed by saliva samples, and environmental exposure, determined through surveys asking about people’s pasts. “The whole goal of this study is to identify risk factors,” Gomez said.</p><p>However, FANS can’t show cause-and-effect relationships, said Dr. Latha Palaniappan, a physician at Stanford University, who isn’t involved with the study. </p><p>For one, women with lung cancer may be more likely to remember their exposure to chemicals and toxins than women without lung cancer because they’ve been thinking harder about their risk factors —&nbsp;something known as “<a href="https://pubmed.ncbi.nlm.nih.gov/28846237/" target="_blank">recall bias</a>.” </p><p>Still, Palaniappan emphasized FANS’ groundbreaking nature, because “we can definitely understand associations, and the study can give us an idea for more rigorous analyses going forward.”</p><h2><strong>Making lung cancer screening more equitable</strong></h2><p>At NYU, Dr. Elaine Shum, an oncologist, has seen dozens of nonsmoking Asian American women with lung cancer, many with stage 4 disease. And it’s always frustrating: Lung cancer screening, via the low-dose CT scan, could have helped those women find their tumors earlier, at more treatable stages.&nbsp;</p><p>But insurance plans typically cover screening only for <a href="https://www.uspreventiveservicestaskforce.org/uspstf/recommendation/lung-cancer-screening" target="_blank">people ages 50 to 80 with heavy smoking histories</a> — all but excluding Asian American women. And the recommendations were based on the National Lung Screening Trial, a <a href="https://www.nejm.org/doi/full/10.1056/nejmoa1102873" target="_blank">clinical trial</a> of 53,000 elderly smokers, over 90% of whom were white.</p><p>So Shum started her own clinical trial in 2021, giving lung cancer screening to 1,000 never-smoking Asian American women. Her <a href="https://ascopubs.org/doi/abs/10.1200/JCO.2023.41.16_suppl.8510" target="_blank">initial results</a>, which she presented at a major cancer conference, showed that Asian women had a higher lung cancer detection rate than the original national trial — 1.5% versus 1%. “Based on this preliminary data and other ongoing efforts, ​​Asian women do represent another high-risk population that warrants screening,” Shum said.</p><p>Palaniappan, who is also not affiliated with Shum’s trial, tends to agree: “It’s extraordinary that screening in this population yielded a similar incidence of lung cancer” to the original trial. But Palaniappan also cautioned that better inclusion of Asian American women in the screening guidelines is still a long way off, with many more studies needed to confirm and build on Shum’s findings. “We’re just at the beginning,” she said.&nbsp;</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[No Abstractions: our API design principle (282 pts)]]></title>
            <link>https://increase.com/articles/no-abstractions</link>
            <guid>40161794</guid>
            <pubDate>Thu, 25 Apr 2024 19:15:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://increase.com/articles/no-abstractions">https://increase.com/articles/no-abstractions</a>, See on <a href="https://news.ycombinator.com/item?id=40161794">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><span>API resources</span> are the nouns of your API. Deciding how to name and model these nouns is arguably the hardest and most important part of designing an API. The resources you expose organize your users’ mental model of how your product works and what it can do. At Increase, our team has used a principle called “no abstractions” to help. What do we mean by this?</p><p>Much of our team came from Stripe, and when designing our API we considered the same values that have been successful there. Stripe excels at designing</p><!-- --> <p><span>abstractions</span> in their API — extracting the essential features of a complex domain into something their users can easily understand and work with. In their case this most notably means</p><!-- --> <p><a href="https://stripe.com/blog/payment-api-design">modeling</a></p><!-- --><p>payments across many different networks into an API resource called a</p><!-- --> <p><a href="https://docs.stripe.com/api/payment_intents">PaymentIntent</a></p><!-- --><p>. For example, Visa and Mastercard have subtly different reason codes for why a chargeback can be initiated, but Stripe combines those codes into a single enum so that their users don’t need to consider the two networks separately.</p><p>This makes sense because many of Stripe’s users are early startups working on products totally unrelated to payments. They don't necessarily know, or need to know, about the nuances of credit cards. They want to integrate Stripe quickly, get back to building their product, and stop thinking about payments.</p></div><div><p>“For Increase users, trying to hide the underlying complexity of these networks would irritate them, not simplify their lives.”</p></div><div><p>Increase’s users are not like this. They often have deep existing knowledge of payment networks, think about financial technology all the time, and come to us because of our direct network connections and the depth of integration that lets them build. They want to know</p><!-- --> <p><a href="https://status.increase.com/#ach-submission-timeline">exactly</a></p><!-- --><p>when the FedACH window closes and when transfers will land. They understand that setting a different Standard Entry Class code on an ACH transfer can result in different return timing. Trying to hide the underlying complexity of these networks (by, for example, modeling ACH transfers and wire transfers with a single API resource) would irritate them, not simplify their lives.</p><p>Early conversations with these users helped us articulate what we dubbed the “no abstractions” principle as we built the first version of our API. Some examples of the way this mindset has subsequently affected its design:</p></div><p>Real-world naming</p><div><p>Instead of inventing our own names for API resources and their attributes, we tend to use the vocabulary of the underlying networks. For example, the parameters we expose when making an ACH transfer via our API are named after fields in the</p><!-- --> <p><a href="https://achdevguide.nacha.org/ach-file-details">Nacha specification</a>.</p></div><p>Immutability</p><div><p>Similar to how we use network nomenclature, we try to model our resources after real-world events like an action taken or a message sent. This results in more of our API resources being immutable. An approach that’s worked well for our API is to take a cluster of these immutable resources (all of the network messages that can be sent as part of the ACH transfer lifecycle, for example) and group them together under a state machine “lifecycle object”. For example, the <code>ach_transfer</code></p><!-- --><p>object in our API has a field called</p><!-- --> <p><code>status</code> that changes over time, and several immutable sub-objects that are created as the transfer moves through its lifecycle. A newly-minted</p><!-- --> <p><code>ach_transfer</code> object looks like:</p></div><div><pre><p><span>{</span>
  <span>"id"</span><span>:</span> <span>"ach_transfer_abc123"</span><span>,</span>
  <span>"created_at"</span><span>:</span> <span>"2024-04-24T00:00:00+00:00"</span><span>,</span>
  <span>"amount"</span><span>:</span> <span>1000</span><span>,</span>
  <span>"status"</span><span>:</span> <span>"pending_approval"</span><span>,</span>
  <span>"approval"</span><span>:</span> <span><span>null</span></span><span>,</span>
  <span>"submission"</span><span>:</span> <span><span>null</span></span><span>,</span>
  <span>"acknowledgement"</span><span>:</span> <span><span>null</span></span>
  
<span>}</span></p></pre></div><p>After that same transfer has moved through our pipeline and we’ve submitted it to FedACH, it looks like:</p><div><pre><p><span>{</span>
  <span>"id"</span><span>:</span> <span>"ach_transfer_abc123"</span><span>,</span>
  <span>"created_at"</span><span>:</span> <span>"2024-04-24T00:00:00+00:00"</span><span>,</span>
  <span>"amount"</span><span>:</span> <span>1000</span><span>,</span>
  <span>"status"</span><span>:</span> <span>"submitted"</span><span>,</span>
  
  <span>"approval"</span><span>:</span> <span>{</span>
    <span>"approved_by"</span><span>:</span> <span>"administrator@yourcompany.com"</span><span>,</span>
    <span>"approved_at"</span><span>:</span> <span>"2024-04-24T01:00:00+00:00"</span>
  <span>}</span><span>,</span>
  
  <span>"submission"</span><span>:</span> <span>{</span>
    <span>"trace_number"</span><span>:</span> <span>"058349238292834"</span><span>,</span>
    <span>"submitted_at"</span><span>:</span> <span>"2024-04-24T02:00:00+00:00"</span>
  <span>}</span><span>,</span>
  
  <span>"acknowledgement"</span><span>:</span> <span>{</span>
    <span>"acknowledged_at"</span><span>:</span> <span>"2024-04-24T03:00:00+00:00"</span>
  <span>}</span>
  
<span>}</span></p></pre></div><p>Separating resources by use case</p><div><p>If, for a given API resource, the set of actions a user can take on different instances of the resource varies a lot, we tend to split it into multiple resources. For example, the set of actions you can take on an originated ACH transfer is different (the complete opposite, really) than the actions you can take on a received ACH transfer, so we separate these into</p><!-- --> <p><code>ach_transfer</code> and</p><!-- --> <p><code>inbound_ach_transfer</code> resources.</p><hr></div><div><p>This approach can make our API more verbose and intimidating at first glance — there are a lot of resources on the left-hand side of our</p><!-- --> <p><a href="https://increase.com/documentation/api">documentation</a></p><!-- --><p>page! We think it makes things more predictable over the long-term, though.</p><p>Importantly, our engineering team has committed to this approach. When you design a complex API over several years, you make small incremental decisions all the time. Committing to foundational principles upfront has reduced the cognitive load for these decisions. For example, when sending a wire transfer to the Federal Reserve, there’s a required field called</p><!-- --> <p><a href="https://increase.com/documentation/fedwire#technical-implementation">Input Message Accountability Data</a></p><!-- --><p>which serves as a globally-unique ID for that transfer. When building support for wire transfers, an engineer in an abstraction-heavy API might have to deliberate how to name this field in a “user-friendly” way -</p><!-- --> <p><code>trace_number</code>?</p><!-- --> <p><code>reference_number</code>?</p><!-- --> <p><code>id</code>? At Increase that hypothetical engineer names the field</p><!-- --> <p><code>input_message_accountability_data</code> and moves on. When an Increase user encounters this field for the first time, while it might not be the most immediately recognizable name at first, it helps them understand immediately how this maps to the underlying system.</p><p>No Abstractions isn’t right for every API, but considering the level of abstraction that’s appropriate for the developers integrating against it is a valuable exercise. This will depend on their level of experience working with your product domain and the amount of energy they’ll be committing to the integration, among other things. If you’re building an abstraction-heavy API, be prepared to think hard before adding new features. If you’re building an abstraction-light API, commit to it and resist the temptation to add abstractions when it comes along.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Start Your Own ISP (338 pts)]]></title>
            <link>https://startyourownisp.com/</link>
            <guid>40161697</guid>
            <pubDate>Thu, 25 Apr 2024 19:06:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://startyourownisp.com/">https://startyourownisp.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40161697">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
		<div>
			
				

				<p>This site is dedicated to helping you start your own Internet Service Provider. Specifically this guide is about building a Wireless ISP (<a href="https://en.wikipedia.org/wiki/Wireless_Internet_service_provider">WISP</a>).</p>
<p>This guide is focused on the very earliest stages of starting a WISP - determining feasibility up through connecting the first few customers. There are many challenges that will come up at 100, 1,000 or 10,000 customers that are not (yet) covered in this guide.</p>
<div>
    <p>Recent Webinar: <b>Vertical Real Estate For ISPs</b></p>
    <p>Check out a recording of our latest webinar collaboration with <a href="https://outpost.plus/">Outpost Plus</a> on 30 Aug 2023 at 12:00PM Pacific. </p>
    <p>Learn about strategies and solutions for aproaching MDU owners and managers, installing and building out MDU sites, and converting residents into subscribers.</p>
    <a href="https://attendee.gotowebinar.com/recording/5216831262199372120?utm_source=syoisp&amp;utm_medium=website"><p><u>Recorded Webinar</u></p></a>
    </div>
    

<h2 id="whats-new">What’s New</h2>
<ul>
<li>Check out our <a href="https://www.gotostage.com/channel/2c4ef258c411488eae8c04e2481d7a00?medium=web&amp;campaign=evergreen&amp;source=syoisp">past webinars here</a>.</li>
<li>Get a head start on marketing in Q1 with our <a href="https://startyourownisp.com/partnerships">60% off sale on Q1 sponsorship packages</a> right now.</li>
</ul>

<p>If you’d like personalized assistance with a project feel free to <a href="https://clarity.fm/grahamcastleton">book some time</a> with me.</p>
<p><a href="https://startyourownisp.com/community"><strong>Join the discussion!</strong></a> Chat with me (the author) and others interested in this kind of thing here: <a href="https://startyourownisp.com/community">SYOISP Discord Server</a>.</p>
<p><a href="https://twitter.com/syoisp"><strong>Follow Along</strong></a> on Twitter <a href="https://twitter.com/syoisp">@syoisp</a></p>
<h2 id="getting-started">Getting Started</h2>
<p><a href="https://startyourownisp.com/posts/introduction/"><strong>What is a WISP?</strong></a>
And why might you want to build one? Also defines some terminology.</p>
<p><a href="https://docs.google.com/spreadsheets/d/1jjUYOQMuZ4cRyTv1M5X8HGtrKFiW96_gNlfG8BBzRN0/edit?usp=sharing"><strong>Costs</strong></a>
What does it cost to build a wireless Internet Service Provider? (Link to a Google Sheet that you can copy and customize.)</p>
<p><a href="https://startyourownisp.com/posts/about-me/"><strong>About Me</strong></a>
Who am I? Why am I doing this?</p>
<h2 id="step-by-step-guide">Step by Step Guide</h2>
<p><a href="https://startyourownisp.com/posts/location-location-location/"><strong>Step 1: Evaluate an Area</strong></a>: Make sure your area is a good candidate for a Wireless Internet network.</p>
<p><a href="https://startyourownisp.com/posts/fiber-provider/"><strong>Step 2: Find a Fiber Provider</strong></a>: Find a building where you can purchase a fiber connection and use the rooftop to start your wireless network.</p>
<p><a href="https://startyourownisp.com/posts/relay-sites/"><strong>Step 3: Find Relay Sites</strong></a>:
Extend your network wirelessly toward your customers.</p>
<p><a href="https://startyourownisp.com/posts/hardware-platform/"><strong>Step 4: Pick a Hardware Platform</strong></a>:
Evaluate available options for wireless hardware.</p>
<p><a href="https://startyourownisp.com/posts/billing-customer-management/"><strong>Step 5: Billing and Customer Management</strong></a>:
Make sure you’re able to get paid and support your customers.</p>
<p><a href="https://startyourownisp.com/posts/network-topology/"><strong>Step 6: Network Topology</strong></a>:
Design your network topology to make your network reliable and scalable. Routers, switches, IP addresses, VLANs, etc.</p>
<p><a href="https://startyourownisp.com/posts/build-your-infrastructure/"><strong>Step 7: Build your Infrastructure</strong></a>:
Install hardware for your fiber connection and your relay sites.</p>
<p><a href="https://startyourownisp.com/posts/install-a-customer/"><strong>Step 8: Install a Customer</strong></a>:
Get your first customer online!</p>
<p><a href="https://startyourownisp.com/posts/marketing/"><strong>Step 9: Marketing</strong></a>:
Let people know about your service so they can experience a better Internet connection!</p>
<p><a href="https://startyourownisp.com/posts/maintenance/"><strong>Step 10: Maintenance</strong></a>:
Keep your network running smoothly, even in bad weather.</p>


<p>
    <h2>Signup for our monthly newsletter</h2>
    <br>
    

</p>

<h2 id="miscellaneous">Miscellaneous</h2>
<p><a href="https://startyourownisp.com/posts/form477/"><strong>Form 477: How to prepare and file with the FCC</strong></a>
Form 477 is used by the FCC to determine which providers are servicing which areas. ISPs must file this form twice a year.</p>
<p><a href="https://startyourownisp.com/posts/tool-list/"><strong>Tools you’ll want to have</strong></a>
A list of the tools you’ll need to install relays sites and customers.</p>
<p><a href="https://startyourownisp.com/posts/aim-backhaul/"><strong>Aim a Backhaul</strong></a> COMING SOON
A guide describing the proper techniques for aiming backhauls. Designed to be printed out and taken to the site for reference.</p>
<p><a href="https://startyourownisp.com/posts/backhaul-picker/"><strong>Backhaul List</strong></a>
If you just need to get a solid wireless connection from Point A to Point B then use this list to pick the right equipment and get it set up.</p>
<p><a href="https://startyourownisp.com/posts/channel-planning/"><strong>RF Basics and Channel Planning</strong></a> COMING SOON
Avoid self interference by carefully choosing channels for your access points and backhauls.</p>
<p><a href="https://startyourownisp.com/posts/mdus/"><strong>MDUs (Multiple Dwelling Units)</strong></a>
Best practices for providing service to apartment buildings, condos, attached townhomes, etc.</p>
<p><a href="https://startyourownisp.com/posts/guide-to-google-earth/"><strong>Guide to Google Earth</strong></a>
Some tips and tricks for using Google Earth to plan and build your network.</p>
<p><a href="https://startyourownisp.com/posts/roof-and-ladder-safety/"><strong>Roof and Ladder Safety</strong></a> COMING SOON
Stay safe out there!</p>
<div>
<p>How can we help?</p>
<p><a href="https://outpost.plus/">Outpost Plus</a> is the organization behind startyourownisp.com. 
Our experienced professionals are happy to discuss your needs and offer advice and assistance.
 <a href="https://outpost.plus/pages/contact/">Contact us</a> to discuss your project. </p>
</div>


			

			

			
		</div>
	</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Xz sshd backdoor collecting usernames from logs (137 pts)]]></title>
            <link>https://isc.sans.edu/diary/30802</link>
            <guid>40161334</guid>
            <pubDate>Thu, 25 Apr 2024 18:36:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://isc.sans.edu/diary/30802">https://isc.sans.edu/diary/30802</a>, See on <a href="https://news.ycombinator.com/item?id=40161334">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Unless you took the whole weekend off, you must have seen by now that Andres Freund published an amazing discovery on Friday on the Openwall mailing list (<a href="https://www.openwall.com/lists/oss-security/2024/03/29/4">https://www.openwall.com/lists/oss-security/2024/03/29/4</a>).<br>
The whole story around this is both fascinating and scary – and I’m sure will be told around numerous time, so in this diary I will put some technical things about the backdoor that I reversed for quite some time (and I have a feeling I could spend 2 more weeks on this).<br>
There is also a nice gist by smx-smx <a href="https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504">here</a>&nbsp;that gets updated regularly so keep an eye there as well.<br>
The author(s) of the backdoor went a long way to make the backdoor look as innocent as possible. This is also why all the reversing effort is taking such a long(er) time. Let’s take a look at couple of fascinating things in this backdoor.</p>

<p><strong>String comparison</strong></p>

<p>One of the first things a reverse engineer will do is to search for strings in the code they are looking at. If strings are visible, they can usually tell a lot about the target binary. But if we take a look at the library (and for this diary I am using the one originally sent by Andres) we will see practically no visible strings.<br>
The authors decided to obfuscate all strings – in order to do that, they stored strings as a radix tree (also known as prefix tree or trie, more info at <a href="https://en.wikipedia.org/wiki/Radix_tree">https://en.wikipedia.org/wiki/Radix_tree</a>). This allows them to store all strings as obfuscated, however now one of the challenges they had was to lookup strings – they implemented a function that checks whether a string exists in the radix tree table, and if it does, it returns back the offset:</p>

<p><img alt="" src="https://isc.sans.edu/diaryimages/images/xz1.png"><br>
The image above shows start of the function (originally called Lsimple_coder_update_0) where I also expanded one of the radix tree tables (_Llzip_decode_1). So as input we send a string, and if it exists in the radix tree, we get back its offset. The code needs to do this for every single string lookup, but that should not cause the delay as radix tree lookups are quite fast.</p>

<p><strong>Anti-debugging</strong></p>

<p>Anti-debugging efforts were implemented on several levels. The simplest one includes code where the backdoor is checking if a function starts with the ‘endbr64’ instruction. Let’s check how this works – first the snippet below shows how the .Llzma_block_buffer_encode.0 function gets called. Notice the value 0x0E230 being passed in rdx:</p>

<div><p><img alt="" src="https://isc.sans.edu/diaryimages/images/xz2.png"></p><p>

The following figure shows how the backdoor checks whether the ‘endbr64’ instruction is still there (if not – it has been probably changed by a debugger which signals the backdoor to abort):</p></div>

<p><img alt="" src="https://isc.sans.edu/diaryimages/images/xz3.png"></p>

<p>Another important register here is rdi, which will points to the location of the ‘endbr64’ instruction. In other words, if everything is OK, value of [rdi] must be 0xFA1E0FF3, which is the opcode for the ‘endbr64’ instruction.<br>
So now when we go through code, the line add eax, [rdi] should sum 0xFA1E0FF3 and 0x5E2E230 which results in 0xF223. If that is correct 1 is returned, otherwise 0 (indicating that the 'endbr64' instruction was not there). Quite cool.<br>
There is more another function that dynamically modifies code, but that is horrible for reversing – perhaps later ?</p>

<p><strong>Collecting usernames and IP addresses?</strong></p>

<p>The final function we’ll take a look at is also interesting – it will parse every log created by the sshd service and will try to extract valid usernames and IP addresses. The function is .Llzma12_mode_map.part.1 and we can see the initial comparisons (with my comments) here:</p>

<p><img alt="" src="https://isc.sans.edu/diaryimages/images/xz4.png"></p>

<p>So with this, the attacker is parsing a log line such as the following:</p>

<p><span>Accepted password for root from 192.168.14.1 port 62405 ssh2</span></p>

<p>Further below in the function we can see that they match on the ‘from’ and ‘ssh2’ keywords and extract what’s between them:</p>

<p><img alt="" src="https://isc.sans.edu/diaryimages/images/xz5.png"></p>

<p>Finally, they pass this to another function, however that’s not visible in static analysis so this is where I lost it.</p>

<p>Guess that’s it for today – depending on developments we might update this diary but in any case check the resources posted at the beginning as they get updated quite often.<br>
If you are looking at this too - hope you're having fun. I quite enjoyed this (too bad it's back to dayjob soon heh), but I'm also scared about how *<strong>close</strong>* this was to infect zillion servers.</p>

<p>--<br>
Bojan<br>
<a href="https://x.com/bojanz">@bojanz</a>&nbsp;|&nbsp;<a href="https://www.linkedin.com/in/bojanz/">@linkedin</a><br>
<a href="http://www.infigo.hr/">INFIGO IS</a></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FCC restores net neutrality rules that ban blocking and throttling in 3-2 vote (131 pts)]]></title>
            <link>https://arstechnica.com/tech-policy/2024/04/fcc-restores-net-neutrality-rules-that-ban-blocking-and-throttling-in-3-2-vote/</link>
            <guid>40160824</guid>
            <pubDate>Thu, 25 Apr 2024 17:52:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/tech-policy/2024/04/fcc-restores-net-neutrality-rules-that-ban-blocking-and-throttling-in-3-2-vote/">https://arstechnica.com/tech-policy/2024/04/fcc-restores-net-neutrality-rules-that-ban-blocking-and-throttling-in-3-2-vote/</a>, See on <a href="https://news.ycombinator.com/item?id=40160824">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2023/09/getty-rosenworcel-net-neutrality-800x533.jpg" alt="FCC Commissioner Jessica Rosenworcel speaks outside in front of a sign that says " net="" neutrality="" wake="" up="" call.""="">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2023/09/getty-rosenworcel-net-neutrality.jpg" data-height="1000" data-width="1500">Enlarge</a> <span>/</span> Federal Communication Commission Chairwoman Jessica Rosenworcel, then a commissioner, rallies against repeal of net neutrality rules in December 2017.</p><p>Getty Images | Chip Somodevilla</p></figcaption>  </figure>

  




<!-- cache hit 402:single/related:8dac2a52de2c4855444f71790f3583c9 --><!-- empty -->
<p>The Federal Communications Commission voted 3–2 to impose net neutrality rules today, restoring the common-carrier regulatory framework enforced during the Obama era and then abandoned while Trump was president.</p>
<p>The rules prohibit Internet service providers from blocking and throttling lawful content and ban paid prioritization. Cable and telecom companies plan to fight the rules in court, but they <a href="https://arstechnica.com/tech-policy/2016/06/net-neutrality-and-title-ii-win-in-court-as-isps-lose-case-against-fcc/">lost a similar battle</a> during the Obama era when judges upheld the FCC's ability to regulate ISPs as common carriers under Title II of the Communications Act.</p>
<p>"Consumers have made clear to us they do not want their broadband provider cutting sweetheart deals, with fast lanes for some services and slow lanes for others," FCC Chairwoman Jessica Rosenworcel said at today's meeting. "They do not want their providers engaging in blocking, throttling, and paid prioritization. And if they have problems, they expect the nation's expert authority on communications to be able to respond. Because we put national net neutrality rules back on the books, we fix that today."</p>
<p>ISPs insist the rules aren't necessary because they already follow net neutrality principles yet also claim the rules are so burdensome that they will be prevented from investing more in their networks. Lobby group USTelecom today <a href="https://www.ustelecom.org/ustelecom-statement-on-the-fcc-title-ii-vote/">said</a> the "relentless regulation" comes at the cost of "failing to achieve Internet for all."</p>
<p>"This is a nonissue for broadband consumers, who have enjoyed an open Internet for decades," USTelecom CEO Jonathan Spalter said. "Rather than pushing this harmful regulatory land grab, policymakers should keep their eyes on the real-world prize of building opportunity for everyone in a hyperconnected world."                                            </p>
                                                        
<h2>NCTA: Net neutrality is “net fatality”</h2>
<p>Cable lobby group NCTA-The Internet &amp; Television Association <a href="https://www.ncta.com/media/media-room/statement-of-michael-powell-president-ceo-of-ncta-the-internet-television-association-regarding-the-fccs-unnecessary-and-unlawful-broadband-regulation-order">claimed</a> that "the FCC's marketplace intrusion comes at the worst possible time for our massive national effort to finally close the digital divide—just as billions in federal funding are dedicated to extending internet access to America's unserved communities."</p>
<p>That is a reference to a <a href="https://arstechnica.com/tech-policy/2023/06/us-allocates-42b-in-broadband-funding-find-out-how-much-your-state-will-get/">$42 billion program</a> that is paying ISPs to deploy networks in unserved and underserved areas. "Instead of clearing obstacles to speed broadband deployment where it is most needed, this ill-timed and unlawful order threatens to hinder progress," NCTA CEO Michael Powell said. "This will not deliver net neutrality; it will risk a net fatality."</p>
<p>The court battle against the FCC will center on whether the commission can define broadband as a telecommunications service, a necessary step for imposing Title II common-carrier regulations. <a href="https://arstechnica.com/tech-policy/2023/10/is-net-neutrality-doomed-at-supreme-court-fcc-and-isps-prepare-for-epic-battle/">ISPs hope</a> that the Supreme Court's evolving approach to "major questions" will prevent the FCC from defining broadband as telecommunications without explicit instructions from Congress.</p>
<p>FCC Commissioner Geoffrey Starks, a Democrat, said that "major questions review is reserved for only 'extraordinary cases'—and this one doesn't come close. There's no 'unheralded power' that we're purporting to discover in the annals of an old, dusty statute—we've been classifying communications services one way or the other for decades, and the 1996 [Telecommunications] Act expressly codified our ability to continue that practice."</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FCC Votes to Restore Net Neutrality Rules (864 pts)]]></title>
            <link>https://www.nytimes.com/2024/04/25/technology/fcc-net-neutrality-open-internet.html</link>
            <guid>40160429</guid>
            <pubDate>Thu, 25 Apr 2024 17:23:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/04/25/technology/fcc-net-neutrality-open-internet.html">https://www.nytimes.com/2024/04/25/technology/fcc-net-neutrality-open-internet.html</a>, See on <a href="https://news.ycombinator.com/item?id=40160429">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/04/25/technology/fcc-net-neutrality-open-internet.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Jeff Geerling: Corporate Open Source Is Dead (214 pts)]]></title>
            <link>https://www.jeffgeerling.com/blog/2024/corporate-open-source-dead</link>
            <guid>40160331</guid>
            <pubDate>Thu, 25 Apr 2024 17:16:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jeffgeerling.com/blog/2024/corporate-open-source-dead">https://www.jeffgeerling.com/blog/2024/corporate-open-source-dead</a>, See on <a href="https://news.ycombinator.com/item?id=40160331">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>IBM is <a href="https://www.reuters.com/markets/deals/ibm-buy-hashicorp-64-billion-deal-expand-cloud-software-2024-04-24/">buying HashiCorp for $6.4 <em>billion</em></a>.</p>

<p>That's four months after <a href="https://www.hashicorp.com/blog/hashicorp-adopts-business-source-license">HashiCorp rugpulled their <em>entire</em> development community</a> and ditched open source for the 'Business Source License.'</p>

<p>As <a href="https://news.ycombinator.com/item?id=40135490">someone on Hacker News</a> pointed out so eloquently:</p>

<blockquote>
  <p>IBM is like a juicer that takes all the delicious flavor out of a fruit</p>
</blockquote>

<p>skywhopper replied:</p>

<blockquote>
  <p>"HashiCorp already did a great job pre-draining all their flavor."</p>
</blockquote>

<p><a href="https://twitter.com/jgunnink/status/1783303926042996928">Some people wonder</a> if HashiCorp's decision to drop open source was <em>because</em> they wanted to juice the books for a higher price. I mean, <em>six billion dollars?</em> And they're not even a pointless AI company!</p>

<blockquote>
  <p>This blog post is a transcript of the video I posted today, <a href="https://www.youtube.com/watch?v=hNcBk6cwim8">Corporate Open Source is Dead</a>. You can watch it on YouTube.</p>
</blockquote>

<p>Meanwhile, <a href="https://redis.io/blog/redis-adopts-dual-source-available-licensing/">Redis dropped the open BSD license</a> and invented their own 'Source Available' license.</p>

<p>And last year, I covered how <a href="https://www.jeffgeerling.com/blog/2023/im-done-red-hat-enterprise-linux">Red Hat found a way to just <em>barely</em> comply</a> with the open source GPL license for their Enterprise Linux distro.</p>

<p>Other companies like MongoDB, Cockroach Labs, Confluent, Elasticsearch, and Sentry <a href="https://thenewstack.io/hashicorp-abandons-open-source-for-business-source-license/">also went 'Source Available'</a>. It started with some of the smaller players, but as rot sets in at even the biggest 'open source' companies, open source devs are choosing the nuclear option.</p>

<p>When a company rug pulls? Fork 'em. Literally!</p>

<p>Terraform, HashiCorp's bread and butter, was <a href="https://opentofu.org/blog/the-opentofu-fork-is-now-available/">forked into OpenTofu</a>, and adopted by the Linux Foundation. Companies who built their businesses on top of Terraform quickly switched over. Even juicier, OpenBao—a fork of HashiCorp's other big project Vault—is <a href="https://www.techtarget.com/searchitoperations/news/366563095/IBM-engineers-hatch-Linux-Foundation-HashiCorp-Vault-fork">backed by IBM</a>! What's going to happen with <em>that</em> fork now?</p>

<p>At least forks seem pretty straightforward in Hashi-land. In the wake of Redis' wanton destruction, it seems like there's a <a href="https://arstechnica.com/information-technology/2024/04/redis-license-change-and-forking-are-a-mess-that-everybody-can-feel-bad-about/">new fork every week</a>!</p>

<p>And some developers are even exploring ditching the Redis code entirely, like <a href="https://github.com/nalgeon/redka">redka</a>'s an API-compatible wrapper on top of SQLite!</p>

<p>After Red Hat closed its door—most of the way, at least they didn't try pulling a switcheroo on the license itself! Oracle, SUSE, and CIQ <a href="https://www.suse.com/news/OpenELA-for-a-Collaborative-and-Open-Future/">scrapped together the OpenELA alliance</a> to maintain forks of Enterprise Linux. And CentOS users who'll be left in a lurch as June marks the end of CentOS 7 support have to decide whether to use AlmaLinux or one of the ELA projects now.</p>

<p>All these moves shattered the playbook startups and megacorps used—and now we're seeing, abused—to build up billions in revenue over the past decade.</p>

<p>It was all in the name of 'open source'.</p>

<p>As free money dries up and profits slow, companies <a href="https://www.cnbc.com/2024/03/12/ibm-tells-employees-of-job-cuts-in-marketing-and-communications.html">slash headcount</a> almost as fast as community trust.</p>

<h2>2024 is the year corporate open source died</h2>

<p>2024 is the year Corporate Open Source—or at least any remaining illusions about it—finally died.</p>

<p>It's one thing to build a product with a proprietary codebase, and charge for licenses. You can still build communities around that model, and it's worked for decades.</p>

<p>But it's totally different when you build your product under an open source license, foster a community of users who then build their own businesses on top of that software, then yoink the license when your revenue is affected.</p>

<p>That's called a bait-and-switch.</p>

<p>Brian Cantrill's been sounding the alarm for years—yes, <em>that Brian Cantrill</em>, the one who posted this gem:</p>

<div>
<p><iframe src="https://www.youtube.com/embed/tDacjrSCeq4" frameborder="0" allowfullscreen=""></iframe></p>
</div>

<p><a href="https://www.youtube.com/watch?v=-zRN7XLCRhc">Brian's presentation</a> from 12 years ago is worth a watch, and the bottom line is summed up by <a href="https://drewdevault.com/2023/07/04/Dont-sign-a-CLA-2.html">Drew DeVault</a>:</p>

<blockquote>
  <p>[Contributor License Agreements are] a strategy employed by commercial companies with one purpose only: to place a rug under the project, so that they can pull at the first sign of a bad quarter. This strategy exists to subvert the open source social contract.</p>
</blockquote>

<p>By working on a project with a CLA, where you sign away your code, you're giving carte blanche for the company to take away your freedom to use their software.</p>

<p>From a company's perspective, if they want CLAs or if they want to use an anti-open-source license, they do <em>not</em> care about your freedoms. They're protecting revenue streams. They'll often talk about freeloaders, whether it's Amazon building a competing hosted solution, or some startup that found a way to monetize support.</p>

<p>But in the end, even if you have GPL code and you charge people to get it, it's not truly free as in freedom, if the company restricts how you can use, modify, and share the code.</p>

<p>But there's a distinction here, and I know a few people watching this are already yelling at me. There's "free" software, and there's "open source."</p>

<p>People in the free software community <a href="https://www.gnu.org/philosophy/open-source-misses-the-point.html">correctly identified the danger</a> of calling free software 'open source.'</p>

<p>I don't think we have to be so dogmatic about it, but there <em>is</em> a fundamental <em>philosophical</em> difference between the free software community, with organizations like the Free Software Foundation and Software Freedom Conservancy behind it, and the more business-oriented 'open source' culture.</p>

<p>Open source culture relies on trust. Trust that companies <em>you and I helped build</em> (even without being on the payroll) wouldn't rugpull.</p>

<p>But time and time again, that trust is shattered.</p>

<p>Is this slow death of corporate open source <em>bad</em>? Well, it's certainly been annoying, especially for devs like me who felt connected to these communities in the past. But it's not <em>all</em> bad.</p>

<h2>Why it's not bad for corporate open source to die</h2>

<p>In fact, this could be a huge opportunity; what happened to the spunky startups like Ansible, HashiCorp, Elasticsearch, or Redis? They were lighting their industries on fire with great new software.</p>

<p>What happened to building up communities of developers, crossing cultural and economic barriers to make software that changed the world?</p>

<p>There are still projects doing that, but so many succumb to enterprise money, where eye-watering amounts of revenue puts profit over philosophy.</p>

<p>But as money dries up, as more developers get laid off after the insane hiring trends of the past five years, maybe small dev teams can move the needle.</p>

<p>The AI bubble hasn't popped yet, so some great people are getting sucked into that vortex.</p>

<p>But someone else could be on the cusp of the next great open source project. Just... don't add a CLA, okay?</p>

<p>And it's not just devs; big companies can join in. Historically bad players like Microsoft and <em>maybe even Oracle</em>—man, it pains me to say that. They've even made strides in the past decade!</p>

<p>IBM could even mend some wounds, like they could reunite OpenTofu and Terraform. There's precedent, like when <a href="https://thenewstack.io/io-js-and-node-js-have-united-and-thats-a-good-thing/">IO.js merged back into Node.js</a> after a fork in 2015.</p>

<p>People asked what Red Hat could do to get me interested in Enterprise Linux again. It's simple: stop treating people who don't bring revenue to the table like garbage. Freeloaders are part of open source—whether they're running homelab or a competing business.</p>

<p>Companies who want to befriend open source devs need to show they care about more than just money. Unfortunately, the trend right now is to rugpull to juice the quarterlies, because money line always goes up!</p>

<p>But you know what? I'd just prefer honesty. If revenue is so dependent on selling software, just... make the software proprietary. Don't be so coy!</p>

<p>But to anyone who's not a multi-billion dollar corporation, don't be a victim of the next rugpull. The warning signs are clear: Don't sign a CLA. Stay away from projects that require them.</p>

<p>Stick to open source licenses that respect your freedom, not licenses written to juice revenue and prep a company for a billion-dollar-buyout.</p>

<p>Maybe it's time for a new open source rebellion. Maybe this time, money <em>won't</em> change company culture as new projects arise from the ash heap. Maybe not, but at least we can try.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Big telecom used fake and dead people to fight net neutrality, New York AG says (146 pts)]]></title>
            <link>https://www.vice.com/en/article/3aqq7b/big-telecom-used-fake-and-dead-people-to-fight-net-neutrality-ny-ag-says</link>
            <guid>40160292</guid>
            <pubDate>Thu, 25 Apr 2024 17:14:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.vice.com/en/article/3aqq7b/big-telecom-used-fake-and-dead-people-to-fight-net-neutrality-ny-ag-says">https://www.vice.com/en/article/3aqq7b/big-telecom-used-fake-and-dead-people-to-fight-net-neutrality-ny-ag-says</a>, See on <a href="https://news.ycombinator.com/item?id=40160292">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>NY AG Letitia James. Image:&nbsp;Bloomberg / Contributor via Getty Images</p></div><div data-component="BodyComponentRenderer"><p><span data-component="TextBlock"><div><p><a href="https://morningconsult.com/2017/06/21/poll-shows-broad-bipartisan-support-net-neutrality-rules/" target="_blank"><span>Survey</span></a> after <a href="https://publicconsultation.org/united-states/overwhelming-bipartisan-public-opposition-to-repealing-net-neutrality-persists/" target="_blank"><span>survey</span></a> has shown that the public overwhelmingly opposed the Trump FCC’s 2017 repeal of net neutrality rules designed to protect consumers from telecom monopolies. So the broadband industry engaged in a practice that’s becoming more and more common: it used fake <a href="https://www.vice.com/en/article/evg3xw/dead-people-are-posting-anti-net-neutrality-comments-to-the-fcc-website"><span>and even dead people</span></a> to generate bogus support for the industry’s unpopular plan. </p><p>A <a href="https://ag.ny.gov/sites/default/files/oag-fakecommentsreport.pdf" target="_blank"><span>new report</span></a> by New York Attorney General Letitia James investigated this practice and found that the broadband industry used three marketing firms to create artificial support for the repeal:&nbsp; Fluent, Opt-Intelligence, and React2Media. As part of an agreement with NY’s AG, the companies were required to implement “comprehensive reforms” and pay $4.4 million in penalties. The campaign was operated by a non-profit organization funded by the broadband industry called <a href="https://www.broadbandforamerica.com/" target="_blank"><span>Broadband for America</span></a>, according to the report.</p></div></span><span></span><span data-component="TextBlock"><p>The NY AG office did not respond to a request for comment asking why the broadband providers that hired these firms were neither named nor penalized.&nbsp;</p></span><span data-component="TextBlock"><p>“Americans’ voices are being drowned out by masses of fake comments and messages being submitted to the government to sway decision-making,” James said <a href="https://ag.ny.gov/press-release/2021/attorney-general-james-issues-report-detailing-millions-fake-comments-revealing" target="_blank"><span>in a statement</span></a>. “Instead of actually looking for real responses from the American people, marketing companies are luring vulnerable individuals to their websites with freebies, co-opting their identities, and fabricating responses that giant corporations are then using to influence the policies and laws that govern our lives.”</p></span><span data-component="TextBlock"><p>First passed in 2015, the FCC’s net neutrality rules prevented regional broadband monopolies from abusing their gatekeeper power to harm competitors and consumers. The 2017 repeal not only eliminated those rules, it <a href="https://www.vice.com/en/article/yw5d5g/net-neutrality-big-telecom-broadband-deregulation"><span>neutered much of the FCC’s consumer protection authority</span></a>, while also attempting to ban state regulators from filling the consumer protection void. </p></span></p><p><span data-component="TextBlock"><div><p>All told, the investigation found that nearly 18 million of the more than 22 million comments the FCC received in its 2017 proceeding to repeal net neutrality rules were fake. About 8.5 million of those comments were sent by people who simply didn’t exist. Many, however, simply used the names of real people without their knowledge.</p><p>Many consumers were <a href="https://www.buzzfeednews.com/article/jsvine/net-neutrality-fcc-fake-comments-impersonation" target="_blank"><span>shocked to learn</span></a> their names had been used in such a fashion. Even Senators Patrick Toomey and Jeff Merkley found their identities used <a href="https://www.washingtonpost.com/news/the-switch/wp/2018/05/23/two-senators-say-their-identities-were-stolen-in-fake-net-neutrality-comments-to-the-fcc/" target="_blank"><span>in support of the repeal</span></a>. Even this reporter's identity was also used to submit <a href="https://www.fcc.gov/ecfs/filing/1042876702862" target="_blank"><span>a fake comment</span></a> supporting the FCC’s proposal. When I contacted the agency to ask it be removed, I was told <a href="https://www.techdirt.com/articles/20170710/10071737756/fcc-insists-it-cant-stop-impostors-lying-about-my-views-net-neutrality.shtml" target="_blank"><span>there was nothing it could do</span></a>. </p><p>The NY AG inquiry found that several of these lead-generating companies used prizes like gift cards and sweepstakes entries to lure consumers to their websites and provide their personal information. That information was then used to petition the government in support of the net neutrality repeal without those users’ consent or approval.</p></div></span><span data-component="TextBlock"><div><p>The creation of fake grass roots support for corporation-backed policies is frequently dubbed “astroturf,” a tactic that has become increasingly common as corporations push for policies broadly opposed by the general public. </p><p>One <a href="https://www.wsj.com/articles/many-comments-critical-of-fiduciary-rule-are-fake-1514370601" target="_blank"><span>2017 effort at the Labor Department</span></a> to prevent conflicts of interest in retirement advice was plagued by similar bogus public comments. Fake comments also inundated the <a href="https://www.wsj.com/articles/lawmaker-seeks-probe-into-fake-comments-on-payday-lending-rule-1517862004" target="_blank"><span>Consumer Financial Protection Bureau</span></a> when it proposed a rule in 2018 trying to rein in some of the nastier habits of the payday lending industry.</p></div></span><span data-component="TextBlock"><div><p>Data obtained by FOIA request also showed the NFL was involved in <a href="https://www.theverge.com/2018/9/10/17840960/nfl-fake-fan-letters-fcc-2014-sports-blackout-rule" target="_blank"><span>sending fake fan comments to the FCC</span></a> as early as 2014 as the league tried to fight agency efforts to eliminate the so-called "black out rule," requiring that broadcasters black out certain game broadcasts if real-world game attendance didn’t meet the league's liking.</p><p>All told, the AG’s office found that such tactics were used by corporations to influence government decision making in more than 100 different, unrelated policy campaigns. </p></div></span><span data-component="TextBlock"><p>“From net neutrality rules to laws affecting criminal justice reform, health care, and more, these fake comments have simply been generated to influence too many government policies, which is why we are cracking down on this illegal and deceptive behavior,” James said. “My office will continue to shine a spotlight on abuses and disinformation and ensure those who break the law are held accountable.”</p></span><span data-component="TextBlock"></span></p></div><div><p><h3>ONE EMAIL. ONE STORY. EVERY WEEK. SIGN UP FOR THE VICE NEWSLETTER.</h3></p><p>By signing up, you agree to the<!-- --> <a href="https://vice-web-statics-cdn.vice.com/privacy-policy/en_us/page/terms-of-use.html">Terms of Use</a> <!-- -->and<!-- --> <a href="https://vice-web-statics-cdn.vice.com/privacy-policy/en_us/page/privacy-policy.html">Privacy Policy</a> <!-- -->&amp; to receive electronic communications from Vice Media Group, which may include marketing promotions, advertisements and sponsored content.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DDC OLED: how to drive a tiny display from an HDMI port. (2022) (187 pts)]]></title>
            <link>https://mitxela.com/projects/ddc-oled</link>
            <guid>40159766</guid>
            <pubDate>Thu, 25 Apr 2024 16:42:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mitxela.com/projects/ddc-oled">https://mitxela.com/projects/ddc-oled</a>, See on <a href="https://news.ycombinator.com/item?id=40159766">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="mxmain"><p><a href="https://mitxela.com/projects/hardware"><img onload="this.style.opacity=1;" src="https://mitxela.com/img/titles/mitxela_dot_com-65.png" title="Back to Hardware" alt="Back to Hardware"></a></p><p>31 Mar 2022<br><b>Progress: Complete</b></p><p>
I have a proclivity to stupid and/or pointless projects. This is one of them. Conceived from a conversation that ended with "Hey, it would technically be possible to..." – sure, let's do it.</p><p>

DDC, display data channel, is a protocol for reading information about what resolutions and so on a monitor supports. It was later extended to DDC/CI, that lets you set brightness and other parameters, but fundamentally, the original idea was to stick a cheap i2c eeprom on each device with some basic info on it. (Technically, the <i>original</i> idea was even simpler than that, but let's not get into that.)</p><p>

It began in the VGA days, but has become so entrenched that even modern hardware with HDMI or DisplayPort supports it. That's right, in an HDMI cable, nestled amongst the high-speed differential pairs, there's an exceedingly slow i2c bus.</p><p>

Tiny OLED dot-matrix displays often have an i2c controller, so I had the idea to try and plug one <i>directly</i> into an HDMI port. Hilarious! Let's do it.</p><h3>Wiring</h3><p>
I chopped up a broken HDMI cable and found the pins we care about: SCL, SDA, 5V, DDC-GND, and HPD (Hot Plug Detect). A quick google got us the pinout:</p><p>

<img src="https://mitxela.com/img/uploads/blinken/oled/hdmi-pinout.png" alt="HDMI pinout"></p><p>

This diagram shows an HDMI socket, if you're poking pins into the cable then flip left to right.</p><table>
<tbody><tr><th>HDMI Pin Number</th><th>Signal</th></tr>
<tr><td>1</td><td>TMDS Date 2+</td></tr>
<tr><td>2</td><td>TMDS Data 2 shield</td></tr>
<tr><td>3</td><td>TMDS Data 2-</td></tr>
<tr><td>4</td><td>TMDS Data 1+</td></tr>
<tr><td>5</td><td>TMDS Data 1 shield</td></tr>
<tr><td>6</td><td>TMDS Data 1-</td></tr>
<tr><td>7</td><td>TMDS Data 0+</td></tr>
<tr><td>8</td><td>TMDS Data 0 shield</td></tr>
<tr><td>9</td><td>TMDS Data 0-</td></tr>
<tr><td>10</td><td>TMDS Clock+</td></tr>
<tr><td>11</td><td>TMDS Clock shield</td></tr>
<tr><td>12</td><td>TMDS Clock-</td></tr>
<tr><td>13</td><td>CEC</td></tr>
<tr><td>14</td><td>HEC Data-</td></tr>
<tr><td>15</td><td>SCL (Serial Clock for DDC</td></tr>
<tr><td>16</td><td>SDA (Serial Data Line for DDC</td></tr>
<tr><td>17</td><td>DDC / CEC / HEC Ground</td></tr>
<tr><td>18</td><td>+5 V Power (50 mA max)</td></tr>
<tr><td>19</td><td>Hot Plug Detect (1.3) / HEC Data+ (1.4)</td></tr>
</tbody></table><p>

I've a tendency to choose low-risk options when it comes to hardware hacking, no one likes seeing blue smoke, especially if the dev board was expensive. Today though I feel like living on the edge, and I'm going to solder this display directly onto the severed HDMI cable coming out of my reasonably new laptop. What a thrill! If we mess up, this stupid experiment could be very expensive.</p><p>

You have to register to download the HDMI spec which is more effort than I have for this, but the Hot Plug Detect pin has a pretty descriptive name. I guessed that this either has to be pulled up or pulled down to signal that a cable is connected. Sticking a 20K resistor to the 5V pin seemed to do the trick. With the oscilloscope, we can now see activity on the SCL/SDA lines when it's plugged into the laptop.</p><p>

<img src="https://mitxela.com/img/uploads/blinken/oled/hdmi1.jpg" alt="Scoping the HDMI cable"></p><p>

I then boldly soldered a header connector to the four lines we care about. I'd ordered a couple of OLED screens for this experiment, they both use the SSD1306 controller, and come on breakout boards with the four pins on a header.</p><h3>i2c and SMBus</h3><p>
On linux we can access i2c devices by loading the i2c-dev module (<code>modprobe i2c-dev</code>) which makes a bunch of i2c devices appear at <code>/dev/i2c-*</code>. My laptop shows nine i2c devices.</p><p>

Some of these are in fact SMBus, which is a subset of i2c. As far as we're concerned it's just i2c with a bunch of extra restrictions, such as limiting transactions to 32 bytes. </p><p>

It's also worth installing the <code>i2c-tools</code> package which comes with the i2cdetect utility and sets a udev rule for group permissions. To access i2c devices without sudo, add yourself to the i2c group (<code>sudo usermod -G i2c -a username</code>) and log in again for it to take effect. I also had to run <code>udevadm trigger</code> for the udev rule to take effect. Might have been simpler to reboot (never!).</p><p>

Beware: the i2c device naming is not consistent. I figured out that <code>/dev/i2c-3</code> was the HDMI DDC line I'd soldered to, but after unloading and re-loading the module, it became <code>/dev/i2c-4</code>. We need to be <i>really</i> careful about this, writing (or even reading) to the wrong i2c device could easily muck up some of the laptop hardware. </p><p>

I installed another package, <code>ddcutil</code>, only to be able to do <code>ddcutil detect</code>. This lists displays and their associated i2c bus. It's also possible to do <code>i2cdetect -l</code> which lists the i2c devices and their description. In my case, three of the i2c lines had "i915 gmbus" in their description, i915 is the intel graphics driver. <code>ddcutil</code> is still probably the easiest way to figure it out.</p><h3>Initial tests</h3><p>
The scope showed the SCL/SDA lines are already pulled up, so we should be able to connect the screen without any other hardware. The 5V line on an HDMI port can apparently source up to 50mA, so we don't even need a power supply. Neat!</p><p>

<img src="https://mitxela.com/img/uploads/blinken/oled/hdmi2.jpg" alt="OLED display connected to the severed cable"></p><p>

<code>i2cdetect</code> can scan an i2c bus for devices. As expected, without the cable connected, it detected nothing on the bus. But when I connected my severed cable, with the hot plug detect resistor in place, a whole load of responses appeared. I don't know quite what's going on here (does the video hardware expose a bunch of stuff when the cable is connected?) but the important point is that when I connected the display, an extra device showed up at <code>0x3c</code>.</p><p>

The quickest way to talk to the display is with a python script. The bundled smbus library lets us get going very quickly.</p><pre>import smbus

bus = smbus.SMBus(4) # for /dev/i2c-4
i2caddr = 0x3c

bus.write_i2c_block_data(i2caddr, 0, [0xaf] ) # turn display on
</pre><p>

There's a bunch of commands we need to send before we can actually display anything, including enabling the charge pump. Note that the SSD1306 datasheet, at least the copy I found, has an appnote appended onto the end of it that explains the initialization process more clearly than the main document (some of the commands are not documented in the main command table). As always, the fastest way to get going is to look at the source code to existing libraries, so I found somebody else's library for the SSD1306 and copied their init commands. The display sprang to life!</p><p>

<img src="https://mitxela.com/img/uploads/blinken/oled/hdmi3.jpg" alt="OLED display showing static"></p><p>

I also found a script to draw text to an SSD1306, and quickly patched in my smbus stuff. Success!</p><p>

<img src="https://mitxela.com/img/uploads/blinken/oled/hdmi4.jpg" alt="Hello World and some other junk on the screen, with laptop in view"></p><p>

No microcontroller, no other hardware, just an SSD1306 OLED plugged straight into the HDMI port. I find this <i>very satisfying</i>.</p><h3>Dumping data to it</h3><p>
Sticking with the python script for now, I'd like to be able to take a 128x64 pixel image and dump it onto the display. The text-drawing routine I borrowed uses SSD1306 commands to control the column and page address that data is being written to, so a single character can be drawn without affecting the rest of the display (hence the uninitialized background pixels remaining in that image above).</p><p>

There's a whole load of different memory addressing modes for this thing, along with confusing terminology. SEG or COL is the X coordinate, COM is the Y coordinate, but these are grouped into pages. The datasheet has some diagrams.</p><p>

<img src="https://mitxela.com/img/uploads/blinken/oled/com-pages.png" alt="Explanation of SEG, COM and PAGE"></p><p>

<img src="https://mitxela.com/img/uploads/blinken/oled/horiz-address-mode.png" alt="Horizontal addressing mode"></p><p>

The display is monochrome, each page is 8 rows (COMs) and when we pipe data to the display, each byte is one page, one column of pixels. It may have made more sense to configure the display for vertical addressing mode, so the bits would all be in order, but I figured it would be quickest to just do the bit-shuffling at our end.</p><p>

With python PIL (pillow) we can convert an image to monochrome with <code>.convert(1)</code> and serialize it with <code>.tobytes()</code>. This will have each byte represent 8 horizontal pixels, but we want each byte to represent 8 vertical pixels. Instead of doing some tedious bitwise logic, the fastest way to fix this is by rotating the image 90 degrees before we serialize it, then loading those bytes into a numpy matrix and transposing it. It's the kind of thing that either works perfectly first time, or outputs a complete mess, in which case you just permute the order of operations until it works. So much easier than thinking.</p><p>

As I mentioned, SMBus won't let us send more than 32 bytes at a time, even though this device is just plain i2c. We can get around this by accessing the i2c device directly from python. The trick is to use <code>ioctl</code> to configure the slave address. In the kernel header file <code>i2c-dev.h</code> there are definitions for the constants needed, we only care about <code>I2C_SLAVE</code>.</p><pre>import io, fcntl

dev = "/dev/i2c-4"
I2C_SLAVE=0x0703 # from i2c-dev.h
i2caddr = 0x3c

bus = io.open(dev, "wb", buffering=0)
fcntl.ioctl(bus, I2C_SLAVE, i2caddr)

bus.write(bytearray([0x00, 0xaf]))
</pre><p>

By alternately sending 1024 bytes of zero or 0xFF, I could gauge how quickly this updated the display. Seemed to work fastest by sending 256 bytes at a time, not sure if that's a limitation of the i2c hardware (is there some extra layer of buffering?).</p><p>

With this I could get between 5 and 10 frames per second (compared to about 2FPS with the SMBus limitation). I think the DDC is running at 100kHz, but regardless this is certainly pushing the limits of what it was intended for.</p><h3>Make it a monitor</h3><p>
We could just write our application to draw directly to this screen, but that's not good enough, I want it to be a monitor.</p><p>

(I'm not sure what our application here even is, but that's beside the point. I want it to be a monitor!)</p><p>

We could write our own video driver. As educational as this sounds, it would be a colossal amount of work and I was rather hoping to have this wrapped up within the evening.</p><p>

There are a bunch of dummy video drivers in existence, these are intended for headless machines in order to enable VNC and so on. <code>xserver-xorg-video-dummy</code> may function for us, but I have a terrible feeling this won't play well at all with us also having real display outputs. There's <code>Xvfb</code>, a virtual framebuffer, but this won't do us much good if we want to have our desktop extend onto it. </p><p>

Since I'm using xorg, it seems the right way to fake a monitor, without spending days on it, is to go through xrandr.</p><p>

xrandr is both a library, and a userspace commandline utility.</p><p>

It took me a while to get to grips with the xrandr terminology. It's not particularly well explained.</p><ul>
<li> The "framebuffer" is the whole desktop, i.e. what gets saved if you take a screenshot. 
</li><li> An "output" is a physical video output.
</li><li> A "monitor" is virtual concept, that normally is mapped to all or part of the framebuffer, and normally corresponds to one output. If you maximize a window, it fills the dimensions of the monitor.
  <ul>
  <li> However, you can have one display output be more than one monitor (for instance, to split a widescreen display into effectively two monitors)
  </li><li> Or, multiple outputs can be one monitor, i.e. multiple physical screens can be treated as if they were a single display, maximizing a window would cover all of them.
  </li></ul>
</li><li> a "mode" is a video format, consisting of at least width, height and framerate. Specifically, VESA CVT modelines are used, and can be generated with the <code>cvt</code> utility.
  <ul>
  <li> xrandr's addmode and delmode refer to associating an existing mode with a display output
  </li><li> xrandr's newmode and rmmode refer to adding a new mode to the server, that can then be associated with an output
  </li></ul>
</li></ul><p>

Note that this list is specific to xrandr, in other aspects of linux, the terms "output", "display", "monitor" and "screen" are often used differently. </p><p>

On my laptop, calling xrandr shows five video outputs: eDP-1, which is the main screen with a bazillion modes available, and four disconnected (HDMI-1, HDMI-2, DP-1, DP-2), presumably three of which are available via thunderbolt or something.</p><h3>Faking a monitor, attempt 1</h3><p>
Looking around, it seems the recommended way to do this is to convince xrandr that one of the unused video outputs is connected. For things like VNC there's a whole market for "dummy plugs" which make a video card think a monitor is connected. We obviously don't want or need to do that, we should be able to coax xrandr into behaving through software. </p><p>

In order to output our abnormally low resolution of 128x64 on HDMI, in theory we first generate a CVT modeline:</p><pre>$ cvt 128 64
# 128x64 39.06 Hz (CVT) hsync: 3.12 kHz; pclk: 0.50 MHz
Modeline "128x64_60.00"    0.50  128 136 144 160  64 67 77 80 -hsync +vsync
</pre><p>

then we add this mode to the x server:</p><pre>$ xrandr --newmode "128x64_60.00"    0.50  128 136 144 160  64 67 77 80 -hsync +vsync
</pre><p>

At this point, xrandr shows the unused mode at the end of its output. Confusingly it looks like the mode is part of the last output listed, but it isn't (yet). We next add this mode to one of the outputs:</p><pre>xrandr --addmode HDMI-1 128x64_60.00
</pre><p>

and finally try to use it:</p><pre>xrandr --output HDMI-1 --mode 128x64_60.00 --right-of eDP-1
</pre><p>

I should point out, I've a hotkey on my laptop which cycles through sane display modes, so I'm comfortable trying whatever here, but otherwise there's a chance you end up unable to see anything. It should still be possible to access the other virtual terminals with ctrl+alt+F2 etc, since these configure the display using KMS (Kernel Mode Setting) that sits a layer below the X server.</p><p>

I tried this with both HDMI-1 and HDMI-2. Both of them are listed as disconnected. Our cable connected to HDMI-1 is pulling the Hot Plug Detect pin high, but not responding to regular DDC queries.</p><p>

I may not have exhausted all possibilities, but I couldn't get this to work. I suspect the video driver simply can't cope with this ludicrously nonstandard resolution, and the modeline is just junk. The 39.06Hz certainly raised one of my eyebrows. I tried again specifically setting the framerate to 39.06Hz also, to no avail.</p><p>

Honestly, abusing the video outputs like this feels like a poor solution anyway.</p><p>

To clean up this mess, first use <code>--delmode</code> to free up the modes from any outputs, then <code>--rmmode</code> to remove them from the X server.</p><h3>Faking a monitor, attempt 2</h3><p>
When you change display settings xrandr generally sets all the relevant settings automatically, but if we go deeper we can manually fiddle with them. Following another idea on the internet, we should be able to make a virtual monitor by simply extending the framebuffer, and defining a monitor to be there, without bothering to associate it with an output.</p><p>

Interestingly, if you make the framebuffer bigger than needed, by default it will automatically pan when your mouse approaches the border. Useful to know, but here we need to specifically stop that happening. The <code>--panning</code> option takes up to twelve parameters, for panning area, tracking area, and border. Tracking is the area our mouse cursor is limited to. Normally, panning, tracking and framebuffer are all set to the same size. I'm not sure what "border" represents in the context of panning, it didn't seem to have any effect when I played with it.</p><p>

Setting panning to 0x0 will disable it, but that also limits the tracking area, so our mouse won't be able to reach the new bit of framebuffer. Instead we limit panning to the size of the main monitor, effectively disabling it, and extend the tracking area into our new chunk of framebuffer. The full command:</p><pre>xrandr --fb 2048x1080 --output eDP-1 --panning 1920x1080/2048x1080
</pre><p>

Then we can define a new monitor to exist in this new chunk of framebuffer:</p><pre>xrandr --setmonitor virtual 128/22x64/11+1920+0 none
</pre><p>

The size is set in both pixels and mm, I guessed it's approximately 22m by 11mm, it doesn't really matter though. "virtual" is the name of this monitor, we could call it anything. "none" is the output. We can see monitors with <code>xrandr --listmonitors</code> and later undo this muck with <code>xrandr --delmonitor virtual</code>.</p><p>

I can now point my script to dump that bit of framebuffer onto the OLED screen. Hurrah! One slight issue with this method is that the tracking is not L-shaped, my mouse can access the strip of framebuffer that doesn't correspond to any monitor. I don't know if there's an easy fix for this, but if it really bothered us we could enforce valid cursor positions through Xlib in our script.</p><h3>Reading the framebuffer</h3><p>
I assumed I'd need to throw away the python script at this point but there's <code>python-xlib</code> which gives us access to most of what we need. It's a little irritating that there isn't really any documentation, and the method names are not identical, for instance <code>XGetImage</code> is now <code>root.get_image</code>.</p><p>

Here is some trivia: did you know that the mouse cursor is rendered by hardware? It makes sense, I suppose. It also explains why the mouse cursor isn't normally captured when you take a screenshot. But we want to capture the framebuffer <i>and the mouse on top of it</i> so there's a lot more work involved.</p><p>

Getting the cursor image would normally be achieved through <code>XFixesCursorImage</code> but <code>python-xlib</code> hasn't yet implemented all of XFixes. I was prepared to start over in C until I spotted someone's done all the work for me with <a href="https://github.com/zorvios/PyXCursor">this repo</a> which binds to X11/XFixes using ctypes specifically to get the cursor information.</p><p>

We now have everything we need to capture the new virtual monitor image, superimpose the cursor in the right place (remembering to adjust for xhot and yhot, the pointer/cursor image offset), convert the result to a monochrome image with the right amount of bit-shuffling and pipe it to the display continuously.</p><p>

<img src="https://mitxela.com/img/uploads/blinken/oled/hdmi5.jpg" alt="OLED screen showing desktop, cursor and status bar"></p><p>

That's i3 workspace four, with a completely crushed i3status and incomprehensible dithered top corner of my background image. Beautiful!</p><h3>Demo</h3><p>

<iframe width="704" height="396" src="https://www.youtube.com/embed/8UbVgUFfN8U" allowfullscreen=""></iframe></p><h3>Conclusion</h3><p>
To improve the framerate, we could enhance our script and only send the changes instead of redrawing the display each frame. As fantastic as this could be, given that I have absolutely no use for this tiny second screen anyway, I'm not particularly inclined to make it happen.</p><p>

If for some mad reason you want to try this out yourself, the script can be <a href="https://github.com/mitxela/ddc-oled">found on github</a>.</p><p>

<b>Update:</b> How can we make the smallest and worst "HDMI" display even sillier? Make it <a href="https://mitxela.com/projects/steampunk-oled">steampunk</a>.</p><nav>
<a href="https://mitxela.com/projects/random" title="random project">~</a>
<span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="https://mitxela.com/">mitxela.com</a></span> » 
<span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="https://mitxela.com/projects">Projects</a></span> » 
<span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="https://mitxela.com/projects/hardware">Hardware</a></span> »
<span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="https://mitxela.com/projects/ddc-oled">DDC OLED</a></span>
<p>Questions? Comments? Check out the <a href="https://mitxela.com/forum">Forum</a>
</p><p><a href="https://mitxela.com/support">Support mitxela.com</a>
</p></nav></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I made a programmable computer from NAND gates (337 pts)]]></title>
            <link>https://github.com/ArhanChaudhary/NAND</link>
            <guid>40159278</guid>
            <pubDate>Thu, 25 Apr 2024 16:08:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ArhanChaudhary/NAND">https://github.com/ArhanChaudhary/NAND</a>, See on <a href="https://news.ycombinator.com/item?id=40159278">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="https://github.com/ArhanChaudhary/NAND/blob/main/media/logo.png"><img src="https://github.com/ArhanChaudhary/NAND/raw/main/media/logo.png" width="200"></a>
</p>
<hr>

<p dir="auto"><b>N</b> ot<br>
<b>A</b> <br>
<b>N</b> and-powered<br>
<b>D</b> evice</p>

<p dir="auto">is a Turing equivalent 16-bit computer made entirely from a <a href="https://en.wikipedia.org/wiki/Clock_rate" rel="nofollow">clock</a> and <a href="https://en.wikipedia.org/wiki/NAND_gate" rel="nofollow">NAND gates</a> emulated on the web. NAND features its own CPU, machine code language, assembly language, assembler, virtual machine language, virtual machine translator, programming language, compiler, IDE, and user interface. NAND is based on the Jack-VM-Hack platform specified in the <a href="https://www.nand2tetris.org/" rel="nofollow">Nand to Tetris course</a> and its <a href="https://www.amazon.com/Elements-Computing-Systems-second-Principles-dp-0262539802/dp/0262539802/ref=dp_ob_title_bk" rel="nofollow">associated book</a>.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description demo.mp4">demo.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/57512390/318906352-7bedf191-d42c-4553-920f-01a539161bd3.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTQwNzU1MDcsIm5iZiI6MTcxNDA3NTIwNywicGF0aCI6Ii81NzUxMjM5MC8zMTg5MDYzNTItN2JlZGYxOTEtZDQyYy00NTUzLTkyMGYtMDFhNTM5MTYxYmQzLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDI1VDIwMDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEwMzNmMWM3Mzk0YzlhOGUxNzI5MzYyMTBhMGUzMjBlN2MzOGZhODQ0ZWZhMTQ1NTZkODQ5ZGJlNTYyMjIwN2MmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.RYMwa-nB36VvkpxtK4ayIs3uUrzZdn__kMPveEFJ47s" data-canonical-src="https://private-user-images.githubusercontent.com/57512390/318906352-7bedf191-d42c-4553-920f-01a539161bd3.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTQwNzU1MDcsIm5iZiI6MTcxNDA3NTIwNywicGF0aCI6Ii81NzUxMjM5MC8zMTg5MDYzNTItN2JlZGYxOTEtZDQyYy00NTUzLTkyMGYtMDFhNTM5MTYxYmQzLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDI1VDIwMDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEwMzNmMWM3Mzk0YzlhOGUxNzI5MzYyMTBhMGUzMjBlN2MzOGZhODQ0ZWZhMTQ1NTZkODQ5ZGJlNTYyMjIwN2MmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.RYMwa-nB36VvkpxtK4ayIs3uUrzZdn__kMPveEFJ47s" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h3 tabindex="-1" dir="auto">Table of Contents</h3><a id="user-content-table-of-contents" aria-label="Permalink: Table of Contents" href="#table-of-contents"></a></p>
<ul dir="auto">
<li><a href="#example-programs">Example programs</a>
<ul dir="auto">
<li><a href="#average">Average</a></li>
<li><a href="#pong">Pong</a></li>
<li><a href="#2048">2048</a></li>
<li><a href="#overflow">Overflow</a></li>
<li><a href="#secretpassword">SecretPassword</a></li>
<li><a href="#geneticalgorithm">GeneticAlgorithm</a></li>
</ul>
</li>
<li><a href="#writing-programs-for-nand">Writing programs for NAND</a>
<ul dir="auto">
<li><a href="#jack-introduction">Jack Introduction</a></li>
<li><a href="#custom-data-types">Custom Data Types</a></li>
<li><a href="#weak-type-coercions">Weak Type Coercions</a></li>
<li><a href="#manual-memory-management">Manual Memory Management</a></li>
<li><a href="#undefined-behavior">Undefined Behavior</a>
<ul dir="auto">
<li><a href="#operator-priority">Operator Priority</a></li>
<li><a href="#lesser-and-greater-than-operators">Lesser and Greater than Operators</a></li>
<li><a href="#-32768">-32768</a></li>
<li><a href="#calling-a-function-with-too-few-arguments">Calling a Function with Too Few Arguments</a></li>
<li><a href="#improper-type-casting">Improper Type Casting</a></li>
<li><a href="#stack-overflows">Stack Overflows</a></li>
<li><a href="#modifying-stack-frames-or-internal-registers">Modifying Stack Frames or Internal Registers</a></li>
</ul>
</li>
<li><a href="#hardware-specification">Hardware Specification</a></li>
<li><a href="#beyond-the-jack-os">Beyond the Jack OS</a></li>
</ul>
</li>
<li><a href="#how-does-nand-work">How does NAND work?</a></li>
<li><a href="#jack-reference">Jack Reference</a>
<ul dir="auto">
<li><a href="#program-structure">Program Structure</a></li>
<li><a href="#syntax">Syntax</a></li>
<li><a href="#variables">Variables</a></li>
<li><a href="#statements">Statements</a></li>
</ul>
</li>
<li><a href="#jack-os-reference">Jack OS Reference</a>
<ul dir="auto">
<li><a href="#array">Array</a></li>
<li><a href="#keyboard">Keyboard</a></li>
<li><a href="#math">Math</a></li>
<li><a href="#memory">Memory</a></li>
<li><a href="#output">Output</a></li>
<li><a href="#screen">Screen</a></li>
<li><a href="#string">String</a></li>
<li><a href="#sys">Sys</a></li>
<li><a href="#error-codes">Error Codes</a></li>
</ul>
</li>
<li><a href="#faq">FAQ</a>
<ul dir="auto">
<li><a href="#whoa-is-everything-made-from-nand-gates">Whoa, is <em>everything</em> made from NAND gates?</a></li>
<li><a href="#did-you-design-nand-by-yourself">Did you design NAND by yourself?</a></li>
<li><a href="#if-theres-only-one-type-what-is-the-point-of-specifying-types-at-all">If there's only one type, what is the point of specifying types at all?</a></li>
<li><a href="#why-does-the-ide-feel-finnicky">Why does the IDE feel finnicky?</a></li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Example programs</h2><a id="user-content-example-programs" aria-label="Permalink: Example programs" href="#example-programs"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Average</h3><a id="user-content-average" aria-label="Permalink: Average" href="#average"></a></p>
<p dir="auto">A simple program that inputs some numbers and computes their average, showing off control flow, arithmetic operations, I/O, and dynamic memory allocation.</p>
<p dir="auto">Program output:</p>
<div data-snippet-clipboard-copy-content="How many numbers? 4
Enter a number: 100
Enter a number: 42
Enter a number: 400
Enter a number: 300
The average is 210"><pre><code>How many numbers? 4
Enter a number: 100
Enter a number: 42
Enter a number: 400
Enter a number: 300
The average is 210
</code></pre></div>
<p dir="auto"><em>This program was supplied by the Nand to Tetris software suite.</em></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Pong</h3><a id="user-content-pong" aria-label="Permalink: Pong" href="#pong"></a></p>
<p dir="auto">The game of Pong, showing off the language's object-oriented model. Use the arrow keys to move the paddle left and right to bounce a ball. Every bounce, the paddle becomes smaller, and the game ends when the ball hits the bottom of the screen.</p>
<p dir="auto"><em>This program was supplied by the Nand to Tetris software suite.</em></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">2048</h3><a id="user-content-2048" aria-label="Permalink: 2048" href="#2048"></a></p>
<p dir="auto">The game of 2048, showing off recursion and complex application logic. Use the arrow keys to move the numbers around the 4x4 grid. The same numbers combine into their sum when moved into each other. Once the 2048 tile is reached, you win the game, though you can keep playing on until you lose. You lose the game when the board is full and you can't make any more moves.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Overflow</h3><a id="user-content-overflow" aria-label="Permalink: Overflow" href="#overflow"></a></p>
<p dir="auto">A program that deliberately causes a stack overflow via infinite recursion to perform a <a href="https://en.wikipedia.org/wiki/Virtual_machine_escape" rel="nofollow">virtual machine escape</a>. It leverages the fact that there are no runtime checks to prevent a stack overflow. No other modern platform will let you do this :-)</p>
<p dir="auto">Upon running, the program will constantly print the stack pointer to the screen. Once this displayed value exceeds 2048, the stack will have reached the end of its intended memory space and spill onto the heap memory space, causing the print statement to malfunction in explosive fashion:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ArhanChaudhary/NAND/blob/main/media/overflow.png"><img src="https://github.com/ArhanChaudhary/NAND/raw/main/media/overflow.png" width="700"></a></p>
<p dir="auto">Two things of noteworthy interest are worth pointing out.</p>
<p dir="auto">If you reload the page and run this program on an empty RAM (a RAM full of zeroes), you will notice that the program resets itself halfway through its execution despite not pressing the "Reset" button. Why this happens is simple: the jailbroken runtime executes an instruction that sets the <a href="https://en.wikipedia.org/wiki/Program_counter" rel="nofollow">program counter</a>'s value to 0, effectively telling the program to jump to the first instruction and start over.</p>
<p dir="auto">If you run the GeneticAlgorithm example program and then run this immediately afterwards, the program in its rampage reads old RAM memory that was simply never overwritten.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ArhanChaudhary/NAND/blob/main/media/old_memory.png"><img src="https://github.com/ArhanChaudhary/NAND/raw/main/media/old_memory.png" width="700"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">SecretPassword</h3><a id="user-content-secretpassword" aria-label="Permalink: SecretPassword" href="#secretpassword"></a></p>
<p dir="auto">A program that exploits the fact that the runtime doesn't prevent <a href="https://en.wikipedia.org/wiki/Stack_buffer_overflow" rel="nofollow">stack smashing</a> to call a function that would otherwise be inaccessible. In order to understand how this works, let's examine this illustration of NAND's stack frame layout.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ArhanChaudhary/NAND/blob/main/media/stack_layout.png"><img src="https://github.com/ArhanChaudhary/NAND/raw/main/media/stack_layout.png" width="700"></a></p>
<p dir="auto"><em>taken from the <a href="https://www.amazon.com/Elements-Computing-Systems-second-Principles-dp-0262539802/dp/0262539802/ref=dp_ob_title_bk" rel="nofollow">Nand to Tetris book</a>.</em></p>
<p dir="auto">If you're unfamiliar with stack layouts, here's the main idea behind the exploit. Whenever a function returns, it needs to know where (which machine code instruction memory address) it should go to proceed with execution flow. So, when the function is first called, this memory address, along with some other unimportant data, is temporarily stored on the stack in a memory region referred to as the <a href="https://en.wikipedia.org/wiki/Call_stack#STACK-FRAME" rel="nofollow">stack frame</a> as a reference for where to return. The illustration describes the exact position of this return address relative to the function call, a position that can be reverse engineered.</p>
<p dir="auto">The program enables the user to overwrite a single memory address in the RAM to any value. Putting two and two together, if the user were to overwrite the return address of a stack frame with the address of another function, they essentially gain the ability to execute arbitrary code included in the program.</p>
<p dir="auto">Indeed, if you enter 267 as the memory location and 1715 as the value to overwrite, two numbers reverse engineered by manually inspecting the stack memory space and the assembler, you'll see this idea in working action.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ArhanChaudhary/NAND/blob/main/media/secret_password.png"><img src="https://github.com/ArhanChaudhary/NAND/raw/main/media/secret_password.png" width="700"></a></p>
<p dir="auto">This isn't a vulnerability unique to NAND. <a href="https://en.wikipedia.org/wiki/Buffer_overflow" rel="nofollow">It exists in C as well</a>! How cool!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">GeneticAlgorithm</h3><a id="user-content-geneticalgorithm" aria-label="Permalink: GeneticAlgorithm" href="#geneticalgorithm"></a></p>
<p dir="auto">Believe it or not, out of the many, <em>many</em> different components of NAND, this single-handedly took the longest to develop!</p>
<p dir="auto">This program is a creature simulation that utilizes simple machine learning. It follows the artificial intelligence coded series (parts <a href="https://www.youtube.com/watch?v=VnwjxityDLQ" rel="nofollow">one</a> and <a href="https://www.youtube.com/watch?v=BOZfhUcNiqk" rel="nofollow">two</a>) from <a href="https://www.youtube.com/@CodeBullet" rel="nofollow">Code Bullet</a>. Make sure to check out his channel, he makes some really cool stuff!</p>
<details open="">
  <summary>
    
    <span aria-label="Video description 2024-04-20.18-02-35.mp4">2024-04-20.18-02-35.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/57512390/324208258-c0ecf5e9-26d0-4367-a1a9-0ed2ebc4098d.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTQwNzU1MDcsIm5iZiI6MTcxNDA3NTIwNywicGF0aCI6Ii81NzUxMjM5MC8zMjQyMDgyNTgtYzBlY2Y1ZTktMjZkMC00MzY3LWExYTktMGVkMmViYzQwOThkLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDI1VDIwMDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTNmNWZkYzgyM2FiYzc5ZDllNTQ1M2Q5Njg0OTk5N2YyYTAzZTdjYTRmYjNiN2Q3MWZhMmE0NTliMTkwMmZiM2YmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.pabXH4zcZgCDclHFHDK3AlyJKYYIPzEiN-DHl0DoyVc" data-canonical-src="https://private-user-images.githubusercontent.com/57512390/324208258-c0ecf5e9-26d0-4367-a1a9-0ed2ebc4098d.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTQwNzU1MDcsIm5iZiI6MTcxNDA3NTIwNywicGF0aCI6Ii81NzUxMjM5MC8zMjQyMDgyNTgtYzBlY2Y1ZTktMjZkMC00MzY3LWExYTktMGVkMmViYzQwOThkLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDI1VDIwMDAwN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTNmNWZkYzgyM2FiYzc5ZDllNTQ1M2Q5Njg0OTk5N2YyYTAzZTdjYTRmYjNiN2Q3MWZhMmE0NTliMTkwMmZiM2YmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.pabXH4zcZgCDclHFHDK3AlyJKYYIPzEiN-DHl0DoyVc" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto">Simply explained:</p>
<p dir="auto">Every dot has its own "brain" of acceleration vectors, and they evolve to reach a goal through natural selection. Every generation, dots that "die" closer to the goal are more likely to be selected as the parents for the next generation. Reproduction inherently causes some of the brain to mutate, wholly effectively simulating natural evolution.</p>
<p dir="auto">Nevertheless, there is much to be desired. Due to performance, the only factor dots use to evolve is their closeness to the goal upon death, endowing the natural selection algorithm with low entropy. Due to memory usage, there are smaller than satisfactory limits on the number of dots and the sizes of their brains. Lastly, due to technical complexity, re-placing obstacles during the simulation does not guarantee that the dots will have large enough brains to reach the goal. Brain sizes are only determined at the beginning of the program.</p>
<p dir="auto">I've utilized a myriad of optimization techniques to snake around the following hardware restrictions and make this possible:</p>
<ul dir="auto">
<li>NAND has a limited ROM memory space, meaning the program won't compile if there's too much code. In fact, the final version of this program uses 99.2% of the instruction memory space.</li>
<li>NAND has a limited RAM memory space, meaning the program has to be careful to optimize heap memory usage. In fact, the reason why the screen fills with static between generations is to use the screen memory space as temporary swap memory for the next generation — the RAM is already completely full!</li>
<li>NAND has no floating point type (decimal numbers) and can only represent the integers between -32768 and 32767, making calculating fitness less precise and more challenging to implement. <a href="https://en.wikipedia.org/wiki/Integer_overflow" rel="nofollow">Integer overflows</a> must also be accounted for.</li>
</ul>
<p dir="auto">To avoid beating around the bush, I've stuck to documenting these techniques and additional insights in this program's <a href="https://github.com/ArhanChaudhary/NAND/blob/main/src/example-programs/GeneticAlgorithm">codebase</a> for those interested.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Writing programs for NAND</h2><a id="user-content-writing-programs-for-nand" aria-label="Permalink: Writing programs for NAND" href="#writing-programs-for-nand"></a></p>
<p dir="auto"><strong>Before we start, the most important detail to remember about writing programs in Jack is that there is no operator priority; this is probably why your program isn't working.</strong></p>
<p dir="auto">For example, you should change: <br>
<code>4 * 2 + 3</code> to <code>(4 * 2) + 3</code> <br>
<code>if (~x &amp; y)</code> to <code>if ((~x) &amp; y)</code></p>
<p dir="auto">but you can keep <code>if (y &amp; ~x)</code> the same as there is no operator ambiguity.</p>
<p dir="auto">Without parenthesis, the evaluation value of an ambiguous expression is <strong>undefined</strong>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Jack Introduction</h3><a id="user-content-jack-introduction" aria-label="Permalink: Jack Introduction" href="#jack-introduction"></a></p>
<p dir="auto">NAND boasts its own complete tech stack. As a consequence, NAND can only be programmed in Jack, its weakly typed object-oriented programming language. In layman's terms, Jack is C with Java's syntax.</p>
<p dir="auto">Let's take the approach of example-based learning and dive right in.</p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * This program prompts the user to enter a phrase
 * and an energy level. Program output:
 *
 * Whats on your mind? Superman
 * Whats your energy level? 3
 * Superman!
 * Superman!
 * Superman!
 */
class Main {
    function void main() {
        var String s;
        var int energy, i;
        let s = Keyboard.readLine(&quot;Whats on your mind? &quot;);
        let energy = Keyboard.readInt(&quot;Whats your energy level? &quot;);
        let i = 0;
        let s = s.appendChar(33); // Appends the character '!'
        while (i < energy) {
            do Output.printString(s);
            do Output.println();
            let i = i + 1;
        }
    }
}"><pre><span>/**</span>
<span> * This program prompts the user to enter a phrase</span>
<span> * and an energy level. Program output:</span>
<span> *</span>
<span> * Whats on your mind? Superman</span>
<span> * Whats your energy level? 3</span>
<span> * Superman!</span>
<span> * Superman!</span>
<span> * Superman!</span>
<span> */</span>
<span>class</span> <span>Main</span> <span>{</span>
    <span>function</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> <span>String</span> <span>s</span><span>;</span>
        <span>var</span> <span>int</span> <span>energy</span><span>,</span> <span>i</span><span>;</span>
        <span>let</span> <span>s</span> <span>=</span> <span>Keyboard</span><span>.</span><span>readLine</span><span>(</span><span>"Whats on your mind? "</span><span>)</span><span>;</span>
        <span>let</span> <span>energy</span> <span>=</span> <span>Keyboard</span><span>.</span><span>readInt</span><span>(</span><span>"Whats your energy level? "</span><span>)</span><span>;</span>
        <span>let</span> <span>i</span> <span>=</span> <span>0</span><span>;</span>
        <span>let</span> <span>s</span> <span>=</span> <span>s</span><span>.</span><span>appendChar</span><span>(</span><span>33</span><span>)</span><span>;</span> <span>// Appends the character '!'</span>
        <span>while</span> <span>(</span><span>i</span> <span>&lt;</span> <span>energy</span><span>)</span> <span>{</span>
            <span>do</span> <span>Output</span><span>.</span><span>printString</span><span>(</span><span>s</span><span>)</span><span>;</span>
            <span>do</span> <span>Output</span><span>.</span><span>println</span><span>(</span><span>)</span><span>;</span>
            <span>let</span> <span>i</span> <span>=</span> <span>i</span> <span>+</span> <span>1</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre></div>
<p dir="auto"><em>taken from the <a href="https://drive.google.com/file/d/1CAGF8d3pDIOgqX8NZGzU34PPEzvfTYrk/view" rel="nofollow">Nand to Tetris lecture slides</a>.</em></p>
<p dir="auto">If you've already had some experience with programming, this should look very familiar; it is clear that Jack was heavily inspired by Java. <code>Main.main</code> is the entry point to the program. The code segment demonstrates basic usage of variables as well as the while loop for control flow.</p>
<p dir="auto">Additionally, it uses <code>Keyboard.readLine</code> and <code>Keyboard.readInt</code> to read input from the user, and <code>Output.printString</code> and <code>Output.println</code> to print output to the screen — all of which are defined in detail in the <a href="#jack-os">Jack OS Reference</a>. By default, the Jack OS is bundled with your program during compilation to enable interfacing with strings, memory, hardware, and more.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Custom Data Types</h3><a id="user-content-custom-data-types" aria-label="Permalink: Custom Data Types" href="#custom-data-types"></a></p>
<p dir="auto">Every programming language has a fixed set of primitive data types. Jack supports three: <code>int</code>, <code>char</code>, and <code>boolean</code>. You can extend this basic repertoire with your own abstract data types as needed. Prior knowledge about <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" rel="nofollow">object-oriented programming</a> directly carries over to this section.</p>

<div dir="auto" data-snippet-clipboard-copy-content="/** Represents a point in 2D plane. */
class Point {
    // The coordinates of the current point instance:
    field int x, y;
    // The number of point objects constructed so far:
    static int pointCount;
    /** Constructs a point and initializes
        it with the given coordinates */
    constructor Point new(int ax, int ay) {
      let x = ax;
      let y = ay;
      let pointCount = pointCount + 1;
      return this;
    }
    /** Returns the x coordinate of the current point instance */
    method int getx() { return x; }
    /** Returns the y coordinate of the current point instance */
    method int gety() { return y; }
    /** Returns the number of Points constructed so far */
    function int getPointCount() {
        return pointCount;
    }
    /** Returns a point which is this
        point plus the other point */
    method Point plus(Point other) {
        return Point.new(x + other.getx(),
                         y + other.gety());
    }
    /** Returns the Euclidean distance between the
        current point instance and the other point */
    method int distance(Point other) {
        var int dx, dy;
        let dx = x - other.getx();
        let dy = y - other.gety();
        return Math.sqrt((dx * dx) + (dy * dy));
    }
    /** Prints the current point instance, as &quot;(x, y)&quot; */
    method void print() {
        var String tmp;
        let tmp = &quot;(&quot;;
        do Output.printString(tmp);
        do tmp.dispose();
        do Output.printInt(x);
        let tmp = &quot;, &quot;;
        do Output.printString(tmp);
        do tmp.dispose();
        do Output.printInt(y);
        let tmp = &quot;)&quot;;
        do Output.printString(tmp);
        do tmp.dispose();
    }
}"><pre><span>/** Represents a point in 2D plane. */</span>
<span>class</span> <span>Point</span> <span>{</span>
    <span>// The coordinates of the current point instance:</span>
    <span>field</span> <span>int</span> <span>x</span><span>,</span> <span>y</span><span>;</span>
    <span>// The number of point objects constructed so far:</span>
    <span>static</span> <span>int</span> <span>pointCount</span><span>;</span>
    <span>/** Constructs a point and initializes</span>
<span>        it with the given coordinates */</span>
    <span>constructor</span> <span>Point</span> <span>new</span><span>(</span><span>int</span> <span>ax</span><span>,</span> <span>int</span> <span>ay</span><span>)</span> <span>{</span>
      <span>let</span> <span>x</span> <span>=</span> <span>ax</span><span>;</span>
      <span>let</span> <span>y</span> <span>=</span> <span>ay</span><span>;</span>
      <span>let</span> <span>pointCount</span> <span>=</span> <span>pointCount</span> <span>+</span> <span>1</span><span>;</span>
      <span>return</span> <span>this</span><span>;</span>
    <span>}</span>
    <span>/** Returns the x coordinate of the current point instance */</span>
    <span>method</span> <span>int</span> <span>getx</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>x</span><span>;</span> <span>}</span>
    <span>/** Returns the y coordinate of the current point instance */</span>
    <span>method</span> <span>int</span> <span>gety</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>y</span><span>;</span> <span>}</span>
    <span>/** Returns the number of Points constructed so far */</span>
    <span>function</span> <span>int</span> <span>getPointCount</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>pointCount</span><span>;</span>
    <span>}</span>
    <span>/** Returns a point which is this</span>
<span>        point plus the other point */</span>
    <span>method</span> <span>Point</span> <span>plus</span><span>(</span><span>Point</span> <span>other</span><span>)</span> <span>{</span>
        <span>return</span> <span>Point</span><span>.</span><span>new</span><span>(</span><span>x</span> <span>+</span> <span>other</span><span>.</span><span>getx</span><span>(</span><span>)</span><span>,</span>
                         <span>y</span> <span>+</span> <span>other</span><span>.</span><span>gety</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    <span>/** Returns the Euclidean distance between the</span>
<span>        current point instance and the other point */</span>
    <span>method</span> <span>int</span> <span>distance</span><span>(</span><span>Point</span> <span>other</span><span>)</span> <span>{</span>
        <span>var</span> <span>int</span> <span>dx</span><span>,</span> <span>dy</span><span>;</span>
        <span>let</span> <span>dx</span> <span>=</span> <span>x</span> <span>-</span> <span>other</span><span>.</span><span>getx</span><span>(</span><span>)</span><span>;</span>
        <span>let</span> <span>dy</span> <span>=</span> <span>y</span> <span>-</span> <span>other</span><span>.</span><span>gety</span><span>(</span><span>)</span><span>;</span>
        <span>return</span> <span>Math</span><span>.</span><span>sqrt</span><span>(</span><span>(</span><span>dx</span> <span>*</span> <span>dx</span><span>)</span> <span>+</span> <span>(</span><span>dy</span> <span>*</span> <span>dy</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    <span>/** Prints the current point instance, as "(x, y)" */</span>
    <span>method</span> <span>void</span> <span>print</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> <span>String</span> <span>tmp</span><span>;</span>
        <span>let</span> <span>tmp</span> <span>=</span> <span>"("</span><span>;</span>
        <span>do</span> <span>Output</span><span>.</span><span>printString</span><span>(</span><span>tmp</span><span>)</span><span>;</span>
        <span>do</span> <span>tmp</span><span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>
        <span>do</span> <span>Output</span><span>.</span><span>printInt</span><span>(</span><span>x</span><span>)</span><span>;</span>
        <span>let</span> <span>tmp</span> <span>=</span> <span>", "</span><span>;</span>
        <span>do</span> <span>Output</span><span>.</span><span>printString</span><span>(</span><span>tmp</span><span>)</span><span>;</span>
        <span>do</span> <span>tmp</span><span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>
        <span>do</span> <span>Output</span><span>.</span><span>printInt</span><span>(</span><span>y</span><span>)</span><span>;</span>
        <span>let</span> <span>tmp</span> <span>=</span> <span>")"</span><span>;</span>
        <span>do</span> <span>Output</span><span>.</span><span>printString</span><span>(</span><span>tmp</span><span>)</span><span>;</span>
        <span>do</span> <span>tmp</span><span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="var Point p1, p2, p3;
let p1 = Point.new(1, 2);
let p2 = Point.new(3, 4);
let p3 = p1.plus(p2);
do p3.print(); // prints (4, 6)
do Output.println();
do Output.printInt(p1.distance(p2)); // prints 5
do Output.println();
do Output.printInt(getPointCount()); // prints 3"><pre><span>var</span> <span>Point</span> <span>p1</span><span>,</span> <span>p2</span><span>,</span> <span>p3</span><span>;</span>
<span>let</span> <span>p1</span> <span>=</span> <span>Point</span><span>.</span><span>new</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>;</span>
<span>let</span> <span>p2</span> <span>=</span> <span>Point</span><span>.</span><span>new</span><span>(</span><span>3</span><span>,</span> <span>4</span><span>)</span><span>;</span>
<span>let</span> <span>p3</span> <span>=</span> <span>p1</span><span>.</span><span>plus</span><span>(</span><span>p2</span><span>)</span><span>;</span>
<span>do</span> <span>p3</span><span>.</span><span>print</span><span>(</span><span>)</span><span>;</span> <span>// prints (4, 6)</span>
<span>do</span> <span>Output</span><span>.</span><span>println</span><span>(</span><span>)</span><span>;</span>
<span>do</span> <span>Output</span><span>.</span><span>printInt</span><span>(</span><span>p1</span><span>.</span><span>distance</span><span>(</span><span>p2</span><span>)</span><span>)</span><span>;</span> <span>// prints 5</span>
<span>do</span> <span>Output</span><span>.</span><span>println</span><span>(</span><span>)</span><span>;</span>
<span>do</span> <span>Output</span><span>.</span><span>printInt</span><span>(</span><span>getPointCount</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// prints 3</span></pre></div>
<p dir="auto"><em>taken from the <a href="https://drive.google.com/file/d/1CAGF8d3pDIOgqX8NZGzU34PPEzvfTYrk/view" rel="nofollow">Nand to Tetris lecture slides</a>.</em></p>
<p dir="auto">We define a <code>Point</code> class to represent an abstract point in space. It uses <code>field</code> variables to declare per-instance attributes of the data type. It exposes public <code>method</code> functions we can use to interface with the point, giving the caller the functionality to add two points together and calculate the distance between two points.</p>
<p dir="auto">All <code>field</code> variables are privately scoped. If you wish to get or set these variables from outside the class declaration, these variables must have corresponding <code>method</code> functions to provide this functionality.</p>
<p dir="auto">Omitted from the code sample to stay on-topic, it is customary for data classes to define <code>dispose</code> methods for deallocation once objects are no longer needed. See <a href="#manual-memory-management">Manual Memory Management</a>.</p>
<p dir="auto">If needed, here's a reference for <code>function</code> and <code>method</code> calling syntax.</p>

<div dir="auto" data-snippet-clipboard-copy-content="class Foo {
    ...
    method void f() {
        var Bar b; // Declares a local variable of class type Bar
        var int i; // Declares a local variable of primitive type int

        do g(); // Calls method g of the current class on the current object instance
                // Note: Cannot be called from within a function (static method)

        do Foo.p(3); // Calls function p of the current class;
                     // Note: A function call must be preceded by the class name

        do Bar.h();      // Calls function h of class Bar
        let b = Bar.r(); // Calls function or constructor r of class Bar
        do b.q();        // Calls method q of class Bar on the b object
    }
}"><pre><span>class</span> <span>Foo</span> <span>{</span>
    ...
    <span>method</span> <span>void</span> <span>f</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> <span>Bar</span> <span>b</span><span>;</span> <span>// Declares a local variable of class type Bar</span>
        <span>var</span> <span>int</span> <span>i</span><span>;</span> <span>// Declares a local variable of primitive type int</span>

        <span>do</span> <span>g</span><span>(</span><span>)</span><span>;</span> <span>// Calls method g of the current class on the current object instance</span>
                <span>// Note: Cannot be called from within a function (static method)</span>

        <span>do</span> <span>Foo</span><span>.</span><span>p</span><span>(</span><span>3</span><span>)</span><span>;</span> <span>// Calls function p of the current class;</span>
                     <span>// Note: A function call must be preceded by the class name</span>

        <span>do</span> <span>Bar</span><span>.</span><span>h</span><span>(</span><span>)</span><span>;</span>      <span>// Calls function h of class Bar</span>
        <span>let</span> <span>b</span> <span>=</span> <span>Bar</span><span>.</span><span>r</span><span>(</span><span>)</span><span>;</span> <span>// Calls function or constructor r of class Bar</span>
        <span>do</span> <span>b</span><span>.</span><span>q</span><span>(</span><span>)</span><span>;</span>        <span>// Calls method q of class Bar on the b object</span>
    <span>}</span>
<span>}</span></pre></div>
<p dir="auto"><em>taken from the <a href="https://drive.google.com/file/d/1CAGF8d3pDIOgqX8NZGzU34PPEzvfTYrk/view" rel="nofollow">Nand to Tetris lecture slides</a>.</em></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Weak Type Coercions</h3><a id="user-content-weak-type-coercions" aria-label="Permalink: Weak Type Coercions" href="#weak-type-coercions"></a></p>
<p dir="auto">Remember how we said Jack was similar to Java? That was a facade, or at best misleading. While Java is strongly-typed and as such supports complex type features such as down casting, polymorphism, and inheritance, Jack supports none of these and only has one type under the hood: the signed 16-bit integer. This is the primary reason why Jack is so weakly-typed. In effect, the compiler won't care if you mix and match different types in assignments and operations.</p>
<div dir="auto" data-snippet-clipboard-copy-content="var char c;
var String s;
let c = 65; // 'A'
// Equivalently
let s = &quot;A&quot;;
let c = s.charAt(0);"><pre><span>var</span> <span>char</span> <span>c</span><span>;</span>
<span>var</span> <span>String</span> <span>s</span><span>;</span>
<span>let</span> <span>c</span> <span>=</span> <span>65</span><span>;</span> <span>// 'A'</span>
<span>// Equivalently</span>
<span>let</span> <span>s</span> <span>=</span> <span>"A"</span><span>;</span>
<span>let</span> <span>c</span> <span>=</span> <span>s</span><span>.</span><span>charAt</span><span>(</span><span>0</span><span>)</span><span>;</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="var Array a;
let a = 5000;
let a[100] = 77; // RAM[5100] = 77"><pre><span>var</span> <span>Array</span> <span>a</span><span>;</span>
<span>let</span> <span>a</span> <span>=</span> <span>5000</span><span>;</span>
<span>let</span> <span>a</span><span></span><span>[</span><span>100</span><span>]</span> <span>=</span> <span>77</span><span>;</span> <span>// RAM[5100] = 77</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="var Array arr;
var String helloWorld;
let helloWorld = &quot;Hello World!&quot;
let arr = Array.new(4); // Arrays are not strictly typed
let arr[0] = 12;
let arr[1] = false;
let arr[2] = Point.new(5, 6);
let arr[3] = helloWorld;"><pre><span>var</span> <span>Array</span> <span>arr</span><span>;</span>
<span>var</span> <span>String</span> <span>helloWorld</span><span>;</span>
<span>let</span> <span>helloWorld</span> <span>=</span> <span>"Hello World!"</span>
<span>let</span> <span>arr</span> <span>=</span> <span>Array</span><span>.</span><span>new</span><span>(</span><span>4</span><span>)</span><span>;</span> <span>// Arrays are not strictly typed</span>
<span>let</span> <span>arr</span><span></span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>12</span><span>;</span>
<span>let</span> <span>arr</span><span></span><span>[</span><span>1</span><span>]</span> <span>=</span> <span>false</span><span>;</span>
<span>let</span> <span>arr</span><span></span><span>[</span><span>2</span><span>]</span> <span>=</span> <span>Point</span><span>.</span><span>new</span><span>(</span><span>5</span><span>,</span> <span>6</span><span>)</span><span>;</span>
<span>let</span> <span>arr</span><span></span><span>[</span><span>3</span><span>]</span> <span>=</span> <span>helloWorld</span><span>;</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="class Complex {
    field int real;
    field int imaginary;
    ...
}
...
var Complex c;
var Array a;
let a = Array.new(2);
let a[0] = 7;
let a[1] = 8;
let c = a; // c == Complex(7, 8)
           // Works because it matches the memory layout
           // of the Complex type"><pre><span>class</span> <span>Complex</span> <span>{</span>
    <span>field</span> <span>int</span> <span>real</span><span>;</span>
    <span>field</span> <span>int</span> <span>imaginary</span><span>;</span>
    ...
<span>}</span>
<span>.</span><span>.</span><span>.</span>
<span>var</span> <span>Complex</span> <span>c</span><span>;</span>
<span>var</span> <span>Array</span> <span>a</span><span>;</span>
<span>let</span> <span>a</span> <span>=</span> <span>Array</span><span>.</span><span>new</span><span>(</span><span>2</span><span>)</span><span>;</span>
<span>let</span> <span>a</span><span></span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>7</span><span>;</span>
<span>let</span> <span>a</span><span></span><span>[</span><span>1</span><span>]</span> <span>=</span> <span>8</span><span>;</span>
<span>let</span> <span>c</span> <span>=</span> <span>a</span><span>;</span> <span>// c == Complex(7, 8)</span>
           <span>// Works because it matches the memory layout</span>
           <span>// of the Complex type</span></pre></div>
<p dir="auto"><em>all code segments taken from the <a href="https://drive.google.com/file/d/1CAGF8d3pDIOgqX8NZGzU34PPEzvfTYrk/view" rel="nofollow">Nand to Tetris lecture slides</a>.</em></p>
<p dir="auto">Don't take this the wrong way — Jack still provides a powerful and functional object-oriented model. This insight intends to help you understand when and how you should perform type conversions as needed.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Manual Memory Management</h3><a id="user-content-manual-memory-management" aria-label="Permalink: Manual Memory Management" href="#manual-memory-management"></a></p>
<p dir="auto">Let's say you're a crazy cat lover, just like me! And you wanted to write this program to show off just how much you absolutely adore cats.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Main {
    function void main() {
        while (true) {
          do Output.printString(&quot;Kittens are so adorable! &quot;);
        }
    }
}"><pre><span>class</span> <span>Main</span> <span>{</span>
    <span>function</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
        <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
          <span>do</span> <span>Output</span><span>.</span><span>printString</span><span>(</span><span>"Kittens are so adorable! "</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre></div>
<p dir="auto">You may be startled to notice that after a few seconds, the program will crash with "ERR6", or a <a href="https://en.wikipedia.org/wiki/Heap_overflow" rel="nofollow">heap overflow</a>!</p>
<p dir="auto">Jack is a <a href="https://en.wikipedia.org/wiki/Manual_memory_management" rel="nofollow">manually memory managed</a> programming language. This means you must be vigilant to properly deallocate memory that is no longer needed, or else the Jack OS will think otherwise and facilitate a <a href="https://en.wikipedia.org/wiki/Memory_leak" rel="nofollow">memory leak</a>. The best practice advice is to feature a <code>dispose</code> method for each class that represents an object that properly encapsulates this deallocation. Thus, when objects are no longer needed, you can call their <code>dispose</code> methods to ensure you won't eventually run out of heap memory.</p>
<p dir="auto">If you've programmed in other manually memory managed languages, like C, this should look very familiar. One key difference is the Jack OS stores arrays and strings on the heap rather than on the stack, hinting to why the program crashes with a heap overflow.</p>
<p dir="auto">Let's fix this program for our fellow feline fanatics.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Main {
    function void main() {
        var String s;
        while (true) {
            let s = &quot;Kittens are so adorable! &quot;;
            do Output.printString(s);
            do s.dispose();
        }
    }
}"><pre><span>class</span> <span>Main</span> <span>{</span>
    <span>function</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> <span>String</span> <span>s</span><span>;</span>
        <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
            <span>let</span> <span>s</span> <span>=</span> <span>"Kittens are so adorable! "</span><span>;</span>
            <span>do</span> <span>Output</span><span>.</span><span>printString</span><span>(</span><span>s</span><span>)</span><span>;</span>
            <span>do</span> <span>s</span><span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre></div>
<p dir="auto">Alternatively, you could allocate memory for the string only once.</p>
<div dir="auto" data-snippet-clipboard-copy-content="class Main {
    function void main() {
        var String s;
        let s = &quot;Kittens are so adorable! &quot;;
        while (true) {
            do Output.printString(s);
        }
    }
}"><pre><span>class</span> <span>Main</span> <span>{</span>
    <span>function</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> <span>String</span> <span>s</span><span>;</span>
        <span>let</span> <span>s</span> <span>=</span> <span>"Kittens are so adorable! "</span><span>;</span>
        <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
            <span>do</span> <span>Output</span><span>.</span><span>printString</span><span>(</span><span>s</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre></div>
<p dir="auto">You'll notice that not only do these alternative versions print the string much faster, but this time they'll actually print forever! Hooray!</p>
<p dir="auto">Let's quickly peek into <code>String.dispose</code> so you can better understand how to write your own <code>dispose</code> methods.</p>
<div dir="auto" data-snippet-clipboard-copy-content="method void dispose() {
    do stringArray.dispose();
    do Memory.deAlloc(this);
}"><pre><span>method</span> <span>void</span> <span>dispose</span><span>(</span><span>)</span> <span>{</span>
    <span>do</span> <span>stringArray</span><span>.</span><span>dispose</span><span>(</span><span>)</span><span>;</span>
    <span>do</span> <span>Memory</span><span>.</span><span>deAlloc</span><span>(</span><span>this</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><code>Array.dispose</code> called by <code>stringArray</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="method void dispose() {
    do Memory.deAlloc(this);
}"><pre><span>method</span> <span>void</span> <span>dispose</span><span>(</span><span>)</span> <span>{</span>
    <span>do</span> <span>Memory</span><span>.</span><span>deAlloc</span><span>(</span><span>this</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto">Proper <code>dispose</code> methods must first appropriately call <code>dispose</code> on their field variables and then finish with <code>do Memory.deAlloc(this);</code> to deallocate the object instance itself.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Undefined Behavior</h3><a id="user-content-undefined-behavior" aria-label="Permalink: Undefined Behavior" href="#undefined-behavior"></a></p>
<p dir="auto">With how primitive Jack and NAND are, footguns within the language are inevitable. I've compiled the following instances of undefined behavior you should be aware of, ordered from (in my opinion) most important to least important.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Operator Priority</h4><a id="user-content-operator-priority" aria-label="Permalink: Operator Priority" href="#operator-priority"></a></p>
<p dir="auto">I found this caveat to be so important that I've moved it towards the <a href="#writing-programs-for-nand">beginning of this section</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Lesser and Greater than Operators</h4><a id="user-content-lesser-and-greater-than-operators" aria-label="Permalink: Lesser and Greater than Operators" href="#lesser-and-greater-than-operators"></a></p>
<p dir="auto">The Jack expressions</p>

<p dir="auto">are deceptively simple. They aren't always mathematically correct, and are respectively equivalent to the Java expressions</p>
<div dir="auto" data-snippet-clipboard-copy-content="((a - b) &amp; (1 << 15)) == 0 &amp;&amp; a != b
((a - b) &amp; (1 << 15)) != 0"><pre><span>(</span><span>(</span><span>a</span> <span>-</span> <span>b</span><span>)</span> <span>&amp;</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>15</span><span>)</span><span>)</span> <span>==</span> <span>0</span> <span>&amp;&amp;</span> <span>a</span> <span>!=</span> <span>b</span>
<span>(</span><span>(</span><span>a</span> <span>-</span> <span>b</span><span>)</span> <span>&amp;</span> <span>(</span><span>1</span> <span>&lt;&lt;</span> <span>15</span><span>)</span><span>)</span> <span>!=</span> <span>0</span></pre></div>
<p dir="auto">What's up with the nuance? The virtual machine implementation converts <code>a &gt; b</code> to <code>a - b &gt; 0</code>. Here's the problem: <code>a - b</code> can <a href="https://en.wikipedia.org/wiki/Integer_overflow" rel="nofollow">overflow</a> :(</p>
<p dir="auto">What does <code>20000 &gt; -20000</code> evaluate to? The virtual machine transpiles this to <code>20000 - (-20000) &gt; 0</code> which evaluates to <code>-25336 &gt; 0</code>. Unfortunately, the answer is <code>false</code>.</p>
<p dir="auto">However, <code>20000 &gt; -10000</code> evaluates to <code>30000 &gt; 0</code>, or <code>true</code>.</p>
<p dir="auto">As you may have figured, if the absolute distance between <code>a</code> and <code>b</code> is more than 32767, <code>a &gt; b</code> and <code>a &lt; b</code> are wrong. Otherwise, you're fine.</p>
<p dir="auto">This isn't an implementation bug, but rather an inconsistency with Nand to Tetris itself. More about it <a href="http://nand2tetris-questions-and-answers-forum.52.s1.nabble.com/Project-7-gt-and-lt-behavior-not-clearly-specified-for-signed-operands-td4036926.html#google_vignette" rel="nofollow">here</a>. For compatibility reasons, this behavior won't be fixed.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">-32768</h4><a id="user-content--32768" aria-label="Permalink: -32768" href="#-32768"></a></p>
<p dir="auto">-32768 is one of its kind. It is the only number that holds the property such that -(-32768) = -32768, a singleton without a positive counterpart<sup>*</sup>. This can lead to unsoundness and logic errors.</p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * Program output:
 * --.)*(
 */
class Main {
    function void main() {
        // Note that -32768 must instead be written as ~32767
        // because the CPU can't load a number that large
        do Output.printInt(~32767);
    }
}"><pre><span>/**</span>
<span> * Program output:</span>
<span> * --.)*(</span>
<span> */</span>
<span>class</span> <span>Main</span> <span>{</span>
    <span>function</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
        <span>// Note that -32768 must instead be written as ~32767</span>
        <span>// because the CPU can't load a number that large</span>
        <span>do</span> <span>Output</span><span>.</span><span>printInt</span><span>(</span><span>~</span><span>32767</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></pre></div>
<p dir="auto"><code>Output.printInt</code> internally expects <code>Math.abs</code> to return a positive number. This isn't the case with -32768, so the Jack OS malfunctions.</p>
<p dir="auto">Your main concern should be handling logic errors with the negative operator. As the programmer, if you want to guarantee the negative of a negative number is positive, it is your responsibility to check for the case of -32768 and take appropriate action.</p>
<p dir="auto"><span id="user-content-note-1">*</span> This holds true because NAND's ALU internally processes the Jack expression <code>-x</code> as  <code>~(x - 1)</code>. Let's set <code>x</code> to <code>-32768</code> and evaluate it step by step. Here are the corresponding 16-bit <a href="https://en.wikipedia.org/wiki/Two%27s_complement" rel="nofollow">two's complement</a> binary representations of the computation:</p>
<p dir="auto"><code>x</code> = <code>1000 0000 0000 0000</code> <br>
<code>x - 1</code> = <code>0111 1111 1111 1111</code> <br>
<code>~(x - 1)</code> = <code>1000 0000 0000 0000</code> = <code>x</code></p>
<p dir="auto">It's the same thing! What happened here? Because NAND is a 16-bit machine, -32768 is the only number such that if you subtract one from it, you get its flipped bits. In other words, -32768 satisfies <code>x - 1 = ~x</code>, simplifying the expression to <code>~(~x)</code> or just <code>x</code>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Calling a Function with Too Few Arguments</h4><a id="user-content-calling-a-function-with-too-few-arguments" aria-label="Permalink: Calling a Function with Too Few Arguments" href="#calling-a-function-with-too-few-arguments"></a></p>
<p dir="auto">This one is self-explanatory, so here's a brief demonstration.</p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * Program output:
 * I have 818 cookies.
 */
class Main {
    function void main() {
        do Main.cookies();
    }

    function void cookies(int a) {
        do Output.printString(&quot;I have &quot;);
        do Output.printInt(a);
        do Output.printString(&quot; cookies.&quot;);
    }
}"><pre><span>/**</span>
<span> * Program output:</span>
<span> * I have 818 cookies.</span>
<span> */</span>
<span>class</span> <span>Main</span> <span>{</span>
    <span>function</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
        <span>do</span> <span>Main</span><span>.</span><span>cookies</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>function</span> <span>void</span> <span>cookies</span><span>(</span><span>int</span> <span>a</span><span>)</span> <span>{</span>
        <span>do</span> <span>Output</span><span>.</span><span>printString</span><span>(</span><span>"I have "</span><span>)</span><span>;</span>
        <span>do</span> <span>Output</span><span>.</span><span>printInt</span><span>(</span><span>a</span><span>)</span><span>;</span>
        <span>do</span> <span>Output</span><span>.</span><span>printString</span><span>(</span><span>" cookies."</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></pre></div>
<p dir="auto">On the other hand, calling a function with too <em>many</em> arguments is perfectly valid. You can use the <code>arguments</code> keyword to index extra function arguments. Note that there is no indicator for the argument count.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Improper Type Casting</h4><a id="user-content-improper-type-casting" aria-label="Permalink: Improper Type Casting" href="#improper-type-casting"></a></p>
<p dir="auto">You can utilize <code>Array</code> to cast a variable into any other type. Calling instance methods that don't exist on type casted variables is undefined behavior; the compiler isn't smart enough to realize when you're doing this.</p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * Program output:
 * 4
 */
class Main {
    constructor Main new() {
        return this;
    }

    function void main() {
        var Array a;
        var Main b;
        var String c;
        let a = Array.new(1);
        let b = Main.new();
        let a[0] = b;
        let c = a[0];
        // Invalidly calling `String.length` on an instance of `Main`.
        do Output.printInt(c.length());
    }
}"><pre><span>/**</span>
<span> * Program output:</span>
<span> * 4</span>
<span> */</span>
<span>class</span> <span>Main</span> <span>{</span>
    <span>constructor</span> <span>Main</span> <span>new</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>this</span><span>;</span>
    <span>}</span>

    <span>function</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> <span>Array</span> <span>a</span><span>;</span>
        <span>var</span> <span>Main</span> <span>b</span><span>;</span>
        <span>var</span> <span>String</span> <span>c</span><span>;</span>
        <span>let</span> <span>a</span> <span>=</span> <span>Array</span><span>.</span><span>new</span><span>(</span><span>1</span><span>)</span><span>;</span>
        <span>let</span> <span>b</span> <span>=</span> <span>Main</span><span>.</span><span>new</span><span>(</span><span>)</span><span>;</span>
        <span>let</span> <span>a</span><span></span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>b</span><span>;</span>
        <span>let</span> <span>c</span> <span>=</span> <span>a</span><span>[</span><span>0</span><span>]</span><span>;</span>
        <span>// Invalidly calling `String.length` on an instance of `Main`.</span>
        <span>do</span> <span>Output</span><span>.</span><span>printInt</span><span>(</span><span>c</span><span>.</span><span>length</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Stack Overflows</h4><a id="user-content-stack-overflows" aria-label="Permalink: Stack Overflows" href="#stack-overflows"></a></p>
<p dir="auto">See the <a href="#overflow">Overflow</a> program for an in-depth example.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Modifying Stack Frames or Internal Registers</h4><a id="user-content-modifying-stack-frames-or-internal-registers" aria-label="Permalink: Modifying Stack Frames or Internal Registers" href="#modifying-stack-frames-or-internal-registers"></a></p>
<p dir="auto">Modifying stack frames or the internal registers that respectively reside at memory addresses <code>256</code> to <code>2047</code> and <code>1</code> to <code>15</code> may lead to undefined behavior. This typically isn't possible without misusing <code>Memory.poke</code> or negative array indexing. See the <a href="#secretpassword">SecretPassword</a> program for an in-depth example.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Hardware Specification</h3><a id="user-content-hardware-specification" aria-label="Permalink: Hardware Specification" href="#hardware-specification"></a></p>
<p dir="auto">Since its rise in the 1970s, there's a good reason why 16-bit computing has fallen from grace in the modern era. Compared to 32-bit or 64-bit computing, 16-bit computing offered limited processing power and memory capacity that simply weren't meeting the demands of contemporary software and applications.</p>
<p dir="auto">NAND is no exception to this reality.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ArhanChaudhary/NAND/blob/main/media/memory_layout.png"><img src="https://github.com/ArhanChaudhary/NAND/raw/main/media/memory_layout.png" width="700"></a></p>
<p dir="auto"><em>taken from the <a href="https://drive.google.com/file/d/1BexrNmdqYhKPkqD_Y81qNAUeyfzl-ZtO/view" rel="nofollow">Nand to Tetris lecture slides</a>.</em></p>
<p dir="auto">Compared to your 16 GiB MacBook, NAND enjoys a meager 4 KiB of RAM, a ratio of <em>0.00002%</em>! In spite of this, <a href="https://www.metroweekly.com/2014/07/to-the-moon-and-back-on-4kb-of-memory/" rel="nofollow">it was enough to take us to the moon</a>, so who's to say NAND can't either.</p>
<p dir="auto">The Jack OS reserves 14,336 memory addresses of the 4 KiB for the heap, a number that is abnormally small. This is why it's so important to ensure complex Jack applications allocate and deallocate their memory efficiently. If you're overly ambitious, you might run out of heap memory and be forced to completely rewrite your data types and logic.</p>
<p dir="auto">The hardware reserves 8,192 memory addresses of the 4 KiB for the screen. Each bit of each address linearly maps to a corresponding pixel on the provided 512x256 screen, in <a href="https://en.wikipedia.org/wiki/Bit_numbering#LSb_0_bit_numbering" rel="nofollow">LSb 0 bit numbering</a>.</p>
<p dir="auto">The hardware reserves memory address 24,576 for the keyboard, at which the currently pressed key is reflected. Though, you shouldn't directly access this location to handle user input. You should use the provided <a href="#keyboard">Keyboard</a> class from the Jack OS and its associated functions.</p>
<p dir="auto">NAND's keyboard recognizes all ASCII characters, as well as the following keys.</p>
<ul dir="auto">
<li>new line = 128 = <code>String.newline()</code></li>
<li>backspace = 129 = <code>String.backspace()</code></li>
<li>left arrow = 130</li>
<li>up arrow = 131</li>
<li>right arrow = 132</li>
<li>down arrow = 133</li>
<li>home = 134</li>
<li>end = 135</li>
<li>page up = 136</li>
<li>page down = 137</li>
<li>insert = 138</li>
<li>delete = 139</li>
<li>ESC = 140</li>
<li>F1 - F12 = 141 - 152</li>
</ul>
<p dir="auto">Lastly, the hardware reserves 240 memory addresses for static class variables and 1,792 memory addresses for the global stack. Unless you perform deep recursion, you probably won't find these limitations troublesome.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Beyond the Jack OS</h3><a id="user-content-beyond-the-jack-os" aria-label="Permalink: Beyond the Jack OS" href="#beyond-the-jack-os"></a></p>
<p dir="auto">By default, the Jack OS is bundled with your program during compilation to enable interfacing with strings, memory, hardware, and more. To the extraordinarily dedicated, it is possible to provide your own OS implementation with your own hardware interfaces. The IDE treats Jack OS files the same as typical program files; they can likewise be deleted or overwritten. There are a few core functions you <em>must</em> implement for your program to compile if you choose to do so. You're free to copy my implementations of these functions as needed.</p>
<p dir="auto"><code>Sys.init</code>: rather than <code>Main.main</code>, this is the <em>real</em> entry point of the program, hardcoded in the virtual machine implementation. For context, the provided Jack OS implementation looks like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="function void init() {
    do Memory.init();
    do Math.init();
    do Screen.init();
    do Screen.clearScreen();
    do Output.init();
    do Main.main();
    do Sys.halt();
}"><pre><span>function</span> <span>void</span> <span>init</span><span>(</span><span>)</span> <span>{</span>
    <span>do</span> <span>Memory</span><span>.</span><span>init</span><span>(</span><span>)</span><span>;</span>
    <span>do</span> <span>Math</span><span>.</span><span>init</span><span>(</span><span>)</span><span>;</span>
    <span>do</span> <span>Screen</span><span>.</span><span>init</span><span>(</span><span>)</span><span>;</span>
    <span>do</span> <span>Screen</span><span>.</span><span>clearScreen</span><span>(</span><span>)</span><span>;</span>
    <span>do</span> <span>Output</span><span>.</span><span>init</span><span>(</span><span>)</span><span>;</span>
    <span>do</span> <span>Main</span><span>.</span><span>main</span><span>(</span><span>)</span><span>;</span>
    <span>do</span> <span>Sys</span><span>.</span><span>halt</span><span>(</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><code>Memory.alloc</code>: A heap memory allocator internally used by class constructors to create objects. NAND inherently places emphasis on the heap for data storage, so this function is useful in many other contexts too.</p>
<p dir="auto"><code>String.newWithStr</code>: An internal constructor for string literals.</p>
<p dir="auto"><code>Math.multiply</code>: This function is internally called in lieu of the multiplication operator <code>*</code>. In other words, the Jack expression <code>x * y</code> and <code>Math.multiply(x, y)</code> are equivalent.</p>
<p dir="auto"><code>Math.divide</code>: This function is internally called in lieu of the floored division operator <code>/</code>. In other words, the Jack expression <code>x / y</code> and <code>Math.divide(x, y)</code> are equivalent.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How does NAND work?</h2><a id="user-content-how-does-nand-work" aria-label="Permalink: How does NAND work?" href="#how-does-nand-work"></a></p>
<p dir="auto">I'm glad you asked! I've found the following illustrations quite illuminating:</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ArhanChaudhary/NAND/blob/main/media/computer.png"><img src="https://github.com/ArhanChaudhary/NAND/raw/main/media/computer.png" width="700"></a></p>
<p dir="auto"><em>taken from <a href="https://commons.wikimedia.org/wiki/File:Hack_Computer_Block_Diagram_2.png" rel="nofollow">Wikipedia</a>.</em></p>
<p dir="auto">The NAND computer follows the <a href="https://en.wikipedia.org/wiki/Harvard_architecture" rel="nofollow">Harvard architecture</a>. That is, the instruction memory (ROM) and the data memory (RAM) are separately stored, brought to function in unison by the CPU.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ArhanChaudhary/NAND/blob/main/media/cpu.png"><img src="https://github.com/ArhanChaudhary/NAND/raw/main/media/cpu.png" width="700"></a></p>
<p dir="auto"><em>taken from <a href="https://commons.wikimedia.org/wiki/File:Hack_Computer_Block_Diagram_2.png" rel="nofollow">Wikipedia</a>.</em></p>
<p dir="auto">NAND's CPU is an <a href="https://en.wikipedia.org/wiki/Accumulator_(computing)#Accumulator_machines" rel="nofollow">accumulator machine</a>, meaning that it is heavily dependent on its built-in registers for control flow (in this case the accumulator is the D register). Don't worry if you don't fully understand what the CPU visualization depicts. Instead, take the perspective of appreciation for how this elegantly simple design powers the entirety of NAND — in your web browser!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/ArhanChaudhary/NAND/blob/main/media/alu.png"><img src="https://github.com/ArhanChaudhary/NAND/raw/main/media/alu.png" width="700"></a></p>
<p dir="auto">We've reached the instruction set, the nitty-gritty. As indicated, NAND's CPU only has <em>two</em> opcodes! This makes the instruction set relatively simple while providing a rich functionality. NAND's ALU is additionally specified with the expressions it can compute in a single instruction.</p>
<p dir="auto">Phew! That was a lot to take in, but I promise you NAND is far less complicated than I've made it out to be. From a relatively simple logical foundation, Turing equivalence is achieved! If you want see my implementation of the NAND computer architecture, <a href="https://github.com/ArhanChaudhary/NAND/blob/main/src/core">you're more than welcome to</a>! If you find yourself still curious, check out the <a href="https://drive.google.com/file/d/1Z_fxYmmRNXTkAzmZ6YMoX9NXZIRVCKiw/view" rel="nofollow">Nand to Tetris lecture slides</a> for further elaboration on every aspect of the architecture.</p>
<p dir="auto">Let's briefly talk about the compiler and the virtual machine to make this section feel complete. These concepts are nothing unique to NAND, hence their brevity. Some of NAND's strange syntactical features are a direct consequence of making the compiler easier to implement. The compiler is a <a href="https://en.wikipedia.org/wiki/Recursive_descent_parser" rel="nofollow">recursive descent parser</a> on an <a href="https://en.wikipedia.org/wiki/LL_parser" rel="nofollow">LL(1) grammar</a>, generating virtual machine code to be utilized as a <a href="https://en.wikipedia.org/wiki/Stack_machine" rel="nofollow">simple stack machine</a> (a technique that also handles managing <a href="https://en.wikipedia.org/wiki/Call_stack" rel="nofollow">call stacks</a>). Each virtual machine instruction is then trivially mapped to assembly and machine code. Once again, you're more than welcome to see my <a href="https://github.com/ArhanChaudhary/NAND/blob/main/src/compiler">compiler implementation</a> for yourself.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Jack Reference</h2><a id="user-content-jack-reference" aria-label="Permalink: Jack Reference" href="#jack-reference"></a></p>
<p dir="auto">This majority of this section was taken from the <a href="https://drive.google.com/file/d/1CAGF8d3pDIOgqX8NZGzU34PPEzvfTYrk/view" rel="nofollow">Nand to Tetris lecture slides</a> and the <a href="https://www.csie.ntu.edu.tw/~cyy/courses/introCS/18fall/lectures/handouts/lec13_Jack.pdf" rel="nofollow">National Taiwan University lecture slides</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Program Structure</h3><a id="user-content-program-structure" aria-label="Permalink: Program Structure" href="#program-structure"></a></p>
<pre><b>class</b> ClassName {
    <b>field</b> <i>variable declarations</i>;
    <b>static</b> <i>variable declarations</i>;

    <b>constructor</b> <i>type</i> ( <i>parameterList</i> ) {
        <i>local variable declarations</i>;
        <i>statements</i>
    }

    <b>method</b> <i>type</i> ( <i>parameterList</i> ) {
        <i>local variable declarations</i>;
        <i>statements</i>
    }

    <b>function</b> <i>type</i> ( <i>parameterList</i> ) {
        <i>local variable declarations</i>;
        <i>statements</i>
    }
}
</pre>
<p dir="auto">About this layout:</p>
<ul dir="auto">
<li>Every part in this layout can appear 0 or more times</li>
<li>The order of the field / static
declarations is arbitrary</li>
<li>The order of the subroutine declarations is arbitrary</li>
<li>Each type is either <code>void</code>, <code>int</code>, <code>boolean</code>, <code>char</code>, or a class name</li>
</ul>
<p dir="auto">A Jack program:</p>
<ul dir="auto">
<li>Defines classes in separate files</li>
<li>Consists of a collection of one or more classes, one of which must be named <code>Main</code></li>
<li>Must define the <code>main</code> function in the <code>Main</code> class, the entry point of the program defined by the Jack OS</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Syntax</h3><a id="user-content-syntax" aria-label="Permalink: Syntax" href="#syntax"></a></p>
<table>
  <tbody>
    <tr>
      <th>White space and comments</th>
      <td>
        Space characters, newline characters, and comments are ignored.<p>
        
        The following comment formats are supported:<br>
        <code>// Comment to end of line</code><br>
        <code>/* Comment until closing */</code><br>
        <code>/** API documentation comment */</code></p></td>
    </tr>
    <tr>
      <th>Symbols</th>
      <td>
        <table>
          <tbody>
            <tr>
              <th>
                <code>(</code>&nbsp;<code>)</code>
              </th>
              <td>
                Used for grouping arithmetic expressions and for enclosing parameter-lists and argument-lists
              </td>
            </tr>
            <tr>
              <th>
                <code>[</code>&nbsp;<code>]</code>
              </th>
              <td>
                Used for array indexing
              </td>
            </tr>
            <tr>
              <th>
                <code>{</code>&nbsp;<code>}</code>
              </th>
              <td>
                Used for grouping program units and statements
              </td>
            </tr>
            <tr>
              <th>
                <code>,</code>
              </th>
              <td>
                Variable list separator
              </td>
            </tr>
            <tr>
              <th>
                <code>;</code>
              </th>
              <td>
                Statement terminator
              </td>
            </tr>
            <tr>
              <th>
                <code>.</code>
              </th>
              <td>
                Class membership
              </td>
            </tr>
            <tr>
              <th>
                <code>=</code>
              </th>
              <td>
                Assignment and comparison operator
              </td>
            </tr>
            <tr>
              <th>
                <code>+</code>&nbsp;<code>-</code>&nbsp;<code>*</code><br>
                <code>/</code>&nbsp;<code>&amp;</code>&nbsp;<code>|</code><br>
                <code>-</code>&nbsp;<code>&lt;</code>&nbsp;<code>&gt;</code>
              </th>
              <td>
                Operators. Note that <code>&amp;</code> and <code>|</code> are bitwise and do not short-circuit
              </td>
            </tr>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th>Reserved words</th>
      <td>
        <table>
          <tbody>
            <tr>
              <th>
                <code>class</code>,
                <code>constructor</code>,
                <code>method</code>,
                <code>function</code>
              </th>
              <td>
                Program components
              </td>
            </tr>
            <tr>
              <th>
                <code>int</code>,
                <code>boolean</code>,
                <code>char</code>
              </th>
              <td>
                Primitive types
              </td>
            </tr>
            <tr>
              <th>
                <code>var</code>,
                <code>static</code>,
                <code>field</code>
              </th>
              <td>
                Variable declarations
              </td>
            </tr>
            <tr>
              <th>
                <code>let</code>,
                <code>do</code>,
                <code>if</code>,
                <code>else</code>,
                <code>while</code>,
                <code>return</code>
              </th>
              <td>
                Statements
              </td>
            </tr>
            <tr>
              <th>
                <code>true</code>,
                <code>false</code>,
                <code>null</code>
              </th>
              <td>
                Constant values (-1. 0, and 0 respectively)
              </td>
            </tr>
            <tr>
              <th>
                <code>this</code>
              </th>
              <td>
                Object reference
              </td>
            </tr>
            <tr>
              <th>
                <code>arguments</code>
              </th>
              <td>
                Function arguments array reference
              </td>
            </tr>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th>Constants</th>
      <td>
          <i>Integer</i> constants must be positive and in standard decimal notation, e.g., <code>1984</code>. Negative integers like <code>-13</code> are not constants but rather expressions consisting of a unary negative operator applied to an integer constant.<p>
          
          <i>String</i> constants are enclosed within quotation marks and may contain any characters except new lines or quotation marks. Unlike typical programming languages, these characters cannot be escaped within a string, so these characters are instead supplied by the functions <code>String.newLine()</code> and <code>String.doubleQuote()</code> from the OS. <sub><sup>If you manage to read this, say <a href="https://files.bithole.dev/nandy.png" rel="nofollow">hi</a> to Nandy</sup></sub></p><p>
          
          <i>Boolean</i> constants can be true or false.</p><p>
          
          <i>null</i> signifies a null reference (a value of 0).
      </p></td>
    </tr>
    <tr>
      <th>Identifiers</th>
      <td>
          Identifiers are composed from arbitrarily long sequences of letters, digits, and "_". The first character cannot be a digit.<p>
          
          Case sensitivity matters. Thus <code>x</code> and <code>X</code> are treated as different identifiers.
      </p></td>
    </tr>
  </tbody>
</table>
<p dir="auto"><h3 tabindex="-1" dir="auto">Variables</h3><a id="user-content-variables" aria-label="Permalink: Variables" href="#variables"></a></p>
<table>
<thead>
<tr>
<th>Variable kind</th>
<th>Description</th>
<th>Declared in</th>
<th>Scope</th>
</tr>
</thead>
<tbody>
<tr>
<td>static variables</td>
<td><code>static</code> <em>type varName1, varName2, ...</em>;<br>Only one copy of each static variable exists, and this copy is shared by all the object instances of the class (like <em>private static variables</em> in Java)</td>
<td>class declaration</td>
<td>The class in which they are declared.</td>
</tr>
<tr>
<td>field variables</td>
<td><code>field</code> <em>type varName1, varName2, ...</em>;<br>Every object (instance of the class) has a private copy of the field variables (like <em>member variables</em> in Java)</td>
<td>class declaration</td>
<td>The class in which they are declared, except for functions, where they are undefined.</td>
</tr>
<tr>
<td>local variables</td>
<td><code>var</code> <em>type varName1, varName2, ...</em>;<br>Local variables are created just before the subroutine starts running and are deallocated when it returns (like <em>local variables</em> in Java)</td>
<td>subroutine declaration</td>
<td>The subroutine in which they are declared.</td>
</tr>
<tr>
<td>parameter variables</td>
<td><em>type varName1, varName2, ...</em><br>Used to pass arguments to the subroutine. Treated like local variables whose values are initialized "from the outside", just before the subroutine starts running.</td>
<td>subroutine signature</td>
<td>The subroutine in which they are declared.</td>
</tr>
</tbody>
</table>
<p dir="auto"><h3 tabindex="-1" dir="auto">Statements</h3><a id="user-content-statements" aria-label="Permalink: Statements" href="#statements"></a></p>
<table>
<thead>
<tr>
<th>Statement</th>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>let</td>
<td><code>let</code> <em>varName = expression</em>;<br>or<br><code>let</code> <em>varName</em>[<em>expression1</em>] = <em>expression2</em>;</td>
<td>An assignment operation (where <em>varName</em> is either single-valued or an array). The variable kind may be <em>static, local, field, or parameter</em>.</td>
</tr>
<tr>
<td>if</td>
<td><code>if</code> (expression1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;statements1<br>} <code>else if</code> (expression2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;statements2<br>} <code>else</code> {<br>&nbsp;&nbsp;&nbsp;&nbsp;statements3<br>}</td>
<td>Typical <em>if</em> statement with an optional <em>else</em> or <em>else if</em> clause. The brackets are optional if there's only one statement.</td>
</tr>
<tr>
<td>while</td>
<td><code>while</code> (expression) {<br>&nbsp;&nbsp;&nbsp;&nbsp;<em>statements</em><br>}</td>
<td>Typical <em>while</em> statement. The brackets are optional if there's only one statement.</td>
</tr>
<tr>
<td>do</td>
<td><code>do</code> <em>function-or-method-call</em>;</td>
<td>Used to call a function or a method for its effect, ignoring the returned value.</td>
</tr>
<tr>
<td>return</td>
<td><code>return</code> expression;<br>or<br><code>return</code>;</td>
<td>Used to return a value from a subroutine. Constructors must return the expression <code>this</code>.</td>
</tr>
</tbody>
</table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Jack OS Reference</h2><a id="user-content-jack-os-reference" aria-label="Permalink: Jack OS Reference" href="#jack-os-reference"></a></p>
<p dir="auto">This section was adapted from the supplied Nand to Tetris software suite.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Array</h3><a id="user-content-array" aria-label="Permalink: Array" href="#array"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * Represents an array.
 * In the Jack language, arrays are instances of the Array class.
 * Once declared, the array entries can be accessed using the usual
 * syntax arr[i]. Each array entry can hold a primitive data type as
 * well as any object type. Different array entries can have different
 * data types.
 */
class Array {
    /**
     * Constructs a new array of the given size.
     */
    function Array new(int size);

    /**
     * Deallocates an instance of Array and frees its memory space.
     */
    method void dispose();
}"><pre><span>/**</span>
<span> * Represents an array.</span>
<span> * In the Jack language, arrays are instances of the Array class.</span>
<span> * Once declared, the array entries can be accessed using the usual</span>
<span> * syntax arr[i]. Each array entry can hold a primitive data type as</span>
<span> * well as any object type. Different array entries can have different</span>
<span> * data types.</span>
<span> */</span>
<span>class</span> <span>Array</span> <span>{</span>
    <span>/**</span>
<span>     * Constructs a new array of the given size.</span>
<span>     */</span>
    <span>function</span> <span>Array</span> <span>new</span><span>(</span><span>int</span> <span>size</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Deallocates an instance of Array and frees its memory space.</span>
<span>     */</span>
    <span>method</span> <span>void</span> <span>dispose</span><span>(</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Keyboard</h3><a id="user-content-keyboard" aria-label="Permalink: Keyboard" href="#keyboard"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * The Keyboard class provides an interface for reading inputs from
 * a standard keyboard.
 */
class Keyboard {
    /**
     * Returns the character code of the currently pressed key,
     * or 0 if no key is currently pressed.
     */
    function char keyPressed();

    /**
     * Waits until a keyboard key is pressed and released, then displays the
     * corresponding character on the screen and returns the character.
     */
    function char readChar();

    /**
     * Prints the message on the screen, reads the next line (until a newLine
     * character) from the keyboard, and returns its value.
     */
    function String readLine(String message);

    /**
     * Prints the message on the screen, reads the next line (until a newline
     * character) from the keyboard, and returns its integer value (until the
     * first non numeric character).
     */
    function int readInt(String message);
}"><pre><span>/**</span>
<span> * The Keyboard class provides an interface for reading inputs from</span>
<span> * a standard keyboard.</span>
<span> */</span>
<span>class</span> <span>Keyboard</span> <span>{</span>
    <span>/**</span>
<span>     * Returns the character code of the currently pressed key,</span>
<span>     * or 0 if no key is currently pressed.</span>
<span>     */</span>
    <span>function</span> <span>char</span> <span>keyPressed</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Waits until a keyboard key is pressed and released, then displays the</span>
<span>     * corresponding character on the screen and returns the character.</span>
<span>     */</span>
    <span>function</span> <span>char</span> <span>readChar</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Prints the message on the screen, reads the next line (until a newLine</span>
<span>     * character) from the keyboard, and returns its value.</span>
<span>     */</span>
    <span>function</span> <span>String</span> <span>readLine</span><span>(</span><span>String</span> <span>message</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Prints the message on the screen, reads the next line (until a newline</span>
<span>     * character) from the keyboard, and returns its integer value (until the</span>
<span>     * first non numeric character).</span>
<span>     */</span>
    <span>function</span> <span>int</span> <span>readInt</span><span>(</span><span>String</span> <span>message</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Math</h3><a id="user-content-math" aria-label="Permalink: Math" href="#math"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * A library of commonly used mathematical functions.
 */
class Math {
    /**
     * Returns the absolute value of x.
     */
    function int abs(int x);

    /**
     * Returns the product of x and y.
     * This function is internally called in lieu of the multiplication
     * operator '*'. In other words, the Jack expression x * y and
     * Math.multiply(x, y) are equivalent.
     */
    function int multiply(int x, int y);

    /**
     * Returns the integer part of x / y.
     * This function is internally called in lieu of the division
     * operator '/'. In other words, the Jack expression x / y and
     * Math.divide(x, y) are equivalent.
     */
    function int divide(int dividend, int divisor);

    /**
     * Returns the integer part of the square root of x.
     */
    function int sqrt(int x);

    /**
     * Returns the greater of the two arguments.
     */
    function int max(int a, int b);

    /**
     * Returns the smaller of the two arguments.
     */
    function int min(int a, int b);
}"><pre><span>/**</span>
<span> * A library of commonly used mathematical functions.</span>
<span> */</span>
<span>class</span> <span>Math</span> <span>{</span>
    <span>/**</span>
<span>     * Returns the absolute value of x.</span>
<span>     */</span>
    <span>function</span> <span>int</span> <span>abs</span><span>(</span><span>int</span> <span>x</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the product of x and y.</span>
<span>     * This function is internally called in lieu of the multiplication</span>
<span>     * operator '*'. In other words, the Jack expression x * y and</span>
<span>     * Math.multiply(x, y) are equivalent.</span>
<span>     */</span>
    <span>function</span> <span>int</span> <span>multiply</span><span>(</span><span>int</span> <span>x</span><span>,</span> <span>int</span> <span>y</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the integer part of x / y.</span>
<span>     * This function is internally called in lieu of the division</span>
<span>     * operator '/'. In other words, the Jack expression x / y and</span>
<span>     * Math.divide(x, y) are equivalent.</span>
<span>     */</span>
    <span>function</span> <span>int</span> <span>divide</span><span>(</span><span>int</span> <span>dividend</span><span>,</span> <span>int</span> <span>divisor</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the integer part of the square root of x.</span>
<span>     */</span>
    <span>function</span> <span>int</span> <span>sqrt</span><span>(</span><span>int</span> <span>x</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the greater of the two arguments.</span>
<span>     */</span>
    <span>function</span> <span>int</span> <span>max</span><span>(</span><span>int</span> <span>a</span><span>,</span> <span>int</span> <span>b</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the smaller of the two arguments.</span>
<span>     */</span>
    <span>function</span> <span>int</span> <span>min</span><span>(</span><span>int</span> <span>a</span><span>,</span> <span>int</span> <span>b</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Memory</h3><a id="user-content-memory" aria-label="Permalink: Memory" href="#memory"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The NAND RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    /**
     * Returns the RAM value at the given address.
     */
    function int peek(int address);

    /**
     * Sets the value of the given RAM address to the given value.
     */
    function void poke(int address, int value);

    /**
     * Finds and allocates from the heap a memory block of the specified size and
     * returns a reference to its base address.
     */
    function int alloc(int size);

    /**
     * Deallocates the given object (cast as an array) by making it available for
     * future allocations.
     */
    function void deAlloc(Array o);
}"><pre><span>/**</span>
<span> * This library provides two services: direct access to the computer's main</span>
<span> * memory (RAM), and allocation and recycling of memory blocks. The NAND RAM</span>
<span> * consists of 32,768 words, each holding a 16-bit binary number.</span>
<span> */</span>
<span>class</span> <span>Memory</span> <span>{</span>
    <span>/**</span>
<span>     * Returns the RAM value at the given address.</span>
<span>     */</span>
    <span>function</span> <span>int</span> <span>peek</span><span>(</span><span>int</span> <span>address</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Sets the value of the given RAM address to the given value.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>poke</span><span>(</span><span>int</span> <span>address</span><span>,</span> <span>int</span> <span>value</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Finds and allocates from the heap a memory block of the specified size and</span>
<span>     * returns a reference to its base address.</span>
<span>     */</span>
    <span>function</span> <span>int</span> <span>alloc</span><span>(</span><span>int</span> <span>size</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Deallocates the given object (cast as an array) by making it available for</span>
<span>     * future allocations.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>deAlloc</span><span>(</span><span>Array</span> <span>o</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Output</h3><a id="user-content-output" aria-label="Permalink: Output" href="#output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * A library of functions for writing text on the screen.
 * The NAND physical screen consists of 512 rows of 256 pixels each.
 * The library uses a fixed font, in which each character is displayed
 * within a frame which is 11 pixels high (including 1 pixel for inter-line
 * spacing) and 8 pixels wide (including 2 pixels for inter-character spacing).
 * The resulting grid accommodates 23 rows (indexed 0..22, top to bottom)
 * of 64 characters each (indexed 0..63, left to right). The top left
 * character position on the screen is indexed (0,0). A cursor, implemented
 * as a small filled square, indicates where the next character will be displayed.
 */
class Output {
    /**
     * Moves the cursor to the j'th column of the i'th row, erasing the character
     * that was there.
     */
    function void moveCursor(int i, int j);

    /**
     * Displays the given character at the cursor location,
     * and advances the cursor one column forward.
     */
    function void printChar(char c);

    /**
     * Displays the given string starting at the cursor location, and advances
     * the cursor appropriately.
     */
    function void printString(String str);

    /**
     * Displays the given integer starting at the cursor location, and advances
     * the cursor appropriately.
     */
    function void printInt(int i);

    /**
     * Advances the cursor to the beginning of the next line.
     */
    function void println();

    /**
     * Erases the character that was last written and moves the cursor one column
     * back.
     */
    function void backSpace();
}"><pre><span>/**</span>
<span> * A library of functions for writing text on the screen.</span>
<span> * The NAND physical screen consists of 512 rows of 256 pixels each.</span>
<span> * The library uses a fixed font, in which each character is displayed</span>
<span> * within a frame which is 11 pixels high (including 1 pixel for inter-line</span>
<span> * spacing) and 8 pixels wide (including 2 pixels for inter-character spacing).</span>
<span> * The resulting grid accommodates 23 rows (indexed 0..22, top to bottom)</span>
<span> * of 64 characters each (indexed 0..63, left to right). The top left</span>
<span> * character position on the screen is indexed (0,0). A cursor, implemented</span>
<span> * as a small filled square, indicates where the next character will be displayed.</span>
<span> */</span>
<span>class</span> <span>Output</span> <span>{</span>
    <span>/**</span>
<span>     * Moves the cursor to the j'th column of the i'th row, erasing the character</span>
<span>     * that was there.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>moveCursor</span><span>(</span><span>int</span> <span>i</span><span>,</span> <span>int</span> <span>j</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Displays the given character at the cursor location,</span>
<span>     * and advances the cursor one column forward.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>printChar</span><span>(</span><span>char</span> <span>c</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Displays the given string starting at the cursor location, and advances</span>
<span>     * the cursor appropriately.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>printString</span><span>(</span><span>String</span> <span>str</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Displays the given integer starting at the cursor location, and advances</span>
<span>     * the cursor appropriately.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>printInt</span><span>(</span><span>int</span> <span>i</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Advances the cursor to the beginning of the next line.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>println</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Erases the character that was last written and moves the cursor one column</span>
<span>     * back.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>backSpace</span><span>(</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Screen</h3><a id="user-content-screen" aria-label="Permalink: Screen" href="#screen"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * A library of functions for displaying graphics on the screen.
 * The NAND physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    /**
     * Erases the entire screen.
     */
    function void clearScreen();

    /**
     * Sets the current color to be used for all subsequent drawXXX commands.
     * Black is represented by true, white by false.
     */
    function void setColor(boolean b);

    /**
     * Draws the (x, y) pixel using the current color.
     */
    function void drawPixel(int x, int y);

    /**
     * Draws a line from pixel (x1, y1) to pixel (x2, y2) using the current color.
     */
    function void drawLine(int x1, int y1, int x2, int y2);

    /**
     * Draws a filled rectangle whose top left corner is (x1, y1) and bottom
     * right corner is (x2, y2) using the current color.
     */
    function void drawRectangle(int x1, int y1, int x2, int y2);

    /**
     * Draws a filled circle of radius r <= 181 around (x, y) using the current
     * color.
     */
    function void drawCircle(int x, int y, int r);
}"><pre><span>/**</span>
<span> * A library of functions for displaying graphics on the screen.</span>
<span> * The NAND physical screen consists of 256 rows (indexed 0..255, top to bottom)</span>
<span> * of 512 pixels each (indexed 0..511, left to right). The top left pixel on</span>
<span> * the screen is indexed (0,0).</span>
<span> */</span>
<span>class</span> <span>Screen</span> <span>{</span>
    <span>/**</span>
<span>     * Erases the entire screen.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>clearScreen</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Sets the current color to be used for all subsequent drawXXX commands.</span>
<span>     * Black is represented by true, white by false.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>setColor</span><span>(</span><span>boolean</span> <span>b</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Draws the (x, y) pixel using the current color.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>drawPixel</span><span>(</span><span>int</span> <span>x</span><span>,</span> <span>int</span> <span>y</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Draws a line from pixel (x1, y1) to pixel (x2, y2) using the current color.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>drawLine</span><span>(</span><span>int</span> <span>x1</span><span>,</span> <span>int</span> <span>y1</span><span>,</span> <span>int</span> <span>x2</span><span>,</span> <span>int</span> <span>y2</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Draws a filled rectangle whose top left corner is (x1, y1) and bottom</span>
<span>     * right corner is (x2, y2) using the current color.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>drawRectangle</span><span>(</span><span>int</span> <span>x1</span><span>,</span> <span>int</span> <span>y1</span><span>,</span> <span>int</span> <span>x2</span><span>,</span> <span>int</span> <span>y2</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Draws a filled circle of radius r &lt;= 181 around (x, y) using the current</span>
<span>     * color.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>drawCircle</span><span>(</span><span>int</span> <span>x</span><span>,</span> <span>int</span> <span>y</span><span>,</span> <span>int</span> <span>r</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">String</h3><a id="user-content-string" aria-label="Permalink: String" href="#string"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * Represents character strings. In addition for constructing and
 * deallocating strings, the class features methods for getting and setting
 * individual characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    /**
     * Constructs a new empty string with a maximum length of maxLength and
     * initial length of 0.
     */
    constructor String new(int maxLength);

    /**
     * Deallocates an instance of String and frees its memory space.
     */
    method void dispose();

    /**
     * Returns the current length of an instance of String.
     */
    method int length();

    /**
     * Returns the character at the j-th location of an instance of String.
     */
    method char charAt(int j);

    /**
     * Sets the character at the j-th location of an instance of String to c.
     */
    method void setCharAt(int j, char c);

    /**
     * Appends the given character to the end of an instance of String and
     * returns the same instance.
     */
    method String appendChar(char c);

    /**
     * Erases the last character from an instance of String.
     */
    method void eraseLastChar();

    /**
     * Returns the integer value of an instance of String until the first
     * non-numeric character.
     */
    method int intValue();

    /**
     * Sets an instance of String to the representation of the given number.
     */
    method void setInt(int number);

    /**
     * Returns the new line character.
     */
    function char newLine();

    /**
     * Returns the backspace character.
     */
    function char backSpace();

    /**
     * Returns the quotation mark character.
     */
    function char doubleQuote();
}"><pre><span>/**</span>
<span> * Represents character strings. In addition for constructing and</span>
<span> * deallocating strings, the class features methods for getting and setting</span>
<span> * individual characters of the string, for erasing the string's last character,</span>
<span> * for appending a character to the string's end, and more typical</span>
<span> * string-oriented operations.</span>
<span> */</span>
<span>class</span> <span>String</span> <span>{</span>
    <span>/**</span>
<span>     * Constructs a new empty string with a maximum length of maxLength and</span>
<span>     * initial length of 0.</span>
<span>     */</span>
    <span>constructor</span> <span>String</span> <span>new</span><span>(</span><span>int</span> <span>maxLength</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Deallocates an instance of String and frees its memory space.</span>
<span>     */</span>
    <span>method</span> <span>void</span> <span>dispose</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the current length of an instance of String.</span>
<span>     */</span>
    <span>method</span> <span>int</span> <span>length</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the character at the j-th location of an instance of String.</span>
<span>     */</span>
    <span>method</span> <span>char</span> <span>charAt</span><span>(</span><span>int</span> <span>j</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Sets the character at the j-th location of an instance of String to c.</span>
<span>     */</span>
    <span>method</span> <span>void</span> <span>setCharAt</span><span>(</span><span>int</span> <span>j</span><span>,</span> <span>char</span> <span>c</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Appends the given character to the end of an instance of String and</span>
<span>     * returns the same instance.</span>
<span>     */</span>
    <span>method</span> <span>String</span> <span>appendChar</span><span>(</span><span>char</span> <span>c</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Erases the last character from an instance of String.</span>
<span>     */</span>
    <span>method</span> <span>void</span> <span>eraseLastChar</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the integer value of an instance of String until the first</span>
<span>     * non-numeric character.</span>
<span>     */</span>
    <span>method</span> <span>int</span> <span>intValue</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Sets an instance of String to the representation of the given number.</span>
<span>     */</span>
    <span>method</span> <span>void</span> <span>setInt</span><span>(</span><span>int</span> <span>number</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the new line character.</span>
<span>     */</span>
    <span>function</span> <span>char</span> <span>newLine</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the backspace character.</span>
<span>     */</span>
    <span>function</span> <span>char</span> <span>backSpace</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Returns the quotation mark character.</span>
<span>     */</span>
    <span>function</span> <span>char</span> <span>doubleQuote</span><span>(</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Sys</h3><a id="user-content-sys" aria-label="Permalink: Sys" href="#sys"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="/**
 * A library that supports various program execution services.
 */
class Sys {
    /**
     * Halts the program execution.
     */
    function void halt();

    /**
     * Displays the given error code in the format &quot;ERR[errorCode]&quot;, and halts
     * the program's execution.
     */
    function void error(int errorCode);

    /**
     * Waits approximately duration milliseconds and returns. Note that this is
     * runtime dependent and may not be accurate.
     */
    function void wait(int duration);
}"><pre><span>/**</span>
<span> * A library that supports various program execution services.</span>
<span> */</span>
<span>class</span> <span>Sys</span> <span>{</span>
    <span>/**</span>
<span>     * Halts the program execution.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>halt</span><span>(</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Displays the given error code in the format "ERR[errorCode]", and halts</span>
<span>     * the program's execution.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>error</span><span>(</span><span>int</span> <span>errorCode</span><span>)</span><span>;</span>

    <span>/**</span>
<span>     * Waits approximately duration milliseconds and returns. Note that this is</span>
<span>     * runtime dependent and may not be accurate.</span>
<span>     */</span>
    <span>function</span> <span>void</span> <span>wait</span><span>(</span><span>int</span> <span>duration</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Error Codes</h3><a id="user-content-error-codes" aria-label="Permalink: Error Codes" href="#error-codes"></a></p>
<p dir="auto">If you do something that forces the computer into an invalid state, like computing the result of <code>1 / 0</code>, the Jack OS will display one of these error codes in the format "ERR[N]" and immediately terminate the program.</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Method/Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Sys.wait</td>
<td>Duration must be positive</td>
</tr>
<tr>
<td>2</td>
<td>Array.new</td>
<td>Array size must be positive</td>
</tr>
<tr>
<td>3</td>
<td>Math.divide</td>
<td>Division by zero</td>
</tr>
<tr>
<td>4</td>
<td>Math.sqrt</td>
<td>Cannot compute square root of a negative number</td>
</tr>
<tr>
<td>5</td>
<td>Memory.alloc</td>
<td>Allocated memory size must be positive</td>
</tr>
<tr>
<td>6</td>
<td>Memory.alloc</td>
<td>Heap overflow</td>
</tr>
<tr>
<td>7</td>
<td>Screen.drawPixel</td>
<td>Illegal pixel coordinates</td>
</tr>
<tr>
<td>8</td>
<td>Screen.drawLine</td>
<td>Illegal line coordinates</td>
</tr>
<tr>
<td>9</td>
<td>Screen.drawRectangle</td>
<td>Illegal rectangle coordinates</td>
</tr>
<tr>
<td>12</td>
<td>Screen.drawCircle</td>
<td>Illegal center coordinates</td>
</tr>
<tr>
<td>13</td>
<td>Screen.drawCircle</td>
<td>Illegal radius</td>
</tr>
<tr>
<td>14</td>
<td>String.new</td>
<td>Maximum length must be non-negative</td>
</tr>
<tr>
<td>15</td>
<td>String.charAt</td>
<td>String index out of bounds</td>
</tr>
<tr>
<td>16</td>
<td>String.setCharAt</td>
<td>String index out of bounds</td>
</tr>
<tr>
<td>17</td>
<td>String.appendChar</td>
<td>String is full</td>
</tr>
<tr>
<td>19</td>
<td>String.setInt</td>
<td>Insufficient string capacity</td>
</tr>
<tr>
<td>20</td>
<td>Output.moveCursor</td>
<td>Illegal cursor location</td>
</tr>
</tbody>
</table>
<p dir="auto"><h2 tabindex="-1" dir="auto">FAQ</h2><a id="user-content-faq" aria-label="Permalink: FAQ" href="#faq"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Whoa, is <em>everything</em> made from NAND gates?</h3><a id="user-content-whoa-is-everything-made-from-nand-gates" aria-label="Permalink: Whoa, is everything made from NAND gates?" href="#whoa-is-everything-made-from-nand-gates"></a></p>
<p dir="auto">Well..., I admit the description and title are a little misleading, but still in good faith. The compiler and virtual machine translator are written in Typescript, while the kernel and hardware are emulated in Rust. Just the logic simulator runs computations and memory accesses from NAND gates. Bootstrapping the full tech stack is a feat that isn't unheard of, but such a massive project by itself probably deserves its own separate project.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Did you design NAND by yourself?</h3><a id="user-content-did-you-design-nand-by-yourself" aria-label="Permalink: Did you design NAND by yourself?" href="#did-you-design-nand-by-yourself"></a></p>
<p dir="auto">NAND follows the <a href="https://www.nand2tetris.org/" rel="nofollow">Nand to Tetris course</a> and its <a href="https://www.amazon.com/Elements-Computing-Systems-second-Principles-dp-0262539802/dp/0262539802/ref=dp_ob_title_bk" rel="nofollow">associated book</a> (you should definitely check it out, it's an absolutely incredible read). I solely implemented the specification for CPU, assembler, virtual machine translator, and compiler, while porting the platform to the web with its own IDE and user interface.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">If there's only one type, what is the point of specifying types at all?</h3><a id="user-content-if-theres-only-one-type-what-is-the-point-of-specifying-types-at-all" aria-label="Permalink: If there's only one type, what is the point of specifying types at all?" href="#if-theres-only-one-type-what-is-the-point-of-specifying-types-at-all"></a></p>
<p dir="auto">This question references the fact that under the hood, the signed 16-bit integer is Jack's only real type. We anyways need to be so explicit with types to help the compiler figure out which class certain instance methods belong to. If we declare the Jack variable <code>s</code> with the type <code>String</code>, <code>s.appendChar(33)</code> is transformed during compilation into <code>String.appendChar(s, 33)</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Why does the IDE feel finnicky?</h3><a id="user-content-why-does-the-ide-feel-finnicky" aria-label="Permalink: Why does the IDE feel finnicky?" href="#why-does-the-ide-feel-finnicky"></a></p>
<p dir="auto">NAND's IDE unfortunately trades implementation simplicity for a worse user experience. It uses the unorthodox <a href="https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480" rel="nofollow">contenteditable</a> and hacky cursor positioning logic to get syntax highlighting to work. I myself was surprised that I managed to even bring it to a functional state. As a result, it's slow and noticeably buggy, plus common keybinds don't work. I'm sorry, but for now you'll just need to bear with me.</p>
<hr>
<p dir="auto">You now know how to program NAND in Jack! And wow! It's been grand voyage of discovery. This write-up only begins to do justice the pure genius behind the computer architecture of the modern world. Hopefully, you gain a newfound appreciation for the Herculean amount of technical complexity it takes to bridge the gap between your code and program output on the screen.</p>
<p dir="auto">Press "Start" to compile and run your code. The OS will typically take a little under a second to initialize memory and set up its services before you're off to see your program running!</p>
<p dir="auto">If you've read this far, my heartfelt thank you! Happy coding!</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[MemoryDB: A fast and durable memory-first cloud database (132 pts)]]></title>
            <link>https://www.amazon.science/publications/amazon-memorydb-a-fast-and-durable-memory-first-cloud-database</link>
            <guid>40158794</guid>
            <pubDate>Thu, 25 Apr 2024 15:34:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.amazon.science/publications/amazon-memorydb-a-fast-and-durable-memory-first-cloud-database">https://www.amazon.science/publications/amazon-memorydb-a-fast-and-durable-memory-first-cloud-database</a>, See on <a href="https://news.ycombinator.com/item?id=40158794">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>The JP Economics and Decision Science Team is looking for an Intern Economist with experience in empirical economic analysis to conduct research on the impact evaluation and prediction of marketing campaigns in Amazon Japan's online retail business. The successful candidate will work closely with the team to improve the efficiency of designing marketing campaigns. We are looking for detail-oriented, organized, and responsible individuals who are eager to learn how to work with large and complicated data sets. Knowledge of econometrics and applied microeconomics and familiarity with Stata, R, or Python are necessary. Experience with SQL would be a plus, but not required. These are full-time positions at 40 hours per week, with compensation being awarded on an hourly basis. You will work in a team of economists, data scientists, and engineers and in collaboration with product and finance managers. These skills will translate well into writing applied chapters in your dissertation and provide you with work experience that may help you with placement. Roughly 85% of interns from previous cohorts have converted to full time economics employment at Amazon. If you are interested, please send your CV to our mailing list at econ-internship@amazon.com. Key job responsibilities • Use regression analysis to estimate econometric models and develop forecasting solutions that can predict marketing campaign effectiveness. • Collaborate with other economists and data scientists to validate and refine the econometric models. • Work with product managers and software developers to integrate the forecasting models into the campaign management system. • Monitor the accuracy and effectiveness of the forecasting models and make adjustments as necessary. • Communicate your findings and recommendations to team members and stakeholders. A day in the life - Discussions with business partners, as well as product managers and tech leaders to understand the business problem. - Brainstorming with other scientists and economists to design the right model for the problem in hand. - Present the results and new ideas for existing or forward looking problems to leadership. - Deep dive into the data. - Modeling and creating working prototypes. - Analyze the results and review with partners. About the team We are a team of economists, data scientists, and business intelligence engineers supporting Amazon Japan's Customer Growth and Engagement (CGE) org as the one-stop data science enabler. We use analytical insights and products to empower CGE and align strategic decisions across partner teams (e.g., Operations, Delivery Experience, Pricing). We are open to hiring candidates to work out of one of the following locations: Seattle, WA, USA</p>



        

        

        

        
    </div><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>The Fulfillment by Amazon (FBA) team is looking for a passionate, curious, and creative Senior Applied Scientist, with expertise in machine learning and a proven record of solving business problems through scalable ML solutions, to join our top-notch cross-domain FBA science team. We want to learn seller behaviors, understand seller experience, build automated LLM-based solutions to sellers, design seller policies and incentives, and develop science products and services that empower third-party sellers to grow their businesses. We also predict potentially costly defects that may occur during packing, shipping, receiving and storing the inventory. We aim to prevent such defects before occurring while we are also fulfilling customer demand as quickly and efficiently as possible, in addition to managing returns and reimbursements. To do so, we build and innovate science solutions at the intersection of machine learning, statistics, economics, operations research, and data analytics. As a senior applied scientist, you will propose and deploy solutions that will likely draw from a range of scientific areas such as supervised and unsupervised learning, recommendation systems, statistical learning, LLMs, and reinforcement learning. This role has high visibility to senior Amazon business leaders and involves working with other scientists, and partnering with engineering and product teams to integrate scientific work into production systems. Key job responsibilities - As a senior member of the science team, you will play an integral part in building Amazon's FBA management system. - Research and develop machine learning models to solve diverse business problems faced in Seller inventory management systems. - Define a long-term science vision and roadmap for the team, driven fundamentally from our customers' needs, translating those directions into specific plans for research and applied scientists, as well as engineering and product teams. - Drive and execute machine learning projects/products end-to-end: from ideation, analysis, prototyping, development, metrics, and monitoring. - Review and audit modeling processes and results for other scientists, both junior and senior. - Advocate the right ML solutions to business stakeholders, engineering teams, as well as executive level decision makers A day in the life In this role, you will be a technical leader in machine learning with significant scope, impact, and high visibility. Your solutions may lead to billions of dollars impact on either the topline or the bottom line of Amazon third-party seller business. As a senior scientist on the team, you will be involved in every aspect of the process - from idea generation, business analysis and scientific research, through to development and deployment of advanced models - giving you a real sense of ownership. From day one, you will be working with experienced scientists, engineers, and designers who love what they do. You are expected to make decisions about technology, models and methodology choices. You will strive for simplicity, and demonstrate judgment backed by mathematical proof. You will also collaborate with the broader decision and research science community in Amazon to broaden the horizon of your work and mentor engineers and scientists. The successful candidate will have the strong expertise in applying machine learning models in an applied environment and is looking for her/his next opportunity to innovate, build, deliver, and impress. We are seeking someone who wants to lead projects that require innovative thinking and deep technical problem-solving skills to create production-ready machine learning solutions. The candidate will need to be entrepreneurial, wear many hats, and work in a fast-paced, high-energy, highly collaborative environment. We value highly technical people who know their subject matter deeply and are willing to learn new areas. We look for individuals who know how to deliver results and show a desire to develop themselves, their colleagues, and their career. About the team Fulfillment by Amazon (FBA) is a service that allows sellers to outsource order fulfillment to Amazon, allowing sellers to leverage Amazon’s world-class facilities to provide customers Prime delivery promise. Sellers gain access to Prime members worldwide, see their sales lift, and are free to focus their time and resources on what they do best while Amazon manages fulfillment. Over the last several years, sellers have enjoyed strong business growth with FBA shipping more than half of all products offered by Amazon. FBA focuses on helping sellers with automating and optimizing the third-party supply chain. FBA sellers leverage Amazon’s expertise in machine learning, optimization, data analytics, econometrics, and market design to deliver the best inventory management experience to sellers. We work full-stack, from foundational backend systems to future-forward user interfaces. Our culture is centered on rapid prototyping, rigorous experimentation, and data-driven decision-making. We are open to hiring candidates to work out of one of the following locations: Bellevue, WA, USA</p>



        

        

        

        
    </div><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>The Fulfillment by Amazon (FBA) team is looking for a passionate, curious, and creative Applied Scientist, with expertise and experience in machine learning, to join our top-notch cross-domain FBA science team. We want to learn seller behaviors, understand seller experience, build automated LLM-based solutions to sellers, design seller policies and incentives, and develop science products and services that empower third-party sellers to grow their businesses. We also predict potentially costly defects that may occur during packing, shipping, receiving and storing the inventory. We aim to prevent such defects before occurring while we are also fulfilling customer demand as quickly and efficiently as possible, in addition to managing returns and reimbursements. To do so, we build and innovate science solutions at the intersection of machine learning, statistics, economics, operations research, and data analytics. As an applied scientist, you will design and implement ML solutions that will likely draw from a range of scientific areas such as supervised and unsupervised learning, recommendation systems, statistical learning, LLMs, and reinforcement learning. This role has high visibility to senior Amazon business leaders and involves working with other senior and principal scientists, and partnering with engineering and product teams to integrate scientific work into production systems. Key job responsibilities - Research and develop machine learning models to solve diverse FBA business problems. - Translate business requirements/problems into specific plans for research and applied scientists, as well as engineering and product teams. - Drive and execute machine learning projects/products end-to-end: from ideation, analysis, prototyping, development, metrics, and monitoring. - Work closely with teams of scientists, product managers, program managers, software engineers to drive production model implementations. - Build scalable, efficient, automated processes for large scale data analyses, model development, model validation and model implementation. - Advocate technical solutions to business stakeholders, engineering teams, as well as executive level decision makers A day in the life In this role, you will work in machine learning with significant scope, impact, and high visibility. Your solutions may lead to billions of dollars impact on either the topline or the bottom line of Amazon third-party seller business. As an applied scientist, you will be involved in every aspect of the scientific development process - from idea generation, business analysis and scientific research, through to development and deployment of advanced models - giving you a real sense of ownership. From day one, you will be working with experienced scientists, engineers, and designers who love what they do. You are expected to make decisions about technology, models and methodology choices. You will strive for simplicity, and demonstrate judgment backed by mathematical proof. You will also collaborate with the broader decision and research science community in Amazon to broaden the horizon of your work and mentor engineers and scientists. The successful candidate will have the strong expertise in applying machine learning models in an applied environment and is looking for her/his next opportunity to innovate, build, deliver, and impress. We are seeking someone who wants to lead projects that require innovative thinking and deep technical problem-solving skills to create production-ready machine learning solutions. We value highly technical people who know their subject matter deeply and are willing to learn new areas. We look for individuals who know how to deliver results and show a desire to develop themselves, their colleagues, and their career. About the team Fulfillment by Amazon (FBA) is a service that allows sellers to outsource order fulfillment to Amazon, allowing sellers to leverage Amazon’s world-class facilities to provide customers Prime delivery promise. Sellers gain access to Prime members worldwide, see their sales lift, and are free to focus their time and resources on what they do best while Amazon manages fulfillment. Over the last several years, sellers have enjoyed strong business growth with FBA shipping more than half of all products offered by Amazon. FBA focuses on helping sellers with automating and optimizing the third-party supply chain. FBA sellers leverage Amazon’s expertise in machine learning, optimization, data analytics, econometrics, and market design to deliver the best inventory management experience to sellers. We work full-stack, from foundational backend systems to future-forward user interfaces. Our culture is centered on rapid prototyping, rigorous experimentation, and data-driven decision-making. We are open to hiring candidates to work out of one of the following locations: Bellevue, WA, USA</p>



        

        

        

        
    </div><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>Outbound Communications own the worldwide charter for delighting our customers with timely, relevant notifications (email, mobile, SMS and other channels) to drive awareness and discovery of Amazon’s products and services. We meet customers at their channel of preference with the most relevant content at the right time and frequency. We directly create and operate marketing campaigns, and we have also enabled select partner teams to build programs by reusing and extending our infrastructure. We optimize for customers to receive the most relevant and engaging content across all of Amazon worldwide, and apply the appropriate guardrails to ensure a consistent and high-quality CX. Outbound Communications seek a talented Applied Scientist to join our team to develop the next generation of automated and personalized marketing programs to help Amazon customers in their shopping journeys worldwide. Come join us in our mission today! Key job responsibilities As an Applied Scientist on the team, you will lead the roadmap and strategy for applying science to solve customer problems in the automated marketing domain. This is an opportunity to come in on Day 0 and lead the science strategy of one of the most interesting problem spaces at Amazon - understanding the Amazon customer to build deeply personalized and adaptive messaging experiences. You will be part of a multidisciplinary team and play an active role in translating business and functional requirements into concrete deliverables. You will work closely with product management and the software development team to put solutions into production. You will apply your skills in areas such as deep learning and reinforcement learning while building scalable industrial systems. You will have a unique opportunity to produce and deliver models that help build best-in-class customer experiences and build systems that allow us to deploy these models to production with low latency and high throughput. We are open to hiring candidates to work out of one of the following locations: Seattle, WA, USA</p>



        

        

        

        
    </div><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>The Artificial General Intelligence (AGI) team is looking for a passionate, talented, and inventive Applied Scientist with a strong deep learning background, to help build industry-leading technology with multimodal systems. Key job responsibilities As an Applied Scientist with the AGI team, you will work with talented peers to develop novel algorithms and modeling techniques to advance the state of the art with multimodal systems. Your work will directly impact our customers in the form of products and services that make use of vision and language technology. You will leverage Amazon’s heterogeneous data sources and large-scale computing resources to accelerate development with multimodal Large Language Models (LLMs) and Generative Artificial Intelligence (Gen AI) in Computer Vision. About the team The AGI team has a mission to push the envelope with multimodal LLMs and Gen AI in Computer Vision, in order to provide the best-possible experience for our customers. We are open to hiring candidates to work out of one of the following locations: Seattle, WA, USA</p>



        

        

        

        
    </div><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>Economic Decision Science is a central science team working across a variety of topics in the EU Stores business and beyond. We work closely EU business leaders to drive change at Amazon. We focus on solving long-term, ambiguous and challenging problems, while providing advisory support to help solve short-term business pain points. Key topics include pricing, product selection, delivery speed, profitability, and customer experience. We tackle these issues by building novel econometric models, machine learning systems, and high-impact experiments which we integrate into business, financial, and system-level decision making. Our work is highly collaborative and we regularly partner with EU- and US-based interdisciplinary teams. We are looking for a Senior Economist who is able to provide structure around complex business problems, hone those complex problems into specific, scientific questions, and test those questions to generate insights. The ideal candidate will work with various science, engineering, operations and analytics teams to estimate models and algorithms on large scale data, design pilots and measure their impact, and transform successful prototypes into improved policies and programs at scale. If you have an entrepreneurial spirit, you know how to deliver results fast, and you have a deeply quantitative, highly innovative approach to solving problems, and long for the opportunity to build pioneering solutions to challenging problems, we want to talk to you. Key job responsibilities - Provide data-driven guidance and recommendations on strategic questions facing the EU Retail leadership - Scope, design and implement version-zero (V0) models and experiments to kickstart new initiatives, thinking, and drive system-level changes across Amazon - Build a long-term research agenda to understand, break down, and tackle the most stubborn and ambiguous business challenges - Influence business leaders and work closely with other scientists at Amazon to deliver measurable progress and change We are open to hiring candidates to work out of one of the following locations: London, GBR</p>



        

        

        

        
    </div><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>We’re working to improve shopping on Amazon using the conversational capabilities of LLMs, and are searching for pioneers who are passionate about technology, innovation, and customer experience, and are ready to make a lasting impact on the industry. You'll be working with talented scientists, engineers, across the breadth of Amazon Shopping and AGI to innovate on behalf of our customers. If you're fired up about being part of a dynamic, driven team, then this is your moment to join us on this exciting journey! We are open to hiring candidates to work out of one of the following locations: Seattle, WA, USA</p>



        

        

        

        
    </div><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>Amazon is looking for a passionate, talented, and inventive Applied Scientist with background in Natural Language Processing (NLP), Deep Learning, Generative AI (GenAI) to help build industry-leading technology in contact center. The ideal candidate should have a robust foundation in NLP and machine learning and a keen interest in advancing the field. The ideal candidate would also enjoy operating in dynamic environments, have the self-motivation to take on challenging problems to deliver big customer impact, and move fast to ship solutions and innovate along the development process. As part of our Transcribe science team in Amazon AWS AI, you will have the opportunity to build the next generation call center analytic solutions. You will work along side a supportive and collaborative team with a healthy mix of scientists, software engineers and language engineers to research and develop state-of-the-art technology for natural language processing. A day in the life AWS Utility Computing (UC) provides product innovations — from foundational services such as Amazon’s Simple Storage Service (S3) and Amazon Elastic Compute Cloud (EC2), to consistently released new product innovations that continue to set AWS’s services and features apart in the industry. As a member of the UC organization, you’ll support the development and management of Compute, Database, Storage, Internet of Things (Iot), Platform, and Productivity Apps services in AWS, including support for customers who require specialized security solutions for their cloud services. Diverse Experiences AWS values diverse experiences. Even if you do not meet all of the qualifications and skills listed in the job description, we encourage candidates to apply. If your career is just starting, hasn’t followed a traditional path, or includes alternative experiences, don’t let it stop you from applying. Why AWS? Amazon Web Services (AWS) is the world’s most comprehensive and broadly adopted cloud platform. We pioneered cloud computing and never stopped innovating — that’s why customers from the most successful startups to Global 500 companies trust our robust suite of products and services to power their businesses. Inclusive Team Culture Here at AWS, it’s in our nature to learn and be curious. Our employee-led affinity groups foster a culture of inclusion that empower us to be proud of our differences. Ongoing events and learning experiences, including our Conversations on Race and Ethnicity (CORE) and AmazeCon (gender diversity) conferences, inspire us to never stop embracing our uniqueness. Mentorship &amp; Career Growth We’re continuously raising our performance bar as we strive to become Earth’s Best Employer. That’s why you’ll find endless knowledge-sharing, mentorship and other career-advancing resources here to help you develop into a better-rounded professional. Work/Life Balance We value work-life harmony. Achieving success at work should never come at the expense of sacrifices at home, which is why we strive for flexibility as part of our working culture. When we feel supported in the workplace and at home, there’s nothing we can’t achieve in the cloud. Hybrid Work We value innovation and recognize this sometimes requires uninterrupted time to focus on a build. We also value in-person collaboration and time spent face-to-face. Our team affords employees options to work in the office every day or in a flexible, hybrid work model near one of our U.S. Amazon offices. We are open to hiring candidates to work out of one of the following locations: Bellevue, WA, USA | Seattle, WA, USA</p>



        

        

        

        
    </div><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>The Automated Reasoning Group in AWS Platform is looking for an Applied Scientist with experience in building scalable solver solutions that delight customers. You will be part of a world-class team building the next generation of automated reasoning tools and services. AWS has the most services and more features within those services, than any other cloud provider–from infrastructure technologies like compute, storage, and databases–to emerging technologies, such as machine learning and artificial intelligence, data lakes and analytics, and Internet of Things. You will apply your knowledge to propose solutions, create software prototypes, and move prototypes into production systems using modern software development tools and methodologies. In addition, you will support and scale your solutions to meet the ever-growing demand of customer use. You will use your strong verbal and written communication skills, are self-driven and own the delivery of high quality results in a fast-paced environment. Each day, hundreds of thousands of developers make billions of transactions worldwide on AWS. They harness the power of the cloud to enable innovative applications, websites, and businesses. Using automated reasoning technology and mathematical proofs, AWS allows customers to answer questions about security, availability, durability, and functional correctness. We call this provable security, absolute assurance in security of the cloud and in the cloud. See https://aws.amazon.com/security/provable-security/ As an Applied Scientist in AWS Platform, you will play a pivotal role in shaping the definition, vision, design, roadmap and development of product features from beginning to end. You will: - Define and implement new solver applications that are scalable and efficient approaches to difficult problems - Apply software engineering best practices to ensure a high standard of quality for all team deliverables - Work in an agile, startup-like development environment, where you are always working on the most important stuff - Deliver high-quality scientific artifacts - Work with the team to define new interfaces that lower the barrier of adoption for automated reasoning solvers - Work with the team to help drive business decisions The AWS Platform is the glue that holds the AWS ecosystem together. From identity features such as access management and sign on, cryptography, console, builder &amp; developer tools, to projects like automating all of our contractual billing systems, AWS Platform is always innovating with the customer in mind. The AWS Platform team sustains over 750 million transactions per second. Learn and Be Curious. We have a formal mentor search application that lets you find a mentor that works best for you based on location, job family, job level etc. Your manager can also help you find a mentor or two, because two is better than one. In addition to formal mentors, we work and train together so that we are always learning from one another, and we celebrate and support the career progression of our team members. Inclusion and Diversity. Our team is diverse! We drive towards an inclusive culture and work environment. We are intentional about attracting, developing, and retaining amazing talent from diverse backgrounds. Team members are active in Amazon’s 10+ affinity groups, sometimes known as employee resource groups, which bring employees together across businesses and locations around the world. These range from groups such as the Black Employee Network, Latinos at Amazon, Indigenous at Amazon, Families at Amazon, Amazon Women and Engineering, LGBTQ+, Warriors at Amazon (Military), Amazon People With Disabilities, and more. Key job responsibilities Work closely with internal and external users on defining and extending application domains. Tune solver performance for application-specific demands. Identify new opportunities for solver deployment. About the team Solver science is a talented team of scientists from around the world. Expertise areas include solver theory, performance, implementation, and applications. Diverse Experiences AWS values diverse experiences. Even if you do not meet all of the qualifications and skills listed in the job description, we encourage candidates to apply. If your career is just starting, hasn’t followed a traditional path, or includes alternative experiences, don’t let it stop you from applying. Why AWS? Amazon Web Services (AWS) is the world’s most comprehensive and broadly adopted cloud platform. We pioneered cloud computing and never stopped innovating — that’s why customers from the most successful startups to Global 500 companies trust our robust suite of products and services to power their businesses. Inclusive Team Culture Here at AWS, it’s in our nature to learn and be curious. Our employee-led affinity groups foster a culture of inclusion that empower us to be proud of our differences. Ongoing events and learning experiences, including our Conversations on Race and Ethnicity (CORE) and AmazeCon (gender diversity) conferences, inspire us to never stop embracing our uniqueness. Mentorship &amp; Career Growth We’re continuously raising our performance bar as we strive to become Earth’s Best Employer. That’s why you’ll find endless knowledge-sharing, mentorship and other career-advancing resources here to help you develop into a better-rounded professional. Work/Life Balance We value work-life harmony. Achieving success at work should never come at the expense of sacrifices at home, which is why we strive for flexibility as part of our working culture. When we feel supported in the workplace and at home, there’s nothing we can’t achieve in the cloud. Hybrid Work We value innovation and recognize this sometimes requires uninterrupted time to focus on a build. We also value in-person collaboration and time spent face-to-face. Our team affords employees options to work in the office every day or in a flexible, hybrid work model near one of our U.S. Amazon offices. We are open to hiring candidates to work out of one of the following locations: Portland, OR, USA | Seattle, WA, USA</p>



        

        

        

        
    </div><div data-no-media="" data-image-align="top">
        
            
        

        

        
    <p>Amazon Search JP builds features powering product search on the Amazon JP shopping site and expands the innovations to world wide. As an Applied Scientist on this growing team, you will take on a key role in improving the NLP and ranking capabilities of the Amazon product search service. Our ultimate goal is to help customers find the products they are searching for, and discover new products they would be interested in. We do so by developing NLP components that cover a wide range of languages and systems. As an Applied Scientist for Search JP, you will design, implement and deliver search features on Amazon site, helping millions of customers every day to find quickly what they are looking for. You will propose innovation in NLP and IR to build ML models trained on terabytes of product and traffic data, which are evaluated using both offline metrics as well as online metrics from A/B testing. You will then integrate these models into the production search engine that serves customers, closing the loop through data, modeling, application, and customer feedback. The chosen approaches for model architecture will balance business-defined performance metrics with the needs of millisecond response times. Key job responsibilities - Designing and implementing new features and machine learned models, including the application of state-of-art deep learning to solve search matching, ranking and Search suggestion problems. - Analyzing data and metrics relevant to the search experiences. - Working with teams worldwide on global projects. Your benefits include: - Working on a high-impact, high-visibility product, with your work improving the experience of millions of customers - The opportunity to use (and innovate) state-of-the-art ML methods to solve real-world problems with tangible customer impact - Being part of a growing team where you can influence the team's mission, direction, and how we achieve our goals We are open to hiring candidates to work out of one of the following locations: Beijing, 11, CHN | Shanghai, 31, CHN</p>



        

        

        

        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[We have 4 days to contest KYC being required by internet services (475 pts)]]></title>
            <link>https://www.federalregister.gov/documents/2024/01/29/2024-01580/taking-additional-steps-to-address-the-national-emergency-with-respect-to-significant-malicious</link>
            <guid>40158752</guid>
            <pubDate>Thu, 25 Apr 2024 15:31:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.federalregister.gov/documents/2024/01/29/2024-01580/taking-additional-steps-to-address-the-national-emergency-with-respect-to-significant-malicious">https://www.federalregister.gov/documents/2024/01/29/2024-01580/taking-additional-steps-to-address-the-national-emergency-with-respect-to-significant-malicious</a>, See on <a href="https://news.ycombinator.com/item?id=40158752">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">
        <h3>Request Access</h3>
        

        <p>
  Due to aggressive automated scraping of FederalRegister.gov and eCFR.gov, programmatic access to these sites is limited to access to our extensive developer APIs.
</p>

<p>
  If you are human user receiving this message, we can add your IP address to a set of IPs that can access FederalRegister.gov &amp; eCFR.gov; complete the CAPTCHA (bot test) below and click "Request Access". This process will be necessary for each IP address you wish to access the site from, requests are valid for approximately one quarter (three months) after which the process may need to be repeated.
</p>

<form action="/request" method="post">
  

          

  
</form>

<p>
  <em>An official website of the United States government.</em>
</p>

<p>
  If you want to request a wider IP range, first request access for your current IP, and then use the "Site Feedback" button found in the lower left-hand side to make the request.
</p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Launch HN: Nango (YC W23) – Source-available unified API (169 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=40158481</link>
            <guid>40158481</guid>
            <pubDate>Thu, 25 Apr 2024 15:09:02 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=40158481">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="40158481">
      <td><span></span></td>      <td><center><a id="up_40158481" href="https://news.ycombinator.com/vote?id=40158481&amp;how=up&amp;goto=item%3Fid%3D40158481"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=40158481">Launch HN: Nango (YC W23) – Source-available unified API</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_40158481">107 points</span> by <a href="https://news.ycombinator.com/user?id=rguldener">rguldener</a> <span title="2024-04-25T15:09:02"><a href="https://news.ycombinator.com/item?id=40158481">3 hours ago</a></span> <span id="unv_40158481"></span> | <a href="https://news.ycombinator.com/hide?id=40158481&amp;goto=item%3Fid%3D40158481">hide</a> | <a href="https://hn.algolia.com/?query=Launch%20HN%3A%20Nango%20(YC%20W23)%20%E2%80%93%20Source-available%20unified%20API&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=40158481&amp;auth=3e790d79d449d3b4c831cdedc309e0340089c37e">favorite</a> | <a href="https://news.ycombinator.com/item?id=40158481">59&nbsp;comments</a>        </span>
              </td></tr>
    <tr></tr><tr><td colspan="2"></td><td><div><p>Hey everyone, we are Bastien and Robin from Nango (<a href="https://www.nango.dev/">https://www.nango.dev</a>). We take care of the annoyances of external APIs (167 and counting) so you can quickly build custom integrations for your SaaS, while retaining full control over how they work.
2 min demo video: <a href="https://www.loom.com/share/d04c67b47e284e86b91b4b99fba548ec" rel="nofollow">https://www.loom.com/share/d04c67b47e284e86b91b4b99fba548ec</a></p><p>SaaS engineering teams face a tough choice: they can build each integration in-house from scratch, which gives them full control but takes a lot of time and maintenance effort. Or they can use pre-built solutions, which are fast and easy but less flexible and might not fulfill all customer needs.</p><p>Nango combines the best of both worlds. We let you quickly ship custom integrations without building complex infrastructure or diving deep into the quirks of each API. You control the business logic, data models, and customer-specific configurations, like custom field mappings. We handle (O)Auth and run your integrations reliably in production.</p><p>Under the hood, your integrations run as typescript “lambdas” on Nango. A typical integration has 3-5 lambdas of 20-50 lines of code each. These lambdas live inside your git repo, are version-controlled with the rest of your app, and get deployed to Nango with a CLI (<a href="https://docs.nango.dev/understand/core-concepts">https://docs.nango.dev/understand/core-concepts</a>).</p><p>Our runtime has a built-in scheduler for continuous background syncs, monitoring to know if your integrations run as expected, detailed logging of everything that happens in Nango, and pre-built infrastructure to deal with (O)auth, retries, rate-limit handling, webhook floods, data caching, de-duplication, etc. More here: <a href="https://docs.nango.dev/understand/architecture">https://docs.nango.dev/understand/architecture</a></p><p>We have found that ChatGPT and Copilot let you build integrations on Nango very fast without having to learn each API’s intricacies. LLMs are great at figuring out which endpoint to use, what parameters it takes, etc. Paired with our runtime, this lets you build complex, high-scale integrations in hours instead of weeks.</p><p>We’ve put a ton of effort into dealing with API complexities, so you don’t have to. Even integrations that looked simple at first ended up forcing us to extend our infra to deal with their quirks and gotchas.</p><p>For example, we had to figure out 100+ different OAuth implementations (see <a href="https://www.nango.dev/blog/why-is-oauth-still-hard">https://www.nango.dev/blog/why-is-oauth-still-hard</a> and <a href="https://news.ycombinator.com/item?id=35713518">https://news.ycombinator.com/item?id=35713518</a>). We had to deal with a half-dozen non-standard auth methods (Github apps, Stripe apps, Netsuite, etc.), expiring webhooks, ways to deal with data dependencies, weird pagination methods, API keys that change with every API call, dozens of different ways to register for webhooks, etc. It’s a constantly moving target, but it is a challenge we have come to love, and we think the approach makes sense: we specialize in finicky details that vary from API to API—you specialize in making your product great and offering more integrations to your users.</p><p>Last but not least, Nango is open source (<a href="https://github.com/NangoHQ/nango">https://github.com/NangoHQ/nango</a>) under the ELv2 license (allows most use cases, except for direct copy-cats). Anybody can contribute new APIs &amp; share their integration templates with the community.</p><p>The fastest way to see Nango in action is with our interactive demo here (no signup required): <a href="https://app.nango.dev/hn-demo">https://app.nango.dev/hn-demo</a></p><p>Or take a look at our docs: <a href="https://docs.nango.dev/">https://docs.nango.dev</a></p><p>We would love to hear your feedback and look forward to the comments!</p></div></td></tr>        <tr></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ex-athletic director arrested for framing principal with AI-generated voice (182 pts)]]></title>
            <link>https://www.thebaltimorebanner.com/education/k-12-schools/eric-eiswert-ai-audio-baltimore-county-YBJNJAS6OZEE5OQVF5LFOFYN6M/</link>
            <guid>40158183</guid>
            <pubDate>Thu, 25 Apr 2024 14:43:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thebaltimorebanner.com/education/k-12-schools/eric-eiswert-ai-audio-baltimore-county-YBJNJAS6OZEE5OQVF5LFOFYN6M/">https://www.thebaltimorebanner.com/education/k-12-schools/eric-eiswert-ai-audio-baltimore-county-YBJNJAS6OZEE5OQVF5LFOFYN6M/</a>, See on <a href="https://news.ycombinator.com/item?id=40158183">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Baltimore County Police arrested<b> </b>Pikesville High School’s former athletic director Thursday morning and charged him with using artificial intelligence to impersonate Principal Eric Eiswert, leading the public to believe Eiswert made <a href="https://www.thebaltimorebanner.com/education/k-12-schools/pikesville-high-principal-eric-eiswert-NT7K7N4K6RDEJNL5Z7ULTEG7VY/" target="_blank">racist and antisemitic comments</a> behind closed doors.</p><p>Dazhon Darien, 31, was charged with disrupting school activities, after investigators determined Darien faked Eiswert’s voice and circulated the audio on social media in January, according to the Baltimore County State’s Attorney’s Office.<b> </b>Darien’s nickname, DJ, was among the names mentioned in the audio clips he allegedly faked.</p><p>“The audio clip ... had profound repercussions,” police wrote in charging documents. “It not only led to Eiswert’s temporary removal from the school but also triggered a wave of hate-filled messages on social media and numerous calls to the school. The recording also caused significant disruptions for the PHS staff and students.”</p><p>He is also charged with theft and retaliating against a witness, related to alleged illicit payments he made to a school athletics coach, as well as stalking, prosecutors said.</p><p>Baltimore County Police Chief Robert McCullough, County Executive Johnny Olszewski, and School Superintendent Myriam Rogers announced a 1:30 pm press conference to discuss the case.</p><p>Eiswert’s voice, which police and <a href="https://www.thebaltimorebanner.com/education/k-12-schools/eric-eiswert-ai-deepfake-YUNO6ITYM5FWZPQAE24RIBV5CQ/" target="_blank">AI experts believe was simulated</a>, made disparaging comments toward Black students and the surrounding Jewish community, was widely circulated on social media.</p><div id="blueconic--fallback"><p><h3>Read More</h3></p></div><p>Questions about the audio’s authenticity quickly followed. Police wrote in charging documents that Darien had accessed the school’s network on multiple occasions in December and January searching for OpenAI tools, and used “Large Language Models” that practice “deep learning, which involves pulling in vast amounts of data from various sources on the internet, can recognize text inputted by the user, and produce conversational results.” They also connected Darien to an email account that had distributed the recording.</p><p>Many current and former students <a href="https://www.thebaltimorebanner.com/education/k-12-schools/pikesville-high-principal-eric-eiswert-recording-ai-DZ6ZURS3Y5F7HEQMMGBH244Y3E/" target="_blank">believed Eiswert was responsible</a> for the offensive remarks, while former colleagues denounced the audio and defended Eiswert’s character. Eiswert himself has denied making those comments and said the comments do not align with his views.</p><p>The audio, posted to the popular Instagram account<b> </b><a href="https://www.instagram.com/reel/C2NEEDrMo8_/?igsh=MTYwZWE4MnpxdDFvbA%3D%3D" target="_blank">murder_ink_bmore</a>, prompted a Baltimore County Public Schools and Baltimore County Police investigation. Eiswert has not been working in the school since the investigation began.</p><p>The voice refers to “ungrateful Black kids who can’t test their way out of a paper bag” and questions how hard it is to get those students to meet grade-level expectations. The speaker<b> </b>uses names of people who appear to be staff members and says they should not have been hired, and that<b> </b>he should get rid of another person “one way or another.”</p><p>“And if I have to get one more complaint from one more Jew in this community, I’m going to join the other side,” the voice said.</p><p>Darien was being investigated as of December in a theft investigation that had been initiated by Eiswert. Police say Darien had authorized a $1,916 payment to the school’s junior varsity basketball coach, who was also his roommate, under the pretense that he was an assistant girls soccer coach. He was not, school officials said. Eiswert determined that Darien had submitted the payment to the school payroll system, bypassing proper procedures. Darien had been notified of the investigation, police said.</p><p>Police say the clip was received by three teachers the night before it went viral. The first was Darien; a third said she received the email and then got a call from Darien and teacher Shaena Ravenell telling her to check her email. Ravenell told police that she had forwarded the email to a student’s cell phone, “who she knew would rapidly spread the message around various social media outlets and throughout the school,” and also sent it to the media and the NAACP, police said.</p><p>She did not mention receiving it from Darien until confronted about his involvement. Ravenell has not been charged with a crime and could not immediately be reached for comment.</p><p>Rogers, the superintendent, in January called the comments “disturbing” and “highly offensive and inappropriate statements about African American students, Pikesville High School staff, and Pikesville’s Jewish community.”</p><p>Billy Burke, head of the Council of Administrative &amp; Supervisory Employee, the union that represents Eiswert, was the only official to suggest the audio was AI-generated.</p><p>Burke said he was disappointed in the public’s assumption of Eiswert’s guilt. At a January school board meeting, he said the principal needed police presence at his home because he and his family have been harassed and threatened. Burke had also received harassing emails, he said at the time.</p><p>Police said the school’s front desk staff was “inundated with phone calls from parents and students expressing concern and disparaging remarks toward school staff and administrators.” The flood of calls made it difficult to field phone calls from parents trying to make arrangements for their children and other school functions, officials told police.</p><p>“The school leadership expressed that staff did not feel safe, which required an increase in police presence at the school to address safety concerns and fears,” police said.</p><p>Teachers, under the impression the recording was authentic, “expressed fears that recording devices could have been planted in various places in the school,” police said.</p><p>“The recording’s release deeply affected the trust between teachers and the administration,” police said. “One individual shared that they fielded sensitive phone calls in their vehicle in the parking lot instead of speaking in school.”</p><p>Experts in detecting audio and video fakes told The Banner in March that there was <a href="https://www.thebaltimorebanner.com/education/k-12-schools/eric-eiswert-ai-deepfake-YUNO6ITYM5FWZPQAE24RIBV5CQ/" target="_blank">overwhelming evidence</a> the voice is AI-generated. They noted its flat tone, unusually clean background sounds and lack of consistent breathing sounds or pauses as hallmarks of AI. They also ran the audio through several different AI-detection techniques, which consistently concluded it was a fake, though they could not be 100% sure.</p><p>AI voice-generation tools are now widely available online, and a single minute’s recording of someone’s voice can be enough to simulate it with a $5-a-month AI tool, the <a href="https://www.niemanlab.org/2024/02/with-elections-looming-worldwide-heres-how-to-identify-and-investigate-ai-audio-deepfakes/" target="_blank">Nieman Journalism Lab reported</a> in February.</p><p>There are few regulations to prevent AI imitations, called deepfakes, and few perpetrators are prosecuted.</p><div id="article_eoa_container"><p><h3>More From The Banner</h3></p></div></div></div>]]></description>
        </item>
    </channel>
</rss>