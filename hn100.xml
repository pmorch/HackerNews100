<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 24 May 2025 18:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Show HN: Rotary Phone Dial Linux Kernel Driver (213 pts)]]></title>
            <link>https://gitlab.com/sephalon/rotary_dial_kmod</link>
            <guid>44080803</guid>
            <pubDate>Sat, 24 May 2025 13:02:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gitlab.com/sephalon/rotary_dial_kmod">https://gitlab.com/sephalon/rotary_dial_kmod</a>, See on <a href="https://news.ycombinator.com/item?id=44080803">Hacker News</a></p>
<div id="readability-page-1" class="page">





<header data-testid="navbar">
<a href="#content-body">Skip to content</a>
<div>
<nav aria-label="Explore GitLab">
<div>
<span>GitLab</span>
<a title="Homepage" id="logo" aria-label="Homepage" data-track-label="main_navigation" data-track-action="click_gitlab_logo_link" data-track-property="navigation_top" href="https://gitlab.com/"><svg aria-hidden="true" role="img" width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="m24.507 9.5-.034-.09L21.082.562a.896.896 0 0 0-1.694.091l-2.29 7.01H7.825L5.535.653a.898.898 0 0 0-1.694-.09L.451 9.411.416 9.5a6.297 6.297 0 0 0 2.09 7.278l.012.01.03.022 5.16 3.867 2.56 1.935 1.554 1.176a1.051 1.051 0 0 0 1.268 0l1.555-1.176 2.56-1.935 5.197-3.89.014-.01A6.297 6.297 0 0 0 24.507 9.5Z" fill="#E24329"></path>
  <path d="m24.507 9.5-.034-.09a11.44 11.44 0 0 0-4.56 2.051l-7.447 5.632 4.742 3.584 5.197-3.89.014-.01A6.297 6.297 0 0 0 24.507 9.5Z" fill="#FC6D26"></path>
  <path d="m7.707 20.677 2.56 1.935 1.555 1.176a1.051 1.051 0 0 0 1.268 0l1.555-1.176 2.56-1.935-4.743-3.584-4.755 3.584Z" fill="#FCA326"></path>
  <path d="M5.01 11.461a11.43 11.43 0 0 0-4.56-2.05L.416 9.5a6.297 6.297 0 0 0 2.09 7.278l.012.01.03.022 5.16 3.867 4.745-3.584-7.444-5.632Z" fill="#FC6D26"></path>
</svg>

</a></div>
<ul>
<li>

<div>
<ul>
<li>
<a href="https://about.gitlab.com/why-gitlab">Why GitLab
</a></li>
<li>
<a href="https://about.gitlab.com/pricing">Pricing
</a></li>
<li>
<a href="https://about.gitlab.com/sales">Contact Sales
</a></li>
<li>
<a href="https://gitlab.com/explore">Explore</a>
</li>
</ul>
</div>
</li>
<li>
<a href="https://about.gitlab.com/why-gitlab">Why GitLab
</a></li>
<li>
<a href="https://about.gitlab.com/pricing">Pricing
</a></li>
<li>
<a href="https://about.gitlab.com/sales">Contact Sales
</a></li>
<li>
<a href="https://gitlab.com/explore">Explore</a>
</li>
</ul>
<ul>
<li>
<a href="https://gitlab.com/users/sign_in?redirect_to_referer=yes">Sign in</a>
</li>
<li>
<a href="https://gitlab.com/users/sign_up"><span>
Get free trial

</span>

</a></li>
</ul>
</nav>
</div>
</header>

<div>


<div data-testid="top-bar">
<div data-testid="breadcrumb-links" id="js-vue-page-breadcrumbs-wrapper">


</div>
<div>





</div>
</div>

<div>
<main id="content-body" itemscope="" itemtype="http://schema.org/SoftwareSourceCode">











<header>
<div>
<div>
<div alt="rotary_dial_kmod" itemprop="image">
R
</div>

<h2 data-testid="project-name-content" itemprop="name">
rotary_dial_kmod


</h2>
</div>

</div>

</header>


<div>

<div data-blame-per-page="1000" id="tree-holder">

<div role="status" data-history-link="/sephalon/rotary_dial_kmod/-/commits/master" data-ref-type="heads" id="js-last-commit"><span aria-hidden=""></span><span>Loading</span>
</div>

</div>
</div>

</main>
</div>


</div>








</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Hong Kong's Famous Bamboo Scaffolding Hangs on (For Now) (102 pts)]]></title>
            <link>https://www.nytimes.com/2025/05/24/world/asia/hongkong-bamboo-scaffolding.html</link>
            <guid>44080549</guid>
            <pubDate>Sat, 24 May 2025 12:08:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2025/05/24/world/asia/hongkong-bamboo-scaffolding.html">https://www.nytimes.com/2025/05/24/world/asia/hongkong-bamboo-scaffolding.html</a>, See on <a href="https://news.ycombinator.com/item?id=44080549">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2025/05/24/world/asia/hongkong-bamboo-scaffolding.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[The Xenon Death Flash: How a Camera Nearly Killed the Raspberry Pi 2 (113 pts)]]></title>
            <link>https://magnus919.com/2025/05/the-xenon-death-flash-how-a-camera-nearly-killed-the-raspberry-pi-2/</link>
            <guid>44080533</guid>
            <pubDate>Sat, 24 May 2025 12:06:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://magnus919.com/2025/05/the-xenon-death-flash-how-a-camera-nearly-killed-the-raspberry-pi-2/">https://magnus919.com/2025/05/the-xenon-death-flash-how-a-camera-nearly-killed-the-raspberry-pi-2/</a>, See on <a href="https://news.ycombinator.com/item?id=44080533">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I’ve seen plenty of weird computer bugs in my time, but nothing quite like what Peter Onion discovered in February 2015. He was proudly photographing his brand new Raspberry Pi 2 when something bizarre happened—every time his camera flash went off, his Pi instantly powered down.</p><p>At first, Peter thought it was just a coincidence. But after it happened three times in a row, he realized he’d stumbled onto something unprecedented. <a href="https://www.raspberrypi.com/news/xenon-death-flash-a-free-physics-lesson/">His post to the Raspberry Pi forums</a> with the innocent title “Why is the PI2 camera-shy?” would soon reveal one of the strangest hardware vulnerabilities in modern computing history.</p><p>Peter Onion wasn’t just any user—he was a veteran of the Raspberry Pi community and a regular at Raspberry Jams in Cambridge and Bletchley. When he reported that <a href="https://forums.theregister.com/forum/all/2015/02/08/raspberry_pi_2_camera_flash_glitch/">taking flash photos caused his Pi 2 to crash</a>, the community took notice.</p><p>What happened next was like watching a crowd-sourced CSI episode unfold in real time. Forum users immediately began experimenting with different cameras and light sources. User “jdb” made a crucial discovery: his Samsung Note2 with LED flash caused no problems, but his Samsung K Zoom with a xenon flash reliably crashed the Pi 2.</p><p>This distinction between LED and xenon technology became the first major clue. The community had found their smoking gun—but they still needed to figure out why.</p><h2 id="the-hunt-for-the-vulnerable-component">The Hunt for the Vulnerable Component</h2><p>The real detective work began when users started systematically testing which part of the Pi 2 was actually vulnerable. The initial assumption was that the main processor chip might be the culprit, but covering it with a blob of Blu-Tack (yes, really) didn’t solve the problem.</p><p>Then someone tried flipping the Pi upside down. Suddenly, it was immune to flash photography. This proved the vulnerability was purely optical—light had to physically reach a specific component on the board.</p><p>Through methodical testing, <a href="https://redrobe.com/mike/?p=607">the community isolated the problem to the U16 chip</a>—a small power supply regulator located between the USB connector and HDMI port. When they covered just this tiny component with Blu-Tack, the crashes stopped completely.</p><p>But what made this particular chip so sensitive to light?</p><h2 id="the-physics-behind-the-xenon-death-flash">The Physics Behind the “Xenon Death Flash”</h2><p>The answer lay in modern semiconductor packaging. The U16 chip used something called Wafer-Level Chip Scale Packaging (WL-CSP), which is exactly what it sounds like—<a href="https://resources.pcb.cadence.com/blog/jbj-wafer-level-chip-scale-packaging-what-is-that">a bare silicon die with solder balls attached directly to the circuit board</a>. Unlike traditional chips that are fully encapsulated in opaque plastic, WL-CSP chips prioritize miniaturization over protection.</p><p>This exposed silicon became the Pi 2’s Achilles’ heel. When hit by high-intensity light, the photoelectric effect kicked in—the same phenomenon Einstein won a Nobel Prize for explaining. <a href="https://www.raspberrypi.com/news/xenon-death-flash-a-free-physics-lesson/">High-energy photons striking the semiconductor created unexpected electron flows</a>, disrupting the voltage regulation circuitry and causing an immediate shutdown.</p><p>The intensity threshold was crucial. Regular LED camera flashes didn’t produce enough photons, but xenon flashes and laser pointers packed sufficient punch to trigger the malfunction. Even more interesting, the effect required silicon’s specific bandgap energy—meaning infrared and visible light could potentially cause problems, but only at extreme intensities.</p><h2 id="this-wasnt-actually-unprecedented">This Wasn’t Actually Unprecedented</h2><p>While the Raspberry Pi incident captured headlines, similar optical interference problems had been lurking in the semiconductor industry for years. <a href="https://www.edn.com/xenon-death-flash-for-the-raspberry-pi-2/">An engineer at EDN Network revealed</a> that his company had encountered the exact same issue twelve years earlier with a CSP amplifier for a cell phone prototype. The phone’s own camera flash would cause the amplifier to spike when light penetrated the chip packaging.</p><p>Even more dramatic was a 1997 incident at the Haddam Neck nuclear plant in Connecticut. <a href="https://allthingsnuclear.org/dlochbaum/remote-control-at-nuclear-power-plants/">A training department member took a flash photograph of a fire detection panel</a>, and the camera flash tricked an EPROM chip into thinking there was a fire. Within seconds, the Halon fire suppression system activated, forcing operators to abandon the control room for 35 minutes while the gas cleared.</p><p>These incidents revealed a broader truth: as semiconductors became smaller and more exposed, they also became more vulnerable to optical interference that traditional testing never considered.</p><h2 id="the-fixes-from-blu-tack-to-better-design">The Fixes: From Blu-Tack to Better Design</h2><p>The immediate solution was charmingly low-tech. The Raspberry Pi Foundation recommended covering the U16 chip with opaque materials—<a href="https://www.theregister.com/2015/02/08/raspberry_pi_2_camera_flash_glitch/">Blu-Tack, electrical tape, or even putty</a> would do the trick. This worked because it blocked light from reaching the sensitive semiconductor while maintaining normal electrical operation.</p><p>But the real fix came with hardware revision 1.2 of the Pi 2, released later in 2015. Instead of just adding optical shielding, the Foundation implemented a completely different power management architecture using the BCM2837 system-on-chip (the same processor later used in the Pi 3). This eliminated the optical sensitivity entirely through better circuit design rather than band-aid solutions.</p><p>Testing confirmed that earlier Raspberry Pi models (A, B, A+, B+) had never been vulnerable to the “xenon death flash” effect, making this a uniquely Generation 2 problem that was both discovered and solved by the community.</p><h2 id="what-this-revealed-about-modern-electronics">What This Revealed About Modern Electronics</h2><p>The Raspberry Pi 2 vulnerability highlighted a fundamental tension in modern electronics design. The relentless push toward smaller, cheaper components had introduced failure modes that traditional testing methodologies simply didn’t consider. <a href="https://www.syncfusion.com/blogs/post/there-will-be-bugs">Standard electromagnetic compatibility testing covers radio interference</a>, but who thinks to test whether taking a photo will crash your computer?</p><p>The incident also demonstrated the hidden risks of chip-scale packaging. While WL-CSP technology enables the tiny, powerful devices we rely on today, <a href="https://en.wikipedia.org/wiki/Wafer-level_packaging">it essentially puts bare silicon dies directly onto circuit boards</a> with minimal protection. Cost and size benefits come at the expense of environmental robustness.</p><p>Most importantly, it showed how unconventional use cases could reveal vulnerabilities that lab testing missed. The specific combination of circumstances—a xenon flash camera pointed at an exposed power regulation chip—fell completely outside typical validation scenarios.</p><h2 id="the-legacy-of-an-adorable-bug">The Legacy of an “Adorable Bug”</h2><p>The Raspberry Pi Foundation handled the incident with remarkable transparency, <a href="https://www.raspberrypi.com/news/xenon-death-flash-a-free-physics-lesson/">calling it “the most adorable bug we’ve ever come across”</a> and turning it into a physics lesson about the photoelectric effect. This open approach contrasted sharply with typical corporate responses to hardware flaws and helped maintain community trust.</p><p>The vulnerability became a teaching tool in electronics courses, providing a tangible example of how fundamental physics principles affect real-world technology. Students could literally see the photoelectric effect in action by watching a computer crash when photographed.</p><p>More broadly, the incident contributed to increased industry awareness about optical interference in semiconductor design. While such specific vulnerabilities remain rare, the Pi 2 case demonstrated why comprehensive testing needs to consider increasingly unconventional attack vectors.</p><h2 id="lessons-for-todays-connected-world">Lessons for Today’s Connected World</h2><p>The Xenon Death Flash story feels almost quaint now—a simpler time when the biggest worry was whether taking a photo might crash your hobby computer. But it foreshadowed bigger concerns about hardware security and the unintended consequences of aggressive miniaturization.</p><p>Today’s devices pack even more functionality into even smaller packages, often using advanced packaging technologies that prioritize performance over protection. The Internet of Things has put embedded systems into every corner of our lives, many using similar cost-optimized designs that might harbor their own unexpected vulnerabilities.</p><p>The Pi 2 incident reminds us that the most interesting bugs often come from the intersection of unrelated technologies—in this case, photography and power regulation circuits. As our devices become more interconnected and our technology stack more complex, we should expect more such surprises.</p><p>The good news? When weird bugs do surface, communities like the Raspberry Pi forum show that collective problem-solving can be remarkably effective. Sometimes all it takes is enough people willing to stick Blu-Tack on circuit boards and see what happens.</p><p>And that’s probably the most important lesson of all: in a world of increasingly complex technology, a little curiosity and community collaboration can solve even the strangest problems.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DumPy: NumPy except it's OK if you're dum (112 pts)]]></title>
            <link>https://dynomight.net/dumpy/</link>
            <guid>44080181</guid>
            <pubDate>Sat, 24 May 2025 10:49:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dynomight.net/dumpy/">https://dynomight.net/dumpy/</a>, See on <a href="https://news.ycombinator.com/item?id=44080181">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
    
  <section>
    <p>What I want from an array language is:</p>

<ol>
  <li>Don’t make me think.</li>
  <li>Run fast on GPUs.</li>
  <li>Really, do not make me think.</li>
  <li>Do <em>not</em>.</li>
</ol>

<p>I say NumPy misses on three of these. So I’d like to propose a “fix” that—I claim—eliminates 90% of unnecessary thinking, with no loss of power. It would also fix all the things based on NumPy, for example every machine learning library.</p>

<p>I know that sounds grandiose. Quite possibly you’re thinking that good-old dynomight has finally lost it. So I warn you now: My solution is utterly non-clever. If anything is clever here, it’s my single-minded rejection of cleverness.</p>

<p>To motivate the fix, let me give my story for how NumPy went wrong. It started as a nice little library for array operations and linear algebra. When everything has two or fewer dimensions, it’s great. But at some point, someone showed up with some higher-dimensional arrays. If loops were fast in Python, NumPy would have said, “Hello person with ≥3 dimensions, please call my ≤2 dimensional functions in a loop so I can stay nice and simple, xox, NumPy.”</p>

<p>But since loops are slow, NumPy instead took all the complexity that would <em>usually</em> be addressed with loops and pushed it down into individual functions. I think this was a disaster, because <em>every time</em> you see some function call like <code>np.func(A,B)</code>, you have to think:</p>

<ol>
  <li>OK, what shapes do all those arrays have?</li>
  <li>And what does <code>np.func</code> do when it sees those shapes?</li>
</ol>

<p>Different functions have different rules. Sometimes they’re bewildering. This means constantly thinking and constantly moving dimensions around to appease the whims of particular functions. It’s the <em>functions</em> that should be appeasing <em>your</em> whims!</p>

<p>Even simple-looking things like <code>A*B</code> or <code>A[B,C]</code> do quite different things depending on the starting shapes. And those starting shapes are often themselves the output of <em>previous</em> functions, so the complexity spirals.</p>

<p>Worst of all, if you write a new ≤2 dimensional function, then high-dimensional arrays are your problem. <em>You</em> need to decide what rules to obey, and then <em>you</em> need to re-write your function in a much more complex way to—</p>

<p><strong>Voice from the back</strong>: Python sucks! If you used a real language, loops would be fast! This problem is stupid!</p>

<p>That was a strong argument, ten years ago. But now everything is GPU, and GPUs hate loops. Today, array packages are cheerful interfaces that <em>look</em> like Python (or whatever) but are actually embedded languages that secretly compile everything into special GPU instructions that run on whole arrays in parallel. With big arrays, you need GPUs. So I think the speed of the host language doesn’t matter so much anymore.</p>

<p>Python’s slowness may have paradoxically turned out to be an <em>advantage</em>, since it forced everything to be designed to work without loops even before GPUs took over.</p>

<p>Still, thinking is bad, and NumPy makes me think, so <a href="https://dynomight.net/numpy/">I don’t like NumPy</a>.</p>

<h2 id="so-whats-the-fix">So what’s the fix?</h2>

<p>Here’s my extremely non-clever idea: Let’s just admit that loops were better. In high dimensions, no one has yet come up with a notation that beats loops and indices. So, let’s do this:</p>

<ol>
  <li>Bring back the syntax of loops and indices.</li>
  <li>But don’t actually <em>execute</em> the loops. Just take the syntax and secretly compile it into vectorized operations.</li>
  <li>Also, let’s get rid of all the insanity that’s been added to NumPy because loops were slow.</li>
</ol>

<p>That’s basically the whole idea. If you take those three bullet-points, you could probably re-derive everything I do below. I told you this wasn’t clever.</p>

<h2 id="what-does-it-look-like">What does it look like?</h2>

<p>Suppose that <code>X</code> and <code>Y</code> are 2D arrays, and <code>A</code> is a 4D array. And suppose you want to find a 2D array <code>Z</code> such that <code>Z<sub>ij</sub> = (Y<sub>j</sub>)<sup>T</sup> (A<sub>ij</sub>)<sup>-1</sup> X<sub>i</sub></code>. If you could write loops, this would be easy:</p>

<div><pre><code><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>Z</span> <span>=</span> <span>np</span><span>.</span><span>empty</span><span>((</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>],</span> <span>Y</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>]))</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>]):</span>
    <span>for</span> <span>j</span> <span>in</span> <span>range</span><span>(</span><span>Y</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>]):</span>
        <span>Z</span><span>[</span><span>i</span><span>,</span><span>j</span><span>]</span> <span>=</span> <span>Y</span><span>[</span><span>j</span><span>]</span> <span>@</span> <span>np</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>A</span><span>[</span><span>i</span><span>,</span><span>j</span><span>],</span> <span>X</span><span>[</span><span>i</span><span>])</span>
</code></pre></div>

<p>That’s not pretty. It’s not short or fast. But it <em>is</em> easy!</p>

<p>Meanwhile, how do you do this efficiently in NumPy? Like this:</p>

<div><pre><code><span>AiX</span> <span>=</span> <span>np</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>A</span><span>.</span><span>transpose</span><span>(</span><span>1</span><span>,</span><span>0</span><span>,</span><span>2</span><span>,</span><span>3</span><span>),</span>
                      <span>X</span><span>[</span><span>None</span><span>,...,</span><span>None</span><span>])[...,</span><span>0</span><span>]</span>
<span>Z</span> <span>=</span> <span>np</span><span>.</span><span>sum</span><span>(</span><span>AiX</span> <span>*</span> <span>Y</span><span>[:,</span><span>None</span><span>],</span> <span>axis</span><span>=-</span><span>1</span><span>).</span><span>T</span>
</code></pre></div>

<p>If you’re not a NumPy otaku, that may look like outsider art. Rest assured, it looks like that to me too, and I just wrote it. Why is it so confusing? At a high level, it’s because <code>np.linalg.solve</code> and <code>np.sum</code> and multiplication (<code>*</code>) have complicated rules and weren’t designed to work together to solve this particular problem nicely. That would be impossible, because there are an infinite number of problems. So you need to mash the arrays around a lot to make those functions happy.</p>

<p>Without further ado, here’s how you solve this problem with <strong>DumPy</strong> (ostensibly <strong>D</strong>ynomight N<strong>umPy</strong>):</p>

<div><pre><code><span>import</span> <span>dumpy</span> <span>as</span> <span>dp</span>
<span>A</span> <span>=</span> <span>dp</span><span>.</span><span>Array</span><span>(</span><span>A</span><span>)</span>
<span>X</span> <span>=</span> <span>dp</span><span>.</span><span>Array</span><span>(</span><span>X</span><span>)</span>
<span>Y</span> <span>=</span> <span>dp</span><span>.</span><span>Array</span><span>(</span><span>Y</span><span>)</span>
<span>Z</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>Z</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>]</span> <span>=</span> <span>Y</span><span>[</span><span>'j'</span><span>,:]</span> <span>@</span> <span>dp</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>A</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>,:,:],</span> <span>X</span><span>[</span><span>'i'</span><span>,:])</span>
</code></pre></div>

<p>Yes! If you prefer, you can also use this equivalent syntax:</p>

<div><pre><code><span>Z</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>])</span> <span>as</span> <span>i</span><span>:</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>Y</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>])</span> <span>as</span> <span>j</span><span>:</span>
        <span>Z</span><span>[</span><span>i</span><span>,</span><span>j</span><span>]</span> <span>=</span> <span>Y</span><span>[</span><span>j</span><span>,:]</span> <span>@</span> <span>dp</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>A</span><span>[</span><span>i</span><span>,</span><span>j</span><span>,:,:],</span> <span>X</span><span>[</span><span>i</span><span>,:])</span>
</code></pre></div>

<p>Those are both fully vectorized. No loops are executed behind the scenes. They’ll run on a GPU if you have one.</p>

<h2 id="but-how">But how?</h2>

<p>While it looks magical, the way this actually works is fairly simple:</p>

<ol>
  <li>
    <p>If you index a DumPy array with a string (or a <code>dp.Range</code> object), it creates a special “mapped” array that pretends to have fewer dimensions.</p>
  </li>
  <li>
    <p>When a DumPy function is called (e.g. <code>dp.linalg.solve</code> or <code>dp.matmul</code> (called with <code>@</code>)), it checks if any of the arguments have mapped dimensions. If so, it automatically vectorizes the computation, matching up mapped dimensions that share labels.</p>
  </li>
  <li>
    <p>When you assign an array with “mapped” dimensions to a <code>dp.Slot</code>, it “unmaps” them into the positions you specify.</p>
  </li>
</ol>

<p>No evil meta-programming abstract syntax tree macro bytecode interception is needed. When you run this code:</p>

<div><pre><code><span>Z</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>Z</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>]</span> <span>=</span> <span>Y</span><span>[</span><span>'j'</span><span>,:]</span> <span>@</span> <span>dp</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>A</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>,:,:],</span> <span>X</span><span>[</span><span>'i'</span><span>,:])</span>
</code></pre></div>

<p>This is what happens behind the scenes:</p>

<div><pre><code><span>a</span> <span>=</span> <span>A</span><span>.</span><span>map_axes</span><span>([</span><span>0</span><span>,</span> <span>1</span><span>],</span> <span>[</span><span>'i'</span><span>,</span> <span>'j'</span><span>])</span>
<span>x</span> <span>=</span> <span>X</span><span>.</span><span>map_axes</span><span>([</span><span>0</span><span>],</span> <span>[</span><span>'i'</span><span>])</span>
<span>y</span> <span>=</span> <span>Y</span><span>.</span><span>map_axes</span><span>([</span><span>0</span><span>],</span> <span>[</span><span>'j'</span><span>])</span>
<span>z</span> <span>=</span> <span>y</span> <span>@</span> <span>dp</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>a</span><span>,</span> <span>x</span><span>)</span>
<span>Z</span> <span>=</span> <span>z</span><span>.</span><span>unmap</span><span>(</span><span>'i'</span><span>,</span><span>'j'</span><span>)</span>
</code></pre></div>

<details>
  <summary>
(Click here for a version with a million asserts and comments.)
</summary>

  <div><pre><code><span># first map A
</span><span>a</span> <span>=</span> <span>A</span><span>.</span><span>map_axes</span><span>([</span><span>0</span><span>,</span> <span>1</span><span>],</span> <span>[</span><span>'i'</span><span>,</span> <span>'j'</span><span>])</span>
<span>assert</span> <span>A</span><span>.</span><span>ndim</span> <span>==</span> <span>4</span>
<span>assert</span> <span>a</span><span>.</span><span>ndim</span> <span>==</span> <span>2</span>             <span># pretends to have fewer dims
</span><span>assert</span> <span>a</span><span>.</span><span>data</span><span>.</span><span>shape</span> <span>==</span> <span>A</span><span>.</span><span>shape</span>          <span># secret mapped data
</span><span>assert</span> <span>a</span><span>.</span><span>axes</span> <span>==</span> <span>(</span><span>'i'</span><span>,</span> <span>'j'</span><span>,</span> <span>None</span><span>,</span> <span>None</span><span>)</span> <span># secret mapped axes
</span><span>assert</span> <span>a</span><span>.</span><span>shape</span> <span>==</span> <span>(</span><span>a</span><span>.</span><span>data</span><span>.</span><span>shape</span><span>[</span><span>2</span><span>],</span> <span>a</span><span>.</span><span>data</span><span>.</span><span>shape</span><span>[</span><span>3</span><span>])</span>
                <span># shape determined by non-mapped (None) axes
</span>
<span># now map X
</span><span>x</span> <span>=</span> <span>X</span><span>.</span><span>map_axes</span><span>([</span><span>0</span><span>],</span> <span>[</span><span>'i'</span><span>])</span>
<span>assert</span> <span>X</span><span>.</span><span>ndim</span> <span>==</span> <span>2</span>
<span>assert</span> <span>x</span><span>.</span><span>ndim</span> <span>==</span> <span>1</span>
<span>assert</span> <span>x</span><span>.</span><span>data</span><span>.</span><span>shape</span> <span>==</span> <span>X</span><span>.</span><span>shape</span>
<span>assert</span> <span>x</span><span>.</span><span>axes</span> <span>==</span> <span>(</span><span>'i'</span><span>,</span> <span>None</span><span>)</span>
<span>assert</span> <span>x</span><span>.</span><span>shape</span> <span>==</span> <span>(</span><span>x</span><span>.</span><span>data</span><span>.</span><span>shape</span><span>[</span><span>1</span><span>],</span> <span>)</span>

<span># now map Y
</span><span>y</span> <span>=</span> <span>Y</span><span>.</span><span>map_axes</span><span>([</span><span>0</span><span>],</span> <span>[</span><span>'j'</span><span>])</span>
<span>assert</span> <span>Y</span><span>.</span><span>ndim</span> <span>==</span> <span>2</span>
<span>assert</span> <span>y</span><span>.</span><span>ndim</span> <span>==</span> <span>1</span>
<span>assert</span> <span>y</span><span>.</span><span>shape</span> <span>==</span> <span>(</span><span>Y</span><span>.</span><span>shape</span><span>[</span><span>1</span><span>],)</span>
<span>assert</span> <span>y</span><span>.</span><span>axes</span> <span>==</span> <span>(</span><span>'j'</span><span>,</span> <span>None</span><span>)</span>
<span>assert</span> <span>y</span><span>.</span><span>data</span><span>.</span><span>shape</span> <span>==</span> <span>Y</span><span>.</span><span>shape</span>
<span>assert</span> <span>y</span><span>.</span><span>shape</span> <span>==</span> <span>(</span><span>y</span><span>.</span><span>data</span><span>.</span><span>shape</span><span>[</span><span>1</span><span>],)</span>

<span># Actually do the computation. It happens that the 'j'
# dimension is stored first because its found first (in y).
# But you never need to think about that!
</span><span>z</span> <span>=</span> <span>y</span> <span>@</span> <span>dp</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>a</span><span>,</span> <span>x</span><span>)</span>
<span>assert</span> <span>z</span><span>.</span><span>ndim</span> <span>==</span> <span>0</span>
<span>assert</span> <span>z</span><span>.</span><span>shape</span> <span>==</span> <span>()</span>
<span>assert</span> <span>z</span><span>.</span><span>axes</span> <span>==</span> <span>(</span><span>'j'</span><span>,</span><span>'i'</span><span>)</span>
<span>assert</span> <span>z</span><span>.</span><span>data</span><span>.</span><span>shape</span> <span>==</span> <span>(</span><span>Y</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>],</span> <span>X</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>])</span>

<span># unmap the mapped axes
</span><span>Z</span> <span>=</span> <span>z</span><span>.</span><span>unmap</span><span>(</span><span>'i'</span><span>,</span><span>'j'</span><span>)</span>
<span>assert</span> <span>Z</span><span>.</span><span>ndim</span> <span>==</span> <span>2</span>
<span>assert</span> <span>Z</span><span>.</span><span>shape</span> <span>==</span> <span>(</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>],</span> <span>Y</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>])</span>
</code></pre></div>

</details>

<h2 id="wait-but-how">Wait, but <em>how</em>?</h2>

<p>It might seem like I’ve skipped the hard part. How does <code>dp.linalg.solve</code> know how to vectorize over any combination of input dimensions? Don’t I need to do that for every single function that DumPy includes? Isn’t that hard?</p>

<p>It <em>is</em> hard, but <a href="https://docs.jax.dev/en/latest/_autosummary/jax.vmap.html"><code>jax.vmap</code></a> did it already. This takes a function defined using (<a href="https://github.com/jax-ml/jax">JAX</a>’s version of) NumPy and vectorizes it over <em>any</em> set of input dimensions. DumPy relies on this to do all the actual vectorization. (If you prefer your <code>vmap</code> janky and broken, I heartily recommend PyTorch’s <a href="https://docs.pytorch.org/docs/stable/generated/torch.vmap.html"><code>torch.vmap</code></a>.)</p>

<p>But hold on. If <code>vmap</code> already exists, then why do we need DumPy? Here’s why:</p>

<div><pre><code><span>import</span> <span>jax</span>
<span>from</span> <span>jax</span> <span>import</span> <span>numpy</span> <span>as</span> <span>jnp</span>
<span>Z</span> <span>=</span> <span>jax</span><span>.</span><span>vmap</span><span>(</span>
        <span>jax</span><span>.</span><span>vmap</span><span>(</span>
            <span>lambda</span> <span>x</span><span>,</span> <span>y</span><span>,</span> <span>a</span><span>:</span> <span>y</span> <span>@</span> <span>jnp</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>a</span><span>,</span> <span>x</span><span>),</span>
            <span>in_axes</span><span>=</span><span>[</span><span>None</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>]</span>
        <span>),</span>
        <span>in_axes</span><span>=</span><span>[</span><span>0</span><span>,</span> <span>None</span><span>,</span> <span>0</span><span>]</span>
    <span>)(</span><span>X</span><span>,</span> <span>Y</span><span>,</span> <span>A</span><span>)</span>
</code></pre></div>

<p>That’s how you solve the same problem with <code>vmap</code>. (It’s also basically what DumPy does behind the scenes.)</p>

<p>I think <code>vmap</code> is one of the best parts of the NumPy ecosystem. I think the above code is genuinely better than the base NumPy version. But it still involves a lot of thinking! Why put <code>in_axes=[None, 0, 0]</code> in the inner <code>vmap</code> and <code>in_axes=[0, None, 0]</code> in the outer one? Why are all the axes <code>0</code> even though you need to vectorize over the second dimension of <code>A</code>? There are answers, but they require thinking. Loops and indices are better.</p>

<h2 id="a-tiny-bit-of-cleverness">A tiny bit of cleverness</h2>

<p>OK, I did do one thing that’s a <em>little</em> clever. Say you want to create a <a href="https://en.wikipedia.org/wiki/Hilbert_matrix">Hilbert matrix</a> with <code>H<sub>ij</sub> = 1/(1+i+j)</code>. In base NumPy you’d have to do this:</p>

<div><pre><code><span>X</span> <span>=</span> <span>1</span> <span>/</span> <span>(</span><span>1</span> <span>+</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>5</span><span>)[:,</span><span>None</span><span>]</span> <span>+</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>5</span><span>)[</span><span>None</span><span>,:])</span> <span># hurr?
</span></code></pre></div>

<p>In DumPy, you can just write:</p>

<div><pre><code><span>X</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>5</span><span>)</span> <span>as</span> <span>i</span><span>:</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>5</span><span>)</span> <span>as</span> <span>j</span><span>:</span>
        <span>X</span><span>[</span><span>i</span><span>,</span><span>j</span><span>]</span> <span>=</span> <span>1</span> <span>/</span> <span>(</span><span>i</span> <span>+</span> <span>j</span> <span>+</span> <span>1</span><span>)</span>
</code></pre></div>

<p>Yes! That works! It works because a <code>dp.Range</code> acts <em>both</em> like a string and like an array mapped along that string. So the above code is roughly equivalent to:</p>

<div><pre><code><span>I</span> <span>=</span> <span>dp</span><span>.</span><span>Array</span><span>([</span><span>0</span><span>,</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>])</span>
<span>J</span> <span>=</span> <span>dp</span><span>.</span><span>Array</span><span>([</span><span>0</span><span>,</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>])</span>
<span>X</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>X</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>]</span> <span>=</span> <span>1</span> <span>/</span> <span>(</span><span>1</span> <span>+</span> <span>I</span><span>[</span><span>'i'</span><span>]</span> <span>+</span> <span>J</span><span>[</span><span>'j'</span><span>])</span>
</code></pre></div>

<details>
  <summary>See? Still no magic.</summary>

  <p>In reality, the <code>dp.Range</code> choose random strings. (The class maintains a stack of active ranges to prevent collisions.) So in more detail, the above code becomes something like this:</p>

  <div><pre><code><span>I</span> <span>=</span> <span>dp</span><span>.</span><span>Array</span><span>([</span><span>0</span><span>,</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>])</span>
<span>J</span> <span>=</span> <span>dp</span><span>.</span><span>Array</span><span>([</span><span>0</span><span>,</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>])</span>
<span>i</span> <span>=</span> <span>I</span><span>.</span><span>map_axes</span><span>([</span><span>0</span><span>],</span><span>'range_EZaW'</span><span>)</span>
<span>j</span> <span>=</span> <span>J</span><span>.</span><span>map_axes</span><span>([</span><span>0</span><span>],</span><span>'range_ailw'</span><span>)</span>
<span>x</span> <span>=</span> <span>1</span> <span>/</span> <span>(</span><span>1</span> <span>+</span> <span>i</span> <span>+</span> <span>j</span><span>)</span> <span># vectorized
</span><span>X</span> <span>=</span> <span>x</span><span>.</span><span>unmap</span><span>(</span><span>'range_EZaW'</span><span>,</span><span>'range_ailw'</span><span>)</span>
</code></pre></div>
</details>

<h2 id="ok-but-is-it-actually-better">OK but is it actually better?</h2>

<p>To test if DumPy is actually better in practice, I took six problems of increasing complexity and implemented each of them using loops, Numpy, JAX (with <code>vmap</code>), and DumPy.</p>

<details>
  

  <p>Note that in these examples, I always assume the input arrays are in the class of the system being used. If you try running them, you’ll need to add some conversions with <code>np.array</code> / <code>jnp.array</code> / <code>dp.Array</code>.</p>

  <div><pre><code><span># loops
</span><span>H</span> <span>=</span> <span>np</span><span>.</span><span>empty</span><span>((</span><span>N</span><span>,</span> <span>N</span><span>))</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>N</span><span>):</span>
    <span>for</span> <span>j</span> <span>in</span> <span>range</span><span>(</span><span>N</span><span>):</span>
        <span>H</span><span>[</span><span>i</span><span>,</span> <span>j</span><span>]</span> <span>=</span> <span>1</span> <span>/</span> <span>(</span><span>i</span> <span>+</span> <span>j</span> <span>+</span> <span>1</span><span>)</span>

<span># NumPy
</span><span>i</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>N</span><span>)</span>
<span>j</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>N</span><span>)</span>
<span>H</span> <span>=</span> <span>1</span> <span>/</span> <span>(</span><span>i</span><span>[:,</span> <span>None</span><span>]</span> <span>+</span> <span>j</span><span>[</span><span>None</span><span>,</span> <span>:]</span> <span>+</span> <span>1</span><span>)</span>

<span># JAX
</span><span>indices</span> <span>=</span> <span>jnp</span><span>.</span><span>arange</span><span>(</span><span>N</span><span>)</span>
<span>H</span> <span>=</span> <span>jax</span><span>.</span><span>vmap</span><span>(</span>
        <span>jax</span><span>.</span><span>vmap</span><span>(</span>
            <span>lambda</span> <span>i</span><span>,</span> <span>j</span><span>:</span> <span>1</span> <span>/</span> <span>(</span><span>i</span> <span>+</span> <span>j</span> <span>+</span> <span>1</span><span>),</span>
            <span>[</span><span>0</span><span>,</span> <span>None</span><span>]),</span>
        <span>[</span><span>None</span><span>,</span> <span>0</span><span>]</span>
    <span>)(</span><span>indices</span><span>,</span> <span>indices</span><span>)</span>

<span># DumPy
</span><span>H</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>N</span><span>)</span> <span>as</span> <span>i</span><span>:</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>N</span><span>)</span> <span>as</span> <span>j</span><span>:</span>
        <span>H</span><span>[</span><span>i</span><span>,</span> <span>j</span><span>]</span> <span>=</span> <span>1</span> <span>/</span> <span>(</span><span>i</span> <span>+</span> <span>j</span> <span>+</span> <span>1</span><span>)</span> <span># Yes! This works!
</span></code></pre></div>
</details>

<details>
  

  <div><pre><code><span># Loops
</span><span>C</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>((</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>],</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>1</span><span>],</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>1</span><span>]))</span>
<span>for</span> <span>n</span> <span>in</span> <span>range</span><span>(</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>]):</span>
    <span>C</span><span>[</span><span>n</span><span>]</span> <span>=</span> <span>np</span><span>.</span><span>cov</span><span>(</span><span>X</span><span>[</span><span>n</span><span>])</span>

<span># NumPy
</span><span>mu</span> <span>=</span> <span>np</span><span>.</span><span>mean</span><span>(</span><span>X</span><span>,</span> <span>axis</span><span>=</span><span>2</span><span>)[:,</span> <span>:,</span> <span>None</span><span>]</span>    <span># hurr?
</span><span>C</span> <span>=</span> <span>np</span><span>.</span><span>sum</span><span>((</span><span>X</span> <span>-</span> <span>mu</span><span>)[:,</span> <span>None</span><span>,</span> <span>:,</span> <span>:]</span> <span>*</span>
           <span>(</span><span>X</span> <span>-</span> <span>mu</span><span>)[:,</span> <span>:,</span> <span>None</span><span>,</span> <span>:],</span>
           <span>axis</span><span>=</span><span>3</span><span>)</span> <span>/</span> <span>(</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>2</span><span>]</span> <span>-</span> <span>1</span><span>)</span>  <span># hurrr??
</span>
<span># JAX
</span><span>C</span> <span>=</span> <span>jax</span><span>.</span><span>vmap</span><span>(</span><span>jnp</span><span>.</span><span>cov</span><span>)(</span><span>X</span><span>)</span>

<span># DumPy
</span><span>C_dumpy</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>X</span><span>.</span><span>shape</span><span>[</span><span>0</span><span>])</span> <span>as</span> <span>n</span><span>:</span>
    <span>C_dumpy</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span> <span>=</span> <span>dp</span><span>.</span><span>cov</span><span>(</span><span>X</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:])</span>

<span># DumPy (alternate)
</span><span>C</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>C</span><span>[</span><span>'n'</span><span>,:,:]</span> <span>=</span> <span>dp</span><span>.</span><span>cov</span><span>(</span><span>X</span><span>[</span><span>'n'</span><span>,:,:])</span>
</code></pre></div>

</details>

<details>
  

  <p>(Pretending <a href="https://numpy.org/devdocs/reference/generated/numpy.lib.stride_tricks.html"><code>numpy.lib.stride_tricks</code></a> doesn’t exist.)</p>

  <div><pre><code><span># Loops
</span><span>B</span> <span>=</span> <span>np</span><span>.</span><span>empty</span><span>(</span><span>N</span> <span>-</span> <span>window</span> <span>+</span> <span>1</span><span>)</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>N</span> <span>-</span> <span>window</span> <span>+</span> <span>1</span><span>):</span>
    <span>B</span><span>[</span><span>i</span><span>]</span> <span>=</span> <span>np</span><span>.</span><span>mean</span><span>(</span><span>A</span><span>[</span><span>i</span><span>:</span><span>i</span> <span>+</span> <span>window</span><span>])</span>

<span># NumPy
</span><span>i</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>N</span> <span>-</span> <span>window</span> <span>+</span> <span>1</span><span>)[:,</span> <span>None</span><span>]</span>
<span>j</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>window</span><span>)[</span><span>None</span><span>,</span> <span>:]</span> 
<span>B</span> <span>=</span> <span>np</span><span>.</span><span>mean</span><span>(</span><span>A</span><span>[</span><span>i</span><span>+</span><span>j</span><span>],</span> <span>axis</span><span>=-</span><span>1</span><span>)</span>

<span># JAX
</span><span>idx</span> <span>=</span> <span>jnp</span><span>.</span><span>arange</span><span>(</span><span>window</span><span>)</span>
<span>B</span> <span>=</span> <span>jax</span><span>.</span><span>vmap</span><span>(</span>
        <span>lambda</span> <span>i</span><span>:</span> <span>jnp</span><span>.</span><span>mean</span><span>(</span><span>A</span><span>[</span><span>i</span><span>+</span><span>idx</span><span>]),</span>
    <span>)(</span><span>jnp</span><span>.</span><span>arange</span><span>(</span><span>N</span> <span>-</span> <span>window</span> <span>+</span> <span>1</span><span>))</span>

<span># DumPy
</span><span>windowed</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>B</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>N</span> <span>-</span> <span>window</span> <span>+</span> <span>1</span><span>)</span> <span>as</span> <span>i</span><span>:</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>window</span><span>)</span> <span>as</span> <span>j</span><span>:</span>
        <span>windowed</span><span>[</span><span>i</span><span>,</span> <span>j</span><span>]</span> <span>=</span> <span>A</span><span>[</span><span>i</span> <span>+</span> <span>j</span><span>]</span>
    <span>B</span><span>[</span><span>i</span><span>]</span> <span>=</span> <span>dp</span><span>.</span><span>mean</span><span>(</span><span>windowed</span><span>[</span><span>i</span><span>,</span> <span>:])</span>
    <span># Note: B[i] = dp.mean(A[i:i+window])
</span>    <span># would not work because dp.Range can't be used in slice
</span></code></pre></div>

</details>

<details>
  

  <p>The goal is to create <code>E</code> with</p>

  <p>&nbsp;&nbsp;<code>E[i1, i2, :, i3] = A[B[i1], C[i1, i2], ::2, D[i2, i3]]</code>.</p>

  <div><pre><code><span># Setup
</span><span>K</span> <span>=</span> <span>4</span>
<span>L</span> <span>=</span> <span>5</span>
<span>M</span> <span>=</span> <span>6</span>
<span>N</span> <span>=</span> <span>7</span>

<span>A</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>K</span><span>,</span> <span>L</span><span>,</span> <span>M</span><span>,</span> <span>N</span><span>)</span>
<span>B</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randint</span><span>(</span><span>0</span><span>,</span> <span>K</span><span>,</span> <span>size</span><span>=</span><span>(</span><span>9</span><span>,))</span>
<span>C</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randint</span><span>(</span><span>0</span><span>,</span> <span>L</span><span>,</span> <span>size</span><span>=</span><span>(</span><span>9</span><span>,</span> <span>10</span><span>))</span>
<span>D</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randint</span><span>(</span><span>0</span><span>,</span> <span>N</span><span>,</span> <span>size</span><span>=</span><span>(</span><span>10</span><span>,</span> <span>11</span><span>))</span>

<span># Loops
</span><span>E</span> <span>=</span> <span>np</span><span>.</span><span>empty</span><span>((</span><span>9</span><span>,</span> <span>10</span><span>,</span> <span>M</span> <span>//</span> <span>2</span><span>,</span> <span>11</span><span>))</span>
<span>for</span> <span>i1</span> <span>in</span> <span>range</span><span>(</span><span>9</span><span>):</span>
    <span>for</span> <span>i2</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
        <span>for</span> <span>i3</span> <span>in</span> <span>range</span><span>(</span><span>11</span><span>):</span>
            <span>E</span><span>[</span><span>i1</span><span>,</span><span>i2</span><span>,:,</span><span>i3</span><span>]</span> <span>=</span> <span>A</span><span>[</span><span>B</span><span>[</span><span>i1</span><span>],</span><span>C</span><span>[</span><span>i1</span><span>,</span> <span>i2</span><span>],::</span><span>2</span><span>,</span><span>D</span><span>[</span><span>i2</span><span>,</span> <span>i3</span><span>]]</span>

<span># NumPy
</span><span>E</span> <span>=</span> <span>A</span><span>[</span><span>B</span><span>[:,</span> <span>None</span><span>,</span> <span>None</span><span>],</span>
      <span>C</span><span>[:,</span> <span>:,</span> <span>None</span><span>],</span>
      <span>::</span><span>2</span><span>,</span>
      <span>D</span><span>[</span><span>None</span><span>,</span> <span>:,</span> <span>:]</span>
    <span>].</span><span>transpose</span><span>((</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>3</span><span>,</span> <span>2</span><span>))</span>

<span># JAX
</span><span>E</span> <span>=</span> <span>jax</span><span>.</span><span>vmap</span><span>(</span>
        <span>jax</span><span>.</span><span>vmap</span><span>(</span>
            <span>jax</span><span>.</span><span>vmap</span><span>(</span>
                <span>lambda</span> <span>b</span><span>,</span> <span>c</span><span>,</span> <span>d</span><span>:</span> <span>A</span><span>[</span><span>b</span><span>,</span> <span>c</span><span>,</span> <span>::</span><span>2</span><span>,</span> <span>d</span><span>],</span>
                <span>in_axes</span><span>=</span><span>[</span><span>None</span><span>,</span><span>None</span><span>,</span><span>0</span><span>]),</span>
            <span>in_axes</span><span>=</span><span>[</span><span>None</span><span>,</span><span>0</span><span>,</span><span>0</span><span>]),</span>
        <span>in_axes</span><span>=</span><span>[</span><span>0</span><span>,</span><span>0</span><span>,</span><span>None</span><span>]</span>
    <span>)(</span><span>B</span><span>,</span><span>C</span><span>,</span><span>D</span><span>).</span><span>transpose</span><span>(</span><span>0</span><span>,</span><span>1</span><span>,</span><span>3</span><span>,</span><span>2</span><span>)</span>

<span># DumPy
</span><span>E</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>9</span><span>)</span> <span>as</span> <span>i1</span><span>:</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>10</span><span>)</span> <span>as</span> <span>i2</span><span>:</span>
        <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>11</span><span>)</span> <span>as</span> <span>i3</span><span>:</span>
            <span>E</span><span>[</span><span>i1</span><span>,</span><span>i2</span><span>,:,</span><span>i3</span><span>]</span> <span>=</span> <span>A</span><span>[</span><span>B</span><span>[</span><span>i1</span><span>],</span><span>C</span><span>[</span><span>i1</span><span>,</span> <span>i2</span><span>],::</span><span>2</span><span>,</span><span>D</span><span>[</span><span>i2</span><span>,</span> <span>i3</span><span>]]</span>

<span># DumPy (alternative)
</span><span>E</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>E</span><span>[</span><span>'i1'</span><span>,</span><span>'i2'</span><span>,:,</span><span>'i3'</span><span>]</span> <span>=</span> <span>A</span><span>[</span><span>B</span><span>[</span><span>'i1'</span><span>],</span> <span>C</span><span>[</span><span>'i1'</span><span>,</span><span>'i2'</span><span>],</span> <span>::</span><span>2</span><span>,</span> <span>D</span><span>[</span><span>'i2'</span><span>,</span><span>'i3'</span><span>]]</span>

</code></pre></div>
</details>

<details>
  

  <p>The goal of this problem is, given a list of vectors and a list of <a href="https://en.wikipedia.org/wiki/Multivariate_normal_distribution">Gaussians</a> parameters, and arrays mapping each vector to a list of parameters, evaluate each corresponding vector/parameter combination. Formally, given 2D <code>X</code>, <code>B</code>, <code>C</code>, and <code>means</code> and 3D <code>covs</code>, the goal is to create <code>A</code> with</p>

  <p>&nbsp;&nbsp;<code>A<sub>ij</sub> = log N( X<sub>i</sub> | means<sub>B<sub>ij</sub></sub>, covs<sub>C<sub>ij</sub></sub>) </code>.</p>

  <div><pre><code><span># Setup
</span><span>ndims</span> <span>=</span> <span>3</span>
<span>ndata</span> <span>=</span> <span>10</span>
<span>neval</span> <span>=</span> <span>5</span>
<span>ndist</span> <span>=</span> <span>7</span>

<span>X</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>ndata</span><span>,</span> <span>ndims</span><span>)</span>
<span>B</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randint</span><span>(</span><span>0</span><span>,</span> <span>ndist</span><span>,</span> <span>size</span><span>=</span><span>(</span><span>ndata</span><span>,</span> <span>neval</span><span>))</span>
<span>C</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randint</span><span>(</span><span>0</span><span>,</span> <span>ndist</span><span>,</span> <span>size</span><span>=</span><span>(</span><span>ndata</span><span>,</span> <span>neval</span><span>))</span>
<span>means</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>ndist</span><span>,</span> <span>ndims</span><span>)</span>
<span>scales</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>(</span><span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>ndist</span><span>,</span> <span>ndims</span><span>,</span> <span>ndims</span><span>))</span>
<span>covs</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>([</span><span>scale</span> <span>@</span> <span>scale</span><span>.</span><span>T</span> <span>for</span> <span>scale</span> <span>in</span> <span>scales</span><span>])</span>
</code></pre></div>

  <div><pre><code><span># Loops
</span><span>def</span> <span>log_prob</span><span>(</span><span>x</span><span>,</span> <span>mean</span><span>,</span> <span>cov</span><span>):</span>
    <span>diff</span> <span>=</span> <span>x</span> <span>-</span> <span>mean</span>
    <span>y</span> <span>=</span> <span>np</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>cov</span><span>,</span> <span>diff</span><span>)</span>
    <span>quad</span> <span>=</span> <span>diff</span> <span>@</span> <span>y</span>
    <span>logdet</span> <span>=</span> <span>np</span><span>.</span><span>linalg</span><span>.</span><span>slogdet</span><span>(</span><span>2</span> <span>*</span> <span>np</span><span>.</span><span>pi</span> <span>*</span> <span>cov</span><span>)[</span><span>1</span><span>]</span>
    <span>return</span> <span>-</span><span>0.5</span> <span>*</span> <span>(</span><span>quad</span> <span>+</span> <span>logdet</span><span>)</span>

<span>A</span> <span>=</span> <span>np</span><span>.</span><span>empty</span><span>((</span><span>ndata</span><span>,</span> <span>neval</span><span>))</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>ndata</span><span>):</span>
    <span>for</span> <span>j</span> <span>in</span> <span>range</span><span>(</span><span>neval</span><span>):</span>
        <span>A</span><span>[</span><span>i</span><span>,</span> <span>j</span><span>]</span> <span>=</span> <span>log_prob</span><span>(</span><span>X</span><span>[</span><span>i</span><span>,</span> <span>:],</span>
                           <span>means</span><span>[</span><span>B</span><span>[</span><span>i</span><span>,</span> <span>j</span><span>],</span> <span>:],</span>
                           <span>covs</span><span>[</span><span>C</span><span>[</span><span>i</span><span>,</span> <span>j</span><span>],</span> <span>:,</span> <span>:])</span>

<span># NumPy
</span><span>diff</span> <span>=</span> <span>X</span><span>[:,</span> <span>None</span><span>,</span> <span>:]</span> <span>-</span> <span>means</span><span>[</span><span>B</span><span>]</span>
<span>y</span> <span>=</span> <span>np</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>covs</span><span>[</span><span>C</span><span>],</span> <span>diff</span><span>[...,</span> <span>None</span><span>])</span>
<span>quad</span> <span>=</span> <span>np</span><span>.</span><span>sum</span><span>(</span><span>diff</span> <span>*</span> <span>y</span><span>[...,</span> <span>0</span><span>],</span> <span>axis</span><span>=-</span><span>1</span><span>)</span>
<span>logdet</span> <span>=</span> <span>np</span><span>.</span><span>linalg</span><span>.</span><span>slogdet</span><span>(</span><span>2</span> <span>*</span> <span>np</span><span>.</span><span>pi</span> <span>*</span> <span>covs</span><span>[</span><span>C</span><span>])[</span><span>1</span><span>]</span>
<span>A</span> <span>=</span> <span>-</span><span>0.5</span> <span>*</span> <span>(</span><span>quad</span> <span>+</span> <span>logdet</span><span>)</span>

<span># JAX
</span><span>A</span> <span>=</span> <span>jax</span><span>.</span><span>vmap</span><span>(</span>
        <span>jax</span><span>.</span><span>vmap</span><span>(</span>
            <span>log_prob_gauss</span><span>,</span>
            <span>in_axes</span><span>=</span><span>[</span><span>None</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>]</span>
        <span>),</span>
    <span>)(</span><span>X</span><span>,</span> <span>means</span><span>[</span><span>B</span><span>],</span> <span>covs</span><span>[</span><span>C</span><span>])</span>

<span># DumPy
</span><span>def</span> <span>log_prob</span><span>(</span><span>x</span><span>,</span> <span>mean</span><span>,</span> <span>cov</span><span>):</span>
    <span>diff</span> <span>=</span> <span>x</span> <span>-</span> <span>mean</span>
    <span>quad</span> <span>=</span> <span>diff</span> <span>@</span> <span>dp</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>cov</span><span>,</span> <span>diff</span><span>)</span>
    <span>logdet</span> <span>=</span> <span>dp</span><span>.</span><span>linalg</span><span>.</span><span>slogdet</span><span>(</span><span>2</span> <span>*</span> <span>jnp</span><span>.</span><span>pi</span> <span>*</span> <span>cov</span><span>)[</span><span>1</span><span>]</span>

<span>A</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>ndata</span><span>)</span> <span>as</span> <span>i</span><span>:</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>neval</span><span>)</span> <span>as</span> <span>j</span><span>:</span>
        <span>A</span><span>[</span><span>i</span><span>,</span> <span>j</span><span>]</span> <span>=</span> <span>log_prob</span><span>(</span><span>X</span><span>[</span><span>i</span><span>,:],</span>
                           <span>means</span><span>[</span><span>B</span><span>[</span><span>i</span><span>,</span><span>j</span><span>],:],</span>
                           <span>covs</span><span>[</span><span>C</span><span>[</span><span>i</span><span>,</span><span>j</span><span>],:,:])</span>

<span># DumPy (alternate)
</span><span>A</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
<span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>ndata</span><span>)</span> <span>as</span> <span>i</span><span>:</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>neval</span><span>)</span> <span>as</span> <span>j</span><span>:</span>
        <span>mean</span> <span>=</span> <span>means</span><span>[</span><span>B</span><span>[</span><span>i</span><span>,</span><span>j</span><span>],:]</span>
        <span>cov</span> <span>=</span> <span>covs</span><span>[</span><span>C</span><span>[</span><span>i</span><span>,</span><span>j</span><span>],:,:]</span>
        <span>diff</span> <span>=</span> <span>X</span><span>[</span><span>i</span><span>,:]</span> <span>-</span> <span>mean</span>
        <span>quad</span> <span>=</span> <span>diff</span> <span>@</span> <span>dp</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>cov</span><span>,</span> <span>diff</span><span>)</span>
        <span>logdet</span> <span>=</span> <span>dp</span><span>.</span><span>linalg</span><span>.</span><span>slogdet</span><span>(</span><span>2</span> <span>*</span> <span>jnp</span><span>.</span><span>pi</span> <span>*</span> <span>cov</span><span>)[</span><span>1</span><span>]</span>
        <span>A</span><span>[</span><span>i</span><span>,</span><span>j</span><span>]</span> <span>=</span> <span>-</span><span>0.5</span> <span>*</span> <span>(</span><span>quad</span> <span>+</span> <span>logdet</span><span>)</span>
</code></pre></div>

</details>

<details>
  

  <p>See also the discussion in the <a href="https://dynomight.net/numpy/#attention-please">previous post</a>.</p>

  <div><pre><code><span># Setup
</span><span>input_dim</span> <span>=</span> <span>4</span>
<span>seq_len</span> <span>=</span> <span>4</span>
<span>d_k</span> <span>=</span> <span>5</span>
<span>d_v</span> <span>=</span> <span>input_dim</span>
<span>n_head</span> <span>=</span> <span>2</span>
<span>X</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>seq_len</span><span>,</span> <span>input_dim</span><span>)</span>
<span>W_q</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>n_head</span><span>,</span> <span>input_dim</span><span>,</span> <span>d_k</span><span>)</span>
<span>W_k</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>n_head</span><span>,</span> <span>input_dim</span><span>,</span> <span>d_k</span><span>)</span>
<span>W_v</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>n_head</span><span>,</span> <span>input_dim</span><span>,</span> <span>d_v</span><span>)</span>
<span>W_o</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>randn</span><span>(</span><span>n_head</span><span>,</span> <span>d_v</span><span>,</span> <span>input_dim</span> <span>//</span> <span>n_head</span><span>)</span>

<span># Loops
</span><span>def</span> <span>softmax_numpy</span><span>(</span><span>x</span><span>,</span> <span>axis</span><span>=-</span><span>1</span><span>):</span>
    <span>e_x</span> <span>=</span> <span>np</span><span>.</span><span>exp</span><span>(</span><span>x</span> <span>-</span> <span>np</span><span>.</span><span>max</span><span>(</span><span>x</span><span>,</span> <span>axis</span><span>=</span><span>axis</span><span>,</span> <span>keepdims</span><span>=</span><span>True</span><span>))</span>
    <span>return</span> <span>e_x</span> <span>/</span> <span>np</span><span>.</span><span>sum</span><span>(</span><span>e_x</span><span>,</span> <span>axis</span><span>=</span><span>axis</span><span>,</span> <span>keepdims</span><span>=</span><span>True</span><span>)</span>

<span>def</span> <span>attention</span><span>(</span><span>X</span><span>,</span> <span>W_q</span><span>,</span> <span>W_k</span><span>,</span> <span>W_v</span><span>):</span>
    <span>Q</span> <span>=</span> <span>X</span> <span>@</span> <span>W_q</span>
    <span>K</span> <span>=</span> <span>X</span> <span>@</span> <span>W_k</span>
    <span>V</span> <span>=</span> <span>X</span> <span>@</span> <span>W_v</span>
    <span>scores</span> <span>=</span> <span>Q</span> <span>@</span> <span>K</span><span>.</span><span>T</span> <span>/</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>d_k</span><span>)</span>
    <span>attention_weights</span> <span>=</span> <span>softmax_numpy</span><span>(</span><span>scores</span><span>,</span> <span>axis</span><span>=-</span><span>1</span><span>)</span>
    <span>output</span> <span>=</span> <span>attention_weights</span> <span>@</span> <span>V</span>
    <span>return</span> <span>output</span>

<span>def</span> <span>multi_head_attention_loops</span><span>(</span><span>X</span><span>,</span> <span>W_q</span><span>,</span> <span>W_k</span><span>,</span> <span>W_v</span><span>,</span> <span>W_o</span><span>):</span>
    <span>projected</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>n</span> <span>in</span> <span>range</span><span>(</span><span>n_head</span><span>):</span>
        <span>my_output</span> <span>=</span> <span>attention</span><span>(</span><span>X</span><span>,</span>
                                <span>W_q</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:],</span>
                                <span>W_k</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:],</span>
                                <span>W_v</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:])</span>
        <span>my_proj</span> <span>=</span> <span>my_output</span> <span>@</span> <span>W_o</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span>
        <span>projected</span><span>.</span><span>append</span><span>(</span><span>my_proj</span><span>)</span>
    <span>projected</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>(</span><span>projected</span><span>)</span>

    <span>final</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>seq_len</span><span>):</span>
        <span>my_final</span> <span>=</span> <span>np</span><span>.</span><span>ravel</span><span>(</span><span>projected</span><span>[:,</span> <span>i</span><span>,</span> <span>:])</span>
        <span>final</span><span>.</span><span>append</span><span>(</span><span>my_final</span><span>)</span>
    <span>return</span> <span>np</span><span>.</span><span>array</span><span>(</span><span>final</span><span>)</span>

<span># NumPy
</span><span>def</span> <span>softmax_numpy</span><span>(</span><span>x</span><span>,</span> <span>axis</span><span>=-</span><span>1</span><span>):</span> <span># repeat
</span>    <span>e_x</span> <span>=</span> <span>np</span><span>.</span><span>exp</span><span>(</span><span>x</span> <span>-</span> <span>np</span><span>.</span><span>max</span><span>(</span><span>x</span><span>,</span> <span>axis</span><span>=</span><span>axis</span><span>,</span> <span>keepdims</span><span>=</span><span>True</span><span>))</span>
    <span>return</span> <span>e_x</span> <span>/</span> <span>np</span><span>.</span><span>sum</span><span>(</span><span>e_x</span><span>,</span> <span>axis</span><span>=</span><span>axis</span><span>,</span> <span>keepdims</span><span>=</span><span>True</span><span>)</span>

<span>def</span> <span>multi_head_attention_numpy</span><span>(</span><span>X</span><span>,</span> <span>W_q</span><span>,</span> <span>W_k</span><span>,</span> <span>W_v</span><span>,</span> <span>W_o</span><span>):</span>
    <span>Q</span> <span>=</span> <span>np</span><span>.</span><span>einsum</span><span>(</span><span>'si,hij-&gt;hsj'</span><span>,</span> <span>X</span><span>,</span> <span>W_q</span><span>)</span>
    <span>K</span> <span>=</span> <span>np</span><span>.</span><span>einsum</span><span>(</span><span>'si,hik-&gt;hsk'</span><span>,</span> <span>X</span><span>,</span> <span>W_k</span><span>)</span>
    <span>V</span> <span>=</span> <span>np</span><span>.</span><span>einsum</span><span>(</span><span>'si,hiv-&gt;hsv'</span><span>,</span> <span>X</span><span>,</span> <span>W_v</span><span>)</span>
    <span>scores</span> <span>=</span> <span>Q</span> <span>@</span> <span>K</span><span>.</span><span>transpose</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>)</span> <span>/</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>d_k</span><span>)</span>
    <span>weights</span> <span>=</span> <span>softmax_numpy</span><span>(</span><span>scores</span><span>,</span> <span>axis</span><span>=-</span><span>1</span><span>)</span>
    <span>output</span> <span>=</span> <span>weights</span> <span>@</span> <span>V</span>
    <span>projected</span> <span>=</span> <span>np</span><span>.</span><span>einsum</span><span>(</span><span>'hsv,hvd-&gt;hsd'</span><span>,</span> <span>output</span><span>,</span> <span>W_o</span><span>)</span>
    <span>return</span> <span>projected</span><span>.</span><span>transpose</span><span>(</span><span>1</span><span>,</span> <span>0</span><span>,</span> <span>2</span><span>).</span><span>reshape</span><span>(</span>
        <span>seq_len</span><span>,</span> <span>input_dim</span><span>)</span>

<span># JAX
</span><span>def</span> <span>softmax_jax</span><span>(</span><span>x</span><span>,</span> <span>axis</span><span>=-</span><span>1</span><span>):</span>
    <span>e_x</span> <span>=</span> <span>jnp</span><span>.</span><span>exp</span><span>(</span><span>x</span> <span>-</span> <span>jnp</span><span>.</span><span>max</span><span>(</span><span>x</span><span>,</span> <span>axis</span><span>=</span><span>axis</span><span>,</span> <span>keepdims</span><span>=</span><span>True</span><span>))</span>
    <span>return</span> <span>e_x</span> <span>/</span> <span>jnp</span><span>.</span><span>sum</span><span>(</span><span>e_x</span><span>,</span> <span>axis</span><span>=</span><span>axis</span><span>,</span> <span>keepdims</span><span>=</span><span>True</span><span>)</span>

<span>def</span> <span>attention_jax</span><span>(</span><span>X</span><span>,</span> <span>W_q</span><span>,</span> <span>W_k</span><span>,</span> <span>W_v</span><span>):</span>
    <span>d_k</span> <span>=</span> <span>W_k</span><span>.</span><span>shape</span><span>[</span><span>-</span><span>1</span><span>]</span>
    <span>Q</span> <span>=</span> <span>X</span> <span>@</span> <span>W_q</span>
    <span>K</span> <span>=</span> <span>X</span> <span>@</span> <span>W_k</span>
    <span>V</span> <span>=</span> <span>X</span> <span>@</span> <span>W_v</span>
    <span>scores</span> <span>=</span> <span>Q</span> <span>@</span> <span>K</span><span>.</span><span>T</span> <span>/</span> <span>jnp</span><span>.</span><span>sqrt</span><span>(</span><span>d_k</span><span>)</span>
    <span>attention_weights</span> <span>=</span> <span>softmax_jax</span><span>(</span><span>scores</span><span>,</span> <span>axis</span><span>=-</span><span>1</span><span>)</span>
    <span>output</span> <span>=</span> <span>attention_weights</span> <span>@</span> <span>V</span>
    <span>return</span> <span>output</span>

<span>def</span> <span>multi_head_attention_jax</span><span>(</span><span>X</span><span>,</span> <span>W_q</span><span>,</span> <span>W_k</span><span>,</span> <span>W_v</span><span>,</span> <span>W_o</span><span>):</span>
    <span>def</span> <span>myfun</span><span>(</span><span>X</span><span>,</span> <span>w_q</span><span>,</span> <span>w_k</span><span>,</span> <span>w_v</span><span>,</span> <span>w_o</span><span>):</span>
        <span>return</span> <span>attention_jax</span><span>(</span><span>X</span><span>,</span> <span>w_q</span><span>,</span> <span>w_k</span><span>,</span> <span>w_v</span><span>)</span> <span>@</span> <span>w_o</span>

    <span>projected</span> <span>=</span> <span>jax</span><span>.</span><span>vmap</span><span>(</span><span>myfun</span><span>,</span>
                            <span>in_axes</span><span>=</span><span>[</span><span>None</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>]</span>
                <span>)(</span><span>X</span><span>,</span> <span>W_q</span><span>,</span> <span>W_k</span><span>,</span> <span>W_v</span><span>,</span> <span>W_o</span><span>)</span>

    <span>return</span> <span>jax</span><span>.</span><span>vmap</span><span>(</span><span>jnp</span><span>.</span><span>ravel</span><span>,</span> <span>in_axes</span><span>=</span><span>1</span><span>)(</span><span>projected</span><span>)</span>

<span># DumPy
</span><span>def</span> <span>softmax_dumpy</span><span>(</span><span>x</span><span>):</span>
    <span>assert</span> <span>x</span><span>.</span><span>ndim</span> <span>==</span> <span>1</span> <span># no need to think about dimensions!
</span>    <span>e_x</span> <span>=</span> <span>dp</span><span>.</span><span>exp</span><span>(</span><span>x</span> <span>-</span> <span>dp</span><span>.</span><span>max</span><span>(</span><span>x</span><span>))</span>
    <span>return</span> <span>e_x</span> <span>/</span> <span>dp</span><span>.</span><span>sum</span><span>(</span><span>e_x</span><span>)</span>

<span>@</span><span>dp</span><span>.</span><span>wrap</span> <span># needed to make functions with Slots auto-vectorizing
</span><span>def</span> <span>attention_dumpy</span><span>(</span><span>X</span><span>,</span> <span>W_q</span><span>,</span> <span>W_k</span><span>,</span> <span>W_v</span><span>):</span>
    <span>Q</span> <span>=</span> <span>X</span> <span>@</span> <span>W_q</span>
    <span>K</span> <span>=</span> <span>X</span> <span>@</span> <span>W_k</span>
    <span>V</span> <span>=</span> <span>X</span> <span>@</span> <span>W_v</span>
    <span>scores</span> <span>=</span> <span>Q</span> <span>@</span> <span>K</span><span>.</span><span>T</span> <span>/</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>d_k</span><span>)</span>
    <span>attention_weights</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>seq_len</span><span>)</span> <span>as</span> <span>i</span><span>:</span>
        <span>attention_weights</span><span>[</span><span>i</span><span>,</span> <span>:]</span> <span>=</span> <span>softmax_dumpy</span><span>(</span><span>scores</span><span>[</span><span>i</span><span>,</span> <span>:])</span>
    <span>output</span> <span>=</span> <span>attention_weights</span> <span>@</span> <span>V</span>
    <span>return</span> <span>output</span>

<span>def</span> <span>multi_head_attention_dumpy</span><span>(</span><span>X</span><span>,</span> <span>W_q</span><span>,</span> <span>W_k</span><span>,</span> <span>W_v</span><span>,</span> <span>W_o</span><span>):</span>
    <span>output</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
    <span>projected</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
    <span>final</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>n_head</span><span>)</span> <span>as</span> <span>n</span><span>:</span>
        <span>output</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span> <span>=</span> <span>attention_dumpy</span><span>(</span><span>X</span><span>,</span>
                                          <span>W_q</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:],</span>
                                          <span>W_k</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:],</span>
                                          <span>W_v</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:])</span>
        <span>projected</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span> <span>=</span> <span>output</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span> <span>@</span> <span>W_o</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>seq_len</span><span>)</span> <span>as</span> <span>i</span><span>:</span>
        <span>final</span><span>[</span><span>i</span><span>,</span> <span>:]</span> <span>=</span> <span>dp</span><span>.</span><span>ravel</span><span>(</span><span>projected</span><span>[:,</span> <span>i</span><span>,</span> <span>:])</span>
    <span>return</span> <span>final</span>

<span># DumPy (alternate)
</span><span>def</span> <span>multi_head_attention</span><span>(</span><span>X</span><span>,</span> <span>W_q</span><span>,</span> <span>W_k</span><span>,</span> <span>W_v</span><span>,</span> <span>W_o</span><span>):</span>
    <span>attn_weights</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
    <span>projected</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
    <span>final</span> <span>=</span> <span>dp</span><span>.</span><span>Slot</span><span>()</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>n_head</span><span>)</span> <span>as</span> <span>n</span><span>:</span>
        <span>Q</span> <span>=</span> <span>X</span> <span>@</span> <span>W_q</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span>
        <span>K</span> <span>=</span> <span>X</span> <span>@</span> <span>W_k</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span>
        <span>V</span> <span>=</span> <span>X</span> <span>@</span> <span>W_v</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span>
        <span>scores</span> <span>=</span> <span>Q</span> <span>@</span> <span>K</span><span>.</span><span>T</span> <span>/</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>d_k</span><span>)</span>
        <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>seq_len</span><span>)</span> <span>as</span> <span>i</span><span>:</span>
            <span>attn_weights</span><span>[</span><span>n</span><span>,</span> <span>i</span><span>,</span> <span>:]</span> <span>=</span> <span>softmax_dumpy</span><span>(</span><span>scores</span><span>[</span><span>i</span><span>,</span> <span>:])</span>
        <span>projected</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span> <span>=</span> <span>attn_weights</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span> <span>@</span> <span>V</span> <span>@</span> <span>W_o</span><span>[</span><span>n</span><span>,</span> <span>:,</span> <span>:]</span>
    <span>with</span> <span>dp</span><span>.</span><span>Range</span><span>(</span><span>seq_len</span><span>)</span> <span>as</span> <span>i</span><span>:</span>
        <span>final</span><span>[</span><span>i</span><span>,</span> <span>:]</span> <span>=</span> <span>dp</span><span>.</span><span>ravel</span><span>(</span><span>projected</span><span>[:,</span> <span>i</span><span>,</span> <span>:])</span>
    <span>return</span> <span>final</span>
</code></pre></div>

</details>

<p>I gave each implementation a subjective “goodness” score on a 1-10 scale. I always gave the best implementation for each problem 10 points, and then took off points from the others based on how much thinking they required.</p>

<table>
  <thead>
    <tr>
      <th>Problem</th>
      <th>Loops</th>
      <th>Numpy</th>
      <th>JAX (vmap)</th>
      <th>DumPy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Hilbert matrices</td>
      <td>10</td>
      <td>7</td>
      <td>7</td>
      <td>10</td>
    </tr>
    <tr>
      <td>Covariance</td>
      <td>9</td>
      <td>4</td>
      <td>10</td>
      <td>9</td>
    </tr>
    <tr>
      <td>Moving Ave.</td>
      <td>10</td>
      <td>6</td>
      <td>6</td>
      <td>8</td>
    </tr>
    <tr>
      <td>Indexing</td>
      <td>10</td>
      <td>5</td>
      <td>4</td>
      <td>10</td>
    </tr>
    <tr>
      <td>Gaussians</td>
      <td>10</td>
      <td>3</td>
      <td>6</td>
      <td>10</td>
    </tr>
    <tr>
      <td>Attention</td>
      <td>10</td>
      <td>1</td>
      <td>8</td>
      <td>10</td>
    </tr>
    <tr>
      <td><strong>Mean</strong></td>
      <td><strong>9.8</strong></td>
      <td><strong>4.3</strong></td>
      <td><strong>6.8</strong></td>
      <td><strong>9.5</strong></td>
    </tr>
  </tbody>
</table>

<p>According to this dubious methodology and these made-up numbers, DumPy is 96.93877% as good as loops! Knowledge is power! But seriously, while subjective, I don’t think my scores should be <em>too</em> controversial. The most debatable one is probably JAX’s attention score.</p>

<h2 id="what-to-remove">What to remove?</h2>

<p>The only thing DumPy adds to NumPy is some nice notation for indices. That’s it.</p>

<p>What I think makes DumPy good is it also <em>removes</em> a lot of stuff. Roughly speaking, I’ve tried to remove anything that is confusing and exists because NumPy doesn’t have loops. I’m not sure that I’ve drawn the line in exactly the right place, but I do feel confident that I’m on the right track.</p>

<h3 id="1-goodbye-broadcasting">1. Goodbye broadcasting</h3>

<p>In NumPy, <code>A*B</code> works if <code>A</code> and <code>B</code> are both scalar. Or if <code>A</code> is <code>5×1×6</code> and <code>B</code> is <code>5×1×6×1</code>. But not if <code>A</code> is <code>1×5×6</code> and <code>B</code> is <code>1×5×6×1</code>. Huh?</p>

<p>In truth, the <a href="https://numpy.org/doc/stable/user/basics.broadcasting.html">broadcasting rules</a> aren’t <em>that</em> complicated for scalar operations like multiplication. But still, I don’t like it, because <em>every time</em> you see <code>A*B</code>, you have to worry about what shapes those have and what the computation might be doing.</p>

<p>So, I removed it. In DumPy you can only do <code>A*B</code> if one of <code>A</code> or <code>B</code> is scalar or <code>A</code> and <code>B</code> have exactly the same shape. That’s it, anything else raises an error. Instead, use indices, so it’s clear what you’re doing. Instead of this:</p>

<div><pre><code><span>C</span> <span>=</span> <span>A</span><span>[...,</span><span>None</span><span>]</span> <span>*</span> <span>B</span><span>[</span><span>None</span><span>]</span>
</code></pre></div>

<p>write this:</p>

<div><pre><code><span>C</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>,</span><span>'k'</span><span>]</span> <span>=</span> <span>A</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>]</span> <span>*</span> <span>B</span><span>[</span><span>'j'</span><span>,</span><span>'k'</span><span>]</span>
</code></pre></div>

<h3 id="2-goodbye-fancy-indexing">2. Goodbye fancy indexing</h3>

<p>Indexing in NumPy is <a href="https://dynomight.net/numpy/#i-dont-like-numpy-indexing">absurdly complicated</a>. When you write <code>A[B,C,D]</code> that could do <em>many</em> different things depending on what all the shapes are. I considered going cold-turkey and only allowing scalar indices in DumPy. That wouldn’t have been <em>so</em> bad, since you can still do advanced stuff using loops. But it’s quite annoying to not be able to write <code>A[B]</code> when <code>A</code> and <code>B</code> are just simple 1D arrays.</p>

<p>So I’ve tentatively decided to be more pragmatic. In DumPy, you can index with integers, or slices, or (possibly mapped) <code>Array</code>s. <strong>But only one <code>Array</code> index can be non-scalar</strong>. I settled on this because it’s the most general syntax that doesn’t require thinking.</p>

<p>Let me show you what I mean. If you see this:</p>

<div><pre><code><span>A</span><span>[</span><span>1</span><span>,</span> <span>1</span><span>:</span><span>6</span><span>,</span> <span>C</span><span>,</span> <span>2</span><span>:</span><span>10</span><span>]</span> <span># legal in both numpy and dumpy
</span></code></pre></div>

<p>It’s “obvious” what the output shape will be. (First the shape of <code>1:6</code>, then the shape of <code>C</code>, then the shape of <code>2:10</code>). Simple enough. But as soon as you have <em>two</em> multidimensional array inputs like this:</p>

<div><pre><code><span>A</span><span>[</span><span>B</span><span>,</span> <span>1</span><span>:</span><span>6</span><span>,</span> <span>C</span><span>,</span> <span>2</span><span>:</span><span>10</span><span>]</span> <span># legal in numpy, verboten in dumpy
</span></code></pre></div>

<p>Suddenly all hell breaks loose. You need to think about broadcasting between <code>A</code> and <code>B</code>, orthogonal vs. pointwise indices, slices behaving differently than arrays, and quirks for where the output dimensions go. So DumPy forbids this. Instead, you need to write one of these:</p>

<div><pre><code><span>D</span><span>[</span><span>'i'</span><span>,:,:]</span>     <span>=</span> <span>A</span><span>[</span><span>B</span><span>[</span><span>'i'</span><span>],</span>     <span>1</span><span>:</span><span>6</span><span>,</span> <span>C</span><span>[</span><span>'i'</span><span>],</span>     <span>2</span><span>:</span><span>10</span><span>]</span> <span># (1)
</span><span>D</span><span>[:,:,</span><span>'i'</span><span>]</span>     <span>=</span> <span>A</span><span>[</span><span>B</span><span>[</span><span>'i'</span><span>],</span>     <span>1</span><span>:</span><span>6</span><span>,</span> <span>C</span><span>[</span><span>'i'</span><span>],</span>     <span>2</span><span>:</span><span>10</span><span>]</span> <span># (2)
</span><span>D</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>,:,:]</span> <span>=</span> <span>A</span><span>[</span><span>B</span><span>[</span><span>'i'</span><span>],</span>     <span>1</span><span>:</span><span>6</span><span>,</span> <span>C</span><span>[</span><span>'j'</span><span>],</span>     <span>2</span><span>:</span><span>10</span><span>]</span> <span># (3)
</span><span>D</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>,:,:]</span> <span>=</span> <span>A</span><span>[</span><span>B</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>],</span> <span>1</span><span>:</span><span>6</span><span>,</span> <span>C</span><span>[</span><span>'i'</span><span>],</span>     <span>2</span><span>:</span><span>10</span><span>]</span> <span># (4)
</span><span>D</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>,:,:]</span> <span>=</span> <span>A</span><span>[</span><span>B</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>],</span> <span>1</span><span>:</span><span>6</span><span>,</span> <span>C</span><span>[</span><span>'i'</span><span>,</span><span>'j'</span><span>],</span> <span>2</span><span>:</span><span>10</span><span>]</span> <span># (5)
</span></code></pre></div>

<p>They all do exactly what they look like they do.</p>

<p>Oh, and one more thing! In DumPy, you <strong>must index all dimensions</strong>. In NumPy, if <code>A</code> has three dimensions, then <code>A[2]</code> is equivalent to <code>A[2,:,:]</code>. This is sometimes nice, but it means that <em>every time</em> you see <code>A[2]</code>, you have to worry about how many dimensions <code>A</code> has. In DumPy, every time you index an array or assign to a <code>dp.Slot</code>, it checks that all indices have been included. So when you see option (4) above, you <em>know</em> that:</p>

<ul>
  <li><code>A</code> has 4 dimensions</li>
  <li><code>B</code> has 2 dimensions</li>
  <li><code>C</code> has 1 dimension</li>
  <li><code>D</code> has 4 dimensions</li>
</ul>

<p>Always, always, <em>always</em>. No cases, no thinking.</p>

<h3 id="3-goodbye-complicated-functions">3. Goodbye complicated functions</h3>

<p>Again, many NumPy functions have complex conventions for vectorization. <a href="https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html"><code>np.linalg.solve</code></a> sort of says, “If the inputs have ≤2 dimensions, do the obvious thing. Otherwise, do some extremely confusing broadcasting stuff.” DumPy removes the confusing broadcasting stuff. When you see <code>dp.linalg.solve(A,B)</code>, you know that <code>A</code> and <code>B</code> have no more than two dimensions, so nothing tricky is happening.</p>

<p>Similarly, in NumPy, <code>A @ B</code> is equivalent to <a href="https://numpy.org/doc/stable/reference/generated/numpy.matmul.html"><code>np.matmul</code></a><code>(A,B)</code>. When both inputs have ≤2 or fewer dimensions, this does the “obvious thing”. (Either an inner-product or some kind of matrix/vector multiplication.) Otherwise, it broadcasts or vectorizes or something? I can never remember. In DumPy you don’t have that problem, because it restricts <code>A @ B</code> to arrays with one or two dimensions only.</p>

<p>If you need more dimensions, no problem: Use indices.</p>

<h3 id="why-remove">Why remove?</h3>

<p>It might seem annoying to remove features, but I’m telling you: <em>Just try it</em>. If you program this way, a wonderful feeling of calmness comes over you, as class after class of possible errors disappear.</p>

<p>Put another way, why remove all the fancy stuff, instead of leaving it optional? Because optional implies thinking! I want to program in a simple way. I don’t want to worry that I’m accidentally triggering some confusing broadcasting insanity, because that would be a mistake. I want the computer to help me catch mistakes, not silently do something weird that I didn’t intend.</p>

<p>In principle, it would be OK if there was a <code>evil_solve</code> method that preserves all the confusing batching stuff. If you <em>really</em> want that, you can make it yourself:</p>

<div><pre><code><span>evil_solve</span> <span>=</span> <span>dp</span><span>.</span><span>MappedFunction</span><span>(</span><span>jnp</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>)</span> <span># not recommended
</span></code></pre></div>

<p>You can use that same wrapper to convert any JAX NumPy function to work with DumPy.</p>

<h2 id="discussion">Discussion</h2>

<p>Think about math: In two or fewer dimensions, coordinate-free linear algebra notation is wonderful. But for higher dimensional <a href="https://en.wikipedia.org/wiki/Tensor">tensors</a>, there are just too many cases, so most physicists just use coordinates.</p>

<p>So this solution seems pretty obvious to me. Honestly, I’m a little confused why it isn’t already standard. Am I missing something?</p>

<h3 id="what-about-apl">What about APL?</h3>

<p>When I complain about NumPy, many people often suggest looking into <a href="https://en.wikipedia.org/wiki/APL_(programming_language)">APL</a>-type languages, like A, J, K, or Q. (All single-letter languages are APL-like, except C, D, F, R, T, X, and many others. Convenient, right?) The obvious disadvantages of these are that:</p>

<ol>
  <li>They’re unfamiliar.</li>
  <li>The code looks like gibberish.</li>
  <li>They don’t usually provide autodiff or GPU execution.</li>
</ol>

<p>None of those bother me. If the languages are better, we should learn to use them and make them do autodiff on GPUs. But I’m not convinced they <em>are</em> better. When you actually learn these languages, what you figure out is that the symbol gibberish basically amounts to doing the same kind of dimension mashing that we saw earlier in NumPy:</p>

<div><pre><code><span>AiX</span> <span>=</span> <span>np</span><span>.</span><span>linalg</span><span>.</span><span>solve</span><span>(</span><span>A</span><span>.</span><span>transpose</span><span>(</span><span>1</span><span>,</span><span>0</span><span>,</span><span>2</span><span>,</span><span>3</span><span>),</span>
                      <span>X</span><span>[</span><span>None</span><span>,...,</span><span>None</span><span>])[...,</span><span>0</span><span>]</span>
<span>Z</span> <span>=</span> <span>np</span><span>.</span><span>sum</span><span>(</span><span>AiX</span> <span>*</span> <span>Y</span><span>[:,</span><span>None</span><span>],</span> <span>axis</span><span>=-</span><span>1</span><span>).</span><span>T</span>
</code></pre></div>

<p>The reason is that, just like NumPy and <code>vmap</code>, these languages choose align dimensions by <em>position</em>, rather than by name. If I <em>have</em> to mash dimensions, I want to use the best tool. But I’d prefer not to mash dimensions at all.</p>

<h3 id="what-about-named-dimensions">What about named dimensions?</h3>

<p>People also often suggest “NumPy with named dimensions” as in <a href="https://docs.xarray.dev/en/stable/index.html">xarray</a>. (PyTorch also has a <a href="https://docs.pytorch.org/docs/stable/named_tensor.html">half-hearted implementation</a>.) Of course, DumPy also uses named dimensions, but there’s a critical difference. In xarray, they’re part of the arrays themselves, while in DumPy, they live outside the arrays.</p>

<p>In some cases, permanent named dimensions are very nice. But for linear algebra, they’re confusing. For example, suppose <code>A</code> is 2-D with named dimensions <code>"cat"</code> and <code>"dog"</code>. Now, what dimensions should <code>A<sup>T</sup>A</code> have? (<code>"dog"</code> twice?) Or say you take a singular value decomposition like <code>U, S, Vh = svd(A)</code>. What name should the inner dimensions have? Does the user have to specify it?</p>

<p>I haven’t seen a nice solution. xarray doesn’t focus on linear algebra, so it’s not much of an issue there. A theoretical “DumPy with permanent names” <em>might</em> be very nice, but I’m not how it should work. This is worth thinking about more.</p>

<h3 id="what-about-julia-or-other-language">What about Julia or [other language]</h3>

<p>I like <a href="https://julialang.org/">Julia</a>! Loops are fast in Julia! But again, I don’t think fast loops matter that much, because I want to move all the loops to the GPU. So even if I was using Julia, I think I’d want to use a DumPy-type solution.</p>

<p>I think Julia might well be a better host language than Python, but it wouldn’t be because of fast loops, but because it offers much more powerful meta-programming capabilities. I built DumPy on top of JAX just because JAX is very mature and good at calling the GPU, but I’d love to see the same idea used in Julia (“Dulia”?) or other languages.</p>

<h2 id="prototype">Prototype</h2>

<p>OK, I promised a link to my prototype, so here it is: <a href="https://dynomight.net/img/dumpy/dumpy.py"><code>dumpy.py</code></a></p>

<p>It’s just a single file with around 700 lines. I’m leaving it as a single file because I want to stress that <strong>this is just something I hacked together in the service of this rant</strong>. I wanted to show that I’m not totally out of my mind, and that doing all this is actually pretty easy.</p>

<p>I stress that I don’t really intend to update or improve this. (Unless someone gives me a lot of money?) So please do not attempt to use it for “real work”, and do not make fun of my code.</p>

<p><em>PS.</em> DumPy works out of the box with both <a href="https://docs.jax.dev/en/latest/_autosummary/jax.jit.html"><code>jax.jit</code></a> and <a href="https://docs.jax.dev/en/latest/_autosummary/jax.grad.html"><code>jax.grad</code></a>. For gradients, you need to either cast the output to a JAX scalar or use the <code>dp.grad</code> wrapper.</p>

  </section>
  
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: Go deep into AI/LLMs or just use them as tools? (149 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=44079303</link>
            <guid>44079303</guid>
            <pubDate>Sat, 24 May 2025 07:05:46 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=44079303">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="44079303">
      <td><span></span></td>      <td><center><a id="up_44079303" href="https://news.ycombinator.com/vote?id=44079303&amp;how=up&amp;goto=item%3Fid%3D44079303"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=44079303">Ask HN: Go deep into AI/LLMs or just use them as tools?</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_44079303">105 points</span> by <a href="https://news.ycombinator.com/user?id=pella_may">pella_may</a> <span title="2025-05-24T07:05:46 1748070346"><a href="https://news.ycombinator.com/item?id=44079303">3 hours ago</a></span> <span id="unv_44079303"></span> | <a href="https://news.ycombinator.com/hide?id=44079303&amp;goto=item%3Fid%3D44079303">hide</a> | <a href="https://hn.algolia.com/?query=Ask%20HN%3A%20Go%20deep%20into%20AI%2FLLMs%20or%20just%20use%20them%20as%20tools%3F&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=44079303&amp;auth=07b696e93f6f3e8afff09888d039e6c6971f13bb">favorite</a> | <a href="https://news.ycombinator.com/item?id=44079303">58&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><div><p>I'm a software engineer with a solid full-stack background and web development. With all the noise around LLMs and AI, I’m undecided between two paths:</p><p>1. Invest time in learning the internals of AI/LLMs, maybe even switching fields and working on them</p><p>2. Continue focusing on what I’m good at, like building polished web apps and treat AI as just another tool in my toolbox</p><p>I’m mostly trying to cut through the hype. Is this another bubble that might burst or consolidate into fewer jobs long-term? Or is it a shift that’s worth betting a pivot on?</p><p>Curious how others are approaching this—especially folks who’ve made a similar decision recently.</p></div></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Valve takes another step toward making SteamOS a true Windows competitor (118 pts)]]></title>
            <link>https://arstechnica.com/gaming/2025/05/valve-adds-steamos-compatible-game-label-as-it-prepares-to-expand-beyond-steam-deck/</link>
            <guid>44078930</guid>
            <pubDate>Sat, 24 May 2025 05:20:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/gaming/2025/05/valve-adds-steamos-compatible-game-label-as-it-prepares-to-expand-beyond-steam-deck/">https://arstechnica.com/gaming/2025/05/valve-adds-steamos-compatible-game-label-as-it-prepares-to-expand-beyond-steam-deck/</a>, See on <a href="https://news.ycombinator.com/item?id=44078930">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                      
                      
          <p>We've known for months now that Valve is expanding its Linux-based SteamOS operating system beyond the Steam Deck to other handheld PCs, starting with <a href="https://arstechnica.com/gaming/2024/08/valves-bespoke-steam-deck-os-will-be-officially-available-on-asus-rog-ally/">some versions of the Asus ROG Ally</a>. This week, Valve began making some changes to its Steam storefront to prepare for a future when the Deck isn't the only hardware running SteamOS.</p>
<p>A new "<a href="https://steamcommunity.com/groups/steamworks/announcements/detail/532097310616717411">SteamOS Compatible</a>" label will begin rolling out "over the next few weeks" to denote "whether a game and all of its middleware is supported on SteamOS," including "game functionality, launcher functionality, and anti-cheat support." Games that don't meet this requirement will be marked as "SteamOS Unsupported." As with current games and the Steam Deck, this label doesn't mean these games won't run, but it does mean there may be some serious compatibility issues that keep the game from running as intended.</p>
<p>Valve says that "over 18,000 titles on Steam [will] be marked SteamOS compatible out of the gate," and that game developers won't need to do anything extra to earn the label if their titles already support the Steam Deck.</p>
<figure>
    <p><img width="1462" height="779" src="https://cdn.arstechnica.net/wp-content/uploads/2025/05/steamos-compatible.png" alt="" decoding="async" loading="lazy" srcset="https://cdn.arstechnica.net/wp-content/uploads/2025/05/steamos-compatible.png 1462w, https://cdn.arstechnica.net/wp-content/uploads/2025/05/steamos-compatible-640x341.png 640w, https://cdn.arstechnica.net/wp-content/uploads/2025/05/steamos-compatible-1024x546.png 1024w, https://cdn.arstechnica.net/wp-content/uploads/2025/05/steamos-compatible-768x409.png 768w, https://cdn.arstechnica.net/wp-content/uploads/2025/05/steamos-compatible-980x522.png 980w, https://cdn.arstechnica.net/wp-content/uploads/2025/05/steamos-compatible-1440x767.png 1440w" sizes="auto, (max-width: 1462px) 100vw, 1462px">
                  </p>
          <figcaption>
        <div>
    
    <p>
      The "SteamOS Compatible" designation that will show up for non-Steam-Deck SteamOS users.

              <span>
          Credit:

          
          Valve

                  </span>
          </p>
  </div>
      </figcaption>
      </figure>

<p>SteamOS uses a collection of app translation technologies called Proton to make unmodified Windows applications run on SteamOS. This technology has dramatically improved SteamOS's game compatibility, compared to older SteamOS versions that required games to support Linux natively, but it still can't support every single game that Windows does.</p>

          
                      
                  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to Make a Living as a Writer (153 pts)]]></title>
            <link>https://thewalrus.ca/how-to-make-a-living-as-a-writer/</link>
            <guid>44078813</guid>
            <pubDate>Sat, 24 May 2025 04:36:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thewalrus.ca/how-to-make-a-living-as-a-writer/">https://thewalrus.ca/how-to-make-a-living-as-a-writer/</a>, See on <a href="https://news.ycombinator.com/item?id=44078813">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-180098">

	
	
	
	<div>
		<!-- Ad-Auris -->
		
		<p><span>W</span><span>hen people</span> ask what I do for a living, I’m faced with two choices: either I can lie or I can bore them with the truth, which is too complicated to explain succinctly. While those around me have normal, definable jobs—accountant, journalist, engineer—my work requires headings and subheadings to get it across properly: a map of overlapping gigs and contracts.</p>

<p>“What do you do?” It’s a simple question that often gets asked on first dates. No matter how much I pare down my reply, it’s always long winded.</p>
<p>“Well, I’m a freelancer,” I start, “so I have a million little jobs . . .”</p>
<p>The first of my million little jobs is what I call “Horse News.” It works like this: every weekday, I wake up at 6 a.m. and make my way to my desk, stumbling and still half asleep. I flick on an old lamp and wince as my eyes adjust to the light. I turn on my computer and use a piece of software that shows me all of the American horse racing–related news from the past twenty-four hours. It pulls up radio clips, Fox News segments, and articles from publications called <em>BloodHorse</em> or <em>Daily Racing Form</em>—anything that could be relevant to my interests.</p>
<p>I sift through countless story summaries, many of which sound fake. <em>Army Wife defeats Crazy Beautiful Woman in race! Another doping scandal emerges in Northern California! A disgraced-but-very-good trainer is no longer banned from the track! A famous YouTuber has invested millions into a betting app!</em> I compile the important stuff into a newsletter: stories about track renovations, big events, the series of horse laws that were passed, then repealed, then approved again in 2023. </p>

<p>This is a true, real thing. These laws (known as the Horseracing Integrity and Safety Act) are meant to keep racehorses and jockeys safer. Tracks are required to provide on-site vets and doctors and to follow standardized safety protocols. But it is much cheaper, it turns out, to ignore the laws and have the horses race in dangerous conditions. Vets and safety gear are expensive, which is upsetting to the billionaires who own the racetracks. And so certain states have fought these laws, calling them unconstitutional. I have followed along, every step of the way.</p>

<p>When the newsletter is finished, I send it to my client, a company that owns racetracks across the US. Though, to be clear, I don’t work for them directly. I work for a reputation management firm. This company’s entire purpose is to monitor the news for other companies, keeping tabs on what the public is saying about their clients and the major trends in those industries. I didn’t know this was a real job until I started doing it.</p>
<p>I got this job the way I’ve gotten most of my jobs: through an acquaintance who heard I was looking for work. This is key to success in freelancing. You just need to build a roster of industry connections who know how desperate you are.</p>
<p>“It’s just an hour per morning,” she told me. “Usually less.”</p>
<p>“Sure,” I said, still not understanding what I was agreeing to. “I’ll do it.”</p>

<p>The reputation management firm has a slew of different clients, each of whom wants a personalized newsletter about their industry. There’s a fast food chain, a brewery, an environmental organization. But I was assigned to the horse racing client. And so I keep up with Horse News and Horse Laws. By 7:30 a.m., the report is done, and I go back to bed.</p>
<p>Horse News makes me feel like a bad person sometimes. Racing is an odd, archaic, and often cruel sport. The more I read about it, the more convinced I become that it should not exist. I root for Horse Laws and grow sad when a state bucks them. The thing about Horse News, though, is that someone has to compile it. It might as well be me.</p>
<figure id="attachment_180108" aria-describedby="caption-attachment-180108"><a href="https://thewalrus.ca/how-to-make-a-living-as-a-writer/attachment/drolet_horsenews/" rel="attachment wp-att-180108"><img fetchpriority="high" decoding="async" src="https://walrus-assets.s3.amazonaws.com/img/Drolet_HorseNews-scaled.jpeg" data-src="https://walrus-assets.s3.amazonaws.com/img/Drolet_HorseNews-scaled.jpeg" alt="" width="1600" height="1459" data-srcset="https://walrus-assets.s3.amazonaws.com/img/Drolet_HorseNews-scaled.jpeg 1600w, https://walrus-assets.s3.amazonaws.com/img/Drolet_HorseNews-1536x1401.jpeg 1536w, https://walrus-assets.s3.amazonaws.com/img/Drolet_HorseNews-2048x1868.jpeg 2048w" data-sizes="(max-width: 1600px) 100vw, 1600px" srcset="https://walrus-assets.s3.amazonaws.com/img/Drolet_HorseNews-scaled.jpeg 1600w, https://walrus-assets.s3.amazonaws.com/img/Drolet_HorseNews-1536x1401.jpeg 1536w, https://walrus-assets.s3.amazonaws.com/img/Drolet_HorseNews-2048x1868.jpeg 2048w"></a><figcaption id="caption-attachment-180108">Cartoon by Garbrielle Drolet</figcaption></figure>
<p><span>I</span><span> got the</span> offer to do Horse News not long after I moved to Montreal, at a time when I needed work more than ever.  </p>
<p>I was twenty-four and a full-time adult now, tasked with the question of how I planned to fill my time and make a living. </p>
<p>A year and a half earlier, when I’d finished my undergraduate studies in English and creative writing, I had immediately enrolled in another creative writing program. I wish I could say this was entirely because I was devoted to my craft or that it was my life’s dream to write a book, but that’s only a small part of the truth. The main reason I joined a master’s program was that I didn’t want to face what life would look like once I was no longer a student.</p>
<p>As I’d gotten closer to finishing my undergrad, I kept getting asked what came next. For years, the question “What are you going to do when you grow up?” had been answered the same way: I’m going to be a writer. This was an answer that adults found cute when I was a child and concerning as I got older. A writer, they echoed, mulling the word over slowly. <em>Interesting</em>. By the time I got to university, it was an answer that felt downright unacceptable. Sharing dreams about writing for a living elicited looks of mingled confusion and pity. <em>A writer?</em></p>
<p>I understood that being a writer was fraught. I understood that it was a hard way to make a living. There were no jobs in the industry, and books didn’t sell for as much as they used to. And so the question of what I wanted to do after graduating was one that made me physically sick, because I didn’t know what being a writer meant either.</p>
<p>So I decided the solution was grad school. If anyone dared to ask me what I was doing after that, I could shrug and tell them I had a few more years to think about it.</p>
<p>My plan worked for a year, though not exactly as expected. </p>
<p>First, the pandemic hit, and I moved to Nova Scotia with my now ex-girlfriend. Then, I became disabled. </p>

<p>I developed a nerve condition that became chronic. Pain had spread through my neck, my arms, my hands. When it first started, I couldn’t type at all. I had to re-adjust every aspect of my life: how I cooked, how I brushed my teeth, and how I worked. </p>
<p>By my second year in the program, I had moved to Toronto, but I was still struggling with voice-to-text and barely able to keep up with basic assignments. The thought of writing a thesis—an entire book—felt impossible. I was also writing freelance articles on the side to help pay my rent, and I simply couldn’t do both, mentally or physically. Forced to choose between work and school, I chose work. So I took medical leave, saying I would return in a year but unsure if I actually would.</p>
<p>Leaving school meant I had to face the question of who I was if I wasn’t a student—much earlier than anticipated. Without a schedule filled with classes to attend and readings to do, I was just a person with an empty calendar and one and a half arts degrees.</p>
<p>“What’re you going to do now?” a friend asked over beers at a Mexican restaurant in downtown Toronto. </p>
<p>I dragged a chip through guacamole. “I don’t know, to be honest. I mean, I’ll work, obviously.”</p>
<p>“I’m sure you could get an office job somewhere,” she said. “Or go back to being a barista, maybe.”</p>
<p>People kept suggesting jobs to me like this: Why don’t you just become a barista? A cashier? A secretary? Every time, it was a sharp reminder of how little they understood my physical limitations. <em>I’m too disabled for that</em>, I wanted to say.</p>
<p>I held my tongue, but it was true. My pain was so crippling at this point that I struggled to perform basic tasks around the house. I knew I was no longer able to do most of the jobs I’d had in high school or when I was an undergrad: I couldn’t work as a barista, my forearms too weak to tamp down espresso grounds; nor in retail, nor as a waitress, as the weight of my own dinner plate at home was enough to make me wince with pain. </p>
<p>As I scrolled through job postings for office work, I knew a nine-to-five wasn’t feasible either. I needed the kind of flexibility a job like that wouldn’t allow: the ability to take long breaks when I was in too much pain, to shift deadlines, to use tedious and time-consuming adaptive technology. Back then, I was in so much pain that I could barely use a mouse, commanding my entire computer with my voice. <em>Open Google Chrome. New tab</em>. Copy that. Paste that. In addition to being annoying in an office setting, it just wasn’t fast enough.</p>
<p>“I think I’ll just write,” I told my friend. “Like I’ve been doing, but full time.”</p>

<p>She blinked at me. “Will that be enough?”</p>
<p>I understood the question. I’d enjoyed the freelance writing I’d done, mostly penning articles about health and pop culture for Canadian outlets and the odd American one. It paid poorly and inconsistently.</p>
<p>For a long time, I’d thought of this freelance work as a stepping stone to a real job as a writer or an editor, with a salary and benefits. Now it seemed like going all in on freelancing was my only real career option. It was the only way, I thought, that I could truly work on my own schedule and tend to my needs without falling short of employer expectations.</p>
<p>“I’ll manage. It’ll work out, I’m sure of it.” I’d never been less sure of anything.</p>
<p>In the following weeks, I launched myself into freelancing, pitching an endless stream of articles and essays to my editors. I was lucky to have a few people who championed my work and encouraged me to send them my ideas. I’d never met any of them in person, which was strange; they felt fake to me, just email addresses that provided me with opportunities and paycheques. There had been even more in the past—editors I’d worked with and felt comfortable reaching out to—but many had faded away, either leaving the industry or simply starting to ignore my emails. </p>
<p>As I started writing more freelance pieces, I was, in a way, living the life I’d always wanted. I was a writer. It was my actual job. I balanced deadlines, rotating between articles and editors. I sent out more and more pitches. I worked late into the night, fuelled by instant coffee and bad music.</p>
<p>It wasn’t enough. The number of pitches I was landing couldn’t comfortably sustain me. And it often took ages for me to get paid for my work. A fully written article might be put on hold—it would sit and collect virtual dust, and I wouldn’t be paid until it was published. I knew I needed more consistent work. I longed for some sort of paycheque I could rely on month to month. My savings dwindled as I paid for rent, pricey physiotherapy appointments, and adaptive tools. I moved to Montreal, where the cost of living was lower, but I still struggled to get by.</p>
<p>This was when Horse News entered my life. As I settled into my new city, I was shown the ropes of this strange job: how to use the monitoring software, how to identify stories worth including in the newsletter, who the big players in Horse World were. I was promised hourly pay, with a lump sum deposited into my account at the end of each month. And I suddenly became aware of the possibility of odd jobs that were writing adjacent—the kind of unglamorous work that would pay the bills while allowing me to keep writing on my own schedule. </p>
<p><span>I</span><span>n the coming</span> months, other odd jobs entered and exited my roster. I wrote Instagram captions for a hospital foundation. I wrote online content for a bank (which always paid me late and said it was because they couldn’t figure out how to transfer the money, which made me grateful they were not my bank). Importantly, I wrote a column where I recapped episodes of <em>The Bachelorette</em>. I was constantly writing some odd articles for different publications. Throughout all of this, Horse News was the only stable work I had. Every weekday, without fail, the horses raced on, and I compiled my newsletter.</p>
<p>As new opportunities presented themselves, I found myself unable to say no to work. No matter how busy I was or how strange the job was, I accepted every single offer that came my way, worried the gigs would eventually dry up.</p>

<p>In early summer, as Montreal’s unbearably cold season gave way to an unbearably hot one, I got a text from a friend. She worked at a major Canadian newspaper, which, she said, wasn’t paying her enough. She’d taken on a side gig to compensate for the poor salary. She’d heard I was looking for work and thought I might be interested.</p>
<p>“What is it?” I texted.</p>
<p>“Writing erotica,” she answered.</p>
<p>The next week, I had a Zoom meeting with someone who worked at the company. She was young, in her late twenties, with pink cheeks and glossy blonde hair. She explained that she needed writers for an app she was running that was like a choose-your-own-adventure story, only hornier. Users, mostly women, would select a story and start reading. They were all written in the second person, placing users in the protagonist’s shoes: “You walk into a restaurant . . . You see a hot guy sitting at the bar . . . What will you do next?” They were then presented with two choices.</p>
<p>One would be boring (ignore the guy!), and the other would be depraved (ask him to go back to your place and [redacted]!). Choosing depravity cost $0.99.</p>
<p>These stories were long, most of them basically novels.</p>
<p>New chapters came out every week, each instalment getting increasingly risqué. This was a business strategy: users became invested in a story and were then charged money to read the new material.</p>
<p>“Do you think you’d be able to keep up with it?”</p>
<p>“I think so.”</p>
<p>I agreed to write one or two chapters per week. Each would be around 4,000 words long, and the story would ultimately have at least twenty chapters. I would get paid $120 (US) for each chapter.</p>

<p>If I had done the math or thought about this critically, I’d have realized this was a very bad idea. It was a monumental amount of work and creative energy to expend for pretty poor pay, especially as someone who couldn’t type much. Unfortunately, I was distracted by how fun the work sounded. Like many young women who grew up with the internet, I had lived through the days of reading whatever perverted and poorly written erotica I could find about my favourite fictional characters online. The prospect of now becoming a professional erotica writer was too enticing to turn down. Plus, if my friend was balancing full-time newspaper work with this, how hard could it be?</p>
<p>The woman who would become my editor nodded.</p>
<p>“The categories that perform best right now are domination, stepbrother, and campus stuff. You know, student–teacher situations?” She looked through a printout of figures. </p>
<p>“Vampire and werewolf stories are making a resurgence too.”</p>
<p>I jotted this down in a notebook, my handwriting messy and quick. <em>Campus, werewolf, domination</em>. “Got it.”</p>
<p>“By the way, the app store won’t let us use the words penis, vagina, or cock,” she said flatly.</p>
<p>“Oh,” I said. “Why not?”</p>
<p>“Terms of service stuff.”</p>
<p>“Got it.”</p>
<p>“Read a few of the stories for inspiration on how to work around this. You’ll get the hang of it.”</p>

<p>“Right.”</p>
<p>“People get really creative. Fruit works, sometimes.”</p>
<p>“Fruit?”</p>
<p>“You’ll see what I mean,” she said. “And you’ll need a pen name. Unless you want to use your own?”</p>
<p>I shook my head. “I’ll find a pen name.”</p>
<p>That afternoon, I sat on my friends’ balcony. I told them about my new job, which would somehow slot in alongside all the other jobs I was doing. It was one of the first truly warm days of summer, and we were determined to spend the entire thing outside. Between sips of iced coffee, we plotted out my story chapter by chapter, my friends enthusiastic about its trajectory.</p>
<p>“Maybe she can hook up with her roommate?” I suggested.</p>
<p>“Yes, that’s great,” John said. “Make it a love triangle.”</p>
<p>He dragged a finger through the air, drawing a triangle.</p>
<p>“I can’t believe you’re writing porn,” Maria said, leaning back in a wooden folding chair. “How fun.”</p>

<p>“Not porn. Erotica.”</p>
<p>“Same difference,” John said. He pulled the notes I’d scrawled toward him and squinted. “Okay, what happens next?”</p>
<p>By the end of the day, John and I had plotted out an entire story arc: the student and the TA’s tumultuous affair, the way they were almost found out, the forces that almost pulled them apart. Ultimately, love and sex brought them back together.</p>
<p>“This is basically an entire romance novel,” John said.</p>
<p>“Smuttier, though.”</p>
<p>“Of course.”</p>
<p>“And worse.”</p>
<p>Maria spent the day brainstorming pen-name ideas, which she would occasionally pipe up to suggest. “Madame Scarlett?” “Delilah Rose?” “Candy Mae?” “Jolene Fox?” “What kind of vibe are you looking for, anyways?”</p>
<p>Now, my days looked like this: I woke up at 6 a.m. and did Horse News; I hammered out whatever freelance writing assignment I was working on; I wrote erotica; I ended my workday around 5 p.m., tired and achy.</p>
<p>In the coming months, I sat in my hot, not air-conditioned apartment, sweating and damp, and wrote between 3,500 and 8,000 words of smut per week. Since I was doing this with voice-to-text, I had to keep my windows closed, mortified at the thought of my neighbours hearing me speak vile things into my computer: words like member, length, girth, and sometimes the names of fruit.</p>

<p>I worked on one story throughout the whole summer.</p>
<p>On weeks when, for whatever reason, I couldn’t keep up—say, my hands were worse than usual or I got too busy with other work—my boss at the app was understanding.</p>
<p>“Your health is more important than this,” she would say. <em>Rest</em>. It was the most compassion I’d ever gotten from an employer, which was nice but also annoying. Part of me hoped to be fired, freed entirely from my contract. But no—these people were, unfortunately, sweet and thoughtful.</p>
<p>Within a few weeks, I had come to hate the work. Though it was fun in the beginning, it quickly lost its charm, the sex scenes becoming tedious and exhausting once they were no longer new to me.</p>
<p>“There are only so many ways to write ‘they had sex,’ you know?” I told Maria one day.</p>
<p>She shook her head. “I really don’t.”</p>
<p>The biggest problem was just that I was overworked. Writing that much sapped all of my creative and physical energy, leaving me unwilling or unable to write much else.</p>
<p>When I neared the final chapter, my friends and I sat around with a bottle of wine and celebrated the fact that my life as an erotica writer was almost done. They suggested words and phrases I should try to sneak into the final chapter as a little personal challenge: cornucopia, sledgehammer, pumpernickel, Seinfeld, Donna Tartt, the Watergate scandal.</p>
<p>Maria squinted at John. “That last one is too silly,” she said. “She won’t be able to manage it.”</p>
<p>“Have faith,” I said.</p>

<p>I managed them all, laughing along the way as I tweaked the story to include them.</p>
<p>By the time it was done, I’d written over 70,000 words of smut. My editor asked if I wanted to renew my contract, and I declined. She insisted, saying we could alter the work schedule, maybe even up my pay by another $5 per chapter.</p>
<p>My story, she revealed, was gaining a devoted following, quickly becoming one of the most popular on the app. This felt nice—my anonymous magnum opus. Still, I said no.</p>
<p>As time passed in Montreal and I did more odd jobs, my hands got marginally better. This meant that, as long as I was very careful and worked within a strict set of limitations, there was one more type of work that became available to me again: cartooning.</p>
<p>I’d loved drawing since I was a kid. Growing up, I drew countless pictures of animals (especially birds), carefully copying them from the books I begged my mom to buy me.</p>
<p>When my pain first started in 2021 and I realized I would have to take a months-long break from drawing, it was a particularly tough blow. Drawing wasn’t as big a part of my income or my identity as writing was, but it still mattered to me immensely. What felt worse was the fact that, a month before I lost the ability to draw, I’d sold my first cartoon to <em>The New Yorker</em>—an accomplishment I’d worked toward for years, and which I worried I might never be able to repeat.</p>
<p>Now, in my very ergonomic home office, I could draw again (though I needed to set a timer beforehand to make sure I didn’t work for more than twenty minutes at a time).</p>
<p>When the timer went off, I’d stand and stretch and take a break. I limited the number of projects I took on so I wouldn’t overdo it. However, every now and then, I pitched a cartoon to <em>The New Yorker</em> or accepted a commission request for a portrait of someone’s dog.</p>
<p>Cartooning became a very small part of the tapestry of odd jobs that came together to make up an income. But it was one I was happy to be able to include.</p>
<p><span>O</span><span>n dates</span>, I try to condense this all into a short spiel. <em>I’m a writer. I do Horse News. I’m a copywriter. I also draw cartoons, sometimes, but that’s neither here nor there. Even this has omissions, but it’s the best I can do</em>.</p>

<p>“Wouldn’t you rather just have a normal job?” one date—a lawyer—asked.</p>
<p>It’s something I’ve wondered myself. Sometimes, looking at overlapping assignments and deadlines on my Google calendar, I feel overwhelmed and exhausted. But when I’m in pain, I can take a break in the middle of the day or even go back to bed if I need to.</p>
<p>“This suits me best,” I said.</p>
<p>I ended that date early, as I do with all weekday dates. I have a great excuse: <em>Horse News is due at 7:30 a.m. tomorrow morning</em>.</p>
<p><em>Excerpted from</em> <a href="https://www.penguinrandomhouse.ca/books/760991/look-ma-no-hands-by-gabrielle-drolet/9780771019142">Look Ma, No Hands</a> <em>by Gabrielle Drolet. Copyright © 2025 Gabrielle Drolet. Published by McClelland &amp; Stewart, a division of Penguin Random House Canada Limited. Reproduced by arrangement with the publisher. All rights reserved.</em></p>
<!-- AI CONTENT END 1 -->
		<div id="sexy_author_bio_widget-2"><p><a href="https://thewalrus.ca/author/gabrielle-drolet/" target="_top"><img alt="Gabrielle Drolet" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2070%2070'%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/80380f26cd399c63cc449337051d117b?s=70&amp;d=mm&amp;r=pg" data-srcset="https://secure.gravatar.com/avatar/80380f26cd399c63cc449337051d117b?s=140&amp;d=mm&amp;r=pg 2x" height="70" width="70" decoding="async"></a></p><p>Gabrielle Drolet is a Montreal-based writer and cartoonist whose work has appeared in the <em>New York Times</em>, the <em>Globe and Mail</em>, <em>The New Yorker</em>, and other publications.</p></div>	</div><!-- .entry-content -->

	
	<!-- .entry-footer -->

		
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why Algebraic Effects? (243 pts)]]></title>
            <link>https://antelang.org/blog/why_effects/</link>
            <guid>44078434</guid>
            <pubDate>Sat, 24 May 2025 03:00:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://antelang.org/blog/why_effects/">https://antelang.org/blog/why_effects/</a>, See on <a href="https://news.ycombinator.com/item?id=44078434">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-content">
                          
<p>Algebraic effects<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup> (a.k.a. effect handlers) are a very useful up-and-coming feature that I personally think will see a huge surge in popularity in the programming
languages of tomorrow. They’re one of the core features of Ante, as well as being the focus of many research
languages including <a href="https://koka-lang.github.io/koka/doc/index.html">Koka</a>, <a href="https://effekt-lang.org/">Effekt</a>, <a href="https://www.eff-lang.org/">Eff</a>,
and <a href="https://flix.dev/">Flix</a>. However, while many articles or documentation snippets try to explain <em>what</em> effect handlers are (including
<a href="https://antelang.org/docs/language#algebraic-effects">Ante’s own documentation</a>), few really go in-depth on <em>why</em> you would want to use them.
In this post I’ll explain exactly that and will include as complete a list as possible on all the use-cases of algebraic effects.</p>
<h2 id="a-note-on-syntax-and-semantics">A Note on Syntax and Semantics</h2>
<p>I’ll be using Ante pseudocode for much of this article. If you’re not familiar with effect handlers or Ante I encourage you to read the documentation link
above or read from any of the other effectful languages for a good head start! But I recognize it’s hard to get buy-in to learn something before showing
why it is useful first (hence this blog post!). So I’ll give a quick elevator pitch on a good mental model to think about effects.</p>
<p>You can think of algebraic effects essentially as exceptions that you can resume. You can declare an effect function:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>effect</span> <span>SayMessage</span> <span>with</span>
    <span>// This effect function takes a Unit type and returns a Unit type.</span>
    <span>// Note that `Unit` is roughly the same as `void` in imperative languages.</span>
    <span>// There are differences between them but none that are relevant here.</span>
    <span>say_message</span><span>:</span> <span>Unit</span> <span>-&gt;</span> <span>Unit</span>
</code></pre></div><p>You can “throw” an effect by calling the function, and the function you’re in must declare it can use that effect similar to checked exceptions:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>foo</span> <span>()</span> <span>can</span> <span>SayMessage</span> <span>=</span>
    <span>say_message</span> <span>()</span>
    <span>42</span>
</code></pre></div><p>And you can “catch” effects with a <code>handle</code> expression (think of these as <code>try/catch</code> expressions):</p>
<div><pre tabindex="0"><code data-lang="ante"><span>handle</span> <span>foo</span> <span>()</span>
<span>|</span> <span>say_message</span> <span>()</span> <span>-&gt;</span>
    <span>print</span> <span>"Hello World!"</span>  <span>// print out Hello World!</span>
    <span>resume</span> <span>()</span>             <span>// then resume the computation, returning 42</span>
</code></pre></div><p>If you have further questions I again encourage you to read <a href="https://antelang.org/docs/language#algebraic-effects">some documentation</a> on effects, but now
that we can recognize effects when they’re used I’ll get into why exactly the idea of exceptions-you-can-resume are so useful!</p>
<hr>
<h2 id="user-defineable-control-flow">User-defineable control-flow</h2>
<p>The most common reason you’ll hear for why to have effect handlers is that they are a single language feature which
allow for implementing what would normally be multiple separate language features (generators, exceptions, async, coroutines, etc)
as libraries. Moreover, they solve the <a href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">what color is your function</a>
problem by making functions polymorphic over effects. For example, a <code>map</code> function for vectors (growable arrays) can be written once:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>map</span> <span>(</span><span>input</span><span>:</span> <span>Vec</span> <span>a</span><span>)</span> <span>(</span><span>f</span><span>:</span> <span>a</span> <span>-&gt;</span> <span>b</span> <span>can</span> <span>e</span><span>)</span><span>:</span> <span>Vec</span> <span>b</span> <span>can</span> <span>e</span> <span>=</span>
    <span>// Implementation omitted!</span>
</code></pre></div><p>This function’s signature says that the input function <code>f</code> can perform <em>any</em> effect(s) <code>e</code>, and that
<code>map</code> will perform those same effects <code>e</code>. So we can instantiate this with an <code>f</code> that prints to stdout,
an <code>f</code> that calls asynchronous functions, an <code>f</code> that yields elements into a stream, etc. Most languages
with effect handlers will let you omit the polymorphic effect variable <code>e</code> as well, giving us the
old, familiar signature for <code>map</code>:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>map</span> <span>(</span><span>input</span><span>:</span> <span>Vec</span> <span>a</span><span>)</span> <span>(</span><span>f</span><span>:</span> <span>a</span> <span>-&gt;</span> <span>b</span><span>)</span><span>:</span> <span>Vec</span> <span>b</span> <span>=</span>
    <span>// Implementation omitted!</span>
</code></pre></div><p>Ok, back to the topic though. Effect handlers are cool because we can implement generators, exceptions, coroutines,
<a href="https://effekt-lang.org/docs/casestudies/ad">automatic differentiation</a>, and much more with them. Surely such
constructs are difficult to implement, requiring low-level knowledge though, right? Nope. Most of these are pretty
straightforward actually.</p>
<p>Let’s consider exceptions. Remember when I described algebraic effects as resumeable exceptions? This actually works
pretty well as a hint on how to implement exceptions via effects. How do we do it? Just don’t <code>resume</code> the effect when it is thrown:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>effect</span> <span>Throw</span> <span>a</span> <span>with</span>
    <span>throw</span><span>:</span> <span>a</span> <span>-&gt;</span> <span>never_returns</span>

<span>safe_div</span> <span>x</span> <span>y</span> <span>=</span>
    <span>if</span> <span>y</span> <span>==</span> <span>0</span> <span>then</span>
        <span>throw</span> <span>"error: Division by zero!"</span>

    <span>x</span> <span>/</span> <span>y</span>

<span>// Output: "error: Division by zero!"</span>
<span>handle</span> 
    <span>safe_div</span> <span>5</span> <span>0</span>
    <span>print</span> <span>"successfully divided by zero"</span> <span>// we never get to this point</span>
<span>|</span> <span>throw</span> <span>msg</span> <span>-&gt;</span>
    <span>print</span> <span>msg</span>
</code></pre></div><p>How about something more advanced? Surely generators must be more difficult? Well, a little but the code still fits
onto a sticky note:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>effect</span> <span>Yield</span> <span>a</span> <span>with</span>
    <span>yield</span><span>:</span> <span>a</span> <span>-&gt;</span> <span>Unit</span>

<span>yield_all_elements_of_vec</span> <span>(</span><span>vec</span><span>:</span> <span>Vec</span> <span>a</span><span>)</span><span>:</span> <span>Unit</span> <span>can</span> <span>Yield</span> <span>a</span> <span>=</span>
    <span>vec</span><span>.</span><span>for_each</span> <span>fn</span> <span>elem</span> <span>-&gt;</span>
        <span>yield</span> <span>elem</span>

<span>// To filter a generator we're going to take in a generator function to filter</span>
<span>// as well as a predicate to tell us which elements to keep</span>
<span>filter</span> <span>(</span><span>generator</span><span>:</span> <span>Unit</span> <span>-&gt;</span> <span>Unit</span> <span>can</span> <span>Yield</span> <span>a</span><span>)</span> <span>(</span><span>predicate</span><span>:</span> <span>a</span> <span>-&gt;</span> <span>Bool</span><span>)</span><span>:</span> <span>Unit</span> <span>can</span> <span>Yield</span> <span>a</span> <span>=</span>
    <span>handle</span> <span>generator</span> <span>()</span>
    <span>|</span> <span>yield</span> <span>x</span> <span>-&gt;</span>
        <span>// when `generator` yields us an element, re-raise it if `predicate` returns true for it</span>
        <span>if</span> <span>predicate</span> <span>x</span> <span>then</span>
            <span>yield</span> <span>x</span>
        <span>resume</span> <span>()</span>  <span>// continue yielding elements</span>

<span>// Finally, lets add a helper function for applying a function to each yielded element</span>
<span>my_for_each</span> <span>(</span><span>generator</span><span>:</span> <span>Unit</span> <span>-&gt;</span> <span>Unit</span> <span>can</span> <span>Yield</span> <span>a</span><span>)</span> <span>(</span><span>f</span><span>:</span> <span>a</span> <span>-&gt;</span> <span>Unit</span><span>)</span><span>:</span> <span>Unit</span> <span>=</span>
    <span>handle</span> <span>generator</span> <span>()</span>
    <span>|</span> <span>yield</span> <span>x</span> <span>-&gt;</span>
        <span>f</span> <span>x</span>
        <span>resume</span> <span>()</span>

<span>// Let's use it!</span>
<span>yield_all_elements_of_vec</span> <span>(</span><span>Vec</span><span>.</span><span>of</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>])</span>
    <span>// `with` is sugar to apply effect handler functions</span>
    <span>with</span> <span>filter</span> <span>(</span><span>fn</span> <span>x</span> <span>-&gt;</span> <span>x</span> <span>%</span> <span>2</span> <span>==</span> <span>0</span><span>)</span>
    <span>with</span> <span>my_for_each</span> <span>print</span>  <span>// prints 2 then 4</span>
</code></pre></div><p>You can similarly implement a cooperative scheduler with a <code>yield: Unit -&gt; Unit</code> effect which
yields control back to a handler which switches execution to another function. <a href="https://effekt-lang.org/docs/casestudies/scheduler">Here’s an example</a>
of that in Effekt.</p>
<p>Basically, algebraic effects get you a lot of expressivity in your language, and as a bonus these different
effects compose well with each other. We’ll get into this more later but algebraic effects composing well
is a huge usability win over other effect abstractions.</p>
<hr>
<h2 id="as-an-abstraction">As an Abstraction</h2>
<p>Okay, now that the really flashy stuff is out of the way I want to go over some less obvious benefits of algebraic effects.
Since discussion on effects can often seem like they’re <em>only</em> for implementing generators, exceptions, async, etc., I want to
highlight that even if you don’t personally care for these features, there are still good reasons to use algebraic effects
in your run of the mill business application.</p>
<p>One reason to use them in such an application is that effects can be used for <em>dependency injection</em>. Let’s assume
we have code that touches a database:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>business_logic</span> <span>(</span><span>db</span><span>:</span> <span>Database</span><span>)</span> <span>(</span><span>x</span><span>:</span> <span>I32</span><span>)</span> <span>=</span>
    <span>db</span><span>.</span><span>query</span> <span>"..."</span>
    <span>db</span><span>.</span><span>query</span> <span>"..."</span>
    <span>db</span><span>.</span><span>query</span> <span>"..."</span>
    <span>x</span> <span>*</span> <span>2</span>
</code></pre></div><p>This is all well and fine until we want to use a different database, restrict access to this database, or you know, actually
test these functions. What we can do is move the database to an effect:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>effect</span> <span>Database</span> <span>with</span>
    <span>query</span><span>:</span> <span>String</span> <span>-&gt;</span> <span>DbResponse</span>

<span>business_logic</span> <span>(</span><span>x</span><span>:</span> <span>I32</span><span>)</span> <span>can</span> <span>Database</span> <span>=</span>
    <span>query</span> <span>"..."</span>
    <span>query</span> <span>"..."</span>
    <span>query</span> <span>"..."</span>
    <span>x</span> <span>*</span> <span>2</span>
</code></pre></div><p>Now we can swap out the specific database used further up the call stack (let’s say in <code>main</code>) with a different database,
or even with a mock database for testing:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>mock_database</span> <span>(</span><span>f</span><span>:</span> <span>Unit</span> <span>-&gt;</span> <span>a</span> <span>can</span> <span>Database</span><span>)</span><span>:</span> <span>a</span> <span>=</span>
    <span>handle</span> <span>f</span> <span>()</span>
    <span>|</span> <span>query</span> <span>_msg</span> <span>-&gt;</span>
        <span>// Ignore the message and always return Ok</span>
        <span>resume</span> <span>DbResponse</span><span>.</span><span>Ok</span>

<span>test_business_logic</span> <span>()</span> <span>=</span>
    <span>// Apply the `mock_database` handler to the rest of the function</span>
    <span>with</span> <span>mock_database</span>

    <span>assert</span> <span>(</span><span>business_logic</span> <span>0</span> <span>==</span> <span>0</span><span>)</span>
    <span>assert</span> <span>(</span><span>business_logic</span> <span>1</span> <span>==</span> <span>2</span><span>)</span>
    <span>assert</span> <span>(</span><span>business_logic</span> <span>21</span> <span>==</span> <span>42</span><span>)</span>
    <span>// etc</span>
</code></pre></div><p>We can even redirect print outs into a string:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>output_messages</span> <span>()</span><span>:</span> <span>U32</span> <span>can</span> <span>Print</span> <span>=</span>
    <span>print</span> <span>"Hello!"</span>
    <span>print</span> <span>"Not sure what to write here, honestly"</span>
    <span>1234</span>

<span>// Collect `print` calls into a single string, separating each with newlines</span>
<span>print_to_string</span> <span>(</span><span>f</span><span>:</span> <span>Unit</span> <span>-&gt;</span> <span>a</span> <span>can</span> <span>Print</span><span>)</span><span>:</span> <span>a</span><span>,</span> <span>String</span> <span>can</span> <span>Print</span> <span>=</span>
    <span>mut</span> <span>all_messages</span> <span>=</span> <span>""</span>

    <span>handle</span>
        <span>result</span> <span>=</span> <span>f</span> <span>()</span>
        <span>result</span><span>,</span> <span>all_messages</span>
    <span>|</span> <span>print</span> <span>msg</span> <span>-&gt;</span>
        <span>all_messages</span> <span>:=</span> <span>all_messages</span> <span>++</span> <span>"</span><span>\n</span><span>"</span> <span>++</span> <span>msg</span>
        <span>resume</span> <span>()</span>

<span>// Now we can test `output_messages` without it printing to stdout</span>
<span>test_output_messages</span> <span>()</span> <span>=</span>
    <span>int</span><span>,</span> <span>messages</span> <span>=</span> <span>output_messages</span> <span>()</span> <span>with</span> <span>print_to_string</span>
    <span>assert</span> <span>(</span><span>int</span> <span>==</span> <span>1234</span><span>)</span>
    <span>assert</span> <span>(</span><span>messages</span> <span>==</span> <span>"Hello!</span><span>\n</span><span>Not sure what to write here, honestly"</span><span>)</span>
</code></pre></div><p>Or conditionally disable logging output:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>effect</span> <span>Log</span> <span>with</span>
    <span>log</span><span>:</span> <span>LogLevel</span> <span>-&gt;</span> <span>String</span> <span>-&gt;</span> <span>Unit</span>

<span>type</span> <span>LogLevel</span> <span>=</span> <span>|</span> <span>Error</span> <span>|</span> <span>Warn</span> <span>|</span> <span>Info</span>

<span>LogLevel</span><span>.</span><span>greater_than_or_equal</span> <span>self</span> <span>(</span><span>other</span><span>:</span> <span>LogLevel</span><span>)</span><span>:</span> <span>Bool</span> <span>=</span>
    <span>match</span> <span>self</span><span>,</span> <span>other</span>
    <span>|</span> <span>Error</span><span>,</span> <span>_</span> <span>-&gt;</span> <span>true</span>
    <span>|</span> <span>Warn</span><span>,</span> <span>(</span><span>Warn</span> <span>|</span> <span>Info</span><span>)</span> <span>-&gt;</span> <span>true</span>
    <span>|</span> <span>Info</span><span>,</span> <span>Info</span> <span>-&gt;</span> <span>true</span>
    <span>|</span> <span>_</span><span>,</span> <span>_</span> <span>-&gt;</span> <span>false</span>

<span>foo</span> <span>()</span> <span>=</span>
    <span>log</span> <span>Info</span> <span>"Entering foo..."</span>
    <span>log</span> <span>Warn</span> <span>"foo is a fairly lazy example function"</span>
    <span>log</span> <span>Error</span> <span>"an error occurred!"</span>

<span>log_handler</span> <span>(</span><span>f</span><span>:</span> <span>Unit</span> <span>-&gt;</span> <span>a</span> <span>can</span> <span>Log</span><span>)</span> <span>(</span><span>level</span><span>:</span> <span>LogLevel</span><span>)</span><span>:</span> <span>a</span> <span>can</span> <span>Print</span> <span>=</span>
    <span>handle</span> <span>f</span> <span>()</span>
    <span>|</span> <span>log</span> <span>msg_level</span> <span>msg</span> <span>-&gt;</span>
        <span>if</span> <span>level</span><span>.</span><span>greater_than_or_equal</span> <span>msg_level</span> <span>then</span>
            <span>print</span> <span>msg</span>
        <span>resume</span> <span>()</span>

<span>foo</span> <span>()</span> <span>with</span> <span>log_handler</span> <span>Error</span>  <span>// outputs "an error occurred!"</span>
</code></pre></div><hr>
<h2 id="cleaner-apis">Cleaner APIs</h2>
<p>Algebraic effects can also make designing cleaner APIs easier. A common pattern in just about
any programming language is the use of a <code>Context</code> object which often needs to be passed to
most functions in the program or library. We can encode this pattern as an effect. All
we need are functions to <code>get</code> the context and to <code>set</code> it:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>effect</span> <span>Use</span> <span>a</span> <span>with</span>
    <span>get</span><span>:</span> <span>Unit</span> <span>-&gt;</span> <span>a</span>
    <span>set</span><span>:</span> <span>a</span> <span>-&gt;</span> <span>Unit</span>
</code></pre></div><p>Most languages call this a state effect and it is generic over the type of state to use.</p>
<p>We can define a handler to provide the initial state value like so<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup>:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>state</span> <span>(</span><span>f</span><span>:</span> <span>Unit</span> <span>-&gt;</span> <span>a</span> <span>can</span> <span>Use</span> <span>s</span><span>)</span> <span>(</span><span>initial</span><span>:</span> <span>s</span><span>)</span><span>:</span> <span>a</span> <span>=</span>
    <span>mut</span> <span>context</span> <span>=</span> <span>initial</span>
    <span>handle</span> <span>f</span> <span>()</span>
    <span>|</span> <span>get</span> <span>()</span> <span>-&gt;</span> <span>resume</span> <span>context</span>  <span>// give the context to the caller of `get`</span>
    <span>|</span> <span>set</span> <span>new_context</span> <span>-&gt;</span>
        <span>context</span> <span>:=</span> <span>new_context</span>
        <span>resume</span> <span>()</span>
</code></pre></div><p>And we can use this to help clean up code that uses one or more context objects.
Let’s imagine we have code which uses a vector internally and hands out references
to elements as indices into this vector. This would normally require passing around
the vector everywhere:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>type</span> <span>Strings</span> <span>=</span> <span>vec</span><span>:</span> <span>Vec</span> <span>String</span>
<span>type</span> <span>StringKey</span> <span>=</span> <span>index</span><span>:</span> <span>Usz</span>

<span>// `!` is a mutable reference</span>
<span>push_string</span> <span>(</span><span>strings</span><span>:</span> <span>!</span><span>Strings</span><span>)</span> <span>(</span><span>string</span><span>:</span> <span>String</span><span>)</span><span>:</span> <span>StringKey</span> <span>=</span>
    <span>key</span> <span>=</span> <span>StringKey</span> <span>(</span><span>strings</span><span>.</span><span>len</span> <span>())</span>
    <span>strings</span><span>.</span><span>push</span> <span>string</span>
    <span>key</span>

<span>get_string</span> <span>(</span><span>strings</span><span>:</span> <span>&amp;</span><span>Strings</span><span>)</span> <span>(</span><span>key</span><span>:</span> <span>StringKey</span><span>)</span><span>:</span> <span>&amp;</span><span>String</span> <span>=</span>
    <span>strings</span><span>.</span><span>get</span> <span>key</span> <span>|&gt;</span> <span>unwrap</span>

<span>append_with_separator</span> <span>(</span><span>strings</span><span>:</span> <span>!</span><span>Strings</span><span>)</span> <span>(</span><span>string1_key</span> <span>separator</span> <span>string2_key</span><span>:</span> <span>String</span><span>)</span> <span>=</span>
    <span>string1</span> <span>=</span> <span>get_string</span> <span>strings</span> <span>string1_key</span>
    <span>string2</span> <span>=</span> <span>get_string</span> <span>strings</span> <span>string2_key</span>
    <span>push_string</span> <span>strings</span> <span>(</span><span>string1</span> <span>++</span> <span>separator</span> <span>++</span> <span>string2</span><span>)</span>

<span>example</span> <span>(</span><span>strings</span><span>:</span> <span>!</span><span>Strings</span><span>)</span> <span>=</span>
    <span>string1</span> <span>=</span> <span>push_string</span> <span>strings</span> <span>"Hello!"</span>
    <span>string2</span> <span>=</span> <span>push_string</span> <span>strings</span> <span>"Goodbye."</span>

    <span>// We have to pass `strings` to every function in our call stack which needs it</span>
    <span>append_with_separator</span> <span>strings</span> <span>string1</span> <span>" "</span> <span>string2</span>

<span>run_example</span> <span>()</span> <span>=</span>
    <span>mut</span> <span>context</span> <span>=</span> <span>Strings</span> <span>(</span><span>Vec</span><span>.</span><span>new</span> <span>())</span>
    <span>example</span> <span>!</span><span>context</span>
</code></pre></div><p>Using a state effect essentially threads through the context automatically:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>type</span> <span>Strings</span> <span>=</span> <span>vec</span><span>:</span> <span>Vec</span> <span>String</span>
<span>type</span> <span>StringKey</span> <span>=</span> <span>index</span><span>:</span> <span>Usz</span>

<span>push_string</span> <span>(</span><span>string</span><span>:</span> <span>String</span><span>)</span><span>:</span> <span>StringKey</span> <span>can</span> <span>Use</span> <span>Strings</span> <span>=</span>
    <span>mut</span> <span>strings</span> <span>=</span> <span>get</span> <span>()</span> <span>:</span> <span>Strings</span>
    <span>key</span> <span>=</span> <span>StringKey</span> <span>(</span><span>strings</span><span>.</span><span>len</span> <span>())</span>
    <span>strings</span><span>.</span><span>push</span> <span>string</span>
    <span>// We could modify `Use a` to give mutable references or</span>
    <span>// use it via `Use !Strings` but for the sake of example</span>
    <span>// we just make sure to `set` here when mutating `strings`.</span>
    <span>set</span> <span>strings</span>
    <span>key</span>

<span>get_string</span> <span>(</span><span>key</span><span>:</span> <span>StringKey</span><span>)</span><span>:</span> <span>String</span> <span>can</span> <span>Use</span> <span>Strings</span> <span>=</span>
    <span>strings</span> <span>=</span> <span>get</span> <span>()</span> <span>:</span> <span>Strings</span>
    <span>strings</span><span>.</span><span>get</span> <span>key</span> <span>|&gt;</span> <span>unwrap</span>

<span>append_with_separator</span> <span>(</span><span>string1_key</span> <span>separator</span> <span>string2_key</span><span>:</span> <span>String</span><span>)</span> <span>can</span> <span>Use</span> <span>Strings</span> <span>=</span>
    <span>string1</span> <span>=</span> <span>get_string</span> <span>string1_key</span>
    <span>string2</span> <span>=</span> <span>get_string</span> <span>string2_key</span>
    <span>push_string</span> <span>(</span><span>string1</span> <span>++</span> <span>separator</span> <span>++</span> <span>string2</span><span>)</span>

<span>example</span> <span>()</span> <span>can</span> <span>Use</span> <span>Strings</span> <span>=</span>
    <span>string1</span> <span>=</span> <span>push_string</span> <span>"Hello!"</span>
    <span>string2</span> <span>=</span> <span>push_string</span> <span>"Goodbye."</span>
    <span>// No need to pass `strings` manually</span>
    <span>append_with_separator</span> <span>string1</span> <span>" "</span> <span>string2</span>

<span>run_example</span> <span>()</span> <span>=</span>
    <span>context</span> <span>=</span> <span>Strings</span> <span>(</span><span>Vec</span><span>.</span><span>new</span> <span>())</span>
    <span>example</span> <span>()</span> <span>with</span> <span>state</span> <span>context</span>
</code></pre></div><p>From the above we can see we now have to call <code>get</code> or <code>set</code> to access <code>strings</code>
in the primitive operations <code>push_string</code> and <code>get_string</code>, but we no longer have
to explicitly pass around <code>strings</code> in code that just uses these primitive operations.
Generally speaking, this trade-off works well for libraries and abstractions which
will usually completely wrap these operations, eliminating the need for code using
these libraries to care about the internal details of how context objects are passed around.</p>
<p>This pattern pops up in quite a few places. Using a <code>Use a</code> effect locks us to passing
around a particular context type but we can also abstract the functions we need into
an interface. If the interface requires an internal context to implement it will be
automatically passed around with the effect handler. This leads us into the next point:</p>
<h3 id="as-a-substitute-for-globals">As a substitute for globals</h3>
<p>There are a few interfaces programmers may often think of as stateless but actually
require passing around state, often by global values for convenience. Some examples
of this are generating random numbers or simply allocating memory.</p>
<p>Let’s consider an API for random numbers:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>Prng</span><span>.</span><span>new</span> <span>()</span><span>:</span> <span>Prng</span> <span>=</span> <span>...</span>

<span>// Return a random byte</span>
<span>Prng</span><span>.</span><span>random</span> <span>!</span><span>self</span><span>:</span> <span>U8</span> <span>=</span> <span>...</span>
</code></pre></div><p>We would have to require users to explicitly thread through the Prng object through their
program just to use random numbers for this API. This is perhaps a mild inconvenience but
it scales with the size of the program and is notable in that random numbers are usually
a small implementation detail to the program logic. Why should such a small implementation
detail cost so much to the terseness of the program? If we want to avoid this, we may make
the Prng a global, which many languages and libraries do, but this comes with the usual
downsides of globals - most notably requiring the object to be thread safe. If we make
it an effect like the following:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>effect</span> <span>Random</span> <span>with</span>
    <span>// Return a random byte</span>
    <span>random</span><span>:</span> <span>Unit</span> <span>-&gt;</span> <span>U8</span>
</code></pre></div><p>We gain the ability to thread it through a program mostly for free
(users must still explicitly initialize it somewhere up the call stack with a handler).
Plus, if we later decide we want to use <code>/dev/urandom</code> or some other source of random
numbers instead of the Prng object, we only need to swap out the effect handler. Nothing
else in the call stack needs to be changed.</p>
<p>Similarly, let’s consider an <code>Allocate</code> effect:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>effect</span> <span>Allocate</span> <span>with</span>
    <span>allocate</span><span>:</span> <span>(</span><span>size</span><span>:</span> <span>Usz</span><span>)</span> <span>-&gt;</span> <span>Alignment</span> <span>-&gt;</span> <span>Ptr</span> <span>a</span>
    <span>free</span><span>:</span> <span>Ptr</span> <span>a</span> <span>-&gt;</span> <span>Unit</span>

<span>// example usage</span>
<span>Box</span><span>.</span><span>new</span> <span>(</span><span>elem</span><span>:</span> <span>a</span><span>)</span><span>:</span> <span>Box</span> <span>a</span> <span>can</span> <span>Allocate</span> <span>=</span>
    <span>...</span>
</code></pre></div><p>Such an effect would let us swap how we perform allocations by adding a different effect
handler for it somewhere up the call stack. We could use the global allocator for most calls,
then in a tight loop swap out each allocation in that loop with an arena allocator by just
adding a handler over the loop body.</p>
<p>I could go on with more examples of this (parsers, build systems, …) but I think
you get the gist.</p>
<h3 id="writing-in-a-direct-style">Writing in a Direct Style</h3>
<p>As a small note, effects being things that are thrown/performed rather than dedicated
values does often enable us to write in a more direct style compared to the alternative.</p>
<p>Exceptions are the easy example here, but just know this also applies to asynchronous
functions with <code>Future&lt;T&gt;</code> values or other types that are usually some wrapped effect.</p>
<p>So without exceptions we may use an error union or optional value like <code>Maybe t</code> which can be
<code>Some t</code> or <code>None</code>. If we have several computations returning results, we’ll need
to <code>map</code> the <code>Some</code> value in-between steps:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>// Imagine we have:</span>
<span>try_get_line_from_stdin</span> <span>()</span><span>:</span> <span>Maybe</span> <span>String</span> <span>can</span> <span>IO</span> <span>=</span> <span>...</span>
<span>try_parse</span> <span>(</span><span>s</span><span>:</span> <span>String</span><span>)</span><span>:</span> <span>Maybe</span> <span>U32</span> <span>=</span> <span>...</span>

<span>// read an integer from stdin, returning that value doubled</span>
<span>call_failable_functions</span> <span>()</span><span>:</span> <span>Maybe</span> <span>U32</span> <span>can</span> <span>IO</span> <span>=</span>
    <span>try_get_line_from_stdin</span> <span>()</span> <span>|&gt;.</span><span>and_then</span> <span>fn</span> <span>line</span> <span>-&gt;</span>
        <span>try_parse</span> <span>line</span> <span>|&gt;.</span><span>map</span> <span>fn</span> <span>x</span> <span>-&gt;</span>
            <span>x</span> <span>*</span> <span>2</span>
</code></pre></div><p>This is cumbersome enough languages like Rust provide syntax-sugar like <code>?</code>
to automatically return error values and focus on the good path. That isn’t
needed with effects though. The direct approach just works:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>// Now imagine we have:</span>
<span>get_line_from_stdin</span> <span>()</span><span>:</span> <span>String</span> <span>can</span> <span>Fail</span><span>,</span> <span>IO</span> <span>=</span> <span>...</span>
<span>parse</span> <span>(</span><span>s</span><span>:</span> <span>String</span><span>)</span><span>:</span> <span>U32</span> <span>can</span> <span>Fail</span> <span>=</span> <span>...</span>

<span>// read an integer from stdin, returning that value doubled</span>
<span>call_failable_functions</span> <span>()</span><span>:</span> <span>U32</span> <span>can</span> <span>Fail</span> <span>=</span>
    <span>line</span> <span>=</span> <span>get_line_from_stdin</span> <span>()</span>
    <span>x</span> <span>=</span> <span>parse</span> <span>line</span>
    <span>x</span> <span>*</span> <span>2</span>
</code></pre></div><p>If we need to go off the good path we can just apply a handler:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>call_failable_functions</span> <span>()</span><span>:</span> <span>U32</span> <span>can</span> <span>Fail</span> <span>=</span>
    <span>// get_line_from_stdin's Fail effect is now handled by `default` which returns "42" instead of failing</span>
    <span>line</span> <span>=</span> <span>get_line_from_stdin</span> <span>()</span> <span>with</span> <span>default</span> <span>"42"</span>
    <span>x</span> <span>=</span> <span>parse</span> <span>line</span>
    <span>x</span> <span>*</span> <span>2</span>
</code></pre></div><p>Compared to error unions we never have to wrap our data in <code>Some</code>/<code>Ok</code> and we don’t
have to worry about error types not composing well either:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>// Now imagine we have:</span>
<span>LibraryA</span><span>.</span><span>foo</span> <span>()</span><span>:</span> <span>U32</span> <span>can</span> <span>Throw</span> <span>LibraryA</span><span>.</span><span>Error</span> <span>=</span> <span>...</span>
<span>LibraryB</span><span>.</span><span>bar</span> <span>()</span><span>:</span> <span>U32</span> <span>can</span> <span>Throw</span> <span>LibraryB</span><span>.</span><span>Error</span> <span>=</span> <span>...</span>

<span>type</span> <span>MyError</span> <span>=</span> <span>message</span><span>:</span> <span>String</span>

<span>// Composing the different error types just works</span>
<span>my_function</span> <span>()</span><span>:</span> <span>Unit</span> <span>can</span> <span>Throw</span> <span>LibraryA</span><span>.</span><span>Error</span><span>,</span> <span>Throw</span> <span>LibraryB</span><span>.</span><span>Error</span><span>,</span> <span>Throw</span> <span>MyError</span> <span>=</span>
    <span>x</span> <span>=</span> <span>LibraryA</span><span>.</span><span>foo</span> <span>()</span>
    <span>y</span> <span>=</span> <span>LibraryB</span><span>.</span><span>bar</span> <span>()</span>
    <span>if</span> <span>x</span> <span>+</span> <span>y</span> <span>&lt;</span> <span>10</span> <span>then</span>
        <span>throw</span> <span>(</span><span>MyError</span> <span>"The results of `foo` and `bar` are too small"</span><span>)</span>
</code></pre></div><p>And if it gets too cumbersome to type out all those <code>Throw</code> clauses we can make a type alias
for the effects we want to handle:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>AllErrors</span> <span>=</span> <span>can</span> <span>Throw</span> <span>LibraryA</span><span>.</span><span>Error</span><span>,</span> <span>Throw</span> <span>LibraryB</span><span>.</span><span>Error</span><span>,</span> <span>Throw</span> <span>MyError</span>

<span>my_function</span> <span>()</span><span>:</span> <span>Unit</span> <span>can</span> <span>AllErrors</span> <span>=</span>
    <span>x</span> <span>=</span> <span>LibraryA</span><span>.</span><span>foo</span> <span>()</span>
    <span>y</span> <span>=</span> <span>LibraryB</span><span>.</span><span>bar</span> <span>()</span>
    <span>if</span> <span>x</span> <span>+</span> <span>y</span> <span>&lt;</span> <span>10</span> <span>then</span>
        <span>throw</span> <span>(</span><span>MyError</span> <span>"The results of `foo` and `bar` are too small"</span><span>)</span>
</code></pre></div><p>You can think of this as being similar to using an anonymous union type for error returns.
We don’t need to define explicit wrappers to combine all the errors we use as with tagged
unions, and different error types compose naturally into the union. This also means if a
library <code>can Throw String</code>, and our code also <code>can Throw String</code>, these will combine into
just one <code>can Throw String</code> effect. If we want to keep them separate we need to use a wrapper
type like <code>MyError</code> above.</p>
<hr>
<h2 id="guaranteeing-purity">Guaranteeing Purity</h2>
<p>Most languages with effect handlers (barring perhaps only OCaml) also use effects wherever
side-effects may occur. You may have noticed the <code>can Print</code> or <code>can IO</code> on previous examples,
and it’s true - you can’t use side-effects in Ante without marking that the function may perform
them<sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup>. Setting aside the cases when <code>IO</code> or print outs are redirected or used for mocking,
these effects are usually handled in <code>main</code> automatically - so what benefit does it actually
provide by making programmers mark these functions?</p>
<p>For one, a number of functions actually require other non-side-effectful (ie. pure) functions
as input. When spawning threads for example, we can’t allow the spawning thread to call into
handlers owned by our thread:</p>
<div><pre tabindex="0"><code data-lang="ante"><span>// Spawn all the given functions as threads and wait until they complete</span>
<span>spawn_all</span> <span>(</span><span>functions</span><span>:</span> <span>Vec</span> <span>(</span><span>Unit</span> <span>-&gt;</span> <span>a</span> <span>pure</span><span>))</span><span>:</span> <span>Vec</span> <span>a</span> <span>can</span> <span>IO</span> <span>=</span> <span>...</span>
</code></pre></div><p>There is also a technique for concurrency called Software Transactional Memory (STM) which
requires pure functions. It works by running many functions simultaneously and if a value is
ever mutated out from under one thread while it was performing a transaction, it just restarts
that transaction. For the curious, there’s a proof of concept implementation of it in Effekt
<a href="https://github.com/effekt-community/effekt-stm/blob/main/stm.effekt">here</a>.</p>
<h3 id="replayability">Replayability</h3>
<p>Another neat aspect of purity is that it can give you replayability similar to the <code>rr</code> debugging
utility. This is the tech needed for deterministic network replication and log structured backups
used in databases and videogame networking.</p>
<p>To implement this you would need two handlers: <code>record</code> and <code>replay</code> which handle the top-level
effect emitted by <code>main</code>. In most languages this is named <code>IO</code>. <code>record</code> would record that the
effect occurred, re-raise it to be handled by the built-in <code>IO</code> handler, and record its result.
Then, on another run <code>replay</code> would handle <code>IO</code> and use the results from the effect log instead
of actually performing them. A particularly smart language could even <code>record</code> by default in
debug builds to always get deterministic debugging!</p>
<h3 id="capability-based-security">Capability-based Security</h3>
<p>The requirement to include all unhandled effects as part of the type signature of a function
helps greatly when auditing the security of libraries. When you call a function
<code>get_pi: Unit -&gt; F64</code> you know that it isn’t doing any sneaky IO in the background. If that
library is later updated to <code>get_pi: Unit -&gt; F64 can IO</code> you know something suspicious is
probably happening, and you’ll get an error in your code as long as the function you’re calling
<code>get_pi</code> in doesn’t already require the <code>IO</code> effect<sup id="fnref:4"><a href="#fn:4" role="doc-noteref">4</a></sup><sup id="fnref:5"><a href="#fn:5" role="doc-noteref">5</a></sup>. This has parallels with <a href="https://joeduffyblog.com/2015/11/10/objects-as-secure-capabilities/">Capability
Based Security</a>
(bonus paper <a href="https://arxiv.org/abs/2005.11444">Designing with Static Capabilities and Effects</a>)
where we must pass around capabilities like <code>fs: FileSystem</code> as explicit objects and only
functions with these objects can access the file system. With algebraic effects it works similarly
except the functions declare effects instead of taking capability parameters. There is a downside
to the effect approach though, and its the same one mentioned above: since effects are automatically
threaded through your program you won’t get an error if a function like <code>get_pi</code> is updated to
require <code>IO</code> if your function also already requires that effect. This can crop up anywhere
effects are used. E.g. with a <code>Fail</code> effect if a library function can’t <code>Fail</code> but then was
updated to possibly <code>Fail</code>, it’ll propagate upward to your existing <code>Fail</code> handler if used in
one of your functions that also can <code>Fail</code>. This may be fine but it may also be unintended depending
on the program. For example, perhaps a user may have preferred to handle it by providing a default value.</p>
<hr>
<p>Whew! That was a lot, but we made it through. Obviously this post focused on the positives of effects
and why I think they’re going to be much more pervasive in the future, but there are negatives as well.
Aside from the accidental handling of effects issue mentioned above, the main downside with effects has
traditionally been efficiency concerns, although it should be said that compilation output of effects has improved
greatly in recent years. Most languages with algebraic effects will optimize “tail-resumptive” effects
(any effect where the last thing the handler does is call <code>resume</code>) into normal closure calls. This is great
because this is already most effects in practice (citation needed - although almost all the examples in this blog
post fit in this category! Exceptions being the only, <em>ahem</em>, exception here since they do not <code>resume</code> at all).
Different languages also have their own strategies for optimizing the remaining
effect handlers: <a href="https://koka-lang.github.io/koka/doc/index.html">Koka</a> uses
<a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2021/08/genev-icfp21.pdf">evidence passing</a>
and bubbles up effects to handlers to compile to C without a runtime, <a href="https://antelang.org/">Ante</a> and
<a href="https://github.com/ocaml-multicore/ocaml-effects-tutorial">OCaml</a> limit <code>resume</code> to only being called
at most once which precludes some effects like non-determinism but simplifies resource handling and
allows the internal continuations to be implemented more efficiently (e.g. via segmented stacks), and
<a href="https://effekt-lang.org/">Effekt</a> specializes handlers out of the program completely<sup id="fnref:6"><a href="#fn:6" role="doc-noteref">6</a></sup>!</p>
<section role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>The “algebraic” in algebraic effects is mostly a vestigial term. Using “effect handlers” is probably more accurate but I’ll be referring to these mostly as algebraic effects since that is the term most users are familiar with. Also I think it is confusing to say “effect handlers” when talking about the effect itself and not just the handler.&nbsp;<a href="#fnref:1" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>This definition of <code>state</code> completely ignores ownership rules. We’d need a <code>Copy a</code> restriction for a real implementation but I didn’t want to get side-tracked explaining ownership and traits in this post since it isn’t relevant for effects in general. Most languages with algebraic effects allow pervasive sharing of values. Ante with its ownership semantics derived from Rust’s is a bit of a black sheep here.&nbsp;<a href="#fnref:2" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>The compiler can’t check <code>extern</code> definitions for you, so the type definitions on those have to be trusted. There is also a (planned) way to perform an <code>IO</code> effect only when compiling in debug mode to allow debug printouts while still maintaining effect safety on release mode.&nbsp;<a href="#fnref:3" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>This is one reason why it’s usually preferable to declare the minimum amount of effects. Like saying your function <code>can Print</code> rather than bringing in all of <code>can IO</code>. If you don’t know what the minimal set is, type inference can figure it out for you.&nbsp;<a href="#fnref:4" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>The addition of a new effect to <code>get_pi</code> would also break semantic versioning so it can’t be snuck into a bugfix version.&nbsp;<a href="#fnref:5" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>This comes with the limitation that most functions are second-class but you can still get first-class functions by boxing them and switching to a pay-as-you-go approach. See <a href="https://effekt-lang.org/tour/captures">the docs</a> as well as <a href="https://dl.acm.org/doi/10.1145/3527320">this paper</a>.&nbsp;<a href="#fnref:6" role="doc-backlink">↩︎</a></p>
</li>
</ol>
</section>

                        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: HNRelevant – Add a "related" section to Hacker News (106 pts)]]></title>
            <link>https://github.com/imdj/HNRelevant</link>
            <guid>44078024</guid>
            <pubDate>Sat, 24 May 2025 01:07:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/imdj/HNRelevant">https://github.com/imdj/HNRelevant</a>, See on <a href="https://news.ycombinator.com/item?id=44078024">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>


                <li>
      

      <div>
          <div>

                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
          <p>
            GitHub Copilot
          </p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_models&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_models_link_product_navbar&quot;}" href="https://github.com/features/models">
      
      <div>
          <p>
            GitHub Models
              <span>
                New
              </span>
          </p><p>
        Manage and compare prompts
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_advanced_security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_advanced_security_link_product_navbar&quot;}" href="https://github.com/security/advanced-security">
      
      <div>
          <p>
            GitHub Advanced Security
          </p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
          <p>
            Actions
          </p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
          <p>
            Codespaces
          </p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                </ul>
              </div>
          <div>

                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
          <p>
            Issues
          </p><p>
        Plan and track work
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
          <p>
            Code Review
          </p><p>
        Manage code changes
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
          <p>
            Discussions
          </p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_product_navbar&quot;}" href="https://github.com/features/code-search">
      
      <div>
          <p>
            Code Search
          </p><p>
        Find more, search less
      </p></div>

    
</a></li>

                </ul>
              </div>
          

      </div>
</li>


                <li>
      

      
</li>


                <li>
      

      <div>
                    <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;events_amp_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;events_amp_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      Events &amp; Webinars

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ebooks_amp_whitepapers&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ebooks_amp_whitepapers_link_resources_navbar&quot;}" href="https://github.com/resources/whitepapers">
      Ebooks &amp; Whitepapers

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      

      <div>
              <div>

                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
          <p>
            GitHub Sponsors
          </p><p>
        Fund open source developers
      </p></div>

    
</a></li>

                </ul>
              </div>
              <div>

                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
          <p>
            The ReadME Project
          </p><p>
        GitHub community articles
      </p></div>

    
</a></li>

                </ul>
              </div>
              
          </div>
</li>


                <li>
      

      <div>

                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
          <p>
            Enterprise platform
          </p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:imdj/HNRelevant" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="6pJ6dPAUMKCeh9DdZGK6K_iWTCQFA4Lx00GPM30tg_BXBoqGinCjlQaYRKvabwvO_NyBORrnubw5cYmQTohY_A" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="imdj/HNRelevant" data-current-org="" data-current-owner="imdj" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>


            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=imdj%2FHNRelevant" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/imdj/HNRelevant&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="86772ce886b4242f19d9c172d3b3e6e36c692ccb942e06ae80ec2ca3f6caaeda" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a></p><p>
    <react-partial-anchor>
      <tool-tip id="tooltip-977dbc33-7be8-403d-bffd-9ce042b80ff5" for="icon-button-d697fbe4-d09b-44c1-b6b4-7d0eaca9b9b2" popover="manual" data-direction="s" data-type="label" data-view-component="true">Appearance settings</tool-tip>

      <template data-target="react-partial-anchor.template">
        <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.19291721a114332ad118.module.css">
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/appearance-settings.22dfbc22ef0a2bf02523.module.css">

<react-partial partial-name="appearance-settings" data-ssr="false" data-attempted-ssr="false">
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>

      </template>
    </react-partial-anchor>
  </p>

          </div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Modification of acetaminophen to reduce liver toxicity and enhance drug efficacy (211 pts)]]></title>
            <link>https://www.societyforscience.org/regeneron-sts/2025-student-finalists/chloe-lee/</link>
            <guid>44077850</guid>
            <pubDate>Sat, 24 May 2025 00:29:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.societyforscience.org/regeneron-sts/2025-student-finalists/chloe-lee/">https://www.societyforscience.org/regeneron-sts/2025-student-finalists/chloe-lee/</a>, See on <a href="https://news.ycombinator.com/item?id=44077850">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
			<main>
				
<article>
	
	<div id="content">
		<main>
			<div>
				<!--  -->
				<!--  -->
				

<div>
                    <h2>
                Chemical Modification of Acetaminophen To Reduce Liver Toxicity and Enhance Drug Efficacy
            </h2>
        
        <p>Chloe studied ways to reduce the toxicity of acetaminophen while keeping its painkilling properties.</p>


                                    <p><a href="https://sspcdn.blob.core.windows.net/files/Documents/SEP/STS/2025/posters/2025_STS_Poster_Lee.Chloe.pdf" target="_blank">
                    View Poster
                </a>
                        </p></div>


<section>
    <p>Chloe Yehwon Lee, 17, of Murphy, explored a way to lower the toxic effects of acetaminophen (Tylenol) on the liver for her Regeneron Science Talent Search chemistry project. The painkiller is used by over 60 million Americans each week, but it is also the leading cause of acute liver failure in the United States and the second most common cause of liver transplant worldwide. Chloe studied chemical changes to the acetaminophen molecule’s benzene ring to see if they could reduce liver toxicity.</p>

            
    </section>


<section>
    <p>Chloe studied chemical changes to the acetaminophen molecule’s benzene ring to see if they could reduce liver toxicity. She developed computer models of the modified molecules to test their ability to relieve pain and toxic effects. She found and synthesized a modified acetaminophen molecule that may be less toxic and may even kill pain better than the original. Her new molecule could be a first step in creating safer and more effective forms of acetaminophen.</p>

            
    </section>


<section>
    <p>Chloe is the child of Jiyong Lee and Eul Hyun Suh. At Plano East Senior High School, she is president of the school’s orchestra program and first violinist in the Greater Dallas Youth Orchestra. She is also the founder and president of her school’s Girls in STEM club.</p>

            
    </section>


<div>
                    <h2>
                Beyond the Project
            </h2>
        
        <p>Chloe is an award-winning violinist who performs with multiple orchestras. She has taught violin to younger students and plays with her school’s Ensembles for Elderly, which performs at assisted living and memory care centers.</p>
<p>FUN FACTS: An eraser as a prized possession? Absolutely! Chloe’s jumbo “For Really Big Mistakes” eraser is the perfect reminder that, together, we learn, fail and improve, one step at a time!</p>


            </div>

				
				

			</div>
					</main>
	</div>

</article>

			</main>
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Root for your friends (316 pts)]]></title>
            <link>https://josephthacker.com/personal/2025/05/13/root-for-your-friends.html</link>
            <guid>44077533</guid>
            <pubDate>Fri, 23 May 2025 23:28:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://josephthacker.com/personal/2025/05/13/root-for-your-friends.html">https://josephthacker.com/personal/2025/05/13/root-for-your-friends.html</a>, See on <a href="https://news.ycombinator.com/item?id=44077533">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p><img src="https://josephthacker.com/assets/images/root-for-your-friends-banner.png" alt="" width="400">
<strong>Heads‑up:</strong> The concept of this post might seem trivial, but it can improve your career, happiness, and the people you care about. Proceed <strong>without</strong> caution. It only takes about 10 minutes to read.</p>

<hr>

<h2 id="what-is-rootforyourfriends">What <em>is</em> “Root&nbsp;For&nbsp;Your&nbsp;Friends”?</h2>

<p>It’s getting excited for your friends when something good happens, and rejecting jealousy.</p>

<p>It’s deeply believing that <strong>a rising tide lifts all boats</strong>.</p>

<p>It’s understanding that most games in life aren’t zero‑sum; they’re wildly <em>positive‑sum</em>.</p>

<p><strong>Outcomes</strong>: If you read this post, you will be more:</p>
<ul>
  <li>excited for your friends</li>
  <li>generous with your praise and support</li>
  <li>open to collaborating with others</li>
  <li>likely to introduce your friends to people who can help them</li>
</ul>

<p><strong>Note</strong>: I call a friend who roots for you a <strong>hypeman</strong> or a <strong>hype friend</strong>.</p>

<p><img src="https://josephthacker.com/assets/images/Pasted%20image%2020250514102039.png" alt="" width="500"></p>

<h2 id="the-hypeman-flywheel">The Hypeman Flywheel</h2>

<p>The most underrated part of rooting for you friends is that it benefits everyone. A <strong>flywheel</strong> is a concept where each input creates a positive feedback loop that improves the next loop.</p>

<p>A good example of a flywheel in business is where a company collects and utilizes user analytics such that their improvement of the product means more people use the product, which creates more data for what’s working, which creates a better product, which drives morepeople to use the product, etc.</p>

<p>The <strong>friend flywheel</strong> is similar. It’s a positive feedback loop where you root for your friends, building them up and sharing info with them which creates good will and levels them up, and now they’re slightly more successful and informed and they often share info and deals back with you due to feeling closer with you. Then you level up and get access to more info and better deals and you share with them, and the flywheel keeps going.</p>

<h3 id="one-caveat">One Caveat</h3>

<p>Obviously the flywheel only works if your friends reciprocate.</p>

<p>Alex Hormozi says “The best way to change your life is to change your friends.” You don’t have to do this, but if you’re reading this and the quote resonates with you, maybe you should consider it.</p>

<p>Look for friends who aren’t threatened by your success. I talk about spotting friend who will “root for you” in a second.</p>

<h3 id="a-caveat-of-the-caveat">A caveat of the caveat</h3>

<p>Even if you root for the “wrong” friends, it’s still the best way to live. Life is better not feeling jealous. You can sleep so much easier at night by genuinely being happy for your friends, even if they’re a bit jealous of you.</p>

<p><img src="https://josephthacker.com/assets/images/Pasted%20image%2020250514102634.png" alt="" width="400"></p>

<hr>

<h2 id="do-you-have-a-hypeman">Do you have a hypeman?</h2>
<p><br>
Visualize something for me.</p>

<p>You just shipped a side‑project that lands on the front page of Hacker News. 
<strong>Who’s the first person you want to tell?</strong></p>

<p>That person is your <strong>hypeman</strong>—the friend who celebrates your victories like it’s their own milestone. No one comes to mind? Maybe you haven’t really trusted anyone with your wins yet. Let’s identify who you could do that with.</p>

<hr>

<h2 id="how-to-spot-friends-who-root-for-you">How to Spot Friends Who Root For You</h2>

<p>Here’s a list of things to look for that indicate a person might be a great friend:</p>

<ul>
  <li>People who speak honest truth to your face and praise you behind your back.</li>
  <li>People who consistently congratulate you when good things happen.</li>
  <li>People who like and share your stuff.</li>
  <li>People who intro you to people who might be able to help you.</li>
  <li>People who give you different ways to improve your product/brand/life.</li>
  <li>People whose default is “Let’s work on this together!”</li>
  <li>People who give meaningful feedback on your projects.</li>
  <li>People who say “We did it!” even when they did the majority of the work.</li>
</ul>

<hr>
<p><img src="https://josephthacker.com/assets/images/Pasted%20image%2020250514102324.png" alt="" width="500"></p>

<h2 id="how-to-be-a-hypeman">How to Be a Hypeman</h2>
<p>This is a two way street. You can’t expect your friends to root for you if you don’t root for them. Here’s how you can do that:</p>

<ul>
  <li><strong>Be quick to praise</strong>: Train your first instinct to praise.</li>
  <li><strong>Be tactfully honest</strong>: Good people value constructive criticism deeply.</li>
  <li><strong>Expand their vision</strong> – “That’s awesome… and imagine if you… and have you seen this…?”</li>
  <li><strong>Signal‑Boost</strong> – Shares and like their stuff all the time and ask them to tell you when they post.</li>
</ul>

<hr>

<p><img src="https://josephthacker.com/assets/images/Pasted%20image%2020250523103607.png" alt="" width="400"></p>
<h2 id="closing">Closing</h2>

<p><em>Rooting for your friends is the best way to live.</em> I pray you now believe that.</p>

<p>So yeah, go forth, reject jealousy, and root for your friends! This is a message a lot of people need to hear, so I’d love if you shared it.</p>

<p>- Joseph “rez0” Thacker</p>

<p><a href="https://thacker.beehiiv.com/subscribe">Sign up for my email list</a> to know when I post more content like this.
I also <a href="https://x.com/rez0__">post my thoughts on Twitter/X</a>.</p>

<meta name="twitter:card" content="summary_large_image">

<meta name="twitter:site" content="@rez0__">

<meta name="twitter:creator" content="@rez0__">

<meta property="og:url" content="https://josephthacker.com/personal/2025/05/13/root-for-your-friends.html">

<meta property="og:title" content="Root for Your Friends">

<meta property="og:description" content="Discover the power of rooting for your friends and how it can amplify success for everyone involved.">

<meta property="og:image" content="https://josephthacker.com/assets/images/root-for-your-friends-banner.png">


    




  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The world of Japan's PC-98 computer (142 pts)]]></title>
            <link>https://strangecomforts.com/the-strange-world-of-japans-pc-98-computer/</link>
            <guid>44076501</guid>
            <pubDate>Fri, 23 May 2025 20:51:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://strangecomforts.com/the-strange-world-of-japans-pc-98-computer/">https://strangecomforts.com/the-strange-world-of-japans-pc-98-computer/</a>, See on <a href="https://news.ycombinator.com/item?id=44076501">Hacker News</a></p>
Couldn't get https://strangecomforts.com/the-strange-world-of-japans-pc-98-computer/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I built a more productive way to manage AI chats (147 pts)]]></title>
            <link>https://contextch.at</link>
            <guid>44076449</guid>
            <pubDate>Fri, 23 May 2025 20:46:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://contextch.at">https://contextch.at</a>, See on <a href="https://news.ycombinator.com/item?id=44076449">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-overlay-container="true"><main><div><section><article><h2>Chat with <span>Context</span> from Web, Files and GitHub</h2><p>Easily set up multiple projects with web, file, and GitHub context. Start a new chat, and leverage your saved context to get instant answers and insights</p></article></section><section id="features"><div><h2>Features</h2><p>Context centric. Ingest content from anywhere, sites, files, GitHub repos then chat with it using AI. Instant knowledge base.</p></div><div><p><span></span><span>Effortless Ingestion</span></p><p><span></span><span>Smart Extraction</span></p><p><span></span><span>Unified Context</span></p><p><span></span><span>AI Conversations</span></p><p><span></span><span>Persistent Knowledge</span></p><p><span></span><span>Project Power</span></p><p><span></span><span>Multi-Chat Magic</span></p><p><span></span><span>Simple Pricing</span></p><p><span></span><span>GitHub Import</span></p></div><div><div tabindex="-1"><p><h2>Context builder</h2></p><div><p>Easily build your knowledge base with the context builder</p><ul><li><span>✓</span>Web, File and GitHub content ingestion</li><li><span>✓</span>Fast import content</li><li><span>✓</span>Multiple chats per project</li></ul></div></div><div tabindex="-1"><p><h2>Stay organized</h2></p><div><p>Manage multiple projects and chats seamlessly</p><ul><li><span>✓</span>Persistent project context</li><li><span>✓</span>Multiple chats per project</li><li><span>✓</span>No more repetitive work</li></ul></div></div><div tabindex="-1"><p><h2>Fair pricing</h2></p><div><p>Pay only for what you use with our credit system</p><ul><li><span>✓</span>Credit based system</li><li><span>✓</span>No subscription traps</li><li><span>✓</span>Flexible AI model selection</li></ul></div></div></div></section><section id="comparisons"><p><h2>Comparisons</h2></p><div><div tabindex="-1"><p><h3>Other AI Chat Tools</h3></p><div><ul><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6l-12 12"></path><path d="M6 6l12 12"></path></svg><span>Manual data ingestion and tedious copy-pasting</span></li><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6l-12 12"></path><path d="M6 6l12 12"></path></svg><span>Fragmented conversations</span></li><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6l-12 12"></path><path d="M6 6l12 12"></path></svg><span>Importing your data requires payment</span></li><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6l-12 12"></path><path d="M6 6l12 12"></path></svg><span>Single model for all projects and chats</span></li><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6l-12 12"></path><path d="M6 6l12 12"></path></svg><span>Subscriptions!</span></li></ul></div></div><div tabindex="-1"><p><h3>With <a href="https://contextch.at/"><span>ContextChat</span></a></h3></p><div><ul><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l5 5l10 -10"></path></svg><span>Build the context through the context builder</span></li><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l5 5l10 -10"></path></svg><span>Flexible, pay-as-you-go pricing</span></li><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l5 5l10 -10"></path></svg><span>Multiple projects and chats</span></li><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l5 5l10 -10"></path></svg><span>Change AI model easily in the middle of a chat</span></li><li><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l5 5l10 -10"></path></svg><span>Free models available, no credit card required</span></li></ul></div></div></div><div><h2>See how <!-- -->ContextChat<!-- --> compares to other tools</h2><p>We've created a detailed comparison of <!-- -->ContextChat<!-- --> vs traditional AI chat tools.</p><a aria-label="See SEO AI Pal vs competitors comparison" href="https://contextch.at/alternatives" tabindex="0" role="button" shadow="none">View comparison</a></div></section><section id="pricing"><h2>Pricing</h2><div tabindex="-1"><div><div><p>Always </p><p> using no-cost AI models</p></div><p><span>No credit card required</span></p></div><hr role="separator"><div><div><svg xmlns="http://www.w3.org/2000/svg" width="20" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l5 5l10 -10"></path></svg><p><span>Web, File and GitHub Ingestion</span></p></div><div><svg xmlns="http://www.w3.org/2000/svg" width="20" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l5 5l10 -10"></path></svg><p><span>Multiple chats per project</span></p></div><div><svg xmlns="http://www.w3.org/2000/svg" width="20" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l5 5l10 -10"></path></svg><p><span>Flexible AI model selection</span></p></div><div><svg xmlns="http://www.w3.org/2000/svg" width="20" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12l5 5l10 -10"></path></svg><p><span>Pay-as-you-go credit system</span></p></div></div></div></section><div id="faq"><h2>Frequently Asked Questions</h2><p>Find answers to common questions about ContextChat.</p></div></div><!--$--><!--/$--><!--$--><!--/$--></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Genetic Boids Web Simulation (147 pts)]]></title>
            <link>https://attentionmech.github.io/genetic-boids/</link>
            <guid>44075911</guid>
            <pubDate>Fri, 23 May 2025 19:40:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://attentionmech.github.io/genetic-boids/">https://attentionmech.github.io/genetic-boids/</a>, See on <a href="https://news.ycombinator.com/item?id=44075911">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="control-panel">

    
    <h4>by @attentionmech
    </h4>
    <div>
      <h3>Population</h3>
      <p><label>Boid Count</label>
        
        <span id="boidCountDisplay">500</span>
      </p>
      
    </div>

    <div>
      <h3>Movement</h3>
      <p><label>Max Speed</label>
        
        <span id="maxSpeedDisplay">2.5</span>
      </p>
      <p><label>Max Force</label>
        
        <span id="maxForceDisplay">0.1</span>
      </p>
      <p><label>Initial Speed Range</label>
        
        <span id="initSpeedMinDisplay">1</span>
        
        <span id="initSpeedMaxDisplay">3</span>
      </p>
    </div>

    <div>
      <h3>Flocking Behavior</h3>
      <p><label>Alignment</label>
        
        <span id="alignWeightDisplay">1.0</span>
      </p>
      <p><label>Separation</label>
        
        <span id="sepWeightDisplay">1.5</span>
      </p>
      <p><label>Cohesion</label>
        
        <span id="cohWeightDisplay">1.0</span>
      </p>
    </div>

    <div>
      <h3>Perception Ranges</h3>
      <p><label>Alignment Range</label>
        
        <span id="alignRangeDisplay">40</span>
      </p>
      <p><label>Separation Range</label>
        
        <span id="sepRangeDisplay">20</span>
      </p>
      <p><label>Cohesion Range</label>
        
        <span id="cohRangeDisplay">40</span>
      </p>
    </div>

    


    <div>
      <h3>Genetic Signaling</h3>
      <p><label>Signal Probability</label>
        
        <span id="signalProbDisplay">0.002</span>
      </p>
      <p><label>Signal Range</label>
        
        <span id="signalRangeDisplay">50</span>
      </p>
      <p><label>Signal Force</label>
        
        <span id="signalForceDisplay">0.1</span>
      </p>
      <p><label>Genome Length</label>
        
        <span id="genomeLengthDisplay">6</span>
      </p>
    </div>

    <div>
      <h3>Visual</h3>
      <p><label>Boid Size</label>
        
        <span id="boidSizeDisplay">1.0</span>
      </p>
      <p><label>Signal Line Alpha</label>
        
        <span id="signalAlphaDisplay">150</span>
      </p>
      <p><label>Background</label>
        
        <span id="bgBrightnessDisplay">0</span>
      </p>
    </div>

    <div>
      <h3>Performance</h3>
      <p><label>Grid Cell Size</label>
        
        <span id="cellSizeDisplay">50</span>
      </p>
      <p><label>Frame Rate Target</label>
        
        <span id="targetFPSDisplay">60</span>
      </p>
    </div>

    <div>
      <h3>Presets</h3>
      
    </div>

    <div>
      <h3>Danger Zone</h3>
      
    </div>


    <h3><a href="https://x.com/@attentionmech">@attentionmech</a>
      </h3><h3><a href="https://github.com/attentionmech/genetic-boids">github</a>
          </h3><h3>

            <p><strong>STATS:</strong><br>
              FPS: <span id="fps">--</span><br>
              Active Signals: <span id="signalCount">--</span><br>
              Avg Speed: <span id="avgSpeed">--</span><br>
              Clusters: <span id="clusterCount">--</span>
            </p>
  </h3></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: DoubleMemory – more efficient local-first read-it-later app (149 pts)]]></title>
            <link>https://doublememory.com</link>
            <guid>44075451</guid>
            <pubDate>Fri, 23 May 2025 18:55:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://doublememory.com">https://doublememory.com</a>, See on <a href="https://news.ycombinator.com/item?id=44075451">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: hcker.news – an ergonomic, timeline-based Hacker News front page (163 pts)]]></title>
            <link>https://hcker.news</link>
            <guid>44075353</guid>
            <pubDate>Fri, 23 May 2025 18:44:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hcker.news">https://hcker.news</a>, See on <a href="https://news.ycombinator.com/item?id=44075353">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>Feed Settings</p>
            <!-- View Row -->
            <div>
              <p>View</p>
              <div id="mode-options">
                <p><a href="#" data-mode="timeline">Timeline</a>
                <a href="#" data-mode="frontpage">Frontpage</a>
                <a href="#" data-mode="aggregate">Aggregate</a>
              </p></div>
            </div>

            <!-- Timeline Specific Rows (conditionally visible) -->
            <div id="timeline-filter-controls">
              <div>
                <p>Top</p>
                <div id="sort-by-options">
                  <p><a href="#" data-value="score">Points</a>
                  <a href="#" data-value="descendants">Comments</a>
                </p></div>
              </div>
              <div>
                <p>Show</p>
                <div id="timeline-filter-options">
                  <p><a href="#" data-value="top10">Top 10</a>
                  <a href="#" data-value="top20">Top 20</a>
                  <a href="#" data-value="top50">Top 50</a>
                  <a href="#" data-value="top100">Top 100</a>
                </p></div>
              </div>
              <div>
                <p>Period</p>
                <div id="timeline-groupby-options">
                  <p><a href="#" data-value="day">Day</a>
                  <a href="#" data-value="week">Week</a>
                  <a href="#" data-value="month">Month</a>
                </p></div>
              </div>
            </div>

            <!-- Frontpage Specific Rows (conditionally visible) -->
            

            <!-- Aggregate Specific Rows (conditionally visible) -->
            <div id="aggregate-filter-controls">
              <div>
                <p>Period</p>
                <div id="aggregate-period-options">
                  <p><a href="#" data-value="day">Day</a>
                  <a href="#" data-value="week">Week</a>
                  <a href="#" data-value="month">Month</a>
                  <a href="#" data-value="year">Year</a>
                  <a href="#" data-value="range">Range</a>
                </p></div>
              </div>
              <div id="aggregate-slider-row">
                <p>Range</p>
                
              </div>
            </div>
            <!-- Filters Row -->
            <div>
              <p>Filters</p>
              
            </div>
            <!-- Advanced Feed Settings Toggle -->
            <div>
              <p><a href="#" id="advanced-feed-settings-toggle-link">show advanced feed filters...</a>
            </p></div>
            <!-- Advanced Feed Settings Items - initially hidden -->
            <div id="exclude-filter-row">
              <p>Exclude</p>
              <p>
                <span>i
                  <span>
                    Filter out stories containing these words in the title.
                    Separate multiple terms with commas (e.g., "crypto, NFT, politics").
                    Case-insensitive.
                  </span>
                </span>
              </p>
            </div>
            <div id="include-filter-row">
              <p>Include</p>
              <p>
                <span>i
                  <span>
                    Only show stories containing these words in the title.
                    Separate multiple terms with commas (e.g., "golang, webdev").
                    Case-insensitive.
                  </span>
                </span>
              </p>
            </div>
            <div id="min-votes-row">
              <p>Min Votes</p>
              <p>
                <span>i
                  <span>
                    Only show stories with at least this many votes (score).
                    Leave blank or 0 to disable.
                  </span>
                </span>
              </p>
            </div>
          </div></div>]]></description>
        </item>
    </channel>
</rss>