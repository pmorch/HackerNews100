<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 03 Nov 2024 00:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Show HN: A minimalist (brutalist?) website for sharing all your links (145 pts)]]></title>
            <link>https://lynx.boo</link>
            <guid>42027654</guid>
            <pubDate>Sat, 02 Nov 2024 17:10:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lynx.boo">https://lynx.boo</a>, See on <a href="https://news.ycombinator.com/item?id=42027654">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>Create your own link page (<a href="https://lynx.boo/lynxboo">here's ours</a>) by entering your username and clicking "Edit/Create".</p>
            <p>You can edit your link page at any time by visiting <code>/yourusername/edit</code>.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Britain's postwar sugar craze confirms harms of sweet diets in early life (183 pts)]]></title>
            <link>https://www.science.org/content/article/britain-s-postwar-sugar-craze-confirms-harms-sweet-diets-early-life</link>
            <guid>42027564</guid>
            <pubDate>Sat, 02 Nov 2024 16:56:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/britain-s-postwar-sugar-craze-confirms-harms-sweet-diets-early-life">https://www.science.org/content/article/britain-s-postwar-sugar-craze-confirms-harms-sweet-diets-early-life</a>, See on <a href="https://news.ycombinator.com/item?id=42027564">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/britain-s-postwar-sugar-craze-confirms-harms-sweet-diets-early-life: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Someday, Open-Source Calendly Alternative for Gmail / Google App Script (172 pts)]]></title>
            <link>https://github.com/rbbydotdev/someday</link>
            <guid>42027187</guid>
            <pubDate>Sat, 02 Nov 2024 16:04:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/rbbydotdev/someday">https://github.com/rbbydotdev/someday</a>, See on <a href="https://news.ycombinator.com/item?id=42027187">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Someday</h2><a id="user-content-someday" aria-label="Permalink: Someday" href="#someday"></a></p>
<p dir="auto"><strong>Free and open-source cal.com / calendly alternative built on <a href="https://developers.google.com/apps-script" rel="nofollow">Google-Apps-Script</a> for Gmail users.</strong></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/rbbydotdev/someday/blob/master/screencap1.jpg"><img src="https://github.com/rbbydotdev/someday/raw/master/screencap1.jpg" width="350"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Demo</h2><a id="user-content-demo" aria-label="Permalink: Demo" href="#demo"></a></p>
<p dir="auto"><a href="https://someday-demo.vercel.app/" rel="nofollow">https://someday-demo.vercel.app/</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">What is Someday?</h2><a id="user-content-what-is-someday" aria-label="Permalink: What is Someday?" href="#what-is-someday"></a></p>
<p dir="auto">Someday is a simple, open-source scheduling tool designed specifically for Gmail users. Uses Google Apps Scripts to host and <a href="https://github.com/google/clasp">clasp</a> to manage. Built with modern technologies like <a href="https://react.dev/" rel="nofollow">React</a>, <a href="https://www.typescriptlang.org/" rel="nofollow">TypeScript</a>, <a href="https://ui.shadcn.com/" rel="nofollow">Shadcn/UI</a>, and <a href="https://vite.dev/" rel="nofollow">Vite</a>. A simple alternative to traditional scheduling apps like Calendly.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Key Features</h3><a id="user-content-key-features" aria-label="Permalink: Key Features" href="#key-features"></a></p>
<ul dir="auto">
<li><strong>Free and Open Source</strong>: Enjoy all the premium scheduling features without any cost. Someday is completely free to use and open for contributions.</li>
<li><strong>Effortless Integration</strong>: Designed as a Google App Script, Someday integrates seamlessly with your Gmail, making it easy to manage your schedule directly from your inbox.</li>
<li><strong>Developer-Friendly</strong>: Built with modern, developer-preferred technologies, Someday is easy to customize and extend to meet your specific needs.</li>
<li><strong>Customizable Work Hours</strong>: Set your availability with precision, allowing others to book time slots that fit your schedule perfectly.</li>
<li><strong>Simple Booking Process</strong>: Users can select a date and time slot, then fill out a straightforward form with their name, email, phone, and an optional note.</li>
<li><strong>Privacy First</strong>: No data sharing beyond google to 3rd party apps</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Customize</h3><a id="user-content-customize" aria-label="Permalink: Customize" href="#customize"></a></p>
<p dir="auto">Change the following variables in <code>backend/src/app.ts</code> to customize your availability settings:</p>
<div dir="auto" data-snippet-clipboard-copy-content="// backend/src/app.ts
const CALENDAR = &quot;primary&quot;;
const TIME_ZONE = &quot;America/New_York&quot;;
const WORKDAYS = [1, 2, 3, 4, 5];
const WORKHOURS = {
  start: 9,
  end: 13,
};
const TIMESLOT_DURATION = 30;"><pre><span>// backend/src/app.ts</span>
<span>const</span> <span>CALENDAR</span> <span>=</span> <span>"primary"</span><span>;</span>
<span>const</span> <span>TIME_ZONE</span> <span>=</span> <span>"America/New_York"</span><span>;</span>
<span>const</span> <span>WORKDAYS</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>;</span>
<span>const</span> <span>WORKHOURS</span> <span>=</span> <span>{</span>
  <span>start</span>: <span>9</span><span>,</span>
  <span>end</span>: <span>13</span><span>,</span>
<span>}</span><span>;</span>
<span>const</span> <span>TIMESLOT_DURATION</span> <span>=</span> <span>30</span><span>;</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Develop</h3><a id="user-content-develop" aria-label="Permalink: Develop" href="#develop"></a></p>
<ul dir="auto">
<li><code>cd ./frontend</code></li>
<li><code>npm install</code></li>
<li><code>npm run dev</code></li>
<li>update <code>dummyData</code> by running <code>./dummydata.sh</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Install</h3><a id="user-content-install" aria-label="Permalink: Install" href="#install"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Step 1: Set Up Your Environment</h3><a id="user-content-step-1-set-up-your-environment" aria-label="Permalink: Step 1: Set Up Your Environment" href="#step-1-set-up-your-environment"></a></p>
<p dir="auto"><strong>you may need to sign out of all accounts, and only into your target account</strong></p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Install <code>clasp</code>:</strong></p>
<ul dir="auto">
<li>Ensure you have Node.js installed.</li>
<li>Install <code>clasp</code> globally using npm:
<div dir="auto" data-snippet-clipboard-copy-content="npm install -g @google/clasp"><pre>npm install -g @google/clasp</pre></div>
</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Login with <code>clasp</code>:</strong></p>
<ul dir="auto">
<li>Execute the following command to log in:

</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Remove Existing Configuration (if necessary):</strong></p>
<ul dir="auto">
<li>If you encounter issues, remove the existing <code>.clasp.json</code> file:

</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Enable Apps Script API:</strong></p>
<ul dir="auto">
<li>Visit <a href="https://script.google.com/home/usersettings" rel="nofollow">Google Apps Script API settings</a>.</li>
<li>Enable the Apps Script API.</li>
<li>Wait a few minutes for the changes to propagate.</li>
</ul>
</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Step 2: Create and Deploy the Script</h3><a id="user-content-step-2-create-and-deploy-the-script" aria-label="Permalink: Step 2: Create and Deploy the Script" href="#step-2-create-and-deploy-the-script"></a></p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Create a New Project:</strong></p>
<ul dir="auto">
<li>Create a new Apps Script project as a web app:
<div dir="auto" data-snippet-clipboard-copy-content="clasp create --type webapp"><pre>clasp create --type webapp</pre></div>
</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Deploy the Script:</strong></p>
<ul dir="auto">
<li>Use the following command to deploy your script:

</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Access the Web App:</strong></p>
<ul dir="auto">
<li>Visit the URL provided after deployment.</li>
<li>You will see the message "Authorization is required to perform that action."</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Authorize the Web App: (!!! IMPORTANT !!!)</strong></p>
<ul dir="auto">
<li>run <code>clasp open</code> to open the editor</li>
<li>go to <code>dist/app.gs</code></li>
<li>in the drop down at the top, select <code>fetchAvailability</code> then hit run</li>
<li>Authorization modal will pop up, 'Review permissions', select your account, you will see a warning, go to advanced, then Go to (unsafe) then click Allow</li>
<li>if it worked, refresh the page/editor then run the function again and it should complete without issue.</li>
</ul>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Cheat Sheet</h2><a id="user-content-cheat-sheet" aria-label="Permalink: Cheat Sheet" href="#cheat-sheet"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><code>npm run deploy</code> - build and delpoy</p>
</li>
<li>
<p dir="auto"><code>npm run build</code> - build only, follow with <code>clasp push</code> to push changes</p>
</li>
<li>
<p dir="auto"><code>undeployall.sh</code> - undeploy all versions of the script</p>
</li>
<li>
<p dir="auto"><code>deployments.sh</code> - list all deployments web-urls</p>
</li>
<li>
<p dir="auto"><code>clasp open</code> - open the script editor</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Screen Captures</h2><a id="user-content-screen-captures" aria-label="Permalink: Screen Captures" href="#screen-captures"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/rbbydotdev/someday/blob/master/screencap1.jpg"><img src="https://github.com/rbbydotdev/someday/raw/master/screencap1.jpg" width="350"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/rbbydotdev/someday/blob/master/screencap2.jpg"><img src="https://github.com/rbbydotdev/someday/raw/master/screencap2.jpg" width="350"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Open a pull request or issue to contribute to Someday. welcoming all contributions, including bug fixes, feature requests, and documentation improvements.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">MIT</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cash: An absurdly small jQuery alternative for modern browsers (119 pts)]]></title>
            <link>https://github.com/fabiospampinato/cash</link>
            <guid>42026054</guid>
            <pubDate>Sat, 02 Nov 2024 12:42:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/fabiospampinato/cash">https://github.com/fabiospampinato/cash</a>, See on <a href="https://news.ycombinator.com/item?id=42026054">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/fabiospampinato/cash/blob/master/resources/logo/logo.png"><img src="https://github.com/fabiospampinato/cash/raw/master/resources/logo/logo.png" alt="Cash Logo" width="400px"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Cash</h2><a id="user-content-cash" aria-label="Permalink: Cash" href="#cash"></a></p>
<p dir="auto">Cash is an absurdly small jQuery alternative for modern browsers (IE11+) that provides jQuery-style syntax for manipulating the DOM. Utilizing modern browser features to minimize the codebase, developers can use the familiar chainable methods at a fraction of the file size. 100% feature parity with jQuery isn't a goal, but Cash comes helpfully close, covering most day to day use cases.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Comparison</h2><a id="user-content-comparison" aria-label="Permalink: Comparison" href="#comparison"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Size</th>
<th>Cash</th>
<th>Zepto 1.2.0</th>
<th>jQuery Slim 3.4.1</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unminified</td>
<td><strong>36.5 KB</strong></td>
<td>58.7 KB</td>
<td>227 KB</td>
</tr>
<tr>
<td>Minified</td>
<td><strong>16 KB</strong></td>
<td>26 KB</td>
<td>71 KB</td>
</tr>
<tr>
<td>Minified &amp; Gzipped</td>
<td><strong>6 KB</strong></td>
<td>9.8 KB</td>
<td>24.4 KB</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">A <strong>76.6%</strong> gain in size reduction compared to jQuery Slim. If you need a smaller bundle, we support <a href="https://github.com/fabiospampinato/cash/blob/master/docs/partial_builds.md">partial builds</a> too.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Features</th>
<th>Cash</th>
<th>Zepto 1.2.0</th>
<th>jQuery Slim 3.4.1</th>
</tr>
</thead>
<tbody>
<tr>
<td>Supports Older Browsers</td>
<td>❌</td>
<td>️❌</td>
<td>✔</td>
</tr>
<tr>
<td>Supports Modern Browsers</td>
<td>✔</td>
<td>️✔</td>
<td>✔</td>
</tr>
<tr>
<td>Actively Maintained</td>
<td>✔</td>
<td>❌</td>
<td>✔</td>
</tr>
<tr>
<td>Namespaced Events</td>
<td>✔</td>
<td>️❌</td>
<td>✔</td>
</tr>
<tr>
<td>Typed Codebase</td>
<td>✔ (TypeScript)</td>
<td>️❌</td>
<td>❌</td>
</tr>
<tr>
<td>TypeScript Types</td>
<td>✔ (generated from code)</td>
<td><g-emoji alias="warning">⚠️</g-emoji> (via DefinitelyTyped)</td>
<td><g-emoji alias="warning">⚠️</g-emoji> (via DefinitelyTyped)</td>
</tr>
<tr>
<td>Partial Builds</td>
<td>✔ (can exclude individual methods)</td>
<td><g-emoji alias="warning">⚠️</g-emoji> (can exclude whole modules)</td>
<td><g-emoji alias="warning">⚠️</g-emoji> (can exclude whole modules)</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">If you're migrating from jQuery be sure to read our <a href="https://github.com/fabiospampinato/cash/blob/master/docs/migration_guide.md">migration guide</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">You can get Cash from <a href="https://cdn.jsdelivr.net/npm/cash-dom/dist/cash.min.js" rel="nofollow">jsDelivr</a> and use it like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="<script src=&quot;https://cdn.jsdelivr.net/npm/cash-dom/dist/cash.min.js&quot;></script>
<script>
  $(function () {
    $('html').addClass ( 'dom-loaded' );
    $('<footer>Appended with Cash</footer>').appendTo ( document.body );
  });
</script>"><pre><span>&lt;</span><span>script</span> <span>src</span>="<span>https://cdn.jsdelivr.net/npm/cash-dom/dist/cash.min.js</span>"<span>&gt;</span><span>&lt;/</span><span>script</span><span>&gt;</span>
<span>&lt;</span><span>script</span><span>&gt;</span>
  <span>$</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>
    <span>$</span><span>(</span><span>'html'</span><span>)</span><span>.</span><span>addClass</span> <span>(</span> <span>'dom-loaded'</span> <span>)</span><span>;</span>
    <span>$</span><span>(</span><span>'&lt;footer&gt;Appended with Cash&lt;/footer&gt;'</span><span>)</span><span>.</span><span>appendTo</span> <span>(</span> <span>document</span><span>.</span><span>body</span> <span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>&lt;/</span><span>script</span><span>&gt;</span></pre></div>
<p dir="auto">Cash is also available through <a href="https://npmjs.com/" rel="nofollow">npm</a> as the <a href="https://www.npmjs.com/package/cash-dom" rel="nofollow"><code>cash-dom</code></a> package:</p>
<div dir="auto" data-snippet-clipboard-copy-content="npm install --save cash-dom"><pre>npm install --save cash-dom</pre></div>
<p dir="auto">That you can then use like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="import $ from &quot;cash-dom&quot;;

$(function () {
  $('html').addClass ( 'dom-loaded' );
  $('<footer>Appended with Cash</footer>').appendTo ( document.body );
});"><pre><span>import</span> <span>$</span> <span>from</span> <span>"cash-dom"</span><span>;</span>

<span>$</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>$</span><span>(</span><span>'html'</span><span>)</span><span>.</span><span>addClass</span> <span>(</span> <span>'dom-loaded'</span> <span>)</span><span>;</span>
  <span>$</span><span>(</span><span>'&lt;footer&gt;Appended with Cash&lt;/footer&gt;'</span><span>)</span><span>.</span><span>appendTo</span> <span>(</span> <span>document</span><span>.</span><span>body</span> <span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Documentation</h2><a id="user-content-documentation" aria-label="Permalink: Documentation" href="#documentation"></a></p>
<p dir="auto">Cash gives you a query selector, <a href="#collection-methods">collection methods</a> and some <a href="#cash-methods">library methods</a>. If you need more details about our API just check out <a href="https://api.jquery.com/" rel="nofollow">jQuery's</a>, while we don't implement everything that jQuery provides, pretty much everything that we do implement should be compatible with jQuery. Cash can be extended with custom methods, read how <a href="https://github.com/fabiospampinato/cash/blob/master/docs/extending_cash.md">here</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">$()</h3><a id="" aria-label="Permalink: $()" href="#"></a></p>
<p dir="auto">This is the main selector method for Cash. It returns an actionable collection of nodes.</p>
<p dir="auto">If a function is provided, the function will be run once the DOM is ready.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$( selector [, element] ) // => collection, using `element` as the context
$( selector [, collection] ) // => collection, using `collection` as the context
$(node) // => collection
$(nodeList) // => collection
$(htmlString) // => collection
$(collection) // => self
$(function () {}) // => document ready callback"><pre><span>$</span><span>(</span> <span>selector</span> <span>[</span><span>,</span> <span>element</span><span>]</span> <span>)</span> <span>// =&gt; collection, using `element` as the context</span>
<span>$</span><span>(</span> <span>selector</span> <span>[</span><span>,</span> <span>collection</span><span>]</span> <span>)</span> <span>// =&gt; collection, using `collection` as the context</span>
<span>$</span><span>(</span><span>node</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>nodeList</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>htmlString</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>collection</span><span>)</span> <span>// =&gt; self</span>
<span>$</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>)</span> <span>// =&gt; document ready callback</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Collection Methods</h3><a id="user-content-collection-methods" aria-label="Permalink: Collection Methods" href="#collection-methods"></a></p>
<p dir="auto">These methods from the collection prototype (<a href="#fn">$.fn</a>) are available once you create a collection with <code>$()</code> and are called like so:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).addClass ( className ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>addClass</span> <span>(</span> <span>className</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto">Some <a href="https://github.com/fabiospampinato/cash/tree/master/src/extra">extra methods</a> are available but disabled by default.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Attributes</th>
<th>Collection</th>
<th>CSS</th>
<th>Data</th>
<th>Dimensions</th>
<th>Effects</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#fnaddclass-">fn.addClass ()</a></td>
<td><a href="#fnadd-">fn.add ()</a></td>
<td><a href="#fncss-">fn.css ()</a></td>
<td><a href="#fndata-">fn.data ()</a></td>
<td><a href="#fnheight-">fn.height ()</a></td>
<td><a href="#fnhide-">fn.hide ()</a></td>
</tr>
<tr>
<td><a href="#fnattr-">fn.attr ()</a></td>
<td><a href="#fneach-">fn.each ()</a></td>
<td></td>
<td></td>
<td><a href="#fninnerheight-">fn.innerHeight ()</a></td>
<td><a href="#fnshow-">fn.show ()</a></td>
</tr>
<tr>
<td><a href="#fnhasclass-">fn.hasClass ()</a></td>
<td><a href="#fneq-">fn.eq ()</a></td>
<td></td>
<td></td>
<td><a href="#fninnerwidth-">fn.innerWidth ()</a></td>
<td><a href="#fntoggle-">fn.toggle ()</a></td>
</tr>
<tr>
<td><a href="#fnprop-">fn.prop ()</a></td>
<td><a href="#fnfilter-">fn.filter ()</a></td>
<td></td>
<td></td>
<td><a href="#fnouterheight-">fn.outerHeight ()</a></td>
<td></td>
</tr>
<tr>
<td><a href="#fnremoveattr-">fn.removeAttr ()</a></td>
<td><a href="#fnfirst-">fn.first ()</a></td>
<td></td>
<td></td>
<td><a href="#fnouterwidth-">fn.outerWidth ()</a></td>
<td></td>
</tr>
<tr>
<td><a href="#fnremoveclass-">fn.removeClass ()</a></td>
<td><a href="#fnget-">fn.get ()</a></td>
<td></td>
<td></td>
<td><a href="#fnwidth-">fn.width ()</a></td>
<td></td>
</tr>
<tr>
<td><a href="#fnremoveprop-">fn.removeProp ()</a></td>
<td><a href="#fnindex-">fn.index ()</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="#fntoggleclass-">fn.toggleClass ()</a></td>
<td><a href="#fnlast-">fn.last ()</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><a href="#fnmap-">fn.map ()</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><a href="#fnslice-">fn.slice ()</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Events</th>
<th>Forms</th>
<th>Manipulation</th>
<th>Offset</th>
<th>Traversal</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#fnoff-">fn.off ()</a></td>
<td><a href="#fnserialize-">fn.serialize ()</a></td>
<td><a href="#fnafter-">fn.after ()</a></td>
<td><a href="#fnoffset-">fn.offset ()</a></td>
<td><a href="#fnchildren-">fn.children ()</a></td>
</tr>
<tr>
<td><a href="#fnon-">fn.on ()</a></td>
<td><a href="#fnval-">fn.val ()</a></td>
<td><a href="#fnappend-">fn.append ()</a></td>
<td><a href="#fnoffsetparent-">fn.offsetParent ()</a></td>
<td><a href="#fnclosest-">fn.closest ()</a></td>
</tr>
<tr>
<td><a href="#fnone-">fn.one ()</a></td>
<td></td>
<td><a href="#fnappendto-">fn.appendTo ()</a></td>
<td><a href="#fnposition-">fn.position ()</a></td>
<td><a href="#fncontents-">fn.contents ()</a></td>
</tr>
<tr>
<td><a href="#fnready-">fn.ready ()</a></td>
<td></td>
<td><a href="#fnbefore-">fn.before ()</a></td>
<td></td>
<td><a href="#fnfind-">fn.find ()</a></td>
</tr>
<tr>
<td><a href="#fntrigger-">fn.trigger ()</a></td>
<td></td>
<td><a href="#fnclone-">fn.clone ()</a></td>
<td></td>
<td><a href="#fnhas-">fn.has ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fndetach-">fn.detach ()</a></td>
<td></td>
<td><a href="#fnis-">fn.is ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnempty-">fn.empty ()</a></td>
<td></td>
<td><a href="#fnnext-">fn.next ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnhtml-">fn.html ()</a></td>
<td></td>
<td><a href="#fnnextall-">fn.nextAll ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fninsertafter-">fn.insertAfter ()</a></td>
<td></td>
<td><a href="#fnnextuntil-">fn.nextUntil ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fninsertbefore-">fn.insertBefore ()</a></td>
<td></td>
<td><a href="#fnnot-">fn.not ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnprepend-">fn.prepend ()</a></td>
<td></td>
<td><a href="#fnparent-">fn.parent ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnprependto-">fn.prependTo ()</a></td>
<td></td>
<td><a href="#fnparents-">fn.parents ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnremove-">fn.remove ()</a></td>
<td></td>
<td><a href="#fnparentsuntil-">fn.parentsUntil ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnreplaceall-">fn.replaceAll ()</a></td>
<td></td>
<td><a href="#fnprev-">fn.prev ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnreplacewith-">fn.replaceWith ()</a></td>
<td></td>
<td><a href="#fnprevall-">fn.prevAll ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fntext-">fn.text ()</a></td>
<td></td>
<td><a href="#fnprevuntil-">fn.prevUntil ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnunwrap-">fn.unwrap ()</a></td>
<td></td>
<td><a href="#fnsiblings-">fn.siblings ()</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnwrap-">fn.wrap ()</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnwrapall-">fn.wrapAll ()</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="#fnwrapinner-">fn.wrapInner ()</a></td>
<td></td>
<td></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.fn</h4><a id="user-content-fn" aria-label="Permalink: $.fn" href="#fn"></a></p>
<p dir="auto">The main prototype for collections, allowing you to extend Cash with plugins by adding methods to all collections.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.fn // => Cash.prototype
$.fn.myMethod = function () {}; // Custom method added to all collections
$.fn.extend ( object ); // Add multiple methods to the prototype"><pre><span>$</span><span>.</span><span>fn</span> <span>// =&gt; Cash.prototype</span>
<span>$</span><span>.</span><span>fn</span><span>.</span><span>myMethod</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span> <span>// Custom method added to all collections</span>
<span>$</span><span>.</span><span>fn</span><span>.</span><span>extend</span> <span>(</span> <span>object</span> <span>)</span><span>;</span> <span>// Add multiple methods to the prototype</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.add ()</h4><a id="user-content-fnadd-" aria-label="Permalink: fn.add ()" href="#fnadd-"></a></p>
<p dir="auto">Returns a new collection with the element(s) added to the end.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).add ( element ) // => collection
$(element).add ( selector ) // => collection
$(element).add ( collection ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>add</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>add</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>add</span> <span>(</span> <span>collection</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.addClass ()</h4><a id="user-content-fnaddclass-" aria-label="Permalink: fn.addClass ()" href="#fnaddclass-"></a></p>
<p dir="auto">Adds the <code>className</code> class to each element in the collection.</p>
<p dir="auto">Accepts space-separated <code>className</code> for adding multiple classes.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).addClass ( className ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>addClass</span> <span>(</span> <span>className</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.after ()</h4><a id="user-content-fnafter-" aria-label="Permalink: fn.after ()" href="#fnafter-"></a></p>
<p dir="auto">Inserts content or elements after the collection.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).after ( element ) // => collection
$(element).after ( htmlString ) // => collection
$(element).after ( content [, content] ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>after</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>after</span> <span>(</span> <span>htmlString</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>after</span> <span>(</span> <span>content</span> <span>[</span><span>,</span> <span>content</span><span>]</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.append ()</h4><a id="user-content-fnappend-" aria-label="Permalink: fn.append ()" href="#fnappend-"></a></p>
<p dir="auto">Appends content or elements to each element in the collection.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).append ( element ) // => collection
$(element).append ( htmlString ) // => collection
$(element).append ( content [, content] ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>append</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>append</span> <span>(</span> <span>htmlString</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>append</span> <span>(</span> <span>content</span> <span>[</span><span>,</span> <span>content</span><span>]</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.appendTo ()</h4><a id="user-content-fnappendto-" aria-label="Permalink: fn.appendTo ()" href="#fnappendto-"></a></p>
<p dir="auto">Adds the elements in the collection to the target element(s).</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).appendTo ( element ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>appendTo</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.attr ()</h4><a id="user-content-fnattr-" aria-label="Permalink: fn.attr ()" href="#fnattr-"></a></p>
<p dir="auto">Without <code>attrValue</code>, returns the attribute value of the first element in the collection.</p>
<p dir="auto">With <code>attrValue</code>, sets the attribute value of each element of the collection.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).attr ( attrName ) // value
$(element).attr ( attrName, attrValue ) // => collection
$(element).attr ( object ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>attr</span> <span>(</span> <span>attrName</span> <span>)</span> <span>// value</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>attr</span> <span>(</span> <span>attrName</span><span>,</span> <span>attrValue</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>attr</span> <span>(</span> <span>object</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.before ()</h4><a id="user-content-fnbefore-" aria-label="Permalink: fn.before ()" href="#fnbefore-"></a></p>
<p dir="auto">Inserts content or elements before the collection.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).before ( element ) // => collection
$(element).before ( htmlString ) // => collection
$(element).before ( content [, content] ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>before</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>before</span> <span>(</span> <span>htmlString</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>before</span> <span>(</span> <span>content</span> <span>[</span><span>,</span> <span>content</span><span>]</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.children ()</h4><a id="user-content-fnchildren-" aria-label="Permalink: fn.children ()" href="#fnchildren-"></a></p>
<p dir="auto">Without a selector specified, returns a collection of child elements.</p>
<p dir="auto">With a selector, returns child elements that match the selector.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).children () // => collection
$(element).children ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>children</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>children</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.closest ()</h4><a id="user-content-fnclosest-" aria-label="Permalink: fn.closest ()" href="#fnclosest-"></a></p>
<p dir="auto">Returns the closest matching selector up the DOM tree.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).closest ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>closest</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.contents ()</h4><a id="user-content-fncontents-" aria-label="Permalink: fn.contents ()" href="#fncontents-"></a></p>
<p dir="auto">Get the children of each element in the set of matched elements, including text and comment nodes.</p>
<p dir="auto">Useful for selecting elements in friendly iframes.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$('iframe').contents ().find ( '*' ) // => collection"><pre><span>$</span><span>(</span><span>'iframe'</span><span>)</span><span>.</span><span>contents</span> <span>(</span><span>)</span><span>.</span><span>find</span> <span>(</span> <span>'*'</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.clone ()</h4><a id="user-content-fnclone-" aria-label="Permalink: fn.clone ()" href="#fnclone-"></a></p>
<p dir="auto">Returns a collection with cloned elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).clone () // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>clone</span> <span>(</span><span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.detach ()</h4><a id="user-content-fndetach-" aria-label="Permalink: fn.detach ()" href="#fndetach-"></a></p>
<p dir="auto">Removes collection elements, optionally that match the selector, from the DOM.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).detach () // => collection
$(element).detach ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>detach</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>detach</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.css ()</h4><a id="user-content-fncss-" aria-label="Permalink: fn.css ()" href="#fncss-"></a></p>
<p dir="auto">Returns a CSS property value when just property is supplied.</p>
<p dir="auto">Sets a CSS property when property and value are supplied.</p>
<p dir="auto">Sets multiple properties when an object is supplied.</p>
<p dir="auto">Properties will be autoprefixed if needed for the user's browser.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).css ( property ) // => value
$(element).css ( property, value ) // => collection
$(element).css ( object ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>css</span> <span>(</span> <span>property</span> <span>)</span> <span>// =&gt; value</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>css</span> <span>(</span> <span>property</span><span>,</span> <span>value</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>css</span> <span>(</span> <span>object</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.data ()</h4><a id="user-content-fndata-" aria-label="Permalink: fn.data ()" href="#fndata-"></a></p>
<p dir="auto">Without arguments, returns an object mapping all the <code>data-*</code> attributes to their values.</p>
<p dir="auto">With a <code>key</code>, return the value of the corresponding <code>data-*</code> attribute.</p>
<p dir="auto">With both a <code>key</code> and <code>value</code>, sets the value of the corresponding <code>data-*</code> attribute to <code>value</code>.</p>
<p dir="auto">Multiple data can be set when an object is supplied.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).data () // => object
$(element).data ( key ) // => value
$(element).data ( key, value ) // => collection
$(element).data ( object ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>data</span> <span>(</span><span>)</span> <span>// =&gt; object</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>data</span> <span>(</span> <span>key</span> <span>)</span> <span>// =&gt; value</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>data</span> <span>(</span> <span>key</span><span>,</span> <span>value</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>data</span> <span>(</span> <span>object</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.each ()</h4><a id="user-content-fneach-" aria-label="Permalink: fn.each ()" href="#fneach-"></a></p>
<p dir="auto">Iterates over a collection with <code>callback ( index, element )</code>. The callback function may exit iteration early by returning <code>false</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).each ( callback ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>each</span> <span>(</span> <span>callback</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.empty ()</h4><a id="user-content-fnempty-" aria-label="Permalink: fn.empty ()" href="#fnempty-"></a></p>
<p dir="auto">Empties the elements interior markup.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).empty () // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>empty</span> <span>(</span><span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.eq ()</h4><a id="user-content-fneq-" aria-label="Permalink: fn.eq ()" href="#fneq-"></a></p>
<p dir="auto">Returns a collection with the element at index.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).eq ( index ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>eq</span> <span>(</span> <span>index</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.extend ()</h4><a id="user-content-fnextend-" aria-label="Permalink: fn.extend ()" href="#fnextend-"></a></p>
<p dir="auto">Adds properties to the Cash collection prototype.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.fn.extend ( object ) // => object"><pre><span>$</span><span>.</span><span>fn</span><span>.</span><span>extend</span> <span>(</span> <span>object</span> <span>)</span> <span>// =&gt; object</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.filter ()</h4><a id="user-content-fnfilter-" aria-label="Permalink: fn.filter ()" href="#fnfilter-"></a></p>
<p dir="auto">Returns the collection that results from applying the filter selector/method.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).filter ( selector ) // => collection
$(element).filter ( function ( index, element ) {} ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>filter</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>filter</span> <span>(</span> <span>function</span> <span>(</span> <span>index</span><span>,</span> <span>element</span> <span>)</span> <span>{</span><span>}</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.find ()</h4><a id="user-content-fnfind-" aria-label="Permalink: fn.find ()" href="#fnfind-"></a></p>
<p dir="auto">Returns selector match descendants from the first element in the collection.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).find ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>find</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.first ()</h4><a id="user-content-fnfirst-" aria-label="Permalink: fn.first ()" href="#fnfirst-"></a></p>
<p dir="auto">Returns a collection containing only the first element.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).first () // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>first</span> <span>(</span><span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.get ()</h4><a id="user-content-fnget-" aria-label="Permalink: fn.get ()" href="#fnget-"></a></p>
<p dir="auto">Returns the element at the index, or returns all elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).get ( index ) // => domNode
$(element).get () // => domNode[]"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>get</span> <span>(</span> <span>index</span> <span>)</span> <span>// =&gt; domNode</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>get</span> <span>(</span><span>)</span> <span>// =&gt; domNode[]</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.has ()</h4><a id="user-content-fnhas-" aria-label="Permalink: fn.has ()" href="#fnhas-"></a></p>
<p dir="auto">Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).has ( selector ) // => collection
$(element).has ( element ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>has</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>has</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.hasClass ()</h4><a id="user-content-fnhasclass-" aria-label="Permalink: fn.hasClass ()" href="#fnhasclass-"></a></p>
<p dir="auto">Returns the boolean result of checking if any element in the collection has the <code>className</code> attribute.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).hasClass ( className ) // => boolean"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>hasClass</span> <span>(</span> <span>className</span> <span>)</span> <span>// =&gt; boolean</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.height ()</h4><a id="user-content-fnheight-" aria-label="Permalink: fn.height ()" href="#fnheight-"></a></p>
<p dir="auto">Returns or sets the height of the element.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).height () // => Integer
$(element).height ( number ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>height</span> <span>(</span><span>)</span> <span>// =&gt; Integer</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>height</span> <span>(</span> <span>number</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.hide ()</h4><a id="user-content-fnhide-" aria-label="Permalink: fn.hide ()" href="#fnhide-"></a></p>
<p dir="auto">Hide the elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).hide () // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>hide</span> <span>(</span><span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.html ()</h4><a id="user-content-fnhtml-" aria-label="Permalink: fn.html ()" href="#fnhtml-"></a></p>
<p dir="auto">Returns the HTML text of the first element in the collection, sets the HTML if provided.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).html () // => HTML Text
$(element).html ( htmlString ) // => HTML Text"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>html</span> <span>(</span><span>)</span> <span>// =&gt; HTML Text</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>html</span> <span>(</span> <span>htmlString</span> <span>)</span> <span>// =&gt; HTML Text</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.index ()</h4><a id="user-content-fnindex-" aria-label="Permalink: fn.index ()" href="#fnindex-"></a></p>
<p dir="auto">Returns the index of the element in its parent if an element or selector isn't provided. Returns index within element or selector if it is.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).index () // => Integer
$(element).index ( element ) // => Integer"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>index</span> <span>(</span><span>)</span> <span>// =&gt; Integer</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>index</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; Integer</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.innerHeight ()</h4><a id="user-content-fninnerheight-" aria-label="Permalink: fn.innerHeight ()" href="#fninnerheight-"></a></p>
<p dir="auto">Returns the height of the element + padding.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).innerHeight () // => Integer"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>innerHeight</span> <span>(</span><span>)</span> <span>// =&gt; Integer</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.innerWidth ()</h4><a id="user-content-fninnerwidth-" aria-label="Permalink: fn.innerWidth ()" href="#fninnerwidth-"></a></p>
<p dir="auto">Returns the width of the element + padding.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).innerWidth () // => Integer"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>innerWidth</span> <span>(</span><span>)</span> <span>// =&gt; Integer</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.insertAfter ()</h4><a id="user-content-fninsertafter-" aria-label="Permalink: fn.insertAfter ()" href="#fninsertafter-"></a></p>
<p dir="auto">Inserts collection after specified element.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).insertAfter ( element ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>insertAfter</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.insertBefore ()</h4><a id="user-content-fninsertbefore-" aria-label="Permalink: fn.insertBefore ()" href="#fninsertbefore-"></a></p>
<p dir="auto">Inserts collection before specified element.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).insertBefore ( element ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>insertBefore</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.is ()</h4><a id="user-content-fnis-" aria-label="Permalink: fn.is ()" href="#fnis-"></a></p>
<p dir="auto">Returns whether the provided selector, element or collection matches any element in the collection.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).is ( selector ) // => boolean"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>is</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; boolean</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.last ()</h4><a id="user-content-fnlast-" aria-label="Permalink: fn.last ()" href="#fnlast-"></a></p>
<p dir="auto">Returns a collection containing only the last element.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).last () // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>last</span> <span>(</span><span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.map ()</h4><a id="user-content-fnmap-" aria-label="Permalink: fn.map ()" href="#fnmap-"></a></p>
<p dir="auto">Returns a new collection, mapping each element with <code>callback ( index, element )</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(selector).map ( callback ) // => collection"><pre><span>$</span><span>(</span><span>selector</span><span>)</span><span>.</span><span>map</span> <span>(</span> <span>callback</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.next ()</h4><a id="user-content-fnnext-" aria-label="Permalink: fn.next ()" href="#fnnext-"></a></p>
<p dir="auto">Returns the next adjacent elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).next () // => collection
$(element).next ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>next</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>next</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.nextAll ()</h4><a id="user-content-fnnextall-" aria-label="Permalink: fn.nextAll ()" href="#fnnextall-"></a></p>
<p dir="auto">Returns all the next elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).nextAll () // => collection
$(element).nextAll ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>nextAll</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>nextAll</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.nextUntil ()</h4><a id="user-content-fnnextuntil-" aria-label="Permalink: fn.nextUntil ()" href="#fnnextuntil-"></a></p>
<p dir="auto">Returns all the next elements, until the provided selector matches.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).nextUntil ( selector ) // => collection
$(element).nextUntil ( selector, filterSelector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>nextUntil</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>nextUntil</span> <span>(</span> <span>selector</span><span>,</span> <span>filterSelector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.not ()</h4><a id="user-content-fnnot-" aria-label="Permalink: fn.not ()" href="#fnnot-"></a></p>
<p dir="auto">Filters collection by false match on collection/selector.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).not ( selector ) // => collection
$(element).not ( collection ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>not</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>not</span> <span>(</span> <span>collection</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.off ()</h4><a id="user-content-fnoff-" aria-label="Permalink: fn.off ()" href="#fnoff-"></a></p>
<p dir="auto">Removes event listener from collection elements.</p>
<p dir="auto">Accepts space-separated <code>eventName</code> for removing multiple events listeners.</p>
<p dir="auto">Removes all event listeners if called without arguments.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).off ( eventName, eventHandler ) // => collection
$(element).off ( eventName ) // => collection
$(element).off ( eventsMap ) // => collection
$(element).off () // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>off</span> <span>(</span> <span>eventName</span><span>,</span> <span>eventHandler</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>off</span> <span>(</span> <span>eventName</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>off</span> <span>(</span> <span>eventsMap</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>off</span> <span>(</span><span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.offset ()</h4><a id="user-content-fnoffset-" aria-label="Permalink: fn.offset ()" href="#fnoffset-"></a></p>
<p dir="auto">Get the coordinates of the first element in a collection relative to the document.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).offset () // => Object"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>offset</span> <span>(</span><span>)</span> <span>// =&gt; Object</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.offsetParent ()</h4><a id="user-content-fnoffsetparent-" aria-label="Permalink: fn.offsetParent ()" href="#fnoffsetparent-"></a></p>
<p dir="auto">Get the first element's ancestor that's positioned.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).offsetParent () // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>offsetParent</span> <span>(</span><span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.on ()</h4><a id="user-content-fnon-" aria-label="Permalink: fn.on ()" href="#fnon-"></a></p>
<p dir="auto">Adds event listener to collection elements.</p>
<p dir="auto">Accepts space-separated <code>eventName</code> for listening to multiple events.</p>
<p dir="auto">Event is delegated if delegate is supplied.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).on ( eventsMap ) // => collection
$(element).on ( eventName, eventHandler ) // => collection
$(element).on ( eventName, delegate, eventHandler ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>on</span> <span>(</span> <span>eventsMap</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>on</span> <span>(</span> <span>eventName</span><span>,</span> <span>eventHandler</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>on</span> <span>(</span> <span>eventName</span><span>,</span> <span>delegate</span><span>,</span> <span>eventHandler</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.one ()</h4><a id="user-content-fnone-" aria-label="Permalink: fn.one ()" href="#fnone-"></a></p>
<p dir="auto">Adds event listener to collection elements that only triggers once for each element.</p>
<p dir="auto">Accepts space-separated <code>eventName</code> for listening to multiple events.</p>
<p dir="auto">Event is delegated if delegate is supplied.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).one ( eventName, eventHandler ) // => collection
$(element).one ( eventName, delegate, eventHandler ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>one</span> <span>(</span> <span>eventName</span><span>,</span> <span>eventHandler</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>one</span> <span>(</span> <span>eventName</span><span>,</span> <span>delegate</span><span>,</span> <span>eventHandler</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.outerHeight ()</h4><a id="user-content-fnouterheight-" aria-label="Permalink: fn.outerHeight ()" href="#fnouterheight-"></a></p>
<p dir="auto">Returns the outer height of the element. Includes margins if <code>includeMargings</code> is set to true.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).outerHeight () // => Integer
$(element).outerHeight ( includeMargins ) // => Integer"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>outerHeight</span> <span>(</span><span>)</span> <span>// =&gt; Integer</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>outerHeight</span> <span>(</span> <span>includeMargins</span> <span>)</span> <span>// =&gt; Integer</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.outerWidth ()</h4><a id="user-content-fnouterwidth-" aria-label="Permalink: fn.outerWidth ()" href="#fnouterwidth-"></a></p>
<p dir="auto">Returns the outer width of the element. Includes margins if <code>includeMargings</code> is set to true.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).outerWidth () // => Integer
$(element).outerWidth ( includeMargins ) // => Integer"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>outerWidth</span> <span>(</span><span>)</span> <span>// =&gt; Integer</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>outerWidth</span> <span>(</span> <span>includeMargins</span> <span>)</span> <span>// =&gt; Integer</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.parent ()</h4><a id="user-content-fnparent-" aria-label="Permalink: fn.parent ()" href="#fnparent-"></a></p>
<p dir="auto">Returns collection of elements who are parent of elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).parent () // => collection
$(element).parent ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>parent</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>parent</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.parents ()</h4><a id="user-content-fnparents-" aria-label="Permalink: fn.parents ()" href="#fnparents-"></a></p>
<p dir="auto">Returns collection of elements who are parents of elements. Optionally filtering by selector.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).parents () // => collection
$(element).parents ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>parents</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>parents</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.parentsUntil ()</h4><a id="user-content-fnparentsuntil-" aria-label="Permalink: fn.parentsUntil ()" href="#fnparentsuntil-"></a></p>
<p dir="auto">Returns collection of elements who are parents of elements, until a provided selector matches. Optionally filtering by selector.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).parentsUntil ( selector ) // => collection
$(element).parentsUntil ( selector, filterSelector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>parentsUntil</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>parentsUntil</span> <span>(</span> <span>selector</span><span>,</span> <span>filterSelector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.position ()</h4><a id="user-content-fnposition-" aria-label="Permalink: fn.position ()" href="#fnposition-"></a></p>
<p dir="auto">Get the coordinates of the first element in a collection relative to its <code>offsetParent</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).position () // => object"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>position</span> <span>(</span><span>)</span> <span>// =&gt; object</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.prepend ()</h4><a id="user-content-fnprepend-" aria-label="Permalink: fn.prepend ()" href="#fnprepend-"></a></p>
<p dir="auto">Prepends content or elements to the each element in collection.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).prepend ( element ) // => collection
$(element).prepend ( htmlString ) // => collection
$(element).prepend ( content [, content] ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prepend</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prepend</span> <span>(</span> <span>htmlString</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prepend</span> <span>(</span> <span>content</span> <span>[</span><span>,</span> <span>content</span><span>]</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.prependTo ()</h4><a id="user-content-fnprependto-" aria-label="Permalink: fn.prependTo ()" href="#fnprependto-"></a></p>
<p dir="auto">Prepends elements in a collection to the target element(s).</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).prependTo ( element ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prependTo</span> <span>(</span> <span>element</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.prev ()</h4><a id="user-content-fnprev-" aria-label="Permalink: fn.prev ()" href="#fnprev-"></a></p>
<p dir="auto">Returns the previous adjacent elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).prev () // => collection
$(element).prev ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prev</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prev</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.prevAll ()</h4><a id="user-content-fnprevall-" aria-label="Permalink: fn.prevAll ()" href="#fnprevall-"></a></p>
<p dir="auto">Returns all the previous elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).prevAll () // => collection
$(element).prevAll ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prevAll</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prevAll</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.prevUntil ()</h4><a id="user-content-fnprevuntil-" aria-label="Permalink: fn.prevUntil ()" href="#fnprevuntil-"></a></p>
<p dir="auto">Returns all the previous elements, until the provided selector matches.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).prevUntil ( selector ) // => collection
$(element).prevUntil ( selector, filterSelector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prevUntil</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prevUntil</span> <span>(</span> <span>selector</span><span>,</span> <span>filterSelector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.prop ()</h4><a id="user-content-fnprop-" aria-label="Permalink: fn.prop ()" href="#fnprop-"></a></p>
<p dir="auto">Returns a property value when just property is supplied.</p>
<p dir="auto">Sets a property when property and value are supplied, and sets multiple properties when an object is supplied.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).prop ( property ) // => property value
$(element).prop ( property, value ) // => collection
$(element).prop ( object ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prop</span> <span>(</span> <span>property</span> <span>)</span> <span>// =&gt; property value</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prop</span> <span>(</span> <span>property</span><span>,</span> <span>value</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>prop</span> <span>(</span> <span>object</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.ready ()</h4><a id="user-content-fnready-" aria-label="Permalink: fn.ready ()" href="#fnready-"></a></p>
<p dir="auto">Calls callback method on DOMContentLoaded.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(document).ready ( callback ) // => collection/span"><pre><span>$</span><span>(</span><span>document</span><span>)</span><span>.</span><span>ready</span> <span>(</span> <span>callback</span> <span>)</span> <span>// =&gt; collection/span</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.remove ()</h4><a id="user-content-fnremove-" aria-label="Permalink: fn.remove ()" href="#fnremove-"></a></p>
<p dir="auto">Removes collection elements, optionally that match the selector, from the DOM and removes all their event listeners.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).remove () // => collection
$(element).remove ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>remove</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>remove</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.replaceAll ()</h4><a id="user-content-fnreplaceall-" aria-label="Permalink: fn.replaceAll ()" href="#fnreplaceall-"></a></p>
<p dir="auto">This is similar to <a href="#fnreplacewith-">fn.replaceWith ()</a>, but with the source and target reversed.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).replaceAll ( content ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>replaceAll</span> <span>(</span> <span>content</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.replaceWith ()</h4><a id="user-content-fnreplacewith-" aria-label="Permalink: fn.replaceWith ()" href="#fnreplacewith-"></a></p>
<p dir="auto">Replace collection elements with the provided new content.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).replaceWith ( content ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>replaceWith</span> <span>(</span> <span>content</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.removeAttr ()</h4><a id="user-content-fnremoveattr-" aria-label="Permalink: fn.removeAttr ()" href="#fnremoveattr-"></a></p>
<p dir="auto">Removes attribute from collection elements.</p>
<p dir="auto">Accepts space-separated attrName for removing multiple attributes.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).removeAttr ( attrName ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>removeAttr</span> <span>(</span> <span>attrName</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.removeClass ()</h4><a id="user-content-fnremoveclass-" aria-label="Permalink: fn.removeClass ()" href="#fnremoveclass-"></a></p>
<p dir="auto">Removes className from collection elements.</p>
<p dir="auto">Accepts space-separated className for adding multiple classes.</p>
<p dir="auto">Providing no arguments will remove all classes.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).removeClass () // => collection
$(element).removeClass ( className ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>removeClass</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>removeClass</span> <span>(</span> <span>className</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.removeProp ()</h4><a id="user-content-fnremoveprop-" aria-label="Permalink: fn.removeProp ()" href="#fnremoveprop-"></a></p>
<p dir="auto">Removes property from collection elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).removeProp ( propName ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>removeProp</span> <span>(</span> <span>propName</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.serialize ()</h4><a id="user-content-fnserialize-" aria-label="Permalink: fn.serialize ()" href="#fnserialize-"></a></p>
<p dir="auto">When called on a form, serializes and returns form data.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(form).serialize () // => String"><pre><span>$</span><span>(</span><span>form</span><span>)</span><span>.</span><span>serialize</span> <span>(</span><span>)</span> <span>// =&gt; String</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.show ()</h4><a id="user-content-fnshow-" aria-label="Permalink: fn.show ()" href="#fnshow-"></a></p>
<p dir="auto">Show the elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).show () // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>show</span> <span>(</span><span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.siblings ()</h4><a id="user-content-fnsiblings-" aria-label="Permalink: fn.siblings ()" href="#fnsiblings-"></a></p>
<p dir="auto">Returns a collection of sibling elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).siblings () // => collection
$(element).siblings ( selector ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>siblings</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>siblings</span> <span>(</span> <span>selector</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.slice ()</h4><a id="user-content-fnslice-" aria-label="Permalink: fn.slice ()" href="#fnslice-"></a></p>
<p dir="auto">Returns a new collection with elements taken from start to end.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(selector).slice ( start, end ) // => collection"><pre><span>$</span><span>(</span><span>selector</span><span>)</span><span>.</span><span>slice</span> <span>(</span> <span>start</span><span>,</span> <span>end</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.text ()</h4><a id="user-content-fntext-" aria-label="Permalink: fn.text ()" href="#fntext-"></a></p>
<p dir="auto">Returns the inner text of the first element in the collection, sets the text if textContent is provided.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).text () // => text
$(element).text ( textContent ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>text</span> <span>(</span><span>)</span> <span>// =&gt; text</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>text</span> <span>(</span> <span>textContent</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.toggle ()</h4><a id="user-content-fntoggle-" aria-label="Permalink: fn.toggle ()" href="#fntoggle-"></a></p>
<p dir="auto">Hide or show the elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).toggle () // => collection
$(element).toggle ( force ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>toggle</span> <span>(</span><span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>toggle</span> <span>(</span> <span>force</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.toggleClass ()</h4><a id="user-content-fntoggleclass-" aria-label="Permalink: fn.toggleClass ()" href="#fntoggleclass-"></a></p>
<p dir="auto">Adds or removes className from collection elements based on if the element already has the class.</p>
<p dir="auto">Accepts space-separated classNames for toggling multiple classes, and an optional <code>force</code> boolean to ensure classes are added (<code>true</code>) or removed (<code>false</code>).</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).toggleClass ( className ) // => collection
$(element).toggleClass ( className, force ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>toggleClass</span> <span>(</span> <span>className</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>toggleClass</span> <span>(</span> <span>className</span><span>,</span> <span>force</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.trigger ()</h4><a id="user-content-fntrigger-" aria-label="Permalink: fn.trigger ()" href="#fntrigger-"></a></p>
<p dir="auto">Triggers supplied event on elements in collection. Data can be passed along as the second parameter.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).trigger ( eventName ) // => collection
$(element).trigger ( eventObj ) // => collection
$(element).trigger ( eventName, data ) // => collection
$(element).trigger ( eventObj, data ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>trigger</span> <span>(</span> <span>eventName</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>trigger</span> <span>(</span> <span>eventObj</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>trigger</span> <span>(</span> <span>eventName</span><span>,</span> <span>data</span> <span>)</span> <span>// =&gt; collection</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>trigger</span> <span>(</span> <span>eventObj</span><span>,</span> <span>data</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.unwrap ()</h4><a id="user-content-fnunwrap-" aria-label="Permalink: fn.unwrap ()" href="#fnunwrap-"></a></p>
<p dir="auto">Removes the wrapper from all elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).unwrap () // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>unwrap</span> <span>(</span><span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.val ()</h4><a id="user-content-fnval-" aria-label="Permalink: fn.val ()" href="#fnval-"></a></p>
<p dir="auto">Returns an inputs value. If value is supplied, sets all inputs in collection's value to the value argument.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(input).val () // => value
$(input).val ( value ) // => collection"><pre><span>$</span><span>(</span><span>input</span><span>)</span><span>.</span><span>val</span> <span>(</span><span>)</span> <span>// =&gt; value</span>
<span>$</span><span>(</span><span>input</span><span>)</span><span>.</span><span>val</span> <span>(</span> <span>value</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.width ()</h4><a id="user-content-fnwidth-" aria-label="Permalink: fn.width ()" href="#fnwidth-"></a></p>
<p dir="auto">Returns or sets the width of the element.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).width () // => number
$(element).width ( number ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>width</span> <span>(</span><span>)</span> <span>// =&gt; number</span>
<span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>width</span> <span>(</span> <span>number</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.wrap ()</h4><a id="user-content-fnwrap-" aria-label="Permalink: fn.wrap ()" href="#fnwrap-"></a></p>
<p dir="auto">Wraps a structure around each element.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).wrap ( structure ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>wrap</span> <span>(</span> <span>structure</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.wrapAll ()</h4><a id="user-content-fnwrapall-" aria-label="Permalink: fn.wrapAll ()" href="#fnwrapall-"></a></p>
<p dir="auto">Wraps a structure around all elements.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).wrapAll ( structure ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>wrapAll</span> <span>(</span> <span>structure</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">fn.wrapInner ()</h4><a id="user-content-fnwrapinner-" aria-label="Permalink: fn.wrapInner ()" href="#fnwrapinner-"></a></p>
<p dir="auto">Wraps a structure around all children.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$(element).wrapInner ( structure ) // => collection"><pre><span>$</span><span>(</span><span>element</span><span>)</span><span>.</span><span>wrapInner</span> <span>(</span> <span>structure</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Cash Methods</h3><a id="user-content-cash-methods" aria-label="Permalink: Cash Methods" href="#cash-methods"></a></p>
<p dir="auto">These methods are exported from the global <code>$</code> object, and are called like so:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.isArray ( arr ) // => boolean"><pre><span>$</span><span>.</span><span>isArray</span> <span>(</span> <span>arr</span> <span>)</span> <span>// =&gt; boolean</span></pre></div>
<p dir="auto">Some <a href="https://github.com/fabiospampinato/cash/tree/master/src/extra">extra methods</a> are available but <a href="https://github.com/fabiospampinato/cash/blob/master/pacco.json#L3">disabled</a> by default.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Type Checking</th>
<th>Utilities</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#isarray-">$.isArray ()</a></td>
<td><a href="#guid">$.guid</a></td>
</tr>
<tr>
<td><a href="#isfunction-">$.isFunction ()</a></td>
<td><a href="#each-">$.each ()</a></td>
</tr>
<tr>
<td><a href="#isnumeric-">$.isNumeric ()</a></td>
<td><a href="#extend-">$.extend ()</a></td>
</tr>
<tr>
<td><a href="#isplainobject-">$.isPlainObject ()</a></td>
<td><a href="#parsehtml-">$.parseHTML ()</a></td>
</tr>
<tr>
<td><a href="#iswindow-">$.isWindow ()</a></td>
<td><a href="#unique-">$.unique ()</a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.guid</h4><a id="user-content-guid" aria-label="Permalink: $.guid" href="#guid"></a></p>
<p dir="auto">A unique number.</p>

<p dir="auto"><h4 tabindex="-1" dir="auto">$.each ()</h4><a id="user-content-each-" aria-label="Permalink: $.each ()" href="#each-"></a></p>
<p dir="auto">Iterates through an array and calls the <code>callback ( index, element )</code> method on each element.</p>
<p dir="auto">Iterates through an object and calls the <code>callback ( key, value )</code> method on each property.</p>
<p dir="auto">The callback function may exit iteration early by returning <code>false</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.each ( array, callback ) // => array
$.each ( object, callback ) // => object"><pre><span>$</span><span>.</span><span>each</span> <span>(</span> <span>array</span><span>,</span> <span>callback</span> <span>)</span> <span>// =&gt; array</span>
<span>$</span><span>.</span><span>each</span> <span>(</span> <span>object</span><span>,</span> <span>callback</span> <span>)</span> <span>// =&gt; object</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.extend ()</h4><a id="user-content-extend-" aria-label="Permalink: $.extend ()" href="#extend-"></a></p>
<p dir="auto">Extends target object with properties from the source object, potentially deeply too.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.extend ( target, source ) // => object
$.extend ( true, target, source ) // => object"><pre><span>$</span><span>.</span><span>extend</span> <span>(</span> <span>target</span><span>,</span> <span>source</span> <span>)</span> <span>// =&gt; object</span>
<span>$</span><span>.</span><span>extend</span> <span>(</span> <span>true</span><span>,</span> <span>target</span><span>,</span> <span>source</span> <span>)</span> <span>// =&gt; object</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.isArray ()</h4><a id="user-content-isarray-" aria-label="Permalink: $.isArray ()" href="#isarray-"></a></p>
<p dir="auto">Check if the argument is an array.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.isArray ([ 1, 2, 3 ]) // => true"><pre><span>$</span><span>.</span><span>isArray</span> <span>(</span><span>[</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span> <span>]</span><span>)</span> <span>// =&gt; true</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.isFunction ()</h4><a id="user-content-isfunction-" aria-label="Permalink: $.isFunction ()" href="#isfunction-"></a></p>
<p dir="auto">Check if the argument is a function.</p>
<div dir="auto" data-snippet-clipboard-copy-content="function fn () {};
$.isFunction ( fn ) // => true"><pre><span>function</span> <span>fn</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>
<span>$</span><span>.</span><span>isFunction</span> <span>(</span> <span>fn</span> <span>)</span> <span>// =&gt; true</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.isNumeric ()</h4><a id="user-content-isnumeric-" aria-label="Permalink: $.isNumeric ()" href="#isnumeric-"></a></p>
<p dir="auto">Check if the argument is numeric.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.isNumeric ( 57 ) // => true"><pre><span>$</span><span>.</span><span>isNumeric</span> <span>(</span> <span>57</span> <span>)</span> <span>// =&gt; true</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.isPlainObject ()</h4><a id="user-content-isplainobject-" aria-label="Permalink: $.isPlainObject ()" href="#isplainobject-"></a></p>
<p dir="auto">Check if the argument is a plain object.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.isPlainObject ( {} ) // => true"><pre><span>$</span><span>.</span><span>isPlainObject</span> <span>(</span> <span>{</span><span>}</span> <span>)</span> <span>// =&gt; true</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.isWindow ()</h4><a id="user-content-iswindow-" aria-label="Permalink: $.isWindow ()" href="#iswindow-"></a></p>
<p dir="auto">Check if the argument is a Window object.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.isWindow ( window ) // => true"><pre><span>$</span><span>.</span><span>isWindow</span> <span>(</span> <span>window</span> <span>)</span> <span>// =&gt; true</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.parseHTML ()</h4><a id="user-content-parsehtml-" aria-label="Permalink: $.parseHTML ()" href="#parsehtml-"></a></p>
<p dir="auto">Returns a collection from an HTML string.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.parseHTML ( htmlString ) // => collection"><pre><span>$</span><span>.</span><span>parseHTML</span> <span>(</span> <span>htmlString</span> <span>)</span> <span>// =&gt; collection</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">$.unique ()</h4><a id="user-content-unique-" aria-label="Permalink: $.unique ()" href="#unique-"></a></p>
<p dir="auto">Returns a new array with duplicates removed.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$.unique ( array ) // => array"><pre><span>$</span><span>.</span><span>unique</span> <span>(</span> <span>array</span> <span>)</span> <span>// =&gt; array</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">If you found a problem, or have a feature request, please open an <a href="https://github.com/fabiospampinato/cash/issues">issue</a> about it.</p>
<p dir="auto">If you want to make a pull request you should:</p>
<ol dir="auto">
<li>Clone the repository: <code>git clone https://github.com/fabiospampinato/cash.git</code>.</li>
<li>Enter the cloned repository: <code>cd cash</code></li>
<li>Install the dependencies: <code>npm install</code>.</li>
<li>Automatically recompile Cash whenever a change is made: <code>npm run dev</code>.</li>
<li>Open the test suite: <code>npm run test</code>.</li>
<li>Remember to update the readme, if necessary.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Thanks</h2><a id="user-content-thanks" aria-label="Permalink: Thanks" href="#thanks"></a></p>
<ul dir="auto">
<li><strong><a href="https://github.com/kenwheeler">@kenwheeler</a>, <a href="https://github.com/shshaw">@shshaw</a>, <a href="https://github.com/jamiebuilds">@jamiebuilds</a>, <a href="https://github.com/simeydotme">@simeydotme</a></strong> and all the contributors who helped making Cash.</li>
<li><strong><a href="https://github.com/hisk">@hisk</a></strong> - The "design focused engineer" behind our awesome logo.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">MIT © Fabio Spampinato</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Weird Lexical Syntax (313 pts)]]></title>
            <link>https://justine.lol/lex/</link>
            <guid>42024727</guid>
            <pubDate>Sat, 02 Nov 2024 07:45:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://justine.lol/lex/">https://justine.lol/lex/</a>, See on <a href="https://news.ycombinator.com/item?id=42024727">Hacker News</a></p>
<div id="readability-page-1" class="page">

<p>
Oct 31<sup>st</sup>, 2024 @ <a href="https://justine.lol/index.html">justine's web page</a>
</p>

<p><a href="https://worker.jart.workers.dev/lex/eldritch-horrors-white.png"><img src="https://justine.lol/lex/eldritch-horrors-white.png" alt="[picture of artistically drawn ringtailed lemur sitting in front of red rectangle saying 'eldritch horrors' in white times new roman text]" width="360" height="234"></a>
</p>

<p>
I just learned 42 programming languages this month to build a new syntax
highlighter for
<a href="https://github.com/Mozilla-Ocho/llamafile/">llamafile</a>. I
feel like I'm up to my eyeballs in programming languages right now. Now
that it's halloween, I thought I'd share some of the spookiest most
surprising syntax I've seen.

</p><p>
The languages I decided to support are Ada, Assembly, BASIC, C, C#, C++,
COBOL, CSS, D, FORTH, FORTRAN, Go, Haskell, HTML, Java, JavaScript,
Julia, JSON, Kotlin, ld, LISP, Lua, m4, Make, Markdown, MATLAB, Pascal,
Perl, PHP, Python, R, Ruby, Rust, Scala, Shell, SQL, Swift, Tcl, TeX,
TXT, TypeScript, and Zig. That crosses off pretty much everything on
the <a href="https://www.tiobe.com/tiobe-index/">TIOBE Index</a>
except <a href="https://en.wikipedia.org/wiki/Scratch_%28programming_language%29">Scratch</a>,
which can't be highlighted, since it uses blocks instead of text.

</p><h2>How To Code a Syntax Highlighter</h2>

<p>
It's really not difficult to implement a syntax highlighter. You could
probably write one over the course of a job interview. My favorite tools
for doing this have been C++ and
<a href="https://www.gnu.org/software/gperf/">GNU gperf</a>. The hardest
problem here is avoiding the need to do a bunch of string comparisons to
determine if something is a keyword or not. Most developers would just
use a hash table, but gperf lets you create a perfect hash table. For
example:

</p><pre><span>%{</span>
#include &lt;string.h&gt;
<span>%}</span>
<span>%pic</span>
<span>%compare-strncmp</span>
<span>%language</span>=ANSI-C
<span>%readonly-tables</span>
<span>%define</span> <span>lookup-function-name</span> is_keyword_java_constant
<span>%%</span>
true
false
null
</pre>

<p>
gperf was originally invented for gcc and it's a great way to squeeze
out every last drop of performance. If you run the <code>gperf</code>
command on the above code above, it'll
<a href="https://justine.lol/lex/is_keyword_java_constant.c">generate this .c file</a>. You'll
notice its hash function only needs to consider a single character in in
a string. That's what makes it perfect, and perfect means better
performance. I'm not sure who wants to be able to syntax highlight C at
35 MB per second, but I am now able to do so, even though I've defined
<a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/is_keyword_c_builtin.gperf">about
4,000 keywords</a> for the language. Thanks to gperf, those keywords
don't slow things down.

</p><p>
The rest just boils down to finite state machines. You don't really need
flex, bison, or ragel to build a basic syntax highlighter. You simply
need a <code>for</code> loop and a <code>switch</code> statement. At
least for my use case, where I've really only been focusing on strings,
comments, and keywords. If I wanted to highlight things like C function
names, well, then I'd probably need to do actual parsing. But focusing
on the essentials, we're only really doing lexing at most. See
<a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_ada.cpp">highlight_ada.cpp</a>
as an example.

</p><h2>Demo</h2>

<p>
All the research you're about to read about on this page, went into
making one thing, which is llamafile's new syntax highlighter. This is
probably the strongest advantage that llamafile has over ollama these
days, since ollama doesn't do syntax highlighting at all. Here's a demo
of it running on Windows 10, using the
<a href="https://huggingface.co/Mozilla/Llama-3.2-3B-Instruct-llamafile">Meta
LLaMA 3.2 3B Instruct</a> model. Please note, these llamafiles will run
on MacOS, Linux, FreeBSD, and NetBSD too.

</p><p>
<video id="video1" width="916" height="450" controls="" muted="" loop="" preload="none">
  <source src="https://storage.googleapis.com/justine-lol/llamafile-lex-demo.webm" type="video/webm">
  <source src="https://storage.googleapis.com/justine-lol/llamafile-lex-demo.mp4" type="video/mp4">
  [screencast of the Mozilla/Llama-3.2-3B-Instruct-llamafile LLM being
   used to generate code in various programming languages (FORTRAN,
   Rust, C++, Perl) for printing the first 100 prime numbers]
</video>


</p><p>
The new highlighter and chatbot interface has made llamafile so pleasant
for me to use, combined with the fact that open weights models
like <a href="https://huggingface.co/Mozilla/gemma-2-27b-it-llamafile">gemma
27b it</a> have gotten so good, that it's become increasingly rare that
I'll feel tempted to use Claude these days.

</p><h2>Examples of Surprising Lexical Syntax</h2>

<p>
So while writing this highlighter, let's talk about the kinds of lexical
syntax that surprised me.

</p><h3>C</h3>

<p>
The C programming language, despite claiming to be simple, actually has
some of the weirdest lexical elements of any language. For starters, we
have trigraphs, which were probably invented to help Europeans use C
when using keyboards that didn't
include <code>#</code>, <code>[</code>, <code>\</code>, <code>^</code>, <code>{</code>, <code>|</code>, <code>}</code>,
and <code>~</code>. You can replace those characters
with <code>??=</code>, <code>??(</code>, <code>??/</code>, <code>??)</code>, <code>??'</code>, <code>??&lt;</code>, <code>??!</code>, <code>??&gt;</code>,
and <code>??-</code>. Intuitive, right? That means, for example, the
following is perfectly valid C code.

</p><pre><span>int</span>
<span>main</span>(<span>int</span> argc, <span>char</span>* argv<span>??(??)</span>)
<span>??&lt;</span>
    printf("hello world\n");
<span>??&gt;</span>
</pre>

<p>
That is, at least until trigraphs were removed in the C23 standard.
However compilers will be supporting this syntax forever for legacy
software, so a good syntax highlighter ought to too. But just because
trigraphs are officially dead, doesn't mean the standards committees
haven't thought up other weird syntax to replace it. Consider universal
characters:

</p><pre><span>int</span> <span>\uFEB2</span> = 1;
</pre>

<p>
This feature is useful for anyone who wants, for example, variable names
with arabic characters while still keeping the source code pure ASCII.
I'm not sure why anyone would use it. I was hoping I could abuse this to
say:

</p><pre><span>int</span>
<span>main</span>(<span>int</span> argc, <span>char</span>* argv<span>\u005b\u005d</span>)
<span>\u007b</span>
    printf(<span>"hello world\n"</span>);
<span>\u007d</span>
</pre>

<p>
But alas, GCC raises an error if universal characters aren't used on the
specific UNICODE planes that've been blessed by the standards committee.

</p><p>
This next one is one of my favorites. Did you know that a single line
comment in C can span multiple lines if you use backslash at the end of
the line?

</p><pre><span>//hi\
there</span>
</pre>

<p>
Most other languages don't support this. Even languages that allow
backslash escapes in their source code (e.g. Perl, Ruby, and Shell)
don't have this particular feature from C. The ones that do support this
too, as far as I can tell, are Tcl and GNU Make. Tools for syntax
highlighting oftentimes get this wrong, like Emacs and Pygments.
Although Vim seems to always be right about backslash.

</p><h3>Haskell</h3>

<p>
Every C programmers knows you can't embed a multi-line comment in a
multi-line comment. For example:

</p><pre><span>/*
 hello
 /* again */</span>
  nope nope nope
*/
</pre>

<p>
However with Haskell, you can. They finally fixed the bug. Although they
did adopt a different syntax.

</p><pre><span>-- Test nested comments within code blocks</span>
<span>let</span> result3 = <span>{- This comment contains
                   {- a nested comment -}
               -}</span> 10 - 5
</pre>

<h3>Tcl</h3>

<p>
The thing that surprised me most about Tcl, is that identifiers can have
quotes in them. For example, this program will print <code>a"b</code>:

</p><pre><span>puts</span> a"b
</pre>

<p>
You can even have quote in your variable names, however you'll only be
able to reference it if you use the <code>${a"b}</code> notation, rather
than <code>$a"b</code>.

</p><pre><span>set</span> <span>a"b</span> doge
<span>puts</span> ${<span>a"b</span>}
</pre>

<h3>JavaScript</h3>

<p>
JavaScript has a builtin lexical syntax for regular expressions. However
it's easy to lex it wrong if you aren't paying attention. Consider the
following:

</p><pre><span>var</span> foo = <span>/[/]/</span>g;
</pre>

<p>
When I first wrote my lexer, I would simply scan for the closing slash,
and assume that any slashes inside the regex would be escaped. That
turned out to be wrong when I highlighted some minified code. If a slash
is inside the square quotes for a character set, then that slash doesn't
need to be escaped!

</p><p>
Now onto the even weirder.

</p><p>
There's some invisible UNICODE characters called the LINE SEPARATOR
(u2028) and PARAGRAPH SEPARATOR (u2029). I don't know what the use case
is for these codepoints, but the ECMAScript
standard <a href="https://262.ecma-international.org/12.0/#sec-line-terminators">defines
them as line terminators</a>, which effectively makes them the same
thing as <code>\n</code>. Since these
are <a href="https://trojansource.codes/">Trojan Source</a> characters,
I configure my Emacs to render them as ↵ and ¶. However most software
hasn't been written to be aware of these characters, and will oftentimes
render them as question marks. Also as far as I know, no other language
does this. I was able to use that to my advantage for SectorLISP, since
it let me create C + JavaScript polyglots.

</p><pre><span>javascript syntax highlighting</span><span>//¶</span><span>`
<em>... C only code goes here ...</em>
//`</span>
</pre>

<p>
That's how I'd insert C code into JavaScript files.

</p><pre><span>c syntax highlighting</span><span>//¶`</span>
<span>#if</span> 0
<span>//`</span>
<em>... JavaScript only code goes here ...</em>
<span>//¶`</span>
<span>#endif</span>
<span>//`</span>
</pre>

<p>
And that's how I'd insert JavaScript into my C source code. An example
of a piece of production code where I did this
is <a href="https://justine.lol/sectorlisp2/lisp.js">lisp.js</a> which is what powers
my <a href="https://justine.lol/sectorlisp2/">SectorLISP blog post</a>. It both runs in
the browser, and you can compile it with GCC and run it locally too.
llamafile is able to correctly syntax highlight this stuff, but I've yet
to find another syntax highlighter that does too. Not that it matters,
since I doubt an LLM would ever print this. But it sure is fun to think
about these corner cases.

</p><h3>Shell</h3>

<p>
We're all familiar with the heredoc syntax of shell scripts, e.g.

</p><pre>cat &lt;&lt;EOF
<span>this is kind of
a multi-line
string
EOF</span>
</pre>

<p>
The above syntax allows you to put <code>$foo</code> in your heredoc
string, although there's a quoted syntax which disables variable
substitution.

</p><pre>cat &lt;&lt;<span>'END'</span>
<span>this won't print the contents of $var
END</span>
</pre>

<p>
If you ever want to confuse your coworkers, then one great way to abuse
this syntax is by replacing the heredoc marker with an empty string, in
which case the heredoc will end on the next empty line. For example,
this program will print "hello" and "world" on two lines:

</p><pre>cat &lt;&lt;<span>''</span>
<span>hello</span>

<span>echo</span> world
</pre>

<p>
It's also possible in languages that support heredocs (Shell, Ruby, and
Perl) to have multiple heredocs on the same line.

</p><pre>cat /dev/fd/3 3&lt;&lt; E1 /dev/fd/4 4&lt;&lt; E2
foo
E1
bar
E2
</pre>

<p>
Another thing to look out for with shell, is it's like Tcl in the sense
that special characters like #, which you might think would always begin
a comment, can actually be valid code depending on the context. For
example, inside a variable reference, # can be used to strip a prefix.
The following program will print "there".

</p><pre><span>x</span>=hi-there
<span>echo</span> ${<span>x</span>#hi-}
</pre>


<h3>String Interpolation</h3>

<p>
Did you know that, from a syntax highlighting standpoint, a Kotlin
string can begin with " but end with the { character? That's the way
it's string interpolation syntax works. Many languages let you embed
variable name references in strings, but TypeScript, Swift, Kotlin, and
Scala take string interpolation to the furthest extreme of encouraging
actual code being embedded inside strings.

</p><pre><span>val</span> s2 = <span>"${</span>s1.replace(<span>"is"</span>, <span>"was"</span>)<span>}, but now is $<span>a</span>"</span>
</pre>

<p>
So to highlight a string with Kotlin, Scala, and TypeScript, one must
count curly brackets and maintain a stack of parser states. With
TypeScript, this is relatively trivial, and only requires a couple
states to be added to your finite state machine. However with Kotlin and
Scala it gets real hairy, since they support both double quote and
triple quote syntax, and either one of them can have interpolated
values. So that ended up being about 13 independent states the FSM needs
for string lexing alone. Swift also supports triple quotes for its
<code>"\(var)"</code> interpolated syntax, however that only needed 10
states to support.

</p><h3>Swift</h3>

<p>
Swift has its own unique approach to the problem of embedding strings
inside a string. It allows "double quote", """triple quote""", and
/regex/ strings to all be surrounded with an arbitrary number of #hash#
marks, which must be mirrored on each side. This makes it possible to
write code like the following:

</p><pre><span>let</span> threeMoreDoubleQuotationMarks = <span>#"""
Here are three more double quotes: """
"""#</span>
<span>let</span> threeMoreDoubleQuotationMarks = <span>##"""
Here are three more double quotes: #"""#
"""##</span>
</pre>

<h3>C#</h3>

<p>
C# supports Python's triple quote multi-line string syntax, but with an
interesting twist that's unique to this language. The way C# solves the
"embed a string inside a string" problem, is they let you do quadruple
quoted strings, or even quintuple quoted strings if you want. However
many quotes you put on the lefthand side, that's what'll be used to
terminate the string at the other end.

</p><pre>Console.WriteLine(<span>""</span>);
Console.WriteLine(<span>"\""</span>);
Console.WriteLine(<span>""""""</span>);
Console.WriteLine(<span>""""""</span>);
Console.WriteLine(<span>""" yo "" hi """</span>);
Console.WriteLine(<span>"""" yo """ hi """"</span>);
Console.WriteLine(<span>""""First
                  """100 Prime"""
                  Numbers:
                  """"</span>);
</pre>

<p>
This is the way if you ask me, because it's actually simpler for a
finite state machine to decode. With classic Python triple quoted
strings, you need extra rules, to ensure it's either one double-quote
character, or exactly three. By letting it be an arbitrary number,
there's fewer rules to validate. So you end up with a more powerful
expressive language that's simpler to implement. This is the kind of
genius we've come to expect from Microsoft.

</p><p>
What will they think of next?

</p><p>
<img alt="[Vince McMahon's reactions to C, C++, C#, C cubed, and C tesseract]" src="https://worker.jart.workers.dev/c.jpg" width="960" height="1385">

</p><h3>FORTH</h3>

<p>
Normally when code is simpler for a computer to decode, it's more
difficult for a human to understand, and FORTH is proof of that. FORTH
is probably the simplest language there is, because it tokenizes
everything on whitespace boundaries. Even the syntax for starting a
string is a token. For example:

</p><pre><span>c" hello world"</span>
</pre>

<p>
Would mean the same thing as saying <code>"hello world"</code> in every
other language.

</p><h3>FORTRAN and COBOL</h3>

<p>
One of the use cases I envision for llamafile is that it can help the
banking system not collapse once all the FORTRAN and COBOL programmers
retire. Let's say you've just been hired to maintain a secretive
mainframe full of confidential information written in the COmmon
Business-Oriented Language. Thanks to llamafile, you can ask an
air-gapped AI you control,
like <a href="https://huggingface.co/Mozilla/gemma-2-27b-it-llamafile">Gemma
27b</a>, to write your COBOL and FORTRAN code for you. It can't print
punch cards, but it can highlight punch card syntax. Here's what FORTRAN
code looks like, properly syntax highlighted:

</p><pre><span>*
*     Quick return if possible.
*</span>
      <span>IF</span> ((M<span>.EQ.</span>0) <span>.OR.</span> (N<span>.EQ.</span>0) <span>.OR.</span>
     <span>+</span>    (((ALPHA<span>.EQ.</span>ZERO)<span>.OR.</span> (K<span>.EQ.</span>0))<span>.AND.</span> (BETA<span>.EQ.</span>ONE))) <span>RETURN</span>
<span>*
*     And if alpha.eq.zero.
*</span>
      <span>IF</span> (ALPHA<span>.EQ.</span>ZERO) <span>THEN</span>
          <span>IF</span> (BETA<span>.EQ.</span>ZERO) <span>THEN</span>
              <span>DO</span> <span>20</span> J = 1,N
                  <span>DO</span> <span>10</span> I = 1,M
                      C(I,J) = ZERO
   <span>10</span>             <span>CONTINUE</span>
   <span>20</span>         <span>CONTINUE</span>
          <span>ELSE</span>
              <span>DO</span> <span>40</span> J = 1,N
                  <span>DO</span> <span>30</span> I = 1,M
                      C(I,J) = BETA*C(I,J)
   <span>30</span>             <span>CONTINUE</span>
   <span>40</span>         <span>CONTINUE</span>
          <span>END IF</span>
          <span>RETURN</span>
      <span>END IF</span>
</pre>

<p>
FORTRAN has the following fixed column rules.

</p><ul>
<li>Putting *, c, or C in column 1 will make the line a comment
</li><li>Putting non-space in column 6 lets you extend a line past 80 characters
</li><li>Labels are created by putting digits in columns 1-5
</li></ul>

<p>
Now here's some properly syntax highlighted COBOL code.

</p><pre><span>000100</span><span>*Hello World in COBOL</span>
<span>000200</span> <span>IDENTIFICATION DIVISION</span>.
<span>000300</span> <span>PROGRAM-ID</span>. HELLO-WORLD.
<span>000400</span>
<span>000500</span> <span>PROCEDURE DIVISION</span>.
<span>000600</span>     <span>DISPLAY</span> <span>'Hello, world!'</span>.
<span>000700</span>     <span>STOP RUN</span>.
</pre>

<p>
With COBOL, the rules are:

</p><ul>
<li>Putting * in column 7 makes the line a comment
</li><li>Putting - in column 7 lets you extend a line past 80 characters
</li><li>Line numbers go in columns 1-6.
</li></ul>

<h3>Zig</h3>

<p>
Zig has its own unique solution for multi-line strings, which are
prefixed with two backslashes.

</p><pre><span>const</span> copyright =
    <span>\\ Copyright (c) 2024, Zig Incorporated
    \\ All rights reserved.</span>
    ;
</pre>

<p>
What I like about this syntax, is it eliminates that need we've always
had for calling <code>textwrap.dedent()</code> with Python's triple
quoted strings. The tradeoff is that the semicolon is ugly. This is a
string syntax that really ought to be considered by one of the languages
that don't need semicolons, e.g. Go, Scala, Python, etc.

</p><h3>Lua</h3>

<p>
Lua has a very unique multi-line string syntax, and it uses an approach
similar to C# and Swift when it comes to solving the "embed a string
inside a string" problem. It works by using double square brackets, and
it lets you put an arbitrary number of equal signs inbetween them.

</p><pre><span>-- this is a comment</span>
<span>[[hi [=[]=] ]]</span> there
<span>[[hi [=[]=] ]]</span> there
<span>[==[hi [=[]=] ]==]</span> hello
<span>[==[hi  ]=]==]</span> hello
<span>[==[hi  ]===]==]</span> hello
<span>[====[hi  ]===]====]</span> hello
</pre>

<p>
What's really interesting is that it lets you do this with comments too.

</p><pre><span>--[[
comment #1
]]</span>
<span>print</span>(<span>"hello"</span>)

<span>--[==[
comment [[#2]]
]==]</span>
<span>print</span>(<span>"world"</span>)
</pre>

<h3>Assembly</h3>

<p>
One of the most challenging languages to syntax highlight is assembly,
due to the fragmentation of all its various dialects. I've sought to
build something with llamafile that does a reasonably good job with
AT&amp;T, nasm, etc. syntax. Here's nasm syntax:

</p><pre><span>section</span> .data
    <span>message</span> db <span>'Hello, world!'</span>, 0xa <span>; The message string, ending with a newline</span>

<span>section</span> .text
    <span>global</span> _start

<span>_start</span>:
    <span>; Write the message to stdout</span>
    <span>mov</span> rax, 1      <span>; System call number for write</span>
    <span>mov</span> rdi, 1      <span>; File descriptor for stdout</span>
    <span>mov</span> rsi, message <span>; Address of the message string</span>
    <span>mov</span> rdx, 13     <span>; Length of the message</span>
    <span>syscall</span>

    <span>; Exit the program</span>
    <span>mov</span> rax, 60     <span>; System call number for exit</span>
    <span>xor</span> rdi, rdi    <span>; Exit code 0</span>
    <span>syscall</span>
</pre>

<p>
And here's AT&amp;T syntax:

</p><pre><span>/ syscall</span>

<span>.globl</span>	_syscall,csv,cret,cerror
<span>_syscall</span>:
	<span>jsr</span>	r5,csv
	<span>mov</span>	r5,r2
	<span>add</span>	<span>$04</span>,r2
	<span>mov</span>	<span>$9f</span>,r3
	<span>mov</span>	(r2)+,r0
	<span>bic</span>	<span>$!0377</span>,r0
	<span>bis</span>	<span>$sys</span>,r0
	<span>mov</span>	r0,(r3)+
	<span>mov</span>	(r2)+,r0
	<span>mov</span>	(r2)+,r1
	<span>mov</span>	(r2)+,(r3)+
	<span>mov</span>	(r2)+,(r3)+
	<span>mov</span>	(r2)+,(r3)+
	<span>mov</span>	(r2)+,(r3)+
	<span>mov</span>	(r2)+,(r3)+
	<span>sys</span>	0; 9f
	<span>bec</span>	<span>1</span>f
	<span>jmp</span>	cerror
<span>1</span>:	<span>jmp</span>	cret

	<span>.data</span>
<span>9</span>:	.=.+12.
</pre>

<p>
And here's GNU syntax:

</p><pre><span>/ setjmp() for x86-64</span>
<span>// this is a comment too</span>
<span>; so is this</span>
<span># this too!</span>
<span>! hello sparc</span>

<span>setjmp</span>:	<span>lea</span>	8(<span>%rsp</span>),<span>%rax</span>
	<span>mov</span>	<span>%rax</span>,(<span>%rdi</span>)
	<span>mov</span>	<span>%rbx</span>,8(<span>%rdi</span>)
	<span>mov</span>	<span>%rbp</span>,16(<span>%rdi</span>)
	<span>mov</span>	<span>%r12</span>,24(<span>%rdi</span>)
	<span>mov</span>	<span>%r13</span>,32(<span>%rdi</span>)
	<span>mov</span>	<span>%r14</span>,40(<span>%rdi</span>)
	<span>mov</span>	<span>%r15</span>,48(<span>%rdi</span>)
	<span>mov</span>	(<span>%rsp</span>),<span>%rax</span>
	<span>mov</span>	<span>%rax</span>,56(<span>%rdi</span>)
	<span>xor</span>	<span>%eax</span>,<span>%eax</span>
	<span>ret</span>
</pre>

<p>
With keywords I've found the simplest thing is to just treat the
first identifier on the line (that isn't followed by a colon) as a
keyword. That tends to make most of the assembly I've tried look pretty
reasonable.

</p><p>
The comment syntax is real hairy. I really like the original UNIX
comments which only needed a single slash. GNU as still supports those
to this date, but only if they're at the beginning of the line (UNIX
could originally put them anywhere, since <code>as</code> didn't have
the ability to do arithmetic back then). Clang doesn't support fixed
comments at all, so they're sadly not practical anymore to use in open
source code.

</p><p>
But this story gets even better. Another weird thing about the original
UNIX assembler is that it didn't use a closing quote on character
literals. So where we'd say <code>'x'</code> to get 0x78 for x, in the
original UNIX source code, you'd say <code>'x</code>. This is another
thing GNU as continues to support, but sadly not LLVM. In any case,
since a lot of code exists that uses this syntax, any good syntax
highlighter needs to support it.

</p><p>
The GNU assembler allows identifiers to be quoted, so you can put pretty
much any character in a symbol.

</p><p>
Finally, it's not enough to just highlight assembly when highlighting
assembly. The assembler is usually used in conjunction with either the C
preprocessor, or m4. Trust me, lots of open source code does this.
Therefore lines starting with <code>dnl</code>, <code>m4_dnl</code>,
or <code>C</code> should be taken as comments too.

</p><h3>Ada</h3>

<p>
Ada is a remarkably simple language to lex, but there's one thing I
haven't quite wrapped my head around yet, which is its use of the single
quotation mark. Ada can have character literals like C,
e.g. <code>'x'</code>. But single quote can also be used to reference
attributes, e.g. <code>Foo'Size</code>. Single quote even lets you embed
expressions and call functions. For example, the program:

</p><pre><span>with</span> Ada.Text_IO;

<span>procedure</span> main <span>is</span>
   S : String := Character'(<span>')'</span>)'Image;
<span>begin</span>
   Ada.Text_IO.Put_Line(<span>"The value of S is: "</span> &amp; S);
<span>end</span> main;
</pre>

<p>
Will print out:

</p><pre>The value of S is: ')'
</pre>

<p>
Because we're declaring a character, giving it a value, and then sending
it through the <code>Image</code> function, which converts it to
a <code>String</code> representation.

</p><h3>BASIC</h3>

<p>
Let's talk about the Beginner's All-purpose Symbolic Instruction Code.
While digging through the repos I've git cloned, I came across this old
Commodore BASIC program that broke many of my assumptions about syntax
highlighting.

</p><pre><span>10</span> <span>rem cbm basic v2 example</span>
<span>20</span> <span>rem comment with keywords: for, data</span>
<span>30</span> <span>dim</span> a$(20)
<span>35</span> <span>rem the typical space efficient form of leaving spaces out:</span>
<span>40</span> fort=0to15:poke646,t:<span>print</span><span>"{revers on}     "</span>;:<span>next</span>
<span>50</span> geta$:ifa$=<span>chr</span>$(0):<span>goto</span>40
<span>55</span> <span>rem it is legal to omit the closing " on line end</span>
<span>60</span> <span>print</span><span>"{white}"</span>:<span>print</span><span>"bye...</span>
<span>70</span> <span>end</span>
</pre>

<p>
We'll notice that this particular BASIC implementation didn't require a
closing quote on strings, variable names have these weird sigils, and
keywords like <code>goto</code> are lexed eagerly out of identifiers.

</p><p>
Visual BASIC also has this weird date literal syntax:

</p><pre><span>Dim</span> v <span>As</span> <span>Variant</span>    <span>' Declare a Variant</span>
v = <span>#1/1/2024#</span>      <span>' Hold a date</span>
</pre>

<p>
That's tricky to lex, because VB even has preprocessor directives.

</p><pre><span>#If DEBUG Then</span>
&lt;WebMethod()&gt;
<span>Public Function</span> <span>SomeFunction</span>() <span>As</span> <span>String</span>
<span>#Else</span>
&lt;WebMethod(CacheDuration:=86400)&gt;
<span>Public</span> <span>Function</span> <span>SomeFunction</span>() <span>As</span> <span>String</span>
<span>#End If</span>
</pre>

<h3>Perl</h3>

<p>
One of the trickier languages to highlight is Perl. It's exists in the
spiritual gulf between shells and programming languages, and inherits
the complexity of both. Perl isn't as popular today as it once was, but
its influence continues to be prolific. Perl made regular expressions a
first class citizen of the language, and the way regex works in Perl has
since been adopted by many other programming languages, such as Python.
However the regex lexical syntax itself continues to be somewhat unique.

</p><p>
For example, in Perl, you can replace text similar to sed as follows:

</p><pre><span>my</span> $<span>string</span> = <span>"HELLO, World!"</span>;
$<span>string</span> =~ s<span>/hello/Perl/</span>i;
print $<span>string</span>;  <span># Output: Perl, World!</span>
</pre>

<p>
Like sed, Perl also allows you to replace the slashes with an arbitrary
punctuation character, since that makes it easier for you to put slashes
inside your regex.

</p><pre>$<span>string</span> =~ s<span>!hello!Perl!</span>i;
</pre>

<p>
What you might not have known, is that it's possible to do this with
mirrored characters as well, in which case you need to insert an
additional character:

</p><pre>$<span>string</span> =~ s<span>{hello}{Perl}</span>i;
</pre>

<p>
However <code>s///</code> isn't the only weird thing that needs to be
highlighted like a string. Perl has a wide variety of other magic
prefixes.

</p><pre><span>/case sensitive match/</span>
<span>/case insensitive match/</span>i
y<span>/abc/xyz/</span>e
s<span>!hi!there!</span>
m<span>!hi!</span>i
m<span>;hi;</span>i
qr<span>!hi!</span>u
qw<span>!hi!</span>h
qq<span>!hi!</span>h
qx<span>!hi!</span>h
m<span>-hi-</span>
s<span>-hi-there-</span>g
s<span>"hi"there"</span>g
s<span>@hi@there@</span> yo
s<span>{hi}{there}</span>g
</pre>

<p>
One thing that makes this tricky to highlight, is you need to take
context into consideration, so you don't accidentally think
that <code>y/x/y/</code> is a division formula. Thankfully, Perl makes
this relatively easy, because variables can always be counted upon to
have sigils, which are usually <code>$</code> for
scalars, <code>@</code> for arrays, and <code>%</code> for hashes.

</p><pre><span>my</span> $<span>greeting</span> = <span>"Hello, world!"</span>;

<span># Array: A list of names</span>
<span>my</span> @<span>names</span> = (<span>"Alice"</span>, <span>"Bob"</span>, <span>"Charlie"</span>);

<span># Hash: A dictionary of ages</span>
<span>my</span> %<span>ages</span> = (<span>"Alice"</span> =&gt; 30, <span>"Bob"</span> =&gt; 25, <span>"Charlie"</span> =&gt; 35);

<span># Print the greeting</span>
print <span>"$greeting\n"</span>;

<span># Print each name from the array</span>
<span>foreach my</span> $<span>name</span> (@<span>names</span>) {
    print <span>"$name\n"</span>;
}
</pre>

<p>
This helps us avoid the need for parsing the language grammar.

</p><p>
Perl also has this goofy convention for writing man pages in your source
code. Basically, any =word at the start of the line will get it going,
and <code>=cut</code> will finish it.

</p><pre><span>#!/usr/bin/perl</span>

<span>=pod

=head1 NAME

my_silly_script - A Perl script demonstrating =cut syntax

=head1 SYNOPSIS

 my_silly_script [OPTIONS]

=head1 DESCRIPTION

This script does absolutely nothing useful, but it showcases
the quirky =cut syntax for POD documentation in Perl.

=head1 OPTIONS

There are no options.

=head1 AUTHOR

Your Name &lt;your.email@example.com&gt;

=head1 COPYRIGHT

Copyright (c) 2023 Your Name. All rights reserved.

=cut</span>

print <span>"Hello, world!\n"</span>;
</pre>

<h3>Ruby</h3>

<p>
Of all the languages, I've saved the best for last, which is Ruby. Now
here's a language whose syntax evades all attempts at understanding.
Ruby is the union of all earlier languages, and it's not even formally
documented. Their manual has a section
<a href="https://ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/syntax.html">on
Ruby syntax</a>, but it's very light on details. Whenever I try to test
my syntax highlighting, by concatenating all the .rb files on my hard
drive, there's always another file that finds some way to break it.

</p><pre><span>def</span> `(command)
  <span>return</span> <span>"just testing a backquote override"</span>
<span>end</span>
</pre>

<p>
Since ruby supports backquote syntax like <code>var
= <span>`echo hello`</span></code>, I'm not exactly sure how
to tell that the backquote above isn't meant to be highlighted as a
string. Another example is this:

</p><pre><span>when</span> <span>/\.*\.h/</span>
  options[<span>:includes</span>] &lt;&lt;arg; <span>true</span>
<span>when</span> <span>/--(\w+)=\"?(.*)\"?/</span>
  options[<span>$1</span>.to_sym] = <span>$2</span>; <span>true</span>
</pre>

<p>
Ruby has a <code>&lt;&lt;</code> operator, and it also supports heredocs
(just like Perl and Shell). So I'm not exactly sure how to tell that the
code above isn't a heredoc. Yes that code actually exists in the wild.
Even Emacs gets this wrong. Out of all 42 languages I've evaluated,
that's probably the biggest shocker so far. It might be the case that
Ruby isn't possible to lex without parsing. Even with parsing, I'm still
not sure how it's possible to make sense of that.

</p><h2>Complexity of Supported Languages</h2>

<p>
If I were to rank the complexity of programming languages by how many
lines of code each one takes to syntax highlight, then FORTH would be
the simplest language, and Ruby would be the most complicated.

</p><pre>   125 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_forth.cpp">highlight_forth.cpp</a>       266 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_lua.cpp">highlight_lua.cpp</a>
   132 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_m4.cpp">highlight_m4.cpp</a>          282 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_csharp.cpp">highlight_csharp.cpp</a>
   149 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_ada.cpp">highlight_ada.cpp</a>         282 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_rust.cpp">highlight_rust.cpp</a>
   160 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_lisp.cpp">highlight_lisp.cpp</a>        297 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_python.cpp">highlight_python.cpp</a>
   163 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_test.cpp">highlight_test.cpp</a>        300 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_java.cpp">highlight_java.cpp</a>
   166 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_matlab.cpp">highlight_matlab.cpp</a>      321 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_haskell.cpp">highlight_haskell.cpp</a>
   186 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_cobol.cpp">highlight_cobol.cpp</a>       335 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_markdown.cpp">highlight_markdown.cpp</a>
   199 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_basic.cpp">highlight_basic.cpp</a>       337 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_js.cpp">highlight_js.cpp</a>
   200 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_fortran.cpp">highlight_fortran.cpp</a>     340 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_html.cpp">highlight_html.cpp</a>
   211 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_sql.cpp">highlight_sql.cpp</a>         371 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_typescript.cpp">highlight_typescript.cpp</a>
   216 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_tcl.cpp">highlight_tcl.cpp</a>         387 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_kotlin.cpp">highlight_kotlin.cpp</a>
   218 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_tex.cpp">highlight_tex.cpp</a>         387 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_scala.cpp">highlight_scala.cpp</a>
   219 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight.cpp">highlight.cpp</a>             447 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_asm.cpp">highlight_asm.cpp</a>
   220 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_go.cpp">highlight_go.cpp</a>          449 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_c.cpp">highlight_c.cpp</a>
   225 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_css.cpp">highlight_css.cpp</a>         455 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_swift.cpp">highlight_swift.cpp</a>
   225 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_pascal.cpp">highlight_pascal.cpp</a>      560 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_shell.cpp">highlight_shell.cpp</a>
   230 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_zig.cpp">highlight_zig.cpp</a>         563 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_perl.cpp">highlight_perl.cpp</a>
   235 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_make.cpp">highlight_make.cpp</a>        624 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_ruby.cpp">highlight_ruby.cpp</a>
   239 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_ld.cpp">highlight_ld.cpp</a>               
   263 <a href="https://github.com/Mozilla-Ocho/llamafile/blob/main/llamafile/highlight_r.cpp">highlight_r.cpp</a>                
</pre>

<h2 class="page" id="funding"><a href="#funding">Funding</a></h2>

<p>
  <a href="https://justine.lol/lemuria.png">
    <picture>
      <source srcset="https://worker.jart.workers.dev/sectorlisp2/lemuria.webp" type="image/webp">
      <img src="https://worker.jart.workers.dev/sectorlisp2/lemuria.png" width="850" height="360" alt="[United States of Lemuria - two dollar bill - all debts public and primate]">
    </picture>
  </a>

</p><p>
<a href="https://github.com/Mozilla-Ocho/llamafile/">llamafile</a> is a
<a href="https://huggingface.co/Mozilla">Mozilla</a> project who
sponsors me to work on it. My work on open source is also made possible
by my <a href="https://github.com/sponsors/jart">GitHub sponsors</a>
and <a href="https://www.patreon.com/jart">Patreon subscribers</a>.
Thank you for giving me the opportunity to serve you all these last four
years. Since you've read this far, I'd like to invite you to join both
the <a href="https://discord.gg/tzYWSZGV59">Mozilla AI Discord</a> and
the <a href="https://discord.gg/FwAVVu7eJ4">Redbean Discord</a> servers
where you can chat with me and other people who love these projects.

</p>
<img src="https://ipv4.games/claim?name=jart">
</div>]]></description>
        </item>
        <item>
            <title><![CDATA[SmolLM2 (108 pts)]]></title>
            <link>https://simonwillison.net/2024/Nov/2/smollm2/</link>
            <guid>42024661</guid>
            <pubDate>Sat, 02 Nov 2024 07:31:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2024/Nov/2/smollm2/">https://simonwillison.net/2024/Nov/2/smollm2/</a>, See on <a href="https://news.ycombinator.com/item?id=42024661">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>



<p><strong><a href="https://huggingface.co/HuggingFaceTB/SmolLM2-1.7B-Instruct">SmolLM2</a></strong> (<a href="https://twitter.com/LoubnaBenAllal1/status/1852055582494294414" title="@LoubnaBenAllal1">via</a>) New from <a href="https://loubnabnl.github.io/">Loubna Ben Allal</a> and her research team at Hugging Face:</p>
<blockquote>
<p>SmolLM2 is a family of compact language models available in three size: 135M, 360M, and 1.7B parameters. They are capable of solving a wide range of tasks while being lightweight enough to run on-device. [...]</p>
<p>It was trained on 11 trillion tokens using a diverse dataset combination: FineWeb-Edu, DCLM, The Stack, along with new mathematics and coding datasets that we curated and will release soon.</p>
</blockquote>
<p>The model weights are released under an Apache 2 license. I've been trying these out using my <a href="https://github.com/simonw/llm-gguf">llm-gguf</a> plugin for <a href="https://llm.datasette.io/">LLM</a> and my first impressions are really positive.</p>
<p>Here's a recipe to run a 1.7GB Q8 quantized model <a href="https://huggingface.co/lmstudio-community/SmolLM2-1.7B-Instruct-GGUF">from lmstudio-community</a>:</p>
<pre><code>llm install llm-gguf
llm gguf download-model https://huggingface.co/lmstudio-community/SmolLM2-1.7B-Instruct-GGUF/resolve/main/SmolLM2-1.7B-Instruct-Q8_0.gguf -a smol17
llm chat -m smol17
</code></pre>
<p><img alt="Animated terminal demo. My prompt is tell me about pelicans. The model responds: Sure, I'd be happy to tell you about pelicans! Pelicans are a group of aquatic birds in the order Pelecaniformes, which also includes the cormorants, darters, and frigatebirds. They are found on all continents except Antarctica, and are known for their distinctive pouch-like bill. There are several species of pelicans. The most common species is the Brown Pelican, which is found in the Americas. It's the only species that plunges into water from a significant height to catch fish and other prey, a behavior known as &quot;fish-grabbing.&quot;  Another common species is the American White Pelican, which can be found in both the Americas and Eurasia. It has a white plumage and a large, bright pink bill, and feeds on fish in lakes, rivers, and coastal wetlands.  Pelicans are generally medium-sized birds, but the Brown Pelican is the largest, with an average height of around 26-30 inches. Their bills can be as long as 11 inches!  Below the terminal you can see Activity Monitor showing 378% CPU usage for the Python process" src="https://static.simonwillison.net/static/2024/smol-demo.gif"></p>
<p>Or at the other end of the scale, here's how to run the 138MB <a href="https://huggingface.co/lmstudio-community/SmolLM2-135M-Instruct-GGUF">Q8 quantized 135M model</a>:</p>
<pre><code>llm gguf download-model https://huggingface.co/lmstudio-community/SmolLM2-135M-Instruct-GGUF/resolve/main/SmolLM2-135M-Instruct-Q8_0.gguf' -a smol135m
llm chat -m smol135m
</code></pre>
<p>The blog entry to accompany SmolLM2 should be coming soon, but in the meantime here's the entry from July introducing the first version: <a href="https://huggingface.co/blog/smollm"> SmolLM - blazingly fast and remarkably powerful </a>.</p>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cramming Solitaire onto a Nintendo E-Reader card (120 pts)]]></title>
            <link>https://mattgreer.dev/blog/cramming-solitaire-onto-a-nintendo-ereader-card/</link>
            <guid>42024342</guid>
            <pubDate>Sat, 02 Nov 2024 06:04:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mattgreer.dev/blog/cramming-solitaire-onto-a-nintendo-ereader-card/">https://mattgreer.dev/blog/cramming-solitaire-onto-a-nintendo-ereader-card/</a>, See on <a href="https://news.ycombinator.com/item?id=42024342">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I recently finished making Solitaire for the Nintendo E-Reader. I managed to fit it onto a single card, and it's a pretty full featured version of the game. I'm really happy with how it turned out. I figured I'd talk a bit about how I made it in what turned out to be a long blog post :)</p><iframe width="560" height="315" src="https://www.youtube.com/embed/yrCnlQbR8Qw" frameborder="0" allowfullscreen=""></iframe><h2 id="what-is-the-e-reader">What is the E-Reader?</h2><p>The E-Reader is a Game Boy Advance peripheral that Nintendo released in 2002. By scanning cards that have a dot code strip on them, you can load mini games, extra levels, animations and more.</p><figure><img src="https://mattgreer.dev/_next/static/media/ereaderWithCard.ab34b110.jpg" alt="The E-Reader and one of its cards"><figcaption>The E-Reader and one of its cards</figcaption></figure><p>I've always really liked the E-Reader and was sad it didn't do too well in America. So I thought maybe I'd take a stab at making games for it myself.</p><figure><img src="https://mattgreer.dev/_next/static/media/marge.40e3ded1.jpg" alt="Marge Simpson holding up an E-Reader card"><figcaption>Me too, Marge</figcaption></figure><p>And here is the result</p><figure><img src="https://mattgreer.dev/_next/static/media/solitaireCard.14494276.svg" alt="Solitaire as an E-Reader card"><figcaption>Solitaire in its card from</figcaption></figure><p>If you would like to try it, you can get a card at <a tabindex="0" href="https://retrodotcards.com/">retrodotcards.com</a>.</p><h2 id="tools-and-docs-starting-way-back-in-the-past">Tools and docs, starting way back in the past...</h2><p>Where to begin? I remembered there were some old tools and websites about making E-Reader cards from back around when it first came out <!-- -->—<!-- --> twenty years ago! I managed to find <a tabindex="0" href="https://www.schuerewegen.tk/">Tim Schuerewegen's</a> original site in the Wayback Machine. It had some examples, source code and tools. I also refound <a tabindex="0" href="https://caitsith2.com/ereader/">CaitSith2's E-Reader site</a>, which thankfully is still up. It also has some tools and information.</p><div><p>These tools are the backbone of E-Reader dev. Thanks to Tim and CaitSith2 for making them! They were originally made for Windows, but they were also made</p><!-- --> <p><a tabindex="0" href="https://github.com/breadbored/nedclib">multi-platform here</a>.</p></div><p>These initial findings were a great start and got me headed down learning how E-Reader applications are programmed. GBATEK also has <a tabindex="0" href="https://problemkaputt.de/gbatek.htm#gbacartereader">a section on the E-Reader</a> which also contains lots of useful information.</p><p>More recently I found <a tabindex="0" href="https://github.com/AkBKukU/e-reader-dev">AkBKukU's e-reader-dev repo</a> which has also been very helpful.</p><h2 id="pick-your-poison-gba-nes-or--z80">Pick your poison: GBA, NES or ... z80?</h2><p>What kind of E-Reader card should I make? E-Reader cards can come in four broad formats</p><h3 id="game-boy-advance-applications">Game Boy Advance applications</h3><p>These are GBA programs written much like if you were making a normal GBA game. The E-Reader simply loads them in then lets them execute on their own for the most part.</p><h3 id="nes-games">NES games</h3><p>The E-Reader contains a simple NES emulator, so it is possible to directly put simple NES games onto E-Reader cards. The keyword here is "simple", it does not support more advanced NES features. Also the E-Reader has a limit on how many card swipes one application can have. The NES games Nintendo released require 10 card swipes to load! So in the end it is only possible to run early/small NES games. Nintendo used this to release games like Excitebike and Donkey Kong for the E-Reader</p><figure><img src="https://mattgreer.dev/_next/static/media/excitebike.b25f14d4.jpg" alt="Excitebike in E-Reader card format"><figcaption>Excitebike in E-Reader card format</figcaption></figure><h3 id="raw-binaries">Raw binaries</h3><p>Raw E-Reader cards just contain binary data of some kind. Specific games made use of these to add levels, characters, etc. Kind of like a primitive form of DLC. It is up to the specific game to interpret the data as it sees fit.</p><p>Super Mario Advance 4 released cards like this, adding additional levels, power ups and more for the game</p><figure><img src="https://mattgreer.dev/_next/static/media/sma4LevelCards.2f1b78cf.jpg" alt="Super Mario Advance 4 E-Reader level cards"><figcaption>Super Mario Advance 4 E-Reader level cards</figcaption></figure><h3 id="z80-applications">z80 Applications</h3><p>And finally the E-Reader also contains a simple z80 emulator. The z80 is an 8-bit processor that first came out in 1976! It was very successful and found its way into many different computers.</p><p>I don't believe Nintendo ever used a z80 processor in any of their game consoles. So this choice is an interesting one. I'm sure the z80's simplicity was a big factor here, it's pretty easy to emulate.</p><p>I have since been informed that the Game Boy and Game Boy Color have CPUs that are similar to the z80. So that might have influenced Nintendo's decision here. I didn't know that, so thanks to those who informed me.</p><figure><img src="https://mattgreer.dev/_next/static/media/manhole.c4c7c2b1.jpg" alt="Manhole: a simple z80 E-Reader game"><figcaption>Manhole: a simple z80 E-Reader game</figcaption></figure><p>That means E-Reader apps can be written in z80 assembly. The primary advantage here is z80 apps tend to be quite small. In my experimenting, I found an E-Reader z80 app to be about 30-50% smaller than an equivalent E-Reader GBA app. Nintendo almost entirely went this route with their own cards, I'm guessing to keep the number of swipes needed for an application to a minimum.</p><h2 id="z80-e-reader-apps">z80 E-Reader apps</h2><p>I made Solitaire as a z80 application and have become pretty entrenched in this approach. I really like how much smaller the resulting binaries are. But make no doubt about it, z80 assembly is pretty rough. Especially considering you can <a tabindex="0" href="https://github.com/AkBKukU/e-reader-dev">write a GBA E-Reader card in C</a>.</p><h3 id="the-erapi-api">The ERAPI API</h3><p>For z80 games, Nintendo embedded a simple but effective <a tabindex="0" href="https://problemkaputt.de/gbatek.htm#gbacartereaderapifunctions">API</a> into the E-Reader that they can take advantage of. Things like creating sprites, playing music, even multiplying and dividing, can all be done through this API. This helps keep card sizes small, as common functionality doesn't need to be packed into the cards, the E-Reader itself will provide it.</p><p>GBA E-Reader games also can access ERAPI. It's a bit different here and there, but overall it's the same API.</p><p>As a simple example, here is how to create a sprite using the API</p><p><code><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>;&nbsp;<wbr>ERAPI_SpriteCreate()</span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>;&nbsp;<wbr>e&nbsp;<wbr>&nbsp;<wbr>=&nbsp;<wbr>pal#</span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>;&nbsp;<wbr>hl&nbsp;<wbr>=&nbsp;<wbr>sprite&nbsp;<wbr>data</span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>ld&nbsp;<wbr>&nbsp;<wbr>e,&nbsp;<wbr>#2</span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>ld&nbsp;<wbr>&nbsp;<wbr>hl,&nbsp;<wbr>#my_sprite_data_struct</span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>rst&nbsp;<wbr>0</span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>.db&nbsp;<wbr>ERAPI_SpriteCreate</span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>ld&nbsp;<wbr>&nbsp;<wbr>(my_sprite_handle),&nbsp;<wbr>hl</span></p></code></p><p>If you're not familiar with z80 assembly this probably looks bizarre. It is basically the equivalent of</p><p><code><p><span>int</span><span>&nbsp;<wbr>palette_index&nbsp;<wbr></span><span>=</span><span>&nbsp;<wbr></span><span>2</span><span>;</span><span></span></p><p><span></span><span>int</span><span>&nbsp;<wbr>my_sprite_handle&nbsp;<wbr></span><span>=</span><span>&nbsp;<wbr></span><span>SpriteCreate</span><span>(</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>palette_index</span><span>,</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>my_sprite_data_struct</span></p><p><span></span><span>)</span><span>;</span><span></span></p></code></p><p>The <code>ld</code> calls are "load", and here we are loading the <code>e</code> register with which palette index we want the sprite to use. The <code>hl</code> register is loaded with a pointer to the information about the sprite (its tiles, colors, frames of animation, etc). The <code>rst 0</code> and <code>.db ERAPI_SpriteCreate</code> lines are where we actually make the API call. Without getting too deep on how the z80 works, this is a simple function call. When it is done, it will leave the handle to the sprite in the hl register, so we <code>ld (my_sprite_handle), hl</code> to copy that value off into memory for safe keeping. That handle is later used whenever we want to interact with the sprite, such as changing its position.</p><h3 id="a-crippled-z80">A crippled z80</h3><p>The E-Reader's z80 emulator is not 100% accurate. Nintendo decided to not support some opcodes and some of the registers. I have also found that some opcodes don't seem to work correctly. Hopefully I'm just using them wrong, but some opcodes just cause the GBA to show a black screen and lock up.</p><p>The z80 is already a very limited processor, and this makes it even more so. Sometimes E-Reader z80 development is absolutely painful. But hey, the challenge is part of the fun (right?)</p><p>I often felt like this when trying to implement something</p><figure><img src="https://mattgreer.dev/_next/static/media/austinPowers.5363a338.jpg" alt="Austin Powers trying to turn around in a tunnel"></figure><p>Simple things that I usually take for granted like copying one array to another is just so much harder to do in E-Reader z80 assembly. Thankfully I'm starting to get the hang of it.</p><h3 id="debugging">Debugging</h3><p>Another huge challenge was debugging the game. There's no way to log anything, running the game on a Game Boy Advance is a total black box. GBA emulators like <a tabindex="0" href="https://mgba.io/">mGBA</a> have good debugging features. But this is a z80 emulator running on the GBA's ARM processor. I figured stepping through ARM instructions trying to figure out how z80 instructions worked would be a herculean task, so much so I never even tried. Thankfully I don't think I'll ever need to, more on that below.</p><p>For my first attempt at creating a debugger, I took <a tabindex="0" href="https://github.com/5inf/z80js">z80js</a>, a z80 emulator core created by Molly Howell, and built a small application that would run my binary and log out what the cpu was doing. The output looked like this</p><p><code><p><span>...</span><span></span></p><p><span>0B52</span><span>:</span><span>&nbsp;<wbr>call&nbsp;<wbr>_deck_gfx_render_column&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>|</span><span>&nbsp;<wbr>a</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>b</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>c</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>03</span><span>,</span><span>&nbsp;<wbr></span><span>d</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>08</span><span>,</span><span>&nbsp;<wbr></span><span>e</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr>5c</span><span>,</span><span>&nbsp;<wbr></span><span>h</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>l</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>bc</span><span>:</span><span>&nbsp;<wbr></span><span>0003</span><span>,</span><span>&nbsp;<wbr></span><span>de</span><span>:</span><span>&nbsp;<wbr>085c</span><span>,</span><span>&nbsp;<wbr></span><span>hl</span><span>:</span><span>&nbsp;<wbr></span><span>0017</span><span></span></p><p><span>0B5B</span><span>:</span><span>&nbsp;<wbr>ld&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>b</span><span>,</span><span>#</span><span>0x13</span><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>|</span><span>&nbsp;<wbr>a</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>b</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>c</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>03</span><span>,</span><span>&nbsp;<wbr></span><span>d</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>08</span><span>,</span><span>&nbsp;<wbr></span><span>e</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr>5c</span><span>,</span><span>&nbsp;<wbr></span><span>h</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>l</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>bc</span><span>:</span><span>&nbsp;<wbr></span><span>0003</span><span>,</span><span>&nbsp;<wbr></span><span>de</span><span>:</span><span>&nbsp;<wbr>085c</span><span>,</span><span>&nbsp;<wbr></span><span>hl</span><span>:</span><span>&nbsp;<wbr></span><span>0017</span><span></span></p><p><span>0B5D</span><span>:</span><span>&nbsp;<wbr>ld&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>c</span><span>,</span><span>#</span><span>0x00</span><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>|</span><span>&nbsp;<wbr>a</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>b</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>13</span><span>,</span><span>&nbsp;<wbr></span><span>c</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>03</span><span>,</span><span>&nbsp;<wbr></span><span>d</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>08</span><span>,</span><span>&nbsp;<wbr></span><span>e</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr>5c</span><span>,</span><span>&nbsp;<wbr></span><span>h</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>l</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>bc</span><span>:</span><span>&nbsp;<wbr></span><span>1303</span><span>,</span><span>&nbsp;<wbr></span><span>de</span><span>:</span><span>&nbsp;<wbr>085c</span><span>,</span><span>&nbsp;<wbr></span><span>hl</span><span>:</span><span>&nbsp;<wbr></span><span>0017</span><span></span></p><p><span>0B5F</span><span>:</span><span>&nbsp;<wbr>ld&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>hl</span><span>,</span><span>(</span><span>_deck_gfx_cur_column_addr</span><span>)</span><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>|</span><span>&nbsp;<wbr>a</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>b</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>13</span><span>,</span><span>&nbsp;<wbr></span><span>c</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>d</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>08</span><span>,</span><span>&nbsp;<wbr></span><span>e</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr>5c</span><span>,</span><span>&nbsp;<wbr></span><span>h</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>l</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>bc</span><span>:</span><span>&nbsp;<wbr></span><span>1300</span><span>,</span><span>&nbsp;<wbr></span><span>de</span><span>:</span><span>&nbsp;<wbr>085c</span><span>,</span><span>&nbsp;<wbr></span><span>hl</span><span>:</span><span>&nbsp;<wbr></span><span>0017</span><span></span></p><p><span>0B62</span><span>:</span><span>&nbsp;<wbr>ld&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>d</span><span>,</span><span>#</span><span>0x00</span><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>|</span><span>&nbsp;<wbr>a</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>b</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>13</span><span>,</span><span>&nbsp;<wbr></span><span>c</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>d</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>08</span><span>,</span><span>&nbsp;<wbr></span><span>e</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr>5c</span><span>,</span><span>&nbsp;<wbr></span><span>h</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>08</span><span>,</span><span>&nbsp;<wbr></span><span>l</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr>5c</span><span>,</span><span>&nbsp;<wbr></span><span>bc</span><span>:</span><span>&nbsp;<wbr></span><span>1300</span><span>,</span><span>&nbsp;<wbr></span><span>de</span><span>:</span><span>&nbsp;<wbr>085c</span><span>,</span><span>&nbsp;<wbr></span><span>hl</span><span>:</span><span>&nbsp;<wbr>085c</span></p><p><span>0B64</span><span>:</span><span>&nbsp;<wbr>ld&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>e</span><span>,</span><span>c&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>|</span><span>&nbsp;<wbr>a</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>b</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>13</span><span>,</span><span>&nbsp;<wbr></span><span>c</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>d</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>e</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr>5c</span><span>,</span><span>&nbsp;<wbr></span><span>h</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>08</span><span>,</span><span>&nbsp;<wbr></span><span>l</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr>5c</span><span>,</span><span>&nbsp;<wbr></span><span>bc</span><span>:</span><span>&nbsp;<wbr></span><span>1300</span><span>,</span><span>&nbsp;<wbr></span><span>de</span><span>:</span><span>&nbsp;<wbr>005c</span><span>,</span><span>&nbsp;<wbr></span><span>hl</span><span>:</span><span>&nbsp;<wbr>085c</span></p><p><span>0B65</span><span>:</span><span>&nbsp;<wbr>add&nbsp;<wbr>&nbsp;<wbr>hl</span><span>,</span><span>de&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>|</span><span>&nbsp;<wbr>a</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>b</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>13</span><span>,</span><span>&nbsp;<wbr></span><span>c</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>d</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>e</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>h</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr></span><span>08</span><span>,</span><span>&nbsp;<wbr></span><span>l</span><span>:</span><span>&nbsp;<wbr>&nbsp;<wbr>5c</span><span>,</span><span>&nbsp;<wbr></span><span>bc</span><span>:</span><span>&nbsp;<wbr></span><span>1300</span><span>,</span><span>&nbsp;<wbr></span><span>de</span><span>:</span><span>&nbsp;<wbr></span><span>0000</span><span>,</span><span>&nbsp;<wbr></span><span>hl</span><span>:</span><span>&nbsp;<wbr>085c</span></p><p><span></span><span>...</span><span></span></p></code></p><p>That looks like pure gibberish here in the blog because the lines are too long to fit. Each line contains the opcode the cpu executed, and the state of all the registers at that time.</p><p>Here is a single line, cleaned up a bit</p><p><code><p><span>0B5B</span><span>:</span><span>&nbsp;<wbr>ld&nbsp;<wbr>b</span><span>,</span><span>#</span><span>0x13</span><span>&nbsp;<wbr></span><span>|</span><span>&nbsp;<wbr>a</span><span>:</span><span>17</span><span>,</span><span>&nbsp;<wbr></span><span>b</span><span>:</span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>c</span><span>:</span><span>03</span><span>,</span><span>&nbsp;<wbr></span><span>d</span><span>:</span><span>08</span><span>,</span><span>&nbsp;<wbr></span><span>e</span><span>:</span><span>5c</span><span>,</span><span>&nbsp;<wbr></span><span>h</span><span>:</span><span>00</span><span>,</span><span>&nbsp;<wbr></span><span>l</span><span>:</span><span>17</span><span>,</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>bc</span><span>:</span><span>0003</span><span>,</span><span>&nbsp;<wbr></span><span>de</span><span>:</span><span>085c</span><span>,</span><span>hl</span><span>:</span><span>&nbsp;<wbr></span><span>0017</span><span></span></p></code></p><p>This ... worked ... I mean it got the job done and I was able to fix bugs by examining this output. But it wasn't very fun. A huge downside to this approach is it wasn't interactive. It just blindly ran the game without allowing any button presses or anything like that. Because of this, I often had to get very creative to get this emulator to run the part of the game I was having troubles with.</p><h3 id="a-proper-debugger">A proper debugger</h3><p>I used this tracing approach to write most of the game. But towards the end there were two mysterious bugs I just could not figure out. I knew I needed a better solution.</p><p>I stumbled across the <a tabindex="0" href="https://github.com/maziac/DeZog">DeZog</a> project, which is a general purpose z80 debugging extension for VS Code. This looked really promising, but then I found <a tabindex="0" href="https://github.com/andrivet/ZX81-Debugger">ZX81-Debugger</a>. Sebastien Andrivet took DeZog as a basis and made a VS Code extension specifically for writing and debugging <a tabindex="0" href="https://en.wikipedia.org/wiki/ZX81">ZX81</a> applications.</p><p>I really liked ZX81-Debugger right away, what a great tool! Just install it and <em>boom</em> you've got a full fledged ZX81 development environment. I forked its code and started adapting it to work with E-Reader apps. Since both platforms have the z80 processor in common, this turned out to not be as difficult as I thought it would be.</p><p>After a long weekend of hacking, I surprisingly had an E-Reader debugger running in VS Code! In the end, I was positively floored how quickly I got this working. I am truly standing on the shoulders of giants ... so thank you to everyone who made all of this possible.</p><figure><img src="https://mattgreer.dev/_next/static/media/ereaderDebugger.7724d380.png" alt="The E-Reader debugger running in VS Code"><figcaption>The E-Reader debugger running in VS Code</figcaption></figure><p><a tabindex="0" href="https://mattgreer.dev/ereaderDebugger.png">Here is that image</a> in full size.</p><p>To get this working I removed most of the ZX81 specific things and then wrote a simple ERAPI emulator. As ERAPI calls come in, the debugger sends them over to my little emulator, which then translates them into a visual GBA screen.</p><figure><img src="https://mattgreer.dev/_next/static/media/erapiScreen.74512747.png" alt="A close up of the ERAPI emulator screen output"><figcaption>A close up of the ERAPI emulator screen output</figcaption></figure><p>The background is green because I've not added most of the background related API functions to the emulator yet. And below the screen I am dumping out the current state of all the sprites that were created through ERAPI.</p><p>You can even take a commercial E-Reader game and run it in the debugger. It will disassemble the binary and provide a nice debugging experience. This will be helpful to further figure out more about how E-Reader cards and ERAPI works.</p><figure><img src="https://mattgreer.dev/_next/static/media/kirbyInDebugger.6b6e5d80.png" alt="An official Nintendo E-Reader card, running in the debugger"><figcaption>An official Nintendo E-Reader card, running in the debugger</figcaption></figure><p>The colors in that Kirby card are all weird because my ERAPI emulator is super raw and does many things incorrectly. It's drawing the image using the wrong palettes. A lot more work needs to be done.</p><p>This is just amazing! I never imagined I'd get a developer experience this powerful on a forgotten, 20 year old, Nintendo peripheral. We really live in exciting times sometimes.</p><p>Ultimately I will open source the E-Reader-Debugger. But as it stands, it's not even alpha quality. I mean it is <i>rough</i>. After I've worked out more kinks, I will throw it up on GitHub.</p><h2 id="challenges-with-the-erapi-api">Challenges with the ERAPI API</h2><p>Overall the E-Reader's ERAPI is very useful, and has lots of great stuff to make development easier. But I did find some of the stuff didn't work out. Either because this stuff is buggy, or maybe I just don't yet understand how to use it properly. Hopefully the latter.</p><p>I really struggled with this when rendering the playfield for Solitaire. Being an old game system, the GBA has limitations when drawing sprites to the screen. You can't put too many on the screen at once or else things like this can happen</p><iframe width="560" height="315" src="https://www.youtube.com/embed/WE4CgMpjD88" frameborder="0" allowfullscreen=""></iframe><p>This video shows Solitaire when I first started working on it. I wanted to see if I could use sprites to draw all the cards. I concluded I couldn't and instead would need to draw the cards into a background. Using backgrounds for graphics like this is a very common tactic on older game systems. And luckily, ERAPI has the function <code>SpriteDrawOnBackground</code>, it seems to be exactly meant for this use case.</p><p>Using this function, I was able to easily draw my sprites into the background and avoid all graphical glitching ... the first time the playfield was drawn. As it was drawn repeatedly, it seemed like the tiles in video RAM were getting corrupted</p><iframe width="560" height="315" src="https://www.youtube.com/embed/jz8RZF68B58" frameborder="0" allowfullscreen=""></iframe><p>In this video I was reshuffling and redealing the deck repeatedly. And each time I dealt it out again, graphical glitches would appear.</p><p>I tried and tried, but I just could not get this to work. I'm not completely sure I wasn't doing something wrong. But ERAPI and the way z80 apps work with the emulator seem pretty straightforward? So I <em>think</em> this function was not meant for rapid use like this.</p><p>ERAPI has another function, <code>LoadCustomBackground</code>, and it was this one that was a winner for my game. It's a lower level and harder to use function than <code>SpriteDrawOnBackground</code>, but it has never caused graphical glitches on me even once.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/4-uaNX9LGN4" frameborder="0" allowfullscreen=""></iframe><p>With this function, it is up to me to figure out which tiles go where to form a background. You need to understand how backgrounds work on the GBA to pull this off. Then once I've figured it all out, I just send it to the GBA in one function call and it appears on the screen.</p><h2 id="z80-e-reader-apps-are-kinda-script-like">z80 E-Reader apps are kinda script-like</h2><p>I have found the way E-Reader z80 apps work to be pretty interesting. The emulator uses the <code>halt</code> opcode to mean "draw a frame to the screen". You can load the <code>a</code> register with how many frames it should draw, accomplishing a very simple way to add waits to your game.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/k5GrjMe4Ef0" frameborder="0" allowfullscreen=""></iframe><p>Take this little intro animation. I built it like this</p><p><code><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>logoHandle&nbsp;<wbr></span><span>=</span><span>&nbsp;<wbr></span><span>createSprite</span><span>(</span><span>logo</span><span>)</span><span>;</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>setSpritePosition</span><span>(</span><span>logoHandle</span><span>,</span><span>&nbsp;<wbr></span><span>120</span><span>,</span><span>&nbsp;<wbr></span><span>20</span><span>)</span><span>;</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>footerHandle&nbsp;<wbr></span><span>=</span><span>&nbsp;<wbr></span><span>createSprite</span><span>(</span><span>footer</span><span>)</span><span>;</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>setSpritePosition</span><span>(</span><span>footerHandle</span><span>,</span><span>&nbsp;<wbr></span><span>120</span><span>,</span><span>&nbsp;<wbr></span><span>60</span><span>)</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>playSystemSound</span><span>(</span><span>DRUM_ROLL</span><span>)</span><span>;</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>for</span><span>&nbsp;<wbr></span><span>(</span><span>let</span><span>&nbsp;<wbr>i&nbsp;<wbr></span><span>=</span><span>&nbsp;<wbr></span><span>0</span><span>;</span><span>&nbsp;<wbr>i&nbsp;<wbr></span><span>&lt;</span><span>&nbsp;<wbr></span><span>NUM_CARDS_TO_DEAL</span><span>)</span><span>&nbsp;<wbr></span><span>{</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>dealOneCard</span><span>(</span><span>i</span><span>)</span><span>;</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>//&nbsp;<wbr>render&nbsp;<wbr>one&nbsp;<wbr>frame&nbsp;<wbr>to&nbsp;<wbr>show&nbsp;<wbr>the&nbsp;<wbr>newly&nbsp;<wbr>dealt&nbsp;<wbr>card</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>halt</span><span>(</span><span>1</span><span>)</span><span>;</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>}</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>playSystemSound</span><span>(</span><span>CYMBOL</span><span>)</span><span>;</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>//&nbsp;<wbr>wait&nbsp;<wbr>for&nbsp;<wbr>30&nbsp;<wbr>frames</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>halt</span><span>(</span><span>30</span><span>)</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>//&nbsp;<wbr>tear&nbsp;<wbr>down&nbsp;<wbr>the&nbsp;<wbr>logos</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>freeSprite</span><span>(</span><span>logoHandle</span><span>)</span><span>;</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>freeSprite</span><span>(</span><span>footerHandle</span><span>)</span><span>;</span><span></span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span><span>//&nbsp;<wbr>let&nbsp;<wbr>the&nbsp;<wbr>regular&nbsp;<wbr>gameplay&nbsp;<wbr>loop&nbsp;<wbr>take&nbsp;<wbr>over&nbsp;<wbr>from&nbsp;<wbr>here</span><span></span></p></code></p><p>In the actual game this was done in assembly, I turned it into pseudo-code here to make it easier to read.</p><p>What I find interesting is I just whipped up a typical game engine loop on the spot, just to deal out the cards. I didn't need to hook all this into a main game loop like you often do with most game development. The entire rest of the game doesn't know or even care that this happens.</p><h2 id="e-reader-assets">E-Reader assets</h2><p>You might have noticed my game has music, sound effects, and a Mars-like rocky background. The E-Reader itself has many assets a game can use. This helps keep the dotcode data small. You can do custom graphics (such as the deck of cards in my game) and sounds, but they tend to be quite large and take up precious space.</p><figure><img src="https://mattgreer.dev/_next/static/media/ereaderSystemBackgrounds.65d3800e.png" alt="Some of the backgrounds found on the E-Reader"><figcaption>Some of the backgrounds found on the E-Reader</figcaption></figure><p>Altogether there are over 100 backgrounds, over 800 sounds (both sound effects and music) and over 200 Pokémon sprites stored in the E-Reader's 8MB ROM. If you're an E-Reader fan, you might have noticed Nintendo's mini games tend to reuse the same sound effects, music and often the same backgrounds. This is why.</p><p>Using them is usually just a simple API call. For example here is how I play the drum roll sound effect</p><p><code><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>ld&nbsp;<wbr>hl,&nbsp;<wbr>755</span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>rst&nbsp;<wbr>8</span></p><p><span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>.db&nbsp;<wbr>ERAPI_PlaySystemSound</span></p></code></p><p>Crazy assembly syntax aside, this is pretty much just <code>PlaySystemSound(755)</code>, where <code>755</code> is the drum roll's id.</p><h2 id="how-big-can-e-reader-apps-be">How big can E-Reader apps be?</h2><p>A single E-Reader dotstrip can store 2,192 bytes of data, which is just over 2kb. But there is some overhead with the headers, and error correction, making the actual amount of data I've been able to store on a single strip a bit less than 2kb. This data on the dotstrip is compressed though, which helps a lot.</p><figure><img src="https://mattgreer.dev/_next/static/media/helloWorld.dotcode.bmp.43c2b440.png" alt="An example dotcode strip"><figcaption>An example dotcode strip</figcaption></figure><figure><img src="https://mattgreer.dev/_next/static/media/helloWorld.dotcode.snippet.bmp.cf8b38ee.png" alt="A closer view at part of the dotstip"><figcaption>A closer view at part of the dotstrip</figcaption></figure><p>The compression makes the total storage size kind of fuzzy. It really depends on how well your data compresses. For example, here are the tiles for my cards</p><figure><img src="https://mattgreer.dev/_next/static/media/deck_strips.e6d0f428.png" alt="The card graphic tiles for Solitaire"><figcaption>The card graphic tiles for Solitaire</figcaption></figure><p>I could have saved space by not repeating the same tile over and over again. But this data compressed <em>very</em> well. So well, I just went with it. Deduping these tiles would have made the drawing routines much more complicated, maybe so much so it would have killed any space savings I had achieved.</p><p>In the end I didn't need to do <em>too</em> much space optimization to keep Solitaire down to two dotstrips (which can be printed onto a single card). I did use up all the space that those two strips alloted me, so any more features would have likely required the game be expanded to three dotstrips, something I really wanted to avoid.</p><p>Honestly I'm a bit surprised how many strips are needed for some of Nintendo's cards. Based on the game contained inside and my experience writing Solitaire, it seems like some of their games could have been done in fewer dotstrips. But that's just a total guess, I don't really know.</p><h3 id="the-e-reader-and-gba-limitations-on-space">The E-Reader and GBA limitations on space</h3><p>The E-Reader itself allows a maximum of 12 strips to be scanned for a single application. Although I've yet to find any application that requires that many. The NES games need 10</p><figure><img src="https://mattgreer.dev/_next/static/media/tenStripsNeeded.612549fa.png" alt="The E-Reader waiting for 9 more strips to load Excitebike"><figcaption>The E-Reader waiting for 9 more strips to load Excitebike</figcaption></figure><p>As for the Game Boy Advance itself, it has 256kb of RAM which is more than enough to store any E-Reader application. The E-Reader will decompress the data into RAM, then execute it. I suppose technically your data could exceed 256kb when decompressed, but realistically I just can't see that happening.</p><h2 id="more-e-reader-cards-to-come">More E-Reader cards to come</h2><p>My goal is to make many more E-Reader apps. I'm already deep into development of the next game. I am hoping to build at least 10 apps and have the cards professionally manufactured. Hopefully packaged up in a booster pack, which would be so cool. Why? Why not. I think the E-Reader is really cool and this is a lot of fun.</p><p>If new E-Reader cards interests you, check out <a tabindex="0" href="https://retrodotcards.com/">https://retrodotcards.com</a> If you want to try Solitaire out for yourself, you can order a card there. They are free.</p><p>I will also be posting to <a tabindex="0" href="https://bsky.app/profile/retrodotcards.com">Bluesky</a> as I progress, and have also started a <a tabindex="0" href="https://www.reddit.com/r/retrodotcards/">subreddit</a> for this, stop on by!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rewrite It in Rails (182 pts)]]></title>
            <link>https://dirkjonker.bearblog.dev/rewrite-it-in-rails/</link>
            <guid>42024246</guid>
            <pubDate>Sat, 02 Nov 2024 05:25:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dirkjonker.bearblog.dev/rewrite-it-in-rails/">https://dirkjonker.bearblog.dev/rewrite-it-in-rails/</a>, See on <a href="https://news.ycombinator.com/item?id=42024246">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2024-11-01T00:06Z">
                    01 Nov, 2024
                </time>
            </i>
        </p>
    

    <p>In 2022 I started building an application for creating Customs declarations. After evaluating some options and writing code in various programming languages and frameworks such as .NET/F#, Go, Rust, React, I eventually decided to write it in Ruby on Rails. Why? Because I was already familiar with Rails and because of that I could literally go 10x faster than I was with any of the aforementioned options that were quite new to me. I told myself that this was temporary, a proof of concept and that later on, I would rewrite it in a different language that wouldn't let me shoot myself in the foot as easily as I tend to do with Ruby. The Rails application however quickly grew in functionality and my colleagues really liked the application. I could quickly build features that would make them more productive and prevent a ton of things that could go wrong (and often did initially go wrong, until I wrote some code to prevent it).</p>
<p>Meanwhile, I started building "version 2" of the application. I chose Rust as the language for the backend and SvelteKit for the frontend. Initially, the new version looked great, was <em>blazing fast</em>, but only had about 10% of the required features. As Rust doesn't really have anything comparable to Rails, I ended up having to do a lot of plumbing instead of writing business code. After a while, it became obvious that I could never write a feature complete version 2 without completely freezing version 1. So version 2 got thrown in the bin. Maybe this experience taught me something: rewriting something seems to take about as long as writing the original thing in the first place.</p>
<p>Was this the end of the story? Absolutely not. Having experienced the joy of Rust, with beautifully typed code and <em>blazing fast</em> performance, the feeling of confidence you get when something compiles without errors, I knew I had to have Rust in the application. Despite over four years with Ruby, I still regularly wrote code that had issues at runtime. Mostly issues with null values and unhandled exceptions. After each deploy, I would closely watch the error reporting tools and quickly fix any issues that would occur in production. Rust just seemed like a necessity with its lack of null and making it easy for you to handle all errors. And I always enjoy learning new things and finding better ways of writing software.</p>
<p>Besides Ruby on the backend, I was also getting a bit frustrated with frontend in Rails, having logic and markup spread across different files. Svelte just made that so much easier with related logic grouped in a single file. The decision was thus ti slowly write new parts of the frontend in SvelteKit and backend in Rust. Then slowly rewrite the existing Rails parts as well and eventually substitute Rails completely.</p>
<p>This idea looked to be off to a great start. It didn't take long to move all the "index" pages with lists of records and filters to the new stack. And it was <em>blazing fast</em> and (at least the Rust part) barely had any issues at runtime. Deployment got a bit messy with a lot of rules for which routes would go to Rails, Rust or SvelteKit, but hey, it would only be temporary until everything was rewritten and awesome.</p>
<p>However, as time went on, the Rails parts slowly got useful new features and the existing features got deeper and more refined. I performed various refactors to fix wrong assumptions I made very early on. Having a well designed database schema would benefit any version of the application, so this was good. I decided not to spend any more time updating the Rails UI as it would be replaced <em>soon</em>™ anyway.</p>
<p>This went on for months and months, and the business was successful enough that we could afford to employ a full time developer. This would be great and would surely speed up the migration to Rust domination.</p>
<p>It is good to dream big, I guess. And a big dream it surely was. In reality, I spent a lot of time writing abstractions and mechanisms for accessing the database, to ensure that users could only see the data they are allowed to see, keeping track of all changes, search and filters and using the type system to enforce it all. Then I realized I would also need background jobs, a pub/sub system for pushing updates to the client, e-mail capabilities, OAuth 2.0 support for connecting with external services, SMTP and POP, object storage, PDF generation and more. While there are plenty of Rust libraries available for doing all of these, selecting the right one and wiring everything together was a lot of work. We were having a lot of discussions avout technical implementation details, what ORMs for Rust might be useful, when Svelte 5 would come out and how much better it would be, and so on.</p>
<p>After probably a good year of writing Rust and Svelte, it dawned on me that our users didn't benefit from any of this. Sure, parts of the application were now very sleek and <em>blazing fast</em>, but to be honest, those parts were never an issue to begin with. The most used pages were still running Rails and they often did 10x more than the current state of the "beta version" of that same page, written in the new stack. With days and often weeks on end being spent on adding absolutely no direct value, I had to keep telling myself that it was an investment, and that it would pay off in the long run.</p>
<p>And then I called BS on myself. Some investments are just dumb and will not work out, no matter how hard you want things to succeed. I was getting stressed because our users needed stuff that I wasn't building for them. And I was getting more stressed just thinking about the sheer amount of stuff that still had to be (re)written in Rust. I was still the only person on the team maintaining the Rails app, the rest was only familiar with Rust and Svelte. The application became rather complicated, with many changes to be made in multiple places if you just wanted to make a small change. There was only one reasonable decision to be made.</p>
<p>We had to Rewrite it in Rails. Well, not the <em>whole</em> thing, just the parts that were now running on the "new" stack. And the rest of the team would have to start learning Rails, I guess, whether they would like it or not. Even though in my opinion, this was the only good decision, it was still a very hard one to make. After all, we had spent so much time and wrote so much code, only to just throw it all away? And even potentially alienate the people on the team who may not even like Ruby or Rails? Luckily, the team seemed to understand the decision and was open to learn new things. Well, I wouldn't blame them if they would end up not enjoying it at all, but hopefully they'll give it an honest try at least.</p>
<p>What makes Rails so good then, that it is apparently better than Rust of all things and Svelte with TypeScript, the darling of web developers everywhere? Perhaps being the foundation for several hugely successful companies, who still contribute to it as much as ever, counts for something. Rails has lots of batteries included and the ecosystem consists of many mature and stable libraries to complement it. It let me focus on building the product instead of writing all of the supporting code underneath. And due to its opinionated design and conventions, it is often very concise compared to other languages and frameworks.</p>
<p>Was the attempt at using different languages and frameworks a waste then? I personally don't think so. First of all, I've learned a lot. I always enjoy learning new things and learning a new programming language or framework often gives me a lot of new insights and ideas that make me a better programmer in any language (or at least I'd like to think so).</p>
<p>More importantly, I learned that  writing a web application is all about making tradeoffs. There are a lot of decisions to be made and no choice will be perfect. You either have to accept the flaws of your chosen framework or do the investment of writing things yourself. But you have to consider whether that investment will really give you a competitive advantage and whether it will really pay off over time.</p>
<p>In this case, I think it was a great decision to go back to building everything in Rails. Rewriting a lot of stuff back to Rails was frankly rather trivial and it reduced a lot of stress for me. What's more, these last weeks I've felt very productive again, building new features, improving existing ones, updating the UI, fixing stupid bugs. I also really enjoy working more closely with my colleagues who use the application all day, every day and figuring out how I can make the product better for them.</p>
<p>But what about the downsides of Ruby and Rails then? Well, those are simply things to take into account when writing code. Let me give my opinion here. Have many issues at runtime? Test more. Does it turn into unmaintainable spaghetti code after a while? Only if you let it. It's typically caused by developers, not programming languages or frameworks. There are plenty of ways to nicely organize your code and you should probably spend more time refactoring. Rails doesn't scale? I think that if you can't scale Rails, you probably can't scale anything else either. Rails is slow? It is fast enough, and there are plenty of ways to "cheat" with Turbo and caching. Fun fact: the Rust stack wasn't noticably faster for our users. On Rails, the most heavy page has a P95 duration of 338 ms. There is of course room for improvement but it's plenty snappy.</p>
<p>Interestingly, all of the things that used to annoy me about Ruby and Rails now annoy me much, much, much less. I have accepted that there is no perfect language or framework. You just have to know its strengths and weaknesses and deal with them. Luckily, there are some really good frameworks out there for people who want to focus on building a good product. I think Rails is probably one of the best, but there are a lot of other long-lived frameworks with lots of active contributors that are probably just as good. It might still be worth it to choose a more exotic language, framework or to dive in and write your own. If only for the opportunity to learn these kinds of lessons on your own.</p>


    

    
        

        
            


        
    


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My Time Working at Stripe (354 pts)]]></title>
            <link>https://jondlm.github.io/website/blog/leaving_stripe/</link>
            <guid>42023089</guid>
            <pubDate>Sat, 02 Nov 2024 00:44:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jondlm.github.io/website/blog/leaving_stripe/">https://jondlm.github.io/website/blog/leaving_stripe/</a>, See on <a href="https://news.ycombinator.com/item?id=42023089">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>  <p> 2024-10-28 </p> <p>I did the thing you’re not supposed to do. I quit my job at Stripe without another lined up.</p>
<p>Before I left I pondered deeply how I wanted to leave. The thought of leaving my job was terrifying yet energizing in ways I didn’t expect. I found myself up in the middle of the night thinking deeply. I wrote my long-form thoughts as an internal blog post. I rewrote them. I read them to my wife who helped me refine them into something closer to what I really care about: <strong>telling our stories more truly</strong>.</p>
<p>I’d like to share my story more broadly now. Why? Because perhaps there is someone out there wondering if they’re struggling alone.</p>
<p>I’m scared to share this publicly. I’m afraid of how it’ll make me look. I’ve been sitting on this post for months now questioning my motives. At some point you just have to hit the “fuck it” button.</p>
<p>I care about honesty. Hell, one of my <a href="https://jondlm.github.io/website/values">core values</a> is “humbling honesty”. I suppose this is a small way to embody that.</p>
<p>Here’s what I shared internally without any edits:</p>
<hr>
<p>Hi. I’m Jon. I’ve been an engineer at Stripe for almost four years. My last day will be on Friday August 30th. Lately I’ve found myself increasingly drawn toward honest writing. I’d like to offer you the story of my time at Stripe that won’t be found in shipped emails. Let’s start at the beginning.</p>
<p>It was a late Summer afternoon in my home office in Portland Oregon. I was sitting at my desk pouring over my IDE setup to make sure I’d put my best foot forward for my imminent phone screen. TypeScript all configured? Check. Minimal testing framework installed? Mmmhmm. Tmux working? Yup. Tastefully muted terminal colors on display? Like a peacock.</p>
<p>I could feel my palms sweating as I watched the clock slowly tick toward 3pm. I was nervous as hell. I’d already had a successful career as a software engineer for the better part of a decade. I’d initiated and driven a company-wide migration to Kubernetes. I’d authored a component library used by hundreds of engineers. When my previous company had been bought by AT&amp;T I was given one of the highest retainer packages to keep me around. None of that seemed to matter in the build up to my interview. I was about to be closely judged and I was terrified of being found lacking.</p>
<p>My impression of Stripe was astronomically high. I considered it an outstanding company of refined craft, attention to detail, and engineering excellence. I always got ridiculously excited when I’d see a new product launch on Hacker News. I had listened to Patrick on podcasts and admired him as an industry visionary. The word “revered” feels fitting.</p>
<p>I carried all those swirling impressions with me as 3pm hit. My heart was beating so strongly I could feel it in my head. I tried to take some deep breaths but it didn’t help. My mind was racing over every little detail. “I’ll join about 30 seconds after the hour to make sure he knows I’m on-time but not <em>too</em> eager.” I joined the call and my interviewer joined shortly after.</p>
<p>He introduced himself and we settled into the usual ritual of a phone screen. I told him I already had my own environment set up and I shared my screen. “Surely he’ll take note of my meticulous programming setup.” I thought.</p>
<p>He gave me a coderpad link. I started to read through the question. I could already feel my mind moving like molasses. On the surface the question seemed straightforward enough. It presented a simple data structure and asked me to do some filtering based on a set of constraints. “No problem!” I thought.</p>
<p>I fired up vim and got to work. “Since they’re so dedicated to quality I should make sure my types are airtight.” I started modeling my solution with types first. “Hmm, well this question needs dynamic keys in the objects so that’ll mean I need an indexed type. Thank god I remember how to do those without looking them up. Don’t want to appear weak.”</p>
<p>Things were moving rather smoothly despite my sweat soaked armpits. I silently resented my wife’s decision to unilaterally give up anti-perspirant due to chemicals.</p>
<p>I got to a reasonable spot to try out my code. I hit save on the file. My little fsnotify script detected the file change, ran a TypeScript check, then executed my code.</p>
<p>Error. Shit.</p>
<p>As I read the error carefully, I realized I didn’t immediately know the solution. I felt a soupy darkness creep further in on the edges of my mind. I fumbled around for a couple minutes trying to fix it correctly. I was trapped, caged by my own need to appear competent. I could feel my mind racing from idea to idea trying to find a way out. Eventually I looked at the clock and realized we were well into the interview. I had to find a pressure relief valve before the whole thing ran off the rails.</p>
<p>I did the unthinkable. I added a <code>//@ts-ignore</code> comment to bypass the compiler.</p>
<p>“Uh heh, if this were real code obviously I’d figure out the problem. I’ll just bypass this one error and move on for the sake of time.” I said.</p>
<p>I continued down the increasingly treacherous road toward solving the problem. Another error. Another one. More ignore comments. Shit shit shit.</p>
<p>At that point I was hardly present at all. I was falling violently down a hole of self consciousness that felt like a threat to my very existence.</p>
<p>I knew my code was close to working but my mind was gone. I was done for and I knew it. He kindly ended the interview and asked if I had any questions. I bumbled some out but I knew my verdict.</p>
<p>Unqualified. Failure.</p>
<p>We ended the call and I let my head sink into my hands, but only for a moment. An idea sprang to mind. What if I got my code working really quickly and found a way to send it to him?</p>
<p>I hopped over to Chrome and googled his name. All I could find was his Twitter account. At that point I had nothing to lose so it was trivial to solve the problem. Within minutes I threw together a public gist with my working code and DM’d him:</p>
<blockquote>
<p>Don’t feel like you need to message me back. I just hate leaving a problem unresolved like I did. The code still isn’t ideal but I at least wanted to reach out and send that to you. Thanks again!</p>
</blockquote>
<p>I nervously hit the send button and walked away from the computer dejected. Within a couple days I got the email I was expecting.</p>
<p>Rejected.</p>
<p>Eventually I mustered the courage to try interviewing again six months later. I got the job. I was elated. I was extremely proud of the fact that I had gotten a job at Stripe. I even made a little web animation thing to share with my coworkers letting them know where I’d be headed next.</p>
<p>I was the first hire onto the brand new JS Infra team. I hit the ground running trying to prove myself. It took me a long time to find a project where I could clearly demonstrate business value. Before I found that project I constantly struggled with something else: writing.</p>
<p>Writing was difficult for me when I came to Stripe. I had never really written a serious project proposal in my career working at smaller companies. My writing chops felt woefully underdeveloped and the impression only grew as I read through well-crafted ships every day. I  remember a sinking feeling in my chest as I would try to work up the courage to share a link to a document I had agonized over. Worse still was seeing little avatar badges on an incomplete document I was editing. Allowing my unpolished work to be seen was terrifying. I didn’t want anyone to know I struggled. I didn’t want them to know how much their opinions mattered to me.</p>
<p>I’ll circle back to writing in a bit.</p>
<p>About a year into working at Stripe I found my first really impactful project. I worked tirelessly to migrate Dashboard development onto a new JS bundler. I sped up development by about 10x. It was a smashing success.</p>
<p>I remember the moment when my buddy Slacked me saying that my shipped email had been one of Patrick’s tabs in a Friday Fireside. I hadn’t attended because I was too busy trying to work more. My email admired by a billionaire? Bliss. The thought of Patrick noticing me felt unbelievably good. Finally I was proving myself at the company of my dreams. I was on cloud nine.</p>
<p>Until I had my next one on one with my boss. She shared with me some concerns about my communication and project management. She, and apparently others she gathered feedback from, felt like I hadn’t done a good enough job pulling other engineers into the project. She spoke of how proud she was of the outcome but that it didn’t excuse my less than ideal methods.</p>
<p>Performance review time came and I got a partially meets expectations (PME).</p>
<p>“I know it’s probably hard to get this rating after such a successful project. I want to assure you you’re on track toward a solid review next cycle as long as you address the feedback around project management and keep delivering quality stuff like this.” My boss said to me in another one on one.</p>
<p>After the call I crawled into my closet and quietly cried. It was one of the few times I let myself. I felt ashamed and humiliated.</p>
<p>I told my buddies, who referred me to Stripe, about my rating and they were both shocked. They offered kind words but it all felt hollow. Everyone assured me that a PME is a normal occurrence and that they were sure I’d bounce back. It still hurt. Worse still was feeling bad for being affected so deeply by it. “Damn it, Jon, shrug it off and get back to work” I told myself.</p>
<p>I found comradery with one of my old friends on my team. He and I went a long way back and had worked together at a previous employer. We had eaten lunch together for years in a physical office. I allowed myself to be just a little vulnerable with him about how much I was struggling to get back in the saddle. I found our raw conversations to be a small source of life.</p>
<p>I trusted him in a way I didn’t trust my boss. I knew that he cared about me no matter how I was performing at work. Having his avatar beside mine on an unfinished google doc felt invigorating. Together we quickly put together a solid proposal for the next phase of the JS bundler project that we both believed in.</p>
<p>With him in my court I felt less afraid to present the proposal to my boss. I presented it to her and sought feedback. I could intuitively tell she wasn’t impressed. Over time I was able to sus out how she really felt. She thought we should shelve the work in favor of something else more pressing but she was reluctant to say it directly. Eventually I shelved the project proposal in favor of another JS modularity project. She applauded the decision publicly. The whole experience left me feeling dizzy. Regardless, I put my head down and got to work on the new project.</p>
<p>In hindsight the pivot ended up being the right call. I don’t know why my boss wasn’t more straightforward. I never talked directly to her about it. We’re more alike than not.</p>
<p>She was promoted into a more visible role and I got a new manager. I really liked my new manager. He did something right out the gate that suggested he might be a different kind of manager. He sought vulnerability.</p>
<p>During one of his early meetings at a team onsite he asked the team, “for this meeting I’d like us to try and introduce ourselves a little differently. If you’re comfortable, I’d like us to try and be 10% more vulnerable than we normally would in a work setting.” I remember feeling a mix of anxiety and excitement rise in my chest. I sat pondering what I would share. I decided to go for more than 10%. I shared about how my marriage had almost collapsed a couple years prior and a taste of how painful it was. Some of my coworkers shared deeper things I’d never heard in a work setting. It was awkward. It was beautiful.</p>
<p>That memory springs forth from my imagination as I consider my favorite moments at Stripe. It wasn’t my project successes. It wasn’t my shipped email being mentioned by Patrick. It was getting to know the people I work with a little more closely.</p>
<p>Time passed and my new project was another slam dunk. Review time came and I got an exceeds expectations. I was shocked in a good way. More surprising still was how quickly the jolt of motivation from the rating passed. It felt good to be rewarded for my performance but I was increasingly aware of how little I cared for the recognition.</p>
<p>Still more time passed and then came the depression. I found myself increasingly demotivated in all aspects of my life. I could hardly even muster the energy to play video games (my usual haunt). Some evenings I would literally sit and stare at a wall. My sleep went to shit.</p>
<p>I was stunned. I couldn’t recall ever being depressed as an adult. I’d had slumps before but this felt different. I’d experienced something like that as a young teenager but doesn’t time heal all wounds? Apparently not for me. I felt increasingly helpless in the presence of a faceless enemy.</p>
<p>I started noticing that “run” weeks for me often left our backlog larger than when I’d started. The feeling of letting my team down sunk in deeper. It sunk into a place I felt I had no control over. I tried cutting out distractions. I DNS blocked Hacker News and Twitter. I stopped reading google news. That helped a bit but even that failed eventually. I managed to stay off them but I was still depressed.</p>
<p>It was extremely difficult because I really loved my team <em>and</em> the work I was doing. I’d get little moments where my mind felt hydrated. I would briefly get into the flow. Code, documents, and Slack replies to tough questions would stream out of me. It became more and more rare and I knew it. All my tactics were failing. I had to do something more serious.</p>
<p>I did the unthinkable. I told my team I was struggling with depression and took some time off. I remember the feeling in my body leading up to the meeting. My stomach was churning. I felt queasy. “Am I really doing this? Am I really this weak?” were a small sampling of the thoughts running through my head. By that point another possibility had started to take root alongside the others. Perhaps weakness hides the path to what I’m searching for.</p>
<p>My team was extremely supportive. I felt such care and understanding from them it was the second time I let myself shed a tear about something at work. That time I didn’t have to crawl into the closet.</p>
<p>I went back to work. Months passed leading up to the last couple weeks. I’ve found myself again unable to sleep and rest properly. By now I’ve seen the cycle enough to know that another round of relief and invigoration would be only temporary. I’m left with an alternative that excites and terrifies me. It’s time to step without knowing what comes next.</p>
<p>I’ll end with a poem that’s haunted me this year. It’s by the late John O’Donohue from his book <em>To Bless the Space Between Us</em>:</p>
<blockquote>
<p>The mind of time is hard to read.<br>
We can never predict what it will bring,<br>
Nor even from all that is already gone<br>
Can we say what form it finally takes;<br>
For time gathers its moments secretly.<br>
Often we only know it’s time to change<br>
When a force has built inside the heart<br>
That leaves us uneasy as we are.</p>
</blockquote>
<blockquote>
<p>Perhaps the work we do has lost its soul,<br>
Or the love where we once belonged<br>
Calls nothing alive in us anymore.</p>
</blockquote>
<blockquote>
<p>We drift through this gray, increasing nowhere<br>
Until we stand before a threshold we know<br>
We have to cross to come alive once more.</p>
</blockquote>
<blockquote>
<p>May we have the courage to take the step<br>
Into the unknown that beckons us;<br>
Trust that a richer life awaits us there,<br>
That we will lose nothing<br>
But what has already died;<br>
Feel the deeper knowing in us sure<br>
Of all that is about to be born beyond<br>
The pale frames where we stayed confined,<br>
Not realizing how such vacant endurance<br>
Was bleaching our soul’s desire.</p>
</blockquote>
<p>Thank you for listening to my story.</p>
<p>Love,<br>
Jon de la Motte</p> </article></div>]]></description>
        </item>
    </channel>
</rss>