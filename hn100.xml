<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 28 Apr 2025 14:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[I built a hardware processor that runs Python (225 pts)]]></title>
            <link>https://www.runpyxl.com/gpio</link>
            <guid>43820228</guid>
            <pubDate>Mon, 28 Apr 2025 11:44:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.runpyxl.com/gpio">https://www.runpyxl.com/gpio</a>, See on <a href="https://news.ycombinator.com/item?id=43820228">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <section>
      <h2>üß™ GPIO round-trip at 480ns</h2>
      <p>Python, in hardware. 480ns GPIO. No interpreter. No C. Just PyXL.</p>
      <p>
        <iframe src="https://player.vimeo.com/video/1074893425?h=722d28efd8&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" frameborder="0" allow="autoplay; fullscreen" allowfullscreen=""></iframe>
      </p>
    </section>

    <section>
      <h2>TL;DR</h2>
      <ul>
        <li>‚ö° PyXL runs <strong>Python directly in hardware</strong> ‚Äî no VM, no OS, no JIT.</li>
        <li>üß™ A GPIO roundtrip takes <strong>480ns</strong> on PyXL vs. ~15,000ns on <a href="https://store.micropython.org/product/PYBv1.1" target="_blank" rel="noopener noreferrer">PyBoard</a> (MicroPython).</li>
        <li>üìâ PyXL is <strong>30x faster</strong> than MicroPython ‚Äî or <strong>50x</strong> when normalized for clock speed.</li>
        <li>üé• The video demo shows both systems in action on real hardware.</li>
        <li>üí° This isn't a C trick ‚Äî it's actual <strong>Python executed in silicon</strong>.</li>
        <li>üéØ Deterministic timing, real-time behavior, and sub-microsecond precision ‚Äî in Python.</li>
        <li>üîó More at <a href="https://runpyxl.com/">runpyxl.com</a> ‚Äî contact link at the bottom.</li>
      </ul>
    </section>

    <section>
      <h2>What is PyXL?</h2>
      <p>PyXL is a custom hardware processor that executes Python <strong>directly</strong> ‚Äî no interpreter, no JIT, and no tricks. It takes regular Python code and runs it in silicon.</p>
      <p>A custom toolchain compiles a <code>.py</code> file into CPython ByteCode, translates it to a custom assembly, and produces a binary that runs on a pipelined processor built from scratch.</p>
    </section>

    <section>
      <h2>What PyXL is not</h2>
      <ul>
        <li>‚ùå Not a native C or inlined loop</li>
        <li>‚ùå Not MicroPython or JIT</li>
        <li>‚ùå Not running Linux or any OS</li>
      </ul>
      <p>It's a real processor for Python, built for determinism and speed.</p>
    </section>

    <section>
      <h2>Where does it run?</h2>
      <p>PyXL runs on a <strong>Zynq-7000 FPGA</strong> (Arty-Z7-20 dev board). The PyXL core runs at 100MHz. The ARM CPU on the board handles setup and memory, but the Python code itself is executed entirely in hardware.</p>
      <p>The toolchain is written in Python and runs on a standard development machine using unmodified CPython.</p>
    </section>

    <section>
      <h2>Wait ‚Äî what‚Äôs a GPIO?</h2>
      <p>
        GPIO stands for <strong>General Purpose Input/Output</strong>. It‚Äôs a simple hardware pin that software can read from or write to ‚Äî a way to control the outside world: LEDs, buttons, sensors, motors, and more.
      </p>
      <p>
        In MicroPython (like on the PyBoard), your Python code interacts with C functions that handle hardware registers underneath. It‚Äôs reasonably fast, but still goes through a Python VM and a software stack before reaching the pin.
      </p>
      <p>
        PyXL skips all of that. The Python bytecode is executed directly in hardware, and GPIO access is physically wired to the processor ‚Äî no interpreter, no function call, just native hardware execution.
      </p>
    </section>    

    <section>
      <h2>Now for the GPIO test. What was the video?</h2>
      <p>I have connected two pins in the Arty board with a jumper cable.</p>
      <p>Then, I wrote a python program that measures the time from when GPIO pin1 is set to 1, until 1 is measured on the other pin connected to it.</p>
      <p>The video shows a comparison between PyXL and PyBoard that runs MicroPython VM.<br>Let's focus on how PyXL does its thing.</p>

      <h2>The program</h2>
      <pre>from compiler.intrinsics import *


def main():
    pyxl_write_gpio_pin1(0)              # Reset output pin

    c1 = pyxl_get_cycle_counter()        # Cycle counter (100 MHz)

    pyxl_write_gpio_pin1(1)              # Set output pin
    while pyxl_read_gpio_pin2() == 0:    # Wait until input pin is set to 1
        continue

    c2 = pyxl_get_cycle_counter()        # Cycle counter (100 MHz)

    return (c2 - c1) * 10                # Return result in nano seconds (each cycle is 10 ns)
          </pre>

      <p>As you can see, this is a regular python program, but it also has some unfamiliar function calls.<br>
        These functions originate from compiler.intrinsics module.</p>
        <pre>pyxl_get_cycle_counter()</pre>
        <p>Gets the current cycle counter from the PyXL CPU. This counter advances by 1 on every tick</p>

        <pre>pyxl_write_gpio_pin1()</pre>
        <p>Writes a value (0/1) to a GPIO pin. These are low-level intrinsics exposed by the compiler ‚Äî currently hardcoded for this test, but will evolve into a more general pyxl_gpio_write(pin, value) API.</p>

        <pre>pyxl_read_gpio_pin2()</pre>
        <p>Reads the value from Pin2. Same API comment is true here as well.</p>
      
    </section>

    <section>
      <h2>Wait, why isn't there a call to the main function?</h2>
      <p>The main function is just defined, but not invoked. why?</p>
      <p>At current stage, PyXL calls the main function automatically when it runs a program.</p>
      <p>This is just a convenience feature (for dev) and will change in the future.</p>
    </section>
    
    <section>
      <h2>So how does it work?</h2>
      <p>As described above, the program is compiled to a CPython Bytecode and then compiled again to PyXL assembly. It is then linked together and a binary is generated.</p>
      <p>This binary is sent via network to the Arty board, where an ARM CPU gets the application, copies it to a shared memory with the PyXL HW and starts running it.</p>
      <p>A typical Python runtime (CPython or MicroPython in case of the PyBoard or Python for embedded in general) has a big overhead that is caused by running the ByteCode on a Software based VM. In PyXL there's no VM, the HW does everything.</p>
      <p>As for reading and writing the GPIO - The GPIO headers are directly mapped to FPGA pins, and physically wired into PyXL's core top-level module. Think of it as the main function of the HW.</p>
      <p>In this test, all code and data reside in predictable low-latency memory, ensuring deterministic behavior (real-time behavior). This means that for the same input, it'll take the exact same time to run.
      </p>
    </section>
      
    <section>
      <h2>So how do these platforms compare?</h2>
      <div>
        <h3>GPIO Roundtrip Latency (ns). Lower is better.</h3>
        
        
        
        <div>
          <p><span>MicroPython (PyBoard)</span><span>14,741ns</span>
          </p>
          
        </div>
      </div>

      <p>As you can see, PyXL is 30x faster than PyBoard.</p>
      <p>Also, remember that PyXL's clock speed is lower than PyBoard.</p>
      <p>The reason for not operating at a higher clock is that PyXL is prototyped on an FPGA and PyBoard has an ASIC. But the gist of it is that it's not a limitation of PyXL and higher clocks can be achieved.</p>
      <p>Since a higher clock is achievable, we need to compare apples-to-apples and normalize the clock frequencies.<br>
      That brings PyXL‚Äôs normalized advantage to ~50x over PyBoard.</p>
    </section>

    <section>
      <h2>Why don't both tests run the exact same code?</h2>
      <p>To the keen eyes among you, you may have noticed in the video that the PyBoard code and the PyXL code aren't the same.</p>
      <p>Both are Python, this is obvious, but there're two main differences:</p>
      <p>1. API calls for measuring time and reading/writing GPIO pins. The reason being that this is not CPython that runs on a host, but systems that are aware of the underlying hardware, bringing their own runtime environment with them.<br>
      Each platform has its own hardware access API calls, but regular python code is still portable between the platforms (as long as they support whatever Python feature you want to use).</p>
      <p>2. The PyBoard runs the test in a tight loop to compensate for jitter and cold cache.<br>
      MicroPython running on the PyBoard has runtime jitter. The results are between 14-25 micro seconds in my test. So I wanted to compare to PyBoard after significant warm up to show how much better PyXL is even in such case.<br>
      PyXL, by contrast, is fully deterministic. So long as the jumper is connected, PyXL returns a consistent 480ns every time.<br>
      This makes PyXL suitable for real-time use cases.
    </p>
    </section>

    <section>
      <h2>Big deal, who cares about making a signal go a bit faster?</h2>
      <p>
        This isn‚Äôt just a performance boost ‚Äî it's an unlock. PyXL brings a level of responsiveness and determinism that Python has never had in embedded or real-time contexts.
      </p>
      <p>
        Python VMs ‚Äî even those designed for microcontrollers ‚Äî are still built around software interpreters. That introduces overhead and complexity between your code and the hardware.
      </p>
      <p>
        PyXL removes this barrier. Your Python code is executed directly in hardware. GPIO access is physical. Control flow is predictable. Execution is tight and consistent by design.
      </p>
      <p>With this unlock, PyXL can be further developed and adapted to these use cases:</p>
      <ul>
        <li>üïπ Real-time control systems in pure Python</li>
        <li>üß† ML inference + sensor response loops with hard timing budgets</li>
        <li>ü§ñ Robotics tasks like motor feedback and sensor fusion with cycle-level precision</li>
        <li>üîß Embedded industrial systems where timing and reliability matter</li>
      </ul>
      <p>
        With PyXL, you can write performance-critical code once ‚Äî in Python ‚Äî and ship it as-is.
      </p>
    </section>

    <section>
      <h2>Sounds interesting? Let's talk.</h2>
      <a href="https://www.runpyxl.com/#contact">Reach out if you're curious.</a>
    </section>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Deep dive into how DOS games do copy protection by making themselves unwinnable (131 pts)]]></title>
            <link>https://mrwint.github.io/winter/writeup/writeup.html</link>
            <guid>43820076</guid>
            <pubDate>Mon, 28 Apr 2025 11:29:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mrwint.github.io/winter/writeup/writeup.html">https://mrwint.github.io/winter/writeup/writeup.html</a>, See on <a href="https://news.ycombinator.com/item?id=43820076">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <p>I‚Äôve recently rediscovered an old game called ‚ÄúThe Games: Winter Challenge‚Äù, a Winter Olympics sports game developed by MindSpan and published by Accolade in 1991 for DOS and Sega Genesis.
I had the DOS version of the game when growing up, so when I was randomly reminded of its existence, I was driven by a mix of nostaliga and curiosity to dig it up again.</p>

<p><img src="https://mrwint.github.io/winter/writeup/winter_titlescreen.webp" alt="Animation of the game's title screen"></p>

<p>Having grown up to become a computer scientist, I was not as much insterested in replaying it (though hearing the iconic music again was fun), but much more how it worked under the hood.
I had spent hours as a kid playing especially the ski jumping event, trying to reach the elusive mark of 100 meters, without success, and was determined to find out not only whether it was possible to achieve, but also what the theoretical optimum would be.
Conveniently, the game features a replay system that allows you to save and rewatch past attempts, which opens up great opportunities for creating a TAS and manufacture a perfect replay file, and push the game to its limts.</p>

<p>My initial plan of attack was simple: Find a copy of the game, crack it open in Ghidra, disassemble it to find out how the ski jumping works, and optimize based on the discovered mechanics.
As it turned out, each step of this plan was way more involved than anticipated, and created more questions along the way that demanded answers, opening up a rabbit hole of early 90s video game development intricasies.
This write-up will take you along on this ride of discovery, learning about how DOS-based programs worked, how video video game developers worked around the hardware limitations, how early copy protection worked, and how GOG sells you a broken version of the game (as of March 2025).</p>

<h2 id="taking-stock---version-chaos-and-copy-protection-circumvention">Taking stock - version chaos and copy protection circumvention</h2>

<p>The game has had multiple releases, including the original release in 1991, two bundle releases with its successor ‚ÄúSummer Challenge‚Äù in 1992 (Europe) and 1996 (US), and a GOG release of the bundle in 2020, based on DOS emulation through <a href="https://www.dosbox.com/">DOSBox</a>.
While the original floppy disks from my childhood are likely buried somewhere, they are of limited use today for lack of a floppy drive to read them with, so I searched the internet for the game.
Acquiring these different versions wasn‚Äôt too difficult thanks to the Internet Archive hosting various versions of the original media, and of course purchasing it from GOG.</p>

<p>The original game used a code wheel for copy protection.
Code wheels were a typical copy protection of the time: They are a physical set of disks sliding against each other, which you got together with the floppy disks containing the game.
At startup, the game asks you to turn them in a specific configuration, which reveals a code you need to enter into the game for it to work.
For those who are not old like me and have never seen a code wheel before, there is an <a href="https://www.oldgames.sk/codewheel/games-winter-challenge">interactive online version</a> of this game‚Äôs code wheel available.</p>

<p>The original 1991 release as expected asks for this code when you try to play any discipline, and boots you out if you answer incorrectly twice.</p>

<blockquote>
  <p><strong>Side investigation 1:</strong> how is the code wheel check implemented?</p>
</blockquote>

<p><img src="https://mrwint.github.io/winter/writeup/winter_code_wheel_input.png" alt="Screen shot of the code wheel input in-game"></p>

<p>The GOG version does not ask you for the code and lets you play without it, so presumably they have removed the copy protection from it instead of distributing the code wheel.
Where it get very insteresting is that multiple people are complaining in the discussion of this game on GOG that the game is ‚Äúimproperly cracked‚Äù and doesn‚Äôt work correctly as a result.
The descriptions of some of the behaviors, like that you can‚Äôt land a ski jump beyond a certain distance, or that you always crash in the last lap of speed skating, actually resonated with my recollection of playing the game as a kid, which means either we had a poorly cracked version back then as well, or that this is not related to copy protection at all and the game is just buggy.</p>

<blockquote>
  <p><strong>Side investigation 2:</strong> Are there hidden copy protection measures which affect gameplay?</p>
</blockquote>

<p>The 1996 US release actually comes with a separate crack, presumably officially sanctioned: Next to the main <code>WINTER.EXE</code>, it has a <code>WINTER.COM</code>, only 879 bytes in size, which when executed removes the code wheel check from the game, otherwise the game still asks for it.</p>

<p>But the version confusion doesn‚Äôt end there.
While searching for different versions, I also found other versions of the game, often in the form of online playable images loaded in DOSBox in the browser.
None of these needed a code wheel, and while some were based on the 1996 US release, others used entirely different cracks, created by different release groups of the early 90s.</p>

<p>And to complete the mess, the original game actually offers an option to install the game to disk instead of playing it from floppy, including its very own set of mysteries.
The installation does not work like you might expect, just copying files from floppy to disk; instead, it actually creates a whole new <code>WINTER.EXE</code> executable each time.
During installation, you can choose different options, including which graphics modes to support, and a ‚Äúfast loading‚Äù mode which according to the manual makes the game load faster at the cost of additional hard drive space, and each combination of the options creates a different executable for you.</p>

<blockquote>
  <p><strong>Side investigaton 3:</strong> How are these different versions of the executable being created, and how do they differ?</p>
</blockquote>

<p>So taking stock and comparing all different acquired versions, there are a lot of distinct binaries:</p>

<ol>
  <li>The original floppy version of the game</li>
  <li>Six different versions of the game when installed to hard disk, for each combination of ‚Äúfast loading‚Äù and either or both of the EGA and VGA graphics modes</li>
  <li>The GOG version of the game, which is based on the installed VGA+EGA fast-load version with individual bytes modified</li>
  <li>A cracked binary of unknown origin, which is based on the installed VGA fast-load version with individual bytes modified</li>
</ol>

<p>Furthermore, there are three different stand-alone cracks:</p>

<ol>
  <li>The official <code>WINTER.COM</code> crack (879 bytes) which was provided with the 1996 US release alongside an unmodified floppy version</li>
  <li>A <code>WG.COM</code> crack (366 bytes) by release group ‚ÄúThe Humble Guys‚Äù from October 17, 1991, within days after the game‚Äôs release</li>
  <li>A <code>WINTER.COM</code> crack (291 bytes) by release group ‚ÄúRazor1911‚Äù from October 17, 1991, the same day(!) as the other crack</li>
</ol>

<blockquote>
  <p><strong>Side investigation 4:</strong> How do the individual cracks work, and do they use different mechanisms?</p>
</blockquote>

<h2 id="cracking-the-binary-open---obfuscation-and-memory-constraints">Cracking the binary open - obfuscation and memory constraints</h2>

<p>So to start somewhere, I loaded up the floppy version in Ghidra, and was immediately underwhelmed. It only managed to analyze a tiny fraction of the inital code, with most of it remaining binary blobs.
Opening the same file in IDA revealed much of the same picture, but IDA also provided accompanying warnings: It thinks the binary may be packed, and there are lots of unused bytes beyond the end of the code.
I figured that the binary must be packed or obfuscated in some way, and the tiny bit of initial code is the routine to unpack the rest of the binary.</p>

<p>So I began reverse-engineering the unpacking routine, and discovered a suspicious string in the binary, nestled between the assembly: <strong>*FAB*</strong>.</p>

<p><img src="https://mrwint.github.io/winter/writeup/FAB.png" alt="A calling card left by Fabrice Bellard"></p>

<p>As it turns out, ‚ÄúFAB‚Äù stands for <a href="https://en.wikipedia.org/wiki/Fabrice_Bellard">Fabrice Bellard</a>, who next to being the original developer of widely used programs such as FFmpeg and QEMU, is also the creator of an executable compression utility called <a href="https://bellard.org/lzexe.html">LZEXE</a>, developed in 1990.
Luckily, the inner workings of LZEXE are widely documented and understood.
I won‚Äôt go into the details of how the compression works here, there are great existing write-ups by <a href="https://cosmodoc.org/topics/lzexe/">Scott Smitelli</a> and <a href="https://www.lodsb.com/reversing-lz91-from-commander-keen">Sam Russell</a> if you want to dig deeper.
We just want to unpack the binary to get to the good stuff, and there are plenty existing unpacking utilities available, including UNLZEXE by Mitugu Kurizono from the same era.
The packing and unpacking is its own arms race microcosm, with protectors to prevent the unpacking, and more sophisticated unpackers to do it anyway, but luckily no additional unpacking protections were employed for this game.</p>

<p>The resulting unpacked binary has two surprises right off the bat: Firstly it is only 168kB in size, much smaller than the original executable despite extraction presumably making it grow in size, and secondly the result of unpacking it is identical across all different versions of the game.
This gives us a hint for how the game is structured: It contains a chunk of business logic, which is what we have unpacked and is the same across versions, and then it contains some resrouces, like sprites and sounds, which are included into the executable file and loaded out of it at runtime.
This assumption is supported by the fact that the extracted binary actually still works properly as long as it is placed beside the original <code>WINTER.EXE</code> binary to load the assets out of.</p>

<p>But it also is somewhat surprising for the two cracked versions of the binary, I would have expected those to contain modified business logic in order to facilitate skipping the code wheel check.
The answer to that mystery becomes apparent quickly after opening the new extracted binary in a disassembler.
By looking around some, we find suspicious interrupt calls to <code>int 3fh</code>.</p>

<p><img src="https://mrwint.github.io/winter/writeup/int3fh.png" alt="Instances of a mysterious interrupt 3fh"></p>

<blockquote>
  <h3 id="side-bar-interrupts">Side bar: Interrupts</h3>

  <p><a href="https://en.wikipedia.org/wiki/Interrupt">Interrupts</a> are the main way DOS programs used to communicate with the operating system, analogous to today‚Äôs <a href="https://en.wikipedia.org/wiki/System_call">syscalls</a>.
Whenever a program wants to interact with something outside it‚Äôs own code, it would call an interrupt and ask DOS to perform that task for it, handing back control to the operating system temporarily, and resuming when it is complete.
Anything from printing text to the screen, reading and writing files from disk, to allocating heap memory, is done through the main interrupt DOS provides, <code>int 21h</code>.
Which action is requested and any arguments are determined by the value of the CPU registers when the interrupt is called.
Other interrupts exist like <code>int 33h</code> for mouse interactions, but notably <code>int 3fh</code> is not one of the DOS-provided interrupts.
Under the hood, the routing of interrupts is handled by an <a href="https://en.wikipedia.org/wiki/Interrupt_vector_table">interrupt vector table</a>, which contain for each interrupt the address of the routine that is executed from when the interrupt is called.
Programs can modify this table (using an interrupt) to add their own custom interrupts, and <code>int 3fh</code> is likely used-defined this way.</p>
</blockquote>

<p>IDA provides a helpful comment to these, that this interrupt is typically used for calling an ‚ÄúOverlay manager‚Äù.</p>

<blockquote>
  <h3 id="side-bar-overlays">Side bar: Overlays</h3>

  <p><a href="https://en.wikipedia.org/wiki/Overlay_(programming)">Overlaying</a> is a technique for loading additional pieces of code at runtime, where multiple such pieces, called overlays, can be swapped out in the same place in memory.
This was useful in programs of the time to save on RAM usage: DOS only allowed a maximum of 640kB of memory to be used by a program (aka <a href="https://en.wikipedia.org/wiki/Conventional_memory">Conventional memory</a>), and large applications might themselves already be too big to fit all their code into that limit, not even considering any data.
Overlays are used to circumvent this limitation: By breaking the program code up into multiple overlays, the program only needs to load whatever overlay is needed for the current operation into memory.
Other overlays are loaded from disk as they are needed, replacing the previous overlay, allowing the program to have complex functionality with a small memory footprint.
Loading and managing overlays was the responsibility of an overlay manager, a library which kept track of which overlays are needed when and loaded and unloaded them accordingly.</p>
</blockquote>

<p>As it turns out, the game was written in C and compiled with the Microsoft C compiler version 6, as hinted by an embedded string <code>MS Run-Time Library - Copyright (c) 1990, Microsoft Corp</code> in the binary.
Perusing the compiler‚Äôs manual, the linker of that compiler did natively support overlays and would install its own overlay manager as <code>int 3fh</code> by default, so this was my first suspicion for how this structure was created.</p>

<p>Overall, this was not good news.
It means that the unpacked binary is in fact not all the business logic that exists, and there are more pieces of code, presumably in the resources packaged with the executable.
Disassemblers don‚Äôt understand these overlays, can‚Äôt detect them or automatically disassemble them, so the work to understand the business logic will be more manual than planned.
In order to progress further, we need to find and extract all these overlays, to get a complete picture of the game‚Äôs code.</p>

<p>By finding where the interrupt 3fh is installed at the start of the program, we can identfy the overlay manager routine which is called each time an overlay is needed.</p>

<p><img src="https://mrwint.github.io/winter/writeup/int3f_initialization.png" alt="Installing the int3fh"></p>

<p>Based on documentation for how Microsoft‚Äôs overlay manager worked, each interrupt call is followed by 3 bytes, one byte for the index number of the overlay that is needed, and two for the 16-bit address within that overlay.
Calling the interrupt then works like a function call: The overlay is loaded, the function at the given address is invoked, and afterwards the control flow returns directly after the interrupt call.
In fact the interrupts are literal replacements for function calls: a the 5 bytes typically needed for a far call instruction (1 byte opcode, 2 bytes address offset, 2 bytes address segment) are replaced by the Linker with the 5 bytes for the interrupt (2 bytes opcode, 1 byte overlay index, 2 bytes address offset) where needed.</p>

<p>This is where the good news ended though.
According to the documentation, each overlay should be appended to the main program, including its own <a href="https://en.wikipedia.org/wiki/DOS_MZ_executable">MZ header</a>, but this is not what we find in our binary.
Worse still, when using DOSBox‚Äô debugger to step through an invocation of the interrupt, the code that was loaded is nowhere to be found in the binary file.
Also, unlike typical overlays, they are not actually occupying the same space in memory, instead new memory is dynamically allocated for each overlay, and deallocated after use.
That is useful because it allows multiple overlays to be loaded at the same time, but also means this game is not actually using the overlay mechanism from Microsoft C, instead it uses what appears to be a bespoke overlay management implementation.</p>



<p>Statically reverse-engineering the overlay manager routine turned out to be a very time-consuming endeavor, but luckily there were still some hints that can help us take some shortcuts.
The DOS emulator <a href="https://dosbox-x.com/">DOSBox-X</a> is a fork of DOSBox, and has additional useful debugging features, including logging of all file IO, and all <code>int 21h</code> interrupts.
Watching those while the game starts up reveals that the game is seeking through the binary to specific locations, which happen to be directly after the bytes of the main program, and then reading many chunks of 22 bytes each.</p>

<div><pre><code>...
4201235 DEBUG FILES:Seeking to 82944 bytes from position type (0) in WINTER.EXE 
4201290 DEBUG FILES:Reading 2 bytes from WINTER.EXE 
4201353 DEBUG FILES:Seeking to 82495 bytes from position type (0) in WINTER.EXE 
4201408 DEBUG FILES:Reading 2 bytes from WINTER.EXE 
4201475 DEBUG FILES:Seeking to 82497 bytes from position type (0) in WINTER.EXE 
4201530 DEBUG FILES:Reading 2 bytes from WINTER.EXE 
4204681 DEBUG FILES:Seeking to 82499 bytes from position type (0) in WINTER.EXE 
4204735 DEBUG FILES:Reading 22 bytes from WINTER.EXE 
4204855 DEBUG FILES:Reading 22 bytes from WINTER.EXE 
4204975 DEBUG FILES:Reading 22 bytes from WINTER.EXE 
4205095 DEBUG FILES:Reading 22 bytes from WINTER.EXE 
4205215 DEBUG FILES:Reading 22 bytes from WINTER.EXE 
4205335 DEBUG FILES:Reading 22 bytes from WINTER.EXE 
4205455 DEBUG FILES:Reading 22 bytes from WINTER.EXE 
...
</code></pre></div>

<p>These are likely the start of the resources, and when checking the binary at that location we find that the secion begins with two bytes spelling out <code>MB</code>, similar to how the executables themselves start with an <code>MZ</code> magic number.
Looking for this magic number in the disassembly brings us directly to the routine which parses out the structure of the embedded resources.</p>

<div><pre><code>seg000:6D83                 sub     ax, ax                                 ; sets ax to 0
seg000:6D85                 push    ax                                     ; push argument 3 for fseek: 0 = seek relative to start of file
seg000:6D86                 push    winter_exe_overlay_start_index_hi      ; push argument 2 for fseek: the offset to seek to
seg000:6D8A                 push    winter_exe_overlay_start_index_lo      ; it's a 4 byte value and pushed in two halves
seg000:6D8E                 push    winter_exe_file_handle                 ; push argument 1 for fseek: the file handle of WINTER.EXE which was opened earlier
seg000:6D92                 call    fseek                                  ; seek to the start of the resource section in the WINTER.EXE file
seg000:6D97                 add     sp, 8                                  ; clear the arguments for fseek from the stack again
seg000:6D9A                 push    cs                                     ; the function read_2_bytes_from_winter_exe is a far function, but we're making in near call, so we need to push the segment onto the stack manually
seg000:6D9B                 call    near ptr read_2_bytes_from_winter_exe  ; read the next two bytes from the file
seg000:6D9E                 cmp     ax, 424Dh                              ; check if if contains the "MB" magic number
seg000:6DA1                 jz      short mb_marker_found                  ; jump if found
seg000:6DA3                 push    winter_exe_file_handle                 ; if not found, close file and return
seg000:6DA7                 call    fclose
seg000:6DAC                 add     sp, 2
seg000:6DAF                 mov     winter_exe_file_handle, 0
seg000:6DB5                 jmp     short done
seg000:6DB5 ; ---------------------------------------------------------------------------
seg000:6DB8 mb_marker_found:
seg000:6DB8                 sub     ax, ax                                 ; sets ax to 0
seg000:6DBA                 push    ax                                     ; push argument 3 for fseek: 0 = seek relative to start of file
seg000:6DBB                 mov     ax, winter_exe_overlay_start_index_lo  ; load overlay start index and add 2 to it
seg000:6DBE                 mov     dx, winter_exe_overlay_start_index_hi
seg000:6DC2                 add     ax, 2
seg000:6DC5                 adc     dx, 0
seg000:6DC8                 push    dx                                     ; push argument 2 for fseek: the offset to seek to
seg000:6DC9                 push    ax
seg000:6DCA                 push    winter_exe_file_handle                 ; push argument 1 for fseek: the file handle of WINTER.EXE which was opened earlier
seg000:6DCE                 call    fseek                                  ; seek to the next two bytes after the MB marker
seg000:6DD3                 add     sp, 8                                  ; clear the arguments for fseek from the stack again
seg000:6DD6                 push    cs
seg000:6DD7                 call    near ptr read_2_bytes_from_winter_exe  ; read the next two bytes from the file
seg000:6DDA                 mov     resource_chunk_count, ax               ; next two bytes indicate the number of resources
seg000:6DDD done:
....
</code></pre></div>

<blockquote>
  <h3 id="sidebar-16-bit-architecture-and-segments">Sidebar: 16-bit architecture and segments</h3>

  <p>This program, and all DOS programs at the time, were built for a 16-bit architecture, compared to the 64-bit architecture today‚Äôs computers are using.
What that means is that all registers in the CPU can hold only 16-bit values, including any pointers.
Since 16-bit registers can only have 2^16 = 65536 different values, it can only address 64kB of memory.
This was too little, even back then, so in order to be able to address more memory, pointers typically consisted of 2 parts, a segment and an offset.</p>

  <p><a href="https://en.wikipedia.org/wiki/Memory_segmentation">Segments</a> are chunks of memory, at most 64kB in size, which were typically assigned different roles: there are typically one or multiple code segments holding the program code, a data segment holding the work memory for any data the program stores, and a stack segment to hold the values which are put on the stack.
Those segments can be considered independent parts of the memory, and to interact with something from another segment, you would need a far pointer, consisting of both a segment and offset within that segment, whereas for referencing something within a segment a near pointer using only the offset is sufficient.</p>

  <p>Under the hood, the memory is still one linear chunk, and the resulting memory address of a far pointer is simply <code>segment * 16 + offset</code>.
That means segments can technically overlap with different segment-offset pairs pointing to the same physical address, but conventionally they were chosen to be distinct blocks.</p>
</blockquote>

<p>The resources are all tabulated in a simple header structure, in entries of 22 bytes each.
Each entry contains two 4-byte numbers, indicating the length of the data and the offset in the file where they are located.
The remaining bytes contains a 0-terminated string spelling out the name of the resource (any byte after the 0 terminator is garbage).
However, this name is obfuscated by adding <code>0x60</code> to all bytes, so they don‚Äôt show up in any strings analysis of the binary.
By de-obfuscating the names, we can learn that these additional binary blobs contain both the assets like images, meshes, music and SFX files, and the code overlays in the form of pairs of files with extensions <code>COD</code> and <code>REL</code>.</p>

<div><pre><code>4D 42                                                                  ; "MB" = magic number
F2 00                                                                  ; 242 = number of resources
4A 5C 00 00   10 57 01 00   B4 A9 B4 AC A5 8E AD B3 A8 00  (81 9F A2 01)  ; Resource TITLE.MSH     start 15710  end 1b35a  length 5c4a
26 24 00 00   5A B3 01 00   B4 A9 B4 AC A5 8E AD A7 B3 00  (81 9F A2 01)  ; Resource TITLE.MGS     start 1b35a  end 1d780  length 2426
9E D4 00 00   80 D7 01 00   B4 A9 B4 AC A5 8E AD B0 A9 00  (81 9F A2 01)  ; Resource TITLE.MPI     start 1d780  end 2ac1e  length d49e
00 03 00 00   1E AC 02 00   B4 A9 B4 AC A5 B0 A1 AC 8E A2 A9 AE 00  (01)  ; Resource TITLEPAL.BIN  start 2ac1e  end 2af1e  length 300
2E 4A 00 00   1E AF 02 00   B4 A9 B4 AC A5 92 8E AD B3 A8 00  (AE 00 01)  ; Resource TITLE2.MSH    start 2af1e  end 2f94c  length 4a2e
56 1B 00 00   4C F9 02 00   B4 A9 B4 AC A5 92 8E AD A7 B3 00  (AE 00 01)  ; Resource TITLE2.MGS    start 2f94c  end 314a2  length 1b56
44 CC 00 00   A2 14 03 00   A2 A1 A3 AB A4 B2 AF B0 8E AD B0 A9 00  (01)  ; Resource BACKDROP.MPI  start 314a2  end 3e0e6  length cc44
92 65 00 00   E6 E0 03 00   A9 B3 8E AD B3 A8 00  (B0 8E AD B0 A9 00 01)  ; Resource IS.MSH        start 3e0e6  end 44678  length 6592
CC 18 00 00   78 46 04 00   A9 B3 8E AD A7 B3 00  (B0 8E AD B0 A9 00 01)  ; Resource IS.MGS        start 44678  end 45f44  length 18cc
D8 88 00 00   44 5F 04 00   B4 A1 BF AF B0 A5 AE 8E AD A7 B3 00  (00 01)  ; Resource TA_OPEN.MGS   start 45f44  end 4e81c  length 88d8
D8 73 00 00   1C E8 04 00   B4 A1 BF AF B0 A5 AE 8E AD B3 A8 00  (00 01)  ; Resource TA_OPEN.MSH   start 4e81c  end 55bf4  length 73d8
00 07 00 00   F4 5B 05 00   A5 B6 B4 A1 B7 A1 B2 A4 8E AD A7 B3 00  (01)  ; Resource EVTAWARD.MGS  start 55bf4  end 562f4  length 700
22 24 00 00   F4 62 05 00   A5 B6 B4 A1 B7 A1 B2 A4 8E AD B3 A8 00  (01)  ; Resource EVTAWARD.MSH  start 562f4  end 58716  length 2422
CC 56 00 00   16 87 05 00   A9 B3 A1 B5 B8 8E AD B3 A8 00  (B3 A8 00 01)  ; Resource ISAUX.MSH     start 58716  end 5dde2  length 56cc
32 25 00 00   E2 DD 05 00   A9 B3 A1 B5 B8 8E AD A7 B3 00  (B3 A8 00 01)  ; Resource ISAUX.MGS     start 5dde2  end 60314  length 2532
...
64 27 00 00   96 AF 12 00   AF B6 AC 91 8E A3 AF A4 00  (B3 00 AE 00 01)  ; Resource OVL1.COD      start 12af96 end 12d6fa length 2764
6E 03 00 00   FA D6 12 00   AF B6 AC 91 8E B2 A5 AC 00  (B3 00 AE 00 01)  ; Resource OVL1.REL      start 12d6fa end 12da68 length 36e
35 02 00 00   68 DA 12 00   AF B6 AC 91 95 8E B0 A3 AF 00  (00 AE 00 01)  ; Resource OVL15.PCO     start 12da68 end 12dc9d length 235
11 00 00 00   9E DC 12 00   AF B6 AC 91 95 8E B0 B2 A5 00  (00 AE 00 01)  ; Resource OVL15.PRE     start 12dc9e end 12dcaf length 11
...
</code></pre></div>

<p>One fun pattern to observe is that the garbage data after the file names are leftovers from the previous name, suggesting that when the entries were written, it used the same buffer for all names in order.</p>

<p>Just from the names, we can assume that the <code>COD</code> files contain the actual machine code, and the <code>REL</code> files contain some relocation data.</p>

<blockquote>
  

  <p><a href="https://en.wikipedia.org/wiki/Relocation_(computing)">Relocation</a> is a concept that allows code to become location-independent: When a program is loaded into memory, it may not be loaded at the same address every time.
However, parts of the program refer to other parts by address (e.g. a function call), and in order for those to continue to work regardless of the actual location in memory, they need to be modified.
To achieve this, all addresses are written into the binary as if the program is located at memory address 0, and all the places which correspond to segment values are put in a long list called the relocation table.
For the main program, this is handled by DOS: the MZ header of the executable contains a relocation table with addresses in the code that need to be updated.
After copying the program into memory at some offset, DOS goes through this list and adds the chosen offset to each of the addresses it contains, making all far pointers point to the correct locations again.</p>

  <p>When loading these code overlays, the same problem of relocation will exist, and the <code>REL</code> files likely contain the needed information to facilitate their proper relocation.</p>
</blockquote>

<p>When looking at the different versions of the installed game, we can see that the resources they are bundled with are indeed different.
This finally resolves the first of our side mysteries:</p>

<blockquote>
  <p><strong>Side investigaton 3 complete!</strong>
Depending on the chosen graphics mode, more or fewer assets are included, and each asset can come in two variants, the uncompressed version (e.g. <code>TITLE.MGS</code>), and a compressed version (e.g. <code>TITLE.PMG</code>), indicated by prepending a <code>P</code> to its extension.
The ‚Äúfast loading‚Äù versions of the installation bundle the uncompressed resources, while the floppy version contains the packed versions, providing a trade-off between speed of loading the assets at runtime and the size they take up on disk.</p>
</blockquote>

<p>It‚Äôs difficult to imagine nowadays, but hard drive space was a serious concern back then, and the additional kilobytes the unpacked asstes take up could matter a lot.</p>

<p>However, it seems that even in the fast-loading versions, not all assets are actually uncompressed.
Specifically some of the code overlays stay packed even there, presumably as a means to keep them obfuscated even when fast loading is selected during installation.
However, through disassembly we already know where the resources are loaded now, so using a debugger with appropriate breakpoints, we can easily dump the uncompressed versions for these as well out of the program memory, without needing to understand how the compression of the resources actually works.
(If you are still curious how the compression works, I did end up disassembling it to find that it‚Äôs a surprisingly sophisticated custom variant of <a href="https://en.wikipedia.org/wiki/Deflate">DEFLATE</a> compression.
You can find a JS re-implementation of it <a href="https://github.com/MrWint/winter/blob/70da5ba230a2161955d2fb9094f3d47bdea46026/patcher/patcher.js#L79">here</a>.)</p>

<p>Conveniently, the game also provides us with a fairly easy way to check whether we extracted all the resources correctly.
It turns out the game is more flexible with where it tries to load the resources from, and not only checks the embedded resources in the binary, but also checks for individual files of the same name, in the root folder or a subfolder called ‚ÄúART‚Äù.
As long as the resource can be found in any of these places, it will use it.
So by writing a program to extract all these recources into their own files and placing them in the ART subfolder, and then manually modifying the binary to delete all embedded resources, we can make the game use our extracted assets instead.
Doing this and running the game, it is indeed still working, confirming that our extracted resources are accurate and we‚Äôre not missing anything else coming from the binary file.</p>

<h2 id="combining-all-overlays">Combining all overlays</h2>

<p>So now we finally have all the code comprising the business logic of the game, but they are spread out over 17 files, the main executable and 16 overlays, making them very annoying to work with.
What we would like is one single binary with all the code in it, making it much easier to analyze.
To achieve this, we can try to embed the overlays into the binary, essentially undoing the overlaying and having all of them loaded at once side-by-side.
Even more, doing this allows us to undo the replacement of the function calls with overlay interrupts, eliminating <code>int 3fh</code> altogether and making the automatic analysis by common disassemblers much more accurate.
Available RAM is obviously not a concern anymore today, but we will still need to stay within the 640kB limit DOS imposes.
Luckily, all overlays combined are only around 100kB in size, so together with the main binary of 168kB it should still leave enough room to load the assets as needed, especially since it won‚Äôt need to reserve heap space anymore loading the overlays.</p>

<p>Actually fusing the binaries together is not that easy unfortunately.
My first idea of just concatenating all overlays onto the main binary in memory and baking in the relocations to make them all connect sadly wouldn‚Äôt work, because of the stack and how dynamic memory allocations work.
The main binary is set up in a way where all code segments come first, then the data segment holding all the work memory the program uses, and lastly the stack segment.
Trying to append the overlays to this will always create some issues: Adding them before the data segment would mean we need to re-write all references to it throughout the code, which are hard to identify because the line between the data and stack areas are fuzzy and the code might do some pointer arithmetic that relies on the relative positions of the segments.
Adding the overlays after data segment by moving the stack back is also impossible, because the game does some weird shenanigans where it sets the stack segment to equal the data segment, adjusting the stack pointer accordingly to compensate.
This is probably useful as an invariant for optimization, but also means that the data and stack segments need to be close together in memory to allow that.
And finally, placing it after the stack, where they are typically loaded using the overlay manager, has problems as well because it would conflict with heap allocations.</p>

<blockquote>
  

  <p>Memory management worked completely differently back in the DOS days compared to now.
While modern operating systems all work with <a href="https://en.wikipedia.org/wiki/Virtual_memory">virtual memory</a> where each program has its own address space completely to itself, and the operating system translates them to the physical RAM addresses, DOS programs ran in what is called 16-bit <a href="https://en.wikipedia.org/wiki/Real_mode">Real Mode</a>, which uses the actual physical addresses directly.
That means programs had direct control over the entire RAM of the system, and could just read and write to it as they pleased.
This worked, mostly because you could only run one DOS program at a time anyway, so they didn‚Äôt need to share memory with others.</p>

  <p>So allocating memory really didn‚Äôt mean much since it was all yours anyway, and programs typically started out with ‚Äúowning‚Äù the entire memory space.
DOS still provided an allocator, but in order to use it your program first needed to deallocate some of the memory space and give it back to DOS, so that new blocks can be allocated in this space.
This game does this, and in order to determine how much it can free up, it performs some calcuations based on the addresses it happens to be loaded into.</p>
</blockquote>

<p>So by just appending the overlays, we would interfere with the allocated memory, and while we could try to patch the program to avoid this, it may cause other unexpected side effects.</p>

<p>The solution to this conundrum, as always obvious only in hindsight, is to not add the overlays after the main program, but before it.
Since programs are created to be location-independent and can work anywhere in memory, moving it back in order to make space for the overlays can be done completely safely.
And since the overlays are normally heap allocated and can be anywhere in relation to the main program, there is no reason why that anywhere couldn‚Äôt be also before the main program.</p>

<p>To test this concept, I first created a new binary which only padded out the beginning of the binary by the needed amount without actually placing the overlays into it.
This can be done without needing to disassemble its contents at all, just using the relocation information in the MZ header to identify all the places where addresses need to be adjusted, and updating the header information to push the segments backwards.
The resulting binary still works perfectly, proving not only that the concept works, but also that the remaining memory is sufficient for everything else the game still needs to load.</p>

<p>In a second step, we can now place all the overlay code in the newly available space, and wire it up.
For each call of the <code>int 3fh</code> interrupt, we can extract which overlay and which location in the overlay it would normally go to, and replace it with a direct <code>far call</code> to that address in the now-embedded overlays.</p>

<p>The overlays themselves also need to be adjusted using their relocation information, with a small additional caveat: within the overlays there are two types of relocations, the addresses that point back into the main program, and the addresses which point to other areas within the same overlay.
The game contains special logic to handle both cases when it loads the overlays, which we need to replicate here, by checking which area of memory an address points to before applying the relocations.</p>

<p>We also need to append all the relocation information for the overlays to the relocation table of the main program, because the new combined binary can of course still be loaded into memory at any location, so the addresses need to be adjusted accordingly.</p>

<p>What we end up with is a completely self-contained binary, which does not need to load any more overlays to work, and which doesn‚Äôt contain any overlay interrupts anymore.
Together with the extracted art assets in separate files, we now have an unpacked and unobfuscated, still perfactly playable, version of the game.</p>

<p>It‚Äôs worth noting that this was not guaranteed to actually work.
Replacing the overlay interrupts with function calls has the same behavior, but the overlay manager itself which is now sidestepped has additional side effects which could be critical for the game to work.
One notable instance of this in the game is the logic it uses to unload overlays: To detect which memory addresses to deallocate, it inspects the actual code of the program, parses the interrupt call opcodes, and extracts the information out of it in order to determine which overlay is affected.</p>

<div><pre><code>seg000:D91F maybe_unload_overlay_for_call:
seg000:D91F                 push    bp                      ; save base pointer register on the stack, to restore it later
seg000:D920                 mov     bp, sp                  ; set base pointer to current stack pointer. This means all arguments are some fixed offset from bp
seg000:D922                 les     bx, [bp+6]              ; Read the far pointer that was provided as an argument, and store it in es:bx
seg000:D925                 cmp     byte ptr es:[bx], 0CDh  ; Check if at the given address is a CD byte, which is an int instruction
seg000:D929                 jz      short unload            ; if it is any int instruction, proceed (doesn't check what interrupt it actually is)
seg000:D92B                 jmp     short skip_unloading
seg000:D92D ; ---------------------------------------------------------------------------
seg000:D92D unload:
seg000:D92D                 mov     bl, es:[bx+2]           ; Read the overlay index following the int instruction to know which overlay to unload
seg000:D931                 call    unload_overlay          ; unload the overlay
seg000:D934
seg000:D934 skip_unloading:
seg000:D934                 pop     bp                      ; restore the base pointer stored at the start of the function
seg000:D935                 retf
</code></pre></div>

<p>Luckily, the game has built-in fallbacks to skip this step if the code locations don‚Äôt actually contain an interrupt but instead a far call.
Presumably, because it was not known ahead of time which pieces of code would end up in which overlay, they couldn‚Äôt know for sure which calls would end up being interrupts instead so they needed to handle both cases.
For us this is lucky because it means that even after replacing all interrupts with function calls, the overlay management code can handle it correctly and doesn‚Äôt try to unload our baked-in overlays.</p>

<h2 id="the-anti-debugger-check---part-1-obfuscation-and-assembly-trickery">The anti-debugger check - Part 1: obfuscation and assembly trickery</h2>

<p>With all the prep work done, we can now take a look at the inner workings of the game in earnest, starting with looking at the copy protection and the claims of improperly cracked versions causing gameplay issues.
Besides the main code wheel protection, the game actually has another defense mechanism, an anti-debugger check.
That anti-debugger check consists of two parts.</p>

<p>The first and simplest one is that the game checks for the existence of known debuggers in its path.
It tries to open three files with the file names <code>NU-MEGA</code>, <code>SOFTICE1</code> and <code>TDHDEBUG</code>, and if any of these exist, the game will not let you get past the main menu.
As you might guess, these names correspond to popular DOS-based debuggers, so if it detects you are using any of these, it will refuse operation.
The names of these files is obfuscated in the code using the xor operation, similar to the resource file names, and the check is buried inbetween other code initializing the intro sequence, but by logging the file IO the program performs they are easy to spot.</p>

<div><pre><code>seg001:039C check_for_known_debuggers:
seg001:039C                 push    bp                                ; save base pointer register on the stack, to restore it later
seg001:039D                 mov     bp, sp                            ; set base pointer to current stack pointer. This means all arguments are some fixed offset from bp
seg001:039F                 sub     sp, 40h                           ; reserve additional space on the stack
seg001:03A2                 push    di                                ; save di and si registers on the stack, to restore them after the function is done
seg001:03A3                 push    si
seg001:03A4                 sub     si, si                            ; set si to 0
seg001:03A6                 cmp     obfuscatedNuMegaFileName, 0       ; check if file name exists in memory
seg001:03AB                 jz      short file_name_empty_skip        ; skip decoding if its empty
seg001:03AD decode_file_name_loop:
seg001:03AD                 mov     al, obfuscatedNuMegaFileName[si]  ; read next byte of file name
seg001:03B1                 xor     al, 0A5h                          ; de-obfuscate byte
seg001:03B3                 mov     [bp+si+40h], al                   ; store in the space created on the stack
seg001:03B6                 inc     si                                ; move to next byte
seg001:03B7                 cmp     nuMegaFileName[si], 0             ; reached end of file name yet?
seg001:03BC                 jnz     short decode_file_name_loop       ; loop if more characters available
seg001:03BE file_name_empty_skip:
seg001:03BE                 mov     [bp+si+40h], 0                    ; terminate decoded file name with 0
seg001:03C2                 mov     ax, 8000h
seg001:03C5                 push    ax                                ; argument 2 for file read function, not important here
seg001:03C6                 lea     ax, [bp+40h]
seg001:03C9                 push    ax                                ; argument 1 for file read function, pointer to decoded file name
seg001:03CA                 call    open_file_for_read                ; try to open file
seg001:03CF                 add     sp, 4                             ; remove arguments from stack again
seg001:03D2                 mov     di, ax
seg001:03D4                 cmp     di, 0FFFFh                        ; check if opening the file succeeded
seg001:03D7                 jz      short next                        ; opening failed, move on to next file name to check
seg001:03D9                 mov     detected_debugger_binary, 1       ; debugger detected, set flag
seg001:03DF                 push    di                                ; argument 1 for close file, the file handle
seg001:03E0                 call    close_file_handle                 ; close the opened file again
seg001:03E5                 add     sp, 2                             ; remove arguments from stack again
seg001:03E8 next:
...
</code></pre></div>

<p>When we‚Äôre trying to follow where this debugger check flag is used, we see it is moved around from one memory address to the next a couple of times.
Here, the game also starts throwing misdirections at us to make deciphering it harder:</p>

<div><pre><code>seg010:0000 propagate_debugger_check_1:
seg010:0000                 push    bp              ; save bp to stack, starndard preamble for a function call
seg010:0001                 mov     bp, sp          ; set base pointer to current stack pointer. This means all arguments are some fixed offset from bp
seg010:0003                 sub     sp, 8           ; make space on stack for local variables
seg010:0006                 mov     ah, 2Ch
seg010:0008                 int     21h             ; int 21h ah=2c returns the current system time
seg010:000A                 push    dx              ; argument 1: seconds and hundreds of the system time
seg010:000B                 call    process_current_time_result
seg010:000E                 add     sp, 2
seg010:0011                 mov     cx, 4A52h
seg010:0014                 mov     bx, data_segment
seg010:0017                 mov     es, bx
seg010:0019                 mov     es:debugger_check_result_4E62A, cl
...
seg010:0029 ; ---------------------------------------------------------------------------
seg010:0029 process_current_time_result:
seg010:0029                 push    bp              ; save bp to stack, starndard preamble for a function call
seg010:002A                 mov     bp, sp          ; set base pointer to current stack pointer. This means all arguments are some fixed offset from bp
seg010:002C                 mov     bx, 0Fh         ; bx = 15 (?)
seg010:002F                 mov     cx, detected_debugger_binary
seg010:0033                 mov     ax, cx
seg010:0035                 imul    bx              ; multiplies detected_debugger_binary by 15 (?)
seg010:0037                 mov     ax, [bp+4]      ; reads seconds and hundreds into ax (?)
seg010:003A                 xchg    al, ah          ; swaps seconds and hundreds part (?)
seg010:003C                 sub     bl, 3           ; bx = 12 (?)
seg010:003F                 sub     bp, 2           ; modifies the base pointer. This is very sneaky, as it fundamentally changes what the operation seg010:0054 below does.
seg010:0042                 add     al, ah          ; add seconds and hundreds part together (?)
seg010:0044                 sub     ah, ah
seg010:0046                 idiv    bx              ; divide by 12 (?)
seg010:0048                 mov     ax, segment_42
seg010:004B                 mov     es, ax
seg010:004D                 mov     es:code_wheel_flag_index_input_4A090, dx  ; this is later used as "random" input for the code wheel check
seg010:0052                 shr     bx, 1           ; bx = 6 (?)
seg010:0054                 add     [bp+4], 6       ; The magic happens here: Because of the modified bp, this doesn't modify the argument, but the return address of the function
seg010:0058                 pop     bp
seg010:0059                 retn                    ; because of the changed return address, it will skip the instructions at seg010:000E and seg010:0011 after returning!
</code></pre></div>

<p>This is a <strong>very misleading</strong> piece of code that would make any malware developer jealous.
At first glance, it appears to read the current time and process it, and then write a constant <code>4A52h</code> to register cx and later into <code>debugger_check_result_4E62A</code>.
However, the <code>process_current_time_result</code> does some weird things instead.
For one, most of the operations (I marked them with question marks) don‚Äôt actually contribute anything, they are purely there to confuse you.
The operation that actually matters and is trying to hide is the modification of the base pointer at <code>seg010:003F</code>.
This, in combination with the instruction at <code>seg010:0054</code>, modify the return address of the function, increasing it by 6.
This means instead of returning at <code>seg010:000E</code> like it should, it will instead return at <code>seg010:0014</code>, skipping setting cx to the constant value.
So the value that is actually propagated into <code>debugger_check_result_4E62A</code> is the <code>detected_debugger_binary</code> which was loaded into cx, all the other operations are just misdirection.</p>

<p>This kind of misdirection is clearly intended to make disassembly deliberately harder and stop people from reverse engineering the copy protections.
We will see more of it as we move on.</p>

<h2 id="the-anti-debugger-check---part-2-modern-computers-are-too-fast">The anti-debugger check - Part 2: Modern computers are too fast</h2>

<p>The debugger check result flag is moved around two more times:</p>

<div><pre><code>...
seg011:003C                 mov     al, es:debugger_check_result_4E62A
seg011:0040                 mov     bx, seg segment_39
seg011:0043                 mov     es, bx
seg011:0045                 mov     es:debugger_check_result_47A70, al
...
</code></pre></div>

<p>and finally</p>

<div><pre><code>...
seg000:0355                 mov     al, es:debugger_check_result_47A70
seg000:0359                 sub     ah, ah
seg000:035B                 mov     debugger_check_result, ax
...
</code></pre></div>

<p>These two moves are the second debugger check the game does, which is more technical and based on the <a href="https://en.wikipedia.org/wiki/Intel_8253">Intel 8253</a> timer chip.</p>

<p>The first move is performed inside a timer interrupt handler which the game installs, and which is triggered by the aforementioned timer chip.
Later during the initialization, the game then runs the second move of the flag to its final location, which is ultimately the one that is checked to decide whether you passed or failed.
That means that this timer interrupt is expected to be triggered at the right moment, after the initial known debugger check has been performed, but before the value is looked up later during initialization.
If the timer is triggered too early or too late with respect to the initialization, the the check won‚Äôt pass.
This check would prevent you from stepping through the initialization code, because the timer interrupt will fire too early, or emulate it in some way that doesn‚Äôt consider hardware interrupts.</p>

<p>For modern DOS emulators like DOSBox, this is not a problem and they are accurate enough to be able to pass the check easily.
The main issue arises from modern computers being <em>too fast</em>: if your emulation speed is too high, especially if you use the fast-loading version of the game, it breezes through the initialization so fast that it is done before the timer interrupt could trigger, making you fail the check.
The simple solution to this problem therefore is to slow down the emulator before starting the game.
After it is in the main menu, you can speed it up again without adverse effects.
Especially our home-cooked fully unpacked version loads so blazingly fast, that I need to slow down the emulator to a crawl in order to still pass the check.
This is because unpacking the resources from the executable is itself much slower than loading individual files, even if they are not compressed, because it needs to linearly scan through the whole resource list for every resource, whereas the (emulated) file IO takes no time at all.</p>

<div><pre><code>seg000:0D42 perform_debugger_check:
seg000:0D42                 push    bp
seg000:0D43                 mov     bp, sp
seg000:0D45                 or      ax, ax              ; ax contains debugger_check_result, check if it succeeded
seg000:0D47                 jz      short check_passed  ; if equals 0, it succeeded
seg000:0D49                 call    sub_12846           ; changes back to text mode
seg000:0D4E                 mov     ax, offset aPleaseRemove ; "Please remove your debugger before running The Games: Winter Challenge"
seg000:0D51                 push    ax
seg000:0D52                 call    println             ; prints error message to screen
seg000:0D57                 mov     sp, bp
seg000:0D59                 sub     ax, ax
seg000:0D5B                 push    ax
seg000:0D5C                 call    sub_2F8CE           ; exits game
seg000:0D61
seg000:0D61 check_passed:
seg000:0D61                 mov     sp, bp
seg000:0D63                 pop     bp
seg000:0D64                 retn
</code></pre></div>

<p>Slowing down the emulator each time to pass the check gets annoying quickly though.
Luckily, the debugger check is done in a single place, and is easily removed without any adverse effects, by modifying the conditional jump at <code>seg000:0D47</code> to be an unconditional jump instead.
We have now partially cracked the game, hurray!
That was the appetizer though, the main course is still to come and it‚Äôs a doozy.</p>

<h2 id="the-code-wheel-check---a-honey-pot-for-crackers">The code wheel check - A honey pot for crackers</h2>

<p>The code wheel protection is in principle less technical and more straight-forward: The game reads the number you enter, it then looks up what the answer should have been, and checks whether they match.
Thanks to our fully unpacked executable, finding where this check is made is as simple as finding the error message (‚ÄúThat ticket number is incorrect.  Try again.‚Äù) in the binary, and looking for references to it, places in the code where it is used.
Placing debugger breakpoints on this function and stepping through it lets us identfy which sections are roughly responsible for which parts of the process.</p>

<p>Through this process, we can identify the heart of the protection: a function which takes the randomly generated code wheel configuration and the entered ticket number as an input, and decides whether it was entered correctly or not.
It doesn‚Äôt do any assembly trickery, but it contains some unnecessary operations as misdirection.
We can translate it to some more compact pseudo code:</p>

<div><pre><code>code_wheel_check_answer(city_index, flag_index, country_index, discipline_index, ticket_number):  # at seg007:0260
    # determine how high the slot cutout for the chosen city is on the inner wheel, values 0(innermost) - 5(outermost)
    slot_height = slot_height_table[city_index]
    code_wheel_ticket_number_4A890 = ticket_number

    # determine slot position relative to chosen discipline, values 0-11 clockwise
    slot_position = (city - ((city + 1) &gt;&gt; 2)) - discipline_index
    code_wheel_ticket_number_4A892 = ticket_number
    if slot_position &lt; 0:
        slot_position += 12

    # determine which sector of the outer wheel is under the slot
    flag_wheel_sector = (flag_index + slot_position) % 12
    code_wheel_ticket_number_4A894 = ticket_number

    # do unnecessary operations as misdirection
    rand = random_number()
    alloc = allocate_memory(rand % 1000)
    deallocate_memory(alloc)

    # determine which sector of the middle wheel is under the slot
    country_wheel_sector = (country_index + slot_position) % 12

    # read expected answer from obfuscated table
    obfuscated_ticket = country_wheel_data[country_wheel_sector * 6 + slot_height]
    code_wheel_ticket_number_4A898 = ticket_number
    if obfuscated_ticket == 0xa283:  # hole in the middle wheel, use outer wheel data instead
        obfuscated_ticket = flag_wheel_data[flag_wheel_sector * 6 + slot_height]

    code_wheel_ticket_number_4A89C = ticket_number
    return ticket_number ^ 0xa283 == obfuscated_ticket
</code></pre></div>

<p>Apart from the random memory allocation and deallocation providing some red herrings, the actual checking logic is fairly straight-forward and directly simulates how the physical code wheel functions.
It considers how the discs are rotated, and then checks which number will be visible on the wheel based on a table of all the possible answers.</p>

<blockquote>
  <p><strong>Side investigaton 1 complete!</strong></p>
</blockquote>

<p>But besides the immediate check, it also places the ticket number into 5 different places in memory.
Those 5 memory locations are where it gets interesting, because looking at where they are used, they all re-appear in the same location:</p>

<div><pre><code>seg015:0000 code_wheel_calculate_derived_ticket_numbers:
seg015:0000                 push    si
seg015:0001                 mov     es, segment_47
seg015:0005                 mov     ax, es:code_wheel_ticket_number_4A890
seg015:0009                 xor     ax, 0C514h
seg015:000C                 mov     cx, ax
seg015:000E                 shl     ax, 1
seg015:0010                 add     ax, cx
seg015:0012                 mov     es, segment_47
seg015:0016                 mov     es:ticket_xor_c514_mul_3, ax
seg015:001A                 mov     es, segment_47
seg015:001E                 mov     ax, es:code_wheel_ticket_number_4A892
seg015:0022                 xor     ax, 0C514h
seg015:0025                 add     ax, 38D9h
seg015:0028                 mov     es, segment_47
seg015:002C                 mov     es:ticket_xor_c514_plus_38d9, ax
seg015:0030                 mov     es, segment_47
seg015:0034                 mov     cx, es:code_wheel_ticket_number_4A89C
seg015:0039                 xor     cx, 0C514h
seg015:003D                 sub     cx, 37Ch
seg015:0041                 mov     es, segment_47
seg015:0045                 mov     es:ticket_xor_c514_sub_37c, cx
seg015:004A                 mov     es, segment_47
seg015:004E                 mov     cx, es:code_wheel_ticket_number_4A898
seg015:0053                 xor     cx, 8E47h
seg015:0057                 mov     es, segment_47
seg015:005B                 mov     es:ticket_xor_8e47, cx
seg015:0060                 mov     bx, 7
seg015:0063                 mov     es, segment_47
seg015:0067                 mov     dx, ax
seg015:0069                 mov     ax, es:code_wheel_ticket_number_4A894
seg015:006D                 xor     ax, 0C514h
seg015:0070                 mov     si, dx
seg015:0072                 sub     dx, dx
seg015:0074 loc_29284:
seg015:0074                 div     bx
seg015:0076                 mov     es, segment_47
seg015:007A                 mov     es:ticket_xor_c514_div_7, ax
seg015:007E                 add     cx, si
seg015:0080                 mov     es, segment_47
seg015:0084                 mov     es:ticket_xor_c514_plus_38d9_allplus_ticket_xor_8e47, cx
seg015:0089                 pop     si
seg015:008A                 retf
</code></pre></div>

<p>In this code snippet, the 5 copies of the ticket number are modified in various ways to create 6 new values derived from it, with some arbitrary opertaions to make them all different.
Each of these six values is used some specific place elsewhere in the code, where it is compared against some reference value.
If we try to find out where those reference values come from, what we find it a second copy of the code wheel answer checking routine from above, complete with a second instance of the table containing all correct answers!
The only difference between the two is that is uses a different value to xor the ticket numbers with, using <code>0xc514</code> instead of <code>0xa283</code>.
Afterwards, the same arbitrary operations are applied to them to create the 6 reference values.</p>

<blockquote>
  <p><strong>Side investigaton 2 complete!</strong></p>

  <p>The hidden copy protection checks are real!
The game performs more hidden code wheel checks throughout the game, in each of these 6 locations.
If the main code wheel check is merely skipped, these hidden checks will fail and the game knows you tried to circumvent the copy protection.
When that happens, it will mess with the game in more subtle ways, to sabotage your illegitimate play session.
This is a sneaky additional layer of copy protection, where if you try to crack the game and remove the obvious checks, you might not even realize these additional checks exist, unless you pick up on the gameplay alterations.</p>
</blockquote>



<p>To find out what gameplay alterations the game performs when the checks fail, the easiest way is to set breakpoints at each of these locations, and then play the various disciplines waiting for them to trigger.
This lets us easily discover what each of the hidden checks do.</p>

<p>Even better, thanks to the replay feature, we can record a replay with a proper version, and then play it back in a version where the hidden checks activate, in order to see what difference they make on the same set of inputs.</p>

<h3 id="ski-jump">Ski Jump</h3>

<p>One of the most obvious changes we find in the skip jump event: When the copy protection check fails, any attempt land a ski jump beyond a certain distance fails.
More specifically, beyond a distance of 86.7m, the game won‚Äôt recognize you pressing Enter to land your jump anymore:</p>

<p><img src="https://mrwint.github.io/winter/writeup/ski_jump_success.webp" alt="Ski jump success">
<img src="https://mrwint.github.io/winter/writeup/ski_jump_failed.webp" alt="Ski jump failure">
<br>
(if the two animations are not in sync, try reloading this page in a new tab<a> or click here</a>)</p>

<h3 id="speed-skating">Speed Skating</h3>

<p>This is the second very obvious change: In the third lap in speed skating, the game won‚Äôt allow you to turn forcing you to crash into the wall:</p>

<p><img src="https://mrwint.github.io/winter/writeup/speed_skating_success.webp" alt="Speed skating success">
<img src="https://mrwint.github.io/winter/writeup/speed_skating_failed.webp" alt="Speed skating failure">
<br>
(if the two animations are not in sync, try reloading this page in a new tab<a> or click here</a>)</p>

<h3 id="biathlon">Biathlon</h3>

<p>In Biathlon, the copy protection check happens during the shooting sections.
If the check fails, it will move your shot by a random amount to the top right, on the second and fourth target in each segment:</p>

<p><img src="https://mrwint.github.io/winter/writeup/biathlon_success.webp" alt="Biathlon success">
<img src="https://mrwint.github.io/winter/writeup/biathlon_failed.webp" alt="Biathlon failure">
<br>
(if the two animations are not in sync, try reloading this page in a new tab<a> or click here</a>)</p>

<h3 id="downhill">Downhill</h3>

<p>The Downhill event also has a copy protection check.
It is activated partway into the run, and if it fails it changes the physics behavior to lower the gravity, making you fly off the track:</p>

<p><img src="https://mrwint.github.io/winter/writeup/downhill_success.webp" alt="Downhill success">
<img src="https://mrwint.github.io/winter/writeup/downhill_failed.webp" alt="Downhill failure">
<br>
(if the two animations are not in sync, try reloading this page in a new tab<a> or click here</a>)</p>

<h3 id="bobsled">Bobsled</h3>

<p>The alteration in the Bobsled event is probably the most subtle.
When the copy protection check fails, after the first couple of turns, the physics change to give you more drag, slowing you down more than usual:</p>

<p><img src="https://mrwint.github.io/winter/writeup/bobsled_success.webp" alt="Bobsled success">
<img src="https://mrwint.github.io/winter/writeup/bobsled_failed.webp" alt="Bobsled failure">
<br>
(if the two animations are not in sync, try reloading this page in a new tab<a> or click here</a>)</p>

<h3 id="luge">Luge</h3>

<p>The last of the copy protection checks is the most drastic.
During the Luge event, if you are close to the end of the track with a time of below 57.7s, the game just instantly forfeits your run, preventing you from finishing it:</p>

<p><img src="https://mrwint.github.io/winter/writeup/luge_failed.webp" alt="Luge failure">
<br>
(if the two animations are not in sync, try <a href="https://www.youtube.com/watch?v=46btEgKmCTo">building a bridge across the peaks of Mt. Kilimanjaro</a>)</p>



<p>Now that we know what a failed copy protection check looks like, we can check each of the  game versions and cracks we found to see whether they work correctly.</p>

<p>As it turns out, <strong>ALL OF THEM, except for one, FAIL THE COPY PROTECTION CHECK!
That includes even the official releases: Both the 1996 US release and the 2020 GOG release are broken.</strong></p>

<p>Let‚Äôs take a look under the hood of each of them and see what they do</p>

<h3 id="the-gog-version-2020">The GOG version (2020)</h3>

<p>The GOG version comes with a pre-patched binary, which is based on the installed VGA+EGA fast-load version of the original 1991 release.
When looking for what has been changed, beside a couple of padding bytes that do nothing, there are only 2 bytes that are different:</p>

<p>The first is at position 0x12bcdd in the file, which corresponds to offset 0xd47 in overlay 1.
That is the location of the debugger check, and if does the exact same modification we did above ourselves: it changes the jump instruction from a conditional <code>je</code> (0x74) to an unconditional <code>jmp</code> (0xeb), skipping the debugger check.</p>

<p>The other modification is similarly simple and happens at position 0x12bca4 in the file, which corresponds to offset 0xd0e in overlay 1.
This is where the code wheel check is started from, and it replaces the initial <code>cmp</code> opcode (0x83) with a simple <code>retn</code> opcode (0xc3), returning immediately and skipping the code wheel check.</p>

<p>But as we saw, simply skipping the code wheel will trigger the hidden copy protection checks, and the GOG version makes no attempt to circumvent these, causing the game to be broken.</p>

<h3 id="the-unknown-cracked-version">The unknown cracked version</h3>

<p>The second of the pre-patched binaries we found, is based on the VGA fast-load version instead.
It has only one meaningfully change compared to the original.
At position 0x122b42, which corresponds to offset 0x406 in overlay 1, it replaces a <code>call</code> instruction with <code>nop</code>s (0x90).
That function is the one leading to the code wheel check, so it is very similar to the GOG version, it just skips the function entirely instead of calling it and then immediately returning from it.
The effects are of course also the same: It trips the hidden copy protections and the game behavior is broken.</p>

<h3 id="the-the-humble-guys-crack-1991">The ‚ÄúThe Humble Guys‚Äù crack (1991)</h3>

<p>Instead of a pre-patched binary, this crack comes in the form of a program <code>WG.COM</code> which you run separately before the main executable.
It‚Äôs only 366 bytes in size, and when we disassemble it we see this (with some unimportant parts omitted):</p>

<div><pre><code>seg000:010D int3f_interrupt_handler_shim:
seg000:010D                 cmp     ax, 0
seg000:0110                 jnz     short exec_original_int3f_handler
seg000:0112                 cmp     bx, 30h
seg000:0115                 jnz     short exec_original_int3f_handler
seg000:0117                 cmp     cx, 140h
seg000:011B                 jnz     short exec_original_int3f_handler
seg000:011D                 cmp     dx, 0C8h
seg000:0121                 jnz     short exec_original_int3f_handler
seg000:0123                 push    bp
seg000:0124                 mov     bp, sp
seg000:0126                 push    bx
seg000:0127                 mov     bx, [bp+2]
seg000:012A                 cmp     bx, 0D28h       ; check that return address is ovl1:d26 - perform_code_wheel_check call
seg000:012E                 jnz     short loc_10133
seg000:0130                 pop     bx
seg000:0131                 pop     bp
seg000:0132                 iret
seg000:0133 ; ---------------------------------------------------------------------------
seg000:0133 loc_10133:
seg000:0133                 pop     bx
seg000:0134                 pop     bp
seg000:0135 exec_original_int3f_handler:
seg000:0135                 jmp     cs:original_int3f_handler_address
seg000:013A
seg000:013A ; ---------------------------------------------------------------------------
seg000:013A int21_interrupt_handler_shim:
...
seg000:0167                 cmp     ax, 2B01h       ; check for expected value in ax
seg000:016A                 jnz     short exec_original_int21_handler
seg000:016C                 push    bp
seg000:016D                 mov     bp, sp
seg000:016F                 push    bx
seg000:0170                 mov     bx, [bp+2]
seg000:0173                 cmp     bx, 0BFBh       ; check that return address is ovl2:bf9 - set time interrupt
seg000:0177                 jnz     short loc_1019C
seg000:0179                 push    ds
seg000:017A                 push    es
seg000:017B                 push    dx
seg000:017C                 push    ax
seg000:017D                 mov     ax, 353Fh
seg000:0180                 int     21h             ; Read interrupt vector for int 3fh, so it can be restored afterwards
seg000:0182                 mov     word ptr cs:original_int3f_handler_address, bx
seg000:0187                 mov     word ptr cs:original_int3f_handler_address+2, es
seg000:018C                 mov     dx, offset int3f_interrupt_handler_shim
seg000:018F                 mov     bx, cs
seg000:0191                 mov     ds, bx
seg000:0193                 mov     ax, 253Fh
seg000:0196                 int     21h             ; Override int 3fh interrupt handler with our own shim
...
seg000:0218 ; ---------------------------------------------------------------------------
seg000:0218 start:
...
seg000:023E                 push    cs
seg000:023F                 pop     ds
seg000:0240                 mov     bx, 2Ch
seg000:0243                 push    word ptr [bx]
seg000:0245                 pop     es
seg000:0246                 mov     ax, 4900h
seg000:0249                 int     21h                        ; Free memory beyond the program, to allow DOS to use it to load other things into it
seg000:024B                 mov     ax, 3521h
seg000:024E                 int     21h                        ; Read interrupt vector for int 21h, so it can be restored afterwards
seg000:0250                 mov     word ptr cs:original_int21_handler_address, bx
seg000:0255                 mov     word ptr cs:original_int21_handler_address+2, es
seg000:025A                 mov     dx, offset int21_interrupt_handler_shim
seg000:025D                 mov     ax, 2521h
seg000:0260                 int     21h                        ; Override interrupt vector for int 21h with our own shim
seg000:0262                 mov     dx, offset aTsrSuccessfull ; Static success message
seg000:0265                 mov     ah, 9
seg000:0267                 int     21h                        ; Print text to screen
seg000:0269                 mov     dx, offset aTheGamesWinter ; this is the byte after the interrupt handlers, indicating which bytes need to be preserved
seg000:026C                 int     27h                        ; Terminate But Stay Resident - This lets the installed interrupt handlers remain active
</code></pre></div>

<p>The crack works by overriding interrupt handlers and injecting its own code into them.
It first overrides the main DOS interrupt <code>int 21h</code>, and looks for a specfic interrupt the game triggers during initialization, at which point it overrides the overlay manager interrupt <code>int 3fh</code> as well.
The reason it needs to do this in two steps is that the <code>int 3fh</code> interrupt is only installed during runtime, so it can only be overridden afterwards.
Why it is looking for that specific random interrupt is beyond me, since there were way more obvious targets, like the interrupt that actually installs the <code>int 3fh</code> handler.</p>

<p>In the overlay manager interrupt, it then looks for one very specific invocation, by checking the register values and return address.
That specific invocation happens from offset 0xd26 in overlay 1, where it tries to load and perform the code wheel check.
When it finds this interrupt, it will simply skip executing it, effectively skipping the code wheel check.</p>

<p>This has essentially the same effect as the modifications from the pre-patched binaries above.
It notably also trips the hidden copy protections and breaks the game.</p>

<h3 id="the-wintersummer-bundle-us-release-1996">The Winter+Summer bundle US release (1996)</h3>

<p>The official 1996 bundle release came with its own crack in the form of a <code>WINTER.COM</code> loader executable that you run instead of the main binary.</p>

<p>Looking at what it does, we actually see a very similar picture:</p>

<div><pre><code>seg000:020A int21_interrupt_handler_shim:
seg000:020A                 push    bp
seg000:020B                 mov     bp, sp
seg000:020D                 cmp     word ptr [bp+2], 0BFBh ; check that return address is ovl2:bf9 - set time interrupt
seg000:0212                 pop     bp
seg000:0213                 jnz     short exec_original_int21_handler
seg000:0215                 push    ds
seg000:0216                 push    es
seg000:0217                 push    dx
seg000:0218                 push    ax
seg000:0219                 mov     ax, 353Fh
seg000:021C                 int     21h             ; Read interrupt vector for int 3fh, so it can be restored afterwards
seg000:021E                 mov     word ptr cs:original_int3f_handler_address, bx
seg000:0223                 mov     word ptr cs:original_int3f_handler_address+2, es
seg000:0228                 mov     dx, offset int3f_interrupt_handler_shim
seg000:022B                 push    cs
seg000:022C                 pop     ds
seg000:022D                 mov     ax, 253Fh
seg000:0230                 int     21h             ; Override int 3fh interrupt handler with our own shim
...
seg000:023D ; ---------------------------------------------------------------------------
seg000:023D int3f_interrupt_handler_shim:
seg000:023D                 or      ax, ax
seg000:023F                 jnz     short exec_original_int3f_handler
seg000:0241                 cmp     bx, 30h
seg000:0244                 jnz     short exec_original_int3f_handler
seg000:0246                 cmp     cx, 140h
seg000:024A                 jnz     short exec_original_int3f_handler
seg000:024C                 cmp     dx, 0C8h
seg000:0250                 jnz     short exec_original_int3f_handler
seg000:0252                 push    bp
seg000:0253                 mov     bp, sp
seg000:0255                 cmp     word ptr [bp+2], 0D28h ; check that return address is ovl1:d26 - perform_code_wheel_check call
seg000:025A                 pop     bp
seg000:025B                 jnz     short exec_original_int3f_handler
seg000:025D                 iret
seg000:025E ; ---------------------------------------------------------------------------
seg000:025E exec_original_int21_handler:
seg000:025E                 jmp     cs:original_int21_handler_address
seg000:0263 ; ---------------------------------------------------------------------------
seg000:0263 exec_original_int3f_handler:
seg000:0263                 jmp     cs:original_int3f_handler_address
...
</code></pre></div>

<p>The opcodes are different, but the check that is performed is exactly the same as the one as in the ‚ÄúThe Humble Guys‚Äù crack.
It checks the same register state, and it even uses the same weirdly specific <code>int 21h</code> invocation to install the overlay manager shim.</p>

<p>If I were to guess, I‚Äôd say someone has taken some ‚Äúinspiration‚Äù from the ‚ÄúThe Humble Guys‚Äù crack when creating this version.
It‚Äôs also just shoddily bolted together, with snippets of unused code everywhere.
It looks like someone repurposed some other similarly structured crack, and insterted the specifics of the ‚ÄúThe Humble Guys‚Äù crack into it to make it work for this game.</p>

<p>It of course therefore also has the same problem: it trips the hidden copy protections and the game is broken.</p>

<h3 id="the-razor1911-crack-1991">The ‚ÄúRazor1911‚Äù crack (1991)</h3>

<p>Finally, we get to the only crack that actually works properly.
Congratulations to Razor1911 for being the only ones not fooled by the game‚Äôs trickery.</p>

<p>Let‚Äôs take a look at how their crack works:</p>

<div><pre><code>seg000:0100 start           proc near
seg000:0100                 mov     sp, 300h
seg000:0103                 mov     bx, 30h ; '0'
seg000:0106                 mov     ax, 4A00h
seg000:0109                 int     21h             ; Free memory beyond the executable
seg000:010B                 mov     ax, 353Fh
seg000:010E                 int     21h             ; Read interrupt vector for int 3fh, so it can be restored afterwards
seg000:0110                 mov     word ptr original_int3f_handler_address, bx
seg000:0114                 mov     word ptr original_int3f_handler_address+2, es
seg000:0118                 mov     ax, 3521h
seg000:011B                 int     21h             ; Read interrupt vector for int 21h, so it can be restored afterwards
seg000:011D                 mov     word ptr original_int21_handler_jump+1, bx
seg000:0121                 mov     word ptr original_int21_handler_jump+3, es
seg000:0125                 push    cs
seg000:0126                 pop     es
seg000:0127                 mov     ax, 2521h
seg000:012A                 mov     dx, offset int21_interrupt_handler_shim
seg000:012D                 int     21h             ; Override int 21h interrupt handler with our own shim
seg000:012F                 mov     dx, offset aWinterExe ; "WINTER.EXE"
seg000:0132                 mov     bx, offset parameterBlock
seg000:0135                 mov     word ptr [bx+4], cs
seg000:0138                 mov     word ptr [bx+4], cs
seg000:013B                 mov     word ptr [bx+4], cs
seg000:013E                 mov     ax, 4B00h
seg000:0141                 int     21h             ; Run WINTER.EXE
seg000:0143                 mov     dx, word ptr original_int21_handler_jump+1
seg000:0147                 mov     ds, word ptr original_int21_handler_jump+3
seg000:014B                 mov     ax, 2521h
seg000:014E                 int     21h             ; Restore the original int 21h interrupt vector
seg000:0150                 push    cs
seg000:0151                 pop     ds
seg000:0152                 mov     dx, word ptr original_int3f_handler_address
seg000:0156                 mov     ds, word ptr original_int3f_handler_address+2
seg000:015A                 mov     ax, 253Fh
seg000:015D                 int     21h             ; Restore the original int 3fh interrupt vector
seg000:015F                 push    0
seg000:0161                 retn
seg000:0162 ; ---------------------------------------------------------------------------
seg000:0162 int21_interrupt_handler_shim:
seg000:0162                 pushf
seg000:0163                 cmp     ax, 253Fh       ; check for game setting up the int 3fh handler
seg000:0166                 jnz     short loc_10177
seg000:0168                 mov     word ptr cs:game_int3f_handler_jump+1, dx
seg000:016D                 mov     word ptr cs:game_int3f_handler_jump+3, ds
seg000:0172                 push    cs
seg000:0173                 pop     ds
seg000:0174                 mov     dx, offset int3f_interrupt_handler_shim  ; inject our own shim instead of the game's handler
seg000:0177 loc_10177:
seg000:0177                 popf
seg000:0178 original_int21_handler_jump:
seg000:0178                 jmp     far ptr 0:0
seg000:017D ; ---------------------------------------------------------------------------
seg000:017D int3f_interrupt_handler_shim:
seg000:017D                 push    bp
seg000:017E                 mov     bp, sp
seg000:0180                 push    ax
seg000:0181                 push    bx
seg000:0182                 push    cx
seg000:0183                 push    dx
seg000:0184                 push    si
seg000:0185                 push    di
seg000:0186                 push    ds
seg000:0187                 push    es
seg000:0188                 cmp     word ptr [bp+2], 103h   ; ovl3:101, skip check for known debuggers
seg000:018D                 jz      short loc_101E0
seg000:018F                 cmp     word ptr [bp+2], 0D4Bh  ; ovl1:d49, after failing debugger check, jump to success outcome
seg000:0194                 jz      short loc_101E7
seg000:0196                 cmp     word ptr [bp+2], 10Bh   ; ovl8:109, skips over code wheel input screen
seg000:019B                 jz      short loc_101D4
seg000:019D                 cmp     word ptr [bp+2], 11Ch   ; ovl8:11A, overrides end of code wheel check code adding the hook
seg000:01A2                 jz      short loc_101AD
seg000:01A4                 cmp     word ptr [bp+2], 381h   ; ovl8:37F, hook added above, set variables to pretend code wheel check succeeded
seg000:01A9                 jz      short loc_101B9
seg000:01AB                 jmp     short exec_original_overlay_manager
seg000:01AD ; ---------------------------------------------------------------------------
seg000:01AD
seg000:01AD loc_101AD:
seg000:01AD                 push    word ptr [bp+4]
seg000:01B0                 pop     ds
seg000:01B1                 mov     word ptr ds:37Fh, 3FCDh
seg000:01B7                 jmp     short exec_original_overlay_manager
seg000:01B9 ; ---------------------------------------------------------------------------
seg000:01B9
seg000:01B9 loc_101B9:
seg000:01B9                 mov     ax, bx
seg000:01BB                 xor     ax, 0A283h
seg000:01BE                 mov     es:0, ax
seg000:01C2                 mov     es:2, ax
seg000:01C6                 mov     es:4, ax
seg000:01CA                 mov     es:8, ax
seg000:01CE                 mov     es:0Ch, ax
seg000:01D2                 jmp     short skip_original_overlay_manager
seg000:01D4 ; ---------------------------------------------------------------------------
seg000:01D4
seg000:01D4 loc_101D4:
seg000:01D4                 pop     es
seg000:01D5                 assume es:nothing
seg000:01D5                 pop     ds
seg000:01D6                 pop     di
seg000:01D7                 pop     si
seg000:01D8                 pop     dx
seg000:01D9                 pop     cx
seg000:01DA                 pop     bx
seg000:01DB                 pop     ax
seg000:01DC                 pop     bp
seg000:01DD                 inc     si
seg000:01DE                 jmp     short game_int3f_handler_jump
seg000:01E0 ; ---------------------------------------------------------------------------
seg000:01E0
seg000:01E0 loc_101E0:
seg000:01E0                 mov     word ptr [bp+2], 106h
seg000:01E5                 jmp     short skip_original_overlay_manager
seg000:01E7 loc_101E7:
seg000:01E7                 mov     word ptr [bp+2], 0D61h
seg000:01EC                 jmp     short skip_original_overlay_manager
...
</code></pre></div>

<p>The basic mechanism is the same as in the other two cracks: it injects its own code into the <code>int 21h</code> and <code>int 3fh</code> interrupt handlers.
But the logic it performs in the <code>int 3fh</code> shim is slightly more complicated, and makes 5 individual modifications.</p>

<p>The first one skips the check for known debuggers which we looked at before, simply skipping its execution.
The second case is for the main anti-debugger check, hooking the interrupt that is called after it is failed and instead skipping over it back to the success case.</p>

<p>The remaining three all deal with the code wheel check.
The third case hooks the interrupt that is called when the code wheel dialog is being opened, and sets <code>si</code> to 1 which will simulate confirming the dialog instantly.
The fourth case is just a helper, it hooks the next interrupt after the dialog is closed, and overrides two bytes at the end of the routine that checks the provided input to inject an artificial <code>int 3f</code> instruction there.
This is not actually a valid overlay interrupt, it is only used as a place for the fifth case to hook into, because there are no other interrupts to hook into in that function.</p>

<p>So finally, the last case is where the code wheel check is actually defeated.
It hooks at the end of the input checking routine, after the game has computed the expected result to compare the input against, and it overrides all 5 copies of the ticket number with the correct value the game expects, then pretends the comparison was successful.
This way, the code wheel check succeeds, and all the hidden code wheel checks the game will perform later will also work because the correct value has been written everywhere.</p>

<p>With this, the game‚Äôs copy protection is completely defeated, with no adverse effects during gameplay.</p>

<blockquote>
  <p><strong>Side investigaton 4 complete!</strong></p>
</blockquote>

<h2 id="help-i-have-a-broken-version-of-the-game">Help, I have a broken version of the game!</h2>

<p>In case you have bought this game from GOG or have one of the many other broken versions out there, I have created a <a href="https://mrwint.github.io/winter/patcher/index.html">tool to fix the game for you</a>.
You can use the tool to patch your binary to remove the hidden copy protection checks (as well as the debugger and code wheel checks themselves in case they are not removed already), so you can enjoy this game without any limitations.</p>

<h2 id="conclusion---what-about-creating-the-perfect-ski-jump">Conclusion - What about creating the perfect ski jump?</h2>

<p>My original goal was to deconstruct the game mechanics, specifically for the ski jumping event, but that quest got so thoroughly side-tracked by all the copy protection related investigations that it moved somewhat into the background.
Now that the copy protection mysteries are solved, I will be able to focus on that, and it will likely end up being its own write-up.</p>

  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Reports of widespread power cuts in Spain and Portugal (319 pts)]]></title>
            <link>https://www.bbc.com/news/live/c9wpq8xrvd9t</link>
            <guid>43820043</guid>
            <pubDate>Mon, 28 Apr 2025 11:26:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/news/live/c9wpq8xrvd9t">https://www.bbc.com/news/live/c9wpq8xrvd9t</a>, See on <a href="https://news.ycombinator.com/item?id=43820043">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="list" spacing="6" tabindex="0" data-testid="postList"><li><div><article data-testid="content-post" id="asset:fa41cf2f-fd21-41ec-9a4a-539f15c0e114"><header><span><h3 type="normal"><span role="text"><span>Tennis tournament Madrid Open suspended due to outage</span><span><span data-testid="timestamp"><span data-testid="accessible-timestamp">published at 12:35 British Summer Time</span><p><span>Breaking</span></p></span></span></span></h3></span></header><p>The Madrid Open - an annual clay tennis tournament - has been suspended due to the power outage currently affecting the Spanish capital and surrounding region. </p><p>British tennis player Jacob Fearnley had to leave the court when play was suspended, PA media reports.</p><p>The loss of power affected scoreboards and a camera above the court, it adds.</p><figure><p><span><img alt="An empty tennis court" src="https://ichef.bbci.co.uk/ace/standard/640/cpsprodpb/vivo/live/images/2025/4/28/d945cfcc-5c49-41c5-a637-bdeed1d41534.jpg.webp" srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/vivo/live/images/2025/4/28/d945cfcc-5c49-41c5-a637-bdeed1d41534.jpg.webp 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/vivo/live/images/2025/4/28/d945cfcc-5c49-41c5-a637-bdeed1d41534.jpg.webp 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/vivo/live/images/2025/4/28/d945cfcc-5c49-41c5-a637-bdeed1d41534.jpg.webp 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/vivo/live/images/2025/4/28/d945cfcc-5c49-41c5-a637-bdeed1d41534.jpg.webp 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/vivo/live/images/2025/4/28/d945cfcc-5c49-41c5-a637-bdeed1d41534.jpg.webp 800w" width="1920" height="1080"></span><span role="text"><span>Image source, </span>Reuters</span></p><figcaption><span>Image caption, </span><p>One of the courts was left almost entirely empty after the power outage forced play to be suspended</p></figcaption></figure></article></div></li><li><div><article data-testid="content-post" id="asset:2512133a-f690-4637-856d-1acfa250ef00"><header><span><h3 type="normal"><span role="text"><span>Spanish railway operator says 'entire' grid cut off</span><span><span data-testid="timestamp"><span data-testid="accessible-timestamp">published at 12:24 British Summer Time</span></span></span></span></h3></span></header><p>Spain's national railway company, Renfe, says the country's "entire National Electricity Grid was cut off" at 12:30 local time (11:30 BST).</p><p>"Trains stopped" and were "without departures" at all stations, the company says.</p></article></div></li><li><div><article data-testid="content-post" id="asset:b41604b4-5915-413d-bc28-d8397f008e15"><header><span><h3 type="normal"><span role="text"><span>Spanish operator confirms power outages</span><span><span data-testid="timestamp"><span data-testid="accessible-timestamp">published at 12:21 British Summer Time</span><p><span>Breaking</span></p></span></span></span></h3></span></header><p>Spain's electricity grid operator Red Electrica has confirmed power outages across the country.</p><p>It is working to restore electricity supplies and says it's working to analyse the causes of the blackouts.</p><p>"All resources are being dedicated to solving it," it says in a post on X.</p></article></div></li><li><div><article data-testid="content-post" id="asset:81ef5595-dab1-420e-a8e5-647e368183d3"><header><span><h3 type="normal"><span role="text"><span>Reports of widespread power cuts in Spain and Portugal</span><span><span data-testid="timestamp"><span data-testid="accessible-timestamp">published at 12:16 British Summer Time</span><p><span>Breaking</span></p></span></span></span></h3></span></header><p>A huge power outage seems to be affecting swathes of Spain and Portugal. </p><p>Local reports say there are traffic jams in the centre of the Spanish capital, Madrid, due to traffic lights not working.</p><p>Information is coming through thick and fast, and we'll bring you the latest as and when we get it. Stay with us.</p></article></div></li></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Full power outage in Spain and Portugal (363 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43819791</link>
            <guid>43819791</guid>
            <pubDate>Mon, 28 Apr 2025 10:50:58 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43819791">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="43820052"><td></td></tr>
            <tr id="43820019"><td></td></tr>
                <tr id="43820051"><td></td></tr>
                  <tr id="43820033"><td></td></tr>
            <tr id="43819989"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43819989" href="https://news.ycombinator.com/vote?id=43819989&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div>
                  <p>I'm in Valencia and it is indeed happening here. A street parade under my windows continues nonetheless.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43819995"><td></td></tr>
                <tr id="43820007"><td></td></tr>
                <tr id="43820015"><td></td></tr>
                <tr id="43820027"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43820027" href="https://news.ycombinator.com/vote?id=43820027&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div>
                  <p>Most of them have batteries. How long they last depends, in my country they can typically manage 4 hours.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43820049"><td></td></tr>
            <tr id="43820041"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43820041" href="https://news.ycombinator.com/vote?id=43820041&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div>
                  <p>They still need other infrastructure to get anywhere though (routers and other networking infrastructure).</p>
              </div></td></tr>
        </tbody></table></td></tr>
                                    <tr id="43819921"><td></td></tr>
            <tr id="43819968"><td></td></tr>
                <tr id="43820037"><td></td></tr>
                <tr id="43820059"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43820059" href="https://news.ycombinator.com/vote?id=43820059&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div>
                  <p>Neither. Apparently a local grid overload and a cascading failure, but radio and newspapers don‚Äôt agree on root cause.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43820058"><td></td></tr>
                        <tr id="43819910"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43819910" href="https://news.ycombinator.com/vote?id=43819910&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div>
                  <p>Portugal has no electricity as we speak. Funny enough telcos and 4G/5G are fine for now, I'm guessing batteries and diesel backups kicked in and are doing their job.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43819941"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43819941" href="https://news.ycombinator.com/vote?id=43819941&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div><p>Yeah, we just told you that via Signal - that‚Äôs how we built the networks :)</p><p>(No relation to the other infamous Signal chat :))</p><p>There should be 4-8 hours of battery backup on every site - at least.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43819988"><td></td></tr>
                <tr id="43820001"><td></td></tr>
                <tr id="43820047"><td></td></tr>
                        <tr id="43819949"><td></td></tr>
                <tr id="43820042"><td></td></tr>
                  <tr id="43819959"><td></td></tr>
            <tr id="43819996"><td></td></tr>
                <tr id="43820061"><td></td></tr>
                  <tr id="43820002"><td></td></tr>
            <tr id="43819960"><td></td></tr>
                <tr id="43820018"><td></td></tr>
                <tr id="43820046"><td></td></tr>
                <tr id="43820057"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43820057" href="https://news.ycombinator.com/vote?id=43820057&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div>
                  <p>Ok...? Is there like more to this narrative or are we supposed to buy that russia just hates all of europe for being europe now? Whatever happened to the "rational actor" canard?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43819964"><td></td></tr>
                  <tr id="43819906"><td></td></tr>
                <tr id="43820039"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43820039" href="https://news.ycombinator.com/vote?id=43820039&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div><p>The European grid is a connected synchronous grid. Usually that would add stability but it also means if a single country's grid blacks out then their neighbours have to respond to that. Portugal and Spain's grids will be intimately connected which won't have helped.</p><p>Not something that's easy to test for.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43820009"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43820009" href="https://news.ycombinator.com/vote?id=43820009&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div>
                  <p>The whole European grid is essentially connected at this point, it's a simple trade of resiliency for efficiency. People just forget about the resiliency part until something goes wrong</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43819814"><td></td></tr>
            <tr id="43819859"><td></td></tr>
            <tr id="43819904"><td></td></tr>
                <tr id="43820054"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43820054" href="https://news.ycombinator.com/vote?id=43820054&amp;how=up&amp;goto=item%3Fid%3D43819791"></a></center>    </td><td><br><div>
                  <p>Spain and Portugal are quite big and with harsh terrain, I doubt anyone would bother invading in a traditional sense.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43820048"><td></td></tr>
                  <tr id="43819892"><td></td></tr>
            <tr id="43819844"><td></td></tr>
            <tr id="43819806"><td></td></tr>
                <tr id="43819810"><td></td></tr>
                  </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PhD Timeline (232 pts)]]></title>
            <link>https://xkcd.com/3081/</link>
            <guid>43818614</guid>
            <pubDate>Mon, 28 Apr 2025 07:33:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xkcd.com/3081/">https://xkcd.com/3081/</a>, See on <a href="https://news.ycombinator.com/item?id=43818614">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="bottom">
<p><img src="https://imgs.xkcd.com/s/a899e84.jpg" width="520" height="100" alt="Selected Comics" usemap="#comicmap"></p><map id="comicmap" name="comicmap">
<area shape="rect" coords="0,0,100,100" href="/150/" alt="Grownups">
<area shape="rect" coords="104,0,204,100" href="/730/" alt="Circuit Diagram">
<area shape="rect" coords="208,0,308,100" href="/162/" alt="Angular Momentum">
<area shape="rect" coords="312,0,412,100" href="/688/" alt="Self-Description">
<area shape="rect" coords="416,0,520,100" href="/556/" alt="Alternative Energy Revolution">
</map>

<p><a href="https://xkcd.com/1732/"><img src="https://imgs.xkcd.com/s/temperature.png" width="520" height="100" alt="Earth temperature timeline"></a></p>
<br>
<div id="comicLinks"><p>
Comics I enjoy:<br>
        <a href="http://threewordphrase.com/">Three Word Phrase</a>,
        <a href="https://www.smbc-comics.com/">SMBC</a>,
        <a href="https://www.qwantz.com/">Dinosaur Comics</a>,
        <a href="https://oglaf.com/">Oglaf</a> (nsfw),
        <a href="https://www.asofterworld.com/">A Softer World</a>,
        <a href="https://buttersafe.com/">Buttersafe</a>,
        <a href="https://pbfcomics.com/">Perry Bible Fellowship</a>,
        <a href="https://questionablecontent.net/">Questionable Content</a>,
        <a href="http://www.buttercupfestival.com/">Buttercup Festival</a>,
        <a href="https://www.homestuck.com/">Homestuck</a>,
	<a href="https://www.jspowerhour.com/">Junior Scientist Power Hour</a>
</p></div>
<br>

<br>
<center>
<p>xkcd.com is best viewed with Netscape Navigator 4.0 or below on a Pentium 3¬±1 emulated in Javascript on an Apple IIGS<br>at a screen resolution of 1024x1. Please enable your ad blockers, disable high-heat drying, and remove your device<br>from Airplane Mode and set it to Boat Mode. For security reasons, please leave caps lock on while browsing.</p>
</center>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[East German Stasi Tactics ‚Äì Zersetzung (2021) (118 pts)]]></title>
            <link>https://www.maxhertzberg.co.uk/background/politics/stasi-tactics/</link>
            <guid>43817664</guid>
            <pubDate>Mon, 28 Apr 2025 04:48:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.maxhertzberg.co.uk/background/politics/stasi-tactics/">https://www.maxhertzberg.co.uk/background/politics/stasi-tactics/</a>, See on <a href="https://news.ycombinator.com/item?id=43817664">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-473">
		<!-- .entry-header -->

	
	<div>
		<p><strong>This post takes a look at the experiences of political activists in East Germany (GDR) who had to deal with Stasi informants and infiltration before the fall of the Berlin Wall in 1989.</strong><span id="more-473"></span><br>
The invasive spying and disorientation tactics used by the East German secret police (<b>Stasi</b>) meant there were significantly fewer possibilities for civil disobedience and direct action than political grassroots activists have today in places such as Western Europe and North America. Nevertheless political activists in East Germany managed to start a grassroots revolution in 1989.</p>
<p><em>This text is based on interviews with people who were politically active in East German times, and reflects their experiences. Those familiar with how police spies have been used, for example in Britain may recognise the tactics used by both contemporary secret police and GDR activists.</em></p>

<h3>East German opposition and activism</h3>
<p>Because non-state organisations were prohibited in the GDR, networking and co-ordination between activists was informal: independent groups and networks stayed in contact through newsletters and the exchange of campaign materials, and there was a mix of local and regionally co-ordinated covert and open actions.</p>
<p>Activists in the GDR also campaigned on issues that will feel familiar to many campaigners today: anti-nuclear and peace issues, challenging economic paradigms of growth and consumption at any cost; resistance to an undemocratic state and its activities; propagating and practising sustainable choices versus exploitation of environment and animals. There was a strong emphasis on DIY culture with egalitarian, equitable principles ‚Äì politically most activists in the GDR in the 1980s self-defined as socialist or anarchist.</p>
<div id=""><p>East Germany and the Stasi</p><div>
<figure id="attachment_2465" aria-describedby="caption-attachment-2465"><a href="https://maxhertzberg.co.uk/wp-content/uploads/2015/11/FRG_GDR-1.png"><img decoding="async" src="https://maxhertzberg.co.uk/wp-content/uploads/2015/11/FRG_GDR-1.png" data-src="https://maxhertzberg.co.uk/wp-content/uploads/2015/11/FRG_GDR-1.png" alt="Map showing West and East Germany" width="177" height="239"></a><figcaption id="caption-attachment-2465">West and East Germany<br>CC-BY-SA David Liuzzo</figcaption></figure>
<p>Between 1945 and 1990 Germany was (to simplify a little) divided in two ‚Äì <strong>West Germany</strong>, integrated into NATO and Western markets, and <strong>East Germany</strong> (German Democratic Republic: <strong>GDR</strong>), in the Soviet dominated Eastern Bloc.</p>
<p>The <strong>Stasi</strong> (<em>Ministerium f√ºr Staatssicherheit</em>) was the East German secret police, and that country had the highest proportion of informants and secret police in history: 1 in 60 people were involved by 1989.</p></div></div>
<h3>The Stasi and <em>Zersetzung</em></h3>
<p>After the East German popular uprising of June 1953 (suppressed by Soviet troops) the government gave the Stasi the task of systematic surveillance and prevention of unrest in the population. Initially this took the form of brutal physical repression: imprisonment and physical abuse (including torture) by police and secret police. But this changed during the 1970s when the GDR became more interested in gaining a positive international image, and the repression of activists became more subtle. The Stasi redefined the military term <b>Zersetzung</b> (<i>attrition </i>or<i> corrosion</i>) to name their harassment tactics: the aim was to disrupt the working of groups and the lives of individuals to such a degree that their activism became ineffective, or more preferably, ceased altogether.</p>
<p>The aim of the <i>Zersetzung</i> was to ‚Äòswitch off‚Äô the group by rendering it ineffective, with an interim goal of hindering any positive media or public exposure. The usual ways to switch groups off were to:</p>
<ul>
<li><b>create conflict between members</b> ‚Äì particularly useful subjects for sowing discord were those of a philosophical or political nature, money and personal (sexual) relations;</li>
<li><b>hinder and sabotage activities</b> by the use of one or more infiltrators, who would agree to do tasks, but not get round to doing them, lose materials and equipment, repeatedly request changes and further edits of materials to slow down production, attempt to divert the group into more harmless activities etc;</li>
<li><b>isolate the groups</b> from other activists, eg by spreading rumours regarding unacceptable behaviour and political views etc.</li>
</ul>
<p>The choice of tactics in any particular case was based on extensive psychological profiling and intelligence on the group members, particularly: who plays what role, who fulfills what kind of task; what are relationships within the group like, who hangs out with whom.</p>
<p>Informants (IM: <i>Inoffizielle Mitarbeiter</i>) were the usual way to gain information on a group and were also used to implement the plans to incapacitate a group and sabotage its activities. In activist circles the informants were almost never Stasi or police officers, but were usually existing members of the groups who had been pressured, persuaded or blackmailed into helping the Stasi. Alternatively,a suitable outsider would be recruited to infiltrate the group.</p>
<div id=""><p>How did the Stasi persuade people to become informants?</p><div>
<ul>
<li>Appeals to patriotism</li>
<li>Cash or material reward</li>
<li>Blackmail (eg offers of immunity from threatened prosecution)</li>
<li>Making the mission sound like an exciting adventure</li></ul></div></div>

<h3>Zersetzung of individuals</h3>
<p>As in the case of groups, the <i>Zersetzung</i> of individuals had the aim of ‚Äòswitching off‚Äô that person‚Äôs efficacy by undermining their confidence and their belief in the value of their activities. The Stasi did not usually care whether an individual was switched off through disillusionment, fear, burn-out or mental illness: all outcomes were acceptable, and people‚Äôs mental health and social standing during or after an operation were of no concern to the officers involved.</p>
<div id=""><p>Worrying about informants</p><p>The Stasi made little secret of the fact that they used informants, and in fact deliberately helped spread rumours about informants. This was the cheapest and most efficient way to incapacitate individuals and groups.</p></div>
<p>The <i>Zersetzung </i>of individuals was usually carried out by systematically undermining the target‚Äôs quality of life (both socially and in the workplace) with the intention of simply destroying the target‚Äôs confidence. The tactics took various forms, such as spreading slanderous rumours, causing trouble at work etc. Rumours and information (such as about unacceptable political viewpoints, inappropriate behaviour, the possibility they may be an informant etc) that were passed on to work colleagues, bosses and social circles might be based on true facts, but were often plausible untruths that were difficult or impossible to refute.</p>
<p>The first stage of <i>Zersetzung </i>was a comprehensive evaluation of state-held data and information, eg medical records, school reports, police records, intelligence reports, searches of target‚Äôs residence. At this point they were looking for any weak points (social, emotional or physical) that could be used to put pressure on the target, eg extra-marital affairs, criminal records, alcoholism, drug use, differences between the target and their group (eg age, class, clothing styles) that could be exploited to socially isolate them.</p>
<p>After this a detailed <i>Zersetzung </i>strategy was drawn up: What was the specific aim?<i> </i>What tactics should be used to exploit the target‚Äôs personal situation and character traits? What was the timescale?</p>
<p>The next stage was often to supplement covert surveillance with overt observation in order to communicate to the target that they were of interest to the Stasi and to create a sense of insecurity and paranoia. Tactics included questioning, repeated stop and searches, strange noises on telephone lines, conspicuous visits to the workplace so that bosses and colleagues were aware of the police interest etc.</p>
<p>The final stages entailed psychological and physical harassment: moving things around at home (<i>one morning the alarm clock goes off at 5am instead of 7am, and the socks are in the wrong drawer, there‚Äôs no coffee left&nbsp;‚Ä¶</i>); damage to bikes and vehicles (eg slashing tyres); the spreading of rumours as mentioned above; ordering goods and making appointments in target‚Äôs name etc.</p>
<p>Families were often used as leverage against activists at this stage ‚Äì either as a method of blackmail (eg family members subjected to oppression as a way of putting indirect pressure on the activist), or persuasion (‚Äúyour daughter will land in deep trouble if she remains involved in that group, can‚Äôt you make her see sense? It‚Äôs her career at stake&nbsp;‚Ä¶‚Äù). </p>
<p>Physical harassment often included repeated arrests, physical attacks on the street (eg by plain clothes officers), or abuse and assault could be incited by the rumours that had been spread (eg bullying at work, avoidance by neighbours).</p>
<h3>How effective was the Stasi?</h3>
<h4>1) Paralysing individuals and groups</h4>
<figure id="attachment_4350" aria-describedby="caption-attachment-4350"><a href="https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/couple.gif"><img decoding="async" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20262%20300'%3E%3C/svg%3E" data-src="https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/couple-262x300.gif" alt="A couple embracing, while one takes notes behind the other's back" width="262" height="300" data-srcset="https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/couple-262x300.gif 262w, https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/couple-894x1024.gif 894w, https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/couple-768x880.gif 768w" data-sizes="auto, (max-width: 262px) 100vw, 262px"></a><figcaption id="caption-attachment-4350">A couple embracing, while one takes notes behind the other‚Äôs back</figcaption></figure>
<p>The militarily organised Stasi simply couldn‚Äôt understand how many activist groups functioned without leaders and hierarchies. They often mistook informal hierarchies (caused for example by differences in empowerment levels or dominant behaviour patterns) for organisational structure ‚Äì they would target those who talked the most, or took on the most tasks, and didn‚Äôt realise that even if these individuals were ‚Äòswitched off‚Äô, the rest of the group could continue to function and wouldn‚Äôt necessarily fall apart.</p>
<p>The dedication of groups was also often underestimated ‚Äì even if an informant successfully sabotaged a group‚Äôs activities, the group would rarely be completely disheartened, but would try all the harder to achieve their goals.</p>
<p>The tactics of <i>Zersetzung</i> had a significant control function, if you were engaged in (or merely suspected of) activities that the Stasi didn‚Äôt like then repression was a way to punish you (not unlike the commonly used extra-judicial punishment practiced by the police in Britain today: the threat of ASBOs, severe bail conditions, the requirement to repeatedly answer bail etc).</p>
<p>The human cost of <i>Zersetzung </i>is hard to quantify ‚Äì many GDR activists are still suffering from burnout, trauma and chronic mental health issues as a result of being targeted: on a personal level the Stasi was frighteningly effective.</p>
<h4>2) Gathering and using intelligence</h4>
<p>Informants weren‚Äôt just deployed to sabotage group activities and implement <i>Zersetzung</i> plans, but also to gather intelligence on individuals and groups (around 160km worth of Stasi archives survived the end of the GDR). Most intelligence was used to evaluate relationships and activities (which then led to an extension of intelligence gathering to previously untargeted individuals and groups), and as a basis for planning <i>Zersetzung</i> operations. Obviously plans for actions and activities were also reported, but these were acted upon only in rare and serious cases ‚Äì if intelligence were used to disrupt the activities in any obvious way then suspicion could be drawn to the informant.</p>
<p>Intelligence from surveillance and the use of informants was rarely used to actually gain evidence for a prosecution ‚Äì the Stasi desperately needed the huge amount of information it was processing in order to justify its own existence (along with the salaries and expenses of its officers and staff). If anything, this made the Stasi more dangerous to activists ‚Äì the Stasi‚Äôs dependency on gathering intelligence and mounting operations made the surveillance, <i>Zersetzung</i> and sabotage more likely to happen, along with the associated human cost.</p>
<p>Informants were regularly found out ‚Äì mostly because of poor preparation (at one infamous meeting, several rather conspicuous figures all introduced themselves with the same name), and chance (eg groups who came across evidence that an informant was passing information to the Stasi). But it is significant that most informants were only discovered after 1989 when the Stasi files were opened.</p>
<h3>Dealing with <em>Zersetzung</em></h3>
<figure id="attachment_4352" aria-describedby="caption-attachment-4352"><a href="https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/allofus-scaled.gif"><img decoding="async" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20219'%3E%3C/svg%3E" data-src="https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/allofus-300x219.gif" alt="" width="300" height="219" data-srcset="https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/allofus-300x219.gif 300w, https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/allofus-1024x746.gif 1024w, https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/allofus-768x559.gif 768w, https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/allofus-1536x1119.gif 1536w, https://www.maxhertzberg.co.uk/wp-content/uploads/2016/11/allofus-2048x1492.gif 2048w" data-sizes="auto, (max-width: 300px) 100vw, 300px"></a><figcaption id="caption-attachment-4352">All of us</figcaption></figure>
<p>Many people succumbed to pressure from the Stasi and other security forces, often because of mental health difficulties (brought about by the pressure) or through a process that was commonly called ‚Äòinner migration‚Äô: giving up political and social beliefs, following the path of least resistance and ceasing oppositional activity.</p>
<p>On the other hand resistance to <i>Zersetzung </i>was remarkably commonplace, and activists found ways to remain both healthy and active. When East German activists talk today about how they managed to continue their activism, the same points come up again and again. These are summarised below.</p>
<p><b>Support from friends and other activists</b> was essential ‚Äì a circle of close friends who shared an understanding of the political and policing situation was probably the most effective way to counter the Stasi. With such friends activists could talk openly about fears, suspicions and needs ‚Äì they could work out ways to deal with the pressure. They spent time with these friends doing non-activism related activities which helped to build trust in the group. This helped them to know that if things got bad for them, they could both trust their friends, and be trusted by them; they would be there if help and support were needed. As a group they would make plans for possible situations ‚Äì for example, who would take care of the children in case of arrest or even imprisonment, or who could provide a ‚Äòsafe house‚Äô if somebody was being shadowed and needed a break.</p>
<p>On a wider level the <b>solidarity between groups</b> was an important factor in their survival and freedom to remain active: those groups that had strong relationships with others around the country were generally subject to less repression. In later years, particularly in East Berlin, even when repression happened, widespread solidarity actions and concerted efforts to gain publicity led to quick results (arrested or imprisoned individuals released, the work of the group allowed to resume etc). On the other hand, those groups that weren‚Äôt so well networked (usually those in small towns and rural areas where they might be the only activists) were easy pickings for the Stasi ‚Äì at times whole regions of the country were ‚Äòcleansed‚Äô of grassroots activism.</p>
<p><b>Groups openly discussed the possibility of surveillance and intervention</b>. The groups would aim to work out what oppression measures they might be subject to (currently and in future) and think of ways they could deal with them. The hard bit was not to get lost in paranoia (particularly since there was a good chance that the group already had an informant present!), nor to be na√Øve or ignorant about the possibilities, but to find a middle ground of sensible measures that would, if needed, help, while not bogging the group down in extensive security measures that would just hinder the work of the group.</p>
<p>Part of working out the level of threat from the Stasi, and how to deal with it, was to consider the way the group worked, and how open the group was to newcomers. It is tempting to think that preparing and carrying out actions in the utmost secrecy would be the best defence against an opponent like the Stasi, but of the groups we know about which worked covertly in the GDR, all were subject to brutal <i>Zersetzung </i>measures, while those working openly were often subject ‚Äòonly‚Äô to surveillance and sabotage by informants, but could nevertheless carry on their activities to a greater or lesser extent. When open groups were subject to extraordinary repression levels, they were in a good position to mobilise support from other groups and interest from West German media. (It‚Äôs difficult to draw conclusions though ‚Äì generally only those from open groups are willing to speak of their experiences, and any covert group that might have survived would be, by definition, hard to find out about.) Working openly also did not preclude the need to work secretly at times, particularly when planning an action or dealing with sensitive issues, and steps would often be taken to avoid surveillance.</p>
<p><b>If a group identified an individual as a possible informant</b> they might have decided not to take any obvious initial action. An immediate reaction would be to assess whether there might be any merit in the suspicions rather than to spread rumours. The usual way of dealing with the situation would be for a few trusted individuals to discreetly research the suspect. Backgrounds would be checked (are there any family members? Do they exist? Has anyone else from the group spoken to them? What about friendships outside the group? Did the suspect actually work where they said they did? Are they familiar with the town they say they grew up in? etc) This worked well enough for informants who had been provided with a cover story and infiltrated into the group by the Stasi, but couldn‚Äôt provide clear results if the informant was a ‚Äòreal‚Äô person who had been turned.</p>
<p>By making notes of behaviour patterns and movements of a suspect the group might think they were finding evidence of Stasi involvement, but equally, they might be framing an innocent individual. Discovering reports to handling officers would be a clear sign. But if an individual were guilty only of losing materials and not getting round to completing agreed tasks, it could not be simply assumed that they were an informant or saboteur ‚Äì no matter how regularly it might happen! In other words, groups needed to be extremely careful when they thought they might have discovered an informant ‚Äì it was all too easy to start a witch hunt against innocents, something that would easily paralyse groups and individuals and play right into the hands of the Stasi.</p>
<h3>Conclusion</h3>

<p>It is easy to get lost in analysing the techniques the Stasi used, and the more you look into it, the more frightening it gets. But it‚Äôs worth mentioning that, in our assessment, the grassroots opposition movements made the biggest contribution to the revolution that started in East Germany in autumn 1989 ‚Äì despite the horrifying levels of repression and surveillance that they had faced for decades. Quite simply, the Stasi failed to predict the events of that year, and once things had started, their <i>Zersetzung</i> tactics became ineffective.</p>
<h3>Links and Further Reading</h3>
<ul>
<li><a href="http://www.maxhertzberg.co.uk/frivolity/wittering/deutschland-83/">How realistic is <em>Deutschland 83</em>?</a></li>
<li>Wikipedia has articles on <a href="https://en.wikipedia.org/wiki/Zersetzung" target="_blank" rel="noopener noreferrer">Zersetzung</a> and the <a href="https://en.wikipedia.org/wiki/Stasi" target="_blank" rel="noopener noreferrer">Stasi</a>, including on <a href="https://en.wikipedia.org/wiki/Informal_collaborators_%28East_Germany%29" target="_blank" rel="noopener noreferrer">IM</a> informants.</li>
</ul>
<div id=""><p>Affected by or interested in issues of surveillance and <em>Zersetzung</em> in the UK today?</p><div><p><em>Being on the receiving end of tactics like those described above can be extremely traumatic, and it is important to seek support from your friends and other activists.</em><br>
This post is intended for a UK audience and the links below reflect that.</p>
<p><a href="http://www.activist-trauma.net/"><strong>Activist Trauma Support</strong></a> ‚Äì support group for those injured or suffering from mental health issues due to activism.<br>
<a href="http://campaignopposingpolicesurveillance.com/"><strong>Campaign Opposing Police Surveillance</strong></a> ‚Äì blog on police surveillance in the UK.<br>
<a href="http://www.counsellingforsocialchange.org.uk/"><strong>Counselling for Social Change</strong></a> ‚Äì emotional support to people working to make a difference.<br>
<strong><a href="https://www.netpol.org/">NetPol</a></strong> ‚Äì monitor public order, protest and street policing.<br>
<a href="http://www.policespiesoutoflives.org.uk/"><strong>Police Spies Out of Lives</strong></a> ‚Äì Support group for women‚Äôs legal action against undercover policing.<br>
<a href="http://undercoverresearch.net/"><strong>Undercover Research Group</strong></a> ‚Äì online resource on political policing and undercover surveillance in the UK, including the excellent booklet <a href="http://undercoverresearch.net/2017/07/06/friend-spycop-publication-now">Was My Friend A Spycop?</a> which gives guidance on finding out whether your group was spied upon.</p>
</div></div>
<h2>You may also like:</h2>
<ul>
<li><a href="https://www.maxhertzberg.co.uk/frivolity/tours/gdr-museums/" title="Top Ten GDR Museums in and around Berlin">Top Ten GDR Museums</a> in and around Berlin</li>
<li><a href="https://www.maxhertzberg.co.uk/publishing/gdr-glossary/" title="An East German dictionary">An East German Glossary</a></li>
<li><a href="https://www.maxhertzberg.co.uk/background/politics/writing-the-stasi/" title="Writing the Stasi ‚Äì guest post by Fiona Rintoul">Writing the Stasi</a> ‚Äì guest post by Fiona Rintoul</li>
<li><a href="https://www.maxhertzberg.co.uk/publishing/deutschland-83/" title="How realistic is Deutschland 83?">How realistic is Deutschland 83?</a></li>
</ul>
<h2>Stay in Touch</h2>
<div>
<ul>
<li><i></i> Sneak previews, features and news ‚Äì straight to your inbox</li>
<li><i></i> Plus, a free short story when you sign up</li>
</ul>
</div>
	</div><!-- .entry-content -->

	 <!-- .entry-footer -->
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Presentation Slides with Markdown (134 pts)]]></title>
            <link>https://sli.dev</link>
            <guid>43816634</guid>
            <pubDate>Mon, 28 Apr 2025 01:21:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sli.dev">https://sli.dev</a>, See on <a href="https://news.ycombinator.com/item?id=43816634">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-v-76bfa20c="" data-v-cc8ef927=""><p data-v-76bfa20c="">Released under the MIT License.</p><p data-v-76bfa20c="">Copyright ¬© 2020-2025 Anthony Fu.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I made a web-based, free alternative to Screen Studio (345 pts)]]></title>
            <link>https://www.screenrecorder.me</link>
            <guid>43816419</guid>
            <pubDate>Mon, 28 Apr 2025 00:38:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.screenrecorder.me">https://www.screenrecorder.me</a>, See on <a href="https://news.ycombinator.com/item?id=43816419">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[New material gives copper superalloy-like strength (135 pts)]]></title>
            <link>https://news.lehigh.edu/new-material-gives-copper-superalloy-like-strength-0</link>
            <guid>43816327</guid>
            <pubDate>Mon, 28 Apr 2025 00:19:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.lehigh.edu/new-material-gives-copper-superalloy-like-strength-0">https://news.lehigh.edu/new-material-gives-copper-superalloy-like-strength-0</a>, See on <a href="https://news.ycombinator.com/item?id=43816327">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p dir="ltr"><span>The ARL and Lehigh researchers collaborated with scientists from Arizona State University and Louisiana State University to develop the alloy, which can withstand extreme heat without significant degradation. </span></p><p dir="ltr"><span>This and other innovative alloys will continue to be studied in </span><a href="https://nhi.lehigh.edu/nhi-news"><u>Lehigh‚Äôs newly outfitted high-tech research labs</u></a><span>, the Nanoalloy Lab and Nanoceramics Lab, which include high-pressure torsion systems, nanoindentation equipment and specialized high-temperature furnaces. </span></p><h3>Combining Copper with a Complexion-Stabilized Nanostructure</h3><p dir="ltr"><span>The breakthrough comes from the formation of Cu‚ÇÉLi precipitates, stabilized by a Ta-rich atomic bilayer complexion, a concept </span><a href="https://www.sciencedirect.com/science/article/abs/pii/S1359645407004946"><u>pioneered by</u></a><span> the </span><a href="https://www.sciencedirect.com/science/article/abs/pii/S1359645413005570"><u>Lehigh researchers</u></a><span>. Unlike typical grain boundaries that migrate over time at high temperatures, this complexion acts as a structural stabilizer, maintaining the nanocrystalline structure, preventing grain growth and dramatically improving high-temperature performance.</span></p><p dir="ltr"><span>The alloy holds its shape under extreme, long-term thermal exposure and mechanical stress, resisting deformation even near its melting point, noted Patrick Cantwell, a research scientist at Lehigh University and co-author of the study. </span></p><p dir="ltr"><span>By merging the high-temperature resilience of nickel-based superalloys with copper ‚Äî which is known for exceptional conductivity ‚Äî the material paves the way for next-generation applications, including heat exchangers, advanced propulsion systems and thermal management solutions for cutting-edge missile and hypersonic technologies.</span></p><h3>A New Class of High-Performance Materials</h3><p dir="ltr"><span>This new Cu-Ta-Li alloy offers a balance of properties not found in existing materials:</span></p><ul><li dir="ltr"><span>Nickel-based superalloys (used in jet engines) are extremely strong but lack the high thermal conductivity of copper alloys.</span></li><li dir="ltr"><span>Tungsten-based alloys are highly heat-resistant but dense and difficult to manufacture.</span></li><li dir="ltr"><span>This Cu-Ta-Li alloy combines copper‚Äôs exceptional heat and electrical conductivity while remaining strong and stable at extreme temperatures.</span></li><li dir="ltr"><span>While not a direct replacement for traditional superalloys in ultra-high temperature applications, it has the potential to complement them in next-generation engineering solutions.</span></li></ul><h3>How the Researchers Made and Tested It</h3><p dir="ltr"><span>The team synthesized the alloy using powder metallurgy and high-energy cryogenic milling, ensuring a fine-scale nanostructure. They then subjected it to:</span></p><ul><li dir="ltr"><span>10,000 hours (over a year) of annealing at 800¬∞C, testing its long-term stability.</span></li><li dir="ltr"><span>Advanced microscopy techniques, revealing the Cu‚ÇÉLi precipitate structure.</span></li><li dir="ltr"><span>Creep resistance experiments, confirming its durability under extreme conditions.</span></li><li dir="ltr"><span>Computational modeling using density functional theory (DFT), which validated the stabilizing role of the Ta bilayer complexion.</span></li></ul><h3>Patent, Funding and Future Work</h3><p dir="ltr"><span>A project such as this takes years of careful work and collaboration, said </span><a href="https://www.lsu.edu/eng/mie/people/faculty/christophermarvel.php"><u>Christopher Marvel</u></a><span> ‚Äô12 ‚Äô16 Ph.D., an author of the paper and professor of mechanical engineering at Louisiana State University.</span></p><p dir="ltr"><span>‚ÄúLehigh has such a strong reputation for electron microscopy, and that is what interested the ARL in working with us on this material. It was our microscopy that was really key to understanding the material,‚Äù said Marvel, who helped lead that portion of the research over a six-year period. ‚ÄúThe Lehigh faculty have worked on many high-level research projects over the years, and they‚Äôve all taught me different things that I apply now as an academic.‚Äù</span></p><p dir="ltr"><span>The ARL was awarded a U.S. patent (US 11,975,385 B2) for the alloy, highlighting its strategic significance, particularly in defense applications like military heat exchangers, propulsion systems and hypersonic vehicles.</span></p><p dir="ltr"><span>The work is just one of many collaborations between Lehigh and ARL which have resulted in significant discoveries, papers in high-profile publications, award-winning poster submissions and the placement of Lehigh students in prestigious fellowships. </span></p><p dir="ltr"><span>Alum Joshua Smeltzer ‚Äô17 ‚Äô23 Ph.D., now a design engineer at Honeywell, also contributed to the research, performing advanced microstructural characterization of the superalloy using Lehigh's Atomic Resolution Microscope (ARM). </span></p><p dir="ltr"><span>‚ÄúLehigh's ARM, a state-of-the-art electron microscope, is a unique instrument that enables scientists to analyze materials on the atomic scale,‚Äù Smeltzer said. ‚ÄúIn this work, the ARM was used to image the superalloy at the nano- and atomic-scales to provide a mechanistic explanation for the alloy's exceptional performance.‚Äù</span></p><p dir="ltr"><span>Further research will include direct measurements of the alloy‚Äôs thermal conductivity compared to nickel-based alternatives, work to ready it for potential applications, and the development of other high-temperature alloys following a similar design strategy.</span></p><p dir="ltr"><span>‚ÄúThis project is a great example of how federal investment in fundamental science drives American leadership in materials technology,‚Äù Harmer said. ‚ÄúScientific discoveries such as this are key to strengthening national security and fueling industrial innovation.‚Äù</span></p><p dir="ltr"><em>Story by Dan Armstrong</em></p><p dir="ltr"><em>Lehigh has been named an R1 research university by the Carnegie Classification of Institutions of Higher Education. Universities with this designation conduct the highest level of research activity within the Carnegie Classification. Lehigh is the only university in the Lehigh Valley to have this designation, and one of seven in Pennsylvania. </em><a href="https://news.lehigh.edu/lehigh-named-top-tier-research-school-by-carnegie-classification"><em><u>Learn more</u></em></a><em>.</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI helps unravel a cause of Alzheimer‚Äôs and identify a therapeutic candidate (257 pts)]]></title>
            <link>https://today.ucsd.edu/story/ai-helps-unravel-a-cause-of-alzheimers-disease-and-identify-a-therapeutic-candidate</link>
            <guid>43815591</guid>
            <pubDate>Sun, 27 Apr 2025 22:19:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://today.ucsd.edu/story/ai-helps-unravel-a-cause-of-alzheimers-disease-and-identify-a-therapeutic-candidate">https://today.ucsd.edu/story/ai-helps-unravel-a-cause-of-alzheimers-disease-and-identify-a-therapeutic-candidate</a>, See on <a href="https://news.ycombinator.com/item?id=43815591">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">



		
	
		


	<div id="feature-detail-hero">
					<figure data-slideshow-item="" data-slideshow-image-src="https://today.ucsd.edu/news_uploads/PHGDH-brain-20250424.jpg" data-slideshow-image-alt="illustration of a human brain with apparent damage" data-slideshow-image-caption="About one in nine people aged 65 and older has Alzheimer‚Äôs disease, which causes cognitive decline and increased anxiety in patients. Image credit: Jolygon/iStock
">
						<p><img data-src="https://today.ucsd.edu/news_uploads/_social/PHGDH-brain-20250424.jpg" alt="illustration of a human brain with apparent damage" width="1200" height="628" src="https://today.ucsd.edu/news_uploads/_social/PHGDH-brain-20250424.jpg">
						</p>
						
					   <figcaption>
					     About one in nine people aged 65 and older has Alzheimer‚Äôs disease, which causes cognitive decline and increased anxiety in patients. Image credit: Jolygon/iStock

					   </figcaption>
					   
					</figure>
				</div>
	
		<section id="wysiwyg">
    
  
  
    
	 <!-- START DATE STORIES IN NEW FORMAT -->
	 
	 <!-- START OF AUTHORS-BLOCK FOR MOBILE  -->
	 
	 <!-- END OF AUTHORS-BLOCK FOR MOBILE -->
	 
	 

		  <!-- START NEW CONTENT BLOCK -->
		  
		    <!-- START IF COPY -->
		   
		      <div>
							
							
							
						   <p>A new study found that a gene recently recognized as a biomarker for Alzheimer‚Äôs disease is actually a cause of it, due to its previously unknown secondary function. Researchers at the University of California San Diego used artificial intelligence to help both unravel this mystery of Alzheimer‚Äôs disease and discover a potential treatment that obstructs the gene‚Äôs moonlighting role.</p>

<p>The research team published their results on April 23 in the journal <a href="https://doi.org/10.1016/j.cell.2025.03.045">Cell</a>.</p>

<p>About one in nine people aged 65 and older has Alzheimer‚Äôs disease, the most common cause of dementia. While some particular genes, when mutated, can lead to Alzheimer‚Äôs, that connection only accounts for a small percentage of all Alzheimer‚Äôs patients. The vast majority of patients do not have a mutation in a known disease-causing gene; instead, they have ‚Äúspontaneous‚Äù Alzheimer‚Äôs, and the causes for that are unclear.</p>

<p>Discovering those causes could ultimately improve medical care.</p>

<p>‚ÄúUnfortunately, treatment options for Alzheimer‚Äôs disease are very limited. And treatment responses are not outstanding at this moment,‚Äù said study senior author Sheng Zhong, a professor in the Shu Chien-Gene Lay Department of Bioengineering at the UC San Diego Jacobs School of Engineering.</p>

<p>So Zhong and his team took a closer look at phosphoglycerate dehydrogenase (PHGDH), which they had previously <a href="https://today.ucsd.edu/story/discovery-of-new-biomarker-in-blood-could-lead-to-early-test-for-alzheimers-disease">discovered as a potential blood biomarker</a> for early detection of Alzheimer‚Äôs disease. In a follow-up study, they later found that <a href="https://today.ucsd.edu/story/study-of-promising-alzheimers-marker-in-blood-prompts-warning-about-brain-boosting-supplements">expression levels of the PHGDH gene directly correlated</a> with changes in the brain in Alzheimer‚Äôs disease; in other words, the higher the levels of protein and RNA produced by the PHGDH gene, the more advanced the disease. That correlation has since been verified in multiple cohorts from different medical centers, according to Zhong.</p>

<p>Intrigued by this reproducible correlation, the research team decided to investigate in this latest study whether there was a causal effect. Using mice and human brain organoids, the researchers found that altering the amounts of PHGDH expression had consequential effects on Alzheimer‚Äôs disease: lower levels corresponded to less disease progression, whereas increasing the levels led to more disease advancement. Thus, the researchers established that PHGDH is indeed a causal gene to spontaneous Alzheimer‚Äôs disease.</p>

<p>In further support of that finding, the researchers determined‚Äîwith the help of AI‚Äîthat PHGDH plays a previously undiscovered role: it triggers a pathway that disrupts how cells in the brain turn genes on and off. And such a disturbance can cause issues, like the development of Alzheimer‚Äôs disease.</p>

<h3>Moonlighting role</h3>

<p>PHGDH creates an enzyme key for the production of serine, an essential amino acid and a neurotransmitter. Because PHGDH‚Äôs enzymatic activity was its only known role, the researchers hypothesized that its metabolic function must be connected to an Alzheimer‚Äôs outcome. However, all their experiments designed to prove so failed.</p>
								
		
			
		
	
	<!-- Begin Climate Change -->
	
	<!-- End Climate Change -->
	<!-- Begin Artificial Intelligence -->
	
		
			
		
	
	<!-- End Artificial Intelligence -->
	
		
			
		
	

<!-- Begin Giving Bug -->

						</div>
		      
		    <!-- END IF COPY -->
		    
		    <!-- START OPTIONAL STAND ALONE IMAGE -->
		    
		    <!-- END OPTIONAL STAND ALONE IMAGE -->
		  
		    <!-- START IF COPY -->
		   
		      <div>
										<!-- 
  This figure is meant to be part of a Article/Feature Detail page. It provides 
  data attributes for the slideshow carousel script to target the image and
  caption for dynamically pulling into the slideshow modal
  - Supported variables
  -- image-src
  -- image-alt
  -- image-caption
  -- image-size
-->

	<figure data-slideshow-item="" data-slideshow-image-src="https://today.ucsd.edu/news_uploads/PHGDH-graphic-20250424.jpg" data-slideshow-image-alt="graphic showing how Alzheimer's severity increases with PHGDH expression" data-slideshow-image-caption="<p>{/exp:typographee}</p><div>Illustration depicts the relationship between PHGDH expression and Alzheimer‚Äôs disease severity. A small molecule inhibitor targeting PHGDH‚Äôs moonlighting role can reduce symptoms of Alzheimer‚Äôs disease. Image credit: Zhong lab</div>">
	  <img data-src="https://today.ucsd.edu/news_uploads/PHGDH-graphic-20250424.jpg" alt="graphic showing how Alzheimer's severity increases with PHGDH expression" width="705" height="470" src="https://today.ucsd.edu/news_uploads/PHGDH-graphic-20250424.jpg">
	  
	  <figcaption>
	    <p>Illustration depicts the relationship between PHGDH expression and Alzheimer‚Äôs disease severity. A small molecule inhibitor targeting PHGDH‚Äôs moonlighting role can reduce symptoms of Alzheimer‚Äôs disease. Image credit: Zhong lab</p>
	  </figcaption>
	  
	</figure>
	
										<p>‚ÄúAt that time, our study hit a wall, and we didn‚Äôt have a clue of what mechanism it is,‚Äù said Zhong.</p>

<p>But <a href="https://today.ucsd.edu/story/music-map-reveals-some-brain-cells-age-faster-and-are-more-prevalent-in-alzheimers">another Alzheimer‚Äôs project</a> in his lab, which did not focus on PHGDH, changed all this. A year ago, that project revealed a hallmark of Alzheimer‚Äôs disease: a widespread imbalance in the brain in the process where cells control which genes are turned on and off to carry out their specific roles.</p>

<p>The researchers were curious if PHGDH had an unknown regulatory role in that process, and they turned to modern AI for help.</p>

<p>With AI, they could visualize the three-dimensional structure of the PHGDH protein. Within that structure, they discovered that the protein has a substructure that is very similar to a known DNA-binding domain in a class of known transcription factors. The similarity is solely in the structure and not in the protein sequence.&gt;</p>

<p>Zhong said, ‚ÄúIt really demanded modern AI to formulate the three-dimensional structure very precisely to make this discovery.‚Äù</p>

<p>After discovering the substructure, the team then demonstrated that with it, the protein can activate two critical target genes. That throws off the delicate balance, leading to several problems and eventually the early stages of Alzheimer‚Äôs disease. In other words, PHGDH has a previously unknown role, independent of its enzymatic function, that through a novel pathway leads to spontaneous Alzheimer‚Äôs disease.</p>

<p>That ties back to the team‚Äôs earlier studies: the PHGDH gene produced more proteins in the brains of Alzheimer‚Äôs patients compared to the control brains, and those increased amounts of the protein in the brain triggered the imbalance. While everyone has the PHGDH gene, the difference comes down to the expression level of the gene, or how many proteins are made by it.</p>

<h3>Treatment option</h3>

<p>Now that the researchers uncovered the mechanism, they wanted to figure out how to intervene and thus possibly identify a therapeutic candidate, which could help target the disease.</p>

<p>While many current treatments focus on treating the abnormal buildup of the sticky protein called beta-amyloid in the brain, some studies suggest that treating those plaques may be ineffective: essentially by that stage of accumulation, treatment is too late. But the critical pathway discovered in this study is upstream, so preventing this pathway can reduce amyloid plaque formation in the first place.</p>
											
		
			
		
	
	<!-- Begin Climate Change -->
	
	<!-- End Climate Change -->
	<!-- Begin Artificial Intelligence -->
	
		
			
		
	
	<!-- End Artificial Intelligence -->
	
		
			
		
	

<!-- Begin Giving Bug -->

								 	</div>
		      
		    <!-- END IF COPY -->
		    
		    <!-- START OPTIONAL STAND ALONE IMAGE -->
		    
		    <!-- END OPTIONAL STAND ALONE IMAGE -->
		  
		    <!-- START IF COPY -->
		   
		      <div>
			        
		          
		          <!-- START If block also has image, video, quote, or related stories -->
						 
						 <!-- START OF OPTIONAL VIDEO -->
						 
						 <!-- END OF OPTIONAL VIDEO -->
						 
						 <!-- START OF OPTIONAL SLIDESHOW -->
						  
						  <!-- END OF OPTIONAL SLIDESHOW -->
						
						 <!-- START OF OPTIONAL QUOTE -->
						 
						 <!-- END OF OPTIONAL QUOTE -->
						
						 <!-- START OF OPTIONAL RELATED-STORIES -->
						 
						 <!-- END OF OPTIONAL REATED-STORIES -->
						
						 <!-- START OF OPTIONAL IMAGE -->
						 
							
								
							 		<div>
										<p>Given that PHGDH is such an important enzyme, there are past studies on its possible inhibitors. One small molecule, known as NCT-503, stood out to the researchers because it is not quite effective at impeding PHGDH‚Äôs enzymatic activity (the production of serine), which they did not want to change. NCT-503 is also able to penetrate the blood-brain-barrier, which is a desirable characteristic.</p>

<p><span><span>They turned to AI again for three-dimensional visualization and modeling. They found that NCT-503 can access that DNA-binding substructure of PHGDH, thanks to a binding pocket. With more testing, they saw that NCT-503 does indeed inhibit PHGDH‚Äôs regulatory role.</span></span><they access="" again="" ai="" and="" can="" dna-binding="" for="" found="" modeling.="" nct-503="" of="" phgdh="" substructure="" that="" they="" three-dimensional="" to="" turned="" visualization=""> </they></p>

<p>When the researchers tested NCT-503 in two mouse models of Alzheimer‚Äôs disease, they saw that it significantly alleviated Alzheimer‚Äôs progression. The treated mice demonstrated substantial improvement in their memory and anxiety tests. These tests were chosen because Alzheimer‚Äôs patients suffer from cognitive decline and increased anxiety.</p>

<p>The researchers do acknowledge limitations of their study. One being that there is no perfect animal model for spontaneous Alzheimer‚Äôs disease. They could test NCT-503 only in the mouse models that are available, which are those with mutations in those known disease-causing genes.</p>

<p>Still, the results are promising, according to Zhong.</p>

<p>‚ÄúNow there is a therapeutic candidate with demonstrated efficacy that has the potential of being further developed into clinical tests,‚Äù said Zhong. ‚ÄúThere may be entirely new classes of small molecules that can potentially be leveraged for development into future therapeutics.‚Äù</p>

<p>An advantage of small molecules is that they could even be administered orally, he added, unlike the current treatments that require infusions.</p>

<p>The next steps will be to optimize the compound and subject it to FDA IND-enabling studies.</p>

<p>Paper: ‚Äú<a href="https://www.cell.com/cell/fulltext/S0092-8674(25)00397-6?_returnURL=https%3A%2F%2Flinkinghub.elsevier.com%2Fretrieve%2Fpii%2FS0092867425003976%3Fshowall%3Dtrue">Transcriptional regulation by PHGDH drives amyloid pathology in Alzheimer‚Äôs disease</a>.‚Äù Co-authors include Junchen Chen*, Fatemeh Hadi*, Xingzhao Wen, Wenxin Zhao, Ming Xu, Shuanghong Xue, Pei Lin, Riccardo Calandrelli, John Lalith Charles Richard, Zhixuan Song, Jessica Li, Alborz Amani, Yang Liu and Xu Chen, all of UC San Diego.</p>

<p>*These authors contributed equally</p>

<p>This work is partially funded by the National Institutes of Health (grants R01GM138852, DP1DK126138, UH3CA256960, R01HD107206, R01AG074273 and R01AG078185).</p>

<p>Disclosure: Sheng Zhong is a founder and shareholder of Genemo, Inc. and Neurospan, LLC. The remaining authors declare no competing interests.</p>
											
		
			
				<p>Learn more about research and education at UC San Diego in:
			
		
	
	<!-- Begin Climate Change -->
	
	<!-- End Climate Change -->
	<!-- Begin Artificial Intelligence -->
	
		
			
				<a href="https://ucsd.edu/research-innovation/artificial-intelligence.html">Artificial Intelligence</a>
			
		
	
	<!-- End Artificial Intelligence -->
	
		
			</p>
			
		
	

<!-- Begin Giving Bug -->

									</div>
									
									<div>
										<!-- 
  This figure is meant to be part of a Article/Feature Detail page. It provides 
  data attributes for the slideshow carousel script to target the image and
  caption for dynamically pulling into the slideshow modal
  - Supported variables
  -- image-src
  -- image-alt
  -- image-caption
  -- image-size
-->

	<figure data-slideshow-item="" data-slideshow-image-src="https://today.ucsd.edu/news_uploads/PHGDH-lab-20250424.jpg" data-slideshow-image-alt="group photo of coauthors, all dressed in lab coats" data-slideshow-image-caption="<p>{/exp:typographee}</p><div><p>&nbsp;</p><p><span><span>The study co-authors (from left to right) Sheng Zhong, Junchen Chen, Wenxin Zhao, Ming Xu, Shuanghong Xue, Zhixuan Song and Fatemeh Hadi uncovered that the PHGDH gene can trigger a pathway that disrupts how cells in the brain turn genes on and off, which can cause diseases like Alzheimer‚Äôs to develop.&nbsp;</span></span><span><span>Photo credit: Zhong lab</span></span></p>
</div>">
	  <img data-src="https://today.ucsd.edu/news_uploads/PHGDH-lab-20250424.jpg" alt="group photo of coauthors, all dressed in lab coats" width="705" height="470" src="https://today.ucsd.edu/news_uploads/PHGDH-lab-20250424.jpg">
	  
	  <figcaption>
	    <p><span><span>The study co-authors (from left to right) Sheng Zhong, Junchen Chen, Wenxin Zhao, Ming Xu, Shuanghong Xue, Zhixuan Song and Fatemeh Hadi uncovered that the PHGDH gene can trigger a pathway that disrupts how cells in the brain turn genes on and off, which can cause diseases like Alzheimer‚Äôs to develop.&nbsp;</span></span><span><span>Photo credit: Zhong lab</span></span></p>
	  </figcaption>
	  
	</figure>
	
								 	</div>							 	
								
						 	
						 
						 <!-- END OF OPTIONAL IMAGE -->
						 
						 <!-- START OF OPTIONAL SOCIAL MEDIA EMBEDS -->
						 
						 <!-- END OF OPTIONAL VIDEO -->
						 				 
		          <!-- END If block also has image, video, quote, or related stories -->	
		        </div>
		      
		    <!-- END IF COPY -->
		    
		    <!-- START OPTIONAL STAND ALONE IMAGE -->
		    
		    <!-- END OPTIONAL STAND ALONE IMAGE -->
		    
		  <!-- END CONTENT BLOCK -->
		  
	
	  
      
  

  <!-- START TOPICS & SHARE MOBILE  -->
  
  <!-- END TOPICS & SHARE MOIBILE -->
</section>

	

	<div>
    <h2>
      You May Also Like
    </h2>
    
  </div>
	<div id="subscribe">
    <div>
        <h2>Stay in the Know</h2>
        <p>Keep up with all the latest from UC San Diego. Subscribe
          to the newsletter today.
        </p>
      </div>
    <div>
        <form novalidate="" data-subscribe-form="" action="subscribe.html" method="post" data-form_type="newsletter_signup">
          <div>
            <p><label for="subscriber-email">
              Email
            </label>
            </p><div data-validation-message="email">
              <p>Please provide a valid email address.</p></div>
          </div>
          
        </form>
      </div>
  </div>
<!-- START Subscribe Modal -->

<!-- STOP Subscribe Modal -->
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: What are you working on? (April 2025) (184 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43815523</link>
            <guid>43815523</guid>
            <pubDate>Sun, 27 Apr 2025 22:08:21 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43815523">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="43818076"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818076" href="https://news.ycombinator.com/vote?id=43818076&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>So many cool technical projects here. But I am doing something completely different - masonry. Repairing walls in 3 rooms. It includes reinstalling dozens of falling off bricks, installing 30 or so power outlets, replacing old windows with bigger modern ones, fixing openings for the doors and plastering everything afterwards. On one hand it‚Äôs interesting, because it‚Äôs very different from the dayjob. But doing it by myself pays my newish car in cash immediately. However I wouldn‚Äôt do it for money somewhere else, it‚Äôs really really hard work.</p><p>Instead of masonry I would like to work on time of flight cameras. But the day has only 24 hours :-(</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817944"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817944" href="https://news.ycombinator.com/vote?id=43817944&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I am working on the sunflower plant density estimation problem. The goal is to be able to estimate the germination rate as early as possible. Farmers benefit from such information, because:</p><p>- there are lots of expenses still to be made (fertilizer, pesticide, salaries), which may not be worth it if germination is under certain threshold</p><p>- if detected early, there is still time to plant another grain or to fill up the missing plants (requires precision seeders and seeding maps)</p><p>- is a very good proxy for yield estimation (farmers often trade futures even before they have harvested)</p><p>For the purpose I have created a dataset (a collaboration between my employer and Sofia University) and published it in order to enable scientific collaboration with other interested parties. Still working on the dataset annotations.</p><p><a href="https://huggingface.co/datasets/su-fmi/sunflower-density-estimation-2024" rel="nofollow">https://huggingface.co/datasets/su-fmi/sunflower-density-est...</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818898"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818898" href="https://news.ycombinator.com/vote?id=43818898&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm working on GPU-accelerated SQL+Spark in a zero-hassle package: <a href="https://paraquery.com/">https://paraquery.com</a></p><p>Been prod for a few months, recently ripping through 900TB with ~5x efficiency (customer was on BigQuery).</p><p>If anyone has any data/infra challenges, or just wanna talk about this kind of tech, lemme know :D</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818760"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818760" href="https://news.ycombinator.com/vote?id=43818760&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I've been working on <a href="https://asterai.io/" rel="nofollow">https://asterai.io</a> -- a platform for developing, running and managing AI agents.</p><p>It lets you create multiple agents, configure them via the web console (such as LLM parameters and system prompts) and manage their plugins and functionality.</p><p>The system is fully plugin-based, where each plugin is a WASM program that exposes functions/tools that the agent can call, and can also hook into the query lifecycle. Because plugins are WASM, they can be written in various languages such as Rust, Go, TypeScript etc. Plugins can also act as libraries, which is possible because of WebAssembly Components (a great piece of software!) -- so you can dynamically call functions from other plugins within your agent, and you get type support for your chosen language too (with codegen via WASM Components tooling).</p><p>More recently, I've been working on an SSH server for agents. The idea is that you can add public keys to your custom agent and then SSH into it to talk to it easily from terminal.</p><p>If this sounds interesting, feel free to join our Discord! The project is still new and feedback is highly appreciated. <a href="http://asterai.io/discord" rel="nofollow">http://asterai.io/discord</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818795"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818795" href="https://news.ycombinator.com/vote?id=43818795&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>This looks interesting, how do you plan to handle agents which operate apps with a UI - for example playwright, obsidian etc. Or is this out of scope?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818882"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43818882" href="https://news.ycombinator.com/vote?id=43818882&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Thanks!</p><p>That's a good question. Currently, there is one way to do it. The client querying the agent receives JSON-encoded values that are returned from plugin function calls made by the agent. These values are received alongside the agent token response stream (via SSE). So plugins can essentially emit events that the client can forward to the UI application, such as to click a button etc. The limitation with this is that there is no built-in way to send a success/error status back, it's one way only. It works well for actions that are infallible such as simple UI actions.</p><p>The client here would also need a way to interact with the target program of course, e.g. from a JavaScript browser you can click buttons and manipulate the DOM, or from a VSCode Plugin you can interact with the editor etc.</p><p>It's definitely something that can be improved though! I've been thinking about some type of MCP interoperability that could maybe assist with this.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43815778"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815778" href="https://news.ycombinator.com/vote?id=43815778&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>The first ever SQL debugger ‚Äì runs &amp; visualizes your query step-by-step, every clause, condition, expression, incl. GROUP BY, aggregates / windows, DISTINCT (ON), subqueries (even correlated ones!), CTEs, you name it.</p><p>You can search for full or partial rows and see the whole query lineage ‚Äì which intermediate rows from which CTEs/subqueries contributed to the result you're searching for.</p><p>Entirely offline &amp; no usage of AI. Free in-browser version (using PGLite WASM), paid desktop version.</p><p>No website yet, here's a 5 minute showcase (skip to middle): <a href="https://www.loom.com/share/c03b57fa61fc4c509b1e2134e53b70dd" rel="nofollow">https://www.loom.com/share/c03b57fa61fc4c509b1e2134e53b70dd</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43817886"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43817886" href="https://news.ycombinator.com/vote?id=43817886&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Was thinking today... not a debugger but even a SQL progess bar, so I know that my add column will take say 7 hours in advance.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818292"><td></td></tr>
                <tr id="43818391"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43818391" href="https://news.ycombinator.com/vote?id=43818391&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Thanks! Would you mind sharing what would be your use cases?</p><p>At my job, all of our business logic (4 KLOC of network topology algorithms) is written in a niche query language, which we have been migrating to PostgreSQL. When an inconsistency/error is found, tracking it can take days, manually commenting out parts of query and looking at the results.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43816414"><td></td></tr>
                <tr id="43818321"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43818321" href="https://news.ycombinator.com/vote?id=43818321&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>For now, yes, but I'll start working on adding support for all other DBs (especially OLAP) as soon as possible. The geberal approach is the same, I just have to handle all the edge cases of the SQL dialects</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43818873"><td></td></tr>
            <tr id="43818440"><td></td></tr>
            <tr id="43818909"><td></td></tr>
            <tr id="43818903"><td></td></tr>
            <tr id="43818754"><td></td></tr>
            <tr id="43818717"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818717" href="https://news.ycombinator.com/vote?id=43818717&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Myself.</p><p>Been a freelance dev for years, now going on "sabbatical" (love that word) imminently. Just moved to reduced hours, still in the transition and unwinding phase.</p><p>Planning to do a lot of learning, self-improvement, and projects. Tech-related and not. Preparing for the next volume (not chapter) of life. Refactoring, if you like, among other things.</p><p>I'm excited.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818726"><td></td></tr>
            <tr id="43818776"><td></td></tr>
                  <tr id="43817668"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817668" href="https://news.ycombinator.com/vote?id=43817668&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I have been working on <a href="http://phrasing.app/" rel="nofollow">http://phrasing.app</a> - a language learning &amp; acquisition tool for polyglots. I‚Äôve been using it to study ~12 languages (5 on maintaince, 2 seriously studying, 5 casually ‚Äústudying‚Äù) and it‚Äôs starting to feel really good. If anyone is learning/maintaining several languages, please reach out! I‚Äôm looking for beta testers in as many languages as possible (it supports 120+).</p><p>In what I believe is still the spirit of the question though, I discovered Maltese these week and have added it to my casual study. It‚Äôs a Semitic language (closely related to Arabic), written in the latin script, with about 40-50% of its vocabulary being Italian/Sicilian based. It‚Äôs become my new obsession</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818621"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818621" href="https://news.ycombinator.com/vote?id=43818621&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Sounds good.</p><p>What languages do you support?</p><p>Learning Latvian through Anki flashcards, but it's not well supported by the main platforms, and there's not a huge amount of content out there for learning.</p><p>This alongside a couple of the usual suspects.</p><p>As a side note, on a Pixel 4a 5G (old phone , but functionally not ready for e-waste) the homepage bleeds all over. Some components into each other, others off screen. Might want to check that.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818695"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818695" href="https://news.ycombinator.com/vote?id=43818695&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>i signed up and tried to use it. The UI is very confusing. i couldn't find the place to setup what language i want to learn and what language i know (for translation). It is best if you can have a video or images documenting how to use it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818356"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818356" href="https://news.ycombinator.com/vote?id=43818356&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Since you're in Amsterdam, I'm curious how well you think it performs for learning Dutch? I'm a native English speaker with a B2~ in Dutch and just looking to progress more. I've not used spaced repetition up to this point in my learning journey (almost 3 years).</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818064"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818064" href="https://news.ycombinator.com/vote?id=43818064&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Yes, please. I've been looking for something like this. Lately I've been just casually going into another language with ChatGPT and asking it to correct me. I do I like some of the old languages, things like Aramaic, which just have a different feel.</p><p>I signed up, but now it's asking me for a "reference language" (which is a little ironic because it tells me this in English lol). I guess I'll play with this later.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818373"><td></td></tr>
            <tr id="43817976"><td></td></tr>
                  <tr id="43818286"><td></td></tr>
                <tr id="43818867"><td></td></tr>
                  <tr id="43817798"><td></td></tr>
                <tr id="43818836"><td></td></tr>
                  <tr id="43818809"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818809" href="https://news.ycombinator.com/vote?id=43818809&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Working out some smaller bugs of my meta tags checker / builder HeyMeta, which I've rebuilt in Svelte (prevously used Node.js for both FE and BE and it was buggy as hell)</p><p><a href="https://heymeta.com/" rel="nofollow">https://heymeta.com</a></p><p>Also revisited and updated Let's see, an eye trainer, which is basically a PWA you can "install" on your tablet/mobile/e-reader. I'm not a scientist, but have had some success training my eyes with this technique and wanted to make a simple app that I can share with my friends to try.</p><p><a href="https://letssee.publicspace.co/" rel="nofollow">https://letssee.publicspace.co/</a></p><p>Any feedback welcome :)</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818830"><td></td></tr>
                  <tr id="43818798"><td></td></tr>
            <tr id="43818532"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818532" href="https://news.ycombinator.com/vote?id=43818532&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Reverse typesetting: reflowing page layouts where you don't have knowledge of the typesetting structure, i.e. a scanned physical book or PDF paper. Naive rules-based heuristics based on the dimensions of bounding boxes and gaps. Point is to reflow things for resizing to eink readers. (Specifically the size that fits in my pocket which I carry around. User #1 is me). Building in Common Lisp and targeting an Emacs mode for interactive execution with manual feedback.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818821"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818821" href="https://news.ycombinator.com/vote?id=43818821&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>i don‚Äôt quite understand, what makes it reverse typesetting?</p><p>my understanding is your typesetting books for responsive eink readers.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818906"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43818906" href="https://news.ycombinator.com/vote?id=43818906&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>You're inferring the structure of the document from the printed result. If typesetting takes a set of layout directives and outputs a page, this is taking a finished page and guessing what layout directives could create it. Then you can take that inferred structure and reflow the page in a new layout.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43818612"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818612" href="https://news.ycombinator.com/vote?id=43818612&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôm building ninja.ai ‚Äî it looks like a one-click App Store for MCP Servers, but the real goal is much bigger: creating a ‚ÄúUniversal Fabric of Context‚Äù that lets AI tools tap into structured information across the web easily.</p><p>It started when I found it surprisingly hard for my partner to install and connect MCP Servers ‚Äî even simple ones. I realised if we want AI agents to really interact with the web, it needs to be as easy as installing an app.</p><p>Right now, you can browse, install, and connect servers in one click. Over time, it‚Äôll make AI integrations as easy as installing an app ‚Äî no messy APIs, no custom scraping.</p><p>If you‚Äôre working with AI models, agents, or data-heavy tools, I‚Äôd love to hear what kinds of ‚Äúcontext pipes‚Äù you‚Äôd want to see added.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817691"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817691" href="https://news.ycombinator.com/vote?id=43817691&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>A midi sequencer, which does or is supposed to do what you expect.</p><p>In the process of adding stuff like euclydian sequences, and trying to figure out
how to generate melodies.  Been considering using something like a simple markov probability from a bunch of jazz standards, but also starting to read more music theory 
behind it.</p><p>It's a programming project but it's directly related to me trying to figure out music.  So not a random sequence of notes in scale or not.  The idea is more to generate backing tracks or song starters.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818240"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818240" href="https://news.ycombinator.com/vote?id=43818240&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>That's a cool project, but learning music via music theory is a bit like trying to learn English via grammar theory. It's backwards, and out of the hundreds of musicians I've met, I've never met one that walked that path.</p><p>Strong recommendation: Hire a teacher. Even with experience playing four instruments, and when I decided to learn another, I still hired a teacher.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43818747"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818747" href="https://news.ycombinator.com/vote?id=43818747&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm working on Proflect ‚Äî a personal and professional growth platform that connects goals, journaling, and feedback into one flow. To help you grow by reflection, not just action.</p><p>The idea is that growth becomes a lot more intentional when you can reflect daily, set goals clearly, and get structured input from people you trust ‚Äî all in one place instead of scattered across different tools.</p><p>I'm getting ready to open early access soon. Curious if others have tried combining these areas or if you use separate tools for goals, journaling, and feedback!</p><p><a href="https://proflect.io/" rel="nofollow">https://proflect.io</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818652"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818652" href="https://news.ycombinator.com/vote?id=43818652&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm working on a travel planning application. I know a lot of other apps exist, but I'd like to build one myself.</p><p><a href="https://github.com/kenrick95/ikuyo">https://github.com/kenrick95/ikuyo</a></p><p>So far it has some sort of activity calendar + expense tracker</p><p>There's still so much ideas to implement, like adding map, improve UX of creating activities, to-do list, etc</p><p>I've used it once or twice of a short trip, but in 6 months time, I'll have a 2-weeks trip, so that's my self-imposed "deadline" for this project</p><p>Anyway this project is a pure static web page and all the 'back-end' is handled by InstantDB ( <a href="https://www.instantdb.com/">https://www.instantdb.com/</a> ) after I saw their submission on HN &gt;.&lt; So far it has been quite a good experience overall except maybe the permissions model which can be a bit confusing to me</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818137"><td></td></tr>
                <tr id="43818193"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818193" href="https://news.ycombinator.com/vote?id=43818193&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Just downloaded this. This is a great format for how my head thinks, especially for apps I use periodically but not so often that I want them on the main screen. Thank you.</p><p>(Minor note: The Setup Tutorial says, "Swipe right to continue" when the user actually swipes left.)</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43818159"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818159" href="https://news.ycombinator.com/vote?id=43818159&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôve been making photography software as an indie developer for a bit over a year now:</p><p><a href="https://heliographe.net/" rel="nofollow">https://heliographe.net</a></p><p>A few released apps for now that are iOS/macOS, with some exciting more things in the pipeline.</p><p>If you‚Äôre a photographer who has frustrations with current mainstream photography software (whether capture/edit/publishing), I‚Äôd also love to hear from you - you can find me as H√©liographe on (mastodon,bluesky,threads,x) or just email me at contact@heliographe.net :)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818727"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818727" href="https://news.ycombinator.com/vote?id=43818727&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>We‚Äôre building BLUO  - <a href="https://bluo.cms/" rel="nofollow">https://bluo.cms</a> a modern multi-website CMS focused on simplicity and performance.</p><p>Key features:
- Multi-website management with single sign-on (one dashboard for all sites)
- Static rendering via Cloudflare KV for 100% uptime and blazing speed
- Real-time editor with AI-powered automated internal backlinks
- Theme switching without breaking functionality</p><p>We're currently serving 100+ websites. It's completely free for non-profits.</p><p>Would love feedback from anyone managing multiple content sites!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818523"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818523" href="https://news.ycombinator.com/vote?id=43818523&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I am working on a telegram bot deployed on cloudflare which is just a basic app for van drivers to sign up on a fixed location near my area and see which drivers are online and see how many people have sit in a van which the drivers can increment/decrement by just chatting with the telegram bot who want to go to a popular spot where I have to go to quite daily because I am studying at a place which is way far away and its the most economical and sane method to travel..</p><p>Yet my problem really arises that its too luck based, sometimes I can be the last guy, Sometimes I can be the first guy so I have to wait for the van to get fully occupied which will take a lot of time...</p><p>I have just made it, and I find it pretty nifty, I made it all completely via AI and this one absolutely crazy good youtube video on deploying telegram bots on cloudflare...</p><p>Also, I had seen this telegram bot ai maker idea on HN a few days ago, So I had also created a project which you can chat with the microsoft deepseek r1 post training bot for free because the api key of open router for this model is free, It doesn't have incremental streaming or multi chats, really basic, and It can generate me the code but I am not sure how I would deploy that code .. , I used to think its easy but not... ,any resources out there? (Though I want to open source this, but I am not going to be building this ai idea further because I lack time and I have to study)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817880"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817880" href="https://news.ycombinator.com/vote?id=43817880&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I wanted to know what my kids were doing on the computer: homework or watching youtube shorts, so I built <a href="https://screenspy.app/" rel="nofollow">https://screenspy.app</a> to monitor them. Now I‚Äôm working on turning it into a product.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818143"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818143" href="https://news.ycombinator.com/vote?id=43818143&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I've been using something like Google Family Link, which works fine, except that it ties in to Google Family, along with YouTube, Play Store, Google One. I'd have to kick my sister out of the group to monitor another daughter and it means there's a limit on the number of children you have; such terrible design.</p><p>I do want to give them a little privacy and it gets to the appropriate level. Like restricting some apps at certain times, access to chrome but not xhamster. Locking it for certain periods of time and having them request more screen time past 4 hrs/day. Locking the phone whenever they've barricaded themselves in the room the whole morning.</p><p>I don't necessarily mind that they're watching YT or TikTok and such. I just want to kick them out of the doom scrolling cycle every now and then.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818352"><td></td></tr>
            <tr id="43818100"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818100" href="https://news.ycombinator.com/vote?id=43818100&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I really like this idea of silent monitoring. Monitoring and talking about bad things seen weeks/months later. Because while I can block everything I want at home‚Ä¶ there are other kids with free Internet access where everything is available and then I have no idea what‚Äôs happening.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817904"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43817904" href="https://news.ycombinator.com/vote?id=43817904&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>If you add some remote command execution, you basically created some sort of a trojan ;-)</p><p>Really like to look of the product page!</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43818833"><td></td></tr>
            <tr id="43816356"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816356" href="https://news.ycombinator.com/vote?id=43816356&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm working on an escape room! Initially I was working on a software/hardware bundle that I was planning to market to other escape rooms but I think that is the wrong approach. So I am going to build a bunch of modular stuff in my garage and eventually start my own, its been an awesome project so far! I want a more dynamic and action oriented experience so it might not really be an escape room anymore but I don't know what to call it yet.</p><p>Escape rooms are honestly... almost always a let down but the concept has a lot of potential and there are some really neat ones that standout like this local one where you pilot an airship <a href="https://www.portlandescaperooms.com/steampunk-airship" rel="nofollow">https://www.portlandescaperooms.com/steampunk-airship</a></p><p>Once I build the best escape room on the planet, I can consider selling the tools.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43817745"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43817745" href="https://news.ycombinator.com/vote?id=43817745&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Have you ever visited a Boda Borg? They‚Äôre not quite escape rooms; generally, the experiences are fast-paced. Some are puzzles; some physical challenges; some, an interesting mix. Lots of computer automation to make it all work.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43818547"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818547" href="https://news.ycombinator.com/vote?id=43818547&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I've been working on onsite deployments for <a href="https://www.keystash.io/" rel="nofollow">https://www.keystash.io</a>, which is a Linux SSH Key and User management system. It's been going for a while now and I am finally implementing onsite deployments as so many customers actually want to run this themselves. When we started, we really thought customers wouldn't want the hassle of another piece of infrastructure to manage, guess we were wrong :-)</p><p>Onsite deployment is a lot more difficult to make slick and easy. We've been thinking about the best way for our customers to deploy while reducing the load on our support team. So far, we are thinking about RPM's, Debs and Docker and trying to make this as close to a '5 step process' as possible.</p><p>I would love to hear people's thoughts on other mechanisms that make it easier for SRM's / DevOps to manage key platform infrastructure software.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818126"><td></td></tr>
            <tr id="43818393"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818393" href="https://news.ycombinator.com/vote?id=43818393&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p><a href="https://mitte.ai/" rel="nofollow">https://mitte.ai</a> ‚Äî an AI image generator with focus on quality and details</p><p>so you can get logos / icons that doesn‚Äôt look AI generated.</p><p>it comes with Photoshop-like editor (<a href="https://mitte.ai/editor" rel="nofollow">https://mitte.ai/editor</a>) so you can zoom into details and change / remove anything, or upscale, etc.</p><p>I built it for myself but now
there‚Äôs good amount of paying users as well.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818491"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818491" href="https://news.ycombinator.com/vote?id=43818491&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>So I wanted to try this and it turns out you can't sign up?</p><p>simply go to the sign in button and then there is a reset password and then when you click on it , there adds an optional sign up and when you click on it , it leads you to mitte.ai/join which says Not Found.</p><p>Kind of interesting, wappanalyzer shows its written in erlang?
So are you raw dogging erlang or maybe elixir or gleam? What's the tech stack behind this.</p><p>Where are you generating the images / videos at? Are you using something like openrouter api or are you self hosting the gpu / using aws for it??</p><p>I am also interested in what percentage of users are paying? and also the abuse vector that might arise from generating some pretty down bad images... , are all images that are generated here public or what exactly??</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818654"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43818654" href="https://news.ycombinator.com/vote?id=43818654&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>You can sign in with Google.</p><p>I had to close the sign up because there was so many abuse coming from regular sign ups.</p><p>'Sign in Google' is great because it eliminates low quality traffic who never pays and tends to be there for abusing the system.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43818570"><td></td></tr>
            <tr id="43817600"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817600" href="https://news.ycombinator.com/vote?id=43817600&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I'm teaching myself category theory, I'll kick back off a local trail, keep notes on the birds I see and read and do the problems in my notebooks. I've got Basic Category Theory by Leinster, and How to Read and Do Proofs by Solow as my references, notebook, pen and a pair of Nikon binoculars.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43817632"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43817632" href="https://news.ycombinator.com/vote?id=43817632&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Can I ask what prerequisite mathematics you would need to know before reading those? I'm really interested in that topic and better understanding functional programming.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818015"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43818015" href="https://news.ycombinator.com/vote?id=43818015&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>If you wish to approach Category Theory from the viewpoint of a programmer, not a mathematician, I suggest Bartosz Milewski's book <i>Category Theory for Programmers</i>. For this, all you need is some previous programming experience. He uses C++ and Haskell iirc but as long as you can read snippets of code, you'll be fine.</p><p>I am suggesting this since you said you want to better understand functional programming. Category Theory, as mathematicians look at it, is an extremely abstract field. If you want to do pure math related stuff in Category Theory, and only then, I would say important prereqs are Abstract Algebra and Topology. I believe the motivation for Category theory lies in Algebraic Geometry and Algebraic Topology, but you definitely don't need to be an expert on these to learn it.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818443"><td></td></tr>
                              <tr id="43818597"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818597" href="https://news.ycombinator.com/vote?id=43818597&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>ShippentPlanner - easily plan and organize your sku paletizing! Make a shippment to a destination warehouse in minutes! For ecommerce sellers. I'm preparing a demo to be able to show to others...</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817998"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817998" href="https://news.ycombinator.com/vote?id=43817998&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I recently started working on a fishing journal/log kind of app. I got that idea last year when returning from fishing with dad, that it would be nice if we could track what we caught each time we went fishing, where we went, and to track some details (water and wea details). There apps that already do that, and one could also use Excel or just paper notebook, so I'm making this mainly for us and his friends to use. It's still early, but I'd like to add groups so you can exchange messages or catches with your friends, add stats allowing you to see for example at what time and where you caught most fish, or using which lure or bait. The app is in Serbian though, but here's a link if you want to check it out: <a href="https://buckaros.com/" rel="nofollow">https://buckaros.com</a></p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818741"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818741" href="https://news.ycombinator.com/vote?id=43818741&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I am collecting IPs and other IOCs from some servers and honeypots that I have around and aggregating them with well known IPs and IOCs.</p><p>I would like to create a sort of search engine for that.</p><p>Nothing fancy or innovative, but just to learn Golang in a bigger context.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818587"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818587" href="https://news.ycombinator.com/vote?id=43818587&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>For the last months I've been working primarily on building a UI framework for Go in Go via WebASM.</p><p>Had to implement the bindings first, because js.Value kind of sucks. Meanwhile I am building web components and widgets and it's slowly getting where I want it to be.</p><p>Maybe after a couple more weeks I can finally build apps in 100% Go and together with webview/webview. Still needs a lot of work around the edges here and there.</p><p>[1] <a href="https://github.com/cookiengineer/gooey">https://github.com/cookiengineer/gooey</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818737"><td></td></tr>
            <tr id="43818254"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818254" href="https://news.ycombinator.com/vote?id=43818254&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p><a href="https://www.accessgrid.com/" rel="nofollow">https://www.accessgrid.com/</a> - The best way to issue and manage secure NFC credentials for Apple and Google Wallet via API.</p><p>No app required!</p><p>We took all of the complexity of issuing MIFARE DESFire enabled NFC credentials and made it extremely developer friendly. SDKs in most major languages (python, ruby, csharp, js, etc), developer console with request logs, and more.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818402"><td></td></tr>
                  <tr id="43818600"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818600" href="https://news.ycombinator.com/vote?id=43818600&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Did a Show HN about a month ago, but we're hard at work building d√©d√©d√© [1] - it's a not-for-profit website that invites people to casually share the "good, bad, and why"s of urban spaces.</p><p>[1] <a href="https://dedede.de/en" rel="nofollow">https://dedede.de/en</a></p><p>We're based in Kyoto and the posts are heavily Japan-centric; we'd love to see posts from all over the world!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818537"><td></td></tr>
            <tr id="43818663"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818663" href="https://news.ycombinator.com/vote?id=43818663&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôm working on Nelly, a no-code AI agent platform for building, using and (soon) sharing AI assistants.</p><p>It‚Äôs currently in beta for macOS but I‚Äôm waiting for Anthropic to extend my rate-limits before I announce it here on HN.</p><p><a href="https://nelly.is/" rel="nofollow">https://nelly.is</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817905"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817905" href="https://news.ycombinator.com/vote?id=43817905&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Working on a fridge camera; no good solutions exist and I need it to avoid that feeling that I get when I dump my large bag of fresh vegetables.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818071"><td></td></tr>
                  <tr id="43818592"><td></td></tr>
            <tr id="43818390"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818390" href="https://news.ycombinator.com/vote?id=43818390&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Worked a little on Server Radar [1] again, the Hetzner Auction price tracker.</p><p>It's my fun little project to resort to. Implemented dark mode, sorting, grouping and various layout improvements. Also added a Drawer with Auction view the other week. UI is finally fun again with component libraries and LLMs.</p><p>Oh, and I added a Cloud Server Availability [2] page as I noticed people on /r/hetzner were complaining about lack of resources. Looks like their Cloud offerings are going quite well.</p><p>[1] <a href="https://radar.iodev.org/" rel="nofollow">https://radar.iodev.org/</a>
[2] <a href="https://radar.iodev.org/cloud-status" rel="nofollow">https://radar.iodev.org/cloud-status</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817851"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817851" href="https://news.ycombinator.com/vote?id=43817851&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm working on Damon[1], a Nomad Events stream operator that automates cluster operations and eliminates repetitive DevOps tasks. It's a lightweight Go binary that monitors the Nomad events stream and triggers actions based on configurable providers.</p><p>A few examples of what it can currently do:</p><p>- Automated data backup: Listens for Nomad job events and spawns auxiliary jobs to back up data from services like PostgreSQL or Redis to your storage backend based on job meta tags. The provider for this is not limited to backups, as it allows users to define their custom job and ACL templates, and expected tags. So it can potentially run anything based on the job registration and de-registration events.</p><p>- Cross-namespace service discovery: Provides a lightweight DNS server that acts as a single source of truth for services across all namespaces, solving Nomad's limitation of namespace-bound services. Works as a drop-in resolver for HAProxy, Nginx, etc.</p><p>- Event-driven task execution: Allows defining custom actions triggered by specific Nomad events; perfect for file transfers, notifications, or kicking off dependent processes without manual intervention. This provider takes in a user-defined shell script and executes it as a nomad job based on any nomad event trigger the user defines in the configuration.</p><p>Damon uses a provider-based architecture, making it extensible for different use cases. You can define your own providers with custom tags, job templates, and event triggers. There's also go-plugin support (though not recommended for production) for runtime extension.</p><p>I built this to eliminate the mundane operational tasks our team kept putting off. It's already saving us significant time and reducing gruntwork in our clusters.</p><p>Check out the repository[1] if you're interested in automating your Nomad operations. I'd love to hear your thoughts or answer any questions about implementation or potential use cases!</p><p>[1]: <a href="https://github.com/Thunderbottom/damon">https://github.com/Thunderbottom/damon</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818575"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818575" href="https://news.ycombinator.com/vote?id=43818575&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôve been building an Elixir app to poll RSS feeds and pipe new entries to Discord.</p><p>Performance is rock solid, and it‚Äôs almost ready to release, I just need to tweak a few things (like free trial with no CC).</p><p>I have a very long to do list, and ultimately want to extend it with ‚Äúchange detection‚Äù, e.g. notify when an HTML element on a website changes.</p><p>All feedback is welcome</p><p><a href="https://feedsync.net/" rel="nofollow">https://feedsync.net</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818594"><td></td></tr>
                  <tr id="43817917"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817917" href="https://news.ycombinator.com/vote?id=43817917&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôm working on LookAway (<a href="https://lookaway.app/" rel="nofollow">https://lookaway.app</a>) to help people stay healthier and more productive during prolonged screen time.</p><p>My main challenge has been making meeting detection more robust -- it currently uses both mic and camera activity, which led to a lot of false positives. In the next version I‚Äôm switching to mic only (the camera caused most of the noise) and I‚Äôve added a way to identify which app is using the mic, so users can exclude non-meeting apps.</p><p>I‚Äôve also added plenty of small tweaks throughout to make LookAway even less interruptive. I‚Äôm excited for the next release!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817858"><td></td></tr>
            <tr id="43818344"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818344" href="https://news.ycombinator.com/vote?id=43818344&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p><a href="https://github.com/datalpia/laketower">https://github.com/datalpia/laketower</a></p><p>Slowly building an open-source Data Lakehouse management utility application for local development, scratching my own itch and trying to accelerate development workflows with customers developing for Databricks.</p><p>For now it only supports Delta Lake (using delta-rs + duckdb), only supports table metadata inspection and querying, but in the near future will add dashboards as code, simple Markdown notebook like mode, and Apache Iceberg support.</p><p>For now it's an enabler for me and others, hopefully I can turn it into a product somehow at some point.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818339"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818339" href="https://news.ycombinator.com/vote?id=43818339&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p><a href="https://markdown.ninja/" rel="nofollow">https://markdown.ninja</a></p><p>A Markdown-first CMS and website builder for blogs, newsletters and documentation websites.</p><p>I've been blogging since more than 10 years, and the only thing that made it possible is Markdown. That's why I've decided to build a complete publishing platform to replace the complex and fragile setups of bloggers and startups. Do you really need a CI/CD pipeline, static site builder, hosting, CDN and analytics just for a website? :/</p><p>The platform is currently 100% operational and I'm now working to Open Source it.</p><p>The best thing? You can publish directly from the CLI:</p><p>$ mdninja publish</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818351"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818351" href="https://news.ycombinator.com/vote?id=43818351&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôm just putting the finishing touches on (<a href="https://jtrack.app/" rel="nofollow">https://jtrack.app</a>)[JTrack]</p><p>I spent a long time working in manufacturing and struggled to find a piece of software where we could define a process, share instructions and collect data all in one go.</p><p>The idea is you can basically turn your process into an interactive flowchart and follow it through. I‚Äôm almost code complete on the MVP, moving into distribution mode in a few weeks.</p><p>I‚Äôd love to hear from any HNers who‚Äôve gone from 0 to 1 on a SaaS for non technical users. What worked for you?</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818184"><td></td></tr>
            <tr id="43815958"><td></td></tr>
            <tr id="43818166"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818166" href="https://news.ycombinator.com/vote?id=43818166&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Working on redesigning my SaaS template. It uses Dokploy to deploy the NodeJS app, and Pocketbase instance within the same server, so DB reads and writes are very fast. Also doesn't use the Pocketbase client library at all, all calls are wrapped in their own API routes and everything is server side rendered.</p><p>You might ask why use Pocketbase at all, and I'm not sure anymore. I suppose the dashboard is great, built in auth is great (although I've had to write cookie middleware to make it SSR anyway). I wish there was a lightweight Pocketbase/Supabase style "backend in a box" setup that didn't push the whole client library directly communicating to DB paradigm.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818686"><td></td></tr>
            <tr id="43818445"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818445" href="https://news.ycombinator.com/vote?id=43818445&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p><a href="https://eval.16x.engineer/" rel="nofollow">https://eval.16x.engineer/</a> - 16x Eval: A desktop GUI app to evaluate prompts and models</p><p>With 16x Eval, you can manage your prompts, contexts, and models in one place, locally on your machine, and test out different combinations and use cases with a few clicks.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818188"><td></td></tr>
            <tr id="43817659"><td></td></tr>
            <tr id="43818439"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818439" href="https://news.ycombinator.com/vote?id=43818439&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>While Git is great at asynchronous collaboration, its a bit clunky to try and work on the same commit with other devs or across devices.
This is because Git tracks what changed, not how it changed.</p><p>It'd be cool if you were on the same branch as somebody else, or another device, and your working directories could be synced.
It'd also be cool for the commit history to be a bit richer, so you could see who, what and when for a change at a keystroke level.</p><p>So I'm working on real-time sync for Git!
I'd represent the working directory as a tree CRDT [1] and sync that through FUSE and p2p networking.</p><p>Not sure whether this is actually a good idea! This is a POC :)</p><p>[1] <a href="https://martin.kleppmann.com/papers/move-op.pdf" rel="nofollow">https://martin.kleppmann.com/papers/move-op.pdf</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818298"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818298" href="https://news.ycombinator.com/vote?id=43818298&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p><a href="https://github.com/openkoda/openkoda">https://github.com/openkoda/openkoda</a></p><p>I am working on an open-source insurance application platform.</p><p>The main goal is to accelarate time-to-market for insurance and insurtech innovations, providing all these "boring" enterprise features (like multitenancy, role-based security, audit trails, etc.) out of the box, so that you can focus on building the actual product.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818368"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818368" href="https://news.ycombinator.com/vote?id=43818368&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>www.promptcol.com</p><p>A prompt collection platform that let's you organize your prompts, share them, learn prompts from other users and reuse them on multiple LLM / AI platforms.
It's aimed at improving prompt engineering skills for both technical and non technical LLM users.
Currently in Alpha phase and actively looking for feedback.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817962"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817962" href="https://news.ycombinator.com/vote?id=43817962&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I am working on a PromptLibrary (<a href="https://promptlib.prashamhtrivedi.in/" rel="nofollow">https://promptlib.prashamhtrivedi.in/</a>) to organise my prompts and make it accessible from multiple clients (Including chatbots (via chrome extensions), CLIs, IDE extensions amongst the few).</p><p>I wanted a library to store my own prompts once and retrieve it in multiple locations (i.e. Try something on claude desktop and then once I wrinkle out the edges, load it in Roo code or claude code and use it.) Give some variables to the prompt and creating infinite versions of same prompt by providing the value. Or having the versions of each prompt.</p><p>Currently I have the landing page, soon (In max 10 days) I will make it live for everyone to use.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818420"><td></td></tr>
            <tr id="43818638"><td></td></tr>
            <tr id="43815934"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815934" href="https://news.ycombinator.com/vote?id=43815934&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôm working on extending Postgres to run on top of FoundationDB. The goal would be turning Postgres into a distributed, horizontally scalable database with automatic sharding and replication.</p><p>Hoping to share a first version of it soon. It‚Äôs been absolutely fascinating digging into Postgres internals!</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818244"><td></td></tr>
                  <tr id="43815553"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815553" href="https://news.ycombinator.com/vote?id=43815553&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Currently working on HN Alerts ‚Äî a simple free site I made to alert me (via email) to trending stories on Hacker News.</p><p>It sends me an email once a story hits a certain number of upvotes per minute, so it's useful for keeping track of breaking news.</p><p><a href="https://hnalerts.com/" rel="nofollow">https://hnalerts.com</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43816391"><td></td></tr>
                <tr id="43816425"><td></td></tr>
                  <tr id="43817316"><td></td></tr>
                <tr id="43817786"><td></td></tr>
                <tr id="43817899"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43817899" href="https://news.ycombinator.com/vote?id=43817899&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Yep, it notifies you when you get comments on your HN posts. The existing one only tracks replies to comments.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                              <tr id="43818467"><td></td></tr>
            <tr id="43818516"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818516" href="https://news.ycombinator.com/vote?id=43818516&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Trying to make interpretability research practical. A bit early for the demo, but I am getting some interesting results for large multimodal models in terms of their reasoning.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818708"><td></td></tr>
            <tr id="43817713"><td></td></tr>
            <tr id="43818342"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818342" href="https://news.ycombinator.com/vote?id=43818342&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I'm working on a programmer's calculator specifically as a companion for legacy computer programming. It's geared toward the kind of calculations a person might need when writing 6502 assembly language. It even uses the C-64 palette of colours.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43815813"><td></td></tr>
            <tr id="43816875"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816875" href="https://news.ycombinator.com/vote?id=43816875&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm building an open source game backend for Unity and Godot: <a href="https://trytalo.com/" rel="nofollow">https://trytalo.com</a>. GitHub: <a href="https://github.com/talodev">https://github.com/talodev</a>.</p><p>Talo makes it easy to add systems that traditionally need extra non-gameplay build time like authentication, player analytics and game stats.</p><p>Right now you can drop Talo into your game or use the API directly. Importantly, I‚Äôve made Talo easy to self-host and you can point the Unity package/Godot plugin to your own Talo instance.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817695"><td></td></tr>
                <tr id="43817725"><td></td></tr>
                <tr id="43817838"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43817838" href="https://news.ycombinator.com/vote?id=43817838&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I appreciate you enjoying the game! I work for IPinfo but initially made it as a sort of meme for our users.</p><p>I'm generating random IP addresses on the frontend, then making an call to our free API to validate the "realness" of the IP addresses ‚Äî mainly to remove bogon IP addresses, non-routable IPs, and IPs from large ASNs (national ISPs, the DoD, car companies, etc.).</p><p>Our free API supports 1,000 requests per day from unique IP addresses, so there shouldn't be any issues for low usage. However, if we get more power users who enjoy the game, I‚Äôll switch to our Lite API service (which is also free, <a href="https://ipinfo.io/lite" rel="nofollow">https://ipinfo.io/lite</a>) to validate IP addresses, as it supports unlimited requests.</p><p>Let me know if you have any feedback for me :) I made it mostly by "vibe coding", I will write a post about the whole process of it.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817778"><td></td></tr>
                <tr id="43817916"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43817916" href="https://news.ycombinator.com/vote?id=43817916&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I work for IPinfo ‚Äî I described my process of how I made the game in the other comment.</p><p>Using a dataset-based implementation would require me to have a backend, which is out of the scope of this project. Right now, I'm generating random IPv4 addresses, but if I were generating random IPv6 addresses, I would have to go the database route. For that, I would use our free IPinfo Lite dataset: <a href="https://ipinfo.io/lite" rel="nofollow">https://ipinfo.io/lite</a></p><p>My colleagues actually developed an extremely fast algorithm to select truly random IPv6 IPs from a series of CIDRs, which is what you see reflected in our dataset.</p><p>Let me know if you have any feedback or suggestions for me, please.</p></div></td></tr>
        </tbody></table></td></tr>
                                        <tr id="43817046"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817046" href="https://news.ycombinator.com/vote?id=43817046&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm prototyping a Depth Anything[1] -assisted segment annotation tool, with an eye toward plant detection in non-agriculture environments (where the backdrop is an endless sea of green complexity). Even if the task I have in mind doesn't pan out, I think this tool could be useful to people for other difficult segmentation tasks.</p><p>[1] - <a href="https://depth-anything-v2.github.io/" rel="nofollow">https://depth-anything-v2.github.io/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818134"><td></td></tr>
            <tr id="43817654"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817654" href="https://news.ycombinator.com/vote?id=43817654&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm still mulling how to go about porting my tiling window manager for Windows[1] to another platform, or even if I'll do it at all. There is some demand, but I don't know if there is _enough_ demand</p><p>Regardless of if I target macOS or Linux first, this would be a pretty full time endeavour on my part. I could wait until the commercial use licenses of the Windows version sustain me enough to be able to work on this full time, or try to raise a Kickstarter for $X00,000 to be able to quit my 9-5 and work on porting full time for a year or so</p><p>[1]: <a href="https://github.com/LGUG2Z/komorebi">https://github.com/LGUG2Z/komorebi</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43815847"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815847" href="https://news.ycombinator.com/vote?id=43815847&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I've been working on mock:
<a href="https://dhuan.github.io/mock/" rel="nofollow">https://dhuan.github.io/mock/</a></p><p>the process of creating APIs for testing and automation should be as easy possible. the tools that exist nowadays for this purpose aren't good enough IMHO, which led me to build it.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816048"><td></td></tr>
                <tr id="43817644"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43817644" href="https://news.ycombinator.com/vote?id=43817644&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Please keep posting updates about this because if I could instantly fire up a game in my browser, I would definitely pay for that and play with it all day!</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43815584"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815584" href="https://news.ycombinator.com/vote?id=43815584&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>A reactive notebook with managed side effects for building backend/AI-engineering pipelines.</p><p>Reactivity can update the state of the notebook automatically, so you don't have to keep track of which cells to execute again. Side effects are managed to make it easier to reason about while maintaining reactivity and ability to interact with the outside world.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817625"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817625" href="https://news.ycombinator.com/vote?id=43817625&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Taking a break from my agentic AI framework for prototypes and makers arkaine(1) and made two fun useful apps for myself</p><p>1. Eli5 equations(2) uses an LLM to convert a given picture of an equation to latex and, if given additional context, breaks down the equation parts to explain it. Gemini for the model.</p><p>2. reflecta - a journal prompting app with deepseek to help reword and target the prompts towards you better.</p><p>(1) <a href="https://arkaine.dev/" rel="nofollow">https://arkaine.dev</a></p><p>(2) <a href="https://eli5equation.com/" rel="nofollow">https://eli5equation.com</a></p><p>(3) <a href="https://reflecta.hlfshell.ai/" rel="nofollow">https://reflecta.hlfshell.ai</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818161"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818161" href="https://news.ycombinator.com/vote?id=43818161&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I manage remote engineering teams and I'm building a series of tools to help facilitate our standard ceremonies (standups, retros, ice-breakers etc.).</p><p>I'm trying to capture a sense of fun, wonder and connection through these tools which I feel has been lost in recent times with remote working.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817941"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817941" href="https://news.ycombinator.com/vote?id=43817941&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>LLM document editor using your voice only.</p><p>Sounds basic, and it is, but I've yet to find any open source project (let alone product) that does this.</p><p>All I want to tap a button, talk to the little guy about how to update my document, and see the changes flow. I guess Claude projects or similar might do this but I'm making it more for friends and family. Current use case is keeping track of a house renovation project going on.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817721"><td></td></tr>
            <tr id="43818377"><td></td></tr>
            <tr id="43817956"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817956" href="https://news.ycombinator.com/vote?id=43817956&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I develop Chips of Fury, a poker app for playing privately with friends. Currently I am building support for lots of home game variations like pineapple (regular, crazy, lazy), different Holdem variations like Super, reverse, super reverse, blind man's bluff etc and many more. I am thinking about how to implement AI bots for a wide range of variations.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817771"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817771" href="https://news.ycombinator.com/vote?id=43817771&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôm working on supporting photo posts on my blog (Kirby), I bought a new camera and thought it would be nice to share them in one place (Cross post to Mastodon).</p><p>I‚Äôm still looking for a new SaaS idea, so if you have something you want to partner on do reach out. Preferably Rails or Go. Previously I built stuff like <a href="https://getbirdfeeder.com/" rel="nofollow">https://getbirdfeeder.com/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818045"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818045" href="https://news.ycombinator.com/vote?id=43818045&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I‚Äôm working on <a href="https://vimgolf.ai/" rel="nofollow">https://vimgolf.ai</a>, to help me learn new vim commands and in doing so hopefully help others. Right now, still working on adding the ai assisted level creation for each motion, but more to come on that.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818087"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818087" href="https://news.ycombinator.com/vote?id=43818087&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Is it possible to add an interactive challenge or two on the homepage prior to sign up? I think that would hook people in and make them want to sign up.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818220"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43818220" href="https://news.ycombinator.com/vote?id=43818220&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Good idea, currently I spin up a 2 neovim instances for each challenge, so can only spin up so many at once with my current setup. But, am moving to a kubernetes setup where I can scale up and down the number of neovim instances more reliably and will add that in then.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818230"><td></td></tr>
                <tr id="43818271"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43818271" href="https://news.ycombinator.com/vote?id=43818271&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I have, but all the JS vim clones are emulations of vim, and don't support all the vim motions (like copying from registers, etc). I honestly could do that and it would be easier, but doing it this way, also allows me to record the keystrokes directly from the neovim runtime.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                                    <tr id="43818396"><td></td></tr>
            <tr id="43817981"><td></td></tr>
            <tr id="43815856"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815856" href="https://news.ycombinator.com/vote?id=43815856&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>No Pizza On Luna, a graphic novel about a future run by AIs who have discovered that the best way to get humans to do what they want is to present as patronizing, unctuous clowns. Http://egypt.urnash.com/npol/</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818451"><td></td></tr>
            <tr id="43817813"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817813" href="https://news.ycombinator.com/vote?id=43817813&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Honestly a little bit hesitant to say anything yet. There are a few more features to add, and a whole lot more work to be done to showcase just how cool it is. But the short version is, I'm working on a sort of meta-pico8, a game maker for WebGL2 2d pixel art games (e.g. 320x180 games like Animal Well) that runs in the browser, but one that's firstly collaborative, so that we can all build it together. And some of the coolest features are the based around that. For example, I got arbitrary imports of user code working <i>in the browser</i>, so all you have to do is create an account, add a JS file, and other people can import it as if it were a built-in module, and it <i>just works</i>. Plus the SDK I ended up making is simple, and the API is clean, and there's a few innovations in the GUI layer that I'm excited to share. I wish I could explain just how cool this is.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818358"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818358" href="https://news.ycombinator.com/vote?id=43818358&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Interesting, I have been working on a similar project, albeit 320x240.</p><p>I also got some code-share and collaboration features working, but got a bit stuck on fonts.  But I can appreciate your feeling of 'how cool this is'</p><p>I ground to a halt once I realised I had no barrier to entry, ie it could be cloned very easily.  Always an issue with Web Development I guess.  Plus I hate what modern browsers have become in recent years and not sure I want to target such a fast moving platform.  I got burned once already with WebStart 'warning this app might do something scary' and certificate fiasco.</p><p>I thought about some native binaries, but I know I am kidding myself.  I had an ios app that was pixel cloned within 6 months.  But somehow a web app feels like publishing straight into public domain.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43818198"><td></td></tr>
            <tr id="43818732"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818732" href="https://news.ycombinator.com/vote?id=43818732&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Building a simplified inexpensive &lt;20 nanometer accurate vacuum-tolerant positioning stage for microscopy and lithography projects.  Trying to unlock the caveman achievement by keeping tools/budgets necessary to replicate the work accessible for other hobbyists.</p><p>Also still working on a custom Slicer for a special metal printer design. The VTK library version needed replaced by a simpler Blender Geometry nodes solution to extract texture information, and infill hull features.</p><p>Also considered a beautiful solution to Roger Penrose's Andromeda paradox. That guy has a wicked sense of humor... very funny. =3</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43815966"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815966" href="https://news.ycombinator.com/vote?id=43815966&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I am working on the <a href="https://moviemovie.club/about" rel="nofollow">https://moviemovie.club/about</a>, it's a tiny website about film review.</p><p>It works like a run club, where you have to make a review first to see other people's reviews.</p><p>I am currently implementing watchlists, comments and a mural to make it feel a bit less lonely. Right now I like the UI but it feels to lonely.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43817805"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43817805" href="https://news.ycombinator.com/vote?id=43817805&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>This seems like it would only work if ‚Äúreviews‚Äù would be something rare to come by. Like some forums where you have to contribute to be able to download attachments, or see higher level subforums.</p><p>But reviews are everywhere, good ones too so it will be a hard chicken egg problem to solve.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43817741"><td></td></tr>
            <tr id="43815569"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815569" href="https://news.ycombinator.com/vote?id=43815569&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôm still working on these.</p><p>SaaS - I'm working on this mostly marketing that tech.. harder than it looks am I right? <a href="https://prfrmhq.com/" rel="nofollow">https://prfrmhq.com</a> - see <a href="https://news.ycombinator.com/item?id=43538744">https://news.ycombinator.com/item?id=43538744</a> [Show HN: My SaaS for performance reviews setting goals and driving success]</p><p>- Shows I can use AI and I've integrated into AWS Bedrock</p><p>- Shows I can integrate with Stripe for payments</p><p>Consulting (Architecture, Strategy, Tech) - I'm working on getting my consultancy started. If anyone wants the kind of skills I offer here let‚Äôs talk <a href="https://architectfwd.com/" rel="nofollow">https://architectfwd.com</a></p><p>Next SaaS - Starting a SaaS for managing core strategy and tech concepts. I created goals for it but I‚Äôm failing to kick the tyres</p><p>Last night I actually also started playing with firebase studio, though the app I prompted isn‚Äôt even doing save of the document properly. I figure can‚Äôt be me but will try again and work through the errors.</p><p>And playing drums, must get better</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817738"><td></td></tr>
            <tr id="43818452"><td></td></tr>
            <tr id="43816262"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816262" href="https://news.ycombinator.com/vote?id=43816262&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm working on a long-term project to better understand Operating Systems, video game development, and Rust by building the simplest possible OS in Rust that boots directly into a game of Doom, which will also be re-written in Rust.</p><p>I'm giving myself 18 months- it's been super fun so far!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817397"><td></td></tr>
            <tr id="43817993"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817993" href="https://news.ycombinator.com/vote?id=43817993&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>1. Helping set up a friend's company to scale. 
2. Interview about homeschool for my blog
3. A software project I'm not ready to talk about ;)</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43815882"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815882" href="https://news.ycombinator.com/vote?id=43815882&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>A language learning app for couples (<a href="https://couplingcafe.com/" rel="nofollow">https://couplingcafe.com</a>). I wanted to learn my wife's native language, so I've been building this on my own for a long time and testing solutions! Just a few paying happy users. Cooking up a lot of ideas</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817969"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817969" href="https://news.ycombinator.com/vote?id=43817969&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Trying to measure how well LLMs can make scientific hypotheses, and more generally, execute on the scientific process (as part of a pivot in my PhD).</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818062"><td></td></tr>
            <tr id="43818092"><td></td></tr>
            <tr id="43817804"><td></td></tr>
            <tr id="43816304"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816304" href="https://news.ycombinator.com/vote?id=43816304&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm making some minor changes to my personal site/blog to improve contrast, have a more uniform usage of colours throughout, and also replacing "categories" with tags so that I can have related content easily linked and searchable.</p><p>I may also finally finish implementing WebMentions support too as a kind of comment section.</p><p>I may also work some more on my long-term relaxation/creative maze generation and solver project.</p><p>At work, I keep putting off yet more refactorings that are required because of poor/missing requirements and non-technical leadership of the project.</p><p>It wouldn't be so bad, but part of this "new" project involves communicating with some awful SharePoint """database""", as well as a poorly designed real database (it has multiple values in one column, not even with any standard, just sometimes there's extra numbers I need to parse, sometimes not - just lots of this type of crap repeated everywhere), and the worst development/deployment experience I've ever had to deal with in ~10 years.</p><p>To write code involves Remote desktop to what was a single core VM (and much protesting gained me... one extra core) to Windows Server 2016 meaning most modern/nice developer tooling isn't supported, and deployments are all done by copy pasting files over yet more <i>nested</i> remote desktop sessions.</p><p>Sadly there's no real way of automating any of this, every suggestion is always a "default no", again most of the tools I'd need for this won't run on Windows Server 2016, and even if I worked around it the stakes are way too high for "It's easier to ask forgiveness than it is to get permission".</p><p>The turn around time for even a small change is huge because of this mental burden, it's a complete slog to get anything done.</p><p>So I guess what I'm saying is I've been casually looking around at jobs this month.</p><p>This is why I always stress the importance of being able to work on my own projects, because otherwise, I'd have burnt out.</p><p>/rant</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816017"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816017" href="https://news.ycombinator.com/vote?id=43816017&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Just finished porting Boot.dev's backend learning path to TypeScript (used to only be available in Python/Go, now also Python/TS)</p><p>Official release is Cinco de Mayo, I'm very excited!</p><p><a href="https://www.boot.dev/" rel="nofollow">https://www.boot.dev</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817612"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817612" href="https://news.ycombinator.com/vote?id=43817612&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm working on platform that helps you vibe code APIs. It'll generate clean, scalable, maintainable monolithic backend APIs built using Express + Postgres.</p><p>Launch soon! Drop a comment if you want early access</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816226"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816226" href="https://news.ycombinator.com/vote?id=43816226&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I have two:</p><p>The first is a preventive maintenance and calibration tracker (<a href="https://pmcal.net/" rel="nofollow">https://pmcal.net</a>) that was born out of my day job as an engineer in small business manufacturing.</p><p>The second is an AI engine for pulling structured data out of incoming email (either via IMAP on your email server or via SES). If you think of the engine that powers TripIt, they had to write about 10,000 different ingestors for each airline and hotel and travel booking site. With a structured output AI, the need to write specific ingestors goes away.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816440"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816440" href="https://news.ycombinator.com/vote?id=43816440&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I updated the catalogue of movies and added some internal tools to my movies released on YouTube website: We Love Free Movies (<a href="https://welovefreemovies.com/" rel="nofollow">https://welovefreemovies.com/</a>). It's hard to share it because it gets flagged because of the name... But yeah, planning to add search, design touch ups, more movies, etc. this year.</p><p>Also working out the logistics of offering a microgrant to award people who want to make movies like this!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816316"><td></td></tr>
            <tr id="43816065"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816065" href="https://news.ycombinator.com/vote?id=43816065&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Schematic and PCB design relating to Lighting and Control Systems for my main job.  Schematics and PCB Design after hours as a contractor too, because I have a daughter now, my wife can't work, and life has become /very/ expensive in Sydney.</p><p>What I'd love to be working on: Try to initiate a high voltage arc through the air to a target device, and modulate it to send "Data over Lightning", like Alyx does in Half-Life 2. It won't work the way it does in the game, but I'd it's an idea I've had for a long time and I'd love to prototype it some day.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43815862"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815862" href="https://news.ycombinator.com/vote?id=43815862&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Still working on <a href="https://theretowhere.com/" rel="nofollow">https://theretowhere.com</a> since I announced it to HN in February.</p><p>It's an website who's goal is to make it easier to find apartments/hotels/etc that fit your housing preferences (starting with places that are close to the people and things you care about).  It's flagship feature is the ability to make heatmaps of cities based on your preferences.</p><p>Since February I've slowed down on feature development temporarily as I try and find a way to sustainably increase it's popularity and learn what's the most important thing to focus on next.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818219"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818219" href="https://news.ycombinator.com/vote?id=43818219&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I‚Äôm working on a simple app that logs Karting activity and data. My son has been karting for a year or so, and there is so much data to collect - times, pressures, sprocket set up, track location, weather and more (about 30 datapoints a session)</p><p>Collecting the data helps with recording engine performance, tyre ages, best lap times but is also really useful for recalling how well each setup performed for future reference.</p><p>I‚Äôm deliberately doing this all in a very low-tech way as my son will be creating a more polished version for a school project. We‚Äôre front-running that a bit to give him a good dataset and explore various ideas.</p><p>On that note, they do Python in school. For the backend it will be SqlLite and Flask. Any suggestions for the front end tech? This will mostly be forms- and grids-based so nothing sophisticated needed, but some simple client-side logic (e.g. validation, geolocation, simple stop watch) would be good. Ideally this would be python as well. We could use WebAssembly but am wondering if there is a suitable framework that does the is out-of-the-box.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43815838"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815838" href="https://news.ycombinator.com/vote?id=43815838&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I'm working on a workflow automation tool that lets devs write workflows in simple yaml files, and then deploy them to the cloud _or_ on premise. Each workflow is a set of actions and a trigger that can transform data, make api calls, run AI models, or really anything (via docker!). Each step relies on the output of the last step, and the workflow framework is engineering to be declarative, testable, and versioned. Similar to GitHub actions, but for *anything*. Think webhook to slack, email to support ticket, nightly aws backup &amp; restore, mirror a file each night, etc.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816256"><td></td></tr>
            <tr id="43816278"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816278" href="https://news.ycombinator.com/vote?id=43816278&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Mostly just exams this month haha, but technically a self-hostable workout tracking app.</p><p>The only self-hosted option I found was wger.de and while it looks great, it's a bit too much for my needs. I want something lightweight (so as not to hog resources on my cheap VPS) that does what it needs to do and nothing more.</p><p>It's been a while since I've done web dev, so I'm going to try out Deno (TypeScript) with htmx.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817628"><td></td></tr>
                <tr id="43818563"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818563" href="https://news.ycombinator.com/vote?id=43818563&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Great work, I've been using Stock Events on iOS for a while now. It's what got me into dividend investing, and it's fantastic to just keep track off all the dividend income.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43816215"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816215" href="https://news.ycombinator.com/vote?id=43816215&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Very early stage, no link, but I have been working on getting terminal fonts (like Cascadia Code) to work in the browser more progressively without requiring such a giant single download, and on using them for text-based animations. One of those unimportant, low-stakes kind of projects that makes it relaxing to work on :P.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816064"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816064" href="https://news.ycombinator.com/vote?id=43816064&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm working on a correlation matrix with Svelte 5.</p><p>It has hierarchical clustering, rolling correlation charts, a minimap, time series data detrending, and 2D matrix virtualization (to render only visible cells to the DOM).</p><p>It has up to 130K matrix cells and correlates up to 23.5M time series data points.</p><p><a href="https://covary.xyz/" rel="nofollow">https://covary.xyz</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818349"><td></td></tr>
            <tr id="43818790"><td></td></tr>
            <tr id="43817618"><td></td></tr>
            <tr id="43816115"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816115" href="https://news.ycombinator.com/vote?id=43816115&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>[1] Surveys. Thinking about how to tighten up the onboarding experience, improve brand awareness, improve in-app data analysis, and how to integrate AI in new and exciting ways... and handling customer support tickets!</p><p>[1]<a href="https://www.zigpoll.com/" rel="nofollow">https://www.zigpoll.com</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816113"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816113" href="https://news.ycombinator.com/vote?id=43816113&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I'm working on a distributed object storage system to be the backing store behind my website (<a href="https://scmscx.com/" rel="nofollow">https://scmscx.com</a>). It currently uses back blaze b2 which is good and cheap but I thought it would be fun to roll my own.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817948"><td></td></tr>
            <tr id="43816296"><td></td></tr>
                <tr id="43818077"><td></td></tr>
                  <tr id="43817733"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817733" href="https://news.ycombinator.com/vote?id=43817733&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Working on an electronic dictionary for my sister. She wanted something to look words up in Italian that wasn't her phone, and well I like a project. E-paper display, snapdome keyboard, an ESP32 to round it out. (Runs lisp.)</p><p>Pictures at the link. There's also some webtoys on there, feel free to peruse</p><p><a href="https://lmao.center/babble/" rel="nofollow">https://lmao.center/babble/</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43817807"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43817807" href="https://news.ycombinator.com/vote?id=43817807&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>This is kinda cool.</p><p>I would use a polished version.</p><p>When I read books, I find myself getting easily distracted since my phone has so many alternative apps/things to do OTHER THAN looking up a word in a dictionary.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43816332"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816332" href="https://news.ycombinator.com/vote?id=43816332&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I'm working on a desktop-based, performance- and privacy-first note-taking app that lets you quickly capture notes from any selected text using hotkeys.</p><p>I'm curious: what are your must-haves in a note-taking application?</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43818479"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818479" href="https://news.ycombinator.com/vote?id=43818479&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I thought about doing something similar some time ago, because I never quite found the perfect note taking app for myself. There's a million ways how to do notes, and it feels like there's just as many different notes apps.</p><p>Eventually, I've settled with Obsidian because of its simplicity and extensibility. You can leave it with basic features and truly own your notes in a simple format (you can also put them into any cloud, as long as that cloud reaches your filesystem). It doesn't do everything just like I'd want to, but I've thought about just building another notes app that reads and writes to the same path your Obsidian notes are in, instead of trying to cover every possible editing feature like most big notes apps. Then I'd use different apps for different needs, with one place to store data.</p><p>Since you're focusing on privacy, have you considered using Obsidian? Is there anything particular you want to do differently?</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816590"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43816590" href="https://news.ycombinator.com/vote?id=43816590&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>&gt; I'm curious: what are your must-haves in a note-taking application?</p><p>Unlimited undos. Even if I deleted text a year ago, app must bring it back. Ideally something like git, with branches and auto-commits.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43817791"><td></td></tr>
            <tr id="43817891"><td></td></tr>
            <tr id="43816223"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816223" href="https://news.ycombinator.com/vote?id=43816223&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>working on saying no to new projects, i have a tendency to fill up all the time i have available with startups or creative ideas.</p><p>thinking about taking dancing lessons instead, maybe afrobeats.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816280"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43816280" href="https://news.ycombinator.com/vote?id=43816280&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I'm just currently spending my free time learning elixir/phoenix to build some fun useless real time apps just to learn the ins and outs of it all</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817743"><td></td></tr>
                <tr id="43817816"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43817816" href="https://news.ycombinator.com/vote?id=43817816&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Clarify?</p><p>Are you building a Google Trends like tool?</p><p>I've been using / testing out such tools lately for market research + discovering new ideas etc.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43818405"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818405" href="https://news.ycombinator.com/vote?id=43818405&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>While Git is great at asynchronous collaboration, its a bit clunky to try and work on the same commit with other devs or across devices.
This is because Git tracks what changed, not how it changed.</p><p>Imagine if you were on the same branch as somebody else, or another device, and your working directories could be synced.
It'd also be cool for the commit history to be a bit richer, so you could see who, what and when for a change at a keystroke level.</p><p>So I'm working on real-time sync for Git!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818030"><td></td></tr>
            <tr id="43816072"><td></td></tr>
                <tr id="43817846"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43817846" href="https://news.ycombinator.com/vote?id=43817846&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>This is a dope idea, nice job!</p><p>I would love to see some UI/UX improvements like split view where the map is on the left and the news reading/scrolling happens on the right reading pane instead of on the bottom while horizontally scrolling.</p><p>You could even use AI/LLM's to summarize the most important news from each country etc.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43817582"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817582" href="https://news.ycombinator.com/vote?id=43817582&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I'm working on a customer service product, that aims to bridge the gap in the industry now.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818490"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818490" href="https://news.ycombinator.com/vote?id=43818490&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Im working on a slackbot that translates passive aggressive messages into empathic speech.</p><p><a href="https://goodpeech.chat/" rel="nofollow">https://goodpeech.chat</a></p><p>While it‚Äôs not been launched yet, it‚Äôs pretty much done, but not officially launched yet, no marketing, no visitors, only friends and family so far!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816679"><td></td></tr>
            <tr id="43816233"><td></td></tr>
            <tr id="43818099"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43818099" href="https://news.ycombinator.com/vote?id=43818099&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>I recently got into embedded development and built a small 12V Bluetooth relay that lets me start my ATV without a physical key. I shared it with some friends, but mostly got blank stares and a few "but why?"s. ¬Ø\(„ÉÑ)/¬Ø I just don't like carrying keys.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43815752"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815752" href="https://news.ycombinator.com/vote?id=43815752&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>I just discovered a new meta-discipline, which most likely will become a new science.</p><p>I know, it sounds crazy.</p><p>In a month or so, I‚Äôll be sharing some news.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43817723"><td></td></tr>
            <tr id="43815795"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43815795" href="https://news.ycombinator.com/vote?id=43815795&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>A TigerBeetle client for Haskell.</p><p>The smallest (in terms of system calls and code) event sourcing database I can make.</p><p>Being more present.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43818507"><td></td></tr>
            <tr id="43816076"><td></td></tr>
            <tr id="43815807"><td></td></tr>
            <tr id="43818528"><td></td></tr>
            <tr id="43817988"><td></td></tr>
                <tr id="43818202"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43818202" href="https://news.ycombinator.com/vote?id=43818202&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div>
                  <p>Are there standardized e-bike battery formats or are you hoping to partner with e-bike manufacturers?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43817924"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43817924" href="https://news.ycombinator.com/vote?id=43817924&amp;how=up&amp;goto=item%3Fid%3D43815523"></a></center>    </td><td><br><div><p>Working on a bitmap vectorizer for my SVG editor Hyvector <a href="https://www.hyvector.com/" rel="nofollow">https://www.hyvector.com</a></p><p>I am also working on the last few remaining issues of Hyvector, of which some are surprisingly difficult to solve and AI unfortunately cannot help me a lot.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43816334"><td></td></tr>
            <tr id="43815776"><td></td></tr>
            <tr id="43816306"><td></td></tr>
            <tr id="43816267"><td></td></tr>
            <tr id="43816343"><td></td></tr>
            </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tiny Emulators (131 pts)]]></title>
            <link>https://floooh.github.io/tiny8bit-preview/</link>
            <guid>43815511</guid>
            <pubDate>Sun, 27 Apr 2025 22:06:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://floooh.github.io/tiny8bit-preview/">https://floooh.github.io/tiny8bit-preview/</a>, See on <a href="https://news.ycombinator.com/item?id=43815511">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <div>
  <p>Visual 6502 Remix</p>
  <p><a href="https://floooh.github.io/visual6502remix"><img src="https://floooh.github.io/tiny8bit-preview/ext/visual6502remix.webp"></a>
</p></div>
<div>
  <p>Visual Z80 Remix</p>
  <p><a href="https://floooh.github.io/visualz80remix"><img src="https://floooh.github.io/tiny8bit-preview/ext/visualz80remix.webp"></a>
</p></div>



<div>
  <p>KC Compact</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?type=kccompact"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?type=kccompact"><img src="https://floooh.github.io/tiny8bit-preview/cpc/kccompact.webp"></a>
</p></div>
<div>
  <p>Amstrad CPC464</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?type=cpc464"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?type=cpc464"><img src="https://floooh.github.io/tiny8bit-preview/cpc/cpc464.webp"></a>
</p></div>
<div>
  <p>Amstrad CPC6128</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html"><img src="https://floooh.github.io/tiny8bit-preview/cpc/cpc6128.webp"></a>
</p></div>
<div>
  <p>ZX Spectrum 48k</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?type=zx48k"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?type=zx48k"><img src="https://floooh.github.io/tiny8bit-preview/zx/zx48k.webp"></a>
</p></div>
<div>
  <p>ZX Spectrum 128</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?type=zx128"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?type=zx128"><img src="https://floooh.github.io/tiny8bit-preview/zx/zx128.webp"></a>
</p></div>
<div>
  <p>Commodore VIC-20</p>
<a href="https://floooh.github.io/tiny8bit-preview/vic20-ui.html"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/vic20.html"><img src="https://floooh.github.io/tiny8bit-preview/vic20/vic20.webp"></a>
</p></div>
<div>
  <p>Commodore C64</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html"><img src="https://floooh.github.io/tiny8bit-preview/c64/c64.webp"></a>
</p></div>
<div>
  <p>Acorn Atom</p>
<a href="https://floooh.github.io/tiny8bit-preview/atom-ui.html"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/atom.html"><img src="https://floooh.github.io/tiny8bit-preview/atom/atom.webp"></a>
</p></div>
<div>
  <p>LC-80</p>
  <p><a href="https://floooh.github.io/tiny8bit-preview/lc80.html"><img src="https://floooh.github.io/tiny8bit-preview/lc80/lc80.webp"></a>
</p></div>
<div>
  <p>Robotron Z1013</p>
<a href="https://floooh.github.io/tiny8bit-preview/z1013-ui.html"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/z1013.html"><img src="https://floooh.github.io/tiny8bit-preview/z1013/z1013.webp"></a>
</p></div>
<div>
  <p>Robotron Z9001</p>
<a href="https://floooh.github.io/tiny8bit-preview/z9001-ui.html"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/z9001.html"><img src="https://floooh.github.io/tiny8bit-preview/z9001/z9001.webp"></a></p><p>(with BASIC and RAM modules)</p>
</div>
<div>
  <p>Robotron KC87</p>
<a href="https://floooh.github.io/tiny8bit-preview/z9001-ui.html?type=kc87"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/z9001.html?type=kc87"><img src="https://floooh.github.io/tiny8bit-preview/z9001/kc87.webp"></a></p><p>BASIC[Enter]</p>
</div>
<div>
  <p>FORTH (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?mod=m026&amp;mod_image=kc85/forth.853&amp;input=SWITCH%208%20C1%0AFORTH%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?mod=m026&amp;mod_image=kc85/forth.853&amp;input=SWITCH%208%20C1%0AFORTH%0A"><img src="https://floooh.github.io/tiny8bit-preview/kc85/forth.webp"></a>
</p></div>
<div>
  <p>FORTH (Z1013)</p>
<a href="https://floooh.github.io/tiny8bit-preview/z1013-ui.html?type=z1013_64&amp;file=z1013/z1013_forth.z80"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/z1013.html?type=z1013_64&amp;file=z1013/z1013_forth.z80"><img src="https://floooh.github.io/tiny8bit-preview/z1013/z1013_forth.webp"></a>
</p></div>
<div>
  <p>BASIC (Z1013)</p>
<a href="https://floooh.github.io/tiny8bit-preview/z1013-ui.html?type=z1013_64&amp;file=z1013/kc_basic.z80"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/z1013.html?type=z1013_64&amp;file=z1013/kc_basic.z80"><img src="https://floooh.github.io/tiny8bit-preview/z1013/z1013_basic.webp"></a>
</p></div>
<div>
  <p>ASMDEV (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?mod=m027&amp;mod_image=kc85/develop.853&amp;input=SWITCH%208%20C1%0AMENU%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?mod=m027&amp;mod_image=kc85/develop.853&amp;input=SWITCH%208%20C1%0AMENU%0A"><img src="https://floooh.github.io/tiny8bit-preview/kc85/development.webp"></a>
</p></div>
<div>
  <p>CP/M 2.2 (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/6128sp_4.dsk&amp;input=%7Ccpm%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/6128sp_4.dsk&amp;input=%7Ccpm%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/cpm_cpc.webp"></a>
</p></div>
<div>
  <p>DTC (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/dtc_cpc.dsk&amp;input=run%22-DTC%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/dtc_cpc.dsk&amp;input=run%22-DTC%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/dtc.webp"></a></p><p>by Arkos/Overlanders</p>
</div>
<div>
  <p>Tire Au Flan (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/tireauflan_cpc.dsk&amp;input=run%22TAFAPLIB%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/tireauflan_cpc.dsk&amp;input=run%22TAFAPLIB%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/tireauflan.webp"></a></p><p>press SPACE!</p>
</div>
<div>
  <p>Wolfenstrad (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/wolfenstrad.dsk&amp;input=run%22-WOLF%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/wolfenstrad.dsk&amp;input=run%22-WOLF%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/wolfenstrad.webp"></a></p><p>by Dirty Minds</p>
</div>
<div>
  <p>Byte'98 (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/byte98.dsk&amp;input=run%22-BYTE%2798%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/byte98.dsk&amp;input=run%22-BYTE%2798%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/byte98.webp"></a></p><p>by mortel/Overlanders</p>
</div>
<div>
  <p>Ecole Buissonniere</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/ecole_buissonniere.dsk&amp;input=run%22ecole%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/ecole_buissonniere.dsk&amp;input=run%22ecole%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/ecole_buissonniere.webp"></a></p><p>by MadRam/OVL (CPC)</p>
</div>
<div>
  <p>Demoizart (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/demoizart_cpc.dsk&amp;input=run%22DIA%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/demoizart_cpc.dsk&amp;input=run%22DIA%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/demoizart.webp"></a></p><p>strobe warning!</p>
</div>
<div>
  <p>Logon's Run (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/logons_run_cpc.dsk&amp;input=run%22logon%27s%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/logons_run_cpc.dsk&amp;input=run%22logon%27s%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/logons_run.webp"></a></p><p>by Overflow/Logon System</p>
</div>
<div>
  <p>YAP! (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/yet_another_plasma.dsk&amp;input=run%22-yap%21%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/yet_another_plasma.dsk&amp;input=run%22-yap%21%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/yet_another_plasma.webp"></a></p><p>by Logon System</p>
</div>
<div>
  <p>Backtro (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/backtro.dsk&amp;input=run%22-backtro%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/backtro.dsk&amp;input=run%22-backtro%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/backtro.webp"></a></p><p>by Overflow/Logon System</p>
</div>
<div>
  <p>Isometrikum (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/isometrikum.dsk&amp;input=run%22isometri.kum%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/isometrikum.dsk&amp;input=run%22isometri.kum%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/isometrikum.webp"></a></p><p>by Vanity</p>
</div>
<div>
  <p>SotB Demo (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/ovf-prev.dsk&amp;input=run%22-PREVIEW%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/ovf-prev.dsk&amp;input=run%22-PREVIEW%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/sotb_cpc.webp"></a></p><p>"Preview 1", then SPACE!</p>
</div>
<div>
  <p>Points Barres (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/points_barres.dsk&amp;input=run%22-PBARRES%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/points_barres.dsk&amp;input=run%22-PBARRES%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/points_barres.webp"></a></p><p>press SPACE!</p>
</div>
<div>
  <p>Still Rising (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/stillrising.dsk&amp;input=run%22-RISING%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/stillrising.dsk&amp;input=run%22-RISING%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/stillrising.webp"></a></p><p>by Vanity</p>
</div>
<div>
  <p>Octopus Pocus (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/octopuspocus.dsk&amp;input=run%22OCTOPUS%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/octopuspocus.dsk&amp;input=run%22OCTOPUS%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/octopuspocus.webp"></a></p><p>by Pulpo Corrosivo</p>
</div>
<div>
  <p>Gloire a Piou! (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/piou.dsk&amp;input=run%22gap%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/piou.dsk&amp;input=run%22gap%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/piou.webp"></a></p><p>by Overlanders</p>
</div>
<div>
  <p>phX / Condense (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/phx.dsk&amp;input=run%22phx%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/phx.dsk&amp;input=run%22phx%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/phx.webp"></a></p><p>by Condense</p>
</div>
<div>
  <p>Batman Forever (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/batman_forever.dsk&amp;input=run%22disc%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/batman_forever.dsk&amp;input=run%22disc%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/batman_forever.webp"></a></p><p>by Batman Group</p>
</div>
<div>
  <p>CRTC (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/crtc.dsk&amp;input=run%22crtc%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/crtc.dsk&amp;input=run%22crtc%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/crtc.webp"></a></p><p>by benediction &amp; Arkos</p>
</div>
<div>
  <p>Wunderbar (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/wunderbar.dsk&amp;input=run%22wunder.bar%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/wunderbar.dsk&amp;input=run%22wunder.bar%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/wunderbar.webp"></a></p><p>by Arkos/Benediction</p>
</div>
<div>
  <p>Phortem (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/phortem.dsk&amp;input=run%22phortem%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/phortem.dsk&amp;input=run%22phortem%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/phortem.webp"></a></p><p>by Condense</p>
</div>
<div>
  <p>Pheelone (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/pheelone_2009condense.dsk&amp;input=run%22pheelone%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/pheelone_2009condense.dsk&amp;input=run%22pheelone%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/pheelone.webp"></a></p><p>by Condense</p>
</div>
<div>
  <p>Phreaks (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/phreaks_2010condense.dsk&amp;input=run%22phreaks%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/phreaks_2010condense.dsk&amp;input=run%22phreaks%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/phreaks.webp"></a></p><p>by Condense</p>
</div>
<div>
  <p>Phat 2 (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/phat_2.dsk&amp;input=run%22phat2%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/phat_2.dsk&amp;input=run%22phat2%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/phat_2.webp"></a></p><p>by Condense</p>
</div>
<div>
  <p>Wobbler (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/wobbler.dsk&amp;input=run%22-wobbler%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/wobbler.dsk&amp;input=run%22-wobbler%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/wobbler.webp"></a></p><p>by TAF</p>
</div>
<div>
  <p>Battro (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/battro.dsk&amp;input=run%22battro%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/battro.dsk&amp;input=run%22battro%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/battro.webp"></a></p><p>by Batman Group</p>
</div>
<div>
  <p>Rebels 1989 (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/rebels1989_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/rebels1989_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/rebels1989_c64.webp"></a></p><p>by Rebels</p>
</div>
<div>
  <p>$777 (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/s777_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/s777_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/s777_c64.webp"></a></p><p>by Razor 1911</p>
</div>
<div>
  <p>The Wobbler (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/wobbler_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/wobbler_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/wobbler_c64.webp"></a></p><p>by Abyss Connection</p>
</div>
<div>
  <p>Dawnfall (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/dawnfall_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/dawnfall_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/dawnfall_c64.webp"></a></p><p>by Oxyron</p>
</div>
<div>
  <p>+H4K (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/h4k_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/h4k_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/h4k_c64.webp"></a></p><p>by Plush</p>
</div>
<div>
  <p>Crapman (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/crapman_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/crapman_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/crapman_c64.webp"></a></p><p>by Latex</p>
</div>
<div>
  <p>Kongo2 (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/kongo2_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/kongo2_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/kongo2_c64.webp"></a></p><p>by Cruel Soldiers</p>
</div>
<div>
  <p>C.Intentional (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/cintentional_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/cintentional_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/cintentional_c64.webp"></a></p><p>by Vision</p>
</div>
<div>
  <p>Sour &amp; Salty (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/soursalty_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/soursalty_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/soursalty_c64.webp"></a></p><p>by Artline Designs</p>
</div>
<div>
  <p>Nightcrawler (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/nightcrawler_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/nightcrawler_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/nightcrawler_c64.webp"></a></p><p>by Almagest</p>
</div>
<div>
  <p>Arcade Intro (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/arcade02_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/arcade02_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/arcade02_c64.webp"></a></p><p>by Arcade</p>
</div>
<div>
  <p>In A Loop 1K (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/inaloop_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/inaloop_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/inaloop_c64.webp"></a></p><p>by Ate Bit</p>
</div>
<div>
  <p>Dubious 4K (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/dubious_c64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/dubious_c64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/dubious_c64.webp"></a></p><p>by Fairlight</p>
</div>
<div>
  <p>Space Invaders (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/space_invaders_demo.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/space_invaders_demo.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/space_invaders_demo.webp"></a></p><p>by Hokuto Force</p>
</div>
<div>
  <p>Rewind (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/rewind_tempest.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/rewind_tempest.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/rewind_tempest.webp"></a></p><p>by TempesT</p>
</div>
<div>
  <p>Tunnel Vision (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/tunnelvision_omg.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/tunnelvision_omg.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/tunnelvision_omg.webp"></a></p><p>by OMG</p>
</div>
<div>
  <p>Party Horse (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/party_horse.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/party_horse.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/party_horse.webp"></a></p><p>by Booze Design</p>
</div>
<div>
  <p>Funny Rasters (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/funnyrasters.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/funnyrasters.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/funnyrasters.webp"></a></p><p>by Excess</p>
</div>
<div>
  <p>Field Sort (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/lft-field-sort.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/lft-field-sort.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/lft-field-sort.webp"></a></p><p>by Lft</p>
</div>
<div>
  <p>One Bit Wonder (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/onebitwonder.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/onebitwonder.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/onebitwonder.webp"></a></p><p>by Offence et al.</p>
</div>
<div>
  <p>Swirl (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/swirl_by_dnp.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/swirl_by_dnp.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/swirl_by_dnp.webp"></a></p><p>by DnP</p>
</div>
<div>
  <p>The Earth (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/the_earth_party_ver.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/the_earth_party_ver.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/the_earth_party_ver.webp"></a></p><p>by eins</p>
</div>
<div>
  <p>F600 (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/f600.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/f600.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/f600.webp"></a></p><p>by Hokuto Force &amp; PVM</p>
</div>
<div>
  <p>Reflections (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/reflections.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/reflections.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/reflections.webp"></a></p><p>by Plush</p>
</div>
<div>
  <p>Summer of 64 (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/summerof64.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/summerof64.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/summerof64.webp"></a></p><p>by Offence</p>
</div>
<div>
  <p>One-Der (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/oneder_oxyron.prg"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/oneder_oxyron.prg"><img src="https://floooh.github.io/tiny8bit-preview/c64/oneder_oxyron.webp"></a></p><p>by Oxyron</p>
</div>
<div>
  <p>PPY (VIC20)</p>
<a href="https://floooh.github.io/tiny8bit-preview/vic20-ui.html?file=vic20/proxima_ppy.prg&amp;exp=maxram"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/vic20.html?file=vic20/proxima_ppy.prg&amp;exp=maxram"><img src="https://floooh.github.io/tiny8bit-preview/vic20/proxima_ppy.webp"></a></p><p>by Proxima</p>
</div>
<div>
  <p>Muna.Paluu (VIC20)</p>
<a href="https://floooh.github.io/tiny8bit-preview/vic20-ui.html?file=vic20/munakois.prg&amp;exp=ram8k"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/vic20.html?file=vic20/munakois.prg&amp;exp=ram8k"><img src="https://floooh.github.io/tiny8bit-preview/vic20/munakois.webp"></a></p><p>by Dekadence</p>
</div>
<div>
  <p>Serious (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/serious.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/serious.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/serious.webp"></a></p><p>by Moods Plateau</p>
</div>
<div>
  <p>Twenty (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/twenty.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/twenty.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/twenty.webp"></a></p><p>by Moods Plateau</p>
</div>
<div>
  <p>Ancient Civilizations (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/ancient.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/ancient.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/ancient.webp"></a></p><p>by Moods Plateau</p>
</div>
<div>
  <p>Stereo (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/stereo.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/stereo.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/stereo.webp"></a></p><p>by Moods Plateau</p>
</div>
<div>
  <p>Fractal Dimension (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/anaglyph.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/anaglyph.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/anaglyph.webp"></a></p><p>by Moods Plateay</p>
</div>
<div>
  <p>Digger (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?mod=m022&amp;file=kc85/digger3.tap"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?mod=m022&amp;file=kc85/digger3.tap"><img src="https://floooh.github.io/tiny8bit-preview/kc85/digger_3.webp"></a>
</p></div>
<div>
  <p>Jungle (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?mod=m022&amp;file=kc85/jungle.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?mod=m022&amp;file=kc85/jungle.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/jungle.webp"></a>
</p></div>
<div>
  <p>Pengo (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?file=kc85/pengo.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?file=kc85/pengo.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/pengo.webp"></a>
</p></div>
<div>
  <p>House (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?file=kc85/house.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?file=kc85/house.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/house.webp"></a>
</p></div>
<div>
  <p>Cave (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?file=kc85/cave.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?file=kc85/cave.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/cave.webp"></a>
</p></div>
<div>
  <p>Cave (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?mod=m022&amp;file=kc85/cave2.853"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?mod=m022&amp;file=kc85/cave2.853"><img src="https://floooh.github.io/tiny8bit-preview/kc85/cave2.webp"></a></p><p>better alt. version</p>
</div>
<div>
  <p>Labyrinth (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?file=kc85/labyrinth.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?file=kc85/labyrinth.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/labyrinth.webp"></a>
</p></div>
<div>
  <p>Pacman (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?file=kc85/pacman.kcc&amp;input=PACMAN%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?file=kc85/pacman.kcc&amp;input=PACMAN%0A"><img src="https://floooh.github.io/tiny8bit-preview/kc85/pacman.webp"></a>
</p></div>
<div>
  <p>Ladder (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?file=kc85/ladder-3.kcc&amp;input=LADDER%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?file=kc85/ladder-3.kcc&amp;input=LADDER%0A"><img src="https://floooh.github.io/tiny8bit-preview/kc85/ladder.webp"></a>
</p></div>
<div>
  <p>Chess (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/chess.kcc&amp;input=CHESS%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/chess.kcc&amp;input=CHESS%0A"><img src="https://floooh.github.io/tiny8bit-preview/kc85/chess.webp"></a>
</p></div>
<div>
  <p>Enterprise (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/enterpri.tap"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/enterpri.tap"><img src="https://floooh.github.io/tiny8bit-preview/kc85/enterprise.webp"></a>
</p></div>
<div>
  <p>Mad Breakin (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?mod=m022&amp;file=kc85/breakin.853"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?mod=m022&amp;file=kc85/breakin.853"><img src="https://floooh.github.io/tiny8bit-preview/kc85/breakin.webp"></a>
</p></div>
<div>
  <p>Tetris (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/tetris.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/tetris.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/tetris.webp"></a>
</p></div>
<div>
  <p>Sokoban (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/sokoban4.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/sokoban4.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/sokoban4.webp"></a>
</p></div>
<div>
  <p>Boulderdash (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/boulderdash_c64.prg&amp;joystick=digital_1"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/boulderdash_c64.prg&amp;joystick=digital_1"><img src="https://floooh.github.io/tiny8bit-preview/c64/boulderdash_c64.webp"></a></p><p>press F1 on start screen</p>
</div>
<div>
  <p>Boulderdash (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/boulder_dash.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/boulder_dash.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/boulderdash_cpc.webp"></a>
</p></div>
<div>
  <p>Boulderdash (ZX48k)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/boulderdash_zx.z80&amp;joystick=kempston&amp;type=zx48k"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/boulderdash_zx.z80&amp;joystick=kempston&amp;type=zx48k"><img src="https://floooh.github.io/tiny8bit-preview/zx/boulderdash_zx.webp"></a></p><p>select Kempston joystick!</p>
</div>
<div>
  <p>Boulderdash (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?mod=m022&amp;file=kc85/boulder3.tap"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?mod=m022&amp;file=kc85/boulder3.tap"><img src="https://floooh.github.io/tiny8bit-preview/kc85/boulderdash_3.webp"></a>
</p></div>
<div>
  <p>Boulderdash (KC85/4)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc854-ui.html?file=kc85/bd2010.kcc"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc854.html?file=kc85/bd2010.kcc"><img src="https://floooh.github.io/tiny8bit-preview/kc85/bd2010.webp"></a>
</p></div>
<div>
  <p>Boulderdash (Z1013)</p>
<a href="https://floooh.github.io/tiny8bit-preview/z1013-ui.html?file=z1013/boulderdash_1_0.z80"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/z1013.html?file=z1013/boulderdash_1_0.z80"><img src="https://floooh.github.io/tiny8bit-preview/z1013/boulderdash_z1013.webp"></a>
</p></div>
<div>
  <p>Bomb Jack (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/bomb_jack.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/bomb_jack.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/bombjack_cpc.webp"></a>
</p></div>
<div>
  <p>Bomb Jack (ZX48k)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/bombjack_zx.z80&amp;joystick=kempston&amp;type=zx48k"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/bombjack_zx.z80&amp;joystick=kempston&amp;type=zx48k"><img src="https://floooh.github.io/tiny8bit-preview/zx/bombjack_zx.webp"></a></p><p>select Kempston joystick!</p>
</div>
<div>
  <p>Bomb Jack (Arcade)</p>
<a href="https://floooh.github.io/tiny8bit-preview/bombjack-ui.html"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/bombjack.html"><img src="https://floooh.github.io/tiny8bit-preview/bombjack/bombjack.webp"></a></p><p>1 for coins, Enter to start</p>
</div>
<div>
  <p>Pengo (Arcade)</p>
<a href="https://floooh.github.io/tiny8bit-preview/pengo-ui.html"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/pengo.html"><img src="https://floooh.github.io/tiny8bit-preview/pengo/pengo.webp"></a></p><p>1 for coins, Enter to start</p>
</div>
<div>
  <p>Zaxxon (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/zaxxon_c64.prg&amp;joystick=digital_2"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/zaxxon_c64.prg&amp;joystick=digital_2"><img src="https://floooh.github.io/tiny8bit-preview/c64/zaxxon_c64.webp"></a>
</p></div>
<div>
  <p>Dig Dug (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/digdug_c64.prg&amp;joystick=digital_1"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/digdug_c64.prg&amp;joystick=digital_1"><img src="https://floooh.github.io/tiny8bit-preview/c64/digdug_c64.webp"></a>
</p></div>
<div>
  <p>Cybernoid (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/cybernoid.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/cybernoid.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/cybernoid_cpc.webp"></a>
</p></div>
<div>
  <p>Cybernoid (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/cybernoid_c64.prg&amp;joystick=digital_12"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/cybernoid_c64.prg&amp;joystick=digital_12"><img src="https://floooh.github.io/tiny8bit-preview/c64/cybernoid_c64.webp"></a>
</p></div>
<div>
  <p>Arkanoid (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/arkanoid.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/arkanoid.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/arkanoid_cpc.webp"></a>
</p></div>
<div>
  <p>Arkanoid RoD (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/arkanoid2_cpc.dsk&amp;joystick=true&amp;input=run%22arkanoid%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/arkanoid2_cpc.dsk&amp;joystick=true&amp;input=run%22arkanoid%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/arkanoid2_cpc.webp"></a>
</p></div>
<div>
  <p>Arkanoid RoD (ZX128)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/arkanoid_zx128k.z80&amp;joystick=sinclair1"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/arkanoid_zx128k.z80&amp;joystick=sinclair1"><img src="https://floooh.github.io/tiny8bit-preview/zx/arkanoid_zx128k.webp"></a>
</p></div>
<div>
  <p>Batty (ZX48K)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?type=zx48k&amp;file=zx/batty.z80&amp;joystick=kempston"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?type=zx48k&amp;file=zx/batty.z80&amp;joystick=kempston"><img src="https://floooh.github.io/tiny8bit-preview/zx/batty.webp"></a>
</p></div>
<div>
  <p>Breakout (KC85/3)</p>
<a href="https://floooh.github.io/tiny8bit-preview/kc853-ui.html?file=kc85/breakout.kcc&amp;input=BREAKOUT%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/kc853.html?file=kc85/breakout.kcc&amp;input=BREAKOUT%0A"><img src="https://floooh.github.io/tiny8bit-preview/kc85/breakout.webp"></a>
</p></div>
<div>
  <p>Silkworm (ZX128)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/silkworm_zx128k.z80&amp;joystick=kempston"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/silkworm_zx128k.z80&amp;joystick=kempston"><img src="https://floooh.github.io/tiny8bit-preview/zx/silkworm_zx128k.webp"></a></p><p>select Kempston joystick!</p>
</div>
<div>
  <p>Silkworm (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/silkworm_cpc.dsk&amp;joystick=true&amp;input=run%22disc%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/silkworm_cpc.dsk&amp;joystick=true&amp;input=run%22disc%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/silkworm_cpc.webp"></a>
</p></div>
<div>
  <p>Great Escape (ZX128)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/the_great_escape.z80&amp;joystick=kempston"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/the_great_escape.z80&amp;joystick=kempston"><img src="https://floooh.github.io/tiny8bit-preview/zx/the_great_escape.webp"></a></p><p>select Kempston joystick!</p>
</div>
<div>
  <p>Flying Shark (ZX48K)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?type=zx48k&amp;file=zx/flying_shark.z80&amp;joystick=kempston"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?type=zx48k&amp;file=zx/flying_shark.z80&amp;joystick=kempston"><img src="https://floooh.github.io/tiny8bit-preview/zx/flying_shark.webp"></a></p><p>select Kempston joystick!</p>
</div>
<div>
  <p>Chase HQ (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/chase_hq.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/chase_hq.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/chasehq_cpc.webp"></a>
</p></div>
<div>
  <p>Chase HQ (ZX128)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/chase_hq.z80&amp;joystick=kempston"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/chase_hq.z80&amp;joystick=kempston"><img src="https://floooh.github.io/tiny8bit-preview/zx/chase_hq.webp"></a>
</p></div>
<div>
  <p>Ghosts'n'Goblins (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/ghosts_n_goblins.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/ghosts_n_goblins.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/ghostsngoblins_cpc.webp"></a>
</p></div>
<div>
  <p>Ghosts'n'Goblins (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/ghostsngoblins_c64.prg&amp;joystick=digital_12"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/ghostsngoblins_c64.prg&amp;joystick=digital_12"><img src="https://floooh.github.io/tiny8bit-preview/c64/ghostsngoblins_c64.webp"></a>
</p></div>
<div>
  <p>Fruity Frank (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/fruity_frank.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/fruity_frank.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/fruityfrank_cpc.webp"></a>
</p></div>
<div>
  <p>1943 (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/1943.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/1943.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/1943_cpc.webp"></a>
</p></div>
<div>
  <p>Dragon Ninja (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/dragon_ninja.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/dragon_ninja.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/dragonninja_cpc.webp"></a>
</p></div>
<div>
  <p>Gryzor (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/gryzor.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/gryzor.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/gryzor_cpc.webp"></a>
</p></div>
<div>
  <p>Astro Marine Corps (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/astro_marine_corps.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/astro_marine_corps.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/astro_marine_corps.webp"></a>
</p></div>
<div>
  <p>Bruce Lee (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/bruce_lee.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/bruce_lee.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/bruce_lee.webp"></a>
</p></div>
<div>
  <p>Bruce Lee (ZX48K)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?type=zx48k&amp;file=zx/bruce_lee.z80&amp;joystick=kempston"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?type=zx48k&amp;file=zx/bruce_lee.z80&amp;joystick=kempston"><img src="https://floooh.github.io/tiny8bit-preview/zx/bruce_lee.webp"></a>
</p></div>
<div>
  <p>Intern.Karate (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/intern_karate_cpc.dsk&amp;joystick=true&amp;input=run%22karate%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/intern_karate_cpc.dsk&amp;joystick=true&amp;input=run%22karate%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/intern_karate_cpc.webp"></a>
</p></div>
<div>
  <p>IK+(CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/intern_karate_plus_cpc.dsk&amp;joystick=true&amp;input=run%22IK%2B%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/intern_karate_plus_cpc.dsk&amp;joystick=true&amp;input=run%22IK%2B%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/intern_karate_plus_cpc.webp"></a>
</p></div>
<div>
  <p>Ikari Warriors (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/ikari_warriors.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/ikari_warriors.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/ikariwarriors_cpc.webp"></a>
</p></div>
<div>
  <p>Head over Heels (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/head_over_heels.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/head_over_heels.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/headoverheels_cpc.webp"></a>
</p></div>
<div>
  <p>Head over Heels (ZX)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/head_over_heels.z80&amp;joystick=sinclair2"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/head_over_heels.z80&amp;joystick=sinclair2"><img src="https://floooh.github.io/tiny8bit-preview/zx/head_over_heels.webp"></a>
</p></div>
<div>
  <p>Rick Dangerous (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/rick_dangerous.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/rick_dangerous.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/rickdangerous_cpc.webp"></a>
</p></div>
<div>
  <p>Prince of Persia (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/prince_of_persia_cpc.dsk&amp;joystick=true&amp;input=run%22prince%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/prince_of_persia_cpc.dsk&amp;joystick=true&amp;input=run%22prince%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/prince_of_persia_cpc.webp"></a>
</p></div>
<div>
  <p>Nebulus (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?file=cpc/nebulus_cpc.dsk&amp;joystick=true&amp;input=run%22nebulus%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?file=cpc/nebulus_cpc.dsk&amp;joystick=true&amp;input=run%22nebulus%0A"><img src="https://floooh.github.io/tiny8bit-preview/cpc/nebulus_cpc.webp"></a>
</p></div>
<div>
  <p>Nebulus (C64)</p>
<a href="https://floooh.github.io/tiny8bit-preview/c64-ui.html?file=c64/nebulus_c64.prg&amp;joystick=digital_1"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/c64.html?file=c64/nebulus_c64.prg&amp;joystick=digital_1"><img src="https://floooh.github.io/tiny8bit-preview/c64/nebulus_c64.webp"></a>
</p></div>
<div>
  <p>Live and Let Die (CPC)</p>
<a href="https://floooh.github.io/tiny8bit-preview/cpc-ui.html?type=cpc464&amp;file=cpc/live_and_let_die.sna&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/cpc.html?type=cpc464&amp;file=cpc/live_and_let_die.sna&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/cpc/live_and_let_die.webp"></a>
</p></div>
<div>
  <p>Cyclone (ZX48k)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/cyclone.z80&amp;joystick=kempston&amp;type=zx48k"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/cyclone.z80&amp;joystick=kempston&amp;type=zx48k"><img src="https://floooh.github.io/tiny8bit-preview/zx/cyclone.webp"></a></p><p>select Kempston joystick!</p>
</div>
<div>
  <p>Exolon (ZX48k)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/exolon.z80&amp;joystick=kempston&amp;type=zx48k"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/exolon.z80&amp;joystick=kempston&amp;type=zx48k"><img src="https://floooh.github.io/tiny8bit-preview/zx/exolon.webp"></a></p><p>select Kempston joystick!</p>
</div>
<div>
  <p>Quazatron (ZX128)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/quazatron.z80&amp;joystick=kempston"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/quazatron.z80&amp;joystick=kempston"><img src="https://floooh.github.io/tiny8bit-preview/zx/quazatron.webp"></a></p><p>select Kempston joystick!</p>
</div>
<div>
  <p>Rainbow Islands (ZX)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?file=zx/rainbow_islands.z80&amp;joystick=kempston"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?file=zx/rainbow_islands.z80&amp;joystick=kempston"><img src="https://floooh.github.io/tiny8bit-preview/zx/rainbow_islands.webp"></a>
</p></div>
<div>
  <p>Sir Fred (ZX48K)</p>
<a href="https://floooh.github.io/tiny8bit-preview/zx-ui.html?type=zx48k&amp;file=zx/sir_fred.z80&amp;joystick=kempston"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/zx.html?type=zx48k&amp;file=zx/sir_fred.z80&amp;joystick=kempston"><img src="https://floooh.github.io/tiny8bit-preview/zx/sir_fred.webp"></a></p><p>select Kempston joystick!</p>
</div>
<div>
  <p>Chucky Egg (Atom)</p>
<a href="https://floooh.github.io/tiny8bit-preview/atom-ui.html?file=atom/cchuck.tap&amp;joystick=mmc&amp;input=%2ALOAD%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/atom.html?file=atom/cchuck.tap&amp;joystick=mmc&amp;input=%2ALOAD%0A"><img src="https://floooh.github.io/tiny8bit-preview/atom/cchuck.webp"></a></p><p>press SPACE to start!</p>
</div>
<div>
  <p>Jet Set Willy (Atom)</p>
<a href="https://floooh.github.io/tiny8bit-preview/atom-ui.html?file=atom/jsw.tap&amp;joystick=mmc&amp;input=%2ALOAD%0A"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/atom.html?file=atom/jsw.tap&amp;joystick=mmc&amp;input=%2ALOAD%0A"><img src="https://floooh.github.io/tiny8bit-preview/atom/jsw.webp"></a></p><p>select JOYMMC!</p>
</div>
<div>
  <p>Alien Blitz (VIC-20)</p>
<a href="https://floooh.github.io/tiny8bit-preview/vic20-ui.html?file=vic20/alienblitz_vic20.prg&amp;joystick=true"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/vic20.html?file=vic20/alienblitz_vic20.prg&amp;joystick=true"><img src="https://floooh.github.io/tiny8bit-preview/vic20/alienblitz_vic20.webp"></a>
</p></div>
<div>
  <p>Mazogs (Z1013)</p>
<a href="https://floooh.github.io/tiny8bit-preview/z1013-ui.html?file=z1013/mazog_deutsch.z80"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/z1013.html?file=z1013/mazog_deutsch.z80"><img src="https://floooh.github.io/tiny8bit-preview/z1013/mazogs_z1013.webp"></a>
</p></div>
<div>
  <p>Galactica (Z1013)</p>
<a href="https://floooh.github.io/tiny8bit-preview/z1013-ui.html?file=z1013/galactica.z80"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/z1013.html?file=z1013/galactica.z80"><img src="https://floooh.github.io/tiny8bit-preview/z1013/galactica_z1013.webp"></a>
</p></div>
<div>
  <p>Demolation (Z1013)</p>
<a href="https://floooh.github.io/tiny8bit-preview/z1013-ui.html?file=z1013/demolation.z80"><p>UI</p></a>  <p><a href="https://floooh.github.io/tiny8bit-preview/z1013.html?file=z1013/demolation.z80"><img src="https://floooh.github.io/tiny8bit-preview/z1013/demolation_z1013.webp"></a>
</p></div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Boxie ‚Äì an always offline audio player for my 3 year old (156 pts)]]></title>
            <link>https://mariozechner.at/posts/2025-04-20-boxie/</link>
            <guid>43814934</guid>
            <pubDate>Sun, 27 Apr 2025 20:40:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mariozechner.at/posts/2025-04-20-boxie/">https://mariozechner.at/posts/2025-04-20-boxie/</a>, See on <a href="https://news.ycombinator.com/item?id=43814934">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>



<p>2025-04-26</p>

<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/boxie-header.png">
<figcaption>Channeling the spirit of the Gameboy</figcaption>

<p><strong>Table of Contents</strong>
</p><ul><li><a href="#toc_0">What I learned these past months</a></li><li><a href="#toc_1">Like a Game Boy, but for audiobooks</a></li><li><a href="#toc_2">The cartridge</a></li><li><a href="#toc_3">The cartridge slot connector</a></li><li><a href="#toc_4">Selecting a DAC, amp and speaker</a></li><li><a href="#toc_5">ESP32-S3 board with power management and battery charging</a><ul><li><a href="#toc_6">USB-C</a></li><li><a href="#toc_7">ESP32-S3</a></li><li><a href="#toc_8">Battery charging via BQ25171-Q1</a></li><li><a href="#toc_9">Power management</a></li><li><a href="#toc_10">PCB Layout</a></li><li><a href="#toc_11">Soldering the board</a></li></ul></li><li><a href="#toc_12">Buttons, knobs and enclosure</a></li><li><a href="#toc_13">Software</a></li><li><a href="#toc_14">Mario, how do I build this myself?</a></li><li><a href="#toc_15">Future work</a></li><li><a href="#toc_16">Bonus content: USB cartridge reader</a></li><li><a href="#toc_17">Bonus content: modding the Andonstar AD249S-M digital microscope</a></li></ul>
<p>At the end of July 2024, I embarked on a journey to learn electronics so I could build little gadgets for my son. In my <a href="https://mariozechner.at/posts/2024-07-25-electronic-nights-1/">introductory post</a> I described a few electronic toys he uses frequently, including the <a href="https://www.tonies.com/">Tonie Box</a>, a device that plays audiobooks and has a <a href="https://www.tonie.io/books">huge library</a> of content. The Tonie Box is great, until it isn't. As outlined in my original post, it has several deficiencies. Back then, I didn't think I would ever be able to build my own replacement.</p>
<p>Fast forward a few months, and I've learned enough electronics to build my son's own audio player. Here's the preliminary result:</p>

<p>It's been in "prod" since January 2025. It's his daily driver, be it at the breakfast table or when going for stroll in his buggy. Yes, the volume control is backwards. Easy to fix in software.</p>
<h2 id="toc_0">What I learned these past months</h2>
<p>It turned out to be easier than I thought. I had to pick up these skills:</p>
<ul>
<li>Learn how to solder all kinds of components, including surface mounted components</li>
<li>Abandon Arduino and embrace the <a href="https://www.espressif.com/en/products/socs/esp32">ESP32 line of microcontrollers</a>, which are a million times more versatile, powerful and cheaper.</li>
<li>Learn how to read integrated circuit (IC) datasheets, and how to combine multiple ICs without things exploding</li>
<li>Learn how to use Electronic Design Automation software like <a href="https://www.kicad.org/">KiCad</a> or in my case <a href="https://easyeda.com/pro">EasyEDA Pro</a>, to create my own PCB designs</li>
<li>Learn how to use CAD software to design enclosures I can print with my 3D printer. Coming from game development, I had previous exposure to 3D modelling software, which helps a lot. I ended up using <a href="https://www.autodesk.com/products/fusion-360/overview">Fusion 360</a> for this, which has a free tier.</li>
</ul>
<p>I also had to buy myself some tools. Here's my battle station.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/battlestation.jpg" alt="Battle Station">

<p>The list of all my tools (with purchase links):</p>
<ul>
<li><a href="https://www.ersa-shop.com/produkt/rds80-elektronisch-geregelte-loetstation-80w/">ERSA RDS80 soldering station</a>. One of the higher-priced amateur soldering stations, but it's a workhorse. I use the <a href="https://www.reichelt.at/at/de/shop/produkt/loetspitze_0832kdlf_2_2_mm_meisselfoermig_gerade-19360">832KDLF 2.2mm chisel tip</a> almost exclusively. Also get the <a href="https://www.amazon.de/dp/B00725AW18">dry cleaner metal wool</a>. It's vastly superior to the included sponge for cleaning the soldering iron tip.</li>
<li><a href="https://www.amazon.de/armack-L%C3%B6tdraht-Typ32-3-%C3%98-100g/dp/B07JY712QD">armack typ32-3 0.5mm solder wire</a>, which works for pretty much anything, including hand soldering SMD components. I use 350C¬∞ on the soldering station. Lead-free.</li>
<li><a href="https://www.amazon.de/YIHUA-858D-Entl%C3%B6tstation-einstellbarer-Temperaturkontrolle/dp/B0BYSKPJQX">Yihua 85D hot air soldering stations</a>, a cheap and effective hot air "gun" for reflowing or desoldering components.</li>
<li><a href="https://www.amazon.de/MINIWARE-MHP50-Nano-Ceremic-Beschichtung-TemperaturHei%C3%9F-L%C3%B6tstation/dp/B0CRDYCHXS">Miniware MHP50 hot plate</a>, a marvelous little thing for soldering SMD components. Since most of my PCB designs are pretty small, I now mostly solder with this. More on that later.</li>
<li><a href="https://www.amazon.de/-/en/BEEYUIHF-Lead-free-Soldering-Lead-Free-Temperature/dp/B0BLNJMTRF/">Sn42 Bi58 soldering paste</a> used in conjunction with the hot plate to solder SMD components. The paste is usually applied via a <a href="https://www.youtube.com/watch?v=qyDRHI4YeMI">stencil (EEVblog Tutorial)</a>. For some components, or if I forgot to order a stencil along with the PCB, I use a tooth pick to apply the paste to the pads. This is a low temperature paste. I usually set the hot plate to 165C¬∞ without using a temperature profile, as recommended by the manufacturer. Works for me.</li>
<li><a href="https://www.amazon.de/dp/B0BQ32Q4FW">No clean lead-free Flux</a>. I usually have no need for that, because the flux in both the solder and the solder paste usually works just fine. There's probably better flux pastes. It's definitely not "no-clean". Get some <a href="https://www.amazon.de/dp/B0C4FKV9HY">isopropanol</a> and a cotton swab to clean the flux residue off the PCB.</li>
<li><a href="https://www.amazon.de/dp/B0CQQVRTDX">Soldering wick</a>. I use this to clean the hot plate after soldering if needed. Never succeeded using those to desolder anything. Hot air guns are better for that.</li>
<li><a href="https://www.amazon.de/dp/B07JWFJX9V">Magentic third hand</a>. Used to hold components while soldering. I barely use them.</li>
<li><a href="https://www.amazon.de/dp/B0D49K7KKD">Silicone soldering mat</a>. Essential, unless you hate your desk. I specifically chose this one without any compartments. I found mats with compartments to be a pain to clean and the compartments often get in the way.</li>
<li><a href="https://www.reichelt.at/at/de/shop/produkt/loetrauchabsaugung_st-1101d_160_w-364827">ATTEN ST1101D fume extractor with HEPA filter</a>, which is a must have if you want to keep your lungs intact. I solder in a small room at home with a big window. This has a 3 layer HEPA filter. Fume extractors often recommended to hobbyists are nothing more like a fan plus an active carbon filter, which is not effective at all. This includes the Weller ZeroSmog Shield Pro, which is an extremely expensive and ineffective joke.</li>
<li><a href="https://www.amazon.de/-/en/dp/B09VPP5G59">Andonstar AD249S-M digital microscope</a>. I'm old and this is essential for SMD soldering for me. I've modded this to be easier to use by designing a 3D printed contraption that allows me to mound the microscope to a <a href="https://www.amazon.de/dp/B001D7UYBO">Rode PSA1 articulated arm</a> which is mounted to my desk. Super easy to position the microscope. More on that later.</li>
<li><a href="https://www.amazon.de/-/en/dp/B0BLGD8D3G">Jubor 10x LED magnifying lamp</a>. I barely use this anymore, because my modded microscope is so good. You might get away with just this piece of equipment.</li>
<li><a href="https://en.alientek.com/Product_Details/45.html">Alientek DP100 digital power supply</a>. Great for powering test setups on a breadboard or individual components. Super compact. You don't necessarily need this, but I like it.</li>
<li><a href="https://www.amazon.de/dp/B09SPYTP84">Digital multimeter</a>. Again, there are probably many better options, but this cheap one works for me. You absolutely need a multimeter for debugging.</li>
<li><a href="https://www.amazon.de/dp/B0D941P128">YJOCK 360W USB C multimeter</a>. Most of my designs can be powered via USB-C. This little gadget allows me to measure the current draw of my designs easily.</li>
<li><a href="https://www.saleae.com/products/saleae-logic-pro-8">Saleae Logic Pro 8 logic analyzer</a>. You definitely won't need this. Before this project, I was developing my own embedded programming framework to handle various protocols for driving displays, audio and so on. So this came in handy a LOT to figure out whether it was my shoddy code, crappy connections, bad wiring, or a bad component.</li>
<li><a href="https://www.kleintools.co.uk/catalog/thermal-imagers/rechargeable-pro-thermal-imaging-camera-49000-pixels-wi-fi-data-transfer">KLEIN TOOLs TI290 thermal imager</a>. Helps me to identify hotspots on the PCB, likely due to bad soldering, a bad component, or a bad design. Touch is often enough to figure things out though, so you won't need this either. Probably.</li>
<li><a href="https://www.amazon.de/-/en/GJ706BL-Electronic-Precision-Electronics-Jewellery/dp/B09SL2TCH7">Side cutters</a>, <a href="https://www.amazon.de/dp/B07DFLFYDK">(ESD) Tweezers</a>, <a href="https://www.amazon.de/dp/B07477NW8P">long nose pliers</a>, <a href="https://www.amazon.de/dp/B07V3TDP49">electronic repair screwdriver set</a>,</li>
<li><a href="https://www.amazon.de/dp/B09QCRC9HP">Crimping pliers set</a>. Being able to crimp a connector to a wire is essential, especially if you do wiring inside custom enclosures. Many people will tell you to get some super expensive crimping pliers. Maybe they are better, but after following some YouTube tutorials and some practice, I can crimp pretty much any type of connector.</li>
<li><a href="https://www.amazon.de/-/en/10-22AWG-Stripper-Multifunctional-Professional-Craftsmanship/dp/B06X9875Z7">Wire stripper</a>. Same deal as with crimping pliers. I found this super simple and cheap pliers to be much more effective than dedicated wire strippers. Can also act as a wire cutter.</li>
<li><a href="https://www.amazon.de/dp/B08R9WLLSZ">Silicone electric wires, 22 AWG</a>. I love these. They are flexible and won't burn up if you touch them with a soldering iron. For some applications you may want thinner silicone wires. These worked fine for all my use cases so far. The important part is the silicone. You want to have lots of wires at home!</li>
<li><a href="https://www.amazon.de/dp/B0B48LM9SQ">Shrink tubing</a>. Because you don't want any exposed wires.</li>
<li><a href="https://www.amazon.de/dp/B0CSJVZK9R">M1-M1.7 Screws</a>, <a href="https://www.amazon.de/dp/B07XCB4MMW">M2-M3 screws</a>. Just get lots of screws. You can never have enough of them. Self tapping are pretty good if you want to screw into parts 3D printed with PLA (sample size: me).</li>
<li><a href="https://eater.net/breadboards">Breadboards</a>. Essential for prototyping.I use the boards from BusBoard. Follow the last link to learn why quality matters.</li>
<li><a href="https://www.amazon.de/dp/B0795DX46R">0805 SMD resistor and capacitor sample book</a>. This has saved me days of waiting for the mailman, when I ordered the wrong components for my PCB designs. The components aren't super high quality, but can avoid tears until your next order arrives.</li>
<li><a href="https://www.amazon.de/s?k=electronic+components+set">Any old electronics learning set</a>. You want LEDs, buttons, throughhole resistors and capacitors, switches, etc. Basically anything you can stick into a breadboard. This helps with prototyping. I got a few different kits as I learned and build up a little library of components that way.</li>
<li><a href="https://eu.store.bambulab.com/en-at/collections/3d-printer/products/x1-carbon">A 3D printed</a>. I understand that BambuLab has gotten a bad rap over the past few months. And I do own a Prusa printer as well. However, I'm old, and time is precious. And the X1 Carbon "just works". It's literally plug and play and produces excellent results without any need for tinkering. I'm sorry.</li>
</ul>
<p>Now, my recent blog entries may have given you the idea that I'll teach you everything needed to reach this stage. I'm afraid that's not the case. It would take considerable resources, which I'd rather spend on my family and personal projects.</p>
<p>However, the above list of tools and skills is a good starting point once you're past the "made an LED blink with an Arduino" stage. Many talented people have described (SMD) soldering, PCB design, and 3D modeling in depth, either in books or videos, much better than I could. See my previous posts for recommendations.</p>
<p>Studying existing designs is also a fantastic way to learn, just as with software. For example, all [Adafruit products] are open source, letting you study their schematics and PCB designs. Want to design a power management circuit? Check out their <a href="https://www.adafruit.com/product/2465">PowerBoost 1000</a> schematics and PCB layout files. Similarly, when creating my ESP32-based boards, I drew inspiration from <a href="https://unexpectedmaker.com/">Unexpected Maker</a> and <a href="https://waveshare.com/">Waveshare</a> designs. E.g. check out the [Waveshare ESP32-S3 Mini schematics]
(<a href="https://www.waveshare.com/wiki/ESP32-S3-Tiny">https://www.waveshare.com/wiki/ESP32-S3-Tiny</a>).</p>
<p>My final recommendation is to get away from Arduino as soon as you possibly can. It's a great way to learn, but eventually, you'll need to go one level deeper. That opens up a whole new world of possibilities. Like porting DOOM to the ESP32-S3 and have it run at 44FPS.</p>

<p>Eventually, you'll write your own Arduino like framework to handle all the low level stuff, like communicating with SPI displays, driving audio or neopixels, etc. My entry into this is <a href="https://github.com/badlogic/mcugdx/">mcugdx</a>, a simple C-API on top of <a href="https://github.com/espressif/esp-idf">ESP-IDF</a> that can already do a lot (on ESP32-S3 at least). You can also find the above DOOM port in the <a href="https://github.com/badlogic/mcugdx/tree/main/examples/doom">mcugdx examples</a>. I don't currently give support or documentation. If you know your way around ESP-IDF, you should be able to figure it out, given the examples and the sdkconfig files found in the repository.</p>
<p>In the remainder of this post, I'll go through the design process of Boxie, walk you through the schematics and PCB layout, show you how I came up with the 3D printed enclosure design, and give an overview of the software I wrote to make it all work.</p>
<h2 id="toc_1">Like a Game Boy, but for audiobooks</h2>
<p>I started by thinking about how I wanted the boy to interact with the device. I'm in love with the Game Boy form factor, so I wanted something similar in size and shape. It needed to be battery powered for portability.</p>
<p>Instead of the Tonie Box's volume-controlling ears, I wanted a simple knob. The Tonie Box requires hard smacks to change chapters or songs, which rarely works and often knocks the Tonie figure off. I opted for simple navigation buttons instead.</p>
<p>As for content storage, the Tonie Box keeps audio on an SD card, with Tonie figures acting as RFID tags that trigger specific audio files. This requires internet connectivity for downloading files and potentially gives the company usage data.</p>
<p>I wanted none of that. The device should be completely offline, with content delivered "physically" like the cassette tapes of my youth. A Game Boy cartridge form factor was perfect, but with a twist. Unlike a Game Boy where the cartridge label partially disappears into the slot, I wanted the cartridge label to remain fully visible.</p>
<p>This decision came from watching my boy in the car. When we listen to audiobooks through Android Auto and Spotify, he intently focuses on the cover art displayed on the dashboard. These covers, showing story characters, are distinct for each book. Having the cartridge visible lets him see the artwork while listening.</p>
<p>Yes, a protruding cartridge is a potential breaking point, but I'll make the design sturdy enough to handle it.</p>
<p>For reliability, I wanted the device to be as fail-safe as possible. No power button needed, inserting a cartridge turns it on, removing it turns it off. It should survive inevitable drops, which means using durable NiMH batteries instead of LiPos.</p>
<p>In summary, the device needs to be:</p>
<ul>
<li>Portable and battery powered via a safe battery type (NiMH)</li>
<li>Playback content from cartridges inserted at the top of the device, with the cartridge label always fully visible</li>
<li>Have a volume control knob and buttons for navigation</li>
<li>Turn on when a cartridge is inserted and turn off when the cartridge is removed, thereby saving battery</li>
<li>Never ever connect to the internet</li>
</ul>
<h2 id="toc_2">The cartridge</h2>
<p>Since I use an ESP32-S3 as the brain, I opted for micro SD cards as the medium to store audio files. It's super easy to access a FAT filesystem on an SD card via ESP-IDF. Just wire up the SD card's pins to the ESP32-S3's GPIOs and use the SD card API.</p>
<p>To elicit that Game Boy cartridge feel and to make inserting and removing the cartridge easy and sturdy, I designed a custom PCB that holds and exposes the micro SD card's pins, and a 3D printed cover onto which I could stick the label. You can view the end result in this instructional video for my SO, so she can assemble cartridges as well:</p>

<p>The PCB is a trivial 2 layer board. A micro SD card socket holds the card. Each of the pins is exposed to its corresponding big pad at the bottom of the PCB. Four M2 screw holes let me screw on the 3D printed cover.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/cartridge-layout.png" loading="lazy">

<p>To decide on the size, I drew a bunch of rectangles on millimeter grid paper and picked the one that looked right. Grid paper is your best friend when getting a feel for sizes!</p>
<p>I designed the cover in Fusion 360. I exported the PCB design from EasyEDA as a STEP file and imported it. I created a sketch at the top of the PCB, projected the PCB outline onto it, and extruded it to a depth that looked good. Finally, I added a cutout for the SD card socket, screw holes, and an indented area for the label. That took 5 minutes.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/cartridge-cover.png" loading="lazy">

<p>I sent off the PCB design to JLCPCB and ordered a batch of 100 PCBs, along with 100 SD card sockets from LCSC. I also printed 30 covers on my 3D printer.</p>
<p>I then proceeded to hand solder 100 SD card sockets onto 100 PCBs, cursing myself that I didn't order a stencil and didn't use JLCPCB's assembly service. It took 2 nights. I used a toothpick to apply the solder paste to the pads.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/cartridge-soldering.png" loading="lazy">
<video src="https://mariozechner.at/posts/2025-04-20-boxie/media/cartridge_2_320.mp4" controls="" loading="lazy"></video>
<video src="https://mariozechner.at/posts/2025-04-20-boxie/media/cartridge_1_320.mp4" controls="" loading="lazy"></video>

<p>Yeah, I'm dumb. You might have noticed the 2 capacitor pads on the PCB layout above. I ended up not populating those, which saved a bit of time.</p>
<h2 id="toc_3">The cartridge slot connector</h2>
<p>How do I connect the cartridge pads to the ESP32-S3? The Game Boy uses a traditional edge connector, with gold plated contacts on the cartridge and a corresponding connector in the slot.</p>
<p>Since I didn't know how to create "chamfered gold fingers" in EasyEDA or get JLCPCB to manufacture such PCBs, I tried a different approach. But not before failing first.</p>
<p>The cartridge design was inspired by <a href="https://www.youtube.com/watch?v=END_PVp3Eds&amp;t=748s">Abe's project</a>, which uses pogo pins on the cartridge reader to contact the cartridge pads:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/pogopins.png" loading="lazy">

<p>This didn't work at all. Getting the vertical spacing correct was extremely difficult, and even with decent spacing, inserting a cartridge was too tough for a 3 year old. The soldered pogo pins also bent easily.</p>
<p>After some thinking about the "3 year old friendly" requirement, I came up with this:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/connector-1.png" loading="lazy">
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/connector-2.png" loading="lazy">

<p>I used battery springs, which are sturdy enough to handle a 3 year old's enthusiasm. Instead of soldering, I use ring terminals crimped onto wires and screwed onto the battery springs in the 3D enclosure.</p>
<p>The result is easy to assemble, easy to repair, and (so far) indestructible. Here's the first cartridge insertion test:</p>

<p>The device's internals were still on a breadboard at this point, as I hadn't figured out the enclosure design yet.</p>
<h2 id="toc_4">Selecting a DAC, amp and speaker</h2>
<p>For mono music playback from an SD card, I needed a digital to analog converter (DAC) to transform and amplify digital audio from the ESP32-S3 to drive the speaker.</p>
<p>I chose the popular <a href="https://www.analog.com/media/en/technical-documentation/data-sheets/max98357a-max98357b.pdf">MAX98357A</a>. Adafruit sells a <a href="https://www.adafruit.com/product/3006">breakout board</a> for it, and there are many clones available.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/maxaudio.png" loading="lazy">

<p>The MAX98357A is a mono amplifier delivering up to 3W into a 4 Ohm speaker at 5V. Perfect for this project. It uses the <a href="https://en.wikipedia.org/wiki/I%C2%B2S">I2S protocol</a>, which my mcugdx framework already supported.</p>
<p>Given the amp specs, I went on a hunt for a good speaker. I ordered a few spec compliant speakers from Amazon and discovered the art of speaker enclosure design.</p>

<p>I settled on a Visaton FR 7/4, which offers good bandwidth and better sound quality than the Tonie Box speaker.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/visaton.png" loading="lazy">

<h2 id="toc_5">ESP32-S3 board with power management and battery charging</h2>
<p>Before starting this project, I actually dabbled in designing my own ESP32-S3 board. There are many great boards on the market, with those from <a href="https://www.waveshare.com/esp32-s3-tiny.htm">Waveshare</a> and <a href="https://unexpectedmaker.com/">Unexpected Maker</a> being my favorite. But I wanted to learn how to design such a board, should I ever need something that's not available on the market.</p>
<p>Turns out, I needed exactly that. None of the existing boards support charging NiMH batteries. They often don't have undervoltage protection built-in, but instead rely on measuring the voltage via GPIO and then switching the ESP32-S3 into deep sleep. I wanted to avoid that. Some also don't work well with both USB-C and a battery connected simultaneously. A requirement for my device, as I don't want to unplug the batteries just to connect a USB-C cable for flashing new software or debugging.</p>
<p>I went through a few iterations and eventually ended up with this:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/esp32.png" loading="lazy">

<p>The board serves as a foundation for all my project designs. Its features aren't specific to this project, but rather include capabilities I've found useful across all my projects:</p>
<ul>
<li>Charging 3x AAA NiMH or a single cell 3.7V LiPo battery via USB-C at 0.5A. Battery chemistry is selected via a dip switch. Optional overheating protection via thermistor.</li>
<li>Shares the power coming in via USB-C between battery charging and the rest of the device</li>
<li>Exposure of all available GPIOs</li>
<li>Under voltage lock out IC that cuts of power if the voltage is below 3.08V</li>
<li>Low drop out voltage regulator 160mA @ 1A, fixed at 3.3V output</li>
<li>USB-C flashing and debugging (comes for free with ESP32-S3 if you wire up the correct USB-C pins to the ESP32-S3)</li>
</ul>
<p>Here's the full schematic:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/schematic.svg" loading="lazy">

<p>Let me walk you through the schematic real quick.</p>
<h3 id="toc_6">USB-C</h3>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/usb.png" loading="lazy">

<p>Connecting a USB-C cable powers the battery charger and the device. The 5.1k Ohm resistors on the CC1 and CC2 pins allow the device to draw 0.5A if connected to a USB 2 source, or 0.9A if connected to a USB 3 source. The USB-C connector provides 5V to the system if connected to a USB source like my laptop.</p>
<p>For debugging and flashing, the DN and DP pins are connected to the ESP32-S3 GPIOs 19 and 20. The ESP32-S3 has built-in USB capabilities that handle all the communication. When routing these traces on the PCB, it's important to maintain equal length for both signals (known as a differential pair) to ensure proper USB signal integrity.</p>
<h3 id="toc_7">ESP32-S3</h3>
<p>There are various variants of the ESP32-S3. I picked one with a built-in antenna, 8MB of flash, and 8MB of PSRAM. That's been sufficient for all my projects so far. And I don't need to wire up those components myself. Here's how it is wired up.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/esp32-schematic.png" loading="lazy">

<p>This mostly follows the recommendation in the <a href="https://docs.espressif.com/projects/esp-hardware-design-guidelines/en/latest/esp32s3/esp-hardware-design-guidelines-en-master-esp32s3.pdf">ESP32-S3 hardware design guidelines</a>. I didn't include a crystal needed for accurate deep sleep timing, as I never need that feature.</p>
<p>C1 and C3 are decoupling capacitors. R3 is a pull-up on the enable pin, that gets "overwritten" if the reset button is pressed, which grounds the pin and resets the device. C4 is a debounce capacitor for the reset button. A similar button setup is found for the boot button on the left side. Pretty simple!</p>
<p>The GPIOs are exposed at the edge of the PCB.</p>
<h3 id="toc_8">Battery charging via BQ25171-Q1</h3>
<p>I spent a long time trying to find an IC that can charge both NiMH and LiPo batteries. I eventually settled for the <a href="https://www.ti.com/lit/ds/symlink/bq25171-q1.pdf">BQ25171-Q1</a>, by Texas Instruments.</p>
<p>Here's the part of the schematic that deals with battery charging:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/charger.png" loading="lazy">

<p>CN2 on the right side is a 2 pin 2mm PH connector, to which the battery is connected. VBAT is the battery voltage. On the left side of this block you find 5V_USB, which is the 5V from the USB-C connector. If USB-C is not connected, then VBAT powers the system, while the charger IC does basically nothing. If USB-C is connected, then 5V_USB powers the charger IC, which charges the battery. The battery is cut off from the system in that case, which we'll see in the next section.</p>
<p>The remainder of the schematic consists of components to configure the charger IC.</p>
<p>R7 connected to ISET sets the charge current to approximately 0.5A. R8 pulls the TS pin down to ground, disabling battery temperature monitoring. The PCB layout has provisions to wire up an NTC thermistor instead of soldering the R8 pull-down resistor.</p>
<p>The CHM_TMR pin is connected to a dip switch, which selects one of two resistors. R16 signals to the IC that we want to charge a single-cell LiPo battery at maximally 4.2V, with a 5 hour safety timer. The IC will actually terminate charging earlier and follow the usual LiPo charging curve. R15 signals to the IC that we want to charge 3 NiMH batteries in series, with a max charging voltage of 4.2V and a 4 hour safety timer. This configuration will not disable charging when the voltage reaches 4.2V, but instead keep charging until the safety timer is hit (or the optional thermistor signals that the battery is too hot).</p>
<p>The VSET pin is connected to a 18k Ohm resistor, which sets the maximal charging voltage to 4.2V for both battery chemistries.</p>
<p>Finally, STAT1 and STAT2 are connected to LEDs, which are connected to VBAT via 620 Ohm resistors. STAT1 and STAT2 are open-drain outputs; the IC will pull them low when the LEDs should light up.</p>
<h3 id="toc_9">Power management</h3>
<p>The system can either be powered by USB-C or by the battery. The USB-C voltage is 5V, while the battery voltage can range anywhere from 3-4.2V. The ESP32-S3 requires 3.3V, so we need to regulate the power source voltage down. We also want to prevent the battery from discharging below 3.08V, so we need a voltage monitor that can power down the ESP32-S3. Here's how that's done:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/powerpath.png" loading="lazy">

<p>On the left side of the schematic, you see 5V_USB and VBAT. VBAT goes through a P-channel transistor. If USB-C is connected, the gate is pulled high, which will prevent power from the battery from reaching the system. If USB-C is not connected, the gate is pulled low, meaning that power from VBAT can reach the remainder of the system. This is a little trick I saw in the Unexpected Marker's ESP32-S3 Feather board. It's really simple power path management!</p>
<p>For extra safety, a schottky diode is placed after 5V_USB, just in case power from VBAT or some capacitor manages to sneak through for some reason.</p>
<p>C9 is a decoupling capacitor suggested by the <a href="https://www.ti.com/cn/lit/ds/symlink/tps3839.pdf?ts=1745522482975&amp;ref_url=https%253A%252F%252Fpro.easyeda.com%252F">TPS3839</a> datasheet. That is an ultra low power supply voltage monitor. If the voltage drops below 3.08V, it pulls its RESET pin low. That reset pin is connected to the EN pin of the low drop out voltage regulator to its right. If it is low, the voltage regulator is disabled, cutting off power to the system, thereby not draining the battery further. This is likely not strictly necessary, as the ESP32-S3 and other connected ICs will brown out well before the battery drains below 3.08V. But it's a good safety net.</p>
<p>The low drop out voltage regulator is a <a href="https://atta.szlcsc.com/upload/public/pdf/source/20220927/260C14BB568125F608A31F1F8EA3901A.pdf">LD56100</a>. It can provide 1A of current with a dropout voltage of only 120mV. The audio player draws no more than 60mA even with the speaker at max volume. That results in an even lower dropout voltage, which means we can make good use of most of the battery capacity.</p>
<p>The final output of this block is a clean 3.3V voltage, which powers the ESP32-S3 and the audio amp and speaker.</p>
<h3 id="toc_10">PCB Layout</h3>
<p>After digging through countless datasheets and wiring everything up in the schematic, I was finally able to start laying out the PCB. It's like advanced Tetris. I really enjoy it (even though I'm not good at it). Here's how I translated the schematic into a printable layout:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/pcblayout-1.png" loading="lazy">
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/pcblayout-2.png" loading="lazy">

<p>It's a 4 layer board, with two ground planes in the middle. The top hosts the circuits described above, while the bottom exposes most of the GPIOs. The board is breadboard friendly and also has screw holes for mounting in an enclosure. The power traces are thick enough to actually handle up to 1A of current, should the need arise. Though that kind of power could not be delivered via USB-C.</p>
<p>If you squint, you can see the differential pair for the USB signals. There are probably a gazillion things that could be done better, but it works and doesn't blow up, which is good enough for me. I'm pretty sure this wouldn't pass any kind of certification necessary to sell it as part of a commercial electronic device.</p>
<h3 id="toc_11">Soldering the board</h3>
<p>I ordered a stencil along with the PCBs, which makes applying solder paste much easier compared to the toothpick method I used for the cartridge PCBs.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/esp32-stencil.png" loading="lazy">

<p>Once the paste is applied, I start by dropping capacitors, resistors, tactile switches and other components with big pads onto the board. I then turn on my heating plate and let it melt the solder paste.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/esp32-soldering.png" loading="lazy">

<p>With the "easy" components out of the way, I inspect the solder on the pads for trickier components, like the ESP32-S3, the 1.2mm by 1.6mm LDO voltage regulator, and the USB-C connector. Chances are the solder paste has melted into a blob or formed bridges between pads. This tends to happen when too much paste is applied, especially on extremely tiny sub-millimeter pads. I use solder wick or my trusty toothpick to fix any bridges.</p>
<p>Only when I deem the solder on the pads to be good do I drop the "tricky" components onto the board and hope for the best.</p>
<p>Once everything is soldered, I flash a simple LED blinking sketch to make sure the board is working. If it's not, I use my multimeter to painstakingly check for expected voltages across the board. I also use my thermal camera to check for overheating components.</p>
<h2 id="toc_12">Buttons, knobs and enclosure</h2>
<p>I designed the enclosure pretty early on in the process, based on the speaker and cartridge dimensions, and the cartridge slot mechanism. The enclosure consists of a top and bottom half, which are held together by M3 screws.</p>
<p>The top has cutouts for the buttons, volume knob, speaker. It also has a mounting bracket for the battery springs which serves as connectors to the cartridge pads. A separate mesh cover is mounted on top the speaker hole to protect the speaker from my boy's destructive tendencies.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/top-1.png" loading="lazy">

<p>The buttons and knob are simple shapes, with their bottoms extruded, so they don't fall out of the enclosure through the cut outs. In case of the buttons, they sit atop simple tactile switches. The knob has a center cutout so it can be slid onto the potentiometer beneath it.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/buttons-1.png" loading="lazy">
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/buttons-2.png" loading="lazy">

<p>Turning the top upside down reveals two mounting structures to which a PCB can be screwed beneath the button cutouts. More on that PCB in the next section. You can also see spacers and screw holes for the battery springs, which make up the cartridge slot mechanism. There's also a cutout on the side for the USB-C connector for the ESP32-S3 board.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/top-2.png" loading="lazy">

<p>The bottom is pretty unremarkable. It features a bay for the 3 AAA NiMH batteries, a few spacers to make positioning the top on the bottom easier, and a weird little contraption consisting of what looks like a rod and two screw holes. Here's what that's for.</p>

<p>When a cartridge is inserted, the rod is pushed down, which pushes a switch that connects the battery to the ESP32-S3 board. It's a silly looking mechanism, but it has a few benefits. In the first iteration, I positioned the switch next to the cartridge slot. However, getting the position right was tricky. Also, routing the power wire around the magnet of the speaker led to interesting issues I was unable to debug or fix.</p>

<p>The rod solution just works.</p>
<h2>The mother board</h2>
<p>As you can see in the last video, the innards of the device were still living on a breadboard at this point. The ESP32-S3 board, the amp, and the buttons and knob needed to be mounted inside the enclosure somehow. I had already designed mounting brackets on the top half of the enclosure, taking into account the size of the tactile switches, the potentiometer, and their 3D printed covers. This allowed me to measure the remaining space in the enclosure inside Fusion 360, based on which I sized a carrier PCB or motherboard. Here's the schematic:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/motherboard.svg" loading="lazy">

<p>To the left is the MAX98357A audio amplifier breakout board. The ESP32-S3 board is at the center. At the bottom are the tactile switches and the potentiometer. And to the right are the connections to the battery springs of the cartridge slot. Everything is wired to appropriate pins on the ESP32-S3 board. The SD card traces also feature pull-ups as necessary.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/motherboard-1.png" loading="lazy">
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/motherboard-2.png" loading="lazy">

<p>It's a 2-layer board. The top layer houses the tactile switches and the potentiometer. The bottom layer has 2.54mm headers into which I can plug the MAX98357A breakout board and the ESP32-S3 board. In the top right are pads for the SD card connections which are wired to the battery springs of the cartridge slot.</p>
<p>Here's the motherboard with tactile switches, potentiometer, and headers soldered to it:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/motherboard-3.png" loading="lazy">

<p>And here it is with the MAX98357A breakout board and the ESP32-S3 board plugged in:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/motherboard-4.png" loading="lazy">

<p>The motherboard is screwed to the top half of the enclosure and wired up with the cartridge slot mechanism.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/motherboard-5.png" loading="lazy">

<p>Then I plug in the ESP32-S3 board and the MAX98357A breakout board and wire up the speaker to the amp, and the battery to the ESP32-S3 board.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/motherboard-6.png" loading="lazy">

<p>(Note that the ESP32-S3 board is an earlier iteration but the principle is the same.)</p>
<p>The trick to getting this all lined up is importing 3D models of all components into Fusion 360.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/motherboard-7.png" loading="lazy">

<p>EasyEDA allows exporting a 3D model of the PCB, including the components (if they have 3D models). This allows me to experiment with component placement and orientation, try out different PCB layouts, etc. That saves me enormous amounts of time and frustration.</p>
<h2 id="toc_13">Software</h2>
<p>The software is straightforward and based on my mcugdx framework. The entire source code is a <a href="https://github.com/badlogic/mcugdx/blob/main/examples/boxie/main/main.cpp">single 390 LOC file</a> that uses the "easy" mcugdx API to:</p>
<ul>
<li>Check if an SD card is present</li>
<li>List the MP3 files on the SD card and sort them by name</li>
<li>Start playback of the first file on the SD card</li>
<li>React to button presses and the volume knob</li>
</ul>
<p>You can dig into the <a href="https://github.com/badlogic/mcugdx/tree/main/src">mcugdx sources</a> to see how to implement all this under the hood on top of ESP-IDF.</p>
<h2 id="toc_14">Mario, how do I build this myself?</h2>
<p>I'm glad you asked. It's definitely not for the faint of heart. Assuming you have everything needed to solder SMD components, wires, M1-M3 screws, and basic tools like pliers (see recommended items above), here's what you need specifically for this project:</p>
<ul>
<li><a href="https://mariozechner.at/posts/2025-04-20-boxie/project/boxie.3mf">3D model of the enclosure</a> Ready to print. Import into your slicer, enable supports (for USB-C cutout), and print with PLA. Should work with any popular 3D printer. For modifications, use this <a href="https://mariozechner.at/posts/2025-04-20-boxie/project/boxie.f3z">Fusion 360 file</a>.</li>
<li><a href="https://mariozechner.at/posts/2025-04-20-boxie/project/cartridge-cover.3mf">3D model of the cartridge cover</a> Print multiple copies by duplicating in your slicer. Can use 10% infill or lower. The cover is also in the Fusion 360 enclosure file above.</li>
<li><a href="https://mariozechner.at/posts/2025-04-20-boxie/project/cartridge-gerber.zip">Cartridge PCB Gerber files</a> 2-layer board design for manufacturers like JLCPCB, PCBWay, or Aisler. For modifications, import this <a href="https://mariozechner.at/posts/2025-04-20-boxie/project/cartridge.epro">EasyEDA Pro project</a> into EasyEDA or KiCad 9+. Optional: Have JLCPCB assemble the board using the BOM below instead of hand-soldering.</li>
<li><a href="https://mariozechner.at/posts/2025-04-20-boxie/project/cartridge-bom.xlsx">Cartridge BOM</a>. All components needed to assemble the cartridge. Features LCSC part numbers (where I buy them) as well as manufacturer name and part number if you want to order them some place else. The BOM includes 2 decoupling caps, which according to my real world testing can be omitted.</li>
<li><a href="https://mariozechner.at/posts/2025-04-20-boxie/project/motherboard-gerber.zip">Motherboard PCB Gerber files</a>. Another 2 layer board ready to be send to a PCB manufacturer. Here's the <a href="https://mariozechner.at/posts/2025-04-20-boxie/project/motherboard.epro">EasyEDA Pro project</a> if you want to modify it.</li>
<li><a href="https://mariozechner.at/posts/2025-04-20-boxie/project/motherboard-bom.xlsx">Motherboard BOM</a>. All the components you need to assemble the motherboard, with LSCS and manufacturer info.</li>
<li><a href="https://mariozechner.at/posts/2025-04-20-boxie/project/esp32-board-gerber.zip">ESP32-S3 board Gerber files</a> and corresponding <a href="https://mariozechner.at/posts/2025-04-20-boxie/project/esp32-board.epro">EasyEDA Pro project</a>. This is a 4 layer board, so make sure your PCB manufacturer can do that.</li>
<li><a href="https://mariozechner.at/posts/2025-04-20-boxie/project/esp32-board-bom.xlsx">ESP32-S3 board BOM</a>. All the components you need to assemble the motherboard, with LSCS and manufacturer info.</li>
<li><a href="https://www.amazon.de/dp/B082WXT4R8">Micro Switch</a>. This is used together with the 3D printed rod to connect the battery to the ESP32-S3 board. See the videos and images above. You will have to cut off the little hook at the end of the metal part to make it fit.</li>
<li><a href="https://www.conrad.at/de/p/keystone-electronics-5231-einzelkontakt-1x-mignon-aa-a-cr-2-cr-123-9-v-block-oberflaechenmontage-smd-l-x-b-x-h-15-651312.html">Keystone Electronics 5231 battery springs</a>. These are the springs used to connect the cartridge pads to the and ultimately the SD card inside the cartridge with the ESP32-S3. The 3D enclosure is specifically designed to fit these springs, including spacers so they can't shift and touch each other.</li>
<li><a href="https://www.conrad.at/de/p/te-connectivity-34140-ringkabelschuh-querschnitt-max-1-60-mm-loch-o-2-36-mm-teilisoliert-rot-1-st-808203.html">TE Connectivity 34140 ring terminals</a>. These are used to connect the battery spring with wires that lead to the motherboard. They are crimped to wires and then screwed onto the top part of the enclosure together with the battery springs. I then bend them downwards. See the videos and images above.</li>
<li><a href="https://www.adafruit.com/product/1540">Right angle male 2.54mm pin headers</a>. These are soldered to the motherboard in the area marked with SD. The wires coming from the ring terminals are then crimped with female Dupont housings and slid onto the pin headers.</li>
<li><a href="https://www.amazon.de/dp/B0B1HPVML4">sourcing map AAA battery spring plates (8mmx9mm)</a>. These are inserted into the battery compartment in the bottom part of the enclosure to hold the AAA batteries in place and connect them up.</li>
<li><a href="https://www.amazon.de/dp/B07JGMVB2K">sourcing map AAA battery negative to positive spring plates (21mmx9mm)</a>. Same as above, but for the other compartments.</li>
<li><a href="https://www.adafruit.com/product/3006">MAX98357A audio amplifier breakout board</a>. I like to support Adafruit, so if it's within your budget, buy from them. Otherwise, you can find a bunch of knock offs on Amazon or AliExpress. Just make sure the pin out is the same, otherwise you'll have a lot of fun debugging.</li>
<li><a href="https://www.adafruit.com/product/3008">2.54mm short female headers</a>. These are soldered to the motherboard, so I can plug and unplug the MAX98357A breakout board and ESP32-S3 board. I couldn't source them anywhere other than Adafruit, ymmv.</li>
<li><a href="https://www.visaton.de/de/produkte/chassis/breitband-systeme/fr-7-4-ohm">Visaton FR 7 4 Ohm speaker</a>. Hopefully selfexplanatory. It's wires are screwed into the terminals on the MAX98357A breakout board. Again, see the videos and images above.</li>
<li><a href="https://www.amazon.de/-/en/dp/B000IGW3JC">3 AAA rechargable NiMH batteries</a></li>
<li><a href="https://www.amazon.de/dp/B00195G388">Intenso Micro SDHC memory card Class 44GB</a>. I've only tested these SD cards. Success rate with other SD cards may vary. I did not have any luck with Class 10 cards. Might be an ESP-IDF issue. Didn't bother to investigate.</li>
<li><a href="https://www.avery-zweckform.com/produkt/universal-etiketten-6125">Label paper</a>. Print audiobook covers on it, stick them to the cartridge cover front.</li>
</ul>
<p>Assembly steps for the player:</p>
<ul>
<li>Print enclosure parts</li>
<li>Solder the motherboard and ESP32-S3 board</li>
<li>Mount speaker and cover to top enclosure</li>
<li>Mount motherboard to top enclosure</li>
<li>Install ESP32-S3 and MAX98357A boards</li>
<li>Prepare 8 silicon wires (22AWG, 20cm each):<ul>
<li>Crimp ring terminals on one end</li>
<li>Attach terminals and springs to enclosure</li>
<li>Route wires around speaker</li>
<li>Trim to length and add Dupont housings for motherboard connections</li>
</ul>
</li>
<li>Cut the hook of the micro switch</li>
<li>Screw it into the bottom part of the enclosure, right to the battery compartment</li>
<li>Connect the bottom battery plate (positive terminal) to the middle pin of the micro switch by soldering a short silicon wire (22AWG) between them</li>
<li>Solder another 10cm silicon wire (22AWG) to the right pin of the micro switch</li>
<li>Solder another 10cm silicon wire (22AWG) to the top battery plate (negative terminal)</li>
<li>Crimp a JST-PH 2.0mm female terminal to each of the 10cm silicon wires</li>
<li>Slide the crimped wire ends into a JST-PH 2.0mm housing. Make sure the negative and positive terminals correspond to the negative and positive pins on the JST-PH 2.0mm female socket on the ESP32-S3 board! The board has a - and + signs on the pads of the socket! Don't fuck this up!</li>
<li>Connect the JST-PH connector to the corresponding JST-PH 2.0mm female socket on the ESP32-S3 board</li>
<li>Insert the batteries into the battery compartment</li>
<li>Insert the rod into the bottom part of the enclosure</li>
<li>Connect the device via USB-C to your computer. Once it is recognized as a UART/JTAG device, press the boot button the ESP32-S3 board</li>
<li>Screw the top and bottom part of the enclosure together</li>
</ul>
<p>You can now flash the <a href="https://github.com/badlogic/mcugdx/tree/main/examples/boxie">boxie firmware</a> to the ESP32-S3 board. Clone the repo, then use the <a href="https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-guides/tools/idf-py.html">ESP-IDF CLI</a> to compile and flash the firmware. Tested with ESP-IDF v5.3.2. The <code>sdkconfig.defaults</code> file is set up for the custom ESP32-S3 board.</p>
<p>Assembly steps for the cartridge:</p>
<ul>
<li>Print cartridge cover</li>
<li>Prepare audiobook/music cover (59mm x 62mm) on label paper</li>
<li>Solder SD card socket to PCB</li>
<li>Load audio files onto SD card (MP3 only, playback follows filename order)</li>
<li>Insert SD card and attach cover</li>
</ul>
<h2 id="toc_15">Future work</h2>
<p>I need to add a headphone jack to the device. The jack must have a pin that signals the ESP32-S3 when headphones are connected. When connected, I'll need to disable the MAX98357A amplifier by pulling its SD pin low. This requires a reworked motherboard and some voltage management for the SD pin when no headphones are present. The jack would be positioned opposite the USB-C port, requiring a minor enclosure modification.</p>
<p>I also need an IC to convert the I2S signal (currently sent to the MAX98357A) to a headphone output. I haven't researched options yet. The motherboard will need additional routing to send the I2S signal from the ESP32-S3 to both the MAX98357A and this new IC. Suggestions welcome!</p>
<h2 id="toc_16">Bonus content: USB cartridge reader</h2>
<p>I designed a USB cartridge reader for convenience. Instead of unscrewing a cartridge's cover to access the SD card, the reader lets me modify files by simply plugging the cartridge into my laptop via USB, where it appears as a mass storage device.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/reader-1.png" loading="lazy">

<p>Here's the schematic:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/reader-2.png" loading="lazy">

<p>It's essentially a wrapper around a <a href="https://atta.szlcsc.com/upload/public/pdf/source/20190212/C284879_D3054E8AA735401C3047DCECFFFED6D3.pdf">Genesys Logic GL823K IC</a>, a USB 2.0 SD/MSPRO Card reader controller.</p>
<p>I rarely use it since I typically insert SD cards directly into my laptop before assembling cartridges. Still, it was a fun side project.</p>
<h2 id="toc_17">Bonus content: modding the Andonstar AD249S-M digital microscope</h2>
<p>The microscope comes like this originally:</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/microscope-1.png" loading="lazy">

<p>I preferred mounting it on a <a href="https://www.amazon.de/-/en/R%C3%B8de-PSA1-articulated-arm-stand/dp/B001D7UYBO/">Rode PSA1 articulated arm</a> attached to my desk. This gives me nearly unlimited movement across my work area.</p>
<p>The microscope stand includes a control PCB for the LED lights.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/microscope-2.png" loading="lazy">

<p>I disassembled it and removed the control PCB and LED light arms.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/microscope-3.png" loading="lazy">

<p>I then designed and 3D printed a mount that attaches to the PSA1 arm, houses the control PCB, and accommodates the LED light arms.</p>
<img src="https://mariozechner.at/posts/2025-04-20-boxie/media/microscope-4.png" loading="lazy">


<p>Note: The final version uses a different fastening mechanism with a screw and wing nut, but this demonstrates the concept.</p>
<p>Here's the <a href="https://mariozechner.at/posts/2025-04-20-boxie/project/andonstar-bracket.3mf">3MF file</a> for the mount, ready for 3D printing. I used PLA with BambuLab slicer defaults.</p>
<p>
    This page respects your privacy by not using cookies or similar technologies and by not collecting any personally identifiable information.
</p>

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I just want to code (2023) (222 pts)]]></title>
            <link>https://www.zachbellay.com/daily/i-just-want-to-code/</link>
            <guid>43814708</guid>
            <pubDate>Sun, 27 Apr 2025 20:08:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.zachbellay.com/daily/i-just-want-to-code/">https://www.zachbellay.com/daily/i-just-want-to-code/</a>, See on <a href="https://news.ycombinator.com/item?id=43814708">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
              <p>I have an angel and a devil sitting atop each shoulder. The angel says, "Just code for fun! What you make can be just for your enjoyment and that's --" the devil interjects, "not enough to get ahead, loser. If you're not coding your next startup then how're you gunna get rich? Coding for fun? Pfft, sounds like the fast lane to being poor."</p>
<p>Since I was a kid I've always gravitated toward computers. First sucked in via computer games, then Lego NXT Robots, then turtles, then high school Java, and finally a college degree. It always starts off as some form of play, and before I know it I've learned something new. At 8 years old, I played Age of Empires III only to get suckered into learning how to fix the install on Windows. In 6th grade I built a Lego machine gun using the Lego NXT robotics and learned how to program using blocks. In 8th grade I used turtles to make cool designs. </p>
<p>But I also grew up consuming hustle porn. I loved reading Wired and Entreprenuer magazine and dreamed of being on the cover. For 2 years in highschool I so desperately wanted to attend Babson College to enroll in their entreprenuership program. I watched an Amazon Prime knockoff of Silicon Valley called <em>Betas</em> and unironically wanted to be like the "visionary" social media startup founder who was founding yet another doomed social media platform. Now I'm on Twitter/X &amp; Hacker News, which of course mainline these capitalist ideals straight to my brain.</p>
<p>So I've cultivated the angel, and the devil. The angel motivated by curiosity, a sincere desire to learn and improve, and most of all have fun. The devil motivated by power, money, status.</p>
<p>I constantly find the devil on my shoulder trying to convince me to start a new side hustle. Starting a new monetizable side project is like a latent addiction. Giving in feels like relapsing. The angel says don't worry about some side hustle, just do well in your day job and code for fun as a hobby. But the devil keeps telling me that you can "be your own boss" and "earn what you're worth". </p>
<p>In a perfect world, I could listen to the angel and solely get by having fun and working on things I enjoy. But if I didn't listen to the devil from time to time, I wouldn't stay up to date with the latest technologies, and as a result I wouldn't be able to pay my bills.</p>
<p>Typically, the devil is associated with worldly material things, whereas angels are associated with high ideals, such as curiosity, enlightenment, and purity. Unfortunately, we don't live in a perfect world, so the devil on my shoulder will never be vanquished. Which means that instead, this will always be a story of managing the devil, and learning when and when not to listen to him. </p>
<p>I've learned now, that I can no longer force myself to work on things that I don't like forever, since I will burn out. As I mature, I am better honing perception for when and when not to give in to the devil's call to build something for profit. </p>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Business co-founders in tech startups are less valuable than they think (285 pts)]]></title>
            <link>https://verdikapuku.com/posts/business-founders-are-less-valuable-than-they-think/</link>
            <guid>43814497</guid>
            <pubDate>Sun, 27 Apr 2025 19:35:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://verdikapuku.com/posts/business-founders-are-less-valuable-than-they-think/">https://verdikapuku.com/posts/business-founders-are-less-valuable-than-they-think/</a>, See on <a href="https://news.ycombinator.com/item?id=43814497">Hacker News</a></p>
Couldn't get https://verdikapuku.com/posts/business-founders-are-less-valuable-than-they-think/: Error: getaddrinfo ENOTFOUND verdikapuku.com]]></description>
        </item>
        <item>
            <title><![CDATA[Internet in a Box (709 pts)]]></title>
            <link>https://internet-in-a-box.org/</link>
            <guid>43814433</guid>
            <pubDate>Sun, 27 Apr 2025 19:26:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://internet-in-a-box.org/">https://internet-in-a-box.org/</a>, See on <a href="https://news.ycombinator.com/item?id=43814433">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
              <h2>Quality Content</h2>
              <p>
                Internet-in-a-Box shows you the latest Content Packs
                installable in the languages your community needs (from online
                libraries like
                <a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Kiwix#Available_content">Kiwix</a>,
                <a target="_blank" rel="noopener" href="https://rachel.worldpossible.org/content">OER2Go</a>,
                <a target="_blank" rel="noopener" href="https://archive.org/">Archive.org</a>)
                then takes care of all the downloading details for you!
              </p>

              <p>
                Which eye-opening
                <a href="https://limnology.co/" rel="noopener" target="_blank">                
                  YouTube and Vimeo learning videos</a>
                do your kids truly need?  You choose!
                <a href="https://github.com/iiab/calibre-web/wiki#calibre-web" rel="noopener" target="_blank">
                  Pick channels</a>
                with mind-altering
                <a href="https://www.favoree.io/search?category=all_Documentary%20and%20Essay" rel="noopener" target="_blank">                
                  documentaries</a>
                and unforgettable radio episodes, created by <i>the</i> very
                best teachers worldwide.
              </p>

              <p>
                Schools can also choose among
                <a target="_blank" rel="noopener" href="https://wiki.iiab.io/go/FAQ#What_services_%28IIAB_apps%29_are_suggested_during_installation%3F">
                  almost 40 powerful apps</a>
                for teachers and students ‚Äî optionally with a complete LMS
                (learning management system) like Kolibri, Moodle, Nextcloud,
                Sugarizer or WordPress.
              </p>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How a single line of code could brick your iPhone (397 pts)]]></title>
            <link>https://rambo.codes/posts/2025-04-24-how-a-single-line-of-code-could-brick-your-iphone</link>
            <guid>43814360</guid>
            <pubDate>Sun, 27 Apr 2025 19:12:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rambo.codes/posts/2025-04-24-how-a-single-line-of-code-could-brick-your-iphone">https://rambo.codes/posts/2025-04-24-how-a-single-line-of-code-could-brick-your-iphone</a>, See on <a href="https://news.ycombinator.com/item?id=43814360">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div><p>This is the story of how I found one of my favorite iOS vulnerabilities so far. It‚Äôs one of my favorites because of how simple it was to implement an exploit for it. There‚Äôs also the fact that it uses a legacy public API that‚Äôs still relied upon by many components of Apple‚Äôs operating systems, and that many developers have never heard of.</p><h2>Darwin Notifications</h2><p>Most iOS developers are likely used to <a href="https://developer.apple.com/documentation/foundation/notificationcenter?language=objc">NSNotificationCenter</a>, and most Mac developers are also likely used to <a href="https://developer.apple.com/documentation/foundation/distributednotificationcenter?language=objc">NSDistributedNotificationCenter</a>. The former only works within a single process, the latter allows simple notifications to be exchanged between processes, with the option to include a string with additional data to be transmitted alongside the notification.</p><p><a href="https://developer.apple.com/documentation/darwinnotify/darwin-notification-api">Darwin notifications</a> are even simpler, as they‚Äôre a part of the CoreOS layer. They provide a low-level mechanism for simple message exchange between processes on Apple‚Äôs operating systems. Instead of objects or strings, each notification may have a <code>state</code> associated with it, which is a <code>UInt64</code>, and typically is only used to indicate a boolean <code>true</code> or <code>false</code> by specifying <code>0</code> or <code>1</code>.</p><p>A simple use case for the API would be for a process that just wants to notify other processes about a given event, in which case it can call the <code>notify_post</code> function, which takes a string that‚Äôs usually a reverse DNS value like <code>com.apple.springboard.toggleLockScreen</code>.</p><p>Processes interested in receiving such a notification can register by using the <code>notify_register_dispatch</code> function, which will invoke a block on a given queue any time another process posts the notification with the specified name.</p><p>A process that‚Äôs interested in posting a Darwin notification with a state has to first register a handle for it, which can be done by calling the <code>notify_register_check</code> function, which takes the name of the notification and the pointer to an <code>Int32</code>, which is where the function returns a token that can be used to call <code>notify_set_state</code>, which also takes a <code>UInt64</code> value for the state.</p><p>Via the same <code>notify_register_check</code> mechanism, a process that wants to get the state of a notification can call <code>notify_get_state</code> to get its current state. This allows Darwin notifications to be used for certain types of events, but also hold some state that any process on the system can query at any given time.</p><h2>The Vulnerability</h2><p>Any process on Apple‚Äôs operating systems ‚Äî including iOS ‚Äî can register to be notified about any Darwin notification, from within its sandbox, without the need for special entitlements. This makes sense given that some system frameworks used by third-party apps rely on Darwin notifications for important functionality.</p><p>Given that the amount of data transferred through them is very limited, Darwin notifications are not a significant risk for sensitive data leaks, even though the API is public, and sandboxed apps can register for notifications.</p><p>However, just as any process on the system can register to <strong>receive</strong> Darwin notifications, the same is true for <strong>sending</strong> them.</p><p>To summarize, Darwin notifications:</p><ul><li>Require no special privileges for receiving</li><li>Require no special privileges for <strong>sending</strong></li><li>Are available as public API</li><li>Have no mechanism for <strong>verifying the sender</strong></li></ul><p>Considering these properties, I began to wonder if there were places on iOS using Darwin notifications for powerful operations that could potentially be exploited as a denial-of-service attack from within a sandboxed app.</p><p>You‚Äôre reading this blog post, so I‚Äôve already spoiled it: the answer was ‚Äúyes‚Äù.</p><h2>Proof of Concept: EvilNotify</h2><p>With that question in mind, I grabbed a fresh copy of the iOS root filesystem ‚Äî one of the early iOS 18 betas at the time, I think ‚Äî and began looking for processes that used <code>notify_register_dispatch</code> and <code>notify_check</code>.</p><p>I quickly found a bunch of them, and made a test app called ‚ÄúEvilNotify‚Äù that I could use for testing.</p><p>Unfortunately, I no longer have a vulnerable device I could use to record a proper on-device video, but the iOS Simulator demo above shows most of what the proof of concept was able to do. Some of them don‚Äôt work in the Simulator, so I couldn‚Äôt demo them in the video.</p><p>You can see a hint at the end of the video of what the ultimate denial of service was, but let me mention all the other things it was capable of doing. Keep in mind, all of them would affect the entire system, even if the user force-quit the app.</p><ul><li>Cause the ‚Äúliquid detection‚Äù icon to show up in the status bar</li><li>Trigger the Display Port connection status to show up in the Dynamic Island</li><li>Block system-wide gestures for pulling down Control Center, Notification Center, and Lock Screen</li><li>Force the system to disregard Wi-Fi and use the cellular connection instead</li><li>Lock the screen</li><li>Trigger a ‚Äúdata transfer in progress‚Äù UI that prevented the device from being used until the user cancelled it</li><li>Simulate the device entering and leaving Find My‚Äôs ‚ÄúLost Mode‚Äù, triggering an Apple ID password dialog prompt to re-enable Apple Pay</li><li>Trigger device entering a ‚Äúrestore in progress‚Äù mode</li></ul><h2>‚ÄúRestore in Progress‚Äù</h2><p>Since I was looking for a denial-of-service attack, this last one seemed to be the most promising, as there was no way out of it other than by tapping the ‚ÄúRestart‚Äù button, which would always cause the device to reboot.</p><p>It was also quite neat, since it consisted of a single line of code:</p><pre><code><span>notify_post</span>(<span>"com.apple.MobileSync.BackupAgent.RestoreStarted"</span>)
</code></pre><p>That‚Äôs it! That single line of code was enough to make the device enter ‚ÄúRestore in Progress‚Äù. The operation would inevitably fail after a timeout since the device was not actually being restored, for which the only remedy was tapping the ‚ÄúRestart‚Äù button, which would then reboot the device.</p><p>Looking into the binaries, SpringBoard was observing that notification to trigger the UI. The notification is triggered when the device is being restored from a local backup via a connected computer, but as established before, any process could send the notification and trick the system into entering that mode.</p><h2>Denial of Service: VeryEvilNotify</h2><p>Now that I had a Darwin notification with the potential of becoming a denial of service, I just had to figure out a way to trigger it repeatedly across device reboots.</p><p>At first, this sounded quite tricky, since apps on iOS have very limited opportunities for background processing, and quite a few APIs with side effects are prevented from working when an app is not in the foreground. The latter I found out would not be a problem, as I could verify that <code>notify_post</code> worked even when the app was not in the foreground.</p><p>As for being able to post the notification again and again as the device rebooted multiple times, I wasn‚Äôt so sure, but I had a hunch that an app extension would be the most likely to succeed.</p><p>Some types of third-party app extensions may run before first unlock on iOS devices, so I decided to try a type of app extension I‚Äôm quite familiar with, and created a widget extension, in a new app that I called ‚ÄúVeryEvilNotify‚Äù.</p><p>Widget extensions are periodically woken up in the background by iOS. They have a limited amount of time for generating snapshots and timelines, which the system then displays in various places, including the Lock Screen, Home Screen, Notification Center, and Control Center.</p><p>Because of how widespread the use of widgets is on the system, when a new app that includes a widget extension is installed and launched, the system is very eager to execute its widget extension. That gets an app‚Äôs widgets ready for the user to pick and add to the various supported placements.</p><p>A widget extension is ultimately just a process that can run code, so I added the aforementioned line of code to my widget extension. I had configured the extension to include every possible type of widget, just to make it as likely as possible that iOS would execute it as quickly as possible.</p><p>There‚Äôs a problem though: widget extensions produce placeholders, snapshots, and timelines, which are then cached by the system in order to preserve resources. These extensions are not running in the background all the time, and even if the extension requests very frequent updates, the system will enforce a time budget and delay updates if the extension attempts to request them too frequently.</p><p>To circumvent that, I decided to try making my widget extension always crash shortly after running the <code>notify_post</code> function, which I did by calling Swift‚Äôs <code>fatalError()</code> function in every extension point method of its <code>TimelineProvider</code>.</p><p>The call to <code>notify_post</code> was made as part of the entry point of the extension, before handing off execution to the extension runtime:</p><pre><code><span>import</span> WidgetKit
<span>import</span> SwiftUI
<span>import</span> notify

<span>struct</span> VeryEvilWidgetBundle: <span>WidgetBundle</span> {
    <span>var</span> body: <span>some</span> <span>Widget</span> {
        <span>VeryEvilWidget</span>()
        <span>if #available</span>(iOS <span>18</span>, *) {
            <span>VeryEvilWidgetControl</span>()
        }
    }
}

<span>/// Override extension entry point to ensure the exploit code is always run whenever
/// our extension gets woken up by the system.</span>
<span>@main
struct</span> VeryEvilWidgetEntryPoint {
    <span>static func</span> main() {
        <span>notify_post</span>(<span>"com.apple.MobileSync.BackupAgent.RestoreStarted"</span>)

        <span>VeryEvilWidgetBundle</span>.<span>main</span>()
    }
}
</code></pre><p>With that widget extension in place, as soon as I installed the VeryEvilNotify app on my security research device, the ‚ÄúRestore in Progress‚Äù UI was shown, then failed with a prompt to restart the system.</p><p>After restarting, as soon as SpringBoard was initialized, the extension would be woken up by the system, since it had failed to produce any widget entries before, which would then start the process all over again.</p><p>The result is a device that‚Äôs soft-bricked, requiring a device erase and restore from backup. I suspect that if the app ended up in the backup and the device was restored from it, the bug would eventually be triggered again, making it even more effective as a denial of service.</p><p>My theory was that iOS would have some sort of retry mechanism when a widget extension crashes, which would obviously have some sort of throttling mechanism. I still think that‚Äôs true, but something about the timing of the extension crashing and the restore starting then failing probably prevented such a mechanism from working.</p><p>Satisfied with my proof of concept, I reported the issue to Apple.</p><h2>Timeline</h2><p>Below is a summarized timeline of events for this vulnerability report. There were additional status updates via automated messages from Apple‚Äôs security reports system that I have not included for brevity.</p><ul><li>June 26, 2024: initial report sent to Apple</li><li>September 27, 2024: got a message from Apple informing me that mitigation was in progress</li><li>January 28, 2025: issue flagged as resolved and bounty eligibility confirmed</li><li>March 11, 2025: bug assigned CVE-2025-24091, <a href="https://support.apple.com/122066">addressed in iOS/iPadOS 18.3</a></li><li>Bug bounty amount: US$17,500</li></ul><p>Even though the CVE has already been assigned and Apple has provided a link where the advisory and credit are supposed to be published, that hasn‚Äôt happened yet. I‚Äôve been informed that it will be published soon, but you can read the advisory below in case it hasn‚Äôt been published yet by the time this post goes out.</p><figure>
    <picture>
        <source srcset="https://rambo.codes/assets/img/CVE-2025-24091/CVE-2025-24091-box-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://rambo.codes/assets/img/CVE-2025-24091/CVE-2025-24091-box.png" alt="Apple has assigned CVE-2025-24091 to this issue. CVEs are unique IDs used to uniquely identify vulnerabilites. The following describes the impact and description of this issue. Impact - An app may be able to cause a denial-of-service. Description - An app could impersonate system notifications. Sensitive notifications now require restricted entitlements.">
    </picture>
</figure><p>Notice how the advisory mentions that ‚Äúsensitive notifications now require restricted entitlements‚Äù, hinting at what the mitigation was. You can read more about that in the following section.</p><h2>Mitigation</h2><p>As mentioned by Apple in the advisory, sending sensitive Darwin notifications now requires the sending process to possess restricted entitlements. It‚Äôs not a single entitlement that just allows posting any sensitive notification, but a prefix entitlement in the form of <code>com.apple.private.darwin-notification.restrict-post.&lt;notification&gt;</code>.</p><p>From what I could gather from a brief look into the disassembly, what causes a notification to be ‚Äúrestricted‚Äù is the prefix <code>com.apple.private.restrict-post.</code> in the name of the notification.</p><p>For example, the <code>com.apple.MobileBackup.BackupAgent.RestoreStarted</code> notification is now posted as <code>com.apple.private.restrict-post.MobileBackup.BackupAgent.RestoreStarted</code>, which causes <code>notifyd</code> to verify that the posting process has the <code>com.apple.private.darwin-notification.restrict-post.MobileBackup.BackupAgent.RestoreStarted</code> entitlement before it allows the notification to be posted.</p><p>Processes observing the notification will also be using its new name with the <code>com.apple.private.restrict-post</code> prefix, thus preventing any random unentitled app or process from posting a notification that can have serious side effects on the system.</p><p>I didn‚Äôt have the opportunity to bisect numerous older iOS releases to find the exact version where this mechanism was introduced, but thanks to <a href="https://github.com/blacktop/ipsw-diffs">ipsw-diffs</a>, it appears that the entitlement first showed up in <a href="https://github.com/blacktop/ipsw-diffs/blob/fee5b3c8c18e4639e74677dd3cc1fa80203e64f6/18_2_22C5109p__vs_18_2_22C5125e/Entitlements.md?plain=1#L2336">iOS 18.2 build 22C5125e</a>, AKA iOS 18.2 beta 2.</p><p>The first adopters were <code>backupd</code>, <code>BackupAgent2</code>, and <code>UserEventAgent</code>, all gaining entitlements related to notifying the system about device restores, mitigating the most egregious exploit presented in my proof of concept.</p><p>Throughout the various iOS 18 betas and releases, more and more processes began adopting the new entitlement for restricted notifications, and with the release of iOS 18.3, all issues demonstrated in my PoC were addressed.</p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Daily Jailbreak ‚Äì Prompt Engineer's Wordle (105 pts)]]></title>
            <link>https://www.vaultbreak.ai/daily-jailbreak</link>
            <guid>43814080</guid>
            <pubDate>Sun, 27 Apr 2025 18:32:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.vaultbreak.ai/daily-jailbreak">https://www.vaultbreak.ai/daily-jailbreak</a>, See on <a href="https://news.ycombinator.com/item?id=43814080">Hacker News</a></p>
Couldn't get https://www.vaultbreak.ai/daily-jailbreak: Error: Request failed with status code 429]]></description>
        </item>
        <item>
            <title><![CDATA[OpenBSD 7.7 Released (129 pts)]]></title>
            <link>https://www.openbsd.org/77.html</link>
            <guid>43814058</guid>
            <pubDate>Sun, 27 Apr 2025 18:29:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.openbsd.org/77.html">https://www.openbsd.org/77.html</a>, See on <a href="https://news.ycombinator.com/item?id=43814058">Hacker News</a></p>
<div id="readability-page-1" class="page">


<table>
<tbody><tr>
<td>
<a href="https://www.openbsd.org/images/LifeOfAFish.png">
<img width="200" height="300" src="https://www.openbsd.org/images/LifeOfAFish-s.gif" alt="Life Of A Fish"></a>
</td><td>
Released Apr 28, 2025. (58th OpenBSD release)<br>
Copyright 1997-2025, Theo de Raadt.<p>

Artwork by <a href="https://analognowhere.com/wiki/">Tom√°≈° Rodr</a>.
</p><ul>
<li>See the information on <a href="https://www.openbsd.org/ftp.html">the FTP page</a> for
    a list of mirror machines.
</li><li>Go to the <code>pub/OpenBSD/7.7/</code> directory on
    one of the mirror sites.
</li><li>Have a look at <a href="https://www.openbsd.org/errata77.html">the 7.7 errata page</a> for a list
    of bugs and workarounds.
</li><li>See a <a href="https://www.openbsd.org/plus77.html">detailed log of changes</a> between the
    7.6 and 7.7 releases.
</li><li><a href="https://man.openbsd.org/signify.1">signify(1)</a>
    pubkeys for this release:<table>
<tbody><tr><td>
openbsd-77-base.pub:
</td><td>
<a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/openbsd-77-base.pub">
RWSbCCUoGpcxVRmNb/XFYBbthxWMK7G6fNbJhb993Ohuh29WFaT9vhe2
</a></td></tr><tr><td>
openbsd-77-fw.pub:
</td><td>
RWSJsKh8CzZG93aXHWDPCNM04iMwt7wRzfWzs1nL/2K6OsUvmAEfQavY
</td></tr><tr><td>
openbsd-77-pkg.pub:
</td><td>
RWQ0omJ8AdcUd41n7fqEccjc/VyLhJLKVJo7oFUg7epg6lUHRtgMgT52
</td></tr><tr><td>
openbsd-77-syspatch.pub:
</td><td>
RWRtcHFMyeKCcG4TkoK/TbEvDd1vch0tq8VgRR5UBpvAQkUcgja3jtV9
</td></tr></tbody></table>
</li></ul>
<p>
All applicable copyrights and credits are in the src.tar.gz,
sys.tar.gz, xenocara.tar.gz, ports.tar.gz files, or in the
files fetched via <code>ports.tar.gz</code>.
</p></td></tr></tbody></table>

<hr>

<section id="new">
<h3>What's New</h3>
<p>
This is a partial list of new features and systems included in OpenBSD 7.7.
For a comprehensive list, see the <a href="https://www.openbsd.org/plus77.html">changelog</a> leading to 7.7.
</p><ul>

<li>Platforms specific improvements:
  <ul>
  <li><a href="https://www.openbsd.org/arm64.html">arm64</a>:
    <ul>
    <li>Set AP power state, fixing the SMC initialization on the M1 MacBook with the latest system firmware.
    </li><li>Implemented a new pmap_populate() interface on arm64 and riscv64
	to help <a href="https://man.openbsd.org/pmap_enter.9">pmap_enter(9)</a> succeed
	when there's enough free physical memory but we can't allocate KVA to
	map that memory.
    </li><li>Optimized pmap teardown by skipping TLB flushes, giving ~5%
	performance boost for kernel build.
    </li><li>Enabled PAC on hardware that uses the new QARMA3 cipher.
    </li><li>Implemented support for SVE (Scalable Vector Extension).

    </li></ul>
  </li><li><a href="https://www.openbsd.org/amd64.html">amd64</a>:
    <ul>
    <li>Added the ability for <a href="https://man.openbsd.org/bus_dmamem_alloc.9">bus_dmamem_alloc(9)</a>
	to recognize the BUS_DMA_64BIT flag and allocate memory for DMA
	without any 4GB restrictions on amd64.
    </li><li>Allowed boot loader to run as AMD SEV guest on QEMU with EFI.
    </li><li>Allowed kernel boot on QEMU with AMD SEV.
    </li><li>Allowed use of MSI with the QEMU default pc-i440fx machine.
    </li><li>Stopped amd64 leak of kernel stack guard pages.
    </li><li>Implemented the AMD SEV <a href="https://man.openbsd.org/psp.4">psp(4)</a> download firmware
	command to load new firmware onto the chip and made the AMD SEV
	automatically load psp(4) firmware during <a href="https://man.openbsd.org/vmd.8">vmd(8)</a> startup.
    </li></ul>
  </li><li>Other <a href="https://www.openbsd.org/plat.html">architectures</a>:
    <ul>
    <li>Fixed <a href="https://www.openbsd.org/riscv64.html">riscv64</a> sigcode copying and put riscv64 sigcode in the .rodata memory section.
    </li><li>Implemented an interrupt depth counter on <a href="https://www.openbsd.org/sparc64.html">sparc64</a>.
    </li><li>Moved the <a href="https://www.openbsd.org/hppa.html">hppa</a> stack 1GB higher.
    </li><li>On <a href="https://www.openbsd.org/i386.html">i386</a>, improved the stability in low-memory situations, especially for MP.
    </li><li>Fixed a <a href="https://www.openbsd.org/powerpc64.html">powerpc64</a> bug where a pte could be put into an incorrect pteg, leading to a crash.
    </li><li>Changed <a href="https://www.openbsd.org/luna88k.html">luna88k</a> disklabel labeloffset to 0.
    </li></ul>

  </li><li>More platform specific changes can be found in the <a href="#hardware_support">hardware support</a> section below.
  </li></ul>

</li><li>Various kernel improvements:
  <ul>
  <li>Improved responsiveness in OOM situations and made free target checks coherent.

  </li><li>Removed the ability to specify a root, dump or swap device on <a href="https://man.openbsd.org/st.4">st(4)</a>.

  </li><li>In uvm, prevent a race where a mapped object is being truncated
	while we are spinning to unwire it.
  </li><li>Optimized page daemon active and inactive list traversals when
	looking only for low pages.
  </li><li>Added a helper to check if memory has been freed for a given
	request to improve speed of the page daemon loop.
  </li><li>Started accounting for in-flight pages being written to disk when
	the page daemon is computing page shortage.

  </li><li>Adjusted the ptrace interface to properly support
	single-threaded continue and make it possible to use breakpoints in
	multi-threaded processes in gdb.
  </li><li>Add <a href="https://man.openbsd.org/ptrace.2">ptrace(2)</a>
	commands used to read/write the XSAVE area of a traced process.
  </li><li>Correctly honored the count optional argument of the <a href="https://man.openbsd.org/ddb.4">ddb(4)</a> break command,
	ensuring execution does not stop until the breakpoint is hit at least
	that many times.
  </li><li>Taught <a href="https://man.openbsd.org/ddb.4">ddb(4)</a> how to
	disassemble endbr64.
  </li><li>Moved <a href="https://man.openbsd.org/dt.4">dt(4)</a> to using
	a ringbuffer per CPU.
  </li><li>Added 'socket' refcnt type to <a href="https://man.openbsd.org/dt.4">dt(4)</a>.
  </li><li>Made <a href="https://man.openbsd.org/btrace.8">btrace(8)</a>
	support additional interval/profile units (hz, us, ms, s).
  </li><li>Added multi-line strings support to the <a href="https://man.openbsd.org/bt.5">bt(5)</a> script parser.

  </li><li>Added kern.audio.kbdcontrol <a href="https://man.openbsd.org/sysctl.2">sysctl(2)</a> variable,
	allowing the volume keys on multimedia keyboards to be handled as
	regular keys if set to 0.
  </li><li>Implement <a href="https://man.openbsd.org/bus_dma.9">bus_dma(9)</a> bounce buffering
	for raw memory.
  </li><li>Started ignoring sub-nodes of non-functional nodes in the ACPI
	tree walk to fix double and triple attachments of the same PCIe root
	bridges.

  </li><li>Suspend/Hibernate Support
  <ul>
  <li>Ensured all
    <a href="https://man.openbsd.org/apm.8">hibernate</a>
    data is written inside the allocated chunk of swap.
  </li><li>Removed unneeded zeroing of free pages during
    <a href="https://man.openbsd.org/apm.8">hibernate</a>.
  </li><li>Corrected
    <a href="https://man.openbsd.org/apm.8">hibernate</a>
    error detection during RLE writes.
  </li><li>Ensured
    <a href="https://man.openbsd.org/apm.8">hibernate</a>
    fails when I/O or memory allocation errors occur.
  </li></ul>

  </li><li>Bugfixes
  <ul>
  <li>Fixed a (mostly) hypothetical race in <a href="https://man.openbsd.org/pinsyscalls.2">pinsyscalls(2)</a> by
	making it return an error if called in a multi-threaded process.
  </li><li>Fixed CPU idle percentage in <a href="https://man.openbsd.org/top.1">top(1)</a> on <a href="https://www.openbsd.org/macppc.html">macppc</a>.
  </li><li>Reworked how processes are stopped because of a signal. Now
	multithreaded processes can be reliably stopped and continued. This
	should fix problems seen in golang, mpv and in our regress tests.
  </li><li>Fix possible races of changes to the per-process unveil
	data structures by either pledge() [removing all path promises] or
	unveil() [adding new paths], against namei() inspecting in other
	thread system calls.
  </li></ul>
  </li></ul>

</li><li id="SMP_Improvements">SMP Improvements
  <ul>
  <li>Unlocked sysctl <a href="https://man.openbsd.org/sysctl.2">kern.timeout_stats</a>.
  </li><li>Unlocked sysctl <a href="https://man.openbsd.org/sysctl.2">kern.allowkmem</a>.
  </li><li>Unlocked sysctl <a href="https://man.openbsd.org/sysctl.2">kern.video.record</a>.
  </li><li>Unlocked sysctl <a href="https://man.openbsd.org/sysctl.2">net.inet.gre.allow</a> and
	net.inet.gre.wccp.
  </li><li>Unlocked sysctl <a href="https://man.openbsd.org/sysctl.2">kern.global_ptrace</a>.
  </li><li>Unlocked sysctl <a href="https://man.openbsd.org/sysctl.2">kern.wxabort</a>.
  </li><li>Unlocked sysctl <a href="https://man.openbsd.org/sysctl.2">kern.malloc.kmemstat</a>.
  </li><li>Reduced kernel lock contention when tearing down file-backed regions.
  </li><li>Unlocked ptsignal, psignal and prsignal by using the ps_mtx <a href="https://man.openbsd.org/mutex.9">mutex(9)</a>.
  </li><li>Used a mutex to make <a href="https://man.openbsd.org/psp.4">psp(4)</a> MP safe.
  </li><li>Locked send socket buffer for <a href="https://man.openbsd.org/fstat.2">fstat(2)</a> syscall.
  </li><li>Made lock changes to reduce lock contention in __thrsleep and
	__thrwakeup syscalls. go performance particularly benefits from this.
  </li><li>Unlocked <a href="https://man.openbsd.org/virtio.4">virtio(4)</a>.
  </li><li>Made `video_filtops' MP-safe.
  </li><li>Run TCP output and TCP timers in parallel.
    <ul>
    <li>TCP <a href="https://man.openbsd.org/send.2">send(2)</a>
	and <a href="https://man.openbsd.org/recv.2">recv(2)</a>
	system calls use shared netlock.
	Multiple userland threads can work on different sockets in
	parallel.
    </li><li>TCP output no longer blocks IP processing.
    </li><li>TCP timer also use locks that are specific to the socket they
	are working on, other network traffic can be processed by
	different CPUs.
    </li><li>Socket splicing is MP-safe for TCP.
    </li><li>Some of the sysctl syscalls affecting TCP no longer block
	network operations on other CPUs.
    </li><li>Only TCP input still uses exclusive netlock and prevents
	other parts of the network stack from running in parallel.
    </li></ul>
  </li><li>Unlocked <a href="https://man.openbsd.org/accept.2">accept(2)</a> for TCP sockets.
  </li><li>Started using shared net lock when calling <a href="https://man.openbsd.org/shutdown.2">shutdown(2)</a> on internet
	socket.
  </li><li>Reworked rwlocks to reduce pressure on the scheduler and SCHED_LOCK.
  </li><li>Pushed the KERNEL_LOCK() down to <a href="https://man.openbsd.org/namei.9">namei(9)</a> in <a href="https://man.openbsd.org/stat.2">stat(2)</a>, lstat(2) &amp;
	fstatat(2) and Unlocked <a href="https://man.openbsd.org/fstat.2">fstat(2)</a>.
  </li><li>Unlocked <a href="https://man.openbsd.org/wskbd.4">wskbd(4)</a>
	kqueue filterops.
  </li><li>Used `ws_mtx' <a href="https://man.openbsd.org/mutex.9">mutex(9)</a> to make <a href="https://man.openbsd.org/wsmux.4">wsmux(4)</a> filterops MP-safe.
  </li><li>Unlocked <a href="https://man.openbsd.org/open.2">open(2)</a>
	and <a href="https://man.openbsd.org/openat.2">openat(2)</a>.
  </li><li>Made <a href="https://man.openbsd.org/wsmouse.4">wsmouse(4)</a>
	and wstpad filterops MP-safe.
  </li><li>Pushed KERNEL_LOCK() inside __realpath(2).
  </li><li>Made wakeup of parent process in dowait6 reliable even without kernel lock.
  </li><li>Used ps_mtx <a href="https://man.openbsd.org/mutex.9">mutex(9)</a> to lock the child
	process that is being checked by dowait6.
  </li></ul>

</li><li>Direct Rendering Manager and graphics drivers
  <ul>
  <li>Updated <a href="https://man.openbsd.org/drm.4">drm(4)</a>
      to Linux 6.12.21.
  </li><li><a href="https://man.openbsd.org/drm.4">amdgpu(4)</a>: Added kernel
      support for Ryzen AI 300 (Strix Point, Strix Halo, Krackan Point),
      Radeon RX 9070 (Navi 48).
  </li><li><a href="https://man.openbsd.org/inteldrm.4">inteldrm(4)</a>: Added
      support for Arrow Lake.
  </li></ul>

</li><li>VMM/VMD improvements
  <ul>
  <li>Added an IPI for executing INVEPT to flush EPT on remote CPUs, a
	first step toward allowing guest memory not to be wired by UVM.
  </li><li>Implemented <a href="https://man.openbsd.org/psp.4">psp(4)</a>
	shutdown command and <a href="https://man.openbsd.org/ioctl.2">ioctl(2)</a> PSP_IOC_SHUTDOWN,
	which will be used by <a href="https://man.openbsd.org/vmd.8">vmd(8)</a> to reset <a href="https://man.openbsd.org/psp.4">psp(4)</a> on startup.
  </li><li>Started using <a href="https://man.openbsd.org/acpipci.4">acpipci(4)</a> on
	hypervisors. If the hypervisor cpuid bit is set, use acpipci to attach
	PCI busses. As virtualization is not that old, we can assume that in
	VMs we don't need the quirk for old, broken ACPI.  This solves
	problems with PCI BAR access and recent SeaBIOS versions on QEMU.
  </li></ul>

</li><li>Various new userland features:
  <ul>
  <li>Numerous changes to make the
	<a href="https://man.openbsd.org/imsg_init.3">imsg</a> API
	stricter and better, which were followed
	by adapting all applications across the tree.
  </li><li>Allow the user to provide an alternative perfpolicy when on
	battery, extending the semantics of hw.perfpolicy to provide two
	buttons to specify desired behavior. This gives users more flexibility
	in setting the performance when AC-powered vs. battery powered.
  </li><li>Made <a href="https://man.openbsd.org/calendar.1">calendar(1)</a> use the
	environment variable RECIPIENT_EMAIL for sending mails to.
  </li><li>Made <a href="https://man.openbsd.org/security.8">security(8)</a>
	use GMT rather than the local timezone when checking for changes in
	device nodes and setuid files. Avoids false positives when changing
	timezones.
  </li><li>Added a new variable PASSWDSKIP that can be set in
	/etc/daily.local to prevent <a href="https://man.openbsd.org/security.8">security(8)</a> from
	complaining about specific accounts that have no password. This is
	typically used for services like anoncvs and gotd.
  </li><li>Added [-f file] to <a href="https://man.openbsd.org/sysctl.8">sysctl(8)</a> to apply
	<a href="https://man.openbsd.org/sysctl.conf.5">sysctl.conf(5)</a>
	in one go, and started using it in <a href="https://man.openbsd.org/rc.8">rc(8)</a> instead of a parser implemented in ksh.
  </li><li>Added support for read/write of xmm/ymm registers to
        <a href="https://man.openbsd.org/lldb.1">lldb(1)</a>.
  </li></ul>

</li><li>Various bugfixes and tweaks in userland:
  <ul>
  <li>Added <a href="https://man.openbsd.org/wsconscfg.8">wsconscfg(8)</a> -g option
	to get the index of the current virtual terminal.
  </li><li>Made <a href="https://man.openbsd.org/getgrouplist.3">getgrouplist(3)</a>
	always return the total number of groups found.
  </li><li>Ignore extra groups that don't fit in the buffer passed to <a href="https://man.openbsd.org/getgrouplist.3">getgrouplist(3)</a>,
	providing only the kernel maximum of sixteen groups.
  </li><li>Prevent <a href="https://man.openbsd.org/newsyslog.8">newsyslog(8)</a> from running
	through time checks when an entry needs to be rotated based on size.
  </li><li>Changed <a href="https://man.openbsd.org/ps.1">ps(1)</a> to print
	the session id (PID of the session leader) instead of a pointer with
	display argument 'sess'.
  </li><li>In <a href="https://man.openbsd.org/cu.1">cu(1)</a>, map ucom
	unit number to cuaU number using the same scheme MAKEDEV uses, fixing
	problems with ucom units &gt; 10.
  </li><li>Made CPU frequencies human-readable with <a href="https://man.openbsd.org/systat.1">systat(1)</a> sensors -h.
  </li><li>Fixed a bug where <a href="https://man.openbsd.org/getty.8">getty(8)</a> dx flag was
	supposed to set decctlq, but was setting ixany instead.
  </li><li>Made <a href="https://man.openbsd.org/pkg_add.1">pkg_add(1)</a> run <a href="https://man.openbsd.org/ldconfig.8">ldconfig(8)</a> after each
	updateset if the list of shared libraries was changed.
  </li><li>Corrected behavior of <a href="https://man.openbsd.org/sed.1">sed(1)</a> c command to match
	POSIX.
  </li><li>Make <a href="https://man.openbsd.org/clang.1">clang(1)</a>
	-fzero-call-used-regs aware of the register used by
	retguard. QEMU is using -fzero-call-used-regs, causing a crash.
  </li><li>Disk partition information is now saved by
	  <a href="https://man.openbsd.org/security.8">security(8).</a>
  </li><li>Made <a href="https://man.openbsd.org/security.8">security(8)</a>
	ignore <a href="https://man.openbsd.org/quota.1">quota(1)</a> files
	and all subdirectories of /var/mail when checking the ownership and
	mode of mailboxes.
  </li><li>Added <a href="https://man.openbsd.org/pkg-config.1">pkg-config(1)</a> support
	for relocatable .pc files.
  </li><li>Made <a href="https://man.openbsd.org/mandoc.1">mandoc(1)</a> "-T html"
	and "-T markdown" output translate ".%R RFC &lt;number&gt;" to a
	hyperlink to rfc-editor.org.
  </li><li>Support decimal fractions like "0.25i" in
	<a href="https://man.openbsd.org/roff.7">roff(7)</a> scaled widths
	and arithmetic operations in
	<a href="https://man.openbsd.org/tbl.7">tbl(7)</a> column widths,
	as needed for some manual pages written with DocBook.
  </li><li>When <a href="https://man.openbsd.org/syslogd.8">syslogd(8)</a>
	acting as logserver with TLS (-S) and
	client-certificates are used for authentication (-K), use the CN from
	the client's certificate as hostname.
  </li><li>Adjusted the alignment when
	<a href="https://man.openbsd.org/df.1">df(1)</a> prints inode columns.
	This makes
	'df -hi' on systems with large partitions easier on the eyes.
  </li><li>Made <a href="https://man.openbsd.org/test.1">test(1)</a> use
	timespeccmp() and st_mtim instead of comparing st_mtime to fix
	comparison of files with modification times that differ by less than a
	second.
  </li><li>Made <a href="https://man.openbsd.org/ksh.1">ksh(1)</a> use
	timespeccmp() and st_mtim instead of comparing st_mtime to fix
	comparison of files with modification times that differ by less than a
	second.
  </li><li>In <a href="https://man.openbsd.org/ps.1">ps(1)</a> added a
	digit to vsz and rss to accommodate processes using more memory.
  </li><li>Updated <a href="https://man.openbsd.org/tzfile.5">tzfile(5)</a>
	to 2025bgtz from https://github.com/JodaOrg/global-tz.
  </li><li>Updated libc/locale support including
	e.g. <a href="https://man.openbsd.org/wcwidth.3">wcwidth(3)</a>
	and the <a href="https://man.openbsd.org/iswalnum.3">iswalnum(3)</a>
        family of functions to Unicode Version 15.0.0.
  </li></ul>

</li><li id="hardware_support">Improved hardware support and driver bugfixes, including:
  <ul>
  <li>Increased <a href="https://man.openbsd.org/psp.4">psp(4)</a> timeouts, allowing the EPYC 9124 time to attach.
  </li><li>Added PercentLoad sensor to <a href="https://man.openbsd.org/upd.4">upd(4)</a>, reporting the % of the available UPS power drawn by output outlets.
  </li><li>Fixed RunTimeToEmpty on some EATON models in <a href="https://man.openbsd.org/upd.4">upd(4)</a>.
  </li><li>Improved the heuristic for detecting I2C devices (making type-A ports on the Vivobook work in ACPI mode).
  </li><li>Added support for CSI b control sequence (repeat last printed character) to the <a href="https://man.openbsd.org/wscons.4">wscons(4)</a> vt100 emulation.
  </li><li>Fixed <a href="https://man.openbsd.org/simplefb.4">simplefb(4)</a> colours for BPP16 and BPP24.
  </li><li>Added support for BPP16 16-bit color EFI framebuffer format as offered by U-Boot.
  </li><li>Implemented CSI s and CSI u to save and restore cursor position in <a href="https://man.openbsd.org/wscons.4">wscons(4)</a>.
  </li><li>Made scaling available for normal <a href="https://man.openbsd.org/wsmouse.4">wsmouse.4</a> mice, not just touchpads.
  </li><li>Added <a href="https://man.openbsd.org/scmi.4">scmi(4)</a> mailbox transport and perf protocol for CPU frequency management on Snapdragon X Elite.
  </li><li>Moved to send only a single reset during attach for <a href="https://man.openbsd.org/ihidev.4">ihidev(4)</a> devices, preventing issues with some devices like the built-in keyboard on the ThinkPad T14s Gen 6.
  </li><li>Changed the <a href="https://man.openbsd.org/sdhc.4">sdhc(4)</a> bus power behavior to no longer perform a power-off voltage switch request when the card is already operating at the requested voltage.
  </li><li>Implemented <a href="https://man.openbsd.org/aplsmc.4">aplsmc(4)</a> support for the new CHLS key used to control the battery charge level in newer SMC firmware.
  </li><li>Added <a href="https://man.openbsd.org/pinctrl.4">pinctrl(4)</a> support to the <a href="https://man.openbsd.org/qciic.4">qciic(4)</a> driver for Qualcomm Snapdragon SoCs.
  </li><li>Made <a href="https://man.openbsd.org/qcpas.4">qcpas(4)</a> send APM_POWER_CHANGE events on AC/battery life changes, allowing upowerd to react.
  </li><li>Added <a href="https://man.openbsd.org/qccpucp.4">qccpucp(4)</a>, a driver for the Qualcomm CPUSS Control Processor (CPUCP) mailbox controller.
  </li><li>Made <a href="https://man.openbsd.org/qcpon.4">qcpon(4)</a> query hardware for the button state to detect release even if the press event is missed, and to signal wakeup when the button is pressed.
  </li><li>Made qcscm(4) attach at acpi(4). This lets Qualcomm machines which use qcscm(4) access EFI variables in ACPI mode. Some arm64 machines, like the Samsung Galaxy Book4 Edge can be successfully installed with this change.
  </li><li>Fixed support for AMD 600 series <a href="https://man.openbsd.org/ahci.4">ahci(4)</a> controller.
  </li><li>Introduce a pckbc@acpi driver attachment that is use instead of pckbc@isa when an interrupt configuration is incompatible with legacy ISA. This unbreaks, among other things, the keyboards in various Chromebooks.
  </li><li>Implemented <a href="https://man.openbsd.org/rkpmic.4">rkpmic(4)</a> power down if the PMIC is marked as the system power controller in the device tree.
  </li><li>Added RK3399 support to <a href="https://man.openbsd.org/rkusbphy.4">rkusbphy(4)</a>.
  </li><li>Added <a href="https://man.openbsd.org/dwmmc.4">dwmmc(4)</a> support for the "post-power-on-delay-ms" in the MMC power sequencing.
  </li><li>Implemented regulator-based signal voltage switch support in <a href="https://man.openbsd.org/dwmmc.4">dwmmc(4)</a>, fixing bootup on the MNT Reform2 with the RK3588 module.
  </li><li>Added <a href="https://man.openbsd.org/uvideo.4">uvideo(4)</a> support for Jabra PanaCast 20.
  </li><li>Ensure <a href="https://man.openbsd.org/uvideo.4">uvideo(4)</a> fills v4l2_capability correctly (allowing some V4L consumers to use bus_info to identify the desired webcam when attempting to switch devices).
  </li><li>Added <a href="https://man.openbsd.org/uvideo.4">uvideo(4)</a> support for devices which report bulk and isochronous endpoints.
  </li><li>Made <a href="https://man.openbsd.org/uvideo.4">uvideo(4)</a> bypass unknown pixelformat to consumer rather than rejecting unknown driver formats.
  </li><li>Support colorformat from <a href="https://man.openbsd.org/uvideo.4">uvideo(4)</a> device.
  </li><li>Fixed a <a href="https://man.openbsd.org/uvideo.4">uvideo(4)</a> crash on close of isochronous endpoint's webcam.
  </li><li>Ensure <a href="https://man.openbsd.org/uvideo.4">uvideo(4)</a> forwards frames with error bit to V4L consumers, which adds support of the integrated camera on ThinkPad T14 Gen 5, ThinkPad X1 Nano Gen 2, ThinkPad X13 and many other devices.
  </li><li>Forced 32-bit accesses when reading 8-bit or 16-bit registers, allowing use of <a href="https://man.openbsd.org/xhci.4">xhci(4)</a> on a Cadence xHCI controller as seen on the Radxa Orion O6.
  </li><li>Added USB 3.0 speed support to <a href="https://man.openbsd.org/xhci.4">xhci(4)</a> and <a href="https://man.openbsd.org/uvideo.4">uvideo(4)</a>.
  </li><li>Fixed <a href="https://man.openbsd.org/uaudio.4">uaudio(4)</a> devices that don't support sample rate changes.
  </li><li>Added LED support for <a href="https://man.openbsd.org/ikbd.4">ikbd(4)</a> keyboards.
  </li><li>Added <a href="https://man.openbsd.org/mtintc.4">mtintc(4)</a> a driver supporting interrupt controllers found on MediaTek SoCs.
  </li><li>Added <a href="https://man.openbsd.org/mtrng.4">mtrng(4)</a>, a driver supporting the 32-bit random number generator on MediaTek SoCs.
  </li><li>Added <a href="https://man.openbsd.org/mtxhci.4">mtxhci(4)</a>, a driver for the xHCI USB controller found on MediaTek SoCs, and enable it on armv7 and arm64.
  </li></ul>

</li><li>New or improved network hardware support:
  <ul>
  <li>Added <a href="https://man.openbsd.org/ice.4">ice(4)</a>, a driver for Intel E810 Ethernet (1Gb/10Gb/25Gb/50Gb/100Gb) devices.
  </li><li>Increased receive mbuf size with LRO in <a href="https://man.openbsd.org/vio.4">vio(4)</a>, helping TCP splice performance.
  </li><li>Fixed <a href="https://man.openbsd.org/xbf.4">xbf(4)</a> and <a href="https://man.openbsd.org/xnf.4">xnf(4)</a> not attaching on XCP-ng 8.3/Xen 4.17.
  </li><li>Added printing of number of queues and interrupt and Ethernet address details to <a href="https://man.openbsd.org/mcx.4">mcx(4)</a>.
  </li><li>Fixed the <a href="https://man.openbsd.org/bnxt.4">bnxt(4)</a> receive refill timeout to only refill rings that are currently empty, preventing possible corruption and crashes.
  </li><li>Added support for AX88772D to <a href="https://man.openbsd.org/axen.4">axen(4)</a>.
  </li><li>Added <a href="https://man.openbsd.org/ixv.4">ixv(4)</a>, a driver for virtual functions of Intel 82598EB, 82559 and X540.
  </li><li>Enabled rx/tx checksum offloading on <a href="https://man.openbsd.org/iavf.4">iavf(4)</a>.
  </li><li>Added RSS/multiqueue support for AQC11x models ("aq2") in <a href="https://man.openbsd.org/aq.4">aq(4)</a>.
  </li><li>Added support for reading EEPROM pages for <a href="https://man.openbsd.org/aq.4">aq(4)</a> cards with SFP slots.
  </li><li>Started clearing the OACTIVE flag on transmit queues when <a href="https://man.openbsd.org/ixl.4">ixl(4)</a> is reset.
  </li></ul>

</li><li>Added or improved wireless network drivers:
  <ul>
  <li>Added support for MA devices to <a href="https://man.openbsd.org/iwx.4">iwx(4)</a>.
  </li><li>Restricted scanned channels appropriately when <a href="https://man.openbsd.org/qwx.4">qwx(4)</a> runs in a fixed PHY mode.
  </li><li>Add support for QCA2066 to <a href="https://man.openbsd.org/qwx.4">qwx(4)</a>.
  </li><li>Changed <a href="https://man.openbsd.org/mtw.4">mtw(4)</a> to only open bulk <a href="https://man.openbsd.org/usb.4">usb(4)</a> pipes once for the lifetime of the device.
  </li></ul>

</li><li>Installer, upgrade and bootloader improvements:
  <ul>
  <li>On the <a href="https://www.openbsd.org/macppc.html">macppc</a>
	architecture, make ofwboot sync instruction cache before entering
	kernel, preventing a potential boot failure.
<!-- installboot -->
  </li><li>Made <a href="https://man.openbsd.org/installboot.8">installboot(8)</a>
	install a copy of the UEFI bootloader in /efi/openbsd on the EFI
	system partition, allowing creation of boot options for the firmware
	boot manager other OSes will leave alone.
  </li><li>Only install a second copy of the bootloader if the EFI
	System Partition is at least 1MB to avoid filling up the tiny ESPs we
	used to create a few releases ago.
  </li><li>Made <a href="https://man.openbsd.org/installboot.8">installboot(8)</a> only
	set BootOrder if our boot option isn't already part of it. This means
	sysupgrade (or reinstalls) will no longer set OpenBSD as the default
	OS if users change the boot order by some other means.  Fresh installs
	will still make OpenBSD the default OS.
  </li><li>Added a -c option <a href="https://man.openbsd.org/installboot.8">installboot(8)</a> that
	sets up the machine to boot from the specified disk, used on arm64 and
	amd64 with UEFI and GPT.
<!-- sysupgrade -->
  </li><li>Added <a href="https://man.openbsd.org/sysupgrade.8">sysupgrade(8)</a> -R #.#
	to try to use a specific release version rather than the immediate
	+0.1.
  </li><li>Provided a mechanism for getting required keys to <a href="https://man.openbsd.org/sysupgrade.8">sysupgrade(8)</a> older
	machines, providing a new set of keybundles signed by older keys to
	allow sysupgrade to securely and automatically download the required
	key.
  </li><li>Added firmware keys to the signify key bundles. <a href="https://man.openbsd.org/sysupgrade.8">sysupgrade(8)</a> will now
	extract the firmware key also, allowing fw_update fetch the most
	up-to-date firmware before upgrading.
  </li><li>Added support to <a href="https://man.openbsd.org/sysupgrade.8">sysupgrade(8)</a> to
	perform a sysupgrade from a fileset stored on a filesystem. This is
	convenient for offline machines.
<!-- fw_update -->
  </li><li>Made <a href="https://man.openbsd.org/fw_update.8">fw_update(8)</a> -a mean
	all when downloading or installing, not just deleting.
  </li><li>Allowed <a href="https://man.openbsd.org/fw_update.8">fw_update(8)</a> to
	download firmware without root.
  </li><li>Added <a href="https://man.openbsd.org/fw_update.8">fw_update(8)</a> -l flag to
	list drivers or files.
  </li><li>Added -D option to <a href="https://man.openbsd.org/fw_update.8">fw_update(8)</a> for using
	a different dmesg for driver detection.
<!-- installer proper -->
  </li><li>Reworked the "Default IPv6 router?" question in the installer to
	behave like the other questions.
  </li><li>On amd64 with ACPI &gt;= 5, assume that the installer booted in
	UEFI mode and default to using a GUID Partition Table (GPT).
  </li><li>Make IPv6 link-local scope identifiers in "HTTP Server?" answers work in the installer.
<!-- updates/sysmerge -->
  </li><li>On updates using <a href="https://man.openbsd.org/sysmerge.8">sysmerge(8)</a>, added
	options to interactive <a href="https://man.openbsd.org/sdiff.1">sdiff(1)</a> merge for choosing
	both sides of a diff.
  </li></ul>

</li><li>Security improvements:
  <ul>
  <li>Added sshd-auth to the binaries that relink at boot.
  </li><li>Split the user authentication code from the sshd-session binary
	into a separate sshd-auth binary. This will be executed by
	sshd-session to complete the user authentication phase of the protocol
	only.  Splitting this code into a separate binary ensures that the
	crucial pre-authentication attack surface has an entirely disjoint
	address space from the code used for the rest of the connection.
  </li><li>Unveiled <a href="https://man.openbsd.org/mountd.8">mountd(8)</a>
	privileged child's write to/create of
	mountdtab file, and drop exec permission.
  </li></ul>

</li><li>New features in the network stack:
  <ul>
  <li>Added an AF_FRAME socket domain and an IFT_ETHER protocol family
	under it, allowing userland to use sockets to send and receive
	Ethernet frames.
  </li><li>Added tunneldf support to <a href="https://man.openbsd.org/sec.4">sec(4)</a>.
  </li><li>Added use of Toeplitz hash for UDP and IPv6 TCP output, giving an
	improvement in traffic distribution over the queues and 20%
	performance increase with UDP send on v4/v6 and TCP send on v6 without
	pf.
  </li><li>Implemented <a href="https://man.openbsd.org/tun.4">tun(4)</a>
	network offloads between the kernel and userland and introduced a new
	TUNSCAP ioctl .
  </li><li>Implement a per-thread route cache by implementing a thread
	local memory (struct netstack) that gets passed down the network
	stack. For consecutive packets it can reuse the route to the same
	destination.
  </li></ul>

  </li><li>Further changes and bugfixes in the network stack:
  <ul>
  <li>Replaced rwlock with iterator in UDP input multicast loop, preventing a potential kernel crash.
  </li><li>Ensure that the correct address family is used in ip_deliver()
	for enqueuing a packet, fixing a problem with tunneling of different
	address families.
  </li><li>Let LLDP packets fall through to being handled on the port
	interfaces for <a href="https://man.openbsd.org/aggr.4">aggr(4)</a> as mandated by the standard.
  </li><li>Enabled multiqueue for <a href="https://man.openbsd.org/vio.4">vio(4)</a>.
  </li><li>Let <a href="https://man.openbsd.org/pppoe.4">pppoe(4)</a> data
	packets go through if_vinput instead of the pppoeinq, improving
	throughput and possibly reducing packet loss.
  </li><li>Fixed out-of-band data in <a href="https://man.openbsd.org/somove.9">somove(9)</a> socket splicing.
  </li><li>Added <a href="https://man.openbsd.org/wg.4">wg(4)</a> logging of IP addresses of remote endpoints.
  </li><li>Limited receive queue of loopback interfaces with 8192 packets,
	preventing unlimited queues from reaching mbuf limits and making
	network unusable on some architectures.
  </li><li>Fixed TCP checksum for IPv6 packets with extension headers.
  </li><li>Fixed incorrect ICMP error translation in af-to NAT, making
	traceroute6 behind af-to to provide meaningful information.
  </li><li>Fixed a 24-year old bug where various checks for broadcast
	packets were mistakenly skipped, allowing one to send broadcast
	packets without the SO_BROADCAST option.
  </li><li>Prevented installation of path MTU routes for IPsec transport mode SAs.
  </li></ul>

</li><li>The following changes were made to the <a href="https://man.openbsd.org/pf.4">pf(4)</a> firewall:
  <ul>
  <li>Allowed <a href="https://man.openbsd.org/pfctl.8">pfctl(8)</a>
	specification of interface and queue bandwidths greater than ~4Gbit.
  </li><li>Fixed inpcb leak in <a href="https://man.openbsd.org/divert.4">divert(4)</a> attach.
  </li></ul>

</li><li>Routing daemons and other userland network programs saw the following improvements:
<ul>
  <li>Added <a href="https://man.openbsd.org/iked.8">iked(8)</a>
	"natt" option that forces negotiation of nat-t (and udpencap).
  </li><li>Made <a href="https://man.openbsd.org/radiusd.8">radiusd(8)</a> log the username when rejecting by ipcp.
  </li><li>Added <a href="https://man.openbsd.org/ifconfig.8">ifconfig(8)</a> vxlan
	"[-]endpoint" command, to remove a tunnel endpoint of a MAC address.
  </li><li>Made <a href="https://man.openbsd.org/ifconfig.8">ifconfig(8)</a> scan display
	wpa3.
  </li><li>Made <a href="https://man.openbsd.org/tcpdump.8">tcpdump(8)</a> print PPPoE tags as hex dumps.
  </li><li>Improved lldp output of <a href="https://man.openbsd.org/tcpdump.8">tcpdump(8)</a>.
  </li><li>Added support for client certificates to <a href="https://man.openbsd.org/relayd.8">relayd(8)</a>.
  </li><li>Made <a href="https://man.openbsd.org/acme-client.1">acme-client(1)</a> -v show the account URI from the Location header sent by the server in response to the newAccount API call.
  </li><li>Made <a href="https://man.openbsd.org/acme-client.1">acme-client(1)</a> always print account URI on first creation of an account key.
  </li><li>Added TLS support to <a href="https://man.openbsd.org/tcpbench.1">tcpbench(1)</a>.
  </li><li>Started taking into account how long the <a href="https://man.openbsd.org/ntpd.8">ntpd(8)</a> DNS probe takes
	before deciding to punt.
  </li><li>Added <a href="https://man.openbsd.org/unwind.8">unwind(8)</a>
	block list wildcard support using block list entries starting with '.'.
  </li><li>Implemented zoneversion EDNS option (RFC 9660) in <a href="https://man.openbsd.org/dig.1">dig(1)</a>.
  </li><li>Adjusted rDNS lifetime to RFC 8106 default (minimum) value in <a href="https://man.openbsd.org/rad.8">rad(8)</a>.
  </li><li>Made <a href="https://man.openbsd.org/nfsd.8">nfsd(8)</a> default to UDP when using only -n.
  </li><li>Implemented <a href="https://man.openbsd.org/iscsid.8">iscsid(8)</a> handling of
	HeaderDigest and DataDigest params.
  </li><li>Made iscsid send out all the values for session and connection
	params for each login stage, keeping control of what is selected,
	making it possible to connect to a lio target.
  </li><li>Respect checksum offloading in <a href="https://man.openbsd.org/dhcrelay.8">dhcrelay(8)</a> and <a href="https://man.openbsd.org/dhcrelay6.8">dhcrelay6(8)</a>.
  </li><li>Respect checksum offloading for incoming UDP in <a href="https://man.openbsd.org/dhcpd.8">dhcpd(8)</a>.

  </li><li>In <a href="https://man.openbsd.org/smtpd.8">smtpd(8)</a>,
  <ul>
	<li>Fixed few imprecisions in
	    <a href="https://man.openbsd.org/forward.5">forward(5)</a>
	    with regard to where and when <code>|</code> and
	    <code>:include:</code> are disallowed.
	</li><li>Fixed the connect filter request documentation in
	    <a href="https://man.openbsd.org/smtpd-filters.7">smtpd-filters(7)</a>.
	</li><li>Proper handling of permanent failures in
	    <a href="https://man.openbsd.org/mail.lmtp.8">mail.lmtp(8)</a>,
	    previously all failures were considered temporary and so delivery
	    was attempted again.
  </li></ul>
  </li><li>In <a href="https://man.openbsd.org/bgpd.8">bgpd(8)</a>,
  <ul>
  <li>Cache the Adj-RIB-Out for sessions that have not been down for
      more than 1h. This significantly improves synchronisation time
      of peers that flap.
  </li><li>Implement RFC 8538: Notification Message Support for
      BGP Graceful Restart.
  </li><li>Add support for RFC 8654, extended messages.
  </li><li>In bgplgd add additional endpoints to query the Adj-RIB-In and
      Adj-RIB-Out.
  </li><li>Bump internal message size limit to 128k and handle up to 10 000
      ASPA SPAS entries as suggested in draft-ietf-sidrops-aspa-profile.
  </li><li>Various improvements to the ibuf API including a new reader API
      which is used to make all message parsing in bgpd memory safe.
  </li><li>Added support for IPsec and TCP MD5 to RTR sessions.
  </li><li>Improve default multiproto capability announcement selection.
      The default MP capability is only set if no other capability is
      configured on the neighbor.
  </li><li>The `reject as-set` configuration option now defaults to yes.
      Route announcements with AS_SET segments in the AS_PATH Attribute
      will be rejected. See draft-ietf-idr-deprecate-as-set-confed-set
      for more information.
  </li><li>The RFC 8654 Extended Message configuration changed from
      "announce extended (yes|no|enforce)" to
      "announce extended message (yes|no|enforce)"
  </li><li>RFC 8950 - Extended nexthop encoding support in the RIB.
  </li><li>Preliminary support for EVPN in the RIB.
  </li><li>When "transparent-as yes" is set, well-known BGP communities are
      passed on according to RFC 7947. This means that IX Route Servers
      transparently pass through NO_EXPORT, NO_ADVERTISE, etc.
  </li><li>Make the example bgpd.conf work out of the box with 4byte ASN.
  </li></ul>

  </li><li>In <a href="https://man.openbsd.org/rpki-client.8">rpki-client(8)</a>,
  <ul>
  <li>The generated BIRD config file was reworked. BIRD versions 1.x are no
  longer supported and the -T option to customize the ROA table name was
  removed. The config file now includes the ASPA-set by default and is
  therefore only compatible with BIRD 2.16 and later. If compatibility
  with older BIRD versions is required, the ASPA-set can be excluded
  with the -A flag. Operators should delete any remaining bird1v4 and
  bird1v6 output files.
  </li><li>Validated ROA payloads from AS0 TALs are by default excluded from the
  output files as they are not recommended for automatic filtering of
  BGP routes. This precaution can be overridden with the new -0 flag.
  </li><li>Various improvements to the ibuf API, including a new reader API
  which is used to make all message parsing in rpki-client memory safe.
  </li><li>Warn about gaps in manifest issuance. Such gaps can appear for example
  if rpki-client isn't run frequently enough, if there are issues with
  an RFC 8181 publication server or if there is an operational error on
  the side of the CA.
  </li><li>Work around a backward compatibility break accidentally introduced
  in OpenSSL 3.4.0, which resulted in all RPKI signed objects being
  rejected. Earlier and later versions of OpenSSL are not affected.
  </li><li>Improved validity period checking in file mode. The product's lifetime
  and the expiration time of the signature path are now taken into
  account.
  </li><li>Better cleanup in case of a fallback from RRDP to RSYNC. In rare
  circumstances, files were moved to the wrong place in the cache.
  </li><li>rpki-client now includes arin.tal which is no longer
  <a href="https://www.arin.net/announcements/20250116-tal/">legally encumbered</a>.
  </li><li>rpki-client reports Certification Authorities that do not meaningfully
  participate in the RPKI as non-functional CAs. By definition, a CA is
  non-functional if there is no currently valid Manifest. The number of
  such CAs is printed at the end of each run and more detailed information
  is available in the JSON (-j) and ometrics (-m) output.
  </li><li>Fix a problem where incorrect internal RRDP state handling in
  rpki-client could lead to a denial of service.
  </li><li>Termination of rsync child processes with SIGTERM is no longer treated as
  an error if rpki-client has sent this signal. This only affects openrsync.
  </li><li>Do not exit filemode with an error if a .gbr or a .tak object contains
  control characters in its UTF-8 strings. Instead, only warn and emit a
  sanitized version in JSON output.
  </li></ul>
</li></ul><!-- Routing daemons and other userland network improvements -->

</li><li><a href="https://man.openbsd.org/tmux.1">tmux(1)</a> improvements and bug fixes:
  <ul>
  <li>Fixed grey color in <a href="https://man.openbsd.org/tmux.1">tmux(1)</a>.
  </li><li>Added a way to make the preview larger in <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> tree mode.
  </li><li>Fixed <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> problems with pasted text being interpreted as extended keys.
  </li><li>Made <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> only use default-shell for popups, returning to /bin/sh for run-shell, if-shell and #().
  </li><li>Added MSYSTEM to <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> default update-environment.
  </li><li>Added copy-mode-position-format to configure the <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> position indicator.
  </li><li>Added -y flag to disable <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> confirmation prompts in modes.
  </li><li>Reworked <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> copy mode commands ("send-keys -X") to parse the arguments so that flags may be detected properly rather than just looking for strings ("-O" and so on). Also added -C and -P flags to the copy commands. -C prevents the commands from sending the text to the clipboard and -P prevents them from adding the text as a paste buffer.
  </li><li>Added <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> prompt-cursor-colour and prompt-cursor-style to set the style of the cursor in the command prompt and remove the emulated cursor.
  </li><li>Added <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> initial-repeat-time option to allow the first repeat time to be increased and later reduced.
  </li><li>Added a <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> sixel_support format variable which is 1 if SIXEL is supported (always 0 on OpenBSD).
  </li><li>Allow control characters prefixed with C-v to be entered at the tmux.1 command prompt.
  </li><li>Added <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> support for a scrollbar at the side of each pane using new options pane-scrollbars, pane-scrollbars-positions and pane-scrollbars-styles.
  </li><li>Added <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> option to control the input buffer size.
  </li><li>Added <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> scrollbar mouse support.
  </li><li>Added a <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> no-detach-on-destroy client option, useful for control mode clients.
  </li><li>Added <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> scrollbar style parameters width and pad.
  </li><li>Added copy-mode-position-style and copy-mode-selection-style options to <a href="https://man.openbsd.org/tmux.1">tmux(1)</a>.
  </li><li>Added a <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> option allowing users to override the width of individual Unicode codepoints.
  </li><li>Fixed mouse_hyperlink format in <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> copy mode.
  </li><li>Added S-Up and S-Down to move windows in <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> tree mode.
  </li><li>Made <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> correctly skip wide characters in hyperlinks.
  </li><li>Made <a href="https://man.openbsd.org/tmux.1">tmux(1)</a> only align panes and windows, not sessions.
</li></ul>

</li><li>LibreSSL version 4.1.0
  <ul>
  <li>Portable changes
    <ul>
    <li>Added initial experimental support for loongarch64.
    </li><li>Fixed compilation for mips32 and reenable CI.
    </li><li>Fixed CMake builds on FreeBSD.
    </li><li>Fixed the --prefix option for cmake --install.
    </li><li>Fixed tests for MinGW due to missing sh(1).
    </li></ul>
  </li><li>Internal improvements
    <ul>
    <li>Cleaned up the error implementation.
    </li><li>Many bug fixes and simplifications in the EC ASN.1 code.
    </li><li>Corrected DER encoding for EC keys and parameters.
    </li><li>Polished
      <a href="https://man.openbsd.org/EC_POINT_oct2point.3">EC_POINT_{oct2point,point2oct}(3)</a> internals.
    </li><li>Rewrote the wNAF code for fast ECDSA verification.
    </li><li>Improved the code setting compressed coordinates for EC points.
    </li><li>Reworked CPU capabilities detection for amd64 and aarch64.
    </li><li>New SHA-1, SHA-256 and SHA-512 assembly implementations for amd64.
      These make use of the SHA-NI instruction if it is available and
      replace the perl-generated assembly optimized for museum pieces.
      These are not yet enabled in libressl-portable.
    </li><li>New SHA-256 and SHA-512 assembly implementations for aarch64
      making use of the ARM Cryptographic Extension (CE). Not yet
      enabled in libressl-portable.
    </li><li>New simplified, readable MD5 implementation for amd64.
    </li><li>Rewrote
      <a href="https://man.openbsd.org/BN_bn2binpad.3">BN_bn2binpad(3)</a>
      and its lebin siblings.
    </li><li>The BIGNUMs in EC_GROUP and EC_POINT are now heap allocated.
    </li><li>Rewrote TS_ASN1_INTEGER_print_bio().
    </li><li>Improved bit counter handling in MD5.
    </li><li>Simplified and cleaned up the BN_RECP_CTX internals.
    </li><li>Improved SM4 to match other symmetric ciphers more closely.
    </li><li>Rewrote <a href="https://man.openbsd.org/X509_NAME_oneline.3">X509_NAME_oneline(3)</a> and X509_NAME_print() using CBS/CBB.
    </li><li>CRLs are now cached in the issuer cache like certificates.
    </li><li>Replaced combinations of
      <a href="https://man.openbsd.org/BN_MONT_CTX_new.3">BN_MONT_CTX_new(3)</a>/set with an internal BN_MONT_CTX_create().
    </li><li>Replaced <a href="https://man.openbsd.org/BN_bn2hex.3">BN_bn2hex(3)</a>
      reimplementation in
      <a href="https://man.openbsd.org/openssl.1#ca">openssl(1) ca</a> with
      a proper API call.
    </li><li>Fixed integer overflows due to signed shift in obj_dat.c.
    </li><li>Improved some X509_VERIFY_PARAM internals and avoid an out of
      bounds read from public API.
    </li><li>Imported ML-KEM 768 and 1024 from BoringSSL (not yet public API).
    </li></ul>
  </li><li>Compatibility changes
    <ul>
    <li>Added an OPENSSL_INIT_NO_ATEXIT flag for
      <a href="https://man.openbsd.org/OPENSSL_init_crypto.3">OPENSSL_init_crypto(3)</a>.
      It has no effect since LibreSSL doesn't call
      <a href="https://man.openbsd.org/atexit.3">atexit(3)</a>.
    </li><li>Elliptic curve parameters are only accepted if they encode a
      built-in curve.
    </li><li>EC_METHOD is no longer public and the API exposing it has been
      removed.  This includes
      <a href="https://man.openbsd.org/OpenBSD-7.6/EC_GROUP_new.3">EC_GROUP_new(3)</a>,
      <a href="https://man.openbsd.org/OpenBSD-7.6/EC_GFp_mont_method.3">EC_GFp_mont_method(3)</a>,
      <a href="https://man.openbsd.org/OpenBSD-7.6/EC_GROUP_method_of.3">EC_GROUP_method_of(3)</a>, and EC_METHOD_get_field_type().
    </li><li>The precomputation stubs for EC_GROUP were removed.
    </li><li>The API setting Jacobian projective coordinates for a point was
      removed as were
      <a href="https://man.openbsd.org/OpenBSD-7.6/EC_POINTs_mul.3">EC_POINTs_{mul,make_affine}(3)</a>.
    </li><li>All elliptic curves over fields with less than 224 bits and a
      few more were removed from the built-in curves. This includes
      all WTLS curves and P-192.
    </li><li>It is no longer necessary to set RSA_FLAG_SIGN_VER to use the
      sign and verify handlers set with
      <a href="https://man.openbsd.org/RSA_meth_set_sign.3">RSA_meth_set_{sign,verify}</a>.
    </li><li>Removed the -C option to generate "C code" from the
      <a href="https://man.openbsd.org/openssl.1">openssl(1)</a>
      dh, dhparam, dsaparam, ecparam, and x509 subcommands.
    </li><li>Removed #error in headers when OPENSSL_NO_* is defined.
    </li><li><a href="https://man.openbsd.org/CRYPTO_set_mem_functions.3">CRYPTO_set_mem_functions(3)</a> now matches OpenSSL 1.1 and
      CRYPTO_set_mem_ex_functions() was removed.
    </li><li>The tls_session_secret_cb_fn type now matches OpenSSL 1.1.
    </li><li>Unexport
      <a href="https://man.openbsd.org/OpenBSD-7.6/X509_NAME_print.3">X509_NAME_print(3)</a> and
      <a href="https://man.openbsd.org/OpenBSD-7.6/X509_OBJECT_up_ref_count.3">X509_OBJECT_up_ref_count(3)</a>.
    </li><li>const corrected
      <a href="https://man.openbsd.org/UI_OpenSSL.3">UI_OpenSSL(3)</a> and
      <a href="https://man.openbsd.org/BN_MONT_CTX_copy.3">BN_MONT_CTX_copy(3)</a>.
    </li><li>Support OPENSSL_NO_FILENAMES.
    </li><li>Support SSL_OP_NO_RENEGOTIATION and SSL_OP_ALLOW_CLIENT_RENEGOTIATION.
    </li><li>Export PKCS12_key_gen_uni() again.
    </li></ul>
  </li><li>New features
    <ul>
    <li>libtls has a new
      <a href="https://man.openbsd.org/tls_peer_cert_common_name.3">tls_peer_cert_common_name(3)</a> API call to retrieve
      the peer's common name without having to inspect the PEM.
    </li></ul>
  </li><li>Bug fixes
    <ul>
    <li>Plugged a leak in eckey_compute_pubkey().
    </li><li>Again allow the magic values -1, -2 and -3 for the salt length
      of an RSA-PSS key in the
      <a href="https://man.openbsd.org/EVP_PKEY_CTX_ctrl_str.3">EVP_PKEY_CTX_ctrl_str(3)</a> interface.
    </li><li>Fixed a few memory leaks in legacy code.
    </li></ul>
  </li><li>Documentation
    <ul>
    <li>The remaining undocumented public
      <a href="https://man.openbsd.org/evp.3">EVP</a> API is now documented.
    </li><li>Reorganization of existing documentation for clarity and accuracy.
    </li></ul>
  </li><li>Testing and proactive security
    <ul>
    <li>Improved regress coverage of the EC code.
    </li></ul>
  </li></ul>

</li><li>OpenSSH 10.0
  <ul>
  <li>Security fixes
    <ul>

      <li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>:
      fix the DisableForwarding directive, which was failing
      to disable X11 forwarding and agent forwarding as documented.
      X11 forwarding is disabled by default in the server and agent
      forwarding is off by default in the client.
    </li></ul>
  </li><li>Potentially incompatible changes
    <ul>
    <li>This release removes support for the weak DSA signature
    algorithm, completing the deprecation process that began in
    2015 (when DSA was disabled by default) and repeatedly warned
    over the last 12 months.

    </li><li><a href="https://man.openbsd.org/scp.1">scp(1)</a>, <a href="https://man.openbsd.org/sftp.1">sftp(1)</a>: pass "ControlMaster
    no" to ssh when invoked by scp &amp; sftp. This disables implicit
    session creation by these tools when ControlMaster was set to yes/auto
    by configuration, which some users found surprising. This change will
    not prevent scp/sftp from using an existing multiplexing session if
    one had already been created.

    </li><li>This release has the version number 10.0 and announces itself as
    "SSH-2.0-OpenSSH_10.0". Software that naively matches versions using
    patterns like "OpenSSH_1*" may be confused by this.

     </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: this
     release removes the code responsible for the user authentication
     phase of the protocol from the per- connection sshd-session binary to
     a new sshd-auth binary.  Splitting this code into a separate binary
     ensures that the crucial pre-authentication attack surface has an
     entirely disjoint address space from the code used for the rest
     of the connection. It also yields a small runtime memory saving as
     the authentication code will be unloaded after the authentication
     phase completes. This change should be largely invisible to users,
     though some log messages may now come from "sshd-auth" instead of
     "sshd-session". Downstream distributors of OpenSSH will need to
     package the sshd-auth binary.

      </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: this
      release disables finite field (a.k.a modp) Diffie-Hellman key
      exchange in sshd by default. Specifically, this removes the
      "diffie-hellman-group*" and "diffie-hellman-group-exchange-*"
      methods from the default KEXAlgorithms list. The client is unchanged
      and continues to support these methods by default. Finite field
      Diffie Hellman is slow and computationally expensive for the same
      security level as Elliptic Curve DH or PQ key agreement while
      offering no redeeming advantages. ECDH has been specified for
      the SSH protocol for 15 years and some form of ECDH has been the
      default key exchange in OpenSSH for the last 14 years.

      </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: this
      release removes the implicit fallback to compiled- in groups for
      Diffie-Hellman Group Exchange KEX when the moduli file exists
      but does not contain moduli within the client- requested range.
      The fallback behaviour remains for the case where the moduli file
      does not exist at all. This allows administrators more explicit
      control over which DH groups will be selected, but can lead to
      connection failures if the moduli file is edited incorrectly.

    </li></ul>

  </li><li>New features
    <ul>

     <li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: the hybrid
     post-quantum algorithm mlkem768x25519-sha256
     is now used by default for key agreement. This algorithm is considered
     to be safe against attack by quantum computers, is guaranteed to
     be no less strong than the popular curve25519-sha256 algorithm,
     has been standardised by NIST and is considerably faster than the
     previous default.

     </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: prefer AES-GCM
     to AES-CTR mode when selecting a cipher for the connection. The
     default cipher preference list is now ChaCha20/Poly1305, AES-GCM
     (128/256) followed by AES-CTR (128/192/256).

     </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: add %-token
     and environment variable expansion to the ssh_config SetEnv directive.

     </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: allow %-token
     and environment variable expansion in the ssh_config User directive,
     with the exception of %r and %C which would be self-referential.

     </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>, <a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: add "Match version"
     support to ssh_config and sshd_config. Allows matching on the local
     version of OpenSSH, e.g. "Match version OpenSSH_10.*".

     </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: add support
     for "Match sessiontype" to ssh_config.  Allows matching on the type of
     session initially requested, either "shell" for interactive sessions,
     "exec" for command execution sessions, "subsystem" for subsystem
     requests, such as sftp, or "none" for transport/forwarding-only
     sessions.

     </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: add support
     for "Match command ..." support to ssh_config, allowing matching on
     the remote command as specified on the command-line.

     </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: allow 'Match
     tagged ""' and 'Match command ""' to match empty tag and command
     values respectively.

     </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: allow
     glob(3) patterns to be used in sshd_config AuthorizedKeysFile and
     AuthorizedPrincipalsFile directives.

     </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: support the
     VersionAddendum in the client, mirroring the option of the same name
     in the server.

     </li><li><a href="https://man.openbsd.org/ssh-agent.1">ssh-agent(1)</a>: the
     agent will now delete all loaded keys when signaled with SIGUSR1. This
     allows deletion of keys without having access to $SSH_AUTH_SOCK.

     </li><li><a href="https://man.openbsd.org/ssh-keygen.1">ssh-keygen(1)</a>:
     support FIDO tokens that return no attestation data, e.g. recent
     WinHello.

     </li><li><a href="https://man.openbsd.org/ssh-agent.1">ssh-agent(1)</a>: add
     a "-Owebsafe-allow=..." option to allow the default FIDO application
     ID allow-list to be overridden.

     </li><li>Add a work-in-progress tool to verify FIDO attestation blobs
     that ssh-keygen can optionally write when enrolling FIDO keys.
     This tool is available under regress/misc/ssh-verify-attestation
     for experimentation but is not installed by "make install".

     </li><li><a href="https://man.openbsd.org/ssh-keygen.1">ssh-keygen(1)</a>:
     allow "-" as output file for moduli screening.

    </li></ul>
  </li><li>Bugfixes
    <ul>
      <li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: remove
      assumption that the sshd_config and any configs
      it includes can fit in a (possibly enlarged) socket buffer.  Previously
      it was possible to create a sufficiently large configuration
      that could cause sshd to fail to accept any connection. <a href="https://man.openbsd.org/sshd.8">sshd(8)</a> will now actively
      manage sending its config to the sshd-session sub-process.

      </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: don't start
      the ObscureKeystrokeTiming mitigations if there has been traffic
      on a X11 forwarding channel recently.  Should fix X11 forwarding
      performance problems when this setting is enabled.

      </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: prohibit the
      comma character in hostnames accepted, but allow an underscore as
      the first character in a hostname.

      </li><li><a href="https://man.openbsd.org/sftp.1">sftp(1)</a>: set
      high-water when resuming a "put". Prevents bogus "server reordered
      acks" debug message.

      </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>, <a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: fix regression in
      openssh-9.8, which would fail to accept "Match criteria=argument" as
      well as the documented "Match criteria argument" syntax in ssh_config
      and sshd_config.

      </li><li><a href="https://man.openbsd.org/sftp.1">sftp(1)</a>, <a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: fix a number possible
      NULL dereference bugs, including Coverity CIDs 405019 and 477813.

      </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: fix
      PerSourcePenalty incorrectly using "crash" penalty when LoginGraceTime
      was exceeded.

      </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: fix "Match
      invalid-user" from incorrectly being activated in initial configuration
      pass when no other predicates were present on the match line

      </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: fix debug
      logging of user specific delay.

      </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: improve
      debug logging across sub-process boundaries.
      Previously some log messages were lost early in the sshd-auth and
      sshd-session processes' life.

      </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: require
      control-escape character sequences passed via the '-e ^x' command-line
      to be exactly two characters long. Avoids one byte out-of-bounds read
      if ssh is invoked as "ssh -e^ ..."

      </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>, <a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: prevent integer
      overflow in X11 port handling.  These are theoretically possible if
      the admin misconfigured X11DisplayOffset or the user misconfigures
      their own $DISPLAY, but don't happen in normal operation.

      </li><li><a href="https://man.openbsd.org/ssh-keygen.1">ssh-keygen(1)</a>:
      don't mess up ssh-keygen -l output when the file contains CR
      characters.

      </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>:
      add rate limits to logging of connections dropped by
      PerSourcePenalties. Previously these could be noisy in logs.

      </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>: fix argument
      of "Compression" directive in ssh -G config dump, which regressed
      in openssh-9.8.

      </li><li><a href="https://man.openbsd.org/sshd.8">sshd(8)</a>: fix a
      corner-case triggered by UpdateHostKeys when sshd refuses to accept
      the signature returned by an agent holding host keys during the hostkey
      rotation sub-protocol. This situation could occur in situations where
      a PKCS#11 smartcard that lacked support for particular signature
      algorithms was used to store host keys.

      </li><li><a href="https://man.openbsd.org/ssh-keygen.1">ssh-keygen(1)</a>:
      when using RSA keys to sign messages with "ssh-keygen -Y", select
      the signature algorithm based on the requested hash algorithm
      ("-Ohashalg=xxx"). This allows using something other than the default
      of rsa-sha2-512, which may not be supported on all signing backends,
      e.g. some smartcards only support SHA256.

      </li><li><a href="https://man.openbsd.org/ssh.1">ssh(1)</a>,
      <a href="https://man.openbsd.org/sshd.8">sshd(8)</a>, <a href="https://man.openbsd.org/ssh-keyscan.1">ssh-keyscan(1)</a>:
      fix ML-KEM768x25519 KEX on big-endian systems.

      </li><li>Many regression and interop test improvements.
    </li></ul>
  </li></ul>

</li><li>Ports and packages:
  <p>Many pre-built packages for each architecture:
  <!-- number of FTP packages minus SHA256, SHA256.sig, index.txt -->
  </p><ul>
    <li>aarch64:    12446
    </li><li>amd64:      12593
    </li><li>arm:        xxx
    </li><li>i386:       10429
    </li><li>mips64:     8635
    </li><li>powerpc:    xxx
    </li><li>powerpc64:  7501
    </li><li>riscv64:    10585
    </li><li>sparc64:    9080
  </li></ul>

  <p>Some highlights:
  </p><ul><!-- checked 2025-04-12 -->
    <li>Asterisk 16.30.1, 18.26.1, 20.13.0 and 22.3.0
    </li><li>Audacity 3.7.3
    </li><li>CMake 3.31.6
    </li><li>Chromium 135.0.7049.52
    </li><li>Emacs 30.1
    </li><li>FFmpeg 6.1.2
    </li><li>GCC 8.4.0 and 11.2.0
    </li><li>GHC 9.8.3
    </li><li>GNOME 47
    </li><li>Go 1.24.1
    </li><li>JDK 8u442, 11.0.26, 17.0.14 and 21.0.6
    </li><li>KDE Applications 24.12.3
    </li><li>KDE Frameworks 6.12.0
    </li><li>KDE Plasma 6.3.3
    </li><li>Krita 5.2.9
    </li><li>LLVM/Clang 13.0.0, 16.0.6, 18.1.8 and 19.1.7
    </li><li>LibreOffice 25.2.1.2
    </li><li>Lua 5.1.5, 5.2.4, 5.3.6 and 5.4.7
    </li><li>MariaDB 11.4.5
    </li><li>Mono 6.12.0.199
    </li><li>Mozilla Firefox 137.0 and ESR 128.9.0
    </li><li>Mozilla Thunderbird 128.9.0
    </li><li>Mutt 2.2.14 and NeoMutt 20250113
    </li><li>Node.js 22.14.0
    </li><li>OCaml 4.14.2
    </li><li>OpenLDAP 2.6.9
    </li><li>PHP 8.2.28, 8.3.19 and 8.4.5
    </li><li>Postfix 3.10.1
    </li><li>PostgreSQL 17.4
    </li><li>Python 2.7.18 and 3.12.9
    </li><li>Qt 5.15.16 (+ kde patches) and 6.8.2
    </li><li>R 4.4.2
    </li><li>Ruby 3.2.8, 3.3.7 and 3.4.2
    </li><li>Rust 1.86.0
    </li><li>SQLite 3.49.1
    </li><li>Shotcut 25.01.25
    </li><li>Sudo 1.9.16p1
    </li><li>Suricata 7.0.7
    </li><li>Tcl/Tk 8.5.19 and 8.6.16
    </li><li>TeX Live 2024
    </li><li>Vim 9.1.1265 and Neovim 0.10.4
    </li><li>Xfce 4.20.0
  </li></ul>
  </li><li>As usual, steady improvements in manual pages and other documentation.

</li><li>The system includes the following major components from outside suppliers:
  <ul><!-- updated 2025-04-12 -->
    <li>Xenocara (based on X.Org 7.7 with xserver 21.1.16 + patches,
        freetype 2.13.3, fontconfig 2.15.0, Mesa 23.3.6, xterm 395,
        xkeyboard-config 2.20, fonttosfnt 1.2.4 and more)
    </li><li>LLVM/Clang 16.0.6 (+ patches)
    </li><li>GCC 4.2.1 (+ patches) and 3.3.6 (+ patches)
    </li><li>Perl 5.40.1 (+ patches)
    </li><li>NSD 4.9.1
    </li><li>Unbound 1.22.0
    </li><li>Ncurses 6.4
    </li><li>Binutils 2.17 (+ patches)
    </li><li>Gdb 6.3 (+ patches)
    </li><li>Awk 20250116
    </li><li>Expat 2.7.1
    </li><li>zlib 1.3.1 (+ patches)
  </li></ul>
</li></ul>
</section>

<hr>

<section id="install">
<h3>How to install</h3>
<p>
Please refer to the following files on the mirror site for
extensive details on how to install OpenBSD 7.7 on your machine:

</p><ul>
<li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/alpha/INSTALL.alpha">
	.../OpenBSD/7.7/alpha/INSTALL.alpha</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/amd64/INSTALL.amd64">
	.../OpenBSD/7.7/amd64/INSTALL.amd64</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/arm64/INSTALL.arm64">
	.../OpenBSD/7.7/arm64/INSTALL.arm64</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/armv7/INSTALL.armv7">
	.../OpenBSD/7.7/armv7/INSTALL.armv7</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/hppa/INSTALL.hppa">
	.../OpenBSD/7.7/hppa/INSTALL.hppa</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/i386/INSTALL.i386">
	.../OpenBSD/7.7/i386/INSTALL.i386</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/landisk/INSTALL.landisk">
	.../OpenBSD/7.7/landisk/INSTALL.landisk</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/loongson/INSTALL.loongson">
	.../OpenBSD/7.7/loongson/INSTALL.loongson</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/luna88k/INSTALL.luna88k">
	.../OpenBSD/7.7/luna88k/INSTALL.luna88k</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/macppc/INSTALL.macppc">
	.../OpenBSD/7.7/macppc/INSTALL.macppc</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/octeon/INSTALL.octeon">
	.../OpenBSD/7.7/octeon/INSTALL.octeon</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/powerpc64/INSTALL.powerpc64">
	.../OpenBSD/7.7/powerpc64/INSTALL.powerpc64</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/riscv64/INSTALL.riscv64">
	.../OpenBSD/7.7/riscv64/INSTALL.riscv64</a>
</li><li><a href="https://ftp.openbsd.org/pub/OpenBSD/7.7/sparc64/INSTALL.sparc64">
	.../OpenBSD/7.7/sparc64/INSTALL.sparc64</a>
</li></ul>
</section>

<hr>

<section id="quickinstall">
<p>
Quick installer information for people familiar with OpenBSD, and the use of
the "<a href="https://man.openbsd.org/disklabel.8">disklabel</a> -E" command.
If you are at all confused when installing OpenBSD, read the relevant
INSTALL.* file as listed above!

</p><h3>OpenBSD/alpha:</h3>

<p>
If your machine can boot from CD, you can write <i>install77.iso</i> or
<i>cd77.iso</i> to a CD and boot from it.
Refer to INSTALL.alpha for more details.

</p><h3>OpenBSD/amd64:</h3>

<p>
If your machine can boot from CD, you can write <i>install77.iso</i> or
<i>cd77.iso</i> to a CD and boot from it.
You may need to adjust your BIOS options first.

</p><p>
If your machine can boot from USB, you can write <i>install77.img</i> or
<i>miniroot77.img</i> to a USB stick and boot from it.

</p><p>
If you can't boot from a CD, floppy disk, or USB,
you can install across the network using PXE as described in the included
INSTALL.amd64 document.

</p><p>
If you are planning to dual boot OpenBSD with another OS, you will need to
read INSTALL.amd64.

</p><h3>OpenBSD/arm64:</h3>

<p>
If your machine can boot from CD, you can write <i>install77.iso</i> or
<i>cd77.iso</i> to a CD and boot from it.

</p><p>
To boot from disk, write <i>install77.img</i> or <i>miniroot77.img</i> to a
disk and boot from it after connecting to the serial console.  Refer to
INSTALL.arm64 for more details.

</p><h3>OpenBSD/armv7:</h3>

<p>
Write a system specific miniroot to an SD card and boot from it after connecting
to the serial console.  Refer to INSTALL.armv7 for more details.

</p><h3>OpenBSD/hppa:</h3>

<p>
Boot over the network by following the instructions in INSTALL.hppa or the
<a href="https://www.openbsd.org/hppa.html#install">hppa platform page</a>.

</p><h3>OpenBSD/i386:</h3>

<p>
If your machine can boot from CD, you can write <i>install77.iso</i> or
<i>cd77.iso</i> to a CD and boot from it.
You may need to adjust your BIOS options first.

</p><p>
If your machine can boot from USB, you can write <i>install77.img</i> or
<i>miniroot77.img</i> to a USB stick and boot from it.

</p><p>
If you can't boot from a CD, floppy disk, or USB,
you can install across the network using PXE as described in
the included INSTALL.i386 document.

</p><p>
If you are planning on dual booting OpenBSD with another OS, you will need to
read INSTALL.i386.

</p><h3>OpenBSD/landisk:</h3>

<p>
Write <i>miniroot77.img</i> to the start of the CF
or disk, and boot normally.

</p><h3>OpenBSD/loongson:</h3>

<p>
Write <i>miniroot77.img</i> to a USB stick and boot bsd.rd from it
or boot bsd.rd via tftp.
Refer to the instructions in INSTALL.loongson for more details.

</p><h3>OpenBSD/luna88k:</h3>

<p>
Copy 'boot' and 'bsd.rd' to a Mach or UniOS partition, and boot the bootloader
from the PROM, and then bsd.rd from the bootloader.
Refer to the instructions in INSTALL.luna88k for more details.

</p><h3>OpenBSD/macppc:</h3>

<p>
Burn the image from a mirror site to a CDROM, and power on your machine
while holding down the <i>C</i> key until the display turns on and
shows <i>OpenBSD/macppc boot</i>.

</p><p>
Alternatively, at the Open Firmware prompt, enter <i>boot cd:,ofwboot
/7.7/macppc/bsd.rd</i>

</p><h3>OpenBSD/octeon:</h3>

<p>
After connecting a serial port, boot bsd.rd over the network via DHCP/tftp.
Refer to the instructions in INSTALL.octeon for more details.

</p><h3>OpenBSD/powerpc64:</h3>

<p>
To install, write <i>install77.img</i> or <i>miniroot77.img</i> to a
USB stick, plug it into the machine and choose the <i>OpenBSD
install</i> menu item in Petitboot.
Refer to the instructions in INSTALL.powerpc64 for more details.

</p><h3>OpenBSD/riscv64:</h3>

<p>
To install, write <i>install77.img</i> or <i>miniroot77.img</i> to a
USB stick, and boot with that drive plugged in.
Make sure you also have the microSD card plugged in that shipped with the
HiFive Unmatched board.
Refer to the instructions in INSTALL.riscv64 for more details.

</p><h3>OpenBSD/sparc64:</h3>

<p>
Burn the image from a mirror site to a CDROM, boot from it, and type
<i>boot cdrom</i>.

</p><p>
If this doesn't work, or if you don't have a CDROM drive, you can write
<i>floppy77.img</i> or <i>floppyB77.img</i>
(depending on your machine) to a floppy and boot it with <i>boot
floppy</i>. Refer to INSTALL.sparc64 for details.

</p><p>
Make sure you use a properly formatted floppy with NO BAD BLOCKS or your install
will most likely fail.

</p><p>
You can also write <i>miniroot77.img</i> to the swap partition on
the disk and boot with <i>boot disk:b</i>.

</p><p>
If nothing works, you can boot over the network as described in INSTALL.sparc64.
</p></section>

<hr>

<section id="upgrade">
<h3>How to upgrade</h3>
<p>
If you already have an OpenBSD 7.6 system, and do not want to reinstall,
upgrade instructions and advice can be found in the
<a href="https://www.openbsd.org/faq/upgrade77.html">Upgrade Guide</a>.
</p></section>

<hr>

<section id="sourcecode">
<h3>Notes about the source code</h3>
<p>
<code>src.tar.gz</code> contains a source archive starting at <code>/usr/src</code>.
This file contains everything you need except for the kernel sources,
which are in a separate archive.
To extract:
</p><blockquote><pre># <kbd>mkdir -p /usr/src</kbd>
# <kbd>cd /usr/src</kbd>
# <kbd>tar xvfz /tmp/src.tar.gz</kbd>
</pre></blockquote>
<p>
<code>sys.tar.gz</code> contains a source archive starting at <code>/usr/src/sys</code>.
This file contains all the kernel sources you need to rebuild kernels.
To extract:
</p><blockquote><pre># <kbd>mkdir -p /usr/src/sys</kbd>
# <kbd>cd /usr/src</kbd>
# <kbd>tar xvfz /tmp/sys.tar.gz</kbd>
</pre></blockquote>
<p>
Both of these trees are a regular CVS checkout.  Using these trees it
is possible to get a head-start on using the anoncvs servers as
described <a href="https://www.openbsd.org/anoncvs.html">here</a>.
Using these files
results in a much faster initial CVS update than you could expect from
a fresh checkout of the full OpenBSD source tree.
</p></section>

<hr>

<section id="ports">
<h3>Ports Tree</h3>
<p>
A ports tree archive is also provided.  To extract:
</p><blockquote><pre># <kbd>cd /usr</kbd>
# <kbd>tar xvfz /tmp/ports.tar.gz</kbd>
</pre></blockquote>
<p>
Go read the <a href="https://www.openbsd.org/faq/ports/index.html">ports</a> page
if you know nothing about ports
at this point.  This text is not a manual of how to use ports.
Rather, it is a set of notes meant to kickstart the user on the
OpenBSD ports system.
</p><p>
The <i>ports/</i> directory represents a CVS checkout of our ports.
As with our complete source tree, our ports tree is available via
<a href="https://www.openbsd.org/anoncvs.html">AnonCVS</a>.
So, in order to keep up to date with the -stable branch, you must make
the <i>ports/</i> tree available on a read-write medium and update the tree
with a command like:
</p><blockquote><pre># <kbd>cd /usr/ports</kbd>
# <kbd>cvs -d anoncvs@server.openbsd.org:/cvs update -Pd -rOPENBSD_7_7</kbd>
</pre></blockquote>
<p>
[Of course, you must replace the server name here with a nearby anoncvs
server.]
</p><p>
Note that most ports are available as packages on our mirrors. Updated
ports for the 7.7 release will be made available if problems arise.
</p><p>
If you're interested in seeing a port added, would like to help out, or just
would like to know more, the mailing list
<a href="https://www.openbsd.org/mail.html">ports@openbsd.org</a> is a good place to know.
</p></section>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I created snapDOM to capture DOM nodes as images with exceptional speed (107 pts)]]></title>
            <link>https://github.com/zumerlab/snapdom</link>
            <guid>43813330</guid>
            <pubDate>Sun, 27 Apr 2025 17:00:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/zumerlab/snapdom">https://github.com/zumerlab/snapdom</a>, See on <a href="https://news.ycombinator.com/item?id=43813330">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">snapDOM</h2><a id="user-content-snapdom" aria-label="Permalink: snapDOM" href="#snapdom"></a></p>
<p dir="auto"><strong>snapDOM</strong> is a high-fidelity DOM capture tool, developed as part of the animation engine I'm developing for Zumly ‚Äî a framework for creating smooth zoom-based view transitions.</p>
<p dir="auto">It converts any HTML element into a scalable SVG image, preserving styles, fonts, backgrounds, shadow DOM content, pseudo-elements, and more.</p>
<ul dir="auto">
<li>üì∏ Full DOM capture</li>
<li>üé® Embedded styles, pseudo-elements, and fonts</li>
<li>üñºÔ∏è Export to SVG, PNG, JPG, WebP, or <code>canvas</code></li>
<li>‚ö° Lightweight, no dependencies</li>
<li>üì¶ 100% based on standard Web APIs</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">You can use <strong>snapDOM</strong> by including it via <strong>NPM</strong>, <strong>CDN</strong>, <strong>script tag</strong>, or by <strong>importing it as a module</strong>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">NPM / Yarn</h3><a id="user-content-npm--yarn" aria-label="Permalink: NPM / Yarn" href="#npm--yarn"></a></p>


<p dir="auto"><h3 tabindex="-1" dir="auto">CDN</h3><a id="user-content-cdn" aria-label="Permalink: CDN" href="#cdn"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<script src=&quot;https://unpkg.com/@zumer/snapdom@latest/dist/snapdom.min.js&quot;></script>"><pre><span>&lt;</span><span>script</span> <span>src</span>="<span>https://unpkg.com/@zumer/snapdom@latest/dist/snapdom.min.js</span>"<span>&gt;</span><span>&lt;/</span><span>script</span><span>&gt;</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Script tag (local)</h3><a id="user-content-script-tag-local" aria-label="Permalink: Script tag (local)" href="#script-tag-local"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<script src=&quot;snapdom.js&quot;></script>"><pre><span>&lt;</span><span>script</span> <span>src</span>="<span>snapdom.js</span>"<span>&gt;</span><span>&lt;/</span><span>script</span><span>&gt;</span></pre></div>
<p dir="auto">The global object <code>snapdom</code> will be available.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">ES Module</h3><a id="user-content-es-module" aria-label="Permalink: ES Module" href="#es-module"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="import { snapdom } from './snapdom.mjs';"><pre><span>import</span> <span>{</span> <span>snapdom</span> <span>}</span> <span>from</span> <span>'./snapdom.mjs'</span><span>;</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Script Tag (Type Module)</h3><a id="user-content-script-tag-type-module" aria-label="Permalink: Script Tag (Type Module)" href="#script-tag-type-module"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<script type=&quot;module&quot;>
  import { snapdom } from 'https://unpkg.com/@zumer/snapdom@latest/dist/snapdom.mjs';
</script>"><pre><span>&lt;</span><span>script</span> <span>type</span><span>=</span><span>"module"</span><span>&gt;</span>
  import <span>{</span> <span>snapdom</span> <span>}</span> from 'https://unpkg.com/@zumer/snapdom@latest/dist/snapdom.mjs';
<span>&lt;/</span><span>script</span><span>&gt;</span></pre></div>
<p dir="auto">Now you can call <code>snapdom(el)</code>, <code>snapdom.toPng(el)</code>, etc., directly in your JavaScript.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Basic usage</h2><a id="user-content-basic-usage" aria-label="Permalink: Basic usage" href="#basic-usage"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="// Capture an element as SVG Data URL
const svgDataUrl = await snapdom(document.querySelector(&quot;#myElement&quot;));

// Insert the captured image into the page
const img = new Image();
img.src = svgDataUrl;
document.body.appendChild(img);"><pre><span>// Capture an element as SVG Data URL</span>
<span>const</span> <span>svgDataUrl</span> <span>=</span> <span>await</span> <span>snapdom</span><span>(</span><span>document</span><span>.</span><span>querySelector</span><span>(</span><span>"#myElement"</span><span>)</span><span>)</span><span>;</span>

<span>// Insert the captured image into the page</span>
<span>const</span> <span>img</span> <span>=</span> <span>new</span> <span>Image</span><span>(</span><span>)</span><span>;</span>
<span>img</span><span>.</span><span>src</span> <span>=</span> <span>svgDataUrl</span><span>;</span>
<span>document</span><span>.</span><span>body</span><span>.</span><span>appendChild</span><span>(</span><span>img</span><span>)</span><span>;</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">API</h2><a id="user-content-api" aria-label="Permalink: API" href="#api"></a></p>
<p dir="auto">The main API is exposed as <code>snapdom</code> and offers multiple capture methods:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
<th>Returns</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>snapdom(el, scale?)</code></td>
<td>Captures as SVG Data URL</td>
<td><code>Promise&lt;string&gt;</code></td>
</tr>
<tr>
<td><code>snapdom.toImg(el, scale?)</code></td>
<td>Captures as <code>HTMLImageElement</code> (SVG)</td>
<td><code>Promise&lt;HTMLImageElement&gt;</code></td>
</tr>
<tr>
<td><code>snapdom.toCanvas(el, scale?)</code></td>
<td>Captures as <code>HTMLCanvasElement</code></td>
<td><code>Promise&lt;HTMLCanvasElement&gt;</code></td>
</tr>
<tr>
<td><code>snapdom.toPng(el, scale?)</code></td>
<td>Captures as PNG image (<code>Image</code>)</td>
<td><code>Promise&lt;HTMLImageElement&gt;</code></td>
</tr>
<tr>
<td><code>snapdom.toJpg(el, scale?, quality?)</code></td>
<td>Captures as JPG image (<code>Image</code>)</td>
<td><code>Promise&lt;HTMLImageElement&gt;</code></td>
</tr>
<tr>
<td><code>snapdom.toWebp(el, scale?, quality?)</code></td>
<td>Captures as WebP image (<code>Image</code>)</td>
<td><code>Promise&lt;HTMLImageElement&gt;</code></td>
</tr>
<tr>
<td><code>snapdom.toBlob(el, scale?)</code></td>
<td>Captures as SVG <code>Blob</code></td>
<td><code>Promise&lt;Blob&gt;</code></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><strong>Parameters:</strong></p>
<ul dir="auto">
<li><code>el</code>: DOM element to capture.</li>
<li><code>scale</code>: Scale factor (default is <code>1</code>).</li>
<li><code>quality</code>: Compression quality for JPG/WebP (range <code>0</code>‚Äì<code>1</code>).</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Special features</h2><a id="user-content-special-features" aria-label="Permalink: Special features" href="#special-features"></a></p>
<ul dir="auto">
<li><strong>Shadow DOM</strong>: Captures content inside Web Components and <code>shadowRoot</code>.</li>
<li><strong>Pseudo-elements</strong>: Captures <code>::before</code> and <code>::after</code>, including background images.</li>
<li><strong>Backgrounds and images</strong>: Inlines external images as Data URLs.</li>
<li><strong>Fonts</strong>: Replicates applied font families without needing external font files.</li>
<li><strong>Placeholder and Exclusion</strong>:
<ul dir="auto">
<li><code>data-capture="exclude"</code>: Skips an element while preserving layout space.</li>
<li><code>data-capture="placeholder"</code> + <code>data-placeholder-text="Text"</code>: Replaces an element with decorative placeholder text.</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Full example</h2><a id="user-content-full-example" aria-label="Permalink: Full example" href="#full-example"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<div id=&quot;captureMe&quot;>
  <h1 style=&quot;color: tomato;&quot;>Hello World!</h1>
  <p>This content will be captured.</p>
</div>

<script type=&quot;module&quot;>
  import { snapdom } from './snapdom.esm.js';

  const button = document.createElement('button');
  button.textContent = &quot;Capture&quot;;
  button.onclick = async () => {
    const img = await snapdom.toPng(document.getElementById('captureMe'), 2);
    document.body.appendChild(img);
  };
  document.body.appendChild(button);
</script>"><pre><span>&lt;</span><span>div</span> <span>id</span>="<span>captureMe</span>"<span>&gt;</span>
  <span>&lt;</span><span>h1</span> <span>style</span>="<span>color: tomato;</span>"<span>&gt;</span>Hello World!<span>&lt;/</span><span>h1</span><span>&gt;</span>
  <span>&lt;</span><span>p</span><span>&gt;</span>This content will be captured.<span>&lt;/</span><span>p</span><span>&gt;</span>
<span>&lt;/</span><span>div</span><span>&gt;</span>

<span>&lt;</span><span>script</span> <span>type</span>="<span>module</span>"<span>&gt;</span>
  <span>import</span> <span>{</span> <span>snapdom</span> <span>}</span> <span>from</span> <span>'./snapdom.esm.js'</span><span>;</span>

  <span>const</span> <span>button</span> <span>=</span> <span>document</span><span>.</span><span>createElement</span><span>(</span><span>'button'</span><span>)</span><span>;</span>
  <span>button</span><span>.</span><span>textContent</span> <span>=</span> <span>"Capture"</span><span>;</span>
  <span>button</span><span>.</span><span>onclick</span> <span>=</span> <span>async</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
    <span>const</span> <span>img</span> <span>=</span> <span>await</span> <span>snapdom</span><span>.</span><span>toPng</span><span>(</span><span>document</span><span>.</span><span>getElementById</span><span>(</span><span>'captureMe'</span><span>)</span><span>,</span> <span>2</span><span>)</span><span>;</span>
    <span>document</span><span>.</span><span>body</span><span>.</span><span>appendChild</span><span>(</span><span>img</span><span>)</span><span>;</span>
  <span>}</span><span>;</span>
  <span>document</span><span>.</span><span>body</span><span>.</span><span>appendChild</span><span>(</span><span>button</span><span>)</span><span>;</span>
<span>&lt;/</span><span>script</span><span>&gt;</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Limitations</h2><a id="user-content-limitations" aria-label="Permalink: Limitations" href="#limitations"></a></p>
<ul dir="auto">
<li>External images must be CORS-accessible.</li>
<li>Fonts must be fully loaded before capturing (<code>document.fonts.ready</code> is automatically awaited).</li>
<li>Iframes are not captured.</li>
<li>Capturing very dynamic or complex layouts might be slow and not acccurate. Working on that</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Benchmark</h2><a id="user-content-benchmark" aria-label="Permalink: Benchmark" href="#benchmark"></a></p>
<p dir="auto"><code>snapDOM</code> is not only highly accurate ‚Äî it's also <strong>extremely fast</strong> at capturing large DOM nodes.</p>
<p dir="auto">In benchmark tests against popular libraries:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Element Size</th>
<th>Winner</th>
<th>Compared to <code>modern-screenshot</code></th>
<th>Compared to <code>html2canvas</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>200√ó100 (Small)</td>
<td><code>modern-screenshot</code></td>
<td>1.18√ó faster</td>
<td>4.46√ó faster</td>
</tr>
<tr>
<td>400√ó300 (Modal)</td>
<td><code>snapDOM</code></td>
<td>1.04√ó faster</td>
<td>4.07√ó faster</td>
</tr>
<tr>
<td>1200√ó800 (Page view)</td>
<td><code>snapDOM</code></td>
<td>2.43√ó faster</td>
<td>5.74√ó faster</td>
</tr>
<tr>
<td>2000√ó1500 (Large scroll area)</td>
<td><code>snapDOM</code></td>
<td>5.02√ó faster</td>
<td>9.35√ó faster</td>
</tr>
<tr>
<td>4000√ó2000 (Very large)</td>
<td><code>snapDOM</code></td>
<td>11.35√ó faster</td>
<td>15.98√ó faster</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">MIT ¬© Juan Mart√≠n Muda - Zumerlab</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Read the Obits (237 pts)]]></title>
            <link>https://thereader.mitpress.mit.edu/the-creativity-hack-no-one-told-you-about-read-the-obits/</link>
            <guid>43813175</guid>
            <pubDate>Sun, 27 Apr 2025 16:40:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thereader.mitpress.mit.edu/the-creativity-hack-no-one-told-you-about-read-the-obits/">https://thereader.mitpress.mit.edu/the-creativity-hack-no-one-told-you-about-read-the-obits/</a>, See on <a href="https://news.ycombinator.com/item?id=43813175">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><p>Reading obituaries can boost creativity by exposing you to distant ideas, fueling the associations that lead to unexpected breakthroughs.</p><figure><img width="700" height="420" src="https://thereader.mitpress.mit.edu/wp-content/uploads/2025/04/Obituaries-700x420.jpg" alt="" decoding="async" fetchpriority="high"><figcaption>The obituary section of the April 6, 2025, issue of The New York Times, with the author's highlights.</figcaption></figure><p>I‚Äôve been reading the obituaries for as long as I can remember. At first glance, they might seem like little more than a collection of dates and accomplishments. But for me, they‚Äôve become a wellspring of creativity ‚Äî each one a glimpse into a life I never would‚Äôve imagined. And as decades of creativity research suggest, the most original ideas often come from the most unlikely sources.</p><p>That‚Äôs why one popular piece of advice for boosting creativity is to learn something new every day. But here‚Äôs the catch: This only works if that new information is <em>very different</em> from what‚Äôs already in your head. This is where most of our modern habits fall short. Internet searches, for instance, give you information that‚Äôs related to what you already know, or information that you‚Äôre already interested in. So, how do you escape that loop and stumble upon something unexpected, something you didn‚Äôt even know to look for? The obituaries, obviously ‚Äî but I‚Äôll come back to that.</p><p>In February, I <a href="https://sawyerpodcast.com/yoed-kenett-the-associations-of-the-creative-mind" target="_blank" rel="nofollow">interviewed Yoed Kenett</a>, who studies high-level cognition and creativity, for my podcast ‚ÄúThe Science of Creativity.‚Äù His research shows that creativity thrives on making connections between very different concepts. The core idea is simple: Our ability to create relies on prior knowledge, and our creative potential increases when that knowledge is organized into conceptual networks that help us search for, connect, and generate new ideas ‚Äî what Kenett calls a ‚ÄúGoogle of the mind.‚Äù</p><figure><blockquote><p>The greater the distance between two ideas, the more original and surprising their combination tends to be.</p></blockquote></figure><p>This research goes back to the 1960s, when psychologist Sarnoff Mednick was studying patterns of thought in people diagnosed with schizophrenia. He was exploring the idea that highly creative individuals might share certain associative patterns with those diagnosed with schizophrenia, namely, the tendency to make connections between seemingly unrelated ideas. In <a href="https://psycnet.apa.org/record/1963-06161-001" target="_blank" rel="nofollow">a classic 1962 experiment</a>, Mednick asked participants to say the first word that came to mind when they heard a prompt like <em>table</em>. Less creative participants tended to respond with obvious associations like <em>chair</em> or <em>leg</em>. The more creative participants gave those answers, too, but they also came up with more surprising ones, like <em>food</em> or even <em>mouse</em>.</p><p>Mednick‚Äôs observations led him to propose that highly creative people have a different kind of memory structure ‚Äî one that holds a wider range of ideas and forges more unexpected connections between them. He called his theory <em>the associative theory of creativity</em>. His research showed that creative ideas are more likely to emerge from combinations of concepts that are further apart in the mind‚Äôs conceptual network. The greater the distance between two ideas, the more original and surprising their combination tends to be. <a href="https://pubmed.ncbi.nlm.nih.gov/30667235/" target="_blank" rel="nofollow">More recent research</a>, by Kenett and others, confirms these observations.</p><p>Some of the best-known stories of invention come from unexpected associations. Velcro, for example, <a href="https://invention.si.edu/invention-stories/george-de-mestral-velcror-inventor" target="_blank" rel="nofollow">was invented</a> when George de Mestral was walking his hairy sheepdog through a field of burr-covered plants. It‚Äôs notoriously difficult to remove burrs from an animal‚Äôs hair, which means the animal is going to carry seeds a far distance, allowing the plant to spread more successfully. De Mestral took out a magnifying glass and saw very tiny hooks that clung to the dog‚Äôs hair. Then he made the distant connection: The burr‚Äôs mechanism, designed by nature to spread seeds, could be used to make a clothing fastener. There‚Äôs no shortage of other surprising inventions that began with distant connections: <a href="https://www.invent.org/blog/trends-stem/who-invented-post-it-notes" target="_blank" rel="nofollow">Post-It notes</a>, the <a href="https://www.sciencealert.com/these-eighteen-accidental-scientific-discoveries-changed-the-world" target="_blank" rel="nofollow">X-ray</a>, <a href="https://thereader.mitpress.mit.edu/is-discovery-inevitable-or-serendipitous/">shatterproof glass</a>, <a href="https://www.scienceabc.com/social-science/how-some-inventions-had-the-funniest-origin-stories.html" target="_blank" rel="nofollow">the microwave oven</a>, <a href="https://www.museumofplay.org/toys/silly-putty/" target="_blank" rel="nofollow">silly putty</a>, <a href="https://www.mddionline.com/cardiovascular/the-surprising-history-behind-an-extremely-common-cardiovascular-medical-device" target="_blank" rel="nofollow">heart stents</a>.</p><p>The psychologist Dedre Gentner <a href="https://groups.psych.northwestern.edu/gentner/papers/wisniewski%26Gentner_1991.pdf" target="_blank" rel="nofollow">also found</a> that the more conceptually distant two ideas are, the more creative their combination tends to be. For instance, she found that if you ask 100 people to imagine a chair combined with a table ‚Äî two closely related items ‚Äî most of them will picture something like a school desk. It‚Äôs an obvious match within the category of furniture. But if you asked 100 people to imagine a chair combined with a pony ‚Äî very distant concepts ‚Äî the results are far more varied and surprising: A chair you sit on while grooming a pony, one that a pony sits in, one shaped like a pony‚Äôs head, or one covered in fur.</p><p>Gentner calls this <em>property mapping</em> ‚Äî when people borrow attributes like texture or shape from one concept and apply them to another. It‚Äôs a kind of remote association, and clearly more creative than imagining a standard school desk. But Gentner identified something even more powerful: <em>structure mapping</em>. This happens when you transfer the <em>relational structure</em> of one concept to another. Say you combine ‚Äúpony‚Äù and ‚Äúchair‚Äù and picture a chair shaped like a pony ‚Äî that‚Äôs still property mapping, just more elaborate. But if you imagine a <em>small</em> chair, you‚Äôve made a bigger leap. That‚Äôs structure mapping: drawing on the idea that a pony is smaller than a horse, and applying that relationship to redefine the size of a chair. These kinds of mappings ‚Äî especially when the underlying relations are abstract or non-obvious ‚Äî tend to produce the most original and surprising combinations.</p><p>You can strengthen your ability to make remote associations by exposing yourself to a wider variety of information, especially from conceptually different domains. Most of us stick to what we know. We don‚Äôt normally encounter distant concepts in everyday life, so stretching our minds into unfamiliar territory takes some effort.</p><hr><p>Which brings me back to obituaries. I‚Äôm not talking about the half-page write-ups of celebrities or politicians. I mean the small-print obituaries in the <em>New York Times</em> Sunday edition ‚Äî the ones squeezed into eight columns on a single page, paid for by friends and family. These people aren‚Äôt famous. But their lives, described lovingly and vividly by those who knew them best, are often more surprising than any headline obituary. And they‚Äôre an ideal way to boost your creativity.</p><p>It‚Äôs important to read all of the obituaries on Sunday. If you filter your reading by only choosing people who are like you, then you won‚Äôt be absorbing the most different, surprising new information.</p><p>Here are two that I read one Sunday morning recently:</p><p><strong>Berta Escurra</strong> was born in 1924 in San Pedro de Lloc, Peru. She was a follower of British writer and spiritual thinker Rodney Collin when he moved to Mexico City in 1948. In 1963, she moved to New York City and founded the Spanish International Network (SIN) with Rene Anselmo. SIN was the first TV network in the U.S. to broadcast entirely in Spanish. Anselmo later went on to found PanAmSat, the world‚Äôs first private international satellite system.</p><p><strong>Norton Garfinkle</strong> died on March 20, 2025 at the age of 94. Garfinkle was a professor at Amherst College and a serial entrepreneur. He founded a company that detected land mines for the U.S. and foreign governments. He invented a news database search algorithm and sold it to Reuters. He developed PLAX, the first pre-brushing dental rinse. He started Electronic Retailing Systems, which provided self-checkout systems to supermarkets. He started a company that published <em>Lamaze Parent Magazine</em>.</p><p>See what I mean about being interesting? You‚Äôve probably never heard of either of them. (I hadn‚Äôt.) But reading their stories introduces you to a mix of fields ‚Äî broadcasting, aerospace, esotericism, oral hygiene, database design, prenatal publishing ‚Äî that you‚Äôd rarely, if ever, encounter all in one place. It‚Äôs exactly the kind of conceptually distant material that helps fuel creative thinking.</p><figure><blockquote><p>Start by reading the obituaries slowly, without searching for a big idea.</p></blockquote></figure><p>Here‚Äôs how you can use the obituaries to enhance your creative cognition.</p><p>First, start by reading them slowly, without searching for a big idea. Let the details wash over you ‚Äî the places lived, the professions practiced, the odd hobbies pursued. Notice what sticks.</p><p>It‚Äôs not just about learning new facts, of course ‚Äî it‚Äôs about asking questions. Why was a British mystic in Mexico City? How did Spanish-language television evolve in the U.S.? What led someone to invent PLAX or build search tools for financial news decades before Google? Even if you don‚Äôt find all the answers, just posing the questions helps you flex the creative muscle that thrives on curiosity and connection.</p><p>Will any of the life stories you read cause you to have a surprising, creative insight? No one can say. But<strong> </strong>research shows that <em>distant analogies</em> often lead to creative breakthroughs, often in unexpected ways. What you‚Äôre doing is filling up your brain with a range of very different cognitive material.</p><p>In every person‚Äôs life story, there‚Äôs always a narrative, always a deeper principle at work. How did a woman from Peru get to Scotland, Mexico City, and then New York? How does a professor at Amherst College found so many different companies, with so many different technologies and within so many industries? Seek that deeper principle, ask ‚ÄúWhy?‚Äù, and look for distant connections with your own life. Creativity is a daily practice available to anyone.</p><hr><p><strong><em>Keith Sawyer</em></strong><em> is one of the world‚Äôs leading creativity researchers. He has published 20 books, including ‚Äú<a href="http://www.groupgenius.net/" target="_blank" rel="nofollow">Group Genius</a>,‚Äù ‚Äú<a href="http://www.zigzagcreate.com/" target="_blank" rel="nofollow">Zig Zag</a>,‚Äù and, most recently, ‚Äú<a href="https://mitpress.mit.edu/9780262551649/learning-to-see/" target="_blank">Learning to See</a>.‚Äù Sawyer is the Morgan Distinguished Professor in Educational Innovations at the University of North Carolina at Chapel Hill.</em></p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Did 5G Kill the IMSI Catcher? (214 pts)]]></title>
            <link>https://zetier.com/5g-imsi-catcher/</link>
            <guid>43813083</guid>
            <pubDate>Sun, 27 Apr 2025 16:27:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://zetier.com/5g-imsi-catcher/">https://zetier.com/5g-imsi-catcher/</a>, See on <a href="https://news.ycombinator.com/item?id=43813083">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						<p><img src="https://zetier.com/wp-content/uploads/2025/04/Zetier-IMSI-Catcher-Featured-Image.png" alt="/nl_img1" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%200%200'%3E%3C/svg%3E" data-lazy-src="https://zetier.com/wp-content/uploads/2025/04/Zetier-IMSI-Catcher-Featured-Image.png">
			</p>
						
			
<p>You dial into your Zoom meeting while sitting on a moving train. Your mobile device (i.e., User Equipment, UE) must seamlessly switch towers as you go in and out of range. This concept, called <strong>mobility,</strong> remains a central requirement for mobile networks, but it‚Äôs also a central security vulnerability.</p>



<p>You see, you may have just been hacked while leisurely zooming on said train ‚Äì and you‚Äôd never know it.</p>



<p>The GSM (better known as 2G) protocol has <strong>a security vulnerability that exposes a user‚Äôs personal identifier (IMSI) in the clear, allowing for attribution and geolocation.</strong> This vulnerability is also in the UMTS (a.k.a. 3G) spec, and in the LTE (4G) spec. While the vulnerability was finally addressed in NR (5G), it‚Äôs imperfect and remains an exploitable 5G network vulnerability‚Ä¶ and my favorite cybersecurity topic.</p>



<p>In this article, I‚Äôll introduce this long-standing security exploit, known as an IMSI catcher, discuss some high-level technical aspects regarding 2G‚Äì4G IMSI catchers, then finish with 5G security improvements and the possibility of 5G IMSI catchers.</p>











<h2 id="h-what-is-an-imsi">What is an IMSI?</h2>



<p>Every account on a cellular network has a unique identifier to connect a SIM card to a credit card, and that identifier is called the International Mobile Subscriber Identity (IMSI, pronounced ‚ÄúIM-zee‚Äù). This number contains 3 pieces of information: the Mobile Country Code (MCC) of the issuing network operator, the Mobile Network Code (MNC) of the issuing network operator, and a unique number that only exists for that SIM card. The IMSI is ultimately used to make sure you paid your bill and that you‚Äôre allowed to register onto a network.</p>











<h2 id="h-what-is-an-imsi-catcher">What is an IMSI catcher?</h2>



<p>An IMSI catcher is a tool that collects cellular signals and decodes packets to access and save off the IMSI. There are two types of IMSI catchers: <strong>active and passive.</strong></p>



<figure><img data-recalc-dims="1" fetchpriority="high" decoding="async" width="750" height="428" data-attachment-id="4960" data-permalink="https://zetier.com/zetier-active-imsi-catcher/" data-orig-file="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?fit=1792%2C1024&amp;ssl=1" data-orig-size="1792,1024" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Zetier-Active-IMSI-Catcher" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?fit=300%2C171&amp;ssl=1" data-large-file="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?fit=750%2C428&amp;ssl=1" src="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=750%2C428&amp;ssl=1" alt="Diagram showing a person with a cell phone that's interacting with an IMSI catcher because it has a stronger signal than a nearby 5G cell tower. So, the IMSI catcher is directly catching the phone's IMSI. This illustrates Active IMSI Catching." srcset="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=1024%2C585&amp;ssl=1 1024w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=300%2C171&amp;ssl=1 300w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=150%2C86&amp;ssl=1 150w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=768%2C439&amp;ssl=1 768w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=1536%2C878&amp;ssl=1 1536w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=1568%2C896&amp;ssl=1 1568w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?w=1792&amp;ssl=1 1792w" sizes="(max-width: 750px) 100vw, 750px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20750%20428'%3E%3C/svg%3E" data-lazy-srcset="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=1024%2C585&amp;ssl=1 1024w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=300%2C171&amp;ssl=1 300w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=150%2C86&amp;ssl=1 150w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=768%2C439&amp;ssl=1 768w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=1536%2C878&amp;ssl=1 1536w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=1568%2C896&amp;ssl=1 1568w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?w=1792&amp;ssl=1 1792w" data-lazy-src="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Active-IMSI-Catcher.png?resize=750%2C428&amp;ssl=1"></figure>



<h3 id="h-active-imsi-catcher">Active IMSI Catcher</h3>



<p>Also known as a cell station simulator or rogue base station, an active IMSI catcher is the more effective of the two. The downside is that it requires RF transmission, which violates FCC laws (and international equivalents) and is detectable.</p>











<figure><img data-recalc-dims="1" decoding="async" width="750" height="428" data-attachment-id="4962" data-permalink="https://zetier.com/zetier-passive-imsi-catcher/" data-orig-file="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?fit=1792%2C1024&amp;ssl=1" data-orig-size="1792,1024" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Zetier-Passive-IMSI-Catcher" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?fit=300%2C171&amp;ssl=1" data-large-file="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?fit=750%2C428&amp;ssl=1" src="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=750%2C428&amp;ssl=1" alt="Diagram showing a person with a cell phone that's interacting with a 5G tower, and the IMSI catcher is listening in, and thus catching the phone's IMSI. This illustrates Passive IMSI Catching." srcset="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=1024%2C585&amp;ssl=1 1024w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=300%2C171&amp;ssl=1 300w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=150%2C86&amp;ssl=1 150w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=768%2C439&amp;ssl=1 768w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=1536%2C878&amp;ssl=1 1536w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=1568%2C896&amp;ssl=1 1568w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?w=1792&amp;ssl=1 1792w" sizes="(max-width: 750px) 100vw, 750px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20750%20428'%3E%3C/svg%3E" data-lazy-srcset="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=1024%2C585&amp;ssl=1 1024w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=300%2C171&amp;ssl=1 300w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=150%2C86&amp;ssl=1 150w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=768%2C439&amp;ssl=1 768w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=1536%2C878&amp;ssl=1 1536w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=1568%2C896&amp;ssl=1 1568w, https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?w=1792&amp;ssl=1 1792w" data-lazy-src="https://i0.wp.com/zetier.com/wp-content/uploads/2025/04/Zetier-Passive-IMSI-Catcher.png?resize=750%2C428&amp;ssl=1"></figure>



<h3 id="h-passive-imsi-catcher">Passive IMSI Catcher</h3>



<p>This type requires a lot more planning and may not yield as many IMSIs. However, it‚Äôs undetectable (from an RF perspective) and reflects a true account of the network without interference.</p>



<p>To use an analogy, <strong>active</strong> IMSI catchers are like standing outside of the grocery store with an official-looking outfit and asking for people‚Äôs licenses to write down the number; it may work until someone with a badge shows up. </p>



<p>On the other hand, <strong>passive</strong> IMSI catchers are like sitting behind the one-way glass by the checkout counter and taking a photo of everyone‚Äôs licenses when they open their wallets ‚Äì difficult to detect and not illegal because it‚Äôs in plain sight (probably‚Ä¶ I‚Äôm not a lawyer and this isn‚Äôt legal advice).</p>











<h2 id="h-how-does-an-imsi-catcher-work">How does an IMSI catcher work?</h2>



<p><em>(NB: The remainder of this article refers exclusively to passive IMSI catchers.) </em></p>



<p>A UE (User Equipment, like your smartphone) is constantly performing selection, reselection, and registration procedures to maintain mobility and access to the cellular network. These processes are extremely complicated at the technical level, yet conceptually they‚Äôre very simple.</p>



<ol>
<li>After selecting a cell tower, based on measurements and control information, the UE sends a request to attach to a cell tower.</li>



<li>If the UE is allowed to attach, the cell tower and UE go back and forth a few times to negotiate some parameters, finalizing with the UE sending its IMSI.</li>



<li>The cell tower starts a new back-and-forth with the network to establish whether or not the IMSI is valid, active, and paid.</li>



<li>If the UE is allowed on the network, the cell tower initiates the authentication process, and everything from here on out is encrypted.</li>
</ol>



<p>This would be the end of the story, were it not for mobility. Again, mobility is a feature, as well as a network vulnerability. Every time the UE switches to another tower, it must repeat the registration process. (Ok, not EVERY time, but every time that the UE is in IDLE mode, which is most of the time. Handover is a whole other discussion.)</p>



<p>To minimize the number of times a UE registers using an unencrypted IMSI, the network issues a Temporary Mobile Subscriber Identity (TMSI, pronounced ‚ÄúTIM-zee‚Äù). The TMSI is issued over an encrypted connection and associated with the IMSI on the network side. For the sake of this article, we‚Äôll consider the TMSI to be an unexploitable solution (‚Ä¶it‚Äôs not).</p>



<p>There are 3 ways to catch an IMSI: </p>



<p>LOCATION, LOCATION, LOCATION! </p>



<p>As mentioned earlier, the technical aspects of developing a passive IMSI catcher are complicated. (If you‚Äôre interested in this topic, send an email to <a href="mailto:hello@zetier.com" target="_blank" rel="noreferrer noopener">hello@zetier.com</a>.) The simplified explanation is this: sometimes phones send IMSIs in cleartext, and if you‚Äôre collecting at the right place and right time, you‚Äôll catch them. Conversely, even if you have the perfect IMSI catcher, but you‚Äôre in the wrong location, you‚Äôll never catch an IMSI.</p>











<h2 id="h-so-where-do-you-catch-an-imsi">So, where do you catch an IMSI?</h2>



<p>In the 2G and 3G protocols, IMSIs are sent in the clear under 3 conditions:</p>



<ol>
<li>Initial attach</li>



<li>Crossing a Location Area Code (LAC) boundary <em>(NB: Depending on the system configuration, TMSIs can be shared between LACs)</em></li>



<li>Location Update Request (LUR)</li>
</ol>



<p>In addition, these protocols utilize spectrum around the downlink center frequency for Radio Resource Control (RRC), meaning a radio only needs to tune to a single frequency to get the downlink and uplink for these particular messages ‚Äì which is very convenient. However, my favorite thing about the ever-dwindling 2G/3G towers is that the initial attach procedure includes inter-RAT (<a href="https://en.wikipedia.org/wiki/Radio_access_technology" target="_blank" rel="noreferrer noopener">Radio Access Technology</a>) reselection. This means you can grab an IMSI in any LTE dead zone where a UE falls back to 2G or 3G.</p>



<p>4G is much less convenient: the uplink and downlink channels are necessary, and they must be partially synchronized. This is ultimately a technical issue that can be overcome with computing power. Furthermore, the initial attach is really the only viable option for reliably grabbing IMSIs, yet it‚Äôs extremely unreliable. 4G IMSIs can be found on PLMN borders (e.g., country borders, airports, roaming boundaries) and older RAT borders (e.g., reselection boundaries from 2G or 3G towers). If 4G/LTE piques your curiosity, you may want to explore the <a href="https://www.usenix.org/conference/usenixsecurity22/presentation/kotuliak" target="_blank" rel="noreferrer noopener">IMSI extractor.</a></p>



<p><strong>5G has finally addressed the cleartext IMSI network vulnerability.</strong> The IMSI is now called the Subscription Permanent Identifier (SUPI, pronounced ‚ÄúSOUP-ee‚Äù), and the unique identifier portion is encrypted using public key cryptography to create the Subscription Concealed Identifier (SUCI, pronounced ‚ÄúSU-shi‚Äù). </p>



<p>Together, the 5G SUPI and SUCI sufficiently solve the 5G network vulnerability: the SUCI is transmitted in the clear (instead of the 5G SUPI), yet the SUCI isn‚Äôt useful for identification or geolocation.</p>











<h2 id="h-so-that-s-it-imsi-catchers-are-dead">So that‚Äôs it? IMSI catchers are dead?</h2>



<p>From a purely academic stance, perhaps IMSI catchers have become impractical on fully patched, full-featured, network-wide 5G deployments. But such <strong>perfection remains extremely unlikely, and I expect to see several opportunities:</strong></p>



<ol>
<li>5G is a multi-stage rollout, and any 5G Non-Standalone (NSA) deployments have all of the same vulnerabilities as 4G!</li>



<li>Downgrading from 5G to 4G supports handover (i.e., the TMSI is passed between RATs), but I‚Äôve seen so many misconfigured towers over the years that I‚Äôd assume a downgrade to be vulnerable.</li>



<li>Mobile carriers may also not use the SUCI at all. I‚Äôm not sure how prevalent this vulnerability is in the wild, but I believe it‚Äôs non-zero.</li>
</ol>











<h2 id="h-how-to-block-an-imsi-catcher">How to block an IMSI catcher</h2>



<p>There‚Äôs no way to block an IMSI catcher. The only simple thing you can do, that can have an effect, is to set your network priority to 5G-SA ‚Äì but most phones don‚Äôt support this feature. </p>



<p>If you‚Äôre really paranoid, stay in airplane mode until you‚Äôre in a very dense coverage area. While this is far from a guarantee, IMSI catchers are more likely to be sitting in areas with compromised signal quality. </p>



<p>Finally, you can keep your phone in a Faraday bag, which can provide up to 100 dB of signal attenuation.</p>











<h2 id="h-there-s-always-something">There‚Äôs always something</h2>



<p>Cellular mobility will always have intrinsic vulnerabilities. The 3GPP 5G-NR spec has been a huge improvement against attribution attacks, which is definitely good for users. As for CNE developers, it has shifted the problem from technical to geographical. Active IMSI catchers and active jamming remain viable options, but they come with the same risks as always. On the bright side, there‚Äôs still work to be done ‚Äì and it‚Äôs very fun work!</p>



<p>If you‚Äôre interested in this space, feel free to <a href="mailto:hello@zetier.com" target="_blank" rel="noreferrer noopener">reach out</a> ‚Äì or explore our OSS in the cellular space: <a href="https://zetier.com/android-testing-with-bungeegum/" target="_blank" rel="noreferrer noopener">Bungeegum</a>, our free Android testing tool for simulating real-world conditions, and <a href="https://zetier.com/android-testing-with-lariat/" target="_blank" rel="noreferrer noopener">Lariat</a>, another open-source testing tool for wrangling the wide range of Android devices ‚Äì both developed in-house at Zetier.</p>







<p><em>Illustrations by Rebecca DeField.</em></p>







<h3 id="h-thought-this-was-an-intriguing-read">Thought this was an intriguing read?</h3>



<p><strong><a href="https://news.ycombinator.com/submitlink?u=https%3A%2F%2Fzetier.com%2F5g-imsi-catcher%2F&amp;t=Did%205G%20kill%20the%20IMSI%20catcher%3F%20A%20primer%20on%20one%20of%20the%20oldest%20cellular%20vulnerabilities" target="_blank" rel="noreferrer noopener">Share on HackerNews ‚Üí</a></strong></p>




					
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Libogc (Wii homebrew library) discovered to contain code stolen from RTEMS (169 pts)]]></title>
            <link>https://github.com/fail0verflow/hbc/blob/80a80251f83f1993c272c58e471d040f3eb1dee9/README.md</link>
            <guid>43812995</guid>
            <pubDate>Sun, 27 Apr 2025 16:18:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/fail0verflow/hbc/blob/80a80251f83f1993c272c58e471d040f3eb1dee9/README.md">https://github.com/fail0verflow/hbc/blob/80a80251f83f1993c272c58e471d040f3eb1dee9/README.md</a>, See on <a href="https://news.ycombinator.com/item?id=43812995">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">ARCHIVED</h2><a id="user-content-archived" aria-label="Permalink: ARCHIVED" href="#archived"></a></p>
<p dir="auto">This repository is archived and will not accept any further contributions.</p>
<p dir="auto">Like most Wii homebrew software, this software depends on <a href="https://github.com/devkitPro/libogc">libogc</a>.
After development of The Homebrew Channel had already started, we discovered that large portions of libogc
were stolen directly from the Nintendo SDK or games using the Nintendo SDK (decompiled and cleaned up).
We thought that at least significant parts of libogc, such as its threading implementation, were original,
and reluctantly continued to use the project while distancing ourselves from it.</p>
<p dir="auto">It has recently been revealed that the threading/OS implementation in libogc is, in fact,
<a href="https://github.com/derek57/libogc">stolen from RTEMS</a>. The authors of libogc didn't just steal proprietary
Nintendo code, but also saw it fit to steal an <em>open source</em> RTOS and remove all attribution and copyright
information. This goes far beyond ignorance about the copyright implications of reverse engineering Nintendo
binaries, and goes straight into outright deliberate, malicious code theft and copyright infringement.</p>
<p dir="auto">The current developers of libogc are <a href="https://github.com/devkitPro/libogc/issues/201">not interested</a> in
tracking this issue, finding a solution, nor informing the community of the problematic copyright status of
the project. When we filed an issue about it, they immediately closed it, replied with verbal abuse, and then
completely deleted it from public view.</p>
<p dir="auto">For this reason, we consider it impossible to legally and legitimately compile this software at this point,
and cannot encourage any further development.</p>
<p dir="auto">The Wii homebrew community was all built on top of a pile of lies and copyright infringement, and it's all
thanks to shagkur (who did the stealing) and the rest of the team (who enabled it and did nothing when it was discovered). Together, the developers deceived everyone into believing their work was original.</p>
<p dir="auto">Please demand that the leaders and major contributors to console or other proprietary device SDKs and
toolkits that you use and work with do things legally, and do not tolerate this kind of behavior.</p>
<p dir="auto">If you wish to check for yourself, for example, you can compare
<a href="https://github.com/devkitPro/libogc/blob/52c525a13fd1762c10395c78875e3260f94368b5/libogc/lwp_threads.c#L580">this</a>
function in libogc to
<a href="https://github.com/atgreen/RTEMS/blob/2f200c7e642c214accb7cc6bd7f0f1784deec833/c/src/exec/score/src/thread.c#L385">this</a>
function in a really old version of RTEMS. While the code has been simplified and many identifiers renamed, it
is clear that the libogc version is a direct descendant of the RTEMS version. It is not possible for two code
implementations to end up this similar purely by chance.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">The Homebrew Channel</h2><a id="user-content-the-homebrew-channel" aria-label="Permalink: The Homebrew Channel" href="#the-homebrew-channel"></a></p>
<p dir="auto">This repository contains the public release of the source code for
The Homebrew Channel.</p>
<p dir="auto">Included portions:</p>
<ul dir="auto">
<li>The Homebrew Channel</li>
<li>Reload stub</li>
<li>Banner</li>
<li>PyWii (includes Alameda for banner creation)</li>
<li>WiiPAX (LZMA executable packer)</li>
</ul>
<p dir="auto">Not included:</p>
<ul dir="auto">
<li>Installer</li>
</ul>
<p dir="auto">Note that the code in this repository differs from the source code used to build
the official version of The Homebrew Channel, which includes additional
protection features (i.e. we had to add reverse-DRM to stop scammers from
selling it).</p>
<p dir="auto">This code is released with no warranty, and hasn't even been tested on a real
Wii, only under Dolphin (yes, this release runs under Dolphin).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Build instructions</h2><a id="user-content-build-instructions" aria-label="Permalink: Build instructions" href="#build-instructions"></a></p>
<p dir="auto">You need devkitPPC and libogc installed, and the DEVKITPRO/DEVKITPPC environment
variables correctly set. Use the latest available versions. Make sure you have
libogc/libfat, and also install the following 3rd party libraries:</p>
<ul dir="auto">
<li>zlib</li>
<li>libpng</li>
<li>mxml</li>
<li>freetype</li>
</ul>
<p dir="auto">You can obtain binaries of those with
<a href="https://devkitpro.org/wiki/devkitPro_pacman" rel="nofollow">devkitPro pacman</a>. Simply use</p>
<div data-snippet-clipboard-copy-content="sudo (dkp-)pacman -S ppc-zlib ppc-libpng ppc-mxml ppc-freetype"><pre><code>sudo (dkp-)pacman -S ppc-zlib ppc-libpng ppc-mxml ppc-freetype
</code></pre></div>
<p dir="auto">Additionally, you'll need the following packages on your host machine:</p>
<ul dir="auto">
<li>pycryptodomex (for PyWii)</li>
<li>libpng headers (libpng-dev)</li>
<li>gettext</li>
<li>sox</li>
</ul>
<p dir="auto">The build process has only been tested on Linux. You're on your own if you
want to try building this on OSX or Windows.</p>
<p dir="auto">You'll need the Wii common key installed as ~/.wii/common-key.</p>
<p dir="auto">First run 'make' in wiipax, then 'make' in channel. You'll find a .wad file
that you can install or directly run with Dolphin under
channel/title/channel_retail.wad. You'll also find executable binaries under
channel/channelapp, but be advised that the NAND save file / theme storage
features won't work properly if HBC isn't launched as a channel with its
correct title identity/permissions.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Unless otherwise noted in an individual file header, all source code in this
repository is released under the terms of the GNU General Public License,
version 2 or later. The full text of the license can be found in the COPYING
file.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Virginia passes law to enforce maximum vehicle speeds for repeat speeders (187 pts)]]></title>
            <link>https://www.fastcompany.com/91323835/virginia-will-use-technology-to-slow-chronic-speeders-cars-and-other-states-are-rushing-to-join-in</link>
            <guid>43812856</guid>
            <pubDate>Sun, 27 Apr 2025 16:02:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.fastcompany.com/91323835/virginia-will-use-technology-to-slow-chronic-speeders-cars-and-other-states-are-rushing-to-join-in">https://www.fastcompany.com/91323835/virginia-will-use-technology-to-slow-chronic-speeders-cars-and-other-states-are-rushing-to-join-in</a>, See on <a href="https://news.ycombinator.com/item?id=43812856">Hacker News</a></p>
Couldn't get https://www.fastcompany.com/91323835/virginia-will-use-technology-to-slow-chronic-speeders-cars-and-other-states-are-rushing-to-join-in: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[TmuxAI: AI-Powered, Non-Intrusive Terminal Assistant (170 pts)]]></title>
            <link>https://tmuxai.dev/</link>
            <guid>43812646</guid>
            <pubDate>Sun, 27 Apr 2025 15:35:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tmuxai.dev/">https://tmuxai.dev/</a>, See on <a href="https://news.ycombinator.com/item?id=43812646">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-v-f73bbfd7="" id="__nuxt"><header data-v-f73bbfd7="" data-v-93af87f7=""></header><div data-v-f73bbfd7=""><div data-v-f73bbfd7=""><p> BORING DYSTOPIA DEVELOPMENT </p><p data-v-f73bbfd7=""> TmuxAI is a non-intrusive terminal assistant that works alongside you in a tmux window. TmuxAI's design philosophy mirrors the way humans collaborate at the terminal. Just as a colleague sitting next to you, TmuxAI observes your screen, understand context from what's visible, and helps accordingly. </p><div data-v-f73bbfd7=""><p data-v-f73bbfd7=""><span data-v-f73bbfd7="">curl</span><span data-v-f73bbfd7=""> -fsSL </span><span data-v-f73bbfd7="">https://get.tmuxai.dev</span><span data-v-f73bbfd7=""> | </span><span data-v-f73bbfd7="">bash</span></p></div></div><div data-v-f73bbfd7=""><p><span data-v-f73bbfd7="">$</span><span data-v-f73bbfd7="">tmuxai find large files and cleanup some space</span></p><p><span data-v-f73bbfd7="">TmuxAI</span> <span data-v-f73bbfd7="">¬ª</span> I'll help you find large files taking up space in this directory. </p><p><span data-v-f73bbfd7="">TmuxAI</span> <span data-v-f73bbfd7="">¬ª</span> <span data-v-f73bbfd7="">find . -type f -size +100M -exec du -h {} \; | sort -rh | head -5</span></p><p><span data-v-f73bbfd7="">Do you want to execute this command? </span><span data-v-f73bbfd7="">[Y]es/No/Edit:</span></p><p><span data-v-f73bbfd7="">TmuxAI</span> <span data-v-f73bbfd7="">¬ª</span> Found several large files in node_modules and logs directories. </p><p><span data-v-f73bbfd7="">TmuxAI</span> <span data-v-f73bbfd7="">¬ª</span> <span data-v-f73bbfd7="">rm -i ./logs/debug-*.log</span></p><p><span data-v-f73bbfd7="">Do you want to execute this command? </span><span data-v-f73bbfd7="">[Y]es/No/Edit: </span><span data-v-f73bbfd7="">_</span></p></div></div><div data-v-f73bbfd7="" id="features"><h3 data-v-f73bbfd7=""><span data-v-f73bbfd7="">01</span> FEATURES <span data-v-f73bbfd7=""></span></h3><div data-v-f73bbfd7=""><div data-v-f73bbfd7=""><div data-v-f73bbfd7=""><p>CONTEXT-AWARE TERMINAL ASSISTANCE</p><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-v-f73bbfd7=""><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" color="currentColor" data-v-f73bbfd7=""><path d="m7.5 14.5l1.842-5.526a.694.694 0 0 1 1.316 0L12.5 14.5m3-6v6m-7-2h3" data-v-f73bbfd7=""></path><path d="M21.011 14.097c.522-.141.783-.212.886-.346c.103-.135.103-.351.103-.784v-1.934c0-.433 0-.65-.103-.784s-.364-.205-.886-.345c-1.95-.526-3.171-2.565-2.668-4.503c.139-.533.208-.8.142-.956s-.256-.264-.635-.479l-1.725-.98c-.372-.21-.558-.316-.725-.294s-.356.21-.733.587c-1.459 1.455-3.873 1.455-5.333 0c-.377-.376-.565-.564-.732-.587c-.167-.022-.353.083-.725.295l-1.725.979c-.38.215-.57.323-.635.48c-.066.155.003.422.141.955c.503 1.938-.718 3.977-2.669 4.503c-.522.14-.783.21-.886.345S2 10.6 2 11.033v1.934c0 .433 0 .65.103.784s.364.205.886.346c1.95.526 3.171 2.565 2.668 4.502c-.139.533-.208.8-.142.956s.256.264.635.48l1.725.978c.372.212.558.317.725.295s.356-.21.733-.587c1.46-1.457 3.876-1.457 5.336 0c.377.376.565.564.732.587c.167.022.353-.083.726-.295l1.724-.979c.38-.215.57-.323.635-.48s-.003-.422-.141-.955c-.504-1.937.716-3.976 2.666-4.502" data-v-f73bbfd7=""></path></g></svg></div><p data-v-f73bbfd7=""> TmuxAI reads and understands what's displayed across all your terminal panes in real-time, providing intelligent help based on what you're actually working on. </p></div><div data-v-f73bbfd7=""><p data-v-f73bbfd7=""> Works instantly with your existing tmux setup without requiring special shells, wrappers, or terminal emulators. Just install and run. </p></div><div data-v-f73bbfd7=""><div data-v-f73bbfd7=""><p>UNIVERSAL TERMINAL COMPATIBILITY</p><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14 14" data-v-f73bbfd7=""><path fill="currentColor" fill-rule="evenodd" d="M9.721.657c.186-.846 1.39-.851 1.582-.007l.01.04l.018.08a2.48 2.48 0 0 0 1.992 1.879c.881.153.881 1.42 0 1.573a2.48 2.48 0 0 0-1.996 1.894l-.024.105c-.192.844-1.396.839-1.582-.007l-.02-.09c-.214-.98-1-1.732-1.987-1.904c-.88-.153-.88-1.417 0-1.57A2.47 2.47 0 0 0 9.7.757l.015-.066zM1.766 2.48h4.39c-.57 1.05-.115 2.6 1.364 2.857c.486.085.882.43 1.036.893h-7.04v6c0 .138.112.25.25.25h9a.25.25 0 0 0 .25-.25V7.923c.644-.163 1.21-.646 1.394-1.45l.024-.106a1.4 1.4 0 0 1 .082-.247v6.11a1.75 1.75 0 0 1-1.75 1.75h-9a1.75 1.75 0 0 1-1.75-1.75v-8c0-.967.784-1.75 1.75-1.75m.963 4.836a.625.625 0 0 1 .884 0l1.5 1.5a.625.625 0 0 1 0 .884l-1.5 1.5a.625.625 0 1 1-.884-.884L3.787 9.26L2.73 8.201a.625.625 0 0 1 0-.884Zm2.817 3.442c0-.345.28-.625.625-.625h1.5a.625.625 0 1 1 0 1.25h-1.5a.625.625 0 0 1-.625-.625" clip-rule="evenodd" data-v-f73bbfd7=""></path></svg></div><p data-v-f73bbfd7=""> Works with nested shells, SSH connections, database CLIs, network equipment shells (Cisco IOS, Juniper, etc), and any other text-based terminal interface. </p></div><div data-v-f73bbfd7=""><p data-v-f73bbfd7=""> Enhances command tracking with custom shell prompts that provide exact command completion detection and exit code awareness for more accurate assistance. </p></div><div data-v-f73bbfd7=""><p data-v-f73bbfd7=""> Transforms TmuxAI into a proactive assistant that monitors your terminal activity and offers improvements or explanations based on your specified goals. </p></div><div data-v-f73bbfd7=""><p data-v-f73bbfd7=""> Available as open source software. Use TmuxAI for free and adapt it to your workflow. </p></div></div></div><div data-v-b19bab3b="" id="getting-started" data-v-f73bbfd7=""><h3 data-v-b19bab3b=""><span data-v-b19bab3b="">02</span> DEMO <span data-v-b19bab3b=""></span></h3><div data-v-b19bab3b=""><div data-v-b19bab3b=""><p>CHAT PANE </p><div data-v-b19bab3b=""><p><span data-v-b19bab3b="">TmuxAI</span><span data-v-b19bab3b="">¬ª</span><span data-v-b19bab3b="">start docker container mysql and then connect to mysql shell.</span></p><p> First I'll start the container: </p><p><span data-v-b19bab3b="">TmuxAI</span><span data-v-b19bab3b="">¬ª</span><span data-v-b19bab3b="">docker run --name mysql_container -e MYSQL_ROOT_PASSWORD=password -d mysql:latest</span></p><p> Do you want to execute this command? <span data-v-b19bab3b="">[Y]es/No/Edit:</span></p><p><span data-v-b19bab3b="">TmuxAI</span><span data-v-b19bab3b="">¬ª</span> Now I will connect to the mysql shell. </p><p><span data-v-b19bab3b="">TmuxAI</span><span data-v-b19bab3b="">¬ª</span><span data-v-b19bab3b="">docker exec -it mysql_container mysql -u root -p</span></p><p> Do you want to execute this command? <span data-v-b19bab3b="">[Y]es/No/Edit:</span></p><div data-v-b19bab3b=""><p><span data-v-b19bab3b="">TmuxAI</span><span data-v-b19bab3b="">¬ª</span> I'll now send the password to the mysql shell. </p><p><span data-v-b19bab3b="">TmuxAI</span><span data-v-b19bab3b="">¬ª</span><span data-v-b19bab3b="">Sending keys: password</span></p><p><span data-v-b19bab3b="">TmuxAI</span><span data-v-b19bab3b="">¬ª</span><span data-v-b19bab3b="">Sending keys: Enter</span></p></div><p><span data-v-b19bab3b="">TmuxAI</span><span data-v-b19bab3b="">¬ª</span> I've successfully connected to the MySQL shell. </p></div></div><div data-v-b19bab3b=""><p>EXEC PANE </p><div data-v-b19bab3b=""><p> $ docker run --name mysql_container -e MYSQL_ROOT_PASSWORD=password -d mysql:latest </p><p> 6d76ba47b7f </p><p> $ docker exec -it mysql_container mysql -u root -p </p><p> Enter password: </p><p> Welcome to the MySQL monitor. Commands end with ; or \g. </p><p> Your MySQL connection id is 9 </p><p> Server version: 8.2.0 MySQL Community Server - GPL </p><p> Copyright (c) 2000, 2023, Oracle and/or its affiliates. </p><p> Oracle is a registered trademark of Oracle Corporation and/or its </p><p> affiliates. Other names may be trademarks of their respective </p><p> owners. </p><p> Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. </p><p> mysql&gt; </p></div></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The coming knowledge-work supply-chain crisis (173 pts)]]></title>
            <link>https://worksonmymachine.substack.com/p/the-coming-knowledge-work-supply</link>
            <guid>43812459</guid>
            <pubDate>Sun, 27 Apr 2025 15:10:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://worksonmymachine.substack.com/p/the-coming-knowledge-work-supply">https://worksonmymachine.substack.com/p/the-coming-knowledge-work-supply</a>, See on <a href="https://news.ycombinator.com/item?id=43812459">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png" width="1456" height="813" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:813,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:6023513,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://worksonmymachine.substack.com/i/162257174?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd433d925-82af-4d6a-9b3b-847069a0adf6_2752x1536.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>Remember the first time an autocomplete suggestion nailed exactly what you meant to type? Multiply that by a thousand and aim it at every task you once called ‚Äúwork.‚Äù AI is scaling the creation side of knowledge work at an exponential rate, but our decision-making tools and rituals remain stuck in the past. The imbalance creates bottlenecks in everything from code reviews to roadmapping and everything in between. Before we drown in our own todo queues, we need to rethink the entire production-to-judgment pipeline.</p><p>Over the past few months, I‚Äôve shared various experiments where AI dramatically accelerates production tasks:</p><ul><li><p><a href="https://worksonmymachine.substack.com/p/a-vibe-code-to-user-stories-pipeline" rel="">Generating user stories from prototypes</a></p></li><li><p><a href="https://worksonmymachine.substack.com/p/automating-test-generation-with-gemini" rel="">Creating integration tests from user stories</a></p></li><li><p><a href="https://worksonmymachine.substack.com/p/fanoutparallelizereduce-refactoring" rel="">Breaking down a big refactoring into bite-sized tasks for an AI to do</a></p></li><li><p><a href="https://worksonmymachine.substack.com/p/ai-programs-while-i-sleep-using-github" rel="">Autonomously developing new features overnight</a></p></li><li><p><a href="https://worksonmymachine.substack.com/p/wasting-inferences-with-aider" rel="">Implementing complete features and tests directly from user stories</a></p></li></ul><p>There‚Äôs one common theme here: AI excels at production but always ends up with humans as a critical bottleneck dealing with a mountain of tasks to evaluate, approve, or modify what it creates.</p><p><span>This pile of tasks is how I understand what Vaughn Tan refers to as </span><a href="https://uncertaintymindset.substack.com/p/ai-meaningmaking" rel="">Meaningmaking</a><span>: the uniquely human ability to make subjective decisions about the relative value of things. He argues this type of value judgement is something AI fundamentally cannot do, as it can only pattern match against existing decisions, not create new frameworks for assigning worth.</span></p><p>When an AI generates 10 pull requests overnight, a human needs to decide which ones are worth merging, which need modification, and which should be rejected entirely. This isn‚Äôt just about checking if the code works (which you still need to do!), it‚Äôs also about making judgement calls on whether the changes align with the project‚Äôs goals, whether they solve the right problems, and whether they will be maintainable long-term. </p><p>Ok, calling this a ‚Äúcrisis‚Äù may be a bit hyperbolic, but we can already see at least two problems emerging. </p><p><span>First, Rohit Krishnan points out in </span><a href="https://www.strangeloopcanon.com/p/when-we-become-cogs" rel="">When We Become Cogs</a><span> that working with AI effectively leads to less job satisfaction. An MIT study found materials scientists experienced a 44% drop in job satisfaction when AI automated 57% of their ‚Äúidea-generation‚Äù tasks ‚Äî precisely the creative work they most enjoyed.  This is similar to the direction that software development is going - as AI gets better at generating code, more and more of the work of a software engineer will turn into PR review and less of the aspects of creative problem-solving that drew many of them to the field.</span></p><p><span>Second, you may have realized while watching some of my demos that our tools aren‚Äôt designed for the volume of work AI can generate. In </span><a href="https://worksonmymachine.substack.com/p/ai-programs-while-i-sleep-using-github" rel="">AI Programs While I Sleep,</a><span> you can see that I am already underwater with hundreds of AI-generated PRs to review. Our code review tools are designed for reviewing at most 5-10 PRs a day, not 50. You can also see a similar pattern emerge in the other videos having to do with managing user stories, doing product acceptance, and test case validation. Our tools are designed for orders of magnitude less work. </span></p><p>These two problems compound each other. Just as the tools knowledge workers use for evaluation and judgment (the ‚Äúmeaningmaking‚Äù work) start to break under the weight of more tasks than they are designed for, the tasks themselves are becoming much less rewarding. The result? Work piles up in review queues, decisions get rushed or postponed, and we‚Äôre no better off than before adding AI tools into our process.</p><p>This raises some big questions:</p><ul><li><p>How might we design tools to enhance decision-making velocity?</p></li><li><p>What would code review look like if optimized for 50 PRs daily instead of 5?</p></li><li><p>Which skills become premium when humans focus on judgement rather than production?</p></li><li><p>Can we find job satisfaction in a majorly reviewer or ‚Äúdecider‚Äù role?</p></li></ul><p>Our current evaluation tools were designed for an era of scarcity - when human effort was the limiting factor in production. In an era of AI-driven abundance, we need systems built around human cognitive limitations. </p><p>The meta-challenge here is that we‚Äôre using tools optimized for the constraint of yesterday (production capacity) while facing a completely different constraint today (judgement capacity). The organizations that thrive will be those that recognize this fundamental shift and redesign their workflows accordingly.</p><p>For those familiar with John Boyd‚Äôs OODA loop (Observe, Orient, Decide, Act), there‚Äôs a parallel. AI is increasingly handling the ‚ÄúOrient‚Äù and ‚ÄúAct‚Äù phases ‚Äî the creative synthesis and execution that many knowledge workers found most satisfying. What remains are the ‚ÄúObserve‚Äù and ‚ÄúDecide‚Äù phases - the evaluation and judgment work that our tools and processes aren‚Äôt optimized for.</p><p>We must reimagine knowledge work as a high-velocity decision-making operation rather than a creative production process. Without new tools and frameworks, humans will become overwheLLMed judges in a court where AI generates more cases than could ever be heard.</p><p>Ultimately, I don‚Äôt see AI completely replacing knowledge workers any time soon. What I see happening is us not being prepared for how AI transforms the nature of knowledge work and us having a very painful and slow transition into this new era.</p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[We're building a dystopia just to make people click on ads [video] (276 pts)]]></title>
            <link>https://www.ted.com/talks/zeynep_tufekci_we_re_building_a_dystopia_just_to_make_people_click_on_ads</link>
            <guid>43812379</guid>
            <pubDate>Sun, 27 Apr 2025 14:56:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ted.com/talks/zeynep_tufekci_we_re_building_a_dystopia_just_to_make_people_click_on_ads">https://www.ted.com/talks/zeynep_tufekci_we_re_building_a_dystopia_just_to_make_people_click_on_ads</a>, See on <a href="https://news.ycombinator.com/item?id=43812379">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Newsletters</p><div><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_1694_78433)"><path fill-rule="evenodd" clip-rule="evenodd" d="M4 4.75C3.31421 4.75 2.75 5.31421 2.75 6V18C2.75 18.6858 3.31421 19.25 4 19.25H20C20.6858 19.25 21.25 18.6858 21.25 18V6C21.25 5.31421 20.6858 4.75 20 4.75H4ZM1.25 6C1.25 4.48579 2.48579 3.25 4 3.25H20C21.5142 3.25 22.75 4.48579 22.75 6V18C22.75 19.5142 21.5142 20.75 20 20.75H4C2.48579 20.75 1.25 19.5142 1.25 18V6Z" fill="#B5B5B5"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M1.38564 5.56991C1.62318 5.23057 2.09082 5.14804 2.43016 5.38558L12.0001 12.0845L21.57 5.38558C21.9093 5.14804 22.377 5.23057 22.6145 5.56991C22.852 5.90924 22.7695 6.37689 22.4302 6.61443L12.4302 13.6144C12.1719 13.7952 11.8282 13.7952 11.57 13.6144L1.56997 6.61443C1.23063 6.37689 1.1481 5.90924 1.38564 5.56991Z" fill="#B5B5B5"></path></g><defs><clipPath id="clip0_1694_78433"><rect width="24" height="24" fill="white"></rect></clipPath></defs></svg><p>Get the latest talks</p></div><p>Get a daily email featuring the latest talk, plus a quick mix of trending content.</p><form></form><div><p>By subscribing, you understand and agree that we will store, process and manage your personal information according to our</p><!-- --> <p><a href="https://www.ted.com/about/our-organization/our-policies-terms/privacy-policy">Privacy Policy</a></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Reverse Geocoding Is Hard (220 pts)]]></title>
            <link>https://shkspr.mobi/blog/2025/04/reverse-geocoding-is-hard/</link>
            <guid>43812323</guid>
            <pubDate>Sun, 27 Apr 2025 14:45:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://shkspr.mobi/blog/2025/04/reverse-geocoding-is-hard/">https://shkspr.mobi/blog/2025/04/reverse-geocoding-is-hard/</a>, See on <a href="https://news.ycombinator.com/item?id=43812323">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
    </channel>
</rss>