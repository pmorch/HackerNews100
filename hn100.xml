<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 01 Sep 2025 13:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Nintendo Switch 2 Dock USB-C Compatibility (240 pts)]]></title>
            <link>https://www.lttlabs.com/blog/2025/08/30/nintendo-switch-2-dock</link>
            <guid>45087971</guid>
            <pubDate>Sun, 31 Aug 2025 23:21:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lttlabs.com/blog/2025/08/30/nintendo-switch-2-dock">https://www.lttlabs.com/blog/2025/08/30/nintendo-switch-2-dock</a>, See on <a href="https://news.ycombinator.com/item?id=45087971">Hacker News</a></p>
Couldn't get https://www.lttlabs.com/blog/2025/08/30/nintendo-switch-2-dock: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Lewis and Clark marked their trail with laxatives (181 pts)]]></title>
            <link>https://offbeatoregon.com/2501d1006d_biliousPills-686.077.html</link>
            <guid>45087815</guid>
            <pubDate>Sun, 31 Aug 2025 22:54:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://offbeatoregon.com/2501d1006d_biliousPills-686.077.html">https://offbeatoregon.com/2501d1006d_biliousPills-686.077.html</a>, See on <a href="https://news.ycombinator.com/item?id=45087815">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<header>
		<a href="http://offbeatoregon.com/"><img src="https://offbeatoregon.com/assets-misc/header-2212.png" alt="Offbeat Oregon decorative banner" width="1274" height="237"></a>
				</header>
		
		
		<article>
        <p>
			<h4>ASTORIA, CLATSOP COUNTY; 1800s: </h4>
			
    </p> <!-- Closing "barHed" -->
    <div><section>
			  
			  			  <p>
				  <h6> Audio version is not yet available</h6>
				  <!--
            <h6 align="center"><em><strong>Audio version:</strong> <a href="PODCASTMP3URLPODCASTMP3PODCASTMP3">Download MP3</a> or use  controls below:</em> <br />

                <audio title="Audio verison of this article" controls>
                  <source src="PODCASTMP3URLPODCASTMP3URLPODCASTMP3URL" type="audio/mpeg" />
                  Your browser does not support the audio element. </audio>
            </h6>
-->
            </p>


		              <h5>By Finn J.D. John<br>
			                <em>January 26, 2025</em>
                            <figure>
                        </figure>
		              </h5>
		              <p><strong>AS LEWIS AND CLARK’S</strong> Corps of Discovery made its way across the continent to Oregon, the men (and woman) of the party probably weren’t thinking much about their place in history. So they weren’t taking any particular pains to document their every movement.</p>
            <p>There were, however, some particular pains they were experiencing with every movement, so to speak ... as a result of a relentlessly low-fiber diet: Everyone was constipated, all the time.</p>
            <p>Luckily, they had something that helped with that — a lot. The Corps of Discovery left on its journey with a trove of 600 giant pills that the men called “thunder-clappers,” which the soldiers and travelers used to jump-start things when they got bound up. And everyone used them pretty regularly.</p>
            <figure>
              <div> <p><a href="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/fort_clatsop_1800x1013.jpg"><img src="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/fort_clatsop_400.jpg" alt="" width="236" height="133"></a></p><figcaption>
                  <h6>The reproduction of Fort Clatsop, built at or near the site of the Corps of Expedition's original buildings. Dr. Rush's Bilious Pills have not been particularly helpful in locating the original Fort Clatsop, long since rotted away — either because it hasn’t been found yet, or because the site of the old pit latrine has been disturbed by farming or logging activities in the years since. (Image: National Parks Service)</h6>
                </figcaption>
              </div>
            </figure>
            <p>And, strange as it seems, that fact is why we know several of their campsites along the way. The main active ingredient in “thunder-clappers” was a mercury salt, which is a pretty stable compound. Archaeologists simply have to search for dimples in the ground — which is what old latrine pits often end up looking like, hundreds of years later, after Nature has partly filled them in — and take samples of the dirt in them. </p>
            <p>If it comes up with an off-the-charts reading for mercury, well, that’s a Corps of Discovery pit toilet — and the layout of the rest of the campsite can be extrapolated with considerable precision by consulting the military manuals they used to lay out their camps.</p>
            <p><br>
              <strong>THESE PILLS WERE</strong> the pride and joy of Dr. Benjamin Rush, one of the Founding Fathers and a signer of the Declaration of Independence. Rush was also the man President Thomas Jefferson considered the finest physician in the republic. </p>
            <p>In that opinion, Jefferson was probably alone, or at least in a small minority. Dr. Rush’s style of “heroic medicine” had caused his star to fall quite a bit by this time — especially after the Philadelphia yellow fever epidemic of 1793, when his patients died at a noticeably higher rate than untreated sufferers. </p>
            <p>At the time, of course, very little was known about how the human body worked. Physicians were basically theorists, who made educated guesses and did their best. </p>
            <p>The problem was, the education on which those educated guesses were based varied pretty wildly depending on what school you came from. Homeopathic physicians theorized that giving patients a tiny amount of something that mimicked their symptoms would stimulate the body to cure itself. Eclectic physicians sought cures from herbs and folk remedies. Hydropathic physicians believed hot and cold water, applied externally or internally, was all that was needed. </p>
            <p>Dr. Rush wasn’t from one of these schools. He was from the school of mainstream medicine — also known as allopathic medicine (although that term is a perjorative today).</p>
            <p>Allopathic medical theory, in the early 1800s, dated from the second century A.D., courtesy of a Roman doctor named Galen. </p>
            <p>Galen theorized that the human body ran on four different fluids, which he called “humours”: Blood, phlegm, yellow bile, and black bile. All disease, he claimed, stemmed from an imbalance in these humours.</p>
            <p>Thus, too much blood caused inflammation and fever; the solution was to let a pint or two out. Too much bile caused problems like constipation; the solution was to administer a purgative and let the patient blow out some black bile into a handy chamber-pot, or vomit up some yellow bile — or both.</p>
            <p>These interventions sometimes helped, but most of the time they had little or no good effect. So by Rush’s time, a number of physicians were going on the theory that what was needed was a doubling-down on their theory — in a style of practice that they called “heroic medicine.”</p>
            <p>If a sensible dose of a purgative didn’t get a patient’s bile back in balance, a “heroic” dose might. If a cup or two of blood didn’t get the fever down, four or five surely would.          </p>
          </section>
            <blockquote>&nbsp;</blockquote>
            <blockquote>
              <p><i><strong>[EDITOR'S NOTE: </strong>In "reader view" some phone browsers truncate the story here, algorithmically "assuming" that the second column is advertising. (Most browsers do not recognize this page as mobile-device-friendly; it is designed to be browsed on any device without reflowing, by taking advantage of the "double-tap-to-zoom" function.) If the story ends here on your device, you may have to exit "reader view" (sometimes labeled "Make This Page Mobile Friendly Mode") to continue reading. We apologize for the inconvenience.<strong>]</strong></i></p>
            </blockquote>
            <p><strong>—<a href="#TopCol02">(Jump to top of next column)</a>—</strong></p></div>
    <!-- closes "barBod" -->
<section>
        <h6 id="TopCol02">
          <figure> <a href="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/ft-clatsop-drawing-1800.jpg"><img src="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/ft-clatsop-drawing-436.jpg" alt="" width="436" height="298"></a>
            <figcaption>A sketch of Fort Clatsop as it would have appeared in 1805. (Image: Oregon Historical Society)</figcaption>
          </figure>
        </h6>
        <p><br>
          You can imagine what the result of this philosophy was, when applied to an actual sick person.</p>
        <p>“Some people have stated that the Lewis and Clark Expedition would have been better off if they had taken a trained physician along to care for the numerous problems that they encountered. I totally disagree,” says physician and historian David Peck. “I think a trained physician would have been overly confident and possibly would have been much more aggressive in their treatment of illnesses, often times to the detriment of the patient.”</p>
        <p>In lieu of a trained physician, the Corps of Discovery’s leaders got some basic medical training, along with a bag full of the tools of allopathic intervention: lancets for bleeding patients, blister powder for inducing “heat,” opium products for relieving pain and inducing sleep — and purgatives.</p>
        <p>Those purgatives are the heroes of our story today. They came in the form of beefy pills, about four times the size of a standard aspirin tablet, which Rush called “Dr. Rush’s Bilious Pills.” They contained about 10 grains of calomel and 10 to 15 grains of jalap.</p>
        <figure>
          <div> <p><a href="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/BillPillFormula-1200.jpg"><img src="https://offbeatoregon.com/assets-2010/1006d_BiliousPills/BillPillFormula-236.jpg" alt="" width="236" height="120"></a></p><figcaption>
              <h6>This recipe for a milder version of Rush's Bilious Pills comes from the National Formulary in 1945. This image appears in the Lewis and Clark Fort Mandan Foundation's Web site, at which there's a lot more information about the ingredients in this compound. Mercury was still being used as an internal medicine in the 1960s and as a topical antiseptic (chiefly as Mercurochrome) into the 1990s.</h6>
            </figcaption>
          </div>
        </figure>
        <p>Jalap, the powdered root of a Mexican variety of morning glory, is a natural laxative of considerable power. </p>
        <p>And calomel ... ah, calomel. Calomel was the wonder drug of the age. Its chemical name is mercury chloride. In large doses (and they don’t get much larger than 10 grains, or 20 if a fellow takes two of them, as Dr. Rush recommended!) it functions as a savage purgative, causing lengthy and productive sessions in the outhouse and leaving a patient thoroughly depleted and hopefully in full restoration of his bile balance. </p>
        <p>Calomel also was the only thing known to be effective against syphilis, which was always an issue with military outfits. Whether picked up from a friendly lady in a waterfront St. Louis “sporting house” before the journey, or from an equally friendly Native lady met along the way, syphilis went with soldiers like ice cold milk with an Oreo cookie.</p>
        <p>When symptoms broke out, the patient would be dosed with “thunder clappers” and slathered with topical mercury ointments until he started salivating ferociously, which was a symptom of mild mercury poisoning but at the time was considered a sure sign that the body was purging the sickness out of itself. </p>
        <p>And yes, a few of the men did end up needing treatment for syphilis. But everyone in the party needed a good laxative “on the regular” (sorry about that). Week after week, hunting parties went out and brought back animals to eat. The explorers lived on almost nothing but meat.</p>
        <p>And this low-fiber diet had predictable results.</p>
        <p>It had another result, too, which was less predictable — although highly convenient for later historians. The fact is, mercury chloride is only slightly soluble in human digestion. Plus, the reason it works is, it irritates the tissues of the digestive tract severely, causing the body to expel it just as fast as it possibly can before more damage can be done. So, most of the calomel in any given “bilious pill” gets blown out post-haste in the ensuing “purge.”</p>
        <p>Then, once out of the body and in the earth, it lasts literally for centuries without breaking down or dissolving away.</p>
        <p>So as Lewis and Clark and their crew made their way across the continent, and across Oregon, they were unknowingly depositing a trail of heavy-metal laxatives along the way — a trail that historians and scientists have been able to detect and use to document almost their every, uh, movement.        </p>
        <blockquote>
          <p><br>
            (Sources: Class lecture in History of American Medicine, October 2009, Univ. of Oregon, by Dr. James Mohr; Or Perish in the Attempt: Wilderness Medicine in the Lewis and Clark Expedition, a book by David J. Peck published in 2002 by Farcountry Press; “Following Lewis and Clark’s Trail of Mercurial Laxatives,” an article by Marisa Sloan published in the Jan. 29, 2022, issue of Discover Magazine.)</p>
          <p>TAGS: #Archaeology #HeroicMedicine #DavidPeck #Jalap #Syphilis #CorpsOfDiscovery #BenjaminRush #Humours #Medicine #FrontierDoctors #Galen #FortClatsop #Calomel #MercuryPoisoning #Thunderclappers #Constipation #DrJamesMohr #OregonTrail #DrRush's #BiliousPills #Bile #COLUMBIAgorge #CLATSOPcounty</p>
        </blockquote>

		  
          

          
          

      </section>
<!-- closes "BarBod" -->
    </article> <!-- closes "Bar2" -->
    
		<div>
		    <h5>Background image is a postcard, a hand-tinted photograph of Crown Point and the Columbia Gorge Scenic Highway. Here is a <a href="https://offbeatoregon.com/2407c-1012b.sam-lancaster-columbia-river-highway-101.659.html">link to the Offbeat Oregon article</a> about it, from 2024.</h5>
		    <h5>Scroll sideways to move the article aside for a better view.</h5>
		    
		    <h2>Looking for more?</h2>
            <p>On our <a href="https://offbeatoregon.com/index-all.htm"><strong>Sortable Master Directory</strong></a> you can search by keywords, locations, or historical timeframes. Hover your mouse over the headlines to read the first few paragraphs (or a summary of the story) in a pop-up box.</p>
            <h2>... or ...		    </h2>
		    <p><a href="https://offbeatoregon.com/"><strong>Home</strong></a></p>
		    <p><a href="https://offbeatoregon.com/index-all.htm"><img src="https://offbeatoregon.com/assets-misc/1803.header-image.jpg" alt="Listeners" name="Listeners" width="280" height="279" usemap="#ListenersMap" id="Listeners"></a></p>
	      </div>

    <!-- end .content -->
    
  
    <!-- end .footer -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Linux version of the Procmon Sysinternals tool (129 pts)]]></title>
            <link>https://github.com/microsoft/ProcMon-for-Linux</link>
            <guid>45087748</guid>
            <pubDate>Sun, 31 Aug 2025 22:43:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/microsoft/ProcMon-for-Linux">https://github.com/microsoft/ProcMon-for-Linux</a>, See on <a href="https://news.ycombinator.com/item?id=45087748">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto"><h2 tabindex="-1" dir="auto">Process Monitor for Linux (Preview) <a href="https://dev.azure.com/sysinternals/Tools/_build/latest?definitionId=342&amp;repoName=Sysinternals%2FProcMon-for-Linux&amp;branchName=main" rel="nofollow"><img src="https://camo.githubusercontent.com/6862512e9e97defaaa6e8d2d6a0caf2d0437cafc37156673c4e9e22ba2a00f0a/68747470733a2f2f6465762e617a7572652e636f6d2f737973696e7465726e616c732f546f6f6c732f5f617069732f6275696c642f7374617475732f537973696e7465726e616c732e50726f634d6f6e2d666f722d4c696e75783f7265706f4e616d653d537973696e7465726e616c7325324650726f634d6f6e2d666f722d4c696e7578266272616e63684e616d653d6d61696e" alt="Build Status" data-canonical-src="https://dev.azure.com/sysinternals/Tools/_apis/build/status/Sysinternals.ProcMon-for-Linux?repoName=Sysinternals%2FProcMon-for-Linux&amp;branchName=main"></a></h2><a id="user-content-process-monitor-for-linux-preview-" aria-label="Permalink: Process Monitor for Linux (Preview) " href="#process-monitor-for-linux-preview-"></a></div>
<p dir="auto">Process Monitor (Procmon) is a Linux reimagining of the classic Procmon tool from the Sysinternals suite of tools for Windows.  Procmon provides a convenient and efficient way for Linux developers to trace the syscall activity on the system.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/procmon.gif"><img src="https://github.com/microsoft/ProcMon-for-Linux/raw/main/procmon.gif" alt="Procmon in use" title="Procmon in use" data-animated-image=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation &amp; Usage</h2><a id="user-content-installation--usage" aria-label="Permalink: Installation &amp; Usage" href="#installation--usage"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Requirements</h2><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>OS: Ubuntu 18.04 lts</li>
<li><code>cmake</code> &gt;= 3.14 (build-time only)</li>
<li><code>libsqlite3-dev</code> &gt;= 3.22 (build-time only)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Install Procmon</h2><a id="user-content-install-procmon" aria-label="Permalink: Install Procmon" href="#install-procmon"></a></p>
<p dir="auto">Please see installation instructions <a href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/INSTALL.md">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Build Procmon</h2><a id="user-content-build-procmon" aria-label="Permalink: Build Procmon" href="#build-procmon"></a></p>
<p dir="auto">Please see build instructions <a href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/BUILD.md">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="Usage: procmon [OPTIONS]
   OPTIONS
      -h/--help                Prints this help screen
      -p/--pids                Comma separated list of process IDs to monitor
      -e/--events              Comma separated list of system calls to monitor
      -c/--collect [FILEPATH]  Option to start Procmon in a headless mode
      -f/--file FILEPATH       Open a Procmon trace file
      -l/--log FILEPATH        Log debug traces to file"><pre>Usage: procmon [OPTIONS]
   OPTIONS
      -h/--help                Prints this help screen
      -p/--pids                Comma separated list of process IDs to monitor
      -e/--events              Comma separated list of system calls to monitor
      -c/--collect [FILEPATH]  Option to start Procmon in a headless mode
      -f/--file FILEPATH       Open a Procmon trace file
      -l/--log FILEPATH        Log debug traces to file</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Examples</h3><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto">The following traces all processes and syscalls on the system:</p>

<p dir="auto">The following traces processes with process id 10 and 20:</p>

<p dir="auto">The following traces process 20 only syscalls read, write and open at:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo procmon -p 20 -e read,write,openat"><pre>sudo procmon -p 20 -e read,write,openat</pre></div>
<p dir="auto">The following traces process 35 and opens Procmon in headless mode to output all captured events to file <code>procmon.db</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo procmon -p 35 -c procmon.db"><pre>sudo procmon -p 35 -c procmon.db</pre></div>
<p dir="auto">The following opens a Procmon <code>tracefile</code>, <code>procmon.db</code>, within the Procmon TUI:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo procmon -f procmon.db"><pre>sudo procmon -f procmon.db</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Feedback</h2><a id="user-content-feedback" aria-label="Permalink: Feedback" href="#feedback"></a></p>
<ul dir="auto">
<li>Ask a question on Stack Overflow (tag with ProcmonForLinux)</li>
<li>Request a new feature on GitHub</li>
<li>Vote for popular feature requests</li>
<li>File a bug in GitHub Issues</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">If you are interested in fixing issues and contributing directly to the code base, please see the <a href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/CONTRIBUTING.md">document How to Contribute</a>, which covers the following:</p>
<ul dir="auto">
<li>How to build and run from the source</li>
<li>The development workflow, including debugging and running tests</li>
<li>Coding Guidelines</li>
<li>Submitting pull requests</li>
</ul>
<p dir="auto">Please see also our <a href="https://github.com/microsoft/ProcMon-for-Linux/blob/main/CODE_OF_CONDUCT.md">Code of Conduct</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Copyright (c) Microsoft Corporation. All rights reserved.</p>
<p dir="auto">Licensed under the MIT License.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[We should have the ability to run any code we want on hardware we own (1353 pts)]]></title>
            <link>https://hugotunius.se/2025/08/31/what-every-argument-about-sideloading-gets-wrong.html</link>
            <guid>45087396</guid>
            <pubDate>Sun, 31 Aug 2025 21:46:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hugotunius.se/2025/08/31/what-every-argument-about-sideloading-gets-wrong.html">https://hugotunius.se/2025/08/31/what-every-argument-about-sideloading-gets-wrong.html</a>, See on <a href="https://news.ycombinator.com/item?id=45087396">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main"><article>
  
  <div><p>Sideloading has been a hot topic for the last decade. Most recently, Google has <a href="https://9to5google.com/2025/08/25/android-apps-developer-verification/">announced</a> further restrictions on the practice in Android. Many hundreds of comment threads have discussed these changes over the years. One point in particular is always made: “I should be able to run whatever code I want on hardware I own”. I agree entirely with this point, but within the context of this discussion it’s moot.</p>

<blockquote>
  <p>“I should be able to run whatever code I want on hardware I own”</p>
</blockquote>

<p>When Google restricts your ability to install certain applications they aren’t constraining what you can do with the hardware you own, they are constraining what you can do using the software they provide with said hardware. It’s through this control of the operating system that Google is exerting control, not at the hardware layer. You often don’t have full access to the hardware either and building new operating systems to run on mobile hardware is impossible, or at least much harder than it should be. This is a separate, and I think more fruitful, point to make. Apple is a better case study than Google here. Apple’s success with iOS partially derives from the tight integration of hardware and software. An iPhone without iOS is a very different product to what we understand an iPhone to be. Forcing Apple to change core tenets of iOS by legislative means would undermine what made the iPhone successful.</p>

<p>You shouldn’t take away from this that I am some stalwart defender of the two behemoths Apple and Google, far from it. However, our critique shouldn’t be of the restrictions in place in the operating systems they provide – rather, it should focus on the ability to truly run any code we want on hardware we own. In this context this would mean having the ability and documentation to build or install alternative operating systems on this hardware. It should be possible to run Android on an iPhone and manufacturers should be required by law to provide enough technical support and documentation to make the development of new operating systems possible. If you want to play Playstation games on your PS5 you must suffer Sony’s restrictions, but if you want to convert your PS5 into an emulator running Linux that should be possible.</p>

</div>
  
    
</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What to do with C++ modules? (195 pts)]]></title>
            <link>https://nibblestew.blogspot.com/2025/08/we-need-to-seriously-think-about-what.html</link>
            <guid>45086210</guid>
            <pubDate>Sun, 31 Aug 2025 19:22:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nibblestew.blogspot.com/2025/08/we-need-to-seriously-think-about-what.html">https://nibblestew.blogspot.com/2025/08/we-need-to-seriously-think-about-what.html</a>, See on <a href="https://news.ycombinator.com/item?id=45086210">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-3421824919025258501" itemprop="description articleBody">
<p><i><b>Note:</b> Everything that follows is purely my personal opinion as an individual. It should not be seen as any sort of policy of the Meson build system or any other person or organization. It is also not my intention to throw anyone involved in this work under a bus. Many people have worked to the best of their abilities on C++ modules, but that does not mean we can't analyze the current situation with a critical eye.</i></p><p>The lead on this post is a bit pessimistic, so let's just get it out of the way.</p><blockquote><p>If C++ modules can not show a 5× compilation time speedup (preferably 10×) on multiple existing open source code base, modules should be killed and taken out of the standard. Without this speedup pouring any more resources into modules is just feeding the sunk cost fallacy.&nbsp;</p></blockquote><p>That seems like a harsh thing to say for such a massive undertaking that promises to make things so much better. It is not something that you can just belt out and then mic drop yourself out. So let's examine the whole thing in unnecessarily deep detail. You might want to grab a cup of <span>$beverage</span> before continuing, this is going to take a while.</p><h2>What do we want?</h2><p>For the average developer the main visible advantages would be the following, ordered from the most important to the least.</p><ol><li>Much faster compilation times.</li></ol><p>If you look at old presentations and posts from back in the day when modules were voted in (approximately 2018-2019), this is the big talking point. This makes perfect sense, as the "header inclusion" way is an <i>O(N²) </i>algorithm and parsing C++ source code is slow. Splitting the code between source and header files is busywork one could do without. The core idea behind modules is that if you can store the "headery" bit in a preprocessed binary format that can be loaded from disk, things become massively faster.</p><p>Then, little by little, build speed seems to fall by the wayside and the focus starts shifting towards "build isolation". This means avoiding bugs caused by things like macro leakage, weird namespace lookup issues and so on. Performance is still kind of there, but the numbers are a lot smaller, spoken aloud much more rarely and often omitted entirely. Now, getting rid of these sorts of bugs is fundamentally a good thing. However it might not be the most efficient use of resources. Compiler developer time is, sadly, a zero sum game so we should focus their skills and effort on things that provide the best results.</p><p>Macro leakage and other related issues are&nbsp;<i>icky</i>&nbsp;but they are on average fairly rare. I have encountered a bug caused by them maybe once or twice a year. They are just not that common for the average developer. Things are probably different for people doing deep low level metaprogramming hackery, but they are a minuscule fraction of the total developer base. On the other hand slow build times are the bane of existence of <i>every single</i>&nbsp;C++ developer <i>every single</i>&nbsp;day. It is, without question, the narrowest bottleneck for developer productivity today and is the main issue modules were designed to solve. They don't seem to be doing that nowadays.</p><h2>How did we end up here in the first place?</h2><p>C++ modules were a C++ 20 feature. If a feature takes over five years of implementation work to get even somewhat working, you might ponder how it was accepted in the standard in the first place. As I was not there when it happened, I do not really know. However I have spoken to people who were present at the actual meetings where things were discussed and voted on. Their comments have been enlightening to say the least.</p><p>Apparently there were people who knew about the implementation difficulty and other fundamental problems and were quite vocal that modules as specified are borderline unimplementable. They were shot down by a group of "higher up" people saying that "modules are such an important feature that we <b>absolutely must</b> have them in C++ 20".</p><p>One person who was present told me: "that happened seven years ago [there is a fair bit of lead time in ISO standards] and [in practice] we still have nothing. In another seven years, if we are very lucky, we might have something that sort of works".</p><h2>The integration task from hell</h2><p>What sets modules apart from almost all other features is that they require very tight integration between compilers and build systems. This means coming up with schemes for things like what do module files actually contain, how are they named, how are they organized in big projects, how to best divide work between the different tools. Given that the ISO standard does not even acknowledge the fact that source code might reside in a file, none of this is in its purview. It is not in anybody's purview.</p><p>The end result of all that is that everybody has gone in their own corner, done the bits that are the easiest for them and hoping for the best. To illustrate how bad things are, I have been in discussions with compiler developers about this. In said discussion various avenues were considered on how to get things actually working, but one compiler developer replied "we do not want to turn the compiler into a build system" to <i>every single proposal, no matter what it was</i>. The experience was not unlike talking to a brick wall. My guess is that the compiler team in question did not have resources to change their implementation so vetoing everything became the sensible approach for them (though not for the module world in general).</p><p>The last time I looked into adding module support to Meson, things were so mind-bogglingly terrible, that you needed to create, during compilation time, additional compiler flags, store them in temp files and pass them along to compilation commands. <a href="https://nibblestew.blogspot.com/2023/12/even-more-breakage-in-c-module-world.html">I wish I was kidding but I am not</a>. It's quite astounding that the module work started basically from Fortran modules, which are simple and work (in production even), and ended up in their current state, a kafkaesque nightmare of complexity which does not work.</p><p>If we look at the whole thing from a project management viewpoint, the reason for this failure is fairly obvious. This is a big change across multiple isolated organizations. The only real way to get those done is to have a product owner who a) is extremely good at their job b) is tasked with and paid to get the thing done properly c) has sufficient stripes to give orders to the individual teams and d) has no problems slapping people on metaphorical wrists if they try to weasel out of doing their part.</p><p>Such a person does not exist in the modules space. It is arguable whether such a person could exist even in theory. Because of this modules can never become good, which is a reasonable bar to expect a foundational piece of technology to reach.</p><h2>The design that went backwards</h2><p>If there is one golden rule of software design, it is "Do not do a grand design up front". This is mirrored in the C++ committee's guideline of "standardize existing practice".</p><p>C++ modules may be the grandest up-frontest design the computing world has ever seen. There were no implementations (one might argue there still aren't, but I digress), no test code, no prototypes, nothing. Merely a strong opinion of "we need this and we need it yesterday".</p><p>For the benefit of future generations, one better way to approach the task would have gone something like this. First you implement enough in the compiler to be able to produce one module file and then consume it in a different compilation unit. Keep it as simple as possible. It's fine to only serialize a subset of functionality and error out if someone tries to go outside the lines. Then take a build system that runs that. Then expand that to support a simple project, say, one that has ten source files and produces one executable. Implement features in the module file until you can compile the whole thing. Then measure the output. If you do not see performance increases, stop further development until you either find out why that is or you can fix your code to work better. Now you update the API so that no part of the integration makes people's eyes bleed of horror. Then scale the prototype to handle project with 100 sources. Measure again. Improve again. Then do two 100 source pairs, one that produces a library and one that creates an executable that uses the library. Measure again. Improve again. Then do 1000 sources in 10 subprojects. Repeat.</p><p>If the gains are there, great, now you have base implementation that has been proven to work with real world code and which can be expanded to a full implementation. If the implementation can't be made fast and clean, that is a sign that there is a fundamental design flaw somewhere. Throw your code away and either start from scratch or declare the problem too difficult and work on something else instead.</p><p>Hacking on an existing C++ compiler is really difficult and it takes months of work to even get started. If someone wants to try to work on modules but does not want to dive into compiler development, I have implemented a "<a href="https://nibblestew.blogspot.com/2024/01/c-module-tooling-emulator-playground.html">module playground</a>", which consists of a fake C++ compiler, a fake build system and a fake module scanner all in ~300 lines of Python.</p><h2>The promise of import std</h2><p>There is a second way of doing modules in an iterative fashion and it is actually being pursued by C++ implementers, namely <span>import std</span>. This is a very good approach in several different ways. First of all, the most difficult part of modules is the way compilations must be ordered. For the standard library this is not an issue, because it has no dependencies and you can generate all of it in one go. The second thing is the fact that most of the slowness of most of C++ development comes from the standard library. For reference, merely doing an <span>#include&lt;vector&gt;</span> brings in 27 000 lines of code and that is fairly small amount compared to many other common headers.</p><p>What sort of an improvement can we expect from this on real world code bases? Implementations are still in flux, so let's estimate using information we have. The way <span>import std</span> is used depends on the compiler but roughly:</p><ol><li>Replace all <span>#include</span> statements for standard library headers with <span>import std</span>.</li><li>Run the compiler in a special mode.</li><li>The compiler parses headers of the standard library and produces some sort of a binary representation of them</li><li>The representation is written to disk.</li><li>When compiling normally, add compiler flags that tell the compiler to load the file in question before processing actual source code</li></ol><p>If you are thinking "wait a minute, if we remove step #1, this is exactly how precompiled headers work", you are correct. Conceptually it is pretty much the same and I have been told (but have not verified myself) that in GCC at least module files are just repurposed precompiled headers with all the same limitations (e.g. you must use all the same compiler flags to use a module file as you did when you created it).</p><p>Barring a major breakthrough in compiler data structure serialization, the expected speedup should be roughly equivalent to the speedup you get from precompiled headers. Which is to say, maybe 10-20% with Visual Studio and a few percentage points on Clang and GCC. OTOH if such a serialization improvement has occurred, it could probably be adapted to be usable in precompiled headers, too. Until someone provides verifiable measurements proving otherwise, we must assume that is the level of achievable improvement.</p><p>For reference, <a href="https://www.reddit.com/r/cpp/comments/1hv0yl6/success_stories_about_compilation_time_using/">here is a Reddit thread</a> where people report improvements in the 10-20% range.</p><h2>But why 5×?</h2><p>A reasonable requirement for the speedup would be "better than can be achieved using currently available tools and technologies". As an experiment I wrote a custom standard library (not API compatible with the ISO one on purpose) whose main design goal was to be fast to compile. I then took an existing library, converted that to use the new library and measured. The code compiled four times faster. In addition the binary it produced was smaller and, unexpectedly, ran faster. Details can be found <a href="https://nibblestew.blogspot.com/2025/06/a-custom-c-standard-library-part-4.html">in this blog post</a>.</p><p>Given that 4× is already achievable (though, granted, only tested on one project, not proven in general), 5× seems like a reasonable target.</p><h2>But what's in it for <i>you</i>?</h2><p>The C++ standard committee has done a lot of great (and highly underappreciated) work to improve the language. On several occasions Herb Sutter has presented new functionality with "all you have to do is to recompile your code with a new compiler and the end result runs faster and is safer". It takes a ton of work to get these kinds of results, and it is exactly where you want to be.</p><p>Modules are not there. In fact they are in the exact opposite corner.</p><p>Using modules brings with it the following disadvantages:</p><ol><li>Need to rewrite (possibly refactor) your code.</li><li>Loss of portability.</li><li>Module binary files (with the exception of MSVC) are not portable so you need to provide header files for libraries in any case.</li><li>The project build setup becomes more complicated.</li><li>Any toolchain version except the newest one does not work (at the time of writing Apple's module support is listed as "<a href="https://en.cppreference.com/w/cpp/compiler_support.html">partial</a>")<br></li></ol><p>In exchange for all this you, the regular developer-about-town, get the following advantages:</p><ol><li>Nothing.</li></ol><br>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Eternal Struggle (553 pts)]]></title>
            <link>https://yoavg.github.io/eternal/</link>
            <guid>45086020</guid>
            <pubDate>Sun, 31 Aug 2025 19:04:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://yoavg.github.io/eternal/">https://yoavg.github.io/eternal/</a>, See on <a href="https://news.ycombinator.com/item?id=45086020">Hacker News</a></p>
<div id="readability-page-1" class="page">
  
  
  <div id="main"><p><a id="theme" href="#" onclick="changeBackground()">change background</a></p></div>



</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Code Is Debt (109 pts)]]></title>
            <link>https://tornikeo.com/code-is-debt/</link>
            <guid>45085318</guid>
            <pubDate>Sun, 31 Aug 2025 17:58:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tornikeo.com/code-is-debt/">https://tornikeo.com/code-is-debt/</a>, See on <a href="https://news.ycombinator.com/item?id=45085318">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

  

  <article>
    <p>“Tornike, what do you think of AI coding tools?”</p>

<p>I like to answer this frequent question by way of an example. An example of two companies. It goes something like this:</p>

<p>Imagine two very similar companies. Both companies generate similar revenue and produce a similar software product. The only difference between these companies is that Company A uses 1 million lines of code and Company B uses 100 thousand lines of code. Which company is <em>better off</em>?</p>

<p>Clearly, the company with fewer lines of code is better off. They have fewer lines of code and so they can understand and modify their code more quickly. All other things being equal, less code is better. Put another way code is a form of debt. If you use an AI to generate code, you are effectively getting a debt – a debt of code.</p>

<p>Is it worth going into code debt? It depends. Debt can be both good or bad, it might have interest or be interest-free. Debt can also allow faster growth or it can cause your project to <a href="https://www.bbc.com/news/articles/ce87rer52k3o" target="_blank" rel="noopener noreferrer">implode</a>. In all cases it is important to have easy access to these debt-generating tools. It is still up to you to generate the code debt responsibly.</p>

<p><em>Thanks to <a href="https://www.linkedin.com/in/anitalakhadze/" target="_blank" rel="noopener noreferrer">Ani Talakhadze</a> for reading drafts of this</em></p>

  </article>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How is Ultrassembler so fast? (109 pts)]]></title>
            <link>https://jghuff.com/articles/ultrassembler-so-fast/</link>
            <guid>45085156</guid>
            <pubDate>Sun, 31 Aug 2025 17:42:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jghuff.com/articles/ultrassembler-so-fast/">https://jghuff.com/articles/ultrassembler-so-fast/</a>, See on <a href="https://news.ycombinator.com/item?id=45085156">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
<p>
  How is Ultrassembler so fast?
</p>
<p>Published 2025-08-30</p>
<p><a href="https://github.com/Slackadays/Chata/tree/main/ultrassembler">Ultrassembler</a> is a superfast and complete RISC-V assembler library that I'm writing as a component of the bigger <a href="https://github.com/Slackadays/Chata">Chata signal processing</a> project. </p>
<p>Assemblers take in a platform-dependent assembly language and output that platform's native machine code which runs directly on the processor.</p>
<p><img src="https://jghuff.com/RISC-V-assembly-safe.svg" alt="Infographic showing the RISC-V assembly process for addi"></p>
<p><span>"Why would you want to do this?"</span> you might ask. First, existing RISC-V assemblers that conform the the entirety of the specification, <code>as</code> and <code>llvm-mc</code>, ship as binaries that you run as standalone programs. This is normally not an issue. However, in Chata's case, it needs to access a RISC-V assembler from within its C++ code. The alternative is to use some ugly C function like <code>system()</code> to run external software as if it were a human or script running a command in a terminal. </p>
<p>Here's an example of what I'm talking about:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>#include </span><span>&lt;</span><span>iostream</span><span>&gt;
</span><span>#include </span><span>&lt;</span><span>string</span><span>&gt;
</span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt;
</span><span>
</span><span>int </span><span>main</span><span>() {
</span><span>    std::string command = "</span><span>riscv64-linux-gnu-as code.s -o code.bin</span><span>";
</span><span>
</span><span>    </span><span>int</span><span> res = std::</span><span>system</span><span>(command.</span><span>data</span><span>());
</span><span>
</span><span>    </span><span>if </span><span>(res != </span><span>0</span><span>) {
</span><span>        std::cerr &lt;&lt; "</span><span>Error executing command: </span><span>" &lt;&lt; command &lt;&lt; std::endl;
</span><span>    }
</span><span>    </span><span>return</span><span> res;
</span><span>}
</span></code></pre>
<p>It gets even worse once you realize you need temporary files and possibly have to artisanally craft the command beforehand. Additionally, invoking the assembler in this manner incurs a significant performance overhead on embedded systems which lack significant processing power. There must be a better way. </p>
<p>Enter Ultrassembler.</p>
<p>With these two goals of speed and standard conformance in mind, I wrote Ultrassembler as a completely standalone library with GNU <code>as</code> as the speed and standard conformity benchmark. </p>
<p>The results are nothing short of staggering. </p>
<p>After months of peformance optimization, Ultrassembler can assemble a test file with about 16 thousand RISC-V instructions over 10 times faster than <code>as</code>, and around 20 times faster than <code>llvm-mc</code>. To put it another way, it only takes about 1000 CPU instructions (+-50% depending on platform) to assemble one RISC-V instruction, while it takes 10,000 for <code>as</code> and 20,000 for <code>llvm-mc</code>. This happens with plain old C++ code only and no platform-specific assembly code, although integrating assembly could crank up the speed even further.</p>
<p>Such performance ensures a good user experience on the platforms where Chata runs, but also as a consequence of this lack of overhead, you could also combine Ultrassembler with fantastic libraries like <a href="https://github.com/libriscv/libriscv">libriscv</a> to implement low-to-no-cost RISC-V scripting in things like games, or maybe even in your JIT programming language!</p>
<p>Let's look at some of the ways I made Ultrassembler this fast so that you can reap the benefits too.</p>
<p><span>WARNING!</span> &nbsp; The code you're about to see here is only current as of this article's publishing. The actual code Ultrassembler uses could be different by the time you read this in the future!</p>
<h2 id="exceptions">Exceptions</h2>
<p>Exceptions, C++'s first way of handling errors, are slow. Super duper slow. Mega slow. So slow, in fact, that many Programming Furus©️®️™️ say you should never ever use them. They'll infect your code with their slowness and transform you into a slow old hunchback in no time. </p>
<p>Or so you would think.</p>
<p>C++ exceptions, despite being so derided, are in fact zero-overhead. Huh? Didn't I just say they were super duper slow? Let me explain.</p>
<p>It's not clear when exactly exceptions are slow. I had to do some research here. As it turns out, GCC's <code>libstdc++</code> uses a so-called "zero-overhead" exception system, meaning that in the ideal normal case where the C++ code calls zero exceptions, there is zero performance penalty. But when it does call an exception, it could become very slow depending on how the code is laid out. Most programmers, not knowing this, frequently use exceptions in their normal cases, and as a result, their programs are slow. Such mysterious behavior caught the attention of Programming Furus©️®️™️ and has made exceptions appear somewhat of a curse.</p>
<p>This tragic curse turns out to be a heavenly blessing for Ultrassembler. In the normal case, there are zero errors to report as a result of proper usage of RISC-V instructions. But if there's some error somewhere, say somebody put in the wrong register, then Ultrassembler sounds the alarm. Since such mistakes only occur as a result of human error (ex bugs in codegen and Ultrassembler itself) the timeframe in which to report the error can expand to that of a human. As a result, even if an exception triggered by a mistake took a full 1 second (about a million times slower than it does in reality), it doesn't matter because the person percepting the error message can only do so in approximately that second timeframe.</p>
<p><span>"But hold on!"</span> you exclaim. <span>"What about std::expected?"</span> In response to some programs which frequently need to handle errors not seen by humans, C++ added a system to reduce the overhead of calling errors, <code>std::expected</code>. I tried this in Ultrassembler and the results weren't pretty. It trades off exception speed for normal case speed. Since the normal case is the norm in Ultrassembler, <code>std::expected</code> incurred at least a 10% performance loss due to the way the <code>std::expected</code> object wraps two values (the payload and the error code) together. <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2544r0.html">See this C++ standard document for the juicy details.</a></p>
<p>The end result of the use of exceptions is that there is zero performance penalty to optimize out.</p>
<h2 id="fast-data-structures">Fast data structures</h2>
<p>Between all of the RISC-V instruction set extensions, there are 2000+ individual "instructions" (many instructions are identical to one another with a slight numerical change). There are also hundreds of CSRs and just under a hundred registers. This requires data structures large enough to store the properties of thousands of entries. How do you do that? It's tricky. So, how about I just show you what Ultrassembler uses as of this writing:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>struct </span><span>rvregister {
</span><span>    RegisterType type; </span><span>//1B
</span><span>    RegisterID id; </span><span>//1B
</span><span>    uint8_t encoding;
</span><span>    uint8_t padding;
</span><span>};
</span><span>
</span><span>const</span><span> std::array&lt;rvregister, </span><span>96</span><span>&gt; registers;
</span><span>
</span><span>struct </span><span>rvinstruction {
</span><span>    RVInstructionID id; </span><span>//2B
</span><span>    RVInstructionFormat type; </span><span>//1B
</span><span>    uint8_t opcode;
</span><span>    uint16_t funct;
</span><span>    RVInSetMinReqs setreqs; </span><span>//1B
</span><span>    rreq regreqs = reg_reqs::any_regs; </span><span>//1B
</span><span>    special_snowflake_args ssargs = </span><span>special_snowflake_args</span><span>(); </span><span>//2B
</span><span>};
</span><span>
</span><span>// We use a strong typedef to define both rreq and ssflag, but the underlying is a uint8_t in both cases
</span><span>
</span><span>namespace </span><span>ssarg {
</span><span>
</span><span>constexpr</span><span> ssflag get_imm_for_rs = </span><span>ssflag</span><span>(</span><span>0b00000001</span><span>);
</span><span>constexpr</span><span> ssflag use_frm_for_funct3 = </span><span>ssflag</span><span>(</span><span>0b00000010</span><span>);
</span><span>constexpr</span><span> ssflag special_handling = </span><span>ssflag</span><span>(</span><span>0b00000100</span><span>);
</span><span>constexpr</span><span> ssflag swap_rs1_rs2 = </span><span>ssflag</span><span>(</span><span>0b00001000</span><span>);
</span><span>constexpr</span><span> ssflag use_funct_for_imm = </span><span>ssflag</span><span>(</span><span>0b00010000</span><span>);
</span><span>constexpr</span><span> ssflag no_rs1 = </span><span>ssflag</span><span>(</span><span>0b00100000</span><span>);
</span><span>constexpr</span><span> ssflag has_custom_reg_val = </span><span>ssflag</span><span>(</span><span>0b01000000</span><span>);
</span><span>
</span><span>}
</span><span>
</span><span>struct </span><span>special_snowflake_args {
</span><span>    uint8_t custom_reg_val = </span><span>0</span><span>;
</span><span>    ssflag flags; </span><span>//1B
</span><span>};
</span><span>
</span><span>const</span><span> std::array&lt;rvinstruction, </span><span>2034</span><span>&gt; instructions;
</span></code></pre>
<p>Let's go over what each <code>struct</code> does.</p>
<h2 id="rvregister"><code>rvregister</code></h2>
<p><code>rvregister</code> is how Ultrassembler stores the data for all the RISC-V registers. What describes a register? You have its friendly name (like x0 or v20), an alias (like zero or fa1), what kind of register it is (integer, float, or vector?), and what raw encoding it looks like in instructions. You can get away with single bytes to represent the type and encoding. And, that's what we use here to keep data access simple. You could squeeze everything into one or two bytes through clever bitmasking, but after doing so, I couldn't find much of a speedup. This could be situational and so you should not dismiss such a trick.</p>
<p>Why not store the name and alias strings? Ultrassembler does not actually reference the name nor the alias anywhere in its code. Why? Strings are very expensive. This fact is not obvious if you have not made software at the level of Ultrassembler, where string comparison and manipulation grind computation to a crawl. So we just don't use strings anywhere. In spite of this, the initializers of <code>const std::array&lt;rvregister, 96&gt; registers</code> do contain both the name and alias, but the constructors silently discard these data. Such inclusion enables external scripts to look at the array and generate code around it. We'll look at that in the next section. But for now, know that we hate strings.</p>
<h2 id="rvinstruction"><code>rvinstruction</code></h2>
<p><code>rvinstruction</code> follows a similar idea, with the biggest differences being that it's much bigger, 2000+ entries versus 96, and that there is more information to store per entry. This necessitates some extra memory saving magic because there are so many different instructions. We first need an ID for each instruction to do specific checks if needed. We have almost more than 2048 instructions (subject to future expansion) but less than 4196, so we'll need 2 bytes. There are fewer than 256 "types" of instructions (R, I, S, B, U, J, etc.), so 1 byte is good. Same idea with all the other fields. Similarly to <code>rvregister</code>, it would be possible to use bitmasking to compress everything, but this might not result in a significant speedup.</p>
<h2 id="special-snowflake-args"><code>special_snowflake_args</code></h2>
<p>In RISC-V, many instructions require special attention because they have a special encoding, do something special, or are otherwise different from the rest of the herd. To avoid hardcoding behavior handling as much as possible, <code>special_snowflake_args</code> encodes specific properties that many of these special instructions share, such as getting an immediate value instead of a register, swapping the <code>rs1</code> and <code>rs2</code> registers (or <code>vs1</code> and <code>vs2</code>), or omitting a register entirely. We can encode all these properties in a binary way so we use a custom bitmask system to save all the properties in a single byte. <code>custom_reg_val</code>, however, is a separate 1-byte field because registers use 5 bits, and only exists in tandem with <code>has_custom_reg_val</code>.</p>
<p>All together, we are able to use only 20kB of memory to save all the instructions, not withstanding future entries. This fits nicely into many CPU data caches.</p>
<h2 id="preallocated-memory-pools">Preallocated memory pools</h2>
<p>In C++, by default, containers that dynamically allocate memory do so through the heap. The underlying OS provides the heap through assignment of a certain section of its virtual memory to the program requesting the heap memory. Heap allocation happens transparently most of the time. Unfortunately for us, it matters where exactly that memory is. Memory located far away from everything else (often the case with heap memory) unnecessarily clogs up the CPU's memory cache. Additionally, in C++, requesting that heap memory also requires a syscall every time the container geometrically changes size (roughly speaking, 1B -&gt; 2B -&gt; 4B -&gt; 8B -&gt; ... -&gt; 1MB). Syscalls drastically slow down code execution (more so than yo mama is big) because the OS needs to save all the registers, swap in the kernel's, and run the kernel code, all while clogging up the CPU cache again. Therefore, we need a way to allocate memory close to our variables with zero syscalls. </p>
<p>The solution? </p>
<p>Preallocated memory pools.</p>
<p>C++ offers a totally neato way to use the containers you know and love with a custom crafted memory allocator of your choice. </p>
<p>Here's how Ultrassembler does it.</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>constexpr </span><span>size_t memory_pool_size = </span><span>33554432</span><span>;
</span><span>
</span><span>template </span><span>&lt;</span><span>class</span><span> T&gt;
</span><span>class </span><span>MemoryBank</span><span>;
</span><span>
</span><span>typedef</span><span> std::basic_string&lt;</span><span>char</span><span>, std::char_traits&lt;</span><span>char</span><span>&gt;, MemoryBank&lt;</span><span>char</span><span>&gt;&gt; ultrastring;
</span><span>
</span><span>template </span><span>&lt;</span><span>typename</span><span> T&gt;
</span><span>using </span><span>ultravector = std::vector&lt;T, MemoryBank&lt;T&gt;&gt;;
</span><span>
</span><span>class </span><span>GlobalMemoryBank </span><span>{
</span><span>    </span><span>inline static</span><span> std::array&lt;std::byte, memory_pool_size&gt; pool;
</span><span>    </span><span>inline static </span><span>size_t used </span><span>= </span><span>0</span><span>; 
</span><span>    </span><span>inline static long</span><span> pagesize </span><span>= </span><span>sysconf</span><span>(_SC_PAGE_SIZE); </span><span>// This only happens once :)
</span><span>
</span><span>public</span><span>:
</span><span>    </span><span>void</span><span>* </span><span>grab_some_memory</span><span>(size_t </span><span>requested</span><span>);
</span><span>
</span><span>    </span><span>void </span><span>reset</span><span>();
</span><span>}</span><span>;
</span><span>
</span><span>extern</span><span> GlobalMemoryBank memory_bank;
</span><span>
</span><span>template </span><span>&lt;</span><span>class</span><span> T&gt;
</span><span>class </span><span>MemoryBank </span><span>{
</span><span>public</span><span>:
</span><span>    </span><span>using </span><span>value_type </span><span>=</span><span> T;
</span><span>
</span><span>    </span><span>MemoryBank</span><span>() </span><span>= </span><span>default</span><span>;
</span><span>
</span><span>    [[nodiscard]] T</span><span>* </span><span>allocate</span><span>(size_t requested) {
</span><span>        std::size_t bytes </span><span>=</span><span> requested </span><span>* sizeof</span><span>(T);
</span><span>        </span><span>return </span><span>reinterpret_cast</span><span>&lt;T</span><span>*</span><span>&gt;(memory_bank.</span><span>grab_some_memory</span><span>(bytes));
</span><span>    }
</span><span>
</span><span>    </span><span>void </span><span>deallocate</span><span>(T</span><span>* </span><span>ptr</span><span>, size_t </span><span>requested</span><span>) { </span><span>return</span><span>; }
</span><span>
</span><span>    </span><span>bool </span><span>operator==</span><span>(</span><span>const</span><span> MemoryBank</span><span>&amp;</span><span>) </span><span>const </span><span>{ </span><span>return </span><span>true</span><span>; }
</span><span>}</span><span>;
</span><span>
</span><span>// In another file...
</span><span>
</span><span>void</span><span>* GlobalMemoryBank::</span><span>grab_some_memory</span><span>(size_t </span><span>requested</span><span>) {
</span><span>    </span><span>if </span><span>(requested + used &gt; pool.</span><span>size</span><span>()) {
</span><span>        </span><span>throw </span><span>UASError</span><span>(OutOfMemory, "</span><span>Out of memory!</span><span>");
</span><span>    }
</span><span>    </span><span>void</span><span>* ptr = reinterpret_cast&lt;</span><span>void</span><span>*&gt;(pool.</span><span>data</span><span>() + used);
</span><span>    used += requested;
</span><span>    </span><span>return</span><span> ptr;
</span><span>}
</span><span>
</span><span>void </span><span>GlobalMemoryBank::</span><span>reset</span><span>() {
</span><span>    used = </span><span>0</span><span>;
</span><span>}
</span></code></pre>
<p>Let's go through this section by section.</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>constexpr </span><span>size_t memory_pool_size = </span><span>33554432</span><span>;
</span><span>
</span><span>template </span><span>&lt;</span><span>class</span><span> T&gt;
</span><span>class </span><span>MemoryBank</span><span>;
</span><span>
</span><span>typedef</span><span> std::basic_string&lt;</span><span>char</span><span>, std::char_traits&lt;</span><span>char</span><span>&gt;, MemoryBank&lt;</span><span>char</span><span>&gt;&gt; ultrastring;
</span><span>
</span><span>template </span><span>&lt;</span><span>typename</span><span> T&gt;
</span><span>using </span><span>ultravector = std::vector&lt;T, MemoryBank&lt;T&gt;&gt;;
</span></code></pre>
<p>This is boilerplate defining <em>how big our memory pool is</em> (in bytes), declaring <em>the regular memory pool class</em> (annoying!), what our <em>special memory pool string</em> is an alias of (a standard string but with the regular memory pool allocator), and the same creation of <em>a vector using the regular memory pool</em>.</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>class </span><span>GlobalMemoryBank </span><span>{
</span><span>    </span><span>inline static</span><span> std::array&lt;std::byte, memory_pool_size&gt; pool;
</span><span>    </span><span>inline static </span><span>size_t used </span><span>= </span><span>0</span><span>;
</span><span>    </span><span>inline static long</span><span> pagesize </span><span>= </span><span>sysconf</span><span>(_SC_PAGE_SIZE);
</span><span>
</span><span>public</span><span>:
</span><span>    </span><span>void</span><span>* </span><span>grab_some_memory</span><span>(size_t </span><span>requested</span><span>);
</span><span>
</span><span>    </span><span>void </span><span>reset</span><span>();
</span><span>}</span><span>;
</span><span>
</span><span>extern</span><span> GlobalMemoryBank memory_bank;
</span></code></pre>
<p>This class defines the <em>memory pool wrapper</em> that the actual allocator uses. Why? This has to do with how C++ uses custom allocators. When you use a container with a custom allocator, each declaration of that container creates a separate instance of that container <em>and the allocator class</em>. Therefore, if you added the memory pool array as a member of this custom allocator class, each declaration of the container would result in separate instantiations of the underlying memory pool object. This is UNACCEPTABLE for Ultrassembler. Therefore, we instead use a helper class that the allocators call to. As a consequence, it allows us to add memory pool functionality controlled independently of the containers through calls to the helper <code>GlobalMemoryBank</code> class in the future.</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>template </span><span>&lt;</span><span>class</span><span> T&gt;
</span><span>class </span><span>MemoryBank </span><span>{
</span><span>public</span><span>:
</span><span>    </span><span>using </span><span>value_type </span><span>=</span><span> T;
</span><span>
</span><span>    </span><span>MemoryBank</span><span>() </span><span>= </span><span>default</span><span>;
</span><span>
</span><span>    [[nodiscard]] T</span><span>* </span><span>allocate</span><span>(size_t requested) {
</span><span>        std::size_t bytes </span><span>=</span><span> requested </span><span>* sizeof</span><span>(T);
</span><span>        </span><span>return </span><span>reinterpret_cast</span><span>&lt;T</span><span>*</span><span>&gt;(memory_bank.</span><span>grab_some_memory</span><span>(bytes));
</span><span>    }
</span><span>
</span><span>    </span><span>void </span><span>deallocate</span><span>(T</span><span>* </span><span>ptr</span><span>, size_t </span><span>requested</span><span>) { </span><span>return</span><span>; }
</span><span>
</span><span>    </span><span>bool </span><span>operator==</span><span>(</span><span>const</span><span> MemoryBank</span><span>&amp;</span><span>) </span><span>const </span><span>{ </span><span>return </span><span>true</span><span>; }
</span><span>}</span><span>;
</span></code></pre>
<p>This is the actual <em>custom allocator</em> object that we pass to C++ containers. The definition of a custom allocator in C++ is simply a class that provides the <code>allocate</code> and <code>deallocate</code> functions publicly. That's literally it. There are in fact more potential functions that you could add to handle specific uses, but <code>allocate</code> and <code>deallocate</code> are all we need for Ultrassembler. We define this class as a template because the return value of the <code>allocate</code> function must match the underlying type of the container using the allocator class. We furthermore define the <code>==</code> operator because C++ requires that two objects using allocators match their allocators. You'll normally never notice this because the default allocator for all C++ containers, <code>std::allocator</code>, provides all the allocator functions and operator comparison functions, and as a result, handles all comparisons transparently. Ultrassembler only uses equality. Finally, we provide a default constructor <code>MemoryBank() = default;</code> as this is what the C++ standard expects too from allocator classes.</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>void</span><span>* GlobalMemoryBank::</span><span>grab_some_memory</span><span>(size_t </span><span>requested</span><span>) {
</span><span>    </span><span>if </span><span>(requested + used &gt; pool.</span><span>size</span><span>()) {
</span><span>        </span><span>throw </span><span>UASError</span><span>(OutOfMemory, "</span><span>Out of memory!</span><span>");
</span><span>    }
</span><span>    </span><span>void</span><span>* ptr = reinterpret_cast&lt;</span><span>void</span><span>*&gt;(pool.</span><span>data</span><span>() + used);
</span><span>    used += requested;
</span><span>    </span><span>return</span><span> ptr;
</span><span>}
</span><span>
</span><span>void </span><span>GlobalMemoryBank::</span><span>reset</span><span>() {
</span><span>    used = </span><span>0</span><span>;
</span><span>}
</span></code></pre>
<p>These functions implement <em>allocating the memory</em> and <em>resetting the memory bank</em>. Allocating should be obvious. However, resetting might not. As it stands, the memory pool simply gives up if it runs out of memory to allocate. We don't deallocate because such an operation would add extra overhead and subjects us to the issue of memory fragementation. Memory fragmentation is when you deallocate a small object from a large area of allocated memory, leaving a small area of unallocated memory laying in the otherwise allocated area. If you want to allocate a new object, tough luck, you probably can't fit it in this small area. You need to wait for the other objects to deallocate first. This cycle continues until your memory usage looks like Swiss cheese and doesn't support allocating any more objects, leading to a system crash. Normally, the OS kernel handles this problem transparently. Linux for example uses a "buddy allocator" to help deal with it. Memory fragmentation is also less of an issue with huge swaths of memory on modern systems. Our memory pool unfortunately lacks those luxuries of large memory and processing power for buddy allocators. Therefore, we provide the <code>reset</code> function to start everything over if the software using Ultrassembler receives an <code>OutOfMemory</code> exception.</p>
<p>Our memory pool trick lets Ultrassembler enjoy optimal memory locality and predefined memory usage while also completely eliminating syscalls (almost) and memory leaks, notwithstanding occasional memory bank resets.</p>
<h2 id="value-speculation">Value speculation</h2>
<p>A while ago, I read <a href="https://mazzo.li/posts/value-speculation.html">this fascinating article on something called L1 value speculation</a>. The basic idea is to free the branch predictor by giving it extra work to do guessing the next value in the linked list. If it's right (usually it is) then you get a free speedup.</p>
<p>Ultrassembler does something similar. Instead of a linked list, we iterate through an array checking for specific combinations of characters that define the end of a sequence to copy. </p>
<pre data-lang="cpp"><code data-lang="cpp"><span>auto</span><span> ch = [&amp;]() {
</span><span>    </span><span>return</span><span> data[i];
</span><span>};
</span><span>
</span><span>volatile char</span><span> preview;
</span><span>while </span><span>(i &lt; data.</span><span>size</span><span>() &amp;&amp; </span><span>not_at_end</span><span>(</span><span>ch</span><span>()) &amp;&amp; !</span><span>is_whitespace</span><span>(</span><span>ch</span><span>())) {
</span><span>    c.</span><span>inst</span><span>.</span><span>push_back</span><span>(</span><span>ch</span><span>());
</span><span>    i++;
</span><span>    preview = </span><span>ch</span><span>();
</span><span>}
</span></code></pre>
<p>As built-in strings in C++ are super duper mega slow even with custom allocators, we spend a lot of time on <code>c.inst.push_back(ch());</code>. There's fortunately a workaround. If the CPU knows that we'll be accessing the next character in the target string, why not queue it up first? This is exactly what <code>volatile char preview;</code> and <code>preview = ch();</code> accomplish. We already have an opportunity for speculation with the <code>i++;</code> and <code>i &lt; data.size();</code>. Although I'm not 100% sure, my hypothesis on why <code>preview</code> provides a speedup is that the branch predictor can only handle <code>i &lt; data.size()</code> and not additionally the character loading of <code>ch()</code>. Therefore, we should preemptively load <code>ch()</code> during <code>c.inst.push_back(ch());</code>. </p>
<p>Eagle eyed readers will notice how there is an opportunity for memory overflow if we are at the end of a string and <code>i++;</code> then <code>preview = ch();</code> loads a character past the string <code>data</code>. However, Ultrassembler accounts for this by preemptively adding an extra null character to the input string <code>data</code> earlier in the code, ensuring that such illegal memory accesses are impossible by definition. </p>
<p>This optimization sped up parsing of the instruction names enough that the overall Ultrassembler performance increased by about 10%.</p>
<h2 id="super-smart-searches">(Super) smart searches</h2>
<p>Here's one weird trick I haven't seen anywhere else.</p>
<p>Imagine I provided you these words: apple, apricot, avocado, and banana. </p>
<p>Now, what if I told you a mystery word I was looking for among the ones I provided was 7 letters long. You would immediately discard "apple" and "banana" because they're not 7 letters long. Now, I tell you that it starts with "a." You wouldn't discard any at this point because both "apricot" and "avocado" start with the letter a. Finally, I tell you that the second letter is "v." Immediately we know "avocado" is the mystery word because no other word remaining starts with "av."</p>
<p>This is the basic idea behind the instruction, register, CSR, and pseudoinstruction lookup systems in Ultrassembler. There's a rub, though. The code for these lookups looks something like this:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>const </span><span>uint16_t </span><span>fast_instr_search</span><span>(</span><span>const</span><span> ultrastring&amp; </span><span>inst</span><span>) {
</span><span>    </span><span>const auto</span><span> size = inst.</span><span>size</span><span>();
</span><span>
</span><span>    </span><span>if </span><span>(size == </span><span>2</span><span>) {
</span><span>        </span><span>if </span><span>(inst[</span><span>0</span><span>] == '</span><span>s</span><span>') {
</span><span>            </span><span>if </span><span>(inst[</span><span>1</span><span>] == '</span><span>d</span><span>') </span><span>return </span><span>44</span><span>;
</span><span>            </span><span>if </span><span>(inst[</span><span>1</span><span>] == '</span><span>w</span><span>') </span><span>return </span><span>17</span><span>;
</span><span>            </span><span>if </span><span>(inst[</span><span>1</span><span>] == '</span><span>b</span><span>') </span><span>return </span><span>15</span><span>;
</span><span>            </span><span>if </span><span>(inst[</span><span>1</span><span>] == '</span><span>h</span><span>') </span><span>return </span><span>16</span><span>;
</span><span>        }
</span><span>        </span><span>if </span><span>(inst[</span><span>0</span><span>] == '</span><span>o</span><span>') {
</span><span>            </span><span>if </span><span>(inst[</span><span>1</span><span>] == '</span><span>r</span><span>') </span><span>return </span><span>35</span><span>;
</span><span>        }
</span><span>        </span><span>if </span><span>(inst[</span><span>0</span><span>] == '</span><span>l</span><span>') {
</span><span>            </span><span>if </span><span>(inst[</span><span>1</span><span>] == '</span><span>d</span><span>') </span><span>return </span><span>43</span><span>;
</span><span>            </span><span>if </span><span>(inst[</span><span>1</span><span>] == '</span><span>w</span><span>') </span><span>return </span><span>12</span><span>;
</span><span>            </span><span>if </span><span>(inst[</span><span>1</span><span>] == '</span><span>b</span><span>') </span><span>return </span><span>10</span><span>;
</span><span>            </span><span>if </span><span>(inst[</span><span>1</span><span>] == '</span><span>h</span><span>') </span><span>return </span><span>11</span><span>;
</span><span>        }
</span><span>    }
</span><span>
</span><span>    </span><span>if </span><span>(size == </span><span>3</span><span>) {
</span><span>        etc...
</span></code></pre>
<p>Clearly, there's a lot of work to do if you've got thousands of entries like the instructions array does. There's a fix for that though! </p>
<p>Enter codegen. </p>
<p>Ultrassembler uses artisan-crafted Python scripts to traverse through the listings and extract the string names for each instruction, register, CSR, and pseudoinstruction. Then, these scripts generate C++ code which performs these precomputed lookups. </p>
<p>Here's what the instruction search script looks like. <span>WARNING!</span> If this script looks ugly, it's because Python is one of the worst programming languages out there for anything more than mere supportive, throwaway software like this.</p>
<pre data-lang="python"><code data-lang="python"><span>input </span><span>= "</span><span>src/instructions.cpp</span><span>"
</span><span>output = "</span><span>src/generated/instruction_search.cpp</span><span>"
</span><span>
</span><span>import </span><span>re
</span><span>
</span><span>content = ""
</span><span>with </span><span>open</span><span>(</span><span>input</span><span>, "</span><span>r</span><span>") </span><span>as </span><span>file:
</span><span>    content = file.</span><span>read</span><span>()
</span><span>
</span><span>regex = "</span><span>(?&lt;={)</span><span>\"</span><span>([\w.]+)</span><span>\"</span><span>"
</span><span>
</span><span>instructions = re.</span><span>findall</span><span>(regex, content)
</span><span>
</span><span>for </span><span>i </span><span>in </span><span>range</span><span>(</span><span>len</span><span>(instructions)):
</span><span>    instructions[i] = (instructions[i], i, </span><span>len</span><span>(instructions[i]))
</span><span>
</span><span>instructions.</span><span>sort</span><span>()
</span><span>
</span><span>print</span><span>(instructions)
</span><span>
</span><span>min_len = </span><span>min</span><span>([i[</span><span>2</span><span>] </span><span>for </span><span>i </span><span>in </span><span>instructions])
</span><span>
</span><span>max_len = </span><span>max</span><span>([i[</span><span>2</span><span>] </span><span>for </span><span>i </span><span>in </span><span>instructions])
</span><span>
</span><span>depth = </span><span>0
</span><span>
</span><span>current_instr = ""
</span><span>
</span><span>code = "</span><span>// SPDX-License-Identifier: MPL-2.0</span><span>\n</span><span>"
</span><span>code += "</span><span>// The generate_instruction_search.py script automatically generated this code. DO NOT MODIFY!</span><span>\n</span><span>"
</span><span>code += "</span><span>#include </span><span>\"</span><span>../instructions.hpp</span><span>\"\n</span><span>"
</span><span>code += "</span><span>#include </span><span>\"</span><span>../ultrassembler.hpp</span><span>\"\n\n</span><span>"
</span><span>code += "</span><span>namespace ultrassembler_internal {</span><span>\n\n</span><span>"
</span><span>code += "</span><span>const uint16_t fast_instr_search(const ultrastring&amp; inst) {</span><span>\n</span><span>"
</span><span>code += "</span><span>    const auto size = inst.size();</span><span>\n\n</span><span>"
</span><span>
</span><span>def </span><span>ind</span><span>():
</span><span>    </span><span>return </span><span>"    " * (depth + </span><span>2</span><span>)
</span><span>
</span><span>def </span><span>instr_exists</span><span>(</span><span>instr</span><span>, </span><span>length</span><span>):
</span><span>    </span><span>for </span><span>i </span><span>in </span><span>instructions:
</span><span>        </span><span>if </span><span>i[</span><span>0</span><span>] == instr and i[</span><span>2</span><span>] == length:
</span><span>            </span><span>return </span><span>True
</span><span>    </span><span>return </span><span>False
</span><span>    
</span><span>def </span><span>prefix_exists</span><span>(</span><span>prefix</span><span>, </span><span>length</span><span>):
</span><span>    </span><span>for </span><span>i </span><span>in </span><span>instructions:
</span><span>        </span><span>if </span><span>i[</span><span>0</span><span>].</span><span>startswith</span><span>(prefix) and i[</span><span>2</span><span>] == length:
</span><span>            </span><span>return </span><span>True
</span><span>    </span><span>return </span><span>False
</span><span>
</span><span>potentialchars = ""
</span><span>
</span><span>for </span><span>instr </span><span>in </span><span>instructions:
</span><span>    </span><span>for </span><span>char </span><span>in </span><span>instr[</span><span>0</span><span>]:
</span><span>        </span><span>if </span><span>char not in potentialchars:
</span><span>            potentialchars += char
</span><span>
</span><span>def </span><span>process_depth</span><span>(</span><span>current_len</span><span>):
</span><span>    </span><span>global </span><span>code, current_instr, depth
</span><span>    </span><span>for </span><span>letter </span><span>in </span><span>potentialchars:
</span><span>        </span><span>if </span><span>instr_exists</span><span>(current_instr + letter, current_len):
</span><span>            code += </span><span>ind</span><span>() + </span><span>f</span><span>"</span><span>if (inst[</span><span>{depth}</span><span>] == '</span><span>{letter}</span><span>') return </span><span>{instructions[[i[</span><span>0</span><span>] </span><span>for </span><span>i </span><span>in </span><span>instructions].</span><span>index</span><span>(current_instr + letter)][</span><span>1</span><span>]}</span><span>;</span><span>\n</span><span>"
</span><span>        </span><span>elif </span><span>prefix_exists</span><span>(current_instr + letter, current_len):
</span><span>            code += </span><span>ind</span><span>() + </span><span>f</span><span>"</span><span>if (inst[</span><span>{depth}</span><span>] == '</span><span>{letter}</span><span>') </span><span>{{\n</span><span>"
</span><span>            current_instr += letter
</span><span>            depth += </span><span>1
</span><span>            </span><span>process_depth</span><span>(current_len)
</span><span>            depth -= </span><span>1
</span><span>            current_instr = current_instr[:-</span><span>1</span><span>]
</span><span>            code += </span><span>ind</span><span>() + "</span><span>}</span><span>\n</span><span>"
</span><span>
</span><span>for </span><span>i </span><span>in </span><span>range</span><span>(min_len, max_len + </span><span>1</span><span>):
</span><span>    code += </span><span>f</span><span>"</span><span>    if (size == </span><span>{i}</span><span>) </span><span>{{\n</span><span>"
</span><span>    </span><span>process_depth</span><span>(i)
</span><span>    code += "</span><span>    }</span><span>\n\n</span><span>"
</span><span>
</span><span>code += "</span><span>    return instr_search_failed;</span><span>\n</span><span>"
</span><span>code += "</span><span>}</span><span>\n\n</span><span>"
</span><span>code += "</span><span>} // namespace ultrassembler_internal</span><span>"
</span><span>
</span><span>print</span><span>(code)
</span><span>
</span><span>with </span><span>open</span><span>(output, "</span><span>w</span><span>") </span><span>as </span><span>file:
</span><span>    file.</span><span>write</span><span>(code)
</span></code></pre>
<p>Let's go through it section by section.</p>
<pre data-lang="python"><code data-lang="python"><span>input </span><span>= "</span><span>src/instructions.cpp</span><span>"
</span><span>output = "</span><span>src/generated/instruction_search.cpp</span><span>"
</span><span>
</span><span>import </span><span>re
</span><span>
</span><span>content = ""
</span><span>with </span><span>open</span><span>(</span><span>input</span><span>, "</span><span>r</span><span>") </span><span>as </span><span>file:
</span><span>    content = file.</span><span>read</span><span>()
</span></code></pre>
<p>This simply tells the script what file to read and where to generate the code, imports the regex package, and reads the input file.</p>
<pre data-lang="python"><code data-lang="python"><span>regex = "</span><span>(?&lt;={)</span><span>\"</span><span>([\w.]+)</span><span>\"</span><span>"
</span><span>
</span><span>instructions = re.</span><span>findall</span><span>(regex, content)
</span><span>
</span><span>for </span><span>i </span><span>in </span><span>range</span><span>(</span><span>len</span><span>(instructions)):
</span><span>    instructions[i] = (instructions[i], i, </span><span>len</span><span>(instructions[i]))
</span><span>
</span><span>instructions.</span><span>sort</span><span>()
</span><span>
</span><span>print</span><span>(instructions)
</span></code></pre>
<p>This regex searches for all instances of quotes in the instruction C++ code. That code looks like this:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>const</span><span> std::array&lt;rvinstruction, </span><span>2034</span><span>&gt; instructions = {
</span><span>        {{"</span><span>lui</span><span>", LUI, U, op_LUI, </span><span>0b000</span><span>, RVI, int_reg},
</span><span>         {"</span><span>auipc</span><span>", AUIPC, U, op_AUIPC, </span><span>0b000</span><span>, RVI, int_reg},
</span><span>         {"</span><span>jal</span><span>", JAL, J, op_JAL, </span><span>0b000</span><span>, RVI, int_reg}, etc...
</span></code></pre>
<p>Then, it creates a new array with the instruction name, what position it is in the array, and its length. This might seem redundant at first, but it's helpful later. We then sort all the insructions alphabetically (also important!) and show all of them for debugging/status purposes.</p>
<pre data-lang="python"><code data-lang="python"><span>min_len = </span><span>min</span><span>([i[</span><span>2</span><span>] </span><span>for </span><span>i </span><span>in </span><span>instructions])
</span><span>
</span><span>max_len = </span><span>max</span><span>([i[</span><span>2</span><span>] </span><span>for </span><span>i </span><span>in </span><span>instructions])
</span><span>
</span><span>depth = </span><span>0
</span><span>
</span><span>current_instr = ""
</span><span>
</span><span>code = "</span><span>// SPDX-License-Identifier: MPL-2.0</span><span>\n</span><span>"
</span><span>code += "</span><span>// The generate_instruction_search.py script automatically generated this code. DO NOT MODIFY!</span><span>\n</span><span>"
</span><span>code += "</span><span>#include </span><span>\"</span><span>../instructions.hpp</span><span>\"\n</span><span>"
</span><span>code += "</span><span>#include </span><span>\"</span><span>../ultrassembler.hpp</span><span>\"\n\n</span><span>"
</span><span>code += "</span><span>namespace ultrassembler_internal {</span><span>\n\n</span><span>"
</span><span>code += "</span><span>const uint16_t fast_instr_search(const ultrastring&amp; inst) {</span><span>\n</span><span>"
</span><span>code += "</span><span>    const auto size = inst.size();</span><span>\n\n</span><span>"
</span><span>
</span><span>def </span><span>ind</span><span>():
</span><span>    </span><span>return </span><span>"    " * (depth + </span><span>2</span><span>)
</span><span>
</span><span>def </span><span>instr_exists</span><span>(</span><span>instr</span><span>, </span><span>length</span><span>):
</span><span>    </span><span>for </span><span>i </span><span>in </span><span>instructions:
</span><span>        </span><span>if </span><span>i[</span><span>0</span><span>] == instr and i[</span><span>2</span><span>] == length:
</span><span>            </span><span>return </span><span>True
</span><span>    </span><span>return </span><span>False
</span><span>    
</span><span>def </span><span>prefix_exists</span><span>(</span><span>prefix</span><span>, </span><span>length</span><span>):
</span><span>    </span><span>for </span><span>i </span><span>in </span><span>instructions:
</span><span>        </span><span>if </span><span>i[</span><span>0</span><span>].</span><span>startswith</span><span>(prefix) and i[</span><span>2</span><span>] == length:
</span><span>            </span><span>return </span><span>True
</span><span>    </span><span>return </span><span>False
</span><span>
</span><span>potentialchars = ""
</span><span>
</span><span>for </span><span>instr </span><span>in </span><span>instructions:
</span><span>    </span><span>for </span><span>char </span><span>in </span><span>instr[</span><span>0</span><span>]:
</span><span>        </span><span>if </span><span>char not in potentialchars:
</span><span>            potentialchars += char
</span></code></pre>
<p>This is a lot of boilerplate for the algorithm later to come. We find the shortest and longest instructions. We add the first parts of the generated file. We define an indentation helper for nice formatting. We define additional helper functions to check if a whole instruction exists with a given name and length or if there is an instruction with the provided prefix and length. Finally, we assemble an array with all the characters to search for that the instructions use to avoid unnecessary computation later.</p>
<pre data-lang="python"><code data-lang="python"><span>def </span><span>process_depth</span><span>(</span><span>current_len</span><span>):
</span><span>    </span><span>global </span><span>code, current_instr, depth
</span><span>    </span><span>for </span><span>letter </span><span>in </span><span>potentialchars:
</span><span>        </span><span>if </span><span>instr_exists</span><span>(current_instr + letter, current_len):
</span><span>            code += </span><span>ind</span><span>() + </span><span>f</span><span>"</span><span>if (inst[</span><span>{depth}</span><span>] == '</span><span>{letter}</span><span>') return </span><span>{instructions[[i[</span><span>0</span><span>] </span><span>for </span><span>i </span><span>in </span><span>instructions].</span><span>index</span><span>(current_instr + letter)][</span><span>1</span><span>]}</span><span>;</span><span>\n</span><span>"
</span><span>        </span><span>elif </span><span>prefix_exists</span><span>(current_instr + letter, current_len):
</span><span>            code += </span><span>ind</span><span>() + </span><span>f</span><span>"</span><span>if (inst[</span><span>{depth}</span><span>] == '</span><span>{letter}</span><span>') </span><span>{{\n</span><span>"
</span><span>            current_instr += letter
</span><span>            depth += </span><span>1
</span><span>            </span><span>process_depth</span><span>(current_len)
</span><span>            depth -= </span><span>1
</span><span>            current_instr = current_instr[:-</span><span>1</span><span>]
</span><span>            code += </span><span>ind</span><span>() + "</span><span>}</span><span>\n</span><span>"
</span><span>
</span><span>for </span><span>i </span><span>in </span><span>range</span><span>(min_len, max_len + </span><span>1</span><span>):
</span><span>    code += </span><span>f</span><span>"</span><span>    if (size == </span><span>{i}</span><span>) </span><span>{{\n</span><span>"
</span><span>    </span><span>process_depth</span><span>(i)
</span><span>    code += "</span><span>    }</span><span>\n\n</span><span>"
</span></code></pre>
<p>Here's where the magic happens. We process one instruction length depth at a time. Like the algorithm we talked about at the beginning of this section, we start with the shortest possible "words" and work our way to the longest. Each depth step works through a search of all the possible characters and first checks if we have already found an instruction. If there is such an instruction, we add it to the code. Alternatively, if there is no such instruction but there is in fact an instruction that starts with the current sequence, we go down a depth level because we know that eventually, we will find an instruction with an exact match. Once we've gone through all of the possible instructions and depths, we exit the <code>for</code> loop.</p>
<pre data-lang="python"><code data-lang="python"><span>code += "</span><span>    return instr_search_failed;</span><span>\n</span><span>"
</span><span>code += "</span><span>}</span><span>\n\n</span><span>"
</span><span>code += "</span><span>} // namespace ultrassembler_internal</span><span>"
</span><span>
</span><span>print</span><span>(code)
</span><span>
</span><span>with </span><span>open</span><span>(output, "</span><span>w</span><span>") </span><span>as </span><span>file:
</span><span>    file.</span><span>write</span><span>(code)
</span></code></pre>
<p>This completes the generated search function, shows it all for debugging/status purposes, and finally writes the generated code to the output file path.</p>
<p>There are no other instances of this kind of codegen that I know of. That's surprising, because codegen allows us to perform lookup of thousands of instructions with near-zero overhead. I estimate each instruction lookup takes on the order of 10 instructions to complete.</p>
<p>Here's what the resulting compiled assembly looks like on my x86 PC:</p>
<pre><code><span>0000000000029340 &lt;_ZN22ultrassembler_internal17fast_instr_searchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcENS_10MemoryBankIcEEEE&gt;:
</span><span>   29340:	f3 0f 1e fa          	endbr64 
</span><span>   29344:	48 8b 47 08          	mov    0x8(%rdi),%rax
</span><span>   29348:	48 83 f8 02          	cmp    $0x2,%rax
</span><span>   2934c:	0f 84 c6 00 00 00    	je     29418 &lt;_ZN22ultrassembler_internal17fast_instr_searchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcENS_10MemoryBankIcEEEE+0xd8&gt;
</span><span>   29352:	48 83 f8 03          	cmp    $0x3,%rax
</span><span>   29356:	75 28                	jne    29380 &lt;_ZN22ultrassembler_internal17fast_instr_searchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcENS_10MemoryBankIcEEEE+0x40&gt;
</span><span>   29358:	48 8b 17             	mov    (%rdi),%rdx
</span><span>   2935b:	0f b6 0a             	movzbl (%rdx),%ecx
</span><span>   2935e:	80 f9 61             	cmp    $0x61,%cl
</span><span>   29361:	0f 84 79 2b 00 00    	je     2bee0 &lt;_ZN22ultrassembler_internal17fast_instr_searchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcENS_10MemoryBankIcEEEE+0x2ba0&gt;
</span><span>   29367:	80 f9 64             	cmp    $0x64,%cl
</span><span>   2936a:	0f 85 58 10 00 00    	jne    2a3c8 &lt;_ZN22ultrassembler_internal17fast_instr_searchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcENS_10MemoryBankIcEEEE+0x1088&gt;
</span><span>   29370:	80 7a 01 69          	cmpb   $0x69,0x1(%rdx)
</span><span>   29374:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
</span><span>   29379:	0f 84 09 2f 00 00    	je     2c288 &lt;_ZN22ultrassembler_internal17fast_instr_searchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcENS_10MemoryBankIcEEEE+0x2f48&gt;
</span><span>   2937f:	c3                   	ret
</span><span>   # There are thousands more lines of this!
</span></code></pre>
<p>And RISC-V:</p>
<pre><code><span>000000000007c33c &lt;_ZN22ultrassembler_internal17fast_instr_searchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcENS_10MemoryBankIcEEEE&gt;:
</span><span>   7c33c:	7179                	addi	sp,sp,-48
</span><span>   7c33e:	f406                	sd	ra,40(sp)
</span><span>   7c340:	e42a                	sd	a0,8(sp)
</span><span>   7c342:	6522                	ld	a0,8(sp)
</span><span>   7c344:	00089317          	auipc	t1,0x89
</span><span>   7c348:	afc33303          	ld	t1,-1284(t1) # 104e40 &lt;_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcEN22ultrassembler_internal10MemoryBankIcEEE4sizeEv@@Base+0xad9c4&gt;
</span><span>   7c34c:	9302                	jalr	t1
</span><span>   7c34e:	ec2a                	sd	a0,24(sp)
</span><span>   7c350:	6762                	ld	a4,24(sp)
</span><span>   7c352:	4789                	li	a5,2
</span><span>   7c354:	22f71c63          	bne	a4,a5,7c58c &lt;_ZN22ultrassembler_internal17fast_instr_searchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcENS_10MemoryBankIcEEEE+0x250&gt;
</span><span>   7c358:	4581                	li	a1,0
</span><span>   7c35a:	6522                	ld	a0,8(sp)
</span><span>   7c35c:	00089317          	auipc	t1,0x89
</span><span>   7c360:	c6433303          	ld	t1,-924(t1) # 104fc0 &lt;_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcEN22ultrassembler_internal10MemoryBankIcEEEixEm@@Base+0xaaef8&gt;
</span><span>   7c364:	9302                	jalr	t1
</span><span>   # Also thousands more lines of this!
</span></code></pre>
<h2 id="compile-time-templates">Compile-time templates</h2>
<p>This is similar to script codegen but with native C++ only.</p>
<p>One of the verification steps in Ultrassembler involves checking that the immediate value of an instruction (for example, <code>addi t0, t1, 100</code>) fits within some known range. C++ allows us to both cleanly invoke this check for an arbitrary range and do so with little to no runtime overhead to calculate that range.</p>
<p>Here's how it works.</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>template </span><span>&lt;</span><span>auto</span><span> bits&gt;
</span><span>void </span><span>verify_imm</span><span>(</span><span>const auto</span><span>&amp; </span><span>imm</span><span>) {
</span><span>    </span><span>using </span><span>T = </span><span>decltype</span><span>(bits);
</span><span>    </span><span>if constexpr </span><span>(std::is_signed_v&lt;T&gt;) {
</span><span>        </span><span>if </span><span>(imm &lt; -(</span><span>1 </span><span>&lt;&lt; (bits - </span><span>1</span><span>)) || imm &gt;= (</span><span>1 </span><span>&lt;&lt; (bits - </span><span>1</span><span>))) {
</span><span>            </span><span>throw </span><span>UASError</span><span>(ImmOutOfRange, "</span><span>Immediate </span><span>" + </span><span>to_ultrastring</span><span>(imm) + "</span><span> is out of range [</span><span>" + </span><span>to_ultrastring</span><span>(-(</span><span>1 </span><span>&lt;&lt; (bits - </span><span>1</span><span>))) + "</span><span>, </span><span>" + </span><span>to_ultrastring</span><span>((</span><span>1 </span><span>&lt;&lt; (bits - </span><span>1</span><span>))) + "</span><span>)</span><span>", </span><span>0</span><span>, </span><span>0</span><span>);
</span><span>        }
</span><span>    } </span><span>else if constexpr </span><span>(std::is_unsigned_v&lt;T&gt;) {
</span><span>        </span><span>if </span><span>(imm &lt; </span><span>0 </span><span>|| imm &gt;= (</span><span>1</span><span>u </span><span>&lt;&lt; bits)) {
</span><span>            </span><span>throw </span><span>UASError</span><span>(ImmOutOfRange, "</span><span>Immediate </span><span>" + </span><span>to_ultrastring</span><span>(imm) + "</span><span> is out of range [0, </span><span>" + </span><span>to_ultrastring</span><span>((</span><span>1</span><span>u </span><span>&lt;&lt; bits)) + "</span><span>)</span><span>", </span><span>0</span><span>, </span><span>0</span><span>);
</span><span>        }
</span><span>    }
</span><span>}
</span></code></pre>
<p>Each invocation looks something like <code>verify_imm&lt;5u&gt;(imm)</code>. We supply a numeric literal and the immediate variable to check. C++'s template facilities then check whether we've supplied a signed or unsigned numeric literal, as RISC-V instruction can vary whether they expect signed or unsigned numbers only. We then calculate the lowest possible number (<code>-(1 &lt;&lt; (bits - 1))</code> for signed and <code>0</code> for unsigned) and the highest possible number (<code>(1 &lt;&lt; (bits - 1))</code> for signed and <code>(1u &lt;&lt; bits)</code> for unsigned) and check the input against that. We then throw an error if it doesn't fit these calculated constraints or return silently if it does.</p>
<p>The <code>if constexpr</code> tells the compiler to generate each signed or unsigned execution path at compile time depending on what numeric literal we've provided, allowing us to make each function call as pretty and fast as possible.</p>
<h2 id="fast-string-comparisons">Fast string comparisons</h2>
<p>For the times where we can't or don't want to use a precomputed string search, Ultrassembler uses an optimized string comparison function to minimize overhead.</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>bool </span><span>fast_eq</span><span>(</span><span>const auto</span><span>&amp; </span><span>first</span><span>, </span><span>const</span><span> std::string_view&amp; </span><span>second</span><span>) {
</span><span>    </span><span>if </span><span>(first.</span><span>size</span><span>() != second.</span><span>size</span><span>()) { 
</span><span>        </span><span>return </span><span>false</span><span>;
</span><span>    }
</span><span>    </span><span>for </span><span>(size_t i = </span><span>0</span><span>; i &lt; first.</span><span>size</span><span>(); i++) {
</span><span>        </span><span>if </span><span>(first[i] != second[i]) {
</span><span>            [[likely]] </span><span>return </span><span>false</span><span>;
</span><span>        } </span><span>else </span><span>{
</span><span>            [[unlikely]] </span><span>continue</span><span>;
</span><span>        }
</span><span>    }
</span><span>    </span><span>return </span><span>true</span><span>;
</span><span>}
</span></code></pre>
<p>How does this work? First, we check to make sure the input strings are the same length. It's impossible by definition for them to be the same if they have different lengths. Then, we compare them character by character. Here, we use C++20's <code>[[likely]]</code> and <code>[[unlikely]]</code> tags to help the compiler optimize the positioning of each comparison. It's statistically more likely to have a comparison failure than a success because we are usually comparing one input string against many possible options but it can only match with up to one.</p>
<h2 id="reference-bigger-than-fundamental-objects-in-function-arguments">Reference bigger-than-fundamental objects in function arguments</h2>
<p>This one surprised me.</p>
<p>When you call a C++ function, you can choose to pass your arguments <em>by value</em>, or <em>by reference</em>. By default, C++ uses <em>by value</em>, which means the code internally makes a copy of the argument and provides that copy to the function. If you add a <code>&amp;</code> to make it a reference instead (there are other ways to do this too) then the code generates a pointer to that original object and passes that pointer to the function. However, unlike pointers, references handle referencing and dereferencing transparently. As an aside, this also means Ultrassembler technically doesn't use pointers... anywhere! Pointers are horrible.</p>
<p>One of the most common pieces of C++ optimization advice is to use references whenever possible to avoid the copy overhead incurred by value references. It might surprise you, then, to find out that the following code is vastly faster due to the use of a value argument:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>size_t </span><span>parse_this_line</span><span>(size_t </span><span>i</span><span>, </span><span>const</span><span> ultrastring&amp; </span><span>data</span><span>, assembly_context&amp; </span><span>c</span><span>) {
</span><span>    </span><span>// code that does "i++;" a lot
</span><span>}
</span><span>
</span><span>// later, in a different function:
</span><span>for </span><span>(size_t i = </span><span>0</span><span>; i &lt; data.</span><span>size</span><span>();) {
</span><span>    i = </span><span>parse_this_line</span><span>(i, data, c);
</span><span>    </span><span>// etc...
</span><span>}
</span></code></pre>
<p>If we had applied the Programming Furus©️®️™️'s advice to pass <code>i</code> by reference, it would have looked like:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>void </span><span>parse_this_line</span><span>(size_t&amp; </span><span>i</span><span>, </span><span>const</span><span> ultrastring&amp; </span><span>data</span><span>, assembly_context&amp; </span><span>c</span><span>) {
</span><span>    </span><span>// code that does "i++;" a lot
</span><span>}
</span><span>
</span><span>// later, in a different function:
</span><span>for </span><span>(size_t i = </span><span>0</span><span>; i &lt; data.</span><span>size</span><span>();) {
</span><span>    </span><span>parse_this_line</span><span>(i, data, c);
</span><span>    </span><span>// etc...
</span><span>}
</span></code></pre>
<p>So why is the first one faster? Here's why.</p>
<p>Under the hood of all programming languages, you have assembly code which translates to the CPU's machine code. There are also no variables. Instead, you've got registers which hold raw data and raw memory. In most application processors today, the registers are 64 bits wide, and maybe wider for special vector operations which don't matter here. 64 bits happens to match the maximum width of so-called <em>fundamental types</em> in C and C++ which are integers and most common floats. Therefore, we can fit at least one fundamental type into each register.</p>
<p>Quick refresher of the registers in RISC-V:</p>
<p><img src="https://jghuff.com/RISC-V-registers-safe.svg" alt="Infographic of the integer RISC-V registers"></p>
<p>Assembly also has little concept of a function call. Internally, all function calls do is clear out the current registers, load them with the function parameters, then jump to the function's address. This means all function calls involve at least one copy per argument, whether it's a fundamental type or a pointer to a fundamental type or a pointer to something else.</p>
<pre><code><span># Here's what this looks like in RISC-V assembly.
</span><span># Say we have a number in register t0, like 69.
</span><span>
</span><span>addi t0, x0, 69
</span><span>
</span><span># We also have a function foobar that takes a single integer argument (like "void foobar(size_t arg)" in C/C++)
</span><span># We can copy that register (and therefore its value) to argument register a0 before calling foobar
</span><span>
</span><span>addi a0, t0, 0
</span><span>
</span><span>jal foobar
</span><span>
</span><span># The copying of this value only took one step!
</span></code></pre>
<p>You can see where we're going. If our goal is to minimize copying, it would be better to copy a fundamental type once than to generate a pointer, copy that, then dereference that pointer to get the underlying value. That is the crux of this subtle optimization trick. The cost to copy one register is less than the cost to copy a register holding a pointer. </p>
<p>Note how I've only talked about fundamental types. Any type which does not fit in a single register, AKA many structs, containers, or anything else that isn't a fundamental type, costs more to copy by value in multiple registers than it does to copy a single register holding a pointer. I don't know of any Programming Furu©️®️™️ that makes this distinction clear.</p>
<h2 id="don-t-do-insertions-or-deletions">Don't do insertions or deletions</h2>
<p>One of the steps to assemble a jump operation in RISC-V assembly is to calculate the offset of bytes to the jump target. However, this is often impossible unless all other instructions are already assembled. Ultrassembler does its best to avoid insertions or deletions through a clever trick to assemble jump instructions with a placeholder jump offset and then insert the correct offset in-place at the end.</p>
<p>Here's how it works:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>void </span><span>solve_label_offsets</span><span>(assembly_context&amp; </span><span>c</span><span>) {
</span><span>    </span><span>using </span><span>enum RVInstructionFormat;
</span><span>    </span><span>for </span><span>(size_t i = </span><span>0</span><span>; i &lt; c.</span><span>label_locs</span><span>.</span><span>size</span><span>(); i++) {
</span><span>        </span><span>if </span><span>(!c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>is_dest</span><span>) {
</span><span>            </span><span>for </span><span>(size_t j = </span><span>0</span><span>; j &lt; c.</span><span>label_locs</span><span>.</span><span>size</span><span>(); j++) {
</span><span>                </span><span>if </span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(j).</span><span>is_dest </span><span>&amp;&amp; c.</span><span>label_locs</span><span>.</span><span>at</span><span>(j).</span><span>id </span><span>== c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>id</span><span>) {
</span><span>                    uint32_t inst = </span><span>0</span><span>;
</span><span>
</span><span>                    </span><span>if </span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>i_bytes </span><span>== </span><span>2</span><span>) {
</span><span>                        inst = reinterpret_cast&lt;uint16_t&amp;&gt;(c.</span><span>machine_code</span><span>.</span><span>at</span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>loc</span><span>));
</span><span>                    } </span><span>else if </span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>i_bytes </span><span>== </span><span>4</span><span>) {
</span><span>                        inst = reinterpret_cast&lt;uint32_t&amp;&gt;(c.</span><span>machine_code</span><span>.</span><span>at</span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>loc</span><span>));
</span><span>                    }
</span><span>
</span><span>                    int32_t offset = c.</span><span>label_locs</span><span>.</span><span>at</span><span>(j).</span><span>loc </span><span>- c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>loc</span><span>;
</span><span>
</span><span>                    </span><span>if </span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>format </span><span>== Branch) {
</span><span>                        inst &amp;= </span><span>0b00000001111111111111000001111111</span><span>;
</span><span>                        inst |= ((offset &gt;&gt; </span><span>11</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>7</span><span>;      </span><span>// Add imm[11]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>1</span><span>) &amp; </span><span>0b1111</span><span>) &lt;&lt; </span><span>8</span><span>;    </span><span>// Add imm[4:1]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>5</span><span>) &amp; </span><span>0b111111</span><span>) &lt;&lt; </span><span>25</span><span>; </span><span>// Add imm[10:5]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>12</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>31</span><span>;     </span><span>// Add imm[12]
</span><span>                    } </span><span>else if </span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>format </span><span>== J) {
</span><span>                        inst &amp;= </span><span>0b00000000000000000000111111111111</span><span>;
</span><span>                        inst |= ((offset &gt;&gt; </span><span>12</span><span>) &amp; </span><span>0b11111111</span><span>) &lt;&lt; </span><span>12</span><span>;  </span><span>// Add imm[19:12]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>11</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>20</span><span>;         </span><span>// Add imm[11]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>1</span><span>) &amp; </span><span>0b1111111111</span><span>) &lt;&lt; </span><span>21</span><span>; </span><span>// Add imm[10:1]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>20</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>31</span><span>;         </span><span>// Add imm[20]
</span><span>                    } </span><span>else if </span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>format </span><span>== CJ) {
</span><span>                        inst &amp;= </span><span>0b1110000000000011</span><span>;
</span><span>                        inst |= ((offset &gt;&gt; </span><span>5</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>2</span><span>;   </span><span>// Add offset[5]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>1</span><span>) &amp; </span><span>0b111</span><span>) &lt;&lt; </span><span>3</span><span>; </span><span>// Add offset[3:1]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>7</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>6</span><span>;   </span><span>// Add offset[7]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>6</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>7</span><span>;   </span><span>// Add offset[6]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>10</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>8</span><span>;  </span><span>// Add offset[10]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>8</span><span>) &amp; </span><span>0b11</span><span>) &lt;&lt; </span><span>9</span><span>;  </span><span>// Add offset[9:8]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>4</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>11</span><span>;  </span><span>// Add offset[4]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>11</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>12</span><span>; </span><span>// Add offset[11]
</span><span>                    } </span><span>else if </span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>format </span><span>== CB) {
</span><span>                        inst &amp;= </span><span>0b1110001110000011</span><span>;
</span><span>                        inst |= ((offset &gt;&gt; </span><span>5</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>2</span><span>;   </span><span>// Add offset[5]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>1</span><span>) &amp; </span><span>0b11</span><span>) &lt;&lt; </span><span>3</span><span>;  </span><span>// Add offset[2:1]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>6</span><span>) &amp; </span><span>0b11</span><span>) &lt;&lt; </span><span>5</span><span>;  </span><span>// Add offset[7:6]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>3</span><span>) &amp; </span><span>0b11</span><span>) &lt;&lt; </span><span>10</span><span>; </span><span>// Add offset[4:3]
</span><span>                        inst |= ((offset &gt;&gt; </span><span>8</span><span>) &amp; </span><span>0b1</span><span>) &lt;&lt; </span><span>12</span><span>;  </span><span>// Add offset[8]
</span><span>                    }
</span><span>
</span><span>                    </span><span>if </span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>i_bytes </span><span>== </span><span>2</span><span>) {
</span><span>                        reinterpret_cast&lt;uint16_t&amp;&gt;(c.</span><span>machine_code</span><span>.</span><span>data</span><span>()[c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>loc</span><span>]) = inst;
</span><span>                    } </span><span>else if </span><span>(c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>i_bytes </span><span>== </span><span>4</span><span>) {
</span><span>                        reinterpret_cast&lt;uint32_t&amp;&gt;(c.</span><span>machine_code</span><span>.</span><span>data</span><span>()[c.</span><span>label_locs</span><span>.</span><span>at</span><span>(i).</span><span>loc</span><span>]) = inst;
</span><span>                    }
</span><span>                }
</span><span>            }
</span><span>        }
</span><span>    }
</span><span>}
</span></code></pre>
<p>When we find a jump instruction that needs later TLC, we save its location and some other attributes to a special array. Then, after the rest of the code is done assembling, we go back through each jump instruction and calculate the correct offset and insert that offset in-place in the correct instruction format.</p>
<p>I believe this is faster than what some other assemblers do for instructions which jump to a location reachable within the constraints of the offset's size. However, it's not useful for far jumps, which require a separate helper instruction to extend the jump. Ultrassembler doesn't support those yet.</p>
<h2 id="more-optimizations">More optimizations</h2>
<p>Here's a few more optimization tricks that aren't quite significant enough for their own sections but deserve a mention anyway.</p>
<h2 id="memory-padding">Memory padding</h2>
<p>There are a few strings which Ultrassembler frequently reads and writes. To insure against runtime memory pool allocation overhead, we preemptively allocate a good amount of memory.</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>c.</span><span>inst</span><span>.</span><span>reserve</span><span>(</span><span>32</span><span>);
</span><span>c.</span><span>arg1</span><span>.</span><span>reserve</span><span>(</span><span>32</span><span>);
</span><span>c.</span><span>arg2</span><span>.</span><span>reserve</span><span>(</span><span>32</span><span>);
</span><span>c.</span><span>arg3</span><span>.</span><span>reserve</span><span>(</span><span>32</span><span>);
</span><span>c.</span><span>arg4</span><span>.</span><span>reserve</span><span>(</span><span>32</span><span>);
</span><span>c.</span><span>arg5</span><span>.</span><span>reserve</span><span>(</span><span>32</span><span>);
</span><span>c.</span><span>arg6</span><span>.</span><span>reserve</span><span>(</span><span>32</span><span>);
</span><span>c.</span><span>arg_extra</span><span>.</span><span>reserve</span><span>(</span><span>32</span><span>);
</span><span>c.</span><span>machine_code</span><span>.</span><span>reserve</span><span>(</span><span>128000</span><span>);
</span></code></pre>
<p>I found that 32 bytes gave the biggest speedup for small strings, and sizes above a few kB are more appropriate for the machine code output.</p>
<h2 id="inline-some-functions">Inline some functions</h2>
<p>Sometimes, functions are faster when you mark them <code>inline</code> to suggest that the code have a copy for each invocation. This tends to work better for smaller functions.</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>inline const </span><span>uint8_t </span><span>decode_encoding_length</span><span>(</span><span>const </span><span>uint8_t </span><span>opcode</span><span>) {
</span><span>    </span><span>if </span><span>((opcode &amp; </span><span>0b11</span><span>) != </span><span>0b11</span><span>) {
</span><span>        </span><span>return </span><span>2</span><span>;
</span><span>    } </span><span>else </span><span>{
</span><span>        </span><span>return </span><span>4</span><span>;
</span><span>    }
</span><span>}
</span></code></pre>
<p>Try it and see what works best for your own code.</p>
<h2 id="minimize-string-stripping-copies">Minimize string stripping copies</h2>
<p>Here's a special case of minimizing string copying. This function removes the parentheses and optionally the number 0 from a string like "0(t4)":</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>void </span><span>remove_extraneous_parentheses</span><span>(ultrastring&amp; </span><span>str</span><span>) {
</span><span>    </span><span>if </span><span>(str.</span><span>back</span><span>() == '</span><span>)</span><span>') {
</span><span>        str.</span><span>pop_back</span><span>();
</span><span>    }
</span><span>    </span><span>if </span><span>(str.</span><span>front</span><span>() == '</span><span>0</span><span>') {
</span><span>        str.</span><span>erase</span><span>(</span><span>0</span><span>, </span><span>1</span><span>);
</span><span>    }
</span><span>    </span><span>if </span><span>(str.</span><span>front</span><span>() == '</span><span>(</span><span>') {
</span><span>        str.</span><span>erase</span><span>(</span><span>0</span><span>, </span><span>1</span><span>);
</span><span>    }
</span><span>}
</span></code></pre>
<p>Why do we tackle the last character first? When you erase one or more characters from a string, C++ internally copies every individual character after setting the characters to erase to blank. In other words, it looks a little like this:</p>
<pre><code><span># Erase "foo" from "foobar"
</span><span>
</span><span>foobar
</span><span>
</span><span> oobar
</span><span>
</span><span>  obar
</span><span>
</span><span>   bar
</span><span>
</span><span>b  bar
</span><span>
</span><span>ba bar
</span><span>
</span><span>barbar
</span><span>
</span><span>barba
</span><span>
</span><span>barb
</span><span>
</span><span>bar
</span></code></pre>
<p>That's a lot of copies. So it would be great if we can avoid copying more of these characters in the future. Then, we handle the case where the input string is like "(t4)" where there is no 0 at the beginning. Finally is the removal of the front parenthesis. </p>
<p>This optimization yielded a surprising speedup (several percent overall) due to how often the case of "0(reg)" shows up in RISC-V assembly.</p>
<h2 id="call-small-lambda-functions-frequently">Call small lambda functions frequently</h2>
<p>These three lambda functions both help make parsing faster and simplify the code:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>auto</span><span> is_whitespace = [](</span><span>const char</span><span>&amp; c) {
</span><span>    </span><span>return</span><span> c == '</span><span>\t</span><span>' || c == ' ';
</span><span>};
</span><span>auto</span><span> ch = [&amp;]() {
</span><span>    </span><span>return</span><span> data[i];
</span><span>};
</span><span>auto</span><span> not_at_end = [](</span><span>const char</span><span>&amp; c) {
</span><span>    </span><span>return</span><span> c != '</span><span>\n</span><span>' &amp;&amp; c != '</span><span>#</span><span>';
</span><span>};
</span></code></pre>
<p>Why do they work? The simplification part is obvious, but maybe not for speed. One reason might be because the compiler now knows how often we do the same comparisons over and over. If it knows we do the same thing many times, it can optimize with that known fact.</p>
<p>Also note how the first and last functions violate the earlier optimization trick regarding passing fundamental types by value. That trick does not entirely apply to lambda functions, which work differently, where they could be inline and incur zero function call overhead. Passing by reference enables the zero function call overhead optimization.</p>
<h2 id="strip-out-the-compilation-junk">Strip out the compilation junk</h2>
<p>By default, C++ compilers like GCC and Clang add in a lot of junk that we can safely strip out. Here's how we do it in CMake:</p>
<pre data-lang="cmake"><code data-lang="cmake"><span>target_compile_options</span><span>(objultra </span><span>PRIVATE </span><span>-fno-rtti -fno-stack-protector -fomit-frame-pointer)
</span></code></pre>
<h3 id="fno-rtti">-fno-rtti</h3>
<p>RTTI is runtime type identification. Only some software uses this feature but it adds nonzero overhead to all. Therefore, we disable it to eliminate that overhead.</p>
<h3 id="fno-stack-protector">-fno-stack-protector</h3>
<p>The stack protector is a feature that many Programming Furus©️®️™️ peddle to improve security. However, it adds considerable overhead, and does nothing for security outside of a specific attack. Therefore, we disable it to eliminate that overhead.</p>
<h3 id="fomit-frame-pointer">-fomit-frame-pointer</h3>
<p>The frame pointer is a specific feature on some CPU platforms (like x86). However, it's not actually needed anymore for modern CPUs, and it adds overhead. Therefore, we disable it to eliminate that overhead.</p>
<h2 id="link-time-optimization">Link-time optimization</h2>
<p>Link-time optimization, or LTO, is a more intelligent way for the compiler to optimize your code than regular optimization passes. It can enable some serious speedups if your code benefits from function inlining or has code across many files. It's been supported for a while now but isn't enabled by default. Here's how to enable it in CMake:</p>
<pre data-lang="cmake"><code data-lang="cmake"><span>include</span><span>(CheckIPOSupported)
</span><span>check_ipo_supported</span><span>(</span><span>RESULT </span><span>lto_supported)
</span><span>if</span><span>(lto_supported AND NOT NO_LTO)
</span><span>  </span><span>set_property</span><span>(</span><span>TARGET </span><span>${</span><span>this_target</span><span>} </span><span>PROPERTY </span><span>INTERPROCEDURAL_OPTIMIZATION TRUE)
</span><span>  </span><span>if</span><span>(CMAKE_COMPILER_IS_GNUCXX)
</span><span>    </span><span>list</span><span>(</span><span>APPEND </span><span>CMAKE_CXX_COMPILE_OPTIONS_IPO "</span><span>-flto=auto</span><span>") </span><span># set the thread amount to what is available on the CPU
</span><span>  </span><span>endif</span><span>()
</span><span>endif</span><span>()
</span></code></pre>
<p>This has been nothing but a benefit for Ultrassembler.</p>
<h2 id="make-structs-memory-friendly">Make structs memory-friendly</h2>
<p>This struct holds variables that most of the Ultrassembler code uses:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>struct </span><span>assembly_context {
</span><span>    ultrastring inst;
</span><span>    ultrastring arg1;
</span><span>    ultrastring arg2;
</span><span>    ultrastring arg3;
</span><span>    ultrastring arg4;
</span><span>    ultrastring arg5;
</span><span>    ultrastring arg6;
</span><span>    ultrastring arg_extra;
</span><span>    ultravector&lt;uint8_t&gt; machine_code;
</span><span>    ultravector&lt;RVInstructionSet&gt; supported_sets;
</span><span>    ultravector&lt;std::pair&lt;ultrastring, </span><span>int</span><span>&gt;&gt; labels;
</span><span>    ultravector&lt;label_loc&gt; label_locs;
</span><span>    ultravector&lt;std::pair&lt;ultrastring, ultrastring&gt;&gt; constants;
</span><span>    ultravector&lt;directive_options&gt; options;
</span><span>    int32_t custom_inst = </span><span>0</span><span>;
</span><span>    uint32_t line = </span><span>1</span><span>;
</span><span>    uint32_t column = </span><span>0</span><span>;
</span><span>    uint16_t inst_offset = </span><span>0</span><span>;
</span><span>};
</span></code></pre>
<p>We order them in descending memory size, from 32 bytes for <code>ultrastring</code> to 2 for <code>uint16_t</code>. This packs the members the most efficient way possible for memory usage.</p>
<p>Also, these variables are not in the global scope or a namespace because holding them all in a struct enables multithreaded operation. It would be possible to add <code>thread_local</code> to each one to enable multithreading easily, but in testing, this added enormous overhead compared to a plain old struct.</p>
<h2 id="memory-locality">Memory locality</h2>
<p>Memory locality is the general idea that the most frequently accessed memory should be close together. Ultrassembler has many such cases, and we already help ensure memory locality through preallocated memory pools. We go further by ensuring sections of code which frequently work on one area of memory get their own space to work with.</p>
<p>Here's an example:</p>
<pre data-lang="cpp"><code data-lang="cpp"><span>void </span><span>make_inst</span><span>(assembly_context&amp; </span><span>c</span><span>) {
</span><span>    </span><span>// boilerplate
</span><span>
</span><span>    uint32_t inst = </span><span>0</span><span>;
</span><span>
</span><span>    </span><span>// code which modifies this inst variable
</span><span>
</span><span>    reinterpret_cast&lt;uint32_t&amp;&gt;(c.</span><span>machine_code</span><span>[c.</span><span>machine_code</span><span>.</span><span>size</span><span>() - bytes]) = inst;
</span><span>}
</span></code></pre>
<p>We work on the local <code>inst</code> variable to prevent far reaches across memory to the <code>c.machine_code</code> vector. When we're done, we write to <code>c.machine_code</code> once and invoke only one far memory access as a result.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Congrats if you read all the way here!</p>
<p>Hopefully you've learned something new and/or useful. Although I've crafted the optimizations here for Ultrassembler, there's nothing stopping you from applying the same underlying principles to your own code. </p>
<p>Check out Ultrassembler: <a href="https://github.com/Slackadays/Chata/tree/main/ultrassembler">https://github.com/Slackadays/Chata/tree/main/ultrassembler</a></p>



        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Use One Big Server (2022) (259 pts)]]></title>
            <link>https://specbranch.com/posts/one-big-server/</link>
            <guid>45085029</guid>
            <pubDate>Sun, 31 Aug 2025 17:29:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://specbranch.com/posts/one-big-server/">https://specbranch.com/posts/one-big-server/</a>, See on <a href="https://news.ycombinator.com/item?id=45085029">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>A lot of ink is spent on the "monoliths vs. microservices" debate, but the real issue behind
this debate is about whether distributed system architecture is worth the developer time and
cost overheads.  By thinking about the real operational considerations of our systems, we can
get some insight into whether we actually need distributed systems for most things.</p>
<p>We have all gotten so familiar with virtualization and abstractions between our software
and the servers that run it.  These days, "serverless" computing is all the rage, and even
"bare metal" is a class of virtual machine.  However, every piece of software runs on a
server.  Since we now live in a world of virtualization, most of these servers are a lot
bigger and a lot cheaper than we actually think.</p>
<h2 id="meet-your-server">Meet Your Server</h2>
<figure><img src="https://www.servethehome.com/wp-content/uploads/2021/03/Microsoft-Azure-HPC-HBv3-Hosting-Node-2.jpg#center" width="70%">
</figure>

<p>This is a picture of a server used by Microsoft Azure with AMD CPUs.  Starting from the left,
the big metal fixture on the left (with the copper tubes) is a heatsink, and the metal boxes
that the copper tubes are attached to are heat exchangers on each CPU.  The CPUs are AMD's
third generation server CPU, each of which has the following specifications:</p>
<ul>
<li>64 cores</li>
<li>128 threads</li>
<li>~2-2.5 GHz clock</li>
<li>Cores capable of 4-6 instructions per clock cycle</li>
<li>256 MB of L3 cache</li>
</ul>
<p>In total, this server has 128 cores with 256 simultaneous threads.  With all of the cores working
together, this server is capable of 4 TFLOPs of peak double precision computing performance. This
server would sit at the top of the top500 supercomputer list in early 2000. It would take until
2007 for this server to leave the top500 list.  Each CPU core is substantially more powerful than a
single core from 10 years ago, and boasts a much wider computation pipeline.</p>
<p>Above and below each CPU is the memory: 16 slots of DDR4-3200 RAM per socket.  The largest
capacity "cost effective" DIMMs today are 64 GB.  Populated cost-efficiently, this server can hold
<strong>1 TB</strong> of memory.  Populated with specialized high-capacity DIMMs (which are generally slower
than the smaller DIMMs), this server supports up to <strong>8 TB</strong> of memory total.  At DDR4-3200, with
a total of 16 memory channels, this server will likely see ~200 Gbps of memory throughput across
all of its cores.</p>
<p>In terms of I/O, each CPU offers 64 PCIe gen 4 lanes.  With 128 PCIe lanes total, this server is
capable of supporting 30 NVMe SSDs plus a network card.  Typical configurations you can buy will
offer slots for around 16 SSDs or disks. The final thing I wanted to point out in this picture is
in the top right, the network card.  This server is likely equipped with a 50-100 Gbps network
connection.</p>
<h4 id="the-capabilities-of-one-server">The Capabilities of One Server</h4>
<p>One server today is capable of:</p>
<ul>
<li><a href="https://people.freebsd.org/~gallatin/talks/euro2021.pdf">Serving video files at 400 Gbps</a> (now <a href="http://nabstreamingsummit.com/wp-content/uploads/2022/05/2022-Streaming-Summit-Netflix.pdf">800 Gbps</a>)</li>
<li><a href="https://www.scylladb.com/2017/05/10/faster-and-better-what-to-expect-running-scylla-on-aws-i3-instances/">1 million IOPS on a NoSQL database</a></li>
<li><a href="https://www.enterprisedb.com/blog/pgbench-performance-benchmark-postgresql-12-and-edb-advanced-server-12">70k IOPS in PostgreSQL</a></li>
<li><a href="https://openbenchmarking.org/test/pts/nginx">500k requests per second to nginx</a></li>
<li><a href="https://openbenchmarking.org/test/pts/build-linux-kernel-1.14.0">Compiling the linux kernel in 20 seconds</a></li>
<li><a href="https://openbenchmarking.org/test/pts/x264-2.7.0">Rendering 4k video with x264 at 75 FPS</a></li>
</ul>
<p>Among other things.  There are a lot of public benchmarks these days, and if you know how your
service behaves, you can probably find a similar benchmark.</p>
<h4 id="the-cost-of-one-server">The Cost of One Server</h4>
<p>In a large hosting provider, OVHCloud, you can rent an HGR-HCI-6 server with similar specifications
to the above, with 128 physical cores (256 threads), 512 GB of memory, and 50 Gbps of bandwidth
for $1,318/month.</p>
<p>Moving to the popular budget option, Hetzner, you can rent a smaller server with 32 physical cores
and 128 GB of RAM for about €140.00/month.  This is a smaller server than the one from OVHCloud
(1/4 the size), but it gives you some idea of the price spread between hosting providers.</p>
<p>In AWS, one of the largest servers you can rent is the m6a.metal server. It offers 50 Gbps
of network bandwidth, 192 vCPUs (96 physical cores), and 768 GB of memory, and costs $8.2944/hour
in the US East region.  This comes out to $6,055/month.  The cloud premium is real!</p>
<p>A similar server, with 128 physical cores and 512 GB of memory (as well as appropriate NICs,
SSDs, and support contracts), can be purchased from the Dell website for about $40,000.  However,
if you are going to spend this much on a server, you should probably chat with a salesperson to
make sure you are getting the best deal you can.  You will also need to pay to host this server
and connect it to a network, though.</p>
<p>In comparison, buying servers takes about 8 months to break even compared to using cloud servers,
and 30 months to break even compared to renting.  Of course, buying servers has a lot of drawbacks,
and so does renting, so going forward, we will think a little bit about the "cloud premium" and
whether you should be willing to pay it (spoiler alert: the answer is "yes, but not as much as the
cloud companies want you to pay").</p>
<h2 id="thinking-about-the-cloud">Thinking about the Cloud</h2>
<p>The "cloud era" began in earnest around 2010.  At the time, the state of the art CPU was an
8-core Intel Nehalem CPU.  Hyperthreading had just begun, so that 8-core CPU offered a
whopping 16 threads.  Hardware acceleration was about to arrive for AES encryption, and
vectors were 128 bits wide. The largest CPUs had 24 MB of cache, and your server could fit a
whopping 256 GB of DDR3-1066 memory. If you wanted to store data, Seagate had just begun to
offer a 3 TB hard drive.  Each core offered 4 FLOPs per cycle, meaning that your 8-core
server running at 2.5 GHz offered a blazing fast 80 GFLOPs.</p>
<p>The boom in distributed computing rode on this wave: if you wanted to do anything that
involved retrieval of data, you needed a lot of disks to get the storage throughput you want.
If you wanted to do large computations, you generally needed a lot of CPUs. This meant that
you needed to coordinate between a lot of CPUs to get most things done.</p>
<p>Since that time began, the size of servers has increased a lot, and SSDs have increased available
IOPS by a factor of at least 100, but the size of mainstream VMs and containers hasn't increased
much, and we still use virtualized drives that perform more like hard drives than SSDs (although
this gap is closing).</p>
<h4 id="one-server-plus-a-backup-is-usually-plenty">One Server (Plus a Backup) is Usually Plenty</h4>
<p>If you are doing anything short of video streaming, and you have under 10k QPS, one server
will generally be fine for most web services.  For really simple services, one server could
even make it to a million QPS or so.  Very few web services get this much traffic - if you
have one, you know about it.  Even if you're serving video, running only one server for your
control plane is very reasonable.  A benchmark can help you determine where you are.
Alternatively, you can use common benchmarks of similar applications, or
<a href="https://specbranch.com/posts/common-perf-numbers/">tables of common performance numbers</a> to estimate how big of a
machine you might need.</p>
<h4 id="tall-is-better-than-wide">Tall is Better than Wide</h4>
<p>When you need a cluster of computers, if one server is not enough, using fewer larger servers
will often be better than using a large fleet of small machines.  There is non-zero overhead
to coordinate a cluster, and that overhead is frequently O(n) on each server.  To reduce this
overhead, you should generally prefer to use a few large servers than to use many small servers.
In the case of things like serverless computing, where you allocate tiny short-lived containers,
this overhead accounts for a large fraction of the cost of use.  On the other extreme end,
coordinating a cluster of one computer is trivial.</p>
<h4 id="big-servers-and-availability">Big Servers and Availability</h4>
<p>The big drawback of using a single big server is availability.  Your server is going to need
downtime, and it is going to break.  Running a primary and a backup server is usually enough,
keeping them in different datacenters.  A 2x2 configuration should appease the truly paranoid: two
servers in a primary datacenter (or cloud provider) and two servers in a backup datacenter will
give you a lot of redundancy.  If you want a third backup deployment, you can often make that
smaller than your primary and secondary.</p>
<p>However, you may still have to be concerned about <em>correlated</em> hardware failures.  Hard drives
(and now SSDs) have been known to occasionally have correlated failures: if you see one disk
fail, you are a lot more likely to see a second failure before getting back up if your disks
are from the same manufacturing batch.  Services like Backblaze overcome this by using many
different models of disks from multiple manufacturers.  Hacker news learned this the hard way
recently when the primary and backup server went down at the same time.</p>
<p>If you are using a hosting provider which rents pre-built servers, it is prudent to rent two
different types of servers in each of your primary and backup datacenters.  This should avoid
almost every failure mode present in modern systems.</p>
<h2 id="use-the-cloud-but-dont-be-too-cloudy">Use the Cloud, but don't be too Cloudy</h2>
<p>A combination of availability and ease of use is one of the big reasons why I (and most other
engineers) like cloud computers.  Yes, you pay a significant premium to rent the machines, but
your cloud provider has so much experience building servers that you don't even see most failures,
and for the other failures, you can get back up and running really quickly by renting a new
machine in their nearly-limitless pool of compute.  It is their job to make sure that you don't
experience downtime, and while they don't always do it perfectly, they are pretty good at it.</p>
<p>Hosting providers who are willing to rent you a server are a cheaper alternative to cloud
providers, but these providers can sometimes have poor quality and some of them don't understand
things like network provisioning and correlated hardware failures. Also, moving from one rented
server to a larger one is a lot more annoying than resizing a cloud VM. Cloud servers have a
price premium for a good reason.</p>
<p>However, when you deal with clouds, your salespeople will generally push you towards
"cloud-native" architecture.  These are things like microservices in auto-scaling VM groups with
legions of load balancers between them, and vendor-lock-in-enhancing products like serverless
computing and managed high-availability databases.  There is a good reason that cloud
salespeople are the ones pushing "cloud architecture" - it's better for them!</p>
<p>The conventional wisdom is that using cloud architecture is good because it lets you scale up
effortlessly. There are good reasons to use cloud-native architecture, but serving lots of people
is not one of them: most services can serve millions of people at a time with one server, and
will never give you a surprise five-figure bill.</p>
<h4 id="why-should-i-pay-for-peak-load">Why Should I Pay for Peak Load?</h4>
<p>One common criticism of the "one big server" approach is that you now have to pay for your peak
usage instead of paying as you go for what you use.  Thus, serverless computing or fleets of
microservice VMs more closely align your costs with your profit.</p>
<p>Unfortunately, since all of your services run on servers (whether you like it or not), someone
in that supply chain is charging you based on their peak load.  Part of the "cloud premium" for
load balancers, serverless computing, and small VMs is based on how much extra capacity your
cloud provider needs to build in order to handle <em>their</em> peak load.  You're paying for someone's
peak load anyway!</p>
<p>This means that if your workload is exceptionally bursty - like a simulation that needs
to run once and then turn off forever - you should prefer to reach for "cloudy" solutions, but if
your workload is not so bursty, you will often have a cheaper system (and an easier time building
it) if you go for few large servers.  If your cloud provider's usage is more bursty than yours,
you are going to pay that premium for no benefit.</p>
<p>This premium applies to VMs, too, not just cloud services. However, if you are running a cloud VM
24/7, you can avoid paying the "peak load premium" by using 1-year contracts or negotiating with
a salesperson if you are big enough.</p>
<p>Generally, the burstier your workload is, the more cloudy your architecture should be.</p>
<h4 id="how-much-does-it-cost-to-be-cloudy">How Much Does it Cost to be Cloudy?</h4>
<p>Being cloudy is expensive.  Generally, I would anticipate a 5-30x price premium depending on what
you buy from a cloud company, and depending on the baseline. <em>Not 5-30%, a factor of between 5 and
30.</em></p>
<p>Here is the pricing of AWS lambda: $0.20 per 1M requests + $0.0000166667 per GB-second of RAM.  I
am using pricing for an x86 CPU here to keep parity with the m6a.metal instance we saw above.
Large ARM servers and serverless ARM compute are both cheaper.</p>
<p>Assuming your server costs $8.2944/hour, and is capable of 1k QPS with 768 GB of RAM:</p>
<ul>
<li>
<p>1k QPS is 60k queries per minute, or 3.6M queries per hour</p>
</li>
<li>
<p>Each query here gets 0.768 GB-seconds of RAM (amortized)</p>
</li>
<li>
<p>Replacing this server would cost about $46/hour using serverless computing</p>
</li>
</ul>
<p>The price premium for serverless computing over the instance is a factor of 5.5.  If you can keep
that server over 20% utilization, using the server will be cheaper than using serverless computing.
This is before any form of savings plan you can apply to that server - if you can rent those big
servers from the spot market or if you compare to the price you can get with a 1-year contract,
the price premium is even higher.</p>
<p><em><strong>If you compare to the OVHCloud rental price for the same server, the price premium of buying your
compute through AWS lambda is a factor of 25</strong></em></p>
<p>If you are considering renting a server from a low-cost hosting provider or using AWS lambda, you
should prefer the hosting provider if you can keep the server operating at 5% capacity!</p>
<p>Also, note that the actual QPS number doesn't matter: if the $8.2944/hour server is capable of 100k
QPS, the query would use 100x less memory-time, meaning that you would arrive at the same 5.5x
(or 25x) premium. Of course, you should scale the size of the server to fit your application.</p>
<h2 id="common-objections-to-one-big-server">Common Objections to One Big Server</h2>
<p>If you propose using the one big server approach, you will often get pushback from people who are
more comfortable with the cloud, prefer to be fashionable, or have legitimate concerns.  Use your
judgment when you think about it, but most people vastly underestimate how much "cloud
architecture" actually costs compared to the underlying compute.  Here are some common objections.</p>
<h4 id="but-if-i-use-cloud-architecture-i-dont-have-to-hire-sysadmins">But if I use Cloud Architecture, I Don't Have to Hire Sysadmins</h4>
<p>Yes you do.  They are just now called "Cloud Ops" and are under a different manager. Also, their
ability to read the arcane documentation that comes from cloud companies and keep up  with the
corresponding torrents of updates and deprecations makes them 5x more expensive than system
administrators.</p>
<h4 id="but-if-i-use-cloud-architecture-i-dont-have-to-do-security-updates">But if I use Cloud Architecture, I Don't Have to Do Security Updates</h4>
<p>Yes you do.  You may have to do fewer of them, but the ones you don't have to do are the easy ones
to automate.  You are still going to share in the pain of auditing libraries you use, and making
sure that all of your configurations are secure.</p>
<h4 id="but-if-i-use-cloud-architecture-i-dont-have-to-worry-about-it-going-down">But if I use Cloud Architecture, I Don't Have to Worry About it Going Down</h4>
<p>The "high availability" architectures you get from using cloudy constructs and microservices just
about make up for the fragility they add due to complexity.  At this point, if you use two
different cloud regions or two cloud providers, you can generally assume that is good enough to
avoid your service going down.  However, cloud providers have often had global outages in the past,
and there is no reason to assume that cloud datacenters will be down any less often than your
individual servers.</p>
<p>Remember that we are trying to prevent <em>correlated</em> failures.  Cloud datacenters have a lot of
parts that can fail in correlated ways.  Hosting providers have many fewer of these parts.
Similarly, complex cloud services, like managed databases, have more failure modes than simple
ones (VMs).</p>
<h4 id="but-i-can-develop-more-quickly-if-i-use-cloud-architecture">But I can Develop More Quickly if I use Cloud Architecture</h4>
<p>Then do it, and just keep an eye on the bill and think about when it's worth it to switch.  This
is probably the strongest argument in favor of using cloudy constructs.  However, if you don't
think about it as you grow, you will likely end up burning a lot of money on your cloudy
architecture long past the time to switch to something more boring.</p>
<h4 id="my-workload-is-really-bursty">My Workload is Really Bursty</h4>
<p>Cloud away.  That is a great reason to use things like serverless computing.  One of the big
benefits of cloud architecture constructs is that the <em>scale down</em> really well.  If your workload
goes through long periods of idleness punctuated with large unpredictable bursts of activity, cloud
architecture probably works really well for you.</p>
<h4 id="what-about-cdns">What about CDNs?</h4>
<p>It's impossible to get the benefits of a CDN, both in latency improvements and bandwidth savings,
with one big server.  This is also true of other systems that need to be distributed, like backups.
Thankfully CDNs and backups are competitive markets, and relatively cheap. These are the kind of
thing to buy rather than build.</p>
<h2 id="a-note-on-microservices-and-monoliths">A Note On Microservices and Monoliths</h2>
<p>Thinking about "one big server" naturally lines up with thinking about monolithic architectures.
However, you don't need to use a monolith to use one server.  You can run many containers on one
big server, with one microservice per container.  However, microservice architectures in general
add a lot of overhead to a system for dubious gain when you are running on one big server.</p>
<h2 id="conclusions">Conclusions</h2>
<p>When you experience growing pains, and get close to the limits of your current servers, today's
conventional wisdom is to go for sharding and horizontal scaling, or to use a cloud architecture
that gives you horizontal scaling "for free."  It is often easier and more efficient to scale
vertically instead.  Using one big server is comparatively cheap, keeps your overheads at a
minimum, and actually has a pretty good availability story if you are careful to prevent correlated
hardware failures.  It's not glamorous and it won't help your resume, but one big server will serve
you well.</p>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: How do you fight YouTube addiction and procrastination? I'm struggling (132 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=45085014</link>
            <guid>45085014</guid>
            <pubDate>Sun, 31 Aug 2025 17:27:17 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=45085014">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="bigbox"><td><table><tbody><tr id="45085014"><td><span></span></td><td><center><a id="up_45085014" href="https://news.ycombinator.com/vote?id=45085014&amp;how=up&amp;goto=item%3Fid%3D45085014"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=45085014">Ask HN: How do you fight YouTube addiction and procrastination? I'm struggling</a></span></td></tr><tr><td colspan="2"></td><td><span><span id="score_45085014">105 points</span> by <a href="https://news.ycombinator.com/user?id=angelochecked">angelochecked</a> <span title="2025-08-31T17:27:17 1756661237"><a href="https://news.ycombinator.com/item?id=45085014">7 hours ago</a></span> <span id="unv_45085014"></span> | <a href="https://news.ycombinator.com/hide?id=45085014&amp;goto=item%3Fid%3D45085014">hide</a> | <a href="https://hn.algolia.com/?query=Ask%20HN%3A%20How%20do%20you%20fight%20YouTube%20addiction%20and%20procrastination%3F%20I%27m%20struggling&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=45085014&amp;auth=4ce2c00ea8f5ec1678f7c52d34f2182ba5d4a83d">favorite</a> | <a href="https://news.ycombinator.com/item?id=45085014">99&nbsp;comments</a></span></td></tr><tr><td colspan="2"></td><td><div><p>My current daily routine looks like this:</p><p>- 8:00~9:00 – Getting ready for work</p><p>- 9:00–13:00 – Work</p><p>- 13:00–14:00 – Lunch + YouTube</p><p>- 14:00–18:00 – Work</p><p>- 18:00–20:00 – Break from work + Dinner + YouTube</p><p>- 20:00~1:00 – YouTube, gaming, occasional events, personal projects, or sports. Lately, I’ve noticed my screen time during this period has increased a lot, and I’ve been feeling lazy to do anything productive—mostly just doomscrolling or watching videos</p><p>What’s your routine like? How do you manage your time, maintain social connections, avoid digital distractions, and stay on track with your goals and learning?</p></div></td></tr><tr></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr></tbody></table><br>
</td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[When the sun will literally set on what's left of the British Empire (208 pts)]]></title>
            <link>https://oikofuge.com/sun-sets-on-british-empire/</link>
            <guid>45084913</guid>
            <pubDate>Sun, 31 Aug 2025 17:15:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://oikofuge.com/sun-sets-on-british-empire/">https://oikofuge.com/sun-sets-on-british-empire/</a>, See on <a href="https://news.ycombinator.com/item?id=45084913">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		<div>
<figure><a href="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?ssl=1" target="_blank" rel=" noreferrer noopener"><img data-recalc-dims="1" fetchpriority="high" decoding="async" width="474" height="241" data-attachment-id="21378" data-permalink="https://oikofuge.com/june-solstice-terminator/" data-orig-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?fit=1600%2C814&amp;ssl=1" data-orig-size="1600,814" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Without British Indian Ocean Territory, night falls on the British Empire, June" data-image-description="<p>Without British Indian Ocean Territory, night falls on the British Empire, June</p>
" data-image-caption="" data-medium-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?fit=300%2C153&amp;ssl=1" data-large-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?fit=474%2C241&amp;ssl=1" src="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?resize=474%2C241&amp;ssl=1" alt="Without British Indian Ocean Territory, night falls on the British Empire, June" srcset="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?resize=1024%2C521&amp;ssl=1 1024w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?resize=300%2C153&amp;ssl=1 300w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?resize=768%2C391&amp;ssl=1 768w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?resize=1536%2C781&amp;ssl=1 1536w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?w=948&amp;ssl=1 948w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/June-solstice-terminator.png?w=1422&amp;ssl=1 1422w" sizes="(max-width: 474px) 100vw, 474px"></a><figcaption>Click to enlarge</figcaption></figure></div>


<p>A while ago I treated you to a dissertation entitled “<a href="https://oikofuge.com/sun-set-british-empire/" data-type="link" data-id="https://oikofuge.com/sun-set-british-empire/" target="_blank" rel="noreferrer noopener">Does The Sun Set On The British Empire?</a>”, and concluded that it doesn’t. The UK’s widely scattered overseas territories, sparse though they are, mean that the sun is still always shining, somewhere in the world, over British territory.</p>



<p>The most important territories in maintaining this late-empire sunlight are the Pitcairn Islands, in the Pacific, and the British Indian Ocean Territory, in the Indian Ocean. To illustrate that, I offered the sunlight chart below, showing how Pitcairn and BIOT catch the sunlight when it’s dark in the UK.</p>


<div>
<figure><a href="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?ssl=1" target="_blank" rel=" noreferrer noopener"><img data-recalc-dims="1" decoding="async" width="474" height="301" data-attachment-id="20922" data-permalink="https://oikofuge.com/britishempiresunset3/" data-orig-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?fit=1200%2C763&amp;ssl=1" data-orig-size="1200,763" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Sunrise and sunset in Greenwich, Pitcairn &amp; BIOT" data-image-description="<p>Sunrise and sunset in Greenwich, Pitcairn &amp; BIOT</p>
" data-image-caption="<p>Click to enlarge</p>
" data-medium-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?fit=300%2C191&amp;ssl=1" data-large-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?fit=474%2C301&amp;ssl=1" src="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?resize=474%2C301&amp;ssl=1" alt="Sunrise and sunset in Greenwich, Pitcairn &amp; BIOT" srcset="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?resize=1024%2C651&amp;ssl=1 1024w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?resize=300%2C191&amp;ssl=1 300w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?resize=768%2C488&amp;ssl=1 768w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?w=1200&amp;ssl=1 1200w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset3.png?w=948&amp;ssl=1 948w" sizes="(max-width: 474px) 100vw, 474px"></a><figcaption>Click to enlarge</figcaption></figure></div>


<p>In fact, as my map at the head of this post shows, BIOT is pivotal. There, I’ve plotted the distribution of light and darkness, across the globe, at 02:15 Greenwich Mean Time, during the June solstice of 2024.<strong><mark>*</mark></strong></p>



<p>And here’s the situation at the December solstice:</p>


<div>
<figure><a href="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?ssl=1" target="_blank" rel=" noreferrer noopener"><img data-recalc-dims="1" decoding="async" width="474" height="241" data-attachment-id="21377" data-permalink="https://oikofuge.com/december-solstice-terminator/" data-orig-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?fit=1600%2C814&amp;ssl=1" data-orig-size="1600,814" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Without British Indian Ocean Territory, night falls on the British Empire, December" data-image-description="<p>Without British Indian Ocean Territory, night falls on the British Empire, December</p>
" data-image-caption="<p>Click to enlarge</p>
" data-medium-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?fit=300%2C153&amp;ssl=1" data-large-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?fit=474%2C241&amp;ssl=1" src="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?resize=474%2C241&amp;ssl=1" alt="Without British Indian Ocean Territory, night falls on the British Empire, December" srcset="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?resize=1024%2C521&amp;ssl=1 1024w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?resize=300%2C153&amp;ssl=1 300w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?resize=768%2C391&amp;ssl=1 768w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?resize=1536%2C781&amp;ssl=1 1536w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?w=948&amp;ssl=1 948w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/12/December-solstice-terminator.png?w=1422&amp;ssl=1 1422w" sizes="(max-width: 474px) 100vw, 474px"></a><figcaption>Click to enlarge</figcaption></figure></div>


<p>Just after the sun sets in Pitcairn, it’s dark over every British territory except BIOT.</p>



<p>I’m revisiting the situation because the UK government has announced plans to hand over sovereignty of the Chagos Archipelago, which houses BIOT, to Mauritius. The announcement was made in October 2024, but the original agreement has now been contested by a new government in Mauritius. And the situation is further complicated by the fact that BIOT houses a large US military base on the island of Diego Garcia, so the new Trump administration also has a say in the process. (Meanwhile, the unfortunate Chagossians, evicted from their homeland in 1968 to make way for the military base, have so far been given no voice in the negotiations.)</p>



<p>The current proposal suggests that the military base would be maintained under a long-term lease agreement, in which case British sovereignty would be lost, and BIOT would cease to exist. At that point, the role of easternmost British territory would fall to the Sovereign Base Areas (SBAs), in Cyprus.</p>



<p>The SBAs are worth a few paragraphs, both because they’re relatively obscure, and because their existence, as sovereign military territories, perhaps has some slight relevance to how the situation on Diego Garcia might play out, should the Trump administration raise strong objections to the current plan.</p>



<p>The SBAs came into existence when Cyprus gained its independence from the UK in 1960. Under the Treaty of Establishment, the UK retained sovereignty over about 250 square kilometres of the island, in two separate areas—the Western Sovereign Base Area of Akrotiri, and the Eastern Sovereign Base Area of Dhekelia. These have extremely complicated boundaries, designed to avoid Cypriot settlements while including British military establishments. The Eastern SBA contains three Cypriot enclaves—the towns of Ormideia and Xylotymbou, and the area surrounding the Dhekelia power station (which is crossed by a British road). It also features a long northward extension along the road to the village of Ayios Nikolaos, which now houses a signals intelligence unit.</p>



<p>And the whole border situation became even more complicated after the Turkish invasion of Cyprus in 1974, which has left the island traversed by a UN buffer zone. British territory, including the Ayios Nikolaos road, forms part of the buffer zone. Elsewhere, the Turkish-controlled town of Kokkina has its very own buffer zone. Here’s an overview map, followed by some detail of the SBAs:</p>







<p>(Interestingly, the British military settlements within the SBAs are referred to as <em>cantonments</em>, a military term which, to me at least, has something of a colonial ring to it, given its association with British rule in India.)</p>



<p>The relevance, here, to the current situation of Diego Garcia, is because the UK government made plans to hand the SBAs back to Cyprus in 1974, but were persuaded to retain sovereignty by the USA, which valued access to signals intelligence in the Eastern Mediterranean, as well as a convenient location from which to fly, among other things, <a href="https://web.archive.org/web/20181011213916/https://cyprus-mail.com/2018/10/11/anastasiades-stays-mum-on-secret-us-base/" data-type="link" data-id="https://web.archive.org/web/20181011213916/https://cyprus-mail.com/2018/10/11/anastasiades-stays-mum-on-secret-us-base/" target="_blank" rel="noreferrer noopener">U2 spy planes</a>. The difference, of course, is that the Cypriot government appears to have been compliant with that arrangement, whereas it seems unlikely, at time of writing, that the Mauritians would agree to such a deal.</p>



<p>We’ll see how it goes. Meanwhile, I’ve plotted another sunrise/sunset graph, showing how sunlight is handed off between the two key players in the absence of BIOT: </p>


<div>
<figure><a href="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?ssl=1" target="_blank" rel=" noreferrer noopener"><img data-recalc-dims="1" loading="lazy" decoding="async" width="474" height="303" data-attachment-id="21004" data-permalink="https://oikofuge.com/britishempiresunset4/" data-orig-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?fit=1200%2C766&amp;ssl=1" data-orig-size="1200,766" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Without BIOT, night falls on the British Empire, between sunset in Pitcairn and sunrise in the Sovereign Base Areas, Cyprus" data-image-description="<p>Without BIOT, night falls on the British Empire, between sunset in Pitcairn and sunrise in the Sovereign Base Areas, Cyprus</p>
" data-image-caption="<p>Click to enlarge</p>
" data-medium-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?fit=300%2C192&amp;ssl=1" data-large-file="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?fit=474%2C303&amp;ssl=1" src="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?resize=474%2C303&amp;ssl=1" alt="Without BIOT, night falls on the British Empire, between sunset in Pitcairn and sunrise in the Sovereign Base Areas, Cyprus" srcset="https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?resize=1024%2C654&amp;ssl=1 1024w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?resize=300%2C192&amp;ssl=1 300w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?resize=768%2C490&amp;ssl=1 768w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/oikofuge.com/wp-content/uploads/2024/10/britishempiresunset4.jpg?w=948&amp;ssl=1 948w" sizes="auto, (max-width: 474px) 100vw, 474px"></a><figcaption>Click to enlarge</figcaption></figure></div>


<p>(For my sunlight calculation, I’ve plugged in the latitude and longitude of the easternmost part of the Eastern SBA—Ayios Nikolaos.)</p>



<p>It’s close—in June there’s less than an hour when it’s dark in both Pitcairn and the SBAs. But, if BIOT goes, when the sun sets on Pitcairn, it will also set on (what’s left of) the British Empire.</p>



<hr>



<p><strong><mark>*</mark></strong> <small>I haven’t plotted British Antarctic Territory, because territorial claims in Antarctica are in abeyance under the Antarctic Treaty.</small></p>





	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I Don't Have Spotify (216 pts)]]></title>
            <link>https://idonthavespotify.sjdonado.com/</link>
            <guid>45084673</guid>
            <pubDate>Sun, 31 Aug 2025 16:50:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://idonthavespotify.sjdonado.com/">https://idonthavespotify.sjdonado.com/</a>, See on <a href="https://news.ycombinator.com/item?id=45084673">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Paste a link from Spotify, YouTube Music, Apple Music, Deezer or SoundCloud to start.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Family of MSFT employee who died warn tech companies not to overwork workers (122 pts)]]></title>
            <link>https://padailypost.com/2025/08/29/family-of-microsoft-employee-who-died-warn-tech-companies-not-to-overwork-workers/</link>
            <guid>45084370</guid>
            <pubDate>Sun, 31 Aug 2025 16:22:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://padailypost.com/2025/08/29/family-of-microsoft-employee-who-died-warn-tech-companies-not-to-overwork-workers/">https://padailypost.com/2025/08/29/family-of-microsoft-employee-who-died-warn-tech-companies-not-to-overwork-workers/</a>, See on <a href="https://news.ycombinator.com/item?id=45084370">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-37169">
	
		<div>
<figure>
<img src="https://padailypost.com/wp-content/uploads/2025/08/Pratik-Pandey-610x381.png" alt="" title="Pratik Pandey">
<figcaption>Pratik Pandey</figcaption>
</figure>


<p>BY BRADEN CARTWRIGHT<br>Daily Post Staff Writer</p>



<p>Relatives of a man who died at Microsoft’s office in Mountain View are calling on tech companies to stop pressuring their employees to overwork themselves.</p>



<p>Pratik Pandey, 35, of Menlo Park, was found face down around 2 a.m. on Aug. 20 at 1045 La Avenida Ave.</p>



<p>Pandey had told his roommate and colleagues that he was under a lot of stress, juggling multiple projects at the same time, community leader Satish Chandra said in an interview Thursday.</p>



<p>The initial assessment by the Santa Clara County Medical Examiner indicated that Pandey suffered a heart attack, and he didn’t have any known health issues leading up to his death, Chandra said.</p>



<p>Pandey’s uncle, Manoj Pandey, said Pandey was a very jubilant, hard-work-ing and successful young man.</p>



<p>His colleagues and classmates said he was always helpful, and he liked playing soccer, ping pong and cricket.</p>



<p>“Overall, a very positive person,” his uncle said.</p>



<p>Pandey was born in Indore, India, and immigrated to the United States a decade ago to get a master’s degree from San Jose State University.</p>



<p>Pandey worked as a software engineer at Apple, Illumina and Walmart Labs before landing at Microsoft in July 2020.</p>



<p>On the night of his death, Pandey scanned his badge to get into the office at 7:50 p.m., and he was found in the courtyard about six hours later, his uncle said.</p>



<p>Pandey’s roommates and friends relayed that he continuously worked late nights for a “very extended period of time,” his uncle said.</p>



<p>Pandey’s uncle said tech companies should notice when employees are coming in late at night and do something to relieve their pressure and anxiety.</p>



<p>“That will probably save a life,” he said.</p>



<p>Friends and family hosted a viewing for Pandey today (Friday, Aug. 29) in Fremont before sending his remains to India, where his parents and two sisters live. The viewing of the remains is important for their Hindu culture, his uncle said.</p>



<p>“It’s a lot of pain for the family when a loved one passes away,” he said.</p>
	</div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[10-20x Faster LLVM -O0 Back-End (2020) (112 pts)]]></title>
            <link>https://discourse.llvm.org/t/tpde-llvm-10-20x-faster-llvm-o0-back-end/86664</link>
            <guid>45084111</guid>
            <pubDate>Sun, 31 Aug 2025 15:50:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://discourse.llvm.org/t/tpde-llvm-10-20x-faster-llvm-o0-back-end/86664">https://discourse.llvm.org/t/tpde-llvm-10-20x-faster-llvm-o0-back-end/86664</a>, See on <a href="https://news.ycombinator.com/item?id=45084111">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemscope="" itemtype="http://schema.org/DiscussionForumPosting" id="main-outlet" role="main">
      <meta itemprop="headline" content="TPDE-LLVM: 10-20x Faster LLVM -O0 Back-End">
      
      <meta itemprop="datePublished" content="2025-06-02T15:44:08Z">
        <meta itemprop="articleSection" content="Code Generation">
      <meta itemprop="keywords" content="llvm">
      


          <div itemprop="text" id="post_1">
              <p>5 years ago, <a href="https://discourse.llvm.org/u/nikic">@nikic</a> <a href="https://www.npopov.com/2020/05/10/Make-LLVM-fast-again.html" rel="noopener nofollow ugc">wrote</a>:</p>
<blockquote>
<p>I can’t say a 10% improvement is making LLVM fast again, we would need a 10x improvement for it to deserve that label.</p>
</blockquote>
<p>We recently open-sourced <a href="https://github.com/tpde2/tpde" rel="noopener nofollow ugc">TPDE</a> and our fast LLVM baseline back-end (TPDE-LLVM), which is 10-20x faster than the LLVM -O0 back-end with similar runtime performance and 10-30% larger code size. We support a typical subset of LLVM-IR and only target x86-64 and AArch64. Posting this here, as this might be interesting for the LLVM community – questions/comments welcome!</p>
<p>Data on SPEC CPU 2017 (x86-64, compile-time speedup and code size relative to LLVM 19 -O0 back-end):</p>
<div>
<table>
<thead>
<tr>
<th>Benchmark</th>
<th>Comp-Time O0 IR</th>
<th>Code Size O0 IR</th>
<th>Comp-Time O1 IR</th>
<th>Code Size O1 IR</th>
</tr>
</thead>
<tbody>
<tr>
<td>600.perl</td>
<td>11.39x</td>
<td>1.27x</td>
<td>15.06x</td>
<td>0.97x</td>
</tr>
<tr>
<td>602.gcc</td>
<td>12.54x</td>
<td>1.32x</td>
<td>17.55x</td>
<td>1.01x</td>
</tr>
<tr>
<td>605.mcf</td>
<td>9.72x</td>
<td>1.27x</td>
<td>12.47x</td>
<td>0.92x</td>
</tr>
<tr>
<td>620.omnetpp</td>
<td>21.46x</td>
<td>1.24x</td>
<td>26.49x</td>
<td>1.03x</td>
</tr>
<tr>
<td>623.xalanc</td>
<td>18.99x</td>
<td>1.24x</td>
<td>24.80x</td>
<td>0.98x</td>
</tr>
<tr>
<td>625.x264</td>
<td>10.52x</td>
<td>1.26x</td>
<td>15.19x</td>
<td>0.97x</td>
</tr>
<tr>
<td>631.deepsjeng</td>
<td>9.60x</td>
<td>1.25x</td>
<td>17.56x</td>
<td>0.97x</td>
</tr>
<tr>
<td>641.leela</td>
<td>21.44x</td>
<td>1.24x</td>
<td>18.36x</td>
<td>0.95x</td>
</tr>
<tr>
<td>657.xz</td>
<td>10.95x</td>
<td>1.30x</td>
<td>15.15x</td>
<td>0.92x</td>
</tr>
<tr>
<td>geomean</td>
<td>13.34x</td>
<td>1.27x</td>
<td>17.58x</td>
<td>0.97x</td>
</tr>
</tbody>
</table>
</div><p>Results for AArch64 are similar (a bit higher speedups due to GlobalISel). Obviously, on optimized IR LLVM’s optimizing back-ends fare much better in terms of run-time (~2x better) and code size (~2x better), but we don’t intend to compete there.</p>
<h3><a name="p-345975-how-does-it-work-1" href="#p-345975-how-does-it-work-1"></a>How Does It Work?</h3>
<p>See <a href="https://arxiv.org/abs/2505.22610" rel="noopener nofollow ugc">this paper</a>. In essence, we do three passes: one IR cleanup/preparation pass, one analysis pass (loop+liveness), and one codegen pass, which performs lowering, regalloc, and machine code encoding in combination.</p>
<h3><a name="p-345975-features-future-plans-2" href="#p-345975-features-future-plans-2"></a>Features &amp; Future Plans</h3>
<p>Currently, the goal is to support typical Clang O0/O1 IR, so there are <a href="https://docs.tpde.org/tpde-llvm-main.html#autotoc_md92" rel="noopener nofollow ugc">a lot of unsupported features</a>. Flang code often works, but sometimes misses some floating-point operations. Rust code works in principle, but some popular crates use illegal (=not natively supported) vector types, which are not implemented yet. (Legalizing vector types/operations is very annoying.)</p>
<p>Besides some more IR features, our current plans include: DWARF support (we already have some prototype) and better register allocation than “spill everything”. If someone provides sufficient motivation, other big items are non-ELF platforms, non-small-PIC code models, and other targets.</p>
<h3><a name="p-345975-speculatively-answered-questions-3" href="#p-345975-speculatively-answered-questions-3"></a>Speculatively Answered Questions</h3>
<p><strong>How to use TPDE-LLVM?</strong></p>
<p>The LLVM back-end is usable as a library (e.g., for JIT compilation, also usable with ORC JIT), as <code>llc</code>-like tool, and can be integrated in Clang (needs a patch, plugins can’t provide a custom back-end right now). Some more details <a href="https://docs.tpde.org/tpde-llvm-main.html" rel="noopener nofollow ugc">here</a>.</p>
<p><strong>Why not make LLVM faster?</strong></p>
<p>We did, LLVM 18-&gt;20 got <a href="https://llvm.org/devmtg/2025-04/slides/technical_talk/engelke_faster.pdf" rel="noopener nofollow ugc">18% faster on x86-64</a>. I think that another 10-20% might be reasonable to achieve, but I’d expect going beyond that to require deeper changes. Even when doing this, a 10x speedup is <em>unlikely</em> to be achievable.</p>
<p><strong>Which changes to LLVM-IR could allow even faster compilation?</strong></p>
<ul>
<li>No <code>ConstantExpr</code> inside functions. These are hard to handle, so before compilation, we rewrite them to instructions – by iterating over all instruction operands to find such constants (and also walk through constant aggregates).</li>
<li>No arbitrarily-sized struct/array values. The only (IMHO) valid reason for struct/array values inside functions are arguments (e.g. AArch64 HFA/HVA) and multiple return values, but there’s no point in loading a <code>[6000 x {i32, i64}]</code>. (We currently have quadratic runtime in the number of elements per value.)</li>
</ul>
<p>Not directly related to performance, but would make things easier:</p>
<ul>
<li>No direct access to thread-local globals (see e.g. the proposal <a href="https://discourse.llvm.org/t/address-thread-identification-problems-with-coroutine/62015/25">here</a>). We cannot easily generate a function call at arbitrary places, so we rewrite all accesses to use the intrinsic.</li>
<li>No arbitrary bit-width arithmetic. <code>i260</code> doesn’t work well already, yet Clang occasionally generates this (bitfield structs) – we don’t support multi-word integers other than <code>i128</code>.</li>
</ul>
<h3><a name="p-345975-random-fun-facts-4" href="#p-345975-random-fun-facts-4"></a>Random “Fun” Facts</h3>
<ul>
<li>We currently use <a href="https://github.com/tpde2/tpde/blob/f6e87d2e97f49f403c12a27e7cf513a44f0f5dbc/tpde-llvm/src/LLVMAdaptor.hpp#L30-L42" rel="noopener nofollow ugc">4 padding bytes in <code>Instruction</code></a> to store instruction numbers, as there is no field to store auxiliary data.</li>
<li><code>PHINode::getIncomingValForBlock</code> causes quadratic compile-time for blocks with many predecessors. Thus, for blocks with &gt;1k predecessors (happens for auto-generated code), we sort incoming entries by block pointer and use binary search.</li>
<li><code>llvm::successors</code> is slow, so we collect and cache successors once. (This could be changed, <code>SwitchInst</code> should store blocks together instead of interleaved with <code>ConstantInt</code>. Maybe even make <code>SwitchInst</code> store <code>uint64_t</code>s instead of arbitrary-width integer?)</li>
<li>We track the performance of <code>tpde-llc</code> (similar to LLVM c-t-t), but ~90% (77-95%) of the time is spent in bitcode parsing…</li>
</ul>
            </div>
          <div id="post_2" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            
            <p>I guess you meant “Compile <em>Speed</em> O0/O1 IR” rather than compile <em>time</em></p>

            

          </div>
          <div itemprop="comment" id="post_3" itemscope="" itemtype="http://schema.org/Comment">
              
<p>could you elaborate this a little further? To me this sentence implies that GlobalISel is slower than SelectionDAGISel (and thus TPDE achieved a higher speed up), but I thought GlobalISel should be generally faster than SelectionDAGISel, is that not the case here?</p>

<p>Combining this and a statement later saying that multi-word integers other than <code>i128</code> are currently not supported, could you briefly talk about the support status of type legalization in TPDE? And do you think type legalization will become a compilation time bottleneck if it’s supported?</p>
            </div>
          <div itemprop="comment" id="post_4" itemscope="" itemtype="http://schema.org/Comment">
              
<p>It is. I was referring to GlobalISel -O0 vs. FastISel, where GlobalISel is slower.</p>

<p>We don’t really do legalization. We lower every type to one or more “basic types” (similar to MVT or LLT), so e.g. <code>i128</code> becomes <code>i128,i128</code> (two 64-bit parts), <code>i54</code> becomes <code>i64</code>. When compiling an instruction, the instruction has to check its type and do ad-hoc legalization as required, e.g. sign/zero-extend integers the <code>i54</code> to an <code>i64</code> before a division.</p>
<p>The big problem are vector types, and right now, we simply don’t support illegal vector types. Going forward, I don’t think supporting element types other than i1/i8/i16/i32/i64/ptr/half/bfloat/float/double is reasonable, which already simplifies things. For the restricted element types, the current plan is to always scalarize illegal types (e.g., <code>&lt;6 x i8&gt;</code> would behave like <code>[6 x i8]</code>, except that it supports arithmetic operations and casts) and be deliberately incompatible with LLVM’s undocumented ABI. <code>i1</code> vectors might need special handling. (Alternatively, rewrite the IR to get rid of such types. But as such types are rare and we already look at all instructions for type lowering, I think even this could be detected cheaply without much cost for the common case.)</p>
<p>I don’t think other non-obscure types need legalization?</p>

<p>No, I don’t think so. Just a <em>lot</em> of effort for little gain. (I’d rather have front-end not emit illegal types in the first place… unlikely to happen, though.)</p>
            </div>
          <div id="post_5" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://discourse.llvm.org/u/comex"><span itemprop="name">comex</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-06-03T00:26:28Z">
                    June 3, 2025, 12:26am
                  </time>
                  <meta itemprop="dateModified" content="2025-06-03T00:26:28Z">
              <span itemprop="position">5</span>
              </span>
            </p>
            <p>Those are some extremely impressive numbers.  Do you plan to upstream this as part of LLVM?</p>

            

          </div>
          <div itemprop="comment" id="post_6" itemscope="" itemtype="http://schema.org/Comment">
              
<p>Well, this is already some form or type legalization <img src="https://emoji.discourse-cdn.com/google/slight_smile.png?v=14" title=":slight_smile:" alt=":slight_smile:" loading="lazy" width="20" height="20"> Some of the things you described here is not really far away from what LLVM is doing. (P.S. I think it should be “<code>i128</code> becomes <code>i64,i64</code> (two 64-bit parts)”)</p>

<p>I think whether a type is non-obscure or not really depends on the target architectures. For instance, i8/i16/i32/i64 might be considered normal or reasonable for X86 but in AArch64 both i8 and i16 are illegal scalar types; by default RISC-V only has a single legal integer scalar type (i.e. i32 for rv32 and i64 for rv64). Therefore, the need for type legalization might be more prevailing in architectures other than X86. That being said, I agree that type legalization for vectors is hard and scalarize it seems to be a good starting point.</p>
<p>Don’t get me wrong, I think 10x ~ 20x is an impressive speed up. The reason I’m interested in legalization here is because it’s the key correctness – after all, no matter how fast the compiler is, it has to generate correct code.</p>
            </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[No clicks, no content: The unsustainable future of AI search (129 pts)]]></title>
            <link>https://bradt.ca/blog/no-clicks-no-content/</link>
            <guid>45084016</guid>
            <pubDate>Sun, 31 Aug 2025 15:37:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bradt.ca/blog/no-clicks-no-content/">https://bradt.ca/blog/no-clicks-no-content/</a>, See on <a href="https://news.ycombinator.com/item?id=45084016">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<header>
		<a href="https://bradt.ca/" title="Go to the homepage">
			<img src="https://www.gravatar.com/avatar/e538ca4cb34839d4e5e3ccf20c37c67b?size=200" alt="">
		</a>
	</header>

<section>

	
		<article>

			<header>
				

				
			</header>

			<section>
				
<figure><img fetchpriority="high" decoding="async" width="1024" height="576" src="https://uploads.bradt.ca/content/uploads/2025/08/31122038/oleksandr-sushko-dDy07Wmz0_U-unsplash-1024x576.jpg" alt="" srcset="https://uploads.bradt.ca/content/uploads/2025/08/31122038/oleksandr-sushko-dDy07Wmz0_U-unsplash-1024x576.jpg 1024w, https://uploads.bradt.ca/content/uploads/2025/08/31122038/oleksandr-sushko-dDy07Wmz0_U-unsplash-300x169.jpg 300w, https://uploads.bradt.ca/content/uploads/2025/08/31122038/oleksandr-sushko-dDy07Wmz0_U-unsplash-768x432.jpg 768w, https://uploads.bradt.ca/content/uploads/2025/08/31122038/oleksandr-sushko-dDy07Wmz0_U-unsplash-1536x864.jpg 1536w, https://uploads.bradt.ca/content/uploads/2025/08/31122038/oleksandr-sushko-dDy07Wmz0_U-unsplash-2048x1152.jpg 2048w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>



<p><em>AI companies are causing a content drought that will eventually starve them.</em></p>



<p>In a <a href="https://www.economist.com/business/2025/07/14/ai-is-killing-the-web-can-anything-save-it">recent article</a>, The Economist didn’t mince words: “AI is killing the web.” Published last month, the piece raises urgent questions about how artificial intelligence is reshaping the internet as we know it: ChatGPT, Google, and its competitors are rapidly diverting traffic from publishers. Publishers are fighting&nbsp; to survive through lawsuits, partnerships, paywalls, and micropayments. It’s pretty bleak, but unfortunately I think the situation is far worse than it seems.</p>



<p>The article focuses mainly on the publishing industry, news and magazine sites that rely primarily on visits to their sites and selling ads. This is hardly new for the publishing industry. Televisions arrived in living rooms in the 60s disrupting print and radio media, in the late 90s and early 2000s the internet further devastated the print business, and social media was stealing attention well before the advent of AI. But it’s not just the publishing industry. There’s a much larger economy being disrupted by generative AI platforms.</p>



<p>For the past 25 years, online businesses have relied on people searching Google for information and clicking through to their sites to get the information. For example, a business that sells dirt bikes might create a comprehensive guide to winterize a cottage. People search for information on winterizing their cottage, click through to the dirt bike company’s guide, and are then exposed to the company’s brand, maybe join their email list, and maybe buy their products or services.</p>



<p>Now that ChatGPT and Google are serving the information up to people, there’s little reason to click through to the site. If you’ve used Google search lately, you’ll have noticed an AI blurb responding to your query before you even see a list of links. The result: less clicks on the links.</p>



<p>So the question follows, if fewer and fewer people are visiting your company site, what’s your incentive to produce and maintain high quality content?</p>



<p>Worse yet, ChatGPT and Google rely on the content produced by businesses to train their AI models. If businesses stop producing content, what happens to the answers provided by ChatGPT and Google?</p>



<p>Could AI companies be this short sighted?</p>



<p>In short: Yes. This is a gold rush mentality. And like any gold rush, there’s little attention paid to the long term. It’s get rich quick and we’ll deal with the consequences later. It’s a race to become the dominant force in AI with no attention paid to the sustainability of their fuel source: the content.</p>



<p>However, Google doesn’t fit this profile. They’ve needed businesses and publishers to produce content all along and they know they still do.</p>



<p>We, the public, have greatly benefited from the symbiotic relationship between businesses and Google. You ask Google for something and it responds with links to the best content. Businesses want those visitors to their sites and so they want to have the best content. Although Google’s results pages have gotten worse for the public and businesses in recent years (half a page of ads at this point), the situation has largely been a win-win-win for them, businesses, and the public. </p>



<p>Businesses produced and maintained quality content, Google rewarded the businesses with visitors while diverting some to their ads, and the public got the information they were searching for. Unfortunately this symbiotic relationship is breaking down. In their effort to stay relevant and compete with ChatGPT, Google is tearing up the contract they’ve had with publishers and businesses for the past 25 years.</p>



<p>Google knows this but they seem to be pretending that they don’t. In fact, it seems that they’re scared and they don’t know what else to do. They have no other option.</p>



<p>One solution here seems to be regulation. To many, it feels like an injustice that AI companies can scrape information from sites, combine it, and serve it up to their users. The bottom line is that if the content didn’t exist to train their models, the AI companies wouldn’t be able to produce an answer.</p>



<p>Unfortunately, lawsuits so far have been going in favor of AI companies. Copyright law doesn’t seem to be a fit here, so perhaps we need new laws. I doubt they’ll come quickly enough though. Google search is rolling out AI Mode right now: no more AI blurb with links underneath. Just a ChatGPT-like interface when you do a Google search. It seems we’re already well into this trap and there doesn’t seem to be an escape.</p>



<p>Then again, there’s definitely an economic bubble here. ChatGPT is not profitable despite billions in revenue. The infrastructure is very expensive to run. Perhaps the bubble will burst, the money will dry up, and it won’t be feasible to employ generative AI for general search. Google and its competitors will use it for other things of course, but not for search. It’s hard to see this happening though. The genie is out of the bottle.</p>

				
			</section>

		</article>

		<!--
		<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
		<rdf:Description rdf:about="https://bradt.ca/blog/no-clicks-no-content/"
    dc:identifier="https://bradt.ca/blog/no-clicks-no-content/"
    dc:title="No Clicks, No Content: The Unsustainable Future of AI&nbsp;Search"
    trackback:ping="https://bradt.ca/blog/no-clicks-no-content/trackback/" />
</rdf:RDF>		-->

		


		
	
</section>






</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Jujutsu for Everyone (387 pts)]]></title>
            <link>https://jj-for-everyone.github.io/</link>
            <guid>45083952</guid>
            <pubDate>Sun, 31 Aug 2025 15:31:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jj-for-everyone.github.io/">https://jj-for-everyone.github.io/</a>, See on <a href="https://news.ycombinator.com/item?id=45083952">Hacker News</a></p>
<div id="readability-page-1" class="page">
    <div id="mdbook-help-container">
            <h2>Keyboard shortcuts</h2>
            <div>
                <p>Press <kbd>←</kbd> or <kbd>→</kbd> to navigate between chapters</p>
                <p>Press <kbd>S</kbd> or <kbd>/</kbd> to search in the book</p>
                <p>Press <kbd>?</kbd> to show this help</p>
                <p>Press <kbd>Esc</kbd> to hide this help</p>
            </div>
        </div>
    <div id="body-container">
        <!-- Work around some values being stored in localStorage wrapped in quotes -->
        

        <!-- Set the theme before any content is loaded, prevents flash -->
        

        

        <!-- Hide / unhide sidebar before it is displayed -->
        

        <nav id="sidebar" aria-label="Table of contents">
            <!-- populated by js -->
            <mdbook-sidebar-scrollbox></mdbook-sidebar-scrollbox>
            
            
        </nav>

        <div id="page-wrapper">

            <div class="page">
                
                <div id="menu-bar">
                    

                    <h2>Jujutsu for everyone</h2>

                    
                </div>

                

                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->
                

                <div id="content">
                    <main>
                        <h2 id="introduction"><a href="#introduction">Introduction</a></h2>
<p>This is a tutorial for the <a href="https://github.com/jj-vcs/jj">Jujutsu</a> version control system.
It requires <strong>no previous experience with Git</strong> or any other version control system.</p>
<p>At the time of writing, most Jujutsu tutorials are targeted at experienced Git users, teaching them how to transfer their existing Git skills over to Jujutsu.
This tutorial is my attempt to fill the void of beginner learning material for Jujutsu.
If you are already experienced with Git, I recommend <a href="https://steveklabnik.github.io/jujutsu-tutorial">Steve Klabnik's tutorial</a> instead of this one.</p>
<p>This tutorial requires you to work in the terminal.
Don't worry, there's a chapter covering some terminal basics in case you're not 100% comfortable with that yet.
The commands I tell you to run will often only work on Unix-like operating systems like Linux and Mac.
If you're on Windows (and can't switch to Linux), consider using <a href="https://learn.microsoft.com/en-us/windows/wsl/install">WSL</a>.</p>
<h2 id="how-to-read-this-tutorial"><a href="#how-to-read-this-tutorial">How to read this tutorial</a></h2>
<p>The tutorial is split into <strong>levels</strong>, which are the top-level chapters in the sidebar.
The idea is that once you complete a level, you should probably put this tutorial away for a while and practice what you've learned.
Once you're comfortable with those skills, come back for the next level.</p>
<p>There is one exception to this:
If you're here because you need to collaborate with other people, you should complete the levels 1 and 2 right away.</p>
<p>Here's an overview of the planned levels:</p>
<div><table><thead><tr><th>Level</th><th>Description</th></tr></thead><tbody>
<tr><td><strong>1</strong></td><td>The bare minimum to get started. This is only enough for the simplest use cases where you're working alone. For example, students who track and submit their homework with a Git repository can get by with only this.</td></tr>
<tr><td><strong>2</strong></td><td>The bare minimum for any sort of collaboration. Students who are working on a group project and professional software developers need to know this. Going further is highly recommended, but you can take a break after this.</td></tr>
<tr><td><strong>3</strong></td><td>Basic problem solving skills like conflict resolution and restoring files from history. Without this knowledge, it's only a matter of time until you run into trouble. Completing this level is comparable to the skill level of the average software developer.</td></tr>
<tr><td><strong>4</strong></td><td>History rewriting skills. These will allow you to iterate toward a polished version history, which pays dividends long-term. Some projects require you to have these skills in order to meet their quality standards.</td></tr>
<tr><td><strong>5</strong></td><td>Productivity boosters, advanced workflows, lesser-known CLI functions and a little VCS theory. Completing this level means you have mastered Jujutsu.</td></tr>
<tr><td><strong>6</strong></td><td>Additional topics that only come up in specific situations: tags, submodules, workspaces etc. Consider skimming the list of topics and come back once you have an actual need for it.</td></tr>
</tbody></table>
</div>
<p>Only a few levels are complete right now, the rest are on the way.</p>
<h2 id="reset-your-progress"><a href="#reset-your-progress">Reset your progress</a></h2>
<p>Throughout the tutorial, you will build an example repository.
Later chapters depend on the state of previous ones.
Losing the state of the example repo can therefore block you from making smooth progress.
This might happen for several reasons:</p>
<ul>
<li>You use the example repo for practice and experimentation.</li>
<li>You switch to a different computer or reinstall the OS.</li>
<li>You intentionally delete it to clean up your home directory.</li>
<li>The tutorial is updated significantly while you're taking a break.</li>
</ul>
<p>To solve this problem, there is a script which automates the task of resetting your progress to the <strong>start of any chapter</strong>.
To identify the chapter you want to continue with, the script expects a keyword as an argument.
Each chapter includes its precise reset command at the beginning, so you can easily copy-paste it.</p>
<div id="admonition-always-be-careful-when-executing-scripts-from-the-internet" role="note" aria-labelledby="admonition-always-be-careful-when-executing-scripts-from-the-internet-title">
<div>
<div id="admonition-always-be-careful-when-executing-scripts-from-the-internet-title">
<p>Always be careful when executing scripts from the internet!</p>
</div>
<a href="#admonition-always-be-careful-when-executing-scripts-from-the-internet"></a>
</div>
<div>
<p>The script is not complicated, you can verify that it's not doing anything malicious.
Basically, it's just the list of commands I tell you to run manually.
For convenience, it's included in the expandable text box below.
You can also download the script <a href="https://jj-for-everyone.github.io/reset.sh">here</a> and then execute it locally once you have inspected it.</p>
</div>
</div>
<details id="admonition-source-of-reset-script" role="note" aria-labelledby="admonition-source-of-reset-script-title">
<summary>

<a href="#admonition-source-of-reset-script"></a>
</summary>
<div>
<pre><code>#!/usr/bin/env bash
set -euxo pipefail

if [ "${1:-x}" = "x" ] ; then
    echo "Please provide the chapter keyword as the first argument."
    exit 1
fi
chapter="$1"

function success() {
    set +x
    echo "✅✅✅ Reset script completed successfully! ✅✅✅"
    exit 0
}

# Ensure existing user configuration does not affect script behavior.
export JJ_CONFIG=/dev/null

rm -rf ~/jj-tutorial

if ! command -v jj &gt; /dev/null ; then
    echo "ERROR: Jujutsu doesn't seem to be installed."
    echo "       Please install it and rerun the script."
    exit 1
fi

if [ "$chapter" = initialize ] ; then success ; fi

mkdir -p ~/jj-tutorial/repo
cd ~/jj-tutorial/repo
jj git init --colocate

jj config set --repo user.name "Alice"
jj config set --repo user.email "alice@local"
jj describe --reset-author --no-edit

if [ "$chapter" = log ] ; then success ; fi

if [ "$chapter" = make_changes ] ; then success ; fi

echo "# jj-tutorial" &gt; README.md
jj log -r 'none()' # trigger snapshot

if [ "$chapter" = commit ] ; then success ; fi

jj commit --message "Add readme with project title

It's common practice for software projects to include a file called
README.md in the root directory of their source code repository. As the
file extension indicates, the content is usually written in markdown,
where the title of the document is written on the first line with a
prefixed \`#\` symbol.
"

if [ "$chapter" = remote ] ; then success ; fi

git init --bare ~/jj-tutorial/remote
jj git remote add origin ~/jj-tutorial/remote
jj bookmark create main --revision @-
jj git push --bookmark main --allow-new

if [ "$chapter" = clone ] ; then success ; fi

cd ~
rm -rf ~/jj-tutorial/repo
jj git clone --colocate ~/jj-tutorial/remote ~/jj-tutorial/repo
cd ~/jj-tutorial/repo
jj config set --repo user.name "Alice"
jj config set --repo user.email "alice@local"
jj describe --reset-author --no-edit

if [ "$chapter" = github ] ; then success ; fi

if [ "$chapter" = update_bookmark ] ; then success ; fi

printf "\nThis is a toy repository for learning Jujutsu.\n" &gt;&gt; README.md
jj commit -m "Add project description to readme"

jj bookmark move main --to @-

jj git push

if [ "$chapter" = branch ] ; then success ; fi

echo "print('Hello, world!')" &gt; hello.py

jj commit -m "Add Python script for greeting the world

Printing the text \"Hello, world!\" is a classic exercise in introductory
programming courses. It's easy to complete in basically any language and
makes students feel accomplished and curious for more at the same time."

jj git clone --colocate ~/jj-tutorial/remote ~/jj-tutorial/repo-bob
cd ~/jj-tutorial/repo-bob
jj config set --repo user.name Bob
jj config set --repo user.email bob@local
jj describe --reset-author --no-edit

echo "# jj-tutorial

The file hello.py contains a script that greets the world.
It can be executed with the command 'python hello.py'.
Programming is fun!" &gt; README.md
jj commit -m "Document hello.py in README.md

The file hello.py doesn't exist yet, because Alice is working on that.
Once our changes are combined, this documentation will be accurate."

jj bookmark move main --to @-
jj git push

cd ~/jj-tutorial/repo
jj bookmark move main --to @-
jj git fetch

if [ "$chapter" = show ] ; then success ; fi

if [ "$chapter" = merge ] ; then success ; fi

jj new main@origin @-

jj commit -m "Merge code and documentation for hello-world"
jj bookmark move main --to @-
jj git push

if [ "$chapter" = ignore ] ; then success ; fi

cd ~/jj-tutorial/repo-bob

tar czf submission_alice_bob.tar.gz README.md

echo "
## Submission

Run the following command to create the submission tarball:

~~~sh
tar czf submission_alice_bob.tar.gz [FILE...]
~~~" &gt;&gt; README.md

echo "*.tar.gz" &gt; .gitignore

jj file untrack submission_alice_bob.tar.gz

jj commit -m "Add submission instructions"

if [ "$chapter" = rebase ] ; then success ; fi

jj bookmark move main --to @-
jj git fetch
jj rebase --destination main@origin
jj git push

if [ "$chapter" = more_bookmark ] ; then success ; fi

cd ~/jj-tutorial/repo

echo "for (i = 0; i &lt; 10; i = i + 1):
    print('Hello, world!')" &gt; hello.py

jj commit -m "WIP: Add for loop (need to fix syntax)"

jj git push --change @-

if [ "$chapter" = navigate ] ; then success ; fi

jj git fetch
jj new main

if [ "$chapter" = undo ] ; then success ; fi

echo "print('Hallo, Welt!')" &gt;&gt; hello.py
echo "print('Bonjour, le monde!')" &gt;&gt; hello.py

jj commit -m "code improvements"

jj undo

jj commit -m "Print German and French greetings as well"

jj undo
jj undo
jj undo

jj redo
jj redo
jj redo

if [ "$chapter" = track ] ; then success ; fi

cd ~ # move out of the directory we're about to delete
rm -rf ~/jj-tutorial/repo
jj git clone --colocate ~/jj-tutorial/remote ~/jj-tutorial/repo
cd ~/jj-tutorial/repo

# roleplay as Alice
jj config set --repo user.name "Alice"
jj config set --repo user.email "alice@local"
jj describe --reset-author --no-edit

echo "print('Hallo, Welt!')" &gt;&gt; hello.py
echo "print('Bonjour, le monde!')" &gt;&gt; hello.py
jj commit -m "Print German and French greetings as well"

jj bookmark move main -t @-
jj git push

jj bookmark track 'glob:push-*@origin'

if [ "$chapter" = conflict ] ; then success ; fi

jj new 'description("WIP: Add for loop")'

echo "for _ in range(10):
    print('Hello, world!')" &gt; hello.py

jj commit -m "Fix loop syntax"

jj new main @-

echo "for _ in range(10):
    print('Hello, world!')
    print('Hallo, Welt!')
    print('Bonjour, le monde!')" &gt; hello.py

jj commit -m "Merge repetition and translation of greeting"
jj bookmark move main --to @-
jj git push

if [ "$chapter" = abandon ] ; then success ; fi

jj commit -m "Experiment: Migrate to shiny new framework"
jj git push --change @-
jj new main
jj commit -m "Experiment: Improve scalability using microservices"
jj git push --change @-
jj new main
jj commit -m "Experiment: Apply SOLID design patterns"
jj git push --change @-
jj new main

jj abandon 'description("Experiment")'

jj git push --deleted

if [ "$chapter" = restore ] ; then success ; fi

rm README.md
jj show &amp;&gt; /dev/null

jj restore README.md

jj restore --from 'description("Fix loop syntax")' hello.py

jj commit -m "Remove translations"
jj bookmark move main --to @-
jj git push

if [ "$chapter" = complete ] ; then success ; fi

set +x
echo "Error: Didn't recognize the chapter keyword: '$chapter'."
exit 1
</code></pre>
</div>
</details>
<h2 id="stay-up-to-date"><a href="#stay-up-to-date">Stay up to date</a></h2>
<p>Both this tutorial and Jujutsu are still evolving.
In order to keep your Jujutsu knowledge updated, <strong>subscribe to releases of the tutorial's GitHub repo</strong>.
You will be notified of important changes:</p>
<ul>
<li>A new level becomes available.</li>
<li>An existing level is changed significantly.</li>
</ul>
<p>I especially intend to keep this tutorial updated as new version of Jujutsu come out with features and changes that are relevant to the tutorial's content.
I consider this tutorial up-to-date with the latest version of Jujutsu (<code>0.32</code>) as of <strong>August 2025</strong>.
If that's more than a couple months in the past, I probably stopped updating this tutorial.</p>
<p>You can subscribe to these updates by visiting the <a href="https://github.com/jj-for-everyone/jj-for-everyone.github.io">GitHub repo</a> and clicking on "Watch", "Custom" and then selecting "Releases".</p>
<p><img src="https://jj-for-everyone.github.io/watch_releases.png" alt="screenshot of how to subscribe to release announcements"></p>
<h2 id="help-make-this-tutorial-better"><a href="#help-make-this-tutorial-better">Help make this tutorial better</a></h2>
<p>If you find a typo, you can suggest a fix directly by clicking on the "edit" icon in the top-right corner.
If you have general suggestions for improvement, please <a href="https://github.com/jj-for-everyone/jj-for-everyone.github.io/issues/new">open an issue</a>.
I am also very interested in experience reports, for example:</p>
<ul>
<li>Do you have any frustrations with Jujutsu which the tutorial did not help you overcome?</li>
<li>Was there a section that wasn't explained clearly?
(If you didn't understand something, it's probably the tutorial's fault, not yours!)</li>
<li>Did you complete a level but didn't feel like you had the skills that were promised in the level overview?</li>
<li>Is there something missing that's not being taught but should?</li>
<li>Do you feel like the content could be structured better?</li>
</ul>
<p>Thank you for helping me improve this tutorial!</p>
<h2 id="what-is-version-control-and-why-should-you-use-it"><a href="#what-is-version-control-and-why-should-you-use-it">What is version control and why should you use it?</a></h2>
<p>I will assume you're using version control for software development, but it can be used for other things as well.
For example, authoring professionally formatted documents with tools like <a href="https://typst.app/">Typst</a>.
The source of this tutorial is stored in version control too!</p>
<p>What these scenarios have in common is that a large body of work (mostly in the form of text) is slowly being expanded and improved over time.
You don't want to lose any of it and you want to be able to go back to previous states of your work.
Often, several people need to work on the project at the same time.</p>
<p>A general-purpose backup solution can keep a few copies of your files around.
A graphical document editor can allow multiple people to edit the text simultaneously.
But sometimes, you need a sharper knife.
Jujutsu is the sharpest knife available.</p>
<h2 id="why-jujutsu-instead-of-git"><a href="#why-jujutsu-instead-of-git">Why Jujutsu instead of Git?</a></h2>
<p>Git is by far the most commonly used VCS in the software development industry.
So why not use that?
Using the most popular thing has undeniable benefits.
There is lots of learning material, lots of people can help you with problems, lots of other tools integrate with it etc.
Why make life harder on yourself by using a lesser-known alternative?</p>
<p>Here's my elevator pitch:</p>
<ul>
<li>
<p><strong>Jujutsu is compatible with Git.</strong>
You're not actually losing <em>anything</em> by using Jujutsu.
You can work with it on any existing project that uses Git for version control without issues.
Tools that integrate with Git mostly work just as well with Jujutsu.</p>
</li>
<li>
<p><strong>Jujutsu is easier to learn than Git.</strong>
(That is, assuming I did a decent job writing this tutorial.)
Git is known for its complicated, unintuitive user interface.
Jujutsu gives you all the functionality of Git with a lot less complexity.
Experienced users of Git usually don't care about this, because they've paid the price of learning Git already.
(I was one of these people once.)
But you care!</p>
</li>
<li>
<p><strong>Jujutsu is more powerful than Git.</strong>
Despite the fact that it's easier to learn and more intuitive, it actually has loads of awesome capabilities for power users that completely leave Git in the dust.
Don't worry, you don't have to use that power right away.
But you can be confident that if your VCS-workflow becomes more demanding in the future, Jujutsu will have your back.
This is not a watered-down "we have Git at home" for slow learners!</p>
</li>
</ul>
<p>Learning Jujutsu instead of Git as your first VCS does have some downsides:</p>
<ul>
<li>
<p>When talking about version control with peers, they will likely use Git-centric vocabulary.
Jujutsu shares a lot of Git's concepts, but there are also differences.
Translating between the two in conversation can add some mental overhead.
(solution: convince your peers to use Jujutsu 😉)</p>
</li>
<li>
<p>Jujutsu is relatively new and doesn't cover 100% of the features of Git yet.
When you do run into the rare problem where Jujutsu doesn't have an answer, you can always fall back to use Git directly, which works quite seamlessly.
Still, having to use two tools instead of one is slightly annoying.
I plan to teach such Git features in this tutorial in later levels.
The tutorial should be a one-stop-shop for all Jujutsu users.</p>
</li>
<li>
<p>The command line interface of Jujutsu is not yet stable.
That means in future versions of Jujutsu, some commands might work a little differently or be renamed.
I personally don't think this should scare you away.
Many people including me have used Jujutsu as a daily driver for a long time.
Whenever something <em>did</em> change, my reaction was usually:
"Great, that was one of the less-than-perfect parts of Jujutsu! Now it's even more intuitive than before!"
Consider <a href="#stay-up-to-date">subscribing to GitHub releases of this tutorial</a>.
You will be notified if new versions of Jujutsu change something in a way that's relevant to what you learned in this tutorial.</p>
</li>
</ul>
<p>Despite some downsides, I think the benefits are <strong>well worth it</strong>.</p>

                    </main>

                    <nav aria-label="Page navigation">
                        <!-- Mobile navigation buttons -->

                            <a rel="next prefetch" href="https://jj-for-everyone.github.io/terminal_basics.html" title="Next chapter" aria-label="Next chapter" aria-keyshortcuts="Right">
                                <i></i>
                            </a>

                        
                    </nav>
                </div>
            </div>

            <nav aria-label="Page navigation">

                    <a rel="next prefetch" href="https://jj-for-everyone.github.io/terminal_basics.html" title="Next chapter" aria-label="Next chapter" aria-keyshortcuts="Right">
                        <i></i>
                    </a>
            </nav>

        </div>




        


        
        
        

        
        
        

        <!-- Custom JS scripts -->


    </div>
    

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[FDA official demands removal of YouTube videos of himself criticizing vaccines (255 pts)]]></title>
            <link>https://www.theguardian.com/us-news/2025/aug/31/fda-official-youtube-videos</link>
            <guid>45083845</guid>
            <pubDate>Sun, 31 Aug 2025 15:19:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/us-news/2025/aug/31/fda-official-youtube-videos">https://www.theguardian.com/us-news/2025/aug/31/fda-official-youtube-videos</a>, See on <a href="https://news.ycombinator.com/item?id=45083845">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>A top official at the Food and Drug Administration (FDA) demanded the removal of YouTube videos of himself that were published by a physician and writer who has been critical of medical misinformation and public health officials in the <a href="https://www.theguardian.com/us-news/trump-administration" data-link-name="in body link" data-component="auto-linked-tag">Trump administration</a>, according to a YouTube notice that was seen by the Guardian.</p><p>Jonathan Howard, a neurologist and psychiatrist in New York City, received an email from YouTube on Friday night, which stated that Vinay Prasad, who is the FDA’s top vaccine regulator, had demanded the removal of six videos of himself from Howard’s YouTube channel.</p><p>Howard’s entire channel has now been deleted by YouTube, which cited copyright infringement.</p><p>The now-defunct channel contained about 350 videos of doctors and commentators, including Prasad, <a href="https://www.theguardian.com/us-news/robert-f-kennedy-jr" data-link-name="in body link" data-component="auto-linked-tag">Robert F Kennedy Jr</a>, the secretary of health and human services, and Jay Bhattacharya, the head of the National Institutes of Health, which had been collected by Howard from their social media accounts, interviews and podcasts.</p><p>Creating the channel, Howard told Guardian in an interview, had been an attempt to “preserve” what these individuals had said during the early years of the pandemic, including comments that Howard said exaggerated the dangers of the Covid vaccine to children and – in some cases – minimized the risk of Covid infection, among other issues.</p><p>“These videos were nothing more than collections of what other doctors said during the pandemic, including doctors who are extremely influential and who are now the medical establishment,” he said.</p><p>The Guardian requested a comment from the office of public affairs at the department of health and human services, and attempted to reach Prasad through personal email addresses and by a listed mobile phone number. No one responded to the request for comment.</p><p>When YouTube notified Howard of the demand request, it included an email address for Prasad, which is identical to the email address that is linked to Prasad’s now inactive podcast, called Plenary Session.</p><p>Prasad, a former hematologist-oncologist at the University of California San Francisco, is now head of the FDA’s Center for Biologics Evaluation and Research (CBER), which makes him the chief vaccine regulator in the US. He was a vocal critic of <a href="https://www.theguardian.com/us-news/2025/mar/29/top-us-vaccine-official-resigns-over-rfk-jrs-misinformation-and-lies-dr-peter-marks" data-link-name="in body link">Peter Marks, who previously led CBER and was widely respected for his role in Operation Warp Speed</a>, the initiative that developed, manufactured and helped distribute the Covid-19 vaccines. Marks was forced to resign by Kennedy.</p><p>Prasad has also been critical of the use of Covid boosters in young people and vaccine mandates, and has <a href="https://www.statnews.com/2025/05/06/vinay-prasad-fda-vaccine-regulator-analysis-of-previous-contrarian-comments-covid-autism-mmr-shots/" data-link-name="in body link">defended cuts to health agencies and university research</a>.</p><p>“It’s really important to remember [Prasad’s] past words in order to gauge his current and future credibility, and that was the mission of my YouTube channel, to record what these doctors [Prasad and others] said,” Howard said.</p><p>Although the videos Howard collected were often only viewed “dozens” of times, Howard included them in his online articles that appeared on the Science Based Medicine blog. Now those video links are dead.</p><p>He noted that snippets of Prasad’s comments still appeared on anti-vaccine social media accounts, suggesting Prasad was directing his removal demand only at a critic and not anti-vaccine influencers. In the past, Prasad has complained about <a href="https://www.youtube.com/watch?v=IV5c8mva9-s" data-link-name="in body link">censorship</a> by social media companies.</p><p>Howard has been quoted in the New York Times, the Guardian, and other publications and is the author of a forthcoming book Everyone Else Is Lying to You, which he said examines how the medical establishment, which has come into power in Trump’s second term, normalized “quackery” during the Covid pandemic and undermined public health.</p><p>“I had thought there was a policy that government officials shouldn’t censor opposing perspectives, but I must be mistaken,” said John Moore, a scientist and colleague who is familiar with Howard’s book and videos.</p><p>Howard told the Guardian he wanted to emphasize that he was not a victim, and that the ordeal of having his YouTube channel deleted was nothing compared with the dire situation facing scientists and researchers whose funding is being cut by public health institutions.</p><p>Prasad has had a rocky start in his FDA tenure. Jeremy Faust, a doctor at Brigham and Women’s Hospital Department of Emergency Medicine whose Substack newsletter Inside Medicine is widely followed, once described Prasad as having two sides.</p><p>There was a 2010s Prasad who was a “rigorous and professorial cancer research methodology expert with hundreds of peer-reviewed publications, including well-reasoned analyses that often stood up against some slippery stuff from big pharma”. And there was the “2020s Prasad”, who Faust called “newly famous and admired by the Right … [a] hot-headed firebrand who when asked about how we should move forward from the lessons of Covid-19 pandemic <a href="https://www.youtube.com/watch?v=_HZDNG9gO1Q" data-link-name="in body link">criticized</a> the pro-masking contingent saying, “I don’t believe in forgiveness because, in my opinion, these pieces of shit are still lying.”</p><p>Prasad <a href="https://www.theguardian.com/us-news/2025/aug/09/vinay-prasad-returns-fda-laura-loomer" data-link-name="in body link">briefly resigned this summer</a> after he was the subject of an attack by the rightwing activist Laura Loomer, and then returned to his post at the FDA. He reportedly had a significant role in the FDA’s decision to change rules around the Covid-19 vaccine, limiting its availability this fall to adults over 65 or those with certain medical conditions. Previously, Covid shots were recommended for everyone six months or older.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Survey: a third of senior developers say over half their code is AI-generated (182 pts)]]></title>
            <link>https://www.fastly.com/blog/senior-developers-ship-more-ai-code</link>
            <guid>45083635</guid>
            <pubDate>Sun, 31 Aug 2025 14:55:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.fastly.com/blog/senior-developers-ship-more-ai-code">https://www.fastly.com/blog/senior-developers-ship-more-ai-code</a>, See on <a href="https://news.ycombinator.com/item?id=45083635">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-main-content=""><p>Fastly’s July 2025 survey of 791 developers found a notable difference in how much AI-generated code is making it into production. About a third of senior developers (10+ years of experience) say over half their shipped code is AI-generated — nearly two and a half times the rate reported by junior developers (0–2 years of experience), at 13%.</p><p>“AI will bench test code and find errors much faster than a human, repairing them seamlessly. This has been the case many times,” one senior developer said. A junior respondent noted the trade-offs: “It’s always hard when AI assumes what I’m doing and that’s not the case, so I have to go back and redo it myself.”</p><p>Senior developers were also more likely to say they invest time fixing AI-generated code. Just under 30% of seniors reported editing AI output enough to offset most of the time savings, compared to 17% of juniors. Even so, 59% of seniors say AI tools help them ship faster overall, compared to 49% of juniors.</p><figure><img alt="How Much your Code is AI" src="https://www.fastly.com/cimages/ocb1q9kflo7k/4ZAKgzUySDabMbNiTCcCXV/677ebd54cc6e4fb2fac918e7ce4cca90/HowMuchCodeisAI.png?auto=avif&amp;crop=1924:1398,smart&amp;width=900" srcset="https://www.fastly.com/cimages/ocb1q9kflo7k/4ZAKgzUySDabMbNiTCcCXV/677ebd54cc6e4fb2fac918e7ce4cca90/HowMuchCodeisAI.png?auto=avif&amp;crop=1924:1398,smart&amp;width=450 450w,https://www.fastly.com/cimages/ocb1q9kflo7k/4ZAKgzUySDabMbNiTCcCXV/677ebd54cc6e4fb2fac918e7ce4cca90/HowMuchCodeisAI.png?auto=avif&amp;crop=1924:1398,smart&amp;width=900 900w,https://www.fastly.com/cimages/ocb1q9kflo7k/4ZAKgzUySDabMbNiTCcCXV/677ebd54cc6e4fb2fac918e7ce4cca90/HowMuchCodeisAI.png?auto=avif&amp;crop=1924:1398,smart&amp;width=1350 1350w,https://www.fastly.com/cimages/ocb1q9kflo7k/4ZAKgzUySDabMbNiTCcCXV/677ebd54cc6e4fb2fac918e7ce4cca90/HowMuchCodeisAI.png?auto=avif&amp;crop=1924:1398,smart&amp;width=1800 1800w,"></figure><h3>Senior Developers Are More Optimistic About AI Saving Time</h3><p>Just over 50% of junior developers say AI makes them moderately faster. By contrast, only 39% of more senior developers say the same. But senior devs are more likely to report significant speed gains: 26% say AI makes them a lot faster, double the 13% of junior devs who agree.</p><p>One reason for this gap may be that senior developers are simply better equipped to catch and correct AI’s mistakes. They have the experience to recognize when code “looks right” but isn’t. That makes them more confident at using AI tools efficiently, even for high-stakes or business-critical code. By contrast, junior developers may not fully trust their ability to spot errors, which can make them more cautious about relying on AI, or more likely to avoid using it in production at all.</p><p>That tracks with how much AI-generated code actually makes it into production. Among junior devs, just 13% say over half of their shipped code is AI-generated. By contrast, 32% of senior developers say the same, suggesting that more experienced engineers are not only using AI more aggressively, but are also trusting it more in production environments. This is surprising given growing concerns about “vibe coding” introducing vulnerabilities into applications.&nbsp;</p><h3>Perception vs. Reality</h3><p>Nearly 1 in 3 developers (28%) say they frequently have to fix or edit AI-generated code enough that it offsets most of the time savings. Only 14% say they rarely need to make changes. And yet, over half of developers still feel faster with AI tools like Copilot, Gemini, or Claude.</p><figure><img alt="How often do you fix AI code" src="https://www.fastly.com/cimages/ocb1q9kflo7k/uOgrTTyAMsyKM51Q5VVd5/0eea161d328dae34581713288198b778/HowoftendoyoufixAIcode.png?auto=avif&amp;crop=1928:1400,smart&amp;width=900" srcset="https://www.fastly.com/cimages/ocb1q9kflo7k/uOgrTTyAMsyKM51Q5VVd5/0eea161d328dae34581713288198b778/HowoftendoyoufixAIcode.png?auto=avif&amp;crop=1928:1400,smart&amp;width=450 450w,https://www.fastly.com/cimages/ocb1q9kflo7k/uOgrTTyAMsyKM51Q5VVd5/0eea161d328dae34581713288198b778/HowoftendoyoufixAIcode.png?auto=avif&amp;crop=1928:1400,smart&amp;width=900 900w,https://www.fastly.com/cimages/ocb1q9kflo7k/uOgrTTyAMsyKM51Q5VVd5/0eea161d328dae34581713288198b778/HowoftendoyoufixAIcode.png?auto=avif&amp;crop=1928:1400,smart&amp;width=1350 1350w,https://www.fastly.com/cimages/ocb1q9kflo7k/uOgrTTyAMsyKM51Q5VVd5/0eea161d328dae34581713288198b778/HowoftendoyoufixAIcode.png?auto=avif&amp;crop=1928:1400,smart&amp;width=1800 1800w,"></figure><p>Fastly’s survey isn’t alone in calling AI productivity gains into question. A recent randomized controlled trial (RCT) of experienced open-source developers found something even more striking:<a href="https://metr.org/blog/2025-07-10-early-2025-ai-experienced-os-dev-study/"> <u>when developers used AI tools, they took 19% longer</u></a> to complete their tasks.</p><p>This disconnect may come down to psychology. AI coding often feels smooth: code autocompletes with a few keystrokes. This gives the impression of momentum, but the early speed gains are often followed by cycles of editing, testing, and reworking that eat into any gains. This pattern is echoed both in conversations we've had with Fastly developers and in many of the comments we received in our survey.</p><p>One respondent put it this way: “An AI coding tool like GitHub Copilot greatly helps my workflow by suggesting code snippets and even entire functions. However, it once generated a complex algorithm that seemed correct but contained a subtle bug, leading to several hours of debugging.”</p><p>Another noted: “The AI tool saves time by using boilerplate code, but it also needs manual fixes for inefficiencies, which keep productivity in check.”</p><p>Yet, AI still seems to improve developer job satisfaction. Nearly 80% of developers say AI tools make coding more enjoyable. For some, it’s about skipping grunt work. For others, it might be the dopamine rush of code on demand.</p><figure><img alt="How have AI tools affected your enjoyment of work" src="https://www.fastly.com/cimages/ocb1q9kflo7k/2NadqKDzMN6Fp61kueRIbD/a27b55b7ae2a8d76557d1bf0e5aa628d/HowhaveAItoolsaffectedyourenjoymentofwork.png?auto=avif&amp;crop=1926:1402,smart&amp;width=900" srcset="https://www.fastly.com/cimages/ocb1q9kflo7k/2NadqKDzMN6Fp61kueRIbD/a27b55b7ae2a8d76557d1bf0e5aa628d/HowhaveAItoolsaffectedyourenjoymentofwork.png?auto=avif&amp;crop=1926:1402,smart&amp;width=450 450w,https://www.fastly.com/cimages/ocb1q9kflo7k/2NadqKDzMN6Fp61kueRIbD/a27b55b7ae2a8d76557d1bf0e5aa628d/HowhaveAItoolsaffectedyourenjoymentofwork.png?auto=avif&amp;crop=1926:1402,smart&amp;width=900 900w,https://www.fastly.com/cimages/ocb1q9kflo7k/2NadqKDzMN6Fp61kueRIbD/a27b55b7ae2a8d76557d1bf0e5aa628d/HowhaveAItoolsaffectedyourenjoymentofwork.png?auto=avif&amp;crop=1926:1402,smart&amp;width=1350 1350w,https://www.fastly.com/cimages/ocb1q9kflo7k/2NadqKDzMN6Fp61kueRIbD/a27b55b7ae2a8d76557d1bf0e5aa628d/HowhaveAItoolsaffectedyourenjoymentofwork.png?auto=avif&amp;crop=1926:1402,smart&amp;width=1800 1800w,"></figure><p>“It helps me complete a task that I’m stuck with. It allows me to find the answers necessary to finish the task,” one survey respondent says.</p><p>Enjoyment doesn’t equal efficiency, but in a profession wrestling with burnout and backlogs, that morale boost might still count for something.</p><h3>The Hidden Cost of AI Coding</h3><p>Fastly’s survey also explored developer awareness of green coding—the practice of writing energy-efficient software— and the energy cost behind AI coding tools. The practice of green coding goes up sharply with experience. Just over 56% of junior developers say they actively consider energy use in their work, while nearly 80% among mid- and senior-level engineers consider this when coding.&nbsp;</p><p>Developers are very aware of the environmental cost of AI tools: roughly two-thirds of developers across all experience levels said they know that these tools can carry a significant carbon footprint. Only a small minority (under 8% even at the most junior levels) were completely unaware. Altogether, the data suggests that sustainability is increasingly embedded in developer culture.</p><h3>Methodology</h3><p>This survey was conducted by Fastly from July 10 to July 14, 2025, with 791 professional developers. All respondents confirm that writing or reviewing code is a core part of their job. The survey is distributed in the US and quality-controlled for accuracy, though, as with all self-reported data, some bias is possible.&nbsp;</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Notes on Managing ADHD (482 pts)]]></title>
            <link>https://borretti.me/article/notes-on-managing-adhd</link>
            <guid>45083134</guid>
            <pubDate>Sun, 31 Aug 2025 13:49:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://borretti.me/article/notes-on-managing-adhd">https://borretti.me/article/notes-on-managing-adhd</a>, See on <a href="https://news.ycombinator.com/item?id=45083134">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><blockquote>
  <p>The pleasure is in foreseeing it, not in bringing it to term.</p>

  <p> —  Jorge Luis Borges, <a href="https://www.goodreads.com/book/show/864175.Selected_Non_fictions"><em>Selected Non-Fictions</em></a> </p>
</blockquote>

<p>This post is about managing ADHD. It is divided into two sections: “Strategies” describes the high-level control system, “Tactics” is a list of micro-level improvements (really it should be called “stratagems”, since most are essentially about tricking yourself).</p>

<h2 id="contents">Contents</h2>

<ol id="markdown-toc">
  <li><a href="#strategies" id="markdown-toc-strategies">Strategies</a>    <ol>
      <li><a href="#chemistry-first" id="markdown-toc-chemistry-first">Chemistry First</a></li>
      <li><a href="#memory" id="markdown-toc-memory">Memory</a></li>
      <li><a href="#energy" id="markdown-toc-energy">Energy</a></li>
      <li><a href="#procrastination" id="markdown-toc-procrastination">Procrastination</a></li>
      <li><a href="#introspection" id="markdown-toc-introspection">Introspection</a></li>
      <li><a href="#time" id="markdown-toc-time">Time</a></li>
    </ol>
  </li>
  <li><a href="#tactics" id="markdown-toc-tactics">Tactics</a>    <ol>
      <li><a href="#task-selection" id="markdown-toc-task-selection">Task Selection</a></li>
      <li><a href="#visual-field-management" id="markdown-toc-visual-field-management">Visual Field Management</a></li>
      <li><a href="#project-check-ins" id="markdown-toc-project-check-ins">Project Check-Ins</a></li>
      <li><a href="#centralize-your-inboxes" id="markdown-toc-centralize-your-inboxes">Centralize Your Inboxes</a></li>
      <li><a href="#inbox-zero" id="markdown-toc-inbox-zero">Inbox Zero</a></li>
      <li><a href="#inbox-bankruptcy" id="markdown-toc-inbox-bankruptcy">Inbox Bankruptcy</a></li>
      <li><a href="#do-it-on-your-own-terms" id="markdown-toc-do-it-on-your-own-terms">Do It On Your Own Terms</a></li>
      <li><a href="#replace-interrupts-with-polling" id="markdown-toc-replace-interrupts-with-polling">Replace Interrupts with Polling</a></li>
      <li><a href="#accountability-buddy" id="markdown-toc-accountability-buddy">Accountability Buddy</a></li>
      <li><a href="#plan-first-do-later" id="markdown-toc-plan-first-do-later">Plan First, Do Later</a></li>
      <li><a href="#derailment" id="markdown-toc-derailment">Derailment</a></li>
      <li><a href="#using-ocd-to-defeat-adhd" id="markdown-toc-using-ocd-to-defeat-adhd">Using OCD to Defeat ADHD</a></li>
      <li><a href="#the-master-of-drudgery" id="markdown-toc-the-master-of-drudgery">The Master of Drudgery</a></li>
      <li><a href="#thrashing" id="markdown-toc-thrashing">Thrashing</a></li>
      <li><a href="#put-travel-in-the-calendar" id="markdown-toc-put-travel-in-the-calendar">Put Travel in the Calendar</a></li>
      <li><a href="#choice-of-tools" id="markdown-toc-choice-of-tools">Choice of Tools</a></li>
    </ol>
  </li>
  <li><a href="#resources" id="markdown-toc-resources">Resources</a></li>
  <li><a href="#acknowledgements" id="markdown-toc-acknowledgements">Acknowledgements</a></li>
</ol>

<h2 id="strategies">Strategies</h2>

<p>High-level advice, control systems.</p>

<h2 id="chemistry-first">Chemistry First</h2>

<p><em>ADHD has a biological cause and drugs are the first-line treatment for good reasons. There is no virtue in trying to beat it through willpower alone.</em></p>

<p>The first-line treatment for ADHD is stimulants. Everything else in this post works best as a complement to, rather than as an alternative to, stimulant medication. In fact most of the strategies described here, I was only able to execute <em>after</em> starting stimulants. For me, chemistry is the critical node in the tech tree: the todo list, the pomodoro timers, etc., all of that was unlocked by the medication.</p>

<p>Some people can’t tolerate a specific stimulant. But there are many stimulant and non-stimulant drugs for ADHD. I would prefer to exhaust all the psychiatric options before white-knuckling it.</p>

<p>A lot of people don’t want to take medication for shame-based reasons. There is a lot of pill-shaming in the culture. You must learn to ignore it: we are automata, our minds are molecules in salt water.</p>

<h3 id="example-melatonin">Example: Melatonin</h3>

<p>As a motivating example for the “salt water automaton” view: I struggled with sleep hygiene for a long time. It felt like WW1: throwing wave after wave of discipline at it and always failing. I would set an alarm, for, say, 10pm, that said: it is time to go to bed. How many times did I obey it? Never. I was always doing something more important.</p>

<p>What fixed it? Melatonin. I have an alarm that goes off at 8pm to remind me to take melatonin. The point of the alarm is not, “now you must log off”, which is a very discipline-demanding task. The point of the alarm is simply: take this pill. It takes but a moment. Importantly, I’m not committing to anything other than taking a pill. Thirty, forty minutes later, I <em>want</em> to sleep. That is the key thing: the melatonin has changed my preferences. And then I don’t need willpower to close the sixteen Wikipedia tabs or whatever, because I <em>want</em> to sleep more than I want to scroll, or watch YouTube.</p>

<h3 id="internal-and-external-change">Internal and External Change</h3>

<p>The broader perspective here is that personal growth is a dialogue between internal changes and external changes.</p>

<p>Internal changes might come from medication, meditation, therapy, coaching, or practicing habits for a long enough time. External changes are the scaffolding around the brain: using a todo list, and using it effectively. Using a calendar. Clearing your desk so you don’t get distracted by things. Journaling, so that you can introspect and notice patterns: which behaviours leads to a good workday, and which behaviours lead to a day being wasted.</p>

<p>Are internal changes more important? Kind of. It’s more a back and forth, where internal changes unlock external changes which unlock further internal changes.</p>

<p>Here’s an example: you (having undiagnosed ADHD) try to set a schedule, or use a todo list, or clean your bed every day, but it doesn’t stick. So you get on medication, and the medication lets you form your first habit: which is using a todo list app consistently, checking it every morning. Then, with the todo list as a core part of your exocortex, you start adding recurring tasks, and forming other simple habits: you have a daily recurring task to make your bed, and so every morning when you check the todo list, you see the task, and make your bed, and in time, with your now-functioning dopamine system, you make a habit to make your bed every day, such that you no longer need to have that in the todo list.</p>

<p>So the timeline is:</p>

<ol>
  <li>Internal change: starting medication unlocks…</li>
  <li>External change: using a todo list, which provides scaffolding (e.g. daily recurring tasks) for forming new habits, which unlocks</li>
  <li>Internal change: new habits formed (make bed, brush teeth in the morning)</li>
</ol>

<p>Taking Ritalin with no plan for what you will do today/tomorrow/this week doesn’t work. Dually, an ambitious todo list will sit idle if your brain won’t let you execute it. So personal growth comes from using <em>both</em> internal and external changes, like a ladder with alternating left-right steps.</p>

<h2 id="memory">Memory</h2>

<p><em>A todo list is a neuroprosthesis that augments long-term memory for tasks.</em></p>

<p>I use <a href="https://www.todoist.com/">Todoist</a> on my desktop and my phone. The pro plan is worth it. I don’t really think of it as an app, rather, it’s a cognitive prosthesis.</p>

<p>The todo list provides three things:</p>

<ul>
  <li><strong>Memory:</strong> the list remembers things for me. I’m not at the mercy of my brain randomly pinging me that I forgot to do X or I want to someday do Y. The todo list remembers.</li>
  <li><strong>Order:</strong> the todo list lets you drag and drop tasks around, so you can figure out the ordering in which you’re going to do them.</li>
  <li><strong>Hierarchy:</strong> the todo list lets you break tasks down hierarchically and without limit.</li>
</ul>

<p>Of these, the most important is memory. The todolist is an action-oriented long term memory prosthesis.</p>

<p>This is especially useful for habit formation: my biggest blocker with forming habits was just remembered that I’d committed to doing something. If you think, i will make the bed every day, you might do it today, tomorrow, and by the third day you forget. You’re failing by simply forgetting to show up, which is a sad way to fail. By making something a recurring task on the todo list, it ensures I will see it. In a sense, the todo list turns many habits into one. You don’t need to remember “I will make my bed every day”, “I will floss my teeth every night”, etc., because the todolist remembers all those things for you. You only need to form a <em>single</em> habit: checking the todo list.</p>

<p>Analogously, I often fail to finish projects simply because I forget about them. I start reading a book, but I don’t write it down anywhere (say, in Goodreads) that “I’m reading this book” is something I have committed to. I leave the book on a table where it’s out of sight (and therefore out of mind) for all of my waking hours. I glance at it occasionally and think, oh, yeah, I was reading that book, and then I’m distracted by something else. And weeks later, when I’ve already started another book, I notice the first book, with the bookmark on page 20, abandoned.</p>

<p>The todolist prevents this failure mode: you create a project to represent reading the book, and that project is now tracked, and when you open the todo list, you can see it in the list of active projects.</p>

<h3 id="how-i-use-todoist">How I Use Todoist</h3>

<p>In Todoist, every task is part of a <a href="https://www.todoist.com/help/articles/introduction-to-projects-TLTjNftLM">project</a> (which really should just be called a list). My sidebar looks like this:</p>

<p><img src="https://borretti.me/assets/content/notes-on-managing-adhd/sidebar.webp" width="300" alt="A screenshot of my Todoist sidebar, showing a list of projects described below."></p>

<p><strong>Tasks</strong> is the list for ad-hoc tasks. Mostly chores and things that don’t fit in elsewhere. Unload the dishwasher, reply to this email, etc. The only rule for this list is that everything in it must be scheduled.</p>

<p><strong>Groceries</strong> is self-explanatory.</p>

<p><strong>Ideas</strong> is the where every half-formed goal, intention, project idea etc. goes. “Go deeper into metta” and “learn how to use the slide rule” and “go penguin watching in Manly” and “write a journalling app” and “learn <a href="https://redex.racket-lang.org/">PLT Redex</a>”. I put these things here so that they don’t live in my brain. And occasionally I go through the list and promote something into an actual, active project.</p>

<p><strong>Blog</strong> is like the ideas list specifically ideas for blog posts.</p>

<p><strong>Reading List</strong> is for media I want to consume. This is divided into: fiction books, non-fiction books, technical books, blog posts, papers, games, films.</p>

<p><strong>Cycles</strong> is for recurring tasks. This one is divided into sections by period: daily, weekly, and above. The daily recurring tasks are things like “take vitamin D”, “meditate”, and the inbox-clearing task.</p>

<p><strong>Projects</strong> is a container for actual projects: an objective which takes multiple tasks to accomplish. Why lift projects into lists? Why not just use a top-level task to represent the project’s objective, and nested subtasks to represent the execution steps of the project? Because having the project in the sidebar is one mechanism I use to ensure I don’t forget about it. Every time I glance at the todo list, I can see the list of active projects. I can notice if something has not been worked on for a while, and act on it. Otherwise: out of sight, out of mind.</p>

<h2 id="energy">Energy</h2>

<p><em>The difficulty class of the tasks you can perform declines throughout the day.</em></p>

<p>There are many metaphors for the concept of mental energy. <a href="https://en.wikipedia.org/wiki/Spoon_theory">Spoon theory</a>, for example. The usual metaphor is that “mental energy” is like a battery that is drained through the day, in greater and lesser quantities, and is replenished by sleep.</p>

<p>To me, energy is less like a battery and more like voltage. Some machines require a threshold voltage to operate. Below that voltage they don’t just operate slower, they don’t operate at all. Analogously, different categories of activity have different threshold voltages. For me, it’s like this:</p>

<ol>
  <li>Things I am averse to, the things I intuitively want to put off because they bring up painful emotions, are high-voltage.</li>
  <li>Creative, open-ended work is high-voltage to start, but once you get started, keeping it going is medium-voltage.</li>
  <li>Simple chores like cleaning, throwing clothes in the washing machine, etc. are low-voltage.</li>
</ol>

<p>And when I wake up I have the highest possible voltage, and throughout the course of the day the voltage declines. And that’s the key difference from spoon theory: spoons are fungible across time, voltage is not. For each category of activity, there is a span of the day when I can action it.</p>

<p>When I wake up, I do my morning routine, get some quick wins, and then I try to tackle the thing I dread the most, as early in the morning as possible, because that’s the time of day when I have the most energy and self-control. I get that done and I move on.</p>

<p>(Another reason to do the dreaded tasks first: if you put it off to, say, late morning, well, why not put it off again? And again and again. And then it’s 7pm and you can’t even think about the task, and it’s late, and I don’t have energy, so I couldn’t even do it if I wanted to, so let’s do it tomorrow.)</p>

<p>And then, when I have removed that burden, I work on projects. The creative, generative, intellectual things. The things that move some kind of needle, and aren’t just pointless chores.</p>

<p>And when I run out of energy to create, I read.</p>

<p>And when I run out of energy to read, I clean and go to the gym and do the other things.</p>

<p>And when the sun goes down everything starts to unravel: I have zero energy and the lazy dopamine-seeking behaviour comes out. So I take melatonin, and try to be in bed before the instant gratification monkey seizes power.</p>

<h2 id="procrastination">Procrastination</h2>

<p><em>Typology of procrastination, approaches.</em></p>

<p>In my ontology there are three types of procrastination:</p>

<ul>
  <li><strong>ADHD Procrastination:</strong> you want to do the task, but can’t because of distraction/hyperactivity.</li>
  <li><strong>Anxious Procrastination:</strong> you know you have to do the task, but you don’t want to, because it triggers difficult emotions.</li>
  <li><strong>Decision Paralysis Procrastination:</strong> you <em>don’t know</em> how to execute the task, because it involves a decision and you have difficulty making the decision.</li>
</ul>

<h3 id="adhd-procrastination">ADHD Procrastination</h3>

<p>This is the easiest kind to address. The solution is pharmacological treatment for ADHD + having a productivity system and some tricks.</p>

<h3 id="anxious-procrastination">Anxious Procrastination</h3>

<p>This one is harder. The good thing is you know, cognitively, what you have to do. The hard part is getting over the aversion.</p>

<p>In the short term, the way to fix this is to do it scared. Accept the anxiety. Asking for help also works, sometimes you just need someone in the room with you when you hit send on the email. You can also use techniques like CBT to rationally challenge the source of the anxiety and maybe overcome it.</p>

<p>In the long term: write down the things you procrastinate one due to anxiety, and find the common through-line, or the common ancestor. By identifying the emotional root cause, you can work on fixing it.</p>

<h3 id="decision-paralysis-procrastination">Decision Paralysis Procrastination</h3>

<p>And this is the hardest, because you don’t know, cognitively, what the right choice is, and also you probably have a lot of anxiety/aversion around it. Many things in life are susceptible to this: you have set of choices, there’s good arguments for/against each one, and you have a lot of uncertainty as to the outcomes. And so you ruminate on it endlessly.</p>

<p>I don’t have a good general solution for this.</p>

<p>Talking to people helps: friends, therapists, Claude. This works because thinking by yourself has diminishing returns: you will quickly exhaust all the thoughts you will have about the problem, and start going in circles. Often people will bring up options/considerations I would never have thought of. Sometimes, if you’re lucky, that’s all it takes: someone mentions an option you had not considered and you realize, oh, it was all so simple.</p>

<p>One thing to consider is that <em>thinking in your head</em> is inherently circular, because you have a limited working memory, and you will inevitably start going in circles. Writing things down helps here. Treat the decision, or the emotions behind it, like an object of study, or an engineering problem. Sit down and write an essay about it. Name the arguments, number the bullet points, refer back to things. Make the thoughts into real, physical, manipulable entities.</p>

<h2 id="introspection">Introspection</h2>

<p><em>Journaling is good for detecting maladaptive patterns and tracking your progress.</em></p>

<p>I keep a hierarchical journal in <a href="https://obsidian.md/">Obsidian</a>. Hierarchical because I have entries for the days, weeks, months, and years. The directory tree looks like this:</p>

<div><pre><code>Journal/
  Daily/
    YYYY/
      MM/
        YYYY-MM-DD.md
  Weekly/
    YYYY/
      YYYY-WW.md
  Monthly/
    YYYY/
      YYYY-MM.md
  Yearly/
    YYYY.md
</code></pre></div>

<p>In the morning I finish yesterday’s journal entry, and begin today’s. Every Sunday I write the review of the week, the first of each month I write the review of the previous month, the first of each year I review the past year. The time allotted to each review is in inverse proportion to its frequency: so a monthly review might take an hour while a yearly review might take up a whole morning.</p>

<p>The daily reviews are pretty freeform. Weekly and above there’s more structure. For example, for the weekly reviews I will write a list of the salient things that happened in the week. Then I list on what went well and what went poorly. And then I reflect on how I will change my behaviour to make the next week go better.</p>

<p>Journaling is a valuable habit. I started doing it for vague reasons: I wasn’t sure what I wanted to get out of it, and it took a long time (and long stretches of not doing it) until it became a regular, daily habit. I’ve been doing it consistently now for three years, and I can identify the benefits.</p>

<ul>
  <li>
    <p>The main benefit is that to change bad patterns, you have to notice them. And it is very easy to travel in a fix orbit, day in, day out, and not notice it. Laying it out in writing helps to notice the maladaptive coping mechanisms. Reading back over the journal entries helps you notice: when an event of type X happens, I react with Y.</p>
  </li>
  <li>
    <p>Today’s journal entry is a good default place for writing ad-hoc notes or thoughts. Often I wanted to write something, but didn’t know where I would file it (how do you even file these little scraps of thought?) and from not knowing where to put it, I would not do it. Nowadays I just begin writing in the journal. Later, if it is valuable to file it away, I do so.</p>
  </li>
  <li>
    <p>Creating a journal entry in the morning is a good opportunity to go over the goals and priorities for the day and explicitly restate them to myself.</p>
  </li>
  <li>
    <p>The final benefit is retrospection: I can look at the past and see how my life has changed. And this is often a positive experience, because the things that worried me didn’t come to pass, the things I used to struggle with are now easy, or at least easier.</p>

    <p>There’s a paradox with productivity: when you grind executive function enough, things that you used to struggle with become quotidian. And so what was once the ceiling becomes the new floor. You no longer feel proud that you did X, Y, Z because that’s just the new normal. It’s like the hedonic treadmill. You might feel that you never get to “productive”. Journaling helps to combat this because you can see how far you’ve come.</p>
  </li>
</ul>

<h2 id="time">Time</h2>

<p><em>Manage time at the macro level with calendars, at the micro level with timers.</em></p>

<p>To manage time, you need a calendar (macro) and a timer (micro).</p>

<h3 id="macro">Macro</h3>

<p>At the macro level, I use the calendar very lightly. Mostly for social things (to ensure I don’t forget an event, and that I don’t double-book things). I also use it to schedule the gym: if the goal is to lift, say, five times a week, I schedule five time blocks to lift. Lifting is special because it has a lot of temporal constraints:</p>

<ol>
  <li>I lift exactly <em>n</em> times per week.</li>
  <li>I lift at most once a day.</li>
  <li>I lift in the evening, which potentially clashes with social things.</li>
  <li>There are adjacency constraints, e.g. doing shoulders the day before chest is bad.</li>
  <li>There is at least one rest day which has to be scheduled strategically (e.g. to have maximal distance between successive deadlift sessions).</li>
</ol>

<p>But outside these two categories, my calendar is empty.</p>

<p>The calendar might be useful to you as a self-binding device. If you keep dragging some project along because you “haven’t made time” for it: consider making a time block in the calendar, and sticking to it. Creating a calendar event is, literally, making time: it’s like calling <code>malloc_time()</code>.</p>

<p>Some people use the calendar as their entire todo list. I think this kind of works if your todo list is very coarse grained: “buy groceries” and “go to the dentist”. But I have a very fine-grained todo list, and putting my tasks in the calendar would make it overwhelming.</p>

<p>Another problem with calendars is they are too time-bound: if I make a calendar block to do something, and I don’t do it, the calendar doesn’t know it. It just sits there, forgotten, in the past. In a todo list, everything gets dragged along until I explicitly complete it. Along the same lines, the calendar is not good for collecting vague ideas and plans for things you want to do in the future, while todo lists are ideal for this.</p>

<h3 id="micro">Micro</h3>

<p>The problem with todo lists is that they’re timeless: there is no sense of urgency. You look at the list and think, I could do the next task now, or in five minutes, or in an hour. There’s always <em>some</em> time left in the day. Or tomorrow. You need a way to manufacture urgency.</p>

<p>If you have ADHD you’ve probably heard of the Pomodoro method, tried it, and bounced off it. The way it’s framed is very neurotypical: it’s scaffolding around <em>doing</em>, but ADHD people often have problems with the doing itself. And so the scaffolding is kind of pointless.</p>

<p>The method works well in three kinds of contexts:</p>

<ul>
  <li>
    <p><strong>Overcoming Aversion:</strong> when you have a large number of microtasks, each of which takes a few seconds to a few minutes, but the number of them, and the uncertainty factor, makes the sum seem a lot larger. A classic example for me is having to reply to like ten different people. Realistically, each person can be handled in 15s. One or two might require a couple of minutes to compose a longer reply. But often I will avoid those tasks like the plague and drag them across the entire day.</p>

    <p>The pomodoro method works here because you’re basically trading (up to) 25m of pain for an entire day’s peace and quiet. So you get all the annoying little tasks together, start a timer, and go through them. And usually you’re done in maybe ten minutes. And you feel <em>really</em> good after, because all those annoying little tasks are done.</p>

    <p>It really is amazing what a little bit of fake urgency can do.</p>
  </li>
  <li>
    <p><strong>Starting:</strong> sometimes the problem is just starting. It is very trite, but it’s true. You have something you <em>want to want</em> to do, but don’t <em>want</em> to do. I want to want to read this book, to learn this topic, to write this blog post, to work on this software project. But I don’t <em>want</em> to do it. The pomodoro method helps you start.</p>

    <p>You’re not committing to finishing the project. You’re not committing to months or weeks or days or even hours of work. You’re committing to a half hour. And if you work just that half hour: great, promise kept. 30m a day, over the course of a single month, is 15h of work. And often I start a 30m timer and end up working four hours, and maybe that’s a good outcome.</p>
  </li>
  <li>
    <p><strong>Stopping:</strong> dually, sometimes the problem is stopping. If you’re trying to advance multiple projects at the same time, if you hyperfocus on one, it eats into the time you allocated for the others. And more broadly, spending too much time on one project can derail all your plans for the day. Maybe you meant to go to the gym at 6pm but you got so stuck in with this project that it’s 8:30pm and you’re still glued to the screen. So the gym suffers, your sleep schedule suffers, etc.</p>

    <p>Actually stopping when the pomodoro timer goes off can prevent excessive single-mindedness.</p>

    <p>Additionally, the five-minute break at the end of the pomodoro block is useful. It’s a time to get up from the computer, unround your shoulders, practice mindfulness, essentially, all those little things that you want to do a few times throughout the day.</p>
  </li>
</ul>

<h2 id="tactics">Tactics</h2>

<p>Stratagems, tricks.</p>

<h2 id="task-selection">Task Selection</h2>

<p><em>To select the next task, pick either the shortest or the most-procrastinated task.</em></p>

<p>I don’t like the word “prioritize”, because it has two subtly different meanings:</p>

<ul>
  <li>“Weak prioritization” means to sort a list of tasks by some unspecified criterion, that is, to establish an order where some things are prior to another.</li>
  <li>“Strong prioritization” is to sort a list <em>specifically</em> by importance.</li>
</ul>

<p>“Weak prioritization” is something everyone should do: it takes a moment to go over the todo list and drag the tasks into more or less the order in which you will do them. This keeps the most relevant tasks near the top, which is where your eyes naturally go to.</p>

<p>“Strong prioritization” is a terrible job scheduling algorithm. Importance alone is not good enough.</p>

<p>Consider the case where you have a very important task A which takes a long time to finish, and a less important task B which takes 5m to finish. For example, writing an essay versus replying to an email. Which should you do first? I would execute B first, because doing so in turn unblocks B’s successor tasks. If you reply to the email and then get to work on task A, the other person has time to read your email and reply to you. And the conversation moves forward while you are otherwise engaged.</p>

<p>Of course, the pathological version of this is where you only action the quick wins: all the minute little chores get done instantly, but the big tasks, requiring long periods of concentration, get postponed perpetually.</p>

<p>My task-selection algorithm is basically: do the shortest task first, with two exceptions:</p>

<ol>
  <li>Stalled tasks get a priority bump. If I created a task weeks ago, or if I’ve been postponing in for many days in a row, it has to be done now.</li>
  <li>Content-dependence: if I’m working on a particular project, I’d rather focus on tasks from that project, rather than from the global todo list.</li>
</ol>

<h2 id="visual-field-management">Visual Field Management</h2>

<p><em>To remember something, put it in your visual field. Dually: to forget, get it out of sight.</em></p>

<p>Out of sight, out of mind. The corollary: to keep something in mind, put it in your visual field; to keep it out, leave it out.</p>

<p>My desk is very spartan: there’s a monitor, a mouse, and a keyboard, and a few trinkets. My desktop is empty. There are no files in it. The dock has only the apps I use frequently. And at a higher level, I try to keep the apartment very clean and orderly. Because everything that’s out of place is a distraction, visual noise. That’s the negative aspect: the things I remove.</p>

<p>The positive aspect, the things I keep in my visual field: most of the time, I have two windows open on my computer the todo list occupies the left third of the screen, the right two-thirds are occupied by whatever window I have open at the time, e.g.:</p>

<p><img src="https://borretti.me/assets/content/notes-on-managing-adhd/desktop.webp" alt="A screenshot of my desktop, showing Todoist on the leftmost one-third of the screen, and Emacs on the rightmost two-thirds of the screen."></p>

<p>And so at a glance, I can see:</p>

<ol>
  <li>What I’m currently working on.</li>
  <li>What I will work on next.</li>
  <li>The list of active projects, so that I don’t forget they exist.</li>
</ol>

<h2 id="project-check-ins">Project Check-Ins</h2>

<p><em>Keep in regular contact with long-running projects.</em></p>

<p>A common failure mode I have is, I will fail to finish a project because I forget I even started it. Or, relatedly: I will let a project drag on and on until enough time has passed that my interests have shifted, the sun has set on it, and it is now a slog to finish.</p>

<p>One reason I do this is that creative/intellectual work often requires (or feels like it requires) long stretches of uninterrupted time. So I procrastinate working on something until I can find such a chunk of time. Which never comes. Time passes and the project begins to slip the moorings of my attention, as other new and shiny things arrive.</p>

<p>And sometimes I will pick the project back up after months or years, and I have lost so much context, it’s impossible to know what I even intended. And then you procrastinate even more, because you don’t want to feel the guilty of picking up a project and realizing it has become strange and unfamiliar to you.</p>

<p>One way to combat this is to make regular project checkins. This could be a daily or few-times-a-week recurring task on Todoist that just says “spend 30m on this project”.</p>

<p>You don’t even have to work on the thing: just allocate fifteen minutes to hold the project in your mind and nothing else. If it’s creative writing, you might open the Word document and just look at it. If it’s a programming project: read the Jira board and look at the code again. Don’t write anything. Just read the code. You will likely come up with a few tasks to do, so write those down. Think. Plan. Build up the structures in your mind, refresh the caches. If you can do, do, otherwise, plan, and if you can’t even do that, read.</p>

<p>When you’re doing this regularly, when you’re in regular contact with the project, when the shape of it is clear in your mind, you will have the tasks on the top of your mind, you will no longer feel that you need a giant empty runway of time to work on it, you will be able to work on it in shorter chunks.</p>

<p>To manage long-term creative work, keep in regular contact. That doesn’t mean work on them every day, but maybe <em>look</em> at them every day.</p>

<p>The <a href="#timers">pomodoro method</a> works here. Set a timer for just 25m to keep in touch with the project.</p>

<h2 id="centralize-your-inboxes">Centralize Your Inboxes</h2>

<p><em>Bring all tasks, broadly defined, into one todo list.</em></p>

<p>Life is full of inboxes:</p>

<ol>
  <li>Email</li>
  <li>DMs on Twitter, iMessage, WhatsApp, Signal, Discord, etc.</li>
  <li>Twitter bookmarks</li>
  <li>Browser bookmarks</li>
  <li>Your Downloads folder.</li>
  <li>Messages in my myGov inbox.</li>
  <li>The physical mailbox in my apartment.</li>
</ol>

<p>These are inboxes because they fill up over time and need action to empty. You can also think of them as little domain-specific task lists. “Centralizing your inboxes” means moving all these tasks from their silos into the one, central todo list.</p>

<p>For example, I have a daily task called “catch up” to clear the digital inboxes:</p>

<ol>
  <li>Go through all my communication apps (email, Discord, Twitter DMs etc) and triage the unread conversations: if something needs replying to, I either reply immediately or make a task to reply later so I don’t forget.</li>
  <li>File the contents of my Downloads folder.</li>
  <li>Go through Twitter/browser bookmarks and turn them into tasks (e.g., if I bookmark an article, the task is to read the article).</li>
</ol>

<p>In this way I mostly manage to stay on top of comms.</p>

<h2 id="inbox-zero">Inbox Zero</h2>

<p><em>All inboxes should be at zero.</em></p>

<p>You have probably heard of inbox zero. It sounds like LinkedIn-tier advice. But if you struggle with comms, with replying to people in a timely manner (or at all), inbox zero is a good strategy. There are two reasons, briefly:</p>

<ul>
  <li>Inbox zero has no false negatives: if an inbox is empty, you know you’ve handled everything.</li>
  <li>Important communications have a way of “camouflaging” themselves among irrelevance.</li>
</ul>

<p>And, like everything: before you make it into a habit, it feels incredibly time-consuming and labour-intensive. But once you make it into a habit, it’s almost effortless.</p>

<p>So, I will give you an example. I come in to work, and read four emails. Three could’ve been archived outright, one needed a reply from me. And I said, oh, I’ll get to it in a second. And then I got distracted with other tasks. And throughout the day I kept glancing at the email client, and thinking, yeah, I will get to it. Eventually I got used to those four emails: they are the “new normal”, and what’s normal doesn’t require action. I would think: if those emails are there, and I already looked at them, then it’s probably fine. At the end of the day I looked at the inbox again and saw, wait, no, one of those emails was actually important. That’s the failure mode of inbox greater-than-zero: the important stuff hides among the irrelevant stuff, such that a quick glance at the todo list doesn’t show anything obviously wrong. Dually, with inbox zero, if you see a single email in the inbox, you know there’s work to do.</p>

<p>Inbox zero removes ambiguity. If there’s <em>anything</em> in the inbox, you know, unambiguously, you have a task to complete. If there is nothing in the inbox, you know, unambiguously, there is nothing to do. Inbox zero frees you from false negatives, where you think you’ve handled your correspondence but there’s some important email, camouflaged among the trivial ones, that has not been replied to.</p>

<p>A problem with doing inbox zero is most communication apps (like Discord, Slack, iMessage etc.) don’t have a concept of an inbox, just the read/unread flag on conversations. Since there’s no separation between the inbox and the archive, it takes more discipline to ensure every conversation is replied to.</p>

<h2 id="inbox-bankruptcy">Inbox Bankruptcy</h2>

<p><em>If an inbox is overwhelmed, archive it in a recoverable way.</em></p>

<p>By the time I started to become organized I’d already accumulated thousands of bookmarks, unread emails, files in my downloads folder, papers in my physical inbox, etc. It would have been a Herculean effort to file these things away. So I didn’t. All the disorganized files, I wrapped them up in a folder and threw them in my <code>Attic</code> folder. Emails? Archived. Bookmarks? Exported to HTML, archived the export, and deleted them from the browser.</p>

<p>Ideally you should do this once, at the start.</p>

<p>And by archiving things rather than deleting them, you leave open the possibility that as some point in the future, you might be able to action some of those things. Triage the old bookmarks, sort your filesystem, etc.</p>

<h2 id="do-it-on-your-own-terms">Do It On Your Own Terms</h2>

<p><em>Bring aversion-causing tasks into an environment that you control.</em></p>

<p>If you’re averse to doing something, for emotional reasons, one way to overcome the aversion is to do it as much as possible on your own terms.</p>

<p>An example: you have to fill out some government form. You’re averse to it because you worry about making a mistake. And just the thought of opening the form fills you with dread. So, take the boxes in the form, and make a spreadsheet for them. If fonts/colours/emojis/etc. if that makes it feel more personal, or like something you designed and created. Then fill out the form in the spreadsheet. And then copy the values to the form and submit.</p>

<p>This helps because instead of performing the task in this external domain where you feel threatened, you’re performing the task in your own domain, in your own terms.</p>

<p>Another example: you have an email you have to reply to, and you’re anxious about it. Just opening the email client gives you a bad feeling. Instead, try composing the email elsewhere, say, in a text editor. The change of environment changes the emotional connotation: you’re not replying to an email, you’re writing a text. You might even think of it as a work of fiction, a pseudoepigraphy.</p>

<h2 id="replace-interrupts-with-polling">Replace Interrupts with Polling</h2>

<p><em>Turn off notifications, check comms as an explicit task.</em></p>

<p>“Interrupts” means notifications, which arrive at unpredictable and often inconvenient times. “Polling” means manually checking the source of the notifications for things to action.</p>

<p>The obvious benefit of replacing interrupts with polling is you don’t get interrupted by a notification. The less obvious benefit is that when notifications are smeared throughout the day, it is easy for them to fall through the cracks. Something comes in when you’re busy, and you swipe it away, and forget about it, and realize days later you forgot to respond to an important message. Polling is focused: you’ve chosen a block of time, you’re committed to going through the notifications systematically. Instead of random islands of interruptions throughout the day, you have a few short, focused blocks of going through your notifications. Often I get an email while I’m on my phone and think, well, I can’t reply, typing on mobile is horrible, I’m on a train, etc. Polling usually happens at my desk so I have no excuses: I’m in the right environment and in the right mental state.</p>

<p>This is so trite. “Put your phone on Do Not Disturb and silence notifications”. And yet it works. For a long time I resisted this because I aspire to be the kind of person who gets a message and replies within minutes. But I didn’t notice how much notifications were impairing my focus until one day I accidentally put the phone/desktop on DND and had a wonderfully productive, distraction-free day.</p>

<h2 id="accountability-buddy">Accountability Buddy</h2>

<p><em>Get someone to sit next to you while you work.</em></p>

<p>If you’re struggling to work on something, work next to another person. Set a timer and tell them what you’re going to accomplish and when the timer ends tell them how you did. Just being around other people can make it easier to overcome aversion. This is why coworking spaces are useful.</p>

<p>If you don’t have a person around, you might try <a href="https://www.focusmate.com/">Focusmate</a>. It works for <a href="https://parconley.com/focusmate/">some people</a>.</p>

<p>Sometimes I’ll start a conversation with Claude, lay out my plans for the day, and update Claude as I do things. If I’m stuck, or if I need help overcoming procrastination, I can ask Claude for help, and it’s easier to do that in an on-going thread because Claude already has the necessary context, so I don’t have to describe what I’m struggling with <em>ab initio</em>.</p>

<h2 id="plan-first-do-later">Plan First, Do Later</h2>

<p><em>Separate planning from action, so if you get distracted while acting, you can return to the plans.</em></p>

<p>Separating planning from doing can be useful. Firstly because planning/doing require different kinds of mental energy. When you’re too tired to do, you can often still plan. Secondly because by separating them you can look back and see how useful the plan was, how much you stuck to it, and then get better at planning.</p>

<p>Thirdly, and most importantly, because for ADHD people doing can be a source of distractions that impair other tasks. From <a href="https://www.goodreads.com/book/show/108593.Driven_to_Distraction"><em>Driven to Distraction</em></a>:</p>

<blockquote>
  <p>The first item on the list referred to a cough drop. As I read it, I asked her about it.</p>

  <p>“Oh,” she answered, “that is about a cough drop someone left on the dashboard of our car. The other day I saw the cough drop and thought, I’ll have to throw that away. When I arrived at my first stop, I forgot to take the cough drop to a trash can. When I got back into the car, I saw it and thought, I’ll throw it away at the gas station. The gas station came and went and I hadn’t thrown the cough drop away. Well, the whole day went like that, the cough drop still sitting on the dashboard. When I got home, I thought, I’ll take it inside with me and throw it out. In the time it took me to open the car door, I forgot about the cough drop. It was there to greet me when I got in the car the next morning. […]</p>

  <p>It was such a classic ADD story that I’ve come to call it the “cough drop sign” when a person <strong>habitually has trouble following through on plans on a minute-to-minute, even second-to-second, basis</strong>. This is not due to procrastination per se as much as it is due to <strong>the busyness of the moment interrupting or interfering with one’s memory circuits</strong>. You can get up from your chair, go into the kitchen to get a glass of water, and then in the kitchen forget the reason for your being there.</p>
</blockquote>

<p>Emphasis mine.</p>

<p>When I notice a micro-task like this, my instinct is not to do it, but to put it in the todo list. <em>Then</em> I try to do it immediately. And if I get distracted halfway through, it’s still there, in the todo list.</p>

<p>A practical example is something I call the apartment survey. When I clean the apartment, I start by walking around, noticing everything that needs fixing, and creating a little task for it. Even something as simple as “move the book from the coffee table to the bookshelf”. But I don’t start anything until the survey is done. And when the survey is done, I execute it. And if I get distracted halfway through cleaning the apartment, I have the tasks in the list to go back to.</p>

<h2 id="derailment">Derailment</h2>

<p><em>Introspect to find the things that ruin your productivity and avoid them.</em></p>

<p>Through <a href="#introspection">introspection</a> you can discover the behaviours that derail your productivity.</p>

<p>Lifting in the morning derails the day. Cardio is fine, but if I lift weights in the morning, the rest of the day I’m running on -40 IQ points. The most cognitively demanding thing I can do is wash the dishes. I’m not sure what the physiology is: maybe it’s exhaustion of the glycogen stores, or fatigue byproducts floating around in my brain, or the CNS is busy rewiring the motor cortex. The point is that I try to do the cognitively-demanding things in the morning and lift in the evening.</p>

<p>Motion also does this. I suppose it’s the H in ADHD: hyperactivity. I used to be a big pacer: put on headphones, pace my room back and forth daydreaming for hours and hours. Some days I would pace so much my legs were sore. To think, I have to be in motion. But sometimes I’ve thought enough, and it’s time to do.</p>

<p>Music, too, derails me. If I start listening to music very soon I start pacing the room and it’s over. Music is almost like reverse methylphenidate: it makes me restless, mentally hyperactive, and inattentive.</p>

<p>So, to be productive I have to not move too much, and be in silence, and not have fried my brain with exercise.</p>

<h2 id="using-ocd-to-defeat-adhd">Using OCD to Defeat ADHD</h2>

<p><em>If being organized makes you feel good, spend more on organizing your productivity system.</em></p>

<p>In a sense, having a really complex productivity system is like trying to use OCD to defeat ADHD, to use high neuroticism to defeat low conscientiousness. There’s an element of truth to that, sure (see mastery of drudgery).</p>

<p>But here’s the thing: you have to play to your strengths. You have to. If you are very OCD and you like order and systems and planning but you struggle with doing, then, yeah, it might work, for you, to spend more energy on the trappings of productivity (ensuring your todo list is properly formatted, organized, etc.) if that bleeds over into making it easier to do the real, meaningful things.</p>

<p>For example: I like emojis in my todo list. The chores have a 🧼 emoji, the comms tasks have an ✉️ emoji. That kind of thing. Makes it easy to see at a glance what kind of things I have to do, to group them by category. But Todoist doesn’t support emoji icons on tasks, unlike Notion, so adding the emojis takes a bit more effort: I have to open <a href="https://www.raycast.com/">Raycast</a> and search for the emoji I want and paste it into the task title. It adds a little friction each time I create a task, but the benefit is I enjoy using the todo list more.</p>

<h2 id="the-master-of-drudgery">The Master of Drudgery</h2>

<p><em>Avoid spending too much productive time on worthless chores.</em></p>

<p>A productivity antipattern: indulging too much in “quick wins”.</p>

<p>There’s this running joke, or meme, online, about the kind of person who has this huge, colossal productivity system, but they get nothing done. They have five todo list apps and everything is categorized and indexed and sorted, but their material output is zero. They complete a hundred tasks a day and when you interrogate what those tasks are they are “brush my teeth” or “reorganize my bookshelf”. There’s a lot of truth to that.</p>

<p>Every task falls into one of two categories: the quick wins, and everything else. Life is not made of quick wins. Creative, generative, open-ended work requires long periods of focused work. A lot of unpleasant, aversion-causing things have to be done. But the quick wins are infinite: there’s always some micro-chore to do around the house, for example.</p>

<p>I don’t have advice specifically on avoiding this. But you should notice if you’re doing it and course-correct.</p>

<h2 id="thrashing">Thrashing</h2>

<p><em>Don’t let procrastiation on one task derail everything else.</em></p>

<p>A bad failure mode I have is: I have a task <em>T</em> that I have to do, but I can’t, because of some kind of aversion. But when I try to work on other things, the alarms are going off in my head, telling me to work on <em>T</em> because you’ve been putting this off for so long and life is finite and the years are short and all that. The end result is that because one thing is blocked, everything grinds to a halt. It’s a very annoying state to be in.</p>

<p>And I don’t have a perfect solution, but I try to manage it but applying a sense of proportionality, “render unto Caesar” etc. You can’t ignore <em>T</em> forever, dually, you probably won’t solve it in the next ten minutes. But you can timebox <em>T</em>: allocate some block of time every day to try to advance it, or at least to work around it, e.g. to ask a friend for help, for example. And the rest of the day you can dedicate to moving other things forward.</p>

<h2 id="put-travel-in-the-calendar">Put Travel in the Calendar</h2>

<p><em>Calculate travel time ahead of time to avoid being late.</em></p>

<p>I am chronically late. So if I have a calendar event like a party at someone’s home, I will go on Google Maps and measure the travel time (from my home or wherever I’m likely to be) to the destination, and make a time block for that. e.g., if it takes 30m to go to the dentist and back, this is what my calendar looks like:</p>

<p><img src="https://borretti.me/assets/content/notes-on-managing-adhd/travel.webp" alt="A screenshot of my calendar, showing an event to go to the dentist, bookended by two events to travel to and from the dentist." width="300"></p>

<p>This ensures I leave my home on time. If it’s something especially important I often add 15m to the travel block as a buffer.</p>



<p><em>Use tools that are effective and you like.</em></p>

<p>What productivity app should I use? Reminders? Linear? Todoist? A bullet journal?</p>

<p>Use something that feels good and works. That’s all. Personally I use Todoist. A lot of people think todo list apps are commodities, but when you have an app open for 98% of your screentime, the little subtleties really add up. I’ve tried using Reminders, Linear, as my todo lists, and building my own. My productivity always suffers and I always go back to Todoist.</p>

<p>One app is better than two: the more disjoint things you have to pay attention to, the worse it is.</p>

<p>If you’re a software engineer I strongly advise against building your own, which is a terrible form of procrastination for creative types.</p>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://davidcain.gumroad.com/l/howtodothings"><em>How To Do Things</em></a> describes an ADHD-friendly version of the Pomodoro method. It’s a 50 page PDF with no fluff, so it’s worth buying to support writers who don’t waste the reader’s time.</li>
  <li><a href="https://en.wikipedia.org/wiki/Getting_Things_Done"><em>Getting Things Done</em></a> has a lot of good advice (e.g. dump your entire brain into the todo list) but it’s somewhat neurotypical in that it’s assumed you won’t have any problems actually <em>executing</em> the tasks.</li>
</ul>

<h2 id="acknowledgements">Acknowledgements</h2>

<p>Thanks to Cameron Pinnegar for reviewing.</p>

</article></div>]]></description>
        </item>
    </channel>
</rss>