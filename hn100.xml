<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 08 Aug 2024 09:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[RLHF is just barely RL (109 pts)]]></title>
            <link>https://twitter.com/karpathy/status/1821277264996352246</link>
            <guid>41188647</guid>
            <pubDate>Thu, 08 Aug 2024 06:22:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/karpathy/status/1821277264996352246">https://twitter.com/karpathy/status/1821277264996352246</a>, See on <a href="https://news.ycombinator.com/item?id=41188647">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Google and Meta struck secret ads deal to target teenagers (164 pts)]]></title>
            <link>https://www.ft.com/content/b3bb80f4-4e01-4ce6-8358-f4f8638790f8</link>
            <guid>41188295</guid>
            <pubDate>Thu, 08 Aug 2024 05:08:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ft.com/content/b3bb80f4-4e01-4ce6-8358-f4f8638790f8">https://www.ft.com/content/b3bb80f4-4e01-4ce6-8358-f4f8638790f8</a>, See on <a href="https://news.ycombinator.com/item?id=41188295">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="barrier-page"><div id="heroOffer-Hero offers-785c40e2-d0b6-4e79-9cfe-aadcf8c5411a" data-component="heroOffer" data-component-unique-name="Hero offers"><section data-o-grid-colspan="12 L6"><h2><blockquote>Google and Meta struck secret ads deal to target teenagers</blockquote></h2></section><div data-o-grid-colspan="12 L6"><p><span></span><span></span><span></span><span>Subscribe to unlock this article</span><span></span></p></div><div data-o-grid-colspan="12 L6"><p><h2><span>To read this article for free</span></h2><h2><strong><span>Register for FT Edit now</span></strong></h2></p><p><span>Once registered, you can:

• Read this article and many more, free for 30 days with no card details required
• Enjoy 8 thought-provoking articles a day chosen for you by senior editors
• Download the award-winning FT Edit app to access audio, saved articles and more</span></p></div></div><div data-component="subscriptionOptions" data-component-unique-name="Subscription Options Offers API"><h2>Explore our full range of subscriptions.</h2><div><div><p>Discover all the plans currently available in your country</p></div><div><p>Digital access for organisations. Includes exclusive features and content.</p></div></div></div><div data-component="whyFT" data-component-unique-name="Why FT"><div><h2>Why the FT?</h2><p>See why over a million readers pay to read the Financial Times.</p></div><p><a href="https://subs.ft.com/whytheft?ft-content-uuid=b3bb80f4-4e01-4ce6-8358-f4f8638790f8">Find out why</a></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Judge Fines Ripple $125M, Bans Future Securities Law Violations (124 pts)]]></title>
            <link>https://www.coindesk.com/policy/2024/08/07/judge-fines-ripple-125m-bans-future-securities-law-violations-in-long-running-sec-case/</link>
            <guid>41186116</guid>
            <pubDate>Wed, 07 Aug 2024 22:11:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.coindesk.com/policy/2024/08/07/judge-fines-ripple-125m-bans-future-securities-law-violations-in-long-running-sec-case/">https://www.coindesk.com/policy/2024/08/07/judge-fines-ripple-125m-bans-future-securities-law-violations-in-long-running-sec-case/</a>, See on <a href="https://news.ycombinator.com/item?id=41186116">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-module-name="article-body-no-right-rail" data-module-version="1.0.0"><div data-submodule-name="composer-content"><div><ul><li><p>A federal judge imposed a $125 million fine on Ripple after finding last year that its institutional sales of XRP violated federal securities laws.</p></li><li><p>The judge reiterated her view that Ripple's programmatic sales of XRP to retail clients through exchanges did not violate federal securities laws.</p></li></ul></div><div><p>A federal judge ordered Ripple to pay $125 million in civil penalties and imposed an injunction against future securities law violations on Wednesday.</p></div><div><p>District Judge Analisa Torres, of the Southern District of New York, <a href="https://storage.courtlistener.com/recap/gov.uscourts.nysd.551082/gov.uscourts.nysd.551082.973.0.pdf" target="_blank">imposed the fine</a> after finding that 1,278 institutional sale transactions by Ripple violated securities law, leading to the fine. The $125.035 million fine is well below the $1 billion in disgorgement and prejudgment interest and $900 million in civil penalties the SEC sought.</p></div></div><div data-submodule-name="composer-content"><div><p>Wednesday's order on remedies follows the judge's July 2023 ruling in the case itself, finding that Ripple violated federal securities laws through its direct sale of XRP to institutional clients, though she also ruled that Ripple's programmatic sales of XRP to retail clients through exchanges did not violate any securities laws.</p></div><div><p>The SEC tried unsuccessfully to appeal that portion of the ruling while the case was ongoing.</p></div></div><div data-submodule-name="composer-content"><div><p>Judge Torres also banned Ripple from future violations of federal securities laws on Wednesday, saying that while she isn't making a judgement that Ripple has violated any laws after the SEC filed its lawsuit, the company may well "cross the line" in a section referring to Ripple's "on demand liquidity" offerings.</p></div><div><p>"Rather, the Court finds that Ripple’s willingness to push the boundaries of the Order evinces a likelihood that it will eventually (if it has not already) cross the line," she said. "On balance, the Court finds that there is a reasonable probability of future violations, meriting the issuance of an injunction."</p></div><div><p>The injunction document requires Ripple to file a registration statement if it intends to sell any securities.</p></div><div><p>The SEC is likely to appeal the July 2023 ruling now that the judge has imposed a sentence, after the same judge denied the SEC's motion for an interlocutory appeal last year.</p></div><div><p>The SEC and Ripple settled charges tied to CEO Brad Garlinghouse and other executives after that interlocutory appeal was denied.</p></div><div><p>The price of XRP rose 3 cents, or around 2%, after the judgement was published.</p></div><p>Edited by<!-- --> <!-- -->Stephen Alpher.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gazette: Cloud-native millisecond-latency streaming (108 pts)]]></title>
            <link>https://github.com/gazette</link>
            <guid>41185859</guid>
            <pubDate>Wed, 07 Aug 2024 21:39:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/gazette">https://github.com/gazette</a>, See on <a href="https://news.ycombinator.com/item?id=41185859">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-turbo-body="">
      


    <div>
      <p><a href="#start-of-content" data-skip-target-assigned="false">Skip to content</a>

      <span data-view-component="true">
    <span data-view-component="true"></span>
</span></p><react-partial partial-name="keyboard-shortcuts-dialog" data-ssr="false">
  
  
  
</react-partial>




      

          

              


<header role="banner" data-color-mode="light" data-light-theme="light" data-dark-theme="dark">
  <h2>Navigation Menu</h2>

  

  <div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;packages&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;packages_link_product_navbar&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_product_navbar&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>

                  <li>
      
      
</li>

                  <li>
      
      <div>
                <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;white_papers_ebooks_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;white_papers_ebooks_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      White papers, Ebooks, Webinars

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="org:gazette" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="_qZEQNwho9swF08KwM9xs12dgNQ10Ufjdppe_ZwvmAk0UjiF4U-e6hiP2G0htU_yJDD4dXmhLwy40qH6M8_k9Q" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="" data-current-org="gazette" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false">
  
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Corg-login%3E&amp;source=header" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/gazette&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="1b8324de2362d572fa8034fa64ef93153a63f250d736e9dd15d23ef2b640db93" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<org-login>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>
        </p></div>
      </div>
</header>

      
    </div>

  








    


    
    <include-fragment data-base-src="https://github.com/notifications/beta/shelf"></include-fragment>





  <div data-commit-hovercards-enabled="" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="">
      <main>
        















<div itemscope="" itemtype="http://schema.org/Organization">
  


<header>
  <div>
        <p><img itemprop="image" src="https://avatars.githubusercontent.com/u/47641995?s=200&amp;v=4" width="100" height="100" alt="@gazette">
        </p>
      <div>
        

          <div><p>Development of Gazette and related projects.</p></div>

        <ul>

          <li>
          </li>

        </ul>

        
      </div>

      

    </div>

  <div>
  <nav data-url="/users/gazette/tab_counts" aria-label="Organization">
    <div>
      <ul>
          <li data-tab-item="org-header-overview-tab">
  <a href="https://github.com/gazette">
    
    Overview
  </a>
</li>

          <li data-tab-item="org-header-repositories-tab">
  <a href="https://github.com/orgs/gazette/repositories">
    
    Repositories
      <span title="Not available" data-view-component="true"></span>
  </a>
</li>

          
          <li data-tab-item="org-header-projects-tab">
  <a href="https://github.com/orgs/gazette/projects" data-hotkey="g b">
    
    Projects
      <span title="Not available" data-view-component="true"></span>
  </a>
</li>

          <li data-tab-item="org-header-packages-tab">
  <a href="https://github.com/orgs/gazette/packages">
    
    Packages
  </a>
</li>

          
          <li data-tab-item="org-header-people-tab">
  <a href="https://github.com/orgs/gazette/people">
    
    People
      <span title="Not available" data-view-component="true"></span>
  </a>
</li>

          
          
          
          
      </ul>

      
    </div>
  </nav>
</div>


    
</header>


  <div data-view-component="true">

  <div data-hpc="" data-view-component="true">
  

  
  
  

    <div>

  <h2>
        Popular repositories

      <span>Loading</span>

    <span role="status" aria-live="polite" data-error-text="Something went wrong." data-success-text="Order updated."></span>
  </h2>

    <ol>

    <li>
      <div>
          


          <p>
            Build platforms that flexibly mix SQL, batch, and stream processing paradigms
          </p>

          <p>
              <span>
  <span></span>
  <span itemprop="programmingLanguage">Go</span>
</span>

              <a href="https://github.com/gazette/core/stargazers">
                <svg aria-label="stars" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
                622
              </a>
              <a href="https://github.com/gazette/core/forks">
                <svg aria-label="forks" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>
                51
              </a>
          </p>
        </div>
    </li>

    <li>
      <div>
          


          <p>
            Example bare-bones gazette consumer application that plays ping pong. _At Scale_!
          </p>

          <p>
              <span>
  <span></span>
  <span itemprop="programmingLanguage">Go</span>
</span>

              <a href="https://github.com/gazette/ping-pong/stargazers">
                <svg aria-label="stars" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
                11
              </a>
          </p>
        </div>
    </li>
</ol>

</div>


    <div id="org-profile-repositories">
      <h3>
        
        Repositories
      </h3>
      <div>
          <!-- '"` --><!-- </textarea></xmp> --><form data-autosearch-results-container="org-repositories" role="search" data-turbo="false" action="/gazette" accept-charset="UTF-8" method="get">
            <div>
                <details id="type-options">
                    <summary aria-haspopup="true" data-view-component="true">    <span>Type</span>
                    <span></span>
</summary>                  <details-menu>
                    <div>
                      <header>
                        <span>Select type</span>
                        
                      </header>
                      <p><label role="menuitemradio" aria-checked="true" tabindex="0">
                            
                            
                            <span data-menu-button-text="">All</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Public</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Sources</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Forks</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Archived</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Mirrors</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Templates</span>
                          </label>
                      </p>
                    </div>
                  </details-menu>
                </details>

                  <details id="language-options">
                      <summary aria-haspopup="true" data-view-component="true">    <span>Language</span>
                      <span></span>
</summary>                    <details-menu>
                      
                    </details-menu>
                  </details>

                <details id="sort-options">
                    <summary aria-haspopup="true" data-view-component="true">    <span>Sort</span>
                    <span></span>
</summary>                  <details-menu>
                    <div>
                      <header>
                        <span>Select order</span>
                        
                      </header>
                      <p><label role="menuitemradio" aria-checked="true" tabindex="0">
                          
                          
                          <span data-menu-button-text="">Last updated</span>
                        </label>
                        <label role="menuitemradio" aria-checked="false" tabindex="0">
                          
                          
                          <span data-menu-button-text="">Name</span>
                        </label>
                        <label role="menuitemradio" aria-checked="false" tabindex="0">
                          
                          
                          <span data-menu-button-text="">Stars</span>
                        </label>
                      </p>
                    </div>
                  </details-menu>
                </details>
                
              </div>
</form>
        </div>
      <div id="org-repositories" data-delay-results="">
    <p><span data-autosearch-results="">Showing 2 of 2 repositories</span></p><div data-view-component="true">
  
  
    <ul data-view-component="true">
        <li data-view-component="true">          <div data-view-component="true" itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/gazette/core/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/gazette/core" data-view-component="true">
          core
</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            Build platforms that flexibly mix SQL, batch, and stream processing paradigms
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-107715151" href="https://github.com/gazette/core/graphs/commit-activity" data-view-component="true">
        </a><tool-tip id="tooltip-22078fa1-d807-4dbc-870e-9769176b8edf" for="commit-activity-link-107715151" popover="manual" data-direction="s" data-type="label" data-view-component="true">gazette/core’s past year of commit activity</tool-tip></span>
</p></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/gazette/ping-pong/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/gazette/ping-pong" data-view-component="true">
          ping-pong
</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            Example bare-bones gazette consumer application that plays ping pong. _At Scale_!
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-224278555" href="https://github.com/gazette/ping-pong/graphs/commit-activity" data-view-component="true">
        </a><tool-tip id="tooltip-4fc51d62-7b43-4a99-b99c-c2a42a17b0e3" for="commit-activity-link-224278555" popover="manual" data-direction="s" data-type="label" data-view-component="true">gazette/ping-pong’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">

        <p><span>
  <span></span>
  <span itemprop="programmingLanguage">Go</span>
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" href="https://github.com/gazette/ping-pong/stargazers" data-view-component="true">
          
          11
</a>

        <p><span data-view-component="true">
          <svg aria-label="fork" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" href="https://github.com/gazette/ping-pong/issues" data-view-component="true">
        
        0
</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" href="https://github.com/gazette/ping-pong/pulls" data-view-component="true">
        
        0
</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2020-07-08T16:02:46Z">Jul 8, 2020</relative-time>
</span></p></div></div>
</li>
</ul>  
</div></div>
  </div>
</div>

    <div data-view-component="true">
            







  


    

<include-fragment src="/orgs/gazette/topics/most_used?context=overview" accept="text/fragment+html">
  <div>
      <h4>Most used topics</h4>
      <p>Loading…</p>
    </div>
</include-fragment>


        </div>
</div>
</div>

      </main>
  </div>

          




    <ghcc-consent id="ghcc" data-initial-cookie-consent-allowed="" data-cookie-consent-required="true"></ghcc-consent>


  

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open="">
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog="">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GPT-4 LLM simulates people well enough to replicate social science experiments (137 pts)]]></title>
            <link>https://www.treatmenteffect.app/</link>
            <guid>41185783</guid>
            <pubDate>Wed, 07 Aug 2024 21:30:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.treatmenteffect.app/">https://www.treatmenteffect.app/</a>, See on <a href="https://news.ycombinator.com/item?id=41185783">Hacker News</a></p>
Couldn't get https://www.treatmenteffect.app/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Mistral Agents (154 pts)]]></title>
            <link>https://mistral.ai/news/build-tweak-repeat/</link>
            <guid>41184559</guid>
            <pubDate>Wed, 07 Aug 2024 19:32:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mistral.ai/news/build-tweak-repeat/">https://mistral.ai/news/build-tweak-repeat/</a>, See on <a href="https://news.ycombinator.com/item?id=41184559">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img src="https://mistral.ai/images/news/build-tweak-repeat.png" alt="Detailed benchmarks" width="20%"></p><p>Language models are changing the way we build software, serving as a flexible orchestrator in between knowledge sources and user interfaces. Building such software comes with new challenges to improve quality, reduce latency, and prototype quickly. Today, we’re announcing various advancements in this direction.</p><h3 id="simpler-more-efficient-model-customization">Simpler, more efficient model customization</h3><p>Because large language models are rapidly finding newer and more specialised use cases, it is critical that developers are able to quickly and efficiently tailor frontier models to their specific applications. To that end, we’re announcing the ability to customise any of our flagship and specialist models on La Plateforme, including Mistral Large 2 and Codestral.</p><p>Models can be customised using a base prompt, few-shot prompting, or fine-tuning, and you can bring your own dataset. Crucially, model customization follows the techniques developed by the Mistral AI science team for making strong reference models, so you can expect similar performance from your fine-tuned models. Developers can use model customization to integrate generative AI capabilities into their application with specific domain knowledge, context, or tone.</p><p><iframe src="https://www.youtube.com/embed/ctZbvA9tcOA" allowfullscreen="" title="YouTube Video"></iframe></p><p>We expect fine-tuning on our highly capable models to unlock a wealth of groundbreaking applications, and are eager to see what will be built with it. Check out our <a href="https://docs.mistral.ai/capabilities/finetuning/">fine-tuning documentation</a>, and try model customization on <a href="https://console.mistral.ai/">La Plateforme</a>.</p><h4 id="alpha-release-of-agents">Alpha release of Agents</h4><p>We’re also introducing an early version of Agents, that wraps models with additional context and instruction, for exposure on Le Chat or API. Agents help you create custom behaviour and workflows with a simple set of instructions and examples. With the advanced reasoning capabilities of Mistral Large 2, you can layer on increasingly complex workflows with multiple agents that are easy to share within your organisation. We’re working on connecting Agents to tools and data sources and are looking forward to your feedback on it.</p><p><iframe src="https://www.youtube.com/embed/CKsBqy3yTDw" allowfullscreen="" title="YouTube Video"></iframe></p><p><a href="https://docs.mistral.ai/capabilities/agents/">Learn more about Agents</a>.</p><h3 id="stable-version-of-our-client-sdk">Stable version of our client SDK</h3><p>We have made significant updates to the <code>mistralai</code> library to improve its usability and consistency, and today we are releasing mistralai 1.0, available for both <a href="https://github.com/mistralai/client-python">Python</a> and <a href="https://github.com/mistralai/client-ts">Typescript</a>. Learn more about our new SDK and check out the <a href="https://github.com/mistralai/client-python/blob/main/MIGRATION.md">migration guide</a>.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Prevention of HIV (499 pts)]]></title>
            <link>https://www.science.org/content/blog-post/prevention-hiv</link>
            <guid>41184365</guid>
            <pubDate>Wed, 07 Aug 2024 19:11:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/blog-post/prevention-hiv">https://www.science.org/content/blog-post/prevention-hiv</a>, See on <a href="https://news.ycombinator.com/item?id=41184365">Hacker News</a></p>
Couldn't get https://www.science.org/content/blog-post/prevention-hiv: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[NASA Says Boeing Starliner Astronauts May Fly Home on SpaceX in 2025 (185 pts)]]></title>
            <link>https://www.nytimes.com/2024/08/07/science/boeing-starliner-nasa-spacex.html</link>
            <guid>41184359</guid>
            <pubDate>Wed, 07 Aug 2024 19:10:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/08/07/science/boeing-starliner-nasa-spacex.html">https://www.nytimes.com/2024/08/07/science/boeing-starliner-nasa-spacex.html</a>, See on <a href="https://news.ycombinator.com/item?id=41184359">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/08/07/science/boeing-starliner-nasa-spacex.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Apple memory holed its broken promise for an OCSP opt-out (355 pts)]]></title>
            <link>https://lapcatsoftware.com/articles/2024/8/3.html</link>
            <guid>41184153</guid>
            <pubDate>Wed, 07 Aug 2024 18:50:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lapcatsoftware.com/articles/2024/8/3.html">https://lapcatsoftware.com/articles/2024/8/3.html</a>, See on <a href="https://news.ycombinator.com/item?id=41184153">Hacker News</a></p>
<div id="readability-page-1" class="page">
<nav>
Previous: <a href="https://lapcatsoftware.com/articles/2024/8/1.html">Has Apple underpaid App Store developers AGAIN?</a>
<br><a href="https://lapcatsoftware.com/articles/index.html" title="The Desolation of Blog">Articles index</a></nav>
<header><a href="https://lapcatsoftware.com/">Jeff Johnson</a> (<a href="https://underpassapp.com/">My apps</a>, <a href="https://www.paypal.me/JeffJohnsonWI">PayPal.Me</a>, <a href="https://mastodon.social/@lapcatsoftware" title="@lapcatsoftware@mastodon.social">Mastodon</a>)</header>
<p><a href="https://lapcatsoftware.com/FeedbackAssistantBoycott/">Feedback Assistant Boycott</a></p>

<h3>August 7 2024</h3>

<p>When you launch an app, macOS connects to Apple's OCSP service to check whether the app's Developer ID code signing certificate has been revoked by Apple. In November 2020, Apple's OCSP service experienced a <a href="https://lapcatsoftware.com/articles/ocsp.html">mass outage</a>, preventing Mac users worldwide from launching apps. In response and remedy to this outage, Apple made several explicit promises to Mac users in a support document, which can still be seen in a <a href="https://web.archive.org/web/20230924223924/https://support.apple.com/en-us/HT202491">Wayback Machine archive</a> from September 24, 2023.</p>
<blockquote>
<p>To further protect privacy, we have stopped logging IP addresses associated with Developer ID certificate checks, and we will ensure that any collected IP addresses are removed from logs.</p>
<p>In addition, over the the next year we will introduce several changes to our security checks:</p>
<ul>
<li>A new encrypted protocol for Developer ID certificate revocation checks</li>
<li>Strong protections against server failure</li>
<li>A new preference for users to opt out of these security protections</li>
</ul>
</blockquote>
<p>The last item, "A new preference for users to opt out of these security protections", has never been implemented in macOS, and two years ago I wrote that <a href="https://lapcatsoftware.com/articles/ocsp-privacy.html">Apple reneged on OCSP privacy</a>.</p>
<p>Now I've discovered that on September 26, 2023, the day that macOS 14 Sonoma was released to the public, Apple erased its promise from the support document. This can also be seen with the <a href="https://web.archive.org/web/20230927232937/https://support.apple.com/en-us/HT202491">Wayback Machine</a>.</p>
<p>Oddly, the original support document URL <a href="https://support.apple.com/en-us/HT202491">https://support.apple.com/en-us/HT202491</a> now redirects to a slightly different support document URL <a href="https://support.apple.com/en-us/102445">https://support.apple.com/en-us/102445</a>, though the content of the two documents remains mostly the same.</p>
<p>Apple's broken promise is shameful. The company apparently hopes we forget that it ever made the promise. Apple talks a good game, claiming "privacy is a fundamental human right", yadda yadda, but talk is cheap. When it comes to our right to stop our devices from phoning home to Cupertino, Apple is not interested. And if we can't trust Apple to keep its promises, then why should we trust anything else that Apple says, such as that our IP addresses are not logged? After all, it's impossible for us to verify this from the outside. Trust is earned through actions, and in this case Apple has neglected to act.</p>
<p>At this point, the only way to protect your own privacy is to use a firewall such as <a href="https://www.obdev.at/products/littlesnitch/">Little Snitch</a> to block the connections.</p>

<p><a href="https://lapcatsoftware.com/FeedbackAssistantBoycott/">Feedback Assistant Boycott</a></p>

<header><a href="https://lapcatsoftware.com/">Jeff Johnson</a> (<a href="https://underpassapp.com/">My apps</a>, <a href="https://www.paypal.me/JeffJohnsonWI">PayPal.Me</a>, <a href="https://mastodon.social/@lapcatsoftware" title="@lapcatsoftware@mastodon.social">Mastodon</a>)</header>
<nav><a href="https://lapcatsoftware.com/articles/index.html" title="The Desolation of Blog">Articles index</a><br>
Previous: <a href="https://lapcatsoftware.com/articles/2024/8/2.html">Has Apple underpaid App Store developers AGAIN?</a>
</nav>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Two-Stroke Engine Made from Scratch Using Basic Hardware Store Parts (119 pts)]]></title>
            <link>https://hackaday.com/2024/08/05/a-two-stroke-engine-made-from-scratch-using-basic-hardware-store-parts/</link>
            <guid>41184102</guid>
            <pubDate>Wed, 07 Aug 2024 18:44:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hackaday.com/2024/08/05/a-two-stroke-engine-made-from-scratch-using-basic-hardware-store-parts/">https://hackaday.com/2024/08/05/a-two-stroke-engine-made-from-scratch-using-basic-hardware-store-parts/</a>, See on <a href="https://news.ycombinator.com/item?id=41184102">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page">
    

    <p><a href="#content">Skip to content</a></p><!-- #masthead -->

    <div id="content">
        <main id="main" role="main">

        
            
<article itemscope="" itemtype="http://schema.org/Article" id="post-699296">
    <!-- .entry-header -->

    <div itemprop="articleBody">
        <figure id="attachment_699334" aria-describedby="caption-attachment-699334"><a href="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg"><img decoding="async" data-attachment-id="699334" data-permalink="https://hackaday.com/2024/08/05/a-two-stroke-engine-made-from-scratch-using-basic-hardware-store-parts/two-stroke_engine_from_scratch_working/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg" data-orig-size="610,610" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="two-stroke_engine_from_scratch_working" data-image-description="" data-image-caption="<p>A working DIY two-stroke in all of its glory, with the flywheel removed. (Credit: Camden Bowen)</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?w=610" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?w=400" alt="A working DIY two-stroke in all of its glory, with the flywheel removed. (Credit: Camden Bowen)" width="400" height="400" srcset="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg 610w, https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?resize=250,250 250w, https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?resize=400,400 400w" sizes="(max-width: 400px) 100vw, 400px"></a><figcaption id="caption-attachment-699334">A working DIY two-stroke in all of its glory, with the flywheel removed. (Credit: Camden Bowen)</figcaption></figure>
<p>How hard could it to be to build a two-stroke internal combustion engine (ICE) from scratch? <a href="https://www.youtube.com/watch?v=Us4e-nhESzc" target="_blank">This is a challenge that [Camden Bowen] gladly set for himself</a>, while foregoing such obvious wastes of time like first doing an in-depth literature study on the topic. That said, he did do some research and made the design in OnShape CAD before making his way over to the hardware store to make some purchases.</p>
<p>As it turns out, you can indeed build a two-stroke engine from scratch, using little more than some metal piping and other parts from the hardware store. You also need a welder and a lathe, with [Camden] using a Vevor mini-lathe that totally puts the ‘precision’ in ‘chatter’. As building an ICE requires a number of relatively basic parts that have to move with very little friction and with tight tolerances, this posed some challenges, but nothing that some DIY spirit can’t fix.</p>
<p>In the case of the very flexible boring bar on the lathe, improvising with some sturdy metal stock welded to a short boring bar resolved that, and precision was achieved. Together with an angle grinder, [Camden] was then able to manufacture the crank case, the cylinder and crank shaft and all the other pieces that make up an ICE. For the carburetor he used a unit off Amazon, which turned out to have the wrong throat size at 19 mm, but a 13 mm version worked. Ultimately, the first ICE constructed this way got destroyed mostly by running it dry and having the starter fluid acting as a solvent, but a full rebuild fixed all the issues.</p>
<p>This second attempt actually ran just fine the first time around, with oil in the crank case so that the poor engine wasn’t running dry any more. With a 40:1 fuel/oil mixture the little engine idles and runs as well as a two-stroke can, belching blue smoke and making a ruckus. This answers the question of whether you can build a two-stroke ICE with basic machining skills and tools, but of course the question that’s now on everyone’s lips is whether a four-stroke one would be nearly as ‘easy’. We wait with bated breath.</p>

<p><iframe title="I Made a Two-Stroke Engine Using Things I Found at the Hardware Store" width="800" height="450" src="https://www.youtube.com/embed/Us4e-nhESzc?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></p>
	            </div><!-- .entry-content -->
    
    <!-- .entry-footer -->
</article><!-- #post-## -->

            	<!-- .navigation -->
	
            

            
<!-- #comments -->

        
        

        
        

        
        </main><!-- #main -->
    </div><!-- #content -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What Are the Olympics Shooting Competitors Wearing on Their Faces? (171 pts)]]></title>
            <link>https://www.core77.com/posts/133176/What-are-the-Olympics-Shooting-Competitors-Wearing-On-Their-Faces</link>
            <guid>41183808</guid>
            <pubDate>Wed, 07 Aug 2024 18:08:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.core77.com/posts/133176/What-are-the-Olympics-Shooting-Competitors-Wearing-On-Their-Faces">https://www.core77.com/posts/133176/What-are-the-Olympics-Shooting-Competitors-Wearing-On-Their-Faces</a>, See on <a href="https://news.ycombinator.com/item?id=41183808">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
    <div id="post_header">
        

            <ul>
                


                            </ul>
        

            <h2>What are the Olympics Shooting Competitors Wearing On Their Faces? </h2>
                    <h2>Mechanical irises</h2>
                    

        
    </div>

    




            <section id="post">




<p id="ec5124_6611" data-ic-marker="3dbbc8_806">If you happened across the Olympic Air Pistol event for the first time, you might've been puzzled by the competitors' eyewear:</p><p id="c7dbaf_2549" data-ic-marker="87ba40_2001"><img src="https://s3files.core77.com/blog/images/1560869_81_133176_PeAXJhKmf.jpg"> </p><p id="e79aeb_2099" data-ic-marker="bb1f9b_1688"><img src="https://s3files.core77.com/blog/images/1560867_81_133176_VKmWOasc7.jpg"></p><p id="6f72cf_3154" data-ic-marker="a83c29_1900"><img src="https://s3files.core77.com/blog/images/1560868_81_133176_VKmWOasc7.jpg"> </p><p id="f7eeb7_62" data-ic-marker="d1a3fe_1761">So those are mechanical irises. Shooting competitors fine-tune them to bring their gunsights into sharp focus. Here's an example of one by manufacturer <a href="https://sportshootingdepot.com/product/gehmann-clip-on-iris/" rel="">Gehmann</a>:</p><p id="b7c818_980" data-ic-marker="a952a_1575"><img src="https://s3files.core77.com/blog/images/1560870_81_133176_W9WJ0kC9u.jpg"> </p><p id="bf0a7d_49" data-ic-marker="5cd2e7_1992">And the competition frames they sell, for those who don't wear eyeglasses:</p><p id="d2071e_8993" data-ic-marker="906e3c_1993"><img src="https://s3files.core77.com/blog/images/1560872_81_133176_gMh_cVAPU.png"> </p><p id="584aba_62" data-ic-marker="59bd32_2643">If you're wondering why competitors don't just rely on prescription glasses, it's because your eyesight can actually change over the course of the day. You're dealing with both fatigue and changing light conditions. The adjustability of the mechanical iris allows you to compensate for that.</p><p id="c532fd_6378" data-ic-marker="293611_696"><img src="https://s3files.core77.com/blog/images/1560871_81_133176_Luee7MYMm.jpg"> </p><p id="72faed_126" data-ic-marker="27bb0c_626">Lastly, it's worth noting that Oh Ye-jin, the South Korean competitor who took Gold in the 10 Meter Air Pistol event this year, eschews the irises. </p><p id="ea036_4855" data-ic-marker="4d3102_1668"><img data-image-width="880" data-image-height="1023" data-image-id="1560866" src="https://s3files.core77.com/blog/images/1560866_81_133176_CVCkNlub_.jpg"></p>        

            </section>

                


                


<div>
    <ul>
        <li data-this-post-id="133176" data-this-author-id="0">
            
            
            <p>Favorite This</p>
        </li>
       <li data-this-post-title="What are the Olympics Shooting Competitors Wearing On Their Faces? " data-this-post-id="133176" data-this-author-id="0">
            
            
            <p>Comment</p>
        </li>
        
    </ul> 
</div>






           


        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[1970 Clean Air Act was intended to cover carbon dioxide (176 pts)]]></title>
            <link>https://e360.yale.edu/digest/clean-air-act-climate-change</link>
            <guid>41183269</guid>
            <pubDate>Wed, 07 Aug 2024 17:05:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://e360.yale.edu/digest/clean-air-act-climate-change">https://e360.yale.edu/digest/clean-air-act-climate-change</a>, See on <a href="https://news.ycombinator.com/item?id=41183269">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
                        
<div>

  <figure>

    <div>
      
                  
      <p><a href="https://e360.yale.edu/assets/site/pexels-banananardini-8788264.jpg" data-caption="" data-credit="Pexels">
  
  
  
    
  
  
  
      
    
                
    
                
    
                
    
                
    
                        
  <img sizes="(min-width: 1450px) 832px, (min-width: 620px) 620px, 100vw" srcset="https://e360.yale.edu/assets/site/pexels-banananardini-8788264.jpg 1200w, https://e360.yale.edu/assets/site/_200xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 200w, https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 400w, https://e360.yale.edu/assets/site/_600xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 600w, https://e360.yale.edu/assets/site/_800xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 800w, https://e360.yale.edu/assets/site/_1000xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 1000w" src="https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg" alt="">
</a>
      </p>
          </div>

        <figcaption>
              <p><span></span>
          <span>Pexels</span></p>
    </figcaption>
    
  </figure>

</div> <!-- imageBlock -->
                  

<div>
<p>A new study finds evidence that Congress intended for the 1970 Clean Air Act to cover carbon dioxide emissions. The finding strengthens the legal case for regulating heat-trapping gases.</p>
<p>Under former president Barack Obama, the Environmental Protection Agency <a href="https://archive.epa.gov/epa/cleanpowerplan/fact-sheet-overview-clean-power-plan.html">put forward</a> a regulation on carbon dioxide emissions from power plants. But in 2022 the Supreme Court scrapped the standards, <a href="https://www.supremecourt.gov/opinions/21pdf/20-1530_n758.pdf">asserting</a> that Congress had not empowered the EPA to regulate greenhouse gases.</p>
<p>A new review of historical records challenges the conclusion of the Supreme Court. Undertaken by researchers at Harvard and Duke, the research finds that the authors of the 1970 Clean Air Act understood that burning fossil fuels would warm the planet, and they considered carbon dioxide to be a pollutant. While lawmakers did not view carbon dioxide as an imminent threat, they did believe the greenhouse gas would eventually need to be regulated.</p>
<p>At the time the law was crafted, there was already a growing awareness of climate change. Reports for presidents <a href="https://nsarchive.gwu.edu/document/31937-document-2-white-house-report-restoring-quality-our-environment-report-environmental">Lyndon Johnson</a> and <a href="https://www.jstor.org/stable/26253293">Richard Nixon</a> warned of planetary warming, and such information began to penetrate the public consciousness as Americans learned about the greenhouse effect by reading <a href="https://www.scientificamerican.com/article/carbon-dioxide-and-climate/">popular magazines</a>, watching <a href="https://www.youtube.com/watch?v=m-AXBbuDxRY">television</a>, or in <a href="https://dreamsofspace.blogspot.com/2017/04/my-weekly-reader-oct-5-1959-weather-is.html">school</a>. In a 1969 appearance on the Merv Griffin Show, beat poet Allen Ginsberg decried how “the current rate of air pollution brought about by the proliferation of automobiles” could cause “the rapid build-up of heat on the Earth.” </p>
<p>The new study explains how the staff of Senator Edmund Muskie, principal architect of the Clean Air Act, kept track of the public conversation on climate change. Muskie, a Democrat from Maine, warned at the time that unchecked pollution would “threaten irreversible atmospheric and climatic changes.” </p>
<p>The study, soon to be published in <em><em>Ecology Law Quarterly</em></em>, concludes that Congress “understood far more about the potential threat of anthropogenic climate change than either the [Supreme] Court or most commentators have recognized.”</p>
<h2>ALSO ON YALE E360</h2>
<p><a href="https://e360.yale.edu/features/climate-lawsuits-oil-industry-research"><strong><em>How an Early Oil Industry Study Became Key in Climate Lawsuits</em></strong></a></p>
</div>
                  </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Official proposal for Type Unions in C# (279 pts)]]></title>
            <link>https://github.com/dotnet/csharplang/blob/18a527bcc1f0bdaf542d8b9a189c50068615b439/proposals/TypeUnions.md</link>
            <guid>41183240</guid>
            <pubDate>Wed, 07 Aug 2024 17:02:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/dotnet/csharplang/blob/18a527bcc1f0bdaf542d8b9a189c50068615b439/proposals/TypeUnions.md">https://github.com/dotnet/csharplang/blob/18a527bcc1f0bdaf542d8b9a189c50068615b439/proposals/TypeUnions.md</a>, See on <a href="https://news.ycombinator.com/item?id=41183240">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;packages&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;packages_link_product_navbar&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_product_navbar&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>

                  <li>
      
      
</li>

                  <li>
      
      <div>
                <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;white_papers_ebooks_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;white_papers_ebooks_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      White papers, Ebooks, Webinars

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:dotnet/csharplang" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="FYIMrCnb55NrgkdfSEdBnMwrmiM2yxqYkwq__WK7JhFHqhYdLUaBhssmkbld-qO0f6g2OV43woq73K0UkZjWvA" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="dotnet/csharplang" data-current-org="dotnet" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=dotnet%2Fcsharplang" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/dotnet/csharplang/blob/18a527bcc1f0bdaf542d8b9a189c50068615b439/proposals/TypeUnions.md&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="069d1a30fab49cfd912b12ca207c4b569a1129407d0870735717e169b51a9c58" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>
        </p></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tony Hawk's Pro Strcpy (554 pts)]]></title>
            <link>https://icode4.coffee/?p=954</link>
            <guid>41183115</guid>
            <pubDate>Wed, 07 Aug 2024 16:48:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://icode4.coffee/?p=954">https://icode4.coffee/?p=954</a>, See on <a href="https://news.ycombinator.com/item?id=41183115">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
									
									
<figure><p>
<iframe title="Tony Hawk's Pro Strcpy" width="470" height="264" src="https://www.youtube.com/embed/Pjqw1Gwk0jg?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p></figure>



<p>Back in 2016 I really wanted to improve my exploit development skills and find some new bugs to hack the original Xbox. For many years people could download a hacked game save for games like 007 Agent Under Fire, Splinter Cell, or Mechassault and use it to hack their console. These game save hacks worked by exploiting trivial buffer overflows that would give the attacker code execution on the console and run unsigned code (code not authorized by Microsoft). From there you’d typically install some hacked OS files that would allow your console to run homebrew and pirated games. Being into computer security I knew all the academics of how exploit techniques like memory corruption and ROP worked but had no experience actually writing an exploit that used any of these techniques. I wasn’t going to try and write an exploit for a modern game console or PC without getting some elementary level experience under my belt first, which is why I turned to older gaming consoles.</p>



<p>Devices from the early-mid 2000s (or y2k devices as I like to call them) are a great platform for anyone wanting to learn more about how computer hardware works, exploit development, software development, etc. They have a low barrier to entry because they don’t have any of the security mitigations a more modern device will have and a lot of information on the inner workings have been thoroughly researched and documented. However, there’s still a lot of things yet to be discovered or learned about these consoles and any seasoned exploit developer can have a lot of fun treating these as “CTF” devices while in search of an easier way to hack the console.</p>



<h2>Part 1: Dropping in</h2>



<p>I started with the game save approach and began looking through the game saves I had from a backup of one of my consoles. The first game save I happen to open was for Tony Hawk’s Pro Skater 4. It was a custom park made with the “Create-A-Park” feature which was like a mini level editor players could use to create their own skate parks. Looking at the save file in a hex editor something immediately stuck out to me:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/gap_name.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-955&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1902,&quot;targetHeight&quot;:361,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img fetchpriority="high" decoding="async" width="1902" height="361" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/gap_name.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/gap_name.png 1902w, https://icode4.coffee/wp-content/uploads/gap_name-300x57.png 300w, https://icode4.coffee/wp-content/uploads/gap_name-768x146.png 768w, https://icode4.coffee/wp-content/uploads/gap_name-1536x292.png 1536w" sizes="(max-width: 1902px) 100vw, 1902px"><figcaption>Hex view of the save file</figcaption></figure></div>


<p>The “Create-A-Park” feature allows you to create what’s known as a “gap”, which is a term in skateboarding used to describe an area between two platforms you jump over. THPS4 allows you to name the gap so when a player successfully clears the gap the name will appear in screen with a point value. It added additional depth to the feature back in the early 2000s when the idea of creating your own level as a feature of a console game was still pretty novel. But for me it meant I had a starting point for bug hunting. This custom string had a max length of 31 characters (+ a null terminator), and presumably this would be run through some sort of string copy function. If I was lucky it would be strcpy (opposed to something like strncpy) and I might be able to use it as a memory corruption primitive. </p>



<p>I crafted a malicious save file by changing the string to some really long repeating ‘0x41’ character sequence and copied it back to my Xbox. For testing I’d be using an already hacked Xbox console that had full debugging capabilities which would allow me to step through individual CPU instructions and investigate memory contents. Upon loading the game save the console crashed and looking at the CPU state I could see the instruction pointer was set to 0x41414141 which meant the gap name string was likely being copied to the stack using strcpy. After finding the address of where the strcpy was happening I opened it in IDA for easier analysis:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/strcpy_call-1.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-959&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:640,&quot;targetHeight&quot;:283,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img decoding="async" width="640" height="283" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/strcpy_call-1.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/strcpy_call-1.png 640w, https://icode4.coffee/wp-content/uploads/strcpy_call-1-300x133.png 300w" sizes="(max-width: 640px) 100vw, 640px"></figure></div>


<p>The disassembly is a little hard to follow because the parameters for the inline strcpy call have been optimized but here’s the relevant pseudo code for the function that loads the save file data:</p>



<div id="urvanov-syntax-highlighter-66b3cb3c523eb582432218" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					<div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p></div>
				</td>
						<td><div><p><span>struct</span><span> </span><span>save_file_gap_data</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>char</span><span> </span><span>gap_name</span><span>[</span><span>32</span><span>]</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span><span>;</span></p><p><span>struct</span><span> </span><span>gap_description</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>char</span><span> </span><span>gap_name</span><span>[</span><span>32</span><span>]</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span><span>;</span></p><p><span>void</span><span> </span><span>read_park_file</span><span>(</span><span>)</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Loop through all the gaps in the park file.</span></p><p><span>	</span><span>for</span><span> </span><span>(</span><span>int</span><span> </span><span>i</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span> </span><span>i</span><span> </span><span>&lt;</span><span> </span><span>park_header</span><span>-&gt;</span><span>gap_count</span><span>;</span><span> </span><span>i</span><span>++</span><span>)</span></p><p><span>	</span><span>{</span></p><p><span>		</span><span>gap_description </span><span>gapDesc</span><span>;</span></p><p><span>		</span><span>save_file_gap_data</span><span>*</span><span> </span><span>pGapData</span><span> </span><span>=</span><span> </span><span>(</span><span>save_file_gap_data</span><span>*</span><span>)</span><span>pParkDataPtr</span><span>;</span></p><p><span>		</span><span>.</span><span>.</span><span>.</span></p><p><span>		</span><span>// Copy the gap name locally.</span></p><p><span>		</span><span>strcpy</span><span>(</span><span>gapDesc</span><span>.</span><span>gap_name</span><span>,</span><span> </span><span>pGapData</span><span>-&gt;</span><span>gap_name</span><span>)</span><span>;</span></p><p><span>		</span><span>.</span><span>.</span><span>.</span></p><p><span>		</span><span>// Register the gap data parsed from the save file.</span></p><p><span>		</span><span>sub_EA520</span><span>(</span><span>&amp;</span><span>gapDesc</span><span>)</span><span>;</span></p><p><span>		</span><span>// Next gap.</span></p><p><span>		</span><span>pParkDataPtr</span><span> </span><span>+=</span><span> </span><span>sizeof</span><span>(</span><span>save_file_gap_data</span><span>)</span><span>;</span></p><p><span>	</span><span>}</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span></p></div></td>
					</tr>
				</tbody></table>
			</div>



<p>As you can see the function loops through each gap in the save file and parses some information including the name which is copied to the gapDesc variable on the stack. There’s no bounds checking on the string so strcpy will continue to copy data until it reaches a null terminator. By overflowing the gap name string we can overwrite stack data including the return address for the function. This version of the game is conveniently compiled without stack cookies so we’re clear to trash as much data as we want. However, even once we control the return address not all memory is executable so we’ll need to do a little more work to get full code execution. </p>



<p>None of the gen 6 game consoles (Xbox, Playstation 2, Gamecube, Dreamcast) have any form of hardware data execution prevention (DEP) mitigations that would prevent regions of memory from being executable . However, Xbox does have some “soft DEP” that was used in later versions of the console and games but it can’t be applied to arbitrary regions of memory, it has to be a single contiguous region of memory. Basically, memory is only executable up to a certain address and everything thereafter is non-executable. This is achieved by changing the code segment selector address which defines the region of executable memory on the Pentium 3 processor. Later versions of the Xbox kernel will limit this region so not all memory is executable, but this really only prevents heap data from being executable and still leaves plenty of regions of RWX memory for us to use.</p>



<h2>Stick the landing</h2>



<p>The stack region and heap allocation containing the save file data are beyond the limit of the cs selector register, so we can’t execute code off either of these regions. However, all memory for the game executable including read-write data segments are in the executable region of memory, so all we need to do is find a way to copy some code to this area and we can execute it. This is where a ROP chain would prove useful but I actually found another way to achieve the same result that was a bit easier. </p>



<p>In addition to naming the gaps in the park file the game also lets you name the park itself. The park name string is stored in the header of the save file and the game must load this information after the player selects the save file so the name can be displayed in the UI. This header data is 136 bytes long and gets copied to a struct in the data segment of the executable which is in the executable region of memory. We can’t modify all of the header data as some fields need to be valid for the game to parse the file correctly. But there’s a small amount of data we can modify and it’s large enough to put a small memcpy stub there to copy our full payload to an executable region of memory and jump to it. Putting this all together we end up with the following:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thps4_memory_layout-1.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-1005&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1245,&quot;targetHeight&quot;:465,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1245" height="465" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thps4_memory_layout-1.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thps4_memory_layout-1.png 1245w, https://icode4.coffee/wp-content/uploads/thps4_memory_layout-1-300x112.png 300w, https://icode4.coffee/wp-content/uploads/thps4_memory_layout-1-768x287.png 768w" sizes="(max-width: 1245px) 100vw, 1245px"></figure></div>


<ol>
<li>After loading the save file but before the player presses “Start Game” the first 136 bytes of the save file are copied to the data segment of the game executable. This 136 bytes includes our shell code copy stub which will copy the full payload to an executable region of memory once we trigger the overflow.</li>



<li>After the player presses “Start Game” the save file will be loaded in full and our maliciously crafted gap name will be copied to the stack. The buffer is crafted specifically so that we overwrite the return address with the data segment address containing our shell code copy stub. </li>



<li>Once the park loading function returns it’ll jump to our shell code copy stub and copy a larger shell code payload from the save file buffer to some location in the game executable’s data segment that’s in the executable code region.</li>



<li>After copying the full payload the copy stub will jump to it giving us full arbitrary code execution.</li>
</ol>



<p>Now that we have full code execution on the console the next step is to disable signature enforcement and launch an unsigned executable, most likely one that could be used to further install softmod files on the console for a persistent hack. I’m not going to cover all the details of the security and OS on the Xbox or any other console mentioned in this post, but I will provide a brief overview of the steps used to patch the OS and launch additional unsigned code. I based this payload on the ones used in the existing softmod installer save files for 007 Agent Under Fire. The steps to patch out signature enforcement are as follows:</p>



<ol>
<li>Resolve the addresses of some kernel functions and data, the most notable being the address of the RSA public key used for signature validation of executable files.</li>



<li>Disable write protection in the machine state register and patch the RSA public key with the “habibi” key. </li>



<li>Launch a secondary executable file bundled in with the save game files, typically a softmod installer, though I used my classic “nyan cat” executable during all my testing. This executable must be signed with the habibi RSA key.</li>
</ol>



<details><summary>So what’s the “habibi” key?</summary>
<p>The habibi key pair is an RSA key that was generated by (presumably) the original Xbox Linux hacking group in the early 2000s. I haven’t been able to track down the entire back story to this key pair but this is what I’ve been able to conclude based on researching it. Rather than patching the RSA signature check out of the kernel which would allow for piracy the Xbox Linux group decided to instead replace the RSA public key with their own. This would allow them to sign their linux loader executable and run it on a console along with the game save hack but prevent people from using their game save to run pirated content (in theory). However, this didn’t really work since shortly after they released their exploit to run linux other hacking groups released additional exploit files to install a persistent hack on the console which completely removed the signature enforcement checks.</p>



<p>The more interesting thing about the habibi key is that the public key modulus only has a 4 byte difference compared to the Microsoft RSA public key. For reference the MS key is a 2048 bit RSA key. I’ve asked a few people how this might be possible and the answer I got is “if you change the exponent to something small like 3 you easily factor out a similar key”. This should require that the exponent of the public key is also patched to “3”. However, none of the shell code payloads that use the habibi key ever change the exponent used by the RSA signature verification routine. Presumably it’s still performing the validation using the exponent 65537 so I’m not entirely sure how this works. Perhaps someone more knowledgeable could shed some light on it.</p>
</details>



<p>So why use the habibi key instead of just patching the signature validation function to always return true? I initially wanted to do this but to make the exploit compatible with every kernel version released on the original Xbox would require I pattern match an instruction pattern with high probability for collisions, and I didn’t want to spend a bunch of time writing logic to decode instructions to additional validation of matches. Using the habibi key was easier because it only requires a 4 byte patch to memory I can easily find without pattern matching. </p>



<figure><video controls="" src="https://icode4.coffee/wp-content/uploads/thps4_xbox_exploit.mp4"></video></figure>



<p>With everything together I was able to load my hacked save file, get full code execution on the console, and run unsigned code. I was happy with the results but I wanted more so I looked at other iterations of the games in the Tony Hawk’s Pro Skater series to see how far back this bug went and how many versions of the game I could exploit with it.</p>



<h2>Variant analysis</h2>



<p>There’s a number of games in the Tony Hawk series and most of them have the Create-A-Park feature, so surely there’s more that are also exploitable. I worked backwards from THPS4 to see what the earliest version was that had the Create-A-Park feature and allowed you to use a custom name for gaps and found it was Tony Hawk’s Pro Skater 3. </p>



<h3>Tony Hawk’s Pro Skater 3</h3>



<p>I booted up THPS3 and created a custom park, fuzzed the gap name string and loaded the save again. However, this time the console didn’t crash when loading the save. I was able to spawn in and skate around, but as soon as I chose the “quit game” option the console crashed. Investigating the crash site revealed that the gap name string wasn’t being copied to the stack and was instead being copied to the heap. The overflow had overwritten some data in the next heap allocation and the console crashed when trying to free it. This piqued my interest because I was hoping to get experience with several different exploit techniques and not just rewriting the same strcpy bug several times over.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thps3_cleanup_object_disassembly-1.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-965&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:802,&quot;targetHeight&quot;:400,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="802" height="400" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thps3_cleanup_object_disassembly-1.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thps3_cleanup_object_disassembly-1.png 802w, https://icode4.coffee/wp-content/uploads/thps3_cleanup_object_disassembly-1-300x150.png 300w, https://icode4.coffee/wp-content/uploads/thps3_cleanup_object_disassembly-1-768x383.png 768w" sizes="(max-width: 802px) 100vw, 802px"><figcaption>Disassembly for the THPS3 crash site</figcaption></figure></div>


<p>After investigating the crash some more I was able to determine that the game was using a custom memory allocator and by overflowing the gap name I was overwriting the allocation header for the next allocation in memory. When this next allocation was free’d the game would pull some pointers from the allocation header that lead to a vtable containing a function pointer for a cleanup routine.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thps3_allocation_data.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-966&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1280,&quot;targetHeight&quot;:221,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1280" height="221" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thps3_allocation_data.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thps3_allocation_data.png 1280w, https://icode4.coffee/wp-content/uploads/thps3_allocation_data-300x52.png 300w, https://icode4.coffee/wp-content/uploads/thps3_allocation_data-768x133.png 768w" sizes="(max-width: 1280px) 100vw, 1280px"><figcaption>Heap allocation header data</figcaption></figure></div>


<p>This would be easy to exploit, however, unlike THPS4 this version of the game didn’t copy the header of the save file into the data segment, and the save file data was in non-executable heap memory. I’d need to find a way to get my shell code payload into executable memory and this was the perfect place to use a ROP chain. By overwriting the pAllocOwner pointer in the next allocation header I can control where the cleanup function pointer is loaded from. This can be set to the address of some instructions that would change the stack pointer to point to the malicious save data memory containing a ROP chain.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thps3_exploit_memory.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-967&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1069,&quot;targetHeight&quot;:222,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1069" height="222" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thps3_exploit_memory.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thps3_exploit_memory.png 1069w, https://icode4.coffee/wp-content/uploads/thps3_exploit_memory-300x62.png 300w, https://icode4.coffee/wp-content/uploads/thps3_exploit_memory-768x159.png 768w" sizes="(max-width: 1069px) 100vw, 1069px"><figcaption>Fake heap allocation header</figcaption></figure></div>


<p>The ROP chain only needed to be a few gadgets long to copy the full shell code payload into the executable region of memory and jump to it:</p>



<div id="urvanov-syntax-highlighter-66b3cb3c52401345060699" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					<div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p></div>
				</td>
						<td><div><p><span>; ROP gadget 0: 0x1BD19F -&gt; stack pivot</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;push</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ecx</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; address of our fake heap allocation header</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esp</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; esp is now set to the fake heap allocation header address</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; esi now contains the address of the vtable</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>0Ch</span></p><p><span>; ROP gadget 1: 0x45F69 -&gt; load memcpy parameters</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; load the src address of the shell code</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>edi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; load the data segment address for the shell code to be copied to</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>ecx</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; load the length of the shell code in dwords</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span></p><p><span>; ROP gadget 2: 0x19C4C1 -&gt; perform memcpy</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;rep</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>movsd</span><span>&nbsp;&nbsp; </span><span>; copy the shell code from the heap to the data segment</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>edi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; load the data segment address for the shell code so we can jump to it</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span></p><p><span>; ROP gadget 3: 0x1902DD -&gt; jump to the shell code</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;call</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>edi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; jump to the shell code</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>.</span><span>.</span><span>.</span></p></div></td>
					</tr>
				</tbody></table>
			</div>



<p>This is actually the ROP chain pictured in my twitter profile banner (assuming I haven’t changed the picture since writing this post). The full payload was a generic “hack xbox kernel” payload I made for the THPS4 save exploit that would patch the RSA public key for executables to the habibi key and launch an unsigned executable. Putting everything together I had another save game exploit done, loading the hacked save file and then quitting the game would trigger the exploit and launch my nyan cat executable.</p>



<h3>Tony Hawk’s Underground 1 &amp; 2</h3>



<p>THUG started out with the same routine, create the park file, fuzz the gap name, and load the modified save. However, instead of getting some sort of crash for an access violation I received a full bug check and the following message in my debugger:</p>



<!-- Urvanov Syntax Highlighter v2.8.20 -->

		<div id="urvanov-syntax-highlighter-66b3cb3c5240c942196183" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					
				</td>
						<td><div><p><span>Buffer </span><span>overrun </span><span>detected</span><span>!</span></p><p><span>A</span><span> </span><span>buffer </span><span>overrun </span><span>has </span><span>been </span><span>detected </span><span>which </span><span>has </span><span>corrupted </span><span>the </span><span>program</span>'<span>s</span><span> </span><span>internal </span><span>state</span><span>.</span><span> </span><span>The </span><span>program </span><span>cannot </span><span>safely </span><span>continue</span><span> </span><span>execution </span><span>and</span><span> </span><span>must </span><span>now </span><span>be </span><span>terminated</span><span>.</span></p></div></td>
					</tr>
				</tbody></table>
			</div>
<!-- [Format Time: 0.0002 seconds] -->




<p>This means the game was compiled with stack cookies and my buffer overflow corrupted the cookie which caused the game to halt. Looking through the executable I found the save file loading function and confirmed the stack cookie check was there:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thug_stack_cookies.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-969&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:668,&quot;targetHeight&quot;:298,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="668" height="298" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thug_stack_cookies.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thug_stack_cookies.png 668w, https://icode4.coffee/wp-content/uploads/thug_stack_cookies-300x134.png 300w" sizes="(max-width: 668px) 100vw, 668px"></figure></div>


<p>A stack cookie is a random value generated when the executable first starts that gets placed on the stack of functions that perform certain copy operations to stack variables. The cookie sits before the return address (or immediately following the variable used in the copy operations) and before the function jumps to the return address it’ll check the stack cookie matches the expected value and if not it’ll throw an exception (or in this case bug check the console). This can thwart stack overflows as the only way to overwrite the return address requires you know the cookie value and include it as part of the overflow data (so it appears unmodified when validated). This was surprising to see but I wasn’t deterred and simply took this as another challenge. </p>



<p>I spent some time analyzing the function to see if there were any variables I could corrupt after the gap name buffer but before the stack cookie, and there were. However, these variables were useless from an exploitation perspective as they would immediately get overwritten by the game code after the gap name strcpy call. I looked further to see if there was any code I could use to cause an exception and possibly use SEH exploitation. Unfortunately there’s no way for me to cause an exception in the remaining code before the stack cookie check, and even if there was there’s no exception handler registered at this moment that would walk the SEH chain. After spending a bit of time brainstorming I decided to give up on this one and move on. </p>



<p>Checking Tony Hawk’s Underground 2 I saw the same thing: the game was compiled with stack cookies and there’s no variables on the stack I could use for exploitation purposes and there’s no way for me to leak the stack cookie value. I don’t wanna say these games can’t be used for exploitation as I know there are other strcpy bugs in the game that can be used for exploitation and are on the heap. But you definitely can’t use the gap name string in save files for exploitation on Xbox. Interestingly enough the Playstation 2 version, PC version, (and most likely the Gamecube version) are not compiled with stack cookies and can be exploited using the gap name string buffer.</p>



<h3>Tony Hawk’s American Wasteland</h3>



<p>Next up is Tony Hawk’s American wasteland, which I was expecting to not be expoitable after seeing THUG1 and 2 compiled with stack cookies. However, to my surprise THAW was not compiled with stack cookies and was vulnerable to the gap name string buffer overflow. The exploit is more or less identical to the one for THPS4 so I won’t bore you with redundant details.</p>



<h2>Part 2: Remote code execution</h2>



<p>Now that I had 3 new save game exploits for the Xbox on hand I wanted to go further. It’s 2016 and while finding a game that can be used for soft-modding the console with a save game hack is easy, finding the memory card you need to load the hacked save file is not. It’s also not common to find adapters that let you use a usb stick or other common storage device as a memory card on the console, and hacking up a controller is also not ideal. I wanted to try and find a new type of exploit with lower barrier to entry that didn’t require a memory card. The attack surface I had my eye on was the ability to play a multiplayer LAN game with a park made in the Create-A-Park editor. This meant that the game is sending the save file over the network and loading it on the client’s console, so it should be possible to craft a special save file that could be used over the network to hack the console of anyone who joins your match.</p>



<p>To start out I created a special setup for the host by modifying the game executable to fix the strcpy bug which would prevent the host from hacking themself. I also added a new code segment to the executable so that I’d have plenty of space for any additional functions I’d need to write. Next I setup a network match between my “host” and another console using a hacked save file that would just change the LED color to orange to signal the payload ran. Unlike loading the save locally, loading it over the network doesn’t copy the save file header data to the data segment which breaks the shell code copy stub, but that’s not a big issue because we can use a ROP chain similar to the THPS3 exploit to perform the shell code copy.</p>



<p>After crafting the save file and setting up a network game I had the client console join expecting it to receive the park file, get compromised, and change the console’s LED color. However, what actually happened is that the client connected to the host and spawned the player in, allowing them to skate around. Not only did the payload not run but we didn’t even trigger the buffer overflow. This was odd so I did some poking around in the memory of the client console and saw that the memory containing the park file sent by the host did not match my exploit file. I could see some of the exploit data in memory but the gap name been trashed and null terminated… </p>



<p>To figure out what was going on I placed some memory breakpoints on the memory containing the park file data on the host and waited for them to get hit. What I found was that the host would load the park file, then re-save it in memory, and send that to the client. In the process it would trash the exploit data which prevented it from running on the client console. Not entirely sure why it did this but I was able to just NOP the function call out and then everything worked as expected. The client would receive the hacked park file, get compromised, and change the LED color.</p>



<p>The next obstacle was figuring out how to obtain the secondary payload executable on the client side. When running the save exploit locally the secondary payload is bundled into the folder for the game save. However, running the exploit over the network the client won’t have access to this file so I’d have to come up with a way for them to obtain it. Initially I tossed around ideas like loading it off a burned CD but I didn’t want people to have to burn a disc as less and less people have CD burners nowadays. I also considered loading the executable from a local network address which would only require the client run a python script on a computer on the same network as the console. However, the Xbox winsock implementation uses secure socket connections by default which meant that my python script would have to recreate all the Xbox security stuff on top of the IP frames, and I didn’t want to do all that. </p>



<p>I decided to try and find the game’s net code and see if I could use it to send the executable to the client using some sort of “out of band” messages on the already established connection. I figured this might require quite a bit of shell code to do so I started by doing more research on the park save file to see how much space I had to work with. If it turned out I didn’t have enough space in the park file for all the shell coded needed then I’d be wasting time.</p>



<h2>What happens if I google this?</h2>



<p>I started searching the internet to see if anyone else had explored the park save files and if there might be some notes or something I could use as preliminary research material. After a few google searches I wasn’t able to find anything useful. So I played a game I like to call “what happens if I google this?”. Any time I’m reverse engineering something and come across a magic number or debug string I’ll put it into google and see what comes up. Over the years I’ve found a number of really interesting things such as the exact source file for the obscure encryption algorithm used in Call of Duty Black Ops, Microsoft patents with C-structs and developer comments describing how some encryption key ROM chips worked, and this time I’d hit one of my best finds. In the function that loads the park file there’s a reference to the string “Sk4Ed_Dead”. I put this string into google to see what would pop up, hoping that I’d find some sort of forum post referencing it. What I found instead was a GitHub repository called “thug”:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thug_github.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-973&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:914,&quot;targetHeight&quot;:227,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="914" height="227" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thug_github.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thug_github.png 914w, https://icode4.coffee/wp-content/uploads/thug_github-300x75.png 300w, https://icode4.coffee/wp-content/uploads/thug_github-768x191.png 768w" sizes="(max-width: 914px) 100vw, 914px"></figure></div>


<p>I thought that maybe this was some sort of homebrew tool for modding the game, but as I started to explore the repository I quickly realized that this was actually the source code for the entire game of Tony Hawk’s Underground. Someone had dumped it onto the internet in the form of this GitHub repository. This was an incredible find, even if it wasn’t for THPS4 the code base should be similar enough that I could use it to figure out how the game’s networking code worked and write the hooks I need to send the secondary payload to the client. You might be thinking, but wait, isn’t that cheating? And sure I guess you could say that, but in my opinion everything is fair in exploitation. My goal was to hack the console at all costs, I didn’t care about having a “clean room” exploit implementation. I already had RCE working and knew with a bit of work I could have the payload transfer using the connection established with the host. The only difference having this source code makes is how long it’ll take me to find the net code functions I need, from a few days down to a few hours. But now my goal has slightly changed.</p>



<details><summary>Rather than just get the exploit working over the network I wanted to make it as robust as I could.</summary>
<p>I wanted to make an exploit that would silently get RCE on the console of anyone who joined my match, hack their console to run unsigned code, and silently transfer another executable to their console while they played the game. Nowadays with RCE being a common attack vector this doesn’t sound that crazy. But imagine it’s ~2005 and a hack like this came to light, how crazy would it be to see headlines talking about hackers remotely hacking Xbox gaming consoles through online play, with the exploit being so seamless that the victim has no idea it happened until it’s too late. So I decided to switch from console hacker to threat actor and see how much fun I could have with this.</p>
</details>



<p>I cloned the repo and began looking through the code base. I was able to find the park file loading code and saw the exact line of code with the strcpy bug. Curious if this code was for the final version of the game I spent an hour or so recreating the Visual Studio project files for it and after fixing a few compiler errors I was able to successfully compile the code and run it with assets from the final version of the game. The code didn’t appear to be final but very very close to it. I spent some time looking through the network code and got an understanding of how messages were sent back and forth from host &lt;–&gt; client. After that I tracked down the relevant functions and variables for THPS4 in IDA and had everything I needed to start writing the hooks.</p>



<h2>Restoring execution</h2>



<p>Now that I decided to make this exploit as robust as possible I’d need to find a way to restore execution back to the game while the secondary payload transferred. This would require some changes to the ROP chain to save the old stack pointer before performing the stack pivot, and then restoring it later on after the shell code finishes executing.</p>



<div id="urvanov-syntax-highlighter-66b3cb3c52414024029532" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					<div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p></div>
				</td>
						<td><div><p><span>; Gadget 0 - save old stack pointer</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;push</span><span>&nbsp;&nbsp;</span><span>esp</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;and</span><span>&nbsp;&nbsp; </span><span>al</span><span>,</span><span> </span><span>8</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;mov</span><span>&nbsp;&nbsp; </span><span>[</span><span>ecx</span><span>]</span><span>,</span><span> </span><span>edx</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>esi</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; esi now contains the old stack pointer</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span><span>&nbsp;&nbsp;</span><span>4</span></p><p><span>; Gadget 1 - stack pivot</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>esp</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; Change esp to point to our ROP gadget data</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 2 - get address to save stack pointer to</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>eax</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; Hack_OldStackPointer</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 3 - save old stack pointer for later</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;mov</span><span>&nbsp;&nbsp; </span><span>[</span><span>eax</span><span>]</span><span>,</span><span> </span><span>esi</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>; Save old stack pointer</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 4 - load destination address for shell code copy</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>ecx</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; ShellCodeCopyDstAddress</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 5 - load source address for shell code copy</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>eax</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; shell_code_start</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 6 - copy shell code to executable memory</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>edx</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; size of shell code / 4</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;sub</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>ecx</span><span>,</span><span> </span><span>eax</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;push</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;loc_1117E4</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span><span>,</span><span> </span><span>[</span><span>eax</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>[</span><span>ecx</span><span>+</span><span>eax</span><span>]</span><span>,</span><span> </span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>eax</span><span>,</span><span> </span><span>4</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dec</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>edx</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnz</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>short</span><span> </span><span>loc</span><span>_</span>1117<span>E</span>4</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>; Jump to our shell code</span></p></div></td>
					</tr>
				</tbody></table>
			</div>



<h2>Asynchronous file transfer</h2>



<p>The game’s networking system works by registering a set of message handler functions and corresponding message IDs, when the game receives a message it’ll call the handler function for the message ID received. By registering some unused message IDs I can setup some simple file transfer messages to send the secondary payload to the client. I came up with some simple message exchanges that look like this:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/rce_file_transfer.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-978&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:990,&quot;targetHeight&quot;:644,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="990" height="644" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/rce_file_transfer.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/rce_file_transfer.png 990w, https://icode4.coffee/wp-content/uploads/rce_file_transfer-300x195.png 300w, https://icode4.coffee/wp-content/uploads/rce_file_transfer-768x500.png 768w" sizes="(max-width: 990px) 100vw, 990px"></figure></div>


<ol>
<li>When the client connects to the host they’ll start the file transfer with a MSG_ID_PAYLOAD_REQUEST message to the host.</li>



<li>The host will respond with a MSG_ID_PAYLOAD_DATA message that contains a sub message ID and associated value. The possible sub message IDs are:
<ul>
<li>PAYLOAD_MSG_ID_START: the value is the size of the secondary payload.</li>



<li>PAYLOAD_MSG_ID_DATA: when sent from the client to the host the value is the offset of the next block of data to send, when sent from host to client the value is the size of the payload data attached.</li>



<li>PAYLOAD_MSG_ID_END: indicates this is the last chunk of data for the secondary payload (file transfer complete).</li>
</ul>
</li>



<li>Once the client receives the PAYLOAD_MSG_ID_END message the file transfer is complete.</li>
</ol>



<p>After coding up the file transfer message handlers for both the host and client and working out the bugs I could finally see the debug spew that my payload was transferring to the client. I waited anxiously for the transfer to complete, but rather than it completing successfully my client console crashed trying to dereference a null pointer.</p>



<h2>A memory leak 15 years in the making</h2>



<p>Upon investigating further I found that a memory allocator for network data was returning NULL and causing a the null pointer dereference. I started looking through the source code for the net code and I could see exactly where the buffers for my network messages should be getting free’d. It didn’t make sense that the game was out of memory. I eventually found some debug prints left in the game that I enabled to get a print out of memory statistics if a memory allocation fails. Looking at the output I could see the memory pool for “networking” had 0 free bytes. But this didn’t make sense, I could see exactly where the buffers for the network messages should be getting free’d. I even found the matching function call in the disassembly of the THPS4 game executable to confirm it wasn’t something that only existed in the THUG code. After spending a few hours looking back and forth trying to figure out what the issue was I happened to hover over a particular line of the THUG source code. A Visual Studio intellisense tooltip popped up and what it showed made me immediately realize what the issue was.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/global_delete_operator-1.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-985&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:474,&quot;targetHeight&quot;:116,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="474" height="116" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/global_delete_operator-1.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/global_delete_operator-1.png 474w, https://icode4.coffee/wp-content/uploads/global_delete_operator-1-300x73.png 300w, https://icode4.coffee/wp-content/uploads/global_delete_operator-1-470x116.png 470w" sizes="(max-width: 474px) 100vw, 474px"></figure></div>


<p>If you’re not familiar with Visual Studio (or more so MSVC) or the new/delete operators for C++ then this tooltip probably doesn’t mean anything to you. But for those familiar you may already see the issue. This tooltip is showing the signature for the delete operator and it doesn’t match the signature for the standard Microsoft C++ runtime delete operator. This signature is for a custom delete operator, which means the game developers overloaded the global new and delete operators so that any calls using new or delete would route to their routines. Remember in the Tony Hawk’s Pro Skater 3 section I said the game developers were using a custom memory allocator? Well this is the “new and improved” version of it. I looked at the source for the delete operator function and immediately realized the mistake the developers had made. For legal reasons I’m not going to show the real source code but I’ve written a pseudo code-esq version of the code that contains the issue. Put your C++ skills to the test and see if you can spot the issue:</p>



<div id="urvanov-syntax-highlighter-66b3cb3c52420824772016" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					<div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p><p>43</p><p>44</p><p>45</p><p>46</p><p>47</p><p>48</p><p>49</p><p>50</p><p>51</p><p>52</p><p>53</p><p>54</p><p>55</p><p>56</p></div>
				</td>
						<td><div><p><span>inline</span><span> </span><span>void</span><span> </span><span>operator</span><span> </span><span>delete</span><span>(</span><span>void</span><span>*</span><span> </span><span>pAddr</span><span>)</span></p><p><span>{</span></p><p><span>	</span><span>alloc_header</span><span>*</span><span> </span><span>p_header</span><span> </span><span>=</span><span> </span><span>get_alloc_header</span><span>(</span><span>pAddr</span><span>)</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Mark the region as free.</span></p><p><span>	</span><span>p_header</span><span>-&gt;</span><span>data_size</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span></p><p><span>	</span><span>p_header</span><span>-&gt;</span><span>id</span><span> </span><span>=</span><span> </span><span>ALLOC_DEAD</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span></p><p><span>class</span><span> </span><span>stream_desc</span></p><p><span>{</span></p><p><span>	</span><span>char</span><span>*</span><span> </span><span>p_data</span><span>;</span><span>		</span><span>// Buffer holding message data</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>~</span><span>stream_desc</span><span>(</span><span>)</span></p><p><span>	</span><span>{</span></p><p><span>		</span><span>delete</span><span>[</span><span>]</span><span> </span><span>p_data</span><span>;</span></p><p><span>	</span><span>}</span></p><p><span>}</span><span>;</span></p><p><span>class</span><span> </span><span>stream_link</span></p><p><span>{</span></p><p><span>	</span><span>stream_desc</span><span>*</span><span> </span><span>p_desc</span><span>;</span></p><p><span>}</span><span>;</span></p><p><span>int</span><span> </span><span>handle_stream_message</span><span>(</span><span>.</span><span>.</span><span>.</span><span>)</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>stream_link</span><span>*</span><span> </span><span>p_link</span><span> </span><span>=</span><span> </span><span>.</span><span>.</span><span>.</span><span>;</span></p><p><span>	</span><span>stream_desc</span><span>*</span><span> </span><span>p_desc</span><span> </span><span>=</span><span> </span><span>p_link</span><span>-&gt;</span><span>p_desc</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Copy message data to the descriptor object.</span></p><p><span>	</span><span>p_desc</span><span>-&gt;</span><span>p_data</span><span> </span><span>=</span><span> </span><span>new</span><span> </span><span>char</span><span>[</span><span>.</span><span>.</span><span>.</span><span>]</span><span>;</span></p><p><span>	</span><span>memcpy</span><span>(</span><span>p_desc</span><span>-&gt;</span><span>p_data</span><span>,</span><span> </span><span>.</span><span>.</span><span>.</span><span>)</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Dispatch the message handler to process the message data.</span></p><p><span>	</span><span>dispatch_message</span><span>(</span><span>p_desc</span><span>)</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Cleanup temporary resources.</span></p><p><span>	</span><span>delete </span><span>p_desc</span><span>;</span></p><p><span>	</span><span>delete </span><span>p_link</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span></p></div></td>
					</tr>
				</tbody></table>
			</div>







<p>The problem lies in the custom delete operator. When you call delete on a C++ class pointer the standard runtime implementation will invoke the destructor for the class, in this case <code>~stream_desc()</code> would be invoked and p_data would be free’d. However, the custom delete operator written by the developers does not invoke the destructor for the object being deleted, meaning <code>~stream_desc()</code> isn’t going to be called and p_data won’t be free’d. This memory will be leaked and this happens for every message I send with payload data until the memory pool for networking data is exhausted and the next allocation request returns NULL. This memory leak has existed for years and it would normally never be an issue unless you sat in a multiplayer game long enough for the network pool to be exhausted (or, you know, decided to send some exploit files through the game’s net code…).</p>



<details><summary>It’s always the custom memory allocator…</summary>
<p>I’ve mentioned this in several of my blog posts but it was very common in older games for developers to write their own memory allocators. Often times the built-in memory allocators for gaming consoles were slow or even buggy and developers opted to write their own. However, often times the custom memory allocators would also be a source of bugs, just not ones that would manifest in the same way as when using the built-in memory allocators.</p>
</details>



<p>Not to worry though, because we can fix this by simply hooking the client code and free’ing the <code>p_desc-&gt;p_data</code> buffer. Yes, as part of this exploit I’m going to hot patch a 15 year old bug in the game so I can hack the client’s console. The fix is very simple, I just hooked the <code>handle_stream_message</code> function and called the correct free function for the <code>p_data</code> buffer. I know the correct fix is to invoke the destructor for the class pointer, but this code has existed this way for 15 years now and I don’t know what side effects might occur if I suddenly start invoking the destructors for objects that were never called before. Here’s the pseudo code for the fix:</p>



<div id="urvanov-syntax-highlighter-66b3cb3c52428495356358" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					
				</td>
						<td><div><p><span>int</span><span> </span><span>handle_stream_message</span><span>(</span><span>.</span><span>.</span><span>.</span><span>)</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Cleanup temporary resources.</span></p><p><span>	</span><span>mem_delete</span><span>(</span><span>g_memory_manager</span><span>,</span><span> </span><span>p_desc</span><span>-&gt;</span><span>p_data</span><span>)</span><span>;</span></p><p><span>	</span><span>delete </span><span>p_desc</span><span>;</span></p><p><span>	</span><span>delete </span><span>p_link</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span></p></div></td>
					</tr>
				</tbody></table>
			</div>



<h2>The final result</h2>



<p>With the memory leak hot patch code in place I booted up the host and client console, let the client connect to the match and waited for the payload transfer to finish. The hot patch worked, the file transfer completed successfully and the client ran my nyan-cat executable. I now had full RCE and asynchronous file transfer to the client all while they continued to play the game. I ran one last test using a tunneling app to remotely hack a friends console who lived across the country. After a few minutes of setting everything up I waited for the file transfer to complete and boom, his console booted the nyan-cat executable.</p>



<p>Here’s a recap of all the steps required to perform this exploit from start to finish:</p>



<ol>
<li>The client connects to the malicious host console and receives the “Hack Xbox” park file over the network.</li>



<li>The client parses the park file which triggers the buffer overflow bug and overwrites the return address on the stack to kick off the ROP chain.</li>



<li>The ROP chain will copy the full shell code payload into an executable section of memory and jump to it.</li>



<li>The shell code will do the following before restoring execution back to the game and spawning the player in the match: 
<ul>
<li>Register new network message handlers for my custom message IDs to facilitate the file transfer in the background. </li>



<li>Hot patch the memory leak bug in the net code.</li>



<li>Send a MSG_ID_PAYLOAD_REQUEST message to the host console to initiate the file transfer.</li>
</ul>
</li>



<li>While the player skates around in-game the host will send an executable file to the client that gets saved locally on the client’s HDD.</li>



<li>Once the file transfer is completed the shell code will patch the client’s kernel to use the habibi key and boot the secondary executable that was sent.</li>
</ol>



<p>The entire process is so seamlessly smooth that without changing the LED color an unsuspecting player would have no idea anything was going on until their console suddenly booted another application. If I was a real threat actor I could easily get persistent code execution on the console and do whatever I want, snoop around the person’s network, create a botnet, or just brick their console entirely. Luckily I’m just here to try and prove my skills as a console hacker. With this exploit completed I was just pretty satisfied and felt I had achieved my original goals. However, with everything I achieved I was still doing all of this on a console that doesn’t have DEP or any real security mitigations that would make this exploit difficult. So it was time to move on to another target, one I had wanted to find a new exploit on for a long time…</p>



<h2>Part 3: The first Xbox 360 software-only exploit</h2>



<p>I’ve spent many years reverse engineering the software on the Xbox 360 in hopes I might one day find a bug that could be used to hack the console on newer kernel versions. The Xbox 360 hypervisor is probably the most secure piece of code Microsoft has ever written. There’s only ever been 1 software bug found in it that I largely suspect was due to a compiler bug and not the result of a developer making changes to the hypervisor code. That bug existed in the system call handler and was only present in the 4548 version kernel, which has not been usable since early in the console’s lifecycle. While I have found a few bugs in the Xbox 360 hypervisor I have not found any that are exploitable or could be chained together to get code execution. </p>



<p>I checked the version of Tony Hawk’s American Wasteland for Xbox 360 and confirmed it was vulnerable to the gap name buffer overflow attack. I really wanted to exploit the console on a kernel version newer than 4548 (even obtaining a console that can boot this kernel version is difficult in modern times) but without a new hypervisor bug that hope was dead in the water. However, there was one thing I could do with the Tony Hawk strcpy bug and that was develop the first software only exploit for the console, even if it only worked on the 4548 version kernel.</p>



<details><summary>Lets take a step back to 2006 for a moment…</summary>
<p>The Xbox 360 has recently been released and the Xbox hacking community is in full swing trying to hack the console. Very little is known about the inner workings of the console due to all executable code being encrypted. This means hackers didn’t have the ability to reverse engineer any code to try and find bugs or learn about how the console software worked. However, December 2006 an exploit would be revealed at 23C3 that showed the game King Kong being used to boot linux. Shortly after the first decrypted hypervisor and kernel image would appear on the internet for people to start reverse engineering, and eventually tools would be developed to decrypt all code that could be found on the console or on game discs. I remember reading a lot of misconceptions that the Xbox 360 hypervisor would prevent buffer overflow attacks and that the console wouldn’t be able to be hacked using game save exploits like the original Xbox was. This however, was incorrect, the Xbox 360 hypervisor doesn’t do anything that prevents stack buffer overflows.</p>



<p>Later on the details of the King Kong hack would be disclosed for anyone to use. It worked by modifying the shader files the game used to perform some arbitrary writes to kernel memory that would kick off a ROP chain and exploit the system call handler bug. This required you opened the console and flash modified firmware to the dvd drive in order to play the modified King Kong disc you would need to create (the shader files are on disc). I always wondered if there was another entry point that could have been used instead of having to open the console and modify the dvd drive (which ultimately led to an unstoppable wave of piracy in the years to come). And there was: using a game save bug to kick off the ROP chain. </p>



<p>However, this is also a “chicken and egg” situation as the game save files are RSA signed using a key pair that is unique to your console. Every Xbox 360 console has a “key store” that contains a number of cryptographic keys used by the console, one of which is used to sign game saves. This prevents people from modifying save files unless you have the RSA private key from a console’s key store, any console’s key store. How does a save file signed with my console’s private RSA key successfully validate on another Xbox 360 console? Because the RSA public key is embedded into the save file header, allowing another console to use it to validate the integrity of the save file. This public key is actually signed by another RSA key pair that only Microsoft has, so you can’t just put any public key in the save file header and have it validate. But as long as you had the decrypted key store for any Xbox 360 console you could resign a modified save file for use on anyone else’s console. This would require you first hack the console in order to get the decrypted key store, and you might be wondering how the first group of hackers were able to find the system call handler bug in the first place if all executable code is encrypted?</p>



<p>The crux of all Xbox 360 hacking started with hackers obtain Xbox 360 development consoles. These are special consoles used by developers to make and debug games. Once hackers were able to obtain these consoles (or more importantly, the SDK used along side these consoles) it would reveal a ton of information on how to decrypt executable code allowing them to start reverse engineering the boot chain, hypervisor, and game code, and eventually hack the console. Had these developer consoles and software not leaked the console most likely would have never been hacked as all executable code was encrypted (even when in RAM) from an external point of view. No ability to inspect code = no ability to find bugs.</p>
</details>



<h2>The system call handler bug</h2>



<p>I’m not gonna go into great detail about the overall security architecture of the Xbox 360 as there’s way too much to cover that’s not relevant to this post. But I will provide an overview of the system call handler bug as understanding that is essential to understanding the exploit payload.</p>



<p>The Xbox 360 has two main modes of execution: hypervisor real mode which is the most privileged mode and kernel mode which is less privileged and where the rest of the OS and games run. The CPU will use 64-bit physical addresses when in real mode and 32-bit virtual addresses when in kernel mode. The hypervisor doesn’t actually provide any virtualization functionality that you’d expect when you hear the word “hypervisor”. It’s more akin to a micro-kernel or “security supervisor” as it facilitates all security related operations on the console (such as code integrity validation) and assignment of executable memory. There’s no way to run any code on the console without it going through the hypervisor to be validated and have the memory pages marked as executable. </p>



<p>The CPU also has a cryptography unit on-die that sits next to the L2 cache and is responsible for encrypting and hashing memory. This prevents an attacker from sniffing or modifying RAM externally but also helps to thwart certain types of memory corruption bugs. When in kernel mode you can only see the cipher text of the hypervisor pages as they’re encrypted + hashed and not mapped in a way that would allow successful decryption of the memory from kernel mode. Trying to overwrite the cipher text from kernel mode will cause the hashing checks to fail and accessing that memory from real mode (hypervisor context) will trigger an exception and halt the console. Basically, you can’t read or write hypervisor memory from kernel mode or the console will halt.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/xbox_360_address-2.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-995&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:900,&quot;targetHeight&quot;:326,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="900" height="326" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/xbox_360_address-2.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/xbox_360_address-2.png 900w, https://icode4.coffee/wp-content/uploads/xbox_360_address-2-300x109.png 300w, https://icode4.coffee/wp-content/uploads/xbox_360_address-2-768x278.png 768w" sizes="(max-width: 900px) 100vw, 900px"><figcaption>Real mode address breakdown</figcaption></figure></div>


<p>When in real mode the upper 32-bits of a physical address are used by the crypto unit to control encryption and hashing of data (I’ll refer to them as the “protection bits”). There’s a special address mask, <code>0x80000000.00000000</code>, that can be applied to a 64-bit physical address that performs a memory access while ignoring encryption and hashing. This can be used to read or write memory in a non-protected way as validation of the memory is skipped. Any place kernel mode can provide a physical memory address to the hypervisor it’s imperative that the upper 32 bits are cleared to ensure that kernel mode code can’t provide the protection bits or else it could be used to read/write protected memory.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/system_call_handler_normal.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-998&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:563,&quot;targetHeight&quot;:222,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="563" height="222" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/system_call_handler_normal.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/system_call_handler_normal.png 563w, https://icode4.coffee/wp-content/uploads/system_call_handler_normal-300x118.png 300w" sizes="(max-width: 563px) 100vw, 563px"><figcaption>Normal system call handler instructions</figcaption></figure></div>


<p>Looking at the normal implementation of the system call handler we can see how it’s supposed to work. Register r0 contains the system call ordinal provided by kernel mode. The slwi (shift left word immediate) instruction will shift the system call ordinal left by 2 (multiplying it by 4) and discard the upper 32 bits of the result (truncating the 64 bit result to 32 bits). This offset is used to index into the system call function table to get the function address for the specified system call ordinal. Since the ordinal has to be between 0 and the highest system call ordinal it’s not possible to get offset to point anywhere except within the system call function table.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/system_call_handler_4548.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-1000&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:565,&quot;targetHeight&quot;:147,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="565" height="147" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/system_call_handler_4548.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/system_call_handler_4548.png 565w, https://icode4.coffee/wp-content/uploads/system_call_handler_4548-300x78.png 300w" sizes="(max-width: 565px) 100vw, 565px"><figcaption>System call handler instructions for 4548</figcaption></figure></div>


<p>Looking at the implementation of the system call handler on 4548 we can see there’s a slightly different instruction pattern, the slwi instruction has been replaced with sldi (shift left double immediate). This instruction operates on 64 bits, not 32, which means we can control the upper 32 bits of r0 which will get used when indexing the system call function table. Now I did say that the system call ordinal will be checked to make sure it’s within [0, max ordinal), but that comparison operates on the lower 32 bits of r0. The upper 32 bits will not be considered for the comparison. So by setting r0 to a value such as <code>0x20000000.0000003F</code> it will pass the ordinal range check and produce an offset of <code>0x80000000.000000FC</code> which will allow us to access unprotected memory (ignoring encryption and hashing) when indexing the system call function table.</p>



<details><summary>I highly suspect that this change was due to a compiler bug…</summary>
<p>The system call handler routine would be one of the first pieces of code written for the hypervisor as it’s a CPU exception vector and required for kernel mode code to run. By the time the console launched this code would have been well matured and there wouldn’t be any reason to change it, especially a few updates into the console’s lifecycle. Having worked at Microsoft for 7 years I can recount 3 occasions where we received an MSRC bug report for some bug that cropped up in the Windows kernel. Upon investigating the causes it was determined that recent compiler work had cause certain instruction patterns emitted by the compiler to change, and the new instruction patterns led to security bugs in kernel code. I highly suspect that this is the case for the 4548 system call handler bug as well. I don’t think there’s any reason for this code to have been changed by a developer especially in a way that would change how this array is indexed.</p>
</details>



<p>So how can this be exploited? From kernel mode we have a view of encrypted hypervisor memory and we can overwrite it. Normally this would cause the console to halt the next time the hypervisor tried to read that memory, but because we can get the system call handler to read a function pointer while controlling the upper 32 bits of the address we can set the upper most bit so a read ignoring encryption and hashing is performed. This will let the hypervisor read the value we overwrote and not fault. We can set the function pointer to point to a convenient instruction sequence that’ll get us code execution and by executing a system call with a maliciously crafted ordinal we can get the hypervisor to jump to our code. Here’s the steps required to exploit this bug:</p>



<ol>
<li>Load some shell code into memory and get the physical address of the allocation.</li>



<li>Change a kernel memory manager variable that controls the 64kb page mappings. This will expose the encrypted view of hypervisor memory into an address range we can write to.</li>



<li>Overwrite a system call function pointer in the encrypted view of hypervisor memory to point to the address of a convenient instruction sequence. For this we choose the instruction sequence <code>mtctr r4; bctr</code> which will jump to the address contained in r4 which we have full control over going into the system call handler.</li>



<li>Set r0 to contain the ordinal of the system call function pointer we overwrote in step 2 and set the upper 32 bits such that shifting them left by 2 will set the upper most bit in the register, ex: <code><code>0x20000000.0000003F</code></code>. Set r4 such that it contains the physical address of our shell code OR’d with the <code>0x80000000.00000000</code> mask (our shell code sits in unprotected memory).</li>



<li>Execute the system call instruction which will switch into real mode and let the hypervisor dispatch the system call. It’ll perform a 32-bit comparison on the malicious system call ordinal and a 64-bit shift to calculate the array offset which will read the function pointer we overwrote without faulting. The hypervisor will jump to this address and execute the <code>mtctr r4; bctr</code> instruction sequence and jump to our shell code in unprotected memory. When in real mode the page protections are ignored so the hypervisor won’t fault trying to execute non-executable memory.</li>
</ol>



<p>So how can we do this using the strcpy bug in Tony Hawk’s American Wasteland?</p>



<h2>Collect E X P L O I T while maintaining a ROP chain</h2>



<p>To build the ROP chain I modified the (now archived) <a href="https://github.com/iphelix/ida-sploiter" data-type="link" data-id="https://github.com/iphelix/ida-sploiter">Ida-Sploiter</a> IDA plugin to add support for PowerPC architecture. This plugin would help me find ROP gadgets based on given search criteria for specific instructions or registers being used. The entire exploit took 24 ROP gadgets to perform and achieve full hypervisor code execution where I then patch out the code integrity checks and launch a secondary executable bundled in with the game save. I’m not going to detail the ROP chain here as it’s really long and boring (I’ve also thoroughly documented it on the GitHub repository), but I’ll provide a brief overview of all the steps for the full exploit:</p>



<ol>
<li>Using the strcpy bug we overflow the gap name buffer on the stack and overwrite the return address to point to the first ROP gadget.</li>



<li>The first ROP gadget changes the stack pointer to point to the ROP chain data contained in the save game buffer in memory.</li>



<li>Call MmAllocatePhysicalMemoryEx to allocate a block of physical memory for our hypervisor shell code.</li>



<li>Call memcpy and copy the hypervisor shell code into the buffer allocated in step 3.</li>



<li>Call MmGetPhysicalAddress to get the physical address of our shell code buffer (this is what we pass to the hypervisor) and save it for later.</li>



<li>Change the kernel memory manager variable that controls the 64kb page mappings to map in the encrypted view of hypervisor memory for write access.</li>



<li>Overwrite the hypervisor system call function address in the encrypted memory view to point to the <code>mtctr r4; bctr</code> instruction sequence.</li>



<li>Execute the syscall instruction using the malicious system call ordinal and physical address of our hypervisor shell code obtained in step 5.</li>



<li>The hypervisor will load the function pointer we overwrote in step 7, execute the <code>mtctr r4; bctr</code> instruction sequence and jump to our hypervisor shell code.</li>



<li>Now we have full hypervisor code exec. I change the LED color to signal the exploit was successful, then patch out the RSA signature checks on executable files and return from the system call interrupt.</li>



<li>We’re back in the ROP chain in kernel mode. Next we map a folder on the HDD that contains the secondary payload by calling ObCreateSymbolicLink.</li>



<li>Finally we call XLaunchNewImage and launch our unsigned secondary payload.</li>
</ol>



<figure><video controls="" src="https://icode4.coffee/wp-content/uploads/thaw_xbox360_exploit.mov"></video></figure>



<p>And there you have it, the first software only exploit for the Xbox 360. It’s kind of ironic that this worked out almost exactly the same as the save game exploits for the original Xbox: performing a stack buffer overflow from a strcpy call on data contained in a save game file you can copy to your console using a memory card. You can use the strcpy bug to get ROP execution on any Xbox 360 OS version, but you’ll only be able to get full hypervisor code execution on the 4548 kernel version. If a new hypervisor bug is discovered this can easily be paired with it to work on newer kernel versions. I still have some hope that there might be an exploitable bug that would get you hypervisor code execution on a new kernel version. But I highly suspect it would be some kind of CPU or MMU bug rather than a bug in the hypervisor code. </p>



<h2>Part 3: Hack the planet</h2>



<p>Fast forward to present day (2024) and I finally got around to cleaning up and releasing all these Tony Hawk exploits. However, since I’m most likely retiring from game console hacking after this I wanted to drop an absolute banger of a release so I ported the exploit to some other game consoles that are vulnerable to it. This bug exists in 5 different iterations of the Tony Hawk video game series across numerous game consoles and handhelds. No one is safe from Tony Hawk’s Pro Strcpy. Since you’re probably tired of me talking about the same strcpy bug over and over I’m only going to provide some brief details of which games for which platforms I ported the exploit to and how it may or may not make hacking those consoles easier.</p>



<h2>Playstation 2</h2>



<p>I ported the Tony Hawk Pro Skater 4 network RCE exploit to the Playstation 2 version of the game. Using PCSX2 (or another console) you only need the THPS4 disc and you can hack your console over the network. The exploit will send uLaunchElf over the network and launch it when the transfer completes, from there you can load the FreeMcBoot/FreeHDBoot installer off some other media (like a usb stick). I originally wanted to just send the FreeMcBoot installer but it’s not a single file and the PS2 doesn’t have any persistent storage attached to it by default (unlike Xbox with the built-in HDD). </p>



<p>The save game exploits are not useful on the PS2 because if you have a way to copy files to a memory card you can just install FreeMcBoot and be done. I don’t know if this network exploit will make it any easier to hack the console since you can already buy a FreeMcBoot memory card off Amazon for $15 USD with next day prime shipping or just use FreeHDBoot on a phat console with the network adapter. So I think it’s safe to say anyone who wants to hack their PS2 most likely will not need this exploit. Oh well, hack the planet.</p>



<h2>GameCube</h2>



<p>I ported the Tony Hawk Pro Skater 4 save game exploit to the GameCube version of the game, but did not port the network RCE or any other version of the save game exploits. What I didn’t realize going into this was that it’s non-trivial to copy files to the GameCube memory card and that people have been buying memory cards with pre-hacked save files on them off of Ebay for upwards of $50 USD. This is honestly pretty lame and I tried to think of another way to lower the barrier to entry for this console but the GameCube versions of the Tony Hawk games don’t have network support so even if you bought the network adapter (which apparently no one has because only like 4 games supported it) you wouldn’t be able to use the network exploit anyway. It looks like there’s already plenty of game save exploits available for the console, and since there isn’t a persistent software hack for the console most people end up going with a modchip anyway. Oh well, hack the planet.</p>



<h2>Windows</h2>



<p>I created a game save exploit for THUG PRO, the community patch for Tony Hawk’s Underground, and I even reported the bug to them 7 years ago but they weren’t interested in fixing it at the time. Since the exploit doesn’t provide any value to Windows I opted not to release it (it wasn’t full stack anyway) but I would like to provide a word of warning to anyone playing any of the Tony Hawk games on PC. They all have the same strcpy bug in them, they’re all exploitable, and that’s not the only strcpy bug that can be exploited over network play either. I highly recommend playing those games while forcing ASLR on the executable, and don’t ever run them as Administrator.</p>



<h2>Conclusion</h2>



<p>So there you have it, who would have thought one strcpy bug could be used to hack so many different platforms and even achieve RCE on some of them? Bugs aside the Tony Hawk skateboarding games were some of my favorite growing up. Those games are what got me into skateboarding and provided years of entertainment. Neversoft was one of my favorite game studios and a place I would’ve loved to work at. There’s some behind the scenes footage of a bunch of Neversoft developers who were probably in their late 20s-early 30s and had never stepped on a skateboard before have a contest to see who could do a kickflip off a big wooden conference table at the studio. I remember thinking that was the coolest thing I had ever seen and wanted to work there ever since. Unfortunately they shut down but at least the legacy of the Tony Hawk video game series will live on as some of the greatest games of the 2000s and the best way to hack your old gaming consoles 😉</p>



<p>Full source code and patched game save files are available on my <a href="https://github.com/grimdoomer/TonyHawksProStrcpy">GitHub</a>.</p>
									
																		
								</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Official Puppeteer Support for Firefox (512 pts)]]></title>
            <link>https://hacks.mozilla.org/2024/08/puppeteer-support-for-firefox/</link>
            <guid>41182847</guid>
            <pubDate>Wed, 07 Aug 2024 16:19:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hacks.mozilla.org/2024/08/puppeteer-support-for-firefox/">https://hacks.mozilla.org/2024/08/puppeteer-support-for-firefox/</a>, See on <a href="https://news.ycombinator.com/item?id=41182847">Hacker News</a></p>
<div id="readability-page-1" class="page"><article role="article">
    
<p>We’re pleased to announce that, as of version 23, the <a href="https://pptr.dev/">Puppeteer</a> browser automation library now has first-class support for Firefox. This means that it’s now easy to write automation and perform end-to-end testing using Puppeteer, and run against both Chrome and Firefox.</p>
<h2>How to Use Puppeteer With Firefox</h2>
<p>To get started, simply set the product to “<code>firefox</code>” when starting Puppeteer:</p>
<pre><code>import puppeteer from "puppeteer";

const browser = await puppeteer.launch({
  browser: "firefox"
});

const page = await browser.newPage();
// ...
await browser.close();</code></pre>
<p>As with Chrome, Puppeteer is able to download and launch the latest stable version of Firefox, so running against either browser should offer the same developer experience that Puppeteer users have come to expect.</p>
<p>Whilst the features offered by Puppeteer won’t be a surprise, bringing support to multiple browsers has been a significant undertaking. The Firefox support is not based on a Firefox-specific automation protocol, but on WebDriver BiDi, a cross browser protocol that’s undergoing standardization at the W3C, and currently has implementation in both Gecko and Chromium. This use of a cross-browser protocol should make it much easier to support many different browsers going forward.</p>
<p>Later in this post we’ll dive into some of the more technical background behind WebDriver BiDi. But first we’d like to call out how today’s announcement is a great demonstration of how productive collaboration can advance the state of the art on the web. Developing a new browser automation protocol is a lot of work, and great thanks goes to the Puppeteer team and the other members of the W3C Browser Testing and Tools Working Group, for all their efforts in getting us to this point.</p>
<p>You can also check out the Puppeteer team’s<a href="https://developer.chrome.com/blog/firefox-support-in-puppeteer-with-webdriver-bidi"> post</a> about making WebDriver BiDi production ready.</p>
<h2>Key Features</h2>
<p>For long-time Puppeteer users, the features available are familiar. However for people in other automation and testing ecosystems — particularly those that until recently relied entirely on HTTP-based WebDriver — this section outlines some of the new functionality that WebDriver BiDi makes possible to implement in a cross-browser manner.</p>
<h3>Capturing of Log Messages</h3>
<p>A common requirement when testing web apps is to ensure that there are no unexpected errors reported to the console. This is also a case where an event-based protocol shines, since it avoids the need to poll the browser for new log messages.</p>
<pre><code>import puppeteer from "puppeteer";

const browser = await puppeteer.launch({
  browser: "firefox"
});

const page = await browser.newPage();
page.on('console', msg =&gt; {
  console.log(`[console] ${msg.type()}: ${msg.text()}`);
});

await page.evaluate(() =&gt; console.debug('Some Info'));
await browser.close();</code></pre>
<p>Output:</p>
<pre>[console] debug: Some Info</pre>
<h3>Device Emulation</h3>
<p>Often when testing a reactive layout it’s useful to be able to ensure that the layout works well at multiple screen dimensions, and device pixel ratios. This can be done by using a real mobile browser, either on a device, or on an emulator. However for simplicity it can be useful to perform the testing on a desktop set up to mimic the viewport of a mobile device. The example below shows loading a page with Firefox configured to emulate the viewport size and device pixel ratio of a Pixel 5 phone.</p>
<pre><code>import puppeteer from "puppeteer";

const device = puppeteer.KnownDevices["Pixel 5"];

const browser = await puppeteer.launch({
  browser: "firefox"
});

const page = await browser.newPage();
await page.emulate(device);

const viewport = page.viewport();

console.log(
  `[emulate] Pixel 5: ${viewport.width}x${viewport.height}` +
  ` (dpr=${viewport.deviceScaleFactor}, mobile=${viewport.isMobile})`
);

await page.goto("https://www.mozilla.org");
await browser.close();
</code></pre>
<p>Output:</p>
<pre>[emulate] Pixel 5: 393x851 (dpr=3, mobile=true)</pre>
<h3>Network Interception</h3>
<p>A common requirement for testing is to be able to track and intercept network requests. Interception is especially useful for avoiding requests to third party services during tests, and providing mock response data. It can also be used to handle HTTP authentication dialogs, and override parts of the request and response, for example adding or removing headers. In the example below we use network request interception to block all requests to web fonts on a page, which might be useful to ensure that these fonts failing to load doesn’t break the site layout.</p>
<pre><code>import puppeteer from "puppeteer";

const browser = await puppeteer.launch({
  browser: 'firefox'
});

const page = await browser.newPage();
await page.setRequestInterception(true);

page.on("request", request =&gt; {
  if (request.url().includes(".woff2")) {
    // Block requests to custom user fonts.
    console.log(`[intercept] Request aborted: ${request.url()}`);
    request.abort();
  } else {
    request.continue();
  }
});

const response = await page.goto("https://support.mozilla.org");
console.log(
  `[navigate] status=${response.status()} url=${response.url()}`
);
await browser.close();</code></pre>
<p>Output:</p>
<pre>[intercept] Request aborted: https://assets-prod.sumo.prod.webservices.mozgcp.net/static/Inter-Bold.3717db0be15085ac.woff2
[navigate] status=200 url=https://support.mozilla.org/en-US/
</pre>
<h3>Preload Scripts</h3>
<p>Often automation tooling wants to provide custom functionality that can be implemented in JavaScript. Whilst WebDriver has always allowed injecting scripts, it wasn’t possible to ensure that an injected script was always run before the page started loading, making it impossible to avoid races between the page scripts and the injected script.</p>
<p>WebDriver BiDi provides “preload” scripts which can be run before a page is loaded. It also provides a means to emit custom events from scripts. This can be used, for example, to avoid polling for expected elements, but instead using a mutation observer that fires as soon as the element is available. In the example below we wait for the &lt;title&gt; element to appear on the page, and log its contents.</p>
<pre><code>import puppeteer from "puppeteer";

const browser = await puppeteer.launch({
  browser: 'firefox',
});

const page = await browser.newPage();

const gotMessage = new Promise(resolve =&gt;
  page.exposeFunction("sendMessage", async message =&gt; {
    console.log(`[script] Message from pre-load script: ${message}`);
    resolve();
  })
);

await page.evaluateOnNewDocument(() =&gt; {
  const observer = new MutationObserver(mutationList =&gt; {
    for (const mutation of mutationList) {
      if (mutation.type === "childList") {
        for (const node of mutation.addedNodes) {
          if (node.tagName === "TITLE") {
            sendMessage(node.textContent);
          }
        }
      }
    };
  });

  observer.observe(document.documentElement, {
    subtree: true,
    childList: true,
  });
});

await page.goto("https://support.mozilla.org");
await gotMessage;
await browser.close();</code></pre>
<p>Output:</p>
<pre>[script] Message from pre-load script: Mozilla Support</pre>
<h2>Technical Background</h2>
<p>Until recently people wishing to automate browsers had two main choices:</p>
<ul>
<li aria-level="1">Use the W3C <a href="https://w3c.github.io/webdriver/">WebDriver</a> API, which was based on earlier work by the Selenium project.</li>
<li aria-level="1">Use a browser-specific API for talking to each supported browser such as <a href="https://chromedevtools.github.io/devtools-protocol/">Chrome DevTools Protocol</a> (CDP) for Chromium-based browsers, or Firefox’s <a href="https://firefox-source-docs.mozilla.org/devtools/backend/protocol.html">Remote Debugging Protocol</a> (RDP) for Gecko-based browsers.</li>
</ul>
<p>Unfortunately both of those options come with significant tradeoffs. The “classic” WebDriver API is HTTP-based, and its model involves automation sending a command to the browser and waiting for a response. That works well for automation scenarios where you load a page and then verify, for example, that some element is displayed, but the inability to get events ­— e.g. console logs — back from the browser, or run multiple commands concurrently, makes the API a poor fit for more advanced use cases.</p>
<p>By contrast, browser-specific APIs have generally been designed around supporting the complex use cases of in-browser devtools. This has given them a feature set far in advance of what’s possible using WebDriver, as they need to support use cases such as recording console logs, or network requests.</p>
<p>Therefore, browser automation clients have been forced to make the choice between supporting many browsers using a single protocol and providing a limited feature set, or providing a richer feature set but having to implement multiple protocols to provide functionality separately for each supported browser. This obviously increased the cost and complexity of creating great cross-browser automation, which isn’t a good situation, especially when developers <a href="https://mdn.dev/archives/insights/reports/mdn-web-testing-report-2021.html">commonly cite</a> cross-browser testing as one the main pain points in developing for the web.</p>
<p>Long time developers might notice the analogy here to the situation with editors before the development of <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> (LSP). At that time each text editor or IDE had to implement bespoke support for each different programming language. That made it hard to get support for a new language into all the tools that developers were using. The advent of LSP changed that by providing a common protocol that could be supported by any combination of editor and programming language. For a new programming language like TypeScript to be supported across all editors it no longer needs to get them to add support one-by-one; it only needs to provide an LSP server and it will automatically be supported across any LSP-supporting editor. The advent of this common protocol has also enabled things that were hard to imagine before. For example specific libraries like Tailwind getting their own <a href="https://www.npmjs.com/package/@tailwindcss/language-server">LSP implementation</a> to enable bespoke editor functionality.</p>
<p>So to improve cross-browser automation we’ve taken a similar approach: developing <a href="https://w3c.github.io/webdriver-bidi/">WebDriver BiDi</a>, which brings the automation featureset previously limited to browser-specific protocols to a standardized protocol that can be implemented by any browser and used by any automation tooling in any programming language.</p>
<p>At Mozilla we see this strategy of standardizing protocols in order to remove barriers to entry, allow a diverse ecosystem of interoperable implementations to flourish, and enable users to choose those best suited to their needs as a key part of our manifesto and <a href="https://www.mozilla.org/en-US/about/webvision/full/#openness">web vision</a>.</p>
<p>For more details about the design of WebDriver BiDi and how it relates to classic WebDriver, please see our <a href="https://hacks.mozilla.org/2020/12/cross-browser-testing-part-1-web-app-testing-today/">earlier</a> <a href="https://hacks.mozilla.org/2021/01/improving-cross-browser-testing-part-2-new-automation-features-in-firefox-nightly/">posts</a>.</p>
<h2>Removing experimental CDP support in Firefox</h2>
<p>As part of our early work on improving cross-browser testing, we shipped a partial implementation of CDP, limited to a few commands and events needed to support testing use cases. This was previously the basis of experimental support for Firefox in Puppeteer. However, once it became clear that this was not the way forward for cross-browser automation, effort on this was stopped. As a result it is unmaintained and doesn’t work with modern Firefox features such as site isolation. Therefore support is <a href="https://fxdx.dev/deprecating-cdp-support-in-firefox-embracing-the-future-with-webdriver-bidi/">scheduled to be removed</a> at the end of 2024.</p>
<p>If you are currently using CDP with Firefox, and don’t know how to transition to WebDriver BiDi, please reach out using one of the <a href="#contact-us">channels listed at the bottom of this post</a>, and we will discuss your requirements.</p>
<h2>What’s Next?</h2>
<p>Although Firefox is now officially supported in Puppeteer, and has enough functionality to cover many automation and testing scenarios, there are still some APIs that remain unsupported. These broadly fall into three categories (consult the <a href="https://pptr.dev/webdriver-bidi">Puppeteer documentation</a> for a full list):</p>
<ul>
<li aria-level="1">Highly CDP-specific APIs, notably those in the <a href="https://pptr.dev/api/puppeteer.cdpsession">CDPSession</a> module. These are unlikely to be supported directly, but specific use cases that currently require these APIs could be candidates for standardization.</li>
<li aria-level="1">APIs which require further standards work. For example <a href="https://pptr.dev/api/puppeteer.accessibility.snapshot">page.accessibility.snapshot</a> returns a dump of the Chromium accessibility tree. However because there’s currently no standardized description of what that tree should look like this is hard to make work in a cross-browser way. There are also cases which are much more straightforward, as they only require work on the WebDriver BiDi spec itself; for example <a href="https://pptr.dev/api/puppeteer.page.setgeolocation">page.setGeolocation</a>.</li>
<li aria-level="1">APIs which have a standard but are not yet implemented, for example the ability to execute scripts in workers required for commands like <a href="https://pptr.dev/api/puppeteer.webworker.evaluate">WebWorker.evaluate</a>.</li>
</ul>
<p>We expect to fill these gaps going forward. To help prioritize, we’re interested in your feedback: Please try running your Puppeteer tests in Firefox! If you’re unable to get them in Firefox because of a bug or missing feature, please let us know using one of the methods below so that we can take it into account when planning our future standards and implementation work:</p>

    <section>
                                
                      <p>Software engineer focused on maintaining a healthy open web. Web-platform-tests core team member.</p>
                                <p><a href="https://hacks.mozilla.org/author/jgrahammozilla-com/">More articles by James Graham…</a></p>
                  
                                <p><a href="https://hacks.mozilla.org/author/hskupinmozilla-com/">More articles by Henrik Skupin…</a></p>
                  
                                <p><a href="https://hacks.mozilla.org/author/jdescottesmozilla-com/">More articles by Julian Descottes…</a></p>
                  
                                <p><a href="https://hacks.mozilla.org/author/aborovovamozilla-com/">More articles by Alexandra Borovova…</a></p>
                  </section>
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Zen5's AVX512 Teardown and More (132 pts)]]></title>
            <link>http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/</link>
            <guid>41182395</guid>
            <pubDate>Wed, 07 Aug 2024 15:28:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/">http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/</a>, See on <a href="https://news.ycombinator.com/item?id=41182395">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="wrapper">
  
  <p>By Alexander J. Yee (<a href="https://twitter.com/Mysticial">@Mysticial</a>)</p>
  
  
<p>(Last updated:
  <!-- #BeginDate format:Am1 -->August 7, 2024<!-- #EndDate -->)</p>
  



<div id="shortcuts400">
  
  <p>Shortcuts:</p>
<ul>
  <li><a href="#overview">Overview:</a>
<ul>
  <li><a href="#strix_vs_desktop">Strix vs. Granite Ridge</a></li>
  <li><a href="#memory_bandwidth">Memory Bandwidth</a></li>
  <li><a href="#ipc_inconsistency">IPC is all over the place!</a></li>
  <li><a href="#clockspeed">Is the clockspeed really still 5.7 GHz?</a></li>
  <li><a href="#thermals">Thermals and Heat Dissipation</a></li>
  <li><a href="#throttling">Does Zen5 throttle under AVX512?</a></li>
  <li><a href="#power_transitions">Power Transitions</a></li>
</ul>
  </li><br>
  <li><a href="#numbers_for_devs">Useful Numbers for Developers</a></li><br>
  <li><a href="#vector_unit">Vector Unit Teardown</a>
    <ul>
      <li><a href="#512_bit_required">512-bit is Required
      </a></li>
    </ul>
  </li>
  <ul>
    <li><a href="#two_cycle_regression">2 Cycle Regression</a></li>
    <li><a href="#loadstore_throughput">Load/Store Throughput</a></li>
    <li><a href="#store512">512-bit Stores are Weird</a></li>
    <li><a href="#shuffle">512-bit Byte-Granular Shuffle</a></li>
    <li><a href="#fadd_latency">FADD Latency</a></li>
    <li><a href="#VP2INTERSECT">AVX512-VP2INTERSECT</a></li>
    <li><a href="#port_limit">Data Port Limitations</a></li>
    <li><a href="#vector_register_file">Vector Register File</a></li>
  </ul>
  <br>
  <li><a href="#integer_unit">Integer Unit Teardown</a>
    <ul>
      <li><a href="#extra_alus">Zen5's two extra ALUs</a></li>
      <li><a href="#six_ipc">6 IPC is not Possible</a></li>
      <li><a href="#integer_multiply">64 x 64 -&gt; 128-bit Multiply</a></li>
      </ul>
  </li><br>
  <li><a href="#conclusion">Final Thoughts </a></li>
</ul>
</div>
<p><span color="red">This article was supposed to be published all at once on July 30'th. But because of the staggered launch delay into August 8 and 15, I decided to redact </span><span color="red">the sections containing performance #'s specific to the 9900X and 9950X models until August 14th.<p>
  
  Apologies for inconvenience. Please come back on August 14th to see the entirety of this article.</p></span></p>

  
  <p>So Zen5 is here! And with all the hype around its AVX512 capability, this will be the sequel to my <a href="https://web.archive.org/web/20230706110515/https://www.mersenneforum.org/showthread.php?t=28102">Zen4 AVX512 teardown</a> from 2 years ago.  </p>
  
  <p>Like last time with Zen4, AMD has graciously provided me a chip ahead of launch. But unlike last time, much of the architecture of Zen5 had already been revealed in AMD's <a href="https://gcc.gnu.org/pipermail/gcc-patches/attachments/20240210/b2991675/attachment-0001.obj">GCC patch</a>. So this time, the chip I was analyzing was not as much of a black box. Nevertheless, there are still numerous surprises that were not revealed by either the GCC patch or any of the leaks up to this point.</p>

  <p>Once again, I would like to thank George, Chester, and Ian Cutress from <a href="https://chipsandcheese.com/">Chips and Cheese</a> for their help with some of the off-the-shelf tools for analysis. Not all the analysis I do is with my own tools and I do rely a lot other software/tools.</p>
  
  <blockquote>
    <p><img src="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/chipsx3-small.jpg" width="592" height="246"></p>
  </blockquote>


<p><a name="overview"></a>Overview</p>
  <div id="rightfloat450"><p><img src="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/cpuz-9950X.png" width="403" height="402"></p></div>
  
  <p>AVX512 has come a long way. Intel first launched it in the consumer space with Skylake X in 2017 and it took AMD another 5 years to finally copy it with Zen4 in 2022.</p>
  
  <p>But AMD's first AVX512 implementation (in Zen4) was not a "native" implementation. Instead, it reused the existing 256-bit hardware from Zen3 by "double-pumping" 512-bit instructions into the 256-bit hardware on consecutive cycles. Nevertheless, it still provided a very competitive AVX512 implementation compared to Intel.</p>
  
  <p>In my <a href="https://web.archive.org/web/20230706110515/https://www.mersenneforum.org/showthread.php?t=28102">Zen4 AVX512 teardown article</a>, I said this:</p>
  <blockquote>
    <p><em>Implement     512-bit as 2 x 256-bit first.... Then in the future, when the silicon    allows   for it and the demand calls for it, widen things up to 512-bit.</em>    </p>
    <p><em>... if in the    future AMD decides to widen things up, you may get a 2x  speedup for    free.</em></p>
  </blockquote>
<p>Little did I know that not only was this going to happen, it was going to happen the very next generation! As much as I was amazed with how my silicon AMD had to throw around for various parts of their Zen4 implementation of AVX512, Zen5 brings this to a whole new level.</p>

<p>Zen5 improves upon Zen4 by doubling all the hardware for AVX512. Nearly all datapaths and execution units have been expanded to 512-bit wide. Thus Zen5 becomes the first desktop processor to be capable of 4 x 512-bit execution throughput.</p>

<p>To top it off, they did this without increasing the die size of the core complex. (Though I suspect this is more an indication of Zen4 being inefficient rather than Zen5 being amazing.)</p>

<p>With this, AMD has finally surpassed Intel in nearly every category related to SIMD execution - crushing them in 512-bit performance. This is an massive turn-around from the days of Bulldozer and Zen1. Intel has historically been the pioneer of SIMD. But now, AMD has taken the crown from them and beaten them at their own game.</p>



<p><a name="strix_vs_desktop"></a><u><strong>Zen5 Strix Point is different from Zen5 Desktop/Server</strong></u></p>

<p>While Zen5 is capable of 4 x 512-bit execution throughput, this only applies to desktop Zen5 (Granite Ridge) and presumably the server parts. The mobile parts such as the Strix Point APUs unfortunately have a stripped down AVX512 that retains Zen4's 4 x 256-bit throughput. Thus we see that this is where AMD has finally drawn the line at how much dark silicon they are willing to throw around.</p>

  <div id="rightfloat450">
    <table>
      <tbody><tr>
        <td><p><img src="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/cpuz-HX370.png" width="403" height="402"></p></td>
      </tr>
      <tr>
        <td>Thanks to Jordan Ranous for lending me this laptop!</td>
      </tr>
    </tbody></table>
  </div>
  <table>
    <tbody><tr>
    <td><strong>Codename</strong></td>
    <td><strong>Product Type</strong></td>
    <td><strong>Architecture</strong></td>
    <td><strong>SIMD Width</strong></td>
    <td><strong>SIMD Execution Throughput</strong></td>
    </tr>
  <tr>
    <td>AMD Raphael</td>
    <td>Desktop</td>
    <td>Zen4</td>
    <td>4 x <span color="red">256-bit</span></td>
    <td>1024 bits / cycle</td>
  </tr>
  <tr>
    <td>AMD Dragon Range</td>
    <td>Exteme Mobile</td>
    <td>Zen4</td>
    <td>4 x <span color="red">256-bit</span></td>
    <td>1024 bits / cycle</td>
  </tr>
  <tr>
    <td>AMD Phoenix</td>
    <td>Mobile</td>
    <td>Zen4</td>
    <td>4 x <span color="red">256-bit</span></td>
    <td>1024 bits / cycle</td>
  </tr>
  <tr>
    <td>AMD Genoa</td>
    <td>Server</td>
    <td>Zen4</td>
    <td>4 x <span color="red">256-bit</span></td>
    <td>1024 bits / cycle</td>
  </tr>
  <tr>
    <td>AMD Bergamo</td>
    <td>Server</td>
    <td>Zen4c</td>
    <td>4 x <span color="red">256-bit</span></td>
    <td>1024 bits / cycle</td>
  </tr>
  <tr>
    <td>AMD Granite Ridge</td>
    <td>Desktop</td>
    <td>Zen5</td>
    <td>4 x <span color="blue">512-bit</span></td>
    <td><strong>2048 bits / cycle</strong></td>
  </tr>
  <tr>
    <td>AMD Fire Range</td>
    <td>Exteme Mobile</td>
    <td>Zen5</td>
    <td>4 x <span color="blue">512-bit ?</span></td>
    <td><strong>2048 bits / cycle ?</strong></td>
  </tr>
  <tr>
    <td>AMD Strix Point</td>
    <td>Mobile</td>
    <td>Zen5 + Zen5c</td>
    <td>4 x <span color="red">256-bit</span></td>
    <td>1024 bits / cycle</td>
  </tr>
  <tr>
    <td>AMD Strix Halo</td>
    <td>High-end? Mobile</td>
    <td>Zen5 ?</td>
    <td>?</td>
    <td>?</td>
  </tr>
  <tr>
    <td>AMD Turin</td>
    <td>Server</td>
    <td>Zen5/Zen5c?</td>
    <td>4 x <span color="blue">512-bit ?</span></td>
    <td><strong>2048 bits / cycle ?</strong></td>
  </tr>
  <tr>
    <td>Intel Skylake X</td>
    <td>Desktop/Server</td>
    <td>Skylake</td>
    <td>3 x <span color="red">256-bit</span><br>2 x <span color="blue">
      512-bit</span></td>
    <td>768 bits / cycle<br>
      1024 bits / cycle</td>
  </tr>
  <tr>
    <td>Intel Cannon Lake</td>
    <td>Mobile</td>
    <td>Palm Cove</td>
    <td>3 x <span color="red">256-bit</span><br>2 x <span color="blue">
      512-bit</span></td>
    <td>768 bits / cycle<br>
1024 bits / cycle</td>
  </tr>
  <tr>
    <td>Intel Ice Lake</td>
    <td>All</td>
    <td>Sunny Cove</td>
    <td>3 x <span color="red">256-bit</span><br>2 x <span color="blue">
      512-bit</span></td>
    <td>768 bits / cycle<br>
1024 bits / cycle</td>
  </tr>
  <tr>
    <td>Intel Tiger Lake</td>
    <td>Mobile</td>
    <td>Willow Cove</td>
    <td>3 x <span color="red">256-bit</span><br>2 x <span color="blue">
      512-bit</span></td>
    <td>768 bits / cycle<br>
1024 bits / cycle</td>
  </tr>
  <tr>
    <td>Intel Alder/Raptor Lake</td>
    <td>Mobile/Desktop</td>
    <td>Golden Cove<br>
      Gracemont</td>
    <td>3 x <span color="red">256-bit</span><br>3 x <span color="red">128-bit</span></td>
    <td>768 bits / cycle<br>
      384 bits / cycle</td>
  </tr>
  <tr>
    <td>Intel Sapphire Rapids</td>
    <td>Server</td>
    <td>Golden Cove</td>
    <td>3 x <span color="red">256-bit</span><br>2 x <span color="blue">
      512-bit</span></td>
    <td>768 bits / cycle<br>
      1024 bits / cycle</td>
  </tr>
  <tr>
    <td>Intel Lunar/Arrow Lake</td>
    <td>Mobile/Desktop</td>
    <td>Lion Cove<br>
      Skymont</td>
    <td>4 x <span color="red">256-bit</span><br>
      4 x <span color="red">128-bit</span></td>
    <td>1024 bits / cycle<br>
      512 bits / cycle</td>
    </tr>
  </tbody></table>
<p>To be clear, Zen5 mobile still supports the full AVX512 instruction set. But the performance will be similar to Zen4 where the throughput of 512-bit instructions are halved by means of running through 256-bit hardware twice. Nevertheless, this stripped-down AVX512 is still better than most of Intel's offerings.</p>

<p>In February when the GCC patch revealed that Zen5 would have native AVX512, it came as a surprise to many. Nobody thought AMD would make such a leap this quickly after Zen4 (if ever).</p>

<p>But then news of Zen5 stripping it back down to 256-bit came as much of a surprise since that immediately implies that AMD bifurcated their Zen5 architecture into at least 4 different cores:</p>
<ul>
  <li>Zen5 with 512-bit datapath</li>
  <li>Zen5c with 512-bit datapath</li>
  <li>Zen5 with 256-bit datapath</li>
  <li>Zen5c with 256-bit datapath</li>
</ul>
<p>So far, my limited testing reveals that Strix Point's nerfing of the AVX512 goes beyond just halving the 512-bit throughput. The FADD and possibly even the register file also appear to be cut down.</p>



<p><strong><u><a name="memory_bandwidth"></a>AVX512 is Impressive, Memory Bandwidth is not</u></strong></p>

<p><span color="red">(This section has been redacted until August 14.)</span></p>




  <p><u><strong><a name="ipc_inconsistency"></a>Why were Zen5 IPC leaks all over the place?</strong></u></p>
  
  <p>Leaks about Zen5's IPC improvement have been all over the place. And while AMD has officially stated that the average IPC improvement over Zen4 is 16%, the numbers being averaged behind it are as random as throwing darts after being spun around in circles blindfolded.</p>
  
  <p>Numbers ranged from a low as 5% (mostly Zen 5% memes) to 40% SpecInt, to 2x AVX512. And while it may seem obvious to some, there is a simple reason behind it - there are many different types of workloads and Zen5 improves on them very unevenly. Some things improved a lot while other things gained virtually nothing.</p>
  
  <p>How a benchmark performed depended on where it landed. And it didn't help that Zen5 desktop and Strix have different AVX512 implementations - thus contributing even more variation to benchmark performance.</p>

  <p>If we look at pure homogenous CPU workloads with no memory bottleneck, here's what I get from just my own tests (largely taken from my own projects):</p>
  <table>
    <tbody><tr>
      <td><strong>Workload</strong></td>
      <td><strong>IPC Improvement: Zen4 -&gt; Zen5 (Granite Ridge)</strong></td>
      <td><strong>Application</strong></td>
    </tr>
    <tr>
      <td>Scalar Integer</td>
      <td><p>20%</p>
      <p>30 - 35%</p></td>
      <td><p>C++ Code Compilation</p>
      <p>Basecase large multiply. Scalar 64-bit NTT kernels.</p></td>
    </tr>
    <tr>
      <td>x87 FPU</td>
      <td>10 - 13%</td>
      <td>PiFast, y-cruncher BBP (00-x86)</td>
    </tr>
    <tr>
      <td>128-bit SSE</td>
      <td>-1% (regression)</td>
      <td>y-cruncher BBP (05-A64 and 08-NHM)</td>
    </tr>
    <tr>
      <td>256-bit AVX</td>
      <td>5 - 8%</td>
      <td>y-cruncher BBP (19-ZN2)</td>
    </tr>
    <tr>
      <td>512-bit AVX512</td>
      <td>96 - 98% (basically 2x)</td>
      <td>y-cruncher BBP (22-ZN4) and various internal kernels</td>
    </tr>
  </tbody></table>
  <p>So we can see that Zen5's biggest gains are in scalar integer and AVX512. Everything else is mediocre to disappointing. The improvement to x87 is an interesting surprise though. I don't know what the relevant architectural improvement is, but I doubt it is specific to x87 since nobody besides SuperPi benchmarkers care about x87 anymore. The slight performance regression in pure 128-bit SSE is surprising, but likely the result of some latency regressions which will be covered later.</p>
  
  <p>The popular benchmarks Cinebench and CPU-Z showed disappointing gains of 10-15%. But that's because they both happen to hit Zen5's weakest categories:</p>
  <ul>
    <li>Cinebench is a mix of scalar SSE and 256-bit AVX.</li>
    <li>CPU-Z is almost exclusively scalar SSE.</li>
  </ul>
  <p>A 10-15% IPC improvement in these categories is still larger than what I observed in my own tests. I will touch on this later.</p>

  <p>The 40% IPC improvement in SpecInt (an early leak) is consistent with my tests showing 30-35% improvement in raw scalar integer that isn't memory-bound.</p>
  
  <p>The leaks of 2x improvement in AVX512 were spot on. This is huge, but comes as no surprise since AMD already revealed it in their GCC patch in February.</p>
  
  <p>For y-cruncher (which I'm the developer of):</p>
  <ul>
    <li>The regular Pi benchmarks and computations gain almost nothing (1-3%) on Zen5 due to being bottlenecked by memory bandwidth.</li>
    <li>If you run single-threaded, you remove the memory bottleneck and get a ~50% IPC improvement on Zen5 thanks to AVX512. (less than 2x due to <a href="https://en.wikipedia.org/wiki/Amdahl%27s_law">Amdahl's Law</a>)</li>
    <li>y-cruncher's BBP test (now a benchmark) shows 98% IPC improvement due to the pure AVX512 without any memory access.</li>
  </ul>
  <p>In fact, the AVX512 improvement on Zen5 created a memory bottleneck so large that it became the primary reason why I promoted the BBP mini-program from a tool for verifying Pi records to a formal benchmark. The regular benchmarks wouldn't do Zen5 (and future processors) any justice. At least until someone can figure out how to get DDR5-20000 on AM5...</p>
  
  
  
  <p><u><strong><a name="clockspeed"></a>Is the clockspeed really still 5.7 GHz?</strong></u></p>
  
  <p><span color="red">(This section has been redacted until August 14.)</span></p>

  
  
  <p><u><strong><a name="thermals"></a>Thermals and Heat Dissipation</strong></u></p>
  
  <p><span color="red">(This section has been redacted until August 14.)</span></p>

  


<p><u><strong><a name="throttling"></a>Does Zen5 throttle under AVX512?</strong></u></p>
  
  <p>Yes it does. Intel couldn't get away from this, and neither can AMD. Laws of physics are the laws of physics.</p>

  <p>The difference is <em>how</em> AMD does the throttling, as it's very different from Intel's approach and has virtually no negative side-effects.</p>
  
  <p><span color="red">(The rest of this section has been redacted until August 14.)</span></p>



<p><a name="power_transitions"></a><u><strong>Power Transitions:</strong></u></p>

<p>The throttling discussed in the previous section is for the steady state behavior. So if you sustain AVX512 on all cores for a long time, the CPU will eventually throttle down hard. (where "a long time" means a long time for the CPU - which can be just a few milliseconds in real time)</p>

<p>But what about the transients? What happens if the chip suddently goes from low-intensity code (like scalar integer) to high-intensity AVX512? This kind of thing happens quite often when "normal" code calls into an optimized library such as an MKL matrix multiply.</p>

<p>The problem with sudden code transitions like this is that they suddenly increase the power draw. And increased power draw causes vdroop, which can lead to instability. Normally, stability is maintained by having either the frequency or voltage regulation adapt to the new load. But these code transisions can happen in a matter of nanoseconds - far too quick for any external regulation to adapt to before bad things can happen.</p>


<p><strong>Intel Processors:</strong></p>

<p>For Intel processors, these transitions are handled in two phases:</p>
<ol>
  <li>Upon transition from low-intensity code to higher-intensity, the high-intensity code runs at drastically reduced throughput to reduce its intensity.</li>
  <li>After a long period (~50,000 cycles), the higher intensity code will finally switch to full throughput.</li>
  </ol>
<p>As mentioned before, Intel processors cannot run AVX512 at full speed since they will crash. So before it can run AVX512, it first needs to lower the clock speed.</p>

<p>But lowering the clock speed requires interacting with the clock generator and voltage regulator, which takes time, ~50,000 cycles of it. It also requires powering on extra hardware which is only used by 512-bit instructions.</p>

<p>Rather than stalling the execution for the ~50,000 cycles needed to do this transition, Intel CPUs will break up the wider instructions and "multi-pump" them into the hardware that is already powered on and ready (and safe) to use at the current clock speed.</p>

<p>As a hypothetical example (since it's hard to know the actual behavior), at higher clocks, only the bottom 128 bits of the 512-bit hardware is powered on. At this speed, turning on the upper 384 bits will cause enough vdroop to crash the core. Only at lower speeds can the full 512 bits be powered on. But while you are waiting for the CPU to transition to the lower clock speed, you can still execute 512-bit instructions using that bottom 128 bits of hardware. It takes 4x longer, which is bad, but better than not doing anything at all.</p>

<p>This behavior was first observed by Agner Fog. So it begs the question of whether Zen5 also does this. In other words:</p>
<blockquote>
  <p>Does Zen5 temporarily revert to Zen4's double-pumping during a sudden transition to 512-bit code?</p>
</blockquote>
<p>There are plenty of reasons to believe this. AMD already has an efficient double-pumping logic from Zen4 which they may be reusing for the mobile Zen5 parts.</p>


<p><strong>AMD Processors:</strong></p>

<p>The answer appears to be a "no" for both Zen4 and Zen5.</p>

<p>I wrote a set of benchmarks to test this behavior and managed to replicate Agner Fog's observations on both Skylake X and Tiger Lake. Then when I ran it on Zen4 and Zen5, I observed no transition period for all of the following scenarios:</p>
<ul>
  <li>Scalar Integer -&gt; 128-bit Floating-Point</li>
  <li>Scalar Integer -&gt; 256-bit Floating-Point</li>
  <li>Scalar Integer -&gt; 512-bit Floating-Point</li>
  <li>128-bit Floating-Point -&gt; 256-bit Floating-Point</li>
  <li>128-bit Floating-Point -&gt; 512-bit Floating-Point</li>
  <li>256-bit Floating-Point -&gt; 512-bit Floating-Point</li>
</ul>
<p>By comparison, both Skylake X and Tiger Lake have transition periods for all of the above except scalar -&gt; 128-bit. I have not tested other Intel processors.</p>

<p>So Zen5 can go from low-intensity integer code to 4 x 512-bit floating-point almost instantly*. There is no 50,000 cycle delay where 512-bit code runs at reduced throughput. Therefore, this behavior is consistent with the earlier observation that Zen5 can run AVX512 at full clock speed provided there is thermal headroom. Somehow Zen5 manages to keep all that extra hardware on standby and can wake it up instantly.</p>

<p>From the developer standpoint, what this means is that there quite literally is no penalty for using AVX512 on Zen5. So every precaution and recommendation against AVX512 that has been built up over the years on Intel should be completely reversed on Zen5 (as well as Zen4). Do not hold back on AVX512. Go ahead and use that 512-bit memcpy() in otherwise scalar code. Welcome to AMD's world.</p>

<p>How is AMD able to accomplish this? Do they have capacitors next to all the 512-bit hardware ready to unload at a moment's notice to buy time for the voltage and frequency regulation to adapt? Being a software guy, I have no idea. Though my circuit designer friends say that proper sizing of the power rails can effectively act as the "large capacitor" that is needed to take on a sudden power surge.</p>


<p><sup>*I say "almost" instantly because there is a semi-consistent delay of around ~50 cycles for the most extreme transition  (scalar integer to 4 x 512-bit) which does not happen as consistently with the other transitions. But it is difficult to tell if this stall is real or just an artifact of the test. The serializing effect of the RDTSCP instruction for clock measurement implies a heisenberg uncertainty of also around 50 cycles. If this delay is real, we can speculate if this is caused by clock-stretching or something else. Either way, it doesn't sound easy to test.</sup></p>



<p><a name="numbers_for_devs"></a>Useful Numbers for Developers</p>

<p><strong>Key Differences from Zen4:</strong></p>
<ul>
  <li>Throughput of nearly all 512-bit instructions has been doubled up. (full Zen5 cores only)</li>
  <li>Latency of all 1-cycle SIMD instructions (regardless of width) has regressed to 2 cycles.</li>
  <li>128-bit and 256-bit instructions remain largely the same - no improvement.</li>
  <li>SIMD register file (and thus reorder window) has increased from 192 to 384 with an additional 96 entry NSQ.</li>
</ul>
<p><strong>General Integer:</strong></p>
<ul>
  <li># of ALUs increased from 4 to 6.</li>
  <li>6 x ALU / cycle is not possible. Easy to hit 5/cycle, hard to get more. Most I can get in a synthetic is 5.5/cycle. Reason unknown - front end bottleneck?</li>
  <li>Multiply (lower half) improves from 1 -&gt; 3/cycle.</li>
  <li>Multiply (upper half) remains 1/cycle.</li>
  <li>Shift improves from 2 -&gt; 3/cycle.</li>
  <li>CMOV improves from 2 -&gt; 4/cycle.</li>
  <li>CRC improves from 1 -&gt; 3/cycle.</li>
  <li>PEXT/PDEP improves from 1 -&gt; 3/cycle.</li>
</ul>
<p><strong>Integer Load/Store:</strong></p>
<ul>
  <li>4 x load / cycle (up from 3 in Zen4)</li>
  <li>2 x store / cycle</li>
  <li>Maximum 4 load/store per cycle of any type. Though it's difficult to get more than 3.5/cycle when a store is involved unless the loads are mirrored/forwarded.</li>
</ul>
<p><strong>General SIMD (512-bit Datapath):</strong></p>
<ul>
  <li>4 x 512-bit / cycle is possible and very easy to achieve. (no real bottlenecks in the way)</li>
  <li>4 x 512-bit / cycle IADD/bitwise. (except ternlog due to 10-port limit)</li>
  <li>2 x 512-bit / cycle shift.</li>
  <li>2 x 512-bit / cycle FADD.</li>
  <li>2 x 512-bit / cycle FMUL/FMA/IMUL/IFMA.</li>
  <li>2 x 512-bit FADD + 2 x 512-bit FMA / cycle (4 IPC) is possible.</li>
  <li>4 x 512-bit / cycle simple shuffle (unpacks, VPSHUFD).</li>
  <li>2 x 512-bit / cycle complex shuffle (anything crossing a 128-bit boundary including permutes such as VPERMT2B).</li>
  <li>FADD latency drops from 3 -&gt; 2 cycles, but only if it can be forwarded. Otherwise remains 3 cycles.</li>
  <li>All formerly 1-cycle latency SIMD instructions now have 2-cycle latency. Applies to all widths - including scalar.</li>
  <li>All the throughputs shown above for 512-bit also apply to smaller vector lengths.</li>
  <li>All mask instructions are 2/cycle regardless of width. (Zen4 was 1/cycle for 64-bit mask)</li>
  <li>10-port limit remains, though Zen5 is better at avoiding it either by forwarding or caching of operands.</li>
</ul>
<p><strong>SIMD Load/Store (512-bit Datapath):</strong></p>
<ul>
  <li>2 x 512-bit load / cycle</li>
  <li>1 x 512-bit store / cycle</li>
  <li>1 x 512-bit load + 1 x 512-bit store / cycle is possible. (64 byte/cycle copy)</li>
  <li>2 x 512-bit load + 1 x 512-bit store / cycle (3 IPC) is not possible. My tests show 2.5 IPC is the limit even when aligned. Reason unknown.</li>
  <li>2 x 128/256-bit load / cycle</li>
  <li>2 x 128/256-bit store / cycle</li>
  <li>2 x 128/256-bit load + 2 x 128/256-bit store / cycle (4 IPC) does not look possible. Tests maxed out at only 2.76 IPC.</li>
  <li>2 x mask load / cycle (all widths)</li>
  <li>2 x mask store / cycle (all widths)</li>
</ul>
<p><strong>Specialized Instructions (512-bit Datapath):</strong></p>
<ul>
  <li>0.5 x VPCLMULQDQ / cycle (all widths) - no change from Zen4</li>
  <li>2 x AES / cycle (all widths)</li>
  <li>2 x GFNI / cycle (all widths)</li>
  <li>1 x V(P)EXPAND / cycle (all widths)</li>
  <li>1 x V(P)COMPRESS / cycle (all widths)</li>
  <li> 1 x VPCONFLICT / cycle (256-bit and 512-bit)</li>
  <li>2 x VPCONFLICT / cycle (128-bit)</li>
  <li>1 x VP2INTERSECT / cycle (all widths)</li>
</ul>
<p><strong>Combinations:</strong></p>
<ul>
  <li>4 x 512-bit EU + 1 x 512-bit store / cycle (5 IPC) is possible - but only if 10-port limit is not exceeded.</li>
  <li>4 x 512-bit EU + 2 x 512-bit load / cycle (6 IPC) is possible. So 6 register writes/cycle is possible.</li>
  <li>8+ IPC combined between integer and SIMD is possible. (Possibly even higher if you include 0-uop instructions, but have not tried to push it.)</li>
</ul>
<p><strong>Hazards Fixed:</strong></p>
<ul>
  <li>V(P)COMPRESS store to memory is fixed. (3 cycles/store to non-overlapping addresses)</li>
  <li><a href="http://www.numberworld.org/y-cruncher/news/2023.html">The super-alignment hazard</a> is fixed.</li>
</ul>

<p><strong>Strix Point vs Granite Ridge Differences:</strong></p>

<p>Strix Point (256-bit datapath) differs from Granite Ridge (512-bit datapath) in the following ways:</p>
<ul>
  <li>All instructions that touch a ZMM register has half the throughput except for 512-bit store and 
  VPCLMULQDQ.</li>
  <li>FADD latency is always 3 cycles. There is no 2 cycle forwarded path.</li>
  <li>The physical vector register file is only 256-bit wide. ZMM registers occupy 2 entries.</li>
  <li>The physical vector register file appears to be slightly smaller on Strix Point than Granite Ridge.</li>
</ul>

<p><strong>AIDA64 Instruction Latency/Throughput Dump:</strong></p>
<ul>
  <li>Zen5 Desktop (Granite Ridge): <a href="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/instlatdump-9950X.txt">instlatdump-9950X.txt</a></li>
  <li>Zen5 Laptop (Strix Point):
    <ul>
      <li>P-core: <a href="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/instlatdump-HX370-Pcore.txt">instlatdump-HX370-Pcore.txt</a></li>
      <li>E-core: <a href="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/instlatdump-HX370-Ecore.txt">instlatdump-HX370-Ecore.txt</a>  </li>
    </ul>
  </li>
</ul>
<p>Note that AIDA64 does not accurately measure some instructions. Known Errors:</p>
<table>
  <tbody><tr>
    <td><strong>Instruction</strong></td>
    <td><strong>AIDA64's Measurement</strong></td>
    <td><strong>Correct Value</strong></td>
    <td><strong>Notes</strong></td>
  </tr>
  <tr>
    <td>Most integer ALU instructions:<br>
      ADD, SUB, AND, OR, XOR, ...</td>
    <td>T: 0.25c</td>
    <td>T: 0.17c - 0.20c</td>
    <td>Manually measured to 0.18c - better than AIDA64.<br>
      Lower bound (6 ALUs) is 0.17c.</td>
  </tr>
  <tr>
    <td>MULX r64, r64, r64</td>
    <td>T: 1.75c</td>
    <td>T: 1.00c</td>
    <td>Manually measured to 1/cycle - better than AIDA64.</td>
  </tr>
  <tr>
    <td>Many "aligned LS pair"</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>Most of the values don't make any sense or are contradictory.<br>
      Further investigation needed.</td>
  </tr>
  <tr>
    <td><p>KANDNB k, k, k</p>
      <p>KANDNW k, k, k</p>
      <p>KANDND k, k, k</p>
      <p>KANDNQ k, k, k</p>
      <p>KXORB k, k, k</p>
      <p>KXORW k, k, k</p>
      <p>KXORD k, k, k</p>
      <p>KXORQ k, k, k</p></td>
    <td>0.02c</td>
    <td>0.50c<br>
      (not confirmed)</td>
    <td><p>AIDA64 reported value is impossibly low.</p>
      <p>Test may be using the same register which is move-eliminated.</p></td>
  </tr>
</tbody></table>


<p><a name="vector_unit"></a>Vector Unit Teardown</p>



<p>This section will assume the full Zen5 core with 512-bit datapaths.</p>


<p><a name="512_bit_required"></a><u><strong>512-bit is required for significant performance gain.</strong></u></p>

<p>Zen5's improvement to the AVX512 is that it doubles up the the width of (nearly) everything that was 256-bit to 512-bit. All the datapaths, execution units, etc... they are now natively 512-bit. There is no more "double-pumping" from Zen4 - at least on the desktop and server cores with the full AVX512 capability.</p>

<p>Consequently, the only way to utilize all this new hardware is to use 512-bit instructions. None of the 512-bit hardware can be split to service 256-bit instructions at twice the throughput. The upper-half of all the 512-bit hardware is "use it or lose it". The only way to use them is to use 512-bit instructions.</p>

<p>As a result, Zen5 brings little performance gain for scalar, 128-bit, and 256-bit SIMD code. It's 512-bit or bust.</p>

<p>So sorry to disappoint the RPCS3 community here. As much as they love AVX512, they primarily only use 128-bit AVX512 - which does not significantly benefit from Zen5's improvements to the vector unit.</p>



<p><a name="two_cycle_regression"></a><u><strong>All SIMD instructions have minimum 2 cycle latency:</strong></u></p>

<p>As awesome as Zen5's AVX512 is, not everything is perfect. So let's start with the biggest regression I found:</p>
<ul>
  <li> All formerly 1 cycle SIMD instructions have regressed to 2 cycles.</li>
  <li>Applies to all widths, even 128-bit.</li>
  <li>Everything that was already &gt;= 2 does not further regress.</li>
  <li>Throughput remains unchanged. The regression is only for latency.</li>
  <li>Instructions that can be rename-eliminated (i.e. XOR zeroing) are unaffected and remain zero latency.</li>
</ul>
<p>This caught me by surprise since it wasn't revealed in AMD's GCC patch. Initially I suspected that this regression was a trade-off to achieve the full 256 -&gt; 512-bit widening. So I asked AMD about this and they gave a completely different explanation. While I won't disclose their response (which I assume remains under NDA), I'll describe it as a CPU hazard that "almost always" turns 1-cycle SIMD instructions into 2-cycle latency.</p>

<p>So while the 1-cycle instructions <em>technically</em> remain 1-cycle, for all <em>practical</em> purposes they are now 2 cycles. So developers and optimizing compilers should assume 2 cycles instead of 1 cycle. I believe it is possible to construct a benchmark that demonstrates the 1-cycle latency, but I have not attempted to do this.</p>

<p>If the problem really is just a hazard, we can hope that it will be fixed in a future AMD processor. But for now, developers should just assume 2-cycle latency. Combined with the 4 x 512-bit capability, you now need a minimum of 8-way ILP to saturate Zen5 even for formerly 1-cycle instructions. This is a drastic increase from the 2-way ILP that was sufficient to satisfy all prior AVX512 implementations on both Intel and AMD.</p>

<p>Some of y-cruncher's carry propagation kernels got wrecked by this 2 -&gt; 8 increase in required ILP due their inherent dependency chain.  Mitigating this is one of the many micro-optimizations in the new Zen5-optimized binary for y-cruncher v0.8.5.</p>



<p><a name="loadstore_throughput"></a><u><strong>Load/Store Throughput:</strong></u></p>

<p>The full Zen5 core doubles up the 512-bit load/throughput from Zen4, but it doesn't do it symmetrically.</p>

<p>Zen4's load/store architecture is:</p>
<ul>
  <li> 3 integer load ports. (3 integer loads/cycle)</li>
  <li>2 integer store ports. (2 integer stores/cycle)</li>
  <li>2 x 256-bit vector load ports. (2 x 256-bit load/cycle, or 1 x 512-bit load/cycle)</li>
  <li>2 x 256-bit vector store ports. But only one can be used at a time. (1 x 256-bit store/cycle, or 0.5 x 512-bit store/cycle)</li>
  <li>Maximum 3 of any type of load/store each cycle.</li>
  <li>The store queue is 64 entries deep. 512-bit stores take 2 entries due to being split into 2 x 256-bit.</li>
</ul>
<p>Zen5 improves on Zen4 by:</p>
<ul>
  <li>Add one additional integer load port for a total of 4.</li>
  <li>The 2 x 256-bit vector load ports have been widened to 2 x 512-bit.</li>
  <li>Both store ports can now be used together for 2 x 256-bit store/cycle.</li>
  <li>At least one of the 2 store ports has been widened to 512-bit. But downstream appears limited to 2 x 256-bit. Thus 1 x 512-bit or 2 x 256-bit is the limit.</li>
  <li>The store queue is measured to ~108 entries deep. 512-bit stores still take 2 entries.</li>
</ul>
<p>The result is: (where "Intel"  refers to Golden Cove/Alder Lake P/Sapphire Rapids)</p>
<ul>
  <li>4 x scalar load / cycle. (better than Intel at 3/cycle)</li>
  <li>2 x scalar store / cycle. (same as Intel)</li>
  <li>2 x 256-bit load / cycle. (behind Intel at 3/cycle)</li>
  <li>2 x 256-bit store / cycle. (better than Intel at 1/cycle)</li>
  <li>2 x 512-bit load / cycle. (same as Intel)</li>
  <li>1 x 512-bit store / cycle. (same as Intel)</li>
  <li>2 x 256-bit load + 2 x 256-bit store each cycle (4 IPC) is not possible. Measured to 2.76 IPC. (still better than Intel)</li>
  <li>2 x 512-bit load + 1 x 512-bit store each cycle (3 IPC) is not possible. Measured to 2.50 IPC. (still better than Intel)</li>
</ul>
<p>The doubling of 1 x 256-bit store to 2 x 256-bit store is one of the few places where Zen5 improved on Zen4 for less than 512-bit wide SIMD.</p>

<p>Gather/Scatter has improved slightly from Zen4, but still remains behind Intel.</p>

<p>Overall, AMD has finally matched Intel in load/store performance after lagging behind it for many years. Of all the load/store categories, Intel remains ahead in only one of them: 128/256-bit load throughput where it can do 3/cycle while Zen5 is 2/cycle. For everything else that I have tested, Zen5 either matches or beats Intel's Golden Cove architecture.</p>

<p>But it's worth noting that Intel's Arrow Lake is expected to retake the lead in the integer/scalar department with 3 x load + 3 x store / cycle. We'll have to wait and see if this actually holds true.</p>



<p><u><strong><a name="store512"></a>512-bit Stores are Weird:</strong></u></p>

<p>512-bit stores are weird. When I first tested the stores, everything was pointing at Zen5 having 2 x 256-bit stores with 512-bit stores being split in two.</p>

<p>In a <a href="https://www.youtube.com/watch?v=YoZ0hP9mkU4">recent interview</a> of Mike Clark (architect of AMD Zen), he mistakenly claimed that Zen5's store capability to be 2 x 512-bit. While that was resolved later, it nevertheless prompted me to test it a bit further in depth than usual. And it turns out that the situation is a bit more complicated than one would expect.</p>

<p>This sequence runs at 2 stores/cycle. Nothing unusual here. This is what everyone expected.</p>
<blockquote>
  <p>vmovaps YMMWORD PTR [...], ymm0<br>
    vmovaps YMMWORD PTR [...], ymm1<br>
    vmovaps YMMWORD PTR [...], ymm2<br>
    vmovaps YMMWORD PTR [...], ymm3</p>
</blockquote>
<p>This sequence runs at 1 store/cycle. Again, nothing unusual here.</p>
<blockquote>
  <p>vmovaps ZMMWORD PTR [...], zmm0<br>
    vmovaps ZMMWORD PTR [...], zmm1<br>
    vmovaps ZMMWORD PTR [...], zmm2<br>
    vmovaps ZMMWORD PTR [...], zmm3</p>
</blockquote>
<div id="rightfloat400">
  <table>
    <tbody><tr>
      <td>
      <p><img src="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/zen5-vector-block-diagram.png" alt="" width="363" height="253"></p>
      </td>
    </tr>
    <tr>
      <td><p><strong>Zen5's Vector Architecture</strong><br>
        The store ports are shared with FP-to-int transfer.</p></td>
    </tr>
  </tbody></table>
</div>
<p>Direct measurements of the store-queue show that 512-bit stores take two entries in the store-queue. Therefore the most logical explanation is that the two store ports are 256-bits each - with 512-bit stores being split across them.</p>

<p>However...  if we add instructions which share the same ports as the stores, we'll find that it doesn't slow down the stores.</p>

<p>This sequence still runs at 1 store/cycle.</p>
<blockquote>
  <p>vmovaps ZMMWORD PTR [...], zmm0<br>
    vmovaps ZMMWORD PTR [...], zmm1<br>
    vmovaps ZMMWORD PTR [...], zmm2<br>
    vmovaps ZMMWORD PTR [...], zmm3</p>
  <p>vmovd &nbsp;&nbsp;r10, xmm4</p>
  <p>vmovd &nbsp;&nbsp;r11, xmm5</p>
  <p>vmovd &nbsp;&nbsp;r12, xmm6</p>
  <p>vmovd &nbsp;&nbsp;r13, xmm7</p>
</blockquote>
<p>What? The only way this is possible is if 512-bit stores do not use both store ports simultaneously. That immediately implies that at least one of them (possibly both) are 512-bit, otherwise it wouldn't be possible to simultaneously execute both a 512-bit store and a VMOVD vector-to-integer instruction. Unfortunately, it does not seem possible to experimentally determine if the store ports are both 512-bit vs. 256 + 512-bit.</p>

<p>On Strix Point, both store ports are only 256-bit wide and both must be utilized to sustain 1 x 512-bit store/cycle. So the presence of VMOVD instructions will degrade vector store performance for all widths including 512-bit.</p>

<p>Design Speculation: Given that Zen5 is a major redesign and the first of multiple architectures using the design, it is possible that AMD designed the new vector unit to support 2 x 512-bit store. But since Zen5's store-queue and retirement are still limited to 2 x 256-bit, the full 2 x 512-bit will not be realized until a future Zen processor that widens those to 2 x 512-bit. In other words, AMD may be incrementally redesigning and improving different parts of the chip in a staggered fashion.</p>


<p>But there's more! Something interesting happens when you try mixing store sizes...</p>

<p>This sequence runs with 3 cycle throughput. There is a total of 6 x 256-bit here, thus 3 cycles. Nothing unusual here.</p>
<blockquote>
  <p>vmovaps ZMMWORD PTR [...], zmm0</p>
  <p>vmovaps ZMMWORD PTR [...], zmm1<br>
    vmovaps YMMWORD PTR [...], ymm2<br>
    vmovaps YMMWORD PTR [...], ymm3</p>
</blockquote>
<p>But if we change the order to interleave the 512-bit and 256-bit stores, the throughput drops to 4 cycles.</p>
<blockquote>
  <p>vmovaps ZMMWORD PTR [...], zmm0<br>
    vmovaps YMMWORD PTR [...], ymm2<br>
    vmovaps ZMMWORD PTR [...], zmm1<br>
    vmovaps YMMWORD PTR [...], ymm3</p>
</blockquote>
<p>What happened here? There can be many possible causes - most of which are probably difficult or impossible to distinguish with microbenchmarks. But just to present one possibility:</p>
<ol>
  <li>Zen5 somehow requires that 512-bit stores be retired on the same cycle for atomicity (possibly using the same path intended for the <strong>MOVDIR64B</strong> instruction). This means that alternating 512-bit and 256-bit stores will cause bubbles since a single 256-bit store will block a 512-bit store until the next cycle.</li>
  <br>
  <li>Stores must retire in order to preserve  total store ordering (TSO) as required by x86. Therefore they cannot be reordered to fill the bubbles.</li>
</ol>
<p>Obviously this is pure speculation and would warrant further investigation. But regardless of the exact cause, the implication is that assembly writers and compiler developers should never split a pair of 512-bit stores with an odd number of smaller stores if the code is likely to be store-bound. This is the same for both Granite Ridge and Strix Point.</p>

<p>Looking back, Zen4 does not have this bubble, nor can it retire 512-bit stores in a single cycle. But Zen4 does not support <strong>MOVDIR64B</strong> and therefore does not need a way to implement atomic 512-bit store.</p>



<p><u><strong><a name="shuffle"></a>512-bit Byte-Granular Shuffle:</strong></u></p>


<p>Zen5 has two of the 512-bit byte-granular shuffles. It can do the most expensive 512-byte byte-granular shuffles at 2/cycle. This is 4x that of Intel's best CPU.</p>
<blockquote>
  <p>AVX512VL_VBMI   &nbsp;: VPERMI2B xmm, xmm, xmm        L:   0.69ns=   3.0c  T:   0.11ns=   <span color="red"><strong>0.49c</strong></span><br>
    AVX512VL_VBMI   &nbsp;: VPERMI2B ymm, ymm, ymm        L:   0.93ns=   4.0c  T:   0.11ns=   <span color="red"><strong>0.49c</strong></span><br>
    AVX512_VBMI     &nbsp;&nbsp;&nbsp;: VPERMI2B zmm, zmm, zmm        L:   1.14ns=   4.9c  T:   0.11ns=   <span color="red"><strong>0.50c</strong></span></p>
  <p>AVX512VL_VBMI   &nbsp;: VPERMT2B xmm, xmm, xmm        L:   0.69ns=   3.0c  T:   0.11ns=   <span color="red"><strong>0.49c</strong></span><br>
    AVX512VL_VBMI   &nbsp;: VPERMT2B ymm, ymm, ymm        L:   0.93ns=   4.0c  T:   0.11ns=   <span color="red"><strong>0.49c</strong></span><br>
    AVX512_VBMI     &nbsp;&nbsp;&nbsp;: VPERMT2B zmm, zmm, zmm        L:   1.14ns=   4.9c  T:   0.11ns=   <span color="red"><strong>0.50c</strong></span></p>
</blockquote>
<p>This was something that <a href="https://twitter.com/Mysticial/status/1756416569163633029">I inferred from the GCC patch</a> which was hard to believe. But sure enough, it turned out to be true once I tested the actual hardware.</p>

<p>In my Zen4 teardown blog, I expressed amazement over the quality of its 512-bit shuffle due to its O(N<sup>2</sup>) silicon cost*. Well for Zen5, AMD has duplicated it. So now there are two of these massive execution units in the full Zen5 core.</p>

<p>Meanwhile, there are (credable) rumors suggesting that the 512-bit shuffle is one of the reasons why Intel chose to drop AVX512 from their E-cores.</p>
<ol>
  <li>The 512-bit shuffle cannot be multi-pumped due to the inherent cross-lane dependencies.</li>
  <li>A native 512-bit shuffle is too expensive in silicon area.</li>
  <li>Microcoding the 512-bit shuffle would give very poor performance.</li>
</ol>
<p>Regardless of what's going on behind Intel's doors, we are left with a world where AMD has a very powerful shuffle while Intel has none - at least in the consumer space.</p>


<p>Performance-wise, the dual 512-bit shuffles doubles up the throughput of 512-bit shuffles. But it doesn't help the narrower shuffles. (Sorry RPC3 folks!)</p>
<ul>
  <li>On Zen4, the upper and lower halves of the 512-bit shuffle could be accessed separately to allow 128-bit and 256-bit shuffles to run at 2/cycle.</li>
  <li>On the full Zen5, the 512-bit shuffle can no longer be split - but there are two of them. Thus the 128-bit and 256-bit complex shuffles remain at 2/cycle.</li>
  <li>It's unclear what the Strix Zen5 does. But I suspect it's similar, if not the same as Zen4.</li>
</ul>
<p>As I have mentioned already, Zen5's SIMD improvements almost universally require 512-bit to see any benefit - thus another example of "use it or lose it". </p>

<p>So despite the 512-bit shuffle taking a different path to doubling up the 512-bit performance, the result is the same. Only 512-bit gets the improvement. The performance of 128-bit and 256-bit complex shuffles remain unchanged from Zen4.</p>


<p><sup>*A subsequent discussion showed that the 512-bit shuffle can be implemented in O(log(N)) transistors. However, the routing traffic/area likely remains O(N^2).</sup></p>



<p><a name="fadd_latency"></a><u><strong>FADD Latency:</strong></u></p>

<p>AMD has revealed that the FADD latency drops from 3 -&gt; 2. But in my testing, this is only partially true. The 2 cycle latency is only possible on the full Zen5 core (not Strix Point), and only possible if the data can be forwarded from a previous FADD. Otherwise, it remains 3 cycle latency.</p>

<p>To further complicate things, the 2-cycle latency only seems possible on Granite Ridge as I never observed it on Strix Point.</p>

<p>Forwarding Possible: 2 cycle latency FADD (Granite Ridge only)</p>
<blockquote>
  <p>vaddpd &nbsp;&nbsp;&nbsp;&nbsp; zmm0, zmm0, zmm0<br>
    vaddpd &nbsp;&nbsp;&nbsp;&nbsp;     zmm0, zmm0, zmm0<br>
    vaddpd &nbsp;&nbsp;&nbsp;&nbsp; zmm0, zmm0, zmm0<br>
    vaddpd &nbsp;&nbsp;&nbsp;&nbsp;     zmm0, zmm0, zmm0</p>
</blockquote>
<p>Forwarding Not Possible: 3 cycle latency FADD</p>
<blockquote>
  <p>vfmadd213pd zmm0, zmm0, zmm0<br>
    vaddpd &nbsp;&nbsp;&nbsp;&nbsp;     zmm0, zmm0, zmm0<br>
    vfmadd213pd zmm0, zmm0, zmm0<br>
    vaddpd &nbsp;&nbsp;&nbsp;&nbsp;     zmm0, zmm0, zmm0</p>
</blockquote>
<p>So Zen5's FADD behaves similar to Intel's 2-cycle FADD on Golden Cove. So while it's technically a 2-cycle instruction, in practice it will be closer to 3 cycles in real-world code that has both FADDs and FMUL/FMA.</p>

<p>However, while I compare Zen5's FADD to that of Golden Cove, actual performance of 512-bit FADD on Golden Cove is worse than 2-3 cycles. Even though the dedicated FADD hardware on Golden Cove is indeed 2-3 cycles (2 forwarded, 3 otherwise), in practice, the scheduler fails miserably to achieve this since many of the FADD ops get sent to the 4-cycle FMA hardware instead. So on average, 512-bit FADDs have 3.3 cycle latency on Golden Cove.</p>

<p>It is unclear why Intel's scheduler is so bad. So thanks to this unforced error by Intel, Zen5 takes the win here. (Zen4 also wins against Intel here.)</p>

<p>It is also unclear why Strix Point's FADD is still 3-cycles instead of the 2-cycles on Granite Ridge. Perhaps the 2-cycle FADD is significantly more expensive in area and power than a 3-cycle FADD and thus it was intentionally nerfed for Strix Point.</p>



<p><a name="VP2INTERSECT"></a><u><strong>AVX512-VP2INTERSECT:</strong></u></p>

<p>Ah yes, the black sheep of the AVX512 family...</p>

<p>There is a lot of history here, but to summarize:</p>
<ol>
  <li>Intel added AVX512-VP2INTERSECT to Tiger Lake. But it was really slow. (microcoded ~<strong>25 cycles</strong>/46 uops)</li>
  <li>It was so slow that <a href="https://arxiv.org/abs/2112.06342">someone found a better way</a> to implement its functionality without using the instruction itself.</li>
  <li>Intel deprecates the instruction and removes it from all processors after Tiger Lake. (ignoring the fact that early Alder Lake unofficially also had it)</li>
  <li>AMD adds it to Zen5.</li>
</ol>
<p>So just as Intel kills off VP2INTERSECT, AMD shows up with it. Needless to say, Zen5 had probably already taped out by the time Intel deprecated the instruction. So VP2INTERSECT made it into Zen5's design and wasn't going to be removed.</p>

<p>But how good is AMD's implementation? Let's look at AIDA64's dumps for Granite Ridge:</p>
<blockquote>
  <p>AVX512VL_VP2INTERSE :VP2INTERSECTD k1+1, xmm, xmm          L: [diff. reg. set]  T:   0.23ns= <span color="red"><strong>1.00c</strong></span><br>
    AVX512VL_VP2INTERSE :VP2INTERSECTD k1+1, ymm, ymm          L: [diff. reg. set]  T:   0.23ns=   <span color="red"><strong>1.00c</strong></span><br>
    AVX512_VP2INTERSECT :VP2INTERSECTD k1+1, zmm, zmm          L: [diff. reg. set]  T:   0.23ns=   <span color="red"><strong>1.00c</strong></span><br>
    AVX512VL_VP2INTERSE :VP2INTERSECTQ k1+1, xmm, xmm          L: [diff. reg. set]  T:   0.23ns=   <span color="red"><strong>1.00c</strong></span><br>
    AVX512VL_VP2INTERSE :VP2INTERSECTQ k1+1, ymm, ymm          L: [diff. reg. set]  T:   0.23ns=   <span color="red"><strong>1.00c</strong></span><br>
    AVX512_VP2INTERSECT :VP2INTERSECTQ k1+1, zmm, zmm          L: [diff. reg. set]  T:   0.23ns=   <span color="red"><strong>1.00c</strong></span></p>
</blockquote>
<p>Yes, that's right. 1 cycle throughput. ONE cycle. I can't... I just can't...</p>

<p>Intel was so bad at this that they dropped the instruction. And now AMD finally appears and shows them how it's done - 2 years too late.</p>

<p>At this point, I have no idea if VP2INTERSECT will live or die. Intel has historically led the way in terms of instruction sets with AMD playing copycat while lagging behind by a few years. Will AMD continue playing copycat and drop their amazing implementation of VP2INTERSECT? Or will they keep it alive going forward to Zen 6 and beyond? AMD has hinted to me that they may keep it, though I'm not entirely sure it's actually decided yet.</p>

<p>VP2INTERSECT doesn't look cheap to implement in hardware, but I suspect it uses the same hardware as VPCONFLICT given their similar functionality.</p>
<ul>
  <li>Both VPCONFLICT and VP2INTERSECT have the same throughput at the 256-bit and 512-bit widths.</li>
  <li>The performance of VPCONFLICT has changed from Zen4 to match that of VP2INTERSECT.</li>
</ul>
<p>In all likelihood, AMD redesigned their VPCONFLICT circuitry to handle VP2INTERSECT as well. And since they now have a design that handles both efficiently, I don't see any major reason for AMD to get rid of VP2INTERSECT for as long as they keep this piece of hardware. So even if AMD intends to kill it off in the future, they'll probably keep it around until the next major redesign of this execution unit.</p>


<p>Personally, I think VP2INTERSECT is a disgusting instruction. The way it encodes two mask outputs is out of line with all other (extant) AVX512 instructions. And because it fails to fall under any of the common "instruction classes", it likely needs to be specially handled by the decoder and possibly the uop schedulers as well.</p>

<p>In short, the instruction probably should never have existed in the first place in its current form. This may be one of the reasons Intel decided to get rid of it. It's unclear exactly what the original task was that it was meant for.</p>

<p>My prediction is that unless someone  finds a major use for this instruction with AMD's fast implementation, it will eventually die. So if anyone actually likes this instruction, the timer starts now and will end before AMD's next major architecture redesign.</p>



<p><a name="port_limit"></a><u><strong>Data Port Limitations:</strong></u></p>

<p>Putting aside the doubling in width, the vector port layout in Zen5 remains the same as Zen4. So there are still 10 data read ports shared across 4 execution and 2 store pipes.</p>

<p>So in the idealized case, this (10 inputs) runs at 4 instructions/cycle:</p>
<blockquote>
  <p>vfmadd213pd zmm{k}{z}, zmm, zmm  ;  3 inputs (mask register does not count)<br>
    vaddpd &nbsp;&nbsp;&nbsp;&nbsp;     zmm{k}{z}, zmm, zmm  ;  2 inputs (destination register doesn't count since it's not read from)<br>
    vfmadd213pd zmm{k}{z}, zmm, zmm  ;  3 inputs<br>
    vaddpd &nbsp;&nbsp;&nbsp;&nbsp;     zmm{k}{z}, zmm, zmm  ;  2 inputs</p>
</blockquote>
<p>while in the worst case, this (12 inputs), runs at 2 instructions/cycle:</p>
<blockquote>
  <p>vfmadd213pd zmm{k}, zmm, zmm  ;  3 inputs<br>
    vaddpd &nbsp;&nbsp;&nbsp;&nbsp;     zmm{k}, zmm, zmm  ;  3 inputs<br>
    vfmadd213pd zmm{k}, zmm, zmm  ;  3 inputs<br>
    vaddpd &nbsp;&nbsp;&nbsp;&nbsp;     zmm{k}, zmm, zmm  ;  3 inputs</p>
</blockquote>
<p>The difference being that the merge-masking turns the destination operand of the FADD into an extra input while the FMA always has 3 inputs.</p>

<p>However, I found it to be more difficult to hit the 10 port limit on Zen5:</p>
<ul>
  <li>Because you need 4 x 512 to saturate the EUs, you are more likely to hit other bottlenecks first. (front-end, register pressure, etc...)</li>
  <li>Zen5 appears to be more capable of eliding reads from the register file. Perhaps it can cache inputs across multiple instructions. (though this is difficult to verify)</li>
</ul>
<p>It's easy to hit the 10-port limit using only integer SIMD (8x ternlog will do it). But it's rather difficult to hit it using only floating-point. The higher latency of floating-point combined with the need to sustain 4 IPC meant that I would run out of registers long before hitting the 10-port limit. And if I reused inputs, the EUs seemed to be able to cache some of them to elide reads to the register file.</p>

<p>But with the help of stores, it's much easier to hit the 10-port limit with pure floating-point. A carefully written workload of 50% FADDs + 50% FMAs where  no forwarding or input reuse is possible will degrade in performance by sprinkling in some vector stores. Nevertheless, it still took effort and was synthetic. Though while testing this, I did notice that it was possible to sustain 4 x 512-bit arithmetic + 1 x 512-bit store every cycle (5 IPC) if you don't exceed the 10-port limit.</p>

<p>So the 10-port limit remains an issue on Zen5, but less so than Zen4. Nevertheless, it does become a problem in heavily optimized code that saturates the 4 x 512-bit EUs as memory accesses will easily push the port requirements above 10 and cause pipeline bubbles.</p>

<p>Thus it is not possible to simultaneously sustain all of the following every cycle:</p>
<ul>
  <li>2 x 512-bit FADD</li>
  <li>2 x 512-bit FMA</li>
  <li>2 x 512-bit load</li>
  <li>1 x 512-bit store</li>
</ul>
<p>While something like this would be amazing for certain workloads, it remains too much to ask for as there are too many bottlenecks.</p>



<p><u><strong><a name="vector_register_file"></a>Vector Register File (VRF):</strong></u></p>

<p>Last time with Zen4, I (correctly) guessed that the vector register file (VRF) is 192 x 512-bit based on a direct measurement of the vector reorder window.</p>

<p>The situation on Zen5 is more complicated. Direct measurements of the reorder window yielded:</p>
<table>
  <tbody><tr>
    <td colspan="4"><strong>Observed Reorder Window</strong></td>
    </tr>
  <tr>
    <td>&nbsp;</td>
    <td><strong>Strix Point P-core</strong></td>
    <td><strong>Strix Point E-core</strong></td>
    <td><strong>Granite Ridge</strong></td>
  </tr>
  <tr>
    <td><strong>XMM (128-bit)</strong></td>
    <td>420</td>
    <td>420</td>
    <td>444</td>
  </tr>
  <tr>
    <td><strong>YMM (256-bit)</strong></td>
    <td>408</td>
    <td>408</td>
    <td>444</td>
  </tr>
  <tr>
    <td><strong>ZMM (512-bit)</strong></td>
    <td>252</td>
    <td>252</td>
    <td>444</td>
  </tr>
</tbody></table>
<p>Prior to AMD's <a href="https://www.anandtech.com/show/21469/amd-details-ryzen-ai-300-series-for-mobile-strix-point-with-rdna-35-igpu-xdna-2-npu">disclosure of the architecture block diagram</a>, I hypothesized a VRF of size 480 - 512 entries based on the measured reorder window of 444 instructions. However, Zen5 has added a non-scheduling queue (NSQ) of 96 entries before register renaming. This means that measured reorder capability cannot be directly used to measure the VRF size.</p>

<p>AMD has revealed that the VRF is in fact 384 x 512-bit. Once we factor in the 96-entry NSQ and the 32 ZMM architectural state, we get close to the observed reorder window of 444 instructions - for Granite Ridge at least.</p>

<p>The results on Strix Point are harder to explain. The large difference between the YMM and ZMM reorder window implies that the register file is only 256-bit wide with ZMM values taking 2 entries instead of 1. But why the difference between XMM and YMM and why both are smaller than Granite Ridge is harder to explain.</p>

<p>But on Granite Ridge, it's pretty impressive. A VRF of 384 x 512-bit is huge - 24 KB in size. That's half the size of the L1 cache!</p>

<p>And if that's not mind-boggling enough, if we extrapolate the following:</p>
<ul>
  <li>10 x 512-bit read ports</li>
  <li>4 x 512-bit EU + 2 x 512-bit load / cycle</li>
</ul>
<p>We can deduce that this 24 KB of storage has 640 bytes/cycle of read bandwidth and 384 bytes/cycle of write bandwidth.</p>

<p>A VRF of 384 x 512-bit  is far greater than any other x86 processor to date:</p>
<table>
  <tbody><tr>
    <td><strong>Architecture</strong></td>
    <td><strong>Vector Register File</strong></td>
  </tr>
  <tr>
    <td>Skylake X<br>
      Cannon Lake</td>
    <td>168 x 512-bit</td>
  </tr>
  <tr>
    <td><p>Ice Lake</p>
      <p>Tiger Lake</p></td>
    <td>224 x 512-bit</td>
  </tr>
  <tr>
    <td>Alder Lake<br>
      Sapphire Rapids</td>
    <td><p>320 x 256-bit</p>
      <p>220 x 512-bit</p></td>
  </tr>
  <tr>
    <td>Zen 1</td>
    <td>160 x 128-bit</td>
  </tr>
  <tr>
    <td>Zen 2<br>
      Zen 3</td>
    <td>160 x 256-bit</td>
  </tr>
  <tr>
    <td>Zen 4</td>
    <td>192 x 512-bit</td>
  </tr>
  <tr>
    <td><p>Zen 5 (Strix Point)</p>
      <p>Zen 5 (Granite Ridge)</p></td>
    <td><p>&lt; 384? x 256-bit</p>
      <p>384 x 512-bit</p></td>
  </tr>
</tbody></table>
<p>While I expected Zen5 to increase the VRF to handle the 4 x 512-bit execution throughput, I certainly didn't expect it to increase by this much. So I look forward to seeing this in the annotated die shots of the full Zen5 core.</p>

<p>Though it is worth mentioning that although Zen5 has drastically increased the VRF size (and blowing Intel out of the water in the process), the integer register file has not significantly increased from Zen4 (224 -&gt; 240 entries) and thus remains smaller than Intel's latest.</p>


<p><u>Implications of the large VRF:</u></p>

<p>This massive increase of 192 -&gt; 384 entries + NSQ is one of only two major improvements that Zen5 brings to 128-bit and 256-bit vector instructions. The other being the ability to do 2 x 128-bit or 256-bit stores/cycle.</p>

<p>It is likely that this massive VRF and reorder capability increase, (alone or in large part), is what gives Cinebench and CPU-Z their 10-15% IPC improvement since Chips and Cheese's analysis on <a href="https://chipsandcheese.com/2023/10/22/cinebench-2024-reviewing-the-benchmark/">Cinebench</a> and <a href="https://chipsandcheese.com/2023/11/03/cpu-zs-inadequate-benchmark/">CPU-Z</a> point at the reorder buffer being the primary bottleneck.</p>




<p><a name="integer_unit"></a>Integer Unit Teardown</p>




<p>While this article is mainly focused on the vector unit and the AVX512, there's enough interesting changes in the back-end of the integer unit that I'll touch on as well.</p>

<div id="rightfloat600">
  <table>
    <tbody><tr>
      <td>
      <p><img src="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/zen4-int-diagram-small.png" alt="" width="521" height="469"></p>
      </td>
    </tr>
    <tr>
      <td><strong>Zen4's integer block diagram. (Source: Zen4 Optimization Manual)</strong></td>
    </tr>
  </tbody></table>
</div>

<p><a name="extra_alus"></a><u><strong>Zen5's two extra ALUs:</strong></u></p>

<p>Both the leaked slides and the GCC patch revealed that Zen5 will be gaining two additional ALUs for a total of 6.</p>

<p>But what GCC's patch did not reveal is that those 2 extra ALUs are not "simple" ALUs. They are actually big ones.</p>

<p>Before we look into that, let's start with Zen4's integer execution layout.</p>

<p><a href="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/57647_zen4_sog.pdf">Section 2.10 in the Zen4 Optimization Guide</a> shows the architecture as:</p>
<ul>
  <li>ALU0: add/logic, divide, branch</li>
  <li>ALU1: add/logic, multiply, CRC, PDEP/PEXT (all the 3-cycle instructions)</li>
  <li>ALU2: add/logic</li>
  <li>ALU3: add/logic</li>
</ul>
<p>From this it's easy to see that ALUs 2 and 3 are cheap while ALUs 0 and 1 are expensive.</p>

<p>The two extra ALUs that Zen5 adds are not simple ALUs like Zen4's ALU2/3. They are actually closer to ALU1 in capability. In other words, they support all the "expensive" 3-cycle latency instructions - multiply, CRC, PDEP/PEXT.</p>

<p>In other words, Zen5 can multiply, CRC, and PDEP/PEXT all at 3/cycle.</p>

<p>So not only does Zen5 become the first P-core x86 CPU to run any of these instructions at more than 1/cycle throughput, it blows through that with a full tripling in throughput.</p>

<p>The 3x in multiply throughput has obvious gains in real-word code as a big usecase will be indexing into struct arrays. CRC and PDEP/PEXT are more niche but are very important to the workloads that need them.</p>

<p>The full capability of these 2 extra ALUs was not revealed in the GCC patch which says that multiply is still 1/cycle. When asked about this, AMD told me this error in the GCC patch was intentional to avoid leaking the true capability of Zen5 before they were ready to reveal it.</p>
<table>
  <tbody><tr>
    <td><p><img src="http://www.numberworld.org/blogs/2024_8_7_zen5_avx512_teardown/zen5-block-diagram-small.png" width="960" height="540"></p></td>
    </tr>
  <tr>
    <td><strong>Zen5's integer block diagram. (Source: "AMD Tech Day Zen5 and AMD RDNA 3.5 Architecture Update")</strong></td>
    </tr>
</tbody></table>

<p>Further observations not revealed in the official architecture block diagram:</p>
<ul>
  <li>All 3 of the integer MUL execution units are also capable of CRC, and PDEP/PEXT.</li>
  <li>The ALU scheduler is measured to be ~86 entries deep.</li>
  <li>The AGU scheduler is measured to be ~60 entries deep.</li>
</ul>


<p><a name="six_ipc"></a><u><strong>6 IPC is not Possible:</strong></u></p>

<p>While Zen5 has 6 ALUs, I've found that it is not possible to sustain. Furthermore, I found it difficult to even exceed 5 IPC. Even the most synthetic of synthetics maxed out at 5.5 IPC - suggesting a bottleneck elsewhere which I have yet to determine.</p>

<p>5.5 IPC proves the existence of the 6 ALUs. But it also required a synthetic loop unrolled to nearly 1,000 instructions to achieve.</p>

<p>So the conclusion is that 5 IPC is realistic. But don't expect more than that outside of synthetics. I wouldn't even recommend compilers to think that 6 IPC is possible for their cost model calculations.</p>

<p>(Keeping in mind here that "IPC" refers to actual ALU instructions. Move-eliminated instructions do not count. And vector instructions are counted separately. It is possible to achieve 8 IPC if you use 0-uop instructions or if you combine integer and vector instructions.)</p>



<p><a name="integer_multiply"></a><u><strong>64 x 64 -&gt; 128-bit Multiply:</strong></u></p>

<p>So we know that Zen5 triples the integer multiply throughput. But it's worth digging deeper since there's two kinds of multiplies here.</p>
<ul>
  <li><strong>Lower Half:</strong> Lower 64-bits of a 64 x 64-bit multiply. (2-operand IMUL)</li>
  <li><strong>Full Product:</strong> 64x64 -&gt; 128-bit (1-operand MUL/IMUL + MULX)</li>
  </ul>
<p>Modern CPUs have separate hardware for lower-half and upper-half multiplies. Meaning that a full product multiply is split into 2 uops which go to their respective units (with the upper-half having a higher latency).</p>

<p>In other words, modern processors (prior to Zen5) actually have 2 integer multipliers even though all the multiply instructions max out at 1/cycle.</p>

<p>Thus Zen5's expansion to 3 multipliers isn't as large as it would initially seem. And while all 3 of them can do lower-half multiplies, only one is capable of upper-half multiply. So Zen5 triples the throughput of lower-half multiply while full-product multiply remains the same at 1/cycle. Testing combinations of lower-half and full-product multiply instructions shows that the full-product multiply (MULX) consumes 2 of the 3 multipliers.</p>
<ul>
  <li>1 x IMUL + 1 x MULX every cycle is possible. (3 multiply uops)</li>
  <li>2 x IMUL + 1 x MULX every cycle is not possible. (4 multiply uops)</li>
  </ul>
<p>Nevertheless, this is still a nice improvement and an arguably better utilization of the hardware.</p>

<p>Mixing of multiply types is rare. Most applications use entirely one or the other and will not mix both. I'm aware of only one major workload that mixes IMUL and MULX in close proximity. And my tests show overall IPC gains of that in excess of 35% over Zen4.</p>


<p>At this point, some readers will probably be wondering:</p>
<blockquote>
  <p>Why split a 64 x 64 -&gt; 128-bit multiply into 2 separate uops? Isn't it more efficient to compute them together and return two registers?</p>
</blockquote>
<p>Yes it sounds wasteful. In order to compute the upper-half of a multiply, you need to compute the lower-half to determine the carryout going into the upper half. Thus by separating a 64 x 64 -&gt; 128-bit multiply into two separate operations, the bottom half ends up being computed twice.</p>

<p>But the reality with modern processors is that they are heavily optimized for their pipelines and scheduling. Uops are very RISC-like and generally cannot return two values at once as would be required by a full multiply instruction like MULX. So instead of using a single "fat" multiplier that takes two 64-bit integers and produces a 128-bit result that is written to two registers, they issue two separate "natural" uops each of which independently compute a different half of the 128-bit result.</p>

<p>Examples:</p>
<ul>
  <li>AVX512-IFMA has separate instructions for the low and high parts of a 52 x 52-&gt;104-bit multiply.</li>
  <li>Intel's <a href="https://images.anandtech.com/doci/14514/BackEnd.jpg">Ice Lake integer block diagram</a> shows "MulHi" as a separate unit under port5.</li>
  <li>The ARM instruction set has separate instructions (MUL and UMULH) for the low and high parts of a 64 x 64 -&gt; 128-bit multiply.</li>
</ul>
<p>It's unclear exactly when CPUs started doing this. Latency/throughput tables don't tell the whole story. Even though full-product multiply has been 2 uops since Sandy Bridge (2011), it's unclear if it had separate hardware for lower vs. upper half or if the extra uop is just for writing the extra output to the register file.</p>


<p><a name="conclusion"></a>Final Thoughts</p>



<p>To say that Zen5's full AVX512 is impressive is an understatement. In a world where every % of performance matters and is hard fought for, we rarely see performance gains measured in "2x" instead of the usual "N%". And when this does happen, it's usually for very specific applications where a new instruction was added for them. Here, we see 2x across the entire vector stack.</p>

<p>While this isn't the first time AMD has doubled up their vector unit (they also did it in Zen2), this time hits different. When Zen2 doubled up the SIMD width from 128 to 256 bits, it was just a single step in a hopelessly long road to catching up to Intel's massive advantage with AVX512.</p>

<p>But this time, Zen5's improvement from 256 to 512 comes when Intel's struggles has forced them to backtrack on SIMD. The result is that not only has AMD surpassed Intel in their (formerly) strongest area, they have completely flipped the script on them. AMD's advantage over Intel today in SIMD is comparable to Intel's advantage over AMD in 2017 when it was Zen1 vs. Skylake X or the dark days of Bulldozer vs. Haswell.</p>

<p>But that only applies to the full Zen5 core on Granite Ridge. Meanwhile, Strix Point is somewhat of a mess. The nerfing of the vector unit goes beyond the 512-bit datapaths as the FADD latency and vector register file are also worse. And there's probably more that I missed. It's almost as if AMD took the full Zen5 design and decided to randomly knock things out until they met a certain silicon and power budget. Hybrid architectures are also undesirable for most HPC workloads, but of course HPC was never the intended market for Strix Point.</p>

<p>The biggest achilles heel of Zen5 is the memory bandwidth and the limited adoption of AVX512 itself. There simply isn't enough memory bandwidth to feed such an overpowered vector unit. And the amount of people who use AVX512 is rounding error from zero - thus leaving the new capability largely unutilized.</p>

<p>Memory bandwidth will not be easy to solve. We can expect Zen6 to improve things here with the new I/O and packaging improvments. But the bottleneck on AM5 and dual-channel DDR5 will remain. Perhaps a future platform with bigger caches (dual CCD X3D?) and 4-8 channels of CAMM memory will we see some light at the end of the tunnel.</p>

<p>As far as the adoption of AVX512 itself. The reason why it's low right now is largely because of Intel's fumbles. You can't introduce a shiny new instruction set, stack a ton barriers to using it, and expect people to quickly adopt it. And by the time AMD was able to do their implementation, Intel had already given up and bailed out.</p>

<p>So at no point in AVX512's history did both x86 CPU vendors support it at the same time. That sounds like a pretty big disincentive to developing for AVX512 right?</p>

<p>With Zen5, AMD finally delivers what Intel could not. A quality AVX512 implementation that not only bring substantial performance gains, but also avoids all the negatives that plagued Intel's early implementations.</p>

<p>Will that be enough to save AVX512? Will developers bite on that 2x performance? Only time will tell.</p>

<p>In an ideal world, Intel will support AVX512 on all their CPUs even if they need to nerf it on some of chips the same way AMD has done with Strix Point. But as of today, Intel seems committed to killing off AVX512 for the consumer market. Thus they are playing a game of whether they can hold out long enough for AVX512 to die.</p>

<p>However, Intel's ability to do this may be jeapardized by their recent (company-wide) problems which are almost certain to shed market share to AMD. And this does not bode well for trying to kill off AVX512. Regardless of what happens, I wish Intel luck. Competition is good for consumers.</p>












</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I Got a Sleep Study in My 30s. It Probably Saved My Life (110 pts)]]></title>
            <link>https://www.gq.com/story/sleep-apnea-study</link>
            <guid>41182370</guid>
            <pubDate>Wed, 07 Aug 2024 15:25:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gq.com/story/sleep-apnea-study">https://www.gq.com/story/sleep-apnea-study</a>, See on <a href="https://news.ycombinator.com/item?id=41182370">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="ArticlePageChunks"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>For most of my adult life, I’ve been intermittently jolted awake by vivid hallucinations. My apparitions visit randomly and take various forms, ranging from a friendly colleague to a Lovecraftian horror. I once shook my wife awake to introduce her to the team of contractors who’d appeared at our bedside. “Babe, they’re here to fix the floor tiles,” I beamed. We don’t have tiled floors.</p><p>Another night, I bolted out of bed to engage in hand-to-hand combat with a six-point elk that had materialized on the couch. After a short battle, I flipped on the overhead lights to get a better look at the beast. He vanished, and I regained full consciousness in my tighty-whities, shaking from adrenaline. Not my finest moment.</p><p>In my twenties, I saw my episodes as a (mostly) harmless quirk, akin to sleep walking. They didn’t always keep me in my family’s good graces, but I felt otherwise fine. I brushed them off for years.</p><p>In reality, my body was slowly torturing itself. A doctor later suggested that my hallucinations were the product of sleep deprivation, brought on by a severe case of sleep apnea. It’s a disorder that causes you to stop breathing throughout the night, due either to an obstructed airway or faulty signals between your brain and your breathing muscles.</p><p>In my case, the tissue in my throat was relaxing during sleep and collapsing my airway. I’d stop breathing for five or ten seconds at a time, dozens of times per hour. My snoring was horrendous—I’ve woken up house guests sleeping on different floors from me—but the effects of sleep apnea were much worse for my brain and body. My blood wasn’t getting enough oxygen to feed my vital organs, and my brain was waking up every few minutes, so I wasn’t getting any of the reparative benefits of sleep. I lived without rest for more than 15 years. I didn’t feel it in the early days (your body can endure a hell of a lot of torture in your twenties, it turns out) but I was deteriorating rapidly.</p><p>I’m 36 now, and over the last year or two, the consequences of sleep deprivation revealed themselves in the same way that a glass window reveals itself to a seagull. Fatigue hung over me constantly. Waking myself up became an hours-long ritual of energy drinks and coffee. I napped during my lunch breaks instead of exercising or walking the dog. I was irritable and unmotivated, I generally looked like hell, and menial tasks began to feel like insurmountable hurdles. Worst of all, my short-term memory faded, to the point where I was jotting notes after everyday conversations to remember names and basic details.</p><p>My wife, who bore the brunt of my transformation into a grumpy badger, was the first to suggest I get a sleep study. She’d done her research: Most of my issues were <a href="https://www.mayoclinic.org/diseases-conditions/obstructive-sleep-apnea/symptoms-causes/syc-20352090">common symptoms of sleep apnea</a><strong>,</strong> and ignoring them could lead to a cascading series of health problems.</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>I called a sleep doctor, who gave me the implications in plain terms: “If you don’t get this treated, you’re probably going to die early,” she said. Sleep apnea is no joke. It’s the catalyst to a laundry list of health issues, especially the ones that are <a href="https://www.gq.com/story/longevity-gap-men-women">killing middle-aged men</a> at alarming rates. Studies have <a href="https://www.nih.gov/news-events/news-releases/nih-funded-study-explains-link-increased-cardiovascular-risks-people-obstructive-sleep-apnea">linked it to heart disease</a>, high blood pressure, stroke, type 2 diabetes, and Alzheimers, among other maladies. Heart health problems in particular tend to come paired with sleep apnea: up to 80 percent of people with cardiovascular disease <a href="https://www.heart.org/en/news/2021/06/21/experts-urge-treatment-for-sleep-apnea-as-it-can-worsen-heart-problems">also suffer from sleep apnea</a>, according to the American Heart Association (AHA). Left untreated, the disorder <a href="https://aasm.org/study-shows-that-people-with-sleep-apnea-have-a-high-risk-of-death/">effectively triples your risk of dying</a>.</p><p>Luckily, there’s a one-size-fits-all treatment for sleep apnea. The CPAP machine—which delivers constant air pressure to your nose and throat via a hose and facemask—has remained the primary treatment option <a href="https://www.salon.com/2023/10/23/the-inventor-of-the-cpap-machine-wishes-for-a-future-where-his-device-is-no-longer-needed/">since its advent in the ‘80s</a>. It’s not the sexiest device you can introduce to the bedroom, unless looking like a Batman villain is your thing. But it’s affordable, widely available (at least in some countries, like the U.S.), and incredibly effective.</p><p>It completely turned my life around. All of my symptoms faded after my first few days with the CPAP, replaced by an energy I haven’t had since I was a teenager. My mood has improved dramatically, my short-term memory is coming back, and today I can endure a full shift at work without a nap or a gallon of coffee. I’ve been genuinely surprised to learn that someone in their 30s could feel this good without a martini in hand. At the same time, it’s unnerving to think about the dull, sluggish existence I’d resigned myself to for so long.</p><p>In theory, I’ll reap the benefits of sleep therapy for the rest of my life. Treatment for sleep apnea can improve mental health, <a data-offer-url="https://samhealth.org/news/treating-sleep-apnea-provides-six-key-benefits/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://samhealth.org/news/treating-sleep-apnea-provides-six-key-benefits/&quot;}" href="https://samhealth.org/news/treating-sleep-apnea-provides-six-key-benefits/" rel="nofollow noopener" target="_blank">lower your risk of cardiovascular issues and cancer</a>, and even revitalize your sex life: Studies suggest sleep apnea treatment can also improve symptoms of erectile dysfunction. The CPAP is something of a miracle, and we’ve had access to the technology for more than 40 years. You’d think after a few decades we’d have cured sleep apnea altogether, and put a dent in America’s heart health crisis as a bonus.</p><p>But the disorder is pervasive as ever. It affects hundreds of millions of people worldwide, the majority of whom may never get a diagnosis, let alone treatment: Studies estimate between 30 and <a href="https://pubmed.ncbi.nlm.nih.gov/31300334/">50 million Americans</a> suffer from sleep apnea, only about six million have been clinically diagnosed, according to <a href="https://www.ama-assn.org/delivering-care/public-health/what-doctors-wish-patients-knew-about-sleep-apnea">the American Medical Association</a>. A hell of a lot of patients are falling through the cracks.</p><p>Part of the issue stems from an information gap between the medical community and patients. Health agencies have warned in recent years that sleep apnea is underdiagnosed, and that doctors may be overlooking treatment as a preventative measure altogether. In 2021, the American Heart Association <a href="https://www.heart.org/en/news/2021/06/21/experts-urge-treatment-for-sleep-apnea-as-it-can-worsen-heart-problems">issued an emergency bulletin</a> describing sleep apnea as “unrecognized and undertreated” in cardiovascular practice, and called for “increased screening and greater awareness of obstructive sleep apnea” across the healthcare industry.</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>“The field [of sleep medicine] has only been around for 50 years, and it hasn’t yet become a big part of doctors’ training,” said Dr. David Kuhlmann, director of sleep medicine at Bothwell Regional Health Center in Missouri and spokesperson for the American Academy of Sleep Medicine. “Sleep apnea is becoming increasingly recognized, but it still has a long way to go in terms of integrating it into mainstream medical practice.”</p><p>For patients, sleep apnea can be difficult to self-diagnose and easy to ignore. “It’s not like a heart attack or stroke where one moment you’re fine and the next moment you’re not," said Dr. Kuhlmann. “It’s a gradual decline, so it may not gain the same attention as something that happens more suddenly.”</p><p>For what it’s worth, my experience trying to get treatment was consistent with the AHA’s concerns—getting sleep care is a surprisingly difficult and solitary process. I wouldn’t have thought to get a sleep study at all were it not for my wife’s intuition. No doctor has ever suggested sleep medicine as a possible treatment for my symptoms, and workers at the sleep clinic were genuinely surprised that I found the place without a referral. From the outset, I was navigating my condition alone, and seeking treatment based on a hunch—I may as well have looked for answers on an angsty WebMD forum.</p><p>Getting insurance approval for my first sleep study was an agonizing, months-long battle that I nearly gave up on. My provider didn’t want to cover the cost of the study—totaling about $500, which is <a data-offer-url="https://epicmychart.nychhc.org/MyChart/GuestEstimates/GetEstimateDetails?&amp;token=%2B3zMzA1GQShzvpeB3PVlnCKPNPySJ3NSPmo4Doql0GM%3D&amp;svcArea=WP-24bNAwhm-2FgDx4OBDKtDjitLg-3D-3D-24rxoTRYmEfarjKMJIuEYcr-2F-2B6bfLiaylfKeH0-2BV94hYc-3D&amp;template=WP-248Elw3wjE9anToOHpGFRuEg-3D-3D-24Q1c25f0DUvVPrPvLlfLKofMLvBo3fvTmewJr0z9k87I-3D" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://epicmychart.nychhc.org/MyChart/GuestEstimates/GetEstimateDetails?&amp;token=%2B3zMzA1GQShzvpeB3PVlnCKPNPySJ3NSPmo4Doql0GM%3D&amp;svcArea=WP-24bNAwhm-2FgDx4OBDKtDjitLg-3D-3D-24rxoTRYmEfarjKMJIuEYcr-2F-2B6bfLiaylfKeH0-2BV94hYc-3D&amp;template=WP-248Elw3wjE9anToOHpGFRuEg-3D-3D-24Q1c25f0DUvVPrPvLlfLKofMLvBo3fvTmewJr0z9k87I-3D&quot;}" href="https://epicmychart.nychhc.org/MyChart/GuestEstimates/GetEstimateDetails?&amp;token=%2B3zMzA1GQShzvpeB3PVlnCKPNPySJ3NSPmo4Doql0GM%3D&amp;svcArea=WP-24bNAwhm-2FgDx4OBDKtDjitLg-3D-3D-24rxoTRYmEfarjKMJIuEYcr-2F-2B6bfLiaylfKeH0-2BV94hYc-3D&amp;template=WP-248Elw3wjE9anToOHpGFRuEg-3D-3D-24Q1c25f0DUvVPrPvLlfLKofMLvBo3fvTmewJr0z9k87I-3D" rel="nofollow noopener" target="_blank">cheaper than a mammogram at a New York hospital</a>—because I don’t share many risk factors with the average sleep apnea patient: I’m not obese, I’m under 40, my blood pressure is fine, and my neck isn’t thick enough to crush my airway in my sleep—which is a thing, apparently.</p><p>These barriers to entry for basic sleep treatment seem counterintuitive. Sleep apnea affects <a href="https://www.mayoclinic.org/diseases-conditions/sleep-apnea/symptoms-causes/syc-20377631">people of all ages and body types</a>, and obesity isn’t even a <a href="https://newsnetwork.mayoclinic.org/discussion/mayo-clinic-q-and-a-understanding-central-sleep-apnea/#:~:text=Obstructive%20sleep%20apnea%20often%20develops,the%20muscles%20that%20control%20breathing.">risk factor for central sleep apnea</a>, which involves brain signals as opposed to airway obstructions. From an insurance provider’s perspective, covering a $500 sleep study as a preventative measure seems like a wise investment when compared to a lifetime of treatment for diabetes or heart disease.</p><p>After a series of declined claims and unsuccessful phone calls, I nearly paid for the study myself. But my provider relented in the end, after my doctor suggested that my hallucinations were a risk factor for sleep apnea.</p><p>I spent a mostly sleepless night at a small, ramshackle clinic in South Brooklyn, hooked up to several dozen wires and belts that monitored my breathing and movements. I wouldn’t get my official results for a few days, but the technician who monitored me said the results were clear from the start of my test: “You definitely have sleep apnea,” he said. “Without a doubt.”</p><p>My results were shocking. I knew I was a loud snorer, but I didn’t know I was on a fast-track toward an early grave. Over the course of about six hours, I’d stopped breathing 199 times, placing me well above the highest severity threshold for sleep apnea. Each time I stopped breathing, my blood oxygen level plummeted from 94 to 87 percent, <a href="https://my.clevelandclinic.org/health/diseases/17727-hypoxemia">a dangerously low level</a> that <a href="https://my.clevelandclinic.org/health/diseases/17727-hypoxemia">causes brain and heart damage, if not death.</a></p><p>With those results in hand, my insurance provider became much more accommodating though the rest of treatment. I had a CPAP within weeks, and as long as I use it regularly for the first six months, the machine won’t cost me a dime.</p><p>The process of getting sleep treatment can be opaque and frustrating. It requires a fair deal of self-determination, education and advocacy. But the benefits of CPAP therapy—even the short-term improvements to your daily life—vastly outweigh the pain of the process. If you’re tired all day, or you keep your friends awake with your snoring, or you suffer from terrifying hallucinations, consider this your wake-up call: Get a sleep study.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Play with an interactive heatmap of SF crime (and other cities) (128 pts)]]></title>
            <link>https://safemap.io/sf/map</link>
            <guid>41182101</guid>
            <pubDate>Wed, 07 Aug 2024 14:56:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://safemap.io/sf/map">https://safemap.io/sf/map</a>, See on <a href="https://news.ycombinator.com/item?id=41182101">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>
              Is San Francisco a safe city? Answer that question with Safemap. Explore crime in San Francisco using a free and fast heatmap. Learn which parts of San Francisco are safest and which parts are best to avoid. Learn San Francisco crime stats, explore San Francisco crime data, and view San Francisco crime maps.
              </p><ol>
                <li>Open map control by clicking the top left button.</li>
                <li>Click on crime categories to plot them on the map.</li>
                <li>Explore subcategories using the 'Data Drilldown' section.</li>
                <li>Edit date/time ranges using the dropdown in the 'Current View' section.</li>
                <li>View data sources and limitations using the dropdown in the 'Current View' section.</li>
              </ol>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gear Acquisition Syndrome (129 pts)]]></title>
            <link>https://library.oapen.org/handle/20.500.12657/48282</link>
            <guid>41181871</guid>
            <pubDate>Wed, 07 Aug 2024 14:32:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://library.oapen.org/handle/20.500.12657/48282">https://library.oapen.org/handle/20.500.12657/48282</a>, See on <a href="https://news.ycombinator.com/item?id=41181871">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<h5>Abstract</h5>
<p>"Gear Acquisition Syndrome, also known as GAS, is commonly understood as the musicians’ unrelenting urge to buy and own instruments and equipment as an anticipated catalyst of creative energy and bringer of happiness. For many musicians, it involves the unavoidable compulsion to spend money one does not have on gear perhaps not even needed. The urge is directed by the belief that acquiring another instrument will make one a better player.
This book pioneers research into the complex phenomenon named GAS from a variety of disciplines, including popular music studies and music technology, cultural and leisure studies, consumption research, sociology, psychology and psychiatry. The newly created theoretical framework and empirical studies of online communities and offline music stores allow the study to consider musical, social and personal motives, which influence the way musicians think about and deal with equipment. As is shown, GAS encompasses a variety of practices and psychological processes. In an often life-long endeavour, upgrading the rig is accompanied by musical learning processes in popular music."</p>
</div><div>
<h5>Keywords</h5><p>Gear Acquisition Syndrome, GAS, THEORY, musician, popular music studies, music technology, consumption research</p></div><div>
<h5>ISBN</h5><p>9781862181847, 9781862181847</p></div><div>
<h5>Publication date and place</h5><p>Huddersfield, 2021</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cats appear to grieve death of fellow pets – even dogs, study finds (107 pts)]]></title>
            <link>https://www.theguardian.com/science/article/2024/aug/07/cats-appear-to-grieve-death-of-fellow-pets-even-dogs-study-finds</link>
            <guid>41181610</guid>
            <pubDate>Wed, 07 Aug 2024 14:06:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/science/article/2024/aug/07/cats-appear-to-grieve-death-of-fellow-pets-even-dogs-study-finds">https://www.theguardian.com/science/article/2024/aug/07/cats-appear-to-grieve-death-of-fellow-pets-even-dogs-study-finds</a>, See on <a href="https://news.ycombinator.com/item?id=41181610">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>Cats are often considered aloof, independent and fickle in their affections. But, research suggests, they also show signs of grieving after the death of another pet in the same household – even when it is the family dog.</p><p>Some cats struggled to sleep, went off their food or made yowling noises. Others were more needy around their caregivers or went off their favourite games, owners reported.</p><p>The team behind the work said the findings challenged the view that cats were antisocial and suggested that the psychological experience of loss might be universal.</p><p>“They [cats] engaged less in sleeping, eating and playing but more in seeking attention from humans and other pets, hiding, spending time alone and appearing to look for their lost companions,” the authors from Oakland University in the US wrote in their study, which was published in <a href="https://www.sciencedirect.com/science/article/abs/pii/S016815912400203X" data-link-name="in body link">Applied Animal Behaviour Science</a>.</p><p>Mourning is a well-established phenomenon in the animal kingdom, with elephants, dolphins and chimpanzees, for example, performing complex behaviours such as guarding the body of a companion after death. A recent study by Italian researchers suggested the phenomenon <a href="https://www.theguardian.com/science/2022/feb/24/dogs-mourning-when-dog-in-household-dies" data-link-name="in body link">extends to dogs</a>, who displayed behaviour changes when another dog in the household died.</p><p>However, the Oakland University research said, it was less obvious that a cat would display signs of bereavement.</p><p>“Whereas dogs, descended from pack animals, might reasonably respond more strongly to the death of a conspecific, cats under human care have adapted to live among conspecifics and their capacity to respond to the loss of a companion warrants further study,” the authors wrote.</p><p>In the latest study, the caregivers of more than 450 cats who had another pet, either a cat or a dog, that died recently were asked about the living cat’s behaviour. In about two-thirds of cases the deceased pet was another cat and the rest were dogs.</p><p>“Unlike dogs, we tend to think that cats are aloof and not social,” Prof Jennifer Vonk, a comparative/cognitive psychologist at Oakland University and a co-author of the work, told the Times. However, she noted, in the wild cats tended to band together and form hierarchies. “I think we’ve been mischaracterising them,” Vonk added.</p><p>The study suggested that cats were more profoundly affected the longer they lived with their fellow pet, but witnessing the death, and the number of pets in the home did not have an impact.</p><p>“Time that companion animals spent together engaged in daily activities predicted greater grief-like behaviours and fearfulness, while more positive relationships between the surviving and deceased animals predicted decreases in sleeping, eating and playing,” the study said.</p><p>While the results support the idea that cats grieve, an alternative possibility is that owners are projecting their own heartache on to the surviving pet. “Consistent with this hypothesis, caregivers who experienced greater grief were more likely to report increases in their surviving cats’ sleep, spending time alone and hiding following the death,” they wrote.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AMD Ryzen 5 9600X and Ryzen 7 9700X Offer Excellent Linux Performance (111 pts)]]></title>
            <link>https://www.phoronix.com/review/ryzen-9600x-9700x</link>
            <guid>41180976</guid>
            <pubDate>Wed, 07 Aug 2024 13:01:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/review/ryzen-9600x-9700x">https://www.phoronix.com/review/ryzen-9600x-9700x</a>, See on <a href="https://news.ycombinator.com/item?id=41180976">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>This could quite well be my simplest review in the past twenty years of Phoronix. The AMD Ryzen 9000 series starting with the Ryzen 5 9600X and Ryzen 7 9700X launching tomorrow are some truly great desktop processors. The generational uplift is very compelling, even in single-threaded Linux workloads shooting ahead of Intel's 14th Gen Core competition, across nearly 400 benchmarks these new Zen 5 desktop CPUs impress, and these new Zen 5 desktop processors are priced competitively. I was already loving the Ryzen 7000 series performance on Linux with its AVX-512 implementation and performing so well across hundreds of different Linux workloads but now with the AMD Ryzen 9000 series, AMD is hitting it out of the ball park. That paired with the issues Intel is currently experiencing for the Intel Core 13th/14th Gen CPUs and the ~400 benchmark results makes this a home run for AMD on the desktop side with only some minor Linux caveats.</p>
<p><a href="https://www.phoronix.com/image-viewer.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_1_lrg" target="_blank"><img src="https://www.phoronix.net/image.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_1_med" alt="AMD Ryzen 5 9600X and Ryzen 7 9700X retail packages"></a></p>
<p>The past two weeks I have been eagerly running many benchmarks of AMD <a href="https://www.phoronix.com/search/Zen+5">Zen 5</a> on Linux with Strix Point via the <a href="https://www.phoronix.com/review/amd-ryzen-ai-9-365">Ryzen AI 9 365</a> and <a href="https://www.phoronix.com/review/amd-ryzen-ai-9-hx-370">Ryzen AI 9 HX 370</a> with great results. That was fun, but now with Zen 5 desktop processors in hand, the benchmarking has been wild. Ahead of tomorrow's Ryzen 5 9600X and Ryzen 7 9700X availability, the review embargo on these processors lifts today. It's not until next week for the Ryzen 9 9900X and Ryzen 9 9950X availability and review embargo lift.</p>
<p><a href="https://www.phoronix.com/image-viewer.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_2_lrg" target="_blank"><img src="https://www.phoronix.net/image.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_2_med" alt="AMD Ryzen Zen 5 bottom"></a></p>
<p>Given there were already the prior embargo lifts on the <a href="https://www.phoronix.com/review/amd-zen5-ryzen-9000">AMD Zen 5 client products</a> and <a href="https://www.phoronix.com/review/amd-zen-5-core">Zen 5 architecture details</a>, today's review is squarely focused on the Ryzen 5 9600X and Ryzen 7 9700X products.</p>
<p><a href="https://www.phoronix.com/image-viewer.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_4_lrg" target="_blank"><img src="https://www.phoronix.net/image.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_4_med" alt="AMD Ryzen 5 9600X"></a></p>
<p>The Ryzen 5 9600X as a reminder is a 6-core / 12-thread Zen 5 processor with 3.9GHz base clock and 5.4GHz boost clock while having a 32MB L3 cache and a 65 Watt TDP rating. This processor is launching tomorrow at $279 USD... While the prior gen Ryzen 5 7600X today retails for around $200~220, back when it launched that Zen 4 6-core part was priced at $299 USD. So seeing the Ryzen 5 9600X launch less at $279 is rather competitive. The Intel Core i5 14600K competition meanwhile is priced at $299~339 USD as of writing.</p>
<p><a href="https://www.phoronix.com/image-viewer.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_3_lrg" target="_blank"><img src="https://www.phoronix.net/image.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_3_med" alt="AMD Ryzen 7 9700X"></a></p>
<p>The Ryzen 7 9700X meanwhile is the 8-core / 16-thread Zen 5 desktop processor with a 3.8GHz base frequency, maximum boost clock of 5.5GHz, 32MB L3 cache, and a 65 Watt TDP. The Ryzen 7 9700X is launching at a suggested price of $359 USD. This too is priced very well considering the prior gen Ryzen 7 7700X launched at $399 USD and the Intel Core i7 14700K competition is priced at $399~419 USD.</p>
<p><a href="https://www.phoronix.com/image-viewer.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_5_lrg" target="_blank"><img src="https://www.phoronix.net/image.php?id=amd-ryzen-5-9600x-ryzen-7-9700x&amp;image=amd_ryzen9600x9700x_5_med" alt="AMD Ryzen 7 9700X processor"></a></p>
<p>With the pricing covered, that leaves the two other main areas for the Phoronix focus: the Linux support and the performance.</p>
<p>When it comes to the Linux support for the Ryzen 9000 series, you should be in good shape with modern Linux distributions. With the Ryzen 9000 series working with existing AM5 motherboards after BIOS upgrade, there isn't any new platform kinks to really worry about or other Linux compatibility problems there. As I've shown in my several AMD Ryzen AI 300 series articles, the Zen 5 core support is in order. With the Ryzen 9000 series it's also simpler than with Strix Point given that there is the older cut-down RDNA2 integrated graphics if using the integrated graphics/display on the desktop CPUs and these are all full Zen 5 cores without any mix of Zen 5 and 5C.</p>
<p>All of the core support for the Ryzen 9000 series is good for end-users running the Ryzen 9000 series on modern distributions like Ubuntu 24.04 LTS, Fedora 40, Arch Linux, etc. There are a few caveats to note. First, while not relevant to most of you, if planning to use any RAPL/PowerCap sysfs monitoring the CPU power consumption that sadly isn't yet mainlined for Zen 5... Rather silly, but <a href="https://lore.kernel.org/linux-pm/20240719101234.50827-1-Dhananjay.Ugwekar@amd.com/">a one line patch is needed</a> that hasn't yet been upstreamed to add Family 1Ah to the PowerCap RAPL driver. It's sad that this one-liner wasn't merged months ago especially with the new Family ID for Zen 5 being known for months. But without this one line patch, you won't be able to enjoy any energy reporting for the CPU... Thus for my benchmarking of the Ryzen 9000 series I had to patch my kernel build. If you are on Linux 6.9+, you'll also need <a href="https://lore.kernel.org/linux-pm/20240730044917.4680-1-Dhananjay.Ugwekar@amd.com/T/#m7a59207d34b40a54971193b75d36c14dafee7824">this patch</a> to fix the AMD RAPL package energy counter scope. But again this isn't a feature used by the masses and for my purposes only ever of interest during benchmarking for power consumption monitoring and performance-per-Watt measurements. But frustrating nevertheless that the one line patch wasn't upstreamed months ago as part of the rest of the Zen 5 code but seemingly overlooked.</p>
<p>The other minor blemish for the AMD Zen 5 support is on the compiler side. <a href="https://www.phoronix.com/news/AMD-Zen-5-Znver5-Merged-GCC14">AMD did get the Znver5 target added for GCC 14.1 stable</a> that released back in April. Though it would have been even better if the support actually was out last year for GCC 13 given the annual release cadence and the likes of Ubuntu 24.04 LTS using GCC 13, not GCC 14. Intel typically does the better job here of trying to get their ISA enablement and new CPU targets added into the open-source compilers well ahead of release to avoid timing/alignment issues like this. But getting the Znver5 target into GCC 14 is at least better than sometimes where there hasn't been the support in a released compiler at launch day. But... Znver5 isn't yet in the LLVM/Clang compiler codebase. As of writing there is no Znver5 support upstreamed into the LLVM/Clang compiler. That's disappointing months after the GCC support was upstreamed. There is an imminent timing issue there as well with <a href="https://www.phoronix.com/news/LLVM-Clang-19-Feature-Freeze">LLVM Clang 19 releasing in September</a> and no Znver5 support yet. We'll see if it gets added and back-ported to the v19 release branch in the coming weeks or not.</p>
<p>So there still are some AMD Linux enablement quirks where they could improve upon for seeing better software support on launch-day, but for those not worrying about RAPL/PowerCap energy monitoring or spinning tuned-out binaries catered to Zen 5, the Linux support overall is in great shape for the Ryzen 9000 series.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I've spent nearly 5y on a web app that creates 3D apartments (526 pts)]]></title>
            <link>https://roometron.com</link>
            <guid>41180504</guid>
            <pubDate>Wed, 07 Aug 2024 12:03:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://roometron.com">https://roometron.com</a>, See on <a href="https://news.ycombinator.com/item?id=41180504">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="mainContainer"><h3><span>ROO</span><span>M</span><span>ETRON</span></h3><div><h2><span>WE TRANSFORM&nbsp;</span><br><span>Floor&nbsp;</span> <span>PLANS</span></h2><h2><strong>Boost up your</strong> real estate <strong>marketing</strong><br>with eye-catching 3D visuals</h2></div></div><div id="aboutUsMobile"><h2>Roometron transforms floor plans into virtual 3D spaces</h2><p>We bring an amazing opportunity to <strong>enhance the visibility of your real estate projects</strong> and stand out among the others within any budget</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: BudgetFlow – Budget planning using interactive Sankey diagrams (230 pts)]]></title>
            <link>https://www.budgetflow.cc/</link>
            <guid>41180441</guid>
            <pubDate>Wed, 07 Aug 2024 11:56:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.budgetflow.cc/">https://www.budgetflow.cc/</a>, See on <a href="https://news.ycombinator.com/item?id=41180441">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page_content">
	<!-- <header>
		<h1>BudgetFlow: Visual Budget Management Made Easy</h1>
		<nav>
			<ul>
				<li><a href="">Home</a></li>
				<li><a href="">Features</a></li>
				<li><a href="">How It Works</a></li>
				<li><a href="">Pricing</a></li>
				<li><a href="">Blog</a></li>
			</ul>
		</nav>
	</header>
	-->
	
<!----------------------------------------------------------------------------->




<ui-container>
	<div id="top_bar">
	



		<div>

			<ui-button clear="" hx-get="/" hx-push-url="true" hx-select="#page_content" hx-target="#page_content" hx-swap="outerHTML">
				<img src="https://www.budgetflow.cc/static/images/logo6.png" alt="Logo">
			</ui-button>

			
		</div>

		

		<p id="align-right">
			
				<ui-button href="/register">
					Register
				</ui-button>
			
		</p>


</div>


</ui-container>


<ui-container>
	
	<p>
		Welcome to BudgetFlow, an app for managing your budget visually and interactively using flow charts.
		The website is currently in beta so feedback is highly appreciated.
	</p>
</ui-container>


<ui-container>
	<div>
		<div>
			<h5>Create Budgets</h5>
			<p>Create budgets and visualize them as sankey diagrams.</p>
		</div>
		<div>
			<h5>Smart Pockets</h5>
			<p>Pockets can automatically send excess cash to another pocket or take missing cash from another pocket.</p>
		</div>
		<div>
			<h5>Shared Budgets</h5>
			<p>Share budgets with other users like your roommates or partner. Collaborate on the budget together, and link it with your own budgets.</p>
		</div>
	</div>
</ui-container>






<!----------------------------------------------------------------------------->

</div></div>]]></description>
        </item>
    </channel>
</rss>