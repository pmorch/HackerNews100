<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 04 Aug 2024 09:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Nvidia reportedly delays its next AI chip due to a design flaw (117 pts)]]></title>
            <link>https://www.theverge.com/2024/8/3/24212518/nvidia-ai-chip-delay-blackwell-b200-microsoft-amazon-google-openai-meta-artificial-intelligence</link>
            <guid>41150278</guid>
            <pubDate>Sun, 04 Aug 2024 00:29:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theverge.com/2024/8/3/24212518/nvidia-ai-chip-delay-blackwell-b200-microsoft-amazon-google-openai-meta-artificial-intelligence">https://www.theverge.com/2024/8/3/24212518/nvidia-ai-chip-delay-blackwell-b200-microsoft-amazon-google-openai-meta-artificial-intelligence</a>, See on <a href="https://news.ycombinator.com/item?id=41150278">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Nvidia has reportedly told Microsoft and at least one other cloud provider that its “Blackwell” B200 AI chips will take at least three months longer to produce than was planned, <a href="https://www.theinformation.com/articles/nvidias-new-ai-chip-is-delayed-impacting-microsoft-google-meta?rc=v4bmzs">according to <em>The Information</em></a><em>. </em>The delay is the result of a design flaw discovered “unusually late in the production process,” according to two unnamed sources, including a Microsoft employee, cited by the outlet<em>. </em></p><p>B200 chips are the follow-up to the supremely popular and <a href="https://www.theverge.com/2023/8/11/23828874/inside-the-hunt-for-ai-chips-command-line">hard-to-get H100 chips</a> that power vast swaths of the artificial intelligence cloud landscape (and helped make Nvidia <a href="https://www.theverge.com/2024/6/18/24181209/nvidia-is-the-worlds-most-valuable-company-at-the-moment">one of the most valuable companies in the world</a>). Nvidia expects production of the chip “to ramp in 2H,” according to a statement that Nvidia spokesperson John Rizzo shared with <em>The Verge</em>. “Beyond that, we don’t comment on rumors.” </p><p>Nvidia is now reportedly working through a fresh set of test runs with chip producer Taiwan Semiconductor Manufacturing Company, and won’t ship large numbers of Blackwell chips until the first quarter. <em>The Information</em> writes that Microsoft, Google, and Meta, have ordered “tens of billions of dollars” worth of the chips.</p><p>The report comes just months after <a href="https://nvidianews.nvidia.com/news/nvidia-blackwell-platform-arrives-to-power-a-new-era-of-computing">Nvidia said</a> that “Blackwell-based products will be available from partners” starting in 2024. The new chips are supposed to kick off a new <a href="https://www.theverge.com/2024/5/22/24162860/nvidia-ai-chip-every-year-blackwell-rubin">yearly cadence of AI chips</a> from the company as several other tech firms, <a href="https://www.theverge.com/2024/7/30/24209938/amd-q2-2024-earnings-datacenter-ai-revenue">such as AMD</a>, work to spin up their own AI chip competitors.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Open Source Farming Robot (272 pts)]]></title>
            <link>https://farm.bot/</link>
            <guid>41150095</guid>
            <pubDate>Sat, 03 Aug 2024 23:37:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://farm.bot/">https://farm.bot/</a>, See on <a href="https://news.ycombinator.com/item?id=41150095">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="site-main" aria-label="Main content" tabindex="-1">
      <div id="shopify-section-template--15412384923746__fb_video_hero">
  <video autoplay="" muted="" loop="">
    <source src="https://cdn.shopify.com/s/files/1/2040/0289/files/Hero_Background_-_FarmBot_-_Take_Back_Control.mp4?v=1600992641" type="video/mp4">
  </video>
  <div>
      
      <p>
        <h2>Own Your Food</h2>
        
      </p>
      
    </div>
</div><div id="shopify-section-template--15412384923746__fb_customer_success_v3_iw8W3F">
  <h2>Customer ❤️</h2>
  <p>Click to see what our customers have to say</p>
  
  
  
</div><div id="shopify-section-template--15412384923746__fb_setup">
  <video autoplay="" muted="" loop="" preload="none">
    <source src="https://cdn.shopify.com/videos/c/o/v/36bb16302d96411a9932b76068cedc60.mp4" type="video/mp4">
  </video>
  <div>
      <h2>Setup in an afternoon</h2>
      <p>
          <strong>All models come 90% pre-assembled</strong>
        </p>
    </div>
</div><div id="shopify-section-template--15412384923746__fb_home_edu_more">
  <!-- FarmBot At Home -->
  <div>
    <div>
      <h2>At home</h2>
      <p>
        Grow food for yourself, your family, and your community by installing FarmBot on a raised bed, urban rooftop, or
        in a small greenhouse at home.
      </p>
      <p>
        Enjoy the freedom of food sovereignty and knowing things are taken care of when heading out of town. Fully
        automated, hyper-local food production has never been so attainable.
      </p>
      <p>
        <strong><a target="_blank" href="https://farm.bot/pages/farmbot-at-home">Learn more →</a></strong>
      </p>
    </div>

    <div>
        <lite-youtube videoid="IJwPcF0n3j8" playlabel="Play: FarmBot at Home"></lite-youtube>
        <div>
          <h2>The Sudweeks Family</h2>
          <h3>Cedar City, Utah</h3>
          <p>
            Garrett and Lexie Sudweeks are first generation FarmBot builders passionate about sustainability. Watch them
            put together their v1.2 FarmBot Genesis kit and hear what it means to them to grow their own food and be a
            part of the larger open-source FarmBot community.
          </p>
          <p><strong>Watch the video ↑</strong></p>
        </div>
      </div>
  </div>

  <!-- Homepage Education -->
  <div>
    <div>
        <lite-youtube videoid="8PV0aR9Jl9A" playlabel="Play: FarmBot in Education - Inspiring the Next Generation"></lite-youtube>
        <div>
          <h2>Inspiring the next generation</h2>
          <h3>
            K-12 schools and universities, everywhere
          </h3>
          <p>
            FarmBot is a practical, engaging, and most importantly: FUN hands-on tool for learning robotics, nutrition,
            soil science, biology, coding, and a myriad of other STEM learning objectives.
          </p>
          <p><strong>See the film ↑</strong></p>
        </div>
      </div>

    <div>
      <h2>In class</h2>
      <p>
        Over 500 educational institutions have purchased FarmBot kits to engage and inspire the next generation of
        farmers, engineers, plant scientists, and coders.
      </p>
      <p>
        By tapping into our global community of schools, universities, DIYers, and professionals, your students will
        gain first hand experience working in a 21st century collaborative development workflow. Join us and bring this
        cutting-edge STEM-based learning and research experience to your students.
      </p>
      <p>
        <strong><a target="_blank" rel="noopener" href="http://edu.farm.bot/">More educational stories →</a></strong>
      </p>
    </div>
  </div>

  <!-- More Applications -->
  <div>
    <h2>
      More Applications
    </h2>

    <div>
        <lite-youtube videoid="mUCizxJoBmk" playlabel="Play: FarmBot for Accessibility"></lite-youtube>
        <div>
          <h3>FarmBot for Accessibility</h3>
          <p>
            Thrive Upstate is a non-profit in Greenville, South Carolina that provides people with disabilities
            services, opportunities, and support, so they may thrive. See how they use FarmBot for horticultural therapy
            and to empower individuals who otherwise could not grow their own food.
          </p>
          <p><strong>Play the story ↑</strong></p>
        </div>
      </div>

    

    <div>
        <lite-youtube videoid="QKdujWpfjSk" playlabel="Play: FarmBot and NASA"></lite-youtube>
        <div>
          <h3>Growing Food in Space</h3>
          <p>
            In 2017, FarmBot and other open-source food groups were invited to NASA to brainstorm open-source approaches
            to food production. See how FarmBot and our community of open-source contributors are helping humanity grow
            food in space, on the Moon, and Mars.
          </p>
          <p><strong>Watch the documentary ↑</strong></p>
        </div>
      </div>
  </div>
</div><div id="shopify-section-template--15412384923746__fb_what_you_can_grow_yield">
    <h2>
      What you can grow
    </h2>
    <h3>
      FarmBot Genesis can grow all of the veggies needed by one person, continuously, for less cost after a few years
      than shopping at the average US grocery store. Meanwhile, our XL bots can serve a family of four with an ROI twice
      as fast.
    </h3>

    

    

    
  </div><div id="shopify-section-template--15412384923746__fb_hardware">
    <div>
      <h2>Premium Hardware</h2>
      <h3>
        We've gone to great lengths to design, manufacture, and source only the highest quality components for our kits.
      </h3>
      <h3>
        And because everything is made from aluminum, stainless steel, and UV resistant ABS, FarmBot will last for years
        in outdoor environments.
      </h3>
      <p>
        <strong><a href="https://farm.bot/pages/hardware">Learn more →</a></strong>
      </p>
    </div>

    

    <h2>
      Designed from the ground up
    </h2>

    <div>
        <p><img data-src="https://cdn.shopify.com/s/files/1/2040/0289/files/Motors_600x.JPG?6857" src="https://cdn.shopify.com/s/files/1/2040/0289/files/16_x_9_Lazy_Placeholder.png?v=1599780154" alt="FarmBot's drivetrain"></p><div>
          <h3>Drivetrain</h3>
          <p>
            All FarmBots are powered by four powerful NEMA 17 stepper motors, GT2 timing belts and pulleys, and a
            stainless steel precision leadscrew.
          </p>
        </div>
      </div>

    <div>
        <p><img data-src="https://cdn.shopify.com/s/files/1/2040/0289/files/Express_Electronics_600x.JPG?6866" src="https://cdn.shopify.com/s/files/1/2040/0289/files/16_x_9_Lazy_Placeholder.png?v=1599780154" alt="FarmBot's electronics box"></p><div>
          <h3>Electronics</h3>
          <p>
            Our custom electronics feature TMC2130 stepper drivers with built-in stall detection and Raspberry Pi
            computers for web connectivity.
          </p>
        </div>
      </div>

    <div>
        <p><img data-src="https://cdn.shopify.com/s/files/1/2040/0289/files/Plates_27c0071d-0ddc-4ce9-b4e1-86dfa0e2b07a_600x.JPG?6866" src="https://cdn.shopify.com/s/files/1/2040/0289/files/16_x_9_Lazy_Placeholder.png?v=1599780154" alt="FarmBot's plates and brackets"></p><div>
          <h3>Plates and Brackets</h3>
          <p>
            Stamped and machined out of 6061 aluminum, our plates are tumble polished, sandblasted, and anodized to
            achieve a premium aesthetic.
          </p>
        </div>
      </div>
  </div><div id="shopify-section-template--15412384923746__fb_which_model"><!-- Start your new garden -->

<div>
  <h2 id="order">
    Which FarmBot is right for you?
  </h2>

  
</div>

<p>
  <h3>All kits ship FREE worldwide</h3>
</p>

<div>
    <h2><center>Not ready to order just yet?</center></h2>
    <p>
      Subscribe to our email newsletter instead
    </p>
    



  </div>
</div><div id="shopify-section-template--15412384923746__fb_genesis_tech_specs_XjbKBp">
  <!-- Genesis Tech Specs -->
  <div id="tech-specs">
    <h2>
      Tech Specs
    </h2>

    <div>
      <table dir="ltr">
        <tbody>
          <tr>
            <td></td>
            <!-- <td style="text-align: center;"><span class="new-badge">NEW!</span></td> -->
            <!-- <td style="text-align: center;"><span class="new-badge">NEW!</span></td> -->
          </tr>
          <tr>
            <td></td>
            <td>
              <h3>Genesis v1.7</h3>
            </td>
            <td>
              <h3>Genesis XL v1.7</h3>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Max machine area</strong><br>
              <span>(service area will be slightly less)</span>
            </td>
            <td>
              1.5m x 3m (4.5m<sup>2</sup>)<br>
              <span>5ft x 10ft (50ft<sup>2</sup>)</span>
            </td>
            <td>
              3m x 6m (18m<sup>2</sup>)<br>
              <span>10ft x 20ft (200ft<sup>2</sup>)</span>
            </td>
          </tr>
          <tr>
            <td><strong>Max machine height</strong></td>
            <td colspan="2">
              <p>
                1.5m<br>
                <span>5ft</span>
              </p>
            </td>
          </tr>
          <tr>
            <td><strong>Max plant height</strong></td>
            <td colspan="2">
              <p>
                0.5m<br>
                <span>1.5ft</span>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Raised bed interface</strong><span>NEW!</span>
            </td>
            <td colspan="2">
              <p>
                Custom aluminum extrusion tracks<br>
                <span>(no assembly required)</span>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Percent pre-assembled</strong><span>NEW!</span>
            </td>
            <td colspan="2">
              <div><p>90%</p></div>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Time to assemble</strong><span>5x FASTER!</span><br>
            </td>
            <td>3 hours</td>
            <td>4 hours</td>
          </tr>
          <tr>
            <td><strong>Extrusions</strong></td>
            <td colspan="2"><p>Silver anodized aluminum</p></td>
          </tr>
          <tr>
            <td><strong>Plates</strong></td>
            <td colspan="2"><p>Silver anodized aluminum</p></td>
          </tr>
          <tr>
            <td><strong>Plastic parts</strong></td>
            <td colspan="2"><p>UV stabilized gray ABS</p></td>
          </tr>
          <tr>
            <td><strong>Hardware</strong></td>
            <td colspan="2">
              <p>Stainless steel and aluminum</p>
            </td>
          </tr>
          <tr>
            <td><strong>Tool head</strong></td>
            <td colspan="2"><p>Universal tool mount</p></td>
          </tr>
          <tr>
            <td><strong>Interchangeable tooling</strong></td>
            <td colspan="2"><p>✅</p></td>
          </tr>
          <tr>
            <td><strong>Automatic tool changing</strong></td>
            <td colspan="2"><p>✅</p></td>
          </tr>
          <tr>
            <td><strong>Custom tool support</strong></td>
            <td colspan="2"><p>✅</p></td>
          </tr>
          <tr>
            <td><strong>Seeder</strong></td>
            <td colspan="2"><p>Yes, as interchangeable tool</p></td>
          </tr>
          <tr>
            <td><strong>Watering nozzle</strong></td>
            <td colspan="2"><p>Yes, as interchangeable tool</p></td>
          </tr>
          <tr>
            <td><strong>Rotary tool</strong></td>
            <td colspan="2"><p>Yes, as interchangeable tool</p></td>
          </tr>
          <tr>
            <td><strong>Soil moisture sensor</strong></td>
            <td colspan="2"><p>Yes, as interchangeable tool</p></td>
          </tr>
          <tr>
            <td>
              <strong>Soil temperature sensor</strong><br>
              <span>(software support coming soon)</span>
            </td>
            <td colspan="2"><p>Included with moisture sensor</p></td>
          </tr>
          <tr>
            <td><strong>Camera</strong></td>
            <td colspan="2"><p>IP67 rainproof USB Camera</p></td>
          </tr>
          <tr>
            <td><strong>Seed containers</strong></td>
            <td colspan="2">
              <p>
                2x seed troughs<br>
                1x seed tray<br>
                1x seed bin
              </p>
            </td>
          </tr>
          <tr>
            <td><strong>Tool and seed slots</strong></td>
            <td colspan="2">
              <p>
                1x gantry seed trough holder<br>
                2x 3-slot toolbays
              </p>
            </td>
          </tr>
          <tr>
            <td><strong>Computer</strong></td>
            <td colspan="2"><p>Raspberry Pi 4B</p></td>
          </tr>
          <tr>
            <td><strong>CPU speed</strong></td>
            <td colspan="2"><p>1.5GHz quad-core</p></td>
          </tr>
          <tr>
            <td><strong>RAM</strong></td>
            <td colspan="2"><p>1 GB</p></td>
          </tr>
          <tr>
            <td><strong>Real-time clock</strong></td>
            <td colspan="2"><p>Yes</p></td>
          </tr>
          <tr>
            <td><strong>Microcontroller</strong></td>
            <td colspan="2"><p>Farmduino v1.6</p></td>
          </tr>
          <tr>
            <td><strong>Stepper drivers</strong></td>
            <td colspan="2"><p>5x TMC2130 integrated chips</p></td>
          </tr>
          <tr>
            <td><strong>Motors</strong></td>
            <td colspan="2"><p>4x NEMA 17 stepper motors</p></td>
          </tr>
          <tr>
            <td><strong>Rotary encoders</strong></td>
            <td colspan="2"><p>✅</p></td>
          </tr>
          <tr>
            <td><strong>Closed-loop positioning</strong></td>
            <td colspan="2"><p>Yes, via encoders</p></td>
          </tr>
          <tr>
            <td><strong>Stall detection</strong></td>
            <td colspan="2"><p>Yes, via encoders</p></td>
          </tr>
          <tr>
            <td><strong>Solenoid valve</strong></td>
            <td colspan="2"><p>24V, normally closed</p></td>
          </tr>
          <tr>
            <td><strong>Vacuum</strong></td>
            <td colspan="2"><p>24V with EMI filter</p></td>
          </tr>
          <tr>
            <td><strong>LED light strip</strong></td>
            <td>
              1.5m<br>
              <span>5ft</span>
            </td>
            <td>
              3m<br>
              <span>10ft</span>
            </td>
          </tr>
          <tr>
            <td><strong>Extra peripheral plugs</strong></td>
            <td colspan="2"><p>2x extra plugs</p></td>
          </tr>
          <tr>
            <td><strong>LED indicators</strong></td>
            <td colspan="2">
              <p>
                Sync<br>
                Connection<br>
                2x user customizable
              </p>
            </td>
          </tr>
          <tr>
            <td><strong>Push buttons</strong></td>
            <td colspan="2">
              <p>
                E-stop<br>
                Unlock<br>
                3x user customizable
              </p>
            </td>
          </tr>
          <tr>
            <td><strong>WiFi</strong></td>
            <td colspan="2"><p>Yes</p></td>
          </tr>
          <tr>
            <td><strong>Ethernet</strong></td>
            <td colspan="2"><p>Yes</p></td>
          </tr>
          <tr>
            <td><strong>Power supply</strong></td>
            <td colspan="2"><p>100W, IP67 waterproof</p></td>
          </tr>
          <tr>
            <td><strong>Input voltage</strong></td>
            <td colspan="2">
              <p>110 to 220V AC</p>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Shipping dimensions</strong><br>
              <span>(main carton)</span>
            </td>
            <td colspan="2">
              <p>
                22cm x 42cm x 106cm<br>
                <span>9 in x 17in x 42in</span>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Shipping dimensions</strong><br>
              <span>(extrusions)</span>
            </td>
            <td>
              10cm x 6cm x 154cm<br>
              <span>4in x 2in x 61in</span>
            </td>
            <td>
              17cm x 6cm x 154cm<br>
              <span>7in x 2in x 61in</span>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Shipping weight</strong><br>
              <span>(total)</span>
            </td>
            <td>
              23kg<br>
              <span>51lb</span>
            </td>
            <td>
              29kg<br>
              <span>64lb</span>
            </td>
          </tr>
          <tr>
            <td><strong>US shipping</strong></td>
            <td colspan="2"><p>FREE</p></td>
          </tr>
          <tr>
            <td><strong>Worldwide shipping</strong><span>NEW!</span></td>
            <td colspan="2"><p>FREE</p></td>
          </tr>
          <!--
            <tr style="padding-top: 18px;">
              <td style="padding-top: inherit;"><strong>Order</strong></td>
              <td style="text-align: center; padding-top: inherit;"><span class="new-badge">NEW!</span></td>
              <td style="text-align: center; padding-top: inherit;"><span class="new-badge">NEW!</span></td>
            </tr>
          -->
          <tr>
            <td></td>
            <td>
              <h3>Genesis v1.7</h3>
            </td>
            <td>
              <h3>Genesis XL v1.7</h3>
            </td>
          </tr>
          <tr>
            <td></td>
            <td>
              <a href="https://farm.bot/products/farmbot-genesis-v1-7">ORDER NOW</a>
            </td>
            <td>
              <a href="https://farm.bot/products/farmbot-genesis-xl-v1-7">ORDER NOW</a>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
  
  <div>
  <div>
    <p><img alt="FarmBot software" data-src="https://cdn.shopify.com/s/files/1/2040/0289/files/app-wtp_200x.png?628" src="https://cdn.shopify.com/s/files/1/2040/0289/files/app-wtp_200x.png?628"></p><div>
      <h4>Software</h4>
      <p>
        You control and configure FarmBot using the free FarmBot web application at
        <a target="_blank" rel="noopener" href="http://my.farm.bot/">my.farm.bot</a>. We expect to indefinitely offer free service adequate for home growing needs, though we may charge for
        commercial or industrial FarmBot usage, for FarmBots larger than 3m x 6m in area, for FarmBots growing large
        numbers of plants concurrently, for multi-bot/multi-user management, for advanced features, and/or for other
        increased account limits. You can always host the software on your own server if you do not want to use our
        service.
      </p>
    </div>
  </div>

  <div>
    <p><img alt="FarmBot warranty" data-src="https://cdn.shopify.com/s/files/1/2040/0289/files/warranty-wtp_200x.png?628" src="https://cdn.shopify.com/s/files/1/2040/0289/files/warranty-wtp_200x.png?628"></p><div>
      <h4>Warranty</h4>
      <p>
        We’re committed to providing you with the highest quality product. As we continue to develop FarmBot hardware
        and software, we will make changes. The final product that we ship to you may be different than the one shown in
        our videos, photos, documentation, and as described on our websites. If anything is damaged or defective, we
        will replace the parts free of charge within 30 days of delivery of the product. See our
        <a target="_blank" rel="noopener" href="http://warranty.farm.bot/">limited warranty</a>
        for more information.
      </p>
    </div>
  </div>
</div>

<div>
  <h4>Support Policy</h4>
  <p>
    FarmBot requires basic computer and mechanical skills to install and operate. The majority of our customers do not
    require any technical support and are able to install FarmBot using the provided online materials. Initial setup
    will require several hours of configuration and learning to become completely operational. Please schedule adequate
    time to learn about the software and hardware systems.
  </p>
  <p>
    While FarmBot is extremely customizable, we cannot provide support to customers that use unofficial parts or intend
    to use the device in ways it was not designed to operate. We provide limited troubleshooting and technical support
    for customers that require extra help with their installation. Free support is limited to 2 hours, is
    non-transferrable, and expires 12 months after purchase of a kit. Please read our full
    <a href="https://farm.bot/pages/support-policy">support policy</a> for addditional details.
  </p>
</div>

  
  <!-- What you need to provide -->
<div>
  <h2>
    What you need to provide
  </h2>

  <div>
    <p><img alt="FarmBot raised bed" data-src="https://cdn.shopify.com/s/files/1/2040/0289/files/garden-bed-wtp_200x.png?628" src="https://cdn.shopify.com/s/files/1/2040/0289/files/garden-bed-wtp_200x.png?628"></p><h3><center>Planter Bed</center></h3>
    <p>
      All FarmBots must be mounted to a
      <a target="_blank" rel="noopener" href="http://bed.farm.bot/">raised bed</a> or similar
      infrastructure. Neither materials for the bed nor soil are included with the kits because every installation will
      be different, and shipping lumber and soil would be prohibitively expensive.
    </p>
  </div>

  <div>
    <p><img alt="FarmBot electricity" data-src="https://cdn.shopify.com/s/files/1/2040/0289/files/electricity-wtp_200x.png?628" src="https://cdn.shopify.com/s/files/1/2040/0289/files/electricity-wtp_200x.png?628"></p><h3><center>Electricity</center></h3>
    <p>
      FarmBot must be plugged into a 110 or 220V outlet. The 30cm (1ft) power cord comes with a standard US 3-prong
      plug. You must connect this to your own extension cord if needed. Customers outside the US: you must provide a
      plug adapter if needed.
    </p>
  </div>

  <div>
    <p><img alt="FarmBot water" data-src="https://cdn.shopify.com/s/files/1/2040/0289/files/water-wtp_200x.png?628" src="https://cdn.shopify.com/s/files/1/2040/0289/files/water-wtp_200x.png?628"></p><h3><center>Water</center></h3>
    <p>
      FarmBot's water system has a 3/4″ female Garden Hose Thread (GHT) connection, meaning you can take a standard US
      garden hose and screw it into your FarmBot. You will need to provide a hose of the appropriate length.
    </p>
  </div>

  <div>
    <p><img alt="FarmBot internet connection" data-src="https://cdn.shopify.com/s/files/1/2040/0289/files/internet-wtp_200x.png?628" src="https://cdn.shopify.com/s/files/1/2040/0289/files/internet-wtp_200x.png?628"></p><h3><center>Internet</center></h3>
    <p>
      FarmBot can only be controlled using the web app, so an internet connection is required. The Raspberry Pi has
      built-in WiFi, though you may need to reposition your WiFi router or install a repeater to ensure a reliable
      connection.
    </p>
  </div>
</div>

  
  <h2>
  Contact us today
</h2>
<h3>
  We'll help you with any questions you have
</h3>


</div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Make your electronics tamper-evident (188 pts)]]></title>
            <link>https://www.anarsec.guide/posts/tamper/</link>
            <guid>41148650</guid>
            <pubDate>Sat, 03 Aug 2024 19:25:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.anarsec.guide/posts/tamper/">https://www.anarsec.guide/posts/tamper/</a>, See on <a href="https://news.ycombinator.com/item?id=41148650">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>If the police ever have <a href="https://www.anarsec.guide/glossary/#physical-attacks">physical access</a> to an electronic device like a laptop, even <a href="https://www.vice.com/en/article/a3q374/hacker-bios-firmware-backdoor-evil-maid-attack-laptop-5-minutes">for five minutes</a>, they can install hardware keyloggers, create images of the storage media, or otherwise trivially compromise it at the hardware, firmware, or software level. One way to minimize this risk is to make devices tamper-evident. As the Threat Library <a href="https://notrace.how/threat-library/mitigations/tamper-evident-preparation.html">notes</a>, "Tamper-evident preparation is the process of taking precautionary measures to make it possible to detect when something has been physically accessed by an adversary."</p>
<p><a href="https://en.wikipedia.org/wiki/Evil_maid_attack">'Evil maid' attacks</a> work like this: an attacker gains temporary access to your <a href="https://www.anarsec.guide/glossary/#encryption">encrypted</a> laptop or phone. Although they can’t decrypt your data, they can tamper with your laptop for a few minutes and then leave it exactly where they found it. When you return and enter your credentials, you have been hacked. The attacker may have <a href="https://media.ccc.de/v/gpn20-32-poc-implementing-evil-maid-attack-on-encrypted-boot">modified data on your hard drive</a>, replaced the firmware, or installed a hardware component such as a keylogger.</p>
<p>"Defense in depth" means that there are multiple layers of security that an adversary must bypass in order to succeed. This article will cover tamper-evident laptop screws, storage and firmware, as well as physical intrusion detection. </p>
<h2 id="tamper-evident-laptop-screws">Tamper-Evident Laptop Screws</h2>
<p>Let's start with your laptop. For a seal to effectively alert you to intruders, it must be impossible to remove and replace without leaving a trace, and it must also be unique—otherwise, the adversary could simply replicate the seal and you’d never know they’d been there. Glitter nail polish creates a unique pattern that is impossible to replicate, and if you take a photo of this pattern, you can use it to verify that the nail polish has not been removed and reapplied in your absence, such as during a <a href="https://notrace.how/threat-library/techniques/covert-house-search.html">covert house search</a>. The presentation "<a href="https://media.ccc.de/v/30C3_-_5600_-_en_-_saal_1_-_201312301245_-_thwarting_evil_maid_attacks_-_eric_michaud_-_ryan_lackey">Thwarting Evil Maid Attacks</a>" introduced this technique in 2013. </p>
<p>Mullvad VPN <a href="https://mullvad.net/en/help/how-tamper-protect-laptop/">created a guide</a> for applying this technique: first apply stickers over the laptop case screws, then apply the nail polish. An <a href="https://dys2p.com/en/2021-12-tamper-evident-protection.html#glitzer-nagellack-mit-aufklebern">independent test</a> noted:</p>
<blockquote>
<p>Attackers without a lot of practice can use a needle or scalpel, for example, to drive under the sticker and push it partially upward to get to the screws relatively easily. The broken areas in the paint could be repaired with clear nail polish, although we did not need to do this in most of our tests. The picture below is a pre-post-comparison of one of our first attempts. Except for 3-4 glitter elements at the top left edge of the sticker, all others are still in the same place. This could be further reduced in subsequent attempts, so we rate this method as only partially suitable. [...] The relevant factor in this process is the amount of elements on the edge of the sticker. In addition, there are special seal stickers available which break when peeled off. They are probably more suitable for this method.</p>
</blockquote>
<p>
<span>
![](/posts/tamper/mullvad.png)
</span>
<img src="https://www.anarsec.guide/posts/tamper/mullvad.png">
</p>
<p>For this reason, it is preferable to apply nail polish directly to the screws rather than over a sticker. This direct application is done for <a href="https://docs.nitrokey.com/nitropad/qubes/sealed-hardware">NitroKey</a> and <a href="https://puri.sm/posts/anti-interdiction-update-six-month-retrospective/">Purism</a> laptops. Keep these nuances in mind:</p>
<blockquote>
<p>The screws holes are particularly relevant here. If they are too deep, it is difficult to take a suitable photo of the seal under normal conditions. If the hole is shallow or if it is completely filled with nail polish, there is a risk that if a lot of polish is used, the top layer can be cut off and reapplied after manipulation with clear polish. If the nail polish contains too few elements, they could be manually arranged back to the original location after manipulation if necessary.</p>
</blockquote>
<p>
<span>
![](/posts/tamper/X230.jpg)
</span>
<img src="https://www.anarsec.guide/posts/tamper/X230.jpg">
</p>
<p>Glitter nail polish was successfully bypassed during a Tamper Evident Challenge in 2018 — the winner <a href="https://hoodiepony.medium.com/bypassing-the-glitter-nail-polish-tamper-evident-seal-25d6973d617d">explained</a> how they managed to do it. Notably, a brand of nail polish with relatively large pieces of glitter in only two colors was used. It would be difficult to apply this bypass to inset screw holes; if the glitter was applied with a high density of elements, but not too thick, this would also increase the difficulty. Finally, <a href="https://dys2p.com/en/2021-12-tamper-evident-protection.html#glitzer-nagellack-mit-klebstoff">using an adhesive</a> would also make the bypass less feasible. </p>
<p>Verification that the random pattern hasn't changed can be done manually with what astronomers call a "blink comparison". This is used in astronomy to detect small changes in the night sky: you quickly flick between the original photo and the current one, which makes it easier to see any changes. Alternatively, if you have an Android smartphone (either <a href="https://www.anarsec.guide/posts/grapheneos/">GrapheneOS</a> or a cheap one for <a href="https://www.anarsec.guide/posts/tamper/#physical-intrusion-detection">intrusion detection</a>), you can use an app called <a href="https://github.com/proninyaroslav/blink-comparison">Blink Comparison</a>, which makes it less likely that you will miss something. It can be installed like any other <a href="https://www.anarsec.guide/posts/grapheneos/#how-to-install-software">app that doesn't require Google Services</a>, i.e. not through F-Droid. </p>
<p>The Blink Comparison app encrypts its storage to prevent an adversary from easily replacing the photos, and provides a helpful interface for comparing them. The app helps you take the comparison photo from the same angle and distance as the original photo. Blink Comparison then switches between the two images when you touch the screen, making direct comparison much easier than manually comparing two photos. </p>
<h2 id="in-practice">In practice</h2>
<p>Now that you understand the nuances of applying nail polish to the screws of your laptop case, let's actually do it — if you are going to <a href="https://www.anarsec.guide/posts/tamper/#tamper-evident-software-and-firmware">install Heads firmware</a>, do that first so the nail polish doesn't have to be removed and repeated. Before you start, you can also take a picture of the inside of the laptop in case you ever need to check if the internal components have been tampered with despite the nail polish protection (keep in mind that not all components are visible). Use a nail polish that has different colors and sizes of glitter, like the one shown above. </p>
<ul>
<li>First, take a photo of the bottom of the computer and use a program like GIMP to number the screws to make it easier to verify. For example, the ThinkPad X230 shown above has 13 screws that need to be numbered so that in the future you know which screw the photo <code>3.jpg</code> refers to. </li>
<li>Apply the glitter nail polish directly to each screw, making sure there are enough glitter elements without it being too thick. </li>
<li>Once it is dry, take good close-up photos of each screw — either with the Blink Comparison app on a smartphone or with a regular camera. It is a good idea to use lighting that is reproducible, so close the blinds on any windows and rely on the indoor lighting and the camera flash. Number the file names of the photos and back them up to a second storage location. </li>
</ul>
<p>If you ever need to remove the nail polish to access the inside of the laptop, you can use a syringe to apply the nail polish remover to avoid applying too much and damaging the internal electronics. </p>
<h2 id="tamper-evident-storage">Tamper-Evident Storage</h2>
<p>You also need a tamper-evident storage solution for all sensitive electronics when you are away from home (laptops, external drives, USBs, phones, external keyboards and mice) — a laptop can be tampered with in ways that don't require removing the screws. Safes are often used to protect valuable items, but they can be bypassed in many ways, and some of these bypasses are difficult to detect (see <a href="https://www.anarsec.guide/posts/tamper/#appendix-cracking-safes">below</a>). It is not trivial or inexpensive to make a safe tamper-evident, if it can be done at all. </p>
<p>
<span>
![](/posts/tamper/lentils.jpg) 
</span>
<img src="https://www.anarsec.guide/posts/tamper/lentils.jpg">
</p>
<p>A better and cheaper solution is to implement <a href="https://dys2p.com/en/2021-12-tamper-evident-protection.html#kurzzeitige-lagerung">dys2p's guide</a>:</p>
<blockquote>
<p>When we need to leave a place and leave items or equipment behind, we can store them in a box that is transparent from all sides. Then we fill the box with our colorful mixture so that our devices are covered. The box should be stored in such a way that shocks or other factors do not change the mosaic. For example, the box can be positioned on a towel or piece of clothing on an object in such a way that this attenuates minor vibrations of the environment, but the box cannot slide off it.</p>
<p>For an overall comparison, we can photograph the box from all visible sides and store these photos on a device that is as secure as possible, send it to a trusted person via an encrypted and verified channel, or send it to another device of our own. The next step is to compare the found mosaic with the original one. The app Blink Comparison is ideal for this purpose.</p>
<p>To protect an object from damage, e.g., by staining or by the substance leaking into, say, the ports of a laptop, it can be wrapped in cling film, a bag, or otherwise.</p>
</blockquote>
<p>Several colorful mixtures are described: <a href="https://dys2p.com/en/2021-12-tamper-evident-protection.html#rote-linsen-und-belugalinsen">red lentils &amp; beluga lentils</a>, <a href="https://dys2p.com/en/2021-12-tamper-evident-protection.html#gelbe-erbsen-und-wei%C3%9Fe-bohnen">yellow peas &amp; white beans</a>, etc. For a box that is transparent on all sides and fits a laptop, a small fish tank works well. For longer-term storage, <a href="https://dys2p.com/en/2021-12-tamper-evident-protection.html#laengerfristige-lagerung-oder-versand">vacuum seals</a> can be used. </p>
<p>This excerpt assumes that we take the cell phone with us, but <a href="https://www.anarsec.guide/posts/nophones/#do-you-really-need-a-phone">as discussed elsewhere</a>, this has its own security issues and is not recommended. So the smartphone we use to take a picture of the storage will have to stay in the house outside of the storage. <a href="https://www.anarsec.guide/posts/tamper/#physical-intrusion-detection">As discussed below</a>, we recommend that you get a cheap Android phone that only runs an app called Haven when you are out of the house. This device will stay out of storage anyway, so you can use it to take pictures of the storage. Alternatively, if you don't have a dedicated Haven phone but do have a <a href="https://www.anarsec.guide/posts/grapheneos/">GrapheneOS</a> device, you can use it to take photos of the storage and then hide it somewhere in your house while you're away. If you don't have a phone, you can use a camera. However, cameras don't have encryption, so it's much easier for an adversary to modify the photos and you won't be able to use the Blink Comparison app to facilitate the comparison. </p>
<h2 id="in-practice-1">In practice</h2>
<ul>
<li>Once you have placed the bagged electronic devices in the container and covered them with a colorful mixture, take photos using the Blink Comparison app. Optionally, send them to another device of your own (that is currently in storage) via <a href="https://www.anarsec.guide/posts/e2ee/#signal">Molly</a> or <a href="https://www.anarsec.guide/posts/e2ee#simplex-chat">SimpleX Chat</a>. Close Blink Comparison so that the storage is encrypted. 
<ul>
<li><em>If you are using a dedicated Haven phone (preferred)</em>: Set up Haven for physical intrusion detection before leaving, as described below. </li>
<li><em>If you are using a GrapheneOS phone</em>: Turn off the device and hide it somewhere. If the phone is found and the firmware or software is modified, Auditor will notify you. </li>
</ul>
</li>
<li>When you return, use Blink Comparison to verify the mosaic with new photos. 
<ul>
<li>Optionally, if you sent the photos to yourself on Molly/SimpleX Chat, once your devices are out of storage you can verify that they don't differ from the reference photos saved in Blink Comparison. However, the Blink Comparison encryption makes it very unlikely that these reference photos were modified in your absence. </li>
</ul>
</li>
</ul>
<h2 id="tamper-evident-software-and-firmware">Tamper-Evident Software and Firmware</h2>
<p>So far, we have only looked at making hardware compromise tamper-evident. It is also possible to make software and firmware tamper-evident. This is required for "defense in depth" — to trust an electronic device, you must trust the hardware, firmware, and software. Software or firmware compromise <a href="https://www.anarsec.guide/posts/tails-best#2-running-tails-on-a-computer-with-a-compromised-bios-firmware-or-hardware">can occur remotely</a> (over the Internet) as well as with physical access, so it is especially important because the other measures won't necessarily detect it. Tamper-evident firmware is compatible with our <a href="https://www.anarsec.guide/recommendations">recommendations</a>: Qubes OS or Tails on laptops, or GrapheneOS on a smartphone. </p>
<p>For GrapheneOS, <a href="https://www.anarsec.guide/posts/grapheneos/#auditor">Auditor</a> is an app that allows you to be notified if firmware or operating system software has been tampered with — you will receive an email when Auditor performs a remote attestation. </p>
<p>For Tails or Qubes OS, <a href="https://osresearch.net/">Heads</a> can do the same before you enter your boot password (on <a href="https://osresearch.net/Prerequisites#supported-devices">supported devices</a>). However, installing Heads is advanced, though using it is not. Keep the Heads USB security dongle with you when you leave the house, and have a backup hidden at a trusted friend's house in case it ever falls into a puddle. For more information, see <a href="https://www.anarsec.guide/posts/tails-best/#to-mitigate-against-remote-attacks">Tails Best Practices</a>. </p>
<p>If Auditor or Heads ever detects tampering, you should immediately treat the device as untrusted. <a href="https://www.notrace.how/threat-library/mitigations/computer-and-mobile-forensics.html">Forensic analysis</a> may be able to reveal how the compromise occured, which helps to prevent it from happening again. You can get in touch with a service like <a href="https://accessnow.org/help">Access Now’s Digital Security Helpline</a>, though we recommend not sending them any personal data.</p>
<h2 id="physical-intrusion-detection">Physical Intrusion Detection</h2>
<p><a href="https://notrace.how/threat-library/mitigations/physical-intrusion-detection.html">Physical intrusion detection</a> is the process of detecting when an adversary enters or attempts to enter a space. As the Threat Library notes:</p>
<blockquote>
<p>A video surveillance system that monitors a space can have the following characteristics:</p>
<ul>
<li>The cameras can be motion-activated and send you an alert if they are detected and tampered with.</li>
<li>The cameras can be positioned with the space entrances in their line of sight and/or in a discreet location.</li>
<li>To prevent the system from monitoring you while you are in the space, you can turn it on just before you leave the space and turn it off as soon as you return.</li>
</ul>
</blockquote>
<p>We recommend employing physical intrusion detection in addition to all of the tamper-evident measures. That way, even if a covert house search doesn't interact with the tamper-evident storage (for example, because the goal is to install <a href="https://notrace.how/threat-library/techniques/covert-surveillance-devices.html">covert surveillance devices</a>), you can still find out about it. </p>
<p>Haven is an Android app developed by the Freedom of Press Foundation that uses the smartphone’s many sensors — microphone, motion detector, light detector, and cameras — to monitor the room for changes, and it logs everything it notices. Unfortunately Haven is currently unmaintained, remote notifications are <a href="https://github.com/guardianproject/haven/issues/454">broken</a>, and it is unreliable on many devices. </p>
<p>Until <a href="https://github.com/guardianproject/haven/issues/465">Haven is fully functional</a>, we recommend also using a video surveillance system so that you can receive remote notifications — this is important to protect against the local logs being modified by an intruder. Choose a model with privacy features (e.g. it doesn't function through the cloud) so that the police cannot easily learn the timing of your comings and goings from it. For instance, <a href="https://github.com/motioneye-project/motioneyeos/wiki/Features">motionEye OS</a> supports remote notifications for motion detection, but it requires Linux knowledge to set up. </p>
<h2 id="in-practice-2">In practice</h2>
<p>Haven should be used on a dedicated cheap Android device that is otherwise empty. An older <a href="https://www.privacyguides.org/android/#google-pixel">Pixel</a> is a good choice because it is cheap but has good cameras, which is important for both Haven and Blink Comparison — it may even <a href="https://grapheneos.org/faq#device-lifetime">still be supported by GrapheneOS</a>. Make sure that <a href="https://www.anarsec.guide/glossary/#full-disk-encryption-fde">full disk encryption</a> is enabled. If you have a smartphone in addition to the dedicated Haven phone, it should be turned off in the tamper-evident storage — if Haven was running on it instead and was discovered by the intruder, they would now have physical access to the device while it was turned on. </p>
<ul>
<li>Place the Haven smartphone in a location that has a line of sight to where an intruder would have to pass, such as a hallway that must be used to move between rooms or to access where the tamper-evident storage is located. It should be plugged in so the battery doesn't die; fairly long cables are available for this purpose. </li>
<li>Set a countdown to turn Haven on before you leave the house. The Haven app will log everything locally on the Android device. As mentioned above, sending remote notifications is currently broken.</li>
<li>Check the Haven log when you get home. </li>
</ul>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>With the measures described above, any 'evil maid' would have to bypass:</p>
<ol>
<li>Physical intrusion detection, and</li>
<li>The tamper-evident storage, and</li>
<li>The tamper-evident glitter nail polish (for an attack that requires opening the laptop), or Heads/Auditor (for a software or firmware attack)</li>
</ol>
<p>These layers are all important, although they may seem redundant. The expertise and cost required to successfully execute the attack increases significantly with each layer, making it much less likely that an adversary will attempt it in the first place. The best practice is to <a href="https://www.anarsec.guide/posts/tails-best/#to-mitigate-against-physical-attacks">obtain a fresh device in such a way that it cannot be intercepted</a>, and then consistently implement all of these layers from the beginning. </p>
<h2 id="in-practice-3">In practice</h2>
<p>To summarize, take the following measures every time you leave the house with no one home for a significant amount of time: </p>
<ol>
<li>Put the turned-off devices into tamper-evident storage </li>
<li>Take the necessary photos </li>
<li>Activate Haven </li>
</ol>
<p>This may sound tedious, but it can be done in less than a minute if you leave unused devices in storage. When you get home: </p>
<ol>
<li>Start by checking the Haven log </li>
<li>Next, verify the tamper-evident storage with Blink Comparison</li>
</ol>
<p>Laptop screws can be verified when something suspicious happens. Neither Heads nor Auditor require much effort to use properly once set up; Auditor runs without interaction and Heads becomes part of your boot process. </p>
<h2 id="further-reading">Further Reading</h2>
<ul>
<li><a href="https://dys2p.com/en/2021-12-tamper-evident-protection.html">Random Mosaic — Detecting unauthorized physical access with beans, lentils and colored rice</a></li>
</ul>
<h2 id="appendix-cracking-safes">Appendix: Cracking Safes</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Safe-cracking#Magnet_risk">Rare-earth magnets</a> can unlock safes that use a <a href="https://www.youtube.com/watch?v=Y6cZrieFw-k">solenoid</a> as the locking device in an undetectable manner.</li>
<li><a href="https://en.wikipedia.org/wiki/Safe-cracking#Safe_bouncing">Safe bouncing</a> is when the locking mechanism can be moved sufficiently by <a href="https://mosandboo.com/how-to-open-a-safe-without-the-key-or-code/">banging or bouncing the safe</a> to open it in an undetectable manner. Safes that use a gear mechanism are less susceptible to mechanical attacks. </li>
<li>Many safe models have a "management reset code" (also known as a "try-out combination") — if this code is not changed from its default setting the safe can be unlocked in an undetectable manner.</li>
<li><a href="https://en.wikipedia.org/wiki/Safe-cracking#Spiking_the_lock">Spiking</a> is when the wires leading to the reset button, solenoid, or motor can be exposed and spiked with a battery. This should be possible to make tamper-evident, as it requires access to the wires.</li>
<li><a href="https://www.anarsec.guide/glossary#brute-force-attack">Brute force</a> attacks — trying all possible combinations — are possible if the adversary has time. Dialing mechanisms can be brute-forced with a <a href="https://learn.sparkfun.com/tutorials/building-a-safe-cracking-robot">computerized autodialer</a> that <a href="https://www.youtube.com/watch?v=vkk-2QEUvuk">doesn't need supervision</a>. Electronic keypads are less susceptible to brute force if they have a well-designed incremental lockout feature; for example, get it wrong 10 times and you're locked out for a few minutes, 5 more wrong codes and you're locked out for an hour, etc. </li>
<li>There are several tools that can automatically retrieve or reset the combination of an electronic lock, such as the Little Black Box and Phoenix. Tools like these are often connected to wires inside the lock that can be accessed without damaging the lock or container. This should be possible to make tamper-evident, as it requires access to the wires.</li>
<li>There are several <a href="https://en.wikipedia.org/wiki/Safe-cracking#Keypad-based_attacks">keypad-based attacks</a>, and some can be mitigated with proper operational security. </li>
</ul>

          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to build quickly (407 pts)]]></title>
            <link>https://learnhowtolearn.org/how-to-build-extremely-quickly/</link>
            <guid>41148517</guid>
            <pubDate>Sat, 03 Aug 2024 19:05:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://learnhowtolearn.org/how-to-build-extremely-quickly/">https://learnhowtolearn.org/how-to-build-extremely-quickly/</a>, See on <a href="https://news.ycombinator.com/item?id=41148517">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<div>
<figure><img decoding="async" width="800" height="800" src="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3.jpg" alt="" srcset="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3.jpg 800w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3-300x300.jpg 300w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3-150x150.jpg 150w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-3-768x768.jpg 768w" sizes="(max-width: 800px) 100vw, 800px"></figure></div>


<p><strong>Do “outline speedrunning”:</strong> <strong>Recursively <span>outline</span> an MVP, <span>speedrun</span> filling it in</strong>,<strong> and <span>only then</span> go back and perfect.</strong></p>







<p>This is a ~10x speed up over the ‘loading-bar’ style (more on that below)</p>







<p>Don’t just read this article and move on. Go out and do this for the very next thing you make so you can get in the habit of doing it.</p>







<p><em>(btw, here, speedrunning just means doing something as fast as possible)</em></p>







<h5>Outline speedrunning algorithm:</h5>



<p>1. Make an outline of the project</p>







<p>2. For each item in the outline, make an outline. Do this recursively until the items are small</p>







<p>3. Fill in each item as fast as possible</p>



<ul>
<li>You’ll get more momentum by speedrunning it, which feels great, and will make you even more productive</li>
</ul>



<ul>
<li><strong>DO NOT PERFECT AS YOU GO</strong>. This is a huge and common mistake.</li>
</ul>



<p>4. Finally, once completely done, go back and perfect</p>



<ul>
<li>Color the title text, figure out if buttons should have 5% or 6% border radius, etc</li>
</ul>



<ul>
<li>Since you’re done, you’ll be less stressed, have a much clearer mind, and design your project better</li>



<li><em>And hey, you’ll enjoy the whole process more, and end up making more things over the long run, causing you to learn/grow more</em></li>
</ul>







<h6>CRITICAL requirements for outline speedrunning:</h6>



<ul>
<li>outline recursively</li>



<li>speedrun</li>



<li><strong><span>DO NOT PERFECT ANYTHING UNTIL DONE</span></strong></li>
</ul>



<h5>Outlining is a fundamental of building</h5>



<p>Outline speedrunning may seem basic. That’s because it is. <em>Planning</em> is a fundamental of <em>doing</em>, and <em>outlining</em> is a fundamental of <em>planning</em>.</p>







<p><strong>Much of becoming really efficient is about getting extremely cracked at the fundamentals (many of which you probably mistakenly dismiss).</strong></p>







<p><em>This is recursive btw, because fundamentals typically have fundamentals.</em></p>



<figure><video autoplay="" controls="" loop="" muted="" src="https://learnhowtolearn.org/wp-content/uploads/2024/06/output-onlinegiftools.webm" playsinline=""></video><figcaption><em>its conceptual building blocks all the way </em>down</figcaption></figure>



<p>I knew about outlining since I was little but didn’t do it until I was 20. After I started it took time to get cracked at outlining and refine it into outline speedrunning.</p>







<p><strong>There is immense amounts of wisdom/utility/alpha in reevaluating any fundamentals that your mind dismisses as unimportant. Much improvement in any performance-based field comes from fixing these misevaluations.</strong></p>







<p>You may already do outline speedrunning. If you’re not, it’s a 10x speedup over the classic ‘loading bar’ style.</p>







<p><em>Generally, the best speedups come from<em> improving your algorithm</em>s, rather than ramming your head into the task harder</em>.</p>







<h4>Examples</h4>



<h5>Write large docs faster</h5>



<figure><video controls="" muted="" src="https://learnhowtolearn.org/wp-content/uploads/2024/06/output-1.webm" playsinline=""></video><figcaption><em>My attempt at speedrunning each method for a minute or so. left: loading-bar. right: outline speedrunning</em>.</figcaption></figure>



<h6><strong>Loading-bar writing:</strong></h6>



<p>Common mistake: ‘loading bar writing’ – starting at the beginning of the document and writing sentence by sentence, like a loading bar going through the document.</p>



<figure><video autoplay="" controls="" loop="" muted="" src="https://learnhowtolearn.org/wp-content/uploads/2024/06/loadingbar.webm" playsinline=""></video></figure>



<p>I wrote like this until I was ~20. It made me hate writing.</p>







<p>Now writing is easy and quick. My writing (and at the time, grades) improved substantially because I could allocate more time towards quality with a clearer, less stressed mind.</p>







<h6><strong>Outline speedrunning writing:</strong></h6>



<p>1 Get topic to write about</p>



<ul>
<li>(optional) brainstorm the general plot of the paper</li>
</ul>



<p>2 quickly write the outline (sections)</p>



<p>3 repeat 2 for each section recursively, until the lowest-level sections are small enough to not need outlines</p>



<p>4 speedrun (without caring about quality AT ALL) filling in each outline (starting at the lowest level) until the whole doc is filled out</p>



<p>5 Enjoy the feeling of being 90% done while you go back and perfect the doc, color the title text, add pictures, etc (the fun part!)</p>







<p>Do this to effortlessly improve both speed and quality of writing.</p>











<h4>Program faster</h4>



<p>Going from loading-bar to outline speedrunning significantly speeds up programming</p>







<h5><strong>Outline speedrunning</strong> for<strong> programming:</strong></h5>



<p>1 Figure out what the main purpose/function of your program is.</p>



<p>2 Break the program into parts grouped by functionality.</p>



<p>3 repeat steps 1-2 for each part, unless it is very small.</p>



<p>4 implement the components starting with the lowest-level</p>







<p><span>Example (simplified version of a data pipeline I built):</span></p>



<p>Idea: Data pipeline application</p>



<p>1 Main purpose: collect tons of data and analyze/store it</p>



<p>2 Breaking it down into components:</p>



<ul>
<li>data collecting component</li>



<li>data cleaning/formatting component</li>



<li>data analysis component</li>



<li>data storage component</li>
</ul>



<figure><img decoding="async" width="1024" height="647" src="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1024x647.png" alt="" srcset="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1024x647.png 1024w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-300x190.png 300w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-768x485.png 768w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image.png 1174w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>



<p>3 repeat step 2 for each part. Breaking down the data collecting component into subcomponents:</p>



<ul>
<li>Component: list of data collection methods (web scraping, simulation data, tool measurement data, etc)</li>



<li>Component to get user input for choice of data collection method</li>



<li>Component to execute chosen data collection methods</li>



<li>Component to send collected data to storage</li>
</ul>



<figure><img loading="lazy" decoding="async" width="915" height="604" src="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1.png" alt="" srcset="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1.png 915w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1-300x198.png 300w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-1-768x507.png 768w" sizes="(max-width: 915px) 100vw, 915px"></figure>



<p>3 repeat step 2 for each other component and subcomponent, unless they are small</p>



<figure><img loading="lazy" decoding="async" width="755" height="430" src="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-2.png" alt="" srcset="https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-2.png 755w, https://7vaf67.p3cdn1.secureserver.net/wp-content/uploads/2024/06/image-2-300x171.png 300w" sizes="(max-width: 755px) 100vw, 755px"></figure>







<p>This can be done on a whiteboard, drawn on paper, in your head (can be subpar) or outlined like an essay. The most efficient medium depends on your project. You’ll get a feel for what works best by just practicing this.</p>







<p><em>Build to learn</em></p>







<p><em><strong>[for more like this, follow me on X <a href="https://x.com/dnbt777">@dnbt777</a>]</strong></em></p>




		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Reverse engineering the 59-pound printer onboard the Space Shuttle (246 pts)]]></title>
            <link>http://www.righto.com/2024/08/space-shuttle-interim-teleprinter.html</link>
            <guid>41147643</guid>
            <pubDate>Sat, 03 Aug 2024 16:43:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.righto.com/2024/08/space-shuttle-interim-teleprinter.html">http://www.righto.com/2024/08/space-shuttle-interim-teleprinter.html</a>, See on <a href="https://news.ycombinator.com/item?id=41147643">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-771518350089426794" itemprop="description articleBody">
<p>The Space Shuttle contained a bulky printer so the astronauts could
receive procedures, mission plans, weather reports, crew activity plans, and other documents.
Needed for the first Shuttle launch in 1981, this printer was designed in just 7 months, built around an Army communications terminal.
Unlike modern printers, the Shuttle's printer contains a spinning metal drum with raised characters, allowing it to rapidly print a line at a time.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/teleprinter.jpg"><img alt="The Space Shuttle's Interim Teleprinter. The horizontal rails allowed it to be mounted in a Space Shuttle stowage locker." height="421" src="https://static.righto.com/images/shuttle-printer/teleprinter-w500.jpg" title="The Space Shuttle's Interim Teleprinter. The horizontal rails allowed it to be mounted in a Space Shuttle stowage locker." width="500"></a></p><p>The Space Shuttle's Interim Teleprinter. The horizontal rails allowed it to be mounted in a Space Shuttle stowage locker. Click this image (or any other) for a larger version.</p>
<p>This printer is known as the Space Shuttle Interim Teleprinter System.<span id="fnref:refs"><a href="#fn:refs">1</a></span>
As the name "Interim" suggests, this printer was intended as a stop-gap measure, operating for a few flights until a better printer was operational.
However, the teleprinter proved to be more reliable than its replacement, so it remained in use as a backup for over 50 flights, often printing thousands of lines per flight.
This didn't come cheap: with a Shuttle flight costing <a href="https://en.wikipedia.org/wiki/Criticism_of_the_Space_Shuttle_program">$27,000 per pound</a>, putting the 59-pound teleprinter in space cost over $1.5 million per flight.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/floating.jpg"><img alt="Pilot Overmyer reading a printout from the teleprinter, STS-5, November 16, 1982. From National Archives. The description says that this output is from the Text and Graphics System, but the yellow paper and the date show that this is the Interim Teleprinter." height="396" src="https://static.righto.com/images/shuttle-printer/floating-w600.jpg" title="Pilot Overmyer reading a printout from the teleprinter, STS-5, November 16, 1982. From National Archives. The description says that this output is from the Text and Graphics System, but the yellow paper and the date show that this is the Interim Teleprinter." width="600"></a></p><p>Pilot Overmyer reading a printout from the teleprinter, STS-5, November 16, 1982. From <a href="https://catalog.archives.gov/id/22483203">National Archives</a>. The description says that this output is from the Text and Graphics System, but the yellow paper and the date show that this is the Interim Teleprinter.</p>
<p>We obtained access to a Shuttle teleprinter (probably a development system that remained on the ground) and wanted to put it into operation.
I had to reverse engineer three of the boards inside the printer to determine the data format the printer accepted: serial data encoded into audio.
But after analyzing the printer and performing a lot of maintenance, we succeeded in getting the printer to print.
In this article, I'll describe the Shuttle's Interim Teleprinter, explain its circuitry and drum-based printing mechanism, and show it in operation.</p>
<h2>History of the Shuttle's Interim Teleprinter</h2>
<p>The motivation for the teleprinter goes back to the Apollo program. During Apollo missions, the only way to send information to the astronauts was by talking to them over the
radio and having the astronauts write down the data.
NASA decided that the Space Shuttle should include a mechanism to send text and images to the astronauts, a 78-pound, high-tech fax machine called the <a href="https://www.youtube.com/watch?v=JoIf3y73j6g">Uplink Text &amp; Graphics System</a> (TAGS).
A high-resolution grayscale image was sent to the Shuttle as a digital data stream.
Onboard the Shuttle, a squat CRT displayed the image one line at a time and a fiber-optic faceplate transferred each line to light-sensitive silver emulsion paper.
The paper was developed by passing it over a hot roller at 260ºF for 25 seconds, creating a permanent image.</p>
<p>The one flaw in this plan was that sending the digital image to the Shuttle required the Tracking and Data Relay Satellite System (TDRS), which due to delays wouldn't be ready until the sixth Shuttle flight.
(The TDRS was a space-based replacement for the worldwide network of ground stations that was used during Apollo.)
As a result, NASA decided just seven months before the first Shuttle launch that they needed an interim system "for transmission of real-time, flight-plan changes and other operational data to the crew."<span id="fnref:TUMMS"><a href="#fn:TUMMS">2</a></span></p>
<p>The Shuttle teleprinter is the result of this rushed effort to create a printer that could work over the existing audio channel rather than the digital TDRS satellite.
Due to the time pressure, the Shuttle teleprinter needed to be based on an off-the-shelf printer.
Thermal and electrostatic printers were rejected due to toxicity and flammability problems. (The Shuttle teleprinter used a roll of yellowish paper, which required a NASA waiver due to
its flammability, a concern ever since the Apollo-1 disaster).</p>
<p><a href="https://static.righto.com/images/shuttle-printer/anugc-74.png"><img alt="The AN/UGC-74 military communications terminal. This terminal was developed by the Army but also used by the Navy and Air Force. Image from the Operator's Manual, TM 11-5815-602-10." height="367" src="https://static.righto.com/images/shuttle-printer/anugc-74-w500.png" title="The AN/UGC-74 military communications terminal. This terminal was developed by the Army but also used by the Navy and Air Force. Image from the Operator's Manual, TM 11-5815-602-10." width="500"></a></p><p>The AN/UGC-74 military communications terminal. This terminal was developed by the Army but also used by the Navy and Air Force. Image from the Operator's Manual, TM 11-5815-602-10.</p>
<p>The decision was made to use a military communications terminal, the
the AN/UCG-74<span id="fnref:model"><a href="#fn:model">3</a></span> "<a href="https://books.google.com/books?id=mHZdEoKxLC4C&amp;newbks=1&amp;newbks_redir=0&amp;pg=PA577#v=onepage&amp;q=%22tactical%20teletype%22&amp;f=false">Tactical Teletype</a>".
The terminal's interfacing was very flexible, supporting serial data in either ASCII or Baudot format, with multiple configurations and baud rates (up to 1200 baud), using either a current-loop or voltage signals.
The military terminal supported two-way communication, so it had a keyboard.
Remarkably, the terminal also implemented a word processor, controlled by a Motorola 6800 microprocessor (ancestor of the famous MOS 6502). 
The word processor allowed messages to be composed offline, minimizing the radio transmission time, which was important in a hostile environment.
As will be seen, this 100-pound military system required many large changes to be usable on the Space Shuttle, most visibly removing the keyboard.</p>
<h2>The printing mechanism</h2>
<p>The teleprinter uses a spinning drum with raised characters, shown below.<span id="fnref:chain"><a href="#fn:chain">4</a></span>
To print a character, the printer fires a hammer, forcing the inked ribbon and paper against the
raised character on the drum.
The drum is 80 characters wide, matching the line length, and there are 80 corresponding hammers, one for each print position.
The drum has 64 printable characters, wrapped around each position of the drum.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/drum.jpg"><img alt="The printer's drum rotating drum has 64 raised characters in each column. The characters spiral around the drum and are in reverse order, minimizing the chance that a line will fire all the hammers near-simultaneously." height="256" src="https://static.righto.com/images/shuttle-printer/drum-w600.jpg" title="The printer's drum rotating drum has 64 raised characters in each column. The characters spiral around the drum and are in reverse order, minimizing the chance that a line will fire all the hammers near-simultaneously." width="600"></a></p><p>The printer's drum rotating drum has 64 raised characters in each column. The characters spiral around the drum and are in reverse order, minimizing the chance that a line will fire all the hammers near-simultaneously.</p>
<p>The printer prints a line at a time, not instantaneously, but during each revolution of the drum.
When the drum makes one complete revolution, each of the 64 characters passes by each print position once.
Printing requires precise timing of the hammers to strike the right character on the drum as it whizzes by.
The printer control circuitry triggers each hammer at the proper time, when the desired character on the drum is lined up with the hammer, producing the desired text.<span id="fnref:timing"><a href="#fn:timing">5</a></span></p>
<p>The character set is slightly different between the military printer and the Shuttle printer.
The military drum had 64 ASCII characters (upper-case letters only, numbers, and special characters).
The drum doesn't contain an explicit space character, since nothing is printed for a space. In its place, the drum has a diamond "◊", used as a special character to indicate a parity error or
other error.
The drum for the Shuttle teleprinter replaces 10 ASCII special characters with symbols that are more useful to the Shuttle, such as Greek letters for angles.
Specifically, the characters <code>;@[\]^!"#$</code> are replaced by <code>θ✓‾↑↓~αβΔϕ</code>.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/hammers.jpg"><img alt="With the teleprinter disassembled, the 20 hammer cards are visible at the front. Two hammer driver cards are to the right of the hammer cards." height="292" src="https://static.righto.com/images/shuttle-printer/hammers-w500.jpg" title="With the teleprinter disassembled, the 20 hammer cards are visible at the front. Two hammer driver cards are to the right of the hammer cards." width="500"></a></p><p>With the teleprinter disassembled, the 20 hammer cards are visible at the front. Two hammer driver cards are to the right of the hammer cards.</p>
<p>The video below shows a closeup of the hammers as they strike the paper to print text.
The text is the teleprinter's built-in test message: "THE LAZY YELLOW DOG WAS CAUGHT BY THE SLOW RED FOX AS HE LAY SLEEPING IN THE SUN".
This test message is based on the traditional <a href="https://en.wikipedia.org/wiki/The_quick_brown_fox_jumps_over_the_lazy_dog">quick brown fox...</a>, which is a pangram, containing all
26 letters, but
the teleprinter's test sentence is missing J, K, M, Q, and V.
However, the test message is exactly 80 characters long and replaces spaces with the diamond "◊", so it is effective for verifying that all 80 columns work.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/1SjtmePBZjo?si=w4dNr00-n_Mhd8Bk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2>The electronics</h2>
<p>The photo below shows the circuitry inside the teleprinter, looking down from above.
At the left are the three interface boards, custom boards that demodulate the incoming audio signal.
In front of the interface boards are large inductors to filter the incoming power. Hidden beneath them, a solid-state relay controls the power to the rest of the printer, implementing
the low-power standby mode.
In the middle, the blue board is the surprisingly complex switching power supply, mounted on a thick metal plate for cooling.
Normally, the large roll of paper is mounted above the power supply board.
At the right, four large circuit boards implement the main logic of the printer: a printer driver board, a communications board, a memory board, and the processor board.
The rotating drum is protected by the perforated black metal grill at the front.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/top-view.jpg"><img alt="Inside the Shuttle teleprinter, showing the electronics." height="387" src="https://static.righto.com/images/shuttle-printer/top-view-w600.jpg" title="Inside the Shuttle teleprinter, showing the electronics." width="600"></a></p><p>Inside the Shuttle teleprinter, showing the electronics.</p>
<h3>The demodulator boards</h3>
<p>The original military teleprinter received data as a serial bitstream.
However, on the Space Shuttle, data was encoded as frequencies on the audio link.
Three custom boards were constructed to demodulate the audio data so the rest of the printer could handle it.
These boards also performed Shuttle-specific tasks such as powering up the printer when a message comes in, and then returning the printer to
standby mode.
I reverse-engineered these boards to determine how they work and to determine the data encoding. (Schematics are in the footnotes.<span id="fnref:schematics"><a href="#fn:schematics">7</a></span>)
In this section, I'll discuss these three boards, which are on the left side of the printer.</p>
<p>To summarize, the serial bitstream is encoded with Frequency Shift Keying, with a 0 represented by 3600 Hz and a 1 represented by 7200 Hz.<span id="fnref:frequency"><a href="#fn:frequency">6</a></span> The serial data is
transmitted at 600 baud, even parity, one stop bit.
The demodulation process first converts the input audio to a digital signal by thresholding it. (That is, the input sine wave is converted to a square wave.)
The digital signal is autocorrelated to distinguish the 3600 Hz and 7200 Hz signals, recovering the underlying serial data.
This signal is passed to the printer's logic boards (part of the original military teleprinter), which convert the serial signal to ASCII bytes and prints them.</p>
<p>Signal processing starts with the "FSK input" board, shown below. First, it amplifies the input audio signal.
(The two large resistors provide a 600 Ω load for the audio input.)
Next, a 900 Hz high-pass filter eliminates low-frequency noise.
(The filter is implemented by a two-stage <a href="https://en.wikipedia.org/wiki/Sallen%E2%80%93Key_topology">Sallen-Key</a> topology.)</p>
<p><a href="https://static.righto.com/images/shuttle-printer/input-board.jpg"><img alt="The input board." height="419" src="https://static.righto.com/images/shuttle-printer/input-board-w500.jpg" title="The input board." width="500"></a></p><p>The input board.</p>
<p>The signal bounces from board to board, going to the 
"output FSK demod" board next. This board has a carrier-detect circuit that turns on the rest of the printer if it detects an input signal.
This allows the printer to sit idle until it receives a signal from Earth.
This board also applies the threshold to the signal to turn it into a digital waveform, which goes to the "control" board.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/output-board.jpg"><img alt="The output board." height="393" src="https://static.righto.com/images/shuttle-printer/output-board-w500.jpg" title="The output board." width="500"></a></p><p>The output board.</p>
<p>The output board also holds the 5-volt and 12-volt linear regulators that power the three boards; these are the metal-can ICs at the bottom of the board.
To reduce the load on the regulators, two large resistors drop the input voltage (28 volts) to a lower level
before it is regulated.</p>
<p>The control board holds the FSK decoder, an interesting circuit that converts the two FSK frequencies to binary by implementing a digital auto-correlator.
It uses a 64-bit shift register to delay the digital input by 139 µs.
The input and the delayed input are XOR'd together, generating a result that depends on the frequency.
A 7200 Hz signal repeats every 139 µs, so the input and the delayed input match, yielding 0 from the XOR.
However, a 3600 Hz square wave switches state every 139 µs, so the two XOR inputs will always differ, resulting in a 1 output.
Thus, the circuit cleanly distinguishes between a 3600 Hz input and a 7200 Hz input.
(The XOR output is opposite from the final value since it gets inverted later.)</p>
<p><a href="https://static.righto.com/images/shuttle-printer/control-board.jpg"><img alt="The control board." height="436" src="https://static.righto.com/images/shuttle-printer/control-board-w500.jpg" title="The control board." width="500"></a></p><p>The control board.</p>
<p>The digital demodulator avoids some of the problems of an analog FSK demodulator. It is not sensitive to signal levels, since the signal is converted to digital.
The digital demodulator is also not sensitive to harmonics, which can cause problems with analog demodulators.
Finally, it doesn't require the carefully-tuned filters of an analog circuit.</p>
<p>The demodulated signal passes from the control board back to the output board.
This board applies a 400 Hz low-pass filter and then a threshold to convert the signal back to binary.
If the input frequencies are not exact, the demodulator will produce the correct 0 or 1 value over most of the waveform, but there will be glitches at the edges.
The low-pass filter removes these glitches.
(You might be concerned that a 600-baud signal would be wiped out by a 400 Hz low-pass filter. However, the worst case signal (alternating 0's and 1's) would be 300 Hz
because it takes two bits to make one cycle, so the filter has plenty of margin.)
Next, the board blocks the signal unless a carrier is detected.
This ensures that random noise isn't demodulated and printed.
Finally, the serial binary signal leaves the custom Shuttle boards and goes to the teleprinter's communication board, part of the standard teleprinter.</p>
<p>I noticed two unusual things about these boards. First, they have some modifications: "bodge" wires and added components. Second, the boards are not conformal coated, which
is unusual for aerospace boards.
(The four logic cards, in comparison, are protected with conformal coating.)
My hypothesis is that these boards were development boards, early in the design process of the Shuttle teleprinter, so they were modified as the design changed.
The teleprinter is also marked "Not for flight", which supports this theory.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/thagard.jpg"><img alt="Mission Specialist Thagard getting output from the teleprinter. Flight STS-7, June 24, 1983. From NARA. Although the description says this is the Text &amp; Graphics System, it is clearly the Interim Teleprinter." height="401" src="https://static.righto.com/images/shuttle-printer/thagard-w500.jpg" title="Mission Specialist Thagard getting output from the teleprinter. Flight STS-7, June 24, 1983. From NARA. Although the description says this is the Text &amp; Graphics System, it is clearly the Interim Teleprinter." width="500"></a></p><p>Mission Specialist Thagard getting output from the teleprinter. Flight STS-7, June 24, 1983. From <a href="https://nara.getarchive.net/media/s07-08-381-sts-007-ms-thagard-waits-for-middeck-tags-teleprinter-to-printout-43ae4f">NARA</a>. Although the description says this is the Text &amp; Graphics System, it is clearly the Interim Teleprinter.</p>
<h2>The logic cards</h2>
<p>The military teleprinter contained four logic circuit cards: a CPU card, a memory card, a communications card, and a print control card, mounted at the right rear of the teleprinter.
These cards are used unchanged in the Shuttle teleprinter.</p>
<p>The circuitry is more complex than you might expect, with four large cards full of ICs. There are several reasons for this.
First, the cards use 1970s microprocessor technology, so it takes a lot of circuitry to do anything. In particular, many
simple 7400-series logic chips perform "glue" functions: decoding addresses, buffering data, latching signals, and so forth.
Moreover, a drum printer is inherently complicated, since 80 hammers must be driven at the right time based on the desired characters.
Third, the teleprinter is very flexible, supporting multiple signal levels and two character formats (ASCII and Baudot).
Most surprisingly, the teleprinter implements a word processor, allowing messages to be composed and edited offline. 
Of course, since the Shuttle's teleprinter is only used to receive data, and doesn't even have a keyboard, the word processor feature is entirely useless.</p>
<h3>The CPU card</h3>
<p>The CPU card holds the microprocessor that controls the teleprinter.
Its most important function is to convert a line of ASCII characters into print drum codes. These codes are stored in memory for use by the print control card.
The CPU also implements configuration and self-test functions.</p>
<p>The diagram below shows some of the main components.
The CPU card contains a Motorola 6800 CPU, 4 kilobytes of memory, and a ROM that holds its program code.<span id="fnref:block-diagram"><a href="#fn:block-diagram">8</a></span>
Inconveniently, all the IC part numbers are military numbers so it takes some investigation to determine what a part really is.
The MC6822 is a <a href="https://en.wikipedia.org/wiki/Peripheral_Interface_Adapter">Peripheral Interface Adapter</a>, a Motorola chip that provides two parallel I/O ports.
This chip is used on three of the cards to support a variety of I/O tasks. On the CPU card, the I/O ports
drive eight status lamps (most of which were removed for the Shuttle teleprinter) as well as internal status signals such as "paper low" or "keyboard present" and
the baud rate setting input.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/cpu-labeled.jpg"><img alt="The CPU card is centered around a Motorola 6800 microprocessor." height="517" src="https://static.righto.com/images/shuttle-printer/cpu-labeled-w700.jpg" title="The CPU card is centered around a Motorola 6800 microprocessor." width="700"></a></p><p>The CPU card is centered around a Motorola 6800 microprocessor.</p>
<h3>The print control card</h3>
<p>In a sense, the print control card is the heart of the printer, since it causes characters to be printed by firing hammers against the rotating drum.
As the drum goes through one revolution, all 64 characters will spin past each of the 80 print positions. By firing hammers at the exact time, the card prints a line of text.<span id="fnref:revolution"><a href="#fn:revolution">9</a></span>
In more detail, for each row on the drum, the printer card scans through the 80-character memory buffer using Direct Memory Access (DMA).
If the value in memory matches the current drum row number, the hammer is fired.
Note that the hammers don't fire simultaneously, but in sequence as memory is scanned.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/printer-diagram.jpg"><img alt="This diagram shows how the print control board interacts with the rest of the system. From the Maintenance manual, TM 11-5815-602-24." height="574" src="https://static.righto.com/images/shuttle-printer/printer-diagram-w450.jpg" title="This diagram shows how the print control board interacts with the rest of the system. From the Maintenance manual, TM 11-5815-602-24." width="450"></a></p><p>This diagram shows how the print control board interacts with the rest of the system. From the <a href="https://www.radionerds.com/images/e/e0/TM_11-5815-602-24.pdf">Maintenance manual</a>, TM 11-5815-602-24.</p>
<p>The diagram above shows the interaction between the drum, the print control card, and the 80 hammers.
The hammers are implemented on 20 print hammer cards, each with 4 hammers.
Electrically, the hammers are arranged in a matrix. One wire out of 20 (S1-S20) selects the hammer board, the group of four. Another wire selects one of four hammers (Col 1-4).
This approach simplifies the electronics, since 20 + 4 driver circuits and wires are used, rather than 80 (one for each column).
The print control card is synchronized to the drum by two photo-transistor sensors that detect the drum's position. One sensor is triggered on each row, while the other sensor
triggers once per revolution.</p>
<p>The print control card is shown below, with the main functional blocks labeled.
The large purple-and-gold chip is the PIA, the same I/O chip that appeared on the CPU card. It handles a variety of signals such as the self-test request, paper out, and the drum stop signal.
The mode control logic generates timing signals depending on the printer's mode.
The data compare logic increments the row counter on each drum pulse, and compares the row counter to the value read from memory.<span id="fnref:compare"><a href="#fn:compare">10</a></span>
The hammer driver circuitry on the left selects one of the 20 hammer cards, while the hammer driver circuitry on the right selects one of four hammers.
The ribbon circuitry raises and lowers the ribbon so the ribbon doesn't block the text when the printer is idle.
The line feed circuitry advances the paper for a line feed operation.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/print-labeled.jpg"><img alt="The print control card prints data by driving the hammers." height="376" src="https://static.righto.com/images/shuttle-printer/print-labeled-w600.jpg" title="The print control card prints data by driving the hammers." width="600"></a></p><p>The print control card prints data by driving the hammers.</p>
<p>The photo below shows one of the hammer cards, with four hammers.
Each hammer has an electromagnet that pulls a lever, rotating the hammer wheel, and causing the hammer to strike the paper.
(The hammers themselves are in the upper right of the photo.)
A screw adjustment controls the distance between each hammer and the paper, allowing precise adjustment of the timing.
(Marc had to carefully adjust all the hammers to make the print quality readable.)</p>
<p><a href="https://static.righto.com/images/shuttle-printer/hammer-driver.jpg"><img alt="One of the 20 Hammer driver cards. Photo courtesy of Marcel." height="482" src="https://static.righto.com/images/shuttle-printer/hammer-driver-w400.jpg" title="One of the 20 Hammer driver cards. Photo courtesy of Marcel." width="400"></a></p><p>One of the 20 Hammer driver cards. Photo courtesy of Marcel.</p>
<h3>The communication card</h3>
<p>The communication card handles the teleprinter's serial data input.
The key chip is the 8251A, a USART (Universal Synchronous/Asynchronous Receiver/Transmitter). This complex chip performs the conversion between the
serial data stream and the bytes that the processor uses.
(Note that the military teleprinter both sent and received serial data, while the Shuttle teleprinter only receives data.)
The chip has a few support chips, labeled "UART" in the diagram below.
The board has another Peripheral Interface Adapter chip, providing two I/O ports. These ports have functions such as reading the serial line settings
(ASCII vs. Baudot, odd or even parity, number of stop bits, and current loop levels).</p>
<p><a href="https://static.righto.com/images/shuttle-printer/comm-labeled.jpg"><img alt="The communication card converts the serial input to parallel byte data." height="428" src="https://static.righto.com/images/shuttle-printer/comm-labeled-w600.jpg" title="The communication card converts the serial input to parallel byte data." width="600"></a></p><p>The communication card converts the serial input to parallel byte data.</p>
<p>The board also has circuitry to generate the clock pulses for the selected baud rate.
The mode circuitry handles various phases of transmit/receive. The filter/demod circuitry
handles different input types, digitally filtering and demodulating as necessary.<span id="fnref:filter"><a href="#fn:filter">11</a></span></p>
<h3>The memory card</h3>
<p>The memory card supports the word-processing feature. It provides additional RAM to hold the text buffer as well as the ROM holding the software for editing.
The 16 DRAM chips on the left (MK4027) provide 8 KB of RAM while the two ROM chips on the right provide 8K of ROM.
The chips in the middle to the right of the resistors split the 12 address bits into row and column addresses as required by the RAM chips. The address signals go through the numerous 24 Ω resistors in the middle; I don't know why.
According to the manual, the printer operates fine without this card, except without the word processor. Since the word processor was irrelevant to the Shuttle, I
wonder why this card wasn't removed to reduce weight.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/memory-board.jpg"><img alt="The memory card has additional RAM and ROM to support the word processing feature." height="377" src="https://static.righto.com/images/shuttle-printer/memory-board-w600.jpg" title="The memory card has additional RAM and ROM to support the word processing feature." width="600"></a></p><p>The memory card has additional RAM and ROM to support the word processing feature.</p>
<h2>The power supply</h2>
<p>The power supply board (shown earlier) implements separate power supplies for different parts of the printer.<span id="fnref:power-supply"><a href="#fn:power-supply">12</a></span>
The supplies are implemented as switching power supplies, which were not as common at the time as now.
The microprocessor supply provides +5V, +12V, and -5V, voltages required by memory chips in the 1970s.
A separate switching power supply provides +5V, -8.6V, and +8.6V for the keyboard, dustcover, and interface module, components that were removed for the Shuttle teleprinter.
Another supply powers the printer's status lamps.</p>
<p>The drum motor supply is important because its voltage is regulated to control the rotational speed of the drum.
A sensor on the drum provides a feedback pulse for each row on the drum.  (I think the drum speed is 868 RPM.)
These pulses control the drum motor's switching supply.
If the drum spins too slowly, the voltage is increased, and similarly if it spins too fast.</p>
<p>The hammers have an unusual constant-current power supply.
When the printer is active, this power supply generates +18 V.
However, the power supply is designed to use a constant current of 600 mA regardless of the hammer activity. A capacitor provides a reservoir of power that is filled by the constant current. If the hammers are using less current, the excess current is bled off through a resistor.
The purpose of this is "to mask printing intelligence during periods of message traffic."
In other words, if you used a teleprinter in the embassy in Moscow, for instance, spies could monitor power transients to see when hammers are firing, and perhaps figure out what is
being printed.
By keeping the current constant, this source of intelligence is blocked.
Of course, this feature is useless on the Space Shuttle and only wastes power.</p>
<p>The military teleprinter accepted multiple input voltages: 22-30 VDC, 115 VAC, or 230 VAC, along with a 12 VDC battery backup.
The transformers and diodes to support these voltages were part of the interface module that was removed for the Shuttle teleprinter.
Instead, the Shuttle teleprinter is powered by 28 VDC.</p>
<h2>Mechanical changes</h2>
<p>The military teleprinter underwent significant mechanical changes to make it suitable for the Shuttle.
These changes reduced its weight from 100 pounds to 59 pounds.
The most visible change to the printer is the removal of the keyboard.
The entire front section of the printer was replaced, removing the controls that were not needed in the Shuttle.<span id="fnref:changes"><a href="#fn:changes">13</a></span>
The rugged frame of the original printer was replaced with a lighter-weight (but still substantial) frame. Horizontal rails were added to the frame to support the printer in
the Shuttle locker.</p>
<p>The photo below shows the front of the Shuttle teleprinter.
While the military teleprinter had numerous lights and switches on the front, the Shuttle teleprinter has just two lights and four switches.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/front.jpg"><img alt="Front view of the Shuttle teleprinter. The bar across the middle holds a paper cutter for removing the output." height="349" src="https://static.righto.com/images/shuttle-printer/front-w600.jpg" title="Front view of the Shuttle teleprinter. The bar across the middle holds a paper cutter for removing the output." width="600"></a></p><p>Front view of the Shuttle teleprinter. The bar across the middle holds a paper cutter for removing the output.</p>
<p>NASA was concerned that the temperature of the teleprinter could become hazardous to the astronauts.
To mitigate this danger, the teleprinter had a large heat-sensitive warning sticker.
The yellow sticker on the left of the teleprinter changes color and displays an image if it heats up: it shows a <a href="https://amzn.to/3WtpqIF">bandaged hand</a> and the word "HOT".
Above it is an "Omegalabel" temperature monitoring sticker that shows the highest temperature the device reached.
There are more of these stickers inside the teleprinter on various motors.</p>
<h2>The Interim Teleprinter inside the Space Shuttle</h2>
<p>The teleprinter was too large to be mounted on the flight deck, so it was mounted in a storage locker on the middeck, one level lower.
The photo below shows the location of the locker that held the teleprinter (although the teleprinter was not present in this photo), looking backward (aft) toward the airlock.
The locker is denoted MA9F, indicating Mid-deck Aft, position 9F (<a href="https://ntrs.nasa.gov/api/citations/19850018529/downloads/19850018529.pdf">details</a>), in the back on the right
side of the Shuttle.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/ma9fa.jpg"><img alt="This photo shows the locker that held the teleprinter. Photo by DMolybdenum, panorama viewed on renderstuff." height="338" src="https://static.righto.com/images/shuttle-printer/ma9fa-w500.jpg" title="This photo shows the locker that held the teleprinter. Photo by DMolybdenum, panorama viewed on renderstuff." width="500"></a></p><p>This photo shows the locker that held the teleprinter. Photo by <a href="https://commons.wikimedia.org/wiki/File:Space_Shuttle_Mid-Deck_area.png">DMolybdenum</a>, panorama viewed on <a href="https://renderstuff.com/tools/360-panorama-web-viewer/">renderstuff</a>.</p>
<p>The teleprinter was noisy because of its impact printing; even with it in a locker, the sound outside was 69.5 dB. The solution was to soundproof the locker with acoustic insulation.
Various insulating materials were tested until one was found that passed the toxicity requirements. Another flammability waiver was required for the insulation.</p>
<p>Putting the teleprinter in an insulated locker without cooling caused another problem: overheating. The military teleprinter used 34 watts even while idle, which would cause the
printer to become dangerously hot after just 6 orbits.
The printer was redesigned to support a standby mode that used just 1 watt. When a signal from Earth was detected, the printer would power up while in use, and then return to
standby mode.
A circuit was added to send a tone back to Earth when the printer was activated, reassuring Mission Control that the printer had switched out of standby mode.
These circuits were on the three custom Shuttle boards described earlier.</p>
<p>Putting the teleprinter in a locker made cabling difficult.
The solution was a panel on the locker door with connectors for power and audio. 
The panel has a power switch and light as well as a light to indicate that a message has been received.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/teleprinter-panel.jpg"><img alt="The panel on the outside of the locker, used for connection to the teleprinter. From distantsuns, NASA Space Flight forum." height="333" src="https://static.righto.com/images/shuttle-printer/teleprinter-panel-w250.jpg" title="The panel on the outside of the locker, used for connection to the teleprinter. From distantsuns, NASA Space Flight forum." width="250"></a></p><p>The panel on the outside of the locker, used for connection to the teleprinter. From <a href="https://forum.nasaspaceflight.com/index.php?topic=58114.0">distantsuns</a>, NASA Space Flight forum.</p>
<p>The photo below shows the teleprinter locker with the connection panel on the far left. Note the cables attached to the connectors.
These cables went across the back of the Shuttle to the left side, where they went up to the flight deck;
the cable routing was performed before launch.<span id="fnref:cables"><a href="#fn:cables">14</a></span>
For this flight, the neighboring locker MA16F held 3300 <a href="https://airandspace.si.edu/collection-objects/bee-enclosure-module-sts-41-c/nasm_A19880031000">honeybees</a> for a student experiment.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/vanHoften.jpg"><img alt="The teleprinter in middeck locker MA9F on flight STS-41C.  The hands belong to mission specialist van Hoften.  From National Archives; the description says the photo is from 1995 and shows the Thermal Impulse Printer system, but both are wrong. (STS-41C was in April, 1984.)" height="351" src="https://static.righto.com/images/shuttle-printer/vanHoften-w500.jpg" title="The teleprinter in middeck locker MA9F on flight STS-41C.  The hands belong to mission specialist van Hoften.  From National Archives; the description says the photo is from 1995 and shows the Thermal Impulse Printer system, but both are wrong. (STS-41C was in April, 1984.)" width="500"></a></p><p>The teleprinter in middeck locker MA9F on flight STS-41C.  The hands belong to mission specialist van Hoften.  From <a href="https://catalog.archives.gov/id/22604200">National Archives</a>; the description says the photo is from 1995 and shows the Thermal Impulse Printer system, but both are wrong. (STS-41C was in April, 1984.)</p>
<p>The teleprinter cables connect to the shuttle at panel A15 on the
aft bulkhead of the flight deck on the left side of the Shuttle. In other words, if you sat in the Shuttle Commander's seat in the cockpit and turned around,
this is what you would see.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/aft-connections.jpg"><img alt="The connections for the teleprinter in the flight deck. This photo shows Atlantis in the Kennedy Space Center visitor complex. In use, the Shuttle was much more cluttered." height="470" src="https://static.righto.com/images/shuttle-printer/aft-connections-w500.jpg" title="The connections for the teleprinter in the flight deck. This photo shows Atlantis in the Kennedy Space Center visitor complex. In use, the Shuttle was much more cluttered." width="500"></a></p><p>The connections for the teleprinter in the flight deck. This photo shows Atlantis in the Kennedy Space Center visitor complex. In use, the Shuttle was much more cluttered.</p>
<p>The audio cable from the teleprinter went to the Payload Specialist communication connection on panel A15, while the power cable went to the DC power connection right below.
During launch, this audio connection was needed for crew communication, so the teleprinter was plugged in after launch and the audio settings were reconfigured on panel L9.
A cue card was placed above panel L9 with instructions on the teleprinter. <!-- See Shuttle Crew Operations Manual p 3.2-2 --></p>
<h2>The teleprinter's replacements</h2>
<p>The Shuttle teleprinter was supposed to be used for a short time until the Uplink Text and Graphics System (TAGS) entered service, but things didn't work out that way.
TAGS, described earlier, was the fax-like system that could receive grayscale images, but it depended on the TDRS satellites with their support for digital data.
The first TDRS satellite was launched by the sixth shuttle flight, STS-6 (1983).
This allowed the use of TAGS on STS-7, but the printer promptly <a href="https://forum.nasaspaceflight.com/index.php?topic=35731.440">jammed</a>.<span id="fnref:tags"><a href="#fn:tags">15</a></span>
TAGS had constant problems with jamming;
on <a href="https://gandalfddi.z19.web.core.windows.net/Shuttle/JSC-19413%20-%20Shuttle%20flight%20data%20and%20in-flight%20anomaly%20list.%20STS-1-STS-50,%20STS-52-STS-56%20RevT%2019960001128.pdf#page=468">STS-35</a>, the printer jammed and then the unjamming tool broke.
Due to the unreliability of the TAGS, the Interim Teleprinter was kept in service as a backup device.
TAGS was mounted on a dual cold plate in avionics bay 3 of the crew compartment middeck (<a href="https://historycollection.jsc.nasa.gov/JSCHistoryPortal/history/shuttle_pk/mrk/FLIGHT_033-STS-032_MRK.pdf">details</a>), on the other side of the airlock from the teleprinter.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/tags.jpg"><img alt="The Uplink Text and Graphics System, serial number 2. Photo from Smithsonian National Air and Space Museum." height="477" src="https://static.righto.com/images/shuttle-printer/tags-w350.jpg" title="The Uplink Text and Graphics System, serial number 2. Photo from Smithsonian National Air and Space Museum." width="350"></a></p>
<p>After a decade, another printer, the <a href="https://ntrs.nasa.gov/api/citations/20110015565/downloads/20110015565.pdf#page=15">Thermal Impulse Printer System</a> (TIPS) was put into service,
probably on flight STS-56 in 1993.
Once TIPS proved its reliability, it <a href="https://ntrs.nasa.gov/api/citations/19940023718/downloads/19940023718.pdf#page=7">replaced</a> both the teleprinter and the
Text and Graphics System (TAGS).
The TIPS printer was installed in mid-deck locker MF28E; the F indicates the locker was on the forward wall, not the aft wall that held the Interim Teleprinter.
As a backup for the TIPS, the Shuttle flew with a second TIPS.</p>
<!-- Also https://catalog.archives.gov/id/23066389 -->

<p><a href="https://static.righto.com/images/shuttle-printer/tips.jpg"><img alt="The Thermal Impulse Printer System (TIPS) on flight STS-58. From National Archives. The description says that this device is the teleprinter but it is TIPS." height="330" src="https://static.righto.com/images/shuttle-printer/tips-w500.jpg" title="The Thermal Impulse Printer System (TIPS) on flight STS-58. From National Archives. The description says that this device is the teleprinter but it is TIPS." width="500"></a></p><p>The Thermal Impulse Printer System (TIPS) on flight STS-58. From <a href="https://catalog.archives.gov/id/23292712">National Archives</a>. The description says that this device is the teleprinter but it is TIPS.</p>
<p>One <a href="https://books.google.com/books?id=AALqAAAAMAAJ&amp;newbks=1&amp;newbks_redir=0&amp;pg=PA97#v=onepage&amp;q&amp;f=false">motivation</a>
behind the TIPS thermal printer was NASA's desire to use more commercial-off-the-shelf (COTS) equipment instead of expensive custom equipment.
The TIPS printer is the Raytheon TDU-850 printer (below), a commercial product that sold for <a href="https://archive.org/details/electronics-1987_04_02/page/117/mode/1up">$4950</a>. A custom communication interface board inside the printer provided the interface
between the printer and the Shuttle's S-Band and Ku-Band communications systems.
This interface also allowed astronauts to use the TIPS as a printer for an onboard personal computer.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/tdu-850.jpg"><img alt="The Raytheon TDU-850 printer (Thermal Display Unit). From EDN, Mar 17, 1988, p.251." height="276" src="https://static.righto.com/images/shuttle-printer/tdu-850-w450.jpg" title="The Raytheon TDU-850 printer (Thermal Display Unit). From EDN, Mar 17, 1988, p.251." width="450"></a></p><p>The Raytheon TDU-850 printer (Thermal Display Unit). From <a href="https://archive.org/details/edn-1988_03_17/page/251/mode/1up">EDN</a>, Mar 17, 1988, p.251.</p>
<!-- TDU-850 specs http://linux.geodatapub.com/shipwebpages/survey%20gear/Sub-Bottom%20-%20Chirp,%20Boomer/Edgetech%20Discover%204.9/Latest%203200%20&%203300%20Manuals/Latest%203200%20&%203300%20Manuals/3200-SX%20Sub-Bottom%20Profiling%20System%20User's%20Manual%20(lo%20res).pdf -->

<p>The photo below shows the TIPS printer in use, printing a long stream of output that Eileen Collins is reading. Collins was the first woman to pilot the Space Shuttle; she
flew on the Shuttle four times, twice as pilot and twice as commander.</p>
<p><a href="https://static.righto.com/images/shuttle-printer/collins.jpg"><img alt="Pilot Collins reading output from the TIPS printer, the gray box on the right. This is flight STS-84, Atlantis. Photo from National Archives." height="341" src="https://static.righto.com/images/shuttle-printer/collins-w500.jpg" title="Pilot Collins reading output from the TIPS printer, the gray box on the right. This is flight STS-84, Atlantis. Photo from National Archives." width="500"></a></p><p>Pilot Collins reading output from the TIPS printer, the gray box on the right. This is flight STS-84, Atlantis. Photo from <a href="https://catalog.archives.gov/id/23130737">National Archives</a>.</p>
<!-- TIPS https://archive.org/details/NASA_NTRS_Archive_20110015565/page/n14/mode/1up?q=%22thermal+impulse+printer+system%22 -->

<h2>The teleprinter, operational</h2>
<p>We succeeded in making the Shuttle teleprinter operational.
The printer had many mechanical problems, mainly because the rubber rollers had turned to liquid and gummed up the mechanism.
Marc disassembled the printer, carefully cleaned the mechanism, and realigned everything.
I won't discuss the restoration process here since there will be a video on <a href="https://www.youtube.com/CuriousMarc">CuriousMarc's channel</a>.
We were able to send FSK-modulated data to the printer and it was printed successfully, as shown below.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/EDeL15amsus?si=XoMS5TzSeTItz4sl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<h2>Conclusions</h2>
<p>At first, I thought that the Shuttle's Interim Teleprinter was a terrible design. It's absurdly heavy and was in danger of overheating.
Although the design started with an existing product, much of it required redesign: the front section, the new drum, the interface, and even the frame.
The design inherited features it couldn't use, such as the built-in word processor. And the constant-current feature was pointless for the Shuttle and just wasted power.</p>
<p>When I learned that the design had to be completed in just seven months, my opinion of the teleprinter improved. Moreover, the design had many constraints, such as toxicity and
flammability restrictions, that limited the potential approaches.</p>
<p>In the end, the teleprinter was used on over 50 flights, acting as a reliable backup to the somewhat flaky Text and Graphics System (TAGS).<span id="fnref:problems"><a href="#fn:problems">16</a></span>
Despite its name, the Interim Teleprinter turned out to be a long-lasting solution, not interim at all.
So I have to conclude that the teleprinter was a good design, working much better and much longer than intended.<span id="fnref:interim"><a href="#fn:interim">17</a></span></p>
<p>In any case, the Interim Teleprinter is an interesting piece of hardware and I hope you enjoyed this article.
Follow me on
Mastodon as <a href="https://oldbytes.space/@kenshirriff">@<span data-cfemail="c1aaa4afb2a9a8b3b3a8a7a781aeada5a3b8b5a4b2efb2b1a0a2a4">[email&nbsp;protected]</span></a>
or <a href="http://www.righto.com/feeds/posts/default">RSS</a>.
Thanks to Marcel for providing the printer. Restoration performed with CuriousMarc, Eric Schlapefer, and Mike Stewart.</p>
<h2>Notes and references</h2>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Boeing's Starliner proves better at torching cash than reaching orbit (153 pts)]]></title>
            <link>https://www.theregister.com/2024/08/02/boeing_starliner_losses/</link>
            <guid>41147545</guid>
            <pubDate>Sat, 03 Aug 2024 16:28:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2024/08/02/boeing_starliner_losses/">https://www.theregister.com/2024/08/02/boeing_starliner_losses/</a>, See on <a href="https://news.ycombinator.com/item?id=41147545">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>Lurking in Boeing's woeful Q2 financials is an admission that while its Starliner spacecraft might be struggling when it comes to burning fuel, it has no problem whatsoever setting fire to dollar bills.</p>
<p>The Calamity Capsule is currently attached to the International Space Station (ISS) while engineers scrutinize test results and finalize procedures for bringing the Boeing spacecraft – and its two crew members – back to Earth.</p>
<p>The word "calamity" might equally apply to the impact of the project on Boeing's <a target="_blank" href="https://www.theregister.com/2024/07/31/boeing_q2_2024/">finances</a>. The troubled aerospace titan's <a target="_blank" rel="nofollow" href="https://www.sec.gov/ix?doc=/Archives/edgar/data/0000012927/000001292724000055/ba-20240630.htm">filing</a> with the US Securities and Exchange Commission (SEC) revealed it would be increasing its "reach-forward loss on the [Starliner] program" by another $125 million.</p>

    

<p>The <a target="_blank" href="https://www.theregister.com/2022/10/27/starliner_losses_closing_in_on/">losses</a> incurred by Boeing thanks to Starliner have comfortably breezed past $1 billion, and will likely surpass $1.6 billion before long. "Risk remains that we may record additional losses in future periods," Boeing observed.</p>

        


        

<p>It is now almost ten years since NASA handed Boeing a <a target="_blank" href="https://www.theregister.com/2015/05/29/nasa_hands_boeing_contract_for_first_commercial_crew_mission_to_iss/">contract</a> to develop a vehicle to transport crew to and from the ISS. John Mulholland, then Boeing VP and Program Manager for Commercial Crew and now Boeing's Program Manager for the ISS, said: "We're on track to fly in 2017, and this critical milestone moves us another step closer in fully maturing the CST-100 design."</p>
<ul>

<li><a href="https://www.theregister.com/2024/07/31/boeing_q2_2024/">Boeing's Q2 nosedive buoyed by appointment of new CEO</a></li>

<li><a href="https://www.theregister.com/2024/07/29/nasa_approves_crew_9_launch/">NASA gives Falcon 9 thumbs-up to launch Crew-9</a></li>

<li><a href="https://www.theregister.com/2024/07/26/starliner_stay_onboard_iss/">Boeing Starliner crew get their ISS sleepover extended</a></li>

<li><a href="https://www.theregister.com/2024/07/11/boeings_starliner/">Boeing's Starliner set for extended stay at the ISS as engineers on Earth try to recreate thruster issues</a></li>
</ul>
<p>After a <a target="_blank" href="https://www.theregister.com/2019/12/20/boeing_starliner_failure/">failed first attempt</a> to reach the ISS, Boeing repeated the non-crewed test flight "<a target="_blank" rel="nofollow" href="https://boeing.mediaroom.com/2020-04-06-Boeing-Statement-on-Starliners-Next-Flight">at no cost to the taxpayer</a>." Despite that second unmanned try at reaching the ISS being successful, the Calamity Capsule was subject to yet more delays before finally getting off the ground in June with two test pilots onboard for a minimum mission duration of eight days. Destination: The space station, and then home.</p>
<p>Almost two months later, the spacecraft and its human duo remain docked to the ISS. Starliner can't get back to Earth within NASA's safety parameters, due to thruster issues and gas leaks. It is cleared for an emergency return, an option American officials aren't willing to take right now.</p>
<p>NASA and Boeing have yet to set a date for the spacecraft's return. In an update issued on August 1, NASA <a target="_blank" rel="nofollow" href="https://blogs.nasa.gov/boeing-crew-flight-test/2024/08/01/nasa-boeing-continue-data-analysis-for-crew-flight-test-evaluation/">noted</a> that the planning for the spacecraft's return was "expected to continue into next week." This includes finalizing undocking procedures and "operational mitigations that could be used in flight, if needed."</p>

        

<p>In its own <a target="_blank" rel="nofollow" href="https://starlinerupdates.com/starliner-return-to-earth-preps-underway/">update</a>, Boeing reported that return-to-Earth preparations were under way, with teams working through simulations and the ISS crew inspecting the exterior of Starliner using the outpost's Canadarm.</p>
<p>Meanwhile, a NASA spokesperson <a target="_blank" rel="nofollow" href="https://arstechnica.com/space/2024/08/yes-nasa-really-could-bring-starliners-astronauts-back-on-crew-dragon/">told Ars</a> the US agency is "evaluating all options." It's thought those possible options include using a SpaceX capsule to do what Starliner right now can't – bring back its pair of pilots.</p>
<p>The next flight of the Starliner is not expected until August 2025, so it seems likely that Boeing's balance sheet will continue to bleed red in the "contracts we wish we'd never signed" column for a while longer. ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Game Informer shutting down after 33 years (135 pts)]]></title>
            <link>https://www.theverge.com/2024/8/2/24212016/game-informer-shutting-down-layoffs-gamestop</link>
            <guid>41147317</guid>
            <pubDate>Sat, 03 Aug 2024 15:55:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theverge.com/2024/8/2/24212016/game-informer-shutting-down-layoffs-gamestop">https://www.theverge.com/2024/8/2/24212016/game-informer-shutting-down-layoffs-gamestop</a>, See on <a href="https://news.ycombinator.com/item?id=41147317">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article id="content"><div><div><div><h2>Game Informer is shutting down</h2><p><span><span> / </span><h2>After 33 years, one of the most prominent — and last remaining — video game magazines will no longer be published. Its staff has reportedly been laid off.</h2></span></p></div><div><p><span>By</span> <span><span></span> <span><a href="https://www.theverge.com/authors/jay-peters">Jay Peters</a></span><span>, <span>a news editor who writes about technology, video games, and virtual worlds. He’s submitted several accepted emoji proposals to the Unicode Consortium.</span></span></span></p><p><time datetime="2024-08-02T16:29:30.604Z"> <!-- -->Aug 2, 2024, 4:29 PM UTC</time></p><div><h2>Share this story</h2></div></div></div><div><figure><span><span></span><img alt="A collage of Game Informer covers." sizes="(max-width: 768px) calc(100vw - 100px), (max-width: 1180px) 700px, 600px" srcset="https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/16x11/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 16w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/32x21/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 32w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/48x32/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 48w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/64x43/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 64w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/96x64/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 96w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/128x85/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 128w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/256x171/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 256w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/376x251/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 376w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/384x256/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 384w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/415x277/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 415w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/480x320/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 480w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/540x360/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 540w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/640x427/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 640w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/750x500/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 750w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/828x552/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 828w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/1080x720/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 1080w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/1200x800/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 1200w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/1440x960/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 1440w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/1920x1280/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 1920w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/2048x1365/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 2048w, https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/2400x1600/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg 2400w" src="https://duet-cdn.vox-cdn.com/thumbor/0x0:1080x1080/2400x1600/filters:focal(540x540:541x541):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25557085/GT_N8lOW4AIrE_C.jpeg" decoding="async" data-nimg="responsive"></span><p><cite>Image: Game Informer</cite></p></figure></div></div><div><div><p><em>Game Informer</em>, one of the last remaining gaming magazines,<em> </em>is shutting down after 33 years, the GameStop-owned publication <a href="https://x.com/gameinformer/status/1819399257071214854">announced on Friday</a>. The magazine’s entire staff is being laid off, <a href="https://kotaku.com/game-informer-gamestop-meme-stock-gme-last-issue-1851611973"><em>Kotaku</em> reports</a>.</p><p>In its statement posted to X, the publication didn’t give a reason for the shutdown. GameStop didn’t immediately reply to a request for comment. Last year, GameStop CEO and chairman Ryan Cohen told staff that “every expense at the company must be scrutinized under a microscope and all waste eliminated,” according to <a href="https://kotaku.com/gamestop-meme-stock-gme-ryan-cohen-ceo-email-layoffs-1850884730">an email obtained by <em>Kotaku</em></a>. </p><p>In March, <em>Game Informer</em> introduced out a way to <a href="https://www.gamespot.com/articles/game-informer-now-offering-standalone-subscriptions/1100-6522173/">subscribe to the magazine directly</a> — previously, you could only get the magazine by buying issues on their own or through a GameStop Pro subscription. “Hard times, layoffs, cancellations, and closures have impacted thousands of game developers and publishers, as well as other outlets like us that celebrate games,” editor-in-chief Matt Miller wrote <em>Game Informer’s</em> blog post about that announcement. (After we first published this article, the link to the post directed to <em>Game Informer’s</em> shutdown message.) “We haven’t been immune to that hardship.”</p><p>Here is the full shutdown statement from <em>Game Informer</em>’s X account and <em>Game Informer</em>’s <a href="https://subscription.gameinformer.com/">subscription page</a>:</p><div><blockquote><p><strong>The Final Level: Farewell from Game Informer</strong></p><p>After 33 thrilling years of bringing you the latest news, reviews, and insights from the ever-evolving world of gaming, it is with a heavy heart that we announce the closure of Game Informer. </p><p>From the early days of pixelated adventures to today’s immersive virtual realms, we’ve been honored to share this incredible journey with you, our loyal readers. While our presses may stop, the passion for gaming that we’ve cultivated together will continue to live on. </p><p>Thank you for being part of our epic quest, and may your own gaming adventures never end.</p></blockquote></div><p><em><strong>Update, August 2nd</strong>: A post from </em>Game Informer’s<em> editor-in-chief about its subscription offering is no longer viewable.</em></p></div><div><p>Most Popular</p><p>Most Popular</p><ol><li><a href="https://www.theverge.com/2024/8/2/24212078/google-gemini-olympics-ad-backlash"><h2>Google pulls Gemini AI ad from Olympics after backlash</h2></a><hr></li><li><a href="https://www.theverge.com/2024/8/1/24210656/intel-is-laying-off-over-10000-employees-and-will-cut-10-billion-in-costs"><h2>Intel is laying off over 15,000 employees and will stop ‘non-essential work’</h2></a><hr></li><li><a href="https://www.theverge.com/2024/8/2/24211397/google-pixel-8-pro-ue-wonderboom-4-bluetooth-speaker-deal-sale"><h2>The Pixel 8 Pro has hit an all-time low ahead of Google’s next hardware event</h2></a><hr></li><li><a href="https://www.theverge.com/2024/8/2/24212298/mrbeast-beast-games-crowdstrike"><h2>MrBeast blames terrible Beast Games conditions on the CrowdStrike outage</h2></a><hr></li><li><a href="https://www.theverge.com/2024/8/2/24212160/tesla-evject-lawsuit-escape-connector-dangerous-hot"><h2>Tesla&nbsp;sues maker of ‘highly unsafe’ breakaway EV charging adapters</h2></a><hr></li></ol></div></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Clang vs. Clang (181 pts)]]></title>
            <link>https://blog.cr.yp.to/20240803-clang.html</link>
            <guid>41146860</guid>
            <pubDate>Sat, 03 Aug 2024 14:45:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.cr.yp.to/20240803-clang.html">https://blog.cr.yp.to/20240803-clang.html</a>, See on <a href="https://news.ycombinator.com/item?id=41146860">Hacker News</a></p>
<div id="readability-page-1" class="page">
<h2>The cr.yp.to <a href="https://blog.cr.yp.to/index.html" accesskey="i">blog</a></h2>
<hr>
<div>

<details><summary>Table of contents (Access-I for index page)</summary>
<table>
<tbody><tr><td><b>2024.08.03: Clang vs. Clang:</b> You're making Clang angry. You wouldn't like Clang when it's angry. #compilers #optimization #bugs #timing #security #codescans</td></tr>
<tr><td><a href="https://blog.cr.yp.to/20240612-bibkeys.html"><b>2024.06.12: Bibliography keys:</b></a> <span>It's as easy as [1], [2], [3]. #bibliographies #citations #bibtex #votemanipulation #paperwriting</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20240102-hybrid.html"><b>2024.01.02: Double encryption:</b></a> <span>Analyzing the NSA/GCHQ arguments against hybrids. #nsa #quantification #risks #complexity #costs</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20231125-kyber.html"><b>2023.11.25: Another way to botch the security analysis of Kyber-512:</b></a> <span>Responding to a recent blog post. #nist #uncertainty #errorbars #quantification</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20231023-clumping.html"><b>2023.10.23: Reducing "gate" counts for Kyber-512:</b></a> <span>Two algorithm analyses, from first principles, contradicting NIST's calculation. #xor #popcount #gates #memory #clumping</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20231003-countcorrectly.html"><b>2023.10.03: The inability to count correctly:</b></a> <span>Debunking NIST's calculation of the Kyber-512 security level. #nist #addition #multiplication #ntru #kyber #fiasco</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20230609-turboboost.html"><b>2023.06.09: Turbo Boost:</b></a> <span>How to perpetuate security problems. #overclocking #performancehype #power #timing #hertzbleed #riskmanagement #environment</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20220805-nsa.html"><b>2022.08.05: NSA, NIST, and post-quantum cryptography:</b></a> <span>Announcing my second lawsuit against the U.S. government. #nsa #nist #des #dsa #dualec #sigintenablingproject #nistpqc #foia</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20220129-plagiarism.html"><b>2022.01.29: Plagiarism as a patent amplifier:</b></a> <span>Understanding the delayed rollout of post-quantum cryptography. #pqcrypto #patents #ntru #lpr #ding #peikert #newhope</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20201206-msword.html"><b>2020.12.06: Optimizing for the wrong metric, part 1: Microsoft Word:</b></a> <span>Review of "An Efficiency Comparison of Document Preparation Systems Used in Academic Research and Development" by Knauff and Nejasmic. #latex #word #efficiency #metrics</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20191024-eddsa.html"><b>2019.10.24: Why EdDSA held up better than ECDSA against Minerva:</b></a> <span>Cryptosystem designers successfully predicting, and protecting against, implementation failures. #ecdsa #eddsa #hnp #lwe #bleichenbacher #bkw</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20190430-vectorize.html"><b>2019.04.30: An introduction to vectorization:</b></a> <span>Understanding one of the most important changes in the high-speed-software ecosystem. #vectorization #sse #avx #avx512 #antivectors</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20171105-infineon.html"><b>2017.11.05: Reconstructing ROCA:</b></a> <span>A case study of how quickly an attack can be developed from a limited disclosure. #infineon #roca #rsa</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20171017-collisions.html"><b>2017.10.17: Quantum algorithms to find collisions:</b></a> <span>Analysis of several algorithms for the collision problem, and for the related multi-target preimage problem. #collision #preimage #pqcrypto</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20170723-random.html"><b>2017.07.23: Fast-key-erasure random-number generators:</b></a> <span>An effort to clean up several messes simultaneously. #rng #forwardsecrecy #urandom #cascade #hmac #rekeying #proofs</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20170719-pqbench.html"><b>2017.07.19: Benchmarking post-quantum cryptography:</b></a> <span>News regarding the SUPERCOP benchmarking system, and more recommendations to NIST. #benchmarking #supercop #nist #pqcrypto</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20161030-pqnist.html"><b>2016.10.30: Some challenges in post-quantum standardization:</b></a> <span>My comments to NIST on the first draft of their call for submissions. #standardization #nist #pqcrypto</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20160607-dueprocess.html"><b>2016.06.07: The death of due process:</b></a> <span>A few notes on technology-fueled normalization of lynch mobs targeting both the accuser and the accused. #ethics #crime #punishment</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20160516-quantum.html"><b>2016.05.16: Security fraud in Europe's "Quantum Manifesto":</b></a> <span>How quantum cryptographers are stealing a quarter of a billion Euros from the European Commission. #qkd #quantumcrypto #quantummanifesto</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20160315-jefferson.html"><b>2016.03.15: Thomas Jefferson and Apple versus the FBI:</b></a> <span>Can the government censor how-to books? What if some of the readers are criminals? What if the books can be understood by a computer? An introduction to freedom of speech for software publishers. #censorship #firstamendment #instructions #software #encryption</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20151120-batchattacks.html"><b>2015.11.20: Break a dozen secret keys, get a million more for free:</b></a> <span>Batch attacks are often much more cost-effective than single-target attacks. #batching #economics #keysizes #aes #ecc #rsa #dh #logjam</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20150314-optimizing.html"><b>2015.03.14: The death of optimizing compilers:</b></a> <span>Abstract of my tutorial at ETAPS 2015. #etaps #compilers #cpuevolution #hotspots #optimization #domainspecific #returnofthejedi</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20150218-printing.html"><b>2015.02.18: Follow-You Printing:</b></a> <span>How Equitrac's marketing department misrepresents and interferes with your work. #equitrac #followyouprinting #dilbert #officespaceprinter</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20140602-saber.html"><b>2014.06.02: The Saber cluster:</b></a> <span>How we built a cluster capable of computing 3000000000000000000000 multiplications per year for just 50000 EUR. #nvidia #linux #howto</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20140517-insns.html"><b>2014.05.17: Some small suggestions for the Intel instruction set:</b></a> <span>Low-cost changes to CPU architecture would make cryptography much safer and much faster. #constanttimecommitment #vmul53 #vcarry #pipelinedocumentation</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20140411-nist.html"><b>2014.04.11: NIST's cryptographic standardization process:</b></a> <span>The first step towards improvement is to admit previous failures. #standardization #nist #des #dsa #dualec #nsa</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20140323-ecdsa.html"><b>2014.03.23: How to design an elliptic-curve signature system:</b></a> <span>There are many choices of elliptic-curve signature systems. The standard choice, ECDSA, is reasonable if you don't care about simplicity, speed, and security. #signatures #ecc #elgamal #schnorr #ecdsa #eddsa #ed25519</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20140213-ideal.html"><b>2014.02.13: A subfield-logarithm attack against ideal lattices:</b></a> <span>Computational algebraic number theory tackles lattice-based cryptography.</span></td></tr>
<tr><td><a href="https://blog.cr.yp.to/20140205-entropy.html"><b>2014.02.05: Entropy Attacks!</b></a> <span>The conventional wisdom says that hash outputs can't be controlled; the conventional wisdom is simply wrong.</span></td></tr>
</tbody></table></details></div><hr>
<h2>2024.08.03: Clang vs. Clang: <span>You're making Clang angry. You wouldn't like Clang when it's angry. #compilers #optimization #bugs #timing #security #codescans</span></h2>
<p>This is a blog post about an experiment with Clang.
I need to explain some context first.</p>
<p><strong><a name="optimizations"></a>Compiler "optimizations".</strong>
Try skimming through recent changes to
<a href="https://github.com/llvm/llvm-project">LLVM</a>
and
<a href="https://github.com/gcc-mirror/gcc">GCC</a>.
You'll find "optimizations",
and tests for "optimizations",
and fixes to tests for "optimizations",
and fixes to bugs in "optimizations".</p>
<p>The bugs <em>admitted</em> in the compiler changelogs
are just the tip of the iceberg.
Whenever possible,
compiler writers refuse to take responsibility for
<a href="https://lwn.net/Articles/342330/">the</a>
<a href="https://blog.pkh.me/p/37-gcc-undefined-behaviors-are-getting-wild.html">bugs</a>
<a href="https://research.swtch.com/ub">they</a>
<a href="https://gavinhoward.com/2023/08/the-scourge-of-00ub/">introduced</a>,
even though the compiled code worked fine before the "optimizations".
[2024.08.03 edit: Added more links here.]
The excuse for not taking responsibility is that
there are "language standards"
saying that these bugs should be blamed on millions of programmers
writing code that bumps into "undefined behavior",
rather than being blamed on the much smaller group of compiler writers
subsequently changing how this code behaves.
These "language standards" are written by the compiler writers.</p>
<p>Evidently the compiler writers find it more important to continue developing "optimizations"
than to have computer systems functioning as expected.
Developing "optimizations" seems to be
a very large part of what compiler writers are paid to do.</p>
<p>I'm putting "optimizations" in quotes
because compiler "optimizations"
are generally nowhere near the performance
that competent programmers can achieve.
As a cryptographic example,
benchmarks across
<a href="https://bench.cr.yp.to/impl-kem/kyber768.html">many CPUs</a>
show that the <code>avx2</code> implementation of <code>kyber768</code>
is about 4 times faster than portable code compiled with an "optimizing" compiler.
There are
<a href="https://bench.cr.yp.to/">many more examples</a>
like this.</p>
<p>Compiler writers measure an "optimization" as successful
if they can find any example where the "optimization" saves time.
Does this matter for the overall user experience?
The typical debate runs as follows:</p>
<ul>
<li>
<p>In <a href="https://web.archive.org/web/20000824013718/http://www.research.microsoft.com/~toddpro/papers/law.htm">2000</a>,
  Todd A. Proebsting
  introduced "Proebsting's Law: Compiler Advances Double Computing Power Every 18 <em>Years</em>" (emphasis in original)
  and concluded that "compiler optimization work makes only marginal contributions".
  Proebsting commented
  <a href="https://proebsting.cs.arizona.edu/">later</a> that
  "The law probably would have gone unnoticed had it not been for the protests by those receiving funds to do compiler optimization research."</p>
</li>
<li>
<p>Arseny Kapoulkine ran various
  <a href="https://zeux.io/2022/01/08/on-proebstings-law/">benchmarks</a>
  in 2022 and concluded that the gains were even smaller:
  "LLVM 11 tends to take 2x longer to compile code with optimizations, and as a
  result produces code that runs 10-20% faster (with occasional outliers in
  either direction), compared to LLVM 2.7 which is more than 10 years old."</p>
</li>
<li>
<p>Compiler writers typically respond with arguments like this:
  "10-20% is gazillions of dollars of computer time saved!
  What a triumph from a decade of work!"</p>
</li>
</ul>
<p>But both sides of this debate are founded upon an invalid measurement methodology.
The actual speedup produced by compilers is smaller, and shrinking,
as explained in my talk
<a href="https://cr.yp.to/talks.html#2015.04.16">"The death of optimizing compilers"</a>
in 2015.</p>
<p>If you look at the hot spots in a software system,
the code running often enough for the user to care about performance,
then you find tons of intrinsics and assembly language.
There are 160000 lines of assembly (<code>.asm</code> and <code>.S</code> files) in 
<a href="https://ffmpeg.org/download.html">FFmpeg</a>,
for example.
Faster computers and faster networks are handling more and more data
(e.g., bigger videos for FFmpeg),
putting more and more load on the hot spots.
Benchmarks selected to show the effect of compiler "optimizations"
are not representative of how CPU time is actually being spent.</p>
<p>Meanwhile there are more and more bugs produced by these "optimizations",
and one has to ask how many gazillions of dollars have been lost because of that.
Consider, for example, security.
Deloitte
<a href="https://web.archive.org/web/20240803112553/https://www.deloitte.com/content/dam/assets-shared/docs/services/risk-advisory/2024/cybersecurity-insights-2023-budgets-benchmarks-financial-services-institutions.pdf">reported</a>
that 2023 IT security budgets were half a percent of corporate revenue,
which sounds like hundreds of billions of dollars overall
given that total corporate revenues worldwide were above
<a href="https://www.bu.edu/eci/files/2023/09/Corporate-Power-Module.pdf">$48 trillion</a>
in 2022.
(Some caveats: perhaps Deloitte's half percent was an unweighted average over corporations;
not all corporations respond to surveys.)
It would be interesting to study
what percentage of security failures can be partly or entirely attributed to compiler "optimizations".</p>
<p><strong><a name="timing"></a>Timing leakage.</strong>
The security problems caused by "optimizing" compilers
aren't just traditional bugs,
but also unintentional leakage of secret information into timings,
often allowing those secrets to be reconstructed by
<a href="https://timing.attacks.cr.yp.to/">timing attacks</a>.
To quote a
<a href="https://www.cl.cam.ac.uk/~rja14/Papers/whatyouc.pdf">EuroS&amp;P 2018 paper</a>
by Laurent Simon, David Chisnall, and Ross Anderson:
"A compiler upgrade can suddenly and without warning open a
timing channel in previously secure code.
This arms race is pointless and has to stop."</p>
<p>Is there actually an arms race?
Let's look at the evidence.</p>
<p>The example highlighted in the 2018 paper used a <code>bool</code>
to select between two values.
Obviously <code>bool</code> was triggering the compiler to create conditional jumps.
The paper continued by acknowledging common practice of eliminating <code>bool</code>:</p>
<blockquote>
<p>So an extra layer of obfuscation used by cryptographers
is to eradicate <code>bool</code> completely in critical code;
and to have specially-crafted functions to compare integers
in constant time too. OpenSSL currently declares 37
different functions to support this. Unfortunately, compilers
offer no guarantees to such code; the next version of the
same compiler may silently understand it and optimize
the constant-timeness away. Examples of such failures
include the carefully-crafted constant-time implementation of
curve25519 which was broken by Microsoft’s compiler in
2015 [30].</p>
</blockquote>
<p>The one example claimed at the end of this quote
is a misunderstanding triggered by the title of the cited 2015 paper, namely
"When constant-time source yields variable-time binary: Exploiting
curve25519-donna built with MSVC 2015".
What was actually happening in the 2015 paper
was that the <code>int64</code> operations in curve25519-donna
were,
<a href="https://research.kudelskisecurity.com/2017/01/16/when-constant-time-source-may-not-save-you/">when compiled for 32-bit x86</a>,
converted into calls to Microsoft's 32-bit <code>int64</code> library,
specifically <code>llmul.asm</code>,
where Microsoft had made the mistake of using data-dependent branches.
Any reasonable concept of source code should include this variable-time library:
that's where the timing leak was created, and it's where the timing leak should be fixed.</p>
<p>Later examples in an
<a href="https://leslyann-daniel.fr/ressources/papers/2020_SP_binsecrel.pdf">S&amp;P 2020 paper</a>
also used <code>bool</code>.
So, hmmm,
could it be that avoiding secret comparisons and secret <code>bool</code> in source code
stops compilers from producing secret conditional branches?
(The reason for listing comparisons separately here
is that, technically, C comparisons produce <code>int</code> rather than <code>bool</code>,
even if the compiler thinks of them as producing <code>bool</code> internally.)</p>
<p>Unfortunately, no, there really is an arms race here.
Never underestimate the ability of "optimizing" compilers to screw things up.</p>
<p>In <a href="https://pqshield.com/pqshield-plugs-timing-leaks-in-kyber-ml-kem-to-improve-pqc-implementation-maturity/">June 2024</a>,
Antoon Purnal reported
a successful timing attack against the Kyber reference code
compiled with some of the "optimization" options
for Clang 15 (released in 2022) or newer.
The reference code had a computation of the form <code>(-((x&gt;&gt;j)&amp;1))&amp;y</code>,
which is <code>y</code> if bit <code>j</code> of <code>x</code> is set, else <code>0</code>.
See the problem?
<span color="0d372c"><strong>CLANG SMASH!</strong></span>
The compiler used a bit-test instruction
to convert bit <code>j</code> of <code>x</code> into a <code>bool</code>,
and then performed a conditional branch based on this <code>bool</code>.</p>
<p>(As a side note,
I would expect this conditional branch to slow down more code than it speeds up.
But remember that compiler writers measure an "optimization" as successful
if they can find <em>any</em> example where the "optimization" saves time.)</p>
<p>Inside LLVM,
this "optimization" is handled by
<code>combineShiftAnd1ToBitTest</code>
in
<code>lib/CodeGen/SelectionDAG/DAGCombiner.cpp</code>.
The function
<code>combineShiftAnd1ToBitTest</code>
was added by Sanjay Patel in
<a href="https://github.com/llvm/llvm-project/commit/4e54cf3e0e71b38b2fde1a815e8460b14026762a">September 2019</a>,
and was tweaked by various people later.
I wonder whether anyone has found earlier examples
of compiler "optimizations" crossing the line into introducing <code>bool</code>.</p>
<p>A subsequent compiler patch crossing the same line
was a GCC patch by ARM in
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commit;f=gcc/match.pd;h=d70720c2382e687e192a9d666e80acb41bfda856">November 2021</a>
to convert <code>(-x)&gt;&gt;31</code> into <code>-(x&gt;0)</code>.
I issued a warning about this in
<a href="https://microblog.cr.yp.to/1713627640/index.html">April 2024</a>.</p>
<p>TIMECOP 2,
which is built into the
<a href="https://bench.cr.yp.to/">SUPERCOP</a>
cryptographic test framework,
automatically scans compiled code for conditional branches derived from secrets,
if the code was declared to be constant-time.
(It also scans code for array indices derived from secrets,
and the
<a href="https://kyberslash.cr.yp.to/papers.html">KyberSlash paper</a>
describes a patch to scan for divisions derived from secrets.)
Checking TIMECOP results is what led to my April 2024 warning.</p>
<p>The original
<a href="https://www.post-apocalyptic-crypto.org/timecop/">TIMECOP 1</a>
from Moritz Neikes
was also a modification to SUPERCOP,
automating an approach taken by Adam Langley's
<a href="https://www.imperialviolet.org/2010/04/01/ctgrind.html">ctgrind</a>.
Some differences between TIMECOP 1 and TIMECOP 2:
TIMECOP 2 automatically marks RNG output as secret;
TIMECOP 2 supports "declassification";
TIMECOP 2 supports designation of "public inputs";
TIMECOP 2 runs on multiple cores.
(This last difference is also a contribution from the KyberSlash paper.)</p>
<p>TIMECOP has limitations:
it supports only instructions supported by Valgrind
(e.g., it gives up on AMD XOP instructions),
and the data flow that it checks
is only the data flow
visible in the test runs that it carries out.
There's continued work on
<a href="https://crocs-muni.github.io/ct-tools/">tools</a>
for checking constant-time behavior.
But I'm happy to report that the equivalent of TIMECOP
is now built into the test suite for
<a href="https://lib.mceliece.org/">libmceliece</a>,
and I hope this spreads to other libraries.</p>
<p>If you've identified a variable-time code snippet,
how do you rewrite it to run in constant time,
while making sure that the rewrite doesn't introduce any bugs?
I gave a talk about this in
<a href="https://cr.yp.to/talks.html#2024.07.22">July 2024</a>.
Part of the talk was explaining some constant-time functions
provided by libmceliece and SUPERCOP;
these functions are provided by files <code>crypto_{int,uint}{8,16,32,64}.h</code>
that you're free to copy into your own projects.
As one example,
the function
<code>crypto_uint32_bitmod_mask(x,j)</code>
has the same effect as <code>-((x&gt;&gt;(j&amp;31))&amp;1)</code>,
but stops the compiler from seeing that there's a 1-bit result.
A fancier example is
<code>crypto_uint32_max(x,y)</code>.</p>
<p>For comparison,
the 2018 paper reported a
<a href="https://github.com/lmrs2/ct_choose">tweak</a>
to Clang/LLVM
to add language support for a constant-time function
<code>__builtin_ct_choose(bool cond, x, y)</code>.
The 2018 paper also incorrectly suggested
that this was the only such function needed.
Maybe this function will get into compilers someday,
but clearly it'll be a long time before you can rely on this function being present for your projects,
and the way it's implemented strikes me as more fragile
than the way <code>crypto_{int,uint}{8,16,32,64}.h</code> are implemented.</p>
<p><strong><a name="proactive"></a>Proactively avoiding problems.</strong>
To the extent that timing leaks introduced by compilers
are detected by pre-deployment test suites for compiled libraries,
we can revert to an older compiler version for deployment
while we're rewriting the code,
so the users stay safe at each moment.
But can we prevent compilers from introducing timing leaks in the first place?</p>
<p>One attractive answer is to distribute the libraries as assembly language.
If your reaction is "Yikes, this makes software correctness hard to audit":
The RWC 2024 talk
<a href="https://iacr.org/submit/files/slides/2024/rwc/rwc2024/38/slides.pdf">"Adoption of high-assurance and highly performant cryptographic algorithms at AWS"</a>
presented fast X25519 software
proven to correctly compute X25519 on all inputs.
The software is written in assembly language
(two versions targeting different 64-bit Intel/AMD CPUs,
and two versions targeting different 64-bit ARM CPUs);
the correctness statement is a theorem about the machine code, the same code that users are running;
the proof is verified by the
<a href="https://www.cl.cam.ac.uk/~jrh13/hol-light/">HOL Light</a> theorem prover.</p>
<p>However,
the argument against assembly is valid
for cryptographic software
that hasn't reached this gold standard yet.
So I've also been looking at ways to rapidly introduce anti-timing-leak vaccinations
into code written in C, C++, etc.</p>
<p>The shared feature of <code>x&amp;1</code> and <code>x&gt;&gt;31</code>
is that there are just two possibilities for the result:
<code>x&amp;1</code> is <code>0</code> or <code>1</code>;
<code>x&gt;&gt;31</code> is <code>0</code> or <code>1</code> if <code>x</code> is <code>uint32</code>;
<code>x&gt;&gt;31</code> is <code>0</code> or <code>-1</code> if <code>x</code> is <code>int32</code>.
(Side note: always compile with <code>-fwrapv</code> so that GCC and Clang assume twos-complement arithmetic.)
In each case,
someone writing a compiler "optimization" can easily say "Hey, I can stick that 1-bit result into a <code>bool</code>".
There are more possibilities to think about
(what about <code>x&amp;2</code>? what about <code>x&lt;&lt;31</code>? what about 2-bit results?),
but let's focus on these examples as case studies.</p>
<p>Simply scanning source code for <code>&amp;1</code>, <code>1&amp;</code>, <code>&gt;&gt;31</code>, and so on finds many examples,
but I've also tried a quick experiment with another type of scanning,
which is what the title of this blog post is referring to.
I'm not sure this second type is better overall,
but it does seem to have some interesting capabilities.</p>
<p>I wrote a simple
<a href="https://blog.cr.yp.to/20240803-patch.txt">patch</a>
for the LLVM "optimizer" (starting from commit 68df06a0b2998765cb0a41353fcf0919bbf57ddb)
to scan for <code>&amp;1</code> and <code>&gt;&gt;31</code>,
and to issue remarks saying
"please take this away before clang does something bad".
Here's an example of compiling a test function with
<code>clang -Rpass-analysis=clang-vs-clang -O -c x.c</code>
after the patch:</p>
<pre><code>    x.c:3:5: remark: clang-vs-clang: clang sees signed&gt;&gt;(bits-1); please take this away before clang does something bad [-Rpass-analysis=clang-vs-clang]
        3 |   x &gt;&gt;= 31;
          |     ^
    x.c:3:5: remark: clang-vs-clang: clang sees signed&gt;&gt;(bits-1); please take this away before clang does something bad [-Rpass-analysis=clang-vs-clang]
</code></pre>
<p>This is the test function:</p>
<pre><code>    int sra31(int x)
    {
      x &gt;&gt;= 31;
      return x;
    }
</code></pre>
<p>Repetitions of the remark are unsurprising:
compilers will keep trying to apply "optimizations"
until they stop making progress.</p>
<p>The <code>clang-vs-clang</code> output distinguishes <code>signed</code> from <code>unsigned</code> for shifts.
This distinction matters for a (manual or automatic) rewrite in terms of <code>crypto_{int,uint}{8,16,32,64}.h</code>.
(One way to automate source transformations is via <code>clang-tidy</code>.)
Of course,
code omitted because of <code>#ifdef</code>,
or otherwise eliminated before this "optimization" step,
won't trigger any remarks from <code>clang-vs-clang</code>.
[2024.08.03 edit: Fixed typo.]</p>
<p>I then ran SUPERCOP 20240716 (<code>./data-do-biglittle</code> on a dual EPYC 7742
<a href="https://blog.cr.yp.to/20230609-turboboost.html">with overclocking disabled</a>),
after adjusting SUPERCOP's compiler list to use <code>clang-vs-clang</code> (adding <code>-Rpass-analysis=clang-vs-clang</code>
to the <code>clang</code> lines in <code>okcompilers/{c,cpp}</code>).</p>
<p>Results were ready three hours later.
There were 675752 lines from Clang,
in total 210786494 bytes,
compressing to 3595199 bytes in
<a href="https://blog.cr.yp.to/20240803-fromclang.txt.gz"><code>20240803-fromclang.txt.gz</code></a>.
There's quite a bit of noise in the output
because various source-code branches on public data
trigger Clang to internally generate <code>&amp;1</code> for the branch conditions.
Skipping past those finds more interesting examples.</p>
<p>Here's an example that had also been found by simpler source-code scans
and that is clearly good to proactively change:</p>
<pre><code>    a0 += (a0&gt;&gt;15)&amp;106;
</code></pre>
<p>Here's an example where a source-code scan would have required some effort at C parsing.
The macro <code>ONE8</code> is defined as <code>((uint8_t)1)</code>:</p>
<pre><code>    *pk2^=(((*pk_cp)&gt;&gt;ir)&amp;ONE8)&lt;&lt;jr;
</code></pre>
<p>Here's another example that's even harder to find by simpler scans:</p>
<pre><code>    mask = signmask_x16(sub_x16(x,const_x16((q+1)/2)));
</code></pre>
<p>The macro <code>signmask_x16(x)</code> is defined as <code>_mm256_srai_epi16((x),15)</code>,
an AVX2 intrinsic to shift each signed 16-bit piece in a 256-bit vector right by 15 bits.</p>
<p>This last one isn't high on my priority list to rewrite.
The easiest way I could imagine the vector operation turning into a conditional branch
is to compile for AVX-512, which has vectorized <code>bool</code>,
and to have the compiler decide for some strange reason to convert those into serial <code>bool</code> for a conditional branch.
For the moment,
given that TIMECOP uses Valgrind and that
<a href="https://bugs.kde.org/show_bug.cgi?id=383010">Valgrind doesn't support AVX-512</a>,
I don't recommend compiling for AVX-512 anyway.</p>
<p>The examples I found most interesting were 
64-bit right-shifts of <code>int128</code> triggering the <code>&gt;&gt;</code> warning.
Sure, makes sense that the implementation of <code>int128</code>
is internally using a 63-bit right shift of the top 64-bit word
to figure out the sign;
but what happens if Clang adds GCC-like support
for converting 63-bit right shifts into <code>bool</code> and then into conditional branches?
Suddenly all sorts of <code>int128</code> code will be variable-time,
much like what the 2015 paper was claiming but this time really with no <code>bool</code> in the source.
I think the easiest way to protect against this at the source level
is to avoid the compiler's existing implementation of <code>int128</code>
in favor of some <code>crypto_int128</code> functions.
A side advantage of writing those functions is that <code>crypto_int128</code>,
unlike the <code>int128</code> in GCC and Clang,
will work on small 32-bit platforms.</p>
<p>Beyond these scans,
there are some other ideas I should mention.
Adding support to GCC and Clang for secret data types
<em>sounds</em> great,
but I don't see how to make this robust
given how GCC and Clang are structured.
I have more hope for compilers
that are built for security in the first place.
Security-focused compilers
that require new input languages,
such as
<a href="https://github.com/plsyssec/fact">FaCT</a>
and the actively developed
<a href="https://github.com/jasmin-lang/jasmin">Jasmin</a>,
raise concerns about code-rewriting time,
but, c'mon, is this really so scary?
We have to be taking some sort of action anyway,
given how compilers are handling current code.
<span color="0d372c"><strong>CLANG SMASH!</strong></span></p><hr><span size="1"><b>Version:</b>
This is version 2024.08.03 of the 20240803-clang.html web page.
</span>

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Techniques used by developers to bypass App Store review (104 pts)]]></title>
            <link>https://9to5mac.com/2024/08/02/developers-trick-app-store-review/</link>
            <guid>41146779</guid>
            <pubDate>Sat, 03 Aug 2024 14:28:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://9to5mac.com/2024/08/02/developers-trick-app-store-review/">https://9to5mac.com/2024/08/02/developers-trick-app-store-review/</a>, See on <a href="https://news.ycombinator.com/item?id=41146779">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
					
<figure>
	<img width="1500" height="750" src="https://9to5mac.com/wp-content/uploads/sites/6/2024/05/App-Store-fraud.webp?w=1500" alt="App Store fraud | Logo against hazard tape" srcset="https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2024/05/App-Store-fraud.webp?w=320&amp;quality=82&amp;strip=all&amp;ssl=1 320w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2024/05/App-Store-fraud.webp?w=640&amp;quality=82&amp;strip=all&amp;ssl=1 640w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2024/05/App-Store-fraud.webp?w=1024&amp;quality=82&amp;strip=all&amp;ssl=1 1024w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2024/05/App-Store-fraud.webp?w=1500&amp;quality=82&amp;strip=all&amp;ssl=1 1500w" decoding="async" fetchpriority="high"></figure>

<p>We recently reported on <a href="https://9to5mac.com/2024/08/01/pirate-streaming-app-ios-app-store/" target="_blank" rel="noreferrer noopener">how multiple pirate streaming apps for iOS managed to get approved on the App Store</a> by tricking the review process. Although we briefly mentioned some of the techniques used by these developers, <em>9to5Mac</em> has now taken a deep dive into how these apps are engineered to trick Apple.</p>



<h2 id="h-techniques-used-by-developers-to-bypass-the-app-store-review">Techniques used by developers to bypass the App Store review</h2>



<p>Last month, an app called “Collect Cards” reached the top of the App Store’s ranking of the most downloaded free apps in some countries. <a href="https://9to5mac.com/2024/07/19/pirate-streaming-ios-app-store-review/" target="_blank" rel="noreferrer noopener">After our report</a>, Apple took the app down – but many other versions of the same app were later released on the App Store. But how exactly are developers able to trick the App Store review team?</p>



<p>In our original report, we explained that these apps use geofence to prevent anyone at Apple from seeing what the app is actually capable of. But by analyzing the code of these apps, we now have a better idea of how this happens.</p>



<p>As we guessed, these apps share the same code base – even if they are distributed by different developer accounts. They’re built on React Native, a cross-platform framework based on JavaScript, and use Microsoft’s CodePush SDK which allows developers to update parts of the app without having to send a new build to the App Store.</p>



<p>Building React Native apps and using CodePush is not against App Store rules. In fact, there are many popular apps that do so. However, malicious developers take advantage of these technologies to bypass the App Store review.</p>



<p>One of the apps analyzed by <em>9to5Mac</em> points to a <a href="https://github.com/luminazz/teki" target="_blank" rel="noreferrer noopener">GitHub repository</a> that seems to provide files for multiple pirate streaming apps. This app also uses <a href="http://ip-api.com/json" target="_blank" rel="noreferrer noopener">a specific API</a> to check the location of the device based on the IP address. It returns data such as the country, region, city, and even estimated longitude and latitude.</p>



<p>When the app is opened for the first time, it waits a few seconds to call the geolocation API. This way, the App Store’s automated review process doesn’t see anything unusual in the app’s code. We also checked the app’s behavior by running it through a proxy to fake our location to San Jose, California. For this location, the app never reveals its hidden interface.</p>



<figure><img decoding="async" width="2000" height="1000" src="https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?quality=82&amp;strip=all" alt="Pirate streaming app for iOS tricked App Store Review to get approved by Apple" srcset="https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg 2000w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=155,78 155w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=655,328 655w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=768,384 768w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=1024,512 1024w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=1536,768 1536w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=350,175 350w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=140,70 140w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=1600,800 1600w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=290,145 290w, https://9to5mac.com/wp-content/uploads/sites/6/2024/07/pirate-streaming-app-store.jpg?resize=150,75 150w" sizes="(max-width: 2000px) 100vw, 2000px"></figure>



<p>After Apple approves the app with its basic functionalities, developers use CodePush to update it with anything they want. The app then reveals its true interface in “safe” locations.</p>



<h2 id="h-what-can-apple-do-about-it">What can Apple do about it?</h2>



<p>Of course, Apple is not immune to apps trying to trick its review system. However, the company could improve it by implementing additional tests to check the app’s behavior in other locations. At the same time, Apple should more proactively find and remove scam apps from the App Store.</p>



<p>In 2017,&nbsp;<a href="https://9to5mac.com/2017/04/24/uber-tricked-apple-probably-story/" target="_blank" rel="noreferrer noopener">Uber was accused of working on a “geofence” for Apple’s headquarters in Cupertino</a>. When the app was run inside this geofence, it automatically disabled codes used to fingerprint and track the user across the web. Even so, it seems that Apple hasn’t done much to prevent other situations like this.</p>



<p>In 2021, documents revealed that the&nbsp;<a href="https://9to5mac.com/2021/05/07/app-store-review-process-has-over-500-human-experts-less-than-1-of-rejections-are-appealed/" target="_blank" rel="noreferrer noopener">App Store Review team has more than 500 human experts to review more than 100,000 apps every week</a>. Even so, the vast majority of apps go through automated review processes to check if they violate the App Store guidelines before undergoing the manual review process.</p>



<p>Following the publication of our articles, an Apple spokesperson told <em>9to5Mac</em> that the apps have been removed from the App Store, but no details have been provided about the company’s measures to prevent other apps like this from getting approved.</p>
	<p>
		<a target="_blank" rel="nofollow" href="https://news.google.com/publications/CAAqBggKMLOFATDAGg?hl=en-US&amp;gl=US&amp;ceid=US:en">
			<em>Add 9to5Mac to your Google News feed.</em>&nbsp;
					</a>
	</p>
	<div><p><em>FTC: We use income earning auto affiliate links.</em> <a href="https://9to5mac.com/about/#affiliate">More.</a></p><p><a href="https://bit.ly/3W9PKbL"><img src="https://9to5mac.com/wp-content/uploads/sites/6/2024/07/1paassword-MNB-July-750-x-150-1-2.png" alt="" width="750" height="150"></a></p></div>				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[An FPGA built with 7400 series logic [video] (117 pts)]]></title>
            <link>https://media.ccc.de/v/cosin2024-56234-fpga-selber-bauen-mit-74</link>
            <guid>41146563</guid>
            <pubDate>Sat, 03 Aug 2024 13:40:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://media.ccc.de/v/cosin2024-56234-fpga-selber-bauen-mit-74">https://media.ccc.de/v/cosin2024-56234-fpga-selber-bauen-mit-74</a>, See on <a href="https://news.ycombinator.com/item?id=41146563">Hacker News</a></p>
<div id="readability-page-1" class="page">

<div>
<ol>
<li>
<a href="https://media.ccc.de/b">
browse
</a>
</li>
<li>
<span></span>
<a href="https://media.ccc.de/b/conferences">
conferences
</a>
</li>
<li>
<span></span>
<a href="https://media.ccc.de/b/conferences/cosin">
cosin
</a>
</li>
<li>
<span></span>
<a href="https://media.ccc.de/b/conferences/cosin/2024">
2024
</a>
</li>
<li>
<span></span>
event
</li>
</ol>
</div>

<div>

<p>
<span></span>
<a href="https://media.ccc.de/search?p=Simon+Burkhardt">Simon Burkhardt</a>

</p>

<p><a href="https://media.ccc.de/c/cosin2024/Hardware" rel="tag">Hardware</a>
Playlists:
<a href="https://media.ccc.de/v/cosin2024-56234-fpga-selber-bauen-mit-74/playlist">'cosin2024' videos starting here</a>
/
<a data-method="get" href="https://media.ccc.de/v/cosin2024-56234-fpga-selber-bauen-mit-74/audio">audio</a></p>
<!-- %h3 About -->
<p>Ich habe selber eine FPGA architektur in 7400 Logik realisiert und erzähle, was denn son ein FPGA überhaupt ist und wie dieser funktioniert</p>

<p>FPGAs sind eine einzigartige Form von high-performance chip für Nichenanwendugen. Nur wenige kennen FPGAs überhaupt und noch weniger wissen, wie deren interne Architektur aussieht.
<br>Inspiriert durch Ben Eaters 8-bit CPU on breadboard habe ich selber einen simplen FPGA in hardware aufgebaut. Anhand dieses Models erzähle ich detailiert und low-level, was ein FPGA ist und wie ich meine Version entwickelt habe.</p>

<h3>Download</h3>
<div>
<p>
<h4>Audio</h4>
</p>

</div>
<!-- %h3 Embed/Share -->

<h3>Tags</h3>

</div>





</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Primitive Recursive Functions for a Working Programmer (136 pts)]]></title>
            <link>https://matklad.github.io/2024/08/01/primitive-recursive-functions.html</link>
            <guid>41146278</guid>
            <pubDate>Sat, 03 Aug 2024 12:32:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://matklad.github.io/2024/08/01/primitive-recursive-functions.html">https://matklad.github.io/2024/08/01/primitive-recursive-functions.html</a>, See on <a href="https://news.ycombinator.com/item?id=41146278">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <article>


<p><span>Programmers on the internet often use </span>“<span>Turing-completeness</span>”<span> terminology. Typically, not being</span>
<span>Turing-complete is extolled as a virtue or even a requirement in specific domains. I claim that most</span>
<span>such discussions are misinformed </span>—<span> that not being Turing complete doesn</span>’<span>t actually mean what folks</span>
<span>want it to mean, and is instead a stand-in for a bunch of different practically useful properties,</span>
<span>which are mostly orthogonal to actual Turing completeness.</span></p>
<p><span>While I am generally descriptivist in nature and am ok with words loosing their </span><em><span>original</span></em><span> meaning</span>
<span>as long as the new meaning is sufficiently commonly understood, Turing completeness is a hill I will</span>
<span>die on. It is a term from math, it has a very specific meaning, and you are not allowed to</span>
<span>re-purpose it for anything else, sorry!</span></p>
<p><span>I understand why this happens: to really understand what Turing completeness is and is not you need</span>
<span>to know one (simple!) theoretical result about so-called primitive recursive functions. And,</span>
<span>although this result is simple, I was only made aware of it in a fairly advanced course during my</span>
<span>masters. That</span>’<span>s the CS education deficiency I want to rectify </span>—<span> you can</span>’<span>t teach students the</span>
<span>halting problem without </span><em><span>also</span></em><span> teaching them about primitive recursion!</span></p>
<p><span>The post is going to be rather meaty, and will be split in three parts:</span></p>
<p><span>In Part I, I give a TL;DR for the theoretical result and some of its consequences. Part II is going</span>
<span>to be a whirlwind tour of Turing Machines, Finite State Automata and Primitive Recursive Functions.</span>
<span>And then Part III will circle back to practical matters.</span></p>
<p><span>If math makes you slightly nauseas, you might to skip Part II. But maybe give it a try? The math</span>
<span>we</span>’<span>ll need will be baby math from first principles, without reference to any advanced results.</span></p>
<section id="Part-I-TL-DR">

    <h2>
    <a href="#Part-I-TL-DR"><span>Part I: TL;DR</span> </a>
    </h2>
<p><span>Here</span>’<span>s the key result </span>—<span> suppose you have a program in some Turing complete language, and you also</span>
<span>know that it</span>’<span>s not too slow. Suppose it runs faster than</span>
<span><span>O(2</span><sup><span>2</span><sup><span>N</span></sup></sup><span>).</span></span>
<span>That is, two to the power of two to the power of N, a very large number. In this case, you can</span>
<span>implement this algorithm in a non-Turing complete language.</span></p>
<p><span>Most practical problems fall into this </span>“<span>faster than two to the two to the power of two</span>”<span> space.</span>
<span>Hence it follows that you don</span>’<span>t need full power of a Turing Machine to tackle them. Hence, a</span>
<span>language not being Turing complete doesn</span>’<span>t in any way restrict you in practice, or gives you extra</span>
<span>powers to control the computation.</span></p>
<p><span>Or, to restate this: in practice, a program which doesn</span>’<span>t terminate, and a program that needs a</span>
<span>billion billions steps to terminate are equivalent. Making something non-Turing complete by itself</span>
<span>doesn</span>’<span>t help with the second problem in any way. And there</span>’<span>s a trivial approach that solves the</span>
<span>first problem for any existing Turing-complete language </span>—<span> in the implementation, count the steps</span>
<span>and bail with an error after a billion.</span></p>
</section>
<section id="Part-II-Weird-Machines">

    <h2>
    <a href="#Part-II-Weird-Machines"><span>Part II: Weird Machines</span> </a>
    </h2>
<p><span>The actual theoretical result is quite a bit more general than that. It is (unsurprisingly)</span>
<span>recursive:</span></p>

<figure>
<blockquote><p><span>If a function is computed by a Turing Machine, and the runtime of this machine is bounded by some</span>
<span>primitive recursive function of input, then the original function itself can be written as a</span>
<span>primitive recursive function.</span></p>
</blockquote>

</figure>
<p><span>It is expected that this sounds like gibberish at this point! So let</span>’<span>s just go and prove this thing,</span>
<span>right here in this blog post! Will work up slowly towards this result. The plan is as follows:</span></p>
<ul>
<li>
<em><span>First</span></em><span>, to brush up notation, we</span>’<span>ll define Finite State Machines.</span>
</li>
<li>
<em><span>Second</span></em><span>, we</span>’<span>ll turn our humble Finite State Machine into the all-powerful Turing Machine (spoiler</span>
—<span> a Turing Machine is an FSM with a pair of stacks), and, as is customary, wave our hands about</span>
<span>the Universal Turing Machine.</span>
</li>
<li>
<em><span>Third</span></em><span>, we leave the cozy world of imperative programming and define primitive recursive</span>
<span>functions.</span>
</li>
<li>
<em><span>Finally</span></em><span>, we</span>’<span>ll talk about the relative computational power of TMs and PRFs, including the teased</span>
<span>up result and more!</span>
</li>
</ul>
</section>
<section id="Finite-State-Machines">

    <h2>
    <a href="#Finite-State-Machines"><span>Finite State Machines</span> </a>
    </h2>
<p><dfn><span>Finite State Machines</span></dfn><span> are simple! An FSM takes a string as input, and returns a binary</span>
<span>answer, </span>“<span>yes</span>”<span> or </span>“<span>no</span>”<span>. Unsurprisingly an FSM has a finite number of states: Q0, Q1, </span>…<span>, Qn.</span>
<span>A subset of states are designated as </span>“<span>yes</span>”<span> states, the rest are </span>“<span>no</span>”<span> states. There</span>’<span>s also one</span>
<span>specific starting state.</span></p>
<p><span>The behavior of the state machine is guided by a transition (step) function, </span><code>s</code><span>. This function</span>
<span>takes the current state of FSM, the next symbol of input, and returns a new state.</span></p>
<p><span>The semantics of FSM is determined by repeatably applying the single step function for all symbols of</span>
<span>the input, and noting whether the final state is a </span>“<span>yes</span>”<span> state or a </span>“<span>no</span>”<span> state.</span></p>
<p><span>Here</span>’<span>s an FSM which accepts only strings of zeros and ones of even length:</span></p>

<figure>


<pre><code><span>States:     { Q0, Q1 }</span>
<span>Yes States: { Q0 }</span>
<span>Start State:  Q0</span>
<span></span>
<span>s :: State -&gt; Symbol -&gt; State</span>
<span>s Q0 0 = Q1</span>
<span>s Q0 1 = Q1</span>
<span>s Q1 0 = Q0</span>
<span>s Q1 1 = Q0</span></code></pre>

</figure>
<p><span>This machine ping-pongs between states Q0 and Q1 ends up in Q0 only for inputs of even length</span>
<span>(including an empty input).</span></p>
<p><span>What can FSMs do? As they give a binary answer, they are recognizers </span>—<span> they don</span>’<span>t compute</span>
<span>functions, but rather just characterize certain sets of strings. A famous result is that the</span>
<span>expressive power of FSMs is equivalent to the expressive power of regular expressions. If you can</span>
<span>write a regular expression for it, you could also do an FSM!</span></p>
<p><span>There are also certain things that state machines can</span>’<span>t do. For example they can</span>’<span>t enter an infinite</span>
<span>loop. Any FSM is linear in the input size and always terminates. But there are much more specific</span>
<span>sets of strings that couldn</span>’<span>t be recognized by an FSM. Consider this set:</span></p>

<figure>


<pre><code><span>1</span>
<span>010</span>
<span>00100</span>
<span>0001000</span>
<span>...</span></code></pre>

</figure>
<p><span>That is, an infinite set which contains </span>‘<span>1</span>’<span>s surrounded by the equal number of </span>‘<span>0</span>’<span>s on the both</span>
<span>sides. Let</span>’<span>s prove that there isn</span>’<span>t a state machine that recognizes this set!</span></p>
<p><span>As usually, suppose there </span><em><span>is</span></em><span> such a state machine. It has a certain number of states </span>—<span> maybe a</span>
<span>dozen, maybe a hundred, maybe a thousand, maybe even more. But let</span>’<span>s say fewer than a million.</span>
<span>Then, let</span>’<span>s take a string which looks like a million zeros, followed by one, followed by million</span>
<span>zeros. And let</span>’<span>s observe our FSM eating this particular string.</span></p>
<p><span>First of all, because the string is in fact a one surrounded by the equal number of zeros on both</span>
<span>sides, the FSM ends up in a </span>“<span>yes</span>”<span> state. Moreover, because the length of the string is much greater</span>
<span>than the number of states in the state machine, the state machine necessary visits some state twice.</span>
<span>There is a cycle, where the machine goes from A to B to C to D and back to A. This cycle might be</span>
<span>pretty long, but it</span>’<span>s definitely shorter than the total number of states we have.</span></p>
<p><span>And now we can fool the state machine. Let</span>’<span>s make it eat our string again, but this time, once it</span>
<span>completes the ABCDA cycle, we</span>’<span>ll force it to traverse this cycle again. That is, the original cycle</span>
<span>corresponds to some portion of our giant string:</span></p>

<figure>


<pre><code><span>0000 0000000000000000000 00 .... 1 .... 00000</span>
<span>     &lt;- cycle portion -&gt;</span></code></pre>

</figure>
<p><span>If we duplicate this portion, our string will no longer look like one surrounded by equal number of</span>
<span>twos, but the state machine will still in the </span>“<span>yes</span>”<span> state. Which is a contradiction that completes</span>
<span>the proof.</span></p>
</section>
<section id="Turing-Machine-Definition">

    <h2>
    <a href="#Turing-Machine-Definition"><span>Turing Machine: Definition</span> </a>
    </h2>
<p><span>A </span><dfn><span>Turing Machine</span></dfn><span> is only slightly more complex than an FSM. Like an FSM, a TM has a bunch of states</span>
<span>and a single-step transition function. While an FSM has an immutable input which is being feed to it</span>
<span>symbol by symbol, a TM operates with a mutable tape. The input gets written to the tape at the</span>
<span>start. At each step, a TM looks at the current symbol on the tape, changes its state according to a</span>
<span>transition function and, additionally:</span></p>
<ul>
<li>
<span>Replaces the current symbol with a new one (which might or might not be different).</span>
</li>
<li>
<span>Moves the reading head that points at the current symbol one position to the left or to the right.</span>
</li>
</ul>
<p><span>When a machine reaches a designated halt state, it stops, and whatever is written on the tape at</span>
<span>that moment is the result. That is, while FSMs are binary recognizers, TMs are functions. Keep in</span>
<span>mind that a TM does not necessary stop. It might be the case that a TM goes back and forth over the</span>
<span>tape, overwrites it, changes its internal state, but never quite gets to the final state.</span></p>
<p><span>Here</span>’<span>s an example Turing Machine:</span></p>

<figure>


<pre><code><span>States:  {A, B, C, H}</span>
<span>Start State: A</span>
<span>Final State: H</span>
<span></span>
<span>s :: State -&gt; Symbol -&gt; (State, Symbol, Left | Right)</span>
<span>s A 0 = (B, 1, Right)</span>
<span>s A 1 = (H, 1, Right)</span>
<span>s B 0 = (C, 0, Right)</span>
<span>s B 1 = (B, 1, Right)</span>
<span>s C 0 = (C, 1, Left)</span>
<span>s C 1 = (A, 1, Left)</span></code></pre>

</figure>
<p><span>If the configuration of the machine looks like this:</span></p>

<figure>


<pre><code><span>000010100000</span>
<span>     ^</span>
<span>     B</span></code></pre>

</figure>
<p><span>Then we are in the </span><code>s B 0 = (C, 0, Right)</code><span> case, so we should change the state to C, replace 0 with</span>
<span>1, and move to the right:</span></p>

<figure>


<pre><code><span>000011100000</span>
<span>      ^</span>
<span>      C</span></code></pre>

</figure>
</section>
<section id="Turing-Machine-Programming">

    <h2>
    <a href="#Turing-Machine-Programming"><span>Turing Machine: Programming</span> </a>
    </h2>
<p><span>There is a bunch of fiddly details to Turing Machines!</span></p>
<p><span>The tape is conceptually infinite, so beyond the input, everything is just zeros. This creates a</span>
<span>problem: it might be hard to say where the input (or the output) ends! There are a couple of</span>
<span>technical solutions here. One is to say that there are three different symbols on the tape </span>—
<span>zeros, ones, and blanks, and require that the tape is initialized with blanks. A different solution</span>
<span>is to invent some encoding scheme. For example, we can say that the input is a sequence of 8-bit</span>
<span>bytes, without interior null bytes. So, eight consecutive zeros at a byte boundary designate the end</span>
<span>of input/output.</span></p>
<p><span>It</span>’<span>s useful to think about how this byte-oriented TM could be implemented. We could have one large</span>
<span>state for each byte of input. So, Q142 would mean that the head is on the byte with value 142. And</span>
<span>then we</span>’<span>ll have a bunch of small states to read out the current byte. Eg, we start reading a byte in</span>
<span>state </span><code>S</code><span>. Depending on the next bit we move to S0 or S1, then to S00, or S01, etc. Once we reached</span>
<span>something like S01111001, we move back 8 positions and enter state Q121. This is one of the patterns</span>
<span>of Turing Machine programming </span>—<span> while your main memory is the tape, you can represent some</span>
<span>constant amount of memory directly in the states.</span></p>
<p><span>What we</span>’<span>ve done here is essentially lowering a byte-oriented Turing Machine to a bit-oriented</span>
<span>machine. So, we could think only in terms of big states operating on bytes, as we know the general</span>
<span>pattern for converting that to direct bit-twiddling.</span></p>
<p><span>With this encoding scheme in place, we now can feed arbitrary files to a Turing Machine! Which will</span>
<span>be handy to the next observation:</span></p>
<p><span>You can</span>’<span>t actually program a Turing Machine. What I mean is that, counter-intuitively, there isn</span>’<span>t</span>
<span>some user-supplied program that a Turing Machine executes. Rather, the program is hard-wired into</span>
<span>the machine. Transition function </span><em><span>is</span></em><span> the program.</span></p>
<p><span>But with some ingenuity we can regain our ability to write programs. Recall that we</span>’<span>ve just learned</span>
<span>to feed arbitrary files to a TM. So what we could do is to write a text file that specifies a TM and</span>
<span>its input, and then feed that entire file as an input to an </span>“<span>interpreter</span>”<span> Turing Machine which would</span>
<span>read the file, and act as if the machine specified there. Turing Machine can have an </span><code>eval</code>
<span>function.</span></p>
<p><span>Is such </span>“<span>interpreter</span>”<span> Turing Machine possible? Yes! And it is not hard: if you spend couple of hours</span>
<span>programming Turing Machines by hand, you</span>’<span>ll see that you pretty much can do anything </span>—<span> you can do</span>
<span>numbers, arithmetics, loops, control flow. It</span>’<span>s just very very tedious.</span></p>
<p><span>So let</span>’<span>s just declare that we</span>’<span>ve actually coded up this Universal Turing Machine which simulates a</span>
<span>TM given to it as an input in a particular encoding.</span></p>
<p><span>This sort of construct also gives rise to Church-Turing thesis. We have a TM which can run other</span>
<span>TMs. And you can implement a TM interpreter in something like Python. And, with a bit of legwork,</span>
<span>you could </span><em><span>also</span></em><span> implement a Python interpreter as a TM (you likely want to avoid doing that</span>
<span>directly, and instead do a simpler interpreter for WASM, and then use a Python interpreter complied</span>
<span>to WASM). This sort of bidirectional interpretation shows that Python and TM have equivalent</span>
<span>computing power. Moreover, it</span>’<span>s quite hard to come up with a reasonable computational device which</span>
<span>is more powerful than a Turing Machine.</span></p>
<p><span>There are computational devices that are strictly weaker than TMs though. Recall FSM. By this point,</span>
<span>it should be obvious that a TM can simulate an FSM. Everything a Finite State Machine can do, a</span>
<span>Turing Machine can do as well. And it should be intuitively clear that TM is more powerful than an</span>
<span>FSM. FSM gets to use only a finite number of states. A TM has these same states, but it also posses</span>
<span>a tape which serves like an infinitely sized external memory.</span></p>
<p><span>Directly proving that you </span><em><span>can</span>’<span>t</span></em><span> encode a Universal Turing Machine as an FSM sounds complicated,</span>
<span>so let</span>’<span>s prove something simpler. Recall that we have established that there</span>’<span>s no FSM that accepts</span>
<span>only ones surrounded by the equal number of zeros on both sides (because a sufficiently large word</span>
<span>of this form would necessary enter a cycle in a state machine, which could then be further pumped).</span>
<span>But it</span>’<span>s actaully easy to write a Turing Machine that does this:</span></p>
<ul>
<li>
<span>Erase zero (at the left side of the tape)</span>
</li>
<li>
<span>Go to the right end of the tape</span>
</li>
<li>
<span>Erase zero</span>
</li>
<li>
<span>Go to the left side of the tape</span>
</li>
<li>
<span>Repeat</span>
</li>
<li>
<span>If what</span>’<span>s left is a single </span><code>1</code><span> the answer is </span>“<span>yes</span>”<span>, otherwise it is a </span>“<span>no</span>”
</li>
</ul>
<p><span>We found a specific problem that can be solved by a TM, but is out of reach of any FSM. So it</span>
<span>necessary follows that there isn</span>’<span>t an FSM that can simulate an arbitrary TM.</span></p>
<p><span>It is also useful to take a closer look at the tape. It is a convenient skeuomorphic abstraction</span>
<span>which makes the behavior of the machine intuitive, but it is inconvenient to implement in a normal</span>
<span>programming language. There isn</span>’<span>t a standard data structure that behaves just like a tape.</span></p>
<p><span>One cool practical trick is to simulate the tape as a pair of stacks. Take this:</span></p>

<figure>


<pre><code><span>Tape: A B C D E F G</span>
<span>Head:     ^</span></code></pre>

</figure>
<p><span>And transform it to something like this:</span></p>

<figure>


<pre><code><span>Left Stack:  [A, B, C]</span>
<span>Right Stack: [G, F, E, D]</span></code></pre>

</figure>
<p><span>That is, everything to the left of the head is one stack, everything to the right, reversed, is the</span>
<span>other.  Here, moving the reading head left or right corresponds to popping a value off one stack and</span>
<span>pushing it onto another.</span></p>
<p><span>So, an equivalent-in-power definition would be to say that an TM is an FSM endowed with two</span>
<span>stacks.</span></p>
<p><span>This of course creates an obvious question: is an FSM with just one stack a thing? Yes! It would be</span>
<span>called a pushdown automaton, and it would correspond to context-free languages. But that</span>’<span>s beyond</span>
<span>the scope of this post!</span></p>
<p><span>There</span>’<span>s yet another way to look at the tape, or the pair of stacks, if the set of symbols is 0 and</span>
<span>1. You could say that a stack is just a number! So, something like</span>
<code>[1, 0, 1, 1]</code>
<span>will be</span>
<span><code>1 + 2 + 8 = 11</code><span>.</span></span>
<span>Looking at the top of the stack is </span><code>stack % 2</code><span>, removing item from the stack is </span><code>stack / 2</code><span> and</span>
<span>pushing x onto the stack is </span><code>stack * 2 + x</code><span>. We won</span>’<span>t need this </span><em><span>right</span></em><span> now, so just hold onto ths</span>
<span>for a brief moment.</span></p>
</section>
<section id="Turing-Machine-Limits">

    <h2>
    <a href="#Turing-Machine-Limits"><span>Turing Machine: Limits</span> </a>
    </h2>
<p><span>Ok, so we have some idea about the lower bound for a power of a Turing Machine </span>—<span> FSMs are strictly</span>
<span>less expressive. What about the opposite direction? Is there some computation that a Turing Machine</span>
<span>is incapable of doing?</span></p>
<p><span>Yes! Let</span>’<span>s construct a function which maps natural numbers to natural numbers, which can</span>’<span>t be</span>
<span>implemented by a Turing Machine. Recall that we can encode an arbitrary Turing Machine as text. That</span>
<span>means that we can actually enumerate all possible Turing Machines, and write then in a giant line,</span>
<span>from the most simple Turing Machine to more complex ones:</span></p>

<figure>


<pre><code><span>TM_0</span>
<span>TM_1</span>
<span>TM_2</span>
<span>...</span>
<span>TM_326</span>
<span>...</span></code></pre>

</figure>
<p><span>This is of course going to be an infinite list.</span></p>
<p><span>Now, let</span>’<span>s see how TM0 behaves on input </span><code>0</code><span>: it either prints something, or doesn</span>’<span>t terminate. Then,</span>
<span>note how TM1 behaves on input </span><code>1</code><span>, and generalizing, create function </span><code>f</code><span> that behaves as the nth TM</span>
<span>on input </span><code>n</code><span>. It might look something like this:</span></p>

<figure>


<pre><code><span>f(0) = 0</span>
<span>f(1) = 111011</span>
<span>f(2) = doesn't terminate</span>
<span>f(3) = 0</span>
<span>f(4) = 101</span>
<span>...</span></code></pre>

</figure>
<p><span>Now, let</span>’<span>s construct function </span><code>g</code><span> which is maximally diffed from </span><code>f</code><span>: where </span><code>f</code><span> gives </span><code>0</code><span>, </span><code>g</code><span> will</span>
<span>return </span><code>1</code><span>, and it will return </span><code>0</code><span> in all other cases:</span></p>

<figure>


<pre><code><span>g(0) = 1</span>
<span>g(1) = 0</span>
<span>g(2) = 0</span>
<span>g(3) = 1</span>
<span>g(4) = 0</span>
<span>...</span></code></pre>

</figure>
<p><span>There isn</span>’<span>t a Turing machine that computes </span><code>g</code><span>. For suppose there is. Then, it exists in our list of</span>
<span>all Turing Machines somewhere. Let</span>’<span>s say it is TM1000064. So, if we feed </span><code>0</code><span> to it, it will return</span>
<code>g(0)</code><span>, which is </span><code>1</code><span>, which is different from </span><code>f(0)</code><span>. And the same holds for </span><code>1</code><span>, and </span><code>2</code><span>, and </span><code>3</code><span>.</span>
<span>But once we get to </span><code>g(1000064)</code><span>, we are in trouble, because, by the definition of </span><code>g</code><span>, </span><code>g(1000064)</code>
<span>is different from what is computed by TM1000064! So such a machine is impossible.</span></p>
<p><span>Those math savvy might express this more succinctly </span>—<span> there</span>’<span>s a countably-infinite number of</span>
<span>Turing Machines, and an uncountably-infinite number of functions. So there </span><em><span>must</span></em><span> be some functions</span>
<span>which do not have a corresponding Turing Machine. It is the same proof </span>—<span> the diagonalization</span>
<span>argument is hiding in the claim that the set of all functions is an uncountable set.</span></p>
<p><span>But this is super weird and abstract. Let</span>’<span>s rather come up with some very specific problem which</span>
<span>isn</span>’<span>t solvable by a Turing Machine. The halting problem: given source code for a Turing Machine and</span>
<span>its input, determine if the machine halts on this input eventually.</span></p>
<p><span>As we have waved our hands sufficiently vigorously to establish that Python and Turing Machines have</span>
<span>equivalent computational power, I am going to try to solve this in Python:</span></p>

<figure>


<pre><code><span><span>def</span> <span>halts</span>(<span>program_source_code: <span>str</span>, program_input: <span>str</span></span>) -&gt; Bool:</span>
<span>    <span># One million lines of readable, but somewhat</span></span>
<span>    <span># unsettling and intimidating Python code.</span></span>
<span>    <span>return</span> the_answer</span>
<span></span>
<span>raw_input = <span>input</span>()</span>
<span>[program_source_code, program_input] = parse(raw_input)</span>
<span><span>print</span>(<span>"Yes"</span> <span>if</span> halts(program_source_code, program_input) <span>else</span> <span>"No"</span>)</span></code></pre>

</figure>
<p><span>Now, I will do a weird thing and start asking whether a program termintates, if it is fed its own</span>
<span>source code, in a reverse-quine of sorts:</span></p>

<figure>


<pre><code><span><span>def</span> <span>halts_on_self</span>(<span>program_source_code: <span>str</span></span>) -&gt; Bool:</span>
<span>    program_input = program_source_code</span>
<span>    <span>return</span> halts(program_source_code, program_input)</span></code></pre>

</figure>
<p><span>and finally I construct this weird beast of a program:</span></p>

<figure>


<pre><code><span><span>def</span> <span>halts</span>(<span>program_source_code: <span>str</span>, program_input: <span>str</span></span>) -&gt; Bool:</span>
<span>    <span># ...</span></span>
<span>    <span>return</span> the_answer</span>
<span></span>
<span><span>def</span> <span>halts_on_self</span>(<span>program_source_code: <span>str</span></span>) -&gt; Bool:</span>
<span>    program_input = program_source_code</span>
<span>    <span>return</span> halts(program_source_code, program_input)</span>
<span></span>
<span><span>def</span> <span>weird</span>(<span>program_input</span>):</span>
<span>    <span>if</span> halts_on_self(program_input):</span>
<span>        <span>while</span> <span>True</span>:</span>
<span>            <span>pass</span></span>
<span></span>
<span>weird(<span>input</span>())</span></code></pre>

</figure>
<p><span>To make this even worse, I</span>’<span>ll feed the text of this </span><code>weird</code><span> program to itself. Does it terminate</span>
<span>with this input? Well, if it terminates, and if our </span><code>halts</code><span> function is implemented correctly, then</span>
<span>the </span><code>halts_on_self(program_input)</code><span> invocation above returns </span><code>True</code><span>. But then we enter the infinite</span>
<span>loop and don</span>’<span>t actually terminate.</span></p>
<p><span>Hence, it must be the case that </span><code>weird</code><span> does not terminate when self-applied. But then</span>
<code>halts_on_self</code><span> returns </span><code>False</code><span>, and it should terminate. So we get a contradiction both ways. Which</span>
<span>necessary means that either our </span><code>halts</code><span> sometimes returns a straight-up incorrect answer, or that it</span>
<span>sometimes does not terminate.</span></p>
<p><span>So this is the flip side of Turing Machine</span>’<span>s power </span>—<span> it is so powerful that it becomes impossible</span>
<span>to tell whether it</span>’<span>ll terminate or not!</span></p>
<p><span>It actually gets much worse, because this result can be generalized to an unreasonable degree!</span>
<span>In general, there</span>’<span>s very little we can say about arbitrary programs.</span></p>
<p><span>We can easily check syntactic properties (is the program text shorter than 4 kilobytes?), but they</span>
<span>are, in some sense, not very interesting, as they depend a lot on how exactly one writes a program.</span>
<span>It would be much more interesting to check some refactoring-invariant properties, which hold when</span>
<span>you change the text of the program, but leave the behavior intact. Indeed, </span>“<span>does this change</span>
<span>preserve behavior?</span>”<span> would be one very useful property to check!</span></p>
<p><span>So let</span>’<span>s define two TMs to be equivalent, if they have identical behavior. That is, for each</span>
<span>specific input, either both machines don</span>’<span>t terminate, or they both halt, and give identical results.</span></p>
<p><span>Then, our refactoring-invariant properties are, by definition, properties that hold (or do not hold)</span>
<span>for the entire classes of equivalence of TMs.</span></p>
<p><span>And a somewhat depressing result here is that there are no non-trivial refactoring-invariant</span>
<span>properties that you can algorithmically check.</span></p>
<p><span>Suppose we have some magic TM, called P, which checks such a property. Let</span>’<span>s show that, using P, we can</span>
<span>solve the problem we know we can not solve </span>—<span> the halting problem.</span></p>
<p><span>Consider a Turing Machine that is just an infinite loop and never terminates, M1. P might or might</span>
<span>not hold for it. But, because P is not-trivial (it holds for some machines and doesn</span>’<span>t hold for some</span>
<span>machines), there</span>’<span>s some different machine M2 which differs from M1 with respect to P. That is,</span>
<code>P(M1) xor P(M2)</code><span> holds.</span></p>
<p><span>Let</span>’<span>s use these M1 and M2 to figure out where a given machine M halts on input I. Using Universal</span>
<span>Turing Machine (interpreter), we can construct a new machine, M12 that just runs M on input I, then</span>
<span>erases the contents of the tape and runs M2. Now, if M halts on I, then the resulting machine M12 is</span>
<span>behaviorally-equivalent to M2. If M doesn</span>’<span>t halt on I, then the result is equivalent to the infinite</span>
<span>loop program, M1. Or, in pseudo-code:</span></p>

<figure>


<pre><code><span><span>def</span> <span>M1</span>(<span><span>input</span></span>):</span>
<span>    <span>while</span> <span>True</span>:</span>
<span>        <span>pass</span></span>
<span></span>
<span><span>def</span> <span>M2</span>(<span><span>input</span></span>):</span>
<span>    <span># We don't actually know what's here</span></span>
<span>    <span># but we know that such a machine exists.</span></span>
<span></span>
<span><span>assert</span>(P(M1) != P(M2))</span>
<span></span>
<span><span>def</span> <span>halts</span>(<span>M, I</span>):</span>
<span>    <span>def</span> <span>M12</span>(<span><span>input</span></span>):</span>
<span>        M(I) <span># might or might not halt</span></span>
<span>        <span>return</span> M2(<span>input</span>)</span>
<span></span>
<span>    <span>return</span> P(M12) == P(M2)</span></code></pre>

</figure>
<p><span>This is pretty bad and depressing </span>—<span> can</span>’<span>t learn anything meaningful about an arbitrary Turing</span>
<span>Machine! So let</span>’<span>s finally get to the actual topic of today</span>’<span>s post:</span></p>
</section>
<section id="Primitive-Recursive-Functions">

    <h2>
    <a href="#Primitive-Recursive-Functions"><span>Primitive Recursive Functions</span> </a>
    </h2>
<p><span>This is going to be another computational device, like FSMs and TMs. Like FSM, it</span>’<span>s going to be a</span>
<span>nice, always terminating, non-Turing complete device. But it would turn out to have quite a bit of</span>
<span>power of a full Turing Machine!</span></p>
<p><span>However, unlike both TMs and FSMs, </span><dfn><span>Primitive Recursive Functions</span></dfn><span> are defined directly as</span>
<span>functions which take a tuple of natural numbers and return a natural number. The two simplest ones</span>
<span>are </span><code>zero</code><span> (that is, zero-arity function that returns </span><code>0</code><span>) and </span><code>succ</code><span> </span>—<span> an unary function that</span>
<span>just adds 1. Everything else is going to get constructed out of these two:</span></p>

<figure>


<pre><code><span>zero = 0</span>
<span>succ(x) = x + 1</span></code></pre>

</figure>
<p><span>One way we are allowed to combine these functions is by composition. So we can get all the constants</span>
<span>right of the bat:</span></p>

<figure>


<pre><code><span>succ(zero) = 1</span>
<span>succ(succ(zero)) = 2</span>
<span>succ(succ(succ(zero))) = 2</span></code></pre>

</figure>
<p><span>We aren</span>’<span>t going to get allowed to use general recursion (because it can trivially non-terminate),</span>
<span>but we do get to use a restricted form of C-style loop. It is a bit fiddly to defile formally! The</span>
<span>overall shape is </span><span><code>LOOP(init, f, n)</code><span>.</span></span></p>
<p><span>Here, </span><code>init</code><span> and </span><code>n</code><span> are numbers </span>—<span> initial value of accumulator and the total number of</span>
<span>iterations. The </span><code>f</code><span> is an unary function that specifies the loop body </span>–<span> it takes the current value</span>
<span>of the accumulator and returns the new value. So</span></p>

<figure>


<pre><code><span>LOOP(init, f, 0) = init</span>
<span>LOOP(init, f, 1) = f(init)</span>
<span>LOOP(init, f, 2) = f(f(init))</span>
<span>LOOP(init, f, 3) = f(f(f(init)))</span></code></pre>

</figure>
<p><span>While this is </span><em><span>similar</span></em><span> to a C-style loop, the crucial difference here is that the total number of</span>
<span>iterations </span><code>n</code><span> is fixed up-front. There</span>’<span>s no way to mutate the loop counter in the loop body.</span></p>
<p><span>This allows us to define addition:</span></p>

<figure>


<pre><code><span>add(x, y) = LOOP(x, succ, y)</span></code></pre>

</figure>
<p><span>Multiplication is trickier. Conceptually, to multiply </span><code>x</code><span> and </span><code>y</code><span>, we want to </span><code>LOOP</code><span> from zero, and</span>
<span>repeat </span>“<span>add </span><code>x</code>”<span> </span><code>y</code><span> times. The problem here is that we can</span>’<span>t write </span>“<span>add </span><code>x</code>”<span> function yet</span></p>

<figure>


<pre><code><span># Doesn't work, add is a binary function!</span>
<span>mul(x, y) = LOOP(0, add, y)</span></code></pre>

</figure>

<figure>


<pre><code><span># Doesn't work either, no x in scope!</span>
<span>add_x v = add(x, v)</span>
<span>mul(x, y) = LOOP(0, add_x, y)</span></code></pre>

</figure>
<p><span>One way around this is to defile </span><code>LOOP</code><span> as a family of operators, which can pass extra arguments to</span>
<span>the iteration function:</span></p>

<figure>


<pre><code><span>LOOP0(init, f, 2) = f(f(init))</span>
<span>LOOP1(c1, init, f, 2) = f(c1, f(c1, init))</span>
<span>LOOP2(c1, c2, init, f, 2) = f(c1, c2, f(c1, c2, init))</span></code></pre>

</figure>
<p><span>That is, </span><code>LOOP_N</code><span> takes extra </span><code>n</code><span> arguments, and passes them through to any invocation of the body</span>
<span>function. To express this idea a little bit more succinctly, let</span>’<span>s just allow to partially  apply</span>
<span>the second argument of </span><code>LOOP</code><span>. That is:</span></p>
<ul>
<li>
<span>All our functions are going to be first order. All arguments are numbers, the result is a number.</span>
<span>There aren</span>’<span>t high order functions, there aren</span>’<span>t closures.</span>
</li>
<li>
<span>The </span><code>LOOP</code><span> is not a function in our language </span>—<span> its a builtin operator, a keyword. So, for</span>
<span>convenience, we allow to pass partially applied functions to it. But semantically this is</span>
<span>equivalent to just passing in extra argumennts on each iteration.</span>
</li>
</ul>
<p><span>Which finally allows us to write</span></p>

<figure>


<pre><code><span>mul(x, y) = LOOP(0, add x, y)</span></code></pre>

</figure>
<p><span>Ok, so that</span>’<span>s progress </span>—<span> we made something as complicated as multiplication, and we still are in</span>
<span>the guaranteed-to-terminate land. Because each loop has a fixed number of iteration, everything</span>
<span>eventually finishes.</span></p>
<p><span>We can go on and define x</span><sup><span>y</span></sup><span>:</span></p>

<figure>


<pre><code><span>pow(x, y) = LOOP(1, mul x, y)</span></code></pre>

</figure>
<p><span>And this in turn allows to define a couple of concerning fast growing functions:</span></p>

<figure>


<pre><code><span>pow_2(n) = pow(2, n)</span>
<span>pow_2_2(n) = pow_2(pow_2(n))</span></code></pre>

</figure>
<p><span>That</span>’<span>s fun, but to do some programming, we</span>’<span>ll need an </span><code>if</code><span>. We</span>’<span>ll get to it, but first we</span>’<span>ll need</span>
<span>some boolean operations. We can encode </span><code>false</code><span> as </span><code>0</code><span> and </span><code>true</code><span> as </span><code>1</code><span>. Then</span></p>

<figure>


<pre><code><span>and(x, y) = mul(x, y)</span></code></pre>

</figure>
<p><span>But </span><code>or</code><span> creates a problem: we</span>’<span>ll need a subtraction.</span></p>

<figure>


<pre><code><span>or(x, y) = sub(</span>
<span>  add(x, y),</span>
<span>  mul(x, y),</span>
<span>)</span></code></pre>

</figure>
<p><span>Defining </span><code>sub</code><span> is tricky, due to two problems:</span></p>
<p><span>First, we only have natural numbers, no negatives. This one is easy to solve </span>—<span> we</span>’<span>ll just define</span>
<span>subtraction to saturate.</span></p>
<p><span>The second problem is more severe </span>—<span> I think we actually can</span>’<span>t express subtraction given the set of</span>
<span>allowable operations so far. That is because all our operations are monotonic </span>—<span> the result is</span>
<span>never less than the arguments. One way to solve this problem is to defile the LOOP in such a way</span>
<span>that the body function also gets passed a second argument </span>—<span> the current iteration. So, if you</span>
<span>iterate up to </span><code>n</code><span>, the last iteration will observe </span><code>n - 1</code><span>, and that would be the non-monotonic</span>
<span>operation that creates subtraction. But that seems somewhat inelegant to me, so instead I will just</span>
<span>add a </span><code>pred</code><span> function to the basis, and use that to add loop counters to our iterations.</span></p>

<figure>


<pre><code><span>pred(0) = 0 # saturate</span>
<span>pred(1) = 0</span>
<span>pred(2) = 1</span>
<span>...</span></code></pre>

</figure>
<p><span>Now we can say:</span></p>

<figure>


<pre><code><span>sub(x, y) = LOOP(x, pred, y)</span>
<span></span>
<span>and(x, y) = mul(x, y)</span>
<span>or(x, y) = sub(</span>
<span>  add(x, y),</span>
<span>  mul(x, y)</span>
<span>)</span>
<span>not(x) = sub(1, x)</span>
<span></span>
<span>if(cond, a, b) = add(</span>
<span>  mul(a, cond),</span>
<span>  mul(b, not(cond)),</span>
<span>)</span></code></pre>

</figure>
<p><span>And now we can do a bunch of comparison operators:</span></p>

<figure>


<pre><code><span>is_zero(x) = sub(1, x)</span>
<span></span>
<span># x &gt;= y</span>
<span>ge(x, y) = is_zero(sub(y, x))</span>
<span></span>
<span># x == y</span>
<span>eq(x, y) = and(ge(x, y), ge(y, x))</span>
<span></span>
<span># x &gt; y</span>
<span>gt(x, y) = and(ge(x, y), not(eq(x, y)))</span>
<span></span>
<span># x &lt; y</span>
<span>lt(x, y) = gt(y, x)</span></code></pre>

</figure>
<p><span>With that we could implement modulus. To compute </span><code>x % m</code><span> we will start with </span><code>x</code><span>, and will be</span>
<span>subtracting </span><code>m</code><span> until we get a number smaller than </span><code>m</code><span>. We</span>’<span>ll need at most </span><code>x</code><span> iterations for that.</span></p>
<p><span>In pseudo-code:</span></p>

<figure>


<pre><code><span><span>def</span> <span>mod</span>(<span>x, m</span>):</span>
<span>  current = x</span>
<span></span>
<span>  <span>for</span> _ <span>in</span> <span>0.</span>.x:</span>
<span>    <span>if</span> current &lt; m:</span>
<span>      current = current</span>
<span>    <span>else</span>:</span>
<span>      current = current - m</span>
<span></span>
<span>  <span>return</span> current</span></code></pre>

</figure>
<p><span>And as a bona fide PRF:</span></p>

<figure>


<pre><code><span>mod_iter(m, x) = if(</span>
<span>  lt(x, m),</span>
<span>  x,        # then</span>
<span>  sub(x, m) # else</span>
<span>)</span>
<span>mod(x, m) = LOOP(x, mod_iter m, x)</span></code></pre>

</figure>
<p><span>That</span>’<span>s a curious structure </span>—<span> rather than computing the modulo directly, we essentially search for</span>
<span>it using trial and error, and relying on the fact that the search has a clear upper bound.</span></p>
<p><span>Division can be done similarly: to divide x by y, start with 0, and then repeatedly add one to the</span>
<span>accumulator until the product of accumulator and y exceeds x:</span></p>

<figure>


<pre><code><span>div_iter x y acc = if(</span>
<span>  le(mul(succ(acc), y), y),</span>
<span>  succ(acc), # then</span>
<span>  acc        # else</span>
<span>)</span>
<span>div(x, y) = LOOP(0, div_iter x y, x)</span></code></pre>

</figure>
<p><span>This really starts looking like programming! One thing we are currently missing are data structures.</span>
<span>While our functions take multiple arguments, they only return one number. But it</span>’<span>s easy enough to</span>
<span>pack two numbers into one: to represent an </span><code>(a, b)</code><span> pair, we</span>’<span>ll use 2</span><sup><span>a</span></sup><span> 3</span><sup><span>b</span></sup><span> number:</span></p>

<figure>


<pre><code><span>mk_pair(a, b) = mul(pow(2, a), pow(3, b))</span></code></pre>

</figure>
<p><span>To deconstruct such a pair into its first and second components, we need to find the maximum power</span>
<span>of 2 or 3 that divides our number. Which is exactly the same shape we used to implement </span><code>div</code><span>:</span></p>

<figure>


<pre><code><span>max_factor_iter p m acc = if(</span>
<span>  is_zero(mod(p, pow(m, succ(acc)))),</span>
<span>  succ(acc), # then</span>
<span>  acc,       # else</span>
<span>)</span>
<span>max_factor(p, m) = LOOP(0, max_factor_iter p m, p)</span>
<span></span>
<span>fst(p) = max_factor(p, 2)</span>
<span>snd(p) = max_factor(p, 3)</span></code></pre>

</figure>
<p><span>Here again we use the fact that the maximal power of two that divides </span><code>p</code><span> is not larger than </span><code>p</code>
<span>itself, so we can over-estimate the number of iterations we</span>’<span>ll need as </span><code>p</code><span>.</span></p>
<p><span>Using this pair construction, we can finally add a loop counter to our </span><code>LOOP</code><span> construct. To track</span>
<span>the counter, we pack it as a pair with the accumulator:</span></p>

<figure>


<pre><code><span>LOOP(mk_pair(init, 0), f, n)</span></code></pre>

</figure>
<p><span>And then inside f, we first unpack that pair into accumulator and counter, pass them to actual loop</span>
<span>iteration, and then pack the result again, incrementing the counter:</span></p>

<figure>


<pre><code><span>f acc = mk_pair(</span>
<span>  g(fst(acc), snd(acc)),</span>
<span>  succ(snd(acc)),</span>
<span>)</span></code></pre>

</figure>
<p><span>Ok, so we have achieved something remarkable: while we are writing terminating-by-construction</span>
<span>programs, which are definitely not Turing complete, we have constructed basic programming staples,</span>
<span>like boolean logic and data structures, and we have also build some rather complicated mathematical</span>
<span>functions, like </span><span><span>2</span><sup><span>2</span><sup><span>N</span></sup></sup><span>.</span></span></p>
<p><span>We could try to further enrich our little primitive recursive kingdom by adding more and more</span>
<span>functions on the ad hoc basis, but let</span>’<span>s try to be really ambitious and go for the main prize </span>—
<span>simulating Turing Machines.</span></p>
<p><span>We know that we will fail: Turing machine can enter the infinite loop, but PRF necessary terminates.</span>
<span>That means, that, if PRF were able to simulate an arbitrary TM, it would have to say after certain</span>
<span>finite amount of steps that </span>“<span>this TM doesn</span>’<span>t terminate</span>”<span>.  And, while we didn</span>’<span>t do this, it</span>’<span>s easy to</span>
<span>see that you </span><em><span>could</span></em><span> simulate the other way around and implement PRFs in a TM. But that would give</span>
<span>us an TM algorithm to decide if an arbitrary TM halts, which we know doesn</span>’<span>t exist.</span></p>
<p><span>So, this is hopeless! But we might still be able to learn something from failing.</span></p>
<p><span>Ok! So let</span>’<span>s start with a configuration of a TM which we somehow need to encode into a single</span>
<span>number. First, we need the state variable proper (Q0, Q1, etc), which seems easy enough to represent</span>
<span>with a number. Then, we need a tape and a position of the reading head. Recall how we used a pair of</span>
<span>stacks to represent exactly the tape and the position. And recall that we can look at a stack of</span>
<span>zeros and ones as a number in binary form, where push and pop operations are implemented using </span><code>%</code><span>,</span>
<code>*</code><span>, and </span><code>/</code><span> </span>—<span> exactly the operations we already can do. So, our configuration is just three</span>
<span>numbers: </span><span><code>(S, stack1, stack2)</code><span>.</span></span></p>
<p><span>And, using 2</span><sup><span>a</span></sup><span>3</span><sup><span>b</span></sup><span>5</span><sup><span>c</span></sup><span> trick, we can pack this triple just into a single number. But that means we</span>
<span>could directly encode a single step of a Turing Machine:</span></p>

<figure>


<pre><code><span>single_step(config) = if(</span>
<span>  # if the state is Q0 ...</span>
<span>  eq(fst(config), 0)</span>
<span></span>
<span>  # and the symbol at the top of left stack is 0</span>
<span>  if(is_zero(mod(snd(config), 2))</span>
<span>    mk_triple(</span>
<span>      1,                    # move to state Q1</span>
<span>      div(snd(config), 2),  # pop value from the left stack</span>
<span>      mul(trd(config), 2),  # push zero onto the right stack</span>
<span>    ),</span>
<span>    ... # Handle symbol 1 in state Q1</span>
<span>  )</span>
<span>  # if the state is Q1 ...</span>
<span>  if(eq(fst(config), 1)</span>
<span>    ...</span>
<span>  )</span>
<span>)</span></code></pre>

</figure>
<p><span>And now we could plug that into our </span><code>LOOP</code><span> to simulate Turing Machine running for N steps:</span></p>

<figure>


<pre><code><span>n_steps initial_config n =</span>
<span>  LOOP(initial_config, single_step, n)</span></code></pre>

</figure>
<p><span>The catch of course that we can</span>’<span>t know the </span><code>N</code><span> that</span>’<span>s going to be enough. But we can have a very</span>
<span>good guess! We could do something like this:</span></p>

<figure>


<pre><code><span>hopefully_enough_steps initial_config =</span>
<span>  LOOP(initial_config, single_step, pow_2_2(initial_config))</span></code></pre>

</figure>
<p><span>That is, run for some large tower of exponents of the initial state. Which would be plenty for</span>
<span>normal algorithms, which are usually 2</span><sup><span>N</span></sup><span> at worst!</span></p>
<p><span>Or, generalizing:</span></p>

<figure>
<blockquote><p><span>If a TM has a runtime which is bounded by some primitive-recursive function, then the entire</span>
<span>TM can be replaced with a PRF. Be advised that PRFs can grow </span><em><span>really</span></em><span> fast.</span></p>
</blockquote>

</figure>
<p><span>Which is the headline result we have set out to prove!</span></p>
</section>
<section id="Primitive-Recursive-Functions-Limit">

    <h2>
    <a href="#Primitive-Recursive-Functions-Limit"><span>Primitive Recursive Functions: Limit</span> </a>
    </h2>
<p><span>It might seem that non-termination is the only principle obstacle. That anything that terminates at</span>
<span>all has to be implementable as a PRF. Alas, that</span>’<span>s not so. Let</span>’<span>s go and construct a function that is</span>
<span>surmountable by a TM, but is out of reach of PRFs.</span></p>
<p><span>We will combine the ideas of the impossibility proofs for FSMs (noting that if a function is</span>
<span>computed by some machine, that machine has a specific finite size) and TMs (diagonalization).</span></p>
<p><span>So, suppose we have some function </span><code>f</code><span> that can</span>’<span>t be computed by a PRF. How would we go about proving</span>
<span>that? Well, we</span>’<span>d start with </span>“<span>suppose that we have a PRF P that computes </span><code>f</code>”<span>. And then we could</span>
<span>notice that P would save some finite size. If you look at it abstractly, the P is its syntax tree,</span>
<span>with lots of </span><code>LOOP</code><span> construct, but it always boils down to some </span><code>succ</code><span>s and </span><code>zero</code><span>s at the leaves.</span>
<span>Let</span>’<span>s say that the depth of P is </span><code>d</code><span>.</span></p>
<p><span>And, actually, if you look at it, there are only finite number of PRFs with depth at most </span><code>d</code><span>. Some</span>
<span>of them describe pretty fast growing functions. But probably there</span>’<span>s a limit to how fast a function</span>
<span>can grow, given that it is computed by a PRF of size </span><code>d</code><span>. Or, to use a concrete example: we have</span>
<span>constructed a PRF of depth 5 that computes two to the power of two to the power of N. Probably if we</span>
<span>were smarter, we could have squeezed a couple more levels into that tower of exponents. But</span>
<span>intuitively it seems that if you build a tower of, say, 10 exponents, that would grow faster than</span>
<em><span>any</span></em><span> PRF of depth </span><code>5</code><span>. And that this generalizes </span>—<span> for any fixed depth, there</span>’<span>s a high-enough</span>
<span>tower of exponents that grows faster than any PRF with that depth.</span></p>
<p><span>So we could conceivably build an </span><code>f</code><span> that defeats our </span><code>d</code><span>-deep P. But that</span>’<span>s not quite a victory</span>
<span>yet: maybe that </span><code>f</code><span> is feasible for </span><code>d+2</code><span>-deep PRF! So here we</span>’<span>ll additionally apply</span>
<span>diagonalization: for each depth, we</span>’<span>ll build it</span>’<span>s own depth-specific nemesis </span><code>f_d</code><span>. And then we</span>’<span>ll</span>
<span>define our overall function as</span></p>

<figure>


<pre><code><span>a(n) = f_n(n)</span></code></pre>

</figure>
<p><span>So, for </span><code>n</code><span> large enough it</span>’<span>ll grow faster than a PRF with any fixed depth.</span></p>
<p><span>So that</span>’<span>s the general plan, the rest of the own is basically just calculating the upper bound on the</span>
<span>growth of a PRF of depth </span><code>d</code><span>.</span></p>
<p><span>One technical difficulty here is that PRFs tend to have different artities:</span></p>

<figure>


<pre><code><span>f(x, y)</span>
<span>g(x, y, z, t)</span>
<span>h(x)</span></code></pre>

</figure>
<p><span>Ideally, we</span>’<span>d use just one upper bound of them all. So we</span>’<span>ll be looking for an upper bound of the</span>
<span>following form:</span></p>

<figure>


<pre><code><span>f(x, y, z, t) &lt;= A_d(max(x, y, z, t))</span></code></pre>

</figure>
<p><span>That is:</span></p>
<ul>
<li>
<span>Compute the depth of </span><code>f</code><span>, </span><code>d</code><span>.</span>
</li>
<li>
<span>Compute the largest of its arguments.</span>
</li>
<li>
<span>And plug that into unary function for depth </span><code>d</code><span>.</span>
</li>
</ul>
<p><span>Let</span>’<span>s start with </span><code>d=1</code><span>. We have only primitive functions on this level, </span><code>succ</code><span>, </span><code>zero</code><span>, and </span><code>pred</code><span>,</span>
<span>so we could say that</span></p>

<figure>


<pre><code><span>A_1(x) = x + 1</span></code></pre>

</figure>
<p><span>Now, let</span>’<span>s handle arbitrary other depth </span><code>d + 1</code><span>. In that case, our function is non-primitive, so at</span>
<span>the root of the syntax tree we have either a composition or a </span><code>LOOP</code><span>.</span></p>
<p><span>Composition would look like this:</span></p>

<figure>


<pre><code><span>f(x, y, z, ...) = g(</span>
<span>  h1(x, y, z, ...),</span>
<span>  h2(x, y, z, ...),</span>
<span>  h3(x, y, z, ...),</span>
<span>)</span></code></pre>

</figure>
<p><span>where </span><code>g</code><span> and </span><code>h_n</code><span> are </span><code>d</code><span> deep and the resulting </span><code>f</code><span> is </span><code>d+1</code><span> deeep. We can immediately estimate</span>
<span>the </span><code>h_n</code><span> then:</span></p>

<figure>


<pre><code><span>f(args...) &lt;= g(</span>
<span>  A_d(maxarg),</span>
<span>  A_d(maxarg),</span>
<span>  A_d(maxarg),</span>
<span>  ...</span>
<span>)</span></code></pre>

</figure>
<p><span>In this somewhat loose notation, </span><code>args...</code><span> stands for a tuple of arguments, and </span><code>maxarg</code><span> stands for</span>
<span>the largest one.</span></p>
<p><span>And then we could use the same estimate for </span><code>g</code><span>:</span></p>

<figure>


<pre><code><span>f(args...) &lt;= A_d(A_d(maxarg))</span></code></pre>

</figure>
<p><span>This is super high-order, so let</span>’<span>s do a concrete example for depth-2 two-argument function which</span>
<span>starts with a composition:</span></p>

<figure>


<pre><code><span>f(x, y) &lt;= A_1(A_1(max(x, y)))</span>
<span>         = A_1(max(x, y) + 1)</span>
<span>         = max(x, y) + 2</span></code></pre>

</figure>
<p><span>This sounds legit: if we don</span>’<span>t use LOOP, then </span><code>f(x, y)</code><span> is either </span><code>succ(succ(x))</code><span> or </span><code>succ(succ(y))</code>
<span>so </span><code>max(x, y) + 2</code><span> indeed is the bound!</span></p>
<p><span>Ok, now the fun case! If the top-level node is a </span><code>LOOP</code><span>, then we have</span></p>

<figure>


<pre><code><span>f(args...) = LOOP(</span>
<span>  g(args...),</span>
<span>  h(args...),</span>
<span>  t(args...),</span>
<span>)</span></code></pre>

</figure>
<p><span>This sounds complicated to estimate, especially due to that last </span><code>t(args...)</code><span> argument, which is the</span>
<span>number of iterations. So we</span>’<span>ll be cowards and </span><em><span>won</span>’<span>t</span></em><span> actually try to estimate this case. Instead,</span>
<span>we will require that our PRF is written in a simplified form, where the first and the last arguments</span>
<span>to </span><code>LOOP</code><span> are simple.</span></p>
<p><span>So, if your PRF looks like</span></p>

<figure>


<pre><code><span>f(x, y) = LOOP(x + y, mul, pow2(x))</span></code></pre>

</figure>
<p><span>you are required to re-write it first as</span></p>

<figure>


<pre><code><span>helper(u, v) = LOOP(u, mul, v)</span>
<span>f(x, y) = helper(x + y, pow2(x))</span></code></pre>

</figure>
<p><span>So now we only have to deal with this:</span></p>

<figure>


<pre><code><span>f(args...) = LOOP(</span>
<span>  arg,</span>
<span>  g(args...),</span>
<span>  arg,</span>
<span>)</span></code></pre>

</figure>
<p><code>f</code><span> has depth </span><code>d+1</code><span>, </span><code>g</code><span> has depth </span><code>d</code><span>.</span></p>
<p><span>On the first iteration, we</span>’<span>ll call </span><code>g(args..., arg)</code><span>, which we can estimate as </span><code>A_d(maxarg)</code><span>. That</span>
<span>is, </span><code>g</code><span> does get an </span><em><span>extra</span></em><span> argument, but it is one of the original arguments of </span><code>f</code><span>, and we are</span>
<span>looking at the maximum argument anyway, so it doesn</span>’<span>t matter.</span></p>
<p><span>On the second iteration, we are going to call</span>
<code>g(args..., prev_iteration)</code>
<span>which we can estimate as</span>
<span><code>A_d(max(maxarg, prev_iteration))</code><span>.</span></span></p>
<p><span>Now we plug our estimation for the first iteration:</span></p>

<figure>


<pre><code><span>g(args..., prev_iteration)</span>
<span>  &lt;= A_d(max(maxarg, prev_iteration))</span>
<span>  &lt;= A_d(max(maxarg, A_d(maxarg)))</span>
<span>  =  A_d(A_d(maxarg))</span></code></pre>

</figure>
<p><span>That is, the estimate for the first iteration is </span><code>A_d(maxarg)</code><span>. The estimation for the second</span>
<span>iteration adds one more layer: </span><code>A_d(A_d(maxarg))</code><span>. For the third iteration we</span>’<span>ll get</span>
<span><code>A_d(A_d(A_d(maxarg)))</code><span>.</span></span></p>
<p><span>So the overall thing is going to be smaller than </span><code>A_d</code><span> iteratively applied to itself some number of</span>
<span>times, where </span>“<span>some number</span>”<span> is one of the </span><code>f</code><span> original arguments. But no harm</span>’<span>s done if we iterate up</span>
<span>to </span><code>maxarg</code><span>.</span></p>
<p><span>As a sanity check, the worst depth-2 function constructed with iteration is probably</span></p>

<figure>


<pre><code><span>f(x, y) = LOOP(x, succ, y)</span></code></pre>

</figure>
<p><span>which is </span><code>x + y</code><span>. And our estimate gives </span><code>x + 1</code><span> applied </span><code>maxarg</code><span> times to </span><code>maxarg</code><span>, which is </span><code>2 *
maxarg</code><span>, which is indeed the correct upper bound!</span></p>
<p><span>Combining everything together, we have:</span></p>

<figure>


<pre><code><span>A_1(x) = x + 1</span>
<span></span>
<span>f(args...) &lt;= max(</span>
<span>  A_d(A_d(maxarg)),               # composition case</span>
<span>  A_d(A_d(A_d(... A_d(maxarg)))), # LOOP case,</span>
<span>   &lt;-    maxarg A's         -&gt;</span>
<span>)</span></code></pre>

</figure>
<p><span>That </span><code>max</code><span> there is significant </span>—<span> although it seems like the second line, with </span><code>maxarg</code>
<span>applications, is, always going to be longer, </span><code>maxarg</code><span>, in fact, could be as small as zero. But we</span>
<span>can take </span><code>maxarg + 2</code><span> repetitions to fix this:</span></p>

<figure>


<pre><code><span>f(args...) &lt;=</span>
<span>  A_d(A_d(A_d(... A_d(maxarg)))),</span>
<span>  &lt;-    maxarg + 2 A's         -&gt;</span></code></pre>

</figure>
<p><span>So let</span>’<span>s just define </span><code>A_{d+1}(x)</code><span> to make that inequality work:</span></p>

<figure>


<pre><code><span>A_{d+1}(x) = A_d(A_d( .... A_d(x)))</span>
<span>            &lt;- x + 2 A_d's in total-&gt;</span></code></pre>

</figure>
<p><span>Unpacking:</span></p>
<p><span>We define a family of unary functions </span><code>A_d</code><span>, such that each </span><code>A_d</code><span> </span>“<span>grows faster</span>”<span> than any n-ary PRF</span>
<span>of depth </span><code>d</code><span>. If </span><code>f</code><span> is a ternary PRF of depth 3, then </span><span><code>f(1, 92, 10) &lt;= A_3(92)</code><span>.</span></span></p>
<p><span>To evaluate </span><code>A_d</code><span> at point </span><code>x</code><span>, we use the following recursive procedure:</span></p>
<ul>
<li>
<span>If </span><code>d</code><span> is </span><code>1</code><span>, return </span><code>x + 1</code><span>.</span>
</li>
<li>
<span>Otherwise, evaluate </span><code>A_{d-1}</code><span> at point </span><code>x</code><span> to get, say, </span><code>v</code><span>. Then evaluate </span><code>A_{d-1}</code><span> again at</span>
<span>point </span><code>v</code><span> this time, yielding </span><code>u</code><span>. Then compute </span><code>A_{d-1}(u)</code><span>. Overall, repeat this process </span><code>x+2</code>
<span>times, and return the final number.</span>
</li>
</ul>
<p><span>We can simplify this a bit if we stop treating </span><code>d</code><span> as a kind of function </span><em><span>index</span></em><span>, and instead say</span>
<span>that our </span><code>A</code><span> is just a function of two arguments. Then we have the following equations:</span></p>

<figure>


<pre><code><span>A(1, x) = x + 1</span>
<span>A(d + 1, x) = A(d, A(d, A(d, ..., A(d, x))))</span>
<span>                &lt;- x + 2 A_d's in total-&gt;</span></code></pre>

</figure>
<p><span>The last equation can re-formatted as</span></p>

<figure>


<pre><code><span>A(</span>
<span>  d,</span>
<span>  A(d, A(d, ..., A(d, x))),</span>
<span>  &lt;- x + 1 A_d's in total-&gt;</span>
<span>)</span></code></pre>

</figure>
<p><span>And for non-zero x that is just</span></p>

<figure>


<pre><code><span>A(</span>
<span>  d,</span>
<span>  A(d + 1, x - 1),</span>
<span>)</span></code></pre>

</figure>
<p><span>So we get the following recursive definition for A(d, x):</span></p>

<figure>


<pre><code><span>A(1, x) = x + 1</span>
<span>A(d + 1, 0) = A(d, A(d, 0))</span>
<span>A(d + 1, x) = A(d, A(d + 1, x - 1))</span></code></pre>

</figure>
<p><span>As a Python program:</span></p>

<figure>


<pre><code><span>def A(d, x):</span>
<span>  if d == 1: return x + 1</span>
<span>  if x == 0: return A(d-1, A(d-1, 0))</span>
<span>  return A(d-1, A(d, x - 1))</span></code></pre>

</figure>
<p><span>It</span>’<span>s easy to see that computing </span><code>A</code><span> on a Turing Machine using this definition terminates </span>—<span> this</span>
<span>is a function with two arguments, and every recursive call uses lexicographically smaller pair of</span>
<span>arguments. And we constructed A in such a way that </span><code>A(d, x)</code><span> as a function of </span><code>x</code><span> is larger than any</span>
<span>PRF with a single argument of depth d. But that means that the following function with one argument</span>
<code>a(x) = A(x, x) </code></p>
<p><span>grows faster than </span><em><span>any</span></em><span> PRF. And that</span>’<span>s an example of a function which a Turing Machine have no</span>
<span>trouble computing (given sufficient time), but which is beyond the capabilities of PRF.</span></p>
</section>
<section id="Part-III-Descent-From-the-Ivory-Tower">

    <h2>
    <a href="#Part-III-Descent-From-the-Ivory-Tower"><span>Part III, Descent From the Ivory Tower</span> </a>
    </h2>
<p><span>Remember, this is a tree-part post! And are finally at the part 3! So let</span>’<span>s circe back to the</span>
<span>practical matters. We have learned that:</span></p>
<ul>
<li>
<span>Turing machines don</span>’<span>t necessary terminate.</span>
</li>
<li>
<span>While other computational devices, like FSMs and PRFs, can be made to always terminate, there</span>’<span>s no</span>
<span>guarantee that they</span>’<span>ll terminate fast. PRFs in particular, can compute quite large functions!</span>
</li>
<li>
<span>And non-Turing complete devices can be quiet expressive. For example, any real-world algorithm</span>
<span>that works on a TM can be adapted to run as a PRF.</span>
</li>
<li>
<span>Moreover, you don</span>’<span>t even have to contort the algorithm much to make it fit. There</span>’<span>s a universal</span>
<span>recipe for how to take something Turing complete, and make it a primitive recursive function</span>
<span>instead </span>—<span> just add an iteration counter to the device, and forcibly halt it if the counter grows</span>
<span>too large.</span>
</li>
</ul>
<p><span>Or, more succinctly: there</span>’<span>s no practical difference between a program that doesn</span>’<span>t terminate, and</span>
<span>the one that terminates after a billion years. As a practitioner, if you think you need to solve the</span>
<span>first problem, you need to solve the second problem as well. And making your programming language</span>
<span>non-Turing complete doesn</span>’<span>t really help this.</span></p>
<p><span>And yet, there are a lot of configuration languages out there, that use non-Turing completeness as</span>
<span>one of the key design goal. Why is that?</span></p>
<p><span>I would say that we are never interested in Turing-completeness per-se. We usually want some </span><em><span>much</span></em>
<span>stronger properties. And yet, there</span>’<span>s no convenient, catchy name for that bag of features of a good</span>
<span>configuration language. So, </span>“<span>non-Turing-complete</span>”<span> gets used as a sort of rallying cry to signal that</span>
<span>something is a good configuration language, and maybe sometimes even to justify to others inventing</span>
<span>a new language instead of taking something like Lua. That is, the </span><em><span>real</span></em><span> reason why you want at</span>
<span>least a different implementation is all those properties you really need, but they are kinda hard to</span>
<span>explain, or at least much harder than </span>“<span>we can</span>’<span>t use Python/Lua/JavaScript because they are</span>
<span>Turing-complete</span>”<span>.</span></p>
<p><span>So what </span><em><span>are</span></em><span> the properties of a good configuration language?</span></p>
<p><em><span>First</span></em><span>, we need the language to be deterministic. If you launch Python and type </span><code>id([])</code><span>, you</span>’<span>ll</span>
<span>see some number. If you hit </span><code>^C</code><span>, and than do this again, you</span>’<span>ll see a different number. This is OK</span>
<span>for </span>“<span>normal</span>”<span> programming, but is usually anathema for configuration. Configuration is often use as a</span>
<span>key in some incremental, caching system, and letting in non-determinism there wrecks absolute chaos!</span></p>
<p><em><span>Second</span></em><span>, you need the language to be well-defined. You can compile Python with ASLR disabled, and</span>
<span>use some specific allocator, such that </span><code>id([])</code><span> always returns the same result. But that result</span>
<span>would be hard to predict! And if someone tries to do an alternative implementation, even if they</span>
<span>disable ASLR as well, they are likely to get a different deterministic number! Or the same could</span>
<span>happen if you just update the version of Python. So, the semantics of the language should be clearly</span>
<span>pinned-down by some sort of the reference, such that it is possible to guarantee not only</span>
<span>deterministic behavior, but fully identical behavior across different implementations.</span></p>
<p><em><span>Third</span></em><span>, you need the language to be pure. If your configuration can access environment variables or</span>
<span>read files on disk, than the meaning of the configuration would depend on the environment where the</span>
<span>configuration is evaluated, and you again don</span>’<span>t want that, to make caching work.</span></p>
<p><em><span>Fourth</span></em><span>, a thing that is closely related to purity is security and sandboxing. The </span><em><span>mechanism</span></em><span> to</span>
<span>achieve both purity and security is the same </span>—<span> you don</span>’<span>t expose general IO to your language. But</span>
<span>the purpose is different: purity is about not letting the results being non-deterministic, while</span>
<span>security is about not exposing access tokens to the attacker.</span></p>
<p><span>And now this gets tricky. One particular possible attack is a denial of service </span>—<span> sending some bad</span>
<span>config which makes our system to just spin there burning the CPU. Even if you control all IO, you</span>
<span>are generally still open to these kinds of attacks. It might be OK to say this is outside of the</span>
<span>threat model </span>—<span> that no one would find it valuable enough to just burn your CPU, if they can</span>’<span>t also</span>
<span>do IO, and that, even in the event this happens, there</span>’<span>s going to be some easy mitigation in the</span>
<span>form of higher-level timeout.</span></p>
<p><span>But you also might choose to provide some sort of guarantees about execution time, and that</span>’<span>s really</span>
<span>hard. The two approaches work. One is to make sure that processing is </span><em><span>obviously linear</span></em><span>. Not just</span>
<span>terminates, but is actually proportional to the size of inputs, and in a very direct way. If the</span>
<span>correspondence is not direct, than it</span>’<span>s highly likely that it is in fact non linear. The second</span>
<span>approach is to ensure </span><em><span>metered execution</span></em><span> </span>—<span> during processing, decrement a counter for every</span>
<span>simple atomic step and terminate processing when the counter reaches zero.</span></p>
<p><em><span>Finally</span></em><span> one more vague property you</span>’<span>d want from a configuration language is for it to be simple.</span>
<span>That is, to ensure that, when people use your language, they write simple programs. It seems to me</span>
<span>that this might actually be the case where banning recursion and unbounded loops could help, though</span>
<span>I am not sure. As we know from the PRF exercise, this won</span>’<span>t actually prevent people from writing</span>
<span>arbitrary recursive programs. It</span>’<span>ll just require </span><a href="https://mochiro.moe/posts/09-meson-raytracer/"><span>some roundabout</span>
<span>code</span></a><span> to do that. But maybe that</span>’<span>ll be enough of a</span>
<span>speedbump to make someone invent a simple solution, instead of brute-forcing the most obvious one?</span></p>
<p><span>That</span>’<span>s all for today! Have a great weekend, and remember:</span></p>

<figure>
<blockquote><p><span>Any algorithm that can be implemented by a Turing Machine such that its runtime is bounded by some</span>
<span>primitive recursive function of input can also be implemented by a primitive recursive function!</span></p>
</blockquote>

</figure>
</section>
</article>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["We ran out of columns" – The best, worst codebase (1151 pts)]]></title>
            <link>https://jimmyhmiller.github.io/ugliest-beautiful-codebase</link>
            <guid>41146239</guid>
            <pubDate>Sat, 03 Aug 2024 12:26:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jimmyhmiller.github.io/ugliest-beautiful-codebase">https://jimmyhmiller.github.io/ugliest-beautiful-codebase</a>, See on <a href="https://news.ycombinator.com/item?id=41146239">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2>"We ran out of columns" - The best, worst codebase</h2>
<blockquote>
<p>Oh the merchants2 table? Yeah, we ran out of columns on merchants, so we made merchants2</p>
</blockquote>
<p>When I started programming as a kid, I didn't know people were paid to program. Even as I graduated high school, I assumed that the world of "professional development" looked quite different from the code I wrote in my spare time. When I lucked my way into my first software job, I quickly learned just how wrong and how right I had been. My first job was a trial by fire, to this day, that codebase remains the worst and the best codebase I ever had the pleasure of working in. While the codebase will forever remain locked by proprietary walls of that particular company, I hope I can share with you some of its most fun and scary stories.</p>
<h2>The database lives forever</h2>
<p>In a large legacy system, the database is more than a place to store data, it is the culture maker. The database sets the constraints for how the system as a whole operates. It is the point where all code meets. The database is the watering hole. In our case, that watering hole had quite a bit of pollution.</p>
<p>Did you know that SQL Server has a limit on the number of columns you can have in a table? Me neither. At the time it was 1024, today it appears to be 4096. Needless to say, most people don't need to know this. We did. The reason, Merchants (our table to store customer information) ran out of columns a long time ago. Merchants2 was the solution. A table with (if I remember correctly) some 500+ columns itself.&nbsp;</p>
<p>Merchants (and its best friend Merchants2) were the lifeblood of the system. Everything made its way back to Merchants somehow or other. But it wasn't as if Merchants was the solo (or duo) table. There were plenty of properly normalized tables, all with foreign keys to Merchants. But one will always hold a special place in my heart, SequenceKey.</p>
<h3>SequenceKey</h3>
<table><thead><tr><th>SequenceKey</th></tr></thead><tbody><tr><td>1251238 &nbsp; &nbsp;</td></tr></tbody></table>
<p>For ease of understanding, I have recreated the whole of the SequenceKey table above. Yes. You read that correctly, this is the whole table. A table with a single key and a single value. If simplicity is a virtue, then one might declare SequenceKey to be the perfect table. What could be simpler?&nbsp;</p>
<p>But you may be asking yourself, what possible use could you have for a table with one column and row? Generating ids. Now the story I heard at the time was that once upon a time SQL Server didn't support auto-incrementing ids. This was the accepted, correct answer. My search to figure out if this is true was inconclusive. But in practice, it served as much more than that.</p>
<p>SequenceKey was the glue. In every stored procedure that created new entities, you'd first grab a key from SequenceKey, increment it. And then insert that as your ID for N different tables. You now had an implicit join between all these entity tables. If you saw an ID in the system, there was a good chance related tables would have a row with the exact same ID. Honestly kind of clever.</p>
<h3>The Calendar</h3>
<p>A database may live forever, but our login system was limited by the calendar. I don't mean an actual calendar. I mean a database table called calendar. What did it contain? A manually filled-out calendar. When asking our resident shaman (who went by the name Munch), he informed me that when the calendar runs out we can't login to the system. This happened a few years ago. So they had an intern fill out 5 more years to make sure it didn't happen anytime soon. What system used this calendar? No one knew.</p>
<h3>Employees</h3>
<p>Every morning at 7:15 the employees table was dropped. All the data completely gone. Then a csv from adp was uploaded into the table. During this time you couldn't login to the system. Sometimes this process failed. But this wasn't the end of the process. The data needed to be replicated to headquarters. So an email was sent to a man, who every day would push a button to copy the data.</p>
<h3>The replacement database</h3>
<p>You might be thinking to yourself, couldn't someone clean up this database? Make it nicer to work with? Well, the company was way ahead of you. There was a copy of the database. Data in this copy was about 10 minutes out of date. Sync only went one way. But this database was normalized. How normalized? To go from merchants to a phone number was 7 joins.</p>
<h3>The Sales Numbers</h3>
<p>Every salesperson had a quota they needed to meet every month called a "win". The tables that kept this data (not the financial keepings but a sales-specific way of accounting for this), were incredibly complicated. Every day, a job would figure out which rows had been added and updated and sync them with some system at headquarters. This wasn't really a problem until one salesperson figured out they could ask for those records to be manually changed.</p>
<p>This salesperson had already got their win and landed another big sale that month. They wanted it to be moved to next month. An intern was tasked with doing so. Word got out and over the next three years, requests would grow exponentially. At one point we had 3 interns whose full-time job was writing these SQL statements. Writing an application to do this was deemed too difficult. Before I left though, I made sure to help those interns build their own. No idea if it ever took off though.</p>
<h2>The codebase</h2>
<p>But what is a database without a codebase. And what a magnificent codebase it was. When I joined everything was in Team Foundation Server. If you aren't familiar, this was a Microsoft-made centralized source control system. The main codebase I worked in was half VB, half C#. It ran on IIS and used session state for everything. What did this mean in practice? If you navigated to a page via Path A or Path B you'd see very different things on that page.</p>
<p>But to describe this codebase as merely half VB, half C# would be to do it a disservice. Every javascript framework that existed at the time was checked into this repository. Typically, with some custom changes the author believed needed to be made. Most notably, knockout, backbone, and marionette. But of course, there was a smattering of jquery and jquery plugins.</p>
<p>But this codebase didn't stand alone. Next to it were a dozen or so soap services and a handful of native Windows applications. Most notable was the shipping manager. Fable has it the entire application was built in a weekend by a solo developer. Let's call him Gilfoyle. Gilfoyle was by all accounts an incredibly fast programmer. I never met him, but I felt I knew him, not just through his code in the repos, but also through all the code remaining on his hard drives.</p>
<h3>Gilfoyle's Hard Drives</h3>
<p>Munch (yes this was the name he really went by) kept Gilfoyle's hard drive in RAID configuration on his desk years after Gilfoyle had left the company. Why? Because Gilfoyle was known for not checking in code. Not only that, but for building a random one-off windows application for a single user . So it wasn't uncommon to have a user come to us with a bug report for an application that only existed on Gilfoyle's hard drive.</p>
<h3>The Shipping Bug</h3>
<p>Most of my job was tracking down bugs that teams didn't want to dedicate work to. One particularly nasty bug would pop up once every few months. After we shipped things, the shipping queue would have stuck orders in them, that claimed to both be already shipped and not shipped. I went through a series of workarounds (SQL script, windows application, etc) to try and get us out of the broken state. I was advised not to try and track down the root cause. But I couldn't help myself.</p>
<p>Along the way, I learned how Gilfoyle thought. The shipping app pulled down the entire database and then filtered by date, keeping all orders past the go-live date of the application. The app relied on a SOAP service, not to do any servicey things. No, the service was a pure function. It was the client that did all the side effects. In that client, I discovered a massive class hierarchy. 120 classes each with various methods, inheritance going 10 levels deep. The only problem? <strong>ALL THE METHODS WERE EMPTY.</strong> I do not exaggerate here. Not mostly empty. Empty.</p>
<p>That one stumped me for a while. Eventually, I learned this was in service of building a structure he could then use reflection on. That reflection would let him create a pipe-delimited string (whose structure was completely database-driven, but entirely static) that he would send over a socket. Turns out this was all eventually sent to Kewill, the service that talked to shipping carriers. Why did this bug happen? Kewill reused 9-digit long numbers every month, someone had disabled the cron job that deleted the old orders.</p>
<h2>The Beautiful Mess</h2>
<p>There are so many more things to tell from this code base. Like the team of Super Senior developers who were rewriting the whole thing without shipping any code for 5 years. Or the red hat consultants building the one database to rule them all. There were so many crazy corners of this code base. So many reasons why there were whole teams dedicated to starting from scratch on just one bit of its functionality.</p>
<p>But I think the most important story to tell is about Justin's improvement of the Merchants Search page. The Merchants Search page was the entry point into the entire application. Every customer service rep would get on the phone with a merchant and type either their id or name to find their information. That would land you on a massive page with all their information. The page was information-dense in the best way, full of any information you could need and any links you could want to visit. But it was dog slow.</p>
<p>Justin was the sole senior developer in my group. He was bright, snarky, and couldn't care less about the business. He told it like it was, didn't pull punches, and could always solve problems by himself faster than teams around him. One day Justin got tired of hearing about how slow the merchant search page was and went and fixed it. Every box on that screen became its own endpoint. On load, everything above the fold would start fetching, and as one loaded-in, more requests would come in. Took page load time from minutes to sub-second.</p>
<h3>Two ways to decouple</h3>
<p>Why was Justin able to do this? Because this codebase had no master plan. There was no overarching design the system had to fit into. No expected format for APIs. No documented design system. No architectural review board making sure things were coherent. The app was a complete and utter mess. No one could ever fix it, so no one tried to. What did we do instead? We carved out our own little world of sanity.</p>
<p>This monolithic app, due to sheer necessity, had grown to be a microcosm of nice, small apps around its edges. Each person, when tasked with improving some part of that app, would inevitably give up untangling that web, and find some nice little corner to build new things. And then slowly update links to point to their nice new stuff, orphaning the old.</p>
<p>This may sound like a mess to you. But it was remarkably enjoyable to work in. Gone were the concerns of code duplication. Gone were the concerns of consistency. Gone were the concerns of extensibility. Code was written to serve a use, to touch as little of the area around it as possible, and to be easily replaceable. Our code was decoupled, because coupling it was simply harder.</p>
<h2>After</h2>
<p>In my career since, I've never had the privilege of working in such a wonderfully ugly codebase. Every ugly codebase I've encountered since has never transcended its need for consistency. Perhaps it was because the codebase had been abandoned by "serious" developers long before. All that remained were ragtag interns and junior developers. Or perhaps it was because there was no layer between those developers and the users, no translations, no requirements gathering, no cards. Just you standing at the desk of the customer service rep, asking them how you could make their life better.</p>
<p>I miss that direct connection. The fast feedback. The lack of making grand plans. The simple problem and code connection. Perhaps it's simply a naive nostalgia. But just as I find myself laying on a couch longing to go back to some of the worst years of my childhood; when faced with yet another "enterprise design pattern", my mind flashes back to that beautiful, horrible codebase.</p></div></div>]]></description>
        </item>
    </channel>
</rss>