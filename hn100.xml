<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 06 Feb 2025 23:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[R1 Computer Use (102 pts)]]></title>
            <link>https://github.com/agentsea/r1-computer-use</link>
            <guid>42965954</guid>
            <pubDate>Thu, 06 Feb 2025 20:02:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/agentsea/r1-computer-use">https://github.com/agentsea/r1-computer-use</a>, See on <a href="https://news.ycombinator.com/item?id=42965954">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">R1 Computer Use</h2><a id="user-content-r1-computer-use" aria-label="Permalink: R1 Computer Use" href="#r1-computer-use"></a></p>
<p dir="auto">Applying the ideas of <a href="https://github.com/deepseek-ai/DeepSeek-R1">Deepseek R1</a> and <a href="https://github.com/huggingface/open-r1">Open R1</a> to computer use.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Overview</h2><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">r1-computer-use is an experimental project that applies large-scale Reinforcement Learning techniques similar to DeepSeek-R1 to computer usage scenarios. The primary goal is to train an agent to interact with a computer environment (e.g., file system, web browser, command line) while utilizing a neural reward model to validate the correctness of the agent’s actions and reason about intermediate steps.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Architecture</h2><a id="user-content-architecture" aria-label="Permalink: Architecture" href="#architecture"></a></p>
<p dir="auto">DeepSeek-R1 has shown that large language models can develop powerful reasoning skills through iterative reward optimization. Traditionally, such projects rely on hard verifiers or rule-based scripts to determine correctness in tasks like math or coding. However, these methods are too difficult to reproduce at scale for general computer usage.</p>
<p dir="auto">We aim to replace hard-coded verifiers with a neural reward model that itself reasons about whether or not the agent’s actions are correct or helpful.</p>
<p dir="auto">Both the actor and reward models follow a three-step cycle which can be seen as an extention of <a href="https://react-lm.github.io/" rel="nofollow">ReACT</a> into reinforcement learning.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/agentsea/r1-computer-use/blob/main/static/rac.svg"><img src="https://github.com/agentsea/r1-computer-use/raw/main/static/rac.svg" alt="diagram" width="500"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Agent</h2><a id="user-content-agent" aria-label="Permalink: Agent" href="#agent"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="observation = &quot;Current directory contains: setup.py requirements.txt&quot;
reasoning = &quot;&quot;&quot;
1. Project appears to be a Python package
2. No virtual environment detected
3. Should create venv before proceeding
&quot;&quot;&quot;
action = &quot;python -m venv .venv&quot;"><pre><span>observation</span> <span>=</span> <span>"Current directory contains: setup.py requirements.txt"</span>
<span>reasoning</span> <span>=</span> <span>"""</span>
<span>1. Project appears to be a Python package</span>
<span>2. No virtual environment detected</span>
<span>3. Should create venv before proceeding</span>
<span>"""</span>
<span>action</span> <span>=</span> <span>"python -m venv .venv"</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Reward Model</h2><a id="user-content-reward-model" aria-label="Permalink: Reward Model" href="#reward-model"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="analysis = &quot;&quot;&quot;
1. Correctly identified project type
2. Appropriate prerequisite check
3. Standard venv location chosen
&quot;&quot;&quot;
reward = 0.85"><pre><span>analysis</span> <span>=</span> <span>"""</span>
<span>1. Correctly identified project type</span>
<span>2. Appropriate prerequisite check</span>
<span>3. Standard venv location chosen</span>
<span>"""</span>
<span>reward</span> <span>=</span> <span>0.85</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage (in progress)</h2><a id="user-content-usage-in-progress" aria-label="Permalink: Usage (in progress)" href="#usage-in-progress"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="from r1_computer_use import Agent, RewardModel

agent = Agent()
reward_model = RewardModel()

result = agent.run(
    task=&quot;Set up Python development environment&quot;,
    observe_reasoning=True
)

feedback = reward_model.evaluate(
    actions=result.actions,
    reasoning=result.reasoning
)"><pre><span>from</span> <span>r1_computer_use</span> <span>import</span> <span>Agent</span>, <span>RewardModel</span>

<span>agent</span> <span>=</span> <span>Agent</span>()
<span>reward_model</span> <span>=</span> <span>RewardModel</span>()

<span>result</span> <span>=</span> <span>agent</span>.<span>run</span>(
    <span>task</span><span>=</span><span>"Set up Python development environment"</span>,
    <span>observe_reasoning</span><span>=</span><span>True</span>
)

<span>feedback</span> <span>=</span> <span>reward_model</span>.<span>evaluate</span>(
    <span>actions</span><span>=</span><span>result</span>.<span>actions</span>,
    <span>reasoning</span><span>=</span><span>result</span>.<span>reasoning</span>
)</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Training Pipeline</h2><a id="user-content-training-pipeline" aria-label="Permalink: Training Pipeline" href="#training-pipeline"></a></p>
<p dir="auto">The training pipeline consists of multiple stages:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Cold Start</strong></p>
<ul dir="auto">
<li>Expert demonstrations with reasoning traces</li>
<li>Initial reward model training</li>
<li>Base model fine-tuning</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Reasoning-Focused GRPO</strong></p>
<ul dir="auto">
<li>Group-based sampling from current policy</li>
<li>Reward model evaluates each group</li>
<li>Compute advantages within groups</li>
<li>Policy updates with clipped probability ratios</li>
<li>KL divergence constraint with reference policy</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Rejection Sampling Stage</strong></p>
<ul dir="auto">
<li>Filter top-k solutions based on reward model</li>
<li>Create new training dataset from best examples</li>
<li>Fine-tune base model on filtered data</li>
</ul>
</li>
<li>
<p dir="auto"><strong>General Preference Alignment</strong></p>
<ul dir="auto">
<li>Apply RL to full task distribution</li>
<li>Use reward models for general preferences</li>
<li>Focus on helpfulness and safety</li>
<li>Evaluate complete responses</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Evaluation</strong></p>
<ul dir="auto">
<li>Task completion metrics</li>
<li>Reasoning quality assessment</li>
<li>Safety verification</li>
<li>Distribution shift analysis</li>
</ul>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Roadmap</h2><a id="user-content-roadmap" aria-label="Permalink: Roadmap" href="#roadmap"></a></p>
<ul>
<li> Collect cold startand neural reward model data (in progress)</li>
<li> SFT train base model</li>
<li> GRPO RL training</li>
<li> Rejection sampling</li>
<li> General preference alignment</li>
<li> Evaluation</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Research</h2><a id="user-content-research" aria-label="Permalink: Research" href="#research"></a></p>
<p dir="auto">Current areas of investigation:</p>
<ul dir="auto">
<li>Reward model architectures</li>
<li>Base model evaluations</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">MIT</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Citation</h2><a id="user-content-citation" aria-label="Permalink: Citation" href="#citation"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="@software{r1_computer_use,
  title     = {R1-Computer-Use: Reasoning-First Computer Interaction},
  author    = {Barker, Patrick},
  year      = {2025},
  url       = {https://github.com/agentsea/r1-computer-use},
}"><pre><span>@software</span>{<span>r1_computer_use</span>,
  <span>title</span>     = <span><span>{</span>R1-Computer-Use: Reasoning-First Computer Interaction<span>}</span></span>,
  <span>author</span>    = <span><span>{</span>Barker, Patrick<span>}</span></span>,
  <span>year</span>      = <span><span>{</span>2025<span>}</span></span>,
  <span>url</span>       = <span><span>{</span>https://github.com/agentsea/r1-computer-use<span>}</span></span>,
}</pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SQLite Disk Page Explorer (145 pts)]]></title>
            <link>https://github.com/QuadrupleA/sqlite-page-explorer</link>
            <guid>42965198</guid>
            <pubDate>Thu, 06 Feb 2025 18:40:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/QuadrupleA/sqlite-page-explorer">https://github.com/QuadrupleA/sqlite-page-explorer</a>, See on <a href="https://news.ycombinator.com/item?id=42965198">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">SQLite Page Explorer</h2><a id="user-content-sqlite-page-explorer" aria-label="Permalink: SQLite Page Explorer" href="#sqlite-page-explorer"></a></p>
<p dir="auto">A small GUI application built in <a href="https://redbean.dev/" rel="nofollow">redbean</a> that lets you explore your <a href="https://sqlite.com/" rel="nofollow">SQLite</a> databases "page by page" the way SQLite sees them.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/QuadrupleA/sqlite-page-explorer/blob/github_media/github_media/top_view.png"><img src="https://github.com/QuadrupleA/sqlite-page-explorer/raw/github_media/github_media/top_view.png" alt="Top-level view"></a></p>
<hr>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why?</h2><a id="user-content-why" aria-label="Permalink: Why?" href="#why"></a></p>
<p dir="auto">SQLite (and most databases) store data in disk-block-sized pages, usually 4KB, which helps make reads and writes as fast as possible.</p>
<p dir="auto">Normally developers interact with databases on the "schema level" - tables, rows, and SQL. But taking a peek at the "page level" can give you some interesting insights:</p>
<ul dir="auto">
<li>What your indexes actually look like on disk (they're basically separate little tables).</li>
<li>How to store things more compactly (and thus make your queries and applications faster).</li>
<li>Spot problems and inefficiencies you might not see on the schema level.</li>
<li>Gain an intuition for B-Trees, one of computing's most important data structures, the foundation of most filesystems and databases.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Run it anywhere</h2><a id="user-content-run-it-anywhere" aria-label="Permalink: Run it anywhere" href="#run-it-anywhere"></a></p>
<p dir="auto">Thanks to the magic of redbean, <a href="https://github.com/jart/cosmopolitan">cosmopolitan</a> and <a href="https://justine.lol/ape.html" rel="nofollow">αcτµαlly pδrταblε εxεcµταblε</a>, it's just a single 6.5 MB executable that runs natively on Windows, Linux, MacOS, various BSDs, on both ARM64 and x64.</p>
<p dir="auto">It's also a zip file that contains the Lua code that runs the app, parses the database binary format, etc.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How to install</h2><a id="user-content-how-to-install" aria-label="Permalink: How to install" href="#how-to-install"></a></p>
<ul dir="auto">
<li>Download <code>sqlite-page-explorer.com</code> from the <a href="https://github.com/QuadrupleA/sqlite-page-explorer/releases/">releases</a>.</li>
<li>On Unix-likes, <code>chmod +x</code>.</li>
<li>Drag a database file to it, or run it on the console: <code>sqlite-page-explorer.com mySqliteDatabase.db</code>. The app should open in a browser tab.</li>
<li>When you're done, hit Ctrl-C twice in the console.</li>
</ul>
<p dir="auto">You might get virus warnings - αcτµαlly pδrταblε εxεcµταblεs seem to freak out browsers, operating system virus detection, etc. and generate false positives. I trust <a href="https://github.com/jart/">jart</a> is not propagating malware here, and some notable projects like <a href="https://github.com/Mozilla-Ocho/llamafile">llamafile</a> are using these same polyglot binary techniques, but take your usual precautions with anything you download off the internet.</p>
<p dir="auto">Also if you throw a large database at it (500 MB or more) it will likely be slow to load the top-level view, which reads every page.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How to build</h2><a id="user-content-how-to-build" aria-label="Permalink: How to build" href="#how-to-build"></a></p>
<p dir="auto">To build, you just need to <code>zip</code> the contents of <code>files/</code> into the stock <code>redbean-3.0.0-cosmos.com</code> which I downloaded from <a href="https://cosmo.zip/pub/cosmos/bin/" rel="nofollow">https://cosmo.zip/pub/cosmos/bin/</a> (click "redbean" on the list). You might need <code>zip</code> from there too if your system doesn't have it.</p>
<p dir="auto">Or just run the <code>zipitup.py</code> python (3.6+) script that's included.</p>
<p dir="auto">If you want to hack on it, you can run <code>redbean-3.0.0-cosmos.com -D files</code> to serve the app from the <code>files</code> subdirectory, so you don't have to rebuild the zip on every change.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Not a masterpiece</h2><a id="user-content-not-a-masterpiece" aria-label="Permalink: Not a masterpiece" href="#not-a-masterpiece"></a></p>
<p dir="auto">This was partly an experiment to try out redbean, and also my first time using Lua, so the code is probably klunkier than it could be. It might benefit from a templating system, ala Jinja or bottle.py's native templates, rather than so many string concatenations and Write() statements. Would be nice to auto-close the console when the last tab closes, and maybe stop at page 10,000 or so for huge databases, unless the user confirms. PR's welcome!</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scala 3 Migration: Report from the Field (114 pts)]]></title>
            <link>https://blog.pierre-ricadat.com/scala-3-migration-report-from-the-field</link>
            <guid>42964773</guid>
            <pubDate>Thu, 06 Feb 2025 17:54:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.pierre-ricadat.com/scala-3-migration-report-from-the-field">https://blog.pierre-ricadat.com/scala-3-migration-report-from-the-field</a>, See on <a href="https://news.ycombinator.com/item?id=42964773">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-content-parent"><p>April 30, 2024. I decided to dedicate a week to migrate our main project at work (a multiplayer mobile game server in production for over 4 years) from Scala 2.13 to Scala 3.</p>
<p>May 7, 2024. I gave up. The removal of several features from Scala 3 (macro annotations, type projections, etc.), combined with the large number of changes necessary for the migration, was overwhelming. I was barely able to migrate a single module, had to modify thousands of lines of code (while my colleagues were adding new features to the main branch, a large number of merge conflicts were already appearing), and the IDE was completely unresponsive due to hundreds of compile errors. At that point, I thought the project might be stuck on Scala 2 forever.</p>
<p>Flash forward to January 2025. I had a little free time, so I decided to give it another try. And (spoiler!) this time I made it to the end. Let’s see what the various problems I encountered were, the changes I had to make, and the workarounds I implemented.</p>
<h2 id="heading-preamble">Preamble</h2>
<p>The main place to look when starting a migration is the official <a target="_blank" href="https://docs.scala-lang.org/scala3/guides/migration/compatibility-intro.html">Scala 3 Migration Guide</a>. It contains a lot of information about the changes in the language and details on how to proceed.</p>
<p>As I mentioned, the large number of changes required was an issue because it caused a lot of merge conflicts with the main branch. It was not possible to stop all other developments during the migration, so I decided to apply as many changes as possible in the Scala 2 main branch to avoid these conflicts.</p>
<p>The main thing you can do while still on Scala 2.13 is to compile with the <code>-Xsource:3</code> compiler flag, which enables the Scala 3 syntax for imports (<code>*</code> instead of <code>_</code>, <code>as</code> instead of <code>=&gt;</code>), intersection types (<code>&amp;</code> instead of <code>with</code>), and more, and also turns on a number of warnings for things no longer supported in Scala 3 (e.g., <code>.map(CaseClass)</code> should become <code>.map(CaseClass.apply)</code>).</p>
<p>Most of those changes were easy to apply, but there were a lot of them, which was challenging. Scala 3 offers a “migration mode” and is able to rewrite the code with the new syntax, but this is not applicable if you want to apply these changes in a Scala 2 codebase. My salvation actually came from IntelliJ, which has an inspection for code compiled with <code>-Xsource:3</code> and a quick fix action to replace all the code at once. Incredibly useful!</p>
<p><img data-zoomable="true" loading="lazy" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1737941342711/38246c7a-77a4-455b-aaf8-fbd28d76eb11.png?auto=compress,format&amp;format=webp" alt="IntelliJ inspection for -Xsource:3"></p>
<p>IntelliJ even lets you select which of these changes you want to apply, so I excluded the “<code>case</code> in pattern bindings of for-comprehensions” because it transformed the code in a weird, unnecessary way.</p>
<p>After this was done, I was able to apply a large number of changes directly to our main branch, avoiding many more conflicts!</p>
<p><img data-zoomable="true" loading="lazy" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1737941447355/dd5a5858-c5de-42ff-a28e-0975572b8294.png?auto=compress,format&amp;format=webp" alt=""></p>
<h2 id="heading-dropped-features">Dropped Features</h2>
<p>While it brought a number of new and interesting features such as enums or opaque types, Scala 3 dropped a few features altogether, and this proved to be particularly challenging for us. The dropped features are listed <a target="_blank" href="https://docs.scala-lang.org/scala3/reference/dropped-features/">on this page</a>, and there were two of them that we relied on heavily: macro annotations and type projections.</p>
<h3 id="heading-macro-annotations">Macro annotations</h3>
<p>Macro annotations let you annotate Scala 2 types to generate code at compile-time, most typically by adding code to the companion object of annotated classes.</p>
<p>For example, using the <a target="_blank" href="https://github.com/circe/circe">Circe JSON library</a>, you could write this:</p>
<pre><code><span>@JsonCodec</span>
<span>case</span> <span><span>class</span> <span>Bar</span>(<span>i: <span>Int</span>, s: <span>String</span></span>)</span>
</code></pre>
<p>This will automatically generate an implicit <code>Codec[Bar]</code> in the companion object of <code>Bar</code>. Very concise, very convenient. In the case of Circe, there was an "easy" workaround, which is to use the <code>derives</code> keyword available in Scala 3. I put quotes around "easy" because, for some reason, it is not mentioned at all in the <a target="_blank" href="https://circe.github.io/circe/codecs/semiauto-derivation.html#jsoncodec">Circe documentation</a>.</p>
<p>The code above can be changed to the following for the same result:</p>
<pre><code><span>case</span> <span><span>class</span> <span>Bar</span>(<span>i: <span>Int</span>, s: <span>String</span></span>) <span>derives</span> <span>Codec</span>.<span>AsObject</span></span>
</code></pre>
<p>Case closed? Not exactly, because our main use of macro annotations was not with Circe, but with <a target="_blank" href="https://github.com/optics-dev/Monocle">Monocle</a> and its <code>@Lenses</code> annotation.</p>
<pre><code><span>@Lenses</span>
<span>case</span> <span><span>class</span> <span>Bar</span>(<span>i: <span>Int</span>, s: <span>String</span></span>)</span>
</code></pre>
<p>This will generate the following in the companion object of <code>Bar</code>:</p>
<pre><code><span><span>object</span> <span>Bar</span> </span>{
  <span>val</span> i: <span>Lens</span>[<span>Bar</span>, <span>Int</span>] = ??? <span>// implementation omitted for clarity</span>
  <span>val</span> s: <span>Lens</span>[<span>Bar</span>, <span>String</span>] = ??? 
}
</code></pre>
<p>Our project, being a complex game, has a huge user state object, lots of business logic, and domain entities. Lenses allow us to modify parts of the user state in a concise and elegant manner without having to use a chain of nested <code>copy</code>.</p>
<p>The removal of that macro annotation left us with no clear path or alternative for the migration. Unlike the Circe case, this is not a typeclass instance, so we can’t use the <code>derives</code> keyword: we need a <code>val</code> generated for each field of the case class. There is an <a target="_blank" href="https://github.com/optics-dev/Monocle/issues/1337">open issue</a> in the Monocle repository that discusses various options, but nothing tangible (Kit Langton has an <a target="_blank" href="https://contributors.scala-lang.org/t/scala-3-macro-annotations-and-code-generation/6035/69">interesting approach</a> using <code>Selectable</code>, but this is not supported by IntelliJ).</p>
<p>One obvious alternative was to write those lenses ourselves. That was definitely doable; however, it would have required considerable effort to write thousands of these, and it would have added an enormous amount of boilerplate to the project, making Scala 3 quite unpopular within our team. This alone stopped the migration effort I started in 2024.</p>
<p>We are always trying to reduce boilerplate in our project, so we’ve used a few techniques over the years to address it. Sometimes it’s doable with macros or mirrors, but one way is to use sbt’s source generators, which allow you to run some custom code before compilation to generate additional source code files. Combined with <a target="_blank" href="https://scalameta.org/">Scalameta</a>, you can parse and analyze your own code to generate more code. It is ultimately this technique that we used to generate the lenses.</p>
<p>The code generation works like this:</p>
<ul>
<li><p>Look for all case classes in a specific module that contain the <code>@lenses</code> annotation</p>
</li>
<li><p>For each of those case classes, create an object</p>
<ul>
<li>For each field of the case class, create a lens with the appropriate types</li>
</ul>
</li>
</ul>
<p>Using Scalameta is a little bit involved, so I’ve shared a snippet of our code <a target="_blank" href="https://gist.github.com/ghostdogpr/3b5bd33dd3356e16434db42595924bf4">in this gist</a> so that it may be used by others. One downside of this approach is that the generated lenses are no longer in the companion objects of the case classes (we can generate new source files but not modify the existing ones), which required us to change all the lenses usage to use different object names. But it was worth it since it unlocked the migration path.</p>
<p>Note that a “macro annotation” feature was added to Scala 3, but it is much more limited than what was possible in Scala 2 and does not allow implementing the Monocle <code>@Lenses</code> annotation (the generated code is not visible to the user).</p>
<h3 id="heading-type-projections">Type projections</h3>
<p>Imagine you have a type <code>Request</code> that has an abstract <code>type Result</code> defined inside it.</p>
<pre><code><span><span>trait</span> <span>Request</span> </span>{
  <span><span>type</span> <span>Result</span></span>
}

<span>case</span> <span><span>class</span> <span>IntRequest</span>(<span></span>) <span>extends</span> <span>Request</span> </span>{
  <span><span>type</span> <span>Result</span> </span>= <span>Int</span>
}
</code></pre>
<p>In Scala 2, you can write a function that, for a given <code>Request</code>, returns <code>Request#Result</code>, meaning it returns the <code>Result</code> that matches the subtype of <code>Request</code> that was used. So if <code>Request</code> is <code>IntRequest</code>, we will get an <code>Int</code> back.</p>
<pre><code><span><span>def</span> <span>foo</span></span>[<span>R</span> &lt;: <span>Request</span>](req: <span>Request</span>): <span>R</span>#<span>Result</span> = ???
</code></pre>
<p>This is no longer possible in Scala 3 if <code>R</code> is abstract! You get a compile error saying <code>R is not a legal path since it is not a concrete type</code>. There is an easy workaround if you have a value of type <code>Request</code>, which is to use a function dependent type and return <code>req.Result</code>.</p>
<pre><code><span><span>def</span> <span>foo</span></span>[<span>R</span> &lt;: <span>Request</span>](req: <span>Request</span>): req.<span>Result</span> = ???
</code></pre>
<p>However, our code had various uses of this pattern, and not all of them could be changed to a function dependent type. We ended up using a combination of different techniques depending on each case: function dependent types in some places, typeclasses in others, and we had to give up on making the code generic in a few places. Overall, this felt like a regression from the old code, but at least we were able to make it compile without changing too much code.</p>
<p>EDIT: After publishing this article, Voytek Pituła <a target="_blank" href="https://www.reddit.com/r/scala/comments/1ihf75z/comment/mawmkn0/">suggested a different workaround on Reddit</a> using match types, and I was able to apply it successfully in the places where I had no alternatives. It made the code much nicer! I had heard of match types as an alternative before, but I thought I would have to construct a giant pattern matching with the list of all requests and their matching results. I had no idea it could be used in a generic way. Here’s his approach applied to our example:</p>
<pre><code><span><span>trait</span> <span>Request</span> </span>{
  <span><span>type</span> <span>Result</span> </span>
}

<span><span>object</span> <span>Request</span> </span>{
  <span><span>type</span> <span>Aux</span>[<span>T</span>] </span>= <span>Request</span> { <span><span>type</span> <span>Result</span> </span>= <span>T</span> }
  <span><span>type</span> <span>Result</span>[<span>T</span> &lt;: <span>Request</span>] </span>= <span>T</span> <span>match</span> {
    <span>case</span> <span>Aux</span>[s] =&gt; s
  }
}

<span><span>def</span> <span>foo</span></span>[<span>T</span> &lt;: <span>Request</span>]: <span>Request</span>.<span>Result</span>[<span>T</span>]
</code></pre>
<h2 id="heading-unsupportedbroken-libraries">Unsupported/broken libraries</h2>
<p>Most libraries we were using were available on Scala 3, and for a few missing ones (mostly related to Spark or Kryo), we used <code>cross(CrossVersion.for3Use2_13)</code>, which allows depending on a library built for Scala 2.13.</p>
<p>However, a few of them were not available or didn’t work as expected, so they required a complete change.</p>
<h3 id="heading-newtypes-and-refined-types">Newtypes and refined types</h3>
<p>In Scala 2, we were using a combination of <a target="_blank" href="https://github.com/estatico/scala-newtype">scala-newtype</a> and <a target="_blank" href="https://github.com/fthomas/refined">refined</a> to define custom types used all over our business logic (IDs, bounded values, etc.). There is no Scala 3 version of scala-newtype, which makes sense because it can be entirely replaced by opaque types. Refined is sneakier: it has a Scala 3 version, but if you try to use it, you will notice that it is only partially implemented; the macros are missing, so the library is not usable (the first example in their README doesn’t compile).</p>
<p>In another project using Scala 3, we were already using the <a target="_blank" href="https://github.com/kitlangton/neotype">neotype</a> library, which lets you define both newtypes and refined types and is built on top of opaque types, therefore having no runtime cost. We switched to using this library instead. It might sound simple on paper, but we rely on these types so much that it was quite an invasive change impacting a lot of files. At least the migrated code felt better than the old one since writing refined type validation is nicer and slightly less boilerplate-y, and the runtime impact was reduced.</p>
<h3 id="heading-magnolia-typeclass-derivation">Magnolia typeclass derivation</h3>
<p>Another issue we had was with typeclass derivation using <a target="_blank" href="https://github.com/softwaremill/magnolia">Magnolia</a>. While the library supports Scala 3, our existing derivation code caused a compile error for reaching <code>-Xmax-inlines</code> (too much inlined code). I tried to increase it up to 10,000 (!) and it finally failed with a stack overflow in the compiler.</p>
<p>The failing derivation occurred while deriving a sealed trait with a LOT of subtypes (~1,000), but there was already a typeclass instance for each of the subtypes. After looking at the internals of Magnolia, I noticed that a recursive method was used to fold over the list of subtypes, and that method was not tail-recursive, explaining why the number of inlines (and the stack depth) was increasing proportionally to the number of subtypes. To make matters worse, that recursive method also called <code>distinctBy</code> and <code>sortBy</code> on the list of subtypes at <em>every</em> iteration, which is pretty bad when you have lots of them. I opened <a target="_blank" href="https://github.com/softwaremill/magnolia/issues/565">an issue</a> to report this behavior and changed the code locally, but then I ran into a <code>Method too large</code> error because the generated code was longer than what the JVM allows.</p>
<p>After doing a little research, I came across a great feature of Scala 3 that is poorly documented: <code>Tuple.Map</code>. Mirrors give you access to two tuples: for a sum type, <code>MirroredElemLabels</code> is a tuple with the names of the subtypes, while <code>MirroredElemTypes</code> is a tuple with the actual subtypes. You can use <code>summonAll</code> and <code>Tuple.Map</code> to materialize the list of names of those types or even to summon a typeclass instance for each of them.</p>
<pre><code><span><span>trait</span> <span>TC</span>[<span>A</span>]</span>

inline <span><span>def</span> <span>gen</span></span>[<span>A</span>](using m: <span>Mirror</span>.<span>SumOf</span>[<span>A</span>]): <span>TC</span>[<span>A</span>] = {
  <span>// get TC instances of all subtypes</span>
  <span>val</span> subTypes = compiletime.summonAll[<span>Tuple</span>.<span>Map</span>[m.<span>MirroredElemTypes</span>, <span>TC</span>]]
  <span>new</span> <span>TC</span>[<span>A</span>] {
    ??? <span>// given (a: A), we can then use subTypes(m.ordinal(a)).asInstanceOf[TC[A]]</span>
  }
}
</code></pre>
<p>I posted a <a target="_blank" href="https://gist.github.com/ghostdogpr/6f2ca0939c67765a0657a255ed653765">full example on Gist</a> that shows how to derive a typeclass for a sealed trait without even needing Magnolia. This solution is very concise and does not run into inline or <code>Method too large</code> issues. I just wish there were more learning materials about these <code>Tuple</code> utilities because I think they are very powerful.</p>
<h2 id="heading-macros">Macros</h2>
<p>We had a few macros developed in-house, mostly to reduce boilerplate code. They proved relatively easy to port, except for one of them. The reason it was difficult is that Scala 3 macros are much more strict than Scala 2 macros, which let you generate any kind of code. On the other hand, Scala 3 macros require that the code you generate is valid in the context where the macro is defined (which might be different from where the macro is used, making things trickier). I am not a macro expert, so apologies if this is a little imprecise; my colleague <a target="_blank" href="https://x.com/nox737">@nox737</a> is the one who made the magic happen.</p>
<p>It took us quite a long time to make the macro compile with these restrictions (note: AI agents were not helpful at all for this kind of task!), and in the end, the code still failed to compile because of a <code>Method too large</code> error. Compile time felt a bit slower too. We ended up removing the macro entirely and replacing it with another source generator written with Scalameta. It made the code easier to inspect and to split into smaller chunks.</p>
<h2 id="heading-dependency-issues">Dependency issues</h2>
<p>As mentioned earlier, we used <code>CrossVersion.for3Use2_13</code> for a few libraries not available in Scala 3, but one tough problem arose. One of those libraries was <a target="_blank" href="https://github.com/scalapb/sparksql-scalapb">sparksql-scalapb</a>, which lets us use protobuf with Spark. This library depends on Spark, so it is only available for 2.13. It also depends on <code>scalapb-runtime</code>, so depending on it brings <code>scalapb_runtime_2.13</code> into dependencies. The problem is that the rest of our code already depended on <code>scalapb_runtime_3</code>. In that case, sbt failed to resolve the build with this error:</p>
<pre><code>Modules were resolved with conflicting cross-version suffixes in ProjectRef(uri("..."), "spark"):
org.scala-lang.modules:scala-collection-compat _3, _2.13
com.thesamet.scalapb:lenses _3, _2.13
com.thesamet.scalapb:scalapb-runtime _3, _2.13
</code></pre>
<p>In other words, you can’t depend on the same library in both 2.13 and 3 versions.</p>
<p>I initially tried to solve that issue by shading dependencies, but it didn’t work because one function we use from <code>sparksql-scalapb</code> expects a specific input extending a type from ScalaPB, which means the rest of our code needs to extend that type. If that type is shaded only in the spark module, it doesn’t match the type from our other modules.</p>
<p>The solution was actually relatively simple: I forked <code>sparksql-scalapb</code> and made it compile with Scala 3, depending on <code>scalapb_runtime_3</code> and using <code>CrossVersion.for3Use2_13</code> for its other dependencies. The code was very straightforward to port, with just some minor things to fix. Then I embedded the produced JAR in our project instead of depending on the 2.13 library. I had to add the transitive dependencies of that library explicitly in our project, and that was it.</p>
<h2 id="heading-slow-compile-time">Slow compile time</h2>
<p>Once all the code was migrated and I was able to compile successfully for the first time, I noticed that it was taking longer than usual. I also noticed that IntelliJ was constantly compiling to show syntax highlighting. There was definitely something wrong. I had already debugged slow compile times with Scala 2 and was accustomed to using the <code>-Vstatistics</code> compiler flag to see which phases were taking time, and even using <a target="_blank" href="https://github.com/scalacenter/scalac-profiling">scalac-profiling</a> to profile the compilation. Unfortunately, a little research made me realize that such tools did not exist for Scala 3. After asking around on <a target="_blank" href="https://x.com/ghostdogpr/status/1881657774817591559">Twitter</a>, I heard that the new version of Scala (3.6.3) released a day earlier was <a target="_blank" href="https://www.scala-lang.org/news/3.6.3/">bringing a compiler flag to generate compiler traces</a>. What a nice timing, I really got lucky with this one.</p>
<p>I immediately upgraded from 3.6.2 to 3.6.3 and enabled the traces. Within minutes, I was able to generate the following flamegraph:</p>
<p><img data-zoomable="true" loading="lazy" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1737952440000/f9cded6c-8ccc-4c73-b884-886469c80831.jpeg?auto=compress,format&amp;format=webp" alt=""></p>
<p>This was extremely useful: as you can see, it breaks down the compilation time by phases, but also by files and even methods! This helped me pinpoint which code was slow to compile. Even though I did not really understand why it was slow (I tried to reproduce it in an isolated example but failed), I was able to refactor the code in a way that made it fast. The issue was about using an extremely large intersection type (with over 100+ types) as a ZIO environment. Reorganizing the environment into fewer types completely solved this issue, made the compile time on par with 2.13, and made IntelliJ very reactive.</p>
<p>This tool is so useful that I plan to spend more time on it in the future because I am pretty sure that it will allow me to find other slow points, considering how detailed the output is. But my goal for the migration was only to be as fast as with 2.13.</p>
<h2 id="heading-intellij-support">IntelliJ support</h2>
<p>Speaking of IntelliJ, I did run into a couple of issues, which I reported to JetBrains:</p>
<ul>
<li><p><a target="_blank" href="https://youtrack.jetbrains.com/issue/SCL-23387/Monocles-focus-macro-is-not-supported-in-Scala-3-works-with-Scala-2-scala-3-context-functions">Context functions are not well supported when combined with an actual function</a> (e.g., <code>Context ?=&gt; From =&gt; To</code>), which comes up when using the Monocle <code>focus</code> macro.</p>
</li>
<li><p><a target="_blank" href="https://youtrack.jetbrains.com/issue/SCL-21142/scala3-cant-resolve-definitions-from-intersection-types-from-self-type">Using a self type in combination with intersection types is broken</a> (e.g., <code>trait A { self: B &amp; C =&gt;</code>), fortunately, it works when using <code>with</code> instead of <code>&amp;</code>, so the workaround was easy.</p>
</li>
</ul>
<p>I hope these bugs get fixed in the near future since they have very simple and easy reproducers (the first one was fixed as I was writing this post, though not released yet). I briefly looked into it, but the Scala plugin for IntelliJ is not really approachable, and I didn’t even know where to start looking.</p>
<p>Other than that, IntelliJ support was pretty good. One thing I recommend is to select <code>Use separate compiler output paths</code> in the sbt configuration menu because the sbt shell and IntelliJ’s own compiler tend to conflict with each other otherwise.</p>
<h2 id="heading-compiler-flags">Compiler flags</h2>
<p>Here are a few notable compiler flags I ended up using:</p>
<ul>
<li><p><code>-language:experimental.betterFors</code> (available under <code>-experimental</code>): this allows using <code>=</code> on the first line of for-comprehensions, and it also optimizes the generated bytecode by avoiding the extra <code>map</code> call at the end of the <code>flatMap</code> calls.</p>
</li>
<li><p><code>-no-indent</code>: I am strongly against significant indentation in Scala, wish it never happened, but at least I am glad it is easy to disable. This is coupled with <code>runner.dialectOverride.allowSignificantIndentation = false</code> in Scalafmt.</p>
</li>
<li><p><code>-Wunused:all</code>: I had a bunch of <code>@nowarn</code> I had to add with Scala 2 because of false positives, and I was able to remove them. It also found some extra unused code that Scala 2 didn’t detect, so it seemed to work better.</p>
</li>
</ul>
<h2 id="heading-conclusion">Conclusion</h2>
<p><img data-zoomable="true" loading="lazy" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1738645933609/3ecd0d93-c28e-45ac-b3a0-bc2b723ea770.png?auto=compress,format&amp;format=webp" alt=""></p>
<p>Finally, on February 4, the CI turned green on this PR. It has been a long journey with a lot of hurdles, but the situation felt much better in 2025 than a year before. Overall, our code did not change heavily, and most of the changes are for the best. The two things that I really regret are the lack of macro annotations (fortunately, sbt source generators and Scalameta are powerful enough to emulate it) and the removal of general type projections that made our code uglier in some places.</p>
<p>To wrap things up, I am glad our main project did not become a painful legacy stuck in the past, and I am now excited to be able to play with some of the powerful tools that Scala 3 has to offer, particularly around metaprogramming. I hope this read will be helpful to others, whether you have a similar migration to perform or are involved directly with the development of the language and its tooling.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GitHub Copilot: The Agent Awakens (180 pts)]]></title>
            <link>https://github.blog/news-insights/product-news/github-copilot-the-agent-awakens/</link>
            <guid>42964327</guid>
            <pubDate>Thu, 06 Feb 2025 17:07:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.blog/news-insights/product-news/github-copilot-the-agent-awakens/">https://github.blog/news-insights/product-news/github-copilot-the-agent-awakens/</a>, See on <a href="https://news.ycombinator.com/item?id=42964327">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
	
<p>When we introduced GitHub Copilot back in 2021, we had a clear goal: to make developers’ lives easier with an AI pair programmer that helps them write better code. The name reflects our belief that artificial intelligence (AI) isn’t replacing the developer. Instead, it’s always on their side. And like any good first officer, Copilot can also fly by itself: for example, when providing pull request feedback, autofixing security vulnerabilities, or brainstorming on how to implement an issue.</p>
<p>Today, we are upgrading GitHub Copilot with the force of even more agentic AI – introducing agent mode and announcing the General Availability of Copilot Edits, both in VS Code. We are adding Gemini 2.0 Flash to the model picker for all Copilot users. And we unveil a first look at Copilot’s new autonomous agent, codenamed Project Padawan. From code completions, chat, and multi-file edits to workspace and agents, Copilot puts the human at the center of the creative work that is software development. AI helps with the things you don’t want to do, so you have more time for the things you do.</p>
<h2 id="agent-mode-available-in-preview-%f0%9f%a4%96">Agent mode available in preview 🤖<a href="#agent-mode-available-in-preview-%f0%9f%a4%96" aria-label="Agent mode available in preview 🤖"></a></h2>
<p>GitHub Copilot’s new agent mode is capable of iterating on its own code, recognizing errors, and fixing them automatically. It can suggest terminal commands and ask you to execute them. It also analyzes run-time errors with self-healing capabilities.</p>
<p>In agent mode, Copilot will iterate on not just its own output, but the result of that output. And it will iterate until it has completed all the subtasks required to complete your prompt. Instead of performing just the task you requested, Copilot now has the ability to infer additional tasks that were not specified, but are also necessary for the primary request to work. Even better, it can catch its own errors, freeing you up from having to copy/paste from the terminal back into chat.</p>
<p>Here’s an example where GitHub Copilot builds a web app to track marathon training:</p>
<p>
			<iframe loading="lazy" src="https://www.youtube.com/embed/of--3Fq1M3w?feature=oembed" title="YouTube video player" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0"></iframe>
		</p>
<p>To get started, you’ll need to download VS Code Insiders and then enable the agent mode setting for GitHub Copilot Chat:</p>
<p><img data-recalc-dims="1" decoding="async" src="https://github.blog/wp-content/uploads/2025/02/Settings.png?w=1024&amp;resize=1024%2C561" alt="Settings screen for Visual Studio Code showing the words 'Copilot Agent' in the settings search box, and the option for Chat Agent: Enabled activated" width="1024" height="561" loading="lazy" srcset="https://github.blog/wp-content/uploads/2025/02/Settings.png?w=3850 3850w, https://github.blog/wp-content/uploads/2025/02/Settings.png?w=300 300w, https://github.blog/wp-content/uploads/2025/02/Settings.png?w=768 768w, https://github.blog/wp-content/uploads/2025/02/Settings.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/02/Settings.png?w=1536 1536w, https://github.blog/wp-content/uploads/2025/02/Settings.png?w=2048 2048w, https://github.blog/wp-content/uploads/2025/02/Settings.png?w=3000 3000w" sizes="auto, (max-width: 1000px) 100vw, 1000px"></p>
<p>Then, when in the Copilot Edits panel, switch from Edit to Agent right next to the model picker:</p>
<p><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->
<video id="video-82456-1" width="1920" height="1080" preload="metadata" controls="controls"><source type="video/mp4" src="https://github.blog/wp-content/uploads/2025/02/Editor_PickerDemo.mp4#t=0.001?_=1"><a href="https://github.blog/wp-content/uploads/2025/02/Editor_PickerDemo.mp4#t=0.001">https://github.blog/wp-content/uploads/2025/02/Editor_PickerDemo.mp4#t=0.001</a></video></p>
<p>Agent mode will change the way developers work in their editor; and as such, we will bring it to all IDEs that Copilot supports. We also know that today’s Insiders build isn’t perfect, and welcome your feedback as we improve both VS Code and the underlying agentic technology in the coming months.</p>
<h2 id="copilot-edits-now-ga-in-vs-code-%f0%9f%8e%89">Copilot Edits, now GA in VS Code 🎉<a href="#copilot-edits-now-ga-in-vs-code-%f0%9f%8e%89" aria-label="Copilot Edits, now GA in VS Code 🎉"></a></h2>
<p>Announced at GitHub Universe in October last year, Copilot Edits combines the best of Chat and Inline Chat with a conversational flow and the ability to make inline changes across a set of files that you manage. <a href="https://github.com/microsoft/vscode-copilot-release/issues/95">The feedback</a> <a href="https://github.com/microsoft/vscode-copilot-release/issues/1098">you provided in the past</a> was instrumental in shipping this feature as GA in VS Code today. Thank you!</p>
<p>In Copilot Edits you specify a set of files to be edited, and then use natural language to ask GitHub Copilot for what you need. Copilot Edits makes inline changes in your workspace, across multiple files, using a UI designed for fast iteration. You stay in the flow of your code while reviewing the suggested changes, accepting what works, and iterating with follow-up asks.</p>
<p><img data-recalc-dims="1" decoding="async" src="https://github.blog/wp-content/uploads/2025/02/Multifile_Edit.png?w=1024&amp;resize=1024%2C579" alt="Visual Studio Code showing multiple files added to Copilot Edit" width="1024" height="579" loading="lazy" srcset="https://github.blog/wp-content/uploads/2025/02/Multifile_Edit.png?w=3850 3850w, https://github.blog/wp-content/uploads/2025/02/Multifile_Edit.png?w=300 300w, https://github.blog/wp-content/uploads/2025/02/Multifile_Edit.png?w=768 768w, https://github.blog/wp-content/uploads/2025/02/Multifile_Edit.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/02/Multifile_Edit.png?w=1536 1536w, https://github.blog/wp-content/uploads/2025/02/Multifile_Edit.png?w=2048 2048w, https://github.blog/wp-content/uploads/2025/02/Multifile_Edit.png?w=3000 3000w" sizes="auto, (max-width: 1000px) 100vw, 1000px"></p>
<p>Behind the scenes, Copilot Edits leverages a dual-model architecture to enhance editing efficiency and accuracy. First, a foundation language model considers a full context of the Edits session to generate initial edit suggestions. You can choose the foundation language model that you prefer between: OpenAI’s GPT-4o, o1, o3-mini, Anthropic’s Claude 3.5 Sonnet, and now, Google’s Gemini 2.0 Flash. For the optimal experience, we developed a speculative decoding endpoint, optimized for fast application of changes in files. The proposed edits from the foundation model are sent to the speculative decoding endpoint that will then propose those changes inline in the editor.</p>
<p>Copilot Edits works because it puts you in control, from setting the right context to accepting changes. The experience is iterative: when the model gets it wrong, you can review changes across multiple files, accept good ones and iterate until, together with Copilot, you arrive at the right solution. After accepting changes, you can run the code to verify the changes and, when needed, undo in Copilot Edits to get back to a previous working state. Copilot Edits is in the Secondary Side Bar (default on the right) so that you can interact with views in the Primary Side Bar, such as the Explorer, Debug, or Source Control view, while you’re reviewing proposed changes. For example, you can have unit tests running in the <a href="https://code.visualstudio.com/docs/editor/testing">Testing view</a> on the left, while using the Copilot Edits view on the right, so that in every iteration you can verify if the changes Copilot Edits proposed are passing your unit tests.</p>
<p><a href="https://code.visualstudio.com/docs/editor/voice">Using your voice</a> is a natural experience while using Copilot Edits. Just talking to Copilot makes the back and forth smooth and conversational. It almost feels like interacting with a colleague with area expertise, using the same kind of iterative flow that you would use in real-life pair programming.</p>
<p>Next on our roadmap is to improve the performance of the apply changes speculative decoding endpoint, support transitions into Copilot Edits from Copilot Chat by preserving context, suggest files to the working set, and allow you to undo suggested chunks. If you want to be among the first to get your hands on these improvements, make sure to use <a href="https://code.visualstudio.com/insiders/">VS Code Insiders</a> and the pre-release version of the <a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat">GitHub Copilot Chat</a> extension. To help improve the feature, <a href="https://github.com/microsoft/vscode-copilot-release?utm_source=agent-awakens-announcement&amp;utm_medium=blog&amp;utm_campaign=agentic-ai">please file issues in our repo</a>.</p>
<p>Beyond the GA in VS Code, Copilot Edits is now in preview for Visual Studio 2022.</p>
<h2 id="project-padawan-swe-agents-on-github">Project Padawan: SWE agents on GitHub<a href="#project-padawan-swe-agents-on-github" aria-label="Project Padawan: SWE agents on GitHub"></a></h2>

<p>We’re excited to share a first look at our autonomous SWE agent and how we envision these types of agents will fit into the GitHub user experience. When the product we are building under the codename Project Padawan ships later this year, it will allow you to directly assign issues to GitHub Copilot, using any of the GitHub clients, and have it produce fully tested pull requests. Once a task is finished, Copilot will assign human reviewers to the PR, and work to resolve feedback they add. In a sense, it will be like onboarding Copilot as a contributor to every repository on GitHub. ✨</p>
<p>
			<iframe loading="lazy" src="https://www.youtube.com/embed/VWvV2-XwBMM?feature=oembed" title="YouTube video player" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0"></iframe>
		</p>
<p>Behind the scenes, Copilot automatically spins up a secure cloud sandbox for every task it’s assigned. It then asynchronously clones the repository, sets up the environment, analyzes the codebase, edits the necessary files, and builds, tests, and lints the code. Additionally, Copilot takes into account any discussion within the issue or PR, and any custom instruction within the repository, so it understands the full intent of its task, as well as the guidelines and conventions of the project.</p>
<p>And just as we did with Copilot Extensions and the model picker in Copilot, we will also provide opportunities to integrate into this AI-native workflow and work closely with partners and customers in a tight feedback loop. We believe the end-state of Project Padawan will result in transforming how teams manage critical-yet-mundane tasks, such as fixing bugs or creating and maintaining automated tests. Because ultimately, it’s all about empowering developers by allowing them to focus on what matters, and letting copilots do the rest. And don’t worry. We will have patience, so the agent won’t turn to the dark side. 😉</p>


	
<section>
	<hr>
	<div>
		<h2>Tags:</h2>
		<ul>
							<li>
					<a href="https://github.blog/tag/agent-mode/" rel="tag">
						agent mode					</a>
				</li>
							<li>
					<a href="https://github.blog/tag/agentic-ai/" rel="tag">
						agentic AI					</a>
				</li>
							<li>
					<a href="https://github.blog/tag/github-copilot/" rel="tag">
						GitHub Copilot					</a>
				</li>
							<li>
					<a href="https://github.blog/tag/github-copilot-chat/" rel="tag">
						GitHub Copilot Chat					</a>
				</li>
							<li>
					<a href="https://github.blog/tag/vs-code/" rel="tag">
						VS Code					</a>
				</li>
					</ul>
	</div>
</section>
	<div>
	<h2>
		Written by	</h2>
	
			<article>
	<div>
					<div>
				<picture>
					<source srcset="https://secure.gravatar.com/avatar/46326e2a5a2cc69564a29dbaf1d13a63?s=200&amp;d=mm&amp;r=g" width="120" height="120" media="(min-width: 768px)">
					<img src="https://secure.gravatar.com/avatar/46326e2a5a2cc69564a29dbaf1d13a63?s=200&amp;d=mm&amp;r=g" alt="Thomas Dohmke" width="80" height="80" loading="lazy" decoding="async">
				</picture>
			</div>
				
					<p>Fascinated by software development since his childhood in Germany, Thomas Dohmke has built a career building tools to accelerate developer happiness. Currently, Thomas is the Chief Executive Officer of GitHub, where he has overseen the rise of the world’s most widely adopted AI developer tools – including the launches of GitHub Copilot, Copilot Workspace, and GitHub Models. Thomas is a celebrated TED speaker and holds a PhD in mechanical engineering from University of Glasgow, UK.</p>
			</div>
</article>
	</div>
</section><div>
	<h2>
		Explore more from GitHub	</h2>
	<div>
		<div>
		<p><img src="https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg" width="44" height="44" alt="Docs"></p><h3>
			Docs		</h3>
		<p>Everything you need to master GitHub, all in one place.</p>
					<p>
				<a data-analytics-click="Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;" href="https://docs.github.com/" target="_blank" aria-label="Go to Docs">
					Go to Docs											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z"></path></svg>
									</a>
			</p>
			</div>
<div>
		<p><img src="https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg" width="44" height="44" alt="GitHub"></p><h3>
			GitHub		</h3>
		<p>Build what’s next on GitHub, the place for anyone from anywhere to build anything.</p>
					<p>
				<a data-analytics-click="Blog, click on module, text: Start building; ref_location:bottom recirculation;" href="https://github.blog/developer-skills/github/" target="_blank" aria-label="Start building">
					Start building											<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill="currentColor" d="M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z"></path><path stroke="currentColor" d="M1.75 8H11" stroke-width="1.5" stroke-linecap="round"></path></svg>
									</a>
			</p>
			</div>
<div>
		<p><img src="https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg" width="44" height="44" alt="Customer stories"></p><h3>
			Customer stories		</h3>
		<p>Meet the companies and engineering teams that build with GitHub.</p>
					<p>
				<a data-analytics-click="Blog, click on module, text: Learn more; ref_location:bottom recirculation;" href="https://github.com/customer-stories" target="_blank" aria-label="Learn more">
					Learn more											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z"></path></svg>
									</a>
			</p>
			</div>
<div>
		<p><img src="https://github.blog/wp-content/uploads/2022/05/careers.svg" width="44" height="44" alt="Work at GitHub!"></p><h3>
			Work at GitHub!		</h3>
		<p>Check out our current job openings.</p>
					<p>
				<a data-analytics-click="Blog, click on module, text: Apply now; ref_location:bottom recirculation;" href="https://www.github.careers/careers-home" target="_blank" aria-label="Apply now">
					Apply now											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z"></path></svg>
									</a>
			</p>
			</div>
	</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[U.S. Government Disclosed 39 Zero-Day Vulnerabilities in 2023, First-Ever Report (185 pts)]]></title>
            <link>https://www.zetter-zeroday.com/u-s-government-disclosed-39-zero-day-vulnerabilities-in-2023-per-first-ever-report/</link>
            <guid>42962702</guid>
            <pubDate>Thu, 06 Feb 2025 14:35:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.zetter-zeroday.com/u-s-government-disclosed-39-zero-day-vulnerabilities-in-2023-per-first-ever-report/">https://www.zetter-zeroday.com/u-s-government-disclosed-39-zero-day-vulnerabilities-in-2023-per-first-ever-report/</a>, See on <a href="https://news.ycombinator.com/item?id=42962702">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
        <p><em>What the government didn't reveal is how many zero days it discovered in 2023 that it kept to exploit rather than disclose. Whatever that number, it likely will increase under the Trump administration, which has vowed to ramp up government hacking operations. </em></p><p>In a first-of-its-kind report, the US government has revealed that it disclosed 39 zero-day software vulnerabilities to vendors or the public in 2023 for the purpose of getting the vulnerabilities patched or mitigated, as opposed to retaining them to use in hacking operations.</p><p><br>It’s the first time the government has revealed specific numbers about its controversial Vulnerabilities Equities Process (VEP) — the process it uses to adjudicate decisions about whether zero-day vulnerabilities it discovers should be kept secret so law enforcement, intelligence agencies, and the military can exploit them in hacking operations or be disclosed to vendors to fix them. Zero-day vulnerabilities are security holes in software that are unknown to the software maker and are therefore unpatched at the time of discovery, making systems that use the software at risk of being hacked by anyone who discovers the flaw.</p><p><br>In the past, the government has said that it discloses more than 90 percent of the vulnerabilities that go through its VEP review, but without providing specific numbers for context. This has made it difficult for the public to assess the size of the government’s zero-day stockpile and whether the equities process favors disclosure over exploitation, as the government claims. It’s not clear that the single-page unclassified document, released quietly last month by the Office of the Director of National Intelligence, helps with this assessment.</p><p><br>The document doesn’t say how many vulnerabilities in total went through VEP adjudication in 2023, or how many the government kept secret that year. It only says that of the 39 vulnerabilities disclosed, ten of these had been through the adjudication process before — meaning that members of the VEP review board had voted to keep them secret in a previous year or years, before deciding in 2023 to disclose them. Under the VEP policy, once the board makes a decision about a zero day, the decision stands until the board revisits it the following year or the government learns that criminal hackers or nation-state adversaries are exploiting the flaw.</p><figure><img src="https://www.zetter-zeroday.com/content/images/2025/01/Screen-Shot-2025-01-29-at-1.43.47-PM-1-1-1-1.png" alt="" loading="lazy" width="500" height="299"><figcaption><span>One-page unclassified document released by the Office of the Director of National Intelligence about zero days the government disclosed in 2023.</span></figcaption></figure><p>Katie Moussouris, founder and CEO of Luta Security and former advisor to the government’s now-disbanded Cyber Safety Review Board, says that since one of the factors guiding VEP decisions is whether the vulnerability poses a risk to U.S. critical infrastructure or the general public, this means that every other time they had been resubmitted to the VEP “the answer must have been that the risk [hadn’t] increased enough for us to stop using” the vulnerabilities.</p><p><br>What changed the calculus in 2023 isn’t clear. But if the government discovered that other parties were exploiting the vulnerabilities, this would be good information for the public to have, since it could help gauge the “collision rate” of government zero days — collision rate refers to the likelihood that a zero day discovered by one entity will be discovered by others in the same timeframe. A low or high collision rate could impact the risk assessment for whether government zero days should be disclosed or not.</p><p><br>The document doesn’t say how many years the government withheld the ten vulnerabilities before disclosing them in 2023. But a <a href="https://theintercept.com/2017/03/10/government-zero-days-7-years/?ref=zetter-zeroday.com">2017 RAND study</a> found that in the case of one set of vulnerabilities made available to the U.S. government by a third-party seller, the vulnerabilities generally lasted seven or more years before someone disclosed the vulnerability to the software maker to be patched, or the software maker unwittingly eliminated the vulnerability when it released a new version of the program. A similar timeframe may be true for the government’s zero days, suggesting that agencies may be using some of them for years before they’re no longer useful.</p><blockquote><strong>This lack of transparency could become a greater issue under the Trump administration, which has vowed to ramp up the government's cyber offensive operations, suggesting that the government demand for zero-day vulnerabilities may increase over the next four years.</strong></blockquote><p>The unclassified ODNI report got little notice when it was published last month by Senator Ron Wyden (D - Oregon) after receiving it from the intelligence office as the Biden administration was coming to a close. Under the Intelligence Authorization Act, the ODNI is required to submit an annual classified report to the House and Senate intelligence committees identifying the number of vulnerabilities submitted that year for review under the VEP, the number discovered but excluded from review (the process has loopholes that allow the government to withhold some vulnerabilities from review), and the number disclosed to vendors or the public.</p><p><br>The ODNI is also required to include an unclassified appendix to the annual report that reveals the number of vulnerabilities disclosed for patching and the number that subsequently got patched. The unclassified appendix is supposed to be made public, and the ODNI is supposed to have produced ones going back to 2018. But so far it has only made the one for 2023 available. And even that one does not meet the full requirement because it does not indicate how many of the 39 vulnerabilities that got disclosed were subsequently patched. The ODNI says the intelligence community doesn’t collect that information and therefore can’t include it in the appendix.</p><figure><img src="https://www.zetter-zeroday.com/content/images/2025/02/Screen-Shot-2025-02-05-at-1.55.30-PM-1.png" alt="" loading="lazy" width="500" height="184"><figcaption><span>2020 Amendment showing that the requirement to make the unclassified report available to the public applies retroactively to 2018 and 2019.</span></figcaption></figure><p><br>It’s not clear how much more information gets submitted to the intelligence committees in their classified versions of the VEP reports. But when asked if these versions provide sufficient transparency about the vulnerabilities process for the committees to provide proper oversight of the process, Wyden’s office says no.</p><p><br>“The public remains in the dark about how many VEP decisions are unanimous among the agencies that participate, how many involve offensive agencies outvoting defensive agencies, and how many final decisions are the result of an appeal,” a Wyden aide says. “Senator Wyden believes Americans need far more visibility into how the government decides which exploitable software vulnerabilities it discloses to companies to fix, and which it keeps secret, leaving Americans vulnerable to foreign hacks.”</p><p><br>This lack of transparency could become a greater issue under the Trump administration, which has vowed to <a href="https://cyberscoop.com/aggressive-cyber-offense-trump-administration-us-strategy-debate/?ref=zetter-zeroday.com">ramp up the government's cyber offensive operations</a>, suggesting that the government demand for zero-day vulnerabilities may increase over the next four years. If this occurs, the government’s previous statements that the VEP favors disclosure and defense over withholding and offense may no longer be true.</p><blockquote><strong>“[The Trump administration] could say we’re disclosing too [many vulnerabilities]. If the default [in the past] was to disclose unless there is a reason to keep, I could easily imagine the default is going to be to keep unless there is a reason to disclose.”</strong></blockquote><p><br>“The VEP and that number of 90 percent was one of the few places where the president and the White House could set the dial on how much they liked defense vs offense,” says Jason Healey, senior research scholar at Columbia University’s School of International and Public Affairs and former senior cybersecurity strategist for CISA. “[The Trump administration] could say we’re disclosing too [many vulnerabilities]. If the default [in the past] was to disclose unless there is a reason to keep, I could easily imagine the default is going to be to keep unless there is a reason to disclose.”</p><h3 id="vep-creation">VEP Creation</h3><p><br>The government created the VEP in 2010, producing a charter with details about how it should operate. But the VEP’s existence remained classified until 2014, when the so-called Heartbleed vulnerability was discovered. Heartbleed was a significant flaw in an OpenSSL cryptography library that web sites use to encrypt traffic between a user’s computer and an internet domain. The flaw had been in the code since 2012 but remained unknown to its developers and the public until security researchers discovered it in 2014.</p><p><br>Bloomberg News reported at the time that the NSA had <a href="https://www.bloomberg.com/news/articles/2014-04-11/nsa-said-to-have-used-heartbleed-bug-exposing-consumers?ref=zetter-zeroday.com">already known</a> about the vulnerability for at least two years and kept it secret to exploit it for intelligence collection. But the ODNI released a rare response disputing this, saying the intelligence community learned about the vulnerability only when the public did. Had the government known about it before, the ODNI insisted, it would have disclosed it to be fixed, due to the flaw’s severity. To underscore this, the ODNI revealed that the government had a formal process for deciding when to disclose or withhold vulnerabilities, and the process was weighted in favor of disclosure: “[U]nless there is a clear national security or law enforcement need, this process is biased toward responsibly disclosing such vulnerabilities,” the ODNI said.<br></p><p>The ODNI didn’t mention, however, that between 2010 and 2013, agencies required to follow the process failed to do so. Michael Daniel, former cybersecurity advisor to President Obama, says only the NSA was doing a review of vulnerabilities, but not in the way the VEP charter dictated.</p><p><br>“NSA was doing … its own review of vulnerabilities that it found,… following the policy internally, but…it wasn’t being surfaced all the way up to the National Security Council level,” he says. “[And] there wasn’t a robust process at the NSC level to really get the whole process working and all of the agencies involved.”<br></p><p>According to the <a href="https://www.eff.org/document/vulnerabilities-equities-process-january-2016?ref=zetter-zeroday.com">2010 VEP charter</a>, the review board is composed of representatives from government entities with offensive or defensive interest in software vulnerabilities. This includes the CIA, DoJ, DHS, NSA, U.S. CyberCommand, Department of Energy, State Department and others. The board reviews vulnerabilities discovered by the U.S. government, by contractors working for the government, or by foreign partner governments that share vulnerabilities with the U.S.</p><p><br>When an agency discovers a zero-day, it submits a description of it to the VEP secretariat along with a recommendation about whether to disclose or withhold. The secretariat has one business day to notify all participating agencies, who have five days to say whether disclosing or withholding the vulnerability will impact their offensive or defensive operations. The agency that found the vulnerability can call on experts to argue in favor of its position, and if the agencies don't reach consensus, the members of the board vote.</p><p><br>If the decision is to disclose, the agency that discovered the zero day has seven business days to do this. If the decision is to withhold, the board will revisit the decision annually until it eventually decides to disclose the vulnerability, or the vulnerability otherwise becomes publicly known or patched. If the government becomes aware in the meantime that the zero day is being exploited by criminal hackers or foreign adversaries, they must notify the executive secretariat, and members have one business day to determine if the vulnerability should be disclosed for patching.</p><p><br>The board can also decide to disseminate information about a vulnerability just to select entities, limit how the government can exploit the vulnerability, or use “indirect means” to let a vendor know about the vulnerability. The document does not elaborate on what the latter means.</p><p><br>Not every vulnerability undergoes a VEP review. Vulnerabilities that government agencies purchase from a seller under a non-disclosure agreement are exempt from VEP review. A seller would require an NDA if the sale isn’t exclusive and it wants to sell the zero day to other customers. Zero days obtained from a foreign government agency under a memo of understanding are also exempt from VEP review. Zero days that are excluded from review still need to be reported to the chair of the board, and the number of vulnerabilities each agency excludes from review has to be disclosed to all members.</p><p><br>When the charter was made public in 2016 in response to a lawsuit, civil liberties groups expressed concern that only government agencies were allowed to participate in decision making and that there didn’t appear to be anyone representing public interests. There also didn’t appear to be independent oversight of the process outside of the member agencies. The board was supposed to produce an annual report about all the zero days that underwent review, but there was no requirement to provide it to Congress or the public.</p><p><br>In 2017, the government released a revised charter, making the National Security Council overseer of the process. And whereas the previous charter emphasized U.S. government interests, the revised charter says the process should prioritize the public's interest and the security of critical information and infrastructure systems as long as there is no “demonstrable, overriding interest in the use of the vulnerability for lawful intelligence, law enforcement, or national security purposes.” In the “vast majority of cases,” it says disclosure is “in the national interest.” The requirement to provide reports to the intelligence communities for oversight came later and is the only part of the VEP that is codified. This means that as long as the process remains just policy and not law, the sitting administration can change it, though they are required to notify the intelligence communities if they do.</p><p><br>One important piece of information about the process that is still unknown and that troubles Moussouris is how the review board makes its risk assessments about whether a zero day should be disclosed. Moussouris, who previously was lead senior security strategist at Microsoft, says there’s no reliable formula for doing this, and even Microsoft finds it difficult to accurately gauge the risk posed by many vulnerabilities. The company might know how many of its direct customers are using a piece of vulnerable code, but it’s very difficult to gauge how many resellers and others have embedded the vulnerable code in critical infrastructure components, medical devices, banking machines and other systems.</p><p><br>“If even the vendors themselves would have a hard time gauging relative risk, how is the federal government supposed to asses that risk?” she says.</p><p>Updated 12pm: To clarify when Moussouris was part of the government's CSRB.</p><p><em>Thank you for reading. If you like this content and want to receive more like it in your inbox, become a subscriber. Zero Day is a reader-supported publication. You can support my work by becoming a paid subscriber and receiving content that is only available to paid subscribers or you can subscribe for free.</em></p>
    </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Simulating Water over Terrain (230 pts)]]></title>
            <link>https://lisyarus.github.io/blog/posts/simulating-water-over-terrain.html</link>
            <guid>42962508</guid>
            <pubDate>Thu, 06 Feb 2025 14:15:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lisyarus.github.io/blog/posts/simulating-water-over-terrain.html">https://lisyarus.github.io/blog/posts/simulating-water-over-terrain.html</a>, See on <a href="https://news.ycombinator.com/item?id=42962508">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page-content">
            
            <br><center><p>Simulating water over terrain</p></center><br>
            <center><span>2025 Feb 4</span></center>

            <p><i>If you don't want a long an boring introduction, skip directly to the <a href="#section-virtual-pipes-method">virtual pipes method description</a>.<br>I will get a little bit sad if you do this, though x)</i></p>

            <p>I'm somewhat obsessed with terrain generation, grid-based games, simulations, and stuff like that. And this stuff often involves <i>water</i>, — or at least it seems natural for water to be there.</p>

            <p>Say, you're generating a map for a strategy game, and you don't want the map borders to just be filled with inpenetrable void (like in old-school RTS games). Wouldn't it be nice for the border to be filled with water, like in this map from one of my abandoned projects:</p>

            <center><img src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/island-map.png"></center>

            <p>This provides a nice natural border, and maybe allows you to introduce some more water-related mechanics like sailing, fishing, trading, and sea warfare. Here's a 3D view of a similar island from the same project, for no particular purpose:</p>

            <center><img src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/island-sunset-view.jpeg"></center>

            <p>Or, say, you're making a peaceful village/town simulation game and you want your town to have a river for drinking, fishing, transportation, or even pure aesthetics. Or maybe you want a river just as a divider between areas, like in <a href="https://store.steampowered.com/app/2403100/Costa_Verde_Transport_Department">my first released game</a>:</p>

            <center><img src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/costa-verde-river.jpeg"></center>

            <p>I hope I've convinved you: having water <i>is really nice</i>. (Not that it wasn't obvious anyway).</p>

            <p>But water has problems.</p>

            <h2>Contents</h2>
            <ul id="contents"></ul>

            <h2 id="section-problems-with-water">Problems with water</h2>

            <p>Most games don't allow terrain modification, which is reasonable — not every game needs it. Even those that do can often get away with some simplistic approach: I can easily imagine being able to fill up a hill in a game like Civilization (though it would probably break a lot of stuff gameplay-wise), and it doesn't interact with water in any way.</p>

            <p><a href="https://www.youtube.com/playlist?list=PLSGI94QoFYJwGaieAkqw5_qfoupdppxHN">My game</a>, however, <i>does</i> need terrain modification:</p>

            <center><video muted="" loop="" controls=""><source src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/digging.mp4" type="video/mp4"></video></center>

            <p>Why? Well, uhm, because my design docs say so! I promise, it was somewhere on that page... or that one...</p>

            <p>Seriously, though, there are indeed a couple of reasons in my case:</p>

            <ul>
                <li>Some resourses in my game are literally taken from the ground, like dirt, sand, and clay, and it just makes sense that when you dig them up, the ground gets removed (otherwise we'd get an infinite source, which is not ideal)</li>
                <li>Similarly, for stuff like stones &amp; metal ores I'd prefer for them to get excavated from the ground when mining (instead of having a shiny "gold ore" boulder lying on the ground, as many games do), and it makes sense that the mined ground gets removed as well</li>
                <li>My game doesn't allow constructing buildings on slopes, so it's important to be able to level the terrain before building something on it, like in The Sims</li>
                <li>I want to give the player a ton of tools for creative expression, and terrain modification is one of them</li>
                <li>Let's be honest, <a href="https://www.windowscentral.com/gaming/minecraft/minecraft-crosses-300-million-copies-sold-as-it-prepares-to-celebrate-its-15th-anniversary">everybody loves</a> terrain modification</li>
            </ul>

            <p>So, OK, that does this have to do with water? Say, you have a lake, or even a puddle, and you've dug up its border and opened a free passage for the water to flow out. What does the water do?</p>

            <p>There are a number of simple options:</p>

            <ul>
                <li>Water doesn't go anywhere, and stays where it was initially generated (of course, this just feels boring and dumb)</li>
                <li>Water doesn't flow; instead, everything below a certain height level is considered water, like in Sapiens</li>
                <li>Water also exists below some level, but you can't even dig that far, or maybe you can only dig one level down to remove hills/mountains, like in RimWorld</li>
                <li>Water flows using some extremely simplistic model, like in Minecraft</li>
                <li>Water flows using some nice but still simplistic cellular-automata-ish model, like in Dwarf Fortress</li>
            </ul>

            <p>Among these solutions, not one feels satisfactory to me. They are good fallbacks to consider if I fail to find a better option, but as a main water model they are just too...boring. Dwarf Fortress comes closer than others, but still, their model is too blocky yet also designed for 3D, which I don't really need (see the next section).</p>

            <p>For years (yep, literally) I was passively searching for a model that would work for my needs. I researched a ton of literature on fluid simulations, particularly in climate &amp; oceans/rivers simulations, and got really scared because most of the models used there are insanely complicated, while their applicability to my case was always blurry since the scientific community usually doesn't cover game design. One time I even managed to compute something like the expected currents flowing around an island, by solving a mass conservation equation for the liquid flow, i.e. something like \(\nabla (\text{mass}\cdot\text{velocity})=0\):</p>

            <center><img src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/island-currents.jpeg"></center>

            <p>It's already something, but I need a dynamic model, not a static assignment of currents. <i>(It can still be useful for some funny climate map generation, I guess.)</i> By the way, it is theoretically easy to turn a dynamic model into a static one: just add equations like \(\frac{dX}{dt}=0\) for all your state variables \(X\), saying that you have a <i>steady state</i> (i.e. a solution that's perfectly stable and doesn't change with time, like a slowly flowing river).</p>

            <p>I could just give up, of course. After all, it's important to remember that, in the end, I'm not making some reality simulator, — I'm <i>making a game</i>, and I'm free to bend the rules of it any way I see fit. However, I also couldn't shake off the feeling that some clever combination of simple formulas should work for my case. And I was right!</p>

            <p><i>By the way, if reading this section made you scream "TIMBERBOOOORN" seven times, guess what: they <a href="https://www.gamedeveloper.com/design/deep-dive-timberborn-s-water-mechanics">use exactly the same model</a> as I'm going to describe.</i></p>

            <p><i>Also, if you know other models that you think would suit my case — tell me! I'd love to hear about them!</i></p>

            <h2 id="section-setup">The setup</h2>

            <p>I've said the phrase "my case" four times already, but what exactly do I mean? Here's the list of features I want my water simulation to have:</p>

            <ul>
                <li>The simulation should probably work on a grid, preferably on the same grid I'm using for the terrain</li>
                <li>The average scale of the simulation should be around 1 meter or so, — I don't care about tiny splashes of water, while a kilometer-wide simulation is too coarse for something like a city builder game (I can easily add fake higher-frequency visual details on the rendering side without having to simulate them)</li>
                <li>I'm fine with assuming that water is a height field over the terrain, i.e. it doesn't flow vertically and it doesn't have gaps in vertical cross-sections, because my game's terrain is itself a height field, and because this basically reduces the problem to 2D</li>
                <li>Water should be able to flow (duh)</li>
                <li>Water shouldn't magically disappear due to simulation errors (this happens with some models I tried before)</li>
                <li>The simulation should be controllably stable</li>
                <li>The simulation should be fast enough, ideally the cost of a single simulation step should be linear in the simulation size (i.e. a few for-loops over the simulation domain)</li>
            </ul>

            <p>As you can guess, I've found such a model, and this is what this article is about. But first,</p>

            <h2 id="section-non-solutions">Non-solutions</h2>

            <p>Let me describe a couple of popular options that <i>do not</i> suit my scenario.</p>

            <p>Smoothed Particle Hydrodynamics is an <a href="https://www.youtube.com/watch?v=rSKMYc1CQHE">insanely popular</a> way to do fluid simulations which produces impressive results. However, this method also solves <i>a completely different problem</i>! It gives you realistic, highly detailed and beautiful simulations, which is not what I want. Remember the "average scale" thing I said earlier? Having 1 meter-sized water particles doesn't really work, — they'll look like water-filled balloons, — but having smaller particles hits performance too much. I don't need a high-detailed simulation, I want a fast and reasonable one!</p>

            <p>Jos Stam's <a href="https://pages.cs.wisc.edu/~chaol/data/cs777/stam-stable_fluids.pdf">Stable Fluids</a> is probably the most well-known fluid simulation work known in computer graphics, which <i>also solves a different problem</i>. It works with a full volume of fluid, rather than with a free surface like I need. Think of a closed tank filled with water, as opposed to water over terrain. It is also far from fast: some steps of the simulation require iteratively solving a sparse linear system, which is doable but still expensive.</p>

            <p>In fact, I've implemented Stable Fluids once, and it's a really fun and impressive model, it's just a model for a different thing <i>(it solves the full Navier-Stokes instead of the shallow water equations that we actually need)</i>:</p>

            <center><video muted="" loop="" controls=""><source src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/stable-fluids.mp4" type="video/mp4"></video></center>

            <h2 id="section-shallow-water-equations">Shallow water equations</h2>

            <p><i>Beware: I'm not a physicist, and this section might be full of complete nonsense.</i></p>

            <p>Now, whenever we talk about seeking a <i>mathematical model</i> of something, it usually means we need some <i>equations</i> to solve. Generally, fluid motion is described by the <a href="https://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations">Navier-Stokes equations</a>, or by the simpler <a href="https://en.wikipedia.org/wiki/Euler_equations_(fluid_dynamics)">Euler equations</a>. However, these equations also don't talk about a free water surface, but instead about a volume completely filled with fluid.</p>

            <p>If we look at the variables these equations work with, we see fluid velocity, pressure, density, thermodynamic work, stress tensor, and some other things, and you'd need a good full course in fluid dynamics to figure out which of these are known, which are unknowns, and which can be derived from others (after lazily researching this for years I still don't know the answer, btw). Notice that there's nothing like "amount of water" here. We do have mass density, but all equations <i>divide</i> by it, so we can't really have zero density or a boundary between fluid and air. <i>(This can actually be done using stuff like the <a href="https://en.wikipedia.org/wiki/Particle-in-cell">particle-in-cell</a> and <a href="http://plaza.ufl.edu/ebrackear/">marker-and-cell</a> methods, if I'm not mistaken.)</i></p>

            <p>Even in the simplest form, these equations involve pressure \(p\), which is unknown and changes with time, but there's no equation for <i>how exactly</i> it evolves! I.e. there's no \(\frac{dp}{dt}=\dots\) equation. Instead, the time evolution of the pressure field is implicitly built into the other equtaions. This is closely related to the <i>projection step</i> in the Stable Fluids solver.</p>

            <p>What we need is to take something like Navier-Stokes, assume that we have a layer of water on top of some terrain (commonly called the <i>bed</i> in this case), and do some sort of averaging out along the vertical direction, so that we're left with purely 2D equations describing how water moves. That's exactly what the <a href="https://en.wikipedia.org/wiki/Shallow_water_equations">shallow water equations</a> are about!</p>

            <p>The "shallow" part means that we assume the typical vertical size of a water column to be much smaller than our typical horizontal scales. This is usually more or less true in things like modelling climate or river floods: the water heights (say, meters or tens of meters for a river) is much smaller than horizontal distances we're interested in (kilometers).</p>

            <p>These equations are what is typically used in a lot of "water over terrain" situations in science, and they are what we're going to solve as well. I won't put the equations themselves here — you can find them <a href="https://en.wikipedia.org/wiki/Shallow_water_equations">on wikipedia</a>, and that's not what this post is about. Instead, I'll describe the solution method directly, and try to make some sense of it.</p>

            <h2 id="section-staggered-grids">Staggered grids</h2>

            <p>One thing we need to talk about before describing the full solution is the grid. Usually when numerically solving differential equations, we discretize the simulation area into a grid (say, a grid of squares), and store the values of our field (velocity, pressure, stuff like that) per grid cell or per grid vertex.</p>

            <p>For example, when solving the <a href="https://en.wikipedia.org/wiki/Wave_equation">wave equation</a> (which works better for sound waves and EM waves rather than water waves), we store the wave height <code>u(i,j)</code>  and it's time derivative <code>du(i,j)</code> per each cell, and then the update code is</p>

            <pre><code>du(i,j) += (u(i+1,j)+u(i,j+1)+u(i-1,j)+u(i,j-1)-4*u(i,j)) * dt/dx/dx;
u(i,j) += du(i,j) * dt;</code></pre>

            <p>It may be a bit cryptic, but the main idea is that both quantities are stored on the same grid. This leads to nice finite-difference equations, is simple to code, and generally makes sense.</p>

            <p>Such grids are called <i>collocated</i>, which I always read as co-located: both quantities are <i>located</i> on the same grid. And such grids suck for fluid dynamics!</p>

            <p>One reason is that they make finite difference methods confusing. In the wave equation we have the second derivative, which can be computed in a nice and symmetric way as</p>

            <pre><code>(f(x+1) + f(x-1) - 2*f(x)) / (dx * dx)</code></pre>

            <p>But fluid dynamics feature first derivatives, in stuff like "the acceleration of fluid is proportional to the difference between how much water is on the left and the right". So, how do you compute this with finite differencies? <code>(f(x+1) - f(x)) / dx</code> makes the simulation biased to the right, may ignore some directional effects, and generally leads to instabilities. <code>(f(x) - f(x-1)) / dx</code> has the same problems. <code>(f(x+1) - f(x-1)) / (2*dx)</code> is nicely symmetric but ignores the value at the current cell <code>f(x)</code>, which also leads to instabilities. In general, naive discretization of fluid dynamics equations is typically extremely unstable, and everything just oscillates in a stupid way instead of solving the equation.</p>

            <p>Another way to see that this grid is not ideal is to consider this situation: assume that we store the water height and the water velocity vector in each cell. Now consider a cell that has incoming water flows both from left and right, and the water flows out to top and bottom cells. Here's an illustration:</p>

            <center><img src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/collocated-zero-velocity.png"></center>
            <center><i>Image based on illustrations on <a href="https://tum-pbs.github.io/PhiFlow/Staggered_Grids.html">this site</a>.</i></center>

            <p>The total velocity in this cell is zero! This is nonsense, since the water is clearly flowing quite a lot here.</p>

            <p>Things like these led people to reconsider their grid methods, and invent something called <a href="https://tum-pbs.github.io/PhiFlow/Staggered_Grids.html"><i>staggered grids</i></a>. There are many variants of these, but the typical one used for fluid simulation works like this: we store, say, water height/density/etc in square cells, but we store the velocity in <i>edges between cells</i>. Vertical edges (i.e. edges between horizontal neighbours) store the horizontal velocity, and vice versa. Here's an image:</p>

            <center><img src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/staggered-grid.png"></center>
            <center><i>Image from <a href="https://tum-pbs.github.io/PhiFlow/Staggered_Grids.html">this site</a>.</i></center>

            <p>Blue arrows indicate the stored values, one per each edge between cells. Notice that the boundary edges are also here: these correspond to the boundary conditions of your simulation (we'll get to these a bit later).</p>

            <p>So, if we want an \(N\times N\) square grid as our simulation area, we'd have to store</p>

            <ul>
                <li>\(N\times N\) array for, say, water height</li>
                <li>\((N+1)\times N\) array for X velocity</li>
                <li>\(N\times (N+1)\) array for Y velocity</li>
            </ul>

            <p>This might feel unusual, but the sooner you accept it, the better your fluid simulations will get :)</p>

            <h2 id="section-virtual-pipes-method">Virtual pipes method</h2>

            <p>At last, we've arrived to the actual method I'm using for simulating water over terrain. This method is called <i>virtual pipes</i>, because it is derived by assuming that the water cells are connected by imaginary pipes of some radius. I used <a href="https://diglib.eg.org/server/api/core/bitstreams/47f5228c-6f1c-4afb-ab80-b98c44575bc8/content">these</a> <a href="https://inria.hal.science/inria-00402079/document">two</a> papers as a reference for this method. Notice that the first paper also consideres multi-level water columns and vertical connections, while the second paper is primarily about hydraulic erosion; I didn't really do any of these since that's not my goal.</p>

            <p>First, for simplicity sake, let's ignore the terrain part, it will be trivial to add later. We'll store, just like in the previous section, three values on a staggered grid:</p>

            <ul>
                <li>\(N\times N\) <code>water</code> array for the height of water surface in this cell</li>
                <li>\((N+1)\times N\) <code>flowX</code> array for the total water <i>flow</i> between horizontally adjacent cells</li>
                <li>\(N\times (N+1)\) <code>flowY</code> array for the total water <i>flow</i> between vertically adjacent cells</li>
            </ul>

            <p><code>flowX(i,j)</code> is the horizontal flow (also calles <i>flux</i>) between cells <code>water(i-1,j)</code> and <code>water(i,j)</code>, unless it is a boundary edge (<code>i == 0</code> or <code>i == N</code>), and similarly for <code>flowY</code>.</p>

            <p><i>By the way, in what follows I'll use the notation <code>array(i,j)</code> to mean the <code>i,j</code>-th element of an array. In my actual C++ code the 2D arrays have an overloaded <code>operator()</code> to provide read-write element access, since multi-dimensional <code>operator[]</code> is only available since C++23.</i></p>

            <p>Notice how we'll store the <i>flow</i>, not the <i>velocity</i>. To make sense of a flow, imagine you've put a magic curtain between two adjacent cells which can measure how much water goes through it. The water stream going through this curtain has a certain cross-section area, and it moves with some velocity. If you multiply this two values, you get water volume per unit of time, which is exactly what we'll store.</p>

            <p>Flow tends to behave better than velocity when you have no water. For two adjacent empty cells, the flow between them is obviously zero, since there's no water to move. However, velocity is something like flow divided by water cross-section, i.e. zero divided by zero, which is always a problematic thing. You could say that in this case the velocity is obviously zero, but it's more subtle than that: what if both the water and the flow are very small, but non-zero? We'd quickly get into the territory of floating-point problems and discontinuities, and we'd have to figure out some thresholds such that below this water level threshold velocity is considered zero. All this is really messy, and working with flows instead of velocities just solves all these issues elegantly.</p>

            <p>Enough talking, here are the three steps involved in the method:</p>

            <ol>
                <li><a href="#section-flow-acceleration">Flow acceleration</a></li>
                <li><a href="#section-outflow-scaling">Outflow scaling</a></li>
                <li><a href="#section-water-column-updating">Water column updating</a></li>
            </ol>

            <p>Let's work them through one by one.</p>

            <h2 id="section-flow-acceleration">Flow acceleration</h2>

            <p>If you have two neighbouring water cells, and their water heights is different, basic reasoning tells us that water will flow from the larger to the smaller column. That's exactly what flow acceleration does: we take all <i>interior</i> (i.e. non-boundary) edges, and accelerate the flow in them based on the difference in water levels in corresponding water cells. We do this for the X flows:</p>

            <pre><code>for (int y = 0; y &lt; N; ++y)
    for (int x = 1; x &lt; N; ++x)
        flowX(x,y) += (water(x-1,y) - water(x,y)) * g * dt * A / dx;</code></pre>

            <p>and similarly for Y:</p>

            <pre><code>for (int y = 1; y &lt; N; ++y)
    for (int x = 0; x &lt; N; ++x)
        flowY(x,y) += (water(x,y-1) - water(x,y)) * g * dt * A / dy;</code></pre>

            <p>Here, <code>dx</code> and <code>dy</code> are the horizontal and vertical sizes of our sells (the lengths of the corresponding "pipes"), <code>dt</code> is the simulation time step (I'll talk about it later), <code>g</code> is the gravity, and <code>A</code> is the cross-section area of the virtual pipe. The <a href="https://diglib.eg.org/server/api/core/bitstreams/47f5228c-6f1c-4afb-ab80-b98c44575bc8/content">paper</a> takes <code>A=dx*dx</code>, while I took <code>A=1</code>. In general, <code>A</code> and <code>g</code> are only used in this step, and always as a product, so for our simple needs we can just ignore <code>A</code> and pretend that it is merged with <code>g</code>.</p>

            <p>Usually, we also add <i>friction</i> to this step. Friction simply scales down the flow on each iteration, typically making the simulation converge to a static stable state. The paper recommends using a factor of <code>pow(friction,dt)</code> to make it <code>dt</code>-independent (which is closely related to <a href="https://lisyarus.github.io/blog/posts/exponential-smoothing.html">exponential smoothing</a> I've explained in another article). Thus, the simulation code becomes</p>

            <pre><code>for (int y = 0; y &lt; N; ++y)
    for (int x = 1; x &lt; N; ++x)
        flowX(x,y) = flowX(x,y) * pow(friction,dt)
                   + (water(x-1,y) - water(x,y)) * g * dt / dx;</code></pre>

            <p>and similarly for Y:</p>

            <pre><code>for (int y = 1; y &lt; N; ++y)
    for (int x = 0; x &lt; N; ++x)
        flowY(x,y) = flowY(x,y) * pow(friction,dt)
                   + (water(x,y-1) - water(x,y)) * g * dt / dy;</code></pre>

            <p><code>friction</code> is typically between 0 and 1. <code>friction=0</code> means maximal friction, i.e. the flow from the previous simulation step is completely annihilated. <code>friction=1</code> means no friction at all. Because of this I'm actually using the formula <code>pow(1-friction,dt)</code> to make the <code>friction</code> value more intuitive. Of course, we should precompute the friction factor <code>pow(1-friction, dt)</code> at the start of simulation step, instead of computing it for each cell.</p>

            <p>The time step <code>dt</code> is a bit tricky. Obviously, the larger it is, the faster the simulation goes. However, large values of <code>dt</code> also lead to instabilities. In general, there is a famous <a href="https://en.wikipedia.org/wiki/Courant%E2%80%93Friedrichs%E2%80%93Lewy_condition">Courant-Friedrichs-Lewy condition (CFL)</a> common to all fluid simulations. It states that, roughly speaking, the quotient <code>dx/dt</code> must not be less than the maximum speed of the fluid. In practice that means that we have to decrease <code>dt</code> (thus increasing the value of <code>dx/dt</code>) until the simulation becomes stable. I've used values around <code>0.001</code> and <code>0.01</code>.</p>

            <p>So, this step essentially acelerates the water flow, kinda like \(\frac{dv}{dt} = a = \frac{F}{m}\) from Newton's laws.</p>

            <h2 id="section-water-column-updating">Water column updating</h2>

            <p>Yep, we'll first look at the third step of the simulation, because it will be important for understanding the second step.</p>

            <p>This step is probably the simplest. For each water cell, we simply add or remove water according to the horizontal and vertical flows adjacent to this cell:</p>

            <pre><code>for (int y = 0; y &lt; N; ++y)
    for (int x = 0; x &lt; N; ++x)
        water(x,y) += (
                  flowX(x,  y) + flowY(x,y  )
                - flowX(x+1,y) - flowY(x,y+1)
            ) * dt/dx/dy;</code></pre>

            <p><code>flowX(x,y)</code> and <code>flowY(x,y)</code> flow <i>towards</i> our <code>water(x,y)</code> cell, so we <i>add</i> them. The flows <code>flowX(x+1,y)</code> and <code>flowY(x,y+1)</code> flow <i>out of</i> our cell, thus we <i>subtract</i> them.</p>

            <p>This step just moves the water between the cells, according to the computed flows. The \(\frac{dx}{dt} = v\) part of Newton's laws, if you like.</p>

            <h2 id="section-outflow-scaling">Outflow scaling</h2>

            <p>This second step is probably the trickiest. See, we might have a problem on step 3: if the outgoing flow is large enough, the amount of water in a cell can <i>become negative</i>! This is bad, since there's no such thing as a negative amount of water (as opposed to e.g. EM waves).</p>

            <p>Fortunately, there is a simple solution called <i>outflow scaling</i>. We look at the flows adjacent to some water cell, and only consider the <i>outgoing</i> flows, i.e. flows that <i>remove</i> water from this cell, not <i>add</i> water. We take the total outgoing flow by summing these flows, and compare it to the actual amount of water in this cell. If we figure out that on the 3rd step we'll try to remove more water than the cell actually has, we simply <i>scale</i> the outgoing flows down, so that the water amount stays positive (or zero). Here's the code:</p>

            <pre><code>for (int y = 0; y &lt; N; ++y) {
    for (int x = 0; x &lt; N; ++x) {
        float total_outflow = 0.f;
        total_outflow += max(0.f, -flowX(x,y));
        total_outflow += max(0.f, -flowY(x,y));
        total_outflow += max(0.f, flowX(x+1,y));
        total_outflow += max(0.f, flowY(x,y+1));

        float max_outflow = water(x, y) * dx*dy/dt;

        if (total_outflow &gt; 0.f) {
            float scale = min(1.f, max_outflow / total_outflow);

            if (flowX(x,y) &lt; 0.f) flowX(x,y) *= scale;
            if (flowY(x,y) &lt; 0.f) flowX(x,y) *= scale;
            if (flowX(x+1,y) &gt; 0.f) flowX(x+1,y) *= scale;
            if (flowX(x,y+1) &gt; 0.f) flowX(x,y+1) *= scale;
        }
    }
}</code></pre>

            <p>It's a bit messy due to having to filter only outgoing flows, but it gets the job done.</p>

            <h2 id="section-terrain-elevation">Terrain elevation</h2>

            <p>Now, we want water moving over <i>terrain</i>, but where's the terrain in these equations? Adding terrain is actually extremely easy. Imagine two neighbouring water cells with equal water column heights: they don't try to move into each other, because the water level is the same. Now let's imagine that the left cell has some non-zero terrain elevation below it. This moves the water <i>surface</i> height up, and now this cell's <i>surface</i> is higher than the right cell, and the water starts to move.</p>

            <p>That is to say, when accelerating the flows, we simply need to replace the water <i>column</i> height by the water <i>surface</i> height, which is just terrain height plus column height.</p>

            <p>If <code>terrain(x,y)</code> is the terrain elevation at a cell, then all we need is to update acceleration computations:</p>

            <pre><code>for (int y = 0; y &lt; N; ++y)
    for (int x = 1; x &lt; N; ++x)
        flowX(x,y) = flowX(x,y) * pow(friction,dt)
                   + (
                      water(x-1,y) + terrain(x-1,y)
                    - water(x,y) - terrain(x,y)
                   ) * g * dt / dx;</code></pre>

            <p>and similarly for Y:</p>

            <pre><code>for (int y = 1; y &lt; N; ++y)
    for (int x = 0; x &lt; N; ++x)
        flowY(x,y) = flowY(x,y) * pow(friction,dt)
                   + (
                      water(x,y-1) + terrain(x,y-1)
                    - water(x,y) - terrain(x,y)
                   ) * g * dt / dy;</code></pre>

            <h2 id="section-boundary-conditions">Boundary conditions</h2>

            <p>When solving partial differential equations (which is what we're secretely doing here!), it's always important to consider what happens <i>at the boundary</i> of our simulation. For the virtual pipes method, the boundary conditions are implicitly defined by the boundary flow values, i.e.</p>

            <ul>
                <li>Left boundary: <code>flowX(0,y)</code></li>
                <li>Right boundary: <code>flowX(N,y)</code></li>
                <li>Bottom boundary: <code>flowY(x,0)</code></li>
                <li>Top boundary: <code>flowY(N,0)</code></li>
            </ul>

            <p>We can set these to whatever we want:</p>

            <ul>
                <li>Setting them to 0 makes them act like walls: water waves will simply collide with them</li>
                <li>Setting them to inflow (positive for left/bottom, negative for right/top) will make them add water to the simulation</li>
                <li>Setting them to outflow (negative for left/bottom, positive for right/top) will make them remove water from the simulation</li>
            </ul>

            <p>For stuff like water over terrain, outflow boundary conditions seem reasonable (water on the edge of the map will simply disappear through the edge). If some parts of the boundary cross a river, we'd probably want this parts to be an inflow instead, so that the river actually, y'know, has flowing water in it.</p>

            <p>It is important to set these values at the start of each simulation step, because outflow scaling can change them (and your outflow boundary can turn into a wall boundary).</p>

            <h2 id="section-viscosity">Viscosity</h2>

            <p>The <a href="https://diglib.eg.org/server/api/core/bitstreams/47f5228c-6f1c-4afb-ab80-b98c44575bc8/content">paper</a> also adds viscosity to the simulation, simply scaling the flows by some factor that depends on the water height (thus, it is different from friction). The idea is that smaller water layers have trouble moving around due to various internal forces, but larger water layers can move freely. This turns into simply multiplying the flows by \(\frac{H^2}{H^2+3\cdot \Delta t\cdot \nu}\), where \(H\) is the water level of the cell where the flow originates (e.g. left cell for positive X-flow, and right cell for a negative X-flow), and \(\nu\) is the viscosity constant.</p>

            <p>Here's the code:</p>

            <pre><code>for (int y = 0; y &lt; N; ++y) {
    for (int x = 1; x &lt; N; ++x) {
        float H = (flowX(x,y) &gt; 0.f) ? water(x-1,y) : water(x,y);
        H *= H;

        if (H &gt; 0.f)
            flowX(x,y) *= H/(H + 3*dt*viscosity);
    }
}</code></pre>

            <p>And similarly for Y:</p>

            <pre><code>for (int y = 1; y &lt; N; ++y) {
    for (int x = 0; x &lt; N; ++x) {
        float H = (flowY(x,y) &gt; 0.f) ? water(x,y-1) : water(x,y);
        H *= H;

        if (H &gt; 0.f)
            flowY(x,y) *= H/(H + 3*dt*viscosity);
    }
}</code></pre>

            <p>I imagine this could be useful for something like magma flow, but I didn't use it for water. The effects of viscosity are important on small scales (the paper applies it to blood flow inside organs), but on large terrain scales viscosity has almost no effect.</p>

            <h2 id="section-full-simulation-code">Full simulation code</h2>

            <p>So, here's the full simulation code that I used:</p>

            <pre><code>// Init boundary flows
for (int i = 0; i &lt; N; ++i) {
    flowX(0,i) = ...; // left boundary
    flowX(N,i) = ...; // right boundary
    flowY(i,0) = ...; // bottom boundary
    flowY(i,N) = ...; // top boundary
}

// Precompute the friction factor
float frictionFactor = pow(1-friction,dt);

// Accelerate X-flows
for (int y = 0; y &lt; N; ++y)
    for (int x = 1; x &lt; N; ++x)
        flowX(x,y) = flowX(x,y) * frictionFactor
                   + (
                      water(x-1,y) + terrain(x-1,y)
                    - water(x,y) - terrain(x,y)
                   ) * g * dt / dx;

// Accelerate Y-flows
for (int y = 1; y &lt; N; ++y)
    for (int x = 0; x &lt; N; ++x)
        flowY(x,y) = flowY(x,y) * frictionFactor
                   + (
                      water(x,y-1) + terrain(x,y-1)
                    - water(x,y) - terrain(x,y)
                   ) * g * dt / dy;

// Scale outflows to prevent negative water amounts
for (int y = 0; y &lt; N; ++y) {
    for (int x = 0; x &lt; N; ++x) {
        float total_outflow = 0.f;
        total_outflow += max(0.f, -flowX(x,y));
        total_outflow += max(0.f, -flowY(x,y));
        total_outflow += max(0.f, flowX(x+1,y));
        total_outflow += max(0.f, flowY(x,y+1));

        float max_outflow = water(x, y) * dx*dy/dt;

        if (total_outflow &gt; 0.f) {
            float scale = min(1.f, max_outflow / total_outflow);

            if (flowX(x,y) &lt; 0.f) flowX(x,y) *= scale;
            if (flowY(x,y) &lt; 0.f) flowX(x,y) *= scale;
            if (flowX(x+1,y) &gt; 0.f) flowX(x+1,y) *= scale;
            if (flowX(x,y+1) &gt; 0.f) flowX(x,y+1) *= scale;
        }
    }
}

// Update water columns
for (int y = 0; y &lt; N; ++y)
    for (int x = 0; x &lt; N; ++x)
        water(x,y) += (
                  flowX(x,  y) + flowY(x,y  )
                - flowX(x+1,y) - flowY(x,y+1)
            ) * dt/dx/dy;</code></pre>

            <p>And that's it! It might look intimidating at first, but as I've tried to explain earlier each step is actually pretty reasonable and intuitive. In the end, the bulk of the simulation is just 4 for-loops over a few 2D arrays with some fairly simple formulas inside.</p>

            <p>You can have a look at full C++ update code <a href="https://bitbucket.org/lisyarus/psemek/src/3655fc9c6f424559179570c640dbdae39352f089/examples/water_2d.cpp#lines-155">here</a>, though there's quite a bit of other stuff going on.</p>

            <p>Here's what it looks like:</p>

            <center><video muted="" loop="" controls=""><source src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/water.mp4" type="video/mp4"></video></center>
            <center><i>Footage from my <a href="https://github.com/lisyarus/webgpu-shallow-water">WebGPU water simulator</a> that I released several days ago.</i></center>

            <p><i>(The particles in the video are for visualization only, they don't take part in the simulation itself.)</i></p>

            <p>Once you've found good parameter values (for <code>dt</code> and <code>g</code>), this thing seems to be stable as heck, while still satisfying all my requirements and generally looking more or less like water. Hooray!</p>

            <h2 id="section-model-shortcomings">Model shortcomings</h2>

            <p>Of course, this model isn't perfect. One of the most obvious problems is that it doesn't have <i>inertia</i> and <i>velocity diffusion</i>. A fast water stream entering a lake won't propagate further inside the lake, but will instead spread out in all directions, ignoring all accumulated inertia. Two parallel water streams going in opposite directions can exist and not interact with each other (provided the water levels are equal).</p>

            <p>It also tends to create these waves when the water first enters some area, which looks a bit weird, but I guess this is acceptable:</p>

            <center><video muted="" loop="" controls=""><source src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/spill-waves.mp4" type="video/mp4"></video></center>

            <h2 id="section-triangular-grids">Bonus: hex/triangular grids</h2>

            <p>My game actually uses a regular triangular grid, not a square one, because...reasons. In fact, Boris The Brave has <a href="https://www.boristhebrave.com/2021/05/23/triangle-grids/">neatly summarized</a> all the advantages of such grids, and I'll refer you to his article.</p>

            <p>Triangle grids can be seen as duals to hexagonal grids: just connect the centers of adjacent hexagons with lines, and they'll form a regular triangular grid. If we look at <a href="https://www.redblobgames.com/">Red Blob Games</a>' <a href="https://www.redblobgames.com/grids/hexagons/">amazing article</a> on hexagonal grids, what I'm using is basically the axial coordinate system on a dual to a pointy-top hex orientation.</p>

            <p>What's cool is that we can store such grid in <i>usual 2D arrays</i> (just skewed a bit), and refer to vertices of such grid using <code>X,Y</code> coordinates:</p>

            <center><img src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/triangular-grid.png"></center>
            <center><i>Image credit to <a href="https://tex.stackexchange.com/a/562366">user cis</a> on tex.stackexchange</i></center>

            <p>So, to simulate water on such a grid, I'll store water column height at grid vertices, which will make it easy to render the water surface (it's just a triangulation, much like the terrain itself).</p>

            <p>The flows are a bit more complicated. There are flows in the X direction, flows in the Y direction, and flows in the...Z direction? Let's call it like that. Here's an illustration:</p>

            <center><img src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/hex-grid-flows.jpg"></center>
            <center><i>You have to excuse my drawing skills, I didn't have the time for a proper vector drawing</i></center>

            <p>So, for each vertex, there are:</p>

            <ul>
                <li>X-flow coming from the left</li>
                <li>X-flow going to the right</li>
                <li>Y-flow coming from bottom-left</li>
                <li>Y-flow going to top-right</li>
                <li>Z-flow coming from bottom-right</li>
                <li>Z-flow going to top-left</li>
            </ul>

            <p>For an \(N\times N\) grid of vertices, we have:</p>

            <ul>
                <li>\((N+1)\times N\) array of X-flows</li>
                <li>\(N\times (N+1)\) array of Y-flows</li>
                <li>\((N+1)\times (N+1)\) array of Z-flows, with the bottom-left and top-right values being unused</li>
            </ul>

            <p>This way,</p>

            <ul>
                <li><code>flowX(x,y)</code> is the flow from <code>(x-1,y)</code> to <code>(x,y)</code></li>
                <li><code>flowY(x,y)</code> is the flow from <code>(x,y-1)</code> to <code>(x,y)</code></li>
                <li><code>flowZ(x,y)</code> is the flow from <code>(x,y-1)</code> to <code>(x-1,y)</code></li>
            </ul>

            <p>Not much changes from the square grid case, we just need to incorporate the Z-flow into 1) boundary conditions, 2) acceleration, 3) outflow scaling, and 4) water updating. The hardest part here is not to mess up the indexing :)</p>

            <p>You can find the C++ code for such a simulation <a href="https://bitbucket.org/lisyarus/psemek/src/3655fc9c6f424559179570c640dbdae39352f089/examples/water_2d_hex.cpp#lines-115">here</a>. It works pretty well, and is hopefully a bit more isotropic than the square grid case :)</p>

            <center><video muted="" loop="" controls=""><source src="https://lisyarus.github.io/blog/media/simulating-water-over-terrain/hex-grid-water.mp4" type="video/mp4"></video></center>

            <p>I've yet to implement all this in my game, though, — there are many, many more important things to do. But I'm quite determined that my game will have at least some form of basic water simulation now, which sounds super exciting. Imagine digging trenches to automatically water large farms, or diverting a river so that it floods a nearby village? The possibilities are endless. And for now, thanks for reading.</p>

            
            
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pre-Trained Large Language Models Use Fourier Features for Addition (2024) (103 pts)]]></title>
            <link>https://arxiv.org/abs/2406.03445</link>
            <guid>42960989</guid>
            <pubDate>Thu, 06 Feb 2025 10:31:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2406.03445">https://arxiv.org/abs/2406.03445</a>, See on <a href="https://news.ycombinator.com/item?id=42960989">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2406.03445">View PDF</a>
    <a href="https://arxiv.org/html/2406.03445v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>Pre-trained large language models (LLMs) exhibit impressive mathematical reasoning capabilities, yet how they compute basic arithmetic, such as addition, remains unclear. This paper shows that pre-trained LLMs add numbers using Fourier features -- dimensions in the hidden state that represent numbers via a set of features sparse in the frequency domain. Within the model, MLP and attention layers use Fourier features in complementary ways: MLP layers primarily approximate the magnitude of the answer using low-frequency features, while attention layers primarily perform modular addition (e.g., computing whether the answer is even or odd) using high-frequency features. Pre-training is crucial for this mechanism: models trained from scratch to add numbers only exploit low-frequency features, leading to lower accuracy. Introducing pre-trained token embeddings to a randomly initialized model rescues its performance. Overall, our analysis demonstrates that appropriate pre-trained representations (e.g., Fourier features) can unlock the ability of Transformers to learn precise mechanisms for algorithmic tasks.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Deqing Fu [<a href="https://arxiv.org/show-email/20287840/2406.03445" rel="nofollow">view email</a>]      <br>    <strong>[v1]</strong>
        Wed, 5 Jun 2024 16:40:53 UTC (14,504 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Aluminum Batteries Outlive Lithium-Ion with a Pinch of Salt (134 pts)]]></title>
            <link>https://spectrum.ieee.org/aluminum-battery</link>
            <guid>42960907</guid>
            <pubDate>Thu, 06 Feb 2025 10:13:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spectrum.ieee.org/aluminum-battery">https://spectrum.ieee.org/aluminum-battery</a>, See on <a href="https://news.ycombinator.com/item?id=42960907">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-headline="A Pinch of Salt Boosts Aluminum Batteries"><p><a href="https://spectrum.ieee.org/tag/electric-vehicles">Electric vehicles</a>( <a href="https://spectrum.ieee.org/tag/evs">EVs</a>) and <a href="https://spectrum.ieee.org/tag/green-energy" target="_blank">green energy</a> sources rely heavily on <a href="https://spectrum.ieee.org/tag/batteries">batteries</a> to store electricity. Currently, more than 75 percent of the world’s <a href="https://spectrum.ieee.org/tag/energy-storage">energy storage</a>&nbsp;<a href="https://www.prnewswire.com/news-releases/battery-for-energy-storage-systems-market-to-grow-by-usd-22-18-billion-2025-2029-transition-from-fossil-fuels-to-renewable-energy-drives-growth-report-on-ai-driven-market-evolution---technavio-302359010.html" rel="noopener noreferrer" target="_blank">depends on batteries that contain lithium</a>, an expensive mineral that’s subject to volatile pricing. <a href="https://spectrum.ieee.org/tag/lithium-ion">Lithium-ion</a> (Li-ion) batteries themselves can be volatile, too, because they use a flammable electrolyte that can catch fire when overcharged. </p><p>Now, a group of scientists based in <a href="https://spectrum.ieee.org/tag/beijing">Beijing</a> believes that aluminum offers a better solution. Aluminum is the <a href="https://www.batterytechonline.com/materials/earth-abundant-elements-like-aluminum-could-replace-lithium-in-batteries" rel="noopener noreferrer" target="_blank">third-most abundant mineral in the Earth’s crust</a> and costs about one-quarter as much as lithium. And if built right, aluminum-based batteries may offer longer life expectancy and a safer, more sustainable design than their volatile counterparts. Led by scientists from the Beijing Institute of Technology and the University of Science and Technology Beijing, the group has found a way to <a href="https://pubs.acs.org/doi/10.1021/acscentsci.4c01615" rel="noopener noreferrer" target="_blank">stabilize aluminum batteries</a> that can last far longer. </p><p><a href="https://spectrum.ieee.org/tag/aluminum-ion">Aluminum-ion</a> (Al-ion) batteries have been the subject of research for years. But previous attempts have generally used <a href="https://spectrum.ieee.org/tag/ionic-liquid">ionic liquid</a>&nbsp;<a href="https://spectrum.ieee.org/tag/electrolytes">electrolytes</a>, which can lead to anode <a href="https://spectrum.ieee.org/tag/corrosion">corrosion</a>, especially in humid conditions. Other researchers have used gel polymer electrolytes, halfway between liquid and solid-state alternatives, but these tend to have low conductivity. <span>This team of researchers took a different approach and added a pinch of salt</span><span>—namely, </span><span>an inert aluminum fluoride salt</span><span>—</span><span>to a liquid electrolyte containing aluminum <a href="https://spectrum.ieee.org/tag/ions">ions</a></span><span>, creating</span><span> a solid-state electrolyte. </span></p><p><span><strong><span></span></strong>Well, more than a pinch of salt, really. The salt</span><span> has a porous 3D structure, which allows it to act like a rigid sponge that absorbs and stabilizes the liquid, yet still allows the ions to move more freely. This increases conductivity of the material, and the result is a solid composite material that cannot leak. The researchers also coated the electrodes with a thin layer of material that helps prevent crystals of aluminum from forming, which would degrade battery performance over time. </span></p><p><span>“Our research shows that a stable, recyclable solid-state electrolyte can improve aluminum-ion batteries by solving issues like corrosion, safety, and long-cycle life, making them a potential alternative to lithium-based batteries,” says Shuqiang Jiao, a professor of electrochemical engineering at the University of Science and Technology Beijing.</span></p><h2>Aluminum’s Advantages</h2><p>The researcher’s tests demonstrated that the resulting battery design can have an extremely long life, with the battery retaining 99 percent of its original capacity after 10,000 charge/discharge cycles. In contrast, a typical <a href="https://spectrum.ieee.org/tag/li-ion-battery">Li-ion battery</a> retains only 80 percent of its charge capacity after 300 to 500 cycles, depending on conditions.</p><p>The solid-state electrolyte is also safer than typical Li-ion designs, which use liquid electrolytes. It won’t leak the way conventional batteries with a liquid electrolyte can, so the researcher’s Al-ion batteries <strong></strong>continued to function normally when damaged by <u></u>repeated punctures, even when penetrated all the way through. The batteries were also tested at temperatures as high as 200 degrees Celsius; the output voltage was nearly the same in spite of the heat, and the battery didn’t expand or deform excessively. <strong></strong></p><p>In addition to these performance advantages, the Al-ion battery boasts better recyclability, compared to conventional Li-ion designs. The researchers found that they were able to easily recover as much as 80 percent of the aluminum fluoride salt from the lab experiments, and they predict much higher levels of recovery at industrial scales. The solid aluminum foil can also be reused after a simple surface cleaning. As a result, the entire design lends itself to efficient <a href="https://spectrum.ieee.org/tag/recycling">recycling</a> of the components.</p><p>A better battery could have a major impact on many markets. “Innovations that elongate battery life and bring down costs have the potential to transform multiple industries, from automotive to <a href="https://spectrum.ieee.org/topic/consumer-electronics/">consumer electronics</a> and home security,” says <a href="https://www.parksassociates.com/team-detail/jennifer-kent" target="_blank">Jennifer Kent</a>, vice president of research at market research firm Parks Associates. “Battery range is a top barrier for EV purchases, for instance, with 39 percent of those not owning or intending to buy an EV saying that EVs need to be charged too frequently or have a limited driving range.” Less expensive batteries could also play an important role in advancing the use of <a href="https://spectrum.ieee.org/tag/sustainable-energy">sustainable energy</a> sources, such as wind and solar, by providing a cost-effective way to store excess energy until it is needed.</p><p>The new battery structure should be easy to <a href="https://spectrum.ieee.org/solid-state-battery-production-challenges" target="_blank">manufacture at commercial scale</a>. But before the Al-ion battery is ready for commercial applications, its <a href="https://spectrum.ieee.org/tag/energy-density">energy density</a> will need to be improved, the researchers say. Still, this new approach offers the potential for batteries that are safer, less expensive, longer lasting, and easier to recycle efficiently.</p><p><em>This story was updated on 5 February 2025 to include a quote from Shuqjiang Jiao.</em><br></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US Cloud soon illegal in EU? US punches first hole in EU-US Data Deal (138 pts)]]></title>
            <link>https://noyb.eu/en/us-cloud-soon-illegal-trump-punches-first-hole-eu-us-data-deal</link>
            <guid>42960788</guid>
            <pubDate>Thu, 06 Feb 2025 09:52:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://noyb.eu/en/us-cloud-soon-illegal-trump-punches-first-hole-eu-us-data-deal">https://noyb.eu/en/us-cloud-soon-illegal-trump-punches-first-hole-eu-us-data-deal</a>, See on <a href="https://news.ycombinator.com/item?id=42960788">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><ul><li><a href="https://noyb.eu/en/eu-us-data-transfers-0">Background on the EU-US data transfer saga</a></li><li><a href="https://ec.europa.eu/commission/presscorner/api/files/attachment/872132/Trans-Atlantic%20Data%20Privacy%20Framework.pdf">TADPF information PDF by the EU</a></li><li><a href="https://www.dataprivacyframework.gov/">TADPF program page by the US Government</a></li><li><a href="https://eur-lex.europa.eu/eli/dec_impl/2023/1795/oj/eng">TADPF Decision (EU) 2023/1795</a></li><li>CJEU: <a href="https://curia.europa.eu/juris/liste.jsf?nat=or&amp;mat=or&amp;pcs=Oor&amp;jur=C%2CT%2CF&amp;num=C-362%252F14&amp;for=&amp;jge=&amp;dates=&amp;language=en&amp;pro=&amp;cit=none%252CC%252CCJ%252CR%252C2008E%252C%252C%252C%252C%252C%252C%252C%252C%252C%252Ctrue%252Cfalse%252Cfalse&amp;oqp=&amp;td=%3BALL&amp;avg=&amp;lgrec=de&amp;lg=&amp;page=1&amp;cid=24419979">Schrems I</a> and <a href="https://curia.europa.eu/juris/liste.jsf?nat=or&amp;mat=or&amp;pcs=Oor&amp;jur=C%2CT%2CF&amp;num=C-311%252F18&amp;for=&amp;jge=&amp;dates=&amp;language=en&amp;pro=&amp;cit=none%252CC%252CCJ%252CR%252C2008E%252C%252C%252C%252C%252C%252C%252C%252C%252C%252Ctrue%252Cfalse%252Cfalse&amp;oqp=&amp;td=%3BALL&amp;avg=&amp;lgrec=de&amp;lg=&amp;page=1&amp;cid=24420097">Schrems II</a></li><li><a href="https://news.bloomberglaw.com/privacy-and-data-security/trump-terminates-trio-of-democrats-from-privacy-oversight-board">Report on the removal of PCLOB members</a></li></ul><p><strong>The EU-US Data Transfer System - a mix of EU and US law. </strong>Generally, EU law prohibits exporting personal data to countries outside of the EU since 1995, unless there is an absolute need (e.g. when sending an email to any non-EU country). Data can be sent abroad when the non-EU country provides "essentially equivalent" protection of Europeans' personal data. The US, on the other hand, has <a href="https://noyb.eu/en/eu-us-data-transfers-0">very strong mass surveillance laws</a> (e.g. FISA702 or EO 12.333), that allow the US government to access any data stored with Amazon, Meta, Microsoft, Google and any other US Big Tech firm without probable cause or individual judicial approval. Therefore, the European Court of Justice has held twice (<a href="https://curia.europa.eu/juris/liste.jsf?nat=or&amp;mat=or&amp;pcs=Oor&amp;jur=C%2CT%2CF&amp;num=C-362%252F14&amp;for=&amp;jge=&amp;dates=&amp;language=en&amp;pro=&amp;cit=none%252CC%252CCJ%252CR%252C2008E%252C%252C%252C%252C%252C%252C%252C%252C%252C%252Ctrue%252Cfalse%252Cfalse&amp;oqp=&amp;td=%3BALL&amp;avg=&amp;lgrec=de&amp;lg=&amp;page=1&amp;cid=24419979">Schrems I</a> and <a href="https://noyb.eu/en/cjeu">Schrems II</a>) that US law is not "essentially equivalent". However, Ursula von der Leyen has insisted to pass a third EU-US deal, called <a href="https://noyb.eu/en/european-commission-gives-eu-us-data-transfers-third-round-cjeu">"Transatlantic Data Privacy Framework"</a> (TADPF).</p><p><strong>TADPF was built on sand. </strong>On 10.7.2023 the European Commission issued <a href="https://eur-lex.europa.eu/eli/dec_impl/2023/1795/oj/eng">Implementing Decision (EU) 2023/1795</a>, formally passing the TADPF. This allowed any EU business to freely transfer data to US providers, despite US surveillance laws. The European Commission relied on (very questionable) executive orders or letters by the US government, including the PCLOB, to find that the US is "essentially equivalent". However, these elements are not reflected in US statutes and codified law, because there was no majority in the US Congress to pass such laws<span>. </span>It was long criticised that the next US president could kill these protections with the strike of a pen. This scenario is now on the horizon. In its decision, the European Commission mentioned the PCLOB a whopping 31 times to explain why the US has "essentially equivalent" protections. The PCLOB is the only general "oversight" body that monitors if US services actually compy with laws, orders and other promises. Other elements of US law, like various redress mechanisms, require a plaintiff to become active. The US has traditionally blocked access to these bodies via various "standing" rules, leading to basically no lawsuits ever beeing admitted. This means that the PCLOB is the only relevant oversight mechanism that the TADPF relied upon.</p><p>Max Schrems: "<em>This deal was always built on sand, but the EU business lobby and the European Commission wanted it anyways. Instead of stable legal limitations, the EU agreed to executive promises that can be overturned in seconds. Now that the first Trump waves hit this deal, it quickly throws many EU businesses into a legal limbo. The PCLOB itself is only one puzzle piece, and as long as it is only temporarily not functioning, there is an argument that the deal is not worse then before. However, the direction this is taking in the first week of the Trump Presidency is not looking good. We are closely monitoring, if this is a temporary problem or if the PCLOB is being killed for good."</em></p><p><strong>Independence of executive bodies called into question.</strong> Different to data protection authorities in the EU, most US oversight bodies are creatures of the executive branch and hence not independent. Independence is often only granted by the President, but can be revoked or overruled at any time. Many of these strange legal concepts are a reults of the structural inability to pass actual legislation in the US. Instead, entire legal areas are merely regulated by Presidential orders. The fact that the US president is now attempting to simply remove people, calls into question if the idea of (allegedly) "independent" executive bodies was even factually arguable from the get go. Many other elements of the TADPF, like the Data Protection Review Court have even weaker legal protections than the PCLOB.</p><p>Max Schrems: "<em>There were many questions on the independence of these oversight mechanisms. Unfortunately, it seems that they may not even stand the test of just the first days of a Trump Presidency. This is the difference between solid legal protections in law and wishful thinking. The European Commission has solely relied on the latter.</em>"</p><p><strong>45 days for next crunch point. </strong>In <a href="https://www.whitehouse.gov/presidential-actions/2025/01/initial-rescissions-of-harmful-executive-orders-and-actions/">one of the first Executive Orders Trump has signed</a> on Monday, he determined that all Biden national security decisions (including the relevant decisions that the EU-US transfers rely upon) shall be reviewed and potentially scrapped within 45 days. This means that further elements the TADPF relied upon could collapse within days. As the entire deal is based on Biden executive decisions, Trump could scrap all key elements of the deal with a single signature <span lang="de">–</span> leading to instantly illegal data transfers between the EU and the US.</p><p>Max Schrems: "<em>I can hardly imagine that a Biden Executive Order that was forced on the US by the EU and that regulates US espionage abroad could survive Trump's 'America First' logic. The problem is, that not just US Big Tech, but especially normal EU businesses all rely on this system of instable executive orders to argue that using US cloud systems is legal in the EU."</em></p><p><strong>Commission manoeuvred EU businesses towards a cliff.</strong> Despite all facts and criticism by the European Parliament and EU data protection authorities, the European Commission has consistently argued that the TADPF is solid and sound. The EU business lobby pushed for a(ny) deal <span lang="de">–</span> no matter how unstable or wacky. Equally, US Big Tech wanted to stay on the EU market without any technical limitations in relation to US government access. Now, everyone from large banks, entire national school systems to many small businesses may wake up to a legal situation, where the use of US cloud products is soon illegal.</p><p><strong>EU-US data transfers legal for now </strong><span lang="de"><strong>–</strong></span><strong> but get prepared.</strong> A decision by the US administration will not instantly make US transfers illegal. The European Commission's decision is generally legal as long as it is on the books and not annulled by the Commission itself or the Court of Justice. So even if the material finding becomes wrong, the decision still formally exists until it is overturned. However, if key elements that the EU has relied upon are not functioning, the EU will have to annul the deal.</p><p>Max Schrems: <em>"While the arguments for the EU-US deal seem to fall apart, companies can rely on the deal as long as it is not formally annulled. However, given the developments in the US, it is more crucial than ever for businesses and other organisation to have a 'host in Europe' contingency plan."</em></p><p><strong>European Comission in a tough spot. </strong>The European Commission has manoeuvred itself in a tough spot not only from a credibility perspective, but also from a diplomatic perspective. If it now reacts quickly and annuls the TADPF, <a href="https://www.politico.eu/article/zuckerberg-urges-trump-to-stop-eu-from-screwing-with-fining-us-tech-companies/">the US Tech Oligarchy will cry that the EU would be "<em>screwing with</em>" US Big Tech</a>. The Trump administration may take this as a reason to start a first major fight with the EU. However, not taking action and failing to officially warn EU businesses, public bodies and other organisations that send data to the US also seems problematic. The future of the TADPF may be very short-lived.</p><p><strong>EU version of the US TikTok debate?</strong> While the US has long belittled European fears about personal data flowing to the US and being used in mass surveillance, the US has suddenly turned around once its own data was aggregated by TikTok. On one hand, a prohibition or a compulsory acquisition of US Big Tech in Europe would be legally impossible. US businesses would be protected from the EU passing an equivalent to a "TikTok ban". At the same time, a duty to keep EU data outside of the hands of the US government is the default under EU law since 1995. It would also be the law, once the European Commission annuls the EU-US deal. US Big Tech would then have to shield their EU data centers from access by their US parent companies..</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cloudflare R2 Global Outage (131 pts)]]></title>
            <link>https://www.cloudflarestatus.com</link>
            <guid>42960291</guid>
            <pubDate>Thu, 06 Feb 2025 08:27:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cloudflarestatus.com">https://www.cloudflarestatus.com</a>, See on <a href="https://news.ycombinator.com/item?id=42960291">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <div>
  
<p><span>
       <span role="button" aria-expanded="false" aria-label="Toggle Cloudflare Sites and Services" tabindex="0"></span>
       <span>
         Cloudflare Sites and Services
       </span>
   </span>

    <span title="Sites and services that Cloudflare customers use to interact with the Cloudflare Network and its provided services">?</span>

  <span title="Groups take on the status of their most degraded child component or service. Click to see the status of the individual children.">

    Operational

  </span>

  <span title="Operational"></span>

</p>


  <!-- children components -->
  <div>
      
<p><span>
      Abuse Reports
   </span>

    <span title="Details of how to report abuse to Cloudflare can be found here: https://www.cloudflare.com/en-gb/trust-hub/reporting-abuse/">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Access
   </span>

    <span title="Cloudflare Access determines who can reach your application by applying the Access policies you configure">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      AI Gateway
   </span>

    <span title="Cloudflare’s AI Gateway allows you to gain visibility and control over your AI apps.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Always Online
   </span>

    <span title="Crawling and caching service">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Analytics
   </span>

    <span title="Customer analytics aggregation service">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      API
   </span>

    <span title="Application programming interface (API) for customers to read and write their configurations at https://api.cloudflare.com">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      API Shield
   </span>

    <span title="A range of products to help identify and address API vulnerabilities.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Apps Marketplace
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Area 1 - API
   </span>

    <span title="Cloudflare Area 1 is an email security platform that protects your organization’s inbox from phishing, spam, and other malicious messages. This particular component relates to the Area 1 API.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Area 1 - Dash
   </span>

    <span title="Cloudflare Area 1 is an email security platform that protects your organization’s inbox from phishing, spam, and other malicious messages. This particular component relates to the Dashboard.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Argo Smart Routing
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Audit Logs
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Authoritative DNS
   </span>

    <span title="Cloudflare DNS is an enterprise-grade authoritative DNS service that offers the fastest response time, unparalleled redundancy, and advanced security with built-in DDoS mitigation and DNSSEC">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Billing
   </span>

    <span title="Billing and payment service">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Blog
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Bring Your Own IP (BYOIP)
   </span>

    <span title="Allows Cloudflare customers to advertise their own IPs for use with Magic Transit, Spectrum, or CDN services">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Browser Isolation
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Bot Management
   </span>

    <span title="Bot Management provides sophisticated bot protection for your domain. Customers can identify automated traffic, take appropriate action, and view detailed analytics within the dashboard. Bot Management also supports custom solutions via Workers and Logs.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cache Reserve
   </span>

    <span title="Cache Reserve is a large, persistent data store implemented on top of R2. By pushing a single button in the dashboard, your website’s cacheable content will be written to Cache Reserve.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Calls
   </span>

    <span title="Cloudflare Calls is a distributed real-time data plane. It allows you to build real-time apps without worrying about scaling or regions. It can act as WebRTC selective forwarding unit (SFU), as a fanout delivery system for broadcasting media or anything in between.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      CDN/Cache
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      CDN Cache Purge
   </span>

    <span title="CDN single file cache purging service">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Challenge Platform
   </span>

    <span title="When a website is protected by Cloudflare, there are several occasions when it will challenge visitor traffic. If the visitor passes the challenge, their request is allowed. If they fail, the request will be blocked.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cloud Access Security Broker (CASB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cloud Connector
   </span>

    <span title="Cloud Connector allows you to route matching incoming traffic from your website to a public cloud provider that you define such as AWS, Google Cloud, and Azure.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Email Security (Area1)
   </span>

    <span title="Customers with Area1 only product.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Email Security (Zero Trust)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cloudforce One Reports
   </span>

    <span title="Details of Cloudflare One can be found in this blogpost: https://blog.cloudflare.com/introducing-cloudforce-one-threat-operations-and-threat-research">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Community Site
   </span>

    <span title="Community forums where customers can interact, ask questions and get help at https://community.cloudflare.com">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Custom Pages
   </span>

    <span title="Custom Error and Challenge Pages">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      D1
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Data Localization Suite
   </span>

    <span title="The Data Localization Suite (DLS) is a collection of tools that enable customers to choose the location where Cloudflare inspects and stores data, while maintaining the security and performance benefits of our global network.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Data Loss Prevention (DLP)
   </span>

    <span title="Cloudflare Data Loss Prevention (DLP)">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dashboard
   </span>

    <span title="Dashboard where customers can view and make changes to their configurations at https://dash.cloudflare.com">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Developer's Site
   </span>

    <span title="Public-facing developer documentation website at https://developers.cloudflare.com">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Digital Experience Monitoring (DEX)
   </span>

    <span title="Digital Experience Monitoring (DEX) enables Zero Trust administrators to pinpoint and resolve issues impacting end-user connectivity and performance.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Distributed Web Gateway
   </span>

    <span title="Cloudflare’s Web3 gateways provide HTTP-accessible interfaces to Web3 networks: https://developers.cloudflare.com/distributed-web/">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      DNS Firewall
   </span>

    <span title="DNS Firewall proxies all DNS queries to your nameservers through Cloudflare’s global network.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      DNS Root Servers
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      DNS Updates
   </span>

    <span title="DNS update service pushing customer DNS changes out to all data centers">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Durable Objects
   </span>

    <span title="Durable Objects provide low-latency coordination and consistent permanent storage for the Workers platform.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Email Routing
   </span>

    <span title="Email Routing service allowing for forwarding of email traffic">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Ethereum Gateway
   </span>

    <span title="https://developers.cloudflare.com/web3/ethereum-gateway/">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Firewall
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Gateway
   </span>

    <span title="Cloudflare’s secure web gateway keeps your data safe from malware, ransomware, phishing, command &amp;amp; control, Shadow IT, and other Internet risks over all ports and protocols. Log every user interaction with rich details.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Geo-Key Manager
   </span>

    <span title="Keyless SSL management service">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Health Checks
   </span>

    <span title="A Health Check is a service that runs on Cloudflare’s edge network to monitor whether an origin server is online.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Hyperdrive
   </span>

    <span title="Hyperdrive is a service that accelerates queries you make to existing databases, making it faster to access your data from across the globe, irrespective of your users’ location.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Image Resizing
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Images
   </span>

    <span title="Cloudflare service to build a scalable image pipeline to store, resize, optimize and deliver images in a fast and secure manner.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Infrastructure
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Load Balancing and Monitoring
   </span>

    <span title="Load balancing and failover service, including origin server monitoring">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Lists
   </span>

    <span title="Lists of IP addresses, hostnames and ASNs">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Logs
   </span>

    <span title="Enterprise Logpull and Logpush services">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Magic Firewall
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Magic Transit
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Magic WAN
   </span>

    <span title="Magic WAN replaces legacy WAN architectures with Cloudflare’s network, providing global connectivity, cloud-based security, performance, and control through one simple user interface.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Magic WAN Connector
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Marketing Site
   </span>

    <span title="Public-facing marketing website at https://www.cloudflare.com">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Mirage
   </span>

    <span title="Automatic Responsive Web Design via Intelligent Image Loading">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Network
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Notifications
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Observatory
   </span>

    <span title="Observatory uses synthetic tests and real user data from browsers to assess the performance of your website. These data sources produce metrics that provide different types of insights into your website’s performance.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Page Shield
   </span>

    <span title="Page Shield simplifies external script management by tracking loaded resources like scripts and providing alerts when it detects new resources or malicious scripts. Page Shield also tracks the connections made by scripts on your domain’s pages and checks if they are malicious based on their destination.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Pages
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      R2
   </span>

    <span title="High-performance storage for files and objects with zero egress charges">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Radar
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Randomness Beacon
   </span>

    <span title="Distributed service for randomness - https://developers.cloudflare.com/randomness-beacon/">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Recursive DNS
   </span>

    <span title="Free recursive DNS service at 1.1.1.1 and 1.0.0.1">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Registrar
   </span>

    <span title="Cloudflare Registrar securely registers and manages customer domain names">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Registration Data Access Protocol (RDAP)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Rules
   </span>

    <span title="This component includes WAF Rules, Transform Rules, Configuration Rules, Origin Rules, Compression Rules, Redirect Rules, Cache Rules, Waiting Room Bypass Rules, URL Normalization, DDoS L4/L7 Rules, Super Bot Fight Mode Rules, Rate Limiting Rules and others">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Secondary DNS
   </span>

    <span title="Secondary DNS capabilities allow for incoming as well as outgoing zone transfers between Cloudflare and other DNS providers.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Security Center
   </span>

    <span title="Cloudflare Security Center brings together our suite of security products, our security expertise, and unique Internet intelligence as a unified security intelligence solution to strengthen your security posture.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Snippets
   </span>

    <span title="Cloudflare Snippets provide a flexible way to customize the behavior of your website or application using short pieces of JavaScript code. Use snippets to customize HTTP response headers, implement JWT validation, define complex redirect functionality, and more.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Spectrum
   </span>

    <span title="Spectrum allows you to route MQTT, email, file transfer, version control, games, and more over TCP or UDP through Cloudflare to mask the origin and protect it from DDoS attacks">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Speed Optimizations
   </span>

    <span title="Cloudflare products that are recommended for enhancing your website’s performance like AMP, APO (Automatic Platform Optimization), Auto Minify, Fonts, Rocket Loader, and SXGs.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Stream
   </span>

    <span title="Cloudflare Stream lets you or your end users upload, store, encode, and deliver live and on-demand video with one API, without configuring or maintaining infrastructure">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      SSL Certificate Provisioning
   </span>

    <span title="Provisioning service for edge certificates like Universal and Advanced SSL">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      SSL for SaaS Provisioning
   </span>

    <span title="Certificate provisioning service for custom hostnames on the edge">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Subscriptions
   </span>

    <span title="Changes to subscriptions or placing new orders for service">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Support Site
   </span>

    <span title="Knowledge base and support ticket portal at https://support.cloudflare.com">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Time Services
   </span>

    <span title="Time Services provided in NTP, NTS &amp;amp; Roughtime - https://developers.cloudflare.com/time-services/">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Trace
   </span>

    <span title="Cloudflare Trace follows an HTTP/S request through Cloudflare’s reverse proxy to your origin. Use this tool to understand how different Cloudflare configurations interact with an HTTP/S request for one of your proxied hostnames.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tunnel
   </span>

    <span title="Cloudflare Tunnel provides you with a secure way to connect your resources to Cloudflare without a publicly routable IP address">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Turnstile
   </span>

    <span title="Turnstile is a user-friendly, privacy-preserving alternative to CAPTCHA.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      User Profiles
   </span>

    <span title="Changes to the My Profile area of the Cloudflare Dashboard or New Sign Ups">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Waiting Room
   </span>

    <span title="Cloudflare Waiting Room protects websites by queueing site visitors when a website experiences unmanageable surges in legitimate traffic that may otherwise bring an application down.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      WARP
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Web Analytics
   </span>

    <span title="Cloudflare Web Analytics provides free, privacy-first analytics for your website without changing your DNS or using Cloudflare’s proxy. Cloudflare Web Analytics helps you understand the performance of your web pages as experienced by your site visitors.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      WebSockets
   </span>

    <span title="Cloudflare proxied WebSocket connections.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Workers
   </span>

    <span title="Cloudflare Workers provides a serverless execution environment that allows you to create new applications or augment existing ones without configuring or maintaining infrastructure">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Workers AI
   </span>

    <span title="Workers AI allows you to run machine learning models, on the Cloudflare network, from your own code – whether that be from Workers, Pages, or anywhere via REST API.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Workers Preview
   </span>

    <span title="The preview service for Cloudflare Workers, used by Wrangler CLI and dashboard Quick Edit functions.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Workers KV
   </span>

    <span title="Workers KV is a data storage that allows you to store and retrieve data globally to build dynamic and performant APIs and websites that support high read volumes with low latency">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Workers Observability
   </span>

    <span title="Workers Logs">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Wrangler
   </span>

    <span title="Wrangler is the Cloudflare Developer Platform command-line interface (CLI) that allows you to manage Worker projects.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Zaraz
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Zero Trust
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Zero Trust Dashboard
   </span>

    <span title="Cloudflare Zero Trust Dashboard where customers can view and make changes to their Cloudflare Gateway configurations at https://dash.teams.cloudflare.com">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Zone Versioning
   </span>

    <span title="Version Management allows you test, deploy, and roll back changes to your zone configuration settings.">?</span>

  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

  </div>
</div>

          <div>
  
<p><span>
       <span role="button" aria-expanded="true" aria-label="Toggle Africa" tabindex="0"></span>
       <span>
         Africa
       </span>
   </span>


  <span title="Groups take on the status of their most degraded child component or service. Click to see the status of the individual children.">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>


  <!-- children components -->
  <div>
      
<p><span>
      Accra, Ghana - (ACC)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Algiers, Algeria - (ALG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Annaba, Algeria - (AAE)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Antananarivo, Madagascar - (TNR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cape Town, South Africa - (CPT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dakar, Senegal - (DKR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dar Es Salaam, Tanzania - (DAR)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Djibouti City, Djibouti - (JIB)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Durban, South Africa - (DUR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Gaborone, Botswana - (GBE)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Harare, Zimbabwe - (HRE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Johannesburg, South Africa - (JNB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kigali, Rwanda - (KGL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Lagos, Nigeria - (LOS)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Luanda, Angola - (LAD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Maputo, Mozambique - (MPM)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Mombasa, Kenya - (MBA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Nairobi, Kenya - (NBO)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Oran, Algeria - (ORN)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Ouagadougou, Burkina Faso   - (OUA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Port Louis, Mauritius - (MRU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Réunion, France - (RUN)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Tunis, Tunisia - (TUN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kinshasa, DR Congo - (FIH)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Cairo, Egypt - (CAI)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Windhoek, Namibia - (WDH)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Yamoussoukro, Ivory Coast - (ASK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Abidjan, Ivory Coast - (ABJ)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kampala, Uganda - (EBB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Saint-Denis, Réunion - (RUN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dar es Salaam, Tanzania - (DAR)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Djibouti, Djibouti - (JIB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

  </div>
</div>

          <div>
  
<p><span>
       <span role="button" aria-expanded="true" aria-label="Toggle Asia" tabindex="0"></span>
       <span>
         Asia
       </span>
   </span>


  <span title="Groups take on the status of their most degraded child component or service. Click to see the status of the individual children.">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>


  <!-- children components -->
  <div>
      
<p><span>
      Ahmedabad, India - (AMD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Almaty, Kazakhstan - (ALA)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Bangalore, India - (BLR)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Bangkok, Thailand - (BKK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Bandar Seri Begawan, Brunei - (BWN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Bhubaneswar, India - (BBI)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cebu, Philippines - (CEB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Chandigarh, India - (IXC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Changde, China - (CGD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Chennai, India - (MAA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Chittagong, Bangladesh - (CGP)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Colombo, Sri Lanka - (CMB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dhaka, Bangladesh - (DAC)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Foshan, China - (FUO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Fukuoka, Japan - (FUK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Fuzhou, China - (FOC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Guangzhou, China - (CAN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Haikou, China - (HAK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Hanoi, Vietnam - (HAN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Hengshui, China - (SJW)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Ho Chi Minh City, Vietnam - (SGN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Hong Kong - (HKG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Hyderabad, India - (HYD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Islamabad, Pakistan - (ISB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Jakarta, Indonesia - (CGK)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Jashore, Bangladesh - (JSR)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Jinan, China - (TNA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Johor Bahru, Malaysia -&nbsp;(JHB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kanpur, India - (KNU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kaohsiung City, Taiwan - (KHH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Karachi, Pakistan - (KHI)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Kathmandu, Nepal - (KTM)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Kolkata, India - (CCU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Krasnoyarsk, Russia - (KJA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kuala Lumpur, Malaysia - (KUL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Lahore, Pakistan - (LHE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Langfang, China - (PKX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Lanzhou, China - (LHW)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Macau - (MFM)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Malé, Maldives - (MLE)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Manila, Philippines - (MNL)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Mumbai, India - (BOM)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Nagpur, India - (NAG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Naha, Japan  - (OKA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      New Delhi, India - (DEL)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Osaka, Japan - (KIX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Patna, India - (PAT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Phnom Penh, Cambodia - (PNH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Qingdao, China - (TAO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Seoul, South Korea - (ICN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Shanghai, China - (SHA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Singapore, Singapore - (SIN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Surat Thani, Thailand - (URT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Taipei - (TPE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tianjin, China - (TSN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tokyo, Japan - (NRT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Ulaanbaatar, Mongolia - (ULN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Vientiane, Laos - (VTE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Xinyu, China - (KHN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Yerevan, Armenia - (EVN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Yogyakarta, Indonesia - (JOG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Zhongshan, China - (ZGN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cagayan de Oro, Philippines - (CGY)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Wuhu, China - (WHU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Taizhou, China - (HYN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kochi, India - (COK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Denpasar, Indonesia - (DPS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kannur, India - (CNN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Shenzhen, China - (SZX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Guiyang, China - (KWE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Shaoxing, China - (HGH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Changzhou, China - (CZX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kunming, China - (KMG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Chiang Mai, Thailand - (CNX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Zhengzhou, China - (CGO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Yangquan, China - (TYN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Changsha, China - (CSX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dalian, China - (DLC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Beihai, China - (BHY)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Chongqing, China - (CKG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Huainan, China - (HFE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Xiangyang, China - (XFN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Xining, China - (XNN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Da Nang, Vietnam - (DAD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Jiaxing, China - (JXG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tarlac City, Philippines - (CRK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Thimphu, Bhutan - (PBH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Baoji, China - (XIY)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Chengdu, China - (CTU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Astana, Kazakhstan - (NQZ)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Nanning, China - (NNG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Zibo, China - (TNA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kuching, Malaysia - (KCH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Aktobe, Kazakhstan - (AKX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Chengmai, China - (HAK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Nanchang, China - (KHN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Male, Maldives - (MLE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tongren, China - (TEN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

  </div>
</div>

          <div>
  
<p><span>
       <span role="button" aria-expanded="true" aria-label="Toggle Europe" tabindex="0"></span>
       <span>
         Europe
       </span>
   </span>


  <span title="Groups take on the status of their most degraded child component or service. Click to see the status of the individual children.">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>


  <!-- children components -->
  <div>
      
<p><span>
      Amsterdam, Netherlands - (AMS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Athens, Greece - (ATH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Barcelona, Spain - (BCN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Belgrade, Serbia - (BEG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Berlin, Germany - (TXL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Bratislava, Slovakia   - (BTS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Brussels, Belgium - (BRU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Bucharest, Romania - (OTP)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Budapest, Hungary - (BUD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Chișinău, Moldova - (KIV)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Copenhagen, Denmark - (CPH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cork, Ireland -  (ORK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dublin, Ireland - (DUB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Düsseldorf, Germany - (DUS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Edinburgh, United Kingdom - (EDI)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Frankfurt, Germany - (FRA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Geneva, Switzerland - (GVA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Gothenburg, Sweden - (GOT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Hamburg, Germany - (HAM)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Helsinki, Finland - (HEL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Istanbul, Turkey - (IST)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Izmir, Turkey - (ADB)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Kyiv, Ukraine - (KBP)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Lisbon, Portugal - (LIS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      London, United Kingdom - (LHR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Luxembourg City, Luxembourg - (LUX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Madrid, Spain - (MAD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Manchester, United Kingdom - (MAN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Marseille, France - (MRS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Milan, Italy - (MXP)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Minsk, Belarus - (MSQ)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Moscow, Russia - (DME)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Munich, Germany - (MUC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Nicosia, Cyprus - (LCA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Oslo, Norway - (OSL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Palermo, Italy - (PMO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Paris, France - (CDG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Prague, Czech Republic - (PRG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Reykjavík, Iceland - (KEF)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Riga, Latvia - (RIX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Rome, Italy - (FCO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Saint Petersburg, Russia - (LED)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Sofia, Bulgaria - (SOF)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Stockholm, Sweden - (ARN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Stuttgart, Germany   - (STR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tallinn, Estonia - (TLL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tbilisi, Georgia - (TBS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Thessaloniki, Greece - (SKG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tirana, Albania - (TIA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Vienna, Austria - (VIE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Vilnius, Lithuania - (VNO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Warsaw, Poland - (WAW)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Yekaterinburg, Russia - (SVX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Zagreb, Croatia - (ZAG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Zürich, Switzerland - (ZRH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Lyon, France - (LYS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Bordeaux, France - (BOD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Skopje, North Macedonia - (SKP)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

  </div>
</div>

          <div>
  
<p><span>
       <span role="button" aria-expanded="true" aria-label="Toggle Latin America &amp; the Caribbean" tabindex="0"></span>
       <span>
         Latin America &amp; the Caribbean
       </span>
   </span>


  <span title="Groups take on the status of their most degraded child component or service. Click to see the status of the individual children.">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>


  <!-- children components -->
  <div>
      
<p><span>
      Americana, Brazil - (QWJ)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Arica, Chile - (ARI)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Asunción, Paraguay - (ASU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Belém, Brazil - (BEL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Belo Horizonte, Brazil - (CNF)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Blumenau, Brazil - (BNU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Bogotá, Colombia - (BOG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Brasilia, Brazil - (BSB)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Buenos Aires, Argentina - (EZE)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Caçador, Brazil - (CFC)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Campinas, Brazil - (VCP)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Córdoba, Argentina - (COR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cuiabá, Brazil - (CGB)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Curitiba, Brazil - (CWB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Florianopolis, Brazil - (FLN)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Fortaleza, Brazil - (FOR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Georgetown, Guyana - (GEO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Goiânia, Brazil - (GYN)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Guatemala City, Guatemala - (GUA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Guayaquil, Ecuador - (GYE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Itajaí, Brazil - (ITJ)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Joinville, Brazil - (JOI)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Juazeiro do Norte, Brazil - (JDO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Lima, Peru - (LIM)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Manaus, Brazil - (MAO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Medellín, Colombia - (MDE)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Neuquén, Argentina - (NQN)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Panama City, Panama - (PTY)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Paramaribo, Suriname - (PBM)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Porto Alegre, Brazil - (POA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Quito, Ecuador - (UIO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Recife, Brazil - (REC)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Ribeirao Preto, Brazil - (RAO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Rio de Janeiro, Brazil - (GIG)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      San José, Costa Rica - (SJO)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Santiago, Chile - (SCL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Santo Domingo, Dominican Republic - (SDQ)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      São José do Rio Preto, Brazil - (SJP)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      São José dos Campos, Brazil - (SJK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      São Paulo, Brazil - (GRU)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Sorocaba, Brazil - (SOD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tegucigalpa, Honduras - (TGU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Timbó, Brazil - (NVT)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Uberlândia, Brazil - (UDI)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Vitoria, Brazil - (VIX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Campos dos Goytacazes, Brazil - (CAW)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Chapeco, Brazil - (XAP)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Bridgetown, Barbados - (BGI)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      St. George's, Grenada - (GND)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Santiago de los Caballeros, Dominican Republic - (STI)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      La Paz, Bolivia - (LPB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      San Juan, Puerto Rico - (SJU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Barranquilla, Colombia - (BAQ)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Palmas, Brazil - (PMW)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Aracatuba, Brazil - (ARU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Port of Spain, Trinidad and Tobago - (POS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Salvador, Brazil - (SSA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Timbo, Brazil - (NVT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Neuquen, Argentina - (NQN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Goiania, Brazil - (GYN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cuiaba, Brazil - (CGB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Itajai, Brazil - (ITJ)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cacador, Brazil - (CFC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Uberlandia, Brazil - (UDI)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cali, Colombia - (CLO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

  </div>
</div>

          <div>
  
<p><span>
       <span role="button" aria-expanded="true" aria-label="Toggle Middle East" tabindex="0"></span>
       <span>
         Middle East
       </span>
   </span>


  <span title="Groups take on the status of their most degraded child component or service. Click to see the status of the individual children.">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>


  <!-- children components -->
  <div>
      
<p><span>
      Amman, Jordan - (AMM)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Astara, Azerbaijan - (LLK)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Baghdad, Iraq - (BGW)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Baku, Azerbaijan - (GYD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Basra, Iraq - (BSR)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Beirut, Lebanon - (BEY)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dammam, Saudi Arabia - (DMM)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Doha, Qatar - (DOH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dubai, United Arab Emirates - (DXB)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Erbil, Iraq - (EBL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Haifa, Israel - (HFA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Jeddah, Saudi Arabia - (JED)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kuwait City, Kuwait - (KWI)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Manama, Bahrain - (BAH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Muscat, Oman - (MCT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Najaf, Iraq - (NJF)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Nasiriyah, Iraq - (XNH)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Ramallah - (ZDM)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Riyadh, Saudi Arabia - (RUH)
   </span>


  <span title="">

    Under Maintenance

  </span>

  <span title="Under Maintenance"></span>

</p>

      
<p><span>
      Sulaymaniyah, Iraq - (ISU)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Tel Aviv, Israel - (TLV)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

  </div>
</div>

          <div>
  
<p><span>
       <span role="button" aria-expanded="true" aria-label="Toggle North America" tabindex="0"></span>
       <span>
         North America
       </span>
   </span>


  <span title="Groups take on the status of their most degraded child component or service. Click to see the status of the individual children.">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>


  <!-- children components -->
  <div>
      
<p><span>
      Ashburn, VA, United States - (IAD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Atlanta, GA, United States - (ATL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Boston, MA, United States - (BOS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Buffalo, NY, United States - (BUF)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Calgary, AB, Canada - (YYC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Charlotte, NC, United States - (CLT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Chicago, IL, United States - (ORD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Columbus, OH, United States - (CMH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Dallas, TX, United States - (DFW)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Denver, CO, United States - (DEN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Detroit, MI, United States - (DTW)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Honolulu, HI, United States - (HNL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Houston, TX, United States - (IAH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Indianapolis, IN, United States - (IND)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Jacksonville, FL, United States - (JAX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kansas City, MO, United States - (MCI)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Las Vegas, NV, United States - (LAS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Los Angeles, CA, United States - (LAX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      McAllen, TX, United States - (MFE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Memphis, TN, United States - (MEM)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Mexico City, Mexico - (MEX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Miami, FL, United States - (MIA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Minneapolis, MN, United States - (MSP)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Montréal, QC, Canada - (YUL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Nashville, United States - (BNA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Newark, NJ, United States - (EWR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Norfolk, VA, United States - (ORF)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Omaha, NE, United States - (OMA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Ottawa, Canada - (YOW)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Philadelphia, United States - (PHL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Phoenix, AZ, United States - (PHX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Pittsburgh, PA, United States - (PIT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Portland, OR, United States - (PDX)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Queretaro, MX, Mexico - (QRO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Richmond, VA, United States - (RIC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Sacramento, CA, United States - (SMF)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Salt Lake City, UT, United States - (SLC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      San Diego, CA, United States - (SAN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      San Jose, CA, United States - (SJC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Saskatoon, SK, Canada - (YXE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Seattle, WA, United States - (SEA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Sioux Falls, South Dakota - (FSD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      St. Louis, MO, United States - (STL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tallahassee, FL, United States - (TLH)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Toronto, ON, Canada - (YYZ)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Vancouver, BC, Canada - (YVR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Winnipeg, MB, Canada - (YWG)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      San Francisco, United States - (SFO)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Kingston, Jamaica - (KIN)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Bangor, United States - (BGR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Austin, United States - (AUS)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Albuquerque, United States - (ABQ)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Guadalajara, Mexico - (GDL)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      San Antonio, United States - (SAT)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Cleveland, United States - (CLE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Durham, United States - (RDU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Oklahoma City, United States - (OKC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tampa, United States - (TPA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Anchorage, United States - (ANC)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Halifax, Canada - (YHZ)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

  </div>
</div>

          <div>
  
<p><span>
       <span role="button" aria-expanded="true" aria-label="Toggle Oceania" tabindex="0"></span>
       <span>
         Oceania
       </span>
   </span>


  <span title="Groups take on the status of their most degraded child component or service. Click to see the status of the individual children.">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>


  <!-- children components -->
  <div>
      
<p><span>
      Adelaide, SA, Australia - (ADL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Auckland, New Zealand - (AKL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Brisbane, QLD, Australia - (BNE)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Canberra, ACT, Australia - (CBR)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Christchurch, New Zealand - (CHC)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Hagatna, Guam - (GUM)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Melbourne, VIC, Australia - (MEL)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Noumea, New Caledonia - (NOU)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Perth, WA, Australia - (PER)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Sydney, NSW, Australia - (SYD)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

      
<p><span>
      Tahiti, French Polynesia - (PPT)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Suva, Fiji - (SUV)
   </span>


  <span title="">

    Partial Outage

  </span>

  <span title="Partial Outage"></span>

</p>

      
<p><span>
      Hobart, Australia - (HBA)
   </span>


  <span title="">

    Operational

  </span>

  <span title="Operational"></span>

</p>

  </div>
</div>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Paper Apps (503 pts)]]></title>
            <link>https://gladdendesign.com/collections/paper-apps</link>
            <guid>42960144</guid>
            <pubDate>Thu, 06 Feb 2025 07:58:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gladdendesign.com/collections/paper-apps">https://gladdendesign.com/collections/paper-apps</a>, See on <a href="https://news.ycombinator.com/item?id=42960144">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <h2>
        <span>Collection: </span>Paper Apps™</h2><p>Delightfully simple and simply delightful, Paper Apps™ are a fun, smart alternative to screen time. Check out our solo games like DUNGEON, GALAXY and GOLF, as well as gamified tools like TO•DO and NUTRI•TRACK. For the full experience, we recommend grabbing a couple of Pencil Dice as well!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Linux Running in a PDF (310 pts)]]></title>
            <link>https://linux.doompdf.dev/linux.pdf</link>
            <guid>42959775</guid>
            <pubDate>Thu, 06 Feb 2025 06:52:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://linux.doompdf.dev/linux.pdf">https://linux.doompdf.dev/linux.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=42959775">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[America's Dangerous Movement Toward Oligarchy, Authoritarianism and Kleptocracy (217 pts)]]></title>
            <link>https://www.counterpunch.org/2025/02/04/americas-dangerous-movement-toward-oligarchy-authoritarianism-and-kleptocracy/</link>
            <guid>42959260</guid>
            <pubDate>Thu, 06 Feb 2025 05:00:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.counterpunch.org/2025/02/04/americas-dangerous-movement-toward-oligarchy-authoritarianism-and-kleptocracy/">https://www.counterpunch.org/2025/02/04/americas-dangerous-movement-toward-oligarchy-authoritarianism-and-kleptocracy/</a>, See on <a href="https://news.ycombinator.com/item?id=42959260">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Today, we find ourselves in a pivotal moment in American history and millions of Americans, by their actions or lack of action, will determine the future of this country for decades.</p>
<p>In my view, the Trump administration is moving this country very aggressively into an oligarchic form of society where extraordinary power rests in the hands of a small number of unelected multi-billionaires.</p>
<p>The Trump administration is moving this country very aggressively into an authoritarian society where the rule of law and our Constitution are being ignored and undermined in order to give more power to the White House and the billionaires who now control our government.</p>
<p>In my view, the Trump administration is moving this country very rapidly toward a kleptocracy – where the function of government is not to serve the people of America, but to enrich those who are in power.</p>
<p>I think that today is a good day to recall what one of our great presidents said at Gettysburg in November of 1863. Looking out at a battlefield where thousands of Union soldiers had just sacrificed their lives in the defense of freedom, Lincoln famously stated:</p>
<blockquote><p>“The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us&nbsp;– that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion&nbsp;– that we here highly resolve that these dead shall not have died in vain&nbsp;– that this nation, under God, shall have a new birth of freedom&nbsp;– and that government of the people, by the people, for the people, shall not perish from the earth.</p></blockquote>
<p>“Government of the people, by the people, for the people, shall not perish from the earth.”</p>
<p>Under President Trump we are not seeing a “government of the people, by the people, for the people.” Quite the contrary.</p>
<p>We are seeing a government of the billionaire class, by the billionaire class, for the billionaire class. And it’s not being done secretly. It’s right out there for all to see.</p>
<p>Several weeks ago, Donald Trump was inaugurated for his second term as President of the United States. Standing right behind him were the three richest men in the country – Elon Musk, Jeff Bezos and Mark Zuckerberg&nbsp;– worth a combined $920 billion. These 3 men have more wealth than the bottom half of America&nbsp;– 170 million people. And I should point out, and this should tell you exactly where we are going as a nation, these 3 men have become some $232 billion richer since Trump was elected. In just two weeks under Trump their wealth has exploded by $232 billion dollars.</p>
<p>This is how an oligarchic system works. Elon Musk, the richest person in the world, and now a key part of the administration, spent over $277 million to get Trump elected. In other words, within a corrupt campaign finance system he helped buy the election for Donald Trump.</p>
<p>Jeff Bezos and Mark Zuckerberg, the second and third wealthiest people in our country, both kicked a million each into Trump’s inauguration fund.</p>
<p>And let’s remember that Mr. Bezos, who owns the Washington Post, rescinded the endorsement of Kamala Harris of the Washington Post’s editorial board. Mr. Bezos was showing early on that he was willing to bend the knee for Donald Trump.</p>
<p>Mark Zuckerberg, the founder and CEO of Meta, which owns Facebook and Instagram, agreed to settle a lawsuit with Trump for $25 million.</p>
<p>These three multibillionaires are working with Trump because they understand one very important reality. Trump’s policies are designed to make the very richest people in this country even richer.</p>
<p>Since Trump’s election, Mr. Musk has become $154 billion richer, Mr. Bezos has become $35 billion richer, and Mr. Zuckerberg has become $43 billion richer.</p>
<p>I am growing increasingly concerned that in our country, under the leadership of President Trump, we are moving rapidly towards authoritarianism.</p>
<p>And all over this country people are alarmed and shocked by what they are seeing.</p>
<p>Just a few examples.</p>
<p>Last week, Trump attempted to suspend all federal grants and loans in direct violation of the U.S. Constitution and federal law. As every 3rd grader knows, the power of the purse belongs to Congress, not the president.</p>
<p>Let’s be clear. The president can recommend legislation, he can veto legislation, but he does not have the power to unilaterally terminate funding and legislation passed by the U.S. Congress. That is a dangerous and blatantly unconstitutional act.</p>
<p>And I should add that Trump’s blocking of federal funding would have had an horrific impact on millions of Americans who utilize programs like Medicaid, Head Start, community health centers, Meals on Wheels, homeless veterans’ programs and many, many other initiatives.</p>
<p>Tens of millions of Americans, including some of the most vulnerable people in our country, were impacted by that decision.</p>
<p>But that’s not all.</p>
<p>A few days ago, Trump fired 17 inspectors general – independent government watchdogs that were created by Congress, in the wake of the Watergate scandal, to prevent the abuse of power by the executive branch.</p>
<p>Last week, President Trump fired a member of the National Labor Relations Board, and in so doing, effectively neutered the only federal agency in America with the authority to hold corporations accountable for illegal union busting and to protect the constitutional right of workers to form a union and to collectively bargain for better wages, benefits and working conditions.</p>
<p>Not only is this move blatantly illegal, it is exactly what Elon Musk, the owner of Tesla, and Jeff Bezos, the owner of Amazon, have been fighting for for months. This is a huge gift to the two wealthiest people in our country who are both strongly anti-union.</p>
<p>The President also illegally fired members of the Equal Employment Opportunity Commission – the only independent commission in our country that protects workers against discrimination in the workplace.</p>
<p>Further, and this should upset every American regardless of political view, in direct violation of the Constitution and federal law, Trump is intimidating the media with lawsuits against ABC, CBS, Meta and the Des Moines Register. His FCC is now threatening to investigate PBS and NPR. Take a deep breath my fellow Americans.</p>
<p>What Trump is essentially saying to every media outlet in America: If you say or do anything that is critical of me, that displeases me, you may be subject to a lawsuit or a federal investigation.</p>
<p>If this is not a direct attack on the First Amendment, the U.S. Constitution and Freedom of Speech, I don’t know what is.</p>
<p>But that’s not all.</p>
<p>Elon Musk and his unelected minions at DOGE have forced out officials at the Treasury Department and illegally shut down US AID – a program which, among other things, helps feed and provide medical help to starving and desperate children all over the world. Presidents, much less unelected billionaires, do not have the unilateral right to shut down federal agencies established by Congress.</p>
<p>When we talk about the dangerous movement towards authoritarianism let us not forget Trump’s pardoning of the January 6th insurrectionists who injured 174 police officers at the Capitol.</p>
<p>Even worse, Trump is undermining the FBI by investigating the agents there who helped bring these violent criminals to justice.</p>
<p>In other words, what Trump is saying is that violence against police officers, when done in his name is ok, but when law enforcement officers try to hold criminals accountable that is not ok.</p>
<p>Under Trump, we are rapidly moving towards a kleptocracy as well.</p>
<p>Just before Trump was inaugurated, he and his wife Melania launched their own cryptocurrency coins giving them the potential to earn tens of billions of dollars.</p>
<p>If Wall Street CEOs tried to bribe the President with a bag full of money that would be against the law.</p>
<p>But now, they don’t have to do that.</p>
<p>Today, if a multi-billionaire or the head of a foreign country wants to curry favor with the President, all they have to do is buy his cryptocurrency coins and, when they do that, they are directly enriching Donald Trump and the First Lady.</p>
<p>That is unacceptable and cannot stand.</p>
<p>So the question then becomes, where do we go from here?</p>
<p>Instead of moving toward an economy which is designed to benefit the very richest people in our society we have got to fight hard to create a government that works for all of us, not just Mr. Musk or Mr. Bezos or Mr. Zuckerberg and other multi-billionaires.</p>
<p>At a time of massive wealth and income inequality we must not provide more tax breaks to billionaires paid for by huge cuts in Medicaid and other programs that working families and low-income people desperately need.</p>
<p>But let me tell you what we should be doing.</p>
<p>At a time when 85 million Americans are uninsured or under-insured we have got to do what every major country on earth does and that is to guarantee health care as a human right to every man, woman and child in this country.</p>
<p>At a time when 1 out of 4 Americans cannot afford the medicine that their doctors prescribe we have got to end the absurdity of Americans paying by far the highest prices in the world for prescription drugs.</p>
<p>We have got to cut the cost of prescription drugs in half.</p>
<p>The federal minimum wage of $7.25 an hour is a starvation wage. While 60% of our people live paycheck to paycheck, we must raise that minimum wage to a living wage, at least $17 an hour. If you work 40 hours a week, you should not be living in poverty.</p>
<p>Mr. Musk and Mr. Bezos want to make it harder for workers to join unions. Well, we have got to do exactly the opposite. We must pass the PRO Act so that anti-union CEOs cannot act unconstitutionally to deny workers the right to join a union.</p>
<p>At a time when we need the best educated workforce in the world, we need to have the best public schools in the world. And, among other things, that means we need to substantially raise teacher salaries. If we want the best and the brightest to become educators no teacher in America should earn less than $60,000 a year.</p>
<p>All over this country, we have a major housing crisis. And it’s not just the 800,000 who are homeless. It is millions of working families who are spending 40, 50 or 60 percent of their limited incomes on housing. Instead of spending almost a trillion dollars a year on a wasteful and bloated Pentagon budget, we have got to build millions of units of low-income and affordable housing. And when we do that, we put large numbers of people to work at good-paying union jobs.</p>
<p>I hear from Trump supporters that the president won the election and he has been given this huge mandate to do whatever he wants. Well, no president has the right to move us to oligarchy, authoritarianism and kleptocracy. But more importantly, let us not forget that while Trump did win this election he actually received 4 million fewer votes in 2024 than Biden did in 2020 when Biden won the election.</p>
<p><em>This is a slightly edited version of Sanders’ prepared remarks on the Senate floor on February 4, 2025.</em></p>
				</div><p>
												<strong>Bernie Sanders</strong> is a US Senator, and the ranking member of the Senate budget committee. He represents the state of Vermont, and is the longest-serving independent in the history of Congress.
					</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Programming SDF Animations of Rick and Morty (410 pts)]]></title>
            <link>https://danielchasehooper.com/posts/code-animated-rick/</link>
            <guid>42958696</guid>
            <pubDate>Thu, 06 Feb 2025 03:30:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://danielchasehooper.com/posts/code-animated-rick/">https://danielchasehooper.com/posts/code-animated-rick/</a>, See on <a href="https://news.ycombinator.com/item?id=42958696">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>After 8 months of working on this post I don’t know how to start it except to say it culminates in this animation of Rick made in 240 lines of code. No libraries, no images. It was written in a live coding editor that I embedded in this post so that <em>you</em> can program animations. Let me explain how this started…</p><p>Eight months ago I published a video titled “<em><a href="https://youtu.be/-Xb3Kk3HhIw?si=XN--6NbM2Ux23Gez" target="_blank" rel="noopener">I Made a 3D Modeler, in C, in a Week</a></em>”. The video has several animations, like this one that illustrates the the marching cubes algorithm:</p><p>I needed this animation for the video to make sense, but couldn’t get past how painful and time consuming it’d be to make in a typical animation program. It seemed like the only way to accurately and quickly make it was with code. So I started coding, and the animation above is what I ended up with. I’m pretty happy with it.</p><p>I’m going to show you how to make your own animations, but instead of talking about that marching cubes animation, we’ll animate Rick from Rick and Morty, because that’s more fun. All the techniques I use for Rick can be used for other animations or graphical effects — useful ones for your own presentations, videos, video games, or just for fun. Ok? Let’s go!</p><h2 id="getting-started">Getting Started</h2><p>This is the editor I used to create Rick. Try changing <code>green = 0.9</code> to <code>green = 0.1</code> in the code below and the preview will update immediately.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>// fract returns fractional part. fract(1.3) == 0.3</span>
</span></span><span><span>    <span>float</span> <span>red</span>   <span>=</span> <span>fract</span><span>(</span><span>pixel</span><span>.</span><span>y</span><span>);</span> 
</span></span><span><span>    <span>float</span> <span>green</span> <span>=</span> <span>0.9</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>blue</span>  <span>=</span> <span>fract</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>red</span><span>,</span> <span>green</span><span>,</span> <span>blue</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>This is OpenGL Shading Language (GLSL). The <code>color_for_pixel</code> function runs on your GPU for every pixel in the preview. Amazingly this is all you need to make animations — a function that answers “What color should this pixel be at this time?”.</p><p>I’ve placed optional challenges throughout the article for people that want to go a little deeper. Like this:</p><p>What happens if you set <code>green = time</code>? What could you do to make it keep going? (<code>time</code> counts seconds since last edit)</p><p>Let’s use GLSL’s built in<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup> <code>length()</code> function to visualize how far each pixel is from the center of the screen (aka the origin, aka position <code>(0,0)</code>). By returning that distance as the pixel’s color, we get 0 (black) near the center, and fade to 1 (white) further away:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>length</span><span>(</span><span>pixel</span><span>));</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>GLSL Tip: <code>vec3(x)</code> is the same as <code>vec3(x, x, x)</code>. We’ll use this trick a lot.</p><p>To draw a circle, we compare the distance to a radius:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>radius</span> <span>=</span> <span>0.6</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>length</span><span>(</span><span>pixel</span><span>)</span> <span>&gt;</span> <span>radius</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>GLSL Tip: <code>vec3</code> turns the boolean result of <code>&gt;</code> into <code>1</code> or <code>0</code>.</p><p>What would that circle look like if you replaced <code>length()</code> with your own function that calculates <a href="https://en.wikipedia.org/wiki/Taxicab_geometry" target="_blank" rel="noopener">Manhattan distance</a>?</p><p>We can extract that into a reusable <code>circle()</code> function:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>radius</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pixel</span><span>)</span> <span>-</span> <span>radius</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>
</span></span><span><span>    <span>if</span> <span>(</span><span>circle</span><span>(</span><span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>.3</span><span>,</span> <span>-</span><span>.3</span><span>),</span> <span>.4</span><span>)</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.2</span><span>,</span><span>.7</span><span>,</span><span>.5</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    <span>if</span> <span>(</span><span>circle</span><span>(</span><span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>-</span><span>.4</span><span>,</span><span>0</span><span>),</span> <span>.8</span><span>)</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.7</span><span>,</span><span>.5</span><span>,</span> <span>.3</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>.2</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>The circles are positioned by shifting the pixel passed to <code>circle()</code>. The line order of that code is important - it determines which circle appears in front of the other.</p><p>Notice that <code>circle()</code> returns the <em>distance</em> to the perimeter instead of just a <code>bool</code> to indicate inside/outside. This is known as a “signed distance field” (SDF) function. The word “signed” here means that the distances for locations inside the shape are negative, and positive outside. We’ll use the distance to achieve some cool effects in a bit.</p><p>There are <a href="https://iquilezles.org/articles/distfunctions2d/" target="_blank" rel="noopener">many SDF functions</a> besides <code>circle()</code>. Here are a few we’ll be using:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>// Click {...} to see the code</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/MlKcDD</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/3tSGDy</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/4llXD7</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>-</span><span>.7</span><span>,</span><span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>-</span><span>1.5</span><span>,</span><span>-</span><span>.4</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>-</span><span>1.2</span><span>,</span><span>.35</span><span>))</span> <span>&lt;</span> <span>0.1</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.9</span><span>,</span><span>.3</span><span>,</span><span>.3</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>if</span> <span>(</span><span>round_rect</span><span>(</span><span>pixel</span><span>,</span> <span>vec2</span><span>(</span><span>.3</span><span>,</span> <span>.4</span><span>),</span> <span>vec4</span><span>(</span><span>.1</span><span>))</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.3</span><span>,</span> <span>.9</span><span>,</span> <span>.3</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>if</span> <span>(</span><span>star</span><span>(</span><span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>1.</span><span>,</span><span>0.</span><span>),</span> <span>.45</span><span>,</span> <span>5.</span><span>,</span> <span>.3</span><span>)</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.2</span><span>,</span> <span>.4</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.0</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>And that’s the basics. Let’s get started with Rick.</p><h2 id="drawing-rick">Drawing Rick</h2><p>I wish I could tell you I had the ability to look at a cartoon and then effortlessly replicate it in code. Unfortunately, I don’t. I spent <em>a lot</em> of time painstakingly trying numbers to recreate Rick’s face from the season 1 poster.</p><p>I did find one trick that sped up the trial and error process: I flashed my reference image of Rick on top of the preview so I could compare my drawing to the original while I was changing the code. The editor below has that enabled so you can experience what my week has been like.</p><p>Change the size and corner radii parameters to make the rectangle match Rick’s head shape.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>// Change these:</span>
</span></span><span><span>        <span>vec2</span><span>(</span><span>.3</span><span>,</span> <span>.5</span><span>),</span>  <span>// size</span>
</span></span><span><span>        <span>vec4</span><span>(</span><span>.1</span><span>,</span> <span>.01</span><span>,</span> <span>.05</span><span>,</span> <span>.1</span><span>)</span> <span>// corner radii</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>0.8</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>In case it isn’t obvious by now, the techniques in this post won’t be replacing your favorite vector drawing tool. This is the only time we’ll do the flashing exercise; just know that all the seemingly random numbers in the rest of this post were discovered via this process. I found the color values using an image editor’s eyedropper tool.</p><p>Ok, so here are the values I came up with for Rick’s head. I also added a second <code>round_rect()</code> for his ear:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec3</span> <span>skin_color</span> <span>=</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>skin_color</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>// ear</span>
</span></span><span><span>    <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>skin_color</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Let’s add the outline. This is where drawing with signed distance functions comes in handy. We can return black for pixels with a distance between -0.01 and 0.0.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>
</span></span><span><span>    <span>vec3</span> <span>skin_color</span> <span>=</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>skin_color</span><span>;</span> 
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    
</span></span><span><span>    <span>// ear</span>
</span></span><span><span>    <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>skin_color</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span> <span>// background</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>That line between the ear and the head shouldn’t be there (according to my reference image of Rick). I don’t want to outline each shape individually, I want to outline the <em>union</em> of the shapes. Union is easy with SDFs - use <code>min()</code> to combine two distances:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>min</span><span>(</span> <span>// &lt;- combine the shapes</span>
</span></span><span><span>        <span>// head</span>
</span></span><span><span>        <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>        
</span></span><span><span>        <span>// ear</span>
</span></span><span><span>        <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>        
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>There are <a href="https://iquilezles.org/articles/distfunctions/#:~:text=Primitive%20combinations" target="_blank" rel="noopener">other ways</a> to combine two signed distance fields. Try swapping out <code>min()</code> for the smooth union function to smoothly blend the ear with the head.</p><p>Let’s draw an eye:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>radius</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pixel</span><span>)</span> <span>-</span> <span>radius</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> 
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>     <span>// pupil</span>
</span></span><span><span>    <span>vec2</span> <span>pupil_pos</span> <span>=</span> <span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>.16</span><span>-</span><span>.13</span><span>,</span><span>.24</span><span>);</span> 
</span></span><span><span>
</span></span><span><span>    <span>// subtract 0.007 to outset &amp; round the corners of star</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>star</span><span>(</span><span>pupil_pos</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>)</span> <span>-</span> <span>0.007</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// eyeball</span>
</span></span><span><span>    <span>vec2</span> <span>eyeball_pos</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>    <span>eyeball_pos</span><span>.</span><span>y</span> <span>*=</span> <span>.93</span><span>;</span> <span>// stretch vertically</span>
</span></span><span><span>    <span>eyeball_pos</span> <span>-=</span> <span>vec2</span><span>(</span><span>0.07</span><span>,</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>circle</span><span>(</span><span>eyeball_pos</span><span>,</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>dist</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>        <span>// head</span>
</span></span><span><span>        <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span><span>,</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>        
</span></span><span><span>        <span>// ear</span>
</span></span><span><span>        <span>round_rect</span><span>(</span>
</span></span><span><span>        <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>        <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>        <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>    <span>);</span>
</span></span><span><span>        
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Two interesting things here:</p><ol><li><code>eyeball_pos.y *= .93</code> stretches the eyeball a <em>tiny</em> bit — just like we move shapes by adding to positions, we scale by multiplying positions.</li><li>I used a 6-point star for the eye, and I subtracted a little from the star’s distance to round its corners. Any SDF shape can be rounded this way. It helps to visualize the distance field so you see how it gets more round the further from the shape you get:</li></ol><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> 
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pixel</span><span>,</span> <span>0.4</span><span>,</span> <span>6.</span><span>,</span> <span>.5</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// show blue inside shape, orange outside</span>
</span></span><span><span>    <span>vec3</span> <span>color</span> <span>=</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>?</span> <span>vec3</span><span>(</span><span>0.5</span><span>,</span> <span>.8</span><span>,</span> <span>1.</span><span>)</span> <span>:</span> <span>vec3</span><span>(</span><span>0.98</span><span>,</span><span>.6</span><span>,</span><span>.13</span><span>);</span>
</span></span><span><span>    <span>color</span> <span>*=</span> <span>sin</span><span>(</span><span>d</span><span>*</span><span>150.</span><span>)</span><span>*</span><span>.1</span><span>+</span><span>.8</span><span>;</span> <span>// show distance field lines</span>
</span></span><span><span>    <span>color</span> <span>*=</span> <span>1.0</span> <span>-</span> <span>exp</span><span>(</span><span>-</span><span>20.0</span><span>*</span><span>abs</span><span>(</span><span>d</span><span>));</span> <span>// darken near perimeter</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>offset</span> <span>=</span> <span>(</span><span>sin</span><span>(</span><span>time</span><span>)</span><span>+</span><span>1.</span><span>)</span><span>*</span><span>.25</span><span>;</span> <span>// animate outline offset</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>offset</span><span>)</span> <span>&lt;</span> <span>0.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>1.0</span><span>);</span> <span>// draw white outline</span>
</span></span><span><span>  
</span></span><span><span>    <span>return</span> <span>color</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>For the second eye, we could duplicate the first eye’s code, but instead let’s mirror it horizontally with <code>pixel.x = abs(pixel.x)</code>. To rationalize this, consider that if the point <code>(1, 0)</code> is inside the circle, then it’s mirror <code>(-1, 0)</code> will <em>also</em> be inside the circle after <code>pixel.x = abs(pixel.x)</code>, so both points will get colored.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>radius</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pixel</span><span>)</span> <span>-</span> <span>radius</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>   
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>-=</span> <span>.3</span><span>;</span> <span>// controls position</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>);</span> <span>// mirror</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>-=</span> <span>.7</span><span>;</span> <span>// controls spacing</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>circle</span><span>(</span><span>pixel</span><span>,</span> <span>.5</span><span>)</span> <span>&gt;</span> <span>0.0</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>The way that order of operations works still hurts my head, but it helps to play with the code to get a feel for what’s going on.</p><p>Mirror the circles on both the x <em>and</em> the y axis</p><p>Here is the mirroring technique applied to Rick’s eyes:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>radius</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pixel</span><span>)</span> <span>-</span> <span>radius</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>size</span><span>,</span> <span>vec4</span> <span>radii</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>xy</span> <span>:</span> <span>radii</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>radii</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>radii</span><span>.</span><span>x</span>  <span>:</span> <span>radii</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>size</span><span>+</span><span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>radii</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> 
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>     <span>// pupils</span>
</span></span><span><span>    <span>vec2</span> <span>pupil_pos</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>    <span>pupil_pos</span> <span>+=</span> <span>vec2</span><span>(</span><span>.13</span><span>,</span> <span>-</span><span>.24</span><span>);</span> <span>// position pupils on eyeballs</span>
</span></span><span><span>    <span>pupil_pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_pos</span><span>.</span><span>x</span><span>);</span> <span>// mirror pupils</span>
</span></span><span><span>    <span>pupil_pos</span><span>.</span><span>x</span> <span>-=</span> <span>.16</span><span>;</span> <span>// pupil spacing</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>star</span><span>(</span><span>pupil_pos</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>)</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// eyeballs</span>
</span></span><span><span>    <span>// position/mirror/scale one liner</span>
</span></span><span><span>    <span>vec2</span> <span>eye_pos</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>circle</span><span>(</span><span>eye_pos</span><span>,</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>dist</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>0.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span> <span>.1</span><span>,</span> <span>.13</span><span>,</span> <span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>0.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.838</span><span>,</span> <span>0.799</span><span>,</span> <span>0.760</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.0</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    <span>}</span>   
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Let’s skip ahead. The mouth, nose, and eyebrow are all created with <code>bezier()</code>. The hair is an 11-point <code>star()</code> that I stretched vertically.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>circle</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span> <span>-</span> <span>r</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>d</span><span>;</span>
</span></span><span><span>  
</span></span><span><span>   <span>// eyes</span>
</span></span><span><span>   <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// pupils</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>        
</span></span><span><span>        <span>// eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>0.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// nose  </span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>min</span><span>(</span> <span>// combine the curves</span>
</span></span><span><span>            <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>            <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>  
</span></span><span><span>        
</span></span><span><span>    <span>// mouth</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>// The `*step(d, .11)` creates the outline.</span>
</span></span><span><span>        <span>// it's the same as `*vec3(d &lt; .11)` </span>
</span></span><span><span>        <span>// aka, it multiplies the color by zero for </span>
</span></span><span><span>        <span>// pixels near the perimeter  </span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>.11</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    <span>// eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>.68</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>// head</span>
</span></span><span><span>    <span>{</span>  <span>// fold</span>
</span></span><span><span>        <span>float</span> <span>dist</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>-</span><span>.01</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> <span>// outline</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// hair</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>star</span><span>((</span><span>pixel</span><span>-</span><span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>))</span><span>*</span><span>vec2</span><span>(</span><span>1.3</span><span>,</span><span>1.</span><span>),</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>That’s as far as basic shape positioning, scaling, and outlining can get us.</p><h2 id="making-the-hair-wavy">Making the Hair Wavy</h2><p>The remaining steps will elevate our crude sketch of Rick into a drawing that looks exactly like him. We’ll learn a few more techniques to make this possible. First up: let’s fix his rigid looking hair. There isn’t a “wavy hair” signed distance function, but we can make the star shape more wavy using a technique called <a href="https://iquilezles.org/articles/warp/" target="_blank" rel="noopener">domain warping</a>.</p><p>Domain warping randomly offsets pixel locations. That random offset is “seeded” by the pixel’s location, so the offset is consistent over time for any given location. You can use that warped location for whatever shapes you want warped. Here’s an 11-point star with and without warping:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>// these functions are used by the `warp()` function </span>
</span></span><span><span><span>// to generate pseudo random numbers. The details aren't </span>
</span></span><span><span><span>// super important. I looked these functions up:</span>
</span></span><span><span><span>// https://www.shadertoy.com/view/XdXGW8</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>vec2</span> <span>warped_pixel</span> <span>=</span> <span>warp</span><span>(</span><span>pixel</span><span>,</span> <span>4.</span><span>,</span> <span>.07</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>        <span>star</span><span>(</span><span>warped_pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>.8</span><span>,</span><span>0</span><span>),</span> <span>0.7</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>),</span>
</span></span><span><span>        <span>star</span><span>(</span><span>pixel</span> <span>-</span> <span>vec2</span><span>(</span><span>.8</span><span>,</span><span>0</span><span>),</span> <span>0.7</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>)</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Visualize the warp offsets by drawing the x offset to the red channel and the y offset to the green channel</p><p>Fun fact: the Lord of the Rings movies <a href="https://www.youtube.com/watch?v=6Koa50421Pg&amp;t=1056s" target="_blank" rel="noopener">used domain warping</a> to create the visual effect seen when Frodo is wearing the Ring. Their warp offsets came from tracking fire movement.</p><p>Animate the warp effect above to achieve the Lord of the Rings effect.</p><h2 id="drawing-infinite-teeth">Drawing Infinite Teeth</h2><p>Rick needs teeth, a lot them. But we’ll start by drawing one. A parabola is the best tooth shape I could find:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>pixel</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Yes that is a tooth. Stick with me.</p><p>Is there a way to draw multiple teeth without duplicating a bunch of code, or using a <code>for</code> loop? Yes! Similar to how we used <code>abs()</code> to mirror shapes, we can use <code>mod()</code> to repeat shapes. <code>mod(a,b)</code> calculates the reminder of <code>a/b</code>. Look below at what <code>mod(pixel.x, 0.5)</code> does. Every time <code>pixel.x</code> increases above a multiple of <code>.5</code> , <code>mod()</code> starts back at zero (black) again.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>mod</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>0.5</span><span>));</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Here is <code>mod()</code> applied to the single tooth</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>    
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span> <span>// NEW: repeat horizontally</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>pixel</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Repeat the teeth <a href="https://iquilezles.org/articles/sdfrepetition/#:~:text=Rotational%20and%20Rectangular%20Repetition" target="_blank" rel="noopener">in a circle</a> instead of in a line to create a <a href="https://duckduckgo.com/?q=sandworm&amp;iax=images&amp;ia=images" target="_blank" rel="noopener">sandworm mouth</a></p><p>and we can mirror that to get the bottom teeth</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span> <span>// NEW: mirror vertically </span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span> <span>// repeat horizontally</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>pixel</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Then to make it a smile, we offset the y position of the tooth based on <code>pixel.x</code>.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>2.</span><span>);</span> <span>// NEW: curve into a smile</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span> <span>// mirror vertically</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span> <span>// repeat horizontally</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>pixel</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Kind of creepy. Reducing the infinite teeth down to 12 will make it a little less creepy — done by only drawing teeth when <code>pixel.x</code> is within the desired range</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>    <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>2.</span><span>);</span>
</span></span><span><span>    <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span> 
</span></span><span><span>    <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> 
</span></span><span><span>        <span>// Limit where the teeth are drawn</span>
</span></span><span><span>        <span>&amp;&amp;</span> <span>pixel</span><span>.</span><span>x</span> <span>&lt;</span> <span>width</span><span>*</span><span>3.</span>
</span></span><span><span>        <span>&amp;&amp;</span> <span>pixel</span><span>.</span><span>x</span> <span>&gt;</span> <span>-</span><span>width</span><span>*</span><span>3.</span>
</span></span><span><span>    <span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Here’s Rick with wavy hair and new set of teeth. I also added the tongue. Notice that the tongue and teeth only draw inside the mouth thanks to placing their code inside the <code>if</code> that checks the mouth distance.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>d</span><span>;</span>
</span></span><span><span>  
</span></span><span><span>    <span>// Mouth</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>// only draw the teeth and tongue inside hte mouth shape</span>
</span></span><span><span>        
</span></span><span><span>        <span>// Teeth</span>
</span></span><span><span>        <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>        <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>      
</span></span><span><span>        <span>// Tongue</span>
</span></span><span><span>        <span>// Make the right side of the tongue thicker</span>
</span></span><span><span>        <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>        <span>// mouth fill color</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span><span>)</span> <span>// mouth outline</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>  
</span></span><span><span>    <span>// Eyebrow, Eyes, Nose &amp; Head</span>
</span></span><span><span>   <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Pupils</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>        
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>0.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>// Eyebrow</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>.68</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>  
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Hair</span>
</span></span><span><span>    <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>    <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>    <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>    <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><h2 id="artistic-lines">Artistic Lines</h2><p>The final bits needed are the curves below the eyes and around the mouth. Those lines are just like our normal shape outlines, except they’re offset away from the perimeter of the shape. This can be done by subtracting a little from distance when drawing the outline. In other words this:<br><code>if (abs(distance_to_shape) &lt; thickness) return vec3(0);</code><br>becomes this:<br><code>if (abs(distance_to_shape - outset) &lt; thickness) return vec3(0);</code><br>The blue line below illustrates that technique.</p><p>Since Rick’s under-eye lines should only be visible…under the eye, we’ll need to limit where they are drawn. That can be done using whatever logic you can think of, as shown by the green line:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>dist</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>,</span> <span>vec2</span><span>(</span><span>.5</span><span>),</span> <span>vec4</span><span>(</span><span>.1</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>thickness</span> <span>=</span> <span>.02</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>// outline</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>dist</span><span>)</span> <span>&lt;</span> <span>thickness</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// outset outline</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>dist</span><span>-</span><span>.2</span><span>)</span> <span>&lt;</span> <span>thickness</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>,</span><span>.1</span><span>,</span><span>1</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// limited outline</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>dist</span><span>-</span><span>.4</span><span>)</span> <span>&lt;</span> <span>thickness</span> <span>&amp;&amp;</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>.4</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>,</span><span>.9</span><span>,</span><span>.1</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// fill</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>dist</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>.92</span><span>);</span>    
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Here are those techniques applied to Rick:</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>  
</span></span><span><span>    <span>// Mouth</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                 <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Teeth</span>
</span></span><span><span>        <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>        <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>        <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>      
</span></span><span><span>        <span>// Tongue</span>
</span></span><span><span>        <span>// Make the right side of the tongue thicker</span>
</span></span><span><span>        <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>        <span>// mouth fill color</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// lip outlines</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                    <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                      <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                      <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// lips</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>   
</span></span><span><span>    <span>// Pupils</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>        
</span></span><span><span>    <span>// Eyeballs</span>
</span></span><span><span>    <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>    
</span></span><span><span>    <span>// under eye lines</span>
</span></span><span><span>    <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>        <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>        <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Nose, Eyebrow, Head, Hair</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>// Eyebrow</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>.68</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>  
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Hair</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Draw another character from Rick and Morty, or whatever your favorite cartoon is.</p><p>Use <a href="https://www.youtube.com/results?search_query=raymarching" target="_blank" rel="noopener">raymarching</a> with 3D signed distance fields to draw a 3D version of Rick. Let me know if you do this, I want to see.</p><h2 id="animation">Animation</h2><p>With our drawing complete, there are several animation techniques we can use to introduce movement. First up:</p><h3 id="1-looping-values">1. Looping Values</h3><p>The easiest way to add animation is to slap a <code>sin(time)</code> into the code somewhere. The <code>sin</code> is important because it wraps the ever-increasing <code>time</code> value into the range of -1 to 1, which makes nice looping animations. You will often change that range with a scale and offset like so: <code>sin(time)*.5 + .5</code>. The head angle, tongue angle, and eyebrow height are animated in this way. I added a <code>rotateAt</code> function to do the rotation math.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> 
</span></span><span><span>    
</span></span><span><span>    <span>// NEW: rotate the whole drawing</span>
</span></span><span><span>    <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>    <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Mouth, eyes, nose</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        <span>// Pupils</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>            
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>        <span>// under eye lines</span>
</span></span><span><span>        <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>            <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>            <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW: animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Head and hair</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Hair</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1.</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Animate Rick’s head as if he is walking left and right. Flip the face direction when he is moving to the right (this is easier than it sounds!).</p><h3 id="2-switching-whats-drawn">2. Switching What’s Drawn</h3><p>Animating a property with <code>sin()</code> just moves stuff around, but you can also draw something totally different based on time. We’ll do that to make Rick blink.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>     
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// rotate the whole drawing</span>
</span></span><span><span>        <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>        <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>// blink for .09 seconds, every 2 seconds</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>mod</span><span>(</span><span>time</span><span>,</span> <span>2.</span><span>)</span> <span>&lt;</span> <span>.09</span><span>)</span> <span>{</span> <span>// closed eyes</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>+</span><span>vec2</span><span>(</span><span>.07</span><span>,</span><span>-</span><span>.16</span><span>),</span> <span>vec2</span><span>(</span><span>.24</span><span>,</span><span>0</span><span>),</span> <span>vec4</span><span>(</span><span>0</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.008</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>      
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>else</span> <span>// open eyes</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Pupils</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span> <span>+</span><span>.13</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span> <span>-=</span> <span>vec2</span><span>(</span><span>.16</span><span>,</span><span>.24</span><span>);</span>
</span></span><span><span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>            
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>        <span>// under eye lines</span>
</span></span><span><span>        <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>            <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>            <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    <span>// Rest of face</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>// `map()` is used to change the thickness of </span>
</span></span><span><span>            <span>// the tongue along the x axis</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Hair</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Use this technique to animate Rick’s mouth so it looks like he is talking.</p><h3 id="3-noisy-movement">3. Noisy Movement</h3><p>If <code>sin</code> is too smooth for you, try using noise! I used <code>noise()</code> to make the eyes randomly look around. Since I don’t want the eyes to be continuously moving, I rounded the time value before passing it to <code>noise()</code>.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> 
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// rotate the whole drawing</span>
</span></span><span><span>        <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>        <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Blink eyes</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>mod</span><span>(</span><span>time</span><span>,</span> <span>2.</span><span>)</span> <span>&lt;</span> <span>.09</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// closed eyes</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>+</span><span>vec2</span><span>(</span><span>.07</span><span>,</span><span>-</span><span>.16</span><span>),</span> <span>vec2</span><span>(</span><span>.24</span><span>,</span><span>0</span><span>),</span> <span>vec4</span><span>(</span><span>0</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.008</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>      
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>else</span> <span>{</span> 
</span></span><span><span>        <span>// move pupils randomly</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>.095</span><span>,</span><span>-</span><span>.18</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>7.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>y</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>9.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        
</span></span><span><span>        <span>{</span><span>// fold</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>            <span>}</span>
</span></span><span><span>                
</span></span><span><span>            <span>// Eyeballs</span>
</span></span><span><span>            <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>            
</span></span><span><span>            <span>// under eye lines</span>
</span></span><span><span>            <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>                <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>                <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    <span>// Rest of face</span>
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>// `map()` is used to change the thickness of </span>
</span></span><span><span>            <span>// the tongue along the x axis</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>// Hair</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>0.012</span><span>,</span> <span>-</span><span>d</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Make the pupil movement <a href="https://www.youtube.com/watch?v=Fmg9ZOHESgQ" target="_blank" rel="noopener">more realistic</a> instead of jumping between positions</p><h3 id="bonus-warping-time">Bonus: Warping Time</h3><p>Our final animation technique is “time domain warping” to make the hair bend as the head tilts. It’s like domain warping, except instead of offsetting <em>space</em> we offset <em>time</em>. Basically we delay time more the closer to the hair tip a pixel is. Because that delay isn’t constant along the length of the hair, the hair will bend instead of rotate rigidly.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span>
</span></span><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> 
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// rotate the whole drawing</span>
</span></span><span><span>        <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>        <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    
</span></span><span><span>    <span>// Blink eyes</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>mod</span><span>(</span><span>time</span><span>,</span> <span>2.</span><span>)</span> <span>&lt;</span> <span>.09</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>// closed eyes</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>+</span><span>vec2</span><span>(</span><span>.07</span><span>,</span><span>-</span><span>.16</span><span>),</span> <span>vec2</span><span>(</span><span>.24</span><span>,</span><span>0</span><span>),</span> <span>vec4</span><span>(</span><span>0</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.008</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>      
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>else</span> <span>{</span> 
</span></span><span><span>        <span>// move pupils randomly</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>.095</span><span>,</span><span>-</span><span>.18</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>7.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>y</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>9.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>            
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>        <span>// under eye lines</span>
</span></span><span><span>        <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>            <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>            <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>// `map()` is used to change the thickness of </span>
</span></span><span><span>            <span>// the tongue along the x axis</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>// Hair     </span>
</span></span><span><span>    <span>float</span> <span>twist</span> <span>=</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>length</span><span>(</span><span>pixel</span><span>)</span><span>*</span><span>2.1</span><span>)</span><span>*</span><span>.12</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>hair</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>twist</span><span>,</span> <span>vec2</span><span>(</span><span>0.</span><span>,</span><span>.1</span><span>));</span>
</span></span><span><span>    <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>    <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>    <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.012</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>1</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Apply this trick to to other parts of Rick’s face for a rubbery and ricklaxed look.</p><h2 id="wrapping-up">Wrapping up</h2><p>After we add a portal effect<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup> our animation is complete.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span>
</span></span><span><span><span>vec2</span> <span>rotateAt</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>angle</span><span>,</span> <span>vec2</span> <span>origin</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span> <span>=</span> <span>sin</span><span>(</span><span>angle</span><span>),</span> <span>c</span> <span>=</span> <span>cos</span><span>(</span><span>angle</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>(</span><span>p</span><span>-</span><span>origin</span><span>)</span><span>*</span><span>mat2</span><span>(</span> <span>c</span><span>,</span> <span>-</span><span>s</span><span>,</span> <span>s</span><span>,</span> <span>c</span> <span>)</span> <span>+</span> <span>origin</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>map</span><span>(</span><span>float</span> <span>value</span><span>,</span> <span>float</span> <span>inMin</span><span>,</span> <span>float</span> <span>inMax</span><span>,</span> <span>float</span> <span>outMin</span><span>,</span> <span>float</span> <span>outMax</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>  <span>value</span> <span>=</span> <span>clamp</span><span>(</span><span>value</span><span>,</span> <span>inMin</span><span>,</span> <span>inMax</span><span>);</span>
</span></span><span><span>  <span>return</span> <span>outMin</span> <span>+</span> <span>(</span><span>outMax</span> <span>-</span> <span>outMin</span><span>)</span> <span>*</span> <span>(</span><span>value</span> <span>-</span> <span>inMin</span><span>)</span> <span>/</span> <span>(</span><span>inMax</span> <span>-</span> <span>inMin</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>grad</span><span>(</span><span>ivec2</span> <span>z</span><span>)</span>  <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>int</span> <span>n</span> <span>=</span> <span>z</span><span>.</span><span>x</span><span>+</span><span>z</span><span>.</span><span>y</span><span>*</span><span>11111</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>&lt;&lt;</span><span>13</span><span>)</span><span>^</span><span>n</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>=</span> <span>(</span><span>n</span><span>*</span><span>(</span><span>n</span><span>*</span><span>n</span><span>*</span><span>15731</span><span>+</span><span>789221</span><span>)</span><span>+</span><span>1376312589</span><span>)</span><span>&gt;&gt;</span><span>16</span><span>;</span>
</span></span><span><span>    <span>n</span> <span>&amp;=</span> <span>7</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>gr</span> <span>=</span> <span>vec2</span><span>(</span><span>n</span><span>&amp;</span><span>1</span><span>,</span><span>n</span><span>&gt;&gt;</span><span>1</span><span>)</span><span>*</span><span>2.0</span><span>-</span><span>1.0</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>(</span> <span>n</span><span>&gt;=</span><span>6</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>gr</span><span>.</span><span>x</span><span>)</span> <span>:</span> 
</span></span><span><span>           <span>(</span> <span>n</span><span>&gt;=</span><span>4</span> <span>)</span> <span>?</span> <span>vec2</span><span>(</span><span>gr</span><span>.</span><span>x</span><span>,</span><span>0.0</span><span>)</span> <span>:</span>
</span></span><span><span>                              <span>gr</span><span>;</span>                            
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>noise</span><span>(</span><span>vec2</span> <span>p</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>ivec2</span> <span>i</span> <span>=</span> <span>ivec2</span><span>(</span><span>floor</span><span>(</span><span>p</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>f</span> <span>=</span>       <span>fract</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>u</span> <span>=</span> <span>f</span><span>*</span><span>f</span><span>*</span><span>(</span><span>3.0</span><span>-</span><span>2.0</span><span>*</span><span>f</span><span>);</span> 
</span></span><span><span>    <span>return</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>0</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>0.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                <span>mix</span><span>(</span> <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>0.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> 
</span></span><span><span>                     <span>dot</span><span>(</span> <span>grad</span><span>(</span> <span>i</span><span>+</span><span>ivec2</span><span>(</span><span>1</span><span>,</span><span>1</span><span>)</span> <span>),</span> <span>f</span><span>-</span><span>vec2</span><span>(</span><span>1.0</span><span>,</span><span>1.0</span><span>)</span> <span>),</span> <span>u</span><span>.</span><span>x</span><span>),</span> <span>u</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec2</span> <span>warp</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>scale</span><span>,</span> <span>float</span> <span>strength</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>offsetX</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>100.0</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>offsetY</span> <span>=</span> <span>noise</span><span>(</span><span>p</span> <span>*</span> <span>scale</span> <span>+</span> <span>vec2</span><span>(</span><span>100.0</span><span>,</span> <span>0.0</span><span>));</span>
</span></span><span><span>    <span>return</span> <span>p</span> <span>+</span> <span>vec2</span><span>(</span><span>offsetX</span><span>,</span> <span>offsetY</span><span>)</span> <span>*</span> <span>strength</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>bezier</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>v0</span><span>,</span> <span>vec2</span> <span>v1</span><span>,</span> <span>vec2</span> <span>v2</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>vec2</span> <span>i</span> <span>=</span> <span>v0</span> <span>-</span> <span>v2</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>j</span> <span>=</span> <span>v2</span> <span>-</span> <span>v1</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>k</span> <span>=</span> <span>v1</span> <span>-</span> <span>v0</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>w</span> <span>=</span> <span>j</span><span>-</span><span>k</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>v0</span><span>-=</span> <span>p</span><span>;</span> <span>v1</span><span>-=</span> <span>p</span><span>;</span> <span>v2</span><span>-=</span> <span>p</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>v0</span><span>.</span><span>x</span><span>*</span><span>v2</span><span>.</span><span>y</span><span>-</span><span>v0</span><span>.</span><span>y</span><span>*</span><span>v2</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>y</span> <span>=</span> <span>v1</span><span>.</span><span>x</span><span>*</span><span>v0</span><span>.</span><span>y</span><span>-</span><span>v1</span><span>.</span><span>y</span><span>*</span><span>v0</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>z</span> <span>=</span> <span>v2</span><span>.</span><span>x</span><span>*</span><span>v1</span><span>.</span><span>y</span><span>-</span><span>v2</span><span>.</span><span>y</span><span>*</span><span>v1</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>vec2</span> <span>s</span> <span>=</span> <span>2.0</span><span>*</span><span>(</span><span>y</span><span>*</span><span>j</span><span>+</span><span>z</span><span>*</span><span>k</span><span>)</span><span>-</span><span>x</span><span>*</span><span>i</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span>  <span>(</span><span>y</span><span>*</span><span>z</span><span>-</span><span>x</span><span>*</span><span>x</span><span>*</span><span>0.25</span><span>)</span><span>/</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>s</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>t</span> <span>=</span> <span>clamp</span><span>(</span> <span>(</span><span>0.5</span><span>*</span><span>x</span><span>+</span><span>y</span><span>+</span><span>r</span><span>*</span><span>dot</span><span>(</span><span>s</span><span>,</span><span>w</span><span>))</span><span>/</span><span>(</span><span>x</span><span>+</span><span>y</span><span>+</span><span>z</span><span>),</span><span>0.0</span><span>,</span><span>1.0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    <span>vec2</span> <span>d</span> <span>=</span> <span>v0</span><span>+</span><span>t</span><span>*</span><span>(</span><span>k</span><span>+</span><span>k</span><span>+</span><span>t</span><span>*</span><span>w</span><span>);</span>
</span></span><span><span>    <span>vec2</span> <span>outQ</span> <span>=</span> <span>d</span> <span>+</span> <span>p</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>d</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>parabola</span><span>(</span><span>vec2</span> <span>pos</span><span>,</span> <span>float</span> <span>k</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/ws3GD7</span>
</span></span><span><span>    <span>pos</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span>    <span>float</span> <span>ik</span> <span>=</span> <span>1.0</span><span>/</span><span>k</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>p</span> <span>=</span> <span>ik</span><span>*</span><span>(</span><span>pos</span><span>.</span><span>y</span> <span>-</span> <span>0.5</span><span>*</span><span>ik</span><span>)</span><span>/</span><span>3.0</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>q</span> <span>=</span> <span>0.25</span><span>*</span><span>ik</span><span>*</span><span>ik</span><span>*</span><span>pos</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>h</span> <span>=</span> <span>q</span><span>*</span><span>q</span> <span>-</span> <span>p</span><span>*</span><span>p</span><span>*</span><span>p</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>r</span> <span>=</span> <span>sqrt</span><span>(</span><span>abs</span><span>(</span><span>h</span><span>));</span>
</span></span><span><span>    <span>float</span> <span>x</span> <span>=</span> <span>(</span><span>h</span><span>&gt;</span><span>0.0</span><span>)</span> <span>?</span> 
</span></span><span><span>        <span>pow</span><span>(</span><span>q</span><span>+</span><span>r</span><span>,</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span> <span>-</span> <span>pow</span><span>(</span><span>abs</span><span>(</span><span>q</span><span>-</span><span>r</span><span>),</span><span>1.0</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>r</span><span>-</span><span>q</span><span>)</span> <span>:</span>
</span></span><span><span>        <span>2.0</span><span>*</span><span>cos</span><span>(</span><span>atan</span><span>(</span><span>r</span><span>,</span><span>q</span><span>)</span><span>/</span><span>3.0</span><span>)</span><span>*</span><span>sqrt</span><span>(</span><span>p</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>pos</span><span>-</span><span>vec2</span><span>(</span><span>x</span><span>,</span><span>k</span><span>*</span><span>x</span><span>*</span><span>x</span><span>))</span> <span>*</span> <span>sign</span><span>(</span><span>pos</span><span>.</span><span>x</span><span>-</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>round_rect</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>vec2</span> <span>b</span><span>,</span> <span>vec4</span> <span>r</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>r</span><span>.</span><span>xy</span> <span>=</span> <span>(</span><span>p</span><span>.</span><span>x</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>xy</span> <span>:</span> <span>r</span><span>.</span><span>zw</span><span>;</span>
</span></span><span><span>    <span>r</span><span>.</span><span>x</span>  <span>=</span> <span>(</span><span>p</span><span>.</span><span>y</span><span>&gt;</span><span>0.0</span><span>)</span><span>?</span><span>r</span><span>.</span><span>x</span>  <span>:</span> <span>r</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>    <span>vec2</span> <span>q</span> <span>=</span> <span>abs</span><span>(</span><span>p</span><span>)</span><span>-</span><span>b</span><span>+</span><span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>min</span><span>(</span><span>max</span><span>(</span><span>q</span><span>.</span><span>x</span><span>,</span><span>q</span><span>.</span><span>y</span><span>),</span><span>0.0</span><span>)</span> <span>+</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>q</span><span>,</span><span>0.0</span><span>))</span> <span>-</span> <span>r</span><span>.</span><span>x</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>float</span> <span>star</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>r</span><span>,</span> <span>float</span> <span>points</span><span>,</span> <span>float</span> <span>ratio</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// next 4 lines can be precomputed for a given shape</span>
</span></span><span><span>    <span>float</span> <span>an</span> <span>=</span> <span>3.141593</span><span>/</span><span>points</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>en</span> <span>=</span> <span>3.141593</span><span>/</span><span>(</span><span>ratio</span><span>*</span><span>(</span><span>points</span><span>-</span><span>2.</span><span>)</span> <span>+</span> <span>2.</span><span>);</span> 
</span></span><span><span>    <span>vec2</span>  <span>acs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>an</span><span>),</span><span>sin</span><span>(</span><span>an</span><span>));</span>
</span></span><span><span>    <span>vec2</span>  <span>ecs</span> <span>=</span> <span>vec2</span><span>(</span><span>cos</span><span>(</span><span>en</span><span>),</span><span>sin</span><span>(</span><span>en</span><span>));</span> <span>// ecs=vec2(0,1) for regular polygon</span>
</span></span><span><span>
</span></span><span><span>    <span>float</span> <span>bn</span> <span>=</span> <span>mod</span><span>(</span><span>atan</span><span>(</span><span>p</span><span>.</span><span>x</span><span>,</span><span>p</span><span>.</span><span>y</span><span>),</span><span>2.0</span><span>*</span><span>an</span><span>)</span> <span>-</span> <span>an</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>=</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>vec2</span><span>(</span><span>cos</span><span>(</span><span>bn</span><span>),</span><span>abs</span><span>(</span><span>sin</span><span>(</span><span>bn</span><span>)));</span>
</span></span><span><span>    <span>p</span> <span>-=</span> <span>r</span><span>*</span><span>acs</span><span>;</span>
</span></span><span><span>    <span>p</span> <span>+=</span> <span>ecs</span><span>*</span><span>clamp</span><span>(</span> <span>-</span><span>dot</span><span>(</span><span>p</span><span>,</span><span>ecs</span><span>),</span> <span>0.0</span><span>,</span> <span>r</span><span>*</span><span>acs</span><span>.</span><span>y</span><span>/</span><span>ecs</span><span>.</span><span>y</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>length</span><span>(</span><span>p</span><span>)</span><span>*</span><span>sign</span><span>(</span><span>p</span><span>.</span><span>x</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>#define H(i,j) fract(sin(dot(ceil(P+vec2(i,j)), resolution.xy )) * 4e3)</span>
</span></span><span><span><span>float</span> <span>N</span><span>(</span> <span>vec2</span> <span>P</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>float</span> <span>s</span><span>,</span><span>i</span><span>,</span><span>w</span> <span>=</span> <span>.5</span><span>;</span>
</span></span><span><span>    <span>for</span> <span>(;</span> <span>i</span> <span>&lt;</span> <span>3.</span> <span>;</span> <span>i</span><span>++</span><span>,</span> <span>w</span> <span>*=</span> <span>.4</span><span>,</span> <span>P</span> <span>*=</span> <span>1.9</span> <span>)</span> <span>{</span>
</span></span><span><span>        <span>vec2</span> <span>F</span> <span>=</span> <span>fract</span><span>(</span> <span>P</span> <span>*=</span> <span>mat2</span><span>(</span><span>.866</span><span>,</span><span>-</span><span>.5</span><span>,</span><span>.5</span><span>,</span><span>.866</span><span>)</span> <span>);</span> 
</span></span><span><span>        <span>F</span> <span>*=</span> <span>F</span><span>*</span><span>(</span><span>3.</span><span>-</span><span>F</span><span>-</span><span>F</span><span>);</span>
</span></span><span><span>        <span>s</span> <span>+=</span> <span>w</span><span>*</span> <span>mix</span><span>(</span> <span>mix</span><span>(</span><span>H</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>,</span> <span>H</span><span>(</span><span>1</span><span>,</span><span>0</span><span>),</span> <span>F</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                     <span>mix</span><span>(</span><span>H</span><span>(</span><span>0</span><span>,</span><span>1</span><span>)</span> <span>,</span> <span>H</span><span>(</span><span>1</span><span>,</span><span>1</span><span>),</span> <span>F</span><span>.</span><span>x</span><span>),</span>
</span></span><span><span>                     <span>F</span><span>.</span><span>y</span> <span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    <span>return</span> <span>s</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>vec3</span> <span>portal</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> <span>// fold</span>
</span></span><span><span>    <span>// from https://www.shadertoy.com/view/l3f3zM</span>
</span></span><span><span>    <span>float</span> <span>l</span> <span>=</span> <span>length</span><span>(</span> <span>pixel</span> <span>),</span> 
</span></span><span><span>          <span>a</span> <span>=</span> <span>atan</span><span>(</span><span>pixel</span><span>.</span><span>y</span><span>,</span> <span>pixel</span><span>.</span><span>x</span><span>)</span> <span>/</span> <span>6.28</span> <span>+</span> <span>.5</span><span>,</span>
</span></span><span><span>          <span>k</span> <span>=</span> <span>10.</span><span>;</span>
</span></span><span><span>     
</span></span><span><span>    <span>a</span> <span>=</span> <span>fract</span><span>(</span><span>a</span> <span>+</span> <span>l</span><span>*</span><span>.3</span> <span>-</span> <span>time</span><span>*</span><span>.01</span> <span>);</span>
</span></span><span><span>    <span>vec2</span> <span>U</span> <span>=</span> <span>vec2</span><span>(</span> <span>l</span><span>+</span><span>time</span><span>*</span><span>.3</span><span>,</span> <span>a</span> <span>);</span>
</span></span><span><span>     
</span></span><span><span>    <span>return</span> <span>vec3</span><span>[](</span> <span>vec3</span><span>(</span><span>.18</span><span>,</span> <span>.53</span><span>,</span> <span>.09</span><span>),</span>
</span></span><span><span>                    <span>vec3</span><span>(</span><span>.56</span><span>,</span> <span>.89</span><span>,</span> <span>.16</span><span>),</span>
</span></span><span><span>                    <span>vec3</span><span>(</span><span>.35</span><span>,</span> <span>.84</span><span>,</span> <span>.11</span><span>),</span>
</span></span><span><span>                    <span>vec3</span><span>(</span><span>.92</span><span>,</span> <span>.98</span><span>,</span> <span>.85</span><span>)</span>
</span></span><span><span>                  <span>)</span> <span>[</span> <span>int</span><span>(</span> <span>4.</span><span>*</span> <span>pow</span><span>(</span> <span>mix</span><span>(</span> <span>N</span><span>(</span><span>U</span><span>*</span><span>k</span><span>),</span> <span>N</span><span>(</span><span>U</span><span>*</span><span>k</span><span>-</span><span>vec2</span><span>(</span><span>0</span><span>,</span><span>k</span><span>)),</span> <span>U</span><span>.</span><span>y</span><span>)</span> <span>*</span> <span>1.5</span><span>,</span> <span>2.5</span><span>))];</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>pixel</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span> 
</span></span><span><span>    <span>{</span> <span>// fold</span>
</span></span><span><span>        <span>// rotate the whole drawing</span>
</span></span><span><span>        <span>pixel</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>)</span><span>*</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.6</span><span>));</span>
</span></span><span><span>        <span>pixel</span><span>.</span><span>y</span> <span>+=</span> <span>.1</span><span>;</span>
</span></span><span><span>    
</span></span><span><span>    
</span></span><span><span>    <span>// Blink eyes</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>mod</span><span>(</span><span>time</span><span>,</span> <span>2.</span><span>)</span> <span>&lt;</span> <span>.09</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>// closed eyes</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>round_rect</span><span>(</span><span>pixel</span><span>+</span><span>vec2</span><span>(</span><span>.07</span><span>,</span><span>-</span><span>.16</span><span>),</span> <span>vec2</span><span>(</span><span>.24</span><span>,</span><span>0</span><span>),</span> <span>vec4</span><span>(</span><span>0</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.008</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>      
</span></span><span><span>    <span>}</span> 
</span></span><span><span>    <span>else</span> <span>{</span> 
</span></span><span><span>        <span>// move pupils randomly</span>
</span></span><span><span>        <span>vec2</span> <span>pupil_warp</span> <span>=</span> <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>.095</span><span>,</span><span>-</span><span>.18</span><span>);</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>7.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>y</span> <span>-=</span> <span>noise</span><span>(</span><span>vec2</span><span>(</span><span>round</span><span>(</span><span>time</span><span>)</span><span>*</span><span>9.</span><span>+</span><span>.5</span><span>,</span> <span>0.5</span><span>))</span><span>*</span><span>.1</span><span>;</span>
</span></span><span><span>        <span>pupil_warp</span><span>.</span><span>x</span> <span>=</span> <span>abs</span><span>(</span><span>pupil_warp</span><span>.</span><span>x</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>star</span><span>(</span><span>pupil_warp</span><span>,</span> <span>0.019</span><span>,</span> <span>6.</span><span>,</span> <span>.9</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.007</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.1</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>            
</span></span><span><span>        <span>// Eyeballs</span>
</span></span><span><span>        <span>vec2</span> <span>eye</span> <span>=</span> <span>vec2</span><span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.1</span><span>)</span><span>-</span><span>.17</span><span>,</span> <span>pixel</span><span>.</span><span>y</span><span>*</span><span>.93</span> <span>-</span> <span>.16</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>length</span><span>(</span><span>eye</span><span>)</span> <span>-</span> <span>.16</span><span>;</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>step</span><span>(</span><span>.013</span><span>,</span> <span>-</span><span>d</span><span>));</span>
</span></span><span><span>        
</span></span><span><span>        <span>// under eye lines</span>
</span></span><span><span>        <span>bool</span> <span>should_show</span> <span>=</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>0.25</span> <span>&amp;&amp;</span> 
</span></span><span><span>            <span>(</span><span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.29</span><span>)</span> <span>&lt;</span> <span>.05</span> <span>||</span> 
</span></span><span><span>            <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>-</span><span>.12</span><span>)</span> <span>&lt;</span> <span>.085</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>abs</span><span>(</span><span>d</span> <span>-</span> <span>.04</span><span>)</span> <span>&lt;</span> <span>.0055</span> <span>&amp;&amp;</span> <span>should_show</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>  
</span></span><span><span>    
</span></span><span><span>        <span>// Mouth</span>
</span></span><span><span>        <span>float</span> <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.26</span><span>,</span> <span>-</span><span>.28</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span><span>-</span><span>.42</span><span>),</span> 
</span></span><span><span>                     <span>vec2</span><span>(</span><span>.115</span><span>,</span> <span>-</span><span>.25</span><span>));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.11</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>// Teeth</span>
</span></span><span><span>            <span>float</span> <span>width</span> <span>=</span> <span>.065</span><span>;</span>
</span></span><span><span>            <span>vec2</span> <span>teeth</span> <span>=</span> <span>pixel</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>x</span> <span>=</span> <span>mod</span><span>(</span><span>teeth</span><span>.</span><span>x</span><span>,</span> <span>width</span><span>)</span><span>-</span><span>width</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>-=</span> <span>pow</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.09</span><span>,</span> <span>2.</span><span>)</span> <span>*</span> <span>1.5</span> <span>-</span> <span>.34</span><span>;</span>
</span></span><span><span>            <span>teeth</span><span>.</span><span>y</span> <span>=</span> <span>abs</span><span>(</span><span>teeth</span><span>.</span><span>y</span><span>)</span><span>-</span><span>.06</span><span>;</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>parabola</span><span>(</span><span>teeth</span><span>,</span> <span>38.</span><span>);</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span> <span>&amp;&amp;</span> <span>abs</span><span>(</span><span>pixel</span><span>.</span><span>x</span><span>+</span><span>.06</span><span>)</span> <span>&lt;</span> <span>.194</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.902</span><span>,</span> <span>0.890</span><span>,</span> <span>0.729</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>          
</span></span><span><span>            <span>// Tongue</span>
</span></span><span><span>            <span>// `map()` is used to change the thickness of </span>
</span></span><span><span>            <span>// the tongue along the x axis</span>
</span></span><span><span>            <span>vec2</span> <span>tongue</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>1.5</span><span>)</span><span>*</span><span>.15</span><span>+</span><span>.1</span><span>,</span> <span>vec2</span><span>(</span><span>0</span><span>,</span><span>-</span><span>.5</span><span>));</span>
</span></span><span><span>            <span>float</span> <span>tongue_thickness</span> <span>=</span> <span>map</span><span>(</span><span>tongue</span><span>.</span><span>x</span><span>,</span> <span>-</span><span>.16</span><span>,</span> <span>.01</span><span>,</span> <span>.02</span><span>,</span> <span>.045</span><span>);</span>
</span></span><span><span>            <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>tongue</span><span>,</span>  
</span></span><span><span>                <span>vec2</span><span>(</span><span>-</span><span>.16</span><span>,</span> <span>-</span><span>.35</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.001</span><span>,</span><span>-</span><span>.33</span><span>),</span> 
</span></span><span><span>                <span>vec2</span><span>(</span><span>.01</span><span>,</span> <span>-</span><span>.5</span><span>))</span> <span>-</span> <span>tongue_thickness</span><span>;</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>                <span>return</span> <span>vec3</span><span>(</span><span>0.816</span><span>,</span> <span>0.302</span><span>,</span> <span>0.275</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.01</span><span>);</span>
</span></span><span><span>              
</span></span><span><span>            <span>// mouth fill color</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>.42</span><span>,</span> <span>.147</span><span>,</span> <span>.152</span><span>);</span> 
</span></span><span><span>        <span>}</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lip outlines</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.12</span> <span>||</span> <span>(</span><span>abs</span><span>(</span><span>d</span><span>-</span><span>.16</span><span>)</span> <span>&lt;</span> <span>.005</span> 
</span></span><span><span>                        <span>&amp;&amp;</span> <span>(</span><span>pixel</span><span>.</span><span>x</span><span>*-</span><span>6.4</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>1.6</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>x</span><span>*</span><span>1.7</span> <span>&gt;</span> <span>-</span><span>pixel</span><span>.</span><span>y</span><span>+</span><span>.1</span> 
</span></span><span><span>                          <span>||</span> <span>pixel</span><span>.</span><span>y</span> <span>&lt;</span> <span>-</span><span>0.49</span><span>)))</span> 
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span> 
</span></span><span><span>        
</span></span><span><span>        <span>// lips</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>.16</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>0.76</span><span>);</span>
</span></span><span><span>       
</span></span><span><span>        
</span></span><span><span>    
</span></span><span><span>        <span>// Nose  </span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span> <span>-</span><span>.13</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.21</span><span>,</span><span>-</span><span>.14</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.14</span><span>,</span> <span>.08</span><span>)),</span>
</span></span><span><span>                <span>bezier</span><span>(</span><span>pixel</span><span>,</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.085</span><span>,</span> <span>-</span><span>.01</span><span>),</span> 
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.12</span><span>,</span> <span>-</span><span>.13</span><span>),</span>
</span></span><span><span>                    <span>vec2</span><span>(</span><span>-</span><span>.15</span><span>,</span><span>-</span><span>.13</span><span>)));</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0055</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>
</span></span><span><span>    <span>// Eyebrow</span>
</span></span><span><span>    <span>d</span> <span>=</span> <span>bezier</span><span>(</span><span>pixel</span><span>,</span>  
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.34</span><span>,</span> <span>.38</span><span>),</span> 
</span></span><span><span>            <span>// NEW animate the middle up and down</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>-</span><span>.05</span><span>,</span> <span>0.5</span> <span>+</span> <span>cos</span><span>(</span><span>time</span><span>)</span><span>*</span><span>.1</span><span>),</span>
</span></span><span><span>            <span>vec2</span><span>(</span><span>.205</span><span>,</span> <span>.36</span><span>))</span> <span>-</span> <span>0.035</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.0</span><span>)</span> 
</span></span><span><span>        <span>return</span> <span>vec3</span><span>(</span><span>.71</span><span>,</span> <span>.839</span><span>,</span> <span>.922</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.013</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>        <span>d</span> <span>=</span> <span>min</span><span>(</span>
</span></span><span><span>            <span>// Head</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span><span>,</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.36</span><span>,</span> <span>.6385</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.34</span><span>,</span> <span>.415</span><span>,</span> <span>.363</span><span>,</span> <span>.315</span><span>)),</span>
</span></span><span><span>            
</span></span><span><span>            <span>// Ear</span>
</span></span><span><span>            <span>round_rect</span><span>(</span>
</span></span><span><span>            <span>pixel</span> <span>+</span> <span>vec2</span><span>(</span><span>-</span><span>.32</span><span>,</span> <span>.15</span><span>),</span> 
</span></span><span><span>            <span>vec2</span><span>(</span><span>.15</span><span>,</span> <span>0.12</span><span>),</span> 
</span></span><span><span>            <span>vec4</span><span>(</span><span>.13</span><span>,</span><span>.1</span><span>,</span><span>.13</span><span>,</span><span>.13</span><span>))</span>
</span></span><span><span>        <span>);</span>
</span></span><span><span>            
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>return</span> <span>vec3</span><span>(</span><span>.838</span><span>,</span> <span>.799</span><span>,</span> <span>.76</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>.01</span><span>);</span>
</span></span><span><span>    
</span></span><span><span>    
</span></span><span><span>        <span>// Hair     </span>
</span></span><span><span>        <span>float</span> <span>twist</span> <span>=</span> <span>sin</span><span>(</span><span>time</span><span>*</span><span>2.</span><span>-</span><span>length</span><span>(</span><span>pixel</span><span>)</span><span>*</span><span>2.1</span><span>)</span><span>*</span><span>.12</span><span>;</span>
</span></span><span><span>        <span>vec2</span> <span>hair</span> <span>=</span> <span>rotateAt</span><span>(</span><span>pixel</span><span>,</span> <span>twist</span><span>,</span> <span>vec2</span><span>(</span><span>0.</span><span>,</span><span>.1</span><span>));</span>
</span></span><span><span>        <span>hair</span> <span>-=</span> <span>vec2</span><span>(</span><span>.08</span><span>,</span><span>.15</span><span>);</span>
</span></span><span><span>        <span>hair</span><span>.</span><span>x</span> <span>*=</span> <span>1.3</span><span>;</span>
</span></span><span><span>        <span>hair</span> <span>=</span> <span>warp</span><span>(</span><span>hair</span><span>,</span> <span>4.0</span><span>,</span> <span>0.07</span><span>);</span>
</span></span><span><span>        <span>d</span> <span>=</span> <span>star</span><span>(</span><span>hair</span><span>,</span> <span>0.95</span><span>,</span> <span>11.</span><span>,</span> <span>.28</span><span>);</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>d</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>return</span> <span>vec3</span><span>(</span><span>0.682</span><span>,</span> <span>0.839</span><span>,</span> <span>0.929</span><span>)</span><span>*</span><span>step</span><span>(</span><span>d</span><span>,</span> <span>-</span><span>0.012</span><span>);</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    
</span></span><span><span>    <span>return</span> <span>portal</span><span>(</span><span>pixel</span><span>,</span> <span>time</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>I prioritized reability over performance for this code - see how much faster you can make it run.</p><p>That’s everything I know about making 2D animations using shaders. I hope it’s useful. Maybe next time we’ll talk about 3D, or some totally different topic! If you’d like to be notified about my next post, please join my newsletter.</p><p>Join my newsletter lol</p><p>While I love teaching and making posts like this, they are very time consuming to make — this one took about two weeks of work spread over 8 months. So if you’d like to see more work like this, please consider <a href="#" onclick="event.preventDefault(),document.getElementById(&quot;tipform&quot;).submit()">supporting me</a>.</p><h2 id="appendix-1-creating-a-video">Appendix 1: Creating a Video</h2><p>When you’re done with an animation you’ll probably want to turn it into a video. The editor we’ve been using on this page can not yet do that, but I’m working on it. Join my newsletter to be notified when I add video export!</p><p>In the meantime, you can use a script with <a href="https://github.com/patriciogonzalezvivo/glslViewer" target="_blank" rel="noopener">glslviewer</a> and <a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">ffmpeg</a>. Below is my macOS workflow, on Windows and Linux you’ll have to figure out what your platform’s equivalent is.</p><ol><li>Install the dependencies.</li></ol><div><pre tabindex="0"><code data-lang="bash"><span><span>brew install glslviewer ffmpeg <span># brew is macos only</span>
</span></span></code></pre></div><ol start="2"><li><p>Write your <code>shader.frag</code> file</p></li><li><p>And then put this in a bash file and run to export your video</p></li></ol><div><pre tabindex="0"><code data-lang="bash"><span><span><span>#!/bin/bash
</span></span></span><span><span><span></span>
</span></span><span><span><span>set</span> -e
</span></span><span><span><span>set</span> -o pipefail
</span></span><span><span>
</span></span><span><span><span>if</span> <span>[</span> -z <span>"</span><span>$1</span><span>"</span> <span>]</span><span>;</span> <span>then</span>
</span></span><span><span>  <span>echo</span> <span>"Usage: </span><span>$0</span><span> &lt;shader_file&gt;"</span>
</span></span><span><span>  <span>exit</span> <span>1</span>
</span></span><span><span><span>fi</span>
</span></span><span><span>
</span></span><span><span><span>ORIGINAL_DIR</span><span>=</span><span>$(</span><span>pwd</span><span>)</span>
</span></span><span><span>
</span></span><span><span><span>TMP_DIR</span><span>=</span><span>$(</span>mktemp -d<span>)</span>
</span></span><span><span><span>if</span> <span>[</span> ! -d <span>"</span><span>$TMP_DIR</span><span>"</span> <span>]</span><span>;</span> <span>then</span>
</span></span><span><span>  <span>echo</span> <span>"Failed to create temporary directory."</span>
</span></span><span><span>  <span>exit</span> <span>1</span>
</span></span><span><span><span>fi</span>
</span></span><span><span><span>cd</span> <span>"</span><span>$TMP_DIR</span><span>"</span>
</span></span><span><span>
</span></span><span><span>glslViewer <span>"</span><span>$ORIGINAL_DIR</span><span>/</span><span>$1</span><span>"</span> -w <span>1920</span> -h <span>1080</span> --headless -e sequence,0,7,60 -e q
</span></span><span><span>ffmpeg -framerate <span>60</span> -y -i %05d.png -c:v libx264 -pix_fmt yuv420p animation.mp4
</span></span><span><span>mv animation.mp4 <span>"</span><span>$ORIGINAL_DIR</span><span>/"</span>
</span></span><span><span>
</span></span><span><span><span>cd</span> <span>"</span><span>$ORIGINAL_DIR</span><span>"</span>
</span></span><span><span>rm -rf <span>"</span><span>$TMP_DIR</span><span>"</span>
</span></span></code></pre></div><p>And if you want to live code locally, use this:</p><div><pre tabindex="0"><code data-lang="bash"><span><span>glslViewer shader.frag -w <span>575</span> -h <span>324</span> --noncurses -x <span>0</span> -y <span>0</span>
</span></span></code></pre></div><h3 id="appendix-2-super-sampling">Appendix 2: Super Sampling</h3><p>You may have noticed that the edges of shapes in the examples on this page are smooth. I did a bit of work behind the scenes make that happen. I use a technique called super sampling where I call <code>color_for_pixel()</code> for 9 locations within each screen pixel and then display the average. The left side of this example shows what it looks like with super sampling disabled. You may need to zoom in on the page to see the difference.</p><div><pre tabindex="0"><code data-lang="glsl"><span><span><span>#version 300 es </span>
</span></span><span><span><span>// The above line switches the editor to "pro" mode </span>
</span></span><span><span><span>// and removes automatic super sampling</span>
</span></span><span><span>
</span></span><span><span><span>precision</span> <span>highp</span> <span>float</span><span>;</span>
</span></span><span><span><span>uniform</span> <span>float</span> <span>time</span><span>;</span>
</span></span><span><span><span>uniform</span> <span>vec2</span> <span>resolution</span><span>;</span>
</span></span><span><span><span>out</span> <span>vec4</span> <span>outColor</span><span>;</span>
</span></span><span><span>
</span></span><span><span><span>vec3</span> <span>color_for_pixel</span><span>(</span><span>vec2</span> <span>p</span><span>,</span> <span>float</span> <span>time</span><span>)</span> <span>{</span>   
</span></span><span><span>    <span>return</span> <span>vec3</span><span>(</span><span>length</span><span>(</span><span>mod</span><span>(</span><span>p</span><span>+</span><span>time</span><span>*</span><span>.05</span><span>,</span> <span>.5</span><span>)</span> <span>-</span> <span>.25</span><span>)</span> <span>&gt;</span> <span>0.2</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>void</span> <span>main</span><span>()</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>zone</span> <span>=</span> <span>gl_FragCoord</span><span>.</span><span>x</span> <span>-</span> <span>resolution</span><span>.</span><span>x</span><span>*</span><span>.5</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>abs</span><span>(</span><span>zone</span><span>)</span> <span>&lt;</span> <span>1.5</span><span>)</span> <span>{</span>
</span></span><span><span>      <span>// vertical line</span>
</span></span><span><span>      <span>outColor</span> <span>=</span> <span>vec4</span><span>(</span><span>1</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> <span>1</span><span>);</span>
</span></span><span><span>    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>zone</span> <span>&lt;</span> <span>0.</span><span>)</span> <span>{</span>
</span></span><span><span>      <span>// left side: no super sampling</span>
</span></span><span><span>      <span>vec2</span> <span>st</span> <span>=</span> <span>(</span><span>2.0</span><span>*</span><span>(</span><span>gl_FragCoord</span><span>.</span><span>xy</span><span>)</span><span>-</span><span>resolution</span><span>)</span><span>/</span><span>resolution</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>      <span>outColor</span> <span>=</span> <span>vec4</span><span>(</span><span>color_for_pixel</span><span>(</span><span>st</span><span>,</span> <span>time</span><span>),</span> <span>1</span><span>);</span>
</span></span><span><span>    <span>}</span> <span>else</span> <span>{</span>
</span></span><span><span>      <span>// right side: super sampling</span>
</span></span><span><span>      <span>int</span> <span>sample_count</span> <span>=</span> <span>3</span><span>;</span>     
</span></span><span><span>      <span>vec3</span> <span>sum</span> <span>=</span> <span>vec3</span><span>(</span><span>0</span><span>);</span>
</span></span><span><span>      <span>for</span><span>(</span> <span>int</span> <span>m</span><span>=</span><span>0</span><span>;</span> <span>m</span><span>&lt;</span><span>sample_count</span><span>;</span> <span>m</span><span>++</span> <span>)</span> <span>{</span>
</span></span><span><span>          <span>for</span><span>(</span> <span>int</span> <span>n</span><span>=</span><span>0</span><span>;</span> <span>n</span><span>&lt;</span><span>sample_count</span><span>;</span> <span>n</span><span>++</span> <span>)</span> <span>{</span>
</span></span><span><span>              <span>vec2</span> <span>o</span> <span>=</span> <span>(</span><span>vec2</span><span>(</span><span>m</span><span>,</span><span>n</span><span>)</span> <span>+</span> <span>0.5</span><span>)</span> <span>/</span> <span>float</span><span>(</span><span>sample_count</span><span>);</span>
</span></span><span><span>              <span>vec2</span> <span>st</span> <span>=</span> <span>(</span><span>2.0</span><span>*</span><span>(</span><span>gl_FragCoord</span><span>.</span><span>xy</span><span>+</span><span>o</span><span>)</span><span>-</span><span>resolution</span><span>)</span><span>/</span><span>resolution</span><span>.</span><span>y</span><span>;</span>
</span></span><span><span>              <span>sum</span> <span>+=</span> <span>color_for_pixel</span><span>(</span><span>st</span><span>,</span> <span>time</span><span>);</span>
</span></span><span><span>          <span>}</span>
</span></span><span><span>      <span>}</span>
</span></span><span><span>
</span></span><span><span>      <span>outColor</span> <span>=</span> <span>vec4</span><span>(</span><span>sum</span> <span>/</span> <span>float</span><span>(</span><span>sample_count</span><span>*</span><span>sample_count</span><span>),</span> <span>1</span><span>);</span> 
</span></span><span><span>    <span>}</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><hr><p>Thanks to Carrie, Stan, Amin, and Martin for providing feedback on early drafts.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Subway crime plummets as ridership jumps significantly in congestion pricing era (152 pts)]]></title>
            <link>https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/</link>
            <guid>42958474</guid>
            <pubDate>Thu, 06 Feb 2025 02:58:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/">https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/</a>, See on <a href="https://news.ycombinator.com/item?id=42958474">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	<p><img width="1200" height="868" src="https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?w=1200" alt="NYPD officer at NYC subway turnstile" decoding="async" fetchpriority="high" srcset="https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg 1645w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=700,506 700w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=768,556 768w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=1200,868 1200w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=1536,1111 1536w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=384,278 384w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=900,651 900w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=1600,1157 1600w, https://www.amny.com/wp-content/uploads/2025/01/Screen-Shot-2025-01-14-at-4.16.10-PM.jpg?resize=50,36 50w" sizes="(max-width: 1200px) 100vw, 1200px" title="Subway crime plummets as ridership jumps significantly in 2025 in congestion pricing era 2">			</p>
	<p>Every subway train in NYC will have a uniformed police officer on board between 9 p.m. and 5 a.m. daily, Gov. Kathy Hochul said during her State of the State address in January.</p>	<p>Photo by Dean Moses</p></div><div>
		<p><span>NYC subway crime has dropped significantly so far this year even as ridership increased in <a href="https://www.amny.com/?s=congestion+pricing">the congestion pricing era</a>, according to the newest <a href="http://nyc.gov/nypd" target="_blank" rel="noopener">NYPD</a> data released on Tuesday.</span></p>
<p><span>In the first month of 2025, there were 147 reported crimes on the subway down from 231 last year—resulting in 36% fewer crimes committed on the rails this year.</span></p>
<p><span>At the same time, subway ridership has increased significantly since the start of congestion pricing on Jan. 5. This means that the drop in crime on the tracks has actually decreased even as more people are using NYC’s busy transit system—one of the largest in the world.</span></p>

<p><span>According to </span><a href="https://data.ny.gov/Transportation/MTA-Daily-Ridership-Data-2020-2025/vxuj-8kew/about_data" target="_blank" rel="noopener"><span>data on the New York State website</span></a><span>, subway ridership has increased almost every day since congestion pricing began on Jan. 5 — often in the hundreds of thousands of additional commuters daily.</span></p>
<p><span>For example, on Jan. 8, the first Wednesday with congestion pricing in effect this year, over 530,000 more people were on the trains than the same day last year (3,834,806 vs. 3,303,727).&nbsp;</span></p>
<p>Between Jan. 6 and 28, an amNewYork Metro review of MTA data found, ridership was up more than 9.1 million commuters year-over-year (74,680,439 in 2025 vs. 65,569,613 in 2024), a 13.1% increase.<span>&nbsp;</span></p>
<figure id="attachment_137740750" aria-describedby="caption-attachment-137740750"><img decoding="async" src="https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?w=1200" alt="Additional NYPD officers in the subways" width="1200" height="896" title="Subway crime plummets as ridership jumps significantly in 2025 in congestion pricing era 3" srcset="https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg 2048w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=700,523 700w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=768,574 768w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=1200,896 1200w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=1536,1148 1536w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=384,287 384w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=900,672 900w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=1600,1195 1600w, https://www.amny.com/wp-content/uploads/2025/01/L1100532-2.jpg?resize=50,37 50w" sizes="(max-width: 1200px) 100vw, 1200px"><figcaption id="caption-attachment-137740750"><span>Jan. 27 marked the first full-fledged surge of NYPD cops into the New York City subway overnight by Governor Kathy Hochul and Mayor Eric Adams amid high-profile crimes.</span><span>Photo by Dean Moses</span></figcaption></figure>
<p><span>Traffic fatalities across the city are also down, the<a href="https://compstat.nypdonline.org/" target="_blank" rel="noopener"> NYPD’s CompStat 2.0 dashboard</a> shows. Year to date, there were 10 deadly collisions on the roads compared to 18 in 2024—an over 44% drop year over year.&nbsp;</span></p>
<p><span>The MTA, the state agency that runs the NYC trains and buses, had long touted that congestion pricing would bring more New Yorkers onto mass transit, thus relieving heavy traffic build up in Midtown and Lower Manhattan. So far, those predictions are being proven true.</span></p>
<p><img loading="lazy" decoding="async" src="https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30%E2%80%AFAM.png?w=700" alt="" width="700" height="431" title="Subway crime plummets as ridership jumps significantly in 2025 in congestion pricing era 4" srcset="https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png 1408w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=700,431 700w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=768,472 768w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=1200,738 1200w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=384,236 384w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=900,554 900w, https://www.amny.com/wp-content/uploads/2025/02/Screenshot-2025-02-04-at-9.53.30 https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/AM.png?resize=50,31 50w" sizes="auto, (max-width: 700px) 100vw, 700px">
</p><h2>More cops = more safety in subways, mayor says</h2>
<p><span>Mayor Eric Adams attributed the decline in subway crime to a number of factors, including the massive surge of 1,200 additional NYPD officers in the subway system, as well as an additional 300 officers patrolling overnight trains.</span></p>

<p><span>“Public safety is the prerequisite to prosperity, and the latest crime statistics for January prove that our comprehensive approach to combating crime and improving quality of life is not only working, it’s driving real, measurable progress,” the mayor said in a statement to amNewYork Metro. “We’re seeing double-digit decreases in both overall crime above ground and transit crime below ground – with shooting incidents in January being the lowest number recorded for the month of January in over 30 years – and we remain committed to ensuring that New Yorkers aren’t just safe but feel safe, too.”</span></p>
<p><span>Transit crime was down throughout much of 2024, but Mayor Adams, the MTA and the NYPD have been battling public perception that subway crime was out of control – largely fueled by widely-reported, high-profile crimes on the trains</span><span>, including the </span><a href="https://www.amny.com/news/woman-burned-brooklyn-subway-arson-identified/"><span>horrific arson homicide </span></a><span>when a woman was burned alive on an F train in Coney Island.&nbsp;</span></p>

<p><span>The mayor added that the additional law enforcement efforts to prevent crime underground provide a “visible and effective presence” that makes commuters “both safer and more confident.”&nbsp;</span></p>
<p><span>“I want to thank Commissioner Tisch and the incredible men and women of the NYPD for making our streets safer every day,” Adams added. “While others advocate for defunding the police, we’ve defended them, and this is just one of countless examples of why New Yorkers want more policing, not less.”</span></p>
<p><span>This year’s decrease in crime so far points to a sign that city and state officials might be making progress in addressing the challenges facing the subway system, something which Gov. Kathy Hochul responded to when she announced a $77 million initiative on Jan. 16 to have </span><a href="https://www.amny.com/news/nyc-subway-safety-hochul-cops-overnight-trains/"><span>more uniformed police officers</span></a><span> on every overnight train.&nbsp;</span></p>
<p><span>Last year, she also directed the MTA to install over 15,000 cameras in every subway car and added about 1,250 National Guard members alongside police to assist in patrolling the mostly underground transit system.&nbsp;</span></p>
<p><span>“Governor Hochul is committed to ensuring that every rider and worker feels safe when they enter our transit system and are on the subway,” said Matthew Janiszewski, a spokesperson for the governor. “Governor Hochul is working hand-in-hand with the MTA and New York City to deter crime, making it safer for all riders and restoring public confidence in the system.”</span></p>
<p><span>NYC Transit President Demetrius Crichlow underscored the importance of law enforcement of public transit.</span>
</p><p><span>“Every survey shows New Yorkers want more uniformed officers on trains, and this is why. With Governor Hochul’s funding and NYPD deployment on every train overnight, crime is down, and riders are increasingly using transit to get where they need to go,” he said. “That’s no coincidence.”</span></p>

		
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mystery brain disease patients in New Brunswick say they welcome investigation (126 pts)]]></title>
            <link>https://www.ctvnews.ca/atlantic/new-brunswick/article/good-first-step-nb-mystery-brain-disease-patients-welcome-new-investigation/</link>
            <guid>42958218</guid>
            <pubDate>Thu, 06 Feb 2025 02:19:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ctvnews.ca/atlantic/new-brunswick/article/good-first-step-nb-mystery-brain-disease-patients-welcome-new-investigation/">https://www.ctvnews.ca/atlantic/new-brunswick/article/good-first-step-nb-mystery-brain-disease-patients-welcome-new-investigation/</a>, See on <a href="https://news.ycombinator.com/item?id=42958218">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="fusion-app" data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><header data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><nav id="main-nav" aria-label="Sections Menu"><div><nav aria-label="Top Links" data-style-direction="horizontal" data-style-justification="start" data-style-alignment="center" data-style-inline="false" data-style-wrap="wrap"><span><a href="https://www.ctvnews.ca/world/trumps-tariffs">Trump's Tariffs</a></span><span><a href="https://www.ctvnews.ca/politics/liberal-leadership">Liberal Leadership</a></span><span><a href="https://www.ctvnews.ca/toronto/ontario-election-2025">Ontario Election</a></span><span><a href="https://www.ctvnews.ca/now/">CTV News Now</a></span><span><a href="https://www.ctvnews.ca/photos/">In Pictures</a></span><span><a href="https://www.ctvnews.ca/shopping.html" rel="noreferrer" target="_blank">Shopping Trends<span>Opens in new window</span></a></span></nav></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap" id="flyout-overlay" data-testid="nav-chain-flyout-overlay"><ul data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_atlantic"><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_calgary"><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_kitchener"><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_northern-ontario"><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_ottawa"><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_regina"><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_saskatoon"><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_vancouver"><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_canada"><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_politics"><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_world"><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_video"><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"><div><ul id="header_sub_section_business"><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li><li data-testid="nav-chain-subsection-item"></li></ul></div></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li data-testid="nav-chain-section-item"></li><li></li></ul></div></nav></header><section role="main" tabindex="-1"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><p>ADVERTISEMENT</p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><p><a href="https://www.ctvnews.ca/atlantic/new-brunswick/">New Brunswick</a></p></div><div><p><span>By</span> <span><a href="https://www.ctvnews.ca/team/the-canadian-press/">The Canadian Press</a></span></p></div><p>Published<!-- -->:&nbsp;<time datetime="2025-01-19T14:09:52.156Z">January 19, 2025 at 9:09AM EST</time></p><p><figure><figcaption><span>The New Brunswick government has reopened an investigation into a "neurological syndrome of unknown cause." </span></figcaption></figure></p><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><p><a href="https://www.ctvnews.ca/app/"><img alt="" src="https://cloudfront-us-east-1.images.arcpublishing.com/bellmediainc/JKPR56EJVRFBPJFLGGHK4YHLSI.jpg"></a></p></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><p><a href="https://www.ctvnews.ca/newsletters/"><img alt="" src="https://cloudfront-us-east-1.images.arcpublishing.com/bellmediainc/CEGI7MW2IFAOVCRPX46SKRWCPE.jpg"></a></p></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/toronto/article/gta-school-bus-cancellations-for-feb-6-2025/">GTHA school bus cancellations for Feb. 6, 2025</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/toronto/article/jonas-brothers-surprise-camp-rock-fans-at-toronto-bar-trivia/">Jonas Brothers surprise fans at Toronto bar trivia</a></h2></div><hr></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/vancouver/article/push-to-remove-interprovincial-trade-barriers-hits-high-gear/">Push to remove interprovincial trade barriers hits high gear</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/vancouver/article/ivan-henry-found-liable-for-sexual-assaults-of-5-women-in-bc-civil-trial/">Ivan Henry found liable for sexual assaults of 5 women in B.C. civil trial</a></h2></div><hr></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/calgary/article/city-plan-calls-for-250m-boost-to-calgarys-recreation-funding/">City plan calls for $250M boost to Calgary’s recreation funding </a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/calgary/article/alberta-to-move-ahead-with-mandatory-addiction-treatment-facilities-this-year/">Alberta to move ahead with mandatory addiction treatment facilities this year</a></h2></div><hr></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/ottawa/article/winter-storm-to-bring-5-10-cm-of-snow-to-ottawa-today/">Winter storm to bring 5-10 cm of snow to Ottawa today </a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/ottawa/article/2-stolen-vehicles-found-inside-tractor-trailer-on-hwy-401-in-eastern-ontario-opp-says/">2 stolen vehicles found inside tractor-trailer on Hwy. 401 in eastern Ontario, OPP says </a></h2></div><hr></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/montreal/politics/article/canadian-pride-is-on-the-rise-in-wake-of-trumps-tariff-threat-especially-in-quebec/">Canadian pride is on the rise in wake of Trump's tariff threat - especially in Quebec</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/montreal/article/bombardier-reports-124m-q4-profit-down-from-215m-a-year-earlier/">Bombardier reports $124M Q4 profit, down from $215M a year earlier</a></h2></div><hr></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/edmonton/article/rcmp-to-hold-news-conference-about-3-border-related-events-in-alberta-manitoba/">1 dead, 15 taken into custody after 3 incidents at the Canada-U.S. border: RCMP</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/toronto/consumer-alert/article/canada-post-is-in-terminal-decline-there-is-no-way-around-it-delays-still-being-experienced-by-postal-service/">‘Canada Post is in terminal decline’: Delays still being experienced by postal service after strike</a></h2></div><hr></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/atlantic/new-brunswick/article/man-who-shot-nb-teacher-sentenced-to-10-years-in-prison/">Man who shot N.B. teacher in 2021 sentenced to 10 years in prison</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/atlantic/article/canada-and-us-to-face-off-in-halifax-thursday-for-game-four-of-rivalry-series/">Canada and U.S. to face off in Halifax Thursday for Game 4 of Rivalry Series</a></h2></div><hr></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/winnipeg/article/grinch-destroys-santa-statue-spreading-cheer-year-round-in-winnipeg/">Grinch destroys Santa statue spreading cheer year-round in Winnipeg</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/winnipeg/article/winnipeg-police-on-scene-following-attack-at-osborne-lounge/">Winnipeg police on scene following attack at Osborne lounge </a></h2></div><hr></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/regina/article/multiple-highways-closed-around-regina-highway-hotline/">Multiple highways closed around Regina: Highway Hotline</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/regina/article/man-believed-to-be-connected-to-deaths-on-carry-the-kettle-nakoda-nation-arrested-by-regina-police/">Sask. RCMP investigating Carry the Kettle deaths as quadruple homicide, believed to be targeted</a></h2></div><hr></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/kitchener/article/four-suspects-arrested-one-still-wanted-for-smash-and-grab-at-stratford-mall/">Four suspects arrested, one still wanted for smash and grab at Stratford Mall</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/politics/article/canada-will-not-make-concessions-on-supply-management-minister-says/">Canada will not make concessions on supply management, minister says</a></h2></div><hr></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/saskatoon/article/saskatoon-residents-get-rare-look-at-city-archives-during-grand-opening/">Saskatoon residents get rare look at city archives during grand opening </a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/saskatoon/article/sask-archaeological-site-one-of-the-oldest-known-indigenous-settlements-on-the-continent/">Sask. archeological site one of the oldest known Indigenous settlements on the continent</a></h2></div><hr></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/edmonton/article/rcmp-to-hold-news-conference-about-3-border-related-events-in-alberta-manitoba/">1 dead, 15 taken into custody after 3 incidents at the Canada-U.S. border: RCMP</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/northern-ontario/article/young-sudbury-motorist-charged-with-stunt-driving/">Young Sudbury motorist charged with stunt driving</a></h2></div><hr></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/london/article/two-people-displaced-100000-in-damages-following-fire-on-tuesday-evening/">Two people displaced, $100,000 in damages following fire on Tuesday evening</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/london/article/carbon-budget-urged-to-ensure-mobility-master-plan-helps-achieve-londons-greenhouse-gas-targets/">Carbon budget urged to ensure Mobility Master Plan helps achieve London’s greenhouse gas targets</a></h2></div><hr></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/barrie/article/barrie-woman-convicted-of-killing-her-two-young-daughters-granted-escorted-absences/">Barrie, Ont. woman convicted of killing her two young daughters granted escorted absences</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/barrie/article/siu-clears-barrie-officer-after-mans-overdose-during-arrest-attempt/">SIU clears Barrie officer after man’s overdose during arrest attempt</a></h2></div><hr></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/windsor/article/freezing-rain-warning-in-effect-for-windsor-essex/">Buses cancelled, freezing drizzle advisory in effect for Windsor-Essex</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/windsor/article/windsor-police-chief-announces-retirement-2/">Windsor police chief announces retirement</a></h2></div><hr></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/vancouver/article/push-to-remove-interprovincial-trade-barriers-hits-high-gear/">Push to remove interprovincial trade barriers hits high gear</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/vancouver/article/with-trade-war-looming-data-shows-how-buying-local-keeps-more-money-in-bc/">With trade war looming, data shows how buying local keeps more money in B.C.</a></h2></div><hr></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/montreal/article/free-palestine-windows-smashed-as-graffiti-covers-mcgill-university/">‘Free Palestine’: Windows smashed as graffiti covers McGill University</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/barrie/article/barrie-woman-convicted-of-killing-her-two-young-daughters-granted-escorted-absences/">Barrie, Ont. woman convicted of killing her two young daughters granted escorted absences</a></h2></div><hr></article></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/world/article/two-years-on-survivors-of-turkish-earthquake-still-struggle-with-loss-and-hardship/">Two years on, survivors of Turkish earthquake still struggle with loss and hardship</a></h2></div><hr></article><article><div><figure></figure><h2><a href="https://www.ctvnews.ca/world/article/swedish-police-say-mass-shooter-was-connected-to-school-where-he-opened-fire/">Swedish police say mass shooter was connected to school where he opened fire</a></h2></div><hr></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/politics/">Politics</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/politics/article/community-groups-say-canadians-are-scared-as-trudeau-warns-hate-crimes-are-rising/">Community groups say Canadians are scared as Trudeau warns hate crimes are rising</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/politics/article/ministers-meeting-washington-republicans-in-effort-to-end-trumps-tariff-threats/"><h3>Ministers meeting Washington Republicans in effort to end Trump's tariff threats</h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/politics/article/liberal-race-sucked-into-trumps-gravitational-field-strategists-say/"><h3>Liberal race sucked into Trump's 'gravitational field,' strategists say</h3></a></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/business/">Business</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/business/article/higher-costs-admin-nightmare-businesses-fret-over-end-of-de-minimis-exemption/">Higher costs, admin nightmare: Businesses fret over end of de minimis exemption</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/business/article/judge-blocks-sandy-hook-families-settlement-in-alex-jones-bankruptcy/"><h3>Judge blocks Sandy Hook families' settlement in Alex Jones' bankruptcy</h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/business/article/canada-posts-first-trade-surplus-in-10-months-of-708-million/"><h3>Canada posts first trade surplus in 10 months of $708 million </h3></a></article></div></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/health/">Health</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/health/article/argentina-says-it-will-withdraw-from-the-world-health-organization-echoing-trump/">Argentina says it will withdraw from the World Health Organization, echoing Trump</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/health/article/second-type-of-bird-flu-detected-in-us-dairy-cows/"><h3>Second type of bird flu detected in U.S. dairy cows</h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/health/article/latest-updates-tracking-rsv-influenza-covid-19-in-canada/"><h3>Latest updates: Tracking RSV, influenza, COVID-19 in Canada</h3></a></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/entertainment/">Entertainment</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/entertainment/article/kendrick-lamar-to-discuss-super-bowl-halftime-performance-in-new-orleans/">Kendrick Lamar to discuss Super Bowl halftime performance in New Orleans</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/entertainment/article/wicked-star-cynthia-erivo-is-feted-as-harvards-hasty-pudding-woman-of-the-year/"><h3>'Wicked' star Cynthia Erivo is feted as Harvard's Hasty Pudding Woman of the Year</h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/entertainment/article/us-not-treated-well-by-canada-come-from-away-director-says-thats-a-cruel-lie/"><h3>U.S. not treated well by Canada? 'Come From Away' director says that's a cruel lie</h3></a></article></div></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/sports/">Sports</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/sports/article/baseball-star-ohtanis-ex-interpreter-to-appear-in-court-for-sentencing-in-betting-case/">Baseball star Ohtani's ex-interpreter to appear in court for sentencing in betting case</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/sports/article/canada-us-womens-hockey-teams-not-focused-on-booing-ahead-of-rivalry-series/"><h3>Canada, U.S. women's hockey teams not focused on booing ahead of Rivalry Series</h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/sports/article/nfl-to-host-first-ever-regular-season-game-in-australia-in-2026/"><h3>NFL to host first-ever regular season game in Australia in 2026</h3></a></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/lifestyle/">Lifestyle</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/lifestyle/article/meet-the-woman-keeping-the-adorable-pups-happy-at-this-years-puppy-bowl/">Meet the woman keeping the adorable pups happy at this year's 'Puppy Bowl'</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/lifestyle/article/crayolas-iconic-retired-colours-are-coming-back/"><h3>Why Crayola is bringing back these popular colours</h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/lifestyle/article/mmm-that-looks-yummy-the-colours-we-see-make-a-difference-in-the-food-we-eat/"><h3>Mmm, that looks yummy! The colours we see make a difference in the food we eat</h3></a></article></div></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/climate-and-environment/">Climate &amp; Environment</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/climate-and-environment/article/the-us-is-freezing-and-la-nina-usually-eases-warming-earth-just-set-another-heat-record-anyway/">The U.S. is freezing and La Nina usually eases warming. Earth just set another heat record anyway</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/climate-and-environment/article/hawaii-volcano-produces-tall-lava-fountaining-in-latest-episode-of-kilauea-eruption/"><h3>Hawaii volcano produces tall lava fountaining in latest episode of Kilauea eruption</h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/climate-and-environment/article/warming-threatens-to-expand-area-of-world-too-hot-for-humans/"><h3>Warming threatens to expand area of world too hot for humans</h3></a></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/sci-tech/">Sci-Tech</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/sci-tech/article/google-scraps-its-diversity-hiring-goals-as-it-complies-with-trumps-new-government-contractor-rules/">Google scraps its diversity hiring goals as it complies with Trump's new government contractor rules</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/sci-tech/article/a-wedding-necklace-and-polish-dumplings-will-be-part-of-a-mission-to-the-international-space-station/"><h3>A wedding necklace and Polish dumplings will be part of a mission to the International Space Station</h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/sci-tech/article/ai-and-scientists-unite-to-decipher-old-scrolls-charred-by-the-vesuvius-volcano/"><h3>AI and scientists unite to decipher old scrolls charred by the Vesuvius volcano</h3></a></article></div></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/business/autos/">Autos</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/business/autos/article/toyota-corolla-tacoma-and-other-models-recalled-over-safety-issue/">Multiple Toyota models recalled due to steering wheel issue</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/business/autos/article/auto-sector-hoping-for-tariff-relief-as-tariff-shutdowns-loom/"><h3>Auto sector dodges tariffs but threats to sector and economy remain: Unifor</h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/business/autos/article/norway-nears-100-per-cent-goal-of-all-electric-cars/"><h3>Norway nears 100 per cent goal of all-electric cars </h3></a></article></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div><p><a href="https://www.ctvnews.ca/photos/">Photos</a></p></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/photos/2025/02/03/a-look-inside-trumps-mar-a-lago-estate/">A look inside Trump's Mar-a-Lago estate</a></h3></div></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/photos/2025/02/05/the-life-of-aga-khan-in-photos/"><h3>The life of Aga Khan in photos </h3></a></article><article data-style-direction="horizontal" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><a href="https://www.ctvnews.ca/photos/2025/02/05/a-look-inside-el-salvadors-mega-prison/"><h3>Inside look at El Salvador’s mega-prison that Trump plans to send detained migrants</h3></a></article></div></div></div></div><div data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><p><a href="https://www.ctvnews.ca/shopping.html"><h2>Shopping Trends</h2></a></p><div><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/deals/silk-snow-valentines-day-sale.html">The Silk &amp; Snow Valentine's Day Sale Is Officially On — Here's What To Add To Your Cart</a></h3></article><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/gifts/best-valentines-day-gift-ideas.html">25 Brilliant Valentine's Day Gifts To Give If They're Not Into Roses And Champagne</a></h3></article><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/home/amazon-canada-under-25.html">19 Practical Amazon Canada Items You Didn’t Know You Needed (And They All Cost Less Than $25)</a></h3></article><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/home/best-electric-slicers-canada.html">Our Guide To The Best Electric Slicers In Canada In 2025 (And Where To Get Them)</a></h3></article><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/home/affordable-problem-solving-amazon-products.html">17 Problem-Solving Amazon Products That Are Both Affordable And Useful</a></h3></article><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/home/best-pet-brushes-canada.html">If Your Pet Sheds A Lot, You Probably Need One Of These Brushes In Your Life</a></h3></article><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/beauty/best-eyelash-curlers.html">The Best Eyelash Curlers You Can Find Online Right Now</a></h3></article><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/beauty/best-night-creams-canada.html">18 Night Creams That'll Work Magic On Your Skin While You Sleep</a></h3></article><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/beauty/best-foot-creams-cracked-heels-dry-feet.html">The Best Foot Creams For Cracked Heels And Dry Feet</a></h3></article><article data-style-direction="vertical" data-style-justification="start" data-style-alignment="unset" data-style-inline="false" data-style-wrap="nowrap"><h3><a href="https://www.ctvnews.ca/shopping/gifts/birthday-gifts-february-2025.html">The Best Birthday Gifts To Give In February 2025</a></h3></article></div><p>The Shopping Trends team is independent of the journalists at CTV News. We may earn a commission when you use our links to shop. <a href="https://www.ctvnews.ca/shopping/about-us.html">Read about us.</a></p></div></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenWrt 24.10.0 – First Stable Release (292 pts)]]></title>
            <link>https://openwrt.org/releases/24.10/notes-24.10.0</link>
            <guid>42958202</guid>
            <pubDate>Thu, 06 Feb 2025 02:17:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openwrt.org/releases/24.10/notes-24.10.0">https://openwrt.org/releases/24.10/notes-24.10.0</a>, See on <a href="https://news.ycombinator.com/item?id=42958202">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div>
<pre>  _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R E L E S S   F R E E D O M
 -----------------------------------------------------
 OpenWrt 24.10.0, r28427-6df0e3d02a
 -----------------------------------------------------</pre>



<p>
The OpenWrt community is proud to announce the first stable release of the OpenWrt 24.10 stable series.
</p>

<p>
Download firmware images via the Firmware Selector or directly from our download servers:
</p>


<p>
An upgrade from OpenWrt 23.05 to OpenWrt 24.10 is supported in many cases with 
the help of the sysupgrade utility which will also attempt to preserve the 
configuration. A configuration backup is advised nonetheless when upgrading to 
OpenWrt 24.10. (see “Upgrading” below).
</p>

</div>


<p>
The OpenWrt Project is a Linux operating system targeting embedded devices.  
It is a complete replacement for the vendor-supplied firmware of a wide range 
of wireless routers and non-network devices. See the 
<a href="https://openwrt.org/toh/views/toh_fwdownload?dataflt%5B0%5D=supported%20current%20rel_%3D24.10.0" title="toh:views:toh_fwdownload" data-wiki-id="toh:views:toh_fwdownload">Table of Hardware</a> for supported devices. 
For more information about OpenWrt project organization, see the 
<a href="https://openwrt.org/about" title="https://openwrt.org/about" rel="ugc nofollow">About OpenWrt pages</a>.
</p>

<h3 id="announcements_about_new_releases_and_security_fixes">Announcements about new releases and security fixes</h3>
<div>

<p>
Do you want to be informed about important changes such as new releases and security fixes?
</p>

<p>
We have a new mailing list for this, as well as RSS options: see <a href="https://openwrt.org/contact#announces" title="contact" data-wiki-id="contact">Important changes and announcements</a>.
</p>

</div>


<p>
OpenWrt 24.10.0 incorporates over 5400  commits since branching the previous OpenWrt 23.05 release and has been under development for over one year.
</p>

<h4 id="general_changes">General changes</h4>



<div>

<p>
OpenWrt 24.10 supports over 1970 devices. Support for over 100 new devices was added in addition to the device support by OpenWrt 23.05.
</p>

<p>
 * Added support for <a href="https://openwrt.org/toh/openwrt/one" title="toh:openwrt:one" data-wiki-id="toh:openwrt:one">OpenWrt One</a>
</p>

</div>

<h4 id="target_changes">Target changes</h4>



<div>

<p>
Core components have the following versions in 24.10.0:
</p>


<p>
In addition to the listed applications, many others were also updated.
</p>

</div>


<div>

<p>
Sysupgrade can be used to upgrade a device from 23.05 to 24.10, and configuration will be preserved in most cases.
For for upgrades inside the OpenWrt 24.10 stable series for example from a OpenWrt 24.10 release candidate <a href="https://openwrt.org/docs/guide-user/installation/attended.sysupgrade" title="docs:guide-user:installation:attended.sysupgrade" data-wiki-id="docs:guide-user:installation:attended.sysupgrade">Attended Sysupgrade</a> is supported in addition which allows preserving the installed packages too.
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> Sysupgrade from 22.03 to 24.10 is not officially supported.
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> There is no configuration migration path for users of the ipq806x target for Qualcomm Atheros IPQ806X SoCs because it switched to <a href="https://openwrt.org/docs/guide-user/network/dsa/start" title="docs:guide-user:network:dsa:start" data-wiki-id="docs:guide-user:network:dsa:start">DSA</a>. You have to upgrade without saving the configuration.
<code>Image version mismatch. image 1.1 device 1.0 Please wipe config during upgrade (force required) or reinstall. Config cannot be migrated from swconfig to DSA Image check failed</code>
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> User of the Linksys E8450 aka. Belkin RT3200 running OpenWrt 23.05 or earlier will need to run installer version <a href="https://github.com/dangowrt/owrt-ubi-installer/releases/tag/v1.1.3" title="https://github.com/dangowrt/owrt-ubi-installer/releases/tag/v1.1.3" rel="ugc nofollow">v1.1.3</a> or later in order to reorganize the UBI layout for the 24.10 release. <a href="https://openwrt.org/toh/linksys/e8450#upgrading_an_ubi_installation_to_new_releases_after_2024-02_includes_all_snapshots_2410-snapshots_24100-rcx_releases_and_all_releases_in_the_foreseable_future" title="toh:linksys:e8450" data-wiki-id="toh:linksys:e8450">A detailed description is in the OpenWrt wiki.</a> Updating without using the installer will break the device. Sysupgrade will show a warning before doing an incompatible upgrade.
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> Users of the Xiaomi AX3200 aka. Redmi AX6S running OpenWrt 23.05 or earlier have to follow a <a href="https://openwrt.org/toh/xiaomi/ax3200#upgrading_from_2305_and_earlier_to_upcoming_2410_or_snapshot" title="toh:xiaomi:ax3200" data-wiki-id="toh:xiaomi:ax3200">special upgrade procedure described in the wiki</a>. This will increase the flash memory available for OpenWrt. Updating without following the guide in the wiki break the device. Sysupgrade will show a warning before doing an incompatible upgrade.
</p>

<p>
<img src="https://openwrt.org/lib/images/smileys/exclaim.svg" alt=":!:"> Users of Zyxel GS1900 series switches running OpenWrt 23.05 or earlier have to perform a new factory install with the initramfs image due to a changed partition layout. Sysupgrade will show a warning before doing an incompatible upgrade and is not possible.
</p>

</div>





<div>

<p>
As always, a big thank you goes to all our active package maintainers, 
testers, documenters, and supporters.
</p>

<p>
Have fun!
</p>

<p>
The OpenWrt Community
</p>

</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Deep Reinforcement Learning: Pong from Pixels (2016) (110 pts)]]></title>
            <link>http://karpathy.github.io/2016/05/31/rl/</link>
            <guid>42958012</guid>
            <pubDate>Thu, 06 Feb 2025 01:52:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://karpathy.github.io/2016/05/31/rl/">http://karpathy.github.io/2016/05/31/rl/</a>, See on <a href="https://news.ycombinator.com/item?id=42958012">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
  <!-- 
<svg width="800" height="200">
	<rect width="800" height="200" style="fill:rgb(98,51,20)" />
	<rect width="20" height="50" x="20" y="100" style="fill:rgb(189,106,53)" />
	<rect width="20" height="50" x="760" y="30" style="fill:rgb(77,175,75)" />
	<rect width="10" height="10" x="400" y="60" style="fill:rgb(225,229,224)" />
</svg>
 -->

<p>This is a long overdue blog post on Reinforcement Learning (RL). RL is hot! You may have noticed that computers can now automatically <a href="http://www.nature.com/nature/journal/v518/n7540/abs/nature14236.html">learn to play ATARI games</a> (from raw game pixels!), they are beating world champions at <a href="http://googleresearch.blogspot.com/2016/01/alphago-mastering-ancient-game-of-go.html">Go</a>, simulated quadrupeds are learning to <a href="https://www.cs.ubc.ca/~van/papers/2016-TOG-deepRL/index.html">run and leap</a>, and robots are learning how to perform <a href="http://www.bloomberg.com/features/2015-preschool-for-robots/">complex manipulation tasks</a> that defy explicit programming. It turns out that all of these advances fall under the umbrella of RL research. I also became interested in RL myself over the last ~year: I worked <a href="https://webdocs.cs.ualberta.ca/~sutton/book/the-book.html">through Richard Sutton’s book</a>, read through <a href="http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching.html">David Silver’s course</a>, watched <a href="https://www.youtube.com/watch?v=oPGVsoBonLM">John Schulmann’s lectures</a>, wrote an <a href="http://cs.stanford.edu/people/karpathy/reinforcejs/">RL library in Javascript</a>, over the  summer interned at DeepMind working in the DeepRL group, and most recently pitched in a little with the design/development of <a href="https://gym.openai.com/">OpenAI Gym</a>, a new RL benchmarking toolkit. So I’ve certainly been on this funwagon for at least a year but until now I haven’t gotten around to writing up a short post on why RL is a big deal, what it’s about, how it all developed and where it might be going.</p>

<div>
<p><img src="http://karpathy.github.io/assets/rl/preview.jpeg"></p><p>Examples of RL in the wild. <b>From left to right</b>: Deep Q Learning network playing ATARI, AlphaGo, Berkeley robot stacking Legos, physically-simulated quadruped leaping over terrain.</p>
</div>

<p>It’s interesting to reflect on the nature of recent progress in RL. I broadly like to think about four separate factors that hold back AI:</p>

<ol>
  <li>Compute (the obvious one: Moore’s Law, GPUs, ASICs),</li>
  <li>Data (in a nice form, not just out there somewhere on the internet - e.g. ImageNet),</li>
  <li>Algorithms (research and ideas, e.g. backprop, CNN, LSTM), and</li>
  <li>Infrastructure (software under you - Linux, TCP/IP, Git, ROS, PR2, AWS, AMT, TensorFlow, etc.).</li>
</ol>

<p>Similar to what happened in Computer Vision, the progress in RL is not driven as much as you might reasonably assume by new amazing ideas. In Computer Vision, the 2012 AlexNet was mostly a scaled up (deeper and wider) version of 1990’s ConvNets. Similarly, the ATARI Deep Q Learning paper from 2013 is an implementation of a standard algorithm (Q Learning with function approximation, which you can find in the standard RL book of Sutton 1998), where the function approximator happened to be a ConvNet. AlphaGo uses policy gradients with Monte Carlo Tree Search (MCTS) - these are also standard components. Of course, it takes a lot of skill and patience to get it to work, and multiple clever tweaks on top of old algorithms have been developed, but to a first-order approximation the main driver of recent progress is not the algorithms but (similar to Computer Vision) compute/data/infrastructure.</p>

<p>Now back to RL. Whenever there is a disconnect between how magical something seems and how simple it is under the hood I get all antsy and really want to write a blog post. In this case I’ve seen many people who can’t believe that we can automatically learn to play most ATARI games at human level, with one algorithm, from pixels, and from scratch - and it is amazing, and I’ve been there myself! But at the core the approach we use is also really quite profoundly dumb (though I understand it’s easy to make such claims in retrospect). Anyway, I’d like to walk you through Policy Gradients (PG), our favorite default choice for attacking RL problems at the moment. If you’re from outside of RL you might be curious why I’m not presenting DQN instead, which is an alternative and better-known RL algorithm, widely popularized by the <a href="http://www.nature.com/nature/journal/v518/n7540/abs/nature14236.html">ATARI game playing paper</a>. It turns out that Q-Learning is not a great algorithm (you could say that DQN is so 2013 (okay I’m 50% joking)). In fact most people prefer to use Policy Gradients, including the authors of the original DQN paper who have <a href="http://arxiv.org/abs/1602.01783">shown</a> Policy Gradients to work better than Q Learning when tuned well. PG is preferred because it is end-to-end: there’s an explicit policy and a principled approach that directly optimizes the expected reward. Anyway, as a running example we’ll learn to play an ATARI game (Pong!) with PG, from scratch, from pixels, with a deep neural network, and the whole thing is 130 lines of Python only using numpy as a dependency (<a href="https://gist.github.com/karpathy/a4166c7fe253700972fcbc77e4ea32c5">Gist link</a>). Lets get to it.</p>

<h3 id="pong-from-pixels">Pong from pixels</h3>

<div>
<p><img src="http://karpathy.github.io/assets/rl/pong.gif">
</p>
<p><img src="http://karpathy.github.io/assets/rl/mdp.png" height="206">
</p>
<p><b>Left:</b> The game of Pong. <b>Right:</b> Pong is a special case of a <a href="https://en.wikipedia.org/wiki/Markov_decision_process">Markov Decision Process (MDP)</a>: A graph where each node is a particular game state and each edge is a possible (in general probabilistic) transition. Each edge also gives a reward, and the goal is to compute the optimal way of acting in any state to maximize rewards.</p>
</div>

<p>The game of Pong is an excellent example of a simple RL task. In the ATARI 2600 version we’ll use you play as one of the paddles (the other is controlled by a decent AI) and you have to bounce the ball past the other player (I don’t really have to explain Pong, right?). On the low level the game works as follows: we receive an image frame (a <code>210x160x3</code> byte array (integers from 0 to 255 giving pixel values)) and we get to decide if we want to move the paddle UP or DOWN (i.e. a binary choice). After every single choice the game simulator executes the action and gives us a reward: Either a +1 reward if the ball went past the opponent, a -1 reward if we missed the ball, or 0 otherwise. And of course, our goal is to move the paddle so that we get lots of reward.</p>

<p>As we go through the solution keep in mind that we’ll try to make very few assumptions about Pong because we secretly don’t really care about Pong; We care about complex, high-dimensional problems like robot manipulation, assembly and navigation. Pong is just a fun toy test case, something we play with while we figure out how to write very general AI systems that can one day do arbitrary useful tasks.</p>

<p><strong>Policy network</strong>. First, we’re going to define a <em>policy network</em> that implements our player (or “agent”). This network will take the state of the game and decide what we should do (move UP or DOWN). As our favorite simple block of compute we’ll use a 2-layer neural network that takes the raw image pixels (100,800 numbers total (210*160*3)), and produces a single number indicating the probability of going UP. Note that it is standard to use a <em>stochastic</em> policy, meaning that we only produce a <em>probability</em> of moving UP. Every iteration we will sample from this distribution (i.e. toss a biased coin) to get the actual move. The reason for this will become more clear once we talk about training.</p>

<div>
<p><img src="http://karpathy.github.io/assets/rl/policy.png" height="200"></p><p>Our policy network is a 2-layer fully-connected net.</p>
</div>

<p>and to make things concrete here is how you might implement this policy network in Python/numpy. Suppose we’re given a vector <code>x</code> that holds the (preprocessed) pixel information. We would compute:</p>

<div><pre><code><span>h</span> <span>=</span> <span>np</span><span>.</span><span>dot</span><span>(</span><span>W1</span><span>,</span> <span>x</span><span>)</span> <span># compute hidden layer neuron activations
</span><span>h</span><span>[</span><span>h</span><span>&lt;</span><span>0</span><span>]</span> <span>=</span> <span>0</span> <span># ReLU nonlinearity: threshold at zero
</span><span>logp</span> <span>=</span> <span>np</span><span>.</span><span>dot</span><span>(</span><span>W2</span><span>,</span> <span>h</span><span>)</span> <span># compute log probability of going up
</span><span>p</span> <span>=</span> <span>1.0</span> <span>/</span> <span>(</span><span>1.0</span> <span>+</span> <span>np</span><span>.</span><span>exp</span><span>(</span><span>-</span><span>logp</span><span>))</span> <span># sigmoid function (gives probability of going up)
</span></code></pre></div>

<p>where in this snippet <code>W1</code> and <code>W2</code> are two matrices that we initialize randomly. We’re not using biases because meh. Notice that we use the <em>sigmoid</em> non-linearity at the end, which squashes the output probability to the range [0,1]. Intuitively, the neurons in the hidden layer (which have their weights arranged along the rows of <code>W1</code>) can detect various game scenarios (e.g. the ball is in the top, and our paddle is in the middle), and the weights in <code>W2</code> can then decide if in each case we should be going UP or DOWN. Now, the initial random <code>W1</code> and <code>W2</code> will of course cause the player to spasm on spot. So the only problem now is to find <code>W1</code> and <code>W2</code> that lead to expert play of Pong!</p>

<p><em>Fine print: preprocessing.</em> Ideally you’d want to feed at least 2 frames to the policy network so that it can detect motion. To make things a bit simpler (I did these experiments on my Macbook) I’ll do a tiny bit of preprocessing, e.g. we’ll actually feed <em>difference frames</em> to the network (i.e. subtraction of current and last frame).</p>

<p><strong>It sounds kind of impossible</strong>. At this point I’d like you to appreciate just how difficult the RL problem is. We get 100,800 numbers (210*160*3) and forward our policy network (which easily involves on order of a million parameters in <code>W1</code> and <code>W2</code>). Suppose that we decide to go UP. The game might respond that we get 0 reward this time step and gives us another 100,800 numbers for the next frame. We could repeat this process for hundred timesteps before we get any non-zero reward! E.g. suppose we finally get a +1. That’s great, but how can we tell what made that happen? Was it something we did just now? Or maybe 76 frames ago? Or maybe it had something to do with frame 10 and then frame 90? And how do we figure out which of the million knobs to change and how, in order to do better in the future? We call this the <em>credit assignment problem</em>. In the specific case of Pong we know that we get a +1 if the ball makes it past the opponent. The <em>true</em> cause is that we happened to bounce the ball on a good trajectory, but in fact we did so many frames ago - e.g. maybe about 20 in case of Pong, and every single action we did afterwards had zero effect on whether or not we end up getting the reward. In other words we’re faced with a very difficult problem and things are looking quite bleak.</p>

<p><strong>Supervised Learning</strong>. Before we dive into the Policy Gradients solution I’d like to remind you briefly about supervised learning because, as we’ll see, RL is very similar. Refer to the diagram below. In ordinary supervised learning we would feed an image to the network and get some probabilities, e.g. for two classes UP and DOWN. I’m showing log probabilities (-1.2, -0.36) for UP and DOWN instead of the raw probabilities (30% and 70% in this case) because we always optimize the log probability of the correct label (this makes math nicer, and is equivalent to optimizing the raw probability because log is monotonic). Now, in supervised learning we would have access to a label. For example, we might be told that the correct thing to do right now is to go UP (label 0). In an implementation we would enter gradient of 1.0 on the log probability of UP and run backprop to compute the gradient vector \(\nabla_{W} \log p(y=UP \mid x) \). This gradient would tell us how we should change every one of our million parameters to make the network slightly more likely to predict UP. For example, one of the million parameters in the network might have a gradient of -2.1, which means that if we were to increase that parameter by a small positive amount (e.g. <code>0.001</code>), the log probability of UP would decrease by <code>2.1 * 0.001</code> (decrease due to the negative sign). If we then did a parameter update then, yay, our network would now be slightly more likely to predict UP when it sees a very similar image in the future.</p>

<p><img src="http://karpathy.github.io/assets/rl/sl.png">
</p>

<p><strong>Policy Gradients</strong>. Okay, but what do we do if we do not have the correct label in the Reinforcement Learning setting? Here is the Policy Gradients solution (again refer to diagram below). Our policy network calculated probability of going UP as 30% (logprob -1.2) and DOWN as 70% (logprob -0.36). We will now sample an action from this distribution; E.g. suppose we sample DOWN, and we will execute it in the game. At this point notice one interesting fact: We could immediately fill in a gradient of 1.0 for DOWN as we did in supervised learning, and find the gradient vector that would encourage the network to be slightly more likely to do the DOWN action in the future. So we can immediately evaluate this gradient and that’s great, but the problem is that at least for now we do not yet know if going DOWN is good. But the critical point is that that’s okay, because we can simply wait a bit and see! For example in Pong we could wait until the end of the game, then take the reward we get (either +1 if we won or -1 if we lost), and enter that scalar as the gradient for the action we have taken (DOWN in this case). In the example below, going DOWN ended up to us losing the game (-1 reward). So if we fill in -1 for log probability of DOWN and do backprop we will find a gradient that <em>discourages</em> the network to take the DOWN action for that input in the future (and rightly so, since taking that action led to us losing the game).</p>

<p><img src="http://karpathy.github.io/assets/rl/rl.png">
</p>

<p>And that’s it: we have a stochastic policy that samples actions and then actions that happen to eventually lead to good outcomes get encouraged in the future, and actions taken that lead to bad outcomes get discouraged. Also, the reward does not even need to be +1 or -1 if we win the game eventually. It can be an arbitrary measure of some kind of eventual quality. For example if things turn out really well it could be 10.0, which we would then enter as the gradient instead of -1 to start off backprop. That’s the beauty of neural nets; Using them can feel like cheating: You’re allowed to have 1 million parameters embedded in 1 teraflop of compute and you can make it do arbitrary things with SGD. It shouldn’t work, but amusingly we live in a universe where it does.</p>

<p><strong>Training protocol.</strong> So here is how the training will work in detail. We will initialize the policy network with some <code>W1</code>, <code>W2</code> and play 100 games of Pong (we call these policy “rollouts”). Lets assume that each game is made up of 200 frames so in total we’ve made 20,000 decisions for going UP or DOWN and for each one of these we know the parameter gradient, which tells us how we should change the parameters if we wanted to encourage that decision in that state in the future. All that remains now is to label every decision we’ve made as good or bad. For example suppose we won 12 games and lost 88. We’ll take all 200*12 = 2400 decisions we made in the winning games and do a positive update (filling in a +1.0 in the gradient for the sampled action, doing backprop, and parameter update encouraging the actions we picked in all those states). And we’ll take the other 200*88 = 17600 decisions we made in the losing games and do a negative update (discouraging whatever we did). And… that’s it. The network will now become slightly more likely to repeat actions that worked, and slightly less likely to repeat actions that didn’t work. Now we play another 100 games with our new, slightly improved policy and rinse and repeat.</p>

<blockquote>
  <p>Policy Gradients: Run a policy for a while. See what actions led to high rewards. Increase their probability.</p>
</blockquote>

<div>
<p><img src="http://karpathy.github.io/assets/rl/episodes.png"></p><p>Cartoon diagram of 4 games. Each black circle is some game state (three example states are visualized on the bottom), and each arrow is a transition, annotated with the action that was sampled. In this case we won 2 games and lost 2 games. With Policy Gradients we would take the two games we won and slightly encourage every single action we made in that episode. Conversely, we would also take the two games we lost and slightly discourage every single action we made in that episode.</p>
</div>

<p>If you think through this process you’ll start to find a few funny properties. For example what if we made a good action in frame 50 (bouncing the ball back correctly), but then missed the ball in frame 150? If every single action is now labeled as bad (because we lost), wouldn’t that discourage the correct bounce on frame 50? You’re right - it would. However, when you consider the process over thousands/millions of games, then doing the first bounce correctly makes you slightly more likely to win down the road, so on average you’ll see more positive than negative updates for the correct bounce and your policy will end up doing the right thing.</p>

<p><strong>Update: December 9, 2016 - alternative view</strong>. In my explanation above I use the terms such as “fill in the gradient and backprop”, which I realize is a special kind of thinking if you’re used to writing your own backprop code, or using Torch where the gradients are explicit and open for tinkering. However, if you’re used to Theano or TensorFlow you might be a little perplexed because the code is oranized around specifying a loss function and the backprop is fully automatic and hard to tinker with. In this case, the following alternative view might be more intuitive. In vanilla supervised learning the objective is to maximize \( \sum_i \log p(y_i \mid x_i) \) where \(x_i, y_i \) are training examples (such as images and their labels). Policy gradients is exactly the same as supervised learning with two minor differences: 1) We don’t have the correct labels \(y_i\) so as a “fake label” we substitute the action we happened to sample from the policy when it saw \(x_i\), and 2) We modulate the loss for each example multiplicatively based on the eventual outcome, since we want to increase the log probability for actions that worked and decrease it for those that didn’t. So in summary our loss now looks like \( \sum_i A_i \log p(y_i \mid x_i) \), where \(y_i\) is the action we happened to sample and \(A_i\) is a number that we call an <strong>advantage</strong>. In the case of Pong, for example, \(A_i\) could be 1.0 if we eventually won in the episode that contained \(x_i\) and -1.0 if we lost. This will ensure that we maximize the log probability of actions that led to good outcome and minimize the log probability of those that didn’t. So reinforcement learning is exactly like supervised learning, but on a continuously changing dataset (the episodes), scaled by the advantage, and we only want to do one (or very few) updates based on each sampled dataset.</p>

<p><strong>More general advantage functions</strong>. I also promised a bit more discussion of the returns. So far we have judged the <em>goodness</em> of every individual action based on whether or not we win the game. In a more general RL setting we would receive some reward \(r_t\) at every time step. One common choice is to use a discounted reward, so the “eventual reward” in the diagram above would become \( R_t = \sum_{k=0}^{\infty} \gamma^k r_{t+k} \), where \(\gamma\) is a number between 0 and 1 called a discount factor (e.g. 0.99). The expression states that the strength with which we encourage a sampled action is the weighted sum of all rewards afterwards, but later rewards are exponentially less important. In practice it can can also be important to normalize these. For example, suppose we compute \(R_t\) for all of the 20,000 actions in the batch of 100 Pong game rollouts above. One good idea is to “standardize” these returns (e.g. subtract mean, divide by standard deviation) before we plug them into backprop. This way we’re always encouraging and discouraging roughly half of the performed actions. Mathematically you can also interpret these tricks as a way of controlling the variance of the policy gradient estimator. A more in-depth exploration can be found <a href="http://arxiv.org/abs/1506.02438">here</a>.</p>

<p><strong>Deriving Policy Gradients</strong>. I’d like to also give a sketch of where Policy Gradients come from mathematically. Policy Gradients are a special case of a more general <em>score function gradient estimator</em>. The general case is that when we have an expression of the form \(E_{x \sim p(x \mid \theta)} [f(x)] \) - i.e. the expectation of some scalar valued score function \(f(x)\) under some probability distribution \(p(x;\theta)\) parameterized by some \(\theta\). Hint hint, \(f(x)\) will become our reward function (or advantage function more generally) and \(p(x)\) will be our policy network, which is really a model for \(p(a \mid I)\), giving a distribution over actions for any image \(I\). Then we are interested in finding how we should shift the distribution (through its parameters \(\theta\)) to increase the scores of its samples, as judged by \(f\) (i.e. how do we change the network’s parameters so that action samples get higher rewards). We have that:</p>

\[\begin{align}
\nabla_{\theta} E_x[f(x)] &amp;= \nabla_{\theta} \sum_x p(x) f(x) &amp; \text{definition of expectation} \\
&amp; = \sum_x \nabla_{\theta} p(x) f(x) &amp; \text{swap sum and gradient} \\
&amp; = \sum_x p(x) \frac{\nabla_{\theta} p(x)}{p(x)} f(x) &amp; \text{both multiply and divide by } p(x) \\
&amp; = \sum_x p(x) \nabla_{\theta} \log p(x) f(x) &amp; \text{use the fact that } \nabla_{\theta} \log(z) = \frac{1}{z} \nabla_{\theta} z \\
&amp; = E_x[f(x) \nabla_{\theta} \log p(x) ] &amp; \text{definition of expectation}
\end{align}\]

<p>To put this in English, we have some distribution \(p(x;\theta)\) (I used shorthand \(p(x)\) to reduce clutter) that we can sample from (e.g. this could be a gaussian). For each sample we can also evaluate the score function \(f\) which takes the sample and gives us some scalar-valued score. This equation is telling us how we should shift the distribution (through its parameters \(\theta\)) if we wanted its samples to achieve higher scores, as judged by \(f\). In particular, it says that look: draw some samples \(x\), evaluate their scores \(f(x)\), and for each \(x\) also evaluate the second term \( \nabla_{\theta} \log p(x;\theta) \). What is this second term? It’s a vector - the gradient that’s giving us the direction in the parameter space that would lead to increase of the probability assigned to an \(x\). In other words if we were to nudge \(\theta\) in the direction of \( \nabla_{\theta} \log p(x;\theta) \) we would see the new probability assigned to some \(x\) slightly increase. If you look back at the formula, it’s telling us that we should take this direction and multiply onto it the scalar-valued score \(f(x)\). This will make it so that samples that have a higher score will “tug” on the probability density stronger than the samples that have lower score, so if we were to do an update based on several samples from \(p\) the probability density would shift around in the direction of higher scores, making highly-scoring samples more likely.</p>

<div>
<p><img src="http://karpathy.github.io/assets/rl/pg.png"></p><p>
	A visualization of the score function gradient estimator. <b>Left</b>: A gaussian distribution and a few samples from it (blue dots). On each blue dot we also plot the gradient of the log probability with respect to the gaussian's mean parameter. The arrow indicates the direction in which the mean of the distribution should be nudged to increase the probability of that sample. <b>Middle</b>: Overlay of some score function giving -1 everywhere except +1 in some small regions (note this can be an arbitrary and not necessarily differentiable scalar-valued function). The arrows are now color coded because due to the multiplication in the update we are going to average up all the green arrows, and the <i>negative</i> of the red arrows. <b>Right</b>: after parameter update, the green arrows and the reversed red arrows nudge us to left and towards the bottom. Samples from this distribution will now have a higher expected score, as desired.
</p>
</div>

<p>I hope the connection to RL is clear. Our policy network gives us samples of actions, and some of them work better than others (as judged by the advantage function). This little piece of math is telling us that the way to change the policy’s parameters is to do some rollouts, take the gradient of the sampled actions, multiply it by the score and add everything, which is what we’ve done above. For a more thorough derivation and discussion I recommend <a href="https://www.youtube.com/watch?v=oPGVsoBonLM">John Schulman’s lecture</a>.</p>

<p><strong>Learning</strong>. Alright, we’ve developed the intuition for policy gradients and saw a sketch of their derivation. I implemented the whole approach in a <a href="https://gist.github.com/karpathy/a4166c7fe253700972fcbc77e4ea32c5">130-line Python script</a>, which uses <a href="https://gym.openai.com/">OpenAI Gym</a>’s ATARI 2600 Pong. I trained a 2-layer policy network with 200 hidden layer units using RMSProp on batches of 10 episodes (each episode is a few dozen games, because the games go up to score of 21 for either player). I did not tune the hyperparameters too much and ran the experiment on my (slow) Macbook, but after training for 3 nights I ended up with a policy that is slightly better than the AI player. The total number of episodes was approximately 8,000 so the algorithm played roughly 200,000 Pong games (quite a lot isn’t it!) and made a total of ~800 updates. I’m told by friends that if you train on GPU with ConvNets for a few days you can beat the AI player more often, and if you also optimize hyperparameters carefully you can also consistently dominate the AI player (i.e. win every single game). However, I didn’t spend too much time computing or tweaking, so instead we end up with a Pong AI that illustrates the main ideas and works quite well:</p>

<div>
<iframe width="420" height="315" src="https://www.youtube.com/embed/YOW8m2YGtRg?autoplay=1&amp;loop=1&amp;rel=0&amp;showinfo=0&amp;playlist=YOW8m2YGtRg" frameborder="0" allowfullscreen=""></iframe>
<p>
The learned agent (in green, right) facing off with the hard-coded AI opponent (left).
</p></div>

<p><strong>Learned weights</strong>. We can also take a look at the learned weights. Due to preprocessing every one of our inputs is an 80x80 difference image (current frame minus last frame). We can now take every row of <code>W1</code>, stretch them out to 80x80 and visualize. Below is a collection of 40 (out of 200) neurons in a grid. White pixels are positive weights and black pixels are negative weights. Notice that several neurons are tuned to particular traces of bouncing ball, encoded with alternating black and white along the line. The ball can only be at a single spot, so these neurons are multitasking and will “fire” for multiple locations of the ball along that line. The alternating black and white is interesting because as the ball travels along the trace, the neuron’s activity will fluctuate as a sine wave and due to the ReLU it would “fire” at discrete, separated positions along the trace. There’s a bit of noise in the images, which I assume would have been mitigated if I used L2 regularization.</p>

<p><img src="http://karpathy.github.io/assets/rl/weights.png">
</p>

<h3 id="what-isnt-happening">What isn’t happening</h3>

<p>So there you have it - we learned to play Pong from from raw pixels with Policy Gradients and it works quite well. The approach is a fancy form of guess-and-check, where the “guess” refers to sampling rollouts from our current policy, and the “check” refers to encouraging actions that lead to good outcomes. Modulo some details, this represents the state of the art in how we currently approach reinforcement learning problems. Its impressive that we can learn these behaviors, but if you understood the algorithm intuitively and you know how it works you should be at least a bit disappointed. In particular, how does it not work?</p>

<p>Compare that to how a human might learn to play Pong. You show them the game and say something along the lines of “You’re in control of a paddle and you can move it up and down, and your task is to bounce the ball past the other player controlled by AI”, and you’re set and ready to go. Notice some of the differences:</p>

<ul>
  <li>In practical settings we usually communicate the task in some manner (e.g. English above), but in a standard RL problem you assume an arbitrary reward function that you have to discover through environment interactions. It can be argued that if a human went into game of Pong but without knowing anything about the reward function (indeed, especially if the reward function was some static but random function), the human would have a lot of difficulty learning what to do but Policy Gradients would be indifferent, and likely work much better. Similarly, if we took the frames and permuted the pixels randomly then humans would likely fail, but our Policy Gradient solution could not even tell the difference (if it’s using a fully connected network as done here).</li>
  <li>A human brings in a huge amount of prior knowledge, such as intuitive physics (the ball bounces, it’s unlikely to teleport, it’s unlikely to suddenly stop, it maintains a constant velocity, etc.), and intuitive psychology (the AI opponent “wants” to win, is likely following an obvious strategy of moving towards the ball, etc.). You also understand the concept of being “in control” of a paddle, and that it responds to your UP/DOWN key commands. In contrast, our algorithms start from scratch which is simultaneously impressive (because it works) and depressing (because we lack concrete ideas for how not to).</li>
  <li>Policy Gradients are a <em>brute force</em> solution, where the correct actions are eventually discovered and internalized into a policy. Humans build a rich, abstract model and plan within it. In Pong, I can reason that the opponent is quite slow so it might be a good strategy to bounce the ball with high vertical velocity, which would cause the opponent to not catch it in time. However, it also feels as though we also eventually “internalize” good solutions into what feels more like a reactive muscle memory policy. For example if you’re learning a new motor task (e.g. driving a car with stick shift?) you often feel yourself thinking a lot in the beginning but eventually the task becomes automatic and mindless.</li>
  <li>Policy Gradients have to actually experience a positive reward, and experience it very often in order to eventually and slowly shift the policy parameters towards repeating moves that give high rewards. With our abstract model, humans can figure out what is likely to give rewards without ever actually experiencing the rewarding or unrewarding transition. I don’t have to actually experience crashing my car into a wall a few hundred times before I slowly start avoiding to do so.</li>
</ul>

<div>
<p><img src="http://karpathy.github.io/assets/rl/montezuma.png" height="250">
</p>
<p><img src="http://karpathy.github.io/assets/rl/frostbite.jpg" height="250">
</p>
<p><b>Left:</b> Montezuma's Revenge: a difficult game for our RL algorithms. The player must jump down, climb up, get the key, and open the door. A human understands that acquiring a key is useful. The computer samples billions of random moves and 99% of the time falls to its death or gets killed by the monster. In other words it's hard to "stumble into" the rewarding situation. <b>Right:</b> Another difficult game called Frostbite, where a human understands that things move, some things are good to touch, some things are bad to touch, and the goal is to build the igloo brick by brick. A good analysis of this game and a discussion of differences between the human and computer approach can be found in <a href="https://arxiv.org/abs/1604.00289">Building Machines That Learn and Think Like People</a>.</p>
</div>

<p>I’d like to also emphasize the point that, conversely, there are many games where Policy Gradients would quite easily defeat a human. In particular, anything with frequent reward signals that requires precise play, fast reflexes, and not too much long-term planning would be ideal, as these short-term correlations between rewards and actions can be easily “noticed” by the approach, and the execution meticulously perfected by the policy. You can see hints of this already happening in our Pong agent: it develops a strategy where it waits for the ball and then rapidly dashes to catch it just at the edge, which launches it quickly and with high vertical velocity. The agent scores several points in a row repeating this strategy. There are many ATARI games where Deep Q Learning destroys human baseline performance in this fashion - e.g. Pinball, Breakout, etc.</p>

<p>In conclusion, once you understand the “trick” by which these algorithms work you can reason through their strengths and weaknesses. In particular, we are nowhere near humans in building abstract, rich representations of games that we can plan within and use for rapid learning. One day a computer will look at an array of pixels and notice a key, a door, and think to itself that it is probably a good idea to pick up the key and reach the door. For now there is nothing anywhere close to this, and trying to get there is an active area of research.</p>

<h3 id="non-differentiable-computation-in-neural-networks">Non-differentiable computation in Neural Networks</h3>

<p>I’d like to mention one more interesting application of Policy Gradients unrelated to games: It allows us to design and train neural networks with components that perform (or interact with) non-differentiable computation. The idea was first introduced in <a href="http://www-anw.cs.umass.edu/~barto/courses/cs687/williams92simple.pdf">Williams 1992</a> and more recently popularized by <a href="http://arxiv.org/abs/1406.6247">Recurrent Models of Visual Attention</a> under the name “hard attention”, in the context of a model that processed an image with a sequence of low-resolution foveal glances (inspired by our own human eyes). In particular, at every iteration an RNN would receive a small piece of the image and sample a location to look at next. For example the RNN might look at position (5,30), receive a small piece of the image, then decide to look at (24, 50), etc. The problem with this idea is that there a piece of network that produces a distribution of where to look next and then samples from it. Unfortunately, this operation is non-differentiable because, intuitively, we don’t know what would have happened if we sampled a different location. More generally, consider a neural network from some inputs to outputs:</p>

<p><img src="http://karpathy.github.io/assets/rl/nondiff1.png" width="600">
</p>

<p>Notice that most arrows (in blue) are differentiable as normal, but some of the representation transformations could optionally also include a non-differentiable sampling operation (in red). We can backprop through the blue arrows just fine, but the red arrow represents a dependency that we cannot backprop through.</p>

<p>Policy gradients to the rescue! We’ll think about the part of the network that does the sampling as a small stochastic policy embedded in the wider network. Therefore, during training we will produce several samples (indicated by the branches below), and then we’ll encourage samples that eventually led to good outcomes (in this case for example measured by the loss at the end). In other words we will train the parameters involved in the blue arrows with backprop as usual, but the parameters involved with the red arrow will now be updated independently of the backward pass using policy gradients, encouraging samples that led to low loss. This idea was also recently formalized nicely in <a href="http://arxiv.org/abs/1506.05254">Gradient Estimation Using Stochastic Computation Graphs</a>.</p>

<p><img src="http://karpathy.github.io/assets/rl/nondiff2.png" width="600">
</p>

<p><strong>Trainable Memory I/O</strong>. You’ll also find this idea in many other papers. For example, a <a href="https://arxiv.org/abs/1410.5401">Neural Turing Machine</a> has a memory tape that they it read and write from. To do a write operation one would like to execute something like <code>m[i] = x</code>, where <code>i</code> and <code>x</code> are predicted by an RNN controller network. However, this operation is non-differentiable because there is no signal telling us what would have happened to the loss if we were to write to a different location <code>j != i</code>. Therefore, the NTM has to do <em>soft</em> read and write operations. It predicts an attention distribution <code>a</code> (with elements between 0 and 1 and summing to 1, and peaky around the index we’d like to write to), and then doing <code>for all i: m[i] = a[i]*x</code>. This is now differentiable, but we have to pay a heavy computational price because we have to touch every single memory cell just to write to one position. Imagine if every assignment in our computers had to touch the entire RAM!</p>

<p>However, we can use policy gradients to circumvent this problem (in theory), as done in <a href="http://arxiv.org/abs/1505.00521">RL-NTM</a>. We still predict an attention distribution <code>a</code>, but instead of doing the soft write we sample locations to write to: <code>i = sample(a); m[i] = x</code>. During training we would do this for a small batch of <code>i</code>, and in the end make whatever branch worked best more likely. The large computational advantage is that we now only have to read/write at a single location at test time. However, as pointed out in the paper this strategy is very difficult to get working because one must accidentally stumble by working algorithms through sampling. The current consensus is that PG works well only in settings where there are a few discrete choices so that one is not hopelessly sampling through huge search spaces.</p>

<p>However, with Policy Gradients and in cases where a lot of data/compute is available we can in principle dream big - for instance we can design neural networks that learn to interact with large, non-differentiable modules such as Latex compilers (e.g. if you’d like char-rnn to generate latex that compiles), or a SLAM system, or LQR solvers, or something. Or, for example, a superintelligence might want to learn to interact with the internet over TCP/IP (which is sadly non-differentiable) to access vital information needed to take over the world. That’s a great example.</p>

<h3 id="conclusions">Conclusions</h3>

<p>We saw that Policy Gradients are a powerful, general algorithm and as an example we trained an ATARI Pong agent from raw pixels, from scratch, in <a href="https://gist.github.com/karpathy/a4166c7fe253700972fcbc77e4ea32c5">130 lines of Python</a>. More generally the same algorithm can be used to train agents for arbitrary games and one day hopefully on many valuable real-world control problems. I wanted to add a few more notes in closing:</p>

<p><strong>On advancing AI</strong>. We saw that the algorithm works through a brute-force search where you jitter around randomly at first and must accidentally stumble into rewarding situations at least once, and ideally often and repeatedly before the policy distribution shifts its parameters to repeat the responsible actions. We also saw that humans approach these problems very differently, in what feels more like rapid abstract model building - something we have barely even scratched the surface of in research (although many people are trying). Since these abstract models are very difficult (if not impossible) to explicitly annotate, this is also why there is so much interest recently in (unsupervised) generative models and program induction.</p>

<p><strong>On use in complex robotics settings</strong>. The algorithm does not scale naively to settings where huge amounts of exploration are difficult to obtain. For instance, in robotic settings one might have a single (or few) robots, interacting with the world in real time. This prohibits naive applications of the algorithm as I presented it in this post. One related line of work intended to mitigate this problem is <a href="http://jmlr.org/proceedings/papers/v32/silver14.pdf">deterministic policy gradients</a> - instead of requiring samples from a stochastic policy and encouraging the ones that get higher scores, the approach uses a deterministic policy and gets the gradient information directly from a second network (called a <em>critic</em>) that models the score function. This approach can in principle be much more efficient in settings with very high-dimensional actions where sampling actions provides poor coverage, but so far seems empirically slightly finicky to get working. Another related approach is to scale up robotics, as we’re starting to see with <a href="http://googleresearch.blogspot.com/2016/03/deep-learning-for-robots-learning-from.html">Google’s robot arm farm</a>, or perhaps even <a href="http://qz.com/694520/tesla-has-780-million-miles-of-driving-data-and-adds-another-million-every-10-hours/">Tesla’s Model S + Autopilot</a>.</p>

<p>There is also a line of work that tries to make the search process less hopeless by adding additional supervision. In many practical cases, for instance, one can obtain expert trajectories from a human. For example <a href="https://deepmind.com/alpha-go">AlphaGo</a> first uses supervised learning to predict human moves from expert Go games and the resulting human mimicking policy is later finetuned with policy gradients on the “real” objective of winning the game. In some cases one might have fewer expert trajectories (e.g. from <a href="https://www.youtube.com/watch?v=kZlg0QvKkQQ">robot teleoperation</a>) and there are techniques for taking advantage of this data under the umbrella of <a href="http://ai.stanford.edu/~pabbeel//thesis/thesis.pdf">apprenticeship learning</a>. Finally, if no supervised data is provided by humans it can also be in some cases computed with expensive optimization techniques, e.g. by <a href="http://people.eecs.berkeley.edu/~igor.mordatch/policy/index.html">trajectory optimization</a> in a known dynamics model (such as \(F=ma\) in a physical simulator), or in cases where one learns an approximate local dynamics model (as seen in very promising framework of <a href="http://arxiv.org/abs/1504.00702">Guided Policy Search</a>).</p>

<p><strong>On using PG in practice</strong>. As a last note, I’d like to do something I wish I had done in my RNN blog post. I think I may have given the impression that RNNs are magic and automatically do arbitrary sequential problems. The truth is that getting these models to work can be tricky, requires care and expertise, and in many cases could also be an overkill, where simpler methods could get you 90%+ of the way there. The same goes for Policy Gradients. They are not automatic: You need a lot of samples, it trains forever, it is difficult to debug when it doesn’t work. One should always try a BB gun before reaching for the Bazooka. In the case of Reinforcement Learning for example, one strong baseline that should always be tried first is the <a href="https://en.wikipedia.org/wiki/Cross-entropy_method">cross-entropy method (CEM)</a>, a simple stochastic hill-climbing “guess and check” approach inspired loosely by evolution. And if you insist on trying out Policy Gradients for your problem make sure you pay close attention to the <em>tricks</em> section in papers, start simple first, and use a variation of PG called <a href="https://arxiv.org/abs/1502.05477">TRPO</a>, which almost always works better and more consistently than vanilla PG <a href="http://arxiv.org/abs/1604.06778">in practice</a>. The core idea is to avoid parameter updates that change your policy too much, as enforced by a constraint on the KL divergence between the distributions predicted by the old and the new policy on a batch of data (instead of conjugate gradients the simplest instantiation of this idea could be implemented by doing a line search and checking the KL along the way).</p>

<p>And that’s it! I hope I gave you a sense of where we are with Reinforcement Learning, what the challenges are, and if you’re eager to help advance RL I invite you to do so within our <a href="https://gym.openai.com/">OpenAI Gym</a> :) Until next time!</p>

  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I believe 6502 instruction set is a good first assembly language (225 pts)]]></title>
            <link>https://nemanjatrifunovic.substack.com/p/6502-is-a-good-starting-point-for</link>
            <guid>42957823</guid>
            <pubDate>Thu, 06 Feb 2025 01:28:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nemanjatrifunovic.substack.com/p/6502-is-a-good-starting-point-for">https://nemanjatrifunovic.substack.com/p/6502-is-a-good-starting-point-for</a>, See on <a href="https://news.ycombinator.com/item?id=42957823">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p>Deciding where to start is one of the hardest things about learning assembly programming. Unlike high-level languages, assembly is tightly connected to the hardware and deciding which CPU to use is an important first step.</p><p>Here, I will explain why I believe 6502 is a good platform to start learning assembly. </p><p>To be clear, I am not saying 6502 assembly itself is a particularly useful skill nowadays, nor that it is particularly pleasant for writing real-life applications. In fact, I do not believe you should spend too much time with 6502 unless you are interested in retro programming as such.</p><p>My arguments for starting with 6502 are in a nutshell:</p><ul><li><p>6502 is simple; you can quickly learn assembly programming basic concepts with it;</p></li><li><p>6502 is real; there are plenty devices, emulators, books to help you learn.</p></li></ul><p>To learn basic assembly programming concept, having a simple system is more important than having a powerful one.</p><p><span>6502 contains only 6 registers: one accumulator, two index registers, a status register, a stack register and a program counter which is the only 16-bit register on 6502. Modern x86-x64 CPUs have so many registers that counting them is </span><a href="https://blog.yossarian.net/2020/11/30/How-many-registers-does-an-x86-64-cpu-have" rel="nofollow ugc noopener">almost a research project</a><span>. Small number of registers is constraining for real-life applications but is helpful for understanding what a register is and how it works.</span></p><p><span>The original 6502 instruction set contains </span><a href="http://www.6502.org/users/obelisk/6502/instructions.html" rel="nofollow ugc noopener">only 56 instructions</a><span>. Again, </span><a href="https://stefanheule.com/blog/how-many-x86-64-instructions-are-there-anyway/" rel="nofollow ugc noopener">counting x86-x64 instructions is a non-trivial task</a><span> and even modern RISC instructions sets like ARM are </span><a href="https://developer.arm.com/documentation/ddi0596/2021-03/Base-Instructions?lang=en" rel="nofollow ugc noopener">far from being small and simple</a><span>. Yet, with 6502 we can quickly learn about major instruction types, including loading/storing, logical and arithmetic, as well as branching. All of them are present in the modern CPUs in some form.</span></p><p>6502 was introduced in mid-1970 by MOS technology, as a cheap simplified version of Motorola’s 6800 CPU which was previously developed by the same team. The processor quickly became extremely popular and was used in some well-known microcomputers, like Apple II, Commodore VIC 20, Commodore 64 and BBC micro. It is easy to find emulators for all these machines, and even modern re-creations of some of them. Furthermore, successors of 6502 are still being produced at the time of this writing, and there are brand new machines that run it, like Neo6502 by Olimex.</p><p><span>There is a plenty of learning material available for free on the internet: books, videos, tutorials. Most of these resources can be found and accessed via </span><a href="http://www.6502.org/" rel="nofollow ugc noopener">6502.org</a><span> site.</span></p><p><span>With all that said, if you want to spend only half an hour learning 6502, the place to visit is </span><a href="https://skilldrick.github.io/easy6502/" rel="nofollow ugc noopener">Easy 6502</a><span> ebook by Nick Morgan. The web page contains not only text and images, but a 6502 assembler and simulator written in JavaScript, so you can actually write some simple 6502 assembly code on the spot!</span></p><p><span>Another fascinating resource I encourage you to check out is </span><a href="http://visual6502.org/" rel="nofollow ugc noopener">Visual6502.org</a><span>. Not so much as a tool for learning assembly programming, but an illustration of the simplicity of 6502. </span></p><p>Of course, not everyone will agree that 6502 is a good choice for starting assembly programming. Some other opinions I have heard include:</p><ul><li><p>Various imaginary CPUs created for teaching purposes; admittedly, some of them have very clean and “perfect” instruction set - in fact I was taught one in high school. However, even the most popular of them lack the wealth of resources for learning and the community of 6502</p></li><li><p><span>other “retro” CPUs like Z80, 6809 or 68000. They are all good choices, and in my opinion all three mentioned above are better for serious programming than 6502. But if we are talking about learning basic concepts, the simplicity of 6502 wins. As much as I like Z80 which powered my first computer, it has many more registers than 6502 (and even an “</span><a href="https://www.righto.com/2014/10/how-z80s-registers-are-implemented-down.html" rel="nofollow ugc noopener">alternate</a><span>” set of registers) and is not as easy to get started with.</span></p></li><li><p><span>modern RISC architectures such as ARM, MIPS or RISC-V. At some point, a serious assembly programmer should definitely learn some of them. However, they are not ideal to start with: the “S” in RISC stands for “simple”, but the simplicity is more about internal implementation of the chips than the instruction set. Modern microprocessors are almost exclusively programmed with high-level languages and the direct usage of assembly instruction is not high on the list of priorities for CPU designers nowadays. To illustrate this point, loading a 64-bit constant to a register on ARM64 </span><a href="https://dinfuehr.github.io/blog/encoding-of-immediate-values-on-aarch64/" rel="nofollow ugc noopener">can take 4 instructions with bit shifting</a><span>. Loading a constant to a register with 6502 is trivial in comparison.</span></p></li><li><p>x86-x64. This is arguably the most popular instruction set on modern desktop and server computers, although ARM is catching up. In some respects, it is easier to code than with ARM, given the wealth of instructions that are not constrained by being 32-bit in size and can have variable number of operands; or at least that’s my impression after starting with Z80 which is compatible with x86 predecessor Intel 8080. However, it is still really complex for beginners and four decades of history does not make it any simpler. </p></li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Human Brain May Contain as Much as a Spoon's Worth of Microplastics (224 pts)]]></title>
            <link>https://www.smithsonianmag.com/smart-news/the-human-brain-may-contain-as-much-as-a-spoons-worth-of-microplastics-new-research-suggests-180985995/</link>
            <guid>42957726</guid>
            <pubDate>Thu, 06 Feb 2025 01:13:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.smithsonianmag.com/smart-news/the-human-brain-may-contain-as-much-as-a-spoons-worth-of-microplastics-new-research-suggests-180985995/">https://www.smithsonianmag.com/smart-news/the-human-brain-may-contain-as-much-as-a-spoons-worth-of-microplastics-new-research-suggests-180985995/</a>, See on <a href="https://news.ycombinator.com/item?id=42957726">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-article-body="">
        
          <figure>
            <img src="https://th-thumbnailer.cdn-si-edu.com/0ghUGQwb-K5ZMW6kflQGRUfc3h0=/1000x750/filters:no_upscale():focal(1920x1097:1921x1098)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/3a/9d/3a9d4ead-68d3-4254-bbc5-ae88fb9ca70e/microplastics-in-lab.png" alt="Researcher wearing a lab coat holding up a vial of samples" itemprop="image">
            <figcaption>
              
                Researchers found higher levels of microplastics in brain tissue than in liver and kidney tissue.
              <span>UNM Health</span>
            </figcaption>
          </figure>
        

        

        <p>The human brain may contain up to a spoon’s worth of tiny plastic shards—not a spoonful, but the same weight (about seven grams) as a plastic spoon, according to new findings published Monday in the journal <em><a href="https://www.nature.com/articles/s41591-024-03453-1"><em>Nature Medicine</em></a></em>.</p>

<p>Researchers detected these “almost unbelievable” levels of microplastics and nanoplastics in the brains of human cadavers, says study co-author <a href="https://www.neuro.duke.edu/profile/andrew-bradley-west">Andrew West</a>, a neuroscientist at Duke University, to <a href="https://www.sciencenews.org/article/plastic-human-brains-microplastics"><em>Science</em><em> </em><em>News</em></a>’ Laura Sanders. “In fact, I didn’t believe it until I saw all the data.”</p>

<p>Based on their analysis, the amount of microplastics in the human brain appears to be increasing over time: Concentrations rose by roughly 50 percent between 2016 and 2024.</p>

<p>The researchers also found much higher levels of microplastics in brain tissue than in liver and kidney tissue. And microplastic concentrations were also higher in the brains of deceased patients who had been diagnosed with <a href="https://www.smithsonianmag.com/smart-news/us-dementia-cases-are-poised-to-rise-to-one-million-each-year-by-2060-according-to-new-projections-180985831/">dementia</a> compared to the brains of deceased individuals without dementia.</p>

<p>Importantly, the study finds only a correlation between high levels of microplastics in the brain and dementia—it does not establish a causal relationship. It could be, for instance, that changes resulting from dementia make it easier for microplastics to accumulate in the brain. However, the researchers say their findings are troubling nonetheless.</p>

<p>“I have yet to encounter a single human being who says, ‘There’s a bunch of plastic in my brain and I’m totally cool with that,’” says study co-author <a href="https://hsc.unm.edu/directory/campen-matthew-j.html">Matthew Campen</a>, a toxicologist at the University of New Mexico, in a <a href="https://hsc.unm.edu/news/2025/02/hsc-newsroom-post-microplastics-human-brains.html">statement</a>.</p>

<p>Microplastics and nanoplastics are miniscule plastic fragments that result from the breakdown of everyday objects like packaging, containers, clothing, tires and more. These small particles have spread all over the planet, from <a href="https://www.smithsonianmag.com/smart-news/even-mount-everest-facing-microplastic-pollution-new-study-finds-180976389/">Mount Everest</a> to deep in the <a href="https://www.smithsonianmag.com/smart-news/study-shows-deepest-parts-ocean-are-polluted-plastic-180969049/">Mariana Trench</a>. They’ve also made their way into the human body, showing up in <a href="https://www.smithsonianmag.com/smart-news/microplastics-detected-in-human-blood-180979826/">blood</a>, <a href="https://www.smithsonianmag.com/smart-news/study-shows-infant-poop-is-riddled-with-microplastics-180978770/">baby poop</a>, <a href="https://www.theguardian.com/environment/2020/dec/22/microplastics-revealed-in-placentas-unborn-babies">lungs</a> and <a href="https://www.theguardian.com/environment/2020/dec/22/microplastics-revealed-in-placentas-unborn-babies">placentas</a>.</p>

<p>In September 2024, these miniature pollutants were also discovered in the <a href="https://www.smithsonianmag.com/smart-news/scientists-find-microplastics-in-human-brain-tissue-above-the-nose-180985100/">human olfactory bulb</a>, a type of brain tissue that sits above the nose in the forebrain. At the time, researchers weren’t completely sure whether microplastics could migrate deeper into the brain.</p>

<p>The new paper suggests they can. First, researchers analyzed brain, kidney and liver tissue from patients who had died in 2016 and 2024. For broader context, they also studied brain tissue from patients who had died between 1997 and 2013. Some of the brains came from patients who had been diagnosed with dementia.</p>

<p>They found much higher levels of microplastics in the 2024 brain tissue, on average, than in the 2016 brain tissue, regardless of the patient’s age, sex, race, ethnicity or cause of death. Their findings suggest microplastic levels in the brain have grown by roughly 50 percent over the last eight years. This increase makes sense in the context of plastic production, which doubles every 10 to 15 years, reports the <a href="https://www.washingtonpost.com/climate-environment/2025/02/03/microplastics-human-brain-increase/"><em>Washington Post</em></a>’s Shannon Osaka.</p>

<p>“We think [the increase] is simply mirroring the environmental buildup and exposure,” Campen tells <a href="https://www.nationalgeographic.com/science/article/microplastic-human-brain-health?loggedin=true&amp;rnd=1738686119003"><em>National Geographic</em></a>’s Olivia Ferrari. “People are being exposed to ever-increasing levels of micro and nanoplastics.”</p>

<p>Microplastic levels were 7 to 30 times higher in the examined brain tissue than in the liver and kidney tissue.</p>

<p>Microplastic concentrations were also three to five times higher in the brains of patients with dementia, compared to cognitively normal brains. It’s not clear whether microplastics may cause or contribute to dementia, nor whether dementia-induced changes to the brain might allow more microplastics to enter.</p>

<p>More broadly, the potential health consequences of microplastics remain largely unknown. Some recent research, however, suggests they are likely harmful to the human body. A <a href="https://www.nejm.org/doi/full/10.1056/NEJMoa2309822">study</a> published in March 2024, for example, found that patients with higher concentrations of microplastics in their arteries were at a higher risk of heart attacks, stroke and death.</p>

<p>Now that microplastics have been found deep in the human brain, the next steps will be to explore what effects, if any, they are having on human health.</p>

<p>Future studies might also investigate how microplastics and nanoplastics are making their way into the brain in the first place, a feat that remains a mystery. Researchers are also curious about the unusual shapes of the plastic particles they found in the brain: thin, sharp shards, rather than the smooth, bead-like shapes they had expected.</p>

<p>“Somehow, these nanoplastics hijack their way through the body and get to the brain, crossing the blood-brain barrier,” Campen tells <a href="https://www.cnn.com/2025/02/03/health/plastics-inside-human-brain-wellness/index.html">CNN</a>’s Sandee LaMotte. “Plastics love fats, or lipids, so one theory is that plastics are hijacking their way with the fats we eat, which are then delivered to the organs that really like lipids—the brain is top among those.”</p>

<p>In the meantime, the world might want to consider “mitigation measures” to help minimize microplastic exposure, says <a href="https://www.uu.nl/staff/EEJkasteel">Emma Kasteel</a>, a neurotoxicologist at Utrecht University in the Netherlands who was not involved with the paper, to <em>National Geographic</em>.</p>

<p>“We don’t know that much about the health effects, but the fact is that [microplastics] are [in the brain] and they shouldn’t be there, and maybe that’s worrying enough,” she says.</p>

        

        

        
          
  <div>
      <h3>Get the latest stories in your inbox every weekday.</h3>
      
    </div>


        

        

        
          


  
    
      
    
  

  


        

        
        
        
        

        
          
            <section>
              <nav>Filed Under:
                
                  
                    <a href="https://www.smithsonianmag.com/tag/biology/">Biology</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/body/">Body</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/brain/">Brain</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/environment/">Environment</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/health/">Health</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/medicine/">Medicine</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/new-research/">New Research</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/plastic/">Plastic</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/pollution/">Pollution</a>
                  
                
              </nav>
            </section>
          
        

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What does it mean that MP3 is free? (160 pts)]]></title>
            <link>https://idiallo.com/blog/listen-mp3-is-free</link>
            <guid>42957517</guid>
            <pubDate>Thu, 06 Feb 2025 00:41:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://idiallo.com/blog/listen-mp3-is-free">https://idiallo.com/blog/listen-mp3-is-free</a>, See on <a href="https://news.ycombinator.com/item?id=42957517">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody" id="articleBody">
	

<p>The MP3 format, once the gold standard for digital audio files, is now free. The licensing and patents on MP3 encoders have expired, meaning you can now include them in your applications without paying royalties. For software developers and audio enthusiasts, this might seem like a big deal. But, surprisingly, almost no one noticed. Why? Because the world of technology has changed so drastically that MP3's significance has faded into the background.</p>

<p>I noticed the change because of <a href="https://idiallo.com/blog/mp3-is-free-september-2015">my habit of downloading Audacity</a>, the open-source audio editing software. For years, Audacity required users to download an external MP3 encoder, like LAME, because the MP3 format was proprietary. This extra step was a constant reminder of the legal and technical restrictions surrounding MP3. But now, that step is unnecessary. And yet, no one seems to care.  </p>

<p>The reality is that MP3, while still relevant in certain niche areas, has largely been eclipsed by a combination of faster internet speeds, changing software paradigms, and a shift away from dealing with files altogether.  </p>

<h2>Files? What Files?</h2>

<p>One of the biggest shifts in recent years has been the abstraction of what a file even is. Twenty years ago, the average computer user dealt with files constantly. Downloading, organizing, and moving them between devices. Music files were downloaded as MP3s and carefully sorted into folders. Today, most people interact with music through streaming platforms like Spotify, Apple Music, or YouTube. They don’t download files, nor do they think about what format their music is in.  </p>

<p>This is part of a broader trend where the cloud has replaced local storage for many users. We stream music and movies instead of downloading them. We work on Google Docs instead of saving Word files to our desktop. Files, for the general population, are becoming an invisible concept.  </p>

<h2>Internet Speeds Make File Sizes Invisible</h2>

<p>Back in the early 2000s, an MP3 file, typically around 3.5MB, was considered small. But downloading one still took time, minutes on a standard internet connection. File size mattered. A smaller file meant quicker downloads and less space used on your limited storage.  </p>

<p>Fast forward to today, and internet speeds have grown exponentially. A song in a more modern format like AAC or FLAC might be double or triple the size of an MP3, but who notices? You can stream a full album in lossless quality without buffering. Kids download gigabyte-sized games in minutes.  </p>

<p>The average person no longer pays attention to file sizes. Terms like megabyte or kilobyte, which were once part of everyday tech conversations, are now arcane to many users. When everything happens instantly, file size ceases to be a concern.</p>





<h2>What Does It Mean That MP3 Is Free?</h2>

<p>The expiration of MP3’s licensing fees is still a significant milestone, particularly for developers or those working in niche areas like archival or specialized audio tools. It means tools like Audacity can now integrate MP3 support without extra steps, and developers of new software can include MP3 compatibility freely.  </p>

<p>However, for the general population, this change is almost irrelevant. MP3 is no longer a bottleneck for audio distribution. Streaming platforms, cloud-based solutions, and better internet infrastructure have made the need for small, efficient file formats like MP3 far less critical.  </p>

<h2>The Changing Landscape</h2>

<p>The MP3’s journey from revolutionary to nearly forgotten reflects how technology evolves and reshapes user behavior. While it was once essential for making audio accessible in the early days of the internet, today it’s just one of many tools in the vast ecosystem of digital media.  </p>

<p>But even if most people didn’t notice that MP3 is now free, it’s worth pausing to appreciate its legacy. It’s a reminder of how far we’ve come, and how the things that once seemed indispensable can quietly fade into the background as the world changes around them.  </p>

<p>MP3 being free is a milestone worth noting, even if its relevance has diminished. After all, it’s not every day that a format that defined a generation of music lovers becomes a footnote in the history of technology.</p>

	<hr>



	
	</div></div>]]></description>
        </item>
    </channel>
</rss>