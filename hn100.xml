<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 15 Jul 2024 18:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[I'm not a fan of strlcpy(3) (130 pts)]]></title>
            <link>https://nrk.neocities.org/articles/not-a-fan-of-strlcpy</link>
            <guid>40967069</guid>
            <pubDate>Mon, 15 Jul 2024 12:03:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nrk.neocities.org/articles/not-a-fan-of-strlcpy">https://nrk.neocities.org/articles/not-a-fan-of-strlcpy</a>, See on <a href="https://news.ycombinator.com/item?id=40967069">Hacker News</a></p>
<div id="readability-page-1" class="page">


<p><ctime>03 Jun 2022</ctime></p>
<p><code>strlcpy(3)</code> is an OpenBSD function which is often hailed as a safer
replacement for <code>strcpy(3)</code> and/or <code>strncpy(3)</code>. One of the obvious issues with
strlcpy is that it's not safe if <code>src</code> isn't null-terminated. However, that's
not the reason I don't like strlcpy. In fact despite knowing this, I used to
think it was an okay function and better than the (thought of) alternative
<code>strncpy</code> (which doesn't null-terminate in case of truncation).</p>
<p>The reason why I'm not a fan of it is because I've recently revisited this
<a href="https://sourceware.org/legacy-ml/libc-alpha/2000-08/msg00053.html">old thread</a>
where Ulrich Drepper rejects the proposal to add strlcpy to glibc.
His reasoning was:</p>
<ul>
<li>strlcpy is inefficient (which is unarguably true).</li>
<li>Anyone who has thought about the problem for a single second wouldn't use strlcpy
(<a href="https://sourceware.org/legacy-ml/libc-alpha/2000-08/msg00061.html">paraphrased</a>).</li>
</ul>
<p>So I decided to spent a single second thinking about the problem and realized
that yup, there's no reason to be using strlcpy.</p>
<h2 id="what-exactly-is-the-problem">What exactly is the problem?<a href="#what-exactly-is-the-problem"><img src="https://nrk.neocities.org/assets/chain.svg"></a></h2>
<p>In order to understand why a solution isn't good or optimal, one first needs to
properly understand what the problem actually is. The problem we have in our
hands is that we're trying to copy a "c-string" or a "null-terminated string"
<sup><a id="info-src-0" href="#info-ref-0"><img src="https://nrk.neocities.org/assets/info.svg" width="12px"></a></sup>.</p>
<p>This problem can be divided into two main categories:</p>
<ol>
<li>Cases where truncation matters.</li>
<li>Cases where truncation doesn't matter.</li>
</ol>
<hr><div id="info-ref-0"><p><a href="#info-src-0"><img src="https://nrk.neocities.org/assets/info.svg"></a></p><p>Strictly speaking, the C standard <a href="https://port70.net/~nsz/c/c99/n1256.html#7.1.1">defines a string as</a>:</p>
<blockquote>
<p>A string is a contiguous sequence of characters terminated by and including
the first null character.</p>
</blockquote>
<p>So the term "null-terminated string" is redundant since if it isn't
null-terminated, it's not a string according to the C standard.</p>
</div><hr>
<h2 id="truncation-doesn-t-matter">Truncation doesn't matter<a href="#truncation-doesn-t-matter"><img src="https://nrk.neocities.org/assets/chain.svg"></a></h2>
<p>There are many cases where truncation doesn't matter. For example, if we're
trying to display the result on some statusbar which can only hold, let's say 64
bytes, then not only is the <code>src</code> string getting truncated is not an issue,
it's actually wanted since it makes no sense to copy more than that.</p>
<p>So assuming <code>buf</code> is a fixed length array, <code>char buf[64]</code>; an strlcpy call would
look like the following:</p>
<pre><code>strlcpy(buf, src, sizeof buf);
</code></pre>
<p>If you spend a single second thinking about what you've just done, you'd realize
that this is a horribly inefficient solution to the problem at hand. Since
strlcpy returns <code>strlen(src)</code>, and <code>src</code> might very well be let's say a
thousands byte long. By using strlcpy, you are going though all of those bytes
in a O(n) strlen call for absolutely no reason when all you really cared about
is the first 64 bytes of <code>src</code>.</p>
<p>Similarly, <code>strncpy(3)</code> is also not a good solution in this case because:</p>
<ol start="0">
<li>It doesn't null-terminate in case of truncation.</li>
<li>It unnecessarily pads the rest of <code>dst</code> with 0 in case <code>src</code> length happens
to be less than <code>dst</code> length.</li>
</ol>
<p>A much better solution here is using <code>memccpy(3)</code> instead, which will only scan
the first 64 bytes of <code>src</code> at most and nothing past that:</p>
<pre><code>if (memccpy(buf, src, '\0', sizeof buf) == NULL)
    buf[sizeof buf - 1] = '\0'; /* truncation occured, null-terminate manually. */
</code></pre>
<p>And in case you're worried about this being two-liners as opposed to a
one-liner strlcpy call (which is a valid criticism, as that can open up room
for making mistake), then you can (and should) simply turn this two liner into
a wrapper function. Optionally giving it a <code>_trunc</code> prefix to make it clear
that truncation is desired here.</p>
<pre><code>mystrcpy_trunc(buf, src, sizeof buf);
</code></pre>
<p>Not only is this more efficient, it makes it clear that truncation is desired
here just by looking at the function name. Whereas in the case of an unchecked
<code>strlcpy</code> call it's not immediately obvious weather truncation is desired or
the programmer forgot to check for it.</p>
<!-- 	void -->
<!-- 	my_strncpy(char *d, const char *s, size_t n) -->
<!-- 	{ -->
<!-- 		if (memccpy(d, s, '\0', n) == NULL) -->
<!-- 			d[n - 1] = '\0'; -->
<!-- 	} -->
<h2 id="truncation-matters">Truncation matters<a href="#truncation-matters"><img src="https://nrk.neocities.org/assets/chain.svg"></a></h2>
<p>In cases where truncation matters, for example file-path, url etc, you simply
<strong>SHOULD NOT</strong> be using a fixed size buffer. You have to be able to do dynamic
allocation and grow the buffer as needed.</p>
<p>The most simplest way of achieving this is just using <code>strdup(3)</code>, which will do
the allocation for us:</p>
<pre><code>char *s = strdup(src);
if (s == NULL)
    return ERROR;
/* do stuff with s */
free(s); /* don't forget to free */
</code></pre>
<p>And in case you already have an allocated buffer and you'd like to reuse it, the
following is what an strlcpy usage would looks like; assuming <code>char *dbuf</code> is a
buffer that's been allocated <code>size_t dbuflen</code> bytes via <code>malloc(3)</code>:</p>
<pre><code>size_t srclen = strlcpy(dbuf, src, dbuflen) + 1;
if (srclen &gt; dbuflen) {
    char *tmp = realloc(dbuf, srclen);
    if (tmp == NULL) {
        free(dbuf);
        return ERROR;
    }
    dbuf = tmp;
    dbuflen = srclen;
    strlcpy(dbuf, src, dbuflen);
}
</code></pre>
<p>Let's ignore just how inefficient this is for the moment, instead I'd like to
point out just how schizo this entire logic is:</p>
<ul>
<li>"Hmm yes, let me just start copying this string without knowing if it's going
to fit inside my buffer or not."</li>
<li>"Oh shit, it didn't fit. Let me just readjust the buffer and restart the copy
entirely."</li>
</ul>
<p>A much better solution here is to just use <code>strlen(3)</code> and <code>memcpy(3)</code>:</p>
<pre><code>size_t srclen = strlen(src) + 1;
if (srclen &gt; dbuflen) {
    void *tmp = realloc(dbuf, srclen);
    if (tmp == NULL) {
        free(dbuf);
        return ERROR;
    }
    dbuf = tmp;
    dbuflen = srclen;
}
memcpy(dbuf, src, srclen);
</code></pre>
<p>This version is far more efficient than the strlcpy version. But more
importantly, the logic here is much more sane and natural:</p>
<ul>
<li>Let's find out how big the <code>src</code> is.</li>
<li>If it doesn't fit then grow the buffer.</li>
<li>Then copy everything over.</li>
</ul>
<h2 id="truncation-matters-but-i-m-stuck-with-a-fixed-size-buffer">Truncation matters, but I'm stuck with a fixed size buffer<a href="#truncation-matters-but-i-m-stuck-with-a-fixed-size-buffer"><img src="https://nrk.neocities.org/assets/chain.svg"></a></h2>
<p>Let's not talk about how you got yourself into this situation, but instead let's
talk about what you can actually do here. And pretty much the only thing you
<em>can</em> do here, is to error out if <code>src</code> happens to be bigger than your buffer.</p>
<p>The following would be the strlcpy implementation:</p>
<pre><code>if (strlcpy(buf, src, sizeof buf) &gt;= sizeof buf)
    return ERROR; /* or call exit/abort if appropriate */
</code></pre>
<p>And once again, this is horribly inefficient because we don't want to know the
exact length of <code>src</code>, we only want to know if it's bigger than our buffer size
or not.</p>
<p>A much better way to do that is, once again, using memccpy. Which is not only
much faster than strlcpy, it actually makes much more logical sense for what
we're trying to do, as it won't scan <code>src</code> for more than <code>sizeof buf</code>:</p>
<pre><code>if (memccpy(buf, src, '\0', sizeof buf) == NULL)
    return ERROR; /* truncation */
</code></pre>
<h2 id="b-but-using-mem-functions-on-string-is-bad">B-but using mem* functions on string is... bad!<a href="#b-but-using-mem-functions-on-string-is-bad"><img src="https://nrk.neocities.org/assets/chain.svg"></a></h2>
<p>The <code>mem</code> and <code>str</code> prefix is often a source of confusion for amateur
programmers who get tricked into thinking that you MUST use only <code>str*</code>
functions on strings.</p>
<p>In case you've forgotten what a (c-)string is, it's nothing more than an array
of bytes terminated by a null character. Any attempt of trying to think of them
as anything else is going to result in error sooner or later because the
programmer has a fundamental misunderstanding of what a string even is.</p>
<p>Moreover, where exactly are these <code>mem*</code> functions declared? Let's take a look
at the manpage:</p>
<pre><code>$ man 3 memccpy
SYNOPSIS
       #include &lt;string.h&gt;
</code></pre>
<p>Now let's take a look at what the <a href="https://port70.net/~nsz/c/c99/n1256.html#7.21">C standard</a>
has to say about <code>&lt;string.h&gt;</code>:</p>
<blockquote>
<p>The header string.h declares one type and several functions, and defines one
macro useful for manipulating arrays of character type and other objects
treated as arrays of character type.</p>
</blockquote>
<p>In other words, there's nothing "improper", "bad practice", "code-smell" or
whatever with using the <code>mem*</code> family of functions for operating on strings,
because strings are just an array of (null-terminated) characters afterall.</p>
<p>One other criticism of this article might be that <code>memccpy(3)</code> and <code>strdup(3)</code>,
while defined in POSIX, is not defined in the ISO C standard <sup><a id="info-src-1" href="#info-ref-1"><img src="https://nrk.neocities.org/assets/info.svg" width="12px"></a></sup>. But this
argument makes no sense because <code>strlcpy(3)</code> is defined in neither, and in
practice is less portable as well.</p>
<hr><div id="info-ref-1"><p><a href="#info-src-1"><img src="https://nrk.neocities.org/assets/info.svg"></a></p><p>Both <code>memccpy</code> and <code>strdup</code> have been accepted into the
<a href="https://en.cppreference.com/w/c/23">C2x draft</a>.</p>
</div><hr>
<h2 id="conclusion">Conclusion<a href="#conclusion"><img src="https://nrk.neocities.org/assets/chain.svg"></a></h2>
<p>In the end, I'm unable to find a situation where <code>strlcpy</code> makes sense. In pretty
much all the cases, I'd much rather use <code>memccpy</code>, <code>memcpy</code> or <code>strdup</code> instead.
So needless to say, I'm not a fan of <code>strlcpy</code>.</p>
<h2 id="related-articles">Related articles<a href="#related-articles"><img src="https://nrk.neocities.org/assets/chain.svg"></a></h2>
<p>About a week after writing this article, I came across the following related
articles, all of which are good reads:</p>
<ul>
<li><a href="https://nullprogram.com/blog/2021/07/30/">strcpy: a niche function you don't need</a></li>
<li><a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2349.htm">Toward more efficient string copying and concatenation</a></li>
<li><a href="https://www.symas.com/post/the-sad-state-of-c-strings">The sad state of C strings</a></li>
</ul>

<br><hr>
<hr>



</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rust for Filesystems (213 pts)]]></title>
            <link>https://lwn.net/Articles/978738/</link>
            <guid>40966414</guid>
            <pubDate>Mon, 15 Jul 2024 09:39:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/Articles/978738/">https://lwn.net/Articles/978738/</a>, See on <a href="https://news.ycombinator.com/item?id=40966414">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<center>
           <div><b>This article brought to you by LWN subscribers</b><p>Subscribers to LWN.net made this article — and everything that
       surrounds it — possible.  If you appreciate our content, please
       <a href="https://lwn.net/subscribe/">buy a subscription</a> and make the next
       set of articles possible.</p></div>
           </center>
           
<p>
At the
2024 <a href="https://events.linuxfoundation.org/lsfmmbpf/">Linux Storage,
Filesystem, Memory Management, and BPF Summit</a>, Wedson Almeida Filho and
Kent Overstreet led a combined storage and filesystem session on using Rust
for Linux filesystems. Back in December 2023, Almeida had <a href="https://lwn.net/ml/linux-fsdevel/20231018122518.128049-1-wedsonaf@gmail.com/">posted
an RFC patch set</a> with
some Rust abstractions for filesystems, which resulted in <a href="https://lwn.net/Articles/958072/">some disagreement over the approach</a>.  On the
same mid-May day as the session, he <a href="https://lwn.net/ml/all/20240514131711.379322-1-wedsonaf@gmail.com/">posted</a>
a second version of the RFC patches, which he wanted to discuss along with
other Rust-related topics.
</p>

<h4>Goals</h4>

<p>
After updating attendees on the status of his patches, Almeida listed some
of the goals of the <a href="https://rust-for-linux.com/">Rust-for-Linux
project</a>, which are embodied in the filesystem abstractions that he is proposing.  The first is to express more of the requirements using Rust's
type system in order to catch more mistakes at compile time.  In addition,
the project's developers want to automate some tasks, such as cleaning up
resources, in ways that are not easily
available to C code. The overall idea is to have a more productive
filesystem-development experience, with less time spent on debugging
problems that the compiler could find, and with fewer memory-related
vulnerabilities overall.
</p>

<p><a href="https://lwn.net/Articles/979161/">
<img src="https://static.lwn.net/images/2024/lsfmb-almeida-sm.png" width="206" height="300" alt="[Wedson Almeida Filho]" title="Wedson Almeida Filho"> 
</a></p><p>
Overstreet said that he had been a part of too many two-week bug hunts and
has been trying to find ways to avoid those kinds of problems for bcachefs.
The Rust language provides a lot more than what he can do in C; it
eliminates undefined behavior and provides facilities to see what is happening
inside the code. "You can't debug, if you can't see what's going on."  He
believes that kernel development "will get a whole lot easier over the
coming decades" due to using Rust.  It will be possible to prove the
correctness of code written in Rust, which will mean that bugs that can derail
feature development will be much less common.
</p>

<p>
From his <a href="https://docs.google.com/presentation/d/1dflxtAojRu3mdx19oBHP3vXCXI1vocFIVc5jVaf9FLA/">slides</a>,
Almeida showed an example of how the Rust type system can eliminate certain
kinds of errors.  He noted that the <a href="https://elixir.bootlin.com/linux/v6.9.5/source/fs/inode.c#L1248"><tt>iget_locked()</tt></a>
function in current kernels has a complicated set of requirements.  Callers
must check to see if the return value is null and, if it is not, then the
contents of the returned <a href="https://elixir.bootlin.com/linux/v6.9.5/source/include/linux/fs.h#L632"><tt>struct&nbsp;inode</tt></a>
need to be checked to see if it is a new or existing inode. If it is new,
it needs to be initialized before it can be used; if that fails, <a href="https://elixir.bootlin.com/linux/v6.9.5/source/fs/bad_inode.c#L244"><tt>iget_failed()</tt></a>
needs to be called, he said.
</p>

<p>
There was some discussion of the finer points of what callers of
<tt>iget_locked()</tt> need to do, with Al Viro disagreeing with some of
what Almeida had on his slide.  That went back and forth, with Overstreet
observing that it was exactly that kind of discussion/argument that could
be avoided by encapsulating the rules into the Rust types and abstractions;
the compiler will know the right thing to do.
</p>

<!-- middle-ad -->

<p>
Overstreet noted that Christian
Brauner and Alice Ryhl have helped to improve the abstractions a great deal
since the first posting; in particular, there are things he has learned
about reference counts based on how they are being handled by the Rust
code. "This is going to make all our lives so much easier", Overstreet said.
</p>

<p>
Almeida put up a slide with the equivalent of <tt>iget_locked()</tt> in
Rust, which was called <tt>get_or_create_inode()</tt>.  The important part
is the return type, he said; as with C, callers must check for failure, but
the success case is much different.  If it is successful, the caller either
receives a regular reference-counted inode to use (which has its reference
count automatically decremented when the inode object is no longer
referenced) or it receives  
a new inode, which will 
automatically call the equivalent of <tt>iget_failed()</tt> if it is never initialized.  If
it is ever initialized (which can only be done once), it becomes a regular
inode with the automatic 
reference-count decrement.  All of that is enforced through the type system.
</p>

<p>
Viro seemed somewhat skeptical of how that would work in practice.  He wondered
where in the source code those constraints would be defined.  Almeida said
that the whole idea is to determine what the constraints are from Viro and
other filesystem developers, then to create types and abstractions that can
enforce them.
</p>

<h4>Disconnect</h4>

<p>
Dave Chinner asked about the disconnect between the names in the C API and
the Rust API, which means that developers cannot look at the C code and
know what the equivalent Rust call would be.  He said that the same names
should be used or it would all be completely unfamiliar to the existing
development community.  In addition, when the C code changes, the Rust code
needs to follow along, but who is going to do that work?  Almeida agreed
that it was something that needs to be discussed.
</p>

<p>
As far as the renamed functions goes, he is not opposed to switching the
names to match the C API, but does not think <tt>iget_locked()</tt> is a
particularly good name.  It might make sense to take the opportunity to
create better names. 
</p>

<p>
There was some more discussion of the example, with Viro saying that it was
not a good choice because <tt>iget_locked()</tt> is a library function,
rather than a member function of the superblock object.  Almeida said that
there was no reason <tt>get_or_create_inode()</tt> could not be turned into
a library function; his example was simply meant to show how the
constraints could be encoded in the types.
</p>

<p>
Brauner said that there needs to be a decision on whether the Rust
abstractions are going to be general-purpose, intended for all kernel
filesystems,  or if they will only be focused on the
functionality needed for the simpler filesystems that have been written in Rust.  There is also a longer-term problem in handling
situations where functions like <tt>get_or_create_inode()</tt> encode a lot
more of the constraints than <tt>iget_locked()</tt> does.  As the C code
evolves, which will happen more quickly than with the Rust code, at least
initially, there will be a need to keep the two APIs in sync.
</p>

<p>
It comes down to a question of whether refactoring and cleanup will be done
as part of adding the Rust abstractions, Overstreet said; he strongly
believes that is required. But there is more to it than just that, James
Bottomley said.  The object lifecycles are being encoded into the Rust API,
but there is no equivalent of that in C; if someone changes the lifecycle
of the object on one side, the other will have bugs.
</p>

<p>
There are also problems because the lifecycle of inode objects is
sometimes filesystem-specific, Chinner said. Encoding a single lifecycle understanding
into the API means that its functions will not work for some filesystems.
Overstreet said that filesystems which are not using the VFS API would
simply not benefit, but Chinner said that a VFS inode is just a structure
and it is up to filesystems to manage its lifetime.
Almeida said that the example would only be used by filesystems that
currently call <tt>iget_locked()</tt> and could benefit.  The Rust
developers are not trying to force filesystems to change how they are doing
things. 
</p>

<h4>Allocating pain</h4>

<p>
Part of the problem, Ted Ts'o said, is that there is an effort to get
"everyone to switch over to the religion" of Rust; that will not happen, he
said, because there are 50+ different filesystems in Linux that will not be
instantaneously converted.  The C code will continue to be improved and if
that breaks the Rust bindings, it will break the filesystems that depend on
them. For the foreseeable future, the Rust bindings are a second-class
citizen, he said; broken Rust bindings are a problem for the
Rust-for-Linux developers and not the filesystem community at large.
</p>

<p>
He suggested that the development of the Rust bindings continue, while the
C code continues to evolve.  As those changes occur, "we will find out
whether or not
this concept of encoding huge amounts of semantics into the type system is
a good thing or a bad thing".  In a year or two, he thinks the answer to that will become
clear; really, though, it will come down to a question of "where does the
pain get allocated".  In his mind, large-scale changes like this almost always come down to a
"pain-allocation question". 
</p>

<p>
Almeida said that he is not trying to keep the C API static; his goal is
to get the filesystem developers to explain the semantics of the API so
that they can be encoded into Rust.  Bottomley said that as more of those
semantics get encoded into the bindings, they will become more fragile from
a synchronization standpoint.
Several disagreed with that, in the form of a jumble of "no" replies and
the like. Almeida said that it was the same with any user of an API; if the
API changes, the users need to be updated.  But Ts'o pointedly said that
not everyone will learn Rust; if he makes a change, he will fix all of the
affected C code, but, "because I don't know Rust, I am not going to fix the Rust
bindings, sorry".
</p>

<p>
Viro came back to his objections about the proposed replacement for
<tt>iget_locked()</tt>.  The underlying problem that he sees is the
reliance on methods versus functions; using methods is not the proper way
forward because the arguments are not specified explicitly.  But Overstreet
said that the complaints about methods come from 
languages like C++ that rely too heavily on inheritance, which is "a crap
idea".  Rust does not do so; methods in Rust are largely just a syntactical
element. 
</p>

<p>
There was some discussion of what exactly is being encoded in the types.
Jan Kara said that there is some behavior that goes with the inode, such as
its reference count and its handling, but there is other behavior that is
inherent in the 
<tt>iget_locked()</tt> function.  Overstreet and Almeida said that those
two pieces were both encoded into the types, but separately; other
functions using the inode type could have return values with different
properties. 
</p>

<p>
Viro went through some of his reasoning about why inodes work the way they
do in the VFS.  He agreed with the idea of starting small to see where
things lead.  Overstreet suggested that maybe the example used was not a
good starting point, "because this is the complicated case". "Oh, no it
isn't", Viro replied to laughter as the session concluded.
</p><br clear="all"><table>
           <tbody><tr><th colspan="2">Index entries for this article</th></tr>
           <tr><td><a href="https://lwn.net/Kernel/Index">Kernel</a></td><td><a href="https://lwn.net/Kernel/Index#Development_tools-Rust">Development tools/Rust</a></td></tr>
            <tr><td><a href="https://lwn.net/Kernel/Index">Kernel</a></td><td><a href="https://lwn.net/Kernel/Index#Filesystems-Internal_API">Filesystems/Internal API</a></td></tr>
            <tr><td><a href="https://lwn.net/Archives/ConferenceIndex/">Conference</a></td><td><a href="https://lwn.net/Archives/ConferenceIndex/#Storage_Filesystem_Memory-Management_and_BPF_Summit-2024">Storage, Filesystem, Memory-Management and BPF Summit/2024</a></td></tr>
            </tbody></table><br clear="all">
<hr><p>
           (<a href="https://lwn.net/Login/?target=/Articles/978738/">Log in</a> to post comments)
           </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Firefox 128 enables "privacy-preserving" ad measurements by default (226 pts)]]></title>
            <link>https://mstdn.social/@Lokjo/112772496939724214</link>
            <guid>40966312</guid>
            <pubDate>Mon, 15 Jul 2024 09:10:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mstdn.social/@Lokjo/112772496939724214">https://mstdn.social/@Lokjo/112772496939724214</a>, See on <a href="https://news.ycombinator.com/item?id=40966312">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Google's Gemini AI caught scanning Google Drive PDF files without permission (279 pts)]]></title>
            <link>https://www.tomshardware.com/tech-industry/artificial-intelligence/gemini-ai-caught-scanning-google-drive-hosted-pdf-files-without-permission-user-complains-feature-cant-be-disabled</link>
            <guid>40965892</guid>
            <pubDate>Mon, 15 Jul 2024 07:25:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomshardware.com/tech-industry/artificial-intelligence/gemini-ai-caught-scanning-google-drive-hosted-pdf-files-without-permission-user-complains-feature-cant-be-disabled">https://www.tomshardware.com/tech-industry/artificial-intelligence/gemini-ai-caught-scanning-google-drive-hosted-pdf-files-without-permission-user-complains-feature-cant-be-disabled</a>, See on <a href="https://news.ycombinator.com/item?id=40965892">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">

<section>
<div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
<div>
<picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-1920-80.jpg.webp 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-320-80.jpg" alt="Google Gemini Advanced" srcset="https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE-1920-80.jpg 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE.jpg"></picture>
</div>
<meta itemprop="url" content="https://cdn.mos.cms.futurecdn.net/sD9objsEAPDccSXYjH4ybE.jpg">
<meta itemprop="height" content="600">
<meta itemprop="width" content="338">
<figcaption itemprop="caption description">
<span itemprop="copyrightHolder">(Image credit: Google)</span>
</figcaption>
</div>

<div id="article-body">
<p>As part of the wider tech industry's wider push for <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/artificial-intelligence" data-before-rewrite-localise="https://www.tomshardware.com/tag/artificial-intelligence">AI</a>, whether we want it or not, it seems that <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/google" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.tomshardware.com/tag/google">Google</a>'s <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tech-industry/artificial-intelligence/google-launches-gemini-its-newest-and-most-capable-ai-model-and-a-full-frontal-assault-on-openais-gpt-4" data-before-rewrite-localise="https://www.tomshardware.com/tech-industry/artificial-intelligence/google-launches-gemini-its-newest-and-most-capable-ai-model-and-a-full-frontal-assault-on-openais-gpt-4">Gemini AI</a> service is now reading private Drive documents without express user permission, per a report from Kevin Bankster on Twitter embedded below. While Bankster goes on to discuss reasons why this may be glitched for users like him in particular, the utter lack of control being given over his sensitive, private information is unacceptable for a company of Google's stature —and does not bode well for future privacy concerns amongst AI's often-forced rollout.</p><div><blockquote data-lang="en"><p lang="en" dir="ltr">Just pulled up my tax return in @Google Docs--and unbidden, Gemini summarized it. So...Gemini is automatically ingesting even the private docs I open in Google Docs? WTF, guys. I didn't ask for this. Now I have to go find new settings I was never told about to turn this crap off.<a href="https://twitter.com/KevinBankston/status/1811075836558114968" data-url="https://twitter.com/KevinBankston/status/1811075836558114968" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">July 10, 2024</a></p></blockquote></div><p>So, what exactly is going on here? Both Google support and the Gemini AI itself do not quite seem to know, but Kevin Bankston has some theories, after providing much more detail in the full thread. Contrary to the initial posting, this is technically happening within the larger umbrella of Google Drive and not Google Docs specifically, though it seems likely the issue could apply to Docs as well.</p><p>But what caused this issue? According to Google's Gemini AI, the privacy settings used to inform Gemini should be openly available, but they aren't, which means the AI is either "hallucinating (lying)" or some internal systems on Google's servers are outright malfunctioning. Either way, not a great look, even if this private data supposedly isn't used to train the Gemini AI.</p><p>What's more, Bankston did eventually find the settings toggle in question... only to find that Gemini summaries in Gmail, Drive, and Docs were already disabled. Additionally, it was in an entirely different place than either of the web pages to which Gemini's bot initially pointed.</p><p>For Bankston, the issue seems localized to Google Drive, and only happens after pressing the Gemini button on at least one document. The matching document type (in this case, PDF) will subsequently automatically trigger Google Gemini for all future files of the same type opened within Google Drive. He additionally theorizes that it may have been caused by him enabling Google Workspace Labs back in 2023, which could be overriding the intended Gemini AI settings.</p><p>Even if this issue is isolated to Google Workspace Labs users, it's quite a severe downside for having helped Google test its latest and greatest tech. User consent still matters on a granular basis, particularly with potentially sensitive information, and Google has utterly failed at least one segment of its user base by failing to stay true to that principle.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-wRuffs8ZMbx8jqi7TCGfnZ"><section><p>Get Tom's Hardware's best news and in-depth reviews, straight to your inbox.</p></section></div>
</div>
<div id="slice-container-authorBio-wRuffs8ZMbx8jqi7TCGfnZ"><p>Christopher Harper has been a successful freelance tech writer specializing in PC hardware and gaming since 2015, and ghostwrote&nbsp;for various B2B clients in High School before that. Outside of work, Christopher is best known to friends and rivals as an active competitive player in various eSports (particularly fighting games and arena shooters) and a purveyor of music ranging from Jimi Hendrix to Killer Mike to the&nbsp;Sonic Adventure 2&nbsp;soundtrack.</p></div>



<!-- Drop in a standard article here maybe? -->



</section>





<div id="slice-container-relatedArticles"><p><h5>Most Popular</h5></p></div>








</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The fascinating and complicated sex lives of white-throated sparrows (146 pts)]]></title>
            <link>https://www.audubon.org/news/the-fascinating-and-complicated-sex-lives-white-throated-sparrows</link>
            <guid>40964924</guid>
            <pubDate>Mon, 15 Jul 2024 02:55:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.audubon.org/news/the-fascinating-and-complicated-sex-lives-white-throated-sparrows">https://www.audubon.org/news/the-fascinating-and-complicated-sex-lives-white-throated-sparrows</a>, See on <a href="https://news.ycombinator.com/item?id=40964924">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main" role="main">
                            <div>
              <div>
                      
                              

                      <p>With their quadruple personalities, those little brown birds at your feeder are a lot more interesting than they might appear. </p>
                              
          
          
        </div>
            
      
              <figure>
  
  
  <figcaption>
    
  </figcaption>

</figure>

          </div>

        <section property="schema:text"> <p>Could this be the world’s most interesting bird? Sure, it doesn’t <em>look</em> that interesting. In fact, at a glance, it seems like a run-of-the-mill sparrow.</p>

<p>It doesn’t live in far-off&nbsp;exotic places, either: It may be outside your window right now. The White-throated Sparrow is common and familiar, hopping on the ground under bird feeders all over the eastern states in winter. It appears by the hundreds during migration in places like New York City’s Central Park and Chicago’s lakefront parks. But this seemingly ordinary backyard bird has a secret identity—or, actually, four secret identities. And it's these multiple personalites that place&nbsp;the White-throat at the center of mysteries&nbsp;scientists are still working out.</p>

<p>Watch a flock of White-throats in spring and you’ll notice they have two kinds of head patterns. Some wear snappy stripes of black and white across the top of the head. Others have more modest head stripes of dark brown and tan. That superficial difference might not seem like a big deal, but it reflects a remarkable divergence in the lifestyles of these individuals.</p>

<p>For years it was assumed that tan stripes indicated a young White-throat. As late as 1947, in his classic <em>Field Guide to the Birds</em>, Roger Peterson described the adult’s “striped black and white crown” and said the immature was “duller, but with the same essential recognition-marks.” By that time, there’d been hints already that the colors might not be just a function of age. For example, in <em>The Birds of Massachusetts</em> in 1929, ornithologist Edward Howe Forbush mentioned a two-year-old banded White-throat that “had not attained full adult plumage.” He added that “Some require an extra year, or possibly even more, to assume highest plumage.” But he didn’t go so far as to suggest that some adults would never develop those white stripes.</p>

<p>Finally, in 1961, a landmark study by Canadian ornithologist James Lowther revealed the true nature of the color differences. A White-throated Sparrow, he demonstrated, would be white-striped or tan-striped for life—these were permanent color morphs, and about half of all males and half of all females fell into each color type.</p>


<span data-lazyblock-hash="bean::5478::1672138908">
</span><p>It’s not rare for a bird species to have color morphs. Check your field guide: There are morphs in Eastern Screech-Owls, Reddish Egrets, Red-tailed Hawks, and others. But White-throated Sparrows are different. As Lowther discovered, mated pairs of White-throats almost always involved one bird of each color morph: Either a tan-striped male with a white-striped female, or a white-striped male with a tan-striped female. Intrigued, Lowther extended his research, joined by biologist J. Bruce Falls and others. As studies continued, it became obvious that these two color morphs, existing side by side throughout the species’ range, are stunningly different from each other in behavior.</p>

<p>Within each gender, white-striped birds are more aggressive while tan-striped birds are more nurturing. That seemingly simple generalization is based on a vast amount of research. For many years, Falls and his students at the University of Toronto carried out highly detailed studies of White-throated Sparrows, showing how behavioral differences between the morphs touched every aspect of these birds’ lives.</p>

<p>Consider their defense of breeding territories. White-throated Sparrows nest in coniferous and mixed forests of Canada and the northeastern states, but within this habitat, white-striped males tend to be in slightly more open areas, while tan-striped males are often in denser forest. As with most songbirds, they defend their territories mainly by singing. White-striped males sing far more often than tan-striped males. White-striped females also sing fairly often, but tan-striped females rarely do. They all sing variations of the whistled <em>Oh, sweet, Kimberly-Kimberly-Kimberly!,</em> but the songs of tan-striped birds average slightly lower-pitched, and these lower sounds may carry better through dense habitat.</p>

<p>Now, when singing isn’t enough, White-throats will actively chase away intruders on their territory. White-striped males, though,&nbsp;are much more aggressive than tan-striped males in these chases. White-striped females will also take part in chasing, but tan-striped females don’t seem to do much to defend the territory.</p>

<p>In the actual process of raising young, tan-striped birds shine. Only females (of either morph) build the nest and incubate the eggs, but after the eggs hatch, both parents bring food for the young. On average, females bring more food than males. But within each sex, tan-striped birds bring more food than white-striped ones.</p>

<p>So are females most strongly attracted to the tough, macho, white-striped males? Actually, no. Lab studies have found that females of either morph prefer the tan-striped males. White-striped females, more pushy than their tan-striped sisters, grab the tan-striped bachelors right away, so these pairs form more quickly than the opposite combination. Males of both morphs tend to prefer the white-striped females, but those females quickly hook up with tan-striped males if they can, so eventually the leftover birds will form pairs consisting of white-striped males and tan-striped females. Once they’re paired up, tan-striped birds of either sex tend to be faithfully monogamous, but white-striped birds are sometimes promiscuous.</p>

<p>Talk about a complicated dating scene! Nesting pairs consist of one bird from each morph more than 95 percent of the time, but it’s especially interesting to consider what happens on those occasions when two birds of the <em>same</em> morph pair up. In short, it’s likely to be a bad idea. Pairs consisting of two white-striped birds may fail to raise any young because they spend too much time fighting with each other and not enough time feeding the kids. Pairs consisting of two tan-striped birds might fail completely at defending their territory, but that’s a guess; we don’t have much data.</p>


<span data-lazyblock-hash="bean::5479::1672138910">
</span><p>So the morphs differ in traits that parallel the usual differences between the sexes in birds. Looking at White-throats in the breeding season, we see four distinct types. To oversimplify, we could call them super-aggressive males, more nurturing males, somewhat aggressive females, and super-nurturing females. It’s almost as if the White-throated Sparrow has four sexes. That may sound like a joke, but it’s actually a good description of what’s going on.</p>

<p>We’ve known since the late 1960s that the two color morphs differ in their chromosomes. Tan-striped birds have two identical copies of chromosome 2, but in white-striped birds, one copy of chromosome 2 has a large section inverted, as if it had been put in backwards. Recent work by biologist Elaina Tuttle and others has established that this section of the chromosome is not just inverted, but scrambled in a variety of ways. And it doesn’t just control the color of head stripes. Many different genes here are tightly linked to form a “supergene,” so that birds of one color morph also inherit a whole range of behaviors. The resulting effect is that the White-throat <a href="http://www.molecularecologist.com/2016/02/supergenes-and-sparrows-with-four-sexes/">really does operate as a bird with four sexes</a>. For anyone curious about the scientific background, you can <a href="http://www.cell.com/current-biology/abstract/S0960-9822(15)01562-6">read all the technical details here</a>.</p>

<p>As far as we know, there’s no other bird in the world with this unique arrangement. And the lab work to discover the genetic details was done only because we already knew something weird was going on—because people had taken time to watch the behavior of White-throated Sparrows in the wild. Who knows what other mysteries might be just waiting to be revealed? Most of us will never discover anything quite so astonishing as this, but we can all keep in mind that even the most common bird may have its own rare secrets.</p>
 </section>
                      
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tabloid: A clickbait headline programming language (2021) (192 pts)]]></title>
            <link>https://tabloid.vercel.app/</link>
            <guid>40964261</guid>
            <pubDate>Mon, 15 Jul 2024 00:12:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tabloid.vercel.app/">https://tabloid.vercel.app/</a>, See on <a href="https://news.ycombinator.com/item?id=40964261">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Just Be Rich (2021) (214 pts)]]></title>
            <link>https://keenen.xyz/just-be-rich/</link>
            <guid>40962965</guid>
            <pubDate>Sun, 14 Jul 2024 20:16:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://keenen.xyz/just-be-rich/">https://keenen.xyz/just-be-rich/</a>, See on <a href="https://news.ycombinator.com/item?id=40962965">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
                    <p>No one wants to be the bad guy.</p><p>When narratives begin to shift and the once good guys are labelled as bad it's not surprising they fight back. They'll point to criticisms as exaggerations. Their faults as misunderstandings.</p><p>Today's freshly ordained bad guys are the investors and CEOs of Silicon Valley.</p><p>Once championed as the flagbearers of innovation and democratization, now they're viewed as new versions of the monopolies of old and they're fighting back.</p><p>The title of Paul Graham's essay, <a href="http://paulgraham.com/richnow.html?ref=keenen.xyz">How People Get Rich Now</a>, didn't prepare me for the real goal of his words. It's less a tutorial or analysis and more a thinly veiled attempt to ease concerns about wealth inequality.</p><blockquote>People who don't look any deeper than the Gini coefficient look back on the world of 1982 as the good old days, because those who got rich then didn't get as rich. But if you dig into <em>how</em> they got rich, the old days don't look so good. In 1982, 84% of the richest 100 people got rich by inheritance, extracting natural resources, or doing real estate deals. Is that really better than a world in which the richest people get rich by starting tech companies?</blockquote><p>What he fails to mention is that concerns about wealth inequality aren't concerned with how wealth was generated but rather the growing wealth gap that has accelerated in recent decades. Tech has made startups both cheaper and easier but only for a small percentage of people. And when a select group of people have an advantage that others don't it's compounded over time.</p><blockquote>Once you understand how these mechanisms work, and that startups were suppressed for most of the 20th century, you don't have to resort to some vague right turn the country took under Reagan to explain why America's Gini coefficient is increasing. Of course the Gini coefficient is increasing. With more people starting more valuable companies, how could it not be?</blockquote><figure><img src="https://keenen.xyz/content/images/2021/04/image.png" alt="" loading="lazy" width="1274" height="886" srcset="https://keenen.xyz/content/images/size/w600/2021/04/image.png 600w, https://keenen.xyz/content/images/size/w1000/2021/04/image.png 1000w, https://keenen.xyz/content/images/2021/04/image.png 1274w" sizes="(min-width: 720px) 720px"></figure><p>Paul paints a rosy picture but doesn't mention that incomes for lower and middle-class families have fallen since the 80s. This golden age of entrepreneurship hasn't benefitted the vast majority of people and the increase in the Gini coefficient isn't simply that more companies are being started. The rich are getting richer and the poor are getting poorer.</p><figure><img src="https://keenen.xyz/content/images/2021/04/image-1.png" alt="" loading="lazy" width="848" height="830" srcset="https://keenen.xyz/content/images/size/w600/2021/04/image-1.png 600w, https://keenen.xyz/content/images/2021/04/image-1.png 848w" sizes="(min-width: 720px) 720px"></figure><blockquote>You would think, after having been on the side of labor in its fight with capital for almost two centuries, that the far left would be happy that labor has finally prevailed. But none of them seem to be. You can almost hear them saying "No, no, not <em>that</em> way."</blockquote><p>And there we have it. The slight injection of his true ideology relegated to the notes section and vague enough that some might ignore. But keep in mind this is the same guy who argued <a href="http://www.paulgraham.com/wtax.html?ref=keenen.xyz">against a wealth tax</a>. His seemingly impartial and logical writing attempts to hide his true intentions.</p><p>Is this really about how people get rich or why we should all be happy that people like PG are getting richer while tons of people and struggling to meet their basic needs. Wealth inequality is just a radical left fairy tale to villainize the hard-working 1%. We could all be rich too, it's so much easier now. Just pull yourself up by your bootstraps.</p><p>There's no question that it's easier now than ever to start a new business and reach your market. The internet has had a democratizing effect in this regard. But it's also obvious to anyone outside the SV bubble that it's still only accessible to a small minority of people. Most people don't have the safety net or mental bandwidth to even consider entrepreneurship. It is not a panacea for the masses.</p><p>But to use that fact to push the false claim that wealth inequality is solely due to more startups and not a real problem says a lot. This essay is less about how people get rich and more about why it's okay that people like PG are getting rich. They're better than the richest people of 1960. And we can join them. We just need to stop complaining and just be rich instead.</p>
                    
                </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[California Grid Breezes Through Heatwave with Batteries (107 pts)]]></title>
            <link>https://thinc.blog/2024/07/14/california-grid-breezes-through-heat-wave-due-to-renewables-batteries/</link>
            <guid>40962942</guid>
            <pubDate>Sun, 14 Jul 2024 20:14:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thinc.blog/2024/07/14/california-grid-breezes-through-heat-wave-due-to-renewables-batteries/">https://thinc.blog/2024/07/14/california-grid-breezes-through-heat-wave-due-to-renewables-batteries/</a>, See on <a href="https://news.ycombinator.com/item?id=40962942">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page">
		<p><a href="#content">
			Skip to content		</a></p><!-- .site-header -->

		<div id="content">
	<main id="main">
		
<article id="post-99682">
	<!-- .entry-header -->

	
	
	<div>
		
<figure><p><span><iframe width="840" height="473" src="https://www.youtube.com/embed/lWEQROBWZF0?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en-US&amp;autohide=2&amp;wmode=transparent" allowfullscreen="true" sandbox="allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox"></iframe></span>
</p></figure>



<p>No rolling blackouts or grid emergencies as California continues on path to a carbon free grid.   Several strategies, including upgrades to vulnerable parts of the grid at play here, but key enabler is more clean energy, especially solar, and above all, battery storage, now equivalent to 5 very large nuclear power plants.<br></p>


<div>
<figure><a href="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?ssl=1"><img decoding="async" width="840" height="472" data-attachment-id="99693" data-permalink="https://thinc.blog/2024/07/14/california-grid-breezes-through-heat-wave-due-to-renewables-batteries/image-42-28/" data-orig-file="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?fit=1260%2C707&amp;ssl=1" data-orig-size="1260,707" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image-42" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?fit=300%2C168&amp;ssl=1" data-large-file="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?fit=840%2C472&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?resize=840%2C472&amp;ssl=1" alt="" srcset="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?resize=1024%2C575&amp;ssl=1 1024w, https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?resize=300%2C168&amp;ssl=1 300w, https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?resize=768%2C431&amp;ssl=1 768w, https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?resize=1200%2C673&amp;ssl=1 1200w, https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?resize=624%2C350&amp;ssl=1 624w, https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-42.png?w=1260&amp;ssl=1 1260w" sizes="(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px" data-recalc-dims="1"></a></figure></div>


<figure><p><span><iframe loading="lazy" width="840" height="473" src="https://www.youtube.com/embed/ISsUMjvBjoQ?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en-US&amp;autohide=2&amp;wmode=transparent" allowfullscreen="true" sandbox="allow-scripts allow-same-origin allow-popups allow-presentation allow-popups-to-escape-sandbox"></iframe></span>
</p></figure>



<p>In fact, California seems to have reached a level of storage that is creating some kind of a phase-change in the grid, yielding benefits that are surprising even expert observers.  More and more days where renewables supply greater-than 100 percent of California’s power – enabling exports even under these challenging conditions.</p>



<figure></figure>


<div>
<figure><a href="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-44.png?ssl=1"><img loading="lazy" decoding="async" width="840" height="759" data-attachment-id="99701" data-permalink="https://thinc.blog/2024/07/14/california-grid-breezes-through-heat-wave-due-to-renewables-batteries/image-44-28/" data-orig-file="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-44.png?fit=1000%2C903&amp;ssl=1" data-orig-size="1000,903" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image-44" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-44.png?fit=300%2C271&amp;ssl=1" data-large-file="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-44.png?fit=840%2C759&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-44.png?resize=840%2C759&amp;ssl=1" alt="" srcset="https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-44.png?w=1000&amp;ssl=1 1000w, https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-44.png?resize=300%2C271&amp;ssl=1 300w, https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-44.png?resize=768%2C694&amp;ssl=1 768w, https://i0.wp.com/thinc.blog/wp-content/uploads/2024/07/image-44.png?resize=388%2C350&amp;ssl=1 388w" sizes="(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px" data-recalc-dims="1"></a></figure></div>	</div><!-- .entry-content -->

	<!-- .entry-footer -->
</article><!-- #post-99682 -->

<!-- .comments-area -->

	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>
	</main><!-- .site-main -->

	
</div><!-- .site-content -->

		<!-- .site-footer -->
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fusion – a hobby OS implemented in Nim (294 pts)]]></title>
            <link>https://github.com/khaledh/fusion</link>
            <guid>40962767</guid>
            <pubDate>Sun, 14 Jul 2024 19:43:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/khaledh/fusion">https://github.com/khaledh/fusion</a>, See on <a href="https://news.ycombinator.com/item?id=40962767">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Fusion OS</h2><a id="user-content-fusion-os" aria-label="Permalink: Fusion OS" href="#fusion-os"></a></p>
<p dir="auto">Fusion is a hobby operating system for x86-64 implemented in Nim. I'm documenting
the process of building it at: <a href="https://0xc0ffee.netlify.app/" rel="nofollow">https://0xc0ffee.netlify.app</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Screenshots</h2><a id="user-content-screenshots" aria-label="Permalink: Screenshots" href="#screenshots"></a></p>
<p dir="auto"><strong>UEFI Bootloader</strong></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/khaledh/fusion/blob/main/screenshots/bootloader.png"><img src="https://github.com/khaledh/fusion/raw/main/screenshots/bootloader.png" alt="UEFI Bootloader"></a></p>
<p dir="auto"><strong>GUI</strong> (<em>Note: This screenshot is from the <code>graphics</code> branch, which is still a work-in-progress.</em>)</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/khaledh/fusion/blob/main/screenshots/graphics.png"><img src="https://github.com/khaledh/fusion/raw/main/screenshots/graphics.png" alt="Screenshot from the graphics branch"></a></p>
<p dir="auto"><strong>Booting Fusion Kernel</strong></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/khaledh/fusion/blob/main/screenshots/kernel-booting.png"><img src="https://github.com/khaledh/fusion/raw/main/screenshots/kernel-booting.png" alt="Booting Fusion Kernel"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto">The following features are currently implemented:</p>
<ul dir="auto">
<li>UEFI Bootloader</li>
<li>Physical Memory Manager</li>
<li>Virtual Memory Manager</li>
<li>Single Address Space</li>
<li>User Mode</li>
<li>Preemptive Multitasking</li>
<li>System Calls</li>
<li>ELF Loader</li>
<li>Timer Interrupts</li>
</ul>
<p dir="auto">Planned:</p>
<ul dir="auto">
<li>Demand Paging</li>
<li>Inter-Process Communication</li>
<li>Disk I/O</li>
<li>File System</li>
<li>Keyboard/Mouse Input</li>
<li>Shell</li>
<li>GUI</li>
<li>Networking</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Building</h2><a id="user-content-building" aria-label="Permalink: Building" href="#building"></a></p>
<p dir="auto">To build Fusion, you need to have the following dependencies installed:</p>
<ul dir="auto">
<li><a href="https://nim-lang.org/" rel="nofollow">Nim</a></li>
<li><a href="https://llvm.org/" rel="nofollow">LLVM</a> (clang and lld)</li>
<li><a href="https://github.com/casey/just">Just</a></li>
</ul>
<p dir="auto">Build Fusion with the following command:</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Running</h2><a id="user-content-running" aria-label="Permalink: Running" href="#running"></a></p>
<p dir="auto">Fusion currently runs on <a href="https://www.qemu.org/" rel="nofollow">QEMU</a>, so you'll need to install it first. Launch Fusion with the following command:</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">MIT</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to Know When It's Time to Go (303 pts)]]></title>
            <link>https://thecodist.com/how-to-know-when-its-time-to-go/</link>
            <guid>40962675</guid>
            <pubDate>Sun, 14 Jul 2024 19:16:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thecodist.com/how-to-know-when-its-time-to-go/">https://thecodist.com/how-to-know-when-its-time-to-go/</a>, See on <a href="https://news.ycombinator.com/item?id=40962675">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="site-main">
<article>

    <header>

        

        


        

            <figure>
                <img srcset="https://thecodist.com/content/images/size/w300/2024/07/timetogo-1.jpg 300w,
                            https://thecodist.com/content/images/size/w600/2024/07/timetogo-1.jpg 600w,
                            https://thecodist.com/content/images/size/w1000/2024/07/timetogo-1.jpg 1000w,
                            https://thecodist.com/content/images/size/w2000/2024/07/timetogo-1.jpg 2000w" sizes="(min-width: 1400px) 1400px, 92vw" src="https://thecodist.com/content/images/size/w2000/2024/07/timetogo-1.jpg" alt="Alarm clock with words &quot;Time To Go&quot;">
            </figure>

    </header>

    <section>
        <p>I retired in 2021 at 63.5 after about four decades as a programmer. What made me do this was not failing ability in any way, but after a year of consideration, I realized I didn't care to do it anymore.</p><p>Everyone will eventually reach a point at which they can no longer do what they spent their lives doing—but it's not just about retirement; it can happen at any time earlier as well. I've known people much younger than me who became obsolete due to their chosen technology going away or people who simply got tired of writing code or, more commonly, doing it as a job.</p><p>Of course its not only programmers, it happens in everything including sports where professionals keep playing beyond their ability (often to make a bunch more money), and even politicians who exceed their limit (currently on view as both US Presidential candidates should not run but won't quit). It can be that you cannot do it anymore, have a lack of desire, a bad job market, obsolete technology, or are discovering something else worth doing. In my life, I've seen all of those.</p><p>I knew a young programmer a decade ago who left his CS degree because he was making tons of money shipping mobile apps, he even wrote a book on it, and started several companies. But he burned out and discovered he no longer cared, started a Jeep dealership, then started a land clearing business (riding bulldozers all day) and enjoyed all of that more, plus had more consistent success.</p><p>I knew someone who got a CS degree when I was getting my Chemistry degree and spent his career writing only mainframe systems code. Eventually, the mainframe was abandoned, and he had not learned anything else, so he had to work installing network cables. Another team at a place where I worked bragged about how great their technology was (4GL tools generating RPG2); a year later, they were out of a job, and the tool was obsolete. Sometimes, the world passes you by.</p><p>You probably don't know any retired programmers—back in the early 80s, when I started, there was only a tiny percentage of programmers compared to today, and over the decades, many gave up, became managers, or became obsolete. So, not many remained writing code long enough to end their career still writing code. Among those who I knew that started when I did, all that remained forty years later were doing legacy work; I was the only one still working on the leading edge of things (in my case, iOS in Swift for a very large company). It's hard to sustain a career that long in an industry with insane amounts of change.</p><p>All of you reading this (programmers anyway) will eventually hit a point where you can't do the job anymore for one of the above reasons. It's important to be honest with yourself. Are you keeping up to date sufficiently to continue the job? Is the job even interesting anymore, or is there something else you would rather do? Maybe your programming is not fun, or perhaps it's no longer challenging enough. Despite how unfulfilling it is, I've known people who enjoy the paycheck, do boring work, and keep doing it. That's a choice, but I was never satisfied with that.</p><p>It's not only quitting programming that you might consider; the biggest reason to quit may be that your job is not worth doing and that you need to find another one. I've quit perfectly good jobs (and some terrible ones) because I did not find the work interesting, the direction terrible, or a hostile workplace. Naturally, some employers went out of business or laid people off, but I left those jobs involuntarily! A different kind of programming or a different industry could revive your interest. The key is still to be honest with yourself. I've known people who left a high-pressure, high-salary job, started a farm, or began a different career. It's not worth working and being miserable.</p><p>Some time ago, I knew a programmer with the same number of years of experience as me. Yet he seemed unable to comprehend what was required of him, and I had to review everything he wrote because it rarely worked; for example, he would copy and paste code but include extra lines that did nothing. I still have no idea how you can work for 30 years and be unable to do even simple things.</p><p>None of this says that you should discriminate against people simply due to their age. Age and ability are not correlated. I've known people older than me who were brilliant and some that were incapable, like the previous person. I've seen 20-year-olds who could write anything successfully and others who did not understand simple concepts. Thankfully, I saw little age discrimination besides a few interviews where the interviewer had that look on their face: "Oh no, an old guy." Especially in my last three employers (covering about a decade), each valued everything I did.</p><p>When I announced my retirement (with three months' warning), my leaders were shocked. They couldn't comprehend why anyone would retire. One of them, whom I had worked for for two of those jobs and always made his life easier, never spoke to me again or even said goodbye. I still talk with some of my peers and team, and knowing how downhill the work has gone since (although the money got really good), I would have left anyway. I like making a difference and being challenged to do things and work that matters. Money is nice, but I liked making that difference.</p><p>Everyone eventually reaches a point where a job, an employer, an industry, or even their entire career ends. It feels better to be honest and make an informed decision rather than discover you are falling behind and possibly being forced out. It feels better to leave a bad job instead of hanging on until your hair falls out, even if the next job is equally terrible (I've been there). Your career is yours; it's up to you to make the most of it, even if you end it.</p><p>I still write code every day in support of my <a href="https://digcon.art/?ref=thecodist.com">generative art practice</a>. The code is much more complex than anything I did previously, and much of it does not have anyone else doing it, so it's a lot of invention, which is fun. While I miss certain aspects of my final job, I don't miss the eternal pressure, long hours, bad executive decision-making, and endless changes. I do miss being a leader and seeing things we wrote being used by our many customers. </p><p>Programming can be a fun career, a horrible nightmare, or something in between, and it never stands still. I enjoyed the good parts, tolerated the bad, and switched technologies, industries, and employers often enough to keep it going for four decades. That's long enough.</p>
    </section>


</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Disqualified (1954) (118 pts)]]></title>
            <link>https://www.gutenberg.org/cache/epub/30251/pg30251-images.html</link>
            <guid>40962572</guid>
            <pubDate>Sun, 14 Jul 2024 18:49:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gutenberg.org/cache/epub/30251/pg30251-images.html">https://www.gutenberg.org/cache/epub/30251/pg30251-images.html</a>, See on <a href="https://news.ycombinator.com/item?id=40962572">Hacker News</a></p>
<div id="readability-page-1" class="page"><pre></pre>
<p><img alt="" height="358" src="https://www.gutenberg.org/cache/epub/30251/images/001.png" title="" width="600" id="id-7544715429723703257">
<small><i>Illustrated by Kelly Freas</i></small></p>
<p><span><i>If Saranta wished to qualify as one who loved
his fellow man, he should have known that often
the most secretive things are the most obvious.</i></span></p>

<h2>BY CHARLES L. FONTENAY</h2>
<p><span>After</span> the morning inspection
tour, Tardo, the Solar Council's
Planetary Aid agent, and his
companion, Peo, were taken to the
castle which stood on a hill overlooking
the area.</p>
<p>Tardo and Peo were entertained
royally at luncheon by Saranta,
their host, who appeared to be the
wealthy overlord of this portion of
the planet. The meal was delicious—tender,
inch-thick steaks served
with delicate wine sauce and half
a dozen of the planet's exotic vegetables,
topped off by a cool fruit
dessert.</p>
<p>"My recommendation will be of
considerable importance to you,"
said Tardo as they ate. "If it is favorable,
there is certain technical
aid aboard ship which will be made
available to you at once. Of course,
you will not receive advanced
equipment from the Solar Council
until there is a more thorough investigation."</p>
<p>"I'm afraid our culture is too
simple and agrarian to win your
approval," said Saranta modestly.</p>
<p>"That isn't a major consideration.
The Council understands the
difficulties that have faced colonies
in other star systems. There are certain
fundamental requirements, of
course: no abnormal religious practices,
no slavery ... well, you understand
what I mean."</p>
<p>"We really feel that we have
done well since we ... our ancestors,
that is ... colonized our world
a thousand years ago," said Saranta,
toying with a wineglass. A smiling
servant filled the glasses of Tardo
and Peo. "You see, there was no
fuel for the ship to explore other
planets in the system, and the ship
just rusted away. Since we are some
distance from the solar system,
yours is the first ship that has landed
here since colonization."</p>
<p>"You seem to have been lucky,
though," said Peo. He was navigator
of the Council ship, and had
asked to accompany Tardo on the
brief inspection trip. "You could
have landed on a barren planet."</p>
<p>"Well, no, the colonizers knew it
was liveable, from the first exploration
expedition," said Saranta.
"There were difficulties, of course.
Luxuriant vegetation, but no animal
life, so we had no animals to
domesticate. Pulling a plow is hard
work for a man."</p>
<p>"But you were able to solve this
situation in a humanitarian way?"
asked Tardo, peering at him keenly.
"That is to say, you didn't resort
to slavery?"</p>
<p>Saranta smiled and spread his
hands slightly.</p>
<p>"Does this look like a slave society
to you?" he countered. "The
colonists were anxious to co-operate
to make the planet liveable. No one
objected to work."</p>
<p>"It's true we've seen no slaves,
that we know about," said Tardo.
"But two days is a short time for inspection.
I must draw most of my
conclusions from the attitudes of
you and the others who are our
hosts. How about the servants
here?"</p>
<p>"They are paid," answered Saranta,
and added ruefully: "There
are those of us who think they are
paid too well. They have a union,
you know."</p>
<p>Tardo laughed.</p>
<p>"A carry-over from Earth, no
doubt," he commented. "An unusual
one, too, for a culture without
technology."</p>
<p>When the meal was over, the
two men from the ship were conducted
on a tour of the area. It was
a neat agricultural community,
with broad fields, well-constructed
buildings and, a short distance from
Saranta's castle-like home, a village
in which artisans and craftsmen
plied their peaceful trades.</p>
<p>Peo tried to notice what he
thought Tardo would look for on
such a short inspection. The Council
agent, he knew, had had intensive
training and many years of
experience. It was hard for Peo to
judge what factors Tardo would
consider significant—probably very
minor ones that the average man
would not notice, he thought.</p>
<p>Tardo had seemed most intent
on the question of slavery, and Peo
looked for signs of it. He could see
none. The people of the planet had
had time to conceal some things, of
course. But the people they saw in
the village wore a proud air of independence
no slave could assume.</p>
<p>Saranta apologized for their having
to walk, explaining that there
was no other means of transportation
on the planet.</p>
<p>"And, without transportation,
you can understand why we have
not been able to develop a technology,"
he added. "We hope transport
will be included in the first
assistance you will give us."</p>
<p>Tardo asked about the fields.</p>
<p>"I see there is no one working
them," he said. "Is that done by
the villagers?"</p>
<p>"Our labor supply is transient,"
answered Saranta after a moment's
hesitation. "The laborers who will
work our fields—for a wage, of
course—are probably in the next
town or the one beyond it now."</p>
<p>Alpha Persei was sinking in the
western sky when Tardo and Peo
took their leave of Saranta and
made their way down the road toward
their planetary landing craft.</p>
<p>"It looks like a good world to
me," said Peo. "If tomorrow's inspection
is as satisfactory, I suppose
you will recommend the beginning
of technical aid?"</p>
<p>"There will be no inspection tour
tomorrow, and I shall recommend
against aid at this time," replied
Tardo. "I've seen enough."</p>
<p>"Why?" asked Peo, surprised.</p>
<p>"There are two classes of people
on this planet, and we've seen only
one," said Tardo. "Those we have
seen are freemen. The others are
no better than animals. We give no
aid that helps men tighten their
hold over their fellows."</p>
<p>"If you haven't seen them, how
do you know there is another class?"
demanded Peo. "There is no evidence
of any such situation."</p>
<p>"The evidence is well hidden.
But if you think your stomach can
take it now, I'll tell you. If you remember
your history, colonizing
ships 1000 years ago had no space
to carry animals along. They had
to depend on native animal life of
the planet, and this planet had
none."</p>
<p>"Saranta said that. But I don't
see ..."</p>
<p>"Those were delicious steaks,
weren't they?" remarked Tardo
quietly.</p>
<div><p><a href="https://www.gutenberg.org/cache/epub/30251/images/002-2.jpg" id="id-3905019966533701082"><img alt="" height="200" src="https://www.gutenberg.org/cache/epub/30251/images/002-1.jpg" title="" width="142" id="id-4645311178841668563"></a></p>
<p><span><b>Transcriber's Note:</b></span></p>
<p>This etext was produced from <i>If Worlds of Science Fiction</i> September 1954.
Extensive research did not uncover any evidence that the U.S.
copyright on this publication was renewed. Minor spelling and
typographical errors have been corrected without note.</p></div>
<pre></pre>

</div>]]></description>
        </item>
    </channel>
</rss>