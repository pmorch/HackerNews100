<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 16 Mar 2025 04:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Cloudflare asks browser devs to sign insane NDAs before fixing browser blocking (109 pts)]]></title>
            <link>https://forum.palemoon.org/viewtopic.php?t=32127</link>
            <guid>43376064</guid>
            <pubDate>Sun, 16 Mar 2025 00:19:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://forum.palemoon.org/viewtopic.php?t=32127">https://forum.palemoon.org/viewtopic.php?t=32127</a>, See on <a href="https://news.ycombinator.com/item?id=43376064">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Since this seems to be an on-going problem at this time, this topic aims to provide a summary and "current status" regarding CloudFlare and its promise they "aren't in the business of claiming any browser is more legitimate than another" handling of their Captcha/turnstile pages.</p><p>

<span>Start of the issue</span></p><p>

On Jan 31<sup>st</sup>, users reported that, similar to an occurrence in 2022, CloudFlare's captcha/"i'm under attack" mode had started failing and looping instead of passing and letting browser users through. It soon became clear that this time, any UXP browser wasn't the only being denied access to the sites being "protected" by CloudFlare. Even Firefox ESR 115 was affected.<br>
The community was quick to respond, opening a CloudFlare community thread explaining the problem (which is the only communications channel available to end users, see below) and reporting the issue. <br>
Assuming Mozilla applied corporate pressure for Firefox ESR, CloudFlare changed its captcha scripting soon after which, in turn, exposed a crash issue in UXP by triggering a situation that was not initially accounted for in JavaScript and would not normally occur. Despite the crashes, CloudFlare did not respond to reports about it, effectively causing DoS for all UXP browser users. The crash was solved with an accelerated release of Pale Moon 33.6.0.<br>
Shortly after this, CloudFlare made another change which, this time, caused a different kind of denial of service by triggering script hang/out-of-memory issues through what seems to be <span><em>deliberate</em></span> behaviour when the script does not pass a collection of Web API checks (since the same behaviour was observed on their "officially supported browsers" as well if the user-agent was spoofed to Pale Moon!). The worst symptoms were mitigated with an out-of-band release of Pale moon 33.6.0.1, which still suffers from the script hang but can recover after the script termination watchdog kicks in.</p><p>

<span>Limited communication channels available and being ghosted</span></p><p>

CloudFlare has extremely limited communication channels available. End users can only post in the self-help "community", webmasters/clients can only get direct communication with CloudFlare by being on one of the higher tier CloudFlare subscriptions, and third party software vendors (like myself) have no direct channel of communication with CloudFlare at all, despite being directly affected by their hold on many of the Internet's services/availability.<br>
Even more so, attempting to contect them through what channels are available resulted in me being ghosted. A request for contact and opening a dialogue for the on-going issues was opened on Feb 13th 2025, nearly 2 weeks ago, with so far 0 response.
</p><blockquote><p><cite>notifications@cloudflare.com wrote:</cite>Your request (01388216) has been submitted, and we will be contacting you soon.</p></blockquote>

<p><span>Status</span></p><p>

Our current status is and remains that any and all websites that are behind a CloudFlare captcha or having activated their "I'm under attack" mode/turnstile pages, are unreachable from Pale Moon and other browsers. The issue in 2022 lasted approximately 2 weeks. This time we're left dead i the water for nearly a month as of the time of writing, with no view on any of this being resolved, no information from CloudFlare, no official statements (other than their short list of commercial browsers listed on their site that they "support"), and a clear and present discrimination against independent, Open Source projects like ours.<br>
Consequentially, our project is currently losing daily active users, and we're being damaged with our traffic-based income being undermined as a result. The longer this lasts, the greater the damage is. Unfortunately my options are limited.<br>
There are grounds for legal action as a last resort, but international anti-trust litigation is difficult and will likely take the better part of a decade to be resolved if I go by the US legal system.</p></div><p>"The world will not be destroyed by those who do evil, but by those who watch them without doing anything." - <em>Albert Einstein</em><br>
"Seek wisdom, not knowledge. Knowledge is of the past; wisdom is of the future." -- <em>Native American proverb</em><br>
"Linux makes everything difficult." -- <em>Lyceus Anubite</em></p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sign in as anyone: Bypassing SAML SSO authentication with parser differentials (209 pts)]]></title>
            <link>https://github.blog/security/sign-in-as-anyone-bypassing-saml-sso-authentication-with-parser-differentials/</link>
            <guid>43374519</guid>
            <pubDate>Sat, 15 Mar 2025 19:06:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.blog/security/sign-in-as-anyone-bypassing-saml-sso-authentication-with-parser-differentials/">https://github.blog/security/sign-in-as-anyone-bypassing-saml-sso-authentication-with-parser-differentials/</a>, See on <a href="https://news.ycombinator.com/item?id=43374519">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
	
<blockquote><p>Critical authentication bypass vulnerabilities (CVE-2025-25291 + CVE-2025-25292) were discovered in ruby-saml up to version 1.17.0. Attackers who are in possession of a single valid signature that was created with the key used to validate SAML responses or assertions of the targeted organization can use it to construct SAML assertions themselves and are in turn able to log in as any user. In other words, it could be used for an account takeover attack. Users of ruby-saml should update to version 1.18.0. References to libraries making use of ruby-saml (such as omniauth-saml) need also be updated to a version that reference a fixed version of ruby-saml.</p></blockquote>
<p>In this blog post, we detail newly discovered authentication bypass vulnerabilities in the <a href="https://github.com/SAML-Toolkits/ruby-saml">ruby-saml</a> library used for single sign-on (SSO) via SAML on the service provider (application) side. GitHub doesn’t currently use ruby-saml for authentication, but began evaluating the use of the library with the intention of using an open source library for SAML authentication once more. This library is, however, used in other popular projects and products. We discovered an exploitable instance of this vulnerability in GitLab, and have notified their security team so they can take necessary actions to protect their users against potential attacks.</p>
<p>GitHub previously used the ruby-saml library up to 2014, but moved to our own SAML implementation due to missing features in ruby-saml at that time. Following bug bounty reports around vulnerabilities in our own implementation (such as <a href="https://docs.github.com/en/enterprise-server@3.13/admin/release-notes#3.13.5-security-fixes">CVE-2024-9487</a>, related to encrypted assertions), GitHub recently decided to explore the use of ruby-saml again. Then in October 2024, a blockbuster vulnerability dropped: an <a href="https://github.com/advisories/GHSA-jw9c-mfg7-9rx2">authentication bypass</a> in ruby-saml (CVE-2024-45409) by <a href="https://hackerone.com/ahacker1">ahacker1</a>. With tangible evidence of exploitable attack surface, GitHub’s switch to ruby-saml had to be evaluated more thoroughly now. As such, GitHub started a <a href="https://hackerone.com/github">private bug bounty engagement</a> to evaluate the security of the ruby-saml library. We gave selected bug bounty researchers access to GitHub test environments using ruby-saml for SAML authentication. In tandem, the GitHub Security Lab also reviewed the attack surface of the ruby-saml library.</p>
<p>As is not uncommon when multiple researchers are looking at the same code, both ahacker1, a participant in the <a href="https://hackerone.com/github">GitHub bug bounty program</a>, and I noticed the same thing during code review: ruby-saml was using two different XML parsers during the code path of signature verification. Namely, REXML and Nokogiri. While REXML is an XML parser implemented in pure Ruby, Nokogiri provides an easy-to-use wrapper API around different libraries like libxml2, libgumbo and Xerces (used for JRuby). Nokogiri supports parsing of XML and HTML. It looks like Nokogiri was added to ruby-saml to support <a href="https://en.wikipedia.org/wiki/Canonical_XML">canonicalization</a> and potentially other things REXML didn’t support at that time.</p>
<p>We both inspected the same code path in the <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L268"><code>validate_signature</code></a> of <code>xml_security.rb</code> and found that the signature element to be verified is first read via REXML, and then also with Nokogiri’s XML parser. So, if REXML and Nokogiri could be tricked into retrieving different signature elements for the same XPath query it might be possible to trick ruby-saml into verifying the wrong signature. It looked like there could be a potential authentication bypass due to a <strong>parser differential</strong>!</p>
<p>The reality was actually more complicated than this.</p>

<p>Roughly speaking, four stages were involved in the discovery of this authentication bypass:</p>
<ol>
<li>Discovering that two different XML parsers are used during code review.  </li>
<li>Establishing if and how a parser differential could be exploited.  </li>
<li>Finding an actual parser differential for the parsers in use.  </li>
<li>Leveraging the parser differential to create a full-blown exploit.</li>
</ol>
<p>To prove the security impact of this vulnerability, it was necessary to complete all four stages and create a full-blown authentication bypass exploit.</p>
<h2 id="quick-recap-how-saml-responses-are-validated">Quick recap: how SAML responses are validated<a href="#quick-recap-how-saml-responses-are-validated" aria-label="Quick recap: how SAML responses are validated"></a></h2>
<p>Security assertion markup language (<a href="https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language">SAML</a>) responses are used to transport information about a signed-in user from the identity provider (IdP) to the service provider (SP) in XML format. Often the only important information transported is a username or an email address. When the HTTP POST binding is used, the SAML response travels from the IdP to the SP via the browser of the end user. This makes it obvious why there has to be some sort of signature verification in play to prevent the user from tampering with the message.</p>
<p>Let’s have a quick look at what a simplified SAML response looks like:<br>
<img data-recalc-dims="1" decoding="async" loading="lazy" src="https://github.blog/wp-content/uploads/2025/03/goodassertion7_2.png?resize=1024%2C355" alt="A diagram depicting a simplified SAML response on the left and the verification of the digest and the signature on the right." width="1024" height="355" srcset="https://github.blog/wp-content/uploads/2025/03/goodassertion7_2.png?w=2632 2632w, https://github.blog/wp-content/uploads/2025/03/goodassertion7_2.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/goodassertion7_2.png?w=768 768w, https://github.blog/wp-content/uploads/2025/03/goodassertion7_2.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/03/goodassertion7_2.png?w=1536 1536w, https://github.blog/wp-content/uploads/2025/03/goodassertion7_2.png?w=2048 2048w" sizes="auto, (max-width: 1000px) 100vw, 1000px"></p>
<p><em>Note: in the response above the XML namespaces were removed for better readability.</em></p>
<p>As you might have noticed: the main part of a simple SAML response is its assertion element (A), whereas the main information contained in the assertion is the information contained in the <code>Subject</code> element (B) (here the NameID containing the username: admin). A real assertion typically contains more information (e.g. <code>NotBefore</code> and <code>NotOnOrAfter</code> dates as part of a <code>Conditions</code> element.)</p>
<p>Normally, the <code>Assertion</code> (A) (without the whole <code>Signature</code> part) is <a href="https://en.wikipedia.org/wiki/Canonical_XML">canonicalized</a> and then compared against the <code>DigestValue</code> (C) and the <code>SignedInfo</code> (D) is canonicalized and verified against the <code>SignatureValue</code> (E). In this sample, the assertion of the SAML response is signed, and in other cases the whole SAML response is signed.</p>
<h2 id="searching-for-parser-differentials">Searching for parser differentials<a href="#searching-for-parser-differentials" aria-label="Searching for parser differentials"></a></h2>
<p>We learned that ruby-saml used two different XML parsers (REXML and Nokogiri) for validating the SAML response. Now let’s have a look at the verification of the signature and the digest comparison.<br>
The focus of the following explanation lies on the <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L268"><code>validate_signature</code></a> method inside of <code>xml_security.rb</code>.</p>
<p>Inside that method, there’s a broad XPath <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L278C1-L282C8">query</a> with REXML for the first signature element inside the SAML document:</p>
<pre><code>sig_element = REXML::XPath.first(
  @working_copy,
  "//ds:Signature",
  {"ds"=&gt;DSIG}
)
</code></pre>
<p><em>Hint: When reading the code snippets, you can tell the difference between queries for REXML and Nokogiri by looking at how they are called. REXML methods are prefixed with <code>REXML::</code>, whereas Nokogiri methods are called on <code>document</code>.</em></p>
<p>Later, the actual <code>SignatureValue</code> is <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L293C1-L298C92">read</a> from this element:</p>
<pre><code>base64_signature = REXML::XPath.first(
  sig_element,
  "./ds:SignatureValue",
  {"ds" =&gt; DSIG}
)
signature = Base64.decode64(OneLogin::RubySaml::Utils.element_text(base64_signature))
</code></pre>
<p>Note: the name of the <code>Signature</code> element might be a bit confusing. While it contains the actual signature in the <code>SignatureValue</code> node it also contains the part that is actually signed in the <code>SignedInfo</code> node. Most importantly the <code>DigestValue</code> element contains the digest (hash) of the assertion and information about the used key.</p>
<p>So, an actual <code>Signature</code> element could look like this (removed namespace information for better readability):</p>
<pre><code>&lt;Signature&gt;
    &lt;SignedInfo&gt;
        &lt;CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" /&gt;
        &lt;SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /&gt;
        &lt;Reference URI="#_SAMEID"&gt;
            &lt;Transforms&gt;&lt;Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" /&gt;&lt;/Transforms&gt;
            &lt;DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /&gt;
            &lt;DigestValue&gt;Su4v[..]&lt;/DigestValue&gt;
        &lt;/Reference&gt;
    &lt;/SignedInfo&gt;
    &lt;SignatureValue&gt;L8/i[..]&lt;/SignatureValue&gt;
    &lt;KeyInfo&gt;
        &lt;X509Data&gt;
            &lt;X509Certificate&gt;MIID[..]&lt;/X509Certificate&gt;
        &lt;/X509Data&gt;
    &lt;/KeyInfo&gt;
&lt;/Signature&gt;
</code></pre>
<p>Later in the same method (<code>validate_signature</code>) there’s again a <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L307">query for the Signature</a>(s)—but this time with Nokogiri.</p>
<pre><code>noko_sig_element = document.at_xpath('//ds:Signature', 'ds' =&gt; DSIG)
</code></pre>
<p>Then the <code>SignedInfo</code> element is taken from that signature and <a href="https://en.wikipedia.org/wiki/Canonical_XML">canonicalized</a>:</p>
<pre><code>noko_signed_info_element = noko_sig_element.at_xpath('./ds:SignedInfo', 'ds' =&gt; DSIG)

canon_string = noko_signed_info_element.canonicalize(canon_algorithm)
</code></pre>
<p>Let’s remember this <code>canon_string</code> contains the canonicalized <code>SignedInfo</code> element.</p>
<p>The <code>SignedInfo</code> element is then also <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L314C6-L318C8">extracted</a> with REXML:</p>
<pre><code> signed_info_element = REXML::XPath.first(
        sig_element,
        "./ds:SignedInfo",
        { "ds" =&gt; DSIG }
 )
</code></pre>
<p>From this <code>SignedInfo</code> element the <code>Reference</code> node is <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L324">read</a>:</p>
<pre><code>ref = REXML::XPath.first(signed_info_element, "./ds:Reference", {"ds"=&gt;DSIG})
</code></pre>
<p>Now the code <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L326C1-L327C1">queries for the referenced node</a> by looking for nodes with the signed element id using Nokogiri:</p>
<pre><code>reference_nodes = document.xpath("//*[@ID=$id]", nil, { 'id' =&gt; extract_signed_element_id })
</code></pre>
<p>The method <code>extract_signed_element_id</code> <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L406C9-L406C34">extracts</a> the signed element id with help of REXML. From the previous authentication bypass (CVE-2024-45409), there’s now a <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L328">check</a> that only one element with the same ID can exist.</p>
<p>The first of the <code>reference_nodes</code> is taken and canonicalized:</p>
<pre><code>hashed_element = reference_nodes[0][..]canon_hashed_element = hashed_element.canonicalize(canon_algorithm, inclusive_namespaces)
</code></pre>
<p>The <code>canon_hashed_element</code> is then <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L349C7-L349C59">hashed</a>:</p>
<pre><code>hash = digest_algorithm.digest(canon_hashed_element)
</code></pre>
<p>The <code>DigestValue</code> to compare it against is then <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L350C7-L355C99">extracted</a> with REXML:</p>
<pre><code>encoded_digest_value = REXML::XPath.first(
        ref,
        "./ds:DigestValue",
        { "ds" =&gt; DSIG }
      )
digest_value = Base64.decode64(OneLogin::RubySaml::Utils.element_text(encoded_digest_value))
</code></pre>
<p>Finally, the <code>hash</code> (built from the element extracted by Nokogiri) is <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L357">compared</a> against the <code>digest_value</code> (extracted with REXML):</p>
<pre><code>unless digests_match?(hash, digest_value)
</code></pre>
<p>The <code>canon_string</code> extracted some lines ago (a result of an extraction with Nokogiri) is later <a href="https://github.com/SAML-Toolkits/ruby-saml/blob/21b676bdf55452750d8ee5facd2f6e3c51927315/lib/xml_security.rb#L366C7-L366C86">verified against</a> <code>signature</code> (extracted with REXML).</p>
<pre><code>unless cert.public_key.verify(signature_algorithm.new, signature, canon_string)
</code></pre>
<p>In the end, we have the following constellation:</p>
<ol>
<li>The assertion is extracted and canonicalized with Nokogiri, and then hashed. In contrast, the hash against which it will be compared is extracted with REXML.  </li>
<li>The SignedInfo element is extracted and canonicalized with Nokogiri - it is then verified against the SignatureValue, which was extracted with REXML.</li>
</ol>
<h2 id="exploiting-the-parser-differential">Exploiting the parser differential<a href="#exploiting-the-parser-differential" aria-label="Exploiting the parser differential"></a></h2>
<p>The question is: is it possible to create an XML document where REXML sees one signature and Nokogiri sees another?</p>
<p>It turns out, yes.</p>
<p>Ahacker1, participating in the bug bounty, was faster to produce a working exploit using a parser differential. Among other things, ahacker1 was inspired by the <a href="https://mattermost.com/blog/securing-xml-implementations-across-the-web/">XML roundtrips vulnerabilities</a> published by Mattermost’s Juho Forsén in 2021.</p>
<p>Not much later, I produced an exploit using a different parser differential with the help of <a href="https://blog.trailofbits.com/2024/03/29/introducing-ruzzy-a-coverage-guided-ruby-fuzzer/">Trail of Bits’ Ruby fuzzer</a> called ruzzy.</p>
<p>Both exploits result in an authentication bypass. Meaning that an attacker, who is in possession of a single valid signature that was created with the key used to validate SAML responses or assertions of the targeted organization, can use it to construct assertions for any users which will be accepted by ruby-saml. Such a signature can either come from a signed assertion or response from another (unprivileged) user or in certain cases, it can even come from signed metadata of a SAML identity provider (which can be publicly accessible).</p>
<p>An exploit could look like this. Here, an additional Signature was added as part of the <code>StatusDetail</code> element that is only visible to Nokogiri:</p>
<p><img data-recalc-dims="1" decoding="async" loading="lazy" src="https://github.blog/wp-content/uploads/2025/03/rubysaml-parser-diff-simplified8_2.png?resize=1024%2C400" alt="A diagram depicting a simplified SAML response on the left and the verification of the digest and the signature on the right. For both the signature and the digest verification one part is extracted using Nokogiri and the other using REXML." width="1024" height="400" srcset="https://github.blog/wp-content/uploads/2025/03/rubysaml-parser-diff-simplified8_2.png?w=3496 3496w, https://github.blog/wp-content/uploads/2025/03/rubysaml-parser-diff-simplified8_2.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/rubysaml-parser-diff-simplified8_2.png?w=768 768w, https://github.blog/wp-content/uploads/2025/03/rubysaml-parser-diff-simplified8_2.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/03/rubysaml-parser-diff-simplified8_2.png?w=1536 1536w, https://github.blog/wp-content/uploads/2025/03/rubysaml-parser-diff-simplified8_2.png?w=2048 2048w, https://github.blog/wp-content/uploads/2025/03/rubysaml-parser-diff-simplified8_2.png?w=3000 3000w" sizes="auto, (max-width: 1000px) 100vw, 1000px"></p>
<p>In summary:</p>
<p>The <code>SignedInfo</code> element (A) from the signature that is visible to Nokogiri is canonicalized and verified against the <code>SignatureValue</code> (B) that was extracted from the signature seen by REXML.</p>
<p>The assertion is retrieved via Nokogiri by looking for its ID. This assertion is then canonicalized and hashed (C). The hash is then compared to the hash contained in the <code>DigestValue</code> (D). This DigestValue was retrieved via REXML. This DigestValue has no corresponding signature.</p>
<p>So, two things take place:</p>
<ul>
<li>A valid SignedInfo with DigestValue is verified against a valid signature. (which checks out)  </li>
<li>A fabricated canonicalized assertion is compared against its calculated digest. (which checks out as well)</li>
</ul>
<p>This allows an attacker, who is in possession of a valid signed assertion for any (unprivileged) user, to fabricate assertions and as such impersonate any other user.</p>
<h3 id="check-for-errors-when-using-nokogiri">Check for errors when using Nokogiri<a href="#check-for-errors-when-using-nokogiri" aria-label="Check for errors when using Nokogiri"></a></h3>
<p>Parts of the currently known, undisclosed exploits can be stopped by checking for Nokogiri parsing errors on SAML responses. Sadly, those errors do not result in exceptions, but need to be checked on the <a href="https://www.rubydoc.info/github/sparklemotion/nokogiri/Nokogiri%2FXML%2FDocument:errors"><code>errors</code></a> member of the parsed document:</p>
<pre><code>doc = Nokogiri::XML(xml) do |config|
  config.options = Nokogiri::XML::ParseOptions::STRICT | Nokogiri::XML::ParseOptions::NONET
end

raise "XML errors when parsing: " + doc.errors.to_s if doc.errors.any?
</code></pre>
<p>While this is far from a perfect fix for the issues at hand, it renders at least one exploit infeasible.</p>
<h2 id="indicators-of-compromise">Indicators of compromise<a href="#indicators-of-compromise" aria-label="Indicators of compromise"></a></h2>
<p>We are not aware of any reliable indicators of compromise. While we’ve found a potential indicator of compromise, it only works in debug-like environments and to publish it, we would have to reveal too many details about how to implement a working exploit so we’ve decided that it’s better not to publish it. Instead, our best recommendation is to look for suspicious logins via SAML on the service provider side from IP addresses that do not align with the user’s expected location.</p>
<h2 id="saml-and-xml-signaturesas-confusing-as-it-gets">SAML and XML signatures:as confusing as it gets<a href="#saml-and-xml-signaturesas-confusing-as-it-gets" aria-label="SAML and XML signatures:as confusing as it gets"></a></h2>
<p>Some might say it’s hard to integrate systems with SAML. That might be true. However, it’s even harder to write implementations of SAML using XML signatures in a secure way. As others have stated before: it’s probably best to <a href="https://ssoready.com/blog/engineering/ruby-saml-pwned-by-xml-signature-wrapping-attacks/#how-to-fix-this-disregard-the-spec">disregard the specifications</a>, as following them doesn’t help build secure implementations.<br>
To rehash how the validation works if the SAML assertion is signed, let’s have a look at the graphic below,  depicting a simplified SAML response. The assertion, which transports the protected information, contains a signature. Confusing, right?</p>
<p><img data-recalc-dims="1" decoding="async" loading="lazy" src="https://github.blog/wp-content/uploads/2025/03/conclusion-combined-saml.png?resize=1024%2C497" alt="A diagram showing a SAML response and its parts: the Assertion containing the Signature and the Signature containing the SignedInfo of which the DigestValue is a part." width="1024" height="497" srcset="https://github.blog/wp-content/uploads/2025/03/conclusion-combined-saml.png?w=1768 1768w, https://github.blog/wp-content/uploads/2025/03/conclusion-combined-saml.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/conclusion-combined-saml.png?w=768 768w, https://github.blog/wp-content/uploads/2025/03/conclusion-combined-saml.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/03/conclusion-combined-saml.png?w=1536 1536w" sizes="auto, (max-width: 1000px) 100vw, 1000px"></p>
<p>To complicate it even more: What is even signed here? The whole assertion? No!</p>
<p>What’s signed is the <code>SignedInfo</code> element and the <code>SignedInfo</code> element contains a <code>DigestValue</code>. This <code>DigestValue</code> is the hash of the canonicalized assertion with the signature element removed before the canonicalization. This two-stage verification process can lead to implementations that have a disconnect between the verification of the hash and the verification of the signature. This is the case for these Ruby-SAML parser differentials: while the hash and the signature check out on their own, they have no connection. The hash is actually a hash of the assertion, but the signature is a signature of a different <code>SignedInfo</code> element containing another hash. What you actually want is a direct connection between the hashed content, the hash, and the signature. (And once the verification is done you only want to retrieve information from the exact part that was actually verified.) Or, alternatively, use a less complicated standard to transport a cryptographically signed username between two systems - but here we are.</p>
<p>In this case, the library already extracted the <code>SignedInfo</code> and used it to verify the signature of its canonicalized string,<code>canon_string</code>. However, it did not use it to obtain the digest value. If the library had used the content of the already extracted <code>SignedInfo</code> to obtain the digest value, it would have been secure in this case even with two XML parsers in use.</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" aria-label="Conclusion"></a></h2>
<p>As shown once again: relying on two different parsers in a security context can be tricky and error-prone. That being said: exploitability is not automatically guaranteed in such cases. As we have seen in this case, checking for Nokogiri errors could not have prevented the parser differential, but could have stopped at least one practical exploitation of it.</p>
<p>The initial fix for the authentication bypasses does not remove one of the XML parsers to prevent API compatibility problems. As noted, the more fundamental issue was the disconnect between verification of the hash and verification of the signature, which was exploitable via parser differentials. The <a href="https://github.com/SAML-Toolkits/ruby-saml/pull/736">removal of one of the XML</a> parsers was already planned for other reasons, and will likely come as part of a major release in combination with additional improvements to strengthen the library. If your company relies on open source software for business-critical functionality, consider <a href="https://github.com/sponsors">sponsoring</a> them to help fund their future development and bug fix releases.</p>
<p>If you’re a user of ruby-saml library, make sure to update to the latest version, 1.18.0, containing fixes for <a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-4vc4-m8qh-g8jm">CVE-2025-25291</a> and <a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-754f-8gm6-c4r2">CVE-2025-25292</a>. References to libraries making use of ruby-saml (such as <a href="https://github.com/omniauth/omniauth-saml">omniauth-saml</a>) need also be updated to a version that reference a fixed version of ruby-saml. We will publish a proof of concept exploit at a later date in the <a href="https://github.com/github/securitylab">GitHub Security Lab repository</a>.</p>
<h3 id="acknowledgments">Acknowledgments<a href="#acknowledgments" aria-label="Acknowledgments"></a></h3>
<p>Special thanks to Sixto Martín, maintainer of ruby-saml, and Jeff Guerra from the GitHub Bug Bounty program.<br>
Special thanks also to ahacker1 for giving inputs to this blog post.</p>
<h3 id="timeline">Timeline<a href="#timeline" aria-label="Timeline"></a></h3>
<ul>
<li>2024-11-04: Bug bounty report demonstrating an authentication bypass was reported against a GitHub test environment evaluating ruby-saml for SAML authentication.  </li>
<li>2024-11-04: Work started to identify and test potential mitigations.  </li>
<li>2024-11-12: A second authentication bypass was found by Peter that renders the planned mitigations for the first useless.  </li>
<li>2024-11-13: Initial contact with Sixto Martín, maintainer of ruby-saml.  </li>
<li>2024-11-14: Both parser differentials are reported to ruby-saml, the maintainer responds immediately.  </li>
<li>2024-11-14: The work on potential patches by the maintainer and ahacker1 begins. (One of the initial ideas was to remove one of the XML parsers, but this was not feasible without breaking backwards compatibility).  </li>
<li>2025-02-04: ahacker1 proposes a non-backwards compatible fix.  </li>
<li>2025-02-06: ahacker1 also proposes a backwards compatible fix.  </li>
<li>2025-02-12: The 90 days deadline of GitHub Security Lab advisories ends.  </li>
<li>2025-02-16: The maintainer starts working on a fix with the idea to be backwards-compatible and easier to understand.  </li>
<li>2025-02-17: Initial contact with GitLab to coordinate a release of their on-prem product with the release of the ruby-saml library.  </li>
<li>2025-03-12: A fixed version of ruby-saml was released.</li>
</ul>

	
<section>
	<hr>
	<div>
		<h2>Tags:</h2>
		<ul>
							<li>
					<a href="https://github.blog/tag/authentication/" rel="tag">
						authentication					</a>
				</li>
							<li>
					<a href="https://github.blog/tag/github-security-lab/" rel="tag">
						GitHub Security Lab					</a>
				</li>
							<li>
					<a href="https://github.blog/tag/ruby/" rel="tag">
						ruby					</a>
				</li>
							<li>
					<a href="https://github.blog/tag/saml/" rel="tag">
						SAML					</a>
				</li>
							<li>
					<a href="https://github.blog/tag/vulnerability/" rel="tag">
						vulnerability					</a>
				</li>
					</ul>
	</div>
</section>
	<div>
	<h2>
		Written by	</h2>
	
			<article>
	<div>
					<div>
				<picture>
					<source srcset="https://avatars.githubusercontent.com/u/176818?v=4&amp;s=200" width="120" height="120" media="(min-width: 768px)">
					<img src="https://avatars.githubusercontent.com/u/176818?v=4&amp;s=200" alt="Peter Stöckli" width="80" height="80" loading="lazy" decoding="async">
				</picture>
			</div>
				
					<p>Security Researcher at GitHub Security Lab</p>
			</div>
</article>
	</div>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How many artists' careers did the Beatles kill? (159 pts)]]></title>
            <link>https://www.cantgetmuchhigher.com/p/how-many-artists-did-the-beatles</link>
            <guid>43373765</guid>
            <pubDate>Sat, 15 Mar 2025 17:05:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cantgetmuchhigher.com/p/how-many-artists-did-the-beatles">https://www.cantgetmuchhigher.com/p/how-many-artists-did-the-beatles</a>, See on <a href="https://news.ycombinator.com/item?id=43373765">Hacker News</a></p>
Couldn't get https://www.cantgetmuchhigher.com/p/how-many-artists-did-the-beatles: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: A personal YouTube frontend based on yt-dlp (218 pts)]]></title>
            <link>https://github.com/christian-fei/my-yt</link>
            <guid>43373242</guid>
            <pubDate>Sat, 15 Mar 2025 15:45:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/christian-fei/my-yt">https://github.com/christian-fei/my-yt</a>, See on <a href="https://news.ycombinator.com/item?id=43373242">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">my-yt</h2><a id="user-content-my-yt" aria-label="Permalink: my-yt" href="#my-yt"></a></p>
<blockquote>
<p dir="auto">MYGA - make <em>you</em>tube <strong>great</strong> again</p>
</blockquote>
<p dir="auto">A clean and minimal youtube frontend, without all the ads and whistles.
Supported by yt-dlp, and optionally your local AI model, to make your youtube experience local, mindful, succint and ad free.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/christian-fei/my-yt/blob/main/preview.png"><img src="https://github.com/christian-fei/my-yt/raw/main/preview.png" alt="preview my-yt"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>Channel management/Subscriptions</li>
<li>Download videos from YouTube, using <code>yt-dlp</code> behind the scenes</li>
<li>Summarize video content using your local AI model</li>
<li>Ignore videos you don't want to watch</li>
<li>Play videos in background</li>
<li>Offline media playback</li>
<li>No dependencies (except for <code>nano-spawn</code>), HTML/CSS only, no JS frameworks on client/server side</li>
<li>Host it in your home network to playback videos on all your devices</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why?</h2><a id="user-content-why" aria-label="Permalink: Why?" href="#why"></a></p>
<ul dir="auto">
<li><strong>Why not??</strong></li>
<li>wanted to get back my chronological feed, instead of a "algorithmically curated" one</li>
<li>no distractions, no ads, just videos and a clean UI</li>
<li>wanted to try integrate the so much hyped AI in a personal project</li>
<li>wanted to try out <code>yt-dlp</code></li>
<li>I am even paying for YouTube Premium, so it's not a matter of money, but a matter of control over my attention and offline experience</li>
</ul>
<blockquote>
<p dir="auto">Application runs on <a href="http://localhost:3000/" rel="nofollow">http://localhost:3000</a></p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation (node.js)</h2><a id="user-content-installation-nodejs" aria-label="Permalink: Installation (node.js)" href="#installation-nodejs"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/christian-fei/my-yt.git
cd my-yt
npm i
# install yt-dlp, please see https://github.com/yt-dlp/yt-dlp

npm start"><pre>git clone https://github.com/christian-fei/my-yt.git
<span>cd</span> my-yt
npm i
<span><span>#</span> install yt-dlp, please see https://github.com/yt-dlp/yt-dlp</span>

npm start</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation (docker)</h2><a id="user-content-installation-docker" aria-label="Permalink: Installation (docker)" href="#installation-docker"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/christian-fei/my-yt.git
cd my-yt
docker compose up --build -d"><pre>git clone https://github.com/christian-fei/my-yt.git
<span>cd</span> my-yt
docker compose up --build -d</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Project</h2><a id="user-content-project" aria-label="Permalink: Project" href="#project"></a></p>
<p dir="auto">Here are some links to help you understand the project better:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://github.com/christian-fei/my-yt/blob/main/lib/server.js">server.js</a></h3><a id="user-content-serverjs" aria-label="Permalink: server.js" href="#serverjs"></a></p>
<p dir="auto">Bare HTTP server</p>
<p dir="auto">Handles SSE for client updates</p>
<p dir="auto">Implements HTTP Ranged requests for video playback</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://github.com/christian-fei/my-yt/blob/main/lib/llm.js">llm.js</a></h3><a id="user-content-llmjs" aria-label="Permalink: llm.js" href="#llmjs"></a></p>
<p dir="auto">Makes requests using the chat completions API of LMStudio.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://github.com/christian-fei/my-yt/blob/main/lib/sse.js">sse.js</a></h3><a id="user-content-ssejs" aria-label="Permalink: sse.js" href="#ssejs"></a></p>
<p dir="auto">Utility functions for Server-sent events</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://github.com/christian-fei/my-yt/blob/main/lib/subtitles-summary.js">subtitles-summary.js</a></h3><a id="user-content-subtitles-summaryjs" aria-label="Permalink: subtitles-summary.js" href="#subtitles-summaryjs"></a></p>
<p dir="auto">Summarizes video transcript using LMStudio API</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://github.com/christian-fei/my-yt/blob/main/lib/youtube.js">youtube.js</a></h3><a id="user-content-youtubejs" aria-label="Permalink: youtube.js" href="#youtubejs"></a></p>
<p dir="auto">yt-dlp wrapper to download videos, get channel videos and video information and transcript</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://github.com/christian-fei/my-yt/blob/main/lib/repository.js">repository.js</a></h3><a id="user-content-repositoryjs" aria-label="Permalink: repository.js" href="#repositoryjs"></a></p>
<p dir="auto">Handles persistence of video information (set video as downloaded, summary, ignored, upserting videos, etc.)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://github.com/christian-fei/my-yt/tree/main/client">client</a></h3><a id="user-content-client" aria-label="Permalink: client" href="#client"></a></p>
<p dir="auto">dependency less, bare HTML5, CSS3 and JS for a basic frontend</p>
<p dir="auto">Handles SSE updates, interacting with the API</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">General information</h2><a id="user-content-general-information" aria-label="Permalink: General information" href="#general-information"></a></p>
<p dir="auto">Currently, on the LLM side of things:</p>
<ul dir="auto">
<li>supports basic chat completions API (LMStudio right now)
<ul dir="auto">
<li>expects <code>lms server</code> to be running on <code>http://localhost:1234</code></li>
</ul>
</li>
<li>works with <code>meta-llama-3.1-8b-instruct</code> model</li>
<li>customization will come in the future if there's enough interest (let me know by opening an issue or pull-request)</li>
</ul>
<hr>
<p dir="auto">Download the project while you can before I get striked with a DMCA takedown request</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lemma for the Fundamental Theorem of Galois Theory (118 pts)]]></title>
            <link>https://susam.net/lemma-for-ftgt.html</link>
            <guid>43373196</guid>
            <pubDate>Sat, 15 Mar 2025 15:38:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://susam.net/lemma-for-ftgt.html">https://susam.net/lemma-for-ftgt.html</a>, See on <a href="https://news.ycombinator.com/item?id=43373196">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>By <b>Susam Pal</b> on 09 Mar 2025</p>
<h2 id="introduction">Introduction<a href="#introduction"></a></h2>
<p>
  This post illustrates a key lemma that is used in proving
  the <em>fundamental theorem of Galois theory</em> (FTGT).  Note that
  FTGT is not covered in this post.  The focus of this post is on
  understanding and proving this lemma only.  Here is the lemma from
  the book <em>Galois Theory</em>, 5th ed. by Stewart (2023):
</p>
<p>
    <strong>Lemma 12.1.</strong>
    <em>
      Suppose that \( L/K \) is a field extension, \( M \) is an
      intermediate field, and \( \tau \) is a \( K \)-automorphism of \(
      L.  \)  Then \( \tau M^* \tau^{-1} = \tau(M)^{*}.  \)
    </em>
  </p>
<p>
  The notation \( M^* \) denotes the group of all
  \( M \)-automorphisms of \( L \) with composition as the group
  operation.  Note that Stewart writes \( \tau(M)^{*} = \tau M^*
  \tau^{-1} \) while stating the lemma but I have reversed the LHS and
  RHS to maintain consistency with the equations that appear in the
  discussion below.
</p>
<p>
  To build intuition for this lemma, I'll first present an
  illustration, followed by a proof.  The discussion below assumes
  familiarity with field extensions and field automorphisms, as
  several notations and results from these areas will be used
  implicitly without detailed justification.  This post is meant to
  serve as a set of notes on the lemma, not a comprehensive tutorial.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#illustration">Illustration</a>
    <ul>
      <li><a href="#concrete-example">Concrete Example</a></li>
      <li><a href="#lhs-subset-of-rhs">LHS ⊆ RHS</a></li>
      <li><a href="#lhs-superset-of-rhs">LHS ⊇ RHS</a></li>
      <li><a href="#lhs-equals-rhs">LHS = RHS</a></li>
    </ul>
  </li>
  <li><a href="#proof">Proof</a></li>
</ul>
<h2 id="illustration">Illustration<a href="#illustration"></a></h2>
<h3 id="concrete-example">Concrete Example<a href="#concrete-example"></a></h3>
<p>
  Let \( L = \mathbb{Q}(\sqrt{2}, \sqrt{3}), \) \( K = \mathbb{Q}, \)
  and \( M = \mathbb{Q}(\sqrt{2}).  \)  Note that

  \begin{align*}
    L &amp;= \{ a + b \sqrt{2} + c \sqrt{3} + d \sqrt{6} : a, b, c, d \in \mathbb{Q} \}, \\
    M &amp;= \{ k + l \sqrt{2} : k, l \in \mathbb{Q} \}.
  \end{align*}

  Now the group of \( K \)-automorphisms of \( L \) is

  \[
    K^* = \{\phi_1, \phi_2, \phi_3, \phi_4 \}
  \]

  where each \( \phi_i \) is given by

  \begin{align*}
    \phi_1 &amp;:
    a + b \sqrt{2} + c \sqrt{3} + d \sqrt{6} \mapsto
    a + b \sqrt{2} + c \sqrt{3} + d \sqrt{6}, \\

    \phi_2 &amp;:
    a + b \sqrt{2} + c \sqrt{3} + d \sqrt{6} \mapsto
    a - b \sqrt{2} + c \sqrt{3} - d \sqrt{6}, \\

    \phi_3 &amp;:
    a + b \sqrt{2} + c \sqrt{3} + d \sqrt{6} \mapsto
    a + b \sqrt{2} - c \sqrt{3} - d \sqrt{6}, \\

    \phi_4 &amp;:
    a + b \sqrt{2} + c \sqrt{3} + d \sqrt{6} \mapsto
    a - b \sqrt{2} - c \sqrt{3} + d \sqrt{6}.
  \end{align*}

  Then \( M^* = \{ \phi_1, \phi_3 \}.  \)  Let \( \tau = \phi_2.  \)
  Then

  \begin{align*}
  \tau(M)
    &amp;= \{ \tau(x) : x \in \mathbb{M} \} \\
    &amp;= \{ \tau(k + l \sqrt{2}) : k, l \in \mathbb{Q} \} \\
    &amp;= \{ k - l \sqrt{2} : k, l \in \mathbb{Q} \}.
  \end{align*}

  Note that in this case we ended up with \( \tau(M) = M \) but we
  will be careful not to utilise this fact.  We will ensure that the
  steps below work without assuming \( \tau(M) = M.  \)  Next we find

  \begin{equation}
    \tau(M)^* = \{ \phi_1, \phi_3 \}.
    \label{eq-tau-m-ast}
  \end{equation}

  Now

  \begin{align*}
    \tau M^* \tau^{-1}
    &amp;= \{ \tau \gamma \tau^{-1} : \gamma \in {M^*} \} \\
    &amp;= \{ \tau \phi_1 \tau^{-1}, \tau \phi_3 \tau^{-1} \}.
  \end{align*}

  Let us now find out how each element of \( \tau M^* \tau^{-1} \)
  transforms the elements of \( L.  \)  For all \( a + b \sqrt{2} + c
  \sqrt{3} + d \sqrt{6} \in L, \) we get

  \begin{align*}
    (\tau \phi_1 \tau^{-1})(a + b \sqrt{2} + c \sqrt{3} + d \sqrt{6})
    &amp;= (\tau \phi_1)(a - b\sqrt{2} + c\sqrt{3} - d\sqrt{6}) \\
    &amp;= \tau (a - b\sqrt{2} + c\sqrt{3} - d\sqrt{6}) \\
    &amp;= a + b\sqrt{2} + c\sqrt{3} + d\sqrt{6}).
  \end{align*}

  Therefore

  \[
    \tau \phi_1 \tau^{-1} = \phi_1.
  \]

  Similarly,

  \begin{align*}
    (\tau \phi_3 \tau^{-1})(a + b \sqrt{2} + c \sqrt{3} + d \sqrt{6})
    &amp;= (\tau \phi_3)(a - b\sqrt{2} + c\sqrt{3} - d\sqrt{6}) \\
    &amp;= \tau (a - b\sqrt{2} - c\sqrt{3} + d\sqrt{6}) \\
    &amp;= a + b\sqrt{2} - c\sqrt{3} - d\sqrt{6}.
  \end{align*}

  Therefore

  \[
    \tau \phi_3 \tau^{-1} = \phi_3.
  \]

  We have shown that

  \begin{equation}
    \tau M^* \tau^{-1} = \{ \phi_1, \phi_3 \}.
    \label{eq-tau-coset}
  \end{equation}

  From \eqref{eq-tau-m-ast} and \eqref{eq-tau-coset} we see that

  \[
     \tau M^* \tau^{-1} = \tau(M)^*.
  \]

  Since we are working with a concrete example of \( \tau \) here, we
  know exactly how it behaves, so we succeeded in demonstrating the
  above equality.  However, in a general proof, \( \tau \) is going to
  be an arbitrary \( K \)-automorphism of \( L, \) so we cannot know
  exactly how it behaves and as a result, we cannot obtain the above
  equation directly.  Therefore, in a general proof, we we will first
  show that \( \tau M^* \tau^{-1} \subseteq \tau(M)^* \) and then we
  will show that \( \tau M^* \tau^{-1} \supseteq \tau(M)^* \) in order
  to prove the above equation.
</p>
<h3 id="lhs-subset-of-rhs">LHS ⊆ RHS<a href="#lhs-subset-of-rhs"></a></h3>
<p>
  Once again, let us see how each element of \( \tau M^* \tau^{-1} \)
  transforms the elements of \( \tau(M).  \)  Note that this time we
  are not going to examine how they transform arbitrary elements of \(
  L.  \)  We are only going to see how they transform the elements of
  \( \tau(M).  \)  For all \( k - l \sqrt{2} \in \tau(M), \) we get

  \begin{align*}
    (\tau \phi_1 \tau^{-1})(k - l \sqrt{2})
    &amp;= (\tau \phi_1)(k + l \sqrt{2}) \\
    &amp;= \tau(k + l \sqrt{2}) \\
    &amp;= k - l \sqrt{2}.
  \end{align*}

  Similarly, for all \( k - l \sqrt{2} \in \tau(M), \) we get

  \begin{align*}
    (\tau \phi_3 \tau^{-1})(k - l \sqrt{2})
    &amp;= (\tau \phi_3)(k + l \sqrt{2}) \\
    &amp;= \tau(k + l \sqrt{2}) \\
    &amp;= k - l \sqrt{2}.
  \end{align*}

  Note above that both \( \phi_1 \) and \( \phi_3 \) fix \( k + l
  \sqrt{2} \in M \) because \( \phi_1, \phi_2 \in M^*, \) the set of
  \( M \)-automorphisms of \( L.  \)  This detail will be used in the
  general proof.
</p>
<p>
  Since both \( \tau \phi_1 \tau^{-1} \) and
  \( \tau \phi_3 \tau^{-1} \) fix the elements of \( \tau(M), \) they
  are both \( \tau(M) \)-automorphisms of \( L.  \)  Therefore \( \tau
  M^* \tau^{-1} \subseteq \tau(M)^{*}.  \)
</p>
<h3 id="lhs-superset-of-rhs">LHS ⊇ RHS<a href="#lhs-superset-of-rhs"></a></h3>
<p>
  Consider the set \( \tau^{-1} \tau(M)^* \tau \) and examine how its
  elements transform the elements of \( M.  \)  For all \( k + l
  \sqrt{2} \in M, \) we get

  \begin{align*}
    (\tau^{-1} \phi_1 \tau)(k + l \sqrt{2})
    &amp;= (\tau^{-1} \phi_1)(k - \sqrt{2}) \\
    &amp;= \tau^{-1}(k - \sqrt{2}) \\
    &amp;= k + l \sqrt{2}.
  \end{align*}

  Similarly, for all \( k + l \sqrt{2} \in M, \) we get

  \begin{align*}
    (\tau^{-1} \phi_3 \tau)(k + l \sqrt{2})
    &amp;= (\tau^{-1} \phi_3)(k - \sqrt{2}) \\
    &amp;= \tau^{-1}(k - \sqrt{2}) \\
    &amp;= k + l \sqrt{2}.
  \end{align*}

  Here both \( \phi_1 \) and \( \phi_3 \) fix \( k - l \sqrt{2} \in
  \tau(M) \) because \( \phi_1, \phi_2 \in \tau(M)^*, \) the set of \(
  \tau(M) \)-automorphisms of \( L.  \)
</p>
<p>
  Since both \( \tau^{-1} \phi_1 \tau \) and
  \( \tau^{-1} \phi_3 \tau \) fix the elements of \( M, \) they are
  both \( M \)-automorphisms of \( L.  \)  Therefore \( \tau^{-1}
  \tau(M)^* \tau \subseteq M^* \) which implies \( \tau M^* \tau^{-1}
  \supseteq \tau(M)^*.  \)
</p>
<h3 id="lhs-equals-rhs">LHS = RHS<a href="#lhs-equals-rhs"></a></h3>
<p>
  The previous two sections complete the illustration of the lemma
  with the chosen example.  We have shown that \( \tau M^* \tau^{-1}
  \subseteq \tau(M)^{*} \) and \( \tau M^* \tau^{-1} \supseteq
  \tau(M)^*.  \)  Therefore \( \tau M^* \tau^{-1} = \tau(M)^*.  \)
</p>
<h2 id="proof">Proof<a href="#proof"></a></h2>
<p>
  The ideas presented in the previous sections will now be extended to
  formulate a general proof.  For clarity, the lemma is stated once
  again below before proceeding with the proof.
</p>
<p>
  <strong>Lemma 12.1.</strong>
  <em>
    Suppose that \( L/K \) is a field extension, \( M \) is an
    intermediate field, and \( \tau \) is a \( K \)-automorphism of \(
    L.  \)  Then \( \tau M^* \tau^{-1} = \tau(M)^{*}.  \)
  </em>
</p>
<p>
  <em>Proof.</em>

  For all \( \gamma \in M^*, \) \( x' \in \tau(M), \) we use the
  notation \( x = \tau^{-1}(x') \in M \) and get

  \[
    (\tau \gamma \tau^{-1})(x') = (\tau \gamma)(x) = \tau(x) = x'.
  \]

  In the second equality above, we have used the fact that \( \gamma
  \in M^* \) which implies that \( \gamma \) is an
  \( M \)-automorphism of \( L \) which allows us to conclude that \(
  \gamma(x) = x.  \)  Since every \( \tau \gamma \tau^{-1} \in \tau M^*
  \tau^{-1} \) fixes all elements \( x' \in \tau(M), \) each \( \tau
  \gamma \tau^{-1} \) must be a \( \tau(M) \)-automorphism of \( L.  \)
  Thus \( \tau M^* \tau^{-1} \subseteq \tau(M)^*.  \)
</p>
<p>
  Similarly, for all \( \gamma' \in \tau(M)^*, \) \( x \in M, \) we
  use the notation \( x' = \tau(x) \in \tau(M) \) and get

  \[
  (\tau^{-1} \gamma' \tau)(x) = (\tau^{-1} \gamma')(x') = \tau^{-1}(x') = x.
  \]

  In the second equality above, we have used the fact that \( \gamma'
  \in \tau(M)^* \) which implies that \( \gamma' \) is an
  \( \tau(M) \)-automorphism of \( L \) which allows us to conclude
  that \( \gamma'(x') = x'.  \)  Since every \( \tau^{-1} \gamma' \tau
  \in \tau^{-1} \tau(M)^* \tau \) fixes all elements \( x \in M, \)
  each \( \tau^{-1} \gamma' \tau \) must be an \( M \)-automorphism of
  \( L.  \)  Thus \( \tau^{-1} \tau(M)^* \tau \subseteq M^*.  \)  This
  implies \( \tau M^* \tau^{-1} \supseteq \tau(M)^*.  \)
</p>
<p>
  We have shown that \( \tau M^* \tau^{-1} \subseteq \tau(M)^* \) and
  \( \tau M^* \tau^{-1} \supseteq \tau(M)^*.  \)  Therefore \( \tau M^*
  \tau^{-1} = \tau(M)^*.  \)
</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Milk Kanban (315 pts)]]></title>
            <link>https://brodzinski.com/2025/03/milk-kanban.html</link>
            <guid>43373157</guid>
            <pubDate>Sat, 15 Mar 2025 15:32:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://brodzinski.com/2025/03/milk-kanban.html">https://brodzinski.com/2025/03/milk-kanban.html</a>, See on <a href="https://news.ycombinator.com/item?id=43373157">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">

<figure><img fetchpriority="high" decoding="async" width="1024" height="580" src="https://brodzinski.com/wp-content/uploads/kanban-1-1024x580.jpg" alt="" srcset="https://brodzinski.com/wp-content/uploads/kanban-1-1024x580.jpg 1024w, https://brodzinski.com/wp-content/uploads/kanban-1-400x227.jpg 400w, https://brodzinski.com/wp-content/uploads/kanban-1-768x435.jpg 768w, https://brodzinski.com/wp-content/uploads/kanban-1-1536x870.jpg 1536w, https://brodzinski.com/wp-content/uploads/kanban-1-2048x1161.jpg 2048w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>



<p>When people say Kanban, they tend to think of a specific set of practices. Whiteboards &amp; sticky notes (both almost universally virtual). Tasks moving through columns that represent workflow. Every now and then, WIP limits even.</p>



<p>As often as we do it with other things, it reduces a broader principle to a set of oversimplified techniques, which, in turn, tend to underdeliver in many contexts.</p>



<h2>Kanban</h2>



<p>In its original meaning, Kanban represented a visual signal. The thing that communicated, well, something. It might have been a need, option, availability, capacity, request, etc.</p>



<p>In our Kanban systems, the actual Kanban is a sticky note.</p>



<p>It represents work, and given its closest environment (board, columns, other stickies, visual decorators), it communicates what needs, or needs not, to be done.</p>



<p>If it’s yellow, it’s a regular feature. If there’s a blocker on it, it requests focus. If there’s a long queue of neighbors, it suggests flow inefficiency. If it’s a column named “ready for…” it communicates available work and/or handoff.</p>



<p>A visual signal all the way.</p>



<h2>Visual Signals</h2>



<p>Let’s decouple ourselves from the most standard Kanban board design. Let’s forget columns, sticky notes, and all that jazz.</p>



<p>Enters Kasia, our office manager at Lunar. One of the many things Kasia takes care of is making sure we don’t run out of kitchen supplies. The tricky part is that when you don’t drink milk yourself, it becomes a pain to check the cupboard with milk reserves every now and then to ensure we’re stocked.</p>



<p>Then, one day, I found this.</p>



<figure><img decoding="async" width="1024" height="681" src="https://brodzinski.com/wp-content/uploads/milk-kanban-1-1024x681.jpg" alt="" srcset="https://brodzinski.com/wp-content/uploads/milk-kanban-1-1024x681.jpg 1024w, https://brodzinski.com/wp-content/uploads/milk-kanban-1-400x266.jpg 400w, https://brodzinski.com/wp-content/uploads/milk-kanban-1-768x510.jpg 768w, https://brodzinski.com/wp-content/uploads/milk-kanban-1-1536x1021.jpg 1536w, https://brodzinski.com/wp-content/uploads/milk-kanban-1-2048x1361.jpg 2048w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>



<p>A simple index card taped to the last milk carton in a row stating, “Bring me to Kasia.” That’s it.</p>



<p>In the context, it really says that:</p>



<ul>
<li>we’re running out of (specific kind of) milk</li>



<li>we want to restock soon</li>



<li>there’s enough time to make an order (we don’t drink that much of cappuccinos and macchiatos)</li>
</ul>



<p>But it’s just a visual signal. Kanban at its very core.</p>



<h2>Simplicity is the King</h2>



<p>What Kasia designed is a perfect Kanban system. It relies on visual signals, which are put in the context. Even better, unlike most Kanban boards I see across teams, the system is self-explanatory. Everything one needs to know is written on the index card.</p>



<p>That’s, by the way, another characteristic of a good Kanban system. It should be as simple as possible (but not simpler). Our workflow representations <a href="https://brodzinski.com/2011/01/kanban-board-keep-it-simple.html">tend to get more and more complex over time by themselves</a>; we don’t need to make them so from the outset.</p>



<p>It’s a safe assumption that, almost always, there’s a simpler visualization that would work just as well. We, process designers, often fall into the trap of overengineering our tools.</p>



<p>And it’s a healthy wake-up call when someone who knows close to nothing about our fancy stuff designs a system that we would unlikely think of. One that is a perfect implementation of the original spirit, even if it doesn’t follow any of the common techniques.</p>



<p>Because it’s all about <a href="https://brodzinski.com/2014/08/practices-principles-values.html">principles, not practices</a>.</p>



<p>That’s what we can learn from Milk Kanban.</p>




				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Arbitrary-Scale Super-Resolution with Neural Heat Fields (133 pts)]]></title>
            <link>https://therasr.github.io/</link>
            <guid>43371583</guid>
            <pubDate>Sat, 15 Mar 2025 10:39:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://therasr.github.io/">https://therasr.github.io/</a>, See on <a href="https://news.ycombinator.com/item?id=43371583">Hacker News</a></p>
Couldn't get https://therasr.github.io/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Finland's National Allergy Program Successfully Reduces Allergic Diseases (179 pts)]]></title>
            <link>https://publications.ersnet.org/content/erj/49/6/1700470</link>
            <guid>43370956</guid>
            <pubDate>Sat, 15 Mar 2025 08:23:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://publications.ersnet.org/content/erj/49/6/1700470">https://publications.ersnet.org/content/erj/49/6/1700470</a>, See on <a href="https://news.ycombinator.com/item?id=43370956">Hacker News</a></p>
Couldn't get https://publications.ersnet.org/content/erj/49/6/1700470: Error [ERR_FR_TOO_MANY_REDIRECTS]: Maximum number of redirects exceeded]]></description>
        </item>
    </channel>
</rss>