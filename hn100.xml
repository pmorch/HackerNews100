<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 30 Jun 2024 21:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Writing GUI apps for Windows is painful (158 pts)]]></title>
            <link>https://tulach.cc/writing-gui-apps-for-windows-is-painful/</link>
            <guid>40839208</guid>
            <pubDate>Sun, 30 Jun 2024 18:53:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tulach.cc/writing-gui-apps-for-windows-is-painful/">https://tulach.cc/writing-gui-apps-for-windows-is-painful/</a>, See on <a href="https://news.ycombinator.com/item?id=40839208">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content"> <article itemscope="" itemtype="https://schema.org/BlogPosting">  <div itemprop="articleBody"> <p>For the past few days, I have been trying to find a library that would allow me to write programs with a GUI in C++. My requirements were pretty straightforward:</p> <ul> <li>Only Windows support required</li> <li>Commercial use allowed</li> <li>Easy styling, including dark mode</li> <li>The result should be a single .exe file with no or minimal dependencies and a size of less than 40MB</li> <li>Writing the GUI part of the program should not take more time than the actual functionality</li> </ul> <h2 id="winui-3"> <a href="#winui-3"></a> <a href="https://learn.microsoft.com/en-us/windows/apps/winui/winui3/">WinUI 3</a> </h2> <p>At first glance, it looks like an excellent choice. It allows you to use modern Windows components while also letting you customize the styling colors. For design, you can use XAML, which is super easy to grasp, or you can just use the Visual Studio designer directly.</p> <p><img src="https://tulach.cc/assets/img/posts/7_winui.png" alt="screenshot"></p> <p><em>(WinUI 3 controls gallery)</em></p> <p><strong>Problem:</strong> Shipping the app in <a href="https://learn.microsoft.com/en-us/windows/apps/get-started/intro-pack-dep-proc#packaged-or-unpackaged">unpackaged form</a> is not well supported. Most of the time when I have tried moving the app to a VM or a different computer, it fails to launch due to some obscure dependencies missing. To make it worse, you need to supply a bunch of .dll files that handle the WinUI functionality. There is no way to have a single portable .exe file. Using packaged form <em>usually</em> works without any issues, but they are installed as AppX packages which brings many issues on its own (especially if you need access to all Win32 APIs).</p> <h2 id="win32--mfc--small-libraries-wrapping-win32"> <a href="#win32--mfc--small-libraries-wrapping-win32"></a> <a href="https://learn.microsoft.com/en-us/windows/win32/learnwin32/creating-a-window">Win32</a> / <a href="https://learn.microsoft.com/en-us/cpp/mfc/mfc-desktop-applications?view=msvc-170">MFC</a> / small libraries wrapping Win32 </h2> <p>I need high portability, so it would make sense to use the OS’s native rendering. Such a program could be a single .exe file (given that we statically link MFC) and would also be super small (just a few kilobytes). I could also use a <a href="https://github.com/t4th/win32-gui-wrapper">more minimal library</a> that someone has already written, which means it would be really easy to get from concept to working app fast.</p> <p><img src="https://tulach.cc/assets/img/posts/7_win32_light.png" alt="screenshot"></p> <p><em>(Basic Win32 form)</em></p> <p><strong>Problem:</strong> It is extremely hard to stylize native Win32 controls. It would require me to write a custom paint function for every single control, which would take so much time I could raise a family in the meantime. There is a “hidden” dark mode for Win32 controls used by Windows File Explorer that <a href="https://github.com/ysc3839/win32-darkmode">you can activate</a>, but it covers only some of the controls and still doesn’t look good.</p> <h2 id="qt"> <a href="#qt"></a> <a href="https://www.qt.io/">Qt</a> </h2> <p>This library is the holy grail of C++ GUI. While it’s quite complex, it offers easy styling with Qt Style Sheets, which use a language similar to CSS.</p> <p><img src="https://tulach.cc/assets/img/posts/7_qt_obs.png" alt="screenshot"></p> <p><em>(OBS studio is using Qt and custom stylesheets)</em></p> <p><strong>Problem:</strong> When linking dynamically, there are a myriad of different .dlls required to run the app, totaling over 40MB. You can <a href="https://doc.qt.io/Boot2Qt/b2qt-static-linking.html">statically link Qt into your program</a>, which will drastically reduce the size (since the unused parts are removed), but then you must either make it open-source or distribute object files for recompilation due to <a href="https://www.qt.io/qt-licensing">Qt’s LGPL license</a>. Alternatively, you can buy a commercial license for several thousand dollars.</p>  <p>Quite an easy-to-learn library with the option to use <a href="https://github.com/wxFormBuilder/wxFormBuilder">wxFormBuilder</a>. It has a more permissive license than Qt and can be statically linked into a 3MB executable.</p> <p><img src="https://tulach.cc/assets/img/posts/7_wxwidgets_dark.png" alt="screenshot"></p> <p><em>(wxWidgets with experimental Windows dark mode option enabled)</em></p> <p><strong>Problem:</strong> On Windows, this library uses native Win32 components and offers no styling options (since we cannot easily overwrite the paint functions, it’s even worse than using Win32/MFC directly). It supports applying <a href="https://github.com/ysc3839/win32-darkmode">Windows File Explorer dark controls</a>, but again, they kinda suck.</p> <h2 id="hikogui"> <a href="#hikogui"></a> <a href="https://github.com/hikogui/hikogui">hikogui</a> </h2> <p>Quite new retained mode GUI library using Vulkan as a backend. Has built-in dark mode and is quite easy to style yourself.</p> <p><img src="https://tulach.cc/assets/img/posts/7_hikogui.png" alt="screenshot"></p> <p><em>(Screenshots from official repository)</em></p> <p><strong>Problem:</strong> In order to compile it successfully, you will need a PhD in computer science with a specialization in compiler development. After trying to compile the example for more than 30 minutes (including different branches and release tags), the only thing I got was an executable that would immediately crash with an access violation inside some Vulkan library, so I just gave up. It looks really promising even though I don’t really like the heavy use of obnoxious STL (sometimes it’s not even necessary).</p> <h2 id="sciter"> <a href="#sciter"></a> <a href="https://sciter.com/">Sciter</a> </h2> <p>Actually a good alternative to Electron that allows you to use HTML/CSS to write the GUI for your desktop app.</p> <p><img src="https://tulach.cc/assets/img/posts/7_sciter.png" alt="screenshot"></p> <p><em>(Example of bad antialiasing on svg icons)</em></p> <p><strong>Problem:</strong> You might think that the issue is going to be size, but actually, the final app with all .dlls is around 25MB, which is completely fine with me. It would be even better if it were actually open-source and you could use the statically linked version for commercial use (same issue as with Qt). Since it’s not as expensive as Qt, though ($310 currently for an Indie license), I would pay the money and be happy. The issue is that, as you can see in the image above (look at the titlebar icons), the rendering is not that great. I was having all sorts of antialiasing issues with fonts and images. Also, no matter what you do, the window will have a quite thick (2-3px) grey frame that you just cannot customize or modify at all.</p> <h2 id="winforms--wpf"> <a href="#winforms--wpf"></a> <a href="https://learn.microsoft.com/en-us/visualstudio/ide/create-csharp-winform-visual-studio&amp;view=vs-2022">WinForms</a> / <a href="https://learn.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-wpf?view=vs-2022">WPF</a> </h2> <p>If you ask about C++ GUI libraries for Windows on some random forums, most of the time you will be told that it’s a bad idea (not arguing with that), and that you should instead write the frontend of the program in some other stack and then just load your functionality written in C++ as a component/module. This will allow you to easily stylize it and speed up the development significantly. Technically, it is possible to have a single .exe file with a small size and use WinForms/WPF. There are two ways we can go about it:</p> <ol> <li>Bundle the .dll as a resource into the app and make it extract it to some temporary folder, then use P/Invoke and call the compiled .dll from within the C#/.NET app.</li> <li>Use C++/CLI.</li> </ol> <p><img src="https://tulach.cc/assets/img/posts/7_winforms_darkui.png" alt="screenshot"></p> <p><em>(<a href="https://github.com/RobinPerris/DarkUI">DarkUI</a> for WinForms)</em></p> <p><strong>Problem:</strong> The .NET framework comes preinstalled on Windows 10+, so we would technically still meet the no dependencies criteria. The issue is that with bundling the .dll, it would still mean it being extracted somewhere and writing additional code for the P/Invoke to work, and C++/CLI gets compiled to .NET IL code, in other words, you can open the resulting app in dnSpy and see the C++ code translated to C# equivalent (which is not what I want, I want native code).</p> <h2 id="solution"> <a href="#solution"></a> Solution? </h2> <p>Those were only a few options that I considered. After a <strong>very</strong> long time trying out all sorts of different libraries and at one point even writing my own MFC styles, I figured out that for simple apps there is simply nothing better suited than <a href="https://github.com/ocornut/imgui">Dear ImGui</a>.</p> <p>It has some disadvantages, mainly when trying to design complex UIs and that it’s not a retained mode UI but rather an immediate mode UI, so we have to run a GPU renderer like DirectX to render 60 or more frames per second just for the UI.</p> <p>It matches all the other points though, since DirectX is included by default on modern Windows versions.</p> <p><img src="https://tulach.cc/assets/img/posts/7_imgui_appkit.png" alt="screenshot"></p> <p><em>(<a href="https://github.com/SamuelTulach/ImGui-AppKit">ImGui AppKit</a> example project)</em></p> <p>I have written an example that you can see above of how you can use the built-in multi-viewports functionality to use it to make simple GUI apps.</p> <p><img src="https://tulach.cc/assets/img/posts/7_size.png" alt="screenshot"></p> <p><em>(<a href="https://github.com/SamuelTulach/ImGui-AppKit">ImGui AppKit</a> compiled app size)</em></p> <p>The compiled program has only 500KB in size and does not require the installation of anything, not even <a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170">VC++ redistributables</a> if you statically link MFC into it.</p> <p><strong>Note:</strong> I am writing this article while it’s 32°C inside my room. As a fellow European, I do not have air conditioning. Please forgive any grammatical errors or poorly structured sentences.</p> </div> </article> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Canada 'sleepwalking' into cashless society, consumer advocates warn (123 pts)]]></title>
            <link>https://www.cbc.ca/news/canada/ottawa/canada-sleepwalking-into-cashless-society-consumer-advocates-warn-1.7248846</link>
            <guid>40838515</guid>
            <pubDate>Sun, 30 Jun 2024 17:23:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cbc.ca/news/canada/ottawa/canada-sleepwalking-into-cashless-society-consumer-advocates-warn-1.7248846">https://www.cbc.ca/news/canada/ottawa/canada-sleepwalking-into-cashless-society-consumer-advocates-warn-1.7248846</a>, See on <a href="https://news.ycombinator.com/item?id=40838515">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="detailContent"><!--$--><p><span><a href="https://www.cbc.ca/news/canada/ottawa"><span>Ottawa</span></a></span></p><!--/$--><p>A consumer group is urgently calling on the federal government to follow other jurisdictions in the U.S and Europe and bring in legislation to stem the slide toward a cashless society.</p><h2 lang="en">Only about 1 in 10 transactions involve physical money, says recent report</h2><!--$--><!--/$--><!--$--><div data-cy="storyWrapper"><!--$--><figure><p><img alt="More Albertans seem to be &quot;less uncomfortable&quot; with the idea of a provincial sales tax to help reduce a government deficit that could be close to $20 billion." src="https://i.cbc.ca/1.4490875.1719517949!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_780/cash-register-generic.jpg" data-cy="leadmedia-story-img" fetchpriority="high"></p><figcaption>A recent online poll of some 1,500 people commissioned by the group Payments Canada found that a majority of respondents were worried about the prospect of stores going cashless.<!-- --> <!-- -->(Robert Short/CBC)</figcaption></figure><!--/$--><div><p dir="ltr">A consumer group is urgently calling on the federal government to follow other jurisdictions in the U.S and Europe and bring in legislation to stem the slide toward a cashless society. &nbsp;</p><p dir="ltr">Only 10 per cent of transactions in Canada today are done using cash, according to&nbsp;Carlos Castiblanco, an economist with the group&nbsp;Option Consommateurs.</p><p dir="ltr">"There is a need to protect cash right now before more merchants start refusing&nbsp;[it]," Castiblanco&nbsp;recently told&nbsp;<a href="http://www.cbc.ca/listen/live-radio/1-45-ontario-today/clip/16078039-why-still-need-cash">CBC Radio's&nbsp;<em>Ontario Today.</em></a></p><p dir="ltr">It's critical to act now, he added, before retailers&nbsp;begin&nbsp;removing all the infrastructure required to store and maintain physical money.</p><p dir="ltr">"They are already used to dealing with cash," he said. "So this is the moment to act, before it is more complicated."</p><p dir="ltr">In a report called&nbsp;<a href="https://www.phila.gov/media/20220304142758/PCHR-regulation-8-cash-payments-retail-2019.pdf">"Will cash be a thing of the past?"</a>,&nbsp;Option Consommateurs&nbsp;published one of the first deep dives&nbsp;into who is still using coins and paper money.</p><div dir="ltr"><figure><p><img loading="lazy" alt="A man holding cash while sitting on a patio" srcset="https://i.cbc.ca/1.7250835.1719711078!/fileImage/httpImage/image.jpg_gen/derivatives/original_300/carlos-castiblanco-holding-cash.jpg 300w,https://i.cbc.ca/1.7250835.1719711078!/fileImage/httpImage/image.jpg_gen/derivatives/original_460/carlos-castiblanco-holding-cash.jpg 460w,https://i.cbc.ca/1.7250835.1719711078!/fileImage/httpImage/image.jpg_gen/derivatives/original_620/carlos-castiblanco-holding-cash.jpg 620w,https://i.cbc.ca/1.7250835.1719711078!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/carlos-castiblanco-holding-cash.jpg 780w,https://i.cbc.ca/1.7250835.1719711078!/fileImage/httpImage/image.jpg_gen/derivatives/original_1180/carlos-castiblanco-holding-cash.jpg 1180w" sizes="(max-width: 300px) 300px,(max-width: 460px) 460px,(max-width: 620px) 620px,(max-width: 780px) 780px,(max-width: 1180px) 1180px" src="https://i.cbc.ca/1.7250835.1719711078!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/carlos-castiblanco-holding-cash.jpg" data-cy="image-img"></p><figcaption>Carlos Castiblanco, an economist, says Canada needs to follow in the steps of other countries and create legislation to protect cash. <!-- --> <!-- -->(Haik Kazarian)</figcaption></figure></div><h2 dir="ltr">'Solid demand' for cash</h2><p dir="ltr">A recent <a href="https://www.payments.ca/canadians-report-love-hate-relationship-cash-reveals-new-payments-canada-study">online poll of some 1,500 </a><a href="http://www.payments.ca/canadians-report-love-hate-relationship-cash-reveals-new-payments-canada-study">people</a>&nbsp;commissioned by a different group, Payments Canada, found that&nbsp;a majority of respondents were worried about the prospect of cashless stores&nbsp;and want to maintain the option to use cash — which is free from bank fees, isn't susceptible to privacy breaches&nbsp;and can be used during internet outages.&nbsp;</p><p dir="ltr">"There's still very solid demand for cash," said Sharon Kozicki, the deputy governor of the Bank of Canada, in a recent interview with CBC.</p><div dir="ltr"><ul><li><a href="https://www.cbc.ca/news/business/credit-card-surcharge-shop-1.6606997" text="Paying with a credit card? Expect to see a fee when you shop under new rules that start now" flag="" data-contentid=""><span>Paying with a credit card? Expect to see a fee when you shop under new rules that start now</span></a></li></ul></div><p dir="ltr">The bank closely tracks&nbsp;how money gets used, Kozicki said, with the use of cash actually rising&nbsp;at the beginning of the COVID-19 pandemic.</p><p>While that&nbsp;growth has slowed, Kozicki said there's still an "overall general increase that suggests people still want it."</p><p>Even a <a href="http://www.mcgill.ca/maxbellschool/policy-lab-2023/less-cash">report commissioned by the Bank of Canada</a> suggests it's time to protect access to money.&nbsp;</p><p>That report, titled "Social policy implications for a less-cash society," recommends legislative&nbsp;action, arguing that&nbsp;cash-based transactions have plummeted&nbsp;from 54 per cent in 2009 to 10 per cent as of 2021.&nbsp;</p><p>One of its authors, Aftab Ahmed, described who would be most affected by a world with no cash&nbsp;in <a href="https://policyoptions.irpp.org/magazines/september-2023/keep-cash-in-circulation/">a recent article of Policy Options</a>, the online magazine for the&nbsp;Institute for Research on Public Policy.</p><p>"For many — such as Indigenous peoples, unhoused individuals, older Canadians, victims of domestic abuse and others who are vulnerable — cash is a beacon of economic security, a source of financial autonomy, an emergency lifeline and an emblem of cultural traditions," Ahmed wrote.</p><p>"Canada must avoid sleepwalking into a cashless future and instead recognize the risk of exacerbating financial exclusion of those most vulnerable."</p><h2>Other cities, countries taking steps</h2><p>The issue has caught fire outside Canada, Castiblanco&nbsp;said, with several&nbsp;jurisdictions beginning to legislate to protect access to cash.&nbsp;</p><p>In 2019, Philadelphia became the first city in North America to prohibit "a person selling or offering for sale consumer goods or services at retail&nbsp;from refusing to accept cash as a form of payment."&nbsp;</p><div><ul><li><a href="https://www.cbc.ca/news/world/backlash-against-cashless-stores-as-more-u-s-jurisdictions-require-businesses-to-accept-bills-1.5139213" text="Backlash against cashless stores as more U.S. jurisdictions require businesses to accept bills" flag="" data-contentid=""><span>Backlash against cashless stores as more U.S. jurisdictions require businesses to accept bills</span></a></li></ul></div><p>Other U.S. cities like New York, Seattle and&nbsp;Los Angeles have since moved ahead on the issue.&nbsp;</p><p>In New York, the regulation proposes fines of up to $1,500, with the councillor who sponsored the rules declaring that a&nbsp;ban on cashless businesses protects privacy, equity and consumer choice.</p><p>European countries like Norway, Spain, and Ireland have introduced similar laws. In&nbsp;Ireland, the law would require a cash option at businesses like pharmacies and grocery stores that sell essential products and services.</p><div><figure><p><img loading="lazy" alt="A man standing against a wall smiling. " srcset="https://i.cbc.ca/1.7250840.1719711134!/fileImage/httpImage/image.jpg_gen/derivatives/original_300/ron-delnevo-headshot.jpg 300w,https://i.cbc.ca/1.7250840.1719711134!/fileImage/httpImage/image.jpg_gen/derivatives/original_460/ron-delnevo-headshot.jpg 460w,https://i.cbc.ca/1.7250840.1719711134!/fileImage/httpImage/image.jpg_gen/derivatives/original_620/ron-delnevo-headshot.jpg 620w,https://i.cbc.ca/1.7250840.1719711134!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/ron-delnevo-headshot.jpg 780w,https://i.cbc.ca/1.7250840.1719711134!/fileImage/httpImage/image.jpg_gen/derivatives/original_1180/ron-delnevo-headshot.jpg 1180w" sizes="(max-width: 300px) 300px,(max-width: 460px) 460px,(max-width: 620px) 620px,(max-width: 780px) 780px,(max-width: 1180px) 1180px" src="https://i.cbc.ca/1.7250840.1719711134!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/ron-delnevo-headshot.jpg" data-cy="image-img"></p><figcaption>Ron Delnevo, spokesperson for Payment Choice Alliance, is urging Canadians to raise their concerns about the cash system with MPs. <!-- --> <!-- -->(Helen Delnevo)</figcaption></figure></div><h2>'Tell MPs what you want'</h2><p>Consumer groups in the United Kingdom&nbsp;like Payment Choice Alliance&nbsp;are pushing that country to follow Ireland's model.&nbsp;</p><p>"I think that we need urgent action now," the alliance's spokesperson, Ron Delnevo,&nbsp;told&nbsp;<em>Ontario Today</em>.</p><p>The group is calling for new rules in the U.K. by the end of 2025.</p><p>"We feel if it goes beyond that, there [will be] so many businesses not accepting cash," Delnevo said. "Cash will be so difficult to access that the whole [cash-based system] will fall down."</p><p>Delnevo said&nbsp;Canadians can take a lesson on the power of consumer action in his country.&nbsp;</p><p>"MPs&nbsp;in our parliament have been inundated with mail from the public, and they are reacting to that," he said. "So don't let the politicians put their hands over their ears and not listen. Tell them what you want."</p><p><span><div role="button" tabindex="0" title="Why do you still need cash?" data-cy="player-placeholder-ui-container"><p><img src="https://i.cbc.ca/ais/6436acf8-6d17-459c-92c6-fd9964a8af1c,1716575616679/full/max/0/default.jpg?im=Crop%2Crect%3D%280%2C0%2C1919%2C1079%29%3BResize%3D%28620%29" alt="" loading="lazy"></p><p><span>Ontario Today</span><span>51:39</span><span>Why do you still need cash?</span></p></div><span>Your calls with Ron Delnevo, the head of group in the United Kingdom trying to stop the slide into a cashless society. Also, joining us, Carlos Castiblanco, an économist with the consumer group, Option-Consommateurs, which used a federal grant to create a recent report called: "Will Cash Soon be a thing of the past?" It's recommendations include an urgent call on legislators to protect access to cash before we sleepwalk into a society that leaves out a lot of Canadians.</span></span></p></div></div><!--/$--><!--$--><!--/$--><div><h2>ABOUT THE AUTHOR</h2><div><figure><p><img loading="lazy" alt="" srcset="https://i.cbc.ca/1.4253701.1503090158!/fileImage/httpImage/image.jpg_gen/derivatives/square_300/amanda-pfeffer.jpg 300w,https://i.cbc.ca/1.4253701.1503090158!/fileImage/httpImage/image.jpg_gen/derivatives/square_460/amanda-pfeffer.jpg 460w,https://i.cbc.ca/1.4253701.1503090158!/fileImage/httpImage/image.jpg_gen/derivatives/square_620/amanda-pfeffer.jpg 620w" sizes="(max-width: 258pxpx) 258pxpx" src="https://i.cbc.ca/1.4253701.1503090158!/fileImage/httpImage/image.jpg_gen/derivatives/square_620/amanda-pfeffer.jpg" data-cy="author-image-img"></p></figure></div><p>Amanda Pfeffer has worked for the CBC across the country, including Montreal, Vancouver, Fredericton, Quebec City and Ottawa. She welcomes story ideas and tips at amanda.pfeffer@cbc.ca, or twitter @onthebeat1.</p><ul><li><a href="https://www.cbc.ca/news/canada/ottawa/amanda-pfeffer-1.3442930">Read more articles by Amanda Pfeffer</a></li></ul></div><!--$--><!--/$--><!--$--><!--/$--></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Drop-In SQS Replacement Based on SQLite (303 pts)]]></title>
            <link>https://github.com/poundifdef/SmoothMQ</link>
            <guid>40837610</guid>
            <pubDate>Sun, 30 Jun 2024 15:11:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/poundifdef/SmoothMQ">https://github.com/poundifdef/SmoothMQ</a>, See on <a href="https://news.ycombinator.com/item?id=40837610">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">SmoothMQ</h2><a id="user-content-smoothmq" aria-label="Permalink: SmoothMQ" href="#smoothmq"></a></p>
<p dir="auto">SmoothMQ is a drop-in replacement for SQS with a much smoother developer experience.
It has a functional UI, observability, tracing, message scheduling, and rate-limiting.
SmoothMQ lets you run a private SQS instance on any cloud.</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<p dir="auto">SmoothMQ deploys as a single go binary and can be used by any existing SQS client.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Running</h2><a id="user-content-running" aria-label="Permalink: Running" href="#running"></a></p>
<p dir="auto">This will run a UI on <code>:3000</code> and an SQS-compatible server on <code>:3001</code>.</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Connecting</h2><a id="user-content-connecting" aria-label="Permalink: Connecting" href="#connecting"></a></p>
<p dir="auto">This works with any SQS client in any language.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Python</h3><a id="user-content-python" aria-label="Permalink: Python" href="#python"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="import boto3

# Simply change the endpoint_url
sqs = boto3.client(&quot;sqs&quot;, ..., endpoint_url=&quot;http://localhost:3001&quot;)
sqs.send_message(QueueUrl=&quot;...&quot;, MessageBody=&quot;hello world&quot;)"><pre><span>import</span> <span>boto3</span>

<span># Simply change the endpoint_url</span>
<span>sqs</span> <span>=</span> <span>boto3</span>.<span>client</span>(<span>"sqs"</span>, ..., <span>endpoint_url</span><span>=</span><span>"http://localhost:3001"</span>)
<span>sqs</span>.<span>send_message</span>(<span>QueueUrl</span><span>=</span><span>"..."</span>, <span>MessageBody</span><span>=</span><span>"hello world"</span>)</pre></div>
<p dir="auto">Celery works seamlessly:</p>
<div dir="auto" data-snippet-clipboard-copy-content="app = Celery(&quot;tasks&quot;, broker_url=&quot;sqs://...@localhost:3001&quot;)"><pre><span>app</span> <span>=</span> <span>Celery</span>(<span>"tasks"</span>, <span>broker_url</span><span>=</span><span>"sqs://...@localhost:3001"</span>)</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">UI</h2><a id="user-content-ui" aria-label="Permalink: UI" href="#ui"></a></p>
<p dir="auto">The UI lets you manage queues and search individual messages.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/poundifdef/SmoothMQ/blob/main/docs/queue.gif"><img src="https://github.com/poundifdef/SmoothMQ/raw/main/docs/queue.gif" alt="Dashboard UI" data-animated-image=""></a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rodney Brooks on limitations of generative AI (113 pts)]]></title>
            <link>https://techcrunch.com/2024/06/29/mit-robotics-pioneer-rodney-brooks-thinks-people-are-vastly-overestimating-generative-ai/</link>
            <guid>40835588</guid>
            <pubDate>Sun, 30 Jun 2024 07:02:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2024/06/29/mit-robotics-pioneer-rodney-brooks-thinks-people-are-vastly-overestimating-generative-ai/">https://techcrunch.com/2024/06/29/mit-robotics-pioneer-rodney-brooks-thinks-people-are-vastly-overestimating-generative-ai/</a>, See on <a href="https://news.ycombinator.com/item?id=40835588">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p id="speakable-summary">When Rodney Brooks talks about robotics and artificial intelligence, you should listen. Currently the Panasonic Professor of Robotics Emeritus at MIT, he also co-founded three key companies, including Rethink Robotics, iRobot and his current endeavor, Robust.ai. Brooks also ran the MIT Computer Science and Artificial Intelligence Laboratory (CSAIL) for a decade starting in 1997.</p>

<p>In fact, he likes to make predictions about the future of AI and <a href="https://rodneybrooks.com/predictions-scorecard-2024-january-01/" target="_blank" rel="noreferrer noopener nofollow">keeps a scorecard</a> on his blog of how well he’s doing.</p>

	
	


<p>He knows what he’s talking about, and he thinks maybe it’s time to put the brakes on the screaming hype that is generative AI. Brooks thinks it’s impressive technology, but maybe not quite as capable as many are suggesting. “I’m not saying LLMs are not important, but we have to be careful [with] how we evaluate them,” he told TechCrunch.</p>

<p>He says the trouble with generative AI is that, while it’s perfectly capable of performing a certain set of tasks, it can’t do everything a human can, and humans tend to overestimate its capabilities. “When a human sees an AI system perform a task, they immediately generalize it to things that are similar and make an estimate of the competence of the AI system; not just the performance on that, but the competence around that,” Brooks said. “And they’re usually very over-optimistic, and that’s because they use a model of a person’s performance on a task.”</p>

	
	


<p>He added that the problem is that generative AI is not human or even human-like, and it’s flawed to try and assign human capabilities to it. He says people see it as so capable they even want to use it for applications that don’t make sense.</p>

<p>Brooks offers his latest company, Robust.ai, a warehouse robotics system, as an example of this. Someone suggested to him recently that it would be cool and efficient to tell his warehouse robots where to go by building an LLM for his system. In his estimation, however, this is not a reasonable use case for generative AI and would actually slow things down. It’s instead much simpler to connect the robots to a stream of data coming from the warehouse management software.</p>

<p>“When you have 10,000 orders that just came in that you have to ship in two hours, you have to optimize for that. Language is not gonna help; it’s just going to slow things down,” he said. “We have massive data processing and massive AI optimization techniques and planning. And that’s how we get the orders completed fast.”</p>


	
	


<p>Another lesson Brooks has learned when it comes to robots and AI is that you can’t try to do too much. You should solve a solvable problem where robots can be integrated easily.</p>

	
	


<p>“We need to automate in places where things have already been cleaned up. So the example of my company is we’re doing pretty well in warehouses, and warehouses are actually pretty constrained. The lighting doesn’t change with those big buildings. There’s not stuff lying around on the floor because the people pushing carts would run into that. There’s no floating plastic bags going around. And largely it’s not in the interest of the people who work there to be malicious to the robot,” he said.</p>

<p>Brooks explains that it’s also about robots and humans working together, so his company designed these robots for practical purposes related to warehouse operations, as opposed to building a human-looking robot. In this case, it looks like a shopping cart with a handle.</p>

<p>“So the form factor we use is not humanoids walking around — even though I have built and delivered more humanoids than anyone else. These look like shopping carts,” he said. “It’s got a handlebar, so if there’s a problem with the robot, a person can grab the handlebar and do what they wish with it,” he said.</p>

	
	


<p>After all these years, Brooks has learned that it’s about making the technology accessible and purpose-built. “I always try to make technology easy for people to understand, and therefore we can deploy it at scale, and always look at the business case; the return on investment is also very important.”</p>

<p>Even with that, Brooks says we have to accept that there are always going to be hard-to-solve outlier cases when it comes to AI, that could take decades to solve. “Without carefully boxing in how an AI system is deployed, there is always a long tail of special cases that take decades to discover and fix. Paradoxically all those fixes are AI complete themselves.”</p>

	
	


<p>Brooks adds that there’s this mistaken belief, mostly thanks to <a href="https://en.wikipedia.org/wiki/Moore%27s_law" target="_blank" rel="noreferrer noopener nofollow">Moore’s law</a>, that there will always be exponential growth when it comes to technology — the idea that if <a href="https://techcrunch.com/2024/05/13/openais-newest-model-is-gpt-4o/">ChatGPT 4</a> is this good, imagine what ChatGPT 5, 6 and 7 will be like. He sees this flaw in that logic, that tech doesn’t always grow exponentially, in spite of Moore’s law.</p>

<p>He uses the iPod as an example. For a few iterations, it did in fact double in storage size from 10 all the way to 160GB. If it had continued on that trajectory, he figured out we would have an iPod with 160TB of storage by 2017, but of course we didn’t. The models being sold in 2017 actually came with 256GB or 160GB because, as he pointed out, nobody actually needed more than that.</p>

	
	


<p>Brooks acknowledges that LLMs could help at some point with domestic robots, where they could perform specific tasks, especially with an aging population and not enough people to take care of them. But even that, he says, could come with its own set of unique challenges.</p>

<p>“People say, ‘Oh, the large language models are gonna make robots be able to do things they couldn’t do.’ That’s not where the problem is. The problem with being able to do stuff is about control theory and all sorts of other hardcore math optimization,” he said.</p>

<p>Brooks explains that this could eventually lead to robots with useful language interfaces for people in care situations. “It’s not useful in the warehouse to tell an individual robot to go out and get one thing for one order, but it may be useful for eldercare in homes for people to be able to say things to the robots,” he said.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Weekend projects: getting silly with C (201 pts)]]></title>
            <link>https://lcamtuf.substack.com/p/weekend-projects-getting-silly-with</link>
            <guid>40835274</guid>
            <pubDate>Sun, 30 Jun 2024 05:07:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lcamtuf.substack.com/p/weekend-projects-getting-silly-with">https://lcamtuf.substack.com/p/weekend-projects-getting-silly-with</a>, See on <a href="https://news.ycombinator.com/item?id=40835274">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>For all its warts, the C language is a marvelous thing. It is remarkably simple, yet somehow expressive enough to allow entire operating systems to be written with ease. Just as curiously, its terse, minimalistic syntax became </span><em>the</em><span> way to structure code — copied by nearly all of its mainstream successors, from Java to Go.</span></p><p><span>Among geeks, the syntax can also be credited for the emergence of code obfuscation as an art form. The </span><a href="https://www.ioccc.org/" rel="">IOCCC contest </a><span>is perhaps the best-known outlet for this craft; a typical IOCCC submission looks like this:</span></p><blockquote><pre><code>#define			      q [v+a]
#define			     c b[1]
#define			    O 1 q
#define			   o 0 q
#define			  r(v,a\
)v&lt;0&amp;&amp;(			 v*=-1,		a*=-1);
#define			p(v,m,	    s,w)*c==*#v?2 q\
&lt;m?(c++		       ,d=1,3	   q=0,5      q=m,main\
(a+3,b)		      ,o=o*s	 q,O=O*		 w q):0:
static		     d,v[99	];main		  (int a,
char**b		    ){d=7;     if(*c?!		  (p(+,3
,4 q+O*		   3,4)p(			   -,(o?3
:(O=1,6		  )),4 q			  -O*3,4)
p(*,4,3		 ,4)p(/				  ,5,4,3)
p((),d,		0+3,0+				 04)*c==
')'?2 q	       &lt;02?(c				++,0):0
:(o=012	      *o+*c-			      '0',c++
,O=1)):	     2 q?3-			   2:printf(
"%d/%d"	    "\n",o		       ,O))return
1;d=a,r    (o,d)r		     (O,d)3 q
=o&lt;O?(4	  q=o,O)		   :(4 q=O,
	 o);r(d,		 o)a+=3;O?
				 1:(O=1,2
				q=1);while
				(2 q=o%1 q)a++;v[d]/=O;d[
				v+1]/=O;return main(d,b);}</code></pre></blockquote><p>There’s plenty to admire about the winning IOCCC entries, but they’re usually not fun to study: they tend to rely on confusing preprocessor macros, nonsensical formatting, unhelpful variable names, and simple logic encoded as obtuse arithmetic expressions that need to be reverse-engineered back into normal code.</p><p><span>This is unfortunate; the C language can easily confound seasoned developers without being hard to read. To illustrate, consider the humble </span><em>switch (…)</em><span> statement:</span></p><blockquote><pre><code>  switch (i) {
    case 0: puts("i = 0"); break;
    case 1: puts("i = 1"); break;
    case 2: puts("i = 2"); break;
  }</code></pre></blockquote><p><span>There are very few C developers who realize that </span><em>switch (…) </em><span>is no different from </span><em>if (…)</em><span> or </span><em>for (…)</em><span> in that it doesn’t actually need curly brackets. This will compile just fine:</span></p><blockquote><pre><code>  switch (i) case 1: puts("i = 1");</code></pre></blockquote><p><span>Such </span><em>switch (…)</em><span> notation is unheard-of and never encountered in real life simply because it defeats the purpose: without angle brackets, you can only have one statement riding on the coattails. In other words, this will not work:</span></p><blockquote><pre><code><code>   switch (i)
     case 1: puts("i = 1");
     case 2: puts("i = 2"); ← ERROR: no longer in switch (...)</code></code></pre></blockquote><p>Oh well! </p><p><span>On a seemingly unrelated note, let’s ponder the actual mechanics of </span><em>switch (…)</em><span>: in essence, it’s a glorified </span><em>goto</em><span>. It jumps to the matching </span><em>case </em><span>label, but it doesn’t care about what’s going on in between the curly brackets; it’s a code block like any other:</span></p><blockquote><pre><code><code>  switch (i) {
    int a = 123;
    puts("This code is unreachable!");
    default: printf("a = %d\n", a);
  }</code></code></pre></blockquote><p><span>The above example should print the value of </span><em>a</em><span>, but it won’t be initialized to 123! If you don’t believe me, you can try it out </span><a href="https://godbolt.org/z/ezKrzaYqq" rel="">here</a><span>.</span></p><p><span>Just as unexpectedly, </span><em>case</em><span> labels don’t really need to appear top-level in their associated </span><em>switch (…)</em><span> block. In particular, this code works perfectly fine (</span><a href="https://godbolt.org/z/hcr41GecG" rel="">link</a><span>):</span></p><blockquote><pre><code><code>  switch (i) {
    if (0) case 0: puts("i = 0");
    if (0) case 1: puts("i = 1");
    if (0) case 2: puts("i = 2");
  }</code></code></pre></blockquote><p><span>Note that in this example, you don’t need </span><em>break</em><span> statements to avoid fallthrough; the code unconditionally jumps to the appropriate </span><em>case</em><span> label, skipping over the preceding </span><em>if (0</em><span>); but once the relevant </span><em>puts(…)</em><span> is executed, all subsequent calls are gated behind the remaining, perpetually-false </span><em>if (0)</em><span> conditionals.</span></p><p><span>But wait, there’s more! Recall that </span><em>if</em><span> can be chained with </span><em>else</em><span> — and that syntactically, the entire blob functions as a single top-level statement:</span></p><blockquote><pre><code><code>if (one_thing) do_one_thing; else do_another_thing;</code></code></pre></blockquote><p><span>So… without further ado, I present you the following curly-bracket-free monstrosity that combines all the quirks we discussed so far (</span><a href="https://godbolt.org/z/MqGb63x69" rel="">link</a><span>):</span></p><blockquote><pre><code><code>#include &lt;stdio.h&gt;

int main() {
 
  int i = 1;

  switch (i)

         if (0) case 0:        puts("i = 0");
    else if (0) case 1 ... 10: puts("i = 1 ... 10");
    else if (0) case 11:       puts("i = 11");
    else if (0) default:       puts("i = something else");

  return 0;

}</code></code></pre></blockquote><p><span>And who needs </span><em>switch (…)</em><span>, anyway? The &amp;&amp; operator is a longstanding GNU extension that lets you get an address of a label; you can then </span><em>goto</em><span> to that address. Equipped with this knowledge, you can make your own </span><em>switch (…)</em><span> —with blackjack, et cetera (</span><a href="https://godbolt.org/z/7Pvz1Mr6M" rel="">link</a><span>):</span></p><blockquote><pre><code><code>#include &lt;stdio.h&gt;

int main() {
 
  int i = 1;

  goto *(void*[]){ &amp;&amp;case_0, &amp;&amp;case_1, &amp;&amp;case_2 }[i];

  if (0) case_0: puts("i = 0");
  if (0) case_1: puts("i = 1");
  if (0) case_2: puts("i = 2");

  return 0;

}</code></code></pre></blockquote><p><span>Heck, here’s another fantastic use for  &amp;&amp;: why bother with </span><em>for (…)</em><span> if you can use labels to implement loops directly within variable declarations? Check this out (</span><a href="https://godbolt.org/z/Yzj36dEj4" rel="">link</a><span>):</span></p><blockquote><pre><code>#include &lt;stdio.h&gt;

int main() {

  /* Iterate from i = 0 to i = 5: */

  int i = (i = 0) &amp; ({_:0;}) | printf("i = %d\n", i) * 
          (++i &gt; 5) ?: ({goto *&amp;&amp;_;0;});

  return 0;

}</code></pre></blockquote><p>This last snippet is probably not UB-safe and is GCC-specific. But the point stands: you can write completely alien and befuddling code in C without making it unreadable.</p><p>If you liked this article, please subscribe! Unlike most other social media, Substack is not a walled garden and not an addictive doomscrolling experience. It’s just a way to stay in touch with the writers you like.</p><p><em><span>For a thematic catalog of posts on this site, </span><a href="https://lcamtuf.coredump.cx/offsite.shtml" rel="">click here</a><span>.</span></em></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenDNS Suspends Service in France Due to Canal+ Piracy Blocking Order (114 pts)]]></title>
            <link>https://torrentfreak.com/opendns-suspends-service-in-france-due-to-canal-piracy-blocking-order-240629/</link>
            <guid>40835117</guid>
            <pubDate>Sun, 30 Jun 2024 04:19:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://torrentfreak.com/opendns-suspends-service-in-france-due-to-canal-piracy-blocking-order-240629/">https://torrentfreak.com/opendns-suspends-service-in-france-due-to-canal-piracy-blocking-order-240629/</a>, See on <a href="https://news.ycombinator.com/item?id=40835117">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>

<span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" title="Go to TorrentFreak." href="https://torrentfreak.com/"><span property="name">Home</span></a><meta property="position" content="1"></span> &gt; <span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" title="Go to the Anti-Piracy category archives." href="https://torrentfreak.com/category/anti-piracy/"><span property="name">Anti-Piracy</span></a><meta property="position" content="2"></span> &gt; <span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" title="Go to the Site Blocking category archives." href="https://torrentfreak.com/category/anti-piracy/site-blocking/"><span property="name">Site Blocking</span></a><meta property="position" content="3"></span> &gt; <span></span>
</p>
<p>
<span> </span>
This month, a French court went along with a demand from Canal+ to tighten up previously obtained anti-piracy measures. The court ordered Google, Cloudflare, and Cisco to poison their DNS records to prevent these third-party services acting as workarounds for existing pirate site blockades. Cisco's response became evident on Friday when it withdrew its OpenDNS service from the entire country.
</p>
</div><div>
<p><a href="https://torrentfreak.com/images/football-block.png"><img loading="lazy" decoding="async" src="https://torrentfreak.com/images/football-block.png" alt="football block" width="290" height="286" srcset="https://torrentfreak.com/images/football-block.png 474w, https://torrentfreak.com/images/football-block-300x296.png 300w" sizes="(max-width: 290px) 100vw, 290px"></a>In 2023, broadcaster Canal+ went to court in France with the goal of obtaining an order requiring local ISPs to block over 100 pirate sports streaming sites. </p>
<p>The French court complied with the request; ISPs including Orange, SFR, OutreMer Télécom, Free, and Bouygues Télécom, were ordered to implement technical measures to prevent access to Footybite.co, Streamcheck.link, SportBay.sx, TVFutbol.info, and Catchystream.com, among dozens of others. </p>
<p>Since the ISPs have their own DNS resolvers for use by their own customers, these were configured to provide non-authentic responses to deny access to the sites in question. Somewhat inevitably, some of the ISPs’ users reconfigured their machines to use third-party DNS servers, included those provided by Cloudflare, Google, and Cisco.</p>
<h2>Canal+ Targets DNS Providers</h2>
<p>To prevent these workarounds, last year <a href="https://torrentfreak.com/dns-block-canal-sues-cloudflare-google-cisco-to-fight-piracy-231230/">Canal+ took legal action</a> against three popular public DNS providers – Cloudflare (1.1.1.1), Google (8.8.8.8), and Cisco (208.69.38.205) – demanding blocking measures similar to those already implemented by French ISPs under <a href="https://www.dalloz.fr/documentation/Document?id=CODE_CSPO_ARTI_L333-10&amp;scrll=CSPO010375&amp;FromId=CODES_SECS_CSPO_TALPHA">Article L333-10</a> of the French Sports Code.</p>
<p>The Paris judicial court responded this May by handing down two orders; one concerning Premier League matches and the other relating to matches played in the Champions League. The Court ordered Google, Cloudflare, and Cisco to implement measures to prevent French internet users from using their services to access around 117 pirate domains.</p>
<p>Google previously indicated it would comply and during the last 24 hours, OpenDNS complied too, although perhaps not in the manner Canal+ or the Court had anticipated.</p>
<h2>OpenDNS Suspends Entire Service to the Whole of France</h2>
<p>Reports of problems with the OpenDNS service seemed to begin on Friday, and it didn’t take long to discover the cause. The technical issues were isolated to France and apparently parts of Portugal too, with an explanation having appeared on the OpenDNS website, perhaps as early as Thursday evening.</p>
<p>“Effective June 28, 2024: Due to a court order in France issued under Article L.333-10 of the French Sport code and a court order in Portugal issued under Article 210-G(3) of the Portuguese Copyright Code, the OpenDNS service is not currently available to users in France and certain French territories and in Portugal. We apologize for the inconvenience,” the <a href="https://support.opendns.com/hc/en-us/articles/27951404269204-OpenDNS-Service-Not-Available-To-Users-In-France-and-Portugal">announcement</a> reads.</p>
<p><a href="https://torrentfreak.com/images/opendns.png"><img loading="lazy" decoding="async" src="https://torrentfreak.com/images/opendns.png" alt="opendns" width="670" height="380" srcset="https://torrentfreak.com/images/opendns.png 768w, https://torrentfreak.com/images/opendns-300x170.png 300w" sizes="(max-width: 670px) 100vw, 670px"></a></p>
<p>OpenDNS doesn’t appear to have elaborated on its decision at the time of writing, but it’s certainly possible that the operators of this technical information service strongly oppose being ordered to undermine its accuracy.</p>
<p>The demands of Canal+, with full support of courts in both France and Portugal, effectively require OpenDNS to lie in response to DNS inquiries. It’s not difficult to see why that would be a problem for the operators of entirely neutral internet infrastructure, not least because this order is almost guaranteed not to be the last of its kind.</p>
<p>It’s a bold move that some will undoubtedly criticize. For others, the OpenDNS decision represents the type of dramatic pushback required to draw attention to anti-piracy measures that are increasingly encroaching on the vital mechanisms underpinning the internet itself.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Chrome is adding `window.ai` – a Gemini Nano AI model right inside the browser (218 pts)]]></title>
            <link>https://twitter.com/rauchg/status/1806385778064564622</link>
            <guid>40834600</guid>
            <pubDate>Sun, 30 Jun 2024 01:56:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/rauchg/status/1806385778064564622">https://twitter.com/rauchg/status/1806385778064564622</a>, See on <a href="https://news.ycombinator.com/item?id=40834600">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Inside a $1 radar motion sensor (547 pts)]]></title>
            <link>https://10maurycy10.github.io/projects/motion_sensor_hacking/</link>
            <guid>40834349</guid>
            <pubDate>Sun, 30 Jun 2024 00:44:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://10maurycy10.github.io/projects/motion_sensor_hacking/">https://10maurycy10.github.io/projects/motion_sensor_hacking/</a>, See on <a href="https://news.ycombinator.com/item?id=40834349">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><p><time datetime="2024-06-28">Jun 28, 2024</time>
(<a href="https://10maurycy10.github.io/tags/electronics">Electronics</a>)
(<a href="https://10maurycy10.github.io/tags/wireless">Wireless communication and power</a>)</p><p>I recently got some cheap RCWL-0516 microwave motion sensors, mostly because I was wondering how China managed to make a radar for under a dollar:</p><p><a href="https://10maurycy10.github.io/projects/motion_sensor_hacking/boardrev.png"><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/board.png" alt="Photographs of the front and back of the circuit board"> Click for mirrored back view</a></p><p>Getting one working was quite easy, I just connected the <code>VIN</code> pin to 5 volts, <code>GND</code> to ground, and added a 1 uF decoupling capacitor on the <code>3V3</code> pin.
When someone moves within ~5 meters, the <code>OUT</code> pin goes up to 3 volts for 3 seconds.</p><p>So it works, but how?</p><p>First, I found a datasheet for the the large SOIC-16 chip.
It turns out the <code>BISS0001</code> is an <em>infrared</em> motion sensor chip? How does that work?</p><p>Generally, motion and speed sensing (doppler) radars work by sending out a continuous carrier and mixing the received signal with the transmitted carrier to create a low frequency IF signal.
If reflections are coming from a moving object, the received signal will slowly drift in and out of phase with the transmitted signal, creating a beat frequency at just a few hertz.
Becuase a motion sensor doesn’t care about the exact speed, all the chip has to do is look for millivolt-level changes: all the hard work is already done.</p><p>In my module, the IF signal enters the chip on pin 14, but the chip outputs an amplified copy on pin 16, which is much more oscilloscope friendly:<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup></p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/iftap.png" alt="The IF signal, on pin 16 of the BISS0001 chip, showing a strong oscillation in the middle"></p><p>In the middle of the trace I moved a laptop ~40 centimeters towards the sensor, but the sensor also picked up some slower level shifts on either side from when I reached over to stop the scope.
This trace is actually enough to figure out what the frequency the radar is using: While the laptop was moving, there were 8 peaks, meaning that the round trip path length changed by 8 wavelengths.
Eight wavelengths over a distance of 80 cm comes out to ~10 cm, not that far from the actual wavelength of 9.4 cm.</p><h2 id="so-wheres-all-the-magic">So where’s all the magic?</h2><p>The entire right side of the board is just the BISS001 acting as an amplifier, comparator and timer.
All of the RF stuff happens on the left side of the board using just a handful of components:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/front.png" alt="Photo of the front of the board"></p><p>At first glance, the whole thing is just a single transistor oscillator working at a frequency of 3.18 GHz:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/RF.png" alt="Rough schematic of the RF section"></p><p>The S shaped track on the emitter is a microwave resonator<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup> and antenna, which is driven by the BJT transistor with feedback from a capacitor formed by the resonator and a parallel copper track.
I suspect the ring structure at the back is just to prevent oscillation at other frequencies, many very similar sensors don’t have one, or just use a solid ground plane.
The oscillator is also quite unstable, and drifts by several MHz from hand capacitance and biasing drift, which is likely why the module is quite sensitive to power supply noise.</p><p>But it’s actually 2 oscillators in one, the microwave oscillation is pulsed at around 20 MHz, creating this waveform on the emitter:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/squench.png" alt="20 MHz oscillation visible on emitter">
My scope can’t see 3 GHz, but it’s there everywhere except on the downward slopped part of the waveform.</p><p>What’s happening is that as the oscillator runs, it changes the 66 pF capacitor, raising the emitter voltage until oscillator can’t run anymore.
At this point, the 220 ohm resistor discharges the capacitor, restarting the oscillation in just a few nanoseconds.</p><p>This pulsing allows it to work as a super-regenerative receiver.
Once the transistor’s gain rises above one, the oscillator doesn’t start immediately: It needs a tiny kick to get going.
Any signal in the resonator gets amplified again and again until it’s large enough to charge the capacitor and restart the cycle.
Because of the exponential increase in amplitude, even a tiny amount of RF will increase the pulse frequency, turning the oscillator into a sensitive receiver.
(This is why you never have to wait long for an oscillator to start, noise will quickly be amplified until it clips the transistor amplifier)</p><p>Well hang on, if it’s receiving while the oscillator starts, before it transmits, how is it able to see the phase change from moving objects?</p><p>With the off-time of around 15 nanoseconds, any returns from a static object more then 2.5 meters away will arrive during the oscillator’s start-up.
These static returns act as the radar’s local oscillator, the super-regenerative receiver detects the amplitude modulated signal from interference between static and moving returns.
In an indoors environment with plenty of reflections, there will always be some RF bouncing around to illuminate moving objects, no mater how close they are.</p><p>This sort of radar-by-wishful-thinking approach is probably why the sensor has very inconsistent performance;
Indoors it works very nicely, with up to 5 meters of range, but outdoors with no convenient static returns it often doesn’t work at all.</p><h2 id="a-bit-of-fun-an-s-band-transmitter">A bit of fun, an S-band transmitter:</h2><p>The first modification I tried was to remove the capacitor that causes the 20 MHz pulsing, which is actually two 33 pF capacitors in parallel:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/cw_tx.png" alt="Image showing which 2 capacitors to remove"></p><p>This turns the thing into a transmitter, applying a signal to just about anywhere in the oscillator will frequency modulate it, and the thing can be on/off keyed by cycling power.</p><p>The radar does still somewhat work without the pulsing and super-regenerative parts, except that the IF signals are much weaker, drastically reducing the sensitivity.
What’s happening here is that the the oscillator itself is acting as a mixer, down converting the received signal, but without any gain.</p><h2 id="bistatic-radar">Bistatic radar:</h2><p>Ok, so can we use this in a more conventional radar setup?
I tried placing another unmodified module acting as the receiver next to the transmitter, which resulted in a much more consistent return signal:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/bistatic.png" alt=""></p><p>Signal from moving a laptop towards and away from the radar.</p><p>The strange amplitude variations are gone and the return from my relatively slow moving hand is much weaker, as expected from a doppler radar.
On the other hand, distant return signals are weaker because the receiver is constantly being blasted by RF from the transmitter.
It also functions worse as a motion sensor because it needs significant movement towards or away from it to trigger, unlike normally, where just about anything will trigger it.</p><p>On the other hand, it works quite nicely as a speed sensor by running an FFT or simply detecting zero crossings on the IF (on pin 14/16 of the chip).
The math for this is quite easy, just multiply the wavelength by the beat frequency and divide by 2 for the speed.
For example, the highest beat frequency in the scope trace was 15 Hz, so the speed was .7 m/s:</p><pre tabindex="0"><code>9.4 cm * 15 Hz / 2 = 70 cm/s = .7 m/s
</code></pre><p>If the two modules are separated by 1 to 2 meters or so, the outdoors performance is much better then with just a single module, with the best sensitivity in the area between the two modules.
The performance is still not exactly good, but it is a lot better then the otherwise non-existent outdoors performance.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Coffee helped the Union in the Civil War (116 pts)]]></title>
            <link>https://www.smithsonianmag.com/history/how-coffee-helped-the-union-caffeinate-their-way-victory-civil-war-180984502/</link>
            <guid>40834345</guid>
            <pubDate>Sun, 30 Jun 2024 00:41:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.smithsonianmag.com/history/how-coffee-helped-the-union-caffeinate-their-way-victory-civil-war-180984502/">https://www.smithsonianmag.com/history/how-coffee-helped-the-union-caffeinate-their-way-victory-civil-war-180984502/</a>, See on <a href="https://news.ycombinator.com/item?id=40834345">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-article-body="">
        
          <figure>
            <img src="https://th-thumbnailer.cdn-si-edu.com/S9nO79PwMB8Hlm-ezW8XsfmaMPA=/1000x750/filters:no_upscale():focal(897x760:898x761)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/c4/a2/c4a27834-0cf0-4f9b-821b-28314beed28d/julaug2024_c02_prologue.jpg" alt="Union soldiers sit will coffee and bread in a portrait" itemprop="image">
            <figcaption>
              
                For Union soldiers, a cup of coffee made hardtack biscuits more palatable.&nbsp;
              <span>Heritage Auctions</span>
            </figcaption>
          </figure>
        

        

        <p>Ten months into the Civil War, the Union was short on a crucial supply, the absence of which threatened to sap the fighting strength of the Northern army: coffee. This critical source of energy and morale was considered almost as vital as gunpowder; Union General Benjamin Butler ordered his soldiers to carry coffee with them always, saying it guaranteed success: “If your men get their coffee early in the morning, you can hold” your position.</p>

<p>But by 1862, imports of coffee were down by 40 percent since the start of the war. Though coffee was cultivated around the world from Java to Ethiopia to Haiti, Brazil had been the main supplier to the United States. The Union blockade of Southern ports, including New Orleans, had slowed coffee imports from Brazil to a trickle—and Union merchants and military contractors were able to reroute only a portion of that Brazilian coffee northward; even with Union port cities trying to pick up the slack, the U.S. imported 50 percent less by value from Brazil in 1863 than it did in 1860. Demand, meanwhile, had quadrupled since the fighting began, fueled by a commitment to provide each Union soldier with a generous 36 pounds of coffee per year. Finding a new source of coffee had become a matter of survival.</p>

<p>Luckily for the Union, <a href="https://npg.si.edu/exh/awash/benson.htm">Stephen Allen Benson</a>, president of the relatively young Republic of Liberia, had a plan. In February 1862, he sent a message to Americans in the North: “In Liberia there are about 500,000 coffee trees planted … [and] there is now more coffee exported from Liberia than in any previous period.” Born in Maryland to free Black American parents, Benson had emigrated with his family to the West African colony at the age of 6. By the outbreak of the Civil War, in April 1861, he was one of the largest coffee farmers in Liberia—and he hoped that this new country, to which several thousand Black Americans had fled to escape American racial animus, could provide an essential fuel in the Union’s own fight against slavery. A ship that left the port at Monrovia in August 1862 carried 6,000 pounds of premium African coffee. It was the first major shipment to the Union—and would prove vital in the North’s victory.</p>

<hr>
<p>Coffee replaced tea as the U.S. drink of choice around the time of the American Revolution. From the moment <a href="https://www.smithsonianmag.com/history/the-many-myths-of-the-boston-tea-party-180983399/">patriots tossed chests of tea into Boston Harbor</a> in December 1773, drinking coffee—and boycotting tea—became a sure sign of loyalty to the cause of independence. Pretty soon, the country was obsessed: By the 1830s, coffee consumption was outstripping tea by five to one. In 1832, Andrew Jackson replaced army alcohol rations with coffee, in hopes of energizing the troops and reducing instances of drunken insubordination. By 1860, the U.S. was importing six pounds of the stuff each year for every man, woman and child in the country—and at the outbreak of the Civil War, Americans were drinking twice as much coffee as they were 30 years before.</p>

<p>But the war introduced a problem for the Union’s coffee drinkers. The sudden demand for more coffee as a crucial army provision combined with the blockade of the Southern ports created a crisis. What the Union could import was hardly enough to keep its army supplied, let alone to caffeinate Northern civilians in the manner to which they’d become accustomed.</p>

<figure>
  
    <img src="https://th-thumbnailer.cdn-si-edu.com/nQ92wki8_PRCBD9PTUMbDJVOXt4=/fit-in/1072x0/filters:focal(579x692:580x693)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/1d/74/1d745498-a6d6-4b39-94d9-a0c3d0ce5b7f/julaug2024_c07_prologue.jpg" alt="a tintype portrait of a man" loading="lazy">
  

  <figcaption>
    
      Born in Maryland, Stephen Allen Benson emigrated to Liberia, where he later became the nation’s president—and a major coffee grower.&nbsp;


    
    
      <span>Library of Congress</span>
    
  </figcaption>
</figure>
<p>Yet there was a promising workaround: An early alliance between Northern abolitionists and the Liberian people had begun to bring small quantities of Liberian coffee to the North before the war. In 1848, before his presidency, Benson had formed a partnership with the Quaker merchant and activist George W. Taylor, whose “Free Labor Warehouse” in Philadelphia exclusively sold goods, food and clothes made without enslaved labor. Benson shipped roughly 1,500 pounds of coffee to Taylor that first year, and their partnership continued fruitfully throughout the next decade as they supplied coffee drinkers who were looking for slavery-free alternatives.</p>

<p>Just as some consumers today boycott brands that trouble them, buy fair trade products and otherwise vote with their wallets, some abolitionists used commerce to fight slavery. Liberian coffee was especially attractive to the American Free Produce movement, with its explicit mandate of using ethical commerce to undermine the global slave trade. Coffee had long been championed by Quakers and other Free Produce advocates like Taylor. It was a product that free laborers could grow and that consumers could support with their purchases, even if it cost a little more to pay the farmers.</p>

<p>At the time, the United States had not yet officially recognized the Republic of Liberia, and no formal trade treaties existed between the two countries. Southern states had stood in the way of recognizing Liberia since its independence in 1847, arguing that it would be inappropriate for the U.S. to host a Black diplomatic representative in Washington. But secession created an opening, and right away, Benson began lobbying the U.S. government to extend “treaties of friendship and commerce” that would allow Liberian farmers to bring in coffee on equal terms with other coffee-producing countries.</p>

<p>By the start of 1862, Benson was not alone in his conviction that the farmers of Liberia could bolster the Union war effort. Mercifully for Union generals, President Abraham Lincoln officially recognized the republic that year and raised the tariff on coffee imports to 4 cents a pound as a war-funding effort. That created an opening for imports of Liberia’s more expensive, but also more ethical, coffee—now not so different in price from more established coffees like those from Java. Taylor’s Philadelphia Free Produce store expanded its network in Liberia, bringing new coffee to market from Liberian farmers like Othello Richards and Thomas Moore.</p>

<p>The Union also sent advisers to Liberia, including Edward Morris, a Philadelphia merchant, who visited in 1862 to give free lectures to farmers about best practices for planting coffee—and to ask farmers what support they needed to increase the scale of this new coffee economy. His success was conspicuous. One Liberian settler, William C. Burke, who had been manumitted to emigrate to Liberia by Confederate General Robert E. Lee, wrote to his American contacts that after Morris’ visit, “the attention of almost every [Liberian] farmer has been lately turned towards raising coffee” for the U.S. market.&nbsp; &nbsp;</p>

<div>
    <p><a href="https://subscribe.smithsonianmag.com/?idx=582&amp;inetz=article-banner-ad&amp;promo_name=current-issue&amp;promo_position=in_article&amp;promo_creative=button&amp;promo_id=subscribe" target="_blank">
        <img src="https://th-thumbnailer.cdn-si-edu.com/uk88Z8PqLAKewXQkH56PWwzRCY0=/fit-in/300x0/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/77/2d/772dab9c-fc01-4fda-ba5b-0954e550a2d4/julaug24_webcover.jpg" alt="Cover image of the Smithsonian Magazine July/August 2024 issue">
      </a>
    </p>
    
  </div>


<figure>
  
    <img src="https://th-thumbnailer.cdn-si-edu.com/GlbiQ5sUlIuEqd2pvN3i6_Ank7A=/fit-in/1072x0/filters:focal(496x581:497x582)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/6e/89/6e89d31a-7296-45fe-b93f-dfd7bc07ac31/julaug2024_c19_prologue.jpg" alt="a tintype of man sitting at a table for a portrait" loading="lazy">
  

  <figcaption>
    
      Philadelphia merchant Edward Morris traveled to Liberia in 1862, urging farmers there to grow coffee for the U.S. market.
    
    
      <span>Library of Congress</span>
    
  </figcaption>
</figure>
<p>Newspapers from Maine to Ohio to California reported encouragingly on the supplies of Liberian coffee. On the ground, meanwhile, the Union’s ability to purchase and distribute coffee from Liberia, alongside other sources, was helping the army’s morale. In December 1862, one soldier wrote that “what keeps me alive must be the coffee.” The North was gaining a powerful caffeinated edge over the Confederacy, where importers, stymied by the Union’s ongoing blockade, were having far less success. Indeed, by 1863, coffee had become ludicrously scarce throughout the Confederacy. A Vermont soldier, marching through Louisiana, noted: “The richest planters have had no tea or coffe [sic] for over a year—when any poor coffe has been brought here it sold for $8 a pound.” In contrast, a receipt issued by Taylor’s Free Produce shop in Philadelphia in 1863 shows that he charged just 40 cents per pound for his prime Liberian beans, described by one arbiter to be of “superior” quality compared with non-Liberian coffee; one longtime Philadelphia customer extolled Liberian coffee’s “strength, flavor and aroma.”</p>

<p>Confederate soldiers, huddled over their campfires in the predawn light, had to make do with unpalatable coffee substitutes brewed from acorn grounds, sweet potatoes and other dubious ingredients. Military discipline was reportedly difficult to maintain in the Confederate Army, where, one Union soldier noted, “they get no tea or coffee but plenty of whiskey.” One desperate Confederate soldier wrote a hastily scrawled, undated note to Union troops across the line in Fredericksburg, Virginia: “I send you some tobacco and expect some coffee in return … yours, Rebel.” The lack of coffee was fast eroding Confederate morale.</p>

<figure>
  
    <img src="https://th-thumbnailer.cdn-si-edu.com/n-_YzcY7S7bBQzrcZ2kCppgVMhc=/fit-in/1072x0/filters:focal(247x339:248x340)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/6e/ee/6eee0bfa-bac4-43a2-8931-4bdc313415b7/julaug2024_c20_prologue.jpg" alt="a coffee label with depiction of Uncle Sam" loading="lazy">
  

  <figcaption>
    
      An 1863 coffee package featured a nonchalant Uncle Sam seated on a cannon, whittling, with a torn Confederate flag under his foot.&nbsp;
    
    
      <span>Library of Congress</span>
    
  </figcaption>
</figure>
<p>The Union Army acted decisively to press its caffeine advantage. At the end of August 1864, the <em>Alexandria Gazette</em> in Virginia lamented that the Union troops in Sherman’s siege of Atlanta had “destroyed 500 sacks of genuine Rio coffee” intended for Confederate consumption—about 55,000 pounds in all. At this point in the war, Union supplies of coffee, including those from Liberia, were so assured that Northern soldiers could even afford to destroy the Confederate stock rather than confiscate or consume it themselves. An article on the same front page of the <em>Gazette</em> noted that a ship had recently arrived in New York with “40,000 pounds of ‘Liberia-Mocha’ coffee.” Benson’s small individual contribution in 1864, around 220 pounds of coffee sold through Taylor’s Free Produce Warehouse that same year, would have been enough to supply six soldiers for the full final year of the war.</p>

<p>At the Confederate surrender at Appomattox in April 1865, Michigan soldier William Smith noted that the Confederate soldiers present were licking their lips hopefully, with “a keen relish for a cup of Yankee coffee.” The end of the war and Benson’s much-mourned death in 1865—an Ohio newspaper noted his passing as a “great loss”—did not put a damper on Liberian coffee exports to the U.S., where, after the war, coffee from the republic was increasingly available far beyond Free Produce shops.</p>

<p>For their part, Liberian farmers counted their trading partnership with the Union a success. The war had created a new and durable market for their coffee, thanks in part to cooperation with the Free Produce Movement. As more people tried Liberian coffee, they tended to become devoted to it. As one Yale University chemistry professor recorded at the time, “Its quality was so much superior to most coffee in common use in this country that I at once ordered a sample.” <em>Coffea liberica</em>, as it was officially dubbed in 1876, was not only delicious, but also resistant to diseases that affected other varieties, and it won Liberia plenty of new trading partners: By 1885, its annual exports to countries including Britain and Germany reached an impressive 800,000 pounds—and then, only seven years later, a whopping 1.8 million.</p>

<p>The U.S. coffee market, in turn, was forever changed by the war. Indeed, Smithsonian curator of political history <a href="https://www.smithsonianmag.com/author/jon-grinspan-phd/">Jon Grinspan</a> says that drinking coffee three times a day had hooked America’s soldiers, with the enlisted men “developing lifelong peacetime habits while camped at Shiloh or Petersburg.” By 1885, the U.S. was importing 11 pounds of coffee per person, per year—nearly double prewar levels. Some news reports from this period—written, perhaps, after a third or fourth cup of Liberian brew—sometimes described coffee as a universal remedy, even touting its alleged benefits as a disinfectant.</p>

<p>And in 1880, after the end of Reconstruction, with many reformers turning their attention from racial justice to temperance, the <em>Philadelphia Times</em> expressed the hope that “coffee houses would yet win the victory over gin palaces.” With the help of the prolific Liberian coffee plant, nothing seemed out of reach.</p>

<hr>
<h2>Coffee Talk</h2>

<p><em>Manic birds, excitable goats and other invigorating tales behind the birth of our java addiction</em></p>

<p><em>By Sonja Anderson</em></p>

<figure>
  
    <img src="https://th-thumbnailer.cdn-si-edu.com/Rr5AjQW-VZvAZalH_SZ4zkNinDo=/fit-in/1072x0/filters:focal(692x860:693x861)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer_public/00/29/0029d4ac-defe-452b-b3cb-53d1b878315e/julaug2024_c17_prologue.jpg" alt="an illustration of the shrub Coffea arabica" loading="lazy">
  

  <figcaption>
    
      Originating in Ethiopia, the shrub <em>Coffea arabica</em> is believed to be the first coffee plant cultivated. It is now grown in high-elevation tropical climates around the world.&nbsp;
    
    
      <span>Alamy</span>
    
  </figcaption>
</figure>
<p><strong>Get your goat</strong></p>

<p>According to legend, a ninth-century Ethiopian shepherd named Kaldi noticed his goats acting hyper after eating berries from a strange tree. He harvested some for himself and, upon consuming them, enjoyed a similarly energizing effect. Kaldi shared his zippy discovery with some nearby monks, who disapprovingly threw the berries into a fire—accidentally roasting their seeds, which we call beans. The fragrant beans were scooped from the coals, crushed, and soaked in water—creating the first cup of joe.</p>

<p><strong>Sea fare</strong></p>

<p>Ethiopians took nourishment from the coffee shrub in various ways: brewing its leaves and berries into tea, grinding and mixing the seeds with animal fat, or simply chewing on them. Some say that enslaved Northeast Africans—captured and forced across the Red Sea during a 1,300-year period of slave trade that began in the seventh century—may have carried such sustaining snacks onto ships, accidentally transporting the crop to another region that calls itself the birthplace of coffee: Yemen.</p>

<p><strong>Early birds</strong></p>

<p>In a different account, a 13th-century Moroccan mystic named Sheikh al-Shadhili saw a flock of amped-up birds soaring overhead, chewing unfamiliar-looking berries as they flew. After munching on some of the morsels the birds had dropped, Shadhili felt strangely alert—and he formed a habit.</p>

<p><strong>Energy for days</strong></p>

<p>Yemen’s coffee origin story credits one of Shadhili’s disciples: Omar, a healing priest once exiled from the town of Mocha for moral transgressions. Stranded in the hills, nearly starving, Omar plucked some red berries from a shrub. Finding the raw fruits’ seeds inedibly bitter, he opted to cook them over a fire, which hardened them beyond edibility. To correct this mistake, Omar boiled the roasted seeds, watching while the water turned brown and sweetly fragrant. Omar drank the dark liquid and, it is said, enjoyed days of sustained energy.</p>

        

        

        
          
  <div>
      <p>Get the latest <strong>History</strong> stories in your inbox?</p>
      
    </div>


        

        

        
          


  
    
      
    
  

  


        

        
        
        
        

        
          
            <section>
              <nav>Filed Under:
                
                  
                    <a href="https://www.smithsonianmag.com/tag/abraham-lincoln/">Abraham Lincoln</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/african-history/">African History</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/civil-war/">Civil War</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/coffee/">Coffee</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/confederacy/">Confederacy</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/food-history/">Food History</a>, 
                  
                
                  
                    <a href="https://www.smithsonianmag.com/tag/slavery/">Slavery</a>
                  
                
              </nav>
            </section>
          
        

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Trilobites killed by volcanic ash (133 pts)]]></title>
            <link>https://www.bristol.ac.uk/news/2024/june/prehistoric-pompeii.html</link>
            <guid>40833645</guid>
            <pubDate>Sat, 29 Jun 2024 22:14:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bristol.ac.uk/news/2024/june/prehistoric-pompeii.html">https://www.bristol.ac.uk/news/2024/june/prehistoric-pompeii.html</a>, See on <a href="https://news.ycombinator.com/item?id=40833645">Hacker News</a></p>
<div id="readability-page-1" class="page"><p property="description">Some of the most perfectly preserved trilobite fossils ever found have revealed details of the extinct arthropod unknown until now. </p><div property="articleBody"><p>The new specimens, which were killed and fossilised quickly when volcanic ash smothered them underwater more than 500 million years ago, show details never before seen in any trilobite, despite the millions of fossils gathered and studied over the past two centuries.</p>
<p>The trilobites, which are from the Cambrian period, have been the subject of research by an international team of scientists, led by Professor Abderrazak El Albani, geologist based at University of Poitiers and originally from Morocco. This international team include co-authors Harry Berks and <a href="https://www.bristol.ac.uk/people/person/Philip-Donoghue-4fd2d6ef-3986-4566-97e4-7ae7db296525/">Philip Donoghue</a> from the <a href="https://www.bristol.ac.uk/">University of Bristol’s</a> <a href="https://www.bristol.ac.uk/earthsciences/">School of Earth Sciences</a>.</p>
<p>They discovered clustering of specialised leg pairs around the mouth giving a clearer picture of how trilobites fed.</p>
<p>Harry Berks explained: “The head and body appendages had an inward-facing battery of dense spines like those of horseshoe crabs, manipulating and tearing prey or scavenged carcasses as they were moved forwards to the mouth.</p>
<p>“The mouth, a narrow slit behind a fleshy lobe called a labrum, known in living arthropods, has never been so clearly seen in a trilobite before.”</p>
<p>The appendages at the edge of the mouth have curved bases like spoons and are so small that they went undetected in less perfectly preserved fossils.&nbsp;</p>
<p>It was widely thought that trilobites had three pairs of head appendages behind their long antennae but both Moroccan species show that there were four pairs.</p>
<p>The Moroccan trilobites date to the Cambrian Period, about 515 million years ago.&nbsp; The fossils are found in rock composed of volcanic ash, deposited on the shallow seafloor on which the trilobites lived.&nbsp; The trilobites, and even tiny ‘lamp shells’ (brachiopods) that attached to them via a delicate stalk in life, were killed by the hot, suffocating ash and were fossilised very quickly when the ash that encased them transformed to rock.&nbsp; The outer surface of the trilobites, all of their legs and the lamp shells hitching a ride on them were moulded as impressions in the volcanic rock, while the trilobites’ digestive tract was preserved after it filled with ash.</p>
<p>To see how these impressions in the rock looked just after the trilobites died, the team used a high-resolution X-ray micro-tomography (XRµCT).&nbsp; X-rays detect the difference in density between the rock in which a trilobite was moulded and the empty (air) space where the body was before it was obliterated. Co-author, Harry Berks, used computer modelling of X-ray slices through the fossils to study the anatomy of the entire body of the trilobites in 3-dimensions, freed from the surrounding rock. Harry said “The computer work is pain-staking but it’s definitely been worth it. These trilobites look so alive, it’s almost as though they could crawl out of the rock.”</p>
<p>The ‘Pompei’ trilobites are so remarkable because they are not flattened or deformed like many fossils and every leg is arranged as it was in life, with even small spines and sensory bristles along the joints of the legs preserved. “I’ve been studying trilobites for nearly 40 years, but I never felt like I was looking at live animals as much as I have with these ones”, said co-author Greg Edgecombe from the Natural History Museum, London.</p>
<p>The study sheds new light on the anatomy and biology of the long-vanished trilobites but also signals the enormous potential for volcanic ash deposited in shallow marine settings as a setting to search for exceptionally preserved fossils.&nbsp; Co-author Philip Donoghue said: “No one expects to find fossils in volcanic rocks but our study shows that volcanic ash deposits are definitely worth a look. Who knows what secrets remains to be discovered in these understudied rocks?”&nbsp;</p>
<p>Trilobites are a completely extinct kind of arthropod, the group of jointed-legged animals that includes more than a million species of insects, crabs, spiders, and centipedes alive today.&nbsp; They are one of the most abundant and diverse lifeforms in fossil deposits of the Palaeozoic Era, surviving from 521 million years ago to 250 million years ago.&nbsp; Palaeontologists have described more than 20,000 species of trilobites, ranging in body length from less than two millimetres to more than 90 centimetres.&nbsp; Most trilobite species are only known from their hard exoskeleton (like a lobster’s shell), but only about 30 species preserve a pair of antennae and/or pairs of two-branched legs under the head shield and each segment of the body.&nbsp;</p>
<p>The paper:</p>
<p>'Rapid volcanic ash entombment reveals the 3D anatomy of Cambrian trilobites' by El Albani A, Donoghue P.C.J, Berks, H.O et al in <em>Science</em>.&nbsp;</p>
</div></div>]]></description>
        </item>
    </channel>
</rss>