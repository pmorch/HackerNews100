<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 13 Sep 2024 06:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Notes on OpenAI's new o1 chain-of-thought models (294 pts)]]></title>
            <link>https://simonwillison.net/2024/Sep/12/openai-o1/</link>
            <guid>41527143</guid>
            <pubDate>Fri, 13 Sep 2024 00:48:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2024/Sep/12/openai-o1/">https://simonwillison.net/2024/Sep/12/openai-o1/</a>, See on <a href="https://news.ycombinator.com/item?id=41527143">Hacker News</a></p>
Couldn't get https://simonwillison.net/2024/Sep/12/openai-o1/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[FDA Authorizes First Over-the-Counter Hearing Aid Software (123 pts)]]></title>
            <link>https://www.fda.gov/news-events/press-announcements/fda-authorizes-first-over-counter-hearing-aid-software</link>
            <guid>41526288</guid>
            <pubDate>Thu, 12 Sep 2024 22:24:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.fda.gov/news-events/press-announcements/fda-authorizes-first-over-counter-hearing-aid-software">https://www.fda.gov/news-events/press-announcements/fda-authorizes-first-over-counter-hearing-aid-software</a>, See on <a href="https://news.ycombinator.com/item?id=41526288">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

                                 <article id="main-content" role="article">
          
                                                                <header role="heading" aria-level="1">
                         






                      </header>
                              
                                                                           <div role="main">

                            
                            
                            
                            
                                              
    <div>
    <dl>
        <dt>For Immediate Release:</dt>
                  <dd><time datetime="2024-09-12T15:00:00Z">September 12, 2024</time>
</dd>
                 
                
      </dl>
    </div>
 

  
      
       

  <p>Today, the U.S. Food and Drug Administration authorized the first over-the-counter (OTC) hearing aid software device, Hearing Aid Feature, intended to be used with compatible versions of the Apple AirPods Pro headphones. Once installed and customized to the user’s hearing needs, the Hearing Aid Feature enables compatible versions of the AirPods Pro to serve as an OTC hearing aid, intended to amplify sounds for individuals 18 years or older with perceived mild to moderate hearing impairment.&nbsp;</p>

<p><strong>“Hearing loss is a significant public health issue impacting millions of Americans,” said Michelle Tarver, M.D., Ph.D., acting director of the FDA's Center for Devices and Radiological Health. “Today’s marketing authorization of an over-the-counter hearing aid software on a widely used consumer audio product is another step that advances the availability, accessibility and acceptability of hearing support for adults with perceived mild to moderate hearing loss.”&nbsp;</strong></p>

<p>More than 30 million American adults report some degree of hearing loss. Hearing loss can be caused by aging, exposure to loud noises, certain medical conditions, and other factors. Hearing loss can have a negative effect on communication, relationships, school or work performance and emotional well-being. Using hearing aids has been <a href="https://www.federalregister.gov/documents/2022/08/17/2022-17230/medical-devices-ear-nose-and-throat-devices-establishing-over-the-counter-hearing-aids#p-666">linked</a> to reductions in the frequency or severity of cognitive decline, depression and other health problems in older adults.&nbsp;</p>

<p>The <a href="https://web.archive.org/web/20221028042729/https:/www.fda.gov/news-events/press-announcements/fda-finalizes-historic-rule-enabling-access-over-counter-hearing-aids-millions-americans">FDA’s OTC hearing aid regulations</a> established in October 2022 represented a significant step toward helping ensure that adults with mild to moderate hearing loss have improved access to more safe and effective product options. The rule enabled consumers with perceived mild to moderate hearing impairment to purchase hearing aids directly from stores or online retailers without the need for a medical exam, prescription or seeing an audiologist. Today’s authorization exemplifies the FDA’s continued commitment to provide safe and effective solutions for those with hearing loss, while also fostering innovation and convenience.&nbsp;</p>

<p>The Hearing Aid Feature (HAF) is a software-only mobile medical application that is intended to be used with compatible versions of the AirPods Pro. The HAF utilizes a self-fitting strategy, and users may adjust it to meet their hearing needs without the assistance of a hearing professional. The HAF is set up using an iOS device (e.g., iPhone, iPad), and the user’s hearing levels are accessed from the iOS HealthKit to customize the HAF. Users can refine the volume, tone and balance settings after setting up the HAF.</p>

<p>The HAF was evaluated in a clinical study with 118 subjects with perceived mild to moderate hearing loss, at multiple U.S. sites. The results demonstrated that subjects who used the HAF self-fitting strategy achieved similar perceived benefit as subjects who received professional fitting of the same device. Results also showed comparable performance for tests measuring levels of amplification in the ear canal, as well as a measure of speech understanding in noise. No adverse events related to the device were observed in this study.</p>

<p>This application was reviewed under the FDA’s <a href="https://www.fda.gov/medical-devices/premarket-submissions-selecting-and-preparing-correct-submission/de-novo-classification-request">De Novo premarket review pathway</a>, a regulatory pathway for some low- to moderate-risk devices that are novel and for which there is no prior legally marketed device.</p>

<p>As part of the Center for Devices and Radiological Health’s strategic priority to advance health equity, the Center will continue to support innovation that expands access to important technologies and brings health care directly to patients.</p>

<p>The FDA granted marketing authorization of the Hearing Aid Feature to Apple Inc.</p>

  <h2>Related Information</h2>
  
  

<p>###</p>
  <div data-quickedit-field-id="node/423254/field_generic_long_text/en/full">
      <p>Boilerplate</p>
      <p>The FDA, an agency within the U.S. Department of Health and Human Services, protects the public health by assuring the safety, effectiveness, and security of human and veterinary drugs, vaccines and other biological products for human use, and medical devices. The agency also is responsible for the safety and security of our nation’s food supply, cosmetics, dietary supplements, radiation-emitting electronic products, and for regulating tobacco products.</p>
    </div>
<hr>

<div>
  <h2>Inquiries</h2>
  
    
        
         
  </div>
 
<br>

<!--BEGIN QUALTRICS WEBSITE FEEDBACK SNIPPET-->
<!--BEGIN QUALTRICS WEBSITE FEEDBACK SNIPPET-->



              
                                            
              
            </div>

                                                                                  
            

                                                                                
            
                 </article>        
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Data sleuths who spotted research misconduct cleared of defamation (300 pts)]]></title>
            <link>https://arstechnica.com/science/2024/09/court-clears-researchers-of-defamation-for-identifying-manipulated-data/</link>
            <guid>41525778</guid>
            <pubDate>Thu, 12 Sep 2024 21:28:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/science/2024/09/court-clears-researchers-of-defamation-for-identifying-manipulated-data/">https://arstechnica.com/science/2024/09/court-clears-researchers-of-defamation-for-identifying-manipulated-data/</a>, See on <a href="https://news.ycombinator.com/item?id=41525778">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h4>
      Evidence-supported conclusions aren't defamation    —
</h4>
            
            <h2 itemprop="description">Harvard, however, will still face trial over how it managed the investigation.</h2>
                    </div><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/09/GettyImages-1446381414-800x533.jpg" alt="A formal red brick building on a college campus.">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2024/09/GettyImages-1446381414.jpg" data-height="1414" data-width="2121">Enlarge</a> <span>/</span> Harvard Business School was targeted by a faculty member's lawsuit.</p></figcaption>  </figure>

  




<!-- cache hit 54:single/related:26fdcab0e9713d43525c2588c324aa43 --><!-- empty -->
<p>Earlier this year, we got a look at something unusual: the results of an internal investigation conducted by Harvard Business School that concluded one of its star faculty members had committed research misconduct. Normally, these reports are kept confidential, leaving questions regarding the methods and extent of data manipulations.</p>
<p>But in this case, the report became public because the researcher had filed a lawsuit that alleged defamation on the part of the team of data detectives that had first identified potential cases of fabricated data, as well as Harvard Business School itself. Now, the court has ruled on motions to dismiss the case. While the suit against Harvard will go on, <a href="https://storage.courtlistener.com/recap/gov.uscourts.mad.259933/gov.uscourts.mad.259933.74.0.pdf">the court has ruled</a> that evidence-backed conclusions regarding fabricated data cannot constitute defamation—which is probably a very good thing for science.</p>
<h2>Data and defamation</h2>
<p>The researchers who had been sued, Uri Simonsohn, Leif Nelson, and Joe Simmons, run a blog called <a href="https://datacolada.org/">Data Colada</a> where, among other things, they note cases of suspicious-looking data in the behavioral sciences. As we detailed in our earlier coverage, they published a series of blog posts describing an apparent case of fabricated data in four different papers published by the high-profile researcher Francesca Gino, a professor at Harvard Business School.</p>
<p>The researchers also submitted the evidence to Harvard, which ran its own investigation that included interviewing the researchers involved and examining many of the original data files behind the paper. In the end, Harvard determined that research misconduct had been committed, placed Gino on administrative leave and considered revoking her tenure. Harvard contacted the journals where the papers were published to inform them that the underlying data was unreliable.</p>
<p>Gino then filed suit alleging that Harvard had breached their contract with her, defamed her, and interfered with her relationship with the publisher of her books. She also added defamation accusations against the Data Colada team. Both Harvard and the Data Colada collective filed a motion to have all the actions dismissed, which brings us to this new decision.</p>
<p>Harvard got a mixed outcome. This appears to largely be the result that the Harvard Business School adopted a new and temporary policy for addressing research misconduct when the accusations against Gino came in. This, according to the court, leaves questions regarding whether the university had breached its contract with her.</p>                                                                        
                                                                                
<p>However, most of the rest of the suit was dismissed. The judge ruled that the university informing Gino's colleagues that Gino had been placed on administrative leave does not constitute defamation. Nor do the notices requesting retractions sent to the journals where the papers were published. "I find the Retraction Notices amount 'only to a statement of [Harvard Business School]’s evolving, subjective view or interpretation of its investigation into inaccuracies in certain [data] contained in the articles,' rather than defamation," the judge decided.</p>
<h2>Colada in the clear</h2>
<p>More critically, the researchers had every allegation against them thrown out. Here, the fact that the accusations involved evidence-based conclusions, and were presented with typical scientific caution, ended up protecting the researchers.</p>
<p>The court cites precedent to note that “[s]cientific controversies must be settled by the methods of science rather than by the methods of litigation” and concludes that the material sent to Harvard "constitutes the Data Colada Defendants’ subjective interpretation of the facts available to them." Since it had already been determined that Gino was a public figure due to her high-profile academic career, this does not rise to the standard of defamation.</p>
<p>And, while the Data Colada team was pretty definitive in determining that data manipulation had taken place, its members were cautious about acknowledging that the evidence they had did not clearly indicate Gino was the one who had performed the manipulation.</p>
<p>Finally, it was striking that the researchers had protected themselves by providing links to the data sources they'd used to draw their conclusions. The decision cites a precedent that indicates "by providing hyperlinks to the relevant information, the articles enable readers to review the underlying information for themselves and reach their own conclusions."</p>
<p>So, overall, it appears that, by couching their accusations in the cautious language typical of scientific writing, the researchers ended up protecting themselves from accusations of defamation.</p>
<p>That's an important message for scientists in general. One of the striking developments of the last few years has been the development of online communities where scientists identify and discuss instances of image and data manipulation, some of which have ultimately resulted in retractions and other career consequences. Every now and again, these activities have resulted in threats of lawsuits against these researchers or journalists who report on the issue. Occasionally, suits get filed.</p>
<p>Ultimately, it's probably good for the scientific record that these suits are unlikely to succeed.</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI O1 Model (1517 pts)]]></title>
            <link>https://openai.com/index/learning-to-reason-with-llms/</link>
            <guid>41523070</guid>
            <pubDate>Thu, 12 Sep 2024 17:08:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openai.com/index/learning-to-reason-with-llms/">https://openai.com/index/learning-to-reason-with-llms/</a>, See on <a href="https://news.ycombinator.com/item?id=41523070">Hacker News</a></p>
Couldn't get https://openai.com/index/learning-to-reason-with-llms/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Metformin decelerates aging clock in male monkeys (183 pts)]]></title>
            <link>https://www.cell.com/cell/abstract/S0092-8674(24)00914-0</link>
            <guid>41522931</guid>
            <pubDate>Thu, 12 Sep 2024 16:56:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cell.com/cell/abstract/S0092-8674(24)00914-0">https://www.cell.com/cell/abstract/S0092-8674(24)00914-0</a>, See on <a href="https://news.ycombinator.com/item?id=41522931">Hacker News</a></p>
Couldn't get https://www.cell.com/cell/abstract/S0092-8674(24)00914-0: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: iFixit created a new USB-C, repairable soldering system (746 pts)]]></title>
            <link>https://hackaday.com/2024/09/12/review-ifixits-fixhub-may-be-the-last-soldering-iron-you-ever-buy/</link>
            <guid>41521919</guid>
            <pubDate>Thu, 12 Sep 2024 15:18:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hackaday.com/2024/09/12/review-ifixits-fixhub-may-be-the-last-soldering-iron-you-ever-buy/">https://hackaday.com/2024/09/12/review-ifixits-fixhub-may-be-the-last-soldering-iron-you-ever-buy/</a>, See on <a href="https://news.ycombinator.com/item?id=41521919">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
        <p>Like many people who solder regularly, I decided years ago to upgrade from a basic iron and invest in a soldering station. My RadioShack digital station has served me well for the better part of 20 years. It heats up fast, tips are readily available, and it’s a breeze to dial in whatever temperature I need. It’s older than both of my children, has moved with me to three different homes, and has outlived two cars and one marriage (so far, anyway).</p>
<figure id="attachment_706988" aria-describedby="caption-attachment-706988"><a href="https://hackaday.com/wp-content/uploads/2024/09/fixhub_radioshack.jpg"><img decoding="async" data-attachment-id="706988" data-permalink="https://hackaday.com/2024/09/12/review-ifixits-fixhub-may-be-the-last-soldering-iron-you-ever-buy/fixhub_radioshack/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_radioshack.jpg" data-orig-size="1026,853" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="fixhub_radioshack" data-image-description="" data-image-caption="<p>Hackaday still used B&amp;W pictures when I bought this.</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_radioshack.jpg?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_radioshack.jpg?w=752" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/09/fixhub_radioshack.jpg?w=400" alt="" width="350" height="291" srcset="https://hackaday.com/wp-content/uploads/2024/09/fixhub_radioshack.jpg 1026w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_radioshack.jpg?resize=250,208 250w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_radioshack.jpg?resize=400,333 400w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_radioshack.jpg?resize=752,625 752w" sizes="(max-width: 350px) 100vw, 350px"></a><figcaption id="caption-attachment-706988">When I got this, Hackaday still used B&amp;W pictures.</figcaption></figure>
<p>As such, when the new breed of “smart” USB-C soldering irons started hitting the scene, I didn’t find them terribly compelling. Oh sure, I bought a Pinecil. But that’s because I’m an unrepentant open source zealot and love the idea that there’s a soldering iron running a community developed firmware. In practice though, I only used the thing a few times, and even then it was because I needed something portable. Using it at home on the workbench? It just never felt up to the task of daily use.</p>
<p>So when iFixit got in contact a couple weeks back and said they had a <a href="https://www.ifixit.com/fixhub" target="_blank">prototype USB-C soldering iron</a> they wanted me to take a look at, I was skeptical to say the least. But then I started reading over the documentation they sent over, and couldn’t deny that they had some interesting ideas. For one, it was something of a hybrid iron. It was portable when you needed it to be, yet offered the flexibility and power of a station when you were at the bench.</p>
<p>Even better, they were planning on putting their money where their mouth is. The hardware was designed with repairability in mind at every step. Not only was it modular and easy to open up, but the company would be providing full schematics, teardown guides, and spare parts.</p>
<p>Alright, fine. Now you’ve got my attention.</p>

<h2>Best of Both Worlds</h2>
<p>Before we get too much farther, I should clarify that the FixHub is technically two separate devices. Officially iFixit calls the combo a “<a href="https://www.ifixit.com/News/99434/introducing-fixhub-the-portable-soldering-system" target="_blank">Portable Soldering System</a>” in their documentation, which is made up of the <a href="https://www.ifixit.com/products/fixhub-power-series-smart-soldering-iron" target="_blank">Smart Soldering Iron</a> and the <a href="https://www.ifixit.com/products/fixhub-power-series-portable-soldering-station" target="_blank">Portable Power Station</a>. While they are designed to work best when combined, both are fully capable of working independently of each other.</p>
<h3>Smart Soldering Iron</h3>
<p>The star of the show is, of course, the Smart Soldering Iron. It’s a 100 watt iron that comes up to operating temperature in under five seconds and can work with any suitably beefy USB-C Power Delivery source. The size and general proportions of the iron are very close to the Pinecil V2, though the grip is larger and considerably more comfortable to hold. The biggest difference between the two however is the absence of a display or configuration buttons. According to iFixit, most users don’t change their settings enough to justify putting the interface on the iron itself. That doesn’t mean you can’t tweak the iron’s settings when used in this stand-alone configuration, but we’ll get back to that in a minute.</p>
<p><a href="https://hackaday.com/wp-content/uploads/2024/09/fixhub_pinecil.jpg" target="_blank"><img decoding="async" data-attachment-id="706962" data-permalink="https://hackaday.com/2024/09/12/review-ifixits-fixhub-may-be-the-last-soldering-iron-you-ever-buy/fixhub_pinecil/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_pinecil.jpg" data-orig-size="1268,400" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="fixhub_pinecil" data-image-description="" data-image-caption="" data-medium-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_pinecil.jpg?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_pinecil.jpg?w=800" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/09/fixhub_pinecil.jpg" alt="" width="800" height="252" srcset="https://hackaday.com/wp-content/uploads/2024/09/fixhub_pinecil.jpg 1268w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_pinecil.jpg?resize=250,79 250w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_pinecil.jpg?resize=400,126 400w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_pinecil.jpg?resize=800,252 800w" sizes="(max-width: 800px) 100vw, 800px"></a></p>
<p>The only control on the iron is a slide switch on the tail end that cuts power to the heating element. I like this arrangement a lot more than the software solution used on irons like the Pinecil. The click of the switch just feels more reliable than having to hold down a button and hoping the iron’s firmware understands that I want to turn the thing off and not adjust some setting. Of course, this is still a “smart” iron, so naturally there’s also support for accelerometer based idle and sleep modes that you can enable.</p>
<p>While there’s no display, the illuminated ring behind the grip does provide a visual indicator of what the iron is doing: solid blue means it has power but the heating element is off, a pulsing blue indicates the iron is heating, and orange means it has reached the desired temperature. If you flick the heater switch off, the ring pulses purple until it cools back off and returns to blue. It’s a simple and effective system, but the visual distinction between the blue and purple isn’t great. Would love to see the ability to customize these colors in a future firmware update.</p>
<p><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->
<video id="video-706883-1" width="800" height="322" preload="metadata" controls="controls"><source type="video/mp4" src="https://hackaday.com/wp-content/uploads/2024/09/fixhub_ring_demo.mp4?_=1"><a href="https://hackaday.com/wp-content/uploads/2024/09/fixhub_ring_demo.mp4">https://hackaday.com/wp-content/uploads/2024/09/fixhub_ring_demo.mp4</a></video></p>
<p>The iron has a couple of clever portability features for those who often find themselves hacking on the go. The magnetic cap can be placed over the tip even when it’s hot, which means you don’t need to wait for the iron to cool down before you pack it away in your bag. The included USB-C cable also comes with a locking collar that mates with the groves in the tail of the iron — this keeps the cable from pulling out if you’ve got yourself contorted into some weird angle, but doesn’t prevent you from using your own cable should you want.</p>

<p>As for the tip, it can be easily removed without tools and uses a 3.5 mm TRS plug like the Miniware TS80, although I don’t have a TS80 handy to test if the tips are actually compatible. For their part, iFixit says they plan on offering an array of styles and sizes of tips in addition to the 1.5 mm bevel that the Smart Soldering Iron ships with.</p>
<h3>Portable Power Station</h3>
<p>While it’s not required to use the Smart Soldering Iron, for the best experience, you’ll want to spring for the Portable Power Station. It’s essentially a 5,200 mAh battery bank capable of powering devices at 100 W, with a single USB-C port on the back for charging and two on the front for whatever devices you want to plug into it.</p>
<p>The trick is, once the Station detects you’ve plugged a Smart Soldering Iron into it, you’re given the ability to configure it via the OLED screen and rotary encoder on the front of the device. There’s even support for connecting a pair of Smart Soldering Irons to the Station, each with its own independent configuration. Though in that case, both would have to share the total 100 W output.</p>
<p><video id="video-706883-2" width="800" height="442" preload="metadata" controls="controls"><source type="video/mp4" src="https://hackaday.com/wp-content/uploads/2024/09/fixhub_station_demo.mp4?_=2"><a href="https://hackaday.com/wp-content/uploads/2024/09/fixhub_station_demo.mp4">https://hackaday.com/wp-content/uploads/2024/09/fixhub_station_demo.mp4</a></video></p>
<p>Assuming a single Smart Soldering Iron, iFixit says you should expect to get up to eight hours of runtime from the Portable Power Station. Of course there are a lot of variables involved, so your mileage may vary. If you’re spending most of your time at the bench, you can keep the rear USB-C port connected to a Power Delivery charger and use it more or less like a traditional station.</p>
<h2>The Internet of Irons</h2>
<p>Plugging the Smart Soldering Iron into the Power Station is the most obvious way of tweaking its various settings, but as I mentioned earlier, it’s not the only way.</p>
<p><a href="https://hackaday.com/wp-content/uploads/2024/09/fixhub_web.png" target="_blank"><img loading="lazy" decoding="async" data-attachment-id="706970" data-permalink="https://hackaday.com/2024/09/12/review-ifixits-fixhub-may-be-the-last-soldering-iron-you-ever-buy/fixhub_web/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_web.png" data-orig-size="636,945" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="fixhub_web" data-image-description="" data-image-caption="" data-medium-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_web.png?w=269" data-large-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_web.png?w=421" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/09/fixhub_web.png?w=421" alt="" width="310" height="461" srcset="https://hackaday.com/wp-content/uploads/2024/09/fixhub_web.png 636w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_web.png?resize=168,250 168w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_web.png?resize=269,400 269w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_web.png?resize=421,625 421w" sizes="(max-width: 310px) 100vw, 310px"></a></p>
<p>Maybe you don’t want to buy the Station, or you left it at home. In either event, you can simply plug the iron into your computer and <a href="https://hackaday.com/2022/03/21/web-serial-terminal-means-its-always-hacking-time/">configure it via WebSerial</a>.</p>
<p>You’ll need a browser based on Chrome to pull this trick off, as Mozilla has decided (at least, for now) to not include the capability in Firefox. In testing, it worked perfectly on both my Linux desktop and Chromebook.</p>
<p>Unfortunately, plugging the iron into your phone won’t work, as the mobile version of Chrome does not currently support WebSerial. But given the vertical layout of the interface and the big touch-friendly buttons, I can only assume that iFixit is either banking on this changing soon or has a workaround in mind. Being able to plug the iron into your phone for a quick settings tweak would be incredibly handy, so hopefully it will happen one way or another.</p>
<p>The WebSerial interface not only gives you access to all the same settings as plugging the iron into the Power Station does, but it also serves as the mechanism for updating the firmware on the iron.</p>
<p>Incidentally, the Power Station has it’s own nearly identical WebSerial interface. Primarily this would be used for upgrading the firmware, but it’s not hard to imagine that some users would prefer being able to change their settings on the big screen rather than having to squint at an OLED not much larger than their thumbnail.</p>
<h2>Solder At Your Command</h2>
<p>But wait! I hear those gears turning in your head. If the Smart Soldering Iron into the Power Station both feature WebSerial interfaces that let you play around with their settings, does that mean they might also offer a traditional serial interface for you to poke around in?</p>
<p><a href="https://hackaday.com/wp-content/uploads/2024/09/fixhub_serial_border.png" target="_blank"><img loading="lazy" decoding="async" data-attachment-id="706978" data-permalink="https://hackaday.com/2024/09/12/review-ifixits-fixhub-may-be-the-last-soldering-iron-you-ever-buy/fixhub_serial_border/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_serial_border.png" data-orig-size="842,946" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="fixhub_serial_border" data-image-description="" data-image-caption="" data-medium-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_serial_border.png?w=356" data-large-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_serial_border.png?w=556" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/09/fixhub_serial_border.png" alt="" width="800" height="899" srcset="https://hackaday.com/wp-content/uploads/2024/09/fixhub_serial_border.png 842w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_serial_border.png?resize=223,250 223w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_serial_border.png?resize=356,400 356w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_serial_border.png?resize=556,625 556w" sizes="(max-width: 800px) 100vw, 800px"></a></p>
<p>Hell yeah they do!</p>
<p>There was no mention of this terminal interface in any of the documentation I received from iFixit, but thanks to the built-in help function and tab completion, I was able to make my way around the various tools and functions. I never knew how badly I yearned to adjust the temperature on my soldering station from the command line before this moment. There’s clearly a lot of potential here, and I’m really looking forward to seeing what the community can come up given this level of control.</p>
<h2>A Look Under the Hood</h2>
<p>iFixit offered to give me a peek at the in-development repair guides for the Smart Soldering Iron and the Power Station, but I passed. For one thing, there’s no doubt in my mind that the finished product is going to be phenomenally detailed. Just look at any of their in-house guides, and you’ll know what to expect. But more to the point, I wanted to see how hard it would be to take the two devices apart without any guidance.</p>
<p><a href="https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg" target="_blank"><img loading="lazy" decoding="async" data-attachment-id="706981" data-permalink="https://hackaday.com/2024/09/12/review-ifixits-fixhub-may-be-the-last-soldering-iron-you-ever-buy/fixhub_iron_open/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg" data-orig-size="2000,500" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;1.89&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;Pixel 8a&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1726002228&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;5.43&quot;,&quot;iso&quot;:&quot;53&quot;,&quot;shutter_speed&quot;:&quot;0.016665&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="fixhub_iron_open" data-image-description="" data-image-caption="" data-medium-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg?w=800" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg" alt="" width="800" height="200" srcset="https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg 2000w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg?resize=250,63 250w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg?resize=400,100 400w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg?resize=800,200 800w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_iron_open.jpg?resize=1536,384 1536w" sizes="(max-width: 800px) 100vw, 800px"></a></p>
<p>I’m happy to report that the iron and its base station are some of the most easily dissembled devices I’ve ever come across. No glue, weird tape, or hidden fasteners. No little plastic tabs that break if you look at them the wrong way. Just two pieces of hardware that were designed and assembled in a logical enough way that you only need to look at them to understand how it all goes together.</p>
<p><a href="https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg" target="_blank"><img loading="lazy" decoding="async" data-attachment-id="706982" data-permalink="https://hackaday.com/2024/09/12/review-ifixits-fixhub-may-be-the-last-soldering-iron-you-ever-buy/fixhub_base_open/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg" data-orig-size="2000,1263" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;4.5&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;NIKON D3300&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1726011451&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;30&quot;,&quot;iso&quot;:&quot;1400&quot;,&quot;shutter_speed&quot;:&quot;0.016666666666667&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="fixhub_base_open" data-image-description="" data-image-caption="" data-medium-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg?w=800" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg" alt="" width="800" height="505" srcset="https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg 2000w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg?resize=250,158 250w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg?resize=400,253 400w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg?resize=800,505 800w, https://hackaday.com/wp-content/uploads/2024/09/fixhub_base_open.jpg?resize=1536,970 1536w" sizes="(max-width: 800px) 100vw, 800px"></a></p>
<p>Of course, this should come as no surprise. Imagine the mud that would have been slung had iFixit had dropped the ball here. You can’t very well campaign for repairability if you don’t hold your own products to the same standards you do for everyone else. Presumably they designed the Smart Soldering Iron and the Power Station to <a href="https://www.ifixit.com/News/75533/how-ifixit-scores-repairability" target="_blank">hit a perfect ten by their published standards</a>, and from what I’ve seen, they nailed it.</p>
<p>I also got a look at the schematics, exploded diagrams, and parts list for both products. Like the repair guides, these won’t be made public until the hardware ships in October. But don’t worry, this isn’t some crowdsource bait-and-switch. They’ve got the goods, and it’s all very impressive.</p>
<p>Now to be clear, we’re not talking open source hardware here. Don’t expect to pull Gerbers from a GitHub repo so you can crank out your own Power Station. But the documentation they’re providing is remarkable for a consumer device. The schematics especially — they’re filled with all sorts of notes in the margins from the engineers which were fascinating to go through.</p>
<h2>Investing in the Future</h2>
<p>If I’ve not made it abundantly clear so far, iFixit really blew me away with the Portable Soldering System. I knew they would put a solid effort into the product from their reputation alone, but even still, I wasn’t expecting the hardware and software to be this polished. iFixit didn’t just raise the bar, they sent it into orbit.</p>
<p>But all this comes at a price. Literally. The Smart Soldering Iron alone will set you back $79.95, and if you want to get the Power Station along with it, the combo comes in at $249.95. You could get a nice soldering station from Weller or Hakko for half the price. Then again, it’s hard to compare what iFixit is offering here to anything else on the market.</p>
<p>In the end, this is one of those times when you’ve got to decide what’s really important to you. If you just want a quality soldering station, there are cheaper options that will meet all of your needs and then some. But if you want to support a company that’s working to change the status quo, sometimes you’ve got to reach a little deeper into those pockets.</p>
	            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[1913: When Hitler, Trotsky, Tito, Freud and Stalin all lived in the same place (203 pts)]]></title>
            <link>https://www.bbc.com/news/magazine-21859771</link>
            <guid>41521824</guid>
            <pubDate>Thu, 12 Sep 2024 15:09:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/news/magazine-21859771">https://www.bbc.com/news/magazine-21859771</a>, See on <a href="https://news.ycombinator.com/item?id=41521824">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main id="main-content" data-testid="main-content"><article><header data-component="legacy-header-block"></header><div data-component="image-block"><figure><p><span><picture><source srcset="https://ichef.bbci.co.uk/news/240/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 240w, https://ichef.bbci.co.uk/news/320/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 320w, https://ichef.bbci.co.uk/news/480/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 480w, https://ichef.bbci.co.uk/news/624/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 624w, https://ichef.bbci.co.uk/news/800/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 800w, https://ichef.bbci.co.uk/news/976/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 976w" type="image/jpeg"><img alt="Rooftops of Vienna about 1920" loading="eager" src="https://ichef.bbci.co.uk/news/624/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg" srcset="https://ichef.bbci.co.uk/news/240/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 240w, https://ichef.bbci.co.uk/news/320/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 320w, https://ichef.bbci.co.uk/news/480/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 480w, https://ichef.bbci.co.uk/news/624/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 624w, https://ichef.bbci.co.uk/news/800/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 800w, https://ichef.bbci.co.uk/news/976/mcs/media/images/67006000/jpg/_67006500_vienna-624getty.jpg 976w" width="624" height="450"></picture></span></p></figure></div><div data-component="text-block"><p><b>A century ago, one section of Vienna played host to Adolf Hitler, Leon Trotsky, Joseph Tito, Sigmund Freud and Joseph Stalin. </b></p><p>In January 1913, a man whose passport bore the name Stavros Papadopoulos disembarked from the Krakow train at Vienna's North Terminal station. </p><p>Of dark complexion, he sported a large peasant's moustache and carried a very basic wooden suitcase.</p><p>"I was sitting at the table," wrote the man he had come to meet, years later, "when the door opened with a knock and an unknown man entered.</p><p>"He was short... thin... his greyish-brown skin covered in pockmarks... I saw nothing in his eyes that resembled friendliness."</p><p>The writer of these lines was a dissident Russian intellectual, the editor of a radical newspaper called Pravda (Truth). His name was Leon Trotsky. </p></div><div data-component="text-block"><p>The man he described was not, in fact, Papadopoulos. </p><p>He had been born Iosif Vissarionovich Dzhugashvili, was known to his friends as Koba and is now remembered as Joseph Stalin.</p><p>Trotsky and Stalin were just two of a number of men who lived in central Vienna in 1913 and whose lives were destined to mould, indeed to shatter, much of the 20th century.</p><p>It was a disparate group. The two revolutionaries, Stalin and Trotsky, were on the run. Sigmund Freud was already well established. </p><p>The psychoanalyst, exalted by followers as the man who opened up the secrets of the mind, lived and practised on the city's Berggasse. </p><p>The young Josip Broz, later to find fame as Yugoslavia's leader Marshal Tito, worked at the Daimler automobile factory in Wiener Neustadt, a town south of Vienna, and sought employment, money and good times.</p><p>Then there was the 24-year-old from the north-west of Austria whose dreams of studying painting at the Vienna Academy of Fine Arts had been twice dashed and who now lodged in a doss-house in Meldermannstrasse near the Danube, one Adolf Hitler. </p></div><div data-component="image-block"><figure><figcaption><span>Image caption, </span><p>The characters would have spent much time in these same two square miles of central Vienna</p></figcaption></figure></div><div data-component="text-block"><p>In his majestic evocation of the city at the time, Thunder at Twilight, Frederic Morton imagines Hitler haranguing his fellow lodgers "on morality, racial purity, the German mission and Slav treachery, on Jews, Jesuits, and Freemasons".</p><p>"His forelock would toss, his [paint]-stained hands shred the air, his voice rise to an operatic pitch. Then, just as suddenly as he had started, he would stop. He would gather his things together with an imperious clatter, [and] stalk off to his cubicle." </p></div><div data-component="text-block"><p>Presiding over all, in the city's rambling Hofburg Palace was the aged Emperor Franz Joseph, who had reigned since the great year of revolutions, 1848. </p><p>Archduke Franz Ferdinand, his designated successor, resided at the nearby Belvedere Palace, eagerly awaiting the throne. His assassination the following year would spark World War I. </p><p>Vienna in 1913 was the capital of the Austro-Hungarian Empire, which consisted of 15 nations and well over 50 million inhabitants. </p><p>"While not exactly a melting pot, Vienna was its own kind of cultural soup, attracting the ambitious from across the empire," says Dardis McNamee, editor-in-chief of the Vienna Review, Austria's only English-language monthly, who has lived in the city for 17 years.</p><p>"Less than half of the city's two million residents were native born and about a quarter came from Bohemia (now the western Czech Republic) and Moravia (now the eastern Czech Republic), so that Czech was spoken alongside German in many settings." </p><p>The empire's subjects spoke a dozen languages, she explains. </p><p>"Officers in the Austro-Hungarian Army had to be able to give commands in 11 languages besides German, each of which had an official translation of the National Hymn."</p><p>And this unique melange created its own cultural phenomenon, the Viennese coffee-house. Legend has its genesis in sacks of coffee left by the Ottoman army following the failed Turkish siege of 1683.</p></div><div data-component="image-block"><figure><figcaption><span>Image caption, </span><p>Cafe Landtmann, much frequented by Freud, remains popular to this day</p></figcaption></figure></div><div data-component="text-block"><p>"Cafe culture and the notion of debate and discussion in cafes is very much part of Viennese life now and was then," explains Charles Emmerson, author of 1913: In Search of the World Before the Great War and a senior research fellow at the foreign policy think-tank Chatham House.</p><p>"The Viennese intellectual community was actually quite small and everyone knew each other and... that provided for exchanges across cultural frontiers."</p><p>This, he adds, would favour political dissidents and those on the run. </p><p>"You didn't have a tremendously powerful central state. It was perhaps a little bit sloppy. If you wanted to find a place to hide out in Europe where you could meet lots of other interesting people then Vienna would be a good place to do it."</p><p>Freud's favourite haunt, the Cafe Landtmann, still stands on the Ring, the renowned boulevard which surrounds the city's historic Innere Stadt. </p><p>Trotsky and Hitler frequented Cafe Central, just a few minutes' stroll away, where cakes, newspapers, chess and, above all, talk, were the patrons' passions.</p><p>"Part of what made the cafes so important was that 'everyone' went," says MacNamee. "So there was a cross-fertilisation across disciplines and interests, in fact boundaries that later became so rigid in western thought were very fluid."</p></div><div data-component="image-block"><figure><figcaption><span>Image caption, </span><p>Both Trotsky and Hitler sipped coffee under Cafe Central's magnificent arches</p></figcaption></figure></div><div data-component="text-block"><p>Beyond that, she adds, "was the surge of energy from the Jewish intelligentsia, and new industrialist class, made possible following their being granted full citizenship rights by Franz Joseph in 1867, and full access to schools and universities."</p><p>And, though this was still a largely male-dominated society, a number of women also made an impact. </p><p>Alma Mahler, whose composer husband had died in 1911, was also a composer and became the muse and lover of the artist Oskar Kokoschka and the architect Walter Gropius.</p><p>Though the city was, and remains, synonymous with music, lavish balls and the waltz, its dark side was especially bleak. Vast numbers of its citizens lived in slums and 1913 saw nearly 1,500 Viennese take their own lives.</p><p>No-one knows if Hitler bumped into Trotsky, or Tito met Stalin. But works like Dr Freud Will See You Now, Mr Hitler - a 2007 radio play by Laurence Marks and Maurice Gran - are lively imaginings of such encounters.</p><p>The conflagration which erupted the following year destroyed much of Vienna's intellectual life. </p><p>The empire imploded in 1918, while propelling Hitler, Stalin, Trotsky and Tito into careers that would mark world history forever.</p><p><i>You can hear more about Vienna's role in shaping the 20th Century on </i><a href="http://www.bbc.co.uk/programmes/b006qj9z">BBC Radio 4's Today</a><i> programme on 18 April.</i></p><p><i>You can follow the Magazine on </i><a href="https://twitter.com/BBCNewsMagazine">Twitter<span>, <!-- -->external</span></a><i> and on </i><a href="http://www.facebook.com/BBCMagazine">Facebook<span>, <!-- -->external</span></a></p></div><section data-component="related-internet-links"><p><h2 type="normal">Related internet links</h2></p><ul role="list" spacing="responsive"><li></li><li></li></ul><p>The BBC is not responsible for the content of external sites.</p></section></article></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Unity is cancelling the runtime fee (142 pts)]]></title>
            <link>https://unity.com/blog/unity-is-canceling-the-runtime-fee</link>
            <guid>41521630</guid>
            <pubDate>Thu, 12 Sep 2024 14:49:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://unity.com/blog/unity-is-canceling-the-runtime-fee">https://unity.com/blog/unity-is-canceling-the-runtime-fee</a>, See on <a href="https://news.ycombinator.com/item?id=41521630">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>"Unity", Unity logos, and other Unity trademarks are trademarks or registered trademarks of Unity Technologies or its affiliates in the U.S. and elsewhere (<a href="https://unity.com/legal/trademarks">more info here</a>). Other names or brands are trademarks of their respective owners.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[If I could dissect a sauropod (121 pts)]]></title>
            <link>https://svpow.com/2024/09/12/if-i-could-dissect-a-sauropod/</link>
            <guid>41521002</guid>
            <pubDate>Thu, 12 Sep 2024 13:54:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://svpow.com/2024/09/12/if-i-could-dissect-a-sauropod/">https://svpow.com/2024/09/12/if-i-could-dissect-a-sauropod/</a>, See on <a href="https://news.ycombinator.com/item?id=41521002">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<p>Luke Horton asked in a <a href="https://svpow.com/2024/09/07/were-not-going-to-run-out-of-new-anatomy-anytime-soon/#comment-270632">comment on a recent post</a>:</p>
<blockquote>
<p>Given the chance to examine a titanosaur cadaver with your hypothetical army of anatomists, what would you look for first?</p>
</blockquote>
<p>*FACEPALM* How we’ve gone almost 17 years without posting about a hypothetical sauropod dissection is quite beyond my capacity. I am also contractually obligated to remind you that the TV show “Inside Nature’s Giants” shows dissections of a whale, elephant, giraffe, tiger, anaconda, giant squid, etc., so it’s probably the closest we’ll ever get. Go look up photos of Dr. Joy Reidenberg standing, um, <em>amidst</em> a partially-dissected whale, or just watch that episode, and your sauropod-dissection-visualizer will be properly calibrated.</p>
<p>To get back to Luke’s question, there are loads of interesting things that could be dissected in a sauropod, but since the remit here is Matt Wedel x titanosaur, there’s only one possible answer: the lung/air sac system and its diverticula. For several reasons:</p>
<div data-shortcode="caption" id="attachment_893"><p><a href="https://svpow.com/wp-content/uploads/2009/02/wedel-2009-fig-10.jpg"><img aria-describedby="caption-attachment-893" data-attachment-id="893" data-permalink="https://svpow.com/papers-by-sv-powsketeers/wedel-2009-on-air-sacs/wedel-2009-fig-10/" data-orig-file="https://svpow.com/wp-content/uploads/2009/02/wedel-2009-fig-10.jpg" data-orig-size="2000,882" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}" data-image-title="wedel-2009-fig-10" data-image-description="" data-image-caption="" data-medium-file="https://svpow.com/wp-content/uploads/2009/02/wedel-2009-fig-10.jpg?w=300" data-large-file="https://svpow.com/wp-content/uploads/2009/02/wedel-2009-fig-10.jpg?w=480" tabindex="0" role="button" src="https://svpow.com/wp-content/uploads/2009/02/wedel-2009-fig-10.jpg?w=480" alt="" width="480" height="212"></a></p><p id="caption-attachment-893">Hypothetical reconstruction of the lungs (red) and air sacs (blue, green, and gray) in <em>Haplocanthosaurus</em> CM 879. I’d love to know how close this is to reality. Wedel (2009: fig. 10).</p></div>
<p>First and most obviously, I’ve spent the last quarter-century trying to infer as much as possible about the respiratory systems of sauropods based on the patterns of pneumaticity in their skeletons, and I’d kill for the opportunity to check the accuracy of my inferences — and those of all my fellow-travelers in the sauropod and dinosaur respiration biz, like Daniela Schwarz and Emma Schachner and Tito Aureliano and many others.</p>
<div data-shortcode="caption" id="attachment_22817"><p><a href="https://svpow.com/wp-content/uploads/2024/09/fig14_air-sacs_v2.jpg"><img aria-describedby="caption-attachment-22817" data-attachment-id="22817" data-permalink="https://svpow.com/2024/09/12/if-i-could-dissect-a-sauropod/fig14_air-sacs_v2/" data-orig-file="https://svpow.com/wp-content/uploads/2024/09/fig14_air-sacs_v2.jpg" data-orig-size="3544,1622" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Fig14_air-sacs_v2" data-image-description="" data-image-caption="" data-medium-file="https://svpow.com/wp-content/uploads/2024/09/fig14_air-sacs_v2.jpg?w=300" data-large-file="https://svpow.com/wp-content/uploads/2024/09/fig14_air-sacs_v2.jpg?w=480" tabindex="0" role="button" src="https://svpow.com/wp-content/uploads/2024/09/fig14_air-sacs_v2.jpg?w=480" alt="" width="480" height="220"></a></p><p id="caption-attachment-22817">Sauropod respiratory system modeled on that of a bird. I’ll bet the correspondence wasn’t <em>this</em> close. (Also, since making this figure 20 years ago, I’ve learned that the abdominal air sacs of ostriches are actually rather small, although the perirenal, femoral, and subcutaneous diverticula of the abdominal air sacs are extensive; see Bezuidenhout et al. 1999). Wedel and Cifelli (2005: fig. 14).</p></div>
<p>Second, I am intrigued/haunted by the possibility that extant birds might not represent the apex of saurischian lung/air sac evolution. Birds survived the K-Pg disaster because they were small; respiratory efficiency had little or nothing to do with it (evidence: all the other small-bodied tetrapods that survived, like the many, many squamate and mammalian lineages). To me it would be a wild coincidence if the tiny dinosaurs that survived also just happened to be The Bestest (TM) at some anatomical/physiological thing unrelated to their survival. In fact, given how sensitive birds are to airborne dust and ash, I wonder if their fancy lungs weren’t more of a hindrance than a help in the dusty, sooty, iridium-laced post-impact world. Anyway, there are interesting clues that the air sac systems of extant birds are just one subset of a much greater original diversity, like most (all?) birds starting out embryologically with a dozen or so air sacs, which get simplified to the usual 9 or fewer by fusions. What did other dinosaurs do with their 12 (or more?) air sacs? If any dinosaurian clade was going to push the capabilities of the “avian” lung/air sac system in interesting directions and to fascinating extremes, sauropods seem like a good bet.</p>
<div data-shortcode="caption" id="attachment_22345"><p><a href="https://svpow.com/wp-content/uploads/2024/06/boisvert-et-al-2024-fig-12-saurischian-rib-movement-axes.jpg"><img aria-describedby="caption-attachment-22345" data-attachment-id="22345" data-permalink="https://svpow.com/papers-by-sv-powsketeers/boisvert-et-al-2024-on-dry-mesa-haplocanthosaurus/boisvert-et-al-2024-fig-12-saurischian-rib-movement-axes/" data-orig-file="https://svpow.com/wp-content/uploads/2024/06/boisvert-et-al-2024-fig-12-saurischian-rib-movement-axes.jpg" data-orig-size="2150,3400" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Boisvert et al 2024 Fig 12 – saurischian rib movement axes" data-image-description="" data-image-caption="<p>blah</p>
" data-medium-file="https://svpow.com/wp-content/uploads/2024/06/boisvert-et-al-2024-fig-12-saurischian-rib-movement-axes.jpg?w=190" data-large-file="https://svpow.com/wp-content/uploads/2024/06/boisvert-et-al-2024-fig-12-saurischian-rib-movement-axes.jpg?w=480" tabindex="0" role="button" src="https://svpow.com/wp-content/uploads/2024/06/boisvert-et-al-2024-fig-12-saurischian-rib-movement-axes.jpg?w=480" alt="" width="480" height="759"></a></p><p id="caption-attachment-22345">Rib articulation angles in the dorsal vertebrae of (a) <em>Lufengosaurus</em>, (b) <em>Diplodocus</em>, (c) <em>Haplocanthosaurus</em>, (d) <em>Tyrannosaurus</em>, and (e) an ostrich. Anterior is to the right. <em>Diplodocus</em> and <em>Haplocanthosaurus</em> are pretty wildly different considering they coexisted in the Morrison. I really gotta write a whole post about that. Boisvert et al. (2024: fig. 12).</p></div>
<p>So I’m intrigued by the idea that extant birds show us one way that a saurischian lung/air sac system can work, but don’t exhaust the territory, anymore than kangaroos show us all the ways that mammals can reproduce. Maybe sauropods had even better lungs than birds! Or maybe not. Likely they were doing their own weirdly specialized thing — or many weirdly specialized things — that left few to no diagnostic traces in their skeletons. We can be pretty confident that at least some of the pneumatic diverticula of sauropods worked essentially identically to how they do in birds (see Woodruff et al. 2022 and <a href="https://svpow.com/2022/02/17/sauro-throat-part-3-what-does-dollys-disease-tell-us-about-sauropods/">this post</a>), and mid-dorsal pneumatic hiatuses in juvenile sauropods — predicted by me in 2003, found by Melstrom et al. (2016) and Hanik et al. (2017) — suggest that their air sac systems were broadly comparable. On the other hand, the variety of rib articulation angles just within Morrison sauropods tells us they weren’t all ventilating their air sacs in quite the same way (Boisvert et al. 2024), despite broad similarities with other dinos at the levels of rib osteology (Wang et al. 2023) and whole-thorax construction (Schachner et al. 2009, 2011). (Aside: why the <em>hell</em> didn’t I work a citation of Wang et al. 2023 into the Dry Mesa Haplo paper? I can only conclude that I am at least occasionally an idiot.) Whatever was going on, I’m pretty sure sauropods didn’t look exactly like 60-ton turkeys on the inside, but we don’t have a ton of real data on how they differed. It would be amazing to find out.</p>
<div data-shortcode="caption" id="attachment_7584"><p><a href="https://svpow.com/wp-content/uploads/2013/01/rapetosaurus-skeleton-silhouette.jpg"><img aria-describedby="caption-attachment-7584" data-attachment-id="7584" data-permalink="https://svpow.com/2013/01/31/rapetosaurus-is-just-plain-wrong/rapetosaurus-skeleton-silhouette/" data-orig-file="https://svpow.com/wp-content/uploads/2013/01/rapetosaurus-skeleton-silhouette.jpg" data-orig-size="2112,788" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;2.6&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;E4500&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;-62169984000&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;7.85&quot;,&quot;iso&quot;:&quot;100&quot;,&quot;shutter_speed&quot;:&quot;0.11363636363636&quot;,&quot;title&quot;:&quot;&quot;}" data-image-title="Rapetosaurus skeleton silhouette" data-image-description="" data-image-caption="" data-medium-file="https://svpow.com/wp-content/uploads/2013/01/rapetosaurus-skeleton-silhouette.jpg?w=300" data-large-file="https://svpow.com/wp-content/uploads/2013/01/rapetosaurus-skeleton-silhouette.jpg?w=480" tabindex="0" role="button" loading="lazy" src="https://svpow.com/wp-content/uploads/2013/01/rapetosaurus-skeleton-silhouette.jpg?w=480" alt="" width="480" height="179"></a></p><p id="caption-attachment-7584">The mounted <em>Rapetosaurus</em> skeleton at the Field Museum, traced from a photo. Specific weird things to note: neck about twice as long as tail, cervical vertebrae about twice as tall as dorsals, and smallish pelvic bones relative to hindlimbs (= skinny posterior abdomen, at least dorsoventrally). See <a href="https://svpow.com/2013/01/31/rapetosaurus-is-just-plain-wrong/">this post</a> for details.</p></div>
<p>Third, if any sauropods were going to rival or exceed birds in fancy under-the-hood anatomical and physiological adaptations, my money would be on titanosaurs. They were morphologically disparate, phylogenetically diverse, geographically widespread, they independently evolved to giant size more times than any other sauropod clade, and their growth rates were wild. I’d dissect any sauropod I got access to (uh duh), but a titanosaur would be particularly appealing. Which titanosaur? Probably <em>Rapetosaurus</em>: we know it grew very fast early on (Curry Rogers et al. 2016, and see implications for the nervous system in Smith et al. 2022), it had a highly pneumatic vertebral column (O’Connor 2006), its body proportions were pretty wacky, and it had other features of interest to me, like expanded neurocentral joints (see Wedel and Atterholt 2023 and <a href="https://svpow.com/2023/06/09/new-paper-wedel-and-atterholt-2023-on-expanded-neurocentral-joints-in-sauropods/">this post</a>) and neural canal ridges (see Atterholt et al. 2024 and <a href="https://svpow.com/2024/08/29/new-paper-atterholt-et-al-2024-on-neural-canal-ridges-in-dinosaurs/">this post</a>).</p>
<div data-shortcode="caption" id="attachment_22654"><p><a href="https://svpow.com/wp-content/uploads/2024/08/rapetosaurus-proximal-caudal-ncrs-curry-rogers-2009-fig-27a.jpg"><img aria-describedby="caption-attachment-22654" data-attachment-id="22654" data-permalink="https://svpow.com/2024/08/29/new-paper-atterholt-et-al-2024-on-neural-canal-ridges-in-dinosaurs/rapetosaurus-proximal-caudal-ncrs-curry-rogers-2009-fig-27a/" data-orig-file="https://svpow.com/wp-content/uploads/2024/08/rapetosaurus-proximal-caudal-ncrs-curry-rogers-2009-fig-27a.jpg" data-orig-size="290,460" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Rapetosaurus proximal caudal NCRs – Curry-Rogers 2009 fig 27a" data-image-description="" data-image-caption="" data-medium-file="https://svpow.com/wp-content/uploads/2024/08/rapetosaurus-proximal-caudal-ncrs-curry-rogers-2009-fig-27a.jpg?w=189" data-large-file="https://svpow.com/wp-content/uploads/2024/08/rapetosaurus-proximal-caudal-ncrs-curry-rogers-2009-fig-27a.jpg?w=290" tabindex="0" role="button" loading="lazy" src="https://svpow.com/wp-content/uploads/2024/08/rapetosaurus-proximal-caudal-ncrs-curry-rogers-2009-fig-27a.jpg" alt="" width="290" height="460"></a></p><p id="caption-attachment-22654">I used this photo of a <em>Rapetosaurus</em> caudal vertebra<a href="https://svpow.com/2024/08/29/new-paper-atterholt-et-al-2024-on-neural-canal-ridges-in-dinosaurs/"> a few posts ago</a> to illustrate the neural canal ridges, but — like many other sauropods — it also has very expanded neurocentral joints forming <a href="https://svpow.com/2022/10/25/obscure-vertebral-anatomy-term-of-the-day-bouton/">boutons</a>. From Curry Rogers (2009: fig. 27).</p></div>
<p>Oh, and if I got to dissect more than one sauropod, the rest of my top 5 choices in order would be:</p>
<ul>
<li>the owner of <a href="https://svpow.com/2016/09/16/how-horrifying-was-the-neck-of-barosaurus/">BYU 9024</a> (<em>Supersaurus</em>? Giant ancient individual of <em>Barosaurus</em>? Are those even different things? Dissecting this critter could tell us!), <em>Barosaurus</em> being the most diplodocid-y and least titanosaur-y neosauropod I know of, and BYU 9024 being from a hellaciously big individual no matter what its classification;</li>
<li>the Snowmass <em>Haplocanthosaurus</em>, because I have just so many questions about all the weird stuff going on with its tail (see Wedel et al. 2021 and <a href="https://svpow.com/2022/02/28/whats-up-with-your-insanely-thick-intervertebral-discs-snowmass-haplocanthosaurus/">this post</a> for starters);&nbsp;</li>
<li><a href="https://svpow.com/2008/08/28/omeisaurus-is-just-plain-wrong/"><em>Omeisaurus</em></a> or <a href="https://svpow.com/2021/01/28/xinjiangtitan-has-the-longest-preserved-neck-of-any-lifeform-to-date/"><em>Xinjiangtitan</em></a>, to represent a maximally derived-but-also-weird non-neosauropod;</li>
<li><em>Sauroposeidon</em>, for <a href="https://svpow.com/2018/02/07/sauroposeidon-the-early-years-my-first-drawing/">obvious emotional reasons</a> (but not enough to dethrone the others).</li>
</ul>
<p>After that? Probably <em>Isanosaurus</em> or <em>Melanorosaurus</em> or something else waaaay down the tree, so I could see how much of the sauropod kit was in place from the get-go (probably <a href="https://svpow.com/2024/06/09/the-sauropod-heresies-my-tate-2024-abstract-and-handout/">most of it</a>).</p>
<div data-shortcode="caption" id="attachment_19808"><p><a href="https://svpow.com/wp-content/uploads/2022/02/mwc-8028-caudal-3-cartilage-volume-estimate.jpg"><img aria-describedby="caption-attachment-19808" data-attachment-id="19808" data-permalink="https://svpow.com/2022/02/28/whats-up-with-your-insanely-thick-intervertebral-discs-snowmass-haplocanthosaurus/mwc-8028-caudal-3-cartilage-volume-estimate/" data-orig-file="https://svpow.com/wp-content/uploads/2022/02/mwc-8028-caudal-3-cartilage-volume-estimate.jpg" data-orig-size="2012,1600" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="MWC 8028 caudal 3 cartilage volume estimate" data-image-description="" data-image-caption="" data-medium-file="https://svpow.com/wp-content/uploads/2022/02/mwc-8028-caudal-3-cartilage-volume-estimate.jpg?w=300" data-large-file="https://svpow.com/wp-content/uploads/2022/02/mwc-8028-caudal-3-cartilage-volume-estimate.jpg?w=480" tabindex="0" role="button" loading="lazy" src="https://svpow.com/wp-content/uploads/2022/02/mwc-8028-caudal-3-cartilage-volume-estimate.jpg?w=480" alt="" width="480" height="382"></a></p><p id="caption-attachment-19808">Bone vs joint space in the proximal caudals of the Snowmass <em>Haplocanthosaurus</em>. I’d give one non-essential organ to dissect that tail!</p></div>
<p>And after the respiratory system, next up for me would be the spinal cord and any related morphological specializations of the neural canal — see Table 3 in Atterholt et al. (2024) for a running tally, and <a href="https://svpow.com/neural-canal-projects/">this page</a>. Then <a href="https://svpow.com/papers-by-sv-powsketeers/taylor-and-wedel-2013c-on-neck-cartilage/">intervertebral joints</a>, digestive tract, and reproductive system (neither of the last two leave anything useful in the way of skeletal traces), in that order. Arguably the intervertebral joints would be a bigger score for sauropod paleobiology than spinal cord stuff, but maybe not, and having squelched my emotional pick among sauropod taxa, I’m letting my emotions rule when choosing body systems to dissect. I also am intensely interested in the possibility of <a href="https://svpow.com/2009/03/19/off-topic-get-down-get-fuzzy-tianyulong/">protofeathers</a> in sauropods, but you don’t have to dissect those, you can just see if any are present, so I’d cheat a little and note any integumentary specializations <em>en passant</em>. (Remember than an animal can <em>have hairs</em> without being <em>hairy</em> [naked mole rats, rhinos, manatees, dolphins], ditto for feathers.)</p>
<p>So that’s the sauropod and the body system I’d dissect first, if given the chance. What’s your answer?</p>
<h2>References</h2>
<ul>
<li><a href="https://doi.org/10.1002/ar.25558">Atterholt, J., Wedel, M.J., Tykoski, R., Fiorillo, A.R., Holwerda, F., Nalley, T.K., Lepore, T., and Yasmer, J. 2024. Neural canal ridges: a novel osteological correlate of postcranial neuroanatomy in dinosaurs. The Anatomical Record, 1-20. https://doi.org/10.1002/ar.25558</a></li>
<li>Bezuidenhout, A.J., H.B. Groenewald, and J.T. Soley. 1999. An anatomical study of the respiratory air sacs in ostriches. Onderstepoort Journal of Veterinary Research 66:317-325.</li>
<li><a href="http://doi.org/10.1002/ar.25520">Boisvert, Colin, Curtice, Brian, Wedel, Mathew, &amp; Wilhite, Ray. 2024. Description of a new specimen of&nbsp;<em>Haplocanthosaurus</em>&nbsp;from the Dry Mesa Dinosaur Quarry. The Anatomical Record, 1–19. http://doi.org/10.1002/ar.25520</a></li>
<li>Curry Rogers, Kristina. 2009. The postcranial osteology of&nbsp;<em>Rapetosaurus krausei</em>&nbsp;(Sauropoda: Titanosauria) from the Late Cretaceous of Madagascar.&nbsp;Journal of Vertebrate Paleontology&nbsp;29:1046-1086.</li>
<li><a href="https://www.science.org/doi/pdf/10.1126/science.aaf1509">Curry Rogers, K., M. Whitney, M. D. D’Emic, and B. Bagley. 2016. Precocity in a tiny titanosaur from the Late Cretaceous of Madagascar. Science 352:450–454.</a></li>
<li>Hanik, Gina M., Matthew C. Lamanna and John A. Whitlock. 2017. A juvenile specimen of&nbsp;<i>Barosaurus&nbsp;</i>Marsh, 1890 (Sauropoda: Diplodocidae) from the Upper Jurassic Morrison Formation of Dinosaur National Monument, Utah, USA.&nbsp;<i>Annals of Carnegie Museum</i>&nbsp;84(3):253–263.</li>
<li>Melstrom, Keegan M., Michael D. D’Emic, Daniel Chure and Jeffrey A. Wilson. 2016. A juvenile sauropod dinosaur from the Late Jurassic of Utah, USA, presents further evidence of an avian style air-sac system.&nbsp;<i>Journal of Vertebrate Paleontology</i>&nbsp;36(4):e1111898. doi:10.1080/02724634.2016.1111898</li>
<li><a href="http://www.oucom.ohiou.edu/dbms-oconnor/Research/PDFs/OConnor_2006_Pneumaticity.pdf">O’Connor, P.M. 2006. Postcranial pneumaticity: an evaluation of soft-tissue influences on the postcranial skeleton and the reconstruction of pulmonary anatomy in archosaurs. Journal of Morphology 267: 1199-1226.</a></li>
<li><a href="https://anatomypubs.onlinelibrary.wiley.com/doi/full/10.1002/ar.20989">Schachner, E.R., Lyson, T.R. and Dodson, P., 2009. Evolution of the respiratory system in nonavian theropods: evidence from rib and vertebral morphology. The Anatomical Record 292(9): 1501-1513.</a></li>
<li><a href="https://anatomypubs.onlinelibrary.wiley.com/doi/full/10.1002/ar.21439">Schachner, E.R., Farmer, C.G., McDonald, A.T. and Dodson, P., 2011. Evolution of the dinosauriform respiratory apparatus: new evidence from the postcranial axial skeleton. The Anatomical Record 294(9): 1532-1547.</a></li>
<li>Smith, Douglas H., Rodgers, Jeffrey M., Dollé, Jean-Pierre, and Wedel, Mathew J. 2022. Giraffes vs. blue whales vs. dinosaurs: contest reveals which one builds its nervous system fastest to evade predators. Scientific American, <a href="https://www.scientificamerican.com/article/giraffes-vs-blue-whales-vs-dinosaurs-contest-reveals-which-one-builds-its-nervous-system-fastest-to-evade-predators/" rel="nofollow">https://www.scientificamerican.com/article/giraffes-vs-blue-whales-vs-dinosaurs-contest-reveals-which-one-builds-its-nervous-system-fastest-to-evade-predators/</a></li>
<li><a href="https://www.nature.com/articles/s42003-022-04301-z.pdf">Wang, Y.Y., Claessens, L.P. and Sullivan, C., 2023. Deep reptilian evolutionary roots of a major avian respiratory adaptation.&nbsp;<i>Communications Biology</i>,&nbsp;<i>6</i>(1), p.3.</a></li>
<li><a href="https://sauroposeidon.files.wordpress.com/2010/04/wedel-2003-sauropod-pneumaticity.pdf">Wedel, M.J. 2003a. Vertebral pneumaticity, air sacs, and the physiology of sauropod dinosaurs. Paleobiology 29:243-255.</a></li>
<li><a href="http://sauroposeidon.files.wordpress.com/2010/04/wedel-2009-air-sacs.pdf">Wedel, M.J. 2009. Evidence for bird-like air sacs in saurischian dinosaurs. Journal of Experimental Zoology 311A:611-628.</a></li>
<li><a href="https://sauroposeidon.files.wordpress.com/2010/04/wedel-and-atterholt-2023-expanded-neurocentral-joints-in-sauropods.pdf">Wedel, M.J., and Atterholt, J. 2023. Expanded neurocentral joints in the vertebrae of sauropod dinosaurs. In Hunt-Foster, R.K., Kirkland, J.I., and Loewen, M.A. (eds), 14th Symposium on Mesozoic Terrestrial Ecosystems and Biota. The Anatomical Record 306(S1):256-257.</a></li>
<li><a href="http://sauroposeidon.files.wordpress.com/2010/04/wedel-cifelli-2005-oklahoma-giant.pdf">Wedel, M.J., and Cifelli, R.L. 2005.&nbsp;<em>Sauroposeidon</em>: Oklahoma’s native giant. Oklahoma Geology Notes 65 (2):40-57.</a></li>
<li><a href="https://svpow.com/wp-content/uploads/2022/02/wedel-et-al-2021-expanded-neural-canals-in-caudal-vertebrae-of-haplocanthosaurus.pdf">Wedel, Mathew; Atterholt, Jessie; Dooley, Jr., Alton C.; Farooq, Saad; Macalino, Jeff; Nalley, Thierra K.; Wisser, Gary; and Yasmer, John. 2021. Expanded neural canals in the caudal vertebrae of a specimen of&nbsp;<em>Haplocanthosaurus</em>. Academia Letters, Article 911, 10pp.</a></li>
<li><a href="https://www.nature.com/articles/s41598-022-05761-3">Woodruff, D. Cary, Wolff, Ewan D.S., Wedel, Mathew J., Dennison, Sophie, and Witmer, Lawrence M. 2022. The first occurrence of an avian-style respiratory infection in a non-avian dinosaur. Scientific Reports 12, 1954. https://doi.org/10.1038/s41598-022-05761-3</a></li>
</ul>

<hr>
<p><a href="https://doi.org/10.59350/ajsh7-42642">doi:10.59350/ajsh7-42642</a></p>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GAZEploit: Remote keystroke inference attack by gaze estimation in VR/MR devices (158 pts)]]></title>
            <link>https://www.wired.com/story/apple-vision-pro-persona-eye-tracking-spy-typing/</link>
            <guid>41520516</guid>
            <pubDate>Thu, 12 Sep 2024 13:11:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/apple-vision-pro-persona-eye-tracking-spy-typing/">https://www.wired.com/story/apple-vision-pro-persona-eye-tracking-spy-typing/</a>, See on <a href="https://news.ycombinator.com/item?id=41520516">Hacker News</a></p>
Couldn't get https://www.wired.com/story/apple-vision-pro-persona-eye-tracking-spy-typing/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Old Easter Island genomes show no sign of a population collapse (110 pts)]]></title>
            <link>https://arstechnica.com/science/2024/09/old-easter-island-genomes-show-no-sign-of-a-population-collapse/</link>
            <guid>41520465</guid>
            <pubDate>Thu, 12 Sep 2024 13:05:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/science/2024/09/old-easter-island-genomes-show-no-sign-of-a-population-collapse/">https://arstechnica.com/science/2024/09/old-easter-island-genomes-show-no-sign-of-a-population-collapse/</a>, See on <a href="https://news.ycombinator.com/item?id=41520465">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/09/GettyImages-2068621148-800x450.jpg" alt="A row of grey rock sculptures of human torsos and heads, arranged in a long line.">
      <figcaption></figcaption>  </figure>

  




<!-- cache hit 52:single/related:a94418b30b77f79141491c7284bb2c6e --><!-- empty -->
<p>Rapa Nui, often referred to as Easter Island, is one of the most remote populated islands in the world. It's so distant that Europeans didn't stumble onto it until centuries after they had started exploring the Pacific. When they arrived, though, they found that the relatively small island supported a population of thousands, one that had built imposing monumental statues called moai. Arguments over how this population got there and what happened once it did have gone on ever since.</p>
<p>Some of these arguments, such as the idea that the island's indigenous people had traveled there from South America, have since been put to rest. Genomes from people native to the island show that its original population was part of the Polynesian expansion across the Pacific. But others, such as the role of ecological collapse in limiting the island's population and altering its culture, continue to be <a href="https://arstechnica.com/science/2024/06/we-now-have-even-more-evidence-against-the-ecocide-theory-of-easter-island/">debated</a>.</p>
<p>Researchers have now obtained genome sequence from the remains of 15 Rapa Nui natives who predate European contact. And they indicate that the population of the island appears to have grown slowly and steadily, without any sign of a bottleneck that could be associated with an ecological collapse. And roughly 10 percent of the genomes appear to have a Native American source that likely dates from roughly the same time that the island was settled.</p>
<h2>Out of the museum</h2>
<p>The remains that provided these genomes weren't found on Rapa Nui, at least not recently. Instead, they reside at the Muséum National d’Histoire Naturelle in France, having been obtained at some uncertain point in the past. Their presence there is a point of contention for the indigenous people of Rapa Nui, but the researchers behind the new work had the cooperation of the islanders in this project, having worked with them extensively. The researchers' description of these interactions could be viewed as a model for how this sort of work should be done:</p>
<blockquote><p>Throughout the course of the study, we met with representatives of the Rapanui community on the island, the Comisión de Desarrollo Rapa Nui and the Comisión Asesora de Monumentos Nacionales, where we presented our research goals and ongoing results. Both commissions voted in favor of us continuing with the research... We presented the research project in public talks, a short video and radio interviews on the island, giving us the opportunity to inquire about the questions that are most relevant to the Rapanui community. These discussions have informed the research topics we investigated in this work.</p></blockquote>
<p>Given the questionable record-keeping at various points in the past, one of the goals of this work was simply to determine whether these remains truly had originated on Rapa Nui. That was unambiguously true. All comparisons with genomes of modern populations show that all 15 of these genomes have a Polynesian origin and are most closely related to modern residents of Rapa Nui. "The confirmation of the origin of these individuals through genomic analyses will inform repatriation efforts led by the Rapa Nui Repatriation Program (Ka Haka Hoki Mai Te Mana Tupuna)," the authors suggest.</p>                                                                        
                                                                                
<p>A second question was whether the remains predate European contact. The researchers attempted to perform carbon dating, but it produced dates that made no sense. Some of the remains had dates that were potentially <em>after</em> they had been collected, according to museum records. And all of them were from the 1800s, well after European contact and introduced diseases had shrunk the native population and mixed in DNA from non-Polynesians. Yet none of the genomes showed more than one percent European ancestry, a fraction low enough to be ascribed to a spurious statistical fluke.</p>
<p>So the precise date these individuals lived is uncertain. But the genetic data clearly indicates that they were born prior to the arrival of Europeans. They can therefore tell us about what the population was experiencing in the period between Rapa Nui's settlement and the arrival of colonial powers.</p>
<h2>Back from the Americas</h2>
<p>While these genomes showed no sign of European ancestry, they were not fully Polynesian. Instead, roughly 10 percent of the genome appeared to be derived from a Native American population. This is the highest percentage seen in any Polynesian population, including some that <a href="https://arstechnica.com/science/2020/07/genetic-data-suggests-polynesians-and-native-americans-met/">show hints of Native American contact</a> that dates to before Europeans arrived on the scene.</p>
<p>Isolating these DNA sequences and comparing them to populations from across the world showed that the group most closely related to the one who contributed to the Rapa Nui population presently resides in the central Andes region of South America. That's in contrast to the earlier results, which suggested the contact was with populations further north in South America.</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Officer who ignored NYPD's 'courtesy cards' receives $175K settlement (148 pts)]]></title>
            <link>https://apnews.com/article/nypd-courtesy-card-police-misconduct-d5dfdbdad12b01a2cda864f69aa3d1aa</link>
            <guid>41519736</guid>
            <pubDate>Thu, 12 Sep 2024 11:47:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://apnews.com/article/nypd-courtesy-card-police-misconduct-d5dfdbdad12b01a2cda864f69aa3d1aa">https://apnews.com/article/nypd-courtesy-card-police-misconduct-d5dfdbdad12b01a2cda864f69aa3d1aa</a>, See on <a href="https://news.ycombinator.com/item?id=41519736">Hacker News</a></p>
Couldn't get https://apnews.com/article/nypd-courtesy-card-police-misconduct-d5dfdbdad12b01a2cda864f69aa3d1aa: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[SpaceX Astronauts Begin Spacewalk, Putting New Spacesuits to Test (204 pts)]]></title>
            <link>https://www.wsj.com/science/space-astronomy/spacex-launch-polaris-dawn-space-walk-bfed7f84</link>
            <guid>41519623</guid>
            <pubDate>Thu, 12 Sep 2024 11:30:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/science/space-astronomy/spacex-launch-polaris-dawn-space-walk-bfed7f84">https://www.wsj.com/science/space-astronomy/spacex-launch-polaris-dawn-space-walk-bfed7f84</a>, See on <a href="https://news.ycombinator.com/item?id=41519623">Hacker News</a></p>
Couldn't get https://www.wsj.com/science/space-astronomy/spacex-launch-polaris-dawn-space-walk-bfed7f84: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Ergo: Erlang-inspired event driven actor framework in Go (157 pts)]]></title>
            <link>https://github.com/ergo-services/ergo</link>
            <guid>41519471</guid>
            <pubDate>Thu, 12 Sep 2024 11:06:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ergo-services/ergo">https://github.com/ergo-services/ergo</a>, See on <a href="https://news.ycombinator.com/item?id=41519471">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto"><h2 tabindex="-1" dir="auto"><a href="https://ergo.services/" rel="nofollow"><img src="https://github.com/ergo-services/ergo/raw/master/.github/images/logo.svg" alt="Ergo Framework" width="159" height="49"></a></h2><a id="" aria-label="Permalink: " href="#"></a></div>
<p dir="auto"><a href="https://docs.ergo.services/" rel="nofollow"><img src="https://camo.githubusercontent.com/d8f2c27f511059ee8a4c1d56dd43bb9e2774ef4b78044f4a7a79aa179c4e3339/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974426f6f6b2d446f63756d656e746174696f6e2d6633376634303f7374796c653d706c6173746963266c6f676f3d676974626f6f6b266c6f676f436f6c6f723d7768697465267374796c653d666c6174" alt="Gitbook Documentation" data-canonical-src="https://img.shields.io/badge/GitBook-Documentation-f37f40?style=plastic&amp;logo=gitbook&amp;logoColor=white&amp;style=flat"></a>
<a href="https://pkg.go.dev/ergo.services/ergo" rel="nofollow"><img src="https://camo.githubusercontent.com/bd896ed06160fe0e621b6b2997f20b8d9dfb222d79617cc9cccd9af3db7b1f69/68747470733a2f2f706b672e676f2e6465762f62616467652f6572676f2d73657276696365732f6572676f" alt="GoDoc" data-canonical-src="https://pkg.go.dev/badge/ergo-services/ergo"></a>
<a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://camo.githubusercontent.com/2c688e7decdaf0ee046dbefbf1bfeff0500b962e151b1a606d791f8f2e9f54c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e737667" alt="MIT license" data-canonical-src="https://img.shields.io/badge/license-MIT-brightgreen.svg"></a>
<a href="https://t.me/ergo_services" rel="nofollow"><img src="https://camo.githubusercontent.com/cce21c76f2dde10c8fb5595003bb4b8933b22676aaf29397bf0fcd5cb417ed8f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f54656c656772616d2d6572676f5f5f73657276696365732d3232396564393f7374796c653d666c6174266c6f676f3d74656c656772616d266c6f676f436f6c6f723d7768697465" alt="Telegram Community" data-canonical-src="https://img.shields.io/badge/Telegram-ergo__services-229ed9?style=flat&amp;logo=telegram&amp;logoColor=white"></a>
<a href="https://x.com/ergo_services" rel="nofollow"><img src="https://camo.githubusercontent.com/e8b4ce62f4932487dc85a8b6bd5442c76fc8e9fa6d029f7145f30ec4c31d49dc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747769747465722d6572676f5f5f73657276696365732d3030616365653f7374796c653d666c6174266c6f676f3d78266c6f676f436f6c6f723d7768697465" alt="Twitter" data-canonical-src="https://img.shields.io/badge/twitter-ergo__services-00acee?style=flat&amp;logo=x&amp;logoColor=white"></a>
<a href="https://reddit.com/r/ergo_services" rel="nofollow"><img src="https://camo.githubusercontent.com/3f5c5b45660461a2063fc75b9805d934fa5a15d96aca030a0d8ca1caa4bb7ed9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5265646469742d722f6572676f5f5f73657276696365732d6666343530303f7374796c653d706c6173746963266c6f676f3d726564646974266c6f676f436f6c6f723d7768697465267374796c653d666c6174" alt="Reddit" data-canonical-src="https://img.shields.io/badge/Reddit-r/ergo__services-ff4500?style=plastic&amp;logo=reddit&amp;logoColor=white&amp;style=flat"></a></p>
<p dir="auto">The Ergo Framework is an implementation of ideas, technologies, and design patterns from the Erlang world in the Go programming language. It is based on the actor model, network transparency, and a set of ready-to-use components for development. This significantly simplifies the creation of complex and distributed solutions while maintaining a high level of reliability and performance.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Features</h3><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Actor Model</strong>: enables the creation of scalable and fault-tolerant systems using isolated actors that interact through message passing. Actors can exchange asynchronous messages as well as perform synchronous requests, offering flexibility in communication patterns.</p>
</li>
<li>
<p dir="auto"><strong>Network Transparency</strong>: actors can interact regardless of their physical location, supported by a <a href="https://github.com/ergo-services/benchmarks">high-performance</a> implementation of the <a href="https://docs.ergo.services/networking/network-stack" rel="nofollow">network stack</a>, which simplifies the creation of distributed systems.</p>
</li>
<li>
<p dir="auto"><strong>Observability</strong>: framework includes built-in observability features, including <a href="https://docs.ergo.services/networking/service-discovering" rel="nofollow">service discovery</a> and <a href="https://docs.ergo.services/networking/static-routes" rel="nofollow">static routes</a>, allowing nodes to automatically register themselves and find routes to remote nodes. This mechanism simplifies managing distributed systems by enabling seamless communication and interaction between nodes across the network.</p>
</li>
<li>
<p dir="auto"><strong>Ready-to-use Components</strong>: A set of <a href="https://docs.ergo.services/actors" rel="nofollow">ready-to-use actors</a> simplifying development, including state management and error handling.</p>
</li>
<li>
<p dir="auto"><strong>Support for Distributed Systems</strong>: framework includes built-in mechanisms for creating and managing clustered systems, <a href="https://docs.ergo.services/basics/events" rel="nofollow">distributed events</a> (publish/subscribe mechanism), <a href="https://docs.ergo.services/networking/remote-spawn-process" rel="nofollow">remote actor spawning</a>, and <a href="https://docs.ergo.services/networking/remote-start-application" rel="nofollow">remote application startup</a>. These features enable easy scaling, efficient message broadcasting across your cluster, and the ability to manage distributed components seamlessly.</p>
</li>
<li>
<p dir="auto"><strong>Reliability and Fault Tolerance</strong>: the framework is designed to minimize failures and ensure automatic recovery, featuring a <a href="https://docs.ergo.services/basics/supervision-tree" rel="nofollow">supervisor tree</a> structure to manage and <a href="https://docs.ergo.services/actors/supervisor#restart-strategy" rel="nofollow">restart failed actors</a>, which is crucial for mission-critical applications.</p>
</li>
<li>
<p dir="auto"><strong>Flexibility</strong>: This framework offers convenient interfaces for customizing <a href="https://docs.ergo.services/networking/network-stack#network-stack-interfaces" rel="nofollow">network stack components</a>, creating and integrating custom <a href="https://docs.ergo.services/basics/logging" rel="nofollow">loggers</a>, <a href="https://docs.ergo.services/basics/certmanager" rel="nofollow">managing SSL certificates</a>, and more.</p>
</li>
</ol>
<p dir="auto">In the <a href="https://github.com/ergo-services/examples">https://github.com/ergo-services/examples</a> repository, you will find examples that demonstrate a range of the framework's capabilities.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Observer</h3><a id="user-content-observer" aria-label="Permalink: Observer" href="#observer"></a></p>
<p dir="auto">To inspect the node, network stack, running applications, and processes, you can use the <a href="https://github.com/ergo-services/tools/"><code>observer</code></a> tool</p>
<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/118860/357791972-1cb83305-6c56-4eb7-b567-76f3c551c176.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjYxNjYxMDksIm5iZiI6MTcyNjE2NTgwOSwicGF0aCI6Ii8xMTg4NjAvMzU3NzkxOTcyLTFjYjgzMzA1LTZjNTYtNGViNy1iNTY3LTc2ZjNjNTUxYzE3Ni5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwOTEyJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDkxMlQxODMwMDlaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mMjE0M2VhZDJhMTQ1MTAyZTVlYTU1YTFiMTI3NzNkNGFhYWM5MDIzNDIyYmZlNTBiZWU4ZDc3ODNlYzYwMGZjJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.4nLzUebhkQoM2U603oSXe7OopIBwBQbJnE1hdEcDj1U"><img src="https://private-user-images.githubusercontent.com/118860/357791972-1cb83305-6c56-4eb7-b567-76f3c551c176.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjYxNjYxMDksIm5iZiI6MTcyNjE2NTgwOSwicGF0aCI6Ii8xMTg4NjAvMzU3NzkxOTcyLTFjYjgzMzA1LTZjNTYtNGViNy1iNTY3LTc2ZjNjNTUxYzE3Ni5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwOTEyJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDkxMlQxODMwMDlaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mMjE0M2VhZDJhMTQ1MTAyZTVlYTU1YTFiMTI3NzNkNGFhYWM5MDIzNDIyYmZlNTBiZWU4ZDc3ODNlYzYwMGZjJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.4nLzUebhkQoM2U603oSXe7OopIBwBQbJnE1hdEcDj1U" width="500"></a>
<p dir="auto">To install the Observer tool, you need to have the Go compiler version 1.20 or higher. Run the following command:</p>
<div data-snippet-clipboard-copy-content="$ go install ergo.services/tools/observer@latest"><pre><code>$ go install ergo.services/tools/observer@latest
</code></pre></div>
<p dir="auto">You can also embed the <a href="https://docs.ergo.services/extra-library/applications/observer" rel="nofollow">Observer application</a> into your node. To see it in action, see example <code>demo</code> at <a href="https://github.com/ergo-services/examples">https://github.com/ergo-services/examples</a>. For more information <a href="https://docs.ergo.services/tools/observer" rel="nofollow">https://docs.ergo.services/tools/observer</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Quick start</h3><a id="user-content-quick-start" aria-label="Permalink: Quick start" href="#quick-start"></a></p>
<p dir="auto">For a quick start, use the <a href="https://docs.ergo.services/tools/ergo" rel="nofollow"><code>ergo</code></a> tool — a command-line utility designed to simplify the process of generating boilerplate code for your project based on the Ergo Framework. With this tool, you can rapidly create a complete project structure, including applications, actors, supervisors, network components, and more. It offers a set of arguments that allow you to customize the project according to specific requirements, ensuring it is ready for immediate development.</p>
<p dir="auto">To install use the following command:</p>
<div data-snippet-clipboard-copy-content="$ go install ergo.services/tools/ergo@latest"><pre><code>$ go install ergo.services/tools/ergo@latest
</code></pre></div>
<p dir="auto">Now, you can create your project with just one command. Here is example:</p>
<p dir="auto">Supervision tree</p>
<div data-snippet-clipboard-copy-content="  mynode
  ├─ myapp
  │  │
  │  └─ mysup
  │     │
  │     └─ myactor
  ├─ myweb
  └─ myactor2"><pre><code>  mynode
  ├─ myapp
  │  │
  │  └─ mysup
  │     │
  │     └─ myactor
  ├─ myweb
  └─ myactor2
</code></pre></div>
<p dir="auto">To generate project for this design use the following command:</p>
<div data-snippet-clipboard-copy-content="$ ergo -init MyNode \
      -with-app MyApp \
      -with-sup MyApp:MySup \
      -with-actor MySup:MyActor \
      -with-web MyWeb \
      -with-actor MyActor2 \
      -with-observer "><pre><code>$ ergo -init MyNode \
      -with-app MyApp \
      -with-sup MyApp:MySup \
      -with-actor MySup:MyActor \
      -with-web MyWeb \
      -with-actor MyActor2 \
      -with-observer 
</code></pre></div>
<p dir="auto">as a result you will get generated project:</p>
<div data-snippet-clipboard-copy-content="  mynode
  ├── apps
  │  └── myapp
  │     ├── myactor.go
  │     ├── myapp.go
  │     └── mysup.go
  ├── cmd
  │  ├── myactor2.go
  │  ├── mynode.go
  │  ├── myweb.go
  │  └── myweb_worker.go
  ├── go.mod
  ├── go.sum
  └── README.md"><pre><code>  mynode
  ├── apps
  │  └── myapp
  │     ├── myactor.go
  │     ├── myapp.go
  │     └── mysup.go
  ├── cmd
  │  ├── myactor2.go
  │  ├── mynode.go
  │  ├── myweb.go
  │  └── myweb_worker.go
  ├── go.mod
  ├── go.sum
  └── README.md
</code></pre></div>
<p dir="auto">to try it:</p>
<div data-snippet-clipboard-copy-content="$ cd mynode
$ go run ./cmd"><pre><code>$ cd mynode
$ go run ./cmd
</code></pre></div>
<p dir="auto">Since we included Observer application, open <a href="http://localhost:9911/" rel="nofollow">http://localhost:9911</a> to inspect your node and running processes.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Erlang support</h3><a id="user-content-erlang-support" aria-label="Permalink: Erlang support" href="#erlang-support"></a></p>
<p dir="auto">Starting from version 3.0.0, support for the Erlang network stack has been moved to a separate module and is distributed under the BSL 1.1 license - <a href="https://github.com/ergo-services/proto">https://github.com/ergo-services/proto</a>. You can find detailed information on using this module in the documentation at <a href="https://docs.ergo.services/extra-library/network-protocols/erlang" rel="nofollow">https://docs.ergo.services/extra-library/network-protocols/erlang</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Requirements</h3><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>Go 1.20.x and above</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Changelog</h3><a id="user-content-changelog" aria-label="Permalink: Changelog" href="#changelog"></a></p>
<p dir="auto">Fully detailed changelog see in the <a href="https://github.com/ergo-services/ergo/blob/master/CHANGELOG.md">ChangeLog</a> file.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto"><a href="https://github.com/ergo-services/ergo/releases/tag/v1.999.300">v3.0.0</a> 2024-09-04 [tag version v1.999.300]</h4><a id="user-content-v300-2024-09-04-tag-version-v1999300" aria-label="Permalink: v3.0.0 2024-09-04 [tag version v1.999.300]" href="#v300-2024-09-04-tag-version-v1999300"></a></p>
<p dir="auto">This version marks a significant milestone in the evolution of the Ergo Framework. The framework's design has been completely overhauled, and this version was built from the ground up. It includes:</p>
<ul dir="auto">
<li>Significant API Improvements: The <code>gen.Process</code>, <code>gen.Node</code>, and <code>gen.Network</code> interfaces have been enhanced with numerous convenient methods.</li>
<li>A New Network Stack: This version introduces a completely new network stack for improved performance and flexibility. See <a href="https://github.com/ergo-services/benchmarks">https://github.com/ergo-services/benchmarks</a> for the details</li>
</ul>
<p dir="auto">Alongside the release of Ergo Framework 3.0.0, new tools and an additional components library are also introduced:</p>
<ul dir="auto">
<li>Tools (observer, saturn) <a href="https://github.com/ergo-services/tools">https://github.com/ergo-services/tools</a></li>
<li>Loggers (rotate, colored) - <a href="https://github.com/ergo-services/logger">https://github.com/ergo-services/logger</a></li>
<li>Meta (websocket) - <a href="https://github.com/ergo-services/meta">https://github.com/ergo-services/meta</a></li>
<li>Application (observer) - <a href="https://github.com/ergo-services/application">https://github.com/ergo-services/application</a></li>
<li>Registrar (client Saturn) - <a href="https://github.com/ergo-services/registrar">https://github.com/ergo-services/registrar</a></li>
<li>Proto (erlang23) - <a href="https://github.com/ergo-services/proto">https://github.com/ergo-services/proto</a></li>
</ul>
<p dir="auto">Finally, we've published comprehensive documentation for the framework, providing detailed guides to assist you in leveraging all the capabilities of Ergo Framework effectively. Its available at <a href="https://docs.ergo.services/" rel="nofollow">https://docs.ergo.services</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Benchmarks</h3><a id="user-content-benchmarks" aria-label="Permalink: Benchmarks" href="#benchmarks"></a></p>
<p dir="auto">You can find available benchmarks in the following repository <a href="https://github.com/ergo-services/benchmarks">https://github.com/ergo-services/benchmarks</a>.</p>
<ul dir="auto">
<li>
<p dir="auto">Messaging performance (local, network)</p>
</li>
<li>
<p dir="auto">Memory consumption per process (demonstrates framework memory footprint).</p>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Development and debugging</h3><a id="user-content-development-and-debugging" aria-label="Permalink: Development and debugging" href="#development-and-debugging"></a></p>
<p dir="auto">To enable Golang profiler just add <code>--tags debug</code> in your <code>go run</code> or <code>go build</code> (profiler runs at
<code>http://localhost:9009/debug/pprof</code>)</p>
<p dir="auto">To disable panic recovery use <code>--tags norecover</code>.</p>
<p dir="auto">To enable trace logging level for the internals (node, network,...) use <code>--tags trace</code> and set the log level <code>gen.LogLevelTrace</code> for your node.</p>
<p dir="auto">To run tests with cleaned test cache:</p>
<div data-snippet-clipboard-copy-content="go vet
go clean -testcache
go test -v ./tests/..."><pre><code>go vet
go clean -testcache
go test -v ./tests/...
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Commercial support</h3><a id="user-content-commercial-support" aria-label="Permalink: Commercial support" href="#commercial-support"></a></p>
<p dir="auto">please, contact <a href="mailto:support@ergo.services">support@ergo.services</a> for more information</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Kolmogorov-Arnold networks may make neural networks more understandable (233 pts)]]></title>
            <link>https://www.quantamagazine.org/novel-architecture-makes-neural-networks-more-understandable-20240911/</link>
            <guid>41519240</guid>
            <pubDate>Thu, 12 Sep 2024 10:14:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.quantamagazine.org/novel-architecture-makes-neural-networks-more-understandable-20240911/">https://www.quantamagazine.org/novel-architecture-makes-neural-networks-more-understandable-20240911/</a>, See on <a href="https://news.ycombinator.com/item?id=41519240">Hacker News</a></p>
Couldn't get https://www.quantamagazine.org/novel-architecture-makes-neural-networks-more-understandable-20240911/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Linear, symmetric, self-selecting 14-bit molecular memristors (2023) (102 pts)]]></title>
            <link>https://www.researchgate.net/publication/377744243_Linear_symmetric_self-selecting_14-bit_molecular_memristors</link>
            <guid>41518606</guid>
            <pubDate>Thu, 12 Sep 2024 08:07:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.researchgate.net/publication/377744243_Linear_symmetric_self-selecting_14-bit_molecular_memristors">https://www.researchgate.net/publication/377744243_Linear_symmetric_self-selecting_14-bit_molecular_memristors</a>, See on <a href="https://news.ycombinator.com/item?id=41518606">Hacker News</a></p>
Couldn't get https://www.researchgate.net/publication/377744243_Linear_symmetric_self-selecting_14-bit_molecular_memristors: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Why Haskell? (339 pts)]]></title>
            <link>https://www.gtf.io/musings/why-haskell</link>
            <guid>41518600</guid>
            <pubDate>Thu, 12 Sep 2024 08:06:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gtf.io/musings/why-haskell">https://www.gtf.io/musings/why-haskell</a>, See on <a href="https://news.ycombinator.com/item?id=41518600">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p data-pos="3:1-10:0">“Impractical”, “academic”, “niche”. These are a few of the reactions I get when someone discovers that my favourite programming language is Haskell, and not only my favourite in some sort of intellectually-masturbatory way, but favourite for building things, real things, mostly involving web servers. Hobby projects would be one thing, but it gets worse: I have actual teams at <a href="https://www.converge.io/">Converge</a> working in Haskell, too.</p>
<p data-pos="11:1-20:0">I find this reaction quite curious: not only can any problem suitable to one general-purpose programming language be tackled in another, but a lot of the new features we see making their way into programming languages like Python, Rust, and Typescript, are either inspired by, or at least more robustly implemented in, Haskell. It seems to me that part of this response is a version of “choose boring technology” (although Haskell is far older than most of the most popular programming languages) twisted to suit another pernicious ideology: that programming is not maths, and that anything that smells of maths should be excised.</p>
<p data-pos="21:1-26:0">This comes up in all sorts of unlikely places in which it would be quite awkward to have to take my interlocutors through all the reasons I think Haskell is probably the best choice for whatever computational problems they are trying to solve themselves (e.g. dinner parties, the pub, etc.) and thus I find myself writing this apologia.</p>
<p data-pos="27:1-33:0">Indeed the remainder of this essay will consist of my attempt to reason around why I think Haskell is probably the best choice<a id="fnref1" href="#fn1" role="doc-noteref"><sup>1</sup></a> for most programmers<a id="fnref2" href="#fn2" role="doc-noteref"><sup>2</sup></a>, especially if one cares about being able to productively write robust software, and even more so if one wants to have fun while doing it (which is a frequently underrated aspect of writing software).</p>
<p data-pos="34:1-41:0">All mainstream, general purpose programming languages are (basically) Turing-complete, and therefore any programme you can write in one you can, in fact, write in another. There is a computational equivalence between them. The main differences are instead in the expressiveness of the languages, the guardrails they give you, and their performance characteristics (although this is possibly more of a runtime/compiler implementation question).</p>
<p data-pos="42:1-46:0">I think that the things that make Haskell great (meaning both more productive and more fun) can be grouped as follows: the things that stop you making mistakes; the things that make you more productive; and the things that help you reason better about your programmes.</p>
<section data-pos="47:1-101:0" id="Unlearning-and-relearning">
<h2 data-pos="47:1-48:0">Unlearning and relearning</h2>
<p data-pos="49:1-57:0">The first thing to say here is that most programmers in the 2020s have been brought up in some sort of imperative<a id="fnref3" href="#fn3" role="doc-noteref"><sup>3</sup></a> paradigm. As a result, the learning curve for a pure, functional language like Haskell will be steep. There are two aspects to this: one is the Haskell language <em>itself</em> which, if you constrain yourself to a simple subset of it, is actually quite easy to learn; and the second is functional programming, which requires a total shift in how the programmer approaches constructing a programme.</p>
<p data-pos="58:1-61:0">This process of unlearning and relearning is incredibly helpful and will make one a better programmer, regardless as to whether one uses Haskell thenceforth. As Alan Perlis writes:</p>
<blockquote data-pos="62:1-64:30">
<p data-pos="62:3-64:30">A language that doesn’t affect the way you think about programming is not worth knowing. ~ Perlisism #19 <a id="fnref4" href="#fn4" role="doc-noteref"><sup>4</sup></a></p>
</blockquote>
<section data-pos="66:1-101:0" id="A-small-note-on-syntax">
<h3 data-pos="66:1-67:0">A small note on syntax</h3>
<p data-pos="68:1-71:0">In the subsequent sections there will be simple snippets of Haskell. Since the syntax is quite distant from C-like syntax with which many readers will be familiar, here is a small guide:</p>
<ul data-pos="72:1-98:0">
<li>
<code>::</code> denotes a type signature (so <code>myThing :: String</code> says I have a name “myThing” and its value is of type <code>String</code>).
</li>
<li>
function calls do not use parentheses, you simply put the arguments, space-separated, after the function name. There are good reasons for this, but they’re beyond the scope of this explainer (so where in one language you may have <code>doSomething(withThis, withThat)</code> in Haskell you have <code>doSomething withThis withThat</code>).
</li>
<li>
lower-case letters in type-signatures are type-variables, and just represent any type (so <code>head :: [a] -&gt; a</code> just takes a list of any type <code>a</code> and returns a single value of the same type <code>a</code>).
</li>
<li>
you will see two types of “forward” arrows: <code>-&gt;</code> and <code>=&gt;</code>. A single arrow <code>-&gt;</code> is used to describe the type of a function: <code>add1 :: Int -&gt;
Int</code> describes a function which takes an integer and returns an integer. A double arrow <code>=&gt;</code> describes constraints on the type variables used, and always come first: <code>add1 :: Num a =&gt; a -&gt; a</code> describes a function which takes any type <code>a</code> which satisfies <code>Num a</code>, and returns a value of the same type.
</li>
<li>
comments start with <code>--</code>.
</li>
<li>
<code>return</code> does not mean what you think it means, it’s just a regular function.
</li>
<li>
<code>do</code> is syntactic sugar allowing you to write things that “look” imperative.
</li>
<li>
There are various ways of assigning values to local names (“variables”) which differ depending on the context. So you can recognise them they either take the form <code>let x = &lt;something&gt; in
&lt;expression&gt;</code> or <code>x &lt;- &lt;something&gt;</code>.
</li>
</ul>
<p data-pos="98:1-101:0">Otherwise the syntax should be fairly easy to parse, if not for a detailed understanding of every aspect, at least to a sufficient level to get the gist of what I am trying to convey.</p>
</section>
</section>
<section data-pos="102:1-611:0" id="Make-fewer-mistakes">
<h2 data-pos="102:1-103:0">Make fewer mistakes</h2>
<p data-pos="104:1-108:0">In many languages, the way one tries to make sure one’s code is “correct” (or, at least, will do the right thing in most circumstances) is through a large number of test cases, some of which may be automated, and some of which may be manual.</p>
<p data-pos="109:1-112:0">Two aspects of Haskell drastically reduce the test-case-writing burden typical in other languages: one is the type system and the other is pure functional programming.</p>
<p data-pos="113:1-121:0">Haskell’s type system is <em>very</em> strong, which is to say that it makes very specific guarantees about the programme, and enforces those guarantees very strictly. The concomitant expressiveness of the language gives the programmer the tools to more precisely and simply express the <em>meaning</em> of the programme within its domain, as well as the general domain of programming. These two properties of the type system, together, reduce the space of possible mistakes, resulting in a more correct programme with much less effort.</p>
<p data-pos="122:1-127:0">So far, so abstract. Some concrete features of the type system that reduce the “error surface” of your programme are: no nullable types; the ability to represent “failable” computations; pattern matching and completeness checks; and the avoidance of “primitive obsession” for free. Let’s take a look at each of those.</p>
<p data-pos="128:1-146:0">The availability of a <code>null</code> (or <code>nil</code> or <code>none</code>) value which can inhabit any (or the majority) of types in a language is often viewed as a convenience, but in practice it has a huge cost. In a language in which one can use such null values, the programmer can never know if the value they are handling is actually of the expected type or if it is null, and therefore is required to check wherever this value is consumed. Programmers can forget things, and the fact that the null value can inhabit many types means that the type system does not help prevent this, leading to errors of the sort “undefined is not a function” or “NoneType object has no attribute &lt;x&gt;”. These, however, are runtime errors, which both means that the programme has failed in its principal task and also that the errors are harder to find as they occur in the wild. Haskell does not have null values. You can define them in a particular data type (for example the <code>Maybe</code> type, which we will come onto shortly) but you have to explicitly define them and explicitly handle them. As such, the error surface available due to this flaw in language design is eliminated, and the programmer no longer has to think about it.</p>
<p data-pos="147:1-163:0">Null values, however, are often used to represent a “failed” computation. For example, what if you are getting the head of an empty list, how do you represent the result? In languages with null values, such functions will often return <code>null</code> in these circumstances. This is a specific case of the more general question of how to deal with computations which may fail. There are many examples: if you are parsing some user input and that input is malformed, this failure to parse is a valid state of your programme, and therefore you need some way to represent it. Similarly, network requests may time out, solvers may fail to find a solution, users may cancel actions, and so on. There are two common solutions, null values (which we have mentioned) and exception handling. Both of these solutions cause a new problem for the programmer: you have to remember to handle them, in the case of exceptions at the call site rather than where you consume the value as with null, and nothing in the type system is going to prevent you forgetting.</p>
<p data-pos="164:1-175:0">Haskell solves the problem of the representation of computations which may fail very differently: explicitly through the type system. There are types in Haskell to represent a computation which may fail, and because this is done in the type system, these are first-class entities and you can pass around your computation-result-which-may-or-may-not-be-a-failure as you like. When it comes to consuming the result of that computation, the type system forces you to reckon with the fact that there may be no result. This prevents a whole class of runtime errors without the mental burden of keeping track of values which may be present or which functions might throw an exception somewhere.</p>
<p data-pos="176:1-183:0">The two most common of these types are <code>Maybe</code> and <code>Either</code>. <code>Maybe</code> represents a computation which may or may not have a result. For example, if you want to get the first element of a list, but you do not know if the list is empty, then you may want to specify that your <code>head</code> function can return either a result or <code>Nothing</code>. Unlike null values, however, you cannot just pretend that the function must have returned a result, as the following snippet should demonstrate:</p>
<pre data-pos="184:1-210:3"><code>safeHead :: [a] -&gt; Maybe a
-- the implementation isn't important here, but I'm including it
-- because it is simple and, for the curious, might be helpful
safeHead [] = Nothing
safeHead (x : _) = Just x

myFavouriteThings = ["raindrops on roses", "whiskers on kittens"]
emptyList = []

faveThing = safeHead myFavouriteThings 
-- ^ but what is the type of this thing? 
-- It's not a string, it's `Maybe String`
-- and the value is, in fact, `Just "raindrops on roses"`

something = safeHead emptyList
-- ^ and what's the type of this thing?
-- again, it's a `Maybe String`, but in this
-- case the value is `Nothing` because the list
-- has no first element!

-- so how can we use the value we have computed?
printTheFirstThing :: [String] -&gt; IO ()
printTheFirstThing myList = case safeHead myList of
  Just something -&gt; putStrLn something
  Nothing -&gt; putStrLn "You don't have any favourite things? How sad."
</code></pre>
<p data-pos="212:1-216:0">In this example you can see that when consuming the result of a computation that might fail, you have to explicitly handle the failure case. There are many ways of doing this, and the pattern matching ( <code>case x of ...</code>) above is just one to which we will come shortly.</p>
<p data-pos="217:1-221:0"><code>Maybe</code> can also be used when you might want a nullable field of a data structure. This is a specific case of a computation which may fail, but is often thought of as distinct. Here is how this would look in Haskell:</p>
<pre data-pos="222:1-228:3"><code>data Person = Person {
  name :: String,
  dob :: Day,
  favouriteThing :: Maybe String
}
</code></pre>
<p data-pos="230:1-234:0">As before, Haskell’s type system will not let you fail to handle the case that <code>favouriteThing</code> might be an empty value, so you will not end up with a runtime error as you might in a language in which you could forget to do so.</p>
<p data-pos="235:1-242:0"><code>Maybe</code> is useful in these situations in which the failure condition is obvious, but it doesn’t give you much resolution on <em>why</em> the computation failed, it only tells you <em>that</em> it has failed. By contrast, an <code>Either a b</code> can contain two values, <code>Left a</code> or <code>Right b</code>. By convention, <code>Left</code> contains a failure value, whereas <code>Right</code> contains a success value, so the type is often given as <code>Either e a</code> where <code>e</code> is for “error” and <code>a</code> is just the result type.</p>
<p data-pos="243:1-247:0">One way in which this could be used is in parsing or validating some user input, in which you may want to tell the user more than just that what they gave you is invalid, but rather in what way it is invalid. To that end you could have a <code>validate</code> function that looked like this:</p>
<pre data-pos="248:1-250:3"><code>validateAddress :: String -&gt; Either AddressParseError ValidAddress
</code></pre>
<p data-pos="252:1-256:0">This gives you the ability to return more helpful errors to the user, which are an expected path in your programme, but it prevents you from failing to handle the failure case, or from treating the failure case like a success case accidentally.</p>
<p data-pos="257:1-263:0">To be clear, this means that we no longer treat known error states as exceptions by throwing them up the call stack <a id="fnref5" href="#fn5" role="doc-noteref"><sup>5</sup></a>, and instead we treat them as potential values for the type of our expression. In turn, this means that we now can have a total description of all the failure modes from the point of the function call <em>down</em> the stack. Consider these two snippets of code:</p>
<pre data-pos="264:1-270:3"><code>def do_something():
  result = get_a_result()
  if result != "a result":
    raise InvalidResultError(result)
  return 42
</code></pre>
<pre data-pos="272:1-279:3"><code>doSomething :: Either InvalidResultError Int
doSomething = 
  let result = getResult
   in if result /= "a result"
        then Left (InvalidResultError result)
        else Right 42
</code></pre>
<p data-pos="281:1-286:0">In the first snippet, we have no idea what possible exceptions may be raised by <code>do_something</code>, partly because we have no way of knowing what exceptions may be raised by <code>get_a_result</code>. By contrast, in the second snippet, we know <em>all</em> of the possible failure states immediately, because they are captured in the type system.</p>
<p data-pos="287:1-297:0">We can generalise this idea of being forced to handle the failure cases by saying that Haskell makes us write <strong>total</strong> functions rather than <strong>partial</strong> functions. This means that we have to handle the entire input domain rather than only part of the input domain, otherwise the compiler will complain at us and, sometimes, point-blank refuse to give us a programme. The easiest way to see how this works is to look at how pattern matching is done in Haskell, using a basic programme which helps us organise our evenings given a chosen option. Instead of implementing the entire programme, here is an extract to illustrate the use of pattern matching.</p>
<pre data-pos="298:1-316:3"><code>data Option =
  NightIn
  | Restaurant VenueName
  | Theatre VenueName EventName

data OrganiserResult = Success | NeedsSeatChoice [Seat] | Failure Reason

organiseMyEvening :: Option -&gt; IO OrganiserResult
organiseMyEvening NightIn = do
  cancelAllPlans 
  return Success
organiseMyEvening (Restaurant venue) = attemptBooking venue
organiseMyEvening (Theatre venue event) = do
  availableSeats &lt;- checkForSeats venue event
  case availableSeats of
    [] -&gt; return (Failure (Reason "there are no seats available, sorry :("))
    seats -&gt; return (NeedsSeatChoice seats)
</code></pre>
<p data-pos="318:1-325:0">In the above example, if we were to add an additional option for what we may want to do with our evening, like going to the cinema, and <em>forget</em> to update the <code>organiseMyEvening</code> function accordingly, the compiler would complain to us until we fix it. Without this completeness check in the type system, we could end up with a runtime error, but with this type of check, we just do not have to worry about whether we have <em>remembered</em> to update all the places in which a given value is used.</p>
<p data-pos="326:1-337:0">The final major way in which Haskell’s type system makes it easy for us to avoid common errors when programming is related to how easy it is to avoid “primitive obsession”. There is a hint in our evening-organising snippet above: our <code>Restaurant</code> and <code>Theatre</code> constructors take a <code>VenueName</code> and <code>EventName</code>. These could, naturally, be represented as plain old strings, and in many languages they are, but Haskell gives us a very simple, zero-cost way of representing them as something with more semantic value, more meaning, than just a string. It may not be obvious why this is a problem worth solving, however. Let’s imagine we represented these as plain old strings, so we would have something like this:</p>
<pre data-pos="338:1-345:3"><code>data Option =
  NightIn
  | Restaurant String
  | Theatre String String -- venue name and event name respectively

checkForSeats :: String -&gt; String -&gt; IO [Seat]
</code></pre>
<p data-pos="347:1-366:0">This is probably <em>ok</em> the first time you write it, although you will need comments, as above, in order to remind yourself which value is which. This is where we come to our first annoyance (although not yet a problem) – the type system doesn’t help us remember what is what, we have to rely on arbitrary comments or documentation (or perhaps variable names) to remember, which is a lot of overhead. The problem comes, however, when using these values, such as in <code>checkForSeats</code>. We could easily mix up the venue name and event name, and we would always return zero seats (because we probably don’t know a theatre called <em>King Lear</em> in London where they are playing Shakespeare’s masterful <em>The National Theatre</em>). This is erroneous behaviour, but is easily done, and the type system will not help us out. “Primitive obsession” is the use of primitives (strings, numbers, booleans, etc.) to represent data, instead of types with more semantic value. The solution is to encode your domain in your type system, which prevents such errors. This can be very cumbersome in many imperative languages, but in Haskell we can simply wrap a value in a <code>newtype</code> and the type system suddenly stops us falling into the trap of using the wrong value. Therefore our code above becomes:</p>
<pre data-pos="367:1-377:3"><code>newtype VenueName = VenueName String
newtype EventName = EventName String

data Option =
  NightIn
  | Restaurant VenueName
  | Theatre VenueName EventName

checkForSeats :: VenueName -&gt; EventName -&gt; IO [Seat]
</code></pre>
<p data-pos="379:1-385:0">Above it is written that this is a “zero-cost” method, which means that unlike the normal way of creating a data structure to wrap around some values, <code>newtypes</code> have exactly the same representation in memory as the type they wrap (with the result that they can only wrap a single type), they therefore only exist at the level of the type system, but have no impact on your programme otherwise.</p>
<p data-pos="386:1-391:0">Thus far we have discussed four features of the type system which help us as programmers to write correct code with minimal mental overhead: the lack of nullable types, representations of “failable” computations, pattern matching and completeness checks, and the avoidance of “primitive obsession”.</p>
<p data-pos="392:1-398:0">Other languages have some of these features (notably Rust, whose type system was inspired by Haskell’s), but most of these other languages lack the second pillar: pure functional programming. There are two aspects of a pure functional language which help us avoid common errors: immutable data and explicit side-effects (which, together, give us purity and referential transparency).</p>
<p data-pos="399:1-413:0">Almost all data in Haskell are immutable. This means that a whole class of errors like data races, or objects changing between write and read, just do not exist. In single-threaded code this is great because you don’t have to think about mutating state anywhere, you just use things like folds or traversals to achieve your goals, but where this really shines is in concurrent code. For concurrent Haskell you do not have to worry about mutices and locks because your data can’t be mutated <em>anyway</em>. That means that if you want to parallelise a computation, you just fork it into different threads and wait for them all to come back without all of the hairy bugs of multi-threaded computations. Even when you do require some sort of shared, mutable state between your threads, the way this is constructed in Haskell (e.g. in the <a href="https://hackage.haskell.org/package/stm"><code>STM</code> library</a>) still avoids the problems solved by locks and mutices in other languages.</p>
<p data-pos="414:1-424:0">Immutability gets you halfway towards eliminating the sorts of errors found in imperative languages, but <em>purity</em> will get us the rest of the way. Haskell functions are pure, in the sense that they do not permit any side-effects, nor do they rely on anything except for the arguments passed into them. There are ways to encode side-effects, for, at some point, any useful programme needs to at least perform <em>some</em> I/O, and there are ways to include things in functions which are not <em>directly</em> passed as arguments (implicit parameters), but the way Haskell is constructed means that these ways do not violate the purity of the language because we use monads to encode these things.</p>
<p data-pos="425:1-431:0">Monads: at first they throw every novice Haskeller into disarray, and then nearly everyone feels the need to write their own monad tutorial. Exactly what monads are and why they are useful is beyond the scope of what we want to talk about here, but the specific benefit we <em>are</em> looking at is how this allows us to encode side-effects and why that is going to help you avoid mistakes when programming.</p>
<p data-pos="432:1-433:0">Let’s look at some functions for a basic online community:</p>
<pre data-pos="434:1-442:3"><code>data Response = Success | Failure FailureReason

sendGreetings :: User -&gt; IO Response

updateUser :: UserId -&gt; User -&gt; IO Response

findNewestUser :: [User] -&gt; Maybe User
</code></pre>
<p data-pos="444:1-451:0">In many imperative languages, the activity of finding the newest user and sending them some sort of greeting might all be done in one function, or a set of deeply nested functions. There would be nothing to stop you, however, making database calls, sending emails, or doing anything else inside the simple <code>findNewestUser</code> function. This can be a nightmare for tracking down bugs and performance issues, as well as preventing tight-coupling between functions.</p>
<p data-pos="452:1-464:0">The functions above take two forms: <code>findNewestUser</code> returns something by now familiar to us, <code>Maybe User</code> – if there is a newest user, it will return it, otherwise it will return <code>Nothing</code>. The other two functions return something we have not yet seen: <code>IO Response</code>. <code>IO</code>, like <code>Maybe</code> wraps another type (in this case: <code>Response</code>) but instead of representing a “failable” computation as <code>Maybe</code> does, it represents any context in which you are permitted to perform I/O actions (like talking to your database or sending emails, as our cases are above). It is not possible to perform I/O outside of the <code>IO</code> monad – your code will not compile – and, furthermore, I/O “colours” all the functions which call it, because if you are calling something which returns <code>IO</code>, then you have to be returning <code>IO</code> as well.</p>
<p data-pos="465:1-474:0">This might look like a lot of bureaucracy, but it actually does two very helpful things: firstly, it immediately tells the programmer “hey, this function performs side-effects in I/O” which means that they don’t have to read the code in order to understand what it does, just the type signature; secondly, it means that you cannot accidentally perform I/O in a function you thought was pure – this, in itself, eliminates whole classes of bugs in which one may think one understands all the dependencies of a function, but actually something is affecting it which you did not realise, because it can perform side-effects.</p>
<p data-pos="475:1-482:0">This is only partially satisfying, however, as wrapping everything that performs side-effects in <code>IO</code> is a bit imprecise in a similar way in which using primitive types for values with higher-level semantics in the domain is also imprecise, and it can cause similar classes of error: there is nothing to say “in this function you can send emails, but you can’t write to the database.” The type-system has helped you <em>a little bit</em> but stopped short of the guardrail we have come to expect by now.</p>
<p data-pos="483:1-493:0">Thankfully, due to two additional language features: namely ad hoc polymorphisms and typeclasses, we can <em>exactly</em> encode the effects we want a function to be permitted to perform, and make it impossible to perform any others. Let’s modify our example to take advantage of this, noting that <code>class X a where</code> means that we are declaring a <em>class</em> <code>X</code> of types with some associated functions for which we have to write concrete implementations. This is similar to interfaces in some languages, or traits in Rust (which were based on Haskell’s typeclasses). In this example, <code>m</code> is just a type variable representing a “2nd order”<a id="fnref6" href="#fn6" role="doc-noteref"><sup>6</sup></a> type (e.g. <code>IO</code> or <code>Maybe</code>).</p>
<pre data-pos="494:1-515:3"><code>data Response = Success | Failure FailureReason

class CanReadUsers m where
  getUsers :: m (Either FailureReason [User])

class CanWriteUsers m where
  updateUser :: UserId -&gt; User -&gt; m Response

class CanSendEmails m where
  sendEmail :: EmailAddress -&gt; Subject -&gt; Body -&gt; m Response

findNewestUser :: [User] -&gt; Maybe User

sendGreetings :: CanSendEmails m =&gt; User -&gt; m Response

greetNewestUser :: (
  CanReadUsers m,
  CanWriteUsers m,
  CanSendEmails m
  ) =&gt; m Response
</code></pre>
<p data-pos="517:1-527:0">We have introduced a new function here <code>greetNewestUser</code> to illustrate how we can compose these <em>constraints</em> on what we are able to do. Our implementation of this would do something like: find all the users, filter for the newest one, send an email, and mark the user as having been greeted. We have encoded these capabilities at the type level for <code>greetNewestUser</code>, whereas we have not for <code>sendGreetings</code>, so it would be impossible, in fact, for <code>sendGreetings</code> to fetch users from the database or to accidentally update the user information in the database<a id="fnref7" href="#fn7" role="doc-noteref"><sup>7</sup></a>. It can <em>only</em> send emails. To finish this example off, let’s see how the implementations of these functions might look:</p>
<pre data-pos="528:1-555:3"><code>-- these would be defined elsewhere, but just so you know the types
joinDate :: User -&gt; Day
emailAddress :: User -&gt; EmailAddress
setAlreadyGreeted :: User -&gt; User
hasBeenGreeted :: User -&gt; Bool
userId :: User -&gt; UserId

findNewestUser users = safeHead (sortOn joinDate users)

sendGreetings user = 
  let subject = Subject "Welcome to the club!"
      body = Body "Remember: don't stare at the guests..."
   in sendEmail (emailAddress user) subject body

greetNewestUser = do
  fetchResult &lt;- getUsers
  case fetchResult of
    Left err -&gt; return (Failure err)
    Right users -&gt; case findNewestUser users of
      Nothing -&gt; return (Failure NoUsers)
      Just user -&gt; if hasBeenGreeted user
        then return (Failure AlreadyGreetedUser)
        else do
          sendGreetings user
          let newUserData = setAlreadyGreeted user
           in updateUser (userId user) newUserData
</code></pre>
<p data-pos="557:1-566:0">While the exact syntax may be unfamiliar, everything in this section has been building up to this point: we represent “failable” computations with data types which encapsulate that they can fail and how they can fail; we use semantically meaningful types to describe our data, rather than primitives; we explicitly handle failure cases rather than being allowed to forget about them; we cannot mutate state so we create new copies of our data with the requisite updates; and we explicitly encode the side-effects we want to perform, rather than just firing them off willy-nilly.</p>
<p data-pos="567:1-574:0">That rounds off the section about the guardrails Haskell puts in place for you as a programmer, both through the strength of its type system and the purity and referential transparency of the language itself. Far from being an imposition on the programmer, this is incredibly freeing as it allows you to spend your mental energy <em>describing</em> your problem and thereby solving it, not worrying about keeping track of all the ways in which your programme could fail.</p>
<section data-pos="575:1-611:0" id="But-language-has-feature-too">
<h3 data-pos="575:1-576:0">But &lt;language&gt; has &lt;feature&gt;, too!</h3>
<p data-pos="577:1-581:0">Some of the features of Haskell above exist, or <em>look like</em> they exist, in other languages. Without trying to talk about every possible language, we can look at some of the common patterns and how they differ, or do not, from those in Haskell.</p>
<p data-pos="582:1-590:0">Pattern matching, for example, has been introduced into many languages. Some of those have the same characteristics as Haskell, like Rust’s pattern matching, which is exhaustive and enforced by the compiler, whereas some are quite different, especially in gradually-typed languages like Typescript and Python, where there is no guarantee that this sort of safety permeates the codebase, and there are often escape-hatches, because you are using optional tools external to the built-in toolchain.</p>
<p data-pos="591:1-595:0">Very few languages make use of higher-order types like <code>Either</code> and <code>Maybe</code> to represent computations which may fail, but Rust is a notable exception which, like Haskell, strongly encourages representing failure in this way.</p>
<p data-pos="596:1-606:0">Subclassing is commonly used in some languages to make it “easy” to avoid primitive obsession, but this is not as strict as Haskell’s <code>newtype</code>s. Python, for example, has a <code>NewType</code> construction, but it has two weaknesses common to this type of implementation: the first is that subclassing means that our <code>VenueName</code> and <code>EventName</code> types can be passed to functions expecting <code>String</code>, because they are not treated as completely different types, and the second is that, unlike in Haskell, you cannot hide the constructors of these types, which means there are certain patterns you cannot fully implement like the parsing pattern (as opposed to validating)<a id="fnref8" href="#fn8" role="doc-noteref"><sup>8</sup></a>.</p>
<p data-pos="607:1-611:0">Finally, while some libraries exist in other languages in order to isolate and control side-effects<a id="fnref9" href="#fn9" role="doc-noteref"><sup>9</sup></a>, they are not enforced as part of the language in the same way, because this would require purity to be built into the language itself.</p>
</section>
</section>
<section data-pos="612:1-738:0" id="The-things-which-make-you-more-productive">
<h2 data-pos="612:1-613:0">The things which make you more productive</h2>
<p data-pos="614:1-620:0">Providing guardrails, for all the reasons listed in the previous section, is a very useful feature of a language, but that alone might make for a very slow experience of building programmes. Haskell has several properties which actually make it <em>more</em> productive to construct such programmes, especially as those programmes grow in complexity (or sheer size).</p>
<p data-pos="621:1-627:0">As before, these properties derive from the two key characteristics of the language<a id="fnref10" href="#fn10" role="doc-noteref"><sup>10</sup></a>: the strength of the type-system and the pure-functional semantics of the language. These two together give us code which is highly declarative, and therefore easily and unambiguously manipulable, as well as a tendency towards heavy concept and code re-use.</p>
<p data-pos="628:1-635:0">Why are these useful? Starting with the former: if our programme is declarative rather than imperative, we can easily understand it ourselves, as well as simply generate other code from it (or documentation), and refactoring becomes a “fearless” activity. Taking the latter, this means that we can “discover” a set of core concepts and continue to build upon them, instead of having to learn disjoint sets of concepts for each domain or library one uses.</p>
<p data-pos="636:1-650:0">It can be hard to explain just how radically these things transform the way one constructs programmes without experiencing them, but to take a small example, the Haskell ecosystem has a tool called <a href="https://hoogle.haskell.org/">“Hoogle”</a> which allows one to search for functions by type signature. Not only by full type signature with concrete types, but, even by partial type signature with type variables instead of actual types. That means that, instead of searching for something which applies a function to each string in a list of strings (<code>(String -&gt; String)
-&gt; [String] -&gt; [String]</code>), one can instead search for something which applies a function to a list of things, returning a list of the results: (<code>(a -&gt; b) -&gt; [a] -&gt; [b]</code>). You can even get the arguments the wrong way around, and Hoogle will still find you the right functions, so <code>[a] -&gt;
(a -&gt; b) -&gt; [b]</code> will give you the same answers (sorted differently) to <code>(a -&gt; b) -&gt; [a] -&gt; [b]</code>!</p>
<p data-pos="651:1-659:0">This works so well because Haskell’s semantics, standard library, and ecosystem all rely heavily on concept re-use. Almost every library builds upon the core set of concepts<a id="fnref11" href="#fn11" role="doc-noteref"><sup>11</sup></a>. This means that if you are wondering how to do something, and you are faced with one library or set of data types, you can probably search for the general pattern of what you want to achieve and you will get what you want. Almost no other ecosystem<a id="fnref12" href="#fn12" role="doc-noteref"><sup>12</sup></a> has something comparable to this.</p>
<p data-pos="660:1-663:0">In order to flesh out this idea of concept generalisation and re-use, let’s consider two examples: functors and monoids. Before we get there, we will start with lists.</p>
<p data-pos="664:1-672:0">A list is Haskell looks like this <code>myList = [1, 2, 3] :: [Int]</code>. You can do various things with lists, like apply a function to each member of the list (<code>map</code>) in order to obtain a new list, or stitch two lists together (<code>[1, 2] &lt;&gt; [3, 4]</code>). In this sense, we have described two properties of lists which we can generalise: a list is a container over which you can apply a function (a “functor”), and a list is an object which has a binary combining operator with an identity value <code>[]</code> (a “monoid”).</p>
<p data-pos="673:1-678:0">Lots of other structures exhibit these properties, for example a list is a functor, but so is a <code>Maybe</code> or an <code>Either</code>, or even a parser! As a result, if you understand the core concept of functors, you have a set of tools which can apply to all sorts of other data structures which you use day-to-day, but with no extra overhead:</p>
<pre data-pos="679:1-688:3"><code>fmap (+ 2) [1, 2, 3] -- [3, 4, 5]
fmap (+ 2) (Just 2) -- Just 4
fmap (+ 2) (Right 5) -- Right 7
number = fmap (+ 2) decimal :: Parser Int
-- parses a string representation of a decimal, adding 2 to it, but
-- the nice thing here is that we don't have to explicitly handle the
-- failure case with our `+ 2` function!
parseMaybe number "4" -- Just 6
</code></pre>
<p data-pos="690:1-696:0">Similarly, there are plenty of monoids lurking about. Obvious examples might be strings, but then, for example, the <a href="https://hackage.haskell.org/package/lucid"><code>Lucid</code> library</a> for writing HTML represents HTML as monoids, which allows you to compose them with the same tools you would use for any other monoid. Once again, you learn a single core concept, and it becomes applicable across a large part of the ecosystem.</p>
<pre data-pos="697:1-701:3"><code>[1, 2] &lt;&gt; [3, 4] -- [1, 2, 3, 4]
"hello" &lt;&gt; " " &lt;&gt; "world" -- "hello world"
myIntro = p_ (i_ "Don't " &lt;&gt; b_ "panic") -- &lt;p&gt;&lt;i&gt;Don't &lt;/i&gt;&lt;b&gt;panic&lt;/b&gt;&lt;/p&gt;
</code></pre>
<p data-pos="703:1-708:0">You can even use this in your own code, and can write simple instances for your own data structures. This vastly reduces the amount of specialised code you have to write – instead, you can simply re-use code and concepts from elsewhere, whether the standard library or an extension to those concepts like bifunctors.</p>
<p data-pos="709:1-715:0">In short: Haskell’s semantics and standard library encourage generalised concepts which, in turn, heavily promote both concept and code reuse, and this has driven the development of the ecosystem in a similar direction. That re-use means that the programmer need only discover the core concepts once, rather than for each library, providing an accelerating rate of learning and a much more efficient use of code.</p>
<p data-pos="716:1-729:0">The final productivity boost to discuss here is “fearless refactoring”, a term often thrown about in the Haskell community, but what does it actually mean? The essential point here is that the intransigence of the compiler makes it a useful ally when refactoring code. In languages with a more forgiving compiler or weaker type-system, refactoring code can introduce new bugs which are only discovered at runtime. When refactoring Haskell, because the type-system gives you the power to express your programme domain correctly, the process normally works as a constant cycle of “change, compile, change, compile” until all the compilation errors are gone, at which point you can be very confident you will not encounter runtime bugs. This reduces the cognitive load on the programmer, making it far faster (and less scary) to make changes to a codebase, whether large or small.</p>
<p data-pos="730:1-738:0">This section goes beyond just providing guardrails, guardrails which are clearly inspiring other language maintainers to introduce them into their languages, to talk about something very fundamental to productivity in programming: composable, re-usable concepts and the ability to “fearlessly” make changes to your programme. These are not simply features which can be added into a language, they are characteristics of it, and they relate to the more abstract notions laid out in the next section.</p>
</section>
<section data-pos="739:1-898:0" id="Reason-about-your-programmes-more-easily">
<h2 data-pos="739:1-740:0">Reason about your programmes more easily</h2>
<p data-pos="741:1-750:0">In general, programming is about telling a machine about some problem domain: the ontology of it, and the logical rules governing it, and then asking it to compute some results. These results should have some sort of meaning we can interpret, which is going to depend on how well we understand what our programme actually <em>means</em>. Additionally, for us to be able to trust the results of the computations we ask of the machine, we need to be confident that we have done a good job describing the problem domain in terms that result in a “good” understanding on the part of the machine.</p>
<p data-pos="751:1-757:0">A programme can have essential complexity or accidental complexity. The essential complexity comes from precisely describing the problem domain, and some domains are more complex than others. The accidental complexity comes from our (in)ability to express the problem domain to the machine. We can refer to these as <em>complexity</em> and <em>complication</em> to differentiate them.</p>
<p data-pos="758:1-764:0">Complications are bad and should be eliminated. They make it hard to reason about our programmes and therefore hard to trust their results. It also makes it hard to write the programmes in the first place, because we have to deal with all these complications. It’s a bit like trying to embroider a tapestry using a Rube Goldberg machine operated with thick mittens: unlikely to give you what you want.</p>
<p data-pos="765:1-776:0">We could look at general purpose programming languages on a scale of how well we are able to express a problem domain to a machine, and therefore to what extent we are able to trust the results of the computations we ask of that machine. Assembly is at one end: it is all about moving bytes between registers and performing arithmetic on them. Yes, you can write anything in Assembly but it is really hard to reason about the results you will get. As we move along the scale towards “high-level” languages we gain a set of abstractions which allow us to forget about the semantics of the lower level (e.g. moving bytes between registers) because they give us new semantics which are closer to those of the problem domain.</p>
<blockquote data-pos="777:1-779:36">
<p data-pos="777:3-779:36">The purpose of abstracting is not to be vague, but to create a new semantic level in which one can be absolutely precise. ~ Dijkstra, 1972<a id="fnref13" href="#fn13" role="doc-noteref"><sup>13</sup></a></p>
</blockquote>
<p data-pos="781:1-788:0">Haskell improves upon most high-level languages in this regard, providing a level of expressivity that allows more precise descriptions of the problem domain, easily intelligible both to the programmer and the machine. Broadly there are three major contributing factors to this (perhaps all of them can fit under the idea of denotation semantics): algebraic data types, parametric and ad hoc polymorphism, and declarative programming.</p>
<p data-pos="789:1-793:0">We can distinguish declarative and imperative programming by saying that declarative programming describes what a computation is supposed to be with respect to the problem domain, whereas imperative programming describes how a computation is to be carried out, step-by-step.</p>
<p data-pos="794:1-801:0">This is useful distinction: in imperative programming the operational semantics of the programme (the steps a machine must execute in order to compute a result) are mixed into the problem domain, making it difficult to reason about the meaning of a programme and, therefore, its correctness. Declarative programming, however, does not bother with defining these execution steps, making programmes much simpler to understand and reason about.</p>
<p data-pos="802:1-812:0">In Haskell, everything is an expression. In fact, your entire programme is a <em>single</em> expression composed of sub-expressions. These sub-expressions have themselves some sort of meaning, as does their composition. This is different to imperative languages, in which is common for there to be many lines of function calls and loops, with, often, deeply nested function calls, but these are not essentially composable. Haskell’s purity forces concise programmes composed of meaningful sub-expressions with no side-effects. This means that it takes far less time to understand the purpose of a given expression, and therefore reason about whether it is correct or not.</p>
<p data-pos="813:1-818:0">As ever, we are back to our two familiar pillars: so far, we have discussed the pure-functional pillar (single expression, compositionality, no side-effects), but the type system gives us the tools for expressing ourselves clearly to the machine (and to ourselves).</p>
<p data-pos="819:1-828:0">In fact, most of the preceding sections touch upon this in one way or another: we have data types for expressing the idea that some computations can fail in well-defined ways; we have sum types like <code>data
Response = Success | Failure FailureReason</code> which allow us to define all the possible values we might get from a function; we have typeclasses we can use as constraints on a function to semantically express what the result is in the most general way (like <code>CanSendEmails</code>); and we have generalised concepts like <code>Functor</code> and <code>Monoid</code> which describe how things behave rather than the steps to implement those behaviours.</p>
<p data-pos="829:1-838:0">Algebraic data types and typeclasses (and other, similar mechanics which deal with various polymorphisms) allow us to construct our own domain-specific languages within Haskell with which to write our programmes, while building upon common, well-established concepts to do so. These are declarative rather than imperative, and therefore are easy to reason about and to understand <em>semantically</em> because you do not have to either weed out the operational semantics (the step-by-step instructions) nor do you have to translate from a layer of primitives into your own domain.</p>
<p data-pos="839:1-843:0">This section has been necessarily abstract, because the idea is hard to communicate if one has not stepped outside the imperative paradigms in which most of modern programming sits. To try to elucidate it somewhat, here is a small sample programme using the concepts discussed above.</p>
<p data-pos="844:1-847:0">This programme is a basic accounting tool: given some initial monetary value, and a set of transactions (either in or out) in a variety of currencies, allow us to calculate the final value of the account.</p>
<pre data-pos="848:1-897:3"><code>-- this is a bit like an "enum" of possible constructors of the type Currency
data Currency = GBP | EUR | USD 

data Money = Money {
  currency :: Currency,
  value :: Double
  }

convert :: Currency -&gt; Money -&gt; Money
convert = -- not interesting to implement here as it is basically a lookup table

zero :: Money
zero = Money GBP 0

-- Ord gives us ways of comparing things (a natural ordering)
instance Ord Money where
  compare m1 m2 
    | currency m1 == currency m2 = compare (value m1) (value m2)
    | otherwise                  = compare m1 (convert (currency m1) m2)

instance Monoid Money where
  m1 &lt;&gt; m2 = Money (currency m1) (convert (currency m1) m2)
  mempty = zero

instance Functor Money where
  fmap f (Money curr val) = Money curr (f val)

data Transaction = In Money | Out Money

instance Functor Transaction where
  fmap f (In m) = In (f m)
  fmap f (Out m) = Out (f m)

normalise :: Transaction -&gt; Transaction
normalise transaction =
  let m = money transaction
   in if m &lt; zero then Out m else In m

instance Monoid Transaction where
  t1 &lt;&gt; In m2 = normalise (fmap (&lt;&gt; m2) t1)
  t1 &lt;&gt; Out m2 = normalise (fmap (&lt;&gt; (fmap (* (-1)) m2)) t1)

apply :: Transaction -&gt; Money -&gt; Money
apply (In m) initial = initial &lt;&gt; m
apply (Out m) initial = initial &lt;&gt; fmap (* (-1)) m

getAccountValue :: Money -&gt; [Transaction] -&gt; Money
getAccountValue startValue transactions = apply (fold transactions) startValue
</code></pre>
</section>
<section data-pos="899:1-1003:73" id="Epilogue">
<h2 data-pos="899:1-900:0">Epilogue</h2>
<p data-pos="901:1-905:0">I love writing in Haskell, and there are many reasons beyond this apologia why that is the case, but I also think it is an excellent choice for general purpose programming for anyone who wants to write robust software confidently and efficiently, and, of course, enjoyably.</p>
<p data-pos="906:1-913:0">I think what makes Haskell unique is the combination of its type system and functional purity – it’s not enough just to have functional programming, much as I love LISPs, nor is it enough just to have the type system, much as Rust seems like a great language. Many languages have bits of these features, but only a few have all of them, and, of those languages (others include Idris, Agda, and Lean), Haskell is the most mature, and therefore has the largest ecosystem.</p>
<p data-pos="914:1-921:0">While other languages are certainly adding features which I have mentioned above, this combination of a strong and expressive type system and pure functional programming is fundamental to the language: other languages without these axiomatic characteristics simply will not be able to implement them (and attempts to build some of these things into non-functional languages with weaker type systems is often extremely awkward and not very useful).</p>
<p data-pos="922:1-928:0">Not everyone has the luxury of choosing their tools in a professional context, whether because there is history in their team or the decisions are made by others. Even in this case, if you never end up using Haskell professionally, it will change how you think about programming, and to invert Alan Perlis’ quotation from the start of this essay: any language which changes how you think about programming is worth learning.</p>
</section>
<section role="doc-endnotes">
<hr>
<ol>
<li id="fn1">
<p data-pos="939:21-943:0">This is, however, not supposed to be an exhaustive list of all the things I think are great about Haskell, but just a subset of the most compelling reasons I recommend it to programmers. The rest they can discover for themselves.<a href="#fnref1" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn2">
<p data-pos="944:26-947:0">Haskell is, of course, not always an appropriate choice. For example, it is never going to replace C or C++ for writing software for micro-controllers.<a href="#fnref2" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn3">
<p data-pos="948:19-949:0">And quite possibly an “object-oriented” paradigm, to boot.<a href="#fnref3" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn4">
<p data-pos="929:17-930:0">Perlis, A., “Epigrams in Programming” (<a href="http://cs.yale.edu/homes/perlis-alan/quotes.html">retrieved 2024-07-07</a>)<a href="#fnref4" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn5">
<p data-pos="965:22-970:0">This is a bit like using <code>goto</code> to manage known failure states, which, I think, would be quite unintuitive if it hadn’t become such a dominant way of managing such failure states. In any case, I think it would make <a href="https://dl.acm.org/doi/10.1145/362929.362947">Dijkstra quite sad</a>.<a href="#fnref5" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn6">
<p data-pos="987:9-996:0">This use of “2nd order” is not idiomatic in Haskell, as this is technically a higher-kinded type, whereas “order” is typically used to refer to functions, but just like a higher-order function is a function which takes another function as its argument, a higher-kinded type is a type which takes another type as an “argument”, and thereby produces a “concrete type”. Diogo Castro’s <a href="https://diogocastro.com/blog/2018/10/17/haskells-kind-system-a-primer/">2018 blog post “Haskell’s kind system – a primer”</a>  has more details on this.<a href="#fnref6" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn7">
<p data-pos="997:9-1000:0">For those who are familiar with the idea, this is a bit like command-query segregation in the imperative world, but enforced by the type system.<a href="#fnref7" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn8">
<p data-pos="971:25-980:0">To expand slightly on this, although it would be worth reading the <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/">excellent blog post by Alexis King</a>, this means that instead of <em>validating</em>, i.e. checking a value meets some criterion, we parse an “unknown” value into a “valid” value, and thereby change its type. The result is that you can write functions which are defined to take the “valid” type (e.g. <code>EmailAddress</code>) and which never have to worry that it might be invalid, because you simply cannot forget to verify it, as you can in a “validation” pattern.<a href="#fnref8" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn9">
<p data-pos="981:32-986:0">Christopher Armstrong <a href="https://www.youtube.com/watch?v=D37dc9EoFus">gave an interesting talk at Strange Loop in 2015</a> on his python library, which includes an introduction to the motivation for this sort of pattern. This might be good follow-on content if you are interested.<a href="#fnref9" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn10">
<p data-pos="954:21-958:0">Actually, what is really distinctive about Haskell is that it is a <strong>lazy</strong>, pure, functional language, but laziness can be confusing and is only lightly related to the benefits discussed in this essay, and so I am going to ignore it.<a href="#fnref10" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn11">
<p data-pos="1001:21-1003:73">You can find a big map of how these concepts related to each other by checking out the <a href="https://wiki.haskell.org/Typeclassopedia#Introduction">Typeclassopedia</a>.<a href="#fnref11" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn12">
<p data-pos="961:18-964:0">Unison <em>does</em> have something called Unison Share, but it was written by a Haskeller and directly inspired by Hoogle (and, in fact, Unison is based on Haskell).<a href="#fnref12" role="doc-backlink">↩︎</a></p>
</li>
<li id="fn13">
<p data-pos="935:23-936:0">Dijkstra, E.W., ACM Turing Lecture: “The Humble Programmer”, 1972 (<a href="https://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html">transcript</a>)<a href="#fnref13" role="doc-backlink">↩︎</a></p>
</li>
</ol>
</section>
</div></div>]]></description>
        </item>
    </channel>
</rss>