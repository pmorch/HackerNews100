(ignoring known css parsing error)
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 30 Mar 2025 22:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Man Detained by ICE for Autism Awareness Tattoo Sent to Prison (107 pts)]]></title>
            <link>https://www.latintimes.com/man-detained-ice-autism-awareness-tattoo-still-sent-prison-after-officers-declared-him-clean-579373</link>
            <guid>43527154</guid>
            <pubDate>Sun, 30 Mar 2025 20:06:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.latintimes.com/man-detained-ice-autism-awareness-tattoo-still-sent-prison-after-officers-declared-him-clean-579373">https://www.latintimes.com/man-detained-ice-autism-awareness-tattoo-still-sent-prison-after-officers-declared-him-clean-579373</a>, See on <a href="https://news.ycombinator.com/item?id=43527154">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="v_article">
<figure><div><picture width="736" height="491"><source type="image/webp" media="(min-width: 1100px)" sizes="736px" srcset="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.webp?w=736&amp;f=64119d82874a1571ea57c1334919733f 736w"><source type="image/jpeg" media="(min-width: 1100px)" sizes="736px" srcset="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.jpg?w=736&amp;f=64119d82874a1571ea57c1334919733f 736w"><source type="image/webp" media="(min-width: 768px)" sizes="1100px" srcset="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.webp?w=1100&amp;f=f3d942905f1978fded53dd829bf4b0e8 1100w"><source type="image/jpeg" media="(min-width: 768px)" sizes="1100px" srcset="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.jpg?w=1100&amp;f=f3d942905f1978fded53dd829bf4b0e8 1100w"><source type="image/webp" media="(min-width: 480px)" sizes="736px" srcset="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.webp?w=736&amp;f=64119d82874a1571ea57c1334919733f 736w"><source type="image/jpeg" media="(min-width: 480px)" sizes="736px" srcset="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.jpg?w=736&amp;f=64119d82874a1571ea57c1334919733f 736w"><source type="image/webp" media="(min-width: 0px)" sizes="480px" srcset="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.webp?w=480&amp;f=10428957154ecb09a01b343881fdc67d 480w"><source type="image/jpeg" media="(min-width: 0px)" sizes="480px" srcset="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.jpg?w=480&amp;f=10428957154ecb09a01b343881fdc67d 480w"><source type="image/webp" srcset="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.webp?w=736&amp;f=64119d82874a1571ea57c1334919733f"><img id="i572979" src="https://d.latintimes.com/en/full/572979/autism-tattoo-03272025-1.jpg?w=736&amp;f=64119d82874a1571ea57c1334919733f" alt="Autism Tattoo_03272025_1" width="736" height="491"></picture></div><figcaption>
<span>Neri Alvarado was detained and sent to El Salvador because of his three tattoos, one of which is a tribute to his brother with autism.</span>
<span>Mother Jones/X</span>
</figcaption></figure><p>Neri Alvarado Borges, a <a rel="nofollow" href="https://www.latintimes.com/venezuelan-government-hires-lawyers-defend-migrants-fate-those-deported-el-salvador-remains-579287">Venezuelan man detained in Texas</a> earlier this month, was deported to El Salvador despite an ICE agent declaring <a rel="nofollow" href="https://www.latintimes.com/trump-admin-invokes-state-secrets-clause-avoid-explaining-swift-deportation-venezuelans-el-579198">Alvarado was "clean"</a> after he clarified the meaning behind his tattoos.</p><p>Alvarado, who left his family in late 2023, told a friend that he was detained in Houston in February because of his tattoos.</p><p>"We're finding and questioning <a rel="nofollow" href="https://www.latintimes.com/texas-teen-deported-after-ice-linked-tattoos-gang-activity-only-got-ink-because-it-looked-cool-578792">everyone who has tattoos</a>," Alvarado reported the agent said, according to <a rel="noopener nofollow" href="https://www.motherjones.com/politics/2025/03/trump-el-salvador-venezulea-deportation-prison-cecot-bukele/" target="_blank">Mother Jones</a>.</p><p>The 25-year-old undocumented American explained to an agent that one of his tattoos was an autism awareness ribbon, dedicated to his 15-year-old brother. He further clarified that none of his three tattoos was connected to Tren de Aragua, and, after the agent searched his phone, Alvarado was declared "clean."</p><p>"I'm going to put down here that you have nothing to do with Tren de Aragua," the agent told Alvarado, per Mother Jones.</p><p>An agent in the Dallas office, however, kept Alvarado without explaining why. He and his family then assumed he was going to be deported home to Venezuela but when he failed to appear, his family grew concerned.</p><p>Last week, when CBS News published a list of the 238 Venezuelan men who were deported to El Salvador's Terrorism Confinement Center, Alvarado's family found his name on the list.</p><p>"Anyone who's talked to Neri for even an hour can tell you what a great person he is. Truly, as a family, we are completely devastated to see him going through something so unjust—especially knowing that he's never done anything wrong," Alvarado's older sister, María, told Mother Jones. "He's someone who, as they say, wouldn't even hurt a fly."</p><p>© 2025 Latin Times. All rights reserved. Do not reproduce without permission.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Public secrets exposure leads to supply chain attack on GitHub CodeQL (112 pts)]]></title>
            <link>https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql/</link>
            <guid>43527044</guid>
            <pubDate>Sun, 30 Mar 2025 19:54:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql/">https://www.praetorian.com/blog/codeqleaked-public-secrets-exposure-leads-to-supply-chain-attack-on-github-codeql/</a>, See on <a href="https://news.ycombinator.com/item?id=43527044">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-id="887d2a1" data-element_type="container" data-widget_type="theme-post-content.default">
					
<p>A potential supply chain attack on GitHub CodeQL started simply: a publicly exposed secret, valid for 1.022 seconds at a time.</p>



<p>In that second, an attacker could take a series of steps that would allow them to execute code within a GitHub Actions workflow in most repositories using CodeQL, GitHub’s code analysis engine trusted by hundreds of thousands of repositories. The impact would reach both public GitHub (GitHub Cloud) and GitHub Enterprise.</p>



<p>If backdooring GitHub Actions sounds familiar, that’s because it’s exactly what threat actors did in the recent tj-actions/changed-files supply chain attack. Imagine that very same supply chain attack, but instead of backdooring actions in tj-actions, they backdoored actions in GitHub CodeQL.</p>



<p>An attacker could use this to:</p>



<ol>
<li><strong>Compromise intellectual property</strong> by exfiltrating the source code of private repositories using CodeQL.</li>



<li><strong>Steal credentials within GitHub Actions secrets</strong> of workflow jobs using CodeQL and leverage those secrets to execute further supply chain attacks.</li>



<li><strong>Execute code on internal infrastructure</strong> running CodeQL workflows.</li>



<li><strong>Compromise GitHub Actions secrets</strong> of workflows using the GitHub Actions Cache within a repo that uses CodeQL.</li>
</ol>



<p>This is the story of how we uncovered an exposed secret leading to a race condition, a potential supply chain attack, and CVE-2025-24362.</p>



<p><em>Note: Per <a href="https://github.com/advisories/GHSA-vqf5-2xx6-9wfm" target="_blank" rel="noreferrer noopener">GitHub’s advisory</a>, they have found no evidence of compromise to its platform or systems.</em></p>



<h2>How Did We Get Here?</h2>



<p>In January 2025, I took a break from Praetorian’s <a href="https://www.praetorian.com/services/red-team/">Red Team</a> and began three months of research. I aimed to push the limits of public GitHub Actions exploitation, building on presentations we’ve given at <a href="https://johnstawinski.com/wp-content/uploads/2024/08/us24-khan-stawinski-self-hosted-github-cicd-runners-continuous-integration-continuous-destruction.pdf" target="_blank" rel="noreferrer noopener">Black Hat</a>, <a href="https://www.youtube.com/watch?v=5P7KatZBr_I" target="_blank" rel="noreferrer noopener">DEF CON</a>, <a href="https://www.praetorian.com/blog/introducing-gato-for-ci-cd-exploitation/">Schmoocon</a>, and Black Hat Arsenal. Tools and takeaways from this research will be implemented in our <a href="https://www.praetorian.com/services/ci-cd-security-engagement/">CI/CD Professional Services Engagements</a>, and into <a href="https://www.praetorian.com/chariot/">Chariot</a>, our Continuous Threat Exposure Management platform.</p>



<p>I began my research rotation by scanning GitHub Actions workflow artifacts for secrets.</p>



<h2>Secret Scanning</h2>



<p>In August 2024, Palo Alto researcher Yaron Avital <a href="https://unit42.paloaltonetworks.com/github-repo-artifacts-leak-tokens/" target="_blank" rel="noreferrer noopener">published an article</a> about identifying secrets in workflow artifacts. I had a hunch that there were still secrets to be found, especially since there hadn’t been much public follow-up work since the article.</p>



<p>I built a simple Actions Artifacts Secret Scanner to get started. It downloads artifacts from GitHub Actions workflows, recursively extracts their contents, and scans their contents for secrets with <a href="https://github.com/praetorian-inc/noseyparker">Nosey Parker</a>, Praetorian’s open-sourced secrets scanning tool.</p>



<p>The Actions Artifacts Secret Scanner has been integrated into Chariot and open-sourced as a <a href="https://github.com/praetorian-inc/gato">Gato</a> capability.</p>



<p>After running this scanner for one day, it found a secret that could lead to a supply chain attack on GitHub CodeQL.</p>



<p>But first, I needed to see if the key was usable.</p>



<h2>Background</h2>



<p>CI/CD vulnerabilities sound complicated until you understand the terminology. Let’s catch you up.</p>



<p>GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows the execution of code specified within workflows as part of the CI/CD process. When you push code to a GitHub repository or create a pull request, GitHub Actions can automatically build, test, and deploy your code using workflows defined in YAML files.</p>



<p>For example, let’s say you are building a web application that is hosted in AWS. You can configure a GitHub Actions workflow so that whenever you push code to your repository, it is automatically tested and then deployed to AWS.</p>



<p><em>If you are new to GitHub Actions, we’d recommend reading through <a href="https://docs.github.com/en/actions/writing-workflows/quickstart" target="_blank" rel="noreferrer noopener">some examples</a>.</em></p>



<p><strong><em>Every workflow run generates a GITHUB_TOKEN</em></strong> — a special, automatically generated GitHub App installation token that allows the workflow to interact with the repository. This token’s permissions can be configured in the workflow file, at the repository level, or at the org level, determining what actions it can perform within the repository.</p>



<p>Put simply:</p>



<ul>
<li>GitHub workflows execute on GitHub runners (typically a VM or Docker containers).</li>



<li>GitHub runners need a way to authenticate to GitHub to do stuff the workflows tell them to do.</li>



<li>For that purpose, they use the GITHUB_TOKEN.</li>
</ul>



<p><br><strong>If the token has high privileges, then token compromise == bad.</strong></p>



<h3>What are Workflow Artifacts?</h3>



<p>We found the publicly exposed secret in a <a href="https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/storing-and-sharing-data-from-a-workflow" target="_blank" rel="noreferrer noopener">GitHub Actions workflow artifact</a>.</p>



<p>GitHub Actions workflows can upload workflow “artifacts” to GitHub Actions. Workflow artifacts can be any file and are saved by that workflow for later use. By default, artifacts are publicly accessible to anyone with read access to the repository and are stored for up to 90 days.</p>



<h3>And Finally, What is CodeQL?</h3>



<p><a href="https://codeql.github.com/" target="_blank" rel="noreferrer noopener">CodeQL</a> is GitHub’s Code Analysis Engine. The CodeQL actions perform static code analysis on GitHub repositories to try and identify vulnerabilities. They have found <a href="https://securitylab.github.com/codeql-wall-of-fame/" target="_blank" rel="noreferrer noopener">several hundred CVEs</a> over it’s lifetime, protecting organizations from breaches.</p>



<p>Security tools, like CodeQL, often need access to sensitive systems and data, making them an attractive target to an attacker.</p>



<p>If CodeQL was compromised, one of the most widely used security tools now becomes a backdoor.</p>



<h2>Finding the Token</h2>



<p>After running the Actions Artifact Secrets Scanner for a day, it picked up a token in a <a href="https://github.com/github/codeql-action">github/</a><a href="https://github.com/github/codeql-action" target="_blank" rel="noreferrer noopener">codeql-action</a> repository artifact published by <a href="https://github.com/github/codeql-action/actions/runs/12901573957">this </a><a href="https://github.com/github/codeql-action/actions/runs/12901573957" target="_blank" rel="noreferrer noopener">run</a>. The Actions Artifact Secrets Scanner downloaded the “my-debug-artifacts” zip uploaded by the “<a href="https://github.com/github/codeql-action/blob/f89b8a7d5239ba6d1a0f243ead94ea9ca5775ae1/.github/workflows/debug-artifacts-failure.yml">PR Check – Debug </a><a href="https://github.com/github/codeql-action/blob/f89b8a7d5239ba6d1a0f243ead94ea9ca5775ae1/.github/workflows/debug-artifacts-failure.yml" target="_blank" rel="noreferrer noopener">artifacts</a><a href="https://github.com/github/codeql-action/blob/f89b8a7d5239ba6d1a0f243ead94ea9ca5775ae1/.github/workflows/debug-artifacts-failure.yml"> after failure</a>” workflow, recursively extracted the “my-db-java-partial.zip” file stored inside, and ran Nosey Parker. Within seconds, Nosey Parker flagged a GitHub Token starting with “ghs_” in a crash report.</p>



<figure><picture fetchpriority="high" decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-1024x443.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-300x130.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-768x332.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56.png.webp 1072w" sizes="(max-width: 1024px) 100vw, 1024px">
<img fetchpriority="high" decoding="async" width="1024" height="443" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-1024x443.png" alt="Finding the Token" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-1024x443.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-300x130.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-768x332.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56.png 1072w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20443'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-1024x443.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-300x130.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-768x332.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56.png 1072w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.37.56-1024x443.png">
</picture>
</figure>



<p><em>Investigating manually, I confirmed this was a GitHub App token installation token stored in a file containing the environment variables of the GitHub Runner executing the workflow.</em></p>



<h2>Investigating Impact</h2>



<p>Secrets compromise is cool, but what can we do with this token? The impact of a compromised<br><em>GITHUB_TOKEN</em> is minimal if it only has read permissions.</p>



<p>The easiest way to determine the privileges of a <em>GITHUB_TOKEN</em> is to look at workflow logs. To investigate this, I navigated to the “Setup Job” step of the workflow that uploaded the token.</p>



<figure><picture decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-1024x857.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-300x251.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-768x643.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13.png.webp 1364w" sizes="(max-width: 1024px) 100vw, 1024px">
<img decoding="async" width="1024" height="857" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-1024x857.png" alt="Investigating Impact" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-1024x857.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-300x251.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-768x643.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13.png 1364w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20857'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-1024x857.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-300x251.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-768x643.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13.png 1364w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.42.13-1024x857.png">
</picture>
</figure>



<p><em><strong>The GitHub token had full write privileges.</strong></em></p>



<p>We could spend a lot of time talking about <a href="https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/controlling-permissions-for-github_token">each privilege</a>, but let’s focus on the ones that are particularly interesting.</p>



<p>Contents: write – Allows the token to create branches, create tags, and upload release artifacts.<br>Actions: write – Allows you to work with Actions, including trigger workflow_dispatch events.<br>Packages: write – Allows the token to upload packages.</p>



<p>With these privileges, an attacker has a lot of potential for repository tampering, but there is still one issue. These tokens are only valid for the duration of their specific workflow job. That means that once the job is over, the token is useless. Three things needed to happen for an attacker to be able to abuse this token:</p>



<ol>
<li>The token needs to have some sort of write privileges (already confirmed).</li>



<li>The token needs to use V4 of the upload artifact API, as that is the only version that allows you to retrieve an artifact before the job is complete (and after the job is complete, the token is invalid.)</li>



<li>The time between uploading the artifact and completing the job needs to be great enough for us to download, extract, and use the token.</li>
</ol>



<p>If all of these conditions are met, this publicly exposed token could be used to launch a full scale supply chain attack on CodeQL. This was like finding out that the security guard was accidentally leaving their master key in plain sight for a brief moment, over and over again.</p>



<p>We had to determine if the guard left us enough time to steal the key and use it before they returned to their post.</p>



<p>Let’s investigate further. Tick, tock.</p>



<h3>Determining the Artifact Upload Version</h3>



<p>Identifying the artifact upload version is typically straightforward. If a workflow uses<br>actions/upload-artifact@v4***, we can retrieve the artifact before job completion. If it uses an earlier version, we cannot do so.</p>



<p>In this case, CodeQL wasn’t using the <a href="https://github.com/actions/upload-artifact" target="_blank" rel="noreferrer noopener">actions/upload-artifact</a> action; they were manually using the upload artifact client in the source code. Code comments indicated it used version 4. That was enough for me to continue.</p>



<p>Now we needed to determine if the job lasted long enough for us to retrieve and use the token.</p>



<h3>Calculating our Execution Time</h3>



<p>Looking at the raw GitHub logs for this workflow, we can see two key timestamps:</p>



<figure><picture decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-1024x221.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-300x65.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-768x166.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08.png.webp 1350w" sizes="(max-width: 1024px) 100vw, 1024px">
<img decoding="async" width="1024" height="221" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-1024x221.png" alt="Calculating our Execution Time" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-1024x221.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-300x65.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-768x166.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08.png 1350w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20221'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-1024x221.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-300x65.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-768x166.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08.png 1350w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.43.08-1024x221.png">
</picture>
</figure>



<p>“Finalizing artifact upload” occurred at 17:22:09:888.</p>



<p>The final step in the job, “Cleaning up orphan processes”, happened at 17:22:10:911.</p>



<p>That means we had approximately 1.022 seconds to download the artifact, extract the GitHub token, and use it. I noticed the token stayed valid for about a second after the “Cleaning up orphan processes” step, so we’ll call it two seconds.</p>



<p>The guard was giving us two seconds to steal the key and use it before they returned.<br>Is that enough time for an attacker to use this token? Or is this another theoretical vulnerability?</p>



<h2>Start Your Engines</h2>



<p>To test this, I made a Python script <em>artifact_racer.py</em>. Artifact racer performs the following actions.</p>



<ol>
<li>Continuously queries the <em>github/codeql-action</em> GitHub repository until it sees a “PR Check – Debug artifacts after failure” workflow begin.</li>



<li>Monitors the running workflow for artifacts.</li>



<li>Once it sees a “PR Check – Debug artifacts after failure” workflow run, it downloads the artifact and extracts the <em>GITHUB_TOKEN</em>.
<ul>
<li>Shelling out for file operations and downloads was key to increasing the speed, although there are probably ways to make it even faster.</li>
</ul>
</li>



<li>Uses the <em>GITHUB_TOKEN</em> to make a new branch.</li>



<li>Use the <em>GITHUB_TOKEN</em> to push an empty file named <code>poc.txt</code> to that branch.</li>



<li><strong>Makes a new tag</strong> for that commit.</li>
</ol>



<p>If I could make a new branch, add a file, and create a tag for that commit, that would prove an attacker could use the token for nefarious purposes before it expired.</p>



<p>Given that the workflow artifact was only ~21MBs, I thought we had a chance. After successfully executing against a test repository, I moved on to the <a href="https://github.com/github/codeql-action">github/codeql-action</a> repository.</p>



<figure><img loading="lazy" decoding="async" width="1024" height="429" src="https://www.praetorian.com/wp-content/uploads/2025/03/image-11-1024x429.png" alt="" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/image-11-1024x429.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/image-11-300x126.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/image-11-768x322.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/image-11-1536x644.png 1536w, https://www.praetorian.com/wp-content/uploads/2025/03/image-11.png 1728w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20429'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/image-11-1024x429.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/image-11-300x126.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/image-11-768x322.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/image-11-1536x644.png 1536w, https://www.praetorian.com/wp-content/uploads/2025/03/image-11.png 1728w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/image-11-1024x429.png"></figure>







<h2>Executing the Proof of Concept</h2>



<p>I ran the racer.</p>



<p>And then I waited.</p>



<p>About two hours later, a “PR Check – Debug artifacts after failure” workflow executed. The racer successfully retrieved the <em>GITHUB_TOKEN</em>, created the branch, pushed the file, and added the tag.</p>



<figure><picture loading="lazy" decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-1024x586.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-300x172.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-768x440.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00.png.webp 1300w" sizes="(max-width: 1024px) 100vw, 1024px">
<img loading="lazy" decoding="async" width="1024" height="586" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-1024x586.png" alt="Executing the Proof of Concept" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-1024x586.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-300x172.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-768x440.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00.png 1300w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20586'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-1024x586.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-300x172.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-768x440.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00.png 1300w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.00-1024x586.png">
</picture>
</figure>



<p>Branch URL: <a href="https://github.com/github/codeql-action/tree/testpoc" target="_blank" rel="noreferrer noopener">https://github.com/github/codeql-action/tree/testpoc</a><br>Commit URL: <a href="https://github.com/github/codeql-action/commit/26fcd8e2368067be04a705a229590749a426fefe" target="_blank" rel="noreferrer noopener">https://github.com/github/codeql-action/commit/26fcd8e2368067be04a705a229590749a426fefe</a><br>Tag URL: <a href="https://github.com/github/codeql-action/releases/tag/testpoctag" target="_blank" rel="noreferrer noopener">https://github.com/github/codeql-action/releases/tag/testpoctag</a></p>



<figure><picture loading="lazy" decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-1024x516.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-300x151.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-768x387.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20.png.webp 1414w" sizes="(max-width: 1024px) 100vw, 1024px">
<img loading="lazy" decoding="async" width="1024" height="516" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-1024x516.png" alt="New tag created" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-1024x516.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-300x151.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-768x387.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20.png 1414w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20516'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-1024x516.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-300x151.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-768x387.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20.png 1414w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.45.20-1024x516.png">
</picture>
</figure>



<p><em>The ability to create a tag becomes very important in this attack. Keep that in mind as we go.</em></p>



<p>After confirming the <em>GITHUB_TOKEN</em> could be used within the short time window, we responsibly disclosed this vulnerability to GitHub.</p>



<h2>What if You’re Still Not Impressed?</h2>



<p><strong>Using the GITHUB_TOKEN, an attacker could add malicious code to any unprotected branch</strong>. A covert tactic would be to target feature branches pre-merge, smuggle in a small malicious code change, and wait for it to get merged. This would be especially effective due to how frequently the GitHub Actions bot commits to the CodeQL Actions repository.</p>



<p>They could also add tags that point to specific commits. For example, if they had malicious code on a branch and then added a v3 tag, anyone who manually used codeql-action…@v3 would execute the malicious code. <strong>More on this later</strong>.</p>



<p>Through code execution, you’d be able to compromise any GitHub Actions secret used within that job, as well as exfiltrate the source code of that repository. If their actions were executing on internal infrastructure, which is common with <a href="https://www.praetorian.com/blog/self-hosted-github-runners-are-backdoors/">self-hosted GitHub runners</a>, you’d also have code execution on their internal network or cloud environment.</p>



<p><strong>The impact from this attack would have been very similar to the recent tj-actions/changed-files supply chain attack.</strong></p>



<p><strong>T</strong>his impact is impressive, but it doesn’t quite live up to the claims I made in the beginning. Yes, through these paths, they could launch a supply chain attack against repos manually using the CodeQL actions. However, most organizations don’t include these actions manually. They just go into their repository settings, click “Enable CodeQL”, and go from there.</p>



<p>At first, I assumed that enabling CodeQL in your repository didn’t interact with the github/codeql-action repository at all.</p>



<p><strong><em>I was wrong.</em></strong></p>



<h2>Exponential Impact</h2>



<p>After discussing this issue with some colleagues, I decided to investigate further. What actually happens when you enable CodeQL?</p>



<p><strong>This section is key to understanding the full impact of this vulnerability.</strong> Stick with me.</p>



<p>To investigate, I created my own public repository, “John’s Top Secret Repo”, and enabled CodeQL.</p>



<p>After you enable CodeQL with the default settings, a special GitHub Actions workflow runs in your repository. This CodeQL action won’t show up in your repository workflows, but you can navigate to the workflow logs to see what it is doing.</p>



<figure><picture loading="lazy" decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-1024x422.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-300x124.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-768x317.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57.png.webp 1174w" sizes="(max-width: 1024px) 100vw, 1024px">
<img loading="lazy" decoding="async" width="1024" height="422" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-1024x422.png" alt="" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-1024x422.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-300x124.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-768x317.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57.png 1174w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20422'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-1024x422.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-300x124.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-768x317.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57.png 1174w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.46.57-1024x422.png">
</picture>
</figure>



<p><em>Enabling CodeQL in your repository settings.</em></p>



<figure><picture loading="lazy" decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-1024x522.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-300x153.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-768x391.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12.png.webp 1378w" sizes="(max-width: 1024px) 100vw, 1024px">
<img loading="lazy" decoding="async" width="1024" height="522" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-1024x522.png" alt="CodeQL Setup" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-1024x522.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-300x153.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-768x391.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12.png 1378w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20522'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-1024x522.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-300x153.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-768x391.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12.png 1378w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.12-1024x522.png">
</picture>
</figure>



<p><em>Observing the CodeQL workflow.</em></p>



<p>Based on my observations, CodeQL:</p>



<ol>
<li>Checks out your repository to the filesystem</li>



<li>Initializes CodeQL</li>



<li>Runs CodeQL scans</li>



<li>Uploads the scan results</li>
</ol>



<figure><picture loading="lazy" decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-1024x979.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-300x287.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-768x735.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31.png.webp 1240w" sizes="(max-width: 1024px) 100vw, 1024px">
<img loading="lazy" decoding="async" width="1024" height="979" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-1024x979.png" alt="CodeQL" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-1024x979.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-300x287.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-768x735.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31.png 1240w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20979'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-1024x979.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-300x287.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-768x735.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31.png 1240w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.31-1024x979.png">
</picture>
</figure>



<p>Let’s take a closer look at step 3.</p>



<figure><picture loading="lazy" decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-1024x230.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-300x67.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-768x173.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39.png.webp 1210w" sizes="(max-width: 1024px) 100vw, 1024px">
<img loading="lazy" decoding="async" width="1024" height="230" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-1024x230.png" alt="step 3." srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-1024x230.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-300x67.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-768x173.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39.png 1210w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20230'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-1024x230.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-300x67.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-768x173.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39.png 1210w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.47.39-1024x230.png">
</picture>
</figure>



<p>If this doesn’t shock you, look again. Remember that we have the ability to push tags to the <em>github/codeql-action</em> repository.</p>



<p>CodeQL, under the hood, is executing the actions in the <em>github/codeql-action</em> repository, using the commit referenced by the <em>v3</em> tag. This tag was not immutable, and they were not using <a href="https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions">workflow pinning</a> (which GitHub recommends), which meant that an attacker could overwrite the v3 tag using the compromised <em>GITHUB_TOKEN</em>. Now, if an attacker removed and then added a v3 tag to their malicious commit, every single repository using the default CodeQL workflow would execute their malicious code.</p>



<figure><picture loading="lazy" decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-1024x237.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-300x69.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-768x178.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37.png.webp 1194w" sizes="(max-width: 1024px) 100vw, 1024px">
<img loading="lazy" decoding="async" width="1024" height="237" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-1024x237.png" alt="CodeQL" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-1024x237.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-300x69.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-768x178.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37.png 1194w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20237'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-1024x237.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-300x69.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-768x178.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37.png 1194w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-04-17.48.37-1024x237.png">
</picture>
</figure>



<p><em>The Action created when selecting “Advanced CodeQL” also used the reusable github/codeql-action with the v3 tag.</em></p>



<p>The CodeQL actions check out the source code of every repository they run on, which means that a malicious CodeQL action could exfiltrate the source code of any repository using default CodeQL configurations.</p>



<p>This would result in significant disclosure of intellectual property. And if you’ve ever operated on a Red Team, you know how many hardcoded secrets are lying around in private source code repositories.</p>



<h2>But Wait, There’s More</h2>



<p>We’re almost done. But remember, I promised one more thing:</p>



<p><em>4. Compromise GitHub Actions secrets of any workflow using the GitHub Actions Cache within a repo that uses CodeQL</em></p>



<p>When assessing the impact of CI/CD attack paths, I look for ways to compromise GitHub Actions secrets. Usually, those secrets are where the crown jewels live.</p>



<p>If the CodeQL action is executing with write privileges or alongside GitHub Actions secrets, then it’s trivial to use the code execution to exfiltrate those secrets. But the default CodeQL action uses a <em>GITHUB_TOKEN</em> that only has read privileges, so you can’t perform repository write operations, backdoor releases, or use fancy workflow dispatch events to steal secrets, <a href="https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch/">like what happened with</a><a href="https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch/" target="_blank" rel="noreferrer noopener"> </a><a href="https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch/">PyTorch</a>.</p>



<p>What the default CodeQL action <em>does</em> do is execute in the main branch of the repository. The main branch of any GitHub repository can write cache entries that will be used by the entire repo. This opens up an opportunity to conduct <strong>GitHub Actions cache poisoning</strong>.</p>



<p>GitHub Actions Cache Poisoning is thoroughly explained <a href="https://adnanthekhan.com/2024/05/06/the-monsters-in-your-build-cache-github-actions-cache-poisoning/">in this </a><a href="https://adnanthekhan.com/2024/05/06/the-monsters-in-your-build-cache-github-actions-cache-poisoning/" target="_blank" rel="noreferrer noopener">article</a> by Adnan Khan, which documents the discovery and exploitation of cache poisoning. The easiest way to conduct GitHub Actions cache poisoning is by deploying <a href="https://github.com/AdnaneKhan/Cacheract" target="_blank" rel="noreferrer noopener">Cacheract</a>, malware that persists in a build pipeline through cache poisoning.</p>



<p>If an attacker deployed Cacheract in the CodeQL workflow, it would:</p>



<ol>
<li>Predict cache entries</li>



<li>Overwrite these entries with a malicious action</li>



<li>Gain code execution within any workflow that uses <code>action-cache</code> (the Actions Cache is used by most repositories)</li>



<li><strong>Leverage code execution to compromise GitHub Actions secrets used by those workflows, capture privileged GITHUB_TOKENs, and more</strong></li>
</ol>



<p>Even if someone noticed the malicious CodeQL action and remediated the vulnerability, Cacheract would continue poisoning caches.</p>



<p>I spent ten minutes looking for prominent repos that use CodeQL &amp; actions/cache and identified<br><a href="https://github.com/Homebrew/brew" target="_blank" rel="noreferrer noopener">Homebrew</a>, <a href="https://github.com/angular/angular" target="_blank" rel="noreferrer noopener">Angular</a>, and <a href="https://github.com/grafana/grafana" target="_blank" rel="noreferrer noopener">Grafana</a>.</p>



<p>Cache poisoning would allow an attacker to leverage this CodeQL supply chain attack to gain write access to repositories and repository secrets.</p>



<h2>Congratulations, You Made It</h2>



<p>We’ve now hit all the impact highlights I mentioned at the beginning:</p>



<ol>
<li>Compromise intellectual property by exfiltrating the source code of all private repositories using CodeQL.</li>



<li>Steal credentials within GitHub Actions secrets of any workflow job using CodeQL, and leverage those secrets to execute further supply chain attacks.</li>



<li>Execute code on internal infrastructure running CodeQL workflows.</li>



<li>Compromise GitHub Actions secrets of any workflow using the GitHub Actions Cache within a repo that uses CodeQL.</li>
</ol>



<figure><picture loading="lazy" decoding="async">
<source type="image/webp" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-1024x351.png.webp 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-300x103.png.webp 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-768x263.png.webp 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-1536x526.png.webp 1536w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-2048x701.png.webp 2048w" sizes="(max-width: 1024px) 100vw, 1024px">
<img loading="lazy" decoding="async" width="1024" height="351" src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-1024x351.png" alt="Congratulations, You Made It" srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-1024x351.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-300x103.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-768x263.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-1536x526.png 1536w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-2048x701.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201024%20351'%3E%3C/svg%3E" data-lazy-srcset="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-1024x351.png 1024w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-300x103.png 300w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-768x263.png 768w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-1536x526.png 1536w, https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-2048x701.png 2048w" data-lazy-src="https://www.praetorian.com/wp-content/uploads/2025/03/Box-Notes-Image-2025-02-15-11.23.53-1024x351.png">
</picture>
</figure>



<p>Supply chain attacks like these are scary, especially when they start with something as simple as a publicly exposed credential. If this is your first time hearing about abusing GitHub Actions to launch supply chain attacks, I’ll let you in on a secret: <a href="https://www.praetorian.com/blog/tensorflow-supply-chain-compromise-via-self-hosted-runner-attack/">these vulnerabilities</a> <a href="https://www.praetorian.com/blog/compromising-bytedances-rspack-github-actions-vulnerabilities/">occur</a> <a href="https://johnstawinski.com/2024/01/05/worse-than-solarwinds-three-steps-to-hack-blockchains-github-and-ml-through-github-actions/">all </a><a href="https://johnstawinski.com/2024/01/05/worse-than-solarwinds-three-steps-to-hack-blockchains-github-and-ml-through-github-actions/" target="_blank" rel="noreferrer noopener">the</a><a href="https://johnstawinski.com/2024/01/05/worse-than-solarwinds-three-steps-to-hack-blockchains-github-and-ml-through-github-actions/"> time</a>.</p>



<p>GitHub Actions abuse has been around for several years, but it is still one of the highest-impact, least-understood vulnerability classes. That is slowly starting to change (emphasis on ~slowly~). The DevOps and security communities need to commit to learning about these vulnerabilities to protect their organizations from risk. Vulnerabilities like this, and the recent tj-actions/changed-files supply chain attack, are starting to bring these issues to the public spotlight. That is why we invest in research to uncover these vulnerabilities and design solutions to prevent them.</p>



<h2>CVE-2025-24362</h2>



<p>A side-effect of this disclosure was <a href="https://github.com/advisories/GHSA-vqf5-2xx6-9wfm">CVE-2025-24362</a>. The publicly exposed <em>GITHUB_TOKEN</em> was within a debug artifact uploaded by the CodeQL Action after a failed code scanning workflow. The CodeQL Actions repository was intentionally triggering this failure, but other users of CodeQL Actions could have exposed their own secrets as environment variables to the workflow, had their workflows experienced a similar failure.</p>



<p><strong>This issue was fixed in CodeQL Action version 3.28.3.</strong></p>



<p>Even though this disclosure resulted in a CVE, the highest potential impact still lies in exploiting that vulnerability against the CodeQL Actions repository and launching a supply chain attack against CodeQL users.</p>



<h2>Remediation</h2>



<p>GitHub had one of the most rapid and impressive remediation responses we have ever seen.</p>



<p>Jan 22, 2025, 3:13 PM UTC: Report Submitted to GitHub<br>Jan 22, 2025, 5:48 PM UTC: GitHub acknowledged receipt of the submission<br>Jan 22, 2025, 6:28 PM UTC: GitHub confirmed the vulnerability, temporarily disabled the “PR Check – Debug artifacts after failure” workflow, and submitted <a href="https://github.com/github/codeql-action/pull/2712">this PR</a> to disable debug artifacts upload. This occurred just three hours after submitting the report, which is a very rapid resolution time.<br>Jan 24, 2025: GitHub assigned <a href="https://hackerone.com/hacktivity/cve_discovery?id=CVE-2025-24362" target="_blank" rel="noreferrer noopener">CVE-2025-24362</a> and published this <a href="https://github.com/advisories/GHSA-vqf5-2xx6-9wfm" target="_blank" rel="noreferrer noopener">security advisory</a>, which notes they found no evidence of compromise to its platform or systems.</p>



<p>If you are concerned about you’re own GitHub Actions workflow artifacts, you can take the following steps to limit the risk of secrets exposure:</p>



<ul>
<li>ideally, only upload specific files or directories as workflow artifacts</li>



<li>avoid uploading artifacts containing environment variables, the <code>.git/config</code> file, or any files in the runner’s <code>&lt;path_to_runner_dir&gt;/_work/_temp/</code> directory</li>



<li>limit GITHUB_TOKEN permissions to read-only</li>



<li>scan artifacts for secrets prior to uploading</li>
</ul>



<p>To learn more about this vulnerability, how I discovered it, and how you can detect similar vulnerabilities in your own environment, <a href="https://www.praetorian.com/resources/unpacking-codeqleaked-a-potential-supply-chain-attack-on-github-codeql/">please join me for a webinar</a> on April 10 at 1pm ET.</p>



<h2>How Can Praetorian Help</h2>



<p>Praetorian has been leading the charge in offensive CI/CD security for several years, inventing novel <a href="https://github.com/praetorian-inc/gato" target="_blank" rel="noreferrer noopener">tooling</a> and giving presentations at Black Hat, DEF CON, Schmoocon, and Black Hat Arsenal.</p>



<p>Our <strong><a href="https://www.praetorian.com/continuous-threat-exposure-management/">Continuous Threat Exposure Management (CTEM)</a></strong> platform, Chariot, can identify vulnerabilities like this in your attack surface before the attackers do.</p>



<p>Our CI/CD Security Assessments can take an in-depth look at your internal CI/CD security posture, enumerating attack paths that an attacker would exploit to go from low-privileged access to complete organization compromise.</p>



<p>The next major supply chain attack could start with something as simple as a publicly exposed secret. Help make sure that doesn’t happen by learning about CI/CD vulnerabilities and implementing continuous controls to protect your organization from compromise.</p>



<p><strong>You can <a href="http://future.chariot.praetorian.com/">create a free</a> Chariot account anytime. Alternatively, if you’re interested in our managed Chariot offering, <a href="https://www.praetorian.com/contact-us/">reach out to speak with our team</a>.</strong></p>




				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FBI raids home of prominent computer scientist who has gone incommunicado (441 pts)]]></title>
            <link>https://arstechnica.com/security/2025/03/computer-scientist-goes-silent-after-fbi-raid-and-purging-from-university-website/</link>
            <guid>43527001</guid>
            <pubDate>Sun, 30 Mar 2025 19:50:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/security/2025/03/computer-scientist-goes-silent-after-fbi-raid-and-purging-from-university-website/">https://arstechnica.com/security/2025/03/computer-scientist-goes-silent-after-fbi-raid-and-purging-from-university-website/</a>, See on <a href="https://news.ycombinator.com/item?id=43527001">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                      
                      
          <p>A prominent computer scientist who has spent 20 years publishing academic papers on cryptography, privacy, and cybersecurity has gone incommunicado, had his professor profile, email account, and phone number removed by his employer Indiana University, and had his homes raided by the FBI. No one knows why.</p>
<p>Xiaofeng Wang has a long list of prestigious titles. He was the associate dean for research at Indiana University's <a href="https://luddy.indiana.edu/">Luddy School of Informatics, Computing and Engineering</a>, a fellow at the Institute of Electrical and Electronics Engineers and the American Association for the Advancement of Science, and a tenured professor at Indiana University at Bloomington. According to his employer, he has served as principal investigator on research projects totaling nearly $23 million over his 21 years there.</p>
<p>He has also co-authored scores of academic papers on a diverse range of research fields, including cryptography, systems security, and data privacy, including the protection of human genomic data. I have personally spoken to him on three occasions for articles <a href="https://arstechnica.com/information-technology/2015/06/serious-ios-bug-makes-it-easy-to-steal-users-icloud-passwords/">here</a>, <a href="https://arstechnica.com/information-technology/2013/08/ios-and-android-weaknesses-allow-stealthy-pilfering-of-website-credentials/">here</a>, and <a href="https://arstechnica.com/information-technology/2012/03/flawed-sign-in-services-from-google-and-facebook-imperil-user-acconts/">here</a>.</p>
<h2>"None of this is in any way normal"</h2>
<p>In recent weeks, Wang's email account, phone number, and <a href="https://web.archive.org/web/20241205182256/https://cs.indiana.edu/contact/profile/?XiaoFeng_Wang">profile page</a> at the Luddy School were quietly erased by his employer. Over the same time, Indiana University also removed a profile for his wife, <a href="https://libraries.indiana.edu/nianli-ma">Nianli Ma</a>, who was listed as a Lead Systems Analyst and Programmer at the university's Library Technologies division.</p>
<p><a href="https://www.heraldtimesonline.com/story/news/local/2025/03/28/fbi-department-of-homeland-security-agents-search-house-in-bloomington-indiana/82710451007/">According to</a> the Herald-Times in Bloomington, a small fleet of unmarked cars driven by government agents descended on the Bloomington home of Wang and Ma on Friday. They spent most of the day going in and out of the house and occasionally transferred boxes from their vehicles. TV station WTHR, meanwhile, <a href="https://www.wthr.com/article/news/local/fbi-searches-home-in-carmel-indiana-seizes-boxes-of-evidence/531-969e30e2-e599-4c08-b72c-3ba6227cdb89">reported</a> that a second home owned by Wang and Ma and located in Carmel, Indiana, was also searched. The station said that both a resident and an attorney for the resident were on scene during at least part of the search.</p>

          
                      
                  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Met Police smash down door of Quaker meeting house to arrest activists (136 pts)]]></title>
            <link>https://www.thetimes.com/uk/society/article/met-smash-down-door-of-quaker-meeting-house-to-arrest-activists-jhhchrtlt</link>
            <guid>43525909</guid>
            <pubDate>Sun, 30 Mar 2025 17:33:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thetimes.com/uk/society/article/met-smash-down-door-of-quaker-meeting-house-to-arrest-activists-jhhchrtlt">https://www.thetimes.com/uk/society/article/met-smash-down-door-of-quaker-meeting-house-to-arrest-activists-jhhchrtlt</a>, See on <a href="https://news.ycombinator.com/item?id=43525909">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>More than 20 Metropolitan Police officers broke down the front door of a Quaker meeting house to arrest six women who had met to discuss climate change and Gaza.</p><p>It is thought to be the first time in the history of the famously ­pacifist Quakers that police have forced their way into one of their places of worship.</p><p>The women, aged between 18 and 38, were sitting in a circle eating hummus and bread sticks on Thursday evening as part of a ­“welcome meeting” for Youth Demand, which calls itself a non-violent protest group.</p><p>The <a href="https://www.thetimes.com/topic/police">police</a>, some armed with Tasers, handcuffed the women, confiscated their belongings, took them to the police station and later raided some of their student accommodation.</p><p>A Met spokesman said</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Blue95: a desktop for your childhood home's computer room (331 pts)]]></title>
            <link>https://github.com/winblues/blue95</link>
            <guid>43524937</guid>
            <pubDate>Sun, 30 Mar 2025 15:30:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/winblues/blue95">https://github.com/winblues/blue95</a>, See on <a href="https://news.ycombinator.com/item?id=43524937">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">
<blockquote>
<p dir="auto">A desktop for your childhood home's computer room.</p>
</blockquote>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b28273683cb8bd83979141fb1ccc1465b08175d51ad4dfad6d383d7954b8cef3/68747470733a2f2f626c756539352e6e656f6369746965732e6f72672f73637265656e73686f742d77696e616d702e706e67"><img src="https://camo.githubusercontent.com/b28273683cb8bd83979141fb1ccc1465b08175d51ad4dfad6d383d7954b8cef3/68747470733a2f2f626c756539352e6e656f6369746965732e6f72672f73637265656e73686f742d77696e616d702e706e67" alt="main-screenshot" data-canonical-src="https://blue95.neocities.org/screenshot-winamp.png"></a></p>
<p dir="auto">Blue95 is a modern and lightweight desktop experience that is reminiscent of a bygone era of computing.
Based on Fedora Atomic Xfce with the <a href="https://github.com/grassmunk/Chicago95">Chicago95</a> theme.</p>
<p dir="auto">For more screenshots, see <a href="https://github.com/ledif/blue95/blob/main/docs/screenshots.md">screenshots.md</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Try It Out</h2><a id="user-content-try-it-out" aria-label="Permalink: Try It Out" href="#try-it-out"></a></p>
<div dir="auto"><p dir="auto">Note</p><p dir="auto">Live CD is a new feature and is still in testing.</p>
</div>
<p dir="auto">We are now creating a <a href="https://pub-969fbc86b5f24e4d81c6d022e8fd8dde.r2.dev/blue95-live-latest.iso" rel="nofollow">Live ISO</a> that can be used to boot into a Blue95 live environment. Test it out without needing to install anything.</p>
<p dir="auto">Note that the included installer is an alpha version and it is recommended to instead install Blue95 via the other methods listed below.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">From ISO</h3><a id="user-content-from-iso" aria-label="Permalink: From ISO" href="#from-iso"></a></p>
<p dir="auto">We are currently having issues with our installer ISOs. The current recommended installation path is though rebasing from a different Fedora Atomic desktop, preferably from an Xfce-based image such as <a href="https://github.com/winblues/vauxite">winblues/vauxite</a>.</p>
<p dir="auto">After installing vauixite, you can rebase directly to this image with:</p>
<div data-snippet-clipboard-copy-content="rpm-ostree rebase ostree-image-signed:docker://ghcr.io/winblues/blue95:latest"><pre><code>rpm-ostree rebase ostree-image-signed:docker://ghcr.io/winblues/blue95:latest
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">From Other Atomic Desktops</h3><a id="user-content-from-other-atomic-desktops" aria-label="Permalink: From Other Atomic Desktops" href="#from-other-atomic-desktops"></a></p>
<p dir="auto">If you are currently using an atomic desktop, you can rebase to the latest blue95 image.</p>
<ul dir="auto">
<li>First rebase to the unsigned image, to get the proper signing keys and policies installed:
<div data-snippet-clipboard-copy-content="rpm-ostree rebase ostree-unverified-registry:ghcr.io/winblues/blue95:latest"><pre><code>rpm-ostree rebase ostree-unverified-registry:ghcr.io/winblues/blue95:latest
</code></pre></div>
</li>
<li>Reboot and then rebase to the signed image, like so:
<div data-snippet-clipboard-copy-content="rpm-ostree rebase ostree-image-signed:docker://ghcr.io/winblues/blue95:latest"><pre><code>rpm-ostree rebase ostree-image-signed:docker://ghcr.io/winblues/blue95:latest
</code></pre></div>
</li>
</ul>
<p dir="auto">It is recommended to create a new user after rebasing.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Project Goals</h2><a id="user-content-project-goals" aria-label="Permalink: Project Goals" href="#project-goals"></a></p>
<ul dir="auto">
<li>Match upstream Fedora Xfce in terms of core system components and update schedule.</li>
<li>Pull in tweaks from <a href="https://github.com/ublue-os">Universal Blue</a> (e.g. codecs, automatic updates, etc) to produce a more usable out-of-the box experience.</li>
<li>Provide an aesthetic rooted in a bygone era of computing.</li>
</ul>
<p dir="auto"><strong>Non goals</strong>:</p>
<ul dir="auto">
<li>Faithful reproduction of design elements from decades old operating systems. Whenever usability and exact replication are at odds, usability and accessibility will generally be preferred.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Shoutouts</h2><a id="user-content-shoutouts" aria-label="Permalink: Shoutouts" href="#shoutouts"></a></p>
<ul dir="auto">
<li><a href="https://github.com/grassmunk">@grassmunk</a>/<a href="https://github.com/dominichayesferen">@dominichayesferen</a> for <a href="https://github.com/grassmunk/Chicago95">Chicago95</a> and <a href="https://github.com/dominichayesferen/Chicagofier">Chicagofier</a> respectively</li>
<li><a href="https://github.com/blue-build">BlueBuild</a>, <a href="https://github.com/ublue-os">Universal Blue</a> and <a href="https://fedoraproject.org/" rel="nofollow">Fedora</a></li>
<li>The <a href="https://www.xfce.org/" rel="nofollow">Xfce</a> team</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Span<T>.SequenceEquals is faster than memcmp (104 pts)]]></title>
            <link>https://richardcocks.github.io/2025-03-30-FasterThanMemCmp.html</link>
            <guid>43524665</guid>
            <pubDate>Sun, 30 Mar 2025 14:53:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://richardcocks.github.io/2025-03-30-FasterThanMemCmp.html">https://richardcocks.github.io/2025-03-30-FasterThanMemCmp.html</a>, See on <a href="https://news.ycombinator.com/item?id=43524665">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      <h2><a href="https://richardcocks.github.io/">richardcocks</a></h2>
      

      <h2 id="whats-faster-than-memcmp">2025-03-30 What's faster than Memcmp?</h2>
<p>In this post I look at improvements in .NET and using Span<t> for performance and portability.</t></p>
<p>I was examining portability issues in a code base that I wanted to migrate from .NET framework 4.8.1 to .NET8. I discovered use of <code>msvcrt.dll</code>. I quickly established it is a <a href="https://stackoverflow.com/a/1445405/1635976">popular stackoverflow answer</a> for a fast way to compare byte arrays in .NET</p>
<p>The answer as provided, and faithfully copied into codebases, is this:</p>
<div><pre><code><span>[</span><span>DllImport</span><span>(</span><span>"msvcrt.dll"</span><span>,</span> <span>CallingConvention</span><span>=</span><span>CallingConvention</span><span>.</span><span>Cdecl</span><span>)]</span>
<span>static</span> <span>extern</span> <span>int</span> <span>memcmp</span><span>(</span><span>byte</span><span>[]</span> <span>b1</span><span>,</span> <span>byte</span><span>[]</span> <span>b2</span><span>,</span> <span>long</span> <span>count</span><span>);</span>

<span>static</span> <span>bool</span> <span>ByteArrayCompare</span><span>(</span><span>byte</span><span>[]</span> <span>b1</span><span>,</span> <span>byte</span><span>[]</span> <span>b2</span><span>)</span>
<span>{</span>
    <span>// Validate buffers are the same length.</span>
    <span>// This also ensures that the count does not exceed the length of either buffer.  </span>
    <span>return</span> <span>b1</span><span>.</span><span>Length</span> <span>==</span> <span>b2</span><span>.</span><span>Length</span> <span>&amp;&amp;</span> <span>memcmp</span><span>(</span><span>b1</span><span>,</span> <span>b2</span><span>,</span> <span>b1</span><span>.</span><span>Length</span><span>)</span> <span>==</span> <span>0</span><span>;</span>
<span>}</span>
</code></pre></div>
<p>A big performance improvement in modern .NET is the <code>Span&lt;T&gt;</code> type. The documentation describes it as:</p>
<blockquote>
<p>Provides a type-safe and memory-safe representation of a contiguous region of arbitrary memory.</p>
</blockquote>
<p>That's not a super helpful description, but the summary is that it's stack-allocated rather than heap allocated.</p>
<p><code>Span&lt;T&gt;</code> has an extension method <code>SequenceEqual&lt;T&gt;(this ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;T&gt; other)</code>, and we'll see how it fares.</p>
<div><pre><code>    <span>public</span> <span>static</span> <span>bool</span> <span>EqualsSpan</span><span>(</span><span>ReadOnlySpan</span><span>&lt;</span><span>byte</span><span>&gt;</span> <span>b1</span><span>,</span> <span>ReadOnlySpan</span><span>&lt;</span><span>byte</span><span>&gt;</span> <span>b2</span><span>)</span>
    <span>{</span>
        <span>return</span> <span>b1</span><span>.</span><span>SequenceEqual</span><span>(</span><span>b2</span><span>);</span>
    <span>}</span>
</code></pre></div>
<p>Let's see how it stacks up against a couple of naive implementations, a <code>for</code> loop and using <code>Enumerable.SequenceEquals</code>:</p>
<div><pre><code>    <span>public</span> <span>static</span> <span>bool</span> <span>EqualsLoop</span><span>(</span><span>byte</span><span>[]</span> <span>b1</span><span>,</span> <span>byte</span><span>[]</span> <span>b2</span><span>)</span>
    <span>{</span>

        <span>if</span> <span>(</span><span>b1</span><span>.</span><span>Length</span> <span>!=</span> <span>b2</span><span>.</span><span>Length</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
        <span>for</span> <span>(</span><span>int</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>b1</span><span>.</span><span>Length</span><span>;</span> <span>i</span><span>++)</span>
        <span>{</span>
            <span>if</span> <span>(</span><span>b1</span><span>[</span><span>i</span><span>]</span> <span>!=</span> <span>b2</span><span>[</span><span>i</span><span>])</span> <span>return</span> <span>false</span><span>;</span>
        <span>}</span>

        <span>return</span> <span>true</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>bool</span> <span>EqualsSequenceEqual</span><span>(</span><span>byte</span><span>[]</span> <span>b1</span><span>,</span> <span>byte</span><span>[]</span> <span>b2</span><span>)</span>
    <span>{</span>
        <span>return</span> <span>b1</span><span>.</span><span>SequenceEqual</span><span>(</span><span>b2</span><span>);</span>
    <span>}</span>
</code></pre></div>
<p>We compare using two identical arrays since this is typically the worst-case for equality checking, and we're going to benchmark on a range of array sizes: 10 bytes, 1KB, 1MB and 1GB.</p>
<div><pre><code>    <span>[</span><span>Params</span><span>(</span><span>10</span><span>,</span> <span>1</span><span>_024</span><span>,</span> <span>1</span><span>_048_576</span><span>,</span> <span>1073741824</span><span>)]</span>
    <span>public</span> <span>int</span> <span>Length</span> <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>byte</span><span>[]</span> <span>first</span><span>;</span>
    <span>byte</span><span>[]</span> <span>second</span><span>;</span>

    <span>[</span><span>GlobalSetup</span><span>]</span>
    <span>public</span> <span>void</span> <span>Setup</span><span>()</span>
    <span>{</span>
        <span>var</span> <span>r</span> <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>0</span><span>);</span>

        <span>first</span> <span>=</span> <span>new</span> <span>byte</span><span>[</span><span>Length</span><span>];</span>
        <span>second</span> <span>=</span> <span>new</span> <span>byte</span><span>[</span><span>Length</span><span>];</span>

        <span>r</span><span>.</span><span>NextBytes</span><span>(</span><span>first</span><span>);</span>
        <span>Array</span><span>.</span><span>Copy</span><span>(</span><span>first</span><span>,</span> <span>second</span><span>,</span> <span>Length</span><span>);</span>
    <span>}</span>
</code></pre></div>
<p>The setup is straightforward, we fill the first array with random data, and copy the data to the second array.</p>
<h2 id="results">Results</h2>
<p><img src="https://richardcocks.github.io/assets/img/1_dotnet_framework.png" alt="Benchmark results graph" title="Lower is better"></p>
<pre><code>BenchmarkDotNet v0.14.0, Windows 10 (10.0.19045.5679/22H2/2022Update)
AMD Ryzen 7 3800X, 1 CPU, 16 logical and 8 physical cores
.NET SDK 10.0.100-preview.2.25164.34
  [Host]               : .NET 9.0.3 (9.0.325.11113), X64 RyuJIT AVX2
  .NET 8.0             : .NET 8.0.14 (8.0.1425.11118), X64 RyuJIT AVX2
  .NET 9.0             : .NET 9.0.3 (9.0.325.11113), X64 RyuJIT AVX2
  .NET Framework 4.8.1 : .NET Framework 4.8.1 (4.8.9290.0), X64 RyuJIT VectorSize=256

</code></pre><table>
<thead>
<tr>
<th>Method</th>
<th>Job</th>
<th>Runtime</th>
<th>Length</th>
<th>Mean</th>
<th>Ratio</th>
<th>RatioSD</th>
<th>Allocated</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>MemCmp</strong></td>
<td><strong>.NET 8.0</strong></td>
<td><strong>.NET 8.0</strong></td>
<td><strong>10</strong></td>
<td><strong>7.957 ns</strong></td>
<td><strong>0.65</strong></td>
<td><strong>0.01</strong></td>
<td><strong>-</strong></td>
</tr>
<tr>
<td>MemCmp</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>10</td>
<td>7.877 ns</td>
<td>0.64</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td>MemCmp</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>10</td>
<td>12.239 ns</td>
<td>1.00</td>
<td>0.02</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Loop</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>10</td>
<td>4.390 ns</td>
<td>0.88</td>
<td>0.03</td>
<td>-</td>
</tr>
<tr>
<td>Loop</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>10</td>
<td>6.439 ns</td>
<td>1.29</td>
<td>0.05</td>
<td>-</td>
</tr>
<tr>
<td>Loop</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>10</td>
<td>4.995 ns</td>
<td>1.00</td>
<td>0.03</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>10</td>
<td>21.341 ns</td>
<td>0.15</td>
<td>0.00</td>
<td>-</td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>10</td>
<td>7.611 ns</td>
<td>0.05</td>
<td>0.00</td>
<td>-</td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>10</td>
<td>139.476 ns</td>
<td>1.00</td>
<td>0.02</td>
<td>64 B</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Span</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>10</td>
<td>2.394 ns</td>
<td>0.21</td>
<td>0.00</td>
<td>-</td>
</tr>
<tr>
<td>Span</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>10</td>
<td>1.624 ns</td>
<td>0.14</td>
<td>0.00</td>
<td>-</td>
</tr>
<tr>
<td>Span</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>10</td>
<td>11.523 ns</td>
<td>1.00</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>MemCmp</strong></td>
<td><strong>.NET 8.0</strong></td>
<td><strong>.NET 8.0</strong></td>
<td><strong>1024</strong></td>
<td><strong>36.745 ns</strong></td>
<td><strong>0.89</strong></td>
<td><strong>0.01</strong></td>
<td><strong>-</strong></td>
</tr>
<tr>
<td>MemCmp</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1024</td>
<td>36.317 ns</td>
<td>0.88</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td>MemCmp</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1024</td>
<td>41.452 ns</td>
<td>1.00</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Loop</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>1024</td>
<td>247.326 ns</td>
<td>0.66</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td>Loop</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1024</td>
<td>246.738 ns</td>
<td>0.66</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td>Loop</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1024</td>
<td>372.410 ns</td>
<td>1.00</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>1024</td>
<td>32.069 ns</td>
<td>0.003</td>
<td>0.00</td>
<td>-</td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1024</td>
<td>21.439 ns</td>
<td>0.002</td>
<td>0.00</td>
<td>-</td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1024</td>
<td>9,542.293 ns</td>
<td>1.000</td>
<td>0.02</td>
<td>64 B</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Span</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>1024</td>
<td>12.408 ns</td>
<td>0.51</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td>Span</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1024</td>
<td>12.310 ns</td>
<td>0.51</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td>Span</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1024</td>
<td>24.117 ns</td>
<td>1.00</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>MemCmp</strong></td>
<td><strong>.NET 8.0</strong></td>
<td><strong>.NET 8.0</strong></td>
<td><strong>1048576</strong></td>
<td><strong>31,477.776 ns</strong></td>
<td><strong>0.99</strong></td>
<td><strong>0.02</strong></td>
<td><strong>-</strong></td>
</tr>
<tr>
<td>MemCmp</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1048576</td>
<td>31,790.009 ns</td>
<td>1.00</td>
<td>0.02</td>
<td>-</td>
</tr>
<tr>
<td>MemCmp</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1048576</td>
<td>31,693.469 ns</td>
<td>1.00</td>
<td>0.02</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Loop</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>1048576</td>
<td>247,350.116 ns</td>
<td>0.65</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td>Loop</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1048576</td>
<td>251,317.223 ns</td>
<td>0.66</td>
<td>0.02</td>
<td>-</td>
</tr>
<tr>
<td>Loop</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1048576</td>
<td>379,628.993 ns</td>
<td>1.00</td>
<td>0.02</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>1048576</td>
<td>20,974.963 ns</td>
<td>0.002</td>
<td>0.00</td>
<td>-</td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1048576</td>
<td>20,615.505 ns</td>
<td>0.002</td>
<td>0.00</td>
<td>-</td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1048576</td>
<td>9,744,674.688 ns</td>
<td>1.000</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Span</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>1048576</td>
<td>20,955.331 ns</td>
<td>0.99</td>
<td>0.02</td>
<td>-</td>
</tr>
<tr>
<td>Span</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1048576</td>
<td>20,598.672 ns</td>
<td>0.97</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td>Span</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1048576</td>
<td>21,176.643 ns</td>
<td>1.00</td>
<td>0.02</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>MemCmp</strong></td>
<td><strong>.NET 8.0</strong></td>
<td><strong>.NET 8.0</strong></td>
<td><strong>1073741824</strong></td>
<td><strong>111,762,734.375 ns</strong></td>
<td><strong>1.04</strong></td>
<td><strong>0.03</strong></td>
<td><strong>80 B</strong></td>
</tr>
<tr>
<td>MemCmp</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1073741824</td>
<td>110,374,794.400 ns</td>
<td>1.03</td>
<td>0.03</td>
<td>80 B</td>
</tr>
<tr>
<td>MemCmp</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1073741824</td>
<td>107,072,063.077 ns</td>
<td>1.00</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Loop</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>1073741824</td>
<td>280,450,679.167 ns</td>
<td>0.69</td>
<td>0.02</td>
<td>200 B</td>
</tr>
<tr>
<td>Loop</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1073741824</td>
<td>523,091,792.857 ns</td>
<td>1.29</td>
<td>0.02</td>
<td>400 B</td>
</tr>
<tr>
<td>Loop</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1073741824</td>
<td>404,927,735.714 ns</td>
<td>1.00</td>
<td>0.01</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>1073741824</td>
<td>95,954,794.298 ns</td>
<td>0.010</td>
<td>0.00</td>
<td>67 B</td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1073741824</td>
<td>94,486,122.500 ns</td>
<td>0.010</td>
<td>0.00</td>
<td>80 B</td>
</tr>
<tr>
<td>SequenceEqual</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1073741824</td>
<td>9,944,911,760.000 ns</td>
<td>1.000</td>
<td>0.00</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Span</td>
<td>.NET 8.0</td>
<td>.NET 8.0</td>
<td>1073741824</td>
<td>92,945,091.026 ns</td>
<td>0.97</td>
<td>0.01</td>
<td>67 B</td>
</tr>
<tr>
<td>Span</td>
<td>.NET 9.0</td>
<td>.NET 9.0</td>
<td>1073741824</td>
<td>94,375,230.882 ns</td>
<td>0.99</td>
<td>0.03</td>
<td>67 B</td>
</tr>
<tr>
<td>Span</td>
<td>.NET Framework 4.8.1</td>
<td>.NET Framework 4.8.1</td>
<td>1073741824</td>
<td>95,817,247.619 ns</td>
<td>1.00</td>
<td>0.02</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>The first notable result is that for very small arrays, the overhead of calling <code>memcmp</code>  is a waste compared to a naive loop. In .NET Framework, the loop is overall fastest for 10 element arrays. This is not unexpected, but it's important to note; don't try to optimise if you actually have small arrays. The loop does not scale well at all however, and that advantage has completely disappeared by just 1000 elements.</p>
<p>The more biggest difference is between .NET framework and .NET 8. Even the loop is notably faster in .NET 8. There is a bizarre performance regression from .NET 8 to .NET 9 for 1GB arrays, which I will investigate separately to try to confirm that result, it may have been a glitch in the benchmark, given twice the memory allocations and twice the time taken.</p>
<p>When we look at <code>IEnumerable&lt;T&gt;.SequenceEqual</code>, it is <strong>500 times faster for our 1MB array in .NET 8 than in .NET framework</strong>. In .NET8 and .NET9, <code>IEnumerable&lt;T&gt;.SequenceEqual</code> is faster than the version of memcmp I have on my machine.</p>
<p>There wasn't a significant difference between <code>ReadOnlySpan&lt;T&gt;.SequenceEqual</code> and <code>IEnumerable&lt;T&gt;.SequenceEqual</code>, with the difference around the margin of error.</p>
<p><code>memcmp</code> is still a little slower than <code>SequenceEqual</code> across the board. It's still very fast, much faster than naive methods, but it's clearly no longer necessary for achieving high performance for array comparisons. When the original stackoverflow answer was written, there was nothing available in .NET that could come close to that performance, as it was before <code>Span&lt;T&gt;</code> was added to the runtime.</p>
<p>A benefit of the <code>ReadOnlySpan&lt;T&gt;</code> implementation over using <code>IEnumerable&lt;T&gt;.SequenceEqual</code> is that we can also trust that it still perform acceptably when we target .NET Framework.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you're using .NET 8 and don't need to run in the .NET Framework runtime, don't write your own utility function and just use <code>IEnumerable&lt;T&gt;.SequenceEqual</code>, it's incredibly fast and doesn't need any external dependencies to just work.</p>
<p>If you're on .NET Framework, then bring in <code>System.Memory</code> and use <code>Span&lt;T&gt;.SequenceEquals</code> instead of relying on external C libraries. Make sure any calls to <code>IEnumerable&lt;T&gt;.SequenceEquals</code> are checked to make sure they aren't operating on large arrays.</p>
<h2 id="other-considerations">Other considerations</h2>
<p>If you regularly need to compare very large arrays and they are append-only and/or are compared more often than constructed, then it may make sense to avoid the comparison entirely by using a data structure that includes and maintains an order-sensitive hash of its contents. Most negative cases can be discounted through a hash comparison before doing the more expensive array comparison. Rebuilding this hash could be expensive for arrays that shuffle or remove items however.</p>
<h2 id="source-code">Source Code</h2>
<p>The source code to generate these results is available at <a href="https://github.com/richardcocks/memcomparison/">https://github.com/richardcocks/memcomparison/</a> .</p>
<p>Pull requests always welcome.</p>


      
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Hacker Laws (117 pts)]]></title>
            <link>https://hacker-laws.com/</link>
            <guid>43523974</guid>
            <pubDate>Sun, 30 Mar 2025 13:21:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hacker-laws.com/">https://hacker-laws.com/</a>, See on <a href="https://news.ycombinator.com/item?id=43523974">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      <p>Laws, Theories, Principles and Patterns that developers will find useful.</p>
    </div><div>
      <!-- Quick links. -->
      <ul>
<li>📖 Check out my new book <a href="https://effective-shell/">Effective Shell</a> on <a href="https://amzn.to/4ho0F91">Amazon</a></li>
<li>🌍 Try <a href="https://hacker-laws.com/">hacker-laws.com</a></li>
<li>🧠 Experiment with my new project <a href="https://github.com/dwmkerr/terminal-ai">Terminal AI</a></li>
<li>☕️ Like this project? Consider <a href="https://github.com/sponsors/dwmkerr?frequency=one-time">buying me a coffee with a one-off donation</a></li>
<li>🎧 Listen to the podcast <a href="https://changelog.com/podcast/403">The Changelog - Laws for Hackers to Live By</a></li>
<li>📖 Download the <a href="https://github.com/dwmkerr/hacker-laws/releases/latest/download/hacker-laws.pd">PDF eBook</a></li>
</ul>
      <hr>
      <!-- The table of contents. -->
      <div>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#laws">Laws</a><ul>
<li><a href="#9091-principle-1-rule">90–9–1 Principle (1% Rule)</a></li>
<li><a href="#9090-rule">90–90 Rule</a></li>
<li><a href="#amdahls-law">Amdahl's Law</a></li>
<li><a href="#the-broken-windows-theory">The Broken Windows Theory</a></li>
<li><a href="#brooks-law">Brooks' Law</a></li>
<li><a href="#cap-theorem-brewers-theorem">CAP Theorem (Brewer's Theorem)</a></li>
<li><a href="#clarkes-three-laws">Clarke's three laws</a></li>
<li><a href="#conways-law">Conway's Law</a></li>
<li><a href="#cunninghams-law">Cunningham's Law</a></li>
<li><a href="#dunbars-number">Dunbar's Number</a></li>
<li><a href="#the-dunning-kruger-effect">The Dunning-Kruger Effect</a></li>
<li><a href="#fitts-law">Fitts' Law</a></li>
<li><a href="#galls-law">Gall's Law</a></li>
<li><a href="#goodharts-law">Goodhart's Law</a></li>
<li><a href="#hanlons-razor">Hanlon's Razor</a></li>
<li><a href="#hicks-law-hick-hyman-law">Hick's Law (Hick-Hyman Law)</a></li>
<li><a href="#hofstadters-law">Hofstadter's Law</a></li>
<li><a href="#hutbers-law">Hutber's Law</a></li>
<li><a href="#the-hype-cycle-amaras-law">The Hype Cycle &amp; Amara's Law</a></li>
<li><a href="#hyrums-law-the-law-of-implicit-interfaces">Hyrum's Law (The Law of Implicit Interfaces)</a></li>
<li><a href="#input-process-output-ipo">Input-Process-Output (IPO)</a></li>
<li><a href="#kernighans-law">Kernighan's Law</a></li>
<li><a href="#linuss-law">Linus's Law</a></li>
<li><a href="#metcalfes-law">Metcalfe's Law</a></li>
<li><a href="#moores-law">Moore's Law</a></li>
<li><a href="#murphys-law-sods-law">Murphy's Law / Sod's Law</a></li>
<li><a href="#occams-razor">Occam's Razor</a></li>
<li><a href="#parkinsons-law">Parkinson's Law</a></li>
<li><a href="#premature-optimization-effect">Premature Optimization Effect</a></li>
<li><a href="#putts-law">Putt's Law</a></li>
<li><a href="#reeds-law">Reed's Law</a></li>
<li><a href="#the-bitter-lesson">The Bitter Lesson</a></li>
<li><a href="#the-ringelmann-effect">The Ringelmann Effect</a></li>
<li><a href="#the-law-of-conservation-of-complexity-teslers-law">The Law of Conservation of Complexity (Tesler's Law)</a></li>
<li><a href="#the-law-of-demeter">The Law of Demeter</a></li>
<li><a href="#the-law-of-leaky-abstractions">The Law of Leaky Abstractions</a></li>
<li><a href="#the-law-of-the-instrument">The Law of the Instrument</a></li>
<li><a href="#the-law-of-triviality">The Law of Triviality</a></li>
<li><a href="#the-unix-philosophy">The Unix Philosophy</a></li>
<li><a href="#the-scout-rule">The Scout Rule</a></li>
<li><a href="#the-spotify-model">The Spotify Model</a></li>
<li><a href="#the-two-pizza-rule">The Two Pizza Rule</a></li>
<li><a href="#twymans-law">Twyman's law</a></li>
<li><a href="#wadlers-law">Wadler's Law</a></li>
<li><a href="#wheatons-law">Wheaton's Law</a></li>
</ul>
</li>
<li><a href="#principles">Principles</a><ul>
<li><a href="#all-models-are-wrong-george-boxs-law">All Models Are Wrong (George Box's Law)</a></li>
<li><a href="#chestertons-fence">Chesterton's Fence</a></li>
<li><a href="#kerckhoffss-principle">Kerckhoffs's principle</a></li>
<li><a href="#the-dead-sea-effect">The Dead Sea Effect</a></li>
<li><a href="#the-dilbert-principle">The Dilbert Principle</a></li>
<li><a href="#the-pareto-principle-the-8020-rule">The Pareto Principle (The 80/20 Rule)</a></li>
<li><a href="#the-shirky-principle">The Shirky Principle</a></li>
<li><a href="#the-peter-principle">The Peter Principle</a></li>
<li><a href="#the-robustness-principle-postels-law">The Robustness Principle (Postel's Law)</a></li>
<li><a href="#solid">SOLID</a></li>
<li><a href="#the-single-responsibility-principle">The Single Responsibility Principle</a></li>
<li><a href="#the-openclosed-principle">The Open/Closed Principle</a></li>
<li><a href="#the-liskov-substitution-principle">The Liskov Substitution Principle</a></li>
<li><a href="#the-interface-segregation-principle">The Interface Segregation Principle</a></li>
<li><a href="#the-dependency-inversion-principle">The Dependency Inversion Principle</a></li>
<li><a href="#the-dry-principle">The DRY Principle</a></li>
<li><a href="#the-kiss-principle">The KISS principle</a></li>
<li><a href="#yagni">YAGNI</a></li>
<li><a href="#the-fallacies-of-distributed-computing">The Fallacies of Distributed Computing</a></li>
<li><a href="#the-principle-of-least-astonishment">The Principle of Least Astonishment</a></li>
</ul>
</li>
<li><a href="#reading-list">Reading List</a></li>
<li><a href="#online-resources">Online Resources</a></li>
<li><a href="#pdf-ebook">PDF eBook</a></li>
<li><a href="#podcast">Podcast</a></li>
<li><a href="#translations">Translations</a></li>
<li><a href="#related-projects">Related Projects</a></li>
<li><a href="#contributing">Contributing</a></li>
<li><a href="#todo">TODO</a></li>
</ul>
</div>

      <hr>

      <!-- Each of the sections - most of which are laws. -->
      
      <section id="introduction">
        <h2 id="introduction">Introduction</h2>
<p>There are lots of laws which people discuss when talking about development. This repository is a reference and overview of some of the most common ones. Please share and submit PRs!</p>
<p>❗: This repo contains an explanation of some laws, principles and patterns, but does not <em>advocate</em> for any of them. Whether they should be applied will always be a matter of debate, and greatly dependent on what you are working on.</p>
        
      </section>
      
      <section id="laws">
        <h2 id="laws">Laws</h2>
<p>Laws can be opinions on inevitabilities in the world of software engineering, or wry observations on unavoidable realities.</p>
        
      </section>
      
      <section id="90–9–1-principle-(1%-rule)">
        <h2 id="9091-principle-1-rule">90–9–1 Principle (1% Rule)</h2>
<p><a href="https://en.wikipedia.org/wiki/1%25_rule_(Internet_culture)">1% Rule on Wikipedia</a></p>
<p>The 90-9-1 principle suggests that within an internet community such as a wiki, 90% of participants only consume content, 9% edit or modify content and 1% of participants add content.</p>
<p>Real-world examples:</p>
<ul>
<li>A 2014 study of four digital health social networks found the top 1% created 73% of posts, the next 9% accounted for an average of ~25% and the remaining 90% accounted for an average of 2% (<a href="https://www.jmir.org/2014/2/e33/">Reference</a>)</li>
</ul>
<p>See Also:</p>
<ul>
<li><a href="#the-pareto-principle-the-8020-rule">Pareto principle</a></li>
</ul>
        
      </section>
      
      <section id="90–90-rule">
        <h2 id="9090-rule">90–90 Rule</h2>
<p><a href="https://en.wikipedia.org/wiki/Ninety%E2%80%93ninety_rule">90-90 Rule on Wikipedia</a></p>
<blockquote>
<p>The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time.</p>
</blockquote>
<p>A wry reinterpretation of the <a href="#the-pareto-principle-the-8020-rule">Pareto Principe (or 80-20 rule)</a> that highlights the real-world challenges of completing engineering work. This sentiment is also echoed in <a href="#hofstadters-law">Hofstadter's Law</a>.</p>
<p>See also:</p>
<ul>
<li><a href="#hofstadters-law">Hofstadter's Law</a></li>
<li><a href="#the-pareto-principle-the-8020-rule">The Pareto Principe</a></li>
</ul>
        
      </section>
      
      <section id="amdahl's-law">
        <h2 id="amdahls-law">Amdahl's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Amdahl%27s_law">Amdahl's Law on Wikipedia</a></p>
<blockquote>
<p>Amdahl's Law is a formula which shows the <em>potential speedup</em> of a computational task which can be achieved by increasing the resources of a system. Normally used in parallel computing, it can predict the actual benefit of increasing the number of processors, which is limited by the parallelisability of the program.</p>
</blockquote>
<p>Best illustrated with an example. If a program is made up of two parts, part A, which must be executed by a single processor, and part B, which can be parallelised, then we see that adding multiple processors to the system executing the program can only have a limited benefit. It can potentially greatly improve the speed of part B - but the speed of part A will remain unchanged.</p>
<p>The diagram below shows some examples of potential improvements in speed:</p>
<p><img width="480px" alt="Diagram: Amdahl's Law" src="https://hacker-laws.com/images/amdahls_law.png"></p>
<p><em>(Image Reference: By Daniels219 at English Wikipedia, Creative Commons Attribution-Share Alike 3.0 Unported, https://en.wikipedia.org/wiki/File:AmdahlsLaw.svg)</em></p>
<p>As can be seen, even a program which is 50% parallelisable will benefit very little beyond 10 processing units, whereas a program which is 95% parallelisable can still achieve significant speed improvements with over a thousand processing units.</p>
<p>As <a href="#moores-law">Moore's Law</a> slows, and the acceleration of individual processor speed slows, parallelisation is key to improving performance. Graphics programming is an excellent example - with modern Shader based computing, individual pixels or fragments can be rendered in parallel - this is why modern graphics cards often have many thousands of processing cores (GPUs or Shader Units).</p>
<p>See also:</p>
<ul>
<li><a href="#brooks-law">Brooks' Law</a></li>
<li><a href="#moores-law">Moore's Law</a></li>
</ul>
        
      </section>
      
      <section id="the-broken-windows-theory">
        <h2 id="the-broken-windows-theory">The Broken Windows Theory</h2>
<p><a href="https://en.wikipedia.org/wiki/Broken_windows_theory">The Broken Windows Theory on Wikipedia</a></p>
<p>The Broken Windows Theory suggests that visible signs of crime (or lack of care of an environment) lead to further and more serious crimes (or further deterioration of the environment).</p>
<p>This theory has been applied to software development, suggesting that poor quality code (or <a href="#TODO">Technical Debt</a>) can lead to a perception that efforts to improve quality may be ignored or undervalued, thus leading to further poor quality code. This effect cascades leading to a great decrease in quality over time.</p>
<p>See also:</p>
<ul>
<li><a href="#TODO">Technical Debt</a></li>
</ul>
<p>Examples:</p>
<ul>
<li><a href="https://flylib.com/books/en/1.315.1.15/1/">The Pragmatic Programming: Software Entropy</a></li>
<li><a href="https://blog.codinghorror.com/the-broken-window-theory/">Coding Horror: The Broken Window Theory</a></li>
<li><a href="https://opensourceforu.com/2011/05/joy-of-programming-broken-window-theory/">OpenSource: Joy of Programming - The Broken Window Theory</a></li>
</ul>
        
      </section>
      
      <section id="brooks'-law">
        <h2 id="brooks-law">Brooks' Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Brooks%27s_law">Brooks' Law on Wikipedia</a></p>
<blockquote>
<p>Adding human resources to a late software development project makes it later.</p>
</blockquote>
<p>This law suggests that in many cases, attempting to accelerate the delivery of a project which is already late, by adding more people, will make the delivery even later. Brooks is clear that this is an over-simplification, however, the general reasoning is that given the ramp-up time of new resources and the communication overheads, in the immediate short-term velocity decreases. Also, many tasks may not be divisible, i.e. easily distributed between more resources, meaning the potential velocity increase is also lower.</p>
<p>The common phrase in delivery "Nine women can't make a baby in one month" relates to Brooks' Law, in particular, the fact that some kinds of work are not divisible or parallelisable.</p>
<p>This is a central theme of the book '<a href="#reading-list">The Mythical Man Month</a>'.</p>
<p>See also:</p>
<ul>
<li><a href="#todo">Death March</a></li>
<li><a href="#reading-list">Reading List: The Mythical Man Month</a></li>
</ul>
        
      </section>
      
      <section id="cap-theorem-(brewer's-theorem)">
        <h2 id="cap-theorem-brewers-theorem">CAP Theorem (Brewer's Theorem)</h2>
<p>The CAP Theorem (defined by Eric Brewer) states that for a distributed data store only two out of the following three guarantees (at most) can be made:</p>
<ul>
<li>Consistency: when reading data, every request receives the <em>most recent</em> data or an error is returned</li>
<li>Availability: when reading data, every request receives <em>a non error response</em>, without the guarantee that it is the <em>most recent</em> data</li>
<li>Partition Tolerance: when an arbitrary number of network requests between nodes fail, the system continues to operate as expected</li>
</ul>
<p>The core of the reasoning is as follows. It is impossible to guarantee that a network partition will not occur (see <a href="#the-fallacies-of-distributed-computing">The Fallacies of Distributed Computing</a>). Therefore in the case of a partition we can either cancel the operation (increasing consistency and decreasing availability) or proceed (increasing availability but decreasing consistency).</p>
<p>The name comes from the first letters of the guarantees (Consistency, Availability, Partition Tolerance). Note that it is very important to be aware that this does <em>not</em> relate to <a href="#TODO"><em>ACID</em></a>, which has a different definition of consistency. More recently, <a href="#TODO">PACELC</a> theorem has been developed which adds constraints for latency and consistency when the network is <em>not</em> partitioned (i.e. when the system is operating as expected).</p>
<p>Most modern database platforms acknowledge this theorem implicitly by offering the user of the database the option to choose between whether they want a highly available operation (which might include a 'dirty read') or a highly consistent operation (for example a 'quorum acknowledged write').</p>
<p>Real world examples:</p>
<ul>
<li><a href="https://cloud.google.com/blog/products/gcp/inside-cloud-spanner-and-the-cap-theorem">Inside Google Cloud Spanner and the CAP Theorem</a> - Goes into the details of how Cloud Spanner works, which appears at first to seem like a platform which has <em>all</em> of the guarantees of CAP, but under the hood is essentially a CP system.</li>
</ul>
<p>See also:</p>
<ul>
<li><a href="#TODO">ACID</a></li>
<li><a href="#the-fallacies-of-distributed-computing">The Fallacies of Distributed Computing</a></li>
<li><a href="#TODO">PACELC</a></li>
</ul>
        
      </section>
      
      <section id="clarke's-three-laws">
        <h2 id="clarkes-three-laws">Clarke's three laws</h2>
<p><a href="https://en.wikipedia.org/wiki/Clarke's_three_laws">Clarke's three laws on Wikipedia</a></p>
<p>Arthur C. Clarke, an british science fiction writer, formulated three adages that are known as Clarke's three laws. The third law is the best known and most widely cited.  </p>
<p>These so-called laws are:<br>
- When a distinguished but elderly scientist states that something is possible, they are almost certainly right. When they state that something is impossible, they are very probably wrong.
- The only way of discovering the limits of the possible is to venture a little way past them into the impossible.
- Any sufficiently advanced technology is indistinguishable from magic.</p>
        
      </section>
      
      <section id="conway's-law">
        <h2 id="conways-law">Conway's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law on Wikipedia</a></p>
<p>This law suggests that the technical boundaries of a system will reflect the structure of the organisation. It is commonly referred to when looking at organisation improvements, Conway's Law suggests that if an organisation is structured into many small, disconnected units, the software it produces will be. If an organisation is built more around 'verticals' which are oriented around features or services, the software systems will also reflect this.</p>
<p>See also:</p>
<ul>
<li><a href="#the-spotify-model">The Spotify Model</a></li>
</ul>
        
      </section>
      
      <section id="cunningham's-law">
        <h2 id="cunninghams-law">Cunningham's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Ward_Cunningham#Cunningham's_Law">Cunningham's Law on Wikipedia</a></p>
<blockquote>
<p>The best way to get the right answer on the Internet is not to ask a question, it's to post the wrong answer.</p>
</blockquote>
<p>According to Steven McGeady, Ward Cunningham advised him in the early 1980s: "The best way to get the right answer on the Internet is not to ask a question, it's to post the wrong answer." McGeady dubbed this Cunningham's law, though Cunningham denies ownership calling it a "misquote." Although originally referring to interactions on Usenet, the law has been used to describe how other online communities work (e.g., Wikipedia, Reddit, Twitter, Facebook).</p>
<p>See also:</p>
<ul>
<li><a href="https://xkcd.com/386/">XKCD 386: "Duty Calls"</a></li>
</ul>
        
      </section>
      
      <section id="dunbar's-number">
        <h2 id="dunbars-number">Dunbar's Number</h2>
<p><a href="https://en.wikipedia.org/wiki/Dunbar%27s_number">Dunbar's Number on Wikipedia</a></p>
<p>"Dunbar's number is a suggested cognitive limit to the number of people with whom one can maintain stable social relationships— relationships in which an individual knows who each person is and how each person relates to every other person." There is some disagreement to the exact number. "... [Dunbar] proposed that humans can comfortably maintain only 150 stable relationships." He put the number into a more social context, "the number of people you would not feel embarrassed about joining uninvited for a drink if you happened to bump into them in a bar." Estimates for the number generally lay between 100 and 250.</p>
<p>Like stable relationships between individuals, a developer's relationship with a codebase takes effort to maintain. When faced with large complicated projects, or ownership of many projects, we lean on convention, policy, and modeled procedure to scale. Dunbar's number is not only important to keep in mind as an office grows, but also when setting the scope for team efforts or deciding when a system should invest in tooling to assist in modeling and automating logistical overhead. Putting the number into an engineering context, it is the number of projects (or normalized complexity of a single project) for which you would feel confident in joining an on-call rotation to support.</p>
<p>See also:</p>
<ul>
<li><a href="#conways-law">Conway's Law</a></li>
</ul>
        
      </section>
      
      <section id="the-dunning-kruger-effect">
        <h2 id="the-dunning-kruger-effect">The Dunning-Kruger Effect</h2>
<p><a href="https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect">The Dunning-Kruger Effect on Wikipedia</a></p>
<blockquote>
<p>If you're incompetent, you can't know you're incompetent... The skills you need to produce a right answer are exactly the skills you need to recognize what a right answer is.</p>
<p>(<a href="https://en.wikipedia.org/wiki/David_Dunning">David Dunning</a>)</p>
</blockquote>
<p>The Dunning–Kruger effect is a theoretical cognitive bias which was described by David Dunning and Justin Kruger in a 1999 psychological study and paper. The study suggests that people with a low level of ability at a task are likely to overestimate their ability of the task. The proposed reason for this bias is that a sufficient <em>awareness</em> of the complexity of a problem or domain is required for a person to be able to make an informed opinion of their capability to work in that domain.</p>
<p>The Dunning-Kruger effect has sometimes been used to describe a related, but not necessarily implied effect which could be described as "The less a person understands a domain, the more they are likely to believe they can easily solve problems in that domain, as they are more likely to see the domain as <em>simple</em>". This more general effect is highly relevant in technology. It would suggest that people who are less familiar with a domain, such as non-technical team members or less experienced team members, are more likely to <em>underestimate</em> the effort required to solve a problem in this space.</p>
<p>As a person's understanding and experience in a domain grows, they may well encounter another effect, which is that they tend to <em>overestimate</em> the ability of <em>others</em> or <em>underestimate</em> their own ability, as they are have become so experienced in the domain. In all cases these effects are <em>cognitive biases</em>. As with any bias, an understanding that it may be present will often be sufficient to help avoid the challenges — as when there is awareness of a bias, more inputs and opinions can be included to attempt to eliminate these biases. A closely related bias is that of <a href="https://en.wikipedia.org/wiki/Illusory_superiority">Illusory superiority</a>.</p>
<p>Real-world examples:</p>
<ul>
<li><a href="https://fortune.com/2016/03/10/apple-fbi-lindsay-graham/">Apple vs. FBI: Why This Anti-Terror Hawk Switched Sides</a> - In 2016 Senator Lindsey Graham changed his stance on Apple creating a 'backdoor' in their encryption of devices. Initially Graham had been critical of Apple challenging a request to create a 'backdoor', which he saw as necessary to investigate potential terrorist plots. However, by Graham's own admission, as he learned more about the technical complexity of the domain, he realised that he had assumed it to be far more simple than he had realised, and that such a backdoor could have serious negative consequences. This could potentially be considered an example of the Dunning-Kruger effect - a cyber-security expert would likely understand immediately how such a backdoor could be exploited, as they have deep understanding of the domain, a layperson might assume that phone security is more similar to <em>physical security</em> where the practice of having a 'master key' for law enforcement is possible, but this analogy does not apply sufficiently well to describe modern encryption in cyber-security. </li>
</ul>
        
      </section>
      
      <section id="fitts'-law">
        <h2 id="fitts-law">Fitts' Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Fitts%27s_law">Fitts' Law on Wikipedia</a></p>
<p>Fitts' law predicts that the time required to move to a target area is a function of the distance to the target divided by the width of the target.</p>
<p><img width="300px" alt="Diagram: Fitts Law" src="https://hacker-laws.com/images/Fitts_Law.svg"></p>
<p><em>(Image Reference: By Foobar628 at English Wikipedia, Creative Commons Attribution-Share Alike 3.0 Unported, https://en.wikipedia.org/wiki/Fitts%27s_law#/media/File:Fitts_Law.svg)</em></p>
<p>The consequences of this law dictate that when designing UX or UI, interactive elements should be as large as possible and the distance between the users attention area and interactive element should be as small as possible. This has consequences on design, such as grouping tasks that are commonly used with one another close.</p>
<p>It also formalises the concept of 'magic corners', the corners of the screen to which a user can 'sweep' their mouse to easily hit - which is where key UI elements can be placed. The Windows Start button is in a magic corner, making it easy to select, and as an interesting contrast, the MacOS 'close window' button is <em>not</em> in a magic corner, making it hard to hit by mistake.</p>
<p>See also:</p>
<ul>
<li><a href="https://www.semanticscholar.org/paper/The-information-capacity-of-the-human-motor-system-Fitts/634c9fde5f1c411e4487658ac738dcf18d98ea8d">The information capacity of the human motor system in controlling the amplitude of movement.</a></li>
</ul>
        
      </section>
      
      <section id="gall's-law">
        <h2 id="galls-law">Gall's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/John_Gall_(author)#Gall's_law">Gall's Law on Wikipedia</a></p>
<blockquote>
<p>A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system.</p>
<p>(<a href="https://en.wikipedia.org/wiki/John_Gall_(author)">John Gall</a>)</p>
</blockquote>
<p>Gall's Law implies that attempts to <em>design</em> highly complex systems are likely to fail. Highly complex systems are rarely built in one go, but evolve instead from more simple systems.</p>
<p>The classic example is the world-wide-web. In its current state, it is a highly complex system. However, it was defined initially as a simple way to share content between academic institutions. It was very successful in meeting these goals and evolved to become more complex over time.</p>
<p>See also:</p>
<ul>
<li><a href="#the-kiss-principle">KISS (Keep It Simple, Stupid)</a></li>
</ul>
        
      </section>
      
      <section id="goodhart's-law">
        <h2 id="goodharts-law">Goodhart's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Goodhart's_law">The Goodhart's Law on Wikipedia</a></p>
<blockquote>
<p>Any observed statistical regularity will tend to collapse once pressure is placed upon it for control purposes.</p>
<p><em>Charles Goodhart</em></p>
</blockquote>
<p>Also commonly referenced as:</p>
<blockquote>
<p>When a measure becomes a target, it ceases to be a good measure.</p>
<p><em>Marilyn Strathern</em></p>
</blockquote>
<p>The law states that the measure-driven optimizations could lead to devaluation of the measurement outcome itself. Overly selective set of measures (<a href="https://en.wikipedia.org/wiki/Performance_indicator">KPIs</a>) blindly applied to a process results in distorted effect. People tend to optimize locally by "gaming" the system in order to satisfy particular metrics instead of paying attention to holistic outcome of their actions.</p>
<p>Real-world examples:
- Assert-free tests satisfy the code coverage expectation, despite the fact that the metric intent was to create well-tested software.
- Developer performance score indicated by the number of lines committed leads to unjustifiably bloated codebase.</p>
<p>See also:
- <a href="https://coffeeandjunk.com/goodharts-campbells-law/">Goodhart’s Law: How Measuring The Wrong Things Drive Immoral Behaviour</a>
- <a href="https://dilbert.com/strip/1995-11-13">Dilbert on bug-free software</a></p>
        
      </section>
      
      <section id="hanlon's-razor">
        <h2 id="hanlons-razor">Hanlon's Razor</h2>
<p><a href="https://en.wikipedia.org/wiki/Hanlon%27s_razor">Hanlon's Razor on Wikipedia</a></p>
<blockquote>
<p>Never attribute to malice that which is adequately explained by stupidity.</p>
<p>Robert J. Hanlon</p>
</blockquote>
<p>This principle suggests that actions resulting in a negative outcome were not a result of ill will. Instead the negative outcome is more likely attributed to those actions and/or the impact being not fully understood.</p>
        
      </section>
      
      <section id="hick's-law-(hick-hyman-law)">
        <h2 id="hicks-law-hick-hyman-law">Hick's Law (Hick-Hyman Law)</h2>
<p><a href="https://en.wikipedia.org/wiki/Hick%27s_law">Hick's law on Wikipedia</a></p>
<blockquote>
<p>Decision time grows logarithmically with the number of options you can choose from.</p>
<p>William Edmund Hick and Ray Hyman</p>
</blockquote>
<p>In the equation below, <code>T</code> is the time to make a decision, <code>n</code> is the number of options, and <code>b</code> is a constant which is determined by analysis of the data.</p>
<p><img alt="Hicks law" src="https://hacker-laws.com/images/hicks_law.svg"></p>
<p><em>(Image Reference: Creative Commons Attribution-Share Alike 3.0 Unported, https://en.wikipedia.org/wiki/Hick%27s_law)</em></p>
<p>This law only applies when the number of options is <em>ordered</em>, for example, alphabetically. This is implied in the base two logarithm - which implies the decision maker is essentially performing a <em>binary search</em>. If the options are not well ordered, experiments show the time taken is linear.</p>
<p>This is has significant impact in UI design; ensuring that users can easily search through options leads to faster decision making.</p>
<p>A correlation has also been shown in Hick's Law between IQ and reaction time as shown in <a href="https://www.sciencedirect.com/science/article/pii/S0022440599000369">Speed of Information Processing: Developmental Change and Links to Intelligence</a>.</p>
<p>See also:
- <a href="#fitts-law">Fitts's Law</a></p>
        
      </section>
      
      <section id="hofstadter's-law">
        <h2 id="hofstadters-law">Hofstadter's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Hofstadter%27s_law">Hofstadter's Law on Wikipedia</a></p>
<blockquote>
<p>It always takes longer than you expect, even when you take into account Hofstadter's Law.</p>
<p>(Douglas Hofstadter)</p>
</blockquote>
<p>You might hear this law referred to when looking at estimates for how long something will take. It seems a truism in software development that we tend to not be very good at accurately estimating how long something will take to deliver.</p>
<p>This is from the book '<a href="#reading-list">Gödel, Escher, Bach: An Eternal Golden Braid</a>'.</p>
<p>See also:</p>
<ul>
<li><a href="#reading-list">Reading List: Gödel, Escher, Bach: An Eternal Golden Braid</a></li>
</ul>
        
      </section>
      
      <section id="hutber's-law">
        <h2 id="hutbers-law">Hutber's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Hutber%27s_law">Hutber's Law on Wikipedia</a></p>
<blockquote>
<p>Improvement means deterioration.</p>
<p>(<a href="https://en.wikipedia.org/wiki/Patrick_Hutber">Patrick Hutber</a>)</p>
</blockquote>
<p>This law suggests that improvements to a system will lead to deterioration in other parts, or it will hide other deterioration, leading overall to a degradation from the current state of the system.</p>
<p>For example, a decrease in response latency for a particular end-point could cause increased throughput and capacity issues further along in a request flow, affecting an entirely different sub-system.</p>
        
      </section>
      
      <section id="the-hype-cycle-&amp;-amara's-law">
        <h2 id="the-hype-cycle-amaras-law">The Hype Cycle &amp; Amara's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Hype_cycle">The Hype Cycle on Wikipedia</a></p>
<blockquote>
<p>We tend to overestimate the effect of a technology in the short run and underestimate the effect in the long run.</p>
<p>(Roy Amara)</p>
</blockquote>
<p>The Hype Cycle is a visual representation of the excitement and development of technology over time, originally produced by Gartner. It is best shown with a visual:</p>
<p><img alt="The Hype Cycle" src="https://hacker-laws.com/images/gartner_hype_cycle.png"></p>
<p><em>(Image Reference: By Jeremykemp at English Wikipedia, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=10547051)</em></p>
<p>In short, this cycle suggests that there is typically a burst of excitement around new technology and its potential impact. Teams often jump into these technologies quickly, and sometimes find themselves disappointed with the results. This might be because the technology is not yet mature enough, or real-world applications are not yet fully realised. After a certain amount of time, the capabilities of the technology increase and practical opportunities to use it increase, and teams can finally become productive. Roy Amara's quote sums this up most succinctly - "We tend to overestimate the effect of a technology in the short run and underestimate in the long run".</p>
        
      </section>
      
      <section id="hyrum's-law-(the-law-of-implicit-interfaces)">
        <h2 id="hyrums-law-the-law-of-implicit-interfaces">Hyrum's Law (The Law of Implicit Interfaces)</h2>
<p><a href="http://www.hyrumslaw.com/">Hyrum's Law Online</a></p>
<blockquote>
<p>With a sufficient number of users of an API,
it does not matter what you promise in the contract:
all observable behaviours of your system
will be depended on by somebody.</p>
<p>(Hyrum Wright)</p>
</blockquote>
<p>Hyrum's Law states that when you have a <em>large enough number of consumers</em> of an API, all behaviours of the API (even those not defined as part of a public contract) will eventually come to be depended on by someone. A trivial example may be non-functional elements such as the response time of an API. A more subtle example might be consumers who are relying on applying a regex to an error message to determine the <em>type</em> of error of an API. Even if the public contract of the API states nothing about the contents of the message, indicating users should use an associated error code, <em>some</em> users may use the message, and changing the message essentially breaks the API for those users.</p>
<p>See also:</p>
<ul>
<li><a href="#the-law-of-leaky-abstractions">The Law of Leaky Abstractions</a></li>
<li><a href="https://xkcd.com/1172/">XKCD 1172</a></li>
</ul>
        
      </section>
      
      <section id="input-process-output-(ipo)">
        <h2 id="input-process-output-ipo">Input-Process-Output (IPO)</h2>
<p><a href="https://en.wikipedia.org/wiki/IPO_model">Input–Process–Output on Wikipedia</a></p>
<p>Systems can be incredibly complex, but can typically be broken down into smaller parts that follow a simple pattern:</p>
<ol>
<li>Input is provided</li>
<li>Some kind of processing or transformation is performed</li>
<li>Output is returned</li>
</ol>
<p>A sort function in a programming language or system could be a classic example of the IPO pattern; where arbitrary input is sorted based on a predicate and returned back. A web server could be modelled as an IPO system, where HTTP requests are transformed into HTTP responses. A highly complex Generative AI system could likewise be modelled in this way, with user input being passed through a complex model and a response being generated.</p>
<p>The IPO pattern is present in different forms across almost all technological domains, from <a href="https://en.wikipedia.org/wiki/Functional_programming">functional programming</a> languages that explicitly follow IPO patterns to <a href="#the-unix-philosophy">The Unix Philosophy</a>, which suggests that highly complex systems can be built by chaining together many simple IPO programs.</p>
<p>See also:</p>
<ul>
<li><a href="#the-unix-philosophy">The Unix Philosophy</a></li>
</ul>
        
      </section>
      
      <section id="kernighan's-law">
        <h2 id="kernighans-law">Kernighan's Law</h2>
<blockquote>
<p>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.</p>
<p>(Brian Kernighan)</p>
</blockquote>
<p>Kernighan's Law is named for <a href="https://en.wikipedia.org/wiki/Brian_Kernighan">Brian Kernighan</a> and derived from a quote from Kernighan and Plauger's book <a href="https://en.wikipedia.org/wiki/The_Elements_of_Programming_Style">The Elements of Programming Style</a>:</p>
<blockquote>
<p>Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it?</p>
</blockquote>
<p>While hyperbolic, Kernighan's Law makes the argument that simple code is to be preferred over complex code, because debugging any issues that arise in complex code may be costly or even infeasible.</p>
<p>See also:</p>
<ul>
<li><a href="#the-kiss-principle">The KISS Principle</a></li>
<li><a href="#the-unix-philosophy">The Unix Philosophy</a></li>
<li><a href="#occams-razor">Occam's Razor</a></li>
</ul>
        
      </section>
      
      <section id="linus's-law">
        <h2 id="linuss-law">Linus's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Linus%27s_law">Linus's Law on Wikipedia</a></p>
<blockquote>
<p>Given enough eyeballs, all bugs are shallow.</p>
<p><em>Eric S. Raymond</em></p>
</blockquote>
<p>This law simply states that the more people who can see a problem, the higher the likelihood that someone will have seen and solved the problem before, or something very similar.</p>
<p>Although it was originally used to describe the value of open-source models for projects it can be accepted for any kind of software project. It can also be extended to processes - more code reviews, more static analysis and multi-disciplined test processes will make the problems more visible and easy to identify.</p>
<p>A more formal statement can be:</p>
<blockquote>
<p>Given a large enough beta-tester and co-developer base, almost every problem will be characterized quickly and can be solved by someone who has encountered a similar problem before.</p>
</blockquote>
<p>This law was named in honour of <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a> in Eric S. Raymond's book "<a href="https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar">The Cathedral and the Bazaar</a>".</p>
        
      </section>
      
      <section id="metcalfe's-law">
        <h2 id="metcalfes-law">Metcalfe's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Metcalfe's_law">Metcalfe's Law on Wikipedia</a></p>
<blockquote>
<p>In network theory, the value of a system grows as approximately the square of the number of users of the system.</p>
</blockquote>
<p>This law is based on the number of possible pairwise connections within a system and is closely related to <a href="#reeds-law">Reed's Law</a>. Odlyzko and others have argued that both Reed's Law and Metcalfe's Law overstate the value of the system by not accounting for the limits of human cognition on network effects; see <a href="#dunbars-number">Dunbar's Number</a>.</p>
<p>See also:
- <a href="#reeds-law">Reed's Law</a>
- <a href="#dunbars-number">Dunbar's Number</a></p>
        
      </section>
      
      <section id="moore's-law">
        <h2 id="moores-law">Moore's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Moore%27s_law">Moore's Law on Wikipedia</a></p>
<blockquote>
<p>The number of transistors in an integrated circuit doubles approximately every two years.</p>
</blockquote>
<p>Often used to illustrate the sheer speed at which semiconductor and chip technology has improved, Moore's prediction has proven to be highly accurate over from the 1970s to the late 2000s. In more recent years, the trend has changed slightly, partly due to <a href="https://en.wikipedia.org/wiki/Quantum_tunnelling">physical limitations on the degree to which components can be miniaturised</a>. However, advancements in parallelisation, and potentially revolutionary changes in semiconductor technology and quantum computing may mean that Moore's Law could continue to hold true for decades to come.</p>
        
      </section>
      
      <section id="murphy's-law-/-sod's-law">
        <h2 id="murphys-law-sods-law">Murphy's Law / Sod's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Murphy%27s_law">Murphy's Law on Wikipedia</a></p>
<blockquote>
<p>Anything that can go wrong will go wrong.</p>
</blockquote>
<p>Related to <a href="https://en.wikipedia.org/wiki/Edward_A._Murphy_Jr.">Edward A. Murphy, Jr</a> <em>Murphy's Law</em> states that if a thing can go wrong, it will go wrong.</p>
<p>This is a common adage among developers. Sometimes the unexpected happens when developing, testing or even in production. This can also be related to the (more common in British English) <em>Sod's Law</em>:</p>
<blockquote>
<p>If something can go wrong, it will, at the worst possible time.</p>
</blockquote>
<p>These 'laws' are generally used in a comic sense. However, phenomena such as <a href="#TODO"><em>Confirmation Bias</em></a> and <a href="#TODO"><em>Selection Bias</em></a> can lead people to perhaps over-emphasise these laws (the majority of times when things work, they go unnoticed, failures however are more noticeable and draw more discussion).</p>
<p>See Also:</p>
<ul>
<li><a href="#TODO">Confirmation Bias</a></li>
<li><a href="#TODO">Selection Bias</a></li>
</ul>
        
      </section>
      
      <section id="occam's-razor">
        <h2 id="occams-razor">Occam's Razor</h2>
<p><a href="https://en.wikipedia.org/wiki/Occam's_razor">Occam's Razor on Wikipedia</a></p>
<blockquote>
<p>Entities should not be multiplied without necessity.</p>
<p>William of Ockham</p>
</blockquote>
<p>Occam's razor says that among several possible solutions, the most likely solution is the one with the least number of concepts and assumptions. This solution is the simplest and solves only the given problem, without introducing accidental complexity and possible negative consequences.</p>
<p>See also:</p>
<ul>
<li><a href="#yagni">YAGNI</a></li>
<li><a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">No Silver Bullet: Accidental Complexity and Essential Complexity</a></li>
</ul>
<p>Example:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Lean_software_development#Eliminate_waste">Lean Software Development: Eliminate Waste</a></li>
</ul>
        
      </section>
      
      <section id="parkinson's-law">
        <h2 id="parkinsons-law">Parkinson's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Parkinson%27s_law">Parkinson's Law on Wikipedia</a></p>
<blockquote>
<p>Work expands so as to fill the time available for its completion.</p>
</blockquote>
<p>In its original context, this Law was based on studies of bureaucracies. It may be pessimistically applied to software development initiatives, the theory being that teams will be inefficient until deadlines near, then rush to complete work by the deadline, thus making the actual deadline somewhat arbitrary.</p>
<p>If this law were combined with <a href="#hofstadters-law">Hofstadter's Law</a>, an even more pessimistic viewpoint is reached - work will expand to fill the time available for its completion and <em>still take longer than expected</em>.</p>
<p>See also:</p>
<ul>
<li><a href="#hofstadters-law">Hofstadter's Law</a></li>
</ul>
        
      </section>
      
      <section id="premature-optimization-effect">
        <h2 id="premature-optimization-effect">Premature Optimization Effect</h2>
<p><a href="http://wiki.c2.com/?PrematureOptimization">Premature Optimization on WikiWeb</a></p>
<blockquote>
<p>Premature optimization is the root of all evil.</p>
<p><a href="https://twitter.com/realdonaldknuth?lang=en">(Donald Knuth)</a></p>
</blockquote>
<p>In Donald Knuth's paper <a href="http://wiki.c2.com/?StructuredProgrammingWithGoToStatements">Structured Programming With Go To Statements</a>, he wrote: "Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: <strong>premature optimization is the root of all evil</strong>. Yet we should not pass up our opportunities in that critical 3%."</p>
<p>However, <em>Premature Optimization</em> can be defined (in less loaded terms) as optimizing before we know that we need to.</p>
        
      </section>
      
      <section id="putt's-law">
        <h2 id="putts-law">Putt's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Putt%27s_Law_and_the_Successful_Technocrat">Putt's Law on Wikipedia</a></p>
<blockquote>
<p>Technology is dominated by two types of people, those who understand what they do not manage and those who manage what they do not understand.</p>
</blockquote>
<p>Putt's Law is often followed by Putt's Corollary:</p>
<blockquote>
<p>Every technical hierarchy, in time, develops a competence inversion.</p>
</blockquote>
<p>These statements suggest that due to various selection criteria and trends in how groups organise, there will be a number of skilled people at working levels of a technical organisations, and a number of people in managerial roles who are not aware of the complexities and challenges of the work they are managing. This can be due to phenomena such as <a href="#the-peter-principle">The Peter Principle</a> or <a href="#the-dilbert-principle">The Dilbert Principle</a>.</p>
<p>However, it should be stressed that Laws such as this are vast generalisations and may apply to <em>some</em> types of organisations, and not apply to others.</p>
<p>See also:</p>
<ul>
<li><a href="#the-peter-principle">The Peter Principle</a></li>
<li><a href="#the-dilbert-principle">The Dilbert Principle</a></li>
</ul>
        
      </section>
      
      <section id="reed's-law">
        <h2 id="reeds-law">Reed's Law</h2>
<p><a href="https://en.wikipedia.org/wiki/Reed's_law">Reed's Law on Wikipedia</a></p>
<blockquote>
<p>The utility of large networks, particularly social networks, scales exponentially with the size of the network.</p>
</blockquote>
<p>This law is based on graph theory, where the utility scales as the number of possible sub-groups, which is faster than the number of participants or the number of possible pairwise connections. Odlyzko and others have argued that Reed's Law overstates the utility of the system by not accounting for the limits of human cognition on network effects; see <a href="#dunbars-number">Dunbar's Number</a>.</p>
<p>See also:
- <a href="#metcalfes-law">Metcalfe's Law</a>
- <a href="#dunbars-number">Dunbar's Number</a></p>
        
      </section>
      
      <section id="the-bitter-lesson">
        <h2 id="the-bitter-lesson">The Bitter Lesson</h2>
<p><a href="http://www.incompleteideas.net/IncIdeas/BitterLesson.html">The Bitter Lesson by Richard S. Sutton</a></p>
<blockquote>
<p>The biggest lesson that can be read from 70 years of AI research is that general methods that leverage computation are ultimately the most effective, and by a large margin.</p>
<p>Richard S. Sutton (2019)</p>
</blockquote>
<p>The "Bitter Lesson", stated by <a href="https://en.wikipedia.org/wiki/Richard_S._Sutton">Rich S. Sutton</a>, says that scale (in terms of both data and computational power) has driven the most significant advancements in AI research, rather than the intricacies of the research methods themselves.</p>
<p>He goes on to suggest that this indicates we should stop trying to build simplified (or even complex) models of the mind as history has shown that these have always in the long term been failures compared to (as an example) scaling the capacity of neural networks and applying existing methods such as convolution.</p>
        
      </section>
      
      <section id="the-ringelmann-effect">
        <h2 id="the-ringelmann-effect">The Ringelmann Effect</h2>
<p><a href="https://en.wikipedia.org/wiki/Ringelmann_effect">The Ringelmann effect on Wikipedia</a></p>
<p>The Ringelmann Effect is the tendency of an individual to become increasingly inefficient as more and more people are involved in a task. In other words, as more individuals are added to a team, the more the average individual performance decreases. Multiple causes are believed to be at work, including loss of motivation ("<a href="https://en.wikipedia.org/wiki/Social_loafing">social loafing</a>") and challenges related to coordination.</p>
<p>See also:
- <a href="#brooks-law">Brooks' Law</a></p>
        
      </section>
      
      <section id="the-law-of-conservation-of-complexity-(tesler's-law)">
        <h2 id="the-law-of-conservation-of-complexity-teslers-law">The Law of Conservation of Complexity (Tesler's Law)</h2>
<p><a href="https://en.wikipedia.org/wiki/Law_of_conservation_of_complexity">The Law of Conservation of Complexity on Wikipedia</a></p>
<p>This law states that there is a certain amount of complexity in a system which cannot be reduced.</p>
<p>Some complexity in a system is 'inadvertent'. It is a consequence of poor structure, mistakes, or just bad modeling of a problem to solve. Inadvertent complexity can be reduced (or eliminated). However, some complexity is 'intrinsic' as a consequence of the complexity inherent in the problem being solved. This complexity can be moved, but not eliminated.</p>
<p>One interesting element to this law is the suggestion that even by simplifying the entire system, the intrinsic complexity is not reduced, it is <em>moved to the user</em>, who must behave in a more complex way.</p>
        
      </section>
      
      <section id="the-law-of-demeter">
        <h2 id="the-law-of-demeter">The Law of Demeter</h2>
<p><a href="https://en.wikipedia.org/wiki/Law_of_Demeter">The Law of Demeter on Wikipedia</a></p>
<blockquote>
<p>Don't talk to strangers.</p>
</blockquote>
<p>The Law of Demeter, also known as "The Principle of Least Knowledge" is a principle for software design, particularly relevant in object orientated languages.</p>
<p>It states that a unit of software should talk only to its immediate collaborators. An object <code>A</code> with a reference to object <code>B</code> can call its methods, but if <code>B</code> has a reference to object <code>C</code>, <code>A</code> should not call <code>C</code>s methods. So, if <code>C</code> has a <code>doThing()</code> method, <code>A</code> should not invoke it directly; <code>B.getC().doThis()</code>.</p>
<p>Following this principal limits the scope of changes, making them easier and safer in future.</p>
        
      </section>
      
      <section id="the-law-of-leaky-abstractions">
        <h2 id="the-law-of-leaky-abstractions">The Law of Leaky Abstractions</h2>
<p><a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/">The Law of Leaky Abstractions on Joel on Software</a></p>
<blockquote>
<p>All non-trivial abstractions, to some degree, are leaky.</p>
<p>(<a href="https://twitter.com/spolsky">Joel Spolsky</a>)</p>
</blockquote>
<p>This law states that abstractions, which are generally used in computing to simplify working with complicated systems, will in certain situations 'leak' elements of the underlying system, this making the abstraction behave in an unexpected way.</p>
<p>An example might be loading a file and reading its contents. The file system APIs are an <em>abstraction</em> of the lower level kernel systems, which are themselves an abstraction over the physical processes relating to changing data on a magnetic platter (or flash memory for an SSD). In most cases, the abstraction of treating a file like a stream of binary data will work. However, for a magnetic drive, reading data sequentially will be <em>significantly</em> faster than random access (due to increased overhead of page faults), but for an SSD drive, this overhead will not be present. Underlying details will need to be understood to deal with this case (for example, database index files are structured to reduce the overhead of random access), the abstraction 'leaks' implementation details the developer may need to be aware of.</p>
<p>The example above can become more complex when <em>more</em> abstractions are introduced. The Linux operating system allows files to be accessed over a network but represented locally as 'normal' files. This abstraction will 'leak' if there are network failures. If a developer treats these files as 'normal' files, without considering the fact that they may be subject to network latency and failures, the solutions will be buggy.</p>
<p>The article describing the law suggests that an over-reliance on abstractions, combined with a poor understanding of the underlying processes, actually makes dealing with the problem at hand <em>more</em> complex in some cases.</p>
<p>See also:</p>
<ul>
<li><a href="#hyrums-law-the-law-of-implicit-interfaces">Hyrum's Law</a></li>
</ul>
<p>Real-world examples:</p>
<ul>
<li><a href="https://forums.adobe.com/thread/376152">Photoshop Slow Startup</a> - an issue I encountered in the past. Photoshop would be slow to startup, sometimes taking minutes. It seems the issue was that on startup it reads some information about the current default printer. However, if that printer is actually a network printer, this could take an extremely long time. The <em>abstraction</em> of a network printer being presented to the system similar to a local printer caused an issue for users in poor connectivity situations.</li>
</ul>
        
      </section>
      
      <section id="the-law-of-the-instrument">
        <h2 id="the-law-of-the-instrument">The Law of the Instrument</h2>
<p><a href="https://en.wikipedia.org/wiki/Law_of_the_instrument">The Law of the Instrument</a></p>
<blockquote>
<p>I call it the law of the instrument, and it may be formulated as follows: Give a small boy a hammer, and he will find that everything he encounters needs pounding.</p>
<p><em>Abraham Kaplan</em></p>
<p>If all you have is a hammer, everything looks like a nail.</p>
<p><em>Abraham Maslow</em></p>
</blockquote>
<p>In the context of computer programming, this law suggests that people tend to use tools that are familiar with, rather than the best possible tool. This over-reliance on a familiar tool is an anti-pattern referred to as 'the golden hammer'.</p>
<p>See also:</p>
<ul>
<li><a href="https://josemdev.com/avoiding-the-law-of-the-instrument/">Avoiding the law of the instrument</a></li>
<li><a href="https://archive.org/details/antipatternsrefa0000unse/page/111/mode/2up">Anti-Pattern - The Golden Hammer</a></li>
</ul>
        
      </section>
      
      <section id="the-law-of-triviality">
        <h2 id="the-law-of-triviality">The Law of Triviality</h2>
<p><a href="https://en.wikipedia.org/wiki/Law_of_triviality">The Law of Triviality on Wikipedia</a></p>
<p>This law suggests that groups will give far more time and attention to trivial or cosmetic issues rather than serious and substantial ones.</p>
<p>The common fictional example used is that of a committee approving plans for nuclear power plant, who spend the majority of their time discussing the structure of the bike shed, rather than the far more important design for the power plant itself. It can be difficult to give valuable input on discussions about very large, complex topics without a high degree of subject matter expertise or preparation. However, people want to be seen to be contributing valuable input. Hence a tendency to focus too much time on small details, which can be reasoned about easily, but are not necessarily of particular importance.</p>
<p>The fictional example above led to the usage of the term 'Bike Shedding' as an expression for wasting time on trivial details. A related term is '<a href="https://en.wiktionary.org/wiki/yak_shaving">Yak Shaving</a>,' which connotes a seemingly irrelevant activity that is part of a long chain of prerequisites to the main task.</p>
        
      </section>
      
      <section id="the-unix-philosophy">
        <h2 id="the-unix-philosophy">The Unix Philosophy</h2>
<p><a href="https://en.wikipedia.org/wiki/Unix_philosophy">The Unix Philosophy on Wikipedia</a></p>
<p>The Unix Philosophy is that software components should be small, and focused on doing one specific thing well. This can make it easier to build systems by composing together small, simple, well-defined units, rather than using large, complex, multi-purpose programs.</p>
<p>Modern practices like 'Microservice Architecture' can be thought of as an application of this law, where services are small, focused and do one specific thing, allowing complex behaviour to be composed of simple building blocks.</p>
        
      </section>
      
      <section id="the-scout-rule">
        <h2 id="the-scout-rule">The Scout Rule</h2>
<p><a href="https://www.oreilly.com/library/view/97-things-every/9780596809515/ch08.html">The Scout Rule on O'Reilly</a></p>
<blockquote>
<p>Always leave the code better than you found it.</p>
<p>(Robert C. Martin (Uncle Bob))</p>
</blockquote>
<p>Based on the "Scout Rule", which is "always leave the campground cleaner than you found it", the Scout Rule in programming is simply "always leave the code cleaner than you found it".</p>
<p>This was introduced in the first chapter of the book <a href="https://www.goodreads.com/book/show/3735293-clean-code">Clean Code</a> by Bob Martin. The rule suggests that developers should perform 'optimistic refactoring', which means to endeavour to improve the overall quality of the code when you work on it. If you see a mistake, attempt to fix it or clean it up. However, when making changes to code which seems incorrect, it may be worth remembering <a href="#chestertons-fence">Chesterton's Fence</a>!</p>
<p>See also:</p>
<ul>
<li><a href="#reading-list">Reading List: Clean Code</a></li>
<li><a href="#chestertons-fence">Chesterton's Fence</a></li>
<li><a href="#broken-windows-theory">The Broken Windows Theory</a></li>
</ul>
<p>https://www.amazon.sg/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882</p>
        
      </section>
      
      <section id="the-spotify-model">
        <h2 id="the-spotify-model">The Spotify Model</h2>
<p><a href="https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/">The Spotify Model on Spotify Labs</a></p>
<p>The Spotify Model is an approach to team and organisation structure which has been popularised by 'Spotify'. In this model, teams are organised around features, rather than technologies.</p>
<p>The Spotify Model also popularises the concepts of Tribes, Guilds, Chapters, which are other components of their organisation structure.</p>
<p>Members of the organisation have described that the actual meaning of these groups changes, evolves and is an on-going experiment. The fact that the model is a <em>process in motion</em>, rather than a fixed model continues to lead to varying interpretations of the structure, which may be based on presentations given by employees at conferences. This means 'snapshots' may be 're-packaged' by third parties as a <em>fixed structure</em>, with the fact that the model is dynamic being lost.</p>
        
      </section>
      
      <section id="the-two-pizza-rule">
        <h2 id="the-two-pizza-rule">The Two Pizza Rule</h2>
<blockquote>
<p>If you can't feed a team with two pizzas, it's too large.</p>
<p>(Jeff Bezos)</p>
</blockquote>
<p>This rule suggests that regardless of the size of the company, teams should be small enough to be fed by two pizzas. Attributed to Jeff Bezos and Amazon, this belief suggests that large teams are inherently inefficient. This is supported by the fact that as the team size increases linearly, the links between people increases quadratically; thus the cost of coordinating and communicating also grows quadratically. If this cost of coordination is essentially overhead, then smaller teams should be preferred.</p>
<p>The number of links between people can be expressed as <code>n(n-1)/2</code> where n = number of people.</p>
<p><img width="200px" alt="Complete graph; Links between people" src="https://hacker-laws.com/images/complete_graph.png"></p>
        
      </section>
      
      <section id="twyman's-law">
        <h2 id="twymans-law">Twyman's law</h2>
<p><a href="https://en.wikipedia.org/wiki/Twyman%27s_law">Twyman's Law on Wikipedia</a></p>
<blockquote>
<p>The more unusual or interesting the data, the more likely they are to have been the result of an error of one kind or another.</p>
</blockquote>
<p>This law suggests that when there are particularly unusual data points, it is more likely that they are the result of errors or manipulation. For example, if a dataset of long-jump results from a sporting event showed a maximum value of 20 meters (more than twice the world record), it is more likely to be due to an error (such as recording a value in feet rather than meters) than due to an unusually long jump. It is also more likely in this case that the results could have been manipulated.</p>
<p>See also:</p>
<ul>
<li><a href="#TODO">Sagan Standard</a></li>
</ul>
        
      </section>
      
      <section id="wadler's-law">
        <h2 id="wadlers-law">Wadler's Law</h2>
<p><a href="https://wiki.haskell.org/Wadler's_Law">Wadler's Law on wiki.haskell.org</a></p>
<blockquote>
<p>In any language design, the total time spent discussing a feature in this list is proportional to two raised to the power of its position.</p>
<ol>
<li>Semantics</li>
<li>Syntax</li>
<li>Lexical syntax</li>
<li>Lexical syntax of comments</li>
</ol>
<p>(In short, for every hour spent on semantics, 8 hours will be spent on the syntax of comments).</p>
</blockquote>
<p>Similar to <a href="#the-law-of-triviality">The Law of Triviality</a>, Wadler's Law states what when designing a language, the amount of time spent on language structures is disproportionately high in comparison to the importance of those features.</p>
<p>See also:</p>
<ul>
<li><a href="#the-law-of-triviality">The Law of Triviality</a></li>
</ul>
        
      </section>
      
      <section id="wheaton's-law">
        <h2 id="wheatons-law">Wheaton's Law</h2>
<p><a href="http://www.wheatonslaw.com/">The Link</a></p>
<p><a href="https://dontbeadickday.com/">The Official Day</a></p>
<blockquote>
<p>Don't be a dick.</p>
<p><em>Wil Wheaton</em></p>
</blockquote>
<p>Coined by Wil Wheaton (Star Trek: The Next Generation, The Big Bang Theory), this simple, concise, and powerful law aims for an increase in harmony and respect within a professional organization. It can be applied when speaking with coworkers, performing code reviews, countering other points of view, critiquing, and in general, most professional interactions humans have with each other.</p>
        
      </section>
      
      <section id="principles">
        <h2 id="principles">Principles</h2>
<p>Principles are generally more likely to be guidelines relating to design.</p>
        
      </section>
      
      <section id="all-models-are-wrong-(george-box's-law)">
        <h2 id="all-models-are-wrong-george-boxs-law">All Models Are Wrong (George Box's Law)</h2>
<p><a href="https://en.wikipedia.org/wiki/All_models_are_wrong">All Models Are Wrong</a></p>
<blockquote>
<p>All models are wrong, but some are useful.</p>
<p><em>George Box</em></p>
</blockquote>
<p>This principle suggests that all models of systems are flawed, but that as long as they are not <em>too</em> flawed they may be useful. This principle has its roots in statistics but applies to scientific and computing models as well.</p>
<p>A fundamental requirement of most software is to model a system of some kind. Regardless of whether the system being modeled is a computer network, a library, a graph of social connections or any other kind of system, the designer will have to decide an appropriate level of detail to model. Excessive detail may lead to too much complexity, too little detail may prevent the model from being functional.</p>
<p>See also:</p>
<ul>
<li><a href="#the-law-of-leaky-abstractions">The Law of Leaky Abstractions</a></li>
</ul>
        
      </section>
      
      <section id="chesterton's-fence">
        <h2 id="chestertons-fence">Chesterton's Fence</h2>
<p><a href="https://en.wikipedia.org/wiki/Wikipedia:Chesterton%27s_fence">Chesterton's Fence on Wikipedia</a></p>
<blockquote>
<p>Reforms should not be made until the reasoning behind the existing state of affairs is understood.</p>
</blockquote>
<p>This principle is relevant in software engineering when removing technical debt. Each line of a program was originally written by someone for some reason. Chesterton's Fence suggests that one should try to understand the context and meaning of the code fully, before changing or removing it, even if at first glance it seems redundant or incorrect.</p>
<p>The name of this principle comes from a story by <a href="https://en.wikipedia.org/wiki/G._K._Chesterton">G.K. Chesterton</a>. A man comes across a fence crossing the middle of the road. He complains to the mayor that this useless fence is getting in the way, and asks to remove it. The mayor asks why the fence is there in the first place. When the man says he doesn't know, the mayor says, "If you don't know its purpose, I certainly won't let you remove it. Go and find out the use of it, and then I may let you destroy it."</p>
        
      </section>
      
      <section id="kerckhoffs's-principle">
        <h2 id="kerckhoffss-principle">Kerckhoffs's principle</h2>
<p><a href="https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle">Kerckhoffs's principle on Wikipedia</a></p>
<blockquote>
<p>"...design your system assuming that your opponents know it in detail."</p>
<p><em>Steven M. Bellovin's formulation of Kerckhoff's Principle</em></p>
</blockquote>
<p>This principle of cryptography was an axiom created by cryptographer Auguste Kerckhoffs. He stated that a cryptosystem should be secure, even if everything about the system, except the key, is public knowledge. Not to be confused with <a href="#todo"><em>"security through obscurity"</em></a>.</p>
<p>The gold standard for any secret-keeping system is that implementation details should be publicly distributed, without sacrificing or compromising security of said system.</p>
<p>The history of cryptography has shown that open discussion and analysis of cryptographic systems leads to better and more secure systems - as researchers are able to test for and expose potential vulnerabilities.</p>
<ul>
<li><a href="#todo">Shannon's Maxim</a></li>
</ul>
        
      </section>
      
      <section id="the-dead-sea-effect">
        <h2 id="the-dead-sea-effect">The Dead Sea Effect</h2>
<p><a href="http://brucefwebster.com/2008/04/11/the-wetware-crisis-the-dead-sea-effect/">The Dead Sea Effect on Bruce F. Webster</a></p>
<blockquote>
<p>"... [T]he more talented and effective IT engineers are the ones most likely to leave - to evaporate ... [those who tend to] remain behind [are] the 'residue' — the least talented and effective IT engineers."</p>
<p><em>Bruce F. Webster</em></p>
</blockquote>
<p>The "Dead Sea Effect" suggests that in any organisation, the skills/talent/efficacy of engineers is often inversely proportional to their time in the company.</p>
<p>Typically, highly skilled engineers find it easy to gain employment elsewhere and are the first to do so. Engineers who have obsolete or weak skills will tend to remain with the company, as finding employment elsewhere is difficult. This is particularly pronounced if they have gained incremental pay rises over their time in the company, as it can be challenging to get equivalent remuneration elsewhere.</p>
        
      </section>
      
      <section id="the-dilbert-principle">
        <h2 id="the-dilbert-principle">The Dilbert Principle</h2>
<p><a href="https://en.wikipedia.org/wiki/Dilbert_principle">The Dilbert Principle on Wikipedia</a></p>
<blockquote>
<p>Companies tend to systematically promote incompetent employees to management to get them out of the workflow.</p>
<p><em>Scott Adams</em></p>
</blockquote>
<p>A management concept developed by Scott Adams (creator of the Dilbert comic strip), the Dilbert Principle is inspired by <a href="#the-peter-principle">The Peter Principle</a>. Under the Dilbert Principle, employees who were never competent are promoted to management in order to limit the damage they can do. Adams first explained the principle in a 1995 Wall Street Journal article, and expanded upon it in his 1996 business book, <a href="#reading-list">The Dilbert Principle</a>.</p>
<p>See Also:</p>
<ul>
<li><a href="#the-peter-principle">The Peter Principle</a></li>
<li><a href="#putts-law">Putt's Law</a></li>
</ul>
        
      </section>
      
      <section id="the-pareto-principle-(the-80/20-rule)">
        <h2 id="the-pareto-principle-the-8020-rule">The Pareto Principle (The 80/20 Rule)</h2>
<p><a href="https://en.wikipedia.org/wiki/Pareto_principle">The Pareto Principle on Wikipedia</a></p>
<blockquote>
<p>Most things in life are not distributed evenly.</p>
</blockquote>
<p>The Pareto Principle suggests that in some cases, the majority of results come from a minority of inputs:</p>
<ul>
<li>80% of a certain piece of software can be written in 20% of the total allocated time (conversely, the hardest 20% of the code takes 80% of the time)</li>
<li>20% of the effort produces 80% of the result</li>
<li>20% of the work creates 80% of the revenue</li>
<li>20% of the bugs cause 80% of the crashes</li>
<li>20% of the features cause 80% of the usage</li>
</ul>
<p>In the 1940s American-Romanian engineer Dr. Joseph Juran, who is widely credited with being the father of quality control, <a href="https://en.wikipedia.org/wiki/Joseph_M._Juran">began to apply the Pareto principle to quality issues</a>.</p>
<p>This principle is also known as: The 80/20 Rule, The Law of the Vital Few, and The Principle of Factor Sparsity.</p>
<p>Real-world examples:</p>
<ul>
<li>In 2002 Microsoft reported that by fixing the top 20% of the most-reported bugs, 80% of the related errors and crashes in windows and office would become eliminated (<a href="https://www.crn.com/news/security/18821726/microsofts-ceo-80-20-rule-applies-to-bugs-not-just-features.htm">Reference</a>).</li>
</ul>
        
      </section>
      
      <section id="the-shirky-principle">
        <h2 id="the-shirky-principle">The Shirky Principle</h2>
<p><a href="https://kk.org/thetechnium/the-shirky-prin/">The Shirky Principle explained</a></p>
<blockquote>
<p>Institutions will try to preserve the problem to which they are the solution.</p>
<p><em>Clay Shirky</em></p>
</blockquote>
<p>The Shirky Principle suggests that complex solutions - a company, an industry, or a technology - can become so focused on the problem that they are solving, that they can inadvertently perpetuate the problem itself. This may be deliberate (a company striving to find new nuances to a problem which justify continued development of a solution), or inadvertent (being unable or unwilling to accept or build a solution which solves the problem completely or obviates it).</p>
<p>Related to:</p>
<ul>
<li>Upton Sinclair's famous line, <em>"It is difficult to get a man to understand something, when his salary depends upon his not understanding it!"</em></li>
<li>Clay Christensen's <em>The Innovator's Dilemma</em></li>
</ul>
<p>See also:</p>
<ul>
<li><a href="#the-pareto-principle-the-8020-rule">Pareto Principle</a></li>
</ul>
        
      </section>
      
      <section id="the-peter-principle">
        <h2 id="the-peter-principle">The Peter Principle</h2>
<p><a href="https://en.wikipedia.org/wiki/Peter_principle">The Peter Principle on Wikipedia</a></p>
<blockquote>
<p>People in a hierarchy tend to rise to their "level of incompetence".</p>
<p><em>Laurence J. Peter</em></p>
</blockquote>
<p>A management concept developed by Laurence J. Peter, the Peter Principle observes that people who are good at their jobs are promoted, until they reach a level where they are no longer successful (their "level of incompetence"). At this point, as they are more senior, they are less likely to be removed from the organisation (unless they perform spectacularly badly) and will continue to reside in a role which they have few intrinsic skills at, as their original skills which made them successful are not necessarily the skills required for their new jobs.</p>
<p>This is of particular interest to engineers - who initially start out in deeply technical roles, but often have a career path which leads to <em>managing</em> other engineers - which requires a fundamentally different skill set.</p>
<p>See Also:</p>
<ul>
<li><a href="#the-dilbert-principle">The Dilbert Principle</a></li>
<li><a href="#putts-law">Putt's Law</a></li>
</ul>
        
      </section>
      
      <section id="the-robustness-principle-(postel's-law)">
        <h2 id="the-robustness-principle-postels-law">The Robustness Principle (Postel's Law)</h2>
<p><a href="https://en.wikipedia.org/wiki/Robustness_principle">The Robustness Principle on Wikipedia</a></p>
<blockquote>
<p>Be conservative in what you do, be liberal in what you accept from others.</p>
</blockquote>
<p>Often applied in server application development, this principle states that what you send to others should be as minimal and conformant as possible, but you should aim to allow non-conformant input if it can be processed.</p>
<p>The goal of this principle is to build systems which are robust, as they can handle poorly formed input if the intent can still be understood. However, there are potentially security implications of accepting malformed input, particularly if the processing of such input is not well tested. These implications and other issues are described by Eric Allman in <a href="https://queue.acm.org/detail.cfm?id=1999945">The Robustness Principle Reconsidered</a>.</p>
<p>Allowing non-conformant input, in time, may undermine the ability of protocols to evolve as implementors will eventually rely on this liberality to build their features.</p>
<p>See Also:</p>
<ul>
<li><a href="#hyrums-law-the-law-of-implicit-interfaces">Hyrum's Law</a></li>
</ul>
        
      </section>
      
      <section id="solid">
        <h2 id="solid">SOLID</h2>
<p>This is an acronym, which refers to:</p>
<ul>
<li>S: <a href="#the-single-responsibility-principle">The Single Responsibility Principle</a></li>
<li>O: <a href="#the-openclosed-principle">The Open/Closed Principle</a></li>
<li>L: <a href="#the-liskov-substitution-principle">The Liskov Substitution Principle</a></li>
<li>I: <a href="#the-interface-segregation-principle">The Interface Segregation Principle</a></li>
<li>D: <a href="#the-dependency-inversion-principle">The Dependency Inversion Principle</a></li>
</ul>
<p>These are key principles in <a href="#todo">Object-Oriented Programming</a>. Design principles such as these should be able to aid developers build more maintainable systems.</p>
        
      </section>
      
      <section id="the-single-responsibility-principle">
        <h2 id="the-single-responsibility-principle">The Single Responsibility Principle</h2>
<p><a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">The Single Responsibility Principle on Wikipedia</a></p>
<blockquote>
<p>Every module or class should have a single responsibility only.</p>
</blockquote>
<p>The first of the '<a href="#solid">SOLID</a>' principles. This principle suggests that modules or classes should do one thing and one thing only. In more practical terms, this means that a single, small change to a feature of a program should require a change in one component only. For example, changing how a password is validated for complexity should require a change in only one part of the program.</p>
<p>Theoretically, this should make the code more robust, and easier to change. Knowing that a component being changed has a single responsibility only means that <em>testing</em> that change should be easier. Using the earlier example, changing the password complexity component should only be able to affect the features which relate to password complexity. It can be much more difficult to reason about the impact of a change to a component which has many responsibilities.</p>
<p>See also:</p>
<ul>
<li><a href="#todo">Object-Oriented Programming</a></li>
<li><a href="#solid">SOLID</a></li>
</ul>
        
      </section>
      
      <section id="the-open/closed-principle">
        <h2 id="the-openclosed-principle">The Open/Closed Principle</h2>
<p><a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle">The Open/Closed Principle on Wikipedia</a></p>
<blockquote>
<p>Entities should be open for extension and closed for modification.</p>
</blockquote>
<p>The second of the '<a href="#solid">SOLID</a>' principles. This principle states that entities (which could be classes, modules, functions and so on) should be able to have their behaviour <em>extended</em>, but that their <em>existing</em> behaviour should not be able to be modified.</p>
<p>As a hypothetical example, imagine a module which is able to turn a Markdown document into HTML. Now imagine there is a new syntax added to the Markdown specification, which adds support for mathematical equations. The module should be <em>open to extension</em> to implement the new mathematics syntax. However, existing syntax implementations (like paragraphs, bullets, etc) should be <em>closed for modification</em>. They already work, we don't want people to change them.</p>
<p>This principle has particular relevance for object-oriented programming, where we may design objects to be easily extended, but would avoid designing objects which can have their existing behaviour changed in unexpected ways.</p>
<p>See also:</p>
<ul>
<li><a href="#todo">Object-Oriented Programming</a></li>
<li><a href="#solid">SOLID</a></li>
</ul>
        
      </section>
      
      <section id="the-liskov-substitution-principle">
        <h2 id="the-liskov-substitution-principle">The Liskov Substitution Principle</h2>
<p><a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">The Liskov Substitution Principle on Wikipedia</a></p>
<blockquote>
<p>It should be possible to replace a type with a subtype, without breaking the system.</p>
</blockquote>
<p>The third of the '<a href="#solid">SOLID</a>' principles. This principle states that if a component relies on a type, then it should be able to use subtypes of that type, without the system failing or having to know the details of what that subtype is.</p>
<p>As an example, imagine we have a method which reads an XML document from a structure which represents a file. If the method uses a base type 'file', then anything which derives from 'file' should be usable in the function. If 'file' supports seeking in reverse, and the XML parser uses that function, but the derived type 'network file' fails when reverse seeking is attempted, then the 'network file' would be violating the principle.</p>
<p>This principle has particular relevance for object-oriented programming, where type hierarchies must be modeled carefully to avoid confusing users of a system.</p>
<p>See also:</p>
<ul>
<li><a href="#todo">Object-Oriented Programming</a></li>
<li><a href="#solid">SOLID</a></li>
</ul>
        
      </section>
      
      <section id="the-interface-segregation-principle">
        <h2 id="the-interface-segregation-principle">The Interface Segregation Principle</h2>
<p><a href="https://en.wikipedia.org/wiki/Interface_segregation_principle">The Interface Segregation Principle on Wikipedia</a></p>
<blockquote>
<p>No client should be forced to depend on methods it does not use.</p>
</blockquote>
<p>The fourth of the '<a href="#solid">SOLID</a>' principles. This principle states that consumers of a component should not depend on functions of that component which it doesn't actually use.</p>
<p>As an example, imagine we have a method which reads an XML document from a structure which represents a file. It only needs to read bytes, move forwards or move backwards in the file. If this method needs to be updated because an unrelated feature of the file structure changes (such as an update to the permissions model used to represent file security), then the principle has been invalidated. It would be better for the file to implement a 'seekable-stream' interface, and for the XML reader to use that.</p>
<p>This principle has particular relevance for object-oriented programming, where interfaces, hierarchies and abstract types are used to <a href="#todo">minimise the coupling</a> between different components. <a href="#todo">Duck typing</a> is a methodology which enforces this principle by eliminating explicit interfaces.</p>
<p>See also:</p>
<ul>
<li><a href="#todo">Object-Oriented Programming</a></li>
<li><a href="#solid">SOLID</a></li>
<li><a href="#todo">Duck Typing</a></li>
<li><a href="#todo">Decoupling</a></li>
</ul>
        
      </section>
      
      <section id="the-dependency-inversion-principle">
        <h2 id="the-dependency-inversion-principle">The Dependency Inversion Principle</h2>
<p><a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle">The Dependency Inversion Principle on Wikipedia</a></p>
<blockquote>
<p>High-level modules should not be dependent on low-level implementations.</p>
</blockquote>
<p>The fifth of the '<a href="#solid">SOLID</a>' principles. This principle states that higher-level orchestrating components should not have to know the details of their dependencies.</p>
<p>As an example, imagine we have a program which read metadata from a website. We would assume that the main component would have to know about a component to download the webpage content, then a component which can read the metadata. If we were to take dependency inversion into account, the main component would depend only on an abstract component which can fetch byte data, and then an abstract component which would be able to read metadata from a byte stream. The main component would not know about TCP/IP, HTTP, HTML, etc.</p>
<p>This principle is complex, as it can seem to 'invert' the expected dependencies of a system (hence the name). In practice, it also means that a separate orchestrating component must ensure the correct implementations of abstract types are used (e.g. in the previous example, <em>something</em> must still provide the metadata reader component a HTTP file downloader and HTML meta tag reader). This then touches on patterns such as <a href="#todo">Inversion of Control</a> and <a href="#todo">Dependency Injection</a>.</p>
<p>See also:</p>
<ul>
<li><a href="#todo">Object-Oriented Programming</a></li>
<li><a href="#solid">SOLID</a></li>
<li><a href="#todo">Inversion of Control</a></li>
<li><a href="#todo">Dependency Injection</a></li>
</ul>
        
      </section>
      
      <section id="the-dry-principle">
        <h2 id="the-dry-principle">The DRY Principle</h2>
<p><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">The DRY Principle on Wikipedia</a></p>
<blockquote>
<p>Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.</p>
</blockquote>
<p>DRY is an acronym for <em>Don't Repeat Yourself</em>. This principle aims to help developers reducing the repetition of code and keep the information in a single place and was cited in 1999 by Andrew Hunt and Dave Thomas in the book <a href="https://en.wikipedia.org/wiki/The_Pragmatic_Programmer">The Pragmatic Programmer</a></p>
<blockquote>
<p>The opposite of DRY would be <em>WET</em> (Write Everything Twice or We Enjoy Typing).</p>
</blockquote>
<p>In practice, if you have the same piece of information in two (or more) different places, you can use DRY to merge them into a single one and reuse it wherever you want/need.</p>
<p>See also:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/The_Pragmatic_Programmer">The Pragmatic Programmer</a></li>
</ul>
        
      </section>
      
      <section id="the-kiss-principle">
        <h2 id="the-kiss-principle">The KISS principle</h2>
<p><a href="https://en.wikipedia.org/wiki/KISS_principle">KISS on Wikipedia</a></p>
<blockquote>
<p>Keep it simple, stupid</p>
</blockquote>
<p>The KISS principle states that most systems work best if they are kept simple rather than made complicated; therefore, simplicity should be a key goal in design, and unnecessary complexity should be avoided.  Originating in the U.S. Navy in 1960, the phrase has been associated with aircraft engineer Kelly Johnson.</p>
<p>The principle is best exemplified by the story of Johnson handing a team of design engineers a handful of tools, with the challenge that the jet aircraft they were designing must be repairable by an average mechanic in the field under combat conditions with only these tools. Hence, the "stupid" refers to the relationship between the way things break and the sophistication of the tools available to repair them, not the capabilities of the engineers themselves.</p>
<p>See also:</p>
<ul>
<li><a href="#galls-law">Gall's Law</a></li>
</ul>
        
      </section>
      
      <section id="yagni">
        <h2 id="yagni">YAGNI</h2>
<p><a href="https://en.wikipedia.org/wiki/You_ain%27t_gonna_need_it">YAGNI on Wikipedia</a></p>
<p>This is an acronym for <em><strong>Y</strong>ou <strong>A</strong>in't <strong>G</strong>onna <strong>N</strong>eed <strong>I</strong>t</em>.</p>
<blockquote>
<p>Always implement things when you actually need them, never when you just foresee that you need them.</p>
<p>(<a href="https://twitter.com/RonJeffries">Ron Jeffries</a>) (XP co-founder and author of the book "Extreme Programming Installed")</p>
</blockquote>
<p>This <em>Extreme Programming</em> (XP) principle suggests developers should only implement functionality that is needed for the immediate requirements, and avoid attempts to predict the future by implementing functionality that might be needed later.</p>
<p>Adhering to this principle should reduce the amount of unused code in the codebase, and avoid time and effort being wasted on functionality that brings no value.</p>
<p>See also:</p>
<ul>
<li><a href="#reading-list">Reading List: Extreme Programming Installed</a></li>
</ul>
        
      </section>
      
      <section id="the-fallacies-of-distributed-computing">
        <h2 id="the-fallacies-of-distributed-computing">The Fallacies of Distributed Computing</h2>
<p><a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing">The Fallacies of Distributed Computing on Wikipedia</a></p>
<p>Also known as <em>Fallacies of Networked Computing</em>, the Fallacies are a list of conjectures (or beliefs) about distributed computing, which can lead to failures in software development. The assumptions are:</p>
<ul>
<li>The network is reliable</li>
<li>Latency is zero</li>
<li>Bandwidth is infinite</li>
<li>The network is secure</li>
<li>Topology doesn't change</li>
<li>There is one administrator</li>
<li>Transport cost is zero</li>
<li>The network is homogeneous</li>
</ul>
<p>The first four items were listed by <a href="https://en.wikipedia.org/wiki/Bill_Joy">Bill Joy</a> and <a href="https://twitter.com/aka_pugs">Tom Lyon</a> around 1991 and first classified by <a href="https://en.wikipedia.org/wiki/James_Gosling">James Gosling</a> as the "Fallacies of Networked Computing". <a href="https://en.wikipedia.org/wiki/L._Peter_Deutsch">L. Peter Deutsch</a> added the 5th, 6th and 7th fallacies. In the late 90's Gosling added the 8th fallacy.</p>
<p>The group was inspired by what was happening at the time inside <a href="https://en.wikipedia.org/wiki/Sun_Microsystems">Sun Microsystems</a>.</p>
<p>These fallacies should be considered carefully when designing code which is resilient; assuming any of these fallacies can lead to flawed logic which fails to deal with the realities and complexities of distributed systems.</p>
<p>See also:</p>
<ul>
<li><a href="https://medium.com/baseds/foraging-for-the-fallacies-of-distributed-computing-part-1-1b35c3b85b53">Foraging for the Fallacies of Distributed Computing (Part 1) - Vaidehi Joshi
 on Medium</a></li>
</ul>
        
      </section>
      
      <section id="the-principle-of-least-astonishment">
        <h2 id="the-principle-of-least-astonishment">The Principle of Least Astonishment</h2>
<p><a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">The Principle of Least Astonishment on Wikipedia</a></p>
<blockquote>
<p>People are part of the system. The design should match the user's experience, expectations, and mental models.</p>
<p>Frans Kaashoek</p>
</blockquote>
<p>This principle proposes that systems and interfaces should be designed in a way that features and functionality is easily discovered and matches users expectations. Features that 'surprise' users should be discouraged in favour of features that can be intuitively reasoned about based on existing patterns and practices.</p>
<p>Many examples are present in user interfaces, such as a 'pull down' gesture on a mobile appliation to refresh content. Another example would be command line tools, where many standards exist for how parameters are named, common parameters that should be available and so on.</p>
<p>See also:</p>
<ul>
<li><a href="#todo">Convention Over Configuration</a></li>
</ul>
        
      </section>
      
      <section id="reading-list">
        <h2 id="reading-list">Reading List</h2>
<p>If you have found these concepts interesting, you may enjoy the following books.</p>
<ul>
<li><a href="https://www.goodreads.com/book/show/3735293-clean-code">Clean Code - Robert C. Martin</a> - One of the most well respected books on how to write clean, maintainable code.</li>
<li><a href="https://www.goodreads.com/en/book/show/67834">Extreme Programming Installed - Ron Jeffries, Ann Anderson, Chet Hendrikson</a> - Covers the core principles of Extreme Programming.</li>
<li><a href="https://www.goodreads.com/book/show/24113.G_del_Escher_Bach">Gödel, Escher, Bach: An Eternal Golden Braid - Douglas R. Hofstadter.</a> - This book is difficult to classify. <a href="#hofstadters-law">Hofstadter's Law</a> is from the book.</li>
<li><a href="https://www.goodreads.com/book/show/43713">Structure and Interpretation of Computer Programs - Harold Abelson, Gerald Jay Sussman, Julie Sussman</a> - If you were a comp sci or electical engineering student at MIT or Cambridge this was your intro to programming. Widely reported as being a turning point in people's lives.</li>
<li><a href="https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar">The Cathedral and the Bazaar - Eric S. Raymond</a> - a collection of essays on open source. This book was the source of <a href="#linuss-law">Linus's Law</a>.</li>
<li><a href="https://www.goodreads.com/book/show/85574.The_Dilbert_Principle">The Dilbert Principle - Scott Adams</a> - A comic look at corporate America, from the author who created the <a href="#the-dilbert-principle">Dilbert Principle</a>.</li>
<li><a href="https://www.goodreads.com/book/show/13629.The_Mythical_Man_Month">The Mythical Man Month - Frederick P. Brooks Jr.</a> - A classic volume on software engineering. <a href="#brooks-law">Brooks' Law</a> is a central theme of the book.</li>
<li><a href="https://www.goodreads.com/book/show/890728.The_Peter_Principle">The Peter Principle - Lawrence J. Peter</a> - Another comic look at the challenges of larger organisations and people management, the source of <a href="#the-peter-principle">The Peter Principle</a>.</li>
</ul>
        
      </section>
      
      <section id="online-resources">
        <h2 id="online-resources">Online Resources</h2>
<p>Some useful resources and reading.</p>
<ul>
<li><a href="https://www.cbinsights.com/research/report/tech-laws-success-failure">CB Insights: 8 Laws Driving Success In Tech: Amazon's 2-Pizza Rule, The 80/20 Principle, &amp; More</a> - an interesting write up of some laws which have been highly influential in technology.</li>
</ul>
        
      </section>
      
      <section id="pdf-ebook">
        <h2 id="pdf-ebook">PDF eBook</h2>
<p>The project is available as a PDF eBook, <a href="https://github.com/dwmkerr/hacker-laws/releases/latest/download/hacker-laws.pdf">download the latest PDF eBook with this link</a> or check the <a href="https://github.com/dwmkerr/hacker-laws/releases">release</a> page for older versions.</p>
<p>A new version of the eBook is created automatically when a new version tag is pushed.</p>
        
      </section>
      
      <section id="podcast">
        <h2 id="podcast">Podcast</h2>
<p>Hacker Laws has been featured in <a href="https://changelog.com/podcast/403">The Changelog</a>, you can check out the Podcast episode with the link below:</p>
<p><a href="https://changelog.com/podcast/403" target="_blank"><img src="https://hacker-laws.com/images/changelog-podcast.png" width="800px" alt="Changelog Podcast Image"></a></p>
        
      </section>
      
      <section id="translations">
        <h2 id="translations">Translations</h2>
<p>Thanks to a number of wonderful contributors, Hacker Laws is available in a number of languages. Please consider sponsoring moderators!</p>
<p>| Language | Moderator | Status |
|----------|-----------|--------|
| <a href="https://hacker-laws.com/translations/ar-AR.md">AR Arabic / Arabic</a> | <a href="https://github.com/a0m0rajab">Abdurrahman Rajab - a0m0rajab</a> | . |
| <a href="https://hacker-laws.com/translations/pt-BR.md">🇮🇩 Bahasa Indonesia / Indonesian</a> | <a href="https://github.com/arywidiantara">arywidiantara</a> | <a href="https://gitlocalize.com/repo/2513/id?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/id/badge.svg"></a> |
| <a href="https://hacker-laws.com/translations/pt-BR.md">🇧🇷 Brasileiro / Brazilian</a> | <a href="https://github.com/eugenioamn">Eugênio Moreira</a>, <a href="https://github.com/leofc97">Leonardo Costa</a> | <a href="https://gitlocalize.com/repo/2513/pt-BR?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/pt-BR/badge.svg"></a> |
| <a href="https://github.com/nusr/hacker-laws-zh">🇨🇳 中文 / Chinese</a> | <a href="https://github.com/nusr">Steve Xu</a> | Partially complete |
| <a href="https://hacker-laws.com/translations/de.md">🇩🇪 Deutsch / German</a> | <a href="https://github.com/viktodergunov">Vikto</a> | <a href="https://gitlocalize.com/repo/2513/de?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/de/badge.svg"></a> |
| <a href="https://hacker-laws.com/translations/fr.md">🇫🇷 Français / French</a> | <a href="https://github.com/KevinBockelandt">Kevin Bockelandt</a> | <a href="https://gitlocalize.com/repo/2513/fr?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/fr/badge.svg"></a> |
| <a href="https://hacker-laws.com/translations/el.md">🇬🇷 ελληνικά / Greek</a> | <a href="https://github.com/0gap">Panagiotis Gourgaris</a> | <a href="https://gitlocalize.com/repo/2513/el?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/el/badge.svg"></a> |
| <a href="https://github.com/csparpa/hacker-laws-it">🇮🇹 Italiano / Italian</a> | <a href="https://github.com/csparpa">Claudio Sparpaglione</a> | Partially complete |
| <a href="https://hacker-laws.com/translations/jp.md">🇯🇵 JP 日本語 / Japanese</a> | <a href="https://github.com/freddiefujiwara">Fumikazu Fujiwara</a>| <a href="https://gitlocalize.com/repo/2513/ja?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/ja/badge.svg"></a> |
| <a href="https://github.com/codeanddonuts/hacker-laws-kr">🇰🇷 한국어 / Korean</a> | <a href="https://github.com/codeanddonuts">Doughnut</a> | Partially complete |
| <a href="https://hacker-laws.com/translations/lv.md">🇱🇻 Latviešu Valoda / Latvian</a> | <a href="https://github.com/iegik">Arturs Jansons</a> | <a href="https://gitlocalize.com/repo/2513/lv?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/lv/badge.svg"></a> |
| <a href="https://hacker-laws.com/translations/fa.md">🇮🇷 فارسی / Persian</a> | <a href="https://github.com/MEgooneh">MohammadErfan Gooneh</a> | . |
| <a href="https://hacker-laws.com/translations/pl.md">🇵🇱 Polski / Polish</a> | <a href="https://github.com/k0gen">Mariusz Kogen</a> | <a href="https://gitlocalize.com/repo/2513/pl?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/pl/badge.svg"></a> |
| <a href="https://github.com/solarrust/hacker-laws">🇷🇺 Русская версия / Russian</a> | <a href="https://github.com/solarrust">Alena Batitskaya</a> | Partially complete |
| <a href="https://hacker-laws.com/translations/es-ES.md">🇪🇸 Castellano / Spanish</a> | <a href="https://github.com/manuel-rubio">Manuel Rubio</a> (<a href="https://github.com/sponsors/manuel-rubio">Sponsor</a>) | Partially complete |
| <a href="https://github.com/umutphp/hacker-laws-tr">🇹🇷 Türkçe / Turkish</a> | <a href="https://github.com/umutphp">Umut Işık</a> | <a href="https://gitlocalize.com/repo/2513/tr?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/tr/badge.svg"></a> |
| <a href="https://hacker-laws.com/translations/uk.md">🇺🇦 українська мова / Ukrainian</a> | <a href="https://github.com/troyane">Nazar</a>, <a href="https://github.com/HelgaLastivka">Helga Lastivka</a> | <a href="https://gitlocalize.com/repo/2513/uk?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/uk/badge.svg"></a> |
| <a href="https://hacker-laws.com/translations/vu.md">🇻🇳 Tiếng Việt / Vietnamese</a>                      | <a href="https://github.com/truonghoangnguyen">Nguyên</a>, <a href="https://github.com/truonghoangnguyen">Trương Hoàng</a> | <a href="https://gitlocalize.com/repo/2513/vi?utm_source=badge"><img alt="gitlocalized " src="https://gitlocalize.com/repo/2513/vi/badge.svg"></a> |</p>
<p>If you would like to update a translation, follow the <a href="https://github.com/dwmkerr/hacker-laws/blob/main/.github/contributing.md#translations">Translators Contributor Guide</a>.</p>
        
      </section>
      
      
      
      <section id="contributing">
        <h2 id="contributing">Contributing</h2>
<p>Please do contribute! <a href="https://github.com/dwmkerr/hacker-laws/issues/new">Raise an issue</a> if you'd like to suggest an addition or change, or <a href="https://github.com/dwmkerr/hacker-laws/compare">Open a pull request</a> to propose your own changes.</p>
<p>Please be sure to read the <a href="https://hacker-laws.com/.github/contributing.md">Contributing Guidelines</a> for requirements on text, style and so on. Please be aware of the <a href="https://hacker-laws.com/.github/CODE_OF_CONDUCT.md">Code of Conduct</a> when engaging in discussions on the project.</p>
        
      </section>
      
      <section id="todo">
        <h2 id="todo">TODO</h2>
<p>Hi! If you land here, you've clicked on a link to a topic I've not written up yet, sorry about this - this is work in progress!</p>
<p>Feel free to <a href="https://github.com/dwmkerr/hacker-laws/issues">Raise an Issue</a> requesting more details, or <a href="https://github.com/dwmkerr/hacker-laws/pulls">Open a Pull Request</a> to submit your proposed definition of the topic.</p>
        
      </section>
      

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rust Any part 3: we have upcasts (154 pts)]]></title>
            <link>https://lucumr.pocoo.org/2025/3/27/any-upcast/</link>
            <guid>43523238</guid>
            <pubDate>Sun, 30 Mar 2025 11:15:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lucumr.pocoo.org/2025/3/27/any-upcast/">https://lucumr.pocoo.org/2025/3/27/any-upcast/</a>, See on <a href="https://news.ycombinator.com/item?id=43523238">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
  

  
  <p data-date="2025-03-27T00:00:00">written on Thursday, March 27, 2025</p>
  

  <p>Three years ago I shared the <a href="https://lucumr.pocoo.org/2022/1/7/as-any-hack/">As-Any Hack</a> on
this blog.  That hack is a way to get upcasting to supertraits working on
stable Rust.  To refresh your memory, the goal was to make something like
this work:</p>
<div><pre><span></span><span>#[derive(Debug)]</span><span></span>
<span>struct</span> <span>AnyBox</span><span>(</span><span>Box</span><span>&lt;</span><span>dyn</span><span> </span><span>DebugAny</span><span>&gt;</span><span>);</span><span></span>

<span>trait</span><span> </span><span>DebugAny</span>: <span>Any</span><span> </span><span>+</span><span> </span><span>Debug</span><span> </span><span>{}</span><span></span>

<span>impl</span><span>&lt;</span><span>T</span>: <span>Any</span><span> </span><span>+</span><span> </span><span>Debug</span><span> </span><span>+</span><span> </span><span>'</span><span>static</span><span>&gt;</span><span> </span><span>DebugAny</span><span> </span><span>for</span><span> </span><span>T</span><span> </span><span>{}</span><span></span>
</pre></div>
<p>The problem? Even though <cite>DebugAny</cite> inherits from <cite>Any</cite>, Rust wouldn't let you
use methods from <cite>Any</cite> on a <cite>dyn DebugAny</cite>.  So while you could call
<cite>DebugAny</cite> methods just fine, trying to use <cite>downcast_ref</cite> from <cite>Any</cite> (the
reason to use Any in the first place) would fail:</p>
<div><pre><span></span><span>fn</span> <span>main</span><span>()</span><span> </span><span>{</span><span></span>
<span>    </span><span>let</span><span> </span><span>any_box</span><span> </span><span>=</span><span> </span><span>AnyBox</span><span>(</span><span>Box</span>::<span>new</span><span>(</span><span>42</span><span>i32</span><span>));</span><span></span>
<span>    </span><span>dbg!</span><span>(</span><span>any_box</span><span>.</span><span>0.</span><span>downcast_ref</span>::<span>&lt;</span><span>i32</span><span>&gt;</span><span>());</span><span>  </span><span>// Compile error</span>
<span>}</span><span></span>
</pre></div>
<p>The same would happen if we tried to cast it into an <cite>&amp;dyn Any</cite>?  A
compile error again:</p>
<div><pre><span></span><span>fn</span> <span>main</span><span>()</span><span> </span><span>{</span><span></span>
<span>    </span><span>let</span><span> </span><span>any_box</span><span> </span><span>=</span><span> </span><span>AnyBox</span><span>(</span><span>Box</span>::<span>new</span><span>(</span><span>42</span><span>i32</span><span>));</span><span></span>
<span>    </span><span>let</span><span> </span><span>any</span><span> </span><span>=</span><span> </span><span>&amp;*</span><span>any_box</span><span>.</span><span>0</span><span> </span><span>as</span><span> </span><span>&amp;</span><span>dyn</span><span> </span><span>Any</span><span>;</span><span></span>
<span>    </span><span>dbg!</span><span>(</span><span>any</span><span>.</span><span>downcast_ref</span>::<span>&lt;</span><span>i32</span><span>&gt;</span><span>());</span><span></span>
<span>}</span><span></span>
</pre></div>
<p>But there is good news!  As of Rust 1.86, this is finally fixed. The cast
now works:</p>
<pre>[src/main.rs:14:5] any.downcast_ref::&lt;i32&gt;() = Some(
    42,
)
</pre>
<p>At the time of writing, this fix is in the beta channel, but stable
release is just around the corner.  That means a lot of old hacks can
finally be retired.  At least once your MSRV moves up.</p>
<p>Thank you so much to everyone who <a href="https://github.com/rust-lang/rust/issues/65991">worked on this</a> to make it work!</p>


  
  <p>This entry was tagged
    
      <a href="https://lucumr.pocoo.org/tags/rust/">rust</a>
  

      </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The average college student today (221 pts)]]></title>
            <link>https://hilariusbookbinder.substack.com/p/the-average-college-student-today</link>
            <guid>43522966</guid>
            <pubDate>Sun, 30 Mar 2025 10:20:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hilariusbookbinder.substack.com/p/the-average-college-student-today">https://hilariusbookbinder.substack.com/p/the-average-college-student-today</a>, See on <a href="https://news.ycombinator.com/item?id=43522966">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>I’m Gen X. I was pretty young when I earned my PhD, so I’ve been a professor for a long time—over 30 years. If you’re not in academia, or it’s been awhile since you were in college, you might not know this: the students are not what they used to be. The problem with even talking about this topic at all is the knee-jerk response of, “yeah, just another old man complaining about the kids today, the same way everyone has since Gilgamesh. Shake your fist at the clouds, dude.”</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-159700143" href="https://hilariusbookbinder.substack.com/p/the-average-college-student-today#footnote-1-159700143" target="_self" rel="">1</a></span><span> So yes, I’m ready to hear that. Go right ahead. Because people need to know. </span></p><p><span>First, some context. I teach at a regional public university in the US. Our students are  average on just about any dimension you care to name—aspirations, intellect, socio-economic status, physical fitness. They wear hoodies and yoga pants and like Buffalo wings. They listen to Zach Bryan and Taylor Swift. That’s in no way a put-down: I firmly believe that the average citizen deserves a shot at a good education and even more importantly a shot at a good life. All I mean is that our students are </span><em>representative</em><span>; they’re neither the bottom of the academic barrel nor the cream off the top. </span></p><p>As with every college we get a range of students, and our best philosophy majors have gone on to earn PhDs or go to law school. We’re also an NCAA Division 2 school and I watched one of our graduates become an All-Pro lineman for the Saints. These are exceptions, and what I say here does not apply to every single student. But what I’m about to describe are the average students at Average State U.</p><p><span>Most of our students are functionally illiterate. This is not a joke. By “functionally illiterate” I mean “unable to read and comprehend adult novels by people like Barbara Kingsolver, Colson Whitehead, and Richard Powers.” I picked those three authors because they are all recent Pulitzer Prize winners, an objective standard of “serious adult novel.” Furthermore, I’ve read them all and can testify that they are brilliant, captivating writers; we’re not talking about </span><em>Finnegans Wake</em><span> here. But at the same time they aren’t YA, romantasy, or Harry Potter either. </span></p><p><span>I’m not saying our students just prefer genre books or graphic novels or whatever. No, our average graduate literally could not read a serious adult novel cover-to-cover and understand what they read. They just couldn’t do it. They don’t have the desire to try, the vocabulary to grasp what they read,</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-159700143" href="https://hilariusbookbinder.substack.com/p/the-average-college-student-today#footnote-2-159700143" target="_self" rel="">2</a></span><span> and most certainly not the attention span to finish. For them to sit down and try to read a book like </span><em>The Overstory</em><span> might as well be me attempting an Iron Man triathlon: much suffering with zero chance of success. </span></p><p>Students are not absolutely illiterate in the sense of being unable to sound out any words whatsoever. Reading bores them, though. They are impatient to get through whatever burden of reading they have to, and move their eyes over the words just to get it done. They’re like me clicking through a mandatory online HR training. Students get exam questions wrong simply because they didn't even take the time to read the question properly. Reading anything more than a menu is a chore and to be avoided.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg" width="700" height="525" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:525,&quot;width&quot;:700,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:53906,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://hilariusbookbinder.substack.com/i/159700143?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb7bf2e1d-e9da-41fc-b39b-f39291ded07c_700x525.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>The Buffalo wings look good</figcaption></figure></div><p><span>They also lie about it. I wrote the textbook for a course I regularly teach. It’s a fairly popular textbook, so I’m assuming it is not terribly written. I did everything I could to make the writing lively and packed with my most engaging examples. The majority of students don’t read it. Oh, they will come to my office hours (occasionally) because they are bombing the course, and </span><em>tell</em><span> me that they have been doing the reading, but it’s obvious they are lying. The most charitable interpretation is that they looked at some of the words, didn’t understand anything, pretended that counted as reading, and returned to looking at TikTok. </span></p><p><span>This </span><a href="https://pirg.org/wp-content/uploads/2021/02/Fixing-the-Broken-Textbook-Market-3e-February-2021.pdf" rel="">study</a><span> says that 65% of college students reported that they skipped buying or renting a textbook because of cost. I believe they didn’t buy the books, but I’m skeptical that cost is the true reason, as opposed to just the excuse they offer. Yes, I know some texts, especially in the sciences, are expensive. However, the books I assign are low-priced. All texts combined for one of my courses is between $35-$100 and they still don’t buy them. Why buy what you aren’t going to read anyway? Just google it. </span></p><p><span>Even in upper-division courses that students supposedly take out of genuine interest they won’t read. I’m teaching Existentialism this semester. It is entirely primary texts—Dostoevsky, Kierkegaard, Nietzsche, Camus, Sartre. The reading ranges from accessible but challenging to extremely difficult but we’re making a go of it anyway (looking at you, </span><em>Being and Nothingness</em><span>). This is a close textual analysis course. My students come to class without the books, which they probably do not own and definitely did not read. </span></p><p>Their writing skills are at the 8th-grade level. Spelling is atrocious, grammar is random, and the correct use of apostrophes is cause for celebration. Worse is the resistance to original thought. What I mean is the reflexive submission of the cheapest cliché as novel insight. </p><blockquote><p><em>Exam question</em><span>: Describe the attitude of Dostoevsky’s Underground Man towards acting in one’s own self-interest, and how this is connected to his concerns about free will. Are his views self-contradictory?</span></p><p><em>Student</em><span>: With the UGM its all about our journey in life, not the destination. He beleives we need to take time to enjoy the little things becuase life is short and you never gonna know what happens. Sometimes he contradicts himself cause sometimes you say one thing but then you think something else later. It’s all relative.</span></p></blockquote><p>You probably think that’s satire. Either that, or it looks like this:</p><blockquote><p><em>Exam question</em><span>: Describe the attitude of Dostoevsky’s Underground Man towards acting in one’s own self-interest, and how this is connected to his concerns about free will. Are his views self-contradictory?</span></p><p><em>Student</em><span>: Dostoevsky’s </span><em>Underground Man</em><span> paradoxically rejects the idea that people always act in their own self-interest, arguing instead that humans often behave irrationally to assert their free will. He criticizes rationalist philosophies like utilitarianism, which he sees as reducing individuals to predictable mechanisms, and insists that people may choose suffering just to prove their autonomy. However, his stance is self-contradictory—while he champions free will, he is paralyzed by inaction and self-loathing, trapped in a cycle of bitterness. Through this, Dostoevsky explores the tension between reason, free will, and self-interest, exposing the complexities of human motivation.</span></p></blockquote><p><span>That’s right, ChatGPT. The students cheat. I’ve written about cheating in “</span><a href="https://hilariusbookbinder.substack.com/p/why-ai-is-destroying-academic-integrity?r=epq8m" rel="">Why AI is Destroying Academic Integrity</a><span>,” so I won’t repeat it here, but the cheating tsunami has definitely changed what assignments I give. I can’t assign papers any more because I’ll just get AI back, and there’s nothing I can do to make it stop. Sadly, not writing exacerbates their illiteracy; writing is a muscle and dedicated writing is a workout for the mind as well as the pen.</span></p><p>I’m less informed to speak out on this one, but my math prof friends tell me that their students are increasingly less capable and less willing to put in the effort. As a result they have had to make their tests easier with fewer hard problems. When I was a first semester freshman (at a private SLAC, yes, but it wasn’t CalTech) I took Calculus 1. Second semester I took Calculus 2. I don’t think pre-calculus was even a thing back then. Now apparently pre-calc counts as an advanced content course. My psych prof friends who teach statistics have similarly lamented having to water down the content over time.</p><p><span>Symbolic Logic was a requirement when I was a grad student. The course was a cross-listed upper-division undergrad/grad class. Jaegwon Kim taught the course, and our sole textbook was W. V. Quine’s </span><em>Methods of Logic</em><span>, which we worked through in its entirety. I think we spent two weeks on propositional logic before moving on to the predicate calculus. We proved compactness, soundness, and completeness, and probably some other theorems I forget. There is no possible way our students, unless they were math or computer science majors, would survive that class.</span></p><p>The average student has seen college as basically transactional for as long as I’ve been doing this. They go through the motions and maybe learn something along the way, but it is all in service to the only conception of the good life they can imagine: a job with middle-class wages. I’ve mostly made my peace with that, do my best to give them a taste of the life of the mind, and celebrate the successes.</p><p><span>Things have changed. Ted Gioia </span><a href="https://www.honest-broker.com/p/whats-happening-to-students" rel="">describes</a><span> modern students as checked-out, phone-addicted zombies. Troy Jollimore </span><a href="https://thewalrus.ca/i-used-to-teach-students-now-i-catch-chatgpt-cheats" rel="">writes</a><span>, “I once believed my students and I were in this together, engaged in a shared intellectual pursuit. That faith has been obliterated over the past few semesters.” Faculty have seen a </span><a href="https://www.chronicle.com/article/a-stunning-level-of-student-disconnection?" rel="">stunning level of disconnection</a><span>. </span></p><p>What has changed exactly? </p><ul><li><p>Chronic absenteeism. As a friend in Sociology put it, “Attendance is a HUGE problem—many just treat class as optional.” Last semester across all sections, my average student missed two weeks of class. Actually it was more than that, since I’m not counting excused absences or students who eventually withdrew. A friend in Mathematics told me, “Students are less respectful of the university experience —attendance, lateness, e-mails to me about nonsense, less sense of responsibility.” </p></li><li><p>Disappearing students. Students routinely just vanish at some point during the semester. They don’t officially drop or withdraw from the course, they simply quit coming. No email, no notification to anyone in authority about some problem. They just pull an Amelia Earhart. It’s gotten to the point that on the first day of class, especially in lower-division, I tell the students, “look to your right. Now look to your left. One of you will be gone by the end of the semester. Don’t let it be you.”</p></li><li><p>They can’t sit in a seat for 50 minutes. Students routinely get up during a 50 minute class, sometimes just 15 minutes in, and leave the classroom. I’m supposed to believe that they suddenly, urgently need the toilet, but the reality is that they are going to look at their phones. They know I’ll call them out on it in class, so instead they walk out. I’ve even told them to plan ahead and pee before class, like you tell a small child before a road trip, but it has no effect. They can’t make it an hour without getting their phone fix.</p></li><li><p>They want me to do their work for them. During the Covid lockdown, faculty bent over backwards in every way we knew how to accommodate students during an unprecedented (in our lifetimes) health crisis. Now students expect that as a matter of routine. I am frequently asked for my PowerPoint slides, which basically function for me as lecture notes. It is unimaginable to me that I would have ever asked one of my professors for their own lecture notes. No, you can’t have my slides. Get the notes from a classmate. Read the book. Come to office hours for a conversation if you are still confused after the preceding steps. Last week I had an email from a student who essentially asked me to recap an entire week’s worth of lecture material for him prior to yesterday’s midterm. No, I’m not doing that. I’m not writing you a 3000-word email. Try coming to class.</p></li><li><p><span>Pretending to type notes in their laptops. I hate laptops in class, but if I try to ban them the students will just run to Accommodative Services and get them to tell me that the student </span><em>must</em><span> use a laptop or they will explode into tiny pieces. But I know for a fact that note-taking is at best a small part of what they are doing. Last semester I had a good student tell me, “hey you know that kid who sits in front of me with the laptop? Yeah, I thought you should know that all he does in class is gamble on his computer.” Gambling, looking at the socials, whatever, they are not listening to me or participating in discussion. They are staring at a screen.</span></p></li><li><p>Indifference. Like everyone else, I allow students to make up missed work if they have an excused absence. No, you can’t make up the midterm because you were  hungover and slept through your alarm, but you can if you had Covid. Then they just don’t show up. A missed quiz from a month ago might as well have happened in the Stone Age; students can’t be bothered to make it up or even talk to me about it because they just don’t care.</p></li><li><p><a href="https://magdalene.substack.com/p/its-obviously-the-phones" rel="">It’s the phones, stupid</a><span>. They are absolutely addicted to their phones. When I go work out at the Campus Rec Center, easily half of the students there are just sitting on the machines scrolling on their phones. I was talking with a retired faculty member at the Rec this morning who works out all the time. He said he has done six sets waiting for a student to put down their phone and get off the machine he wanted. The students can’t get off their phones for an hour to do a voluntary activity they chose for fun. Sometimes I’m amazed they ever leave their </span><a href="https://www.urbandictionary.com/define.php?term=goon" rel="">goon caves</a><span> at all.</span></p></li></ul><p>I don’t blame K-12 teachers. This is not an educational system problem, this is a societal problem. What am I supposed to do? Keep standards high and fail them all? That’s not an option for untenured faculty who would like to keep their jobs. I’m a tenured full professor. I could probably get away with that for a while, but sooner or later the Dean’s going to bring me in for a sit-down. Plus, if we flunk out half the student body and drive the university into bankruptcy, all we’re doing is depriving the good students of an education. </p><p>We’re told to meet the students where they are, flip the classroom, use multimedia, just be more entertaining, get better. As if rearranging the deck chairs just the right way will stop the Titanic from going down. As if it is somehow the fault of the faculty. It’s not our fault. We’re doing the best we can with what we’ve been given.</p><p>All this might sound like an angry rant. I’m not sure. I’m not angry, though, not at all. I’m just sad. One thing all faculty have to learn is that the students are not us. We can’t expect them all to burn with the sacred fire we have for our disciplines, to see philosophy, psychology, math, physics, sociology or economics as the divine light of reason in a world of shadow. Our job is to kindle that flame, and we’re trying to get that spark to catch, but it is getting harder and harder and we don’t know what to do.</p><div data-attrs="{&quot;url&quot;:&quot;https://hilariusbookbinder.substack.com/p/the-average-college-student-today?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><p>Thanks for reading Scriptorium Philosophia! This post is public so feel free to share it.</p><p data-attrs="{&quot;url&quot;:&quot;https://hilariusbookbinder.substack.com/p/the-average-college-student-today?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a href="https://hilariusbookbinder.substack.com/p/the-average-college-student-today?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Four Lectures on Standard ML (1989) [pdf] (125 pts)]]></title>
            <link>https://www.cs.tufts.edu/~nr/cs257/archive/mads-tofte/four-lectures.pdf</link>
            <guid>43522363</guid>
            <pubDate>Sun, 30 Mar 2025 08:14:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cs.tufts.edu/~nr/cs257/archive/mads-tofte/four-lectures.pdf">https://www.cs.tufts.edu/~nr/cs257/archive/mads-tofte/four-lectures.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=43522363">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Cloud-Ready Postgres MCP Server (153 pts)]]></title>
            <link>https://github.com/stuzero/pg-mcp</link>
            <guid>43520953</guid>
            <pubDate>Sun, 30 Mar 2025 03:14:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/stuzero/pg-mcp">https://github.com/stuzero/pg-mcp</a>, See on <a href="https://news.ycombinator.com/item?id=43520953">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">PostgreSQL Model Context Protocol (PG-MCP) Server</h2><a id="user-content-postgresql-model-context-protocol-pg-mcp-server" aria-label="Permalink: PostgreSQL Model Context Protocol (PG-MCP) Server" href="#postgresql-model-context-protocol-pg-mcp-server"></a></p>
<p dir="auto">A Model Context Protocol (MCP) server for PostgreSQL databases with enhanced capabilities for AI agents.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Overview</h2><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">PG-MCP is a server implementation of the <a href="https://github.com/modelcontextprotocol/mcp">Model Context Protocol</a> for PostgreSQL databases. It provides a comprehensive API for AI agents to discover, connect to, query, and understand PostgreSQL databases through MCP's resource-oriented architecture.</p>
<p dir="auto">This implementation builds upon and extends the <a href="https://github.com/modelcontextprotocol/servers/tree/main/src/postgres">reference Postgres MCP implementation</a> with several key enhancements:</p>
<ol dir="auto">
<li><strong>Full Server Implementation</strong>: Built as a complete server with SSE transport for production use</li>
<li><strong>Multi-database Support</strong>: Connect to multiple PostgreSQL databases simultaneously</li>
<li><strong>Rich Catalog Information</strong>: Extracts and exposes table/column descriptions from the database catalog</li>
<li><strong>Extension Context</strong>: Provides detailed YAML-based knowledge about PostgreSQL extensions like PostGIS and pgvector</li>
<li><strong>Query Explanation</strong>: Includes a dedicated tool for analyzing query execution plans</li>
<li><strong>Robust Connection Management</strong>: Proper lifecycle for database connections with secure connection ID handling</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Connection Management</h3><a id="user-content-connection-management" aria-label="Permalink: Connection Management" href="#connection-management"></a></p>
<ul dir="auto">
<li><strong>Connect Tool</strong>: Register PostgreSQL connection strings and get a secure connection ID</li>
<li><strong>Disconnect Tool</strong>: Explicitly close database connections when done</li>
<li><strong>Connection Pooling</strong>: Efficient connection management with pooling</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Query Tools</h3><a id="user-content-query-tools" aria-label="Permalink: Query Tools" href="#query-tools"></a></p>
<ul dir="auto">
<li><strong>pg_query</strong>: Execute read-only SQL queries using a connection ID</li>
<li><strong>pg_explain</strong>: Analyze query execution plans in JSON format</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Schema Discovery Resources</h3><a id="user-content-schema-discovery-resources" aria-label="Permalink: Schema Discovery Resources" href="#schema-discovery-resources"></a></p>
<ul dir="auto">
<li>List schemas with descriptions</li>
<li>List tables with descriptions and row counts</li>
<li>Get column details with data types and descriptions</li>
<li>View table constraints and indexes</li>
<li>Explore database extensions</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Data Access Resources</h3><a id="user-content-data-access-resources" aria-label="Permalink: Data Access Resources" href="#data-access-resources"></a></p>
<ul dir="auto">
<li>Sample table data (with pagination)</li>
<li>Get approximate row counts</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Extension Context</h3><a id="user-content-extension-context" aria-label="Permalink: Extension Context" href="#extension-context"></a></p>
<p dir="auto">Built-in contextual information for PostgreSQL extensions like:</p>
<ul dir="auto">
<li><strong>PostGIS</strong>: Spatial data types, functions, and examples</li>
<li><strong>pgvector</strong>: Vector similarity search functions and best practices</li>
</ul>
<p dir="auto">Additional extensions can be easily added via YAML config files.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Prerequisites</h3><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<ul dir="auto">
<li>Python 3.13+</li>
<li>PostgreSQL database(s)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Using Docker</h3><a id="user-content-using-docker" aria-label="Permalink: Using Docker" href="#using-docker"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Clone the repository
git clone https://github.com/stuzero/pg-mcp.git
cd pg-mcp

# Build and run with Docker Compose
docker-compose up -d"><pre><span><span>#</span> Clone the repository</span>
git clone https://github.com/stuzero/pg-mcp.git
<span>cd</span> pg-mcp

<span><span>#</span> Build and run with Docker Compose</span>
docker-compose up -d</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Manual Installation</h3><a id="user-content-manual-installation" aria-label="Permalink: Manual Installation" href="#manual-installation"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Clone the repository
git clone https://github.com/stuzero/pg-mcp.git
cd pg-mcp

# Create and activate a virtual environment
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate

# Install using uv
uv sync --frozen

# Run the server
python -m server.app"><pre><span><span>#</span> Clone the repository</span>
git clone https://github.com/stuzero/pg-mcp.git
<span>cd</span> pg-mcp

<span><span>#</span> Create and activate a virtual environment</span>
python -m venv .venv
<span>source</span> .venv/bin/activate  <span><span>#</span> On Windows: .venv\Scripts\activate</span>

<span><span>#</span> Install using uv</span>
uv sync --frozen

<span><span>#</span> Run the server</span>
python -m server.app</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Testing the Server</h3><a id="user-content-testing-the-server" aria-label="Permalink: Testing the Server" href="#testing-the-server"></a></p>
<p dir="auto">The repository includes test scripts to verify server functionality:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Basic server functionality test
python test.py &quot;postgresql://username:password@hostname:port/database&quot;

# Claude-powered natural language to SQL conversion
python client/claude_cli.py &quot;Show me the top 5 customers by total sales&quot;"><pre><span><span>#</span> Basic server functionality test</span>
python test.py <span><span>"</span>postgresql://username:password@hostname:port/database<span>"</span></span>

<span><span>#</span> Claude-powered natural language to SQL conversion</span>
python client/claude_cli.py <span><span>"</span>Show me the top 5 customers by total sales<span>"</span></span></pre></div>
<p dir="auto">The <code>claude_cli.py</code> script requires environment variables:</p>
<div data-snippet-clipboard-copy-content="# .env file
DATABASE_URL=postgresql://username:password@hostname:port/database
ANTHROPIC_API_KEY=your-anthropic-api-key
PG_MCP_URL=http://localhost:8000/sse"><pre><code># .env file
DATABASE_URL=postgresql://username:password@hostname:port/database
ANTHROPIC_API_KEY=your-anthropic-api-key
PG_MCP_URL=http://localhost:8000/sse
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">For AI Agents</h3><a id="user-content-for-ai-agents" aria-label="Permalink: For AI Agents" href="#for-ai-agents"></a></p>
<p dir="auto">Example prompt for use with agents:</p>
<div data-snippet-clipboard-copy-content="Use the PostgreSQL MCP server to analyze the database. 
Available tools:
- connect: Register a database connection string and get a connection ID
- disconnect: Close a database connection
- pg_query: Execute SQL queries using a connection ID
- pg_explain: Get query execution plans

You can explore schema resources via:
pgmcp://{conn_id}/schemas
pgmcp://{conn_id}/schemas/{schema}/tables
pgmcp://{conn_id}/schemas/{schema}/tables/{table}/columns"><pre><code>Use the PostgreSQL MCP server to analyze the database. 
Available tools:
- connect: Register a database connection string and get a connection ID
- disconnect: Close a database connection
- pg_query: Execute SQL queries using a connection ID
- pg_explain: Get query execution plans

You can explore schema resources via:
pgmcp://{conn_id}/schemas
pgmcp://{conn_id}/schemas/{schema}/tables
pgmcp://{conn_id}/schemas/{schema}/tables/{table}/columns
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Architecture</h2><a id="user-content-architecture" aria-label="Permalink: Architecture" href="#architecture"></a></p>
<p dir="auto">This server is built on:</p>
<ul dir="auto">
<li><strong>MCP</strong>: The Model Context Protocol foundation</li>
<li><strong>FastMCP</strong>: Python library for MCP</li>
<li><strong>asyncpg</strong>: Asynchronous PostgreSQL client</li>
<li><strong>YAML</strong>: For extension context information</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Security Considerations</h2><a id="user-content-security-considerations" aria-label="Permalink: Security Considerations" href="#security-considerations"></a></p>
<ul dir="auto">
<li>The server runs in read-only mode by default (enforced via transaction settings)</li>
<li>Connection details are never exposed in resource URLs, only opaque connection IDs</li>
<li>Database credentials only need to be sent once during the initial connection</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Contributions are welcome! Areas for expansion:</p>
<ul dir="auto">
<li>Additional PostgreSQL extension context files</li>
<li>More schema introspection resources</li>
<li>Query optimization suggestions</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Trump suggests Tesla vandals should face 20 years jail, be sent to El Salvador (128 pts)]]></title>
            <link>https://abc7.com/post/president-trump-suggests-tesla-vandals-should-face-20-years-jail-sent-el-salvador/16064219/</link>
            <guid>43520632</guid>
            <pubDate>Sun, 30 Mar 2025 02:13:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://abc7.com/post/president-trump-suggests-tesla-vandals-should-face-20-years-jail-sent-el-salvador/16064219/">https://abc7.com/post/president-trump-suggests-tesla-vandals-should-face-20-years-jail-sent-el-salvador/16064219/</a>, See on <a href="https://news.ycombinator.com/item?id=43520632">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="prism-article-body"><p><a data-testid="prism-linkbase" href="https://abc7.com/tag/donald-trump/">President Donald Trump</a> seemed to issue a warning to individuals who participate in <a data-testid="prism-linkbase" href="https://abc7.com/tag/tesla/">Tesla</a> vandalisms, as reports of destruction to vehicles, dealerships and charging stations surge across the country.</p><p>Early Friday morning, Trump posted on his social media platform: "People that get caught sabotaging Teslas will stand a very good chance of going to jail for up to twenty years, and that includes funders. WE ARE LOOKING FOR YOU!!!"</p><p>He also suggested those found guilty of participating in Tesla-related crimes could be sent to prison in El Salvador, referring to the administration's controversial move to deport alleged gang members to the country after Trump signed a proclamation invoking the <a data-testid="prism-linkbase" href="https://abc7.com/post/president-donald-trump-invokes-wartime-alien-enemies-act-1798-declare-invasion-gangs-speed-deportations/16028956/" target="_blank">Alien Enemies Act</a> even though a court order temporarily blocked the authority.</p><p>"I look forward to watching the sick terrorist thugs get 20 year jail sentences for what they are doing to Elon Musk and Tesla," Trump said in a <a data-testid="prism-linkbase" href="https://truthsocial.com/@realDonaldTrump/114200244380161257" target="_blank">posting</a>. "Perhaps they would serve them in the prisons of El Salvador, which have become so recently famous for such lovely conditions."</p><p>Recent attacks aimed at Tesla have been reported in Seattle, Kansas City, Las Vegas, Charleston and other cities across the United States since <a data-testid="prism-linkbase" href="https://abc7.com/tag/elon-musk/">Tesla CEO Elon Musk</a> began his role with the Trump administration's Department of Government Efficiency, or DOGE.</p><p>In a public announcement Friday evening, the FBI said incidents targeting Teslas have been recorded in at least nine states since January, including arson, gunfire and graffiti.</p><p>"These criminal actions appear to have been conducted by lone offenders, and all known incidents occurred at night," the FBI said in the public service announcement. "Individuals require little planning to use rudimentary tactics, such as improvised incendiary devices and firearms, and may perceive these attacks as victimless property crimes."</p><p>The FBI urged the public to be vigilant and to look out for suspicious activity in areas around Tesla dealerships.</p><p>When asked about his comments at the White House on Friday afternoon, Trump called the vandalism suspects "terrorists" and <a data-testid="prism-linkbase" href="https://abc7.com/post/donald-trump-calls-tesla-vandalism-suspects-terrorists-compares-actions-jan-6-vowing-send-el-salvador-prisons/16063808/">appeared to argue what was happening with Tesla vehicles was worse than what happened during the Jan. 6 riots at the Capitol.</a></p><p>"You didn't have that on Jan. 6, I can tell you. You didn't have anything like that on Jan. 6, which is sort of amazing," Trump said.</p><p>Three people have been charged for their alleged involvement in recent attacks against Tesla properties in Salem, Oregon; Loveland, Colorado; and North Charleston, South Carolina. <a data-testid="prism-linkbase" href="https://www.justice.gov/usao-or/pr/salem-man-faces-federal-charge-illegally-possessing-molotov-cocktails" target="_blank">Adam Lansky</a> of Salem was charged with illegally possessing an unregistered destructive device on March 5, <a data-testid="prism-linkbase" href="https://www.justice.gov/usao-co/pr/lyons-resident-charged-connection-series-incidents-loveland-tesla-dealership#::text=DENVER%20%E2%80%93%20The%20United%20States%20Attorney's,Tesla%20dealership%20in%20Loveland%2C%20Colorado." target="_blank">Lucy Grace Nelson</a> of Lyons, Colorado, was charged with one count of malicious destruction of property on Feb. 27 and <a data-testid="prism-linkbase" href="https://www.justice.gov/usao-sc/pr/james-island-man-charged-arson-n-charleston-tesla-charging-station" target="_blank">Daniel Clarke-Pounder</a> of North Charleston was charged with arson on March 15, according to federal prosecutors.</p><p>Both Lansky and Clarke-Pounder have not entered any pleas, but Nelson pleaded not guilty on March 11, according to court records.</p><p>Attorney General Pam Bondi also spoke out against the Tesla vandalisms, saying on Thursday the three suspects will face the "full force of the law" for allegedly using Molotov cocktails to set fire to the electric vehicles and charging stations.</p><p>"The days of committing crimes without consequence have ended," Bondi said in a statement. "Let this be a warning: if you join this wave of domestic terrorism against Tesla properties, the Department of Justice will put you behind bars."</p><p><strong>RELATED: </strong><a data-testid="prism-linkbase" href="https://abc7.com/post/attorney-general-calls-tesla-arson-attacks-nothing-short-domestic-terrorism/16044517/" target="_blank"> Attorney general calls Tesla arson attacks 'nothing short of domestic terrorism'</a></p><p>More Tesla incidents continue to pop up across the country, with the latest occurring in Fargo, North Dakota, early Friday morning, where fire crews found "a small fire in wood chips at the base of the electric vehicle chargers in the parking lot," according to the Fargo Fire Department.</p><p>Officials said the fire is considered "suspicious" and the cause of the fire is under investigation. It is unclear whether the fire damaged the chargers, authorities said.</p><p>The New York City Police Department is also asking for the public's help in identifying two men who spray-painted a swastika on a Cyber Truck on Thursday. The incident is being investigated by the NYPD's Hate Crime Task Force.</p><p>In addition to the company dealing with the recent attacks, Tesla's stocks have tumbled nearly 48% this year and in recent weeks, four top officers at the company have sold off $100 million in stock, according to filings with the U.S. Securities and Exchange Commission.</p><p>Musk, the owner of X, reposted reactions to Trump's comments on Friday, <a data-testid="prism-linkbase" href="https://x.com/Rothmus/status/1902928588959064525" target="_blank">including one</a> that said "ESPECIALLY the funders" should be held responsible for these attacks.</p><p>A spokesperson for Tesla did not immediately respond to ABC News' request for comment.</p></div><p>Copyright © 2025 KABC Television, LLC. All rights reserved.</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My TV started playing a video in full screen by itself. What happened? (361 pts)]]></title>
            <link>https://support.vizio.com/s/article/Ambient-or-Scenic-Mode-showing-on-my-TV?language=en_US</link>
            <guid>43520074</guid>
            <pubDate>Sun, 30 Mar 2025 00:41:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://support.vizio.com/s/article/Ambient-or-Scenic-Mode-showing-on-my-TV?language=en_US">https://support.vizio.com/s/article/Ambient-or-Scenic-Mode-showing-on-my-TV?language=en_US</a>, See on <a href="https://news.ycombinator.com/item?id=43520074">Hacker News</a></p>
Couldn't get https://support.vizio.com/s/article/Ambient-or-Scenic-Mode-showing-on-my-TV?language=en_US: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Buy once, use forever A directory of one-time purchase software. Add yours (216 pts)]]></title>
            <link>https://buyoncesoftware.com/</link>
            <guid>43519998</guid>
            <pubDate>Sun, 30 Mar 2025 00:28:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://buyoncesoftware.com/">https://buyoncesoftware.com/</a>, See on <a href="https://news.ycombinator.com/item?id=43519998">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Trump's Police Are Now Disappearing Students for Their Op-Eds (155 pts)]]></title>
            <link>https://www.techdirt.com/2025/03/27/trumps-secret-police-are-now-disappearing-students-for-their-op-eds/</link>
            <guid>43519864</guid>
            <pubDate>Sun, 30 Mar 2025 00:00:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.techdirt.com/2025/03/27/trumps-secret-police-are-now-disappearing-students-for-their-op-eds/">https://www.techdirt.com/2025/03/27/trumps-secret-police-are-now-disappearing-students-for-their-op-eds/</a>, See on <a href="https://news.ycombinator.com/item?id=43519864">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="storywrap-487790">

				


				


				<h3>from the <i>found-the-campus-free-speech-crisis</i> dept</h3>
				


				<p>For years, we’ve been hearing breathless warnings about a “campus free speech crisis” from self-proclaimed free speech warriors. Their evidence? College students doing what college students have done for generations: protesting speakers they disagree with, challenging institutional policies, and yes, sometimes attempting to create heckler’s vetoes.</p>
<p>This kind of campus activism — while occasionally messy and uncomfortable — has been a feature of American higher education since the 1960s. It’s how young people learn to engage with ideas and exercise their own speech rights. Sometimes that activism is silly and sometimes it’s righteous. Often it’s somewhere in between, but it’s kind of a part of being a college student, and learning what you believe in.</p>
<p>But now we face an <em>actual</em> free speech crisis on campus that goes beyond just speech. It’s an attack on personal freedoms, due process, and liberty. The federal government isn’t just pressuring universities over speech — it’s <strong>literally disappearing students for their political expression</strong>. If you support actual free speech, now is the time to speak up.</p>
<p>The latest example of this authoritarian overreach is particularly chilling: Rumeysa Ozturk, a Turkish PhD student at Tufts who was here legally on a student visa, <a href="https://www.wgbh.org/news/local/2025-03-26/tufts-international-graduate-student-taken-into-ice-custody">was abducted by masked agents</a> in broad daylight. She was disappeared without due process or explanation — only later did we learn she had been renditioned to a detention center in Louisiana.</p>
<p>The video of her kidnapping (because that’s what it was) is terrifying enough:</p>
<p><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/YGDVKBdq3Gw?si=GwMrd-S7oC94zfDS" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></p>
<p>If you listen, you hear her quite understandably surprised reaction with a scream, and then she asks to call the police, only to be told “we’re the police.” None of them are in uniforms. Most of them are masked.</p>
<p>Her supposed crime? A year ago, she co-authored an op-ed in The Tufts Daily <a href="https://www.tuftsdaily.com/article/2024/03/4ftk27sm6jkj">criticizing her university administration’s stance</a> on the Israel-Palestine conflict. Not advocating violence. Not supporting terrorism. Not even criticizing the U.S. government. Just exercising core First Amendment rights by publishing criticism of her own university’s policies in a student newspaper.</p>
<p>The government has attempted to justify similar renditions (and there is a growing list of victims) by falsely painting targets as “terrorist supporters” — a dangerous conflation of political speech supporting Palestinian rights with support for terrorism. But even those cases typically involved people involved in public protests, which are themselves constitutionally protected activities. This case goes even further: disappearing someone over an innocuous piece of student journalism published a year ago.</p>
<p>Everyone should be alarmed. <em>Everyone</em> should be demanding that she (and others) be released and that ICE and DHS stop this horrifying and unconscionable practice. <em>Everyone</em> should be demanding that Trump and Marco Rubio and Kristi Noem stop this Gestapo bullshit.</p>
<p>Even if — <em>especially</em> if — you disagree with her views on Israel and Palestine. This isn’t about that. This is about the very concept of freedom. The rights everyone — even visitors — are supposed to have in this country. The right to speak your mind, even if (especially if!) it is opposed to those in power. The right to walk down a street without being kidnapped. The right to due process.</p>
<p>If the government genuinely believed Ozturk had violated immigration law or her visa terms (she hadn’t), there are established legal procedures to address such issues. Instead, they chose to send masked goons to disappear her without warning or due process — a chilling message to every other international student that their supposed right to express political opinions comes with the risk of rendition.</p>
<p>And, of course, the implied threat is that this won’t stop at international students.</p>
<p>But the Trump administration believes not in fundamental rights. It only believes in the cowardly authoritarian displays of theatrical power. Because they are weak and insecure. They are so frightened by a random college student op-ed or a protest, they are taking to disappearing people with no due process for their speech.</p>
<p>This won’t stop unless everyone speaks up and demands that the government respect the rights of everyone. These are bullying and intimidation tactics of weak insecure bullies, who know they cannot win in the marketplace of ideas. They are scared and pathetic, knowing that their beliefs are bad, and that the public doesn’t support them. Thus, their only response is an impotent rage, an attempt to replace respect and fair treatment with authoritarian tactics in hopes of intimidating people into silence and capitulation.</p>
<p>These are scary times, but people need to stop cowering. They need to speak up. They need to show up. They need to say that this is not the America any of us were taught to believe in. This is not the America of freedom and rights.</p>
<p>This is a desecration of the high (and often unmet) ideals of what America is supposed to be striving for. This is spitting on the fundamental concepts of the American project.</p>
<p>And where are all those self-proclaimed defenders of campus free speech now? The same voices who treated student protesters as an existential threat to academic freedom are conspicuously silent as government agents literally kidnap students for their political expression. Their silence exposes their previous concerns as purely performative.</p>
<p>This isn’t just about free speech anymore — it’s about whether we’ll allow the government to normalize disappearing people for their political views. Everyone who claims to care about constitutional rights and academic freedom needs to speak up now. Because those who remain silent in the face of such clear authoritarian overreach are complicit.</p>

				
<p>

	Filed Under: <a href="https://www.techdirt.com/tag/1st-amendment/" rel="tag">1st amendment</a>, <a href="https://www.techdirt.com/tag/campus-speech/" rel="tag">campus speech</a>, <a href="https://www.techdirt.com/tag/dhs/" rel="tag">dhs</a>, <a href="https://www.techdirt.com/tag/donald-trump/" rel="tag">donald trump</a>, <a href="https://www.techdirt.com/tag/free-speech/" rel="tag">free speech</a>, <a href="https://www.techdirt.com/tag/ice/" rel="tag">ice</a>, <a href="https://www.techdirt.com/tag/kidnapping/" rel="tag">kidnapping</a>, <a href="https://www.techdirt.com/tag/kristi-noem/" rel="tag">kristi noem</a>, <a href="https://www.techdirt.com/tag/marco-rubio/" rel="tag">marco rubio</a>, <a href="https://www.techdirt.com/tag/op-ed/" rel="tag">op-ed</a>, <a href="https://www.techdirt.com/tag/rendition/" rel="tag">rendition</a>, <a href="https://www.techdirt.com/tag/rumeysa-ozturk/" rel="tag">rumeysa ozturk</a>
	<br>

	
</p>

			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Towards fearless SIMD, 7 years later (173 pts)]]></title>
            <link>https://linebender.org/blog/towards-fearless-simd/</link>
            <guid>43519823</guid>
            <pubDate>Sat, 29 Mar 2025 23:52:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://linebender.org/blog/towards-fearless-simd/">https://linebender.org/blog/towards-fearless-simd/</a>, See on <a href="https://news.ycombinator.com/item?id=43519823">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
                

<h3>Raph Levien, March 29, 2025</h3>
<p>Seven years ago I wrote a blog post <a href="https://raphlinus.github.io/rust/simd/2018/10/19/fearless-simd.html">Towards fearless SIMD</a>, outlining a vision for Rust as a compelling language for writing fast SIMD programs.
Where are we now?</p>
<p>Unfortunately, the present-day experience of writing SIMD in Rust is still pretty rough, though there has been progress, and there are promising efforts underway.
As in the previous post, this post will outline a possible vision.</p>
<p>Up to now, Linebender projects have not used SIMD, but that is changing.
As we work on CPU/GPU hybrid rendering techniques, it's clear that we need SIMD to get maximal performance of the CPU side.
We also see opportunities in faster color conversion and accelerated 2D geometry primitives.</p>
<p>This blog post is also a companion to a <a href="https://www.youtube.com/watch?v=y0WcCUKxk50">podcast</a> I recorded recently with André Popovitch.
That podcast is a good introduction to SIMD concepts, while this blog post focuses more on future directions.</p>
<h2 id="a-simple-example">A simple example</h2>
<p>As a running example, we'll compute a <a href="https://raphlinus.github.io/audio/2018/09/05/sigmoid.html">sigmoid</a> function for a vector of 4 values.
The scalar version is as follows:</p>
<pre data-lang="rust"><code data-lang="rust"><span>fn </span><span>sigmoid</span><span>(</span><span>x</span><span>: [</span><span>f32</span><span>; 4]) -&gt; [</span><span>f32</span><span>; </span><span>4</span><span>] {
</span><span>    x.</span><span>map</span><span>(|</span><span>y</span><span>| y / (</span><span>1.0 </span><span>+ y * y).</span><span>sqrt</span><span>())
</span><span>}
</span></code></pre>
<p>This particular simple code autovectorizes nicely (<a href="https://rust.godbolt.org/z/TfThE5r33">Godbolt link</a>), but more complex examples often fail to autovectorize, often because of subtle differences in floating point semantics.
(Editorial note: a previous version of this post didn't autovectorize (<a href="https://rust.godbolt.org/z/GoTEK3KT3">Godbolt</a>) because optimization level was set at <code>-O</code>, which is less aggressive than <code>-C opt-level=3</code>, the latter of which is the default for release builds)</p>
<h2 id="safety">Safety</h2>
<p>One of the biggest problems with writing SIMD in Rust is that all exposed SIMD intrinsics are marked as <code>unsafe</code>, even in cases where they can be used safely.
The reason is that support for SIMD features varies widely, and executing a SIMD instruction on a CPU that does not support it is undefined behavior – the chip can crash, ignore the instruction, or do something unexpected.
To be used safely, there must be some other mechanism to establish that the CPU does support the feature.</p>
<p>Here's the running example in hand-written intrinsic code, showing the need to write <code>unsafe</code> to access SIMD intrinsics at all:</p>
<pre data-lang="rust"><code data-lang="rust"><span>#[</span><span>cfg</span><span>(target_arch = "</span><span>aarch64</span><span>")]
</span><span>fn </span><span>sigmoid_neon</span><span>(</span><span>x</span><span>: [</span><span>f32</span><span>; 4]) -&gt; [</span><span>f32</span><span>; </span><span>4</span><span>] {
</span><span>    </span><span>use </span><span>core::arch::aarch64::*;
</span><span>    </span><span>unsafe </span><span>{
</span><span>        </span><span>let</span><span> x_simd = core::mem::transmute(x);
</span><span>        </span><span>let</span><span> x_squared = </span><span>vmulq_f32</span><span>(x_simd, x_simd);
</span><span>        </span><span>let</span><span> ones = </span><span>vdupq_n_f32</span><span>(</span><span>1.0</span><span>);
</span><span>        </span><span>let</span><span> sum = </span><span>vaddq_f32</span><span>(ones, x_squared);
</span><span>        </span><span>let</span><span> sqrt = </span><span>vsqrtq_f32</span><span>(sum);
</span><span>        </span><span>let</span><span> ratio = </span><span>vdivq_f32</span><span>(x_simd, sqrt);
</span><span>        core::mem::transmute(ratio)
</span><span>    }
</span><span>}
</span><span>
</span><span>#[</span><span>cfg</span><span>(target_arch = "</span><span>x86_64</span><span>")]
</span><span>fn </span><span>sigmoid_sse2</span><span>(</span><span>x</span><span>: [</span><span>f32</span><span>; 4]) -&gt; [</span><span>f32</span><span>; </span><span>4</span><span>] {
</span><span>    </span><span>use </span><span>core::arch::x86_64::*;
</span><span>    </span><span>unsafe </span><span>{
</span><span>        </span><span>let</span><span> x_simd = core::mem::transmute(x);
</span><span>        </span><span>let</span><span> x_squared = </span><span>_mm_mul_ps</span><span>(x_simd, x_simd);
</span><span>        </span><span>let</span><span> ones = </span><span>_mm_set1_ps</span><span>(</span><span>1.0</span><span>);
</span><span>        </span><span>let</span><span> sum = </span><span>_mm_add_ps</span><span>(ones, x_squared);
</span><span>        </span><span>let</span><span> sqrt = </span><span>_mm_sqrt_ps</span><span>(sum);
</span><span>        </span><span>let</span><span> ratio = </span><span>_mm_div_ps</span><span>(x_simd, sqrt);
</span><span>        core::mem::transmute(ratio)
</span><span>    }
</span><span>}
</span></code></pre>
<p>This is quite a simplified example.
For one, the SIMD width is fixed at 4 lanes (128 bits).
Most likely, in practice you'd iterate over a larger slice, taking chunks equal to the natural SIMD width.</p>
<h2 id="multiversioning">Multiversioning</h2>
<p>A central problem important for SIMD is multiversioning and runtime dispatch.
In some cases, you know the exact CPU target, for example when compiling a binary you'll run only on your machine (in which case <code>target-cpu=native</code> is appropriate).
But when distributing software more widely, there may be a range of capabilities.
For highest performance, it's necessary to compile multiple versions of the code, and do runtime detection to dispatch to the best SIMD code the hardware can run.
This problem was expressed in the original fearless SIMD blog post, and there hasn't been significant advance at the Rust language level since then.</p>
<p>In the C++ world, the <a href="https://github.com/google/highway">Highway</a> library provides excellent SIMD support for a very wide range of targets, and also solves the multiversioning problem.
Among other uses are the codecs for the JPEG-XL image format.
Such codecs are an ideal use case for SIMD programming in general, and shipping them in a browser requires a good solution to multiversioning.
Highway has a really good explanation of <a href="https://github.com/kfjahnke/zimt/blob/multi_isa/examples/multi_isa_example/multi_simd_isa.md">their approach to multiversioning</a>.
It will be useful to study it carefully to see how they've solved various problems.
And a concise way of saying what I'd like to see is "Highway for Rust."</p>
<p>One possible approach is a crate called <a href="https://docs.rs/multiversion/latest/multiversion/">multiversion</a>, which uses macros to replicate the code for multiple versions.
A more recent macro-based approach is <a href="https://github.com/a4lg/rust-target-feature-dispatch">rust-target-feature-dispatch</a>.
It is generally a similar approach to multiversion, and the specific differences are set out in that crate's <a href="https://github.com/a4lg/rust-target-feature-dispatch/blob/main/src/README.md">README</a>.</p>
<p>Another approach, as I believe first advocated in my 2018 blog post, is to write functions polymorphic on a zero-sized type representing the SIMD capabilities, then rely on monomorphization to create the various versions.
One motivation for this approach is to encode safety in Rust's type system.
Having the zero-sized token is proof of the underlying CPU having a certain level of SIMD capability, so calling those intrinsics is safe.
A major library that uses this approach is <a href="https://docs.rs/pulp/latest/pulp/">pulp</a>, which also powers the <a href="https://docs.rs/faer/latest/faer/">faer</a> linear algebra library.</p>
<p>I started putting together a pulp version of the running example, but ran into the immediate problem that it lacks a <code>sqrt</code> intrinsic (this would be easy enough to add, however).
It also works a bit differently, in that it only supports vectors of the natural width, not ones of a fixed width.
For general linear algebra, that's fine, but for some other applications it adds friction, for example colors with alpha are naturally chunks of 4 scalars.
To see an example of pulp code, as well as some discussion, see this <a href="https://xi.zulipchat.com/#narrow/channel/255911-rust/topic/Rust.20SIMD.20thoughts/near/489370476">Zulip thread</a>.</p>
<p>In <a href="https://github.com/raphlinus/fearless_simd/pull/2">fearless_simd#2</a> I propose a prototype of reasonably-ergonomic SIMD multiversioning.
Like the original fearless_simd prototype, vector data types are polymorphic on SIMD level.
The new prototype goes beyond that in several important ways.
For one, arithmetic traits in std::ops are implemented for vector types, so it's possible to add two vectors together, multiply vectors by scalars, etc.</p>
<p>Here's what the running example looks like in that prototype:</p>
<pre data-lang="rust"><code data-lang="rust"><span>#[</span><span>inline</span><span>(always)]
</span><span>fn </span><span>sigmoid_impl</span><span>&lt;S: Simd&gt;(</span><span>simd</span><span>: S, </span><span>x</span><span>: [</span><span>f32</span><span>; 4]) -&gt; [</span><span>f32</span><span>; </span><span>4</span><span>] {
</span><span>    </span><span>let</span><span> x_simd: f32x4&lt;S&gt; = x.</span><span>simd_into</span><span>(simd);
</span><span>    (x_simd / (</span><span>1.0 </span><span>+ x_simd * x_simd).</span><span>sqrt</span><span>()).</span><span>into</span><span>()
</span><span>}
</span><span>
</span><span>simd_dispatch!(</span><span>sigmoid</span><span>(level, rgba: [</span><span>f32</span><span>; </span><span>4</span><span>]) -&gt; [</span><span>f32</span><span>; </span><span>4</span><span>] = sigmoid_impl);
</span></code></pre>
<p>An advantage of the fearless_simd#2 prototype over pulp is a feature for downcasting based on SIMD level, so it's possible to write different code optimized for different chips.
See the <a href="https://github.com/raphlinus/fearless_simd/pull/2/files#diff-be8aece917a9235076ff8ec42749b1f1a803d2a3cbc2ccdd5425b405c74f7436">srgb example</a> in that pull request for more detail.
Though there are clear advantages, at this point I'm not sure whether this is the direction to go.
It would be a lot of work to build out all the needed types and operations, with potentially a large amount of repetitive boilerplate code in the library, which in turn may cause issues with compile time.
Another possible direction is a smarter, compiler-like proc macro which synthesizes the SIMD intrinsics as needed based on the types and operations in the source program.</p>
<p>One additional consideration for Rust is that the implementation of runtime feature detection is <a href="https://internals.rust-lang.org/t/better-codegen-for-cpu-feature-detection/22083">slower than it should be</a>.
Thus, feature detection and dispatch shouldn't be done at every function call.
A good working solution is to do feature detection once, at the start of the program, then pass that token down through function calls.
It's workable but definitely an ergonomic paper cut.</p>
<h2 id="fp16-and-avx-512">FP16 and AVX-512</h2>
<p>A general trend in parallel computation, really fueled by AI workloads, is smaller scalars with higher throughputs.
While not yet common on x86_64, the FP16 extension is supported on all Apple Silicon desktop CPUs and most recent high-ish end ARM-based phones.
Since Neon is only 128 bits wide, having 8 lanes is welcome.
I find the f16 format to be especially useful for pixel values, as it can encode color values with more than enough precision to avoid visual artifacts (8 bits is not quite enough, though it is good enough for some applications, as long as you're not trying to do HDR).</p>
<p>Native Rust support for the <code>f16</code> type has not yet landed (tracked in <a href="https://github.com/rust-lang/rust/issues/125440">rust#125440</a>), which makes use of this scalar size harder.
However, there is some support in the <a href="https://docs.rs/half/latest/half/">half</a> library, and also the <a href="https://github.com/raphlinus/fearless_simd/pull/2">fearless_simd#2</a> prototype exports a number of FP16 Neon instructions through inline assembly.
When true f16 support lands, it will be possible to switch over to intrinsics, which will have better optimization and ergonomics (for example, the same method will splat constants converted to <code>f16</code> at compile time and <code>f32</code> variables to be converted at runtime).</p>
<p>AVX-512 is a somewhat controversial SIMD capability.
It first appeared in the ill-fated Larrabee project, which shipped in limited numbers as the Xeon Phi starting in 2010, and has since appeared in scattered Intel CPUs, but with compromises.
In particular, sprinkling even a small amount of AVX-512 code into a program could result in downclocking, reducing performance for all workloads (see <a href="https://stackoverflow.com/questions/56852812/simd-instructions-lowering-cpu-frequency#comment100256395_56852812">Stack Overflow thread on throttling</a> for more details).
These days, the most likely way to get a CPU with AVX-512 is an AMD Zen 4 or Zen 5; it is on their strength that AVX-512 makes up about 16% of computers in the Steam hardware survey.</p>
<p>The increased width is not the main reason to be enthusiastic about AVX-512.
Indeed, on Zen 4 and most Zen 5 chips, the datapath is 256 bits so full 512 bit instructions are "double pumped." The most exciting aspect is predication based on masks, a common implementation technique on GPUs.
In particular, memory load and store operations are safe when the mask bit is zero, which is especially helpful for using SIMD efficiently on strings.
Without predication, a common technique is to write two loops, the first handling only even multiples of the SIMD width, and a second, usually written as scalars, to handle the odd-size "tail".
There are lots of problems with this - code bloat, worse branch prediction, inability to exploit SIMD for chunks slightly less than the natural SIMD width (which gets worse as SIMD grows wider), and risks that the two loops don't have exactly the same behavior.</p>
<p>Going forward, Intel has proposed AVX10, and will hopefully ship AVX 10.2 chips in the next few years.
This extension has pretty much all of the features of AVX-512, with some cleanups and new features (until recently, AVX10 was defined has having a 256 bit base width and optionally 512, but 512 is now the baseline).
In addition, AVX10.2 will include 16-bit floats (currently available only in the Sapphire Rapids high-end server and workstation chips).</p>
<h2 id="about-std-simd">About std::simd</h2>
<p>The "portable SIMD" work has been going on for many years and currently has a home as the nightly <a href="https://doc.rust-lang.org/std/simd/index.html">std::simd</a>.
While I think it will be very useful in many applications, I am not personally very excited about it for my applications.
For one, because it emphasizes portability, it encourages a "lowest common denominator" approach, while I believe that for certain use cases it will be important to tune algorithms to best use the specific quirks of the different SIMD implementations.
For two, std::simd does not itself solve the multiversion problem.
From my perspective, it's probably best to consider it as a souped-up version of autovectorization.</p>
<h2 id="language-evolution">Language evolution</h2>
<p>Rust's out of the box support for SIMD is still quite rough, especially the need to use <code>unsafe</code> extensively.
While some of the gap can be filled with libraries, arguably it should be a goal of the language itself to support safe SIMD code.
There is progress in this direction.</p>
<p>First, the original version of <code>target_feature</code> requires <code>unsafe</code> to call into <em>any</em> function annotated with <code>#[target_feature]</code>.
A proposal to relax that so that functions already under a target_feature gate can call safely call into another function with the same gate is called "<a href="https://rust-lang.github.io/rfcs/2396-target-feature-1.1.html">target_feature 1.1</a>" and is scheduled to ship in 1.86.
Closely related, once inside the suitable target_feature gate, the majority of SIMD intrinsics (broadly, those that don't do memory access through pointers) should be considered safe by the compiler, and that feature (safe intrinsics in core::arch) is also in flight.</p>
<p>There's more that can be done to help the Rust compiler recognize when SIMD use is safe, in particular to allow target_features when a concrete witness to the SIMD level is passed in as a function argument.
The "struct target_features" proposal (<a href="https://github.com/rust-lang/rfcs/pull/3525">RFC 3525</a>) enables target_feature in such cases, and is one of the proposals considered in the proposed Rust project goal <a href="https://rust-lang.github.io/rust-project-goals/2025h1/simd-multiversioning.html">Nightly support for ergonomic SIMD multiversioning</a>.</p>
<p>In general, improving Rust SIMD support will require both libraries and support in the Rust language.
Different approaches at the library level may indicate different language features to best support them.</p>
<h2 id="looking-forward">Looking forward</h2>
<p>My main goal in putting these prototypes forward, as well as writing these blog posts, is to spark conversation on how best to support SIMD programming in Rust.
If done well, it is a great opportunity for the language, and fits in with its focus on performance and portability.</p>
<p>As we build out the <a href="https://xi.zulipchat.com/#narrow/channel/197075-vello/topic/Potato.20-.20a.20paper.20design.20for.20a.20CPU.2FGPU.20hybrid.20renderer">Vello hybrid CPU/GPU renderer</a>, performance of the CPU components will rely heavily on SIMD, so we need to invest in writing a lot of SIMD code.
The most conservative approach would be hand-writing unsafe intrinsics-based code for all targets, but that's a lot of work and the use of unsafe is unappealing.
I'd love for the Rust ecosystem can come together and build good infrastructure, competitive with Highway.
For now, I think it's time to carefully consider the design space and try to come to consensus on what that should look like.</p>
<!-- TODO: not sure if this is the best link, we don't really have a project page for this -->


            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Self-contained Python scripts with uv (310 pts)]]></title>
            <link>http://blog.dusktreader.dev/2025/03/29/self-contained-python-scripts-with-uv/</link>
            <guid>43519669</guid>
            <pubDate>Sat, 29 Mar 2025 23:22:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://blog.dusktreader.dev/2025/03/29/self-contained-python-scripts-with-uv/">http://blog.dusktreader.dev/2025/03/29/self-contained-python-scripts-with-uv/</a>, See on <a href="https://news.ycombinator.com/item?id=43519669">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-md-component="container">
      
      
        
          
        
      
      <main data-md-component="main">
        <div data-md-component="content">
    
    <article>
      
        
  


  <nav>
    
      
      
      
        <span>Python</span>
      
    
      
      
      
        <span>uv</span>
      
    
  </nav>


  
  



<div>
<p>TLDR</p>
<p>You can add uv into the shebang line for a Python script to make it a self-contained executable.</p>
</div>
<p>I am working on a Go project to better learn the language. It's a simple API backed by a postgres database.</p>
<p>When I need to test out an endpoint, I prefer to use the <a href="https://www.python-httpx.org/">httpx</a> python package inside an
<a href="https://ipython.org/">ipython</a> REPL over making curl requests. It's nice to be able to introspect responses and easily
package payloads with dicts instead of writing out JSON.</p>
<p>Anyway, I decided to write a script to upsert some user data so that I can beat on my <code>/users</code> endpoint.</p>
<!-- more -->

<p>My <code>jam_users.py</code> script looks like this:</p>
<div><pre><span></span><code><span id="__span-0-1"><a id="__codelineno-0-1" name="__codelineno-0-1" href="#__codelineno-0-1"></a><span>import</span><span> </span><span>httpx</span>
</span><span id="__span-0-2"><a id="__codelineno-0-2" name="__codelineno-0-2" href="#__codelineno-0-2"></a><span>import</span><span> </span><span>IPython</span>
</span><span id="__span-0-3"><a id="__codelineno-0-3" name="__codelineno-0-3" href="#__codelineno-0-3"></a><span>from</span><span> </span><span>loguru</span><span> </span><span>import</span> <span>logger</span>
</span><span id="__span-0-4"><a id="__codelineno-0-4" name="__codelineno-0-4" href="#__codelineno-0-4"></a>
</span><span id="__span-0-5"><a id="__codelineno-0-5" name="__codelineno-0-5" href="#__codelineno-0-5"></a><span>users</span> <span>=</span> <span>[</span>
</span><span id="__span-0-6"><a id="__codelineno-0-6" name="__codelineno-0-6" href="#__codelineno-0-6"></a>    <span>dict</span><span>(</span><span>name</span><span>=</span><span>"The Dude"</span><span>,</span> <span>email</span><span>=</span><span>"the.dude@abides.com"</span><span>,</span> <span>password</span><span>=</span><span>"thedudeabides"</span><span>),</span>
</span><span id="__span-0-7"><a id="__codelineno-0-7" name="__codelineno-0-7" href="#__codelineno-0-7"></a>    <span>dict</span><span>(</span><span>name</span><span>=</span><span>"Walter Sobchak"</span><span>,</span> <span>email</span><span>=</span><span>"walter@sobchak-security.com"</span><span>,</span> <span>password</span><span>=</span><span>"vietnamvet"</span><span>),</span>
</span><span id="__span-0-8"><a id="__codelineno-0-8" name="__codelineno-0-8" href="#__codelineno-0-8"></a>    <span>dict</span><span>(</span><span>name</span><span>=</span><span>"Donnie"</span><span>,</span> <span>email</span><span>=</span><span>"donniesurfs@yahoo.com"</span><span>,</span> <span>password</span><span>=</span><span>"iamthewalrus"</span><span>),</span>
</span><span id="__span-0-9"><a id="__codelineno-0-9" name="__codelineno-0-9" href="#__codelineno-0-9"></a>    <span>dict</span><span>(</span><span>name</span><span>=</span><span>"Maude"</span><span>,</span> <span>email</span><span>=</span><span>"mauddie@avant-guard.com"</span><span>,</span> <span>password</span><span>=</span><span>"goodmanandthorough"</span><span>),</span>
</span><span id="__span-0-10"><a id="__codelineno-0-10" name="__codelineno-0-10" href="#__codelineno-0-10"></a><span>]</span>
</span><span id="__span-0-11"><a id="__codelineno-0-11" name="__codelineno-0-11" href="#__codelineno-0-11"></a>
</span><span id="__span-0-12"><a id="__codelineno-0-12" name="__codelineno-0-12" href="#__codelineno-0-12"></a><span>r</span> <span>=</span> <span>httpx</span><span>.</span><span>get</span><span>(</span><span>"http://localhost:4000/v1/users"</span><span>)</span>
</span><span id="__span-0-13"><a id="__codelineno-0-13" name="__codelineno-0-13" href="#__codelineno-0-13"></a><span>r</span><span>.</span><span>raise_for_status</span><span>()</span>
</span><span id="__span-0-14"><a id="__codelineno-0-14" name="__codelineno-0-14" href="#__codelineno-0-14"></a>
</span><span id="__span-0-15"><a id="__codelineno-0-15" name="__codelineno-0-15" href="#__codelineno-0-15"></a><span>for</span> <span>user</span> <span>in</span> <span>r</span><span>.</span><span>json</span><span>()[</span><span>"users"</span><span>]:</span>
</span><span id="__span-0-16"><a id="__codelineno-0-16" name="__codelineno-0-16" href="#__codelineno-0-16"></a>    <span>logger</span><span>.</span><span>info</span><span>(</span><span>f</span><span>"Deleting: </span><span>{</span><span>user</span><span>[</span><span>'name'</span><span>]</span><span>}</span><span>"</span><span>)</span>
</span><span id="__span-0-17"><a id="__codelineno-0-17" name="__codelineno-0-17" href="#__codelineno-0-17"></a>    <span>r</span> <span>=</span> <span>httpx</span><span>.</span><span>delete</span><span>(</span><span>f</span><span>"http://localhost:4000/v1/users/</span><span>{</span><span>user</span><span>[</span><span>'id'</span><span>]</span><span>}</span><span>"</span><span>)</span>
</span><span id="__span-0-18"><a id="__codelineno-0-18" name="__codelineno-0-18" href="#__codelineno-0-18"></a>    <span>r</span><span>.</span><span>raise_for_status</span><span>()</span>
</span><span id="__span-0-19"><a id="__codelineno-0-19" name="__codelineno-0-19" href="#__codelineno-0-19"></a>
</span><span id="__span-0-20"><a id="__codelineno-0-20" name="__codelineno-0-20" href="#__codelineno-0-20"></a><span>for</span> <span>user</span> <span>in</span> <span>users</span><span>:</span>
</span><span id="__span-0-21"><a id="__codelineno-0-21" name="__codelineno-0-21" href="#__codelineno-0-21"></a>    <span>r</span> <span>=</span> <span>httpx</span><span>.</span><span>post</span><span>(</span><span>"http://localhost:4000/v1/users"</span><span>,</span> <span>json</span><span>=</span><span>user</span><span>)</span>
</span><span id="__span-0-22"><a id="__codelineno-0-22" name="__codelineno-0-22" href="#__codelineno-0-22"></a>    <span>r</span><span>.</span><span>raise_for_status</span><span>()</span>
</span><span id="__span-0-23"><a id="__codelineno-0-23" name="__codelineno-0-23" href="#__codelineno-0-23"></a>    <span>logger</span><span>.</span><span>info</span><span>(</span><span>f</span><span>"Created: </span><span>{</span><span>r</span><span>.</span><span>json</span><span>()</span><span>}</span><span>"</span><span>)</span>
</span><span id="__span-0-24"><a id="__codelineno-0-24" name="__codelineno-0-24" href="#__codelineno-0-24"></a>
</span><span id="__span-0-25"><a id="__codelineno-0-25" name="__codelineno-0-25" href="#__codelineno-0-25"></a><span>IPython</span><span>.</span><span>embed</span><span>()</span>
</span></code></pre></div>
<p>This is really straight-forward. It will clear out any existing users and then insert these test users. Right after
that, I get dropped into an <code>ipython</code> repl to do what I need for testing. All I have to do is run:</p>

<p>However, if I want to run the script as-is, I will need to choose one of these approaches:</p>
<ul>
<li>Install the dependencies <code>httpx</code>, <code>IPython</code>, and <code>loguru</code> globally in my system python</li>
<li>Create a virtual environment, activate it, install deps, and run my script while the venv is activated</li>
</ul>
<p>These are both not great options in my opinion. These approaches also rely on having a system python installed that is
compatible with these packages. This isn't as big of a problem, but something to consider anyway.</p>
<p>I've been using <a href="https://github.com/astral-sh/uv">uv</a> a lot lately, and I'm becoming quite enamoured with its usefulness
as a package manager, efficiency as a pip replacement, and abilities for isolated python executables. One thing that I
haven't used much yet are the special <code># /// script</code> tags in a python script.</p>
<p>When I first read about this functionality, I was pretty skeptical. I'm not particularly keen on embedding syntax into
comments. However, this seemed like the perfect application. So, updated my script to include the deps in the script
header like so:</p>
<div><pre><span></span><code><span id="__span-2-1"><a id="__codelineno-2-1" name="__codelineno-2-1" href="#__codelineno-2-1"></a><span># /// script</span>
</span><span id="__span-2-2"><a id="__codelineno-2-2" name="__codelineno-2-2" href="#__codelineno-2-2"></a><span># dependencies = ["ipython", "httpx", "loguru"]</span>
</span><span id="__span-2-3"><a id="__codelineno-2-3" name="__codelineno-2-3" href="#__codelineno-2-3"></a><span># ///</span>
</span><span id="__span-2-4"><a id="__codelineno-2-4" name="__codelineno-2-4" href="#__codelineno-2-4"></a><span>import</span><span> </span><span>httpx</span>
</span><span id="__span-2-5"><a id="__codelineno-2-5" name="__codelineno-2-5" href="#__codelineno-2-5"></a><span>import</span><span> </span><span>IPython</span>
</span><span id="__span-2-6"><a id="__codelineno-2-6" name="__codelineno-2-6" href="#__codelineno-2-6"></a><span>from</span><span> </span><span>loguru</span><span> </span><span>import</span> <span>logger</span>
</span><span id="__span-2-7"><a id="__codelineno-2-7" name="__codelineno-2-7" href="#__codelineno-2-7"></a>
</span><span id="__span-2-8"><a id="__codelineno-2-8" name="__codelineno-2-8" href="#__codelineno-2-8"></a><span>...</span>
</span></code></pre></div>
<p>With this added, now I can run the script really easily with <code>uv</code>:</p>

<p>Great! Now, <code>uv</code> will create an isolated virtual environment for the script, download the dependencies and install them,
and then run my script in the context of that venv! I don't have to manage the virtual environment myself nor worry
about cluttering my system python with packages that I will invariably forget to remove later.</p>
<p>One nice thing about a regular Python script, though, is that you can make it executable with a shebang line:</p>
<div><pre><span></span><code><span id="__span-4-1"><a id="__codelineno-4-1" name="__codelineno-4-1" href="#__codelineno-4-1"></a><span>#!/usr/bin/env python</span>
</span><span id="__span-4-2"><a id="__codelineno-4-2" name="__codelineno-4-2" href="#__codelineno-4-2"></a><span>...</span>
</span></code></pre></div>
<p>Now, if I make the script executable (<code>chmod +x jam_users.py</code>), I can invoke it directly as an executable script!
However, this won't take advantage of the <code>uv</code> script header because Python itself will just ignore the comment.</p>
<p>So, I did some digging and found out that you can actually embed the invocation of the uv command right in the shebang
line like so:</p>
<div><pre><span></span><code><span id="__span-5-1"><a id="__codelineno-5-1" name="__codelineno-5-1" href="#__codelineno-5-1"></a><span>#!/usr/bin/env -S uv run --script</span>
</span><span id="__span-5-2"><a id="__codelineno-5-2" name="__codelineno-5-2" href="#__codelineno-5-2"></a><span># /// script</span>
</span><span id="__span-5-3"><a id="__codelineno-5-3" name="__codelineno-5-3" href="#__codelineno-5-3"></a><span># dependencies = ["ipython", "httpx", "loguru"]</span>
</span><span id="__span-5-4"><a id="__codelineno-5-4" name="__codelineno-5-4" href="#__codelineno-5-4"></a><span># ///</span>
</span><span id="__span-5-5"><a id="__codelineno-5-5" name="__codelineno-5-5" href="#__codelineno-5-5"></a><span>import</span><span> </span><span>httpx</span>
</span><span id="__span-5-6"><a id="__codelineno-5-6" name="__codelineno-5-6" href="#__codelineno-5-6"></a><span>import</span><span> </span><span>IPython</span>
</span><span id="__span-5-7"><a id="__codelineno-5-7" name="__codelineno-5-7" href="#__codelineno-5-7"></a><span>from</span><span> </span><span>loguru</span><span> </span><span>import</span> <span>logger</span>
</span><span id="__span-5-8"><a id="__codelineno-5-8" name="__codelineno-5-8" href="#__codelineno-5-8"></a>
</span><span id="__span-5-9"><a id="__codelineno-5-9" name="__codelineno-5-9" href="#__codelineno-5-9"></a><span>...</span>
</span></code></pre></div>
<p>This works because the <code>-S</code> flag tells the system to split everything after it into separate arguments before passing it
to the system's <code>env</code>.</p>
<p>Now (after <code>chmod +x jam_users.py</code>, of course), I can execute my script directly:</p>

<p>That's it! What's even better is that I can run this script on any (Unix) system that has <code>uv</code> installed without needing
to do ANY dependency or virtual environment management.</p>
<p>Now, this script itself is really trivial and not much more than a toy example. However, in my past I have written
rather complex scripts that I needed to hand off to other users to run. Of course, this always came with a long
explanation of how to <em>prepare</em> their system just to run the script. This approach solves that problem instantly and
painlessly (as long as they have <code>uv</code> installed).</p>
<p>Take it for a spin, and let me know your thoughts.</p>
<p>Thanks for reading!</p>







  
  




  



  

  

  

      
    </article>
  </div>
        
      </main>
      
        
      
    </div></div>]]></description>
        </item>
    </channel>
</rss>