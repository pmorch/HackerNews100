<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 08 Sep 2024 05:30:12 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Gnome Files: A detailed UI examination (115 pts)]]></title>
            <link>https://www.datagubbe.se/gnomefiles/</link>
            <guid>41476873</guid>
            <pubDate>Sat, 07 Sep 2024 22:35:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.datagubbe.se/gnomefiles/">https://www.datagubbe.se/gnomefiles/</a>, See on <a href="https://news.ycombinator.com/item?id=41476873">Hacker News</a></p>
Couldn't get https://www.datagubbe.se/gnomefiles/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Hallelujah, Leonard Cohen, and a Pulitzer Prize-winning writer's suicide (116 pts)]]></title>
            <link>https://subtledigressions.substack.com/p/hallelujah-leonard-cohen-and-a-pulitzer</link>
            <guid>41475618</guid>
            <pubDate>Sat, 07 Sep 2024 18:46:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://subtledigressions.substack.com/p/hallelujah-leonard-cohen-and-a-pulitzer">https://subtledigressions.substack.com/p/hallelujah-leonard-cohen-and-a-pulitzer</a>, See on <a href="https://news.ycombinator.com/item?id=41475618">Hacker News</a></p>
Couldn't get https://subtledigressions.substack.com/p/hallelujah-leonard-cohen-and-a-pulitzer: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[The "email is authentication" pattern (148 pts)]]></title>
            <link>https://rubenerd.com/the-email-is-authentication-pattern/</link>
            <guid>41475218</guid>
            <pubDate>Sat, 07 Sep 2024 17:48:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rubenerd.com/the-email-is-authentication-pattern/">https://rubenerd.com/the-email-is-authentication-pattern/</a>, See on <a href="https://news.ycombinator.com/item?id=41475218">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>I’m the first to admit that I don’t live in the real (electronic) world. As the late Jim Kloss pointed out during one of his broadcasts, we (and probably you) live in a part of the Web with ad blockers (as the <a href="https://www.ic3.gov/Media/Y2022/PSA221221">FBI recommends</a>), limited JavaScript, password managers, and a (mostly) finely-tuned sense of what is a scam and what is legitimate (that was a lot of brackets).</p>
<p>Most people don’t live like this. I’d posit the <em>vast majority</em> don’t. And it’s worth a reality check sometimes.</p>
<p>Here’s a shockingly-common login process I witness:</p>
<ol>
<li>Get to a login page</li>
<li>Click “I forgot my password”</li>
<li>Go to their email</li>
<li>Click the recovery link</li>
<li>Type a throwaway password they won’t retain</li>
<li>Rinse, and repeat</li>
</ol>
<p>When I ask people why they do this, they either don’t have an answer, or respond with “huh, I never thought about why”. And that’s interesting to me.</p>
<p>Enough has been written (including here) about the need for password managers, the risks of identity theft, two-factor and multi-factor authentication, and whether the entire concept of a username/password is antiquated and in bad need of replacement. If you’re a reader of my silly blog here, you likely already know all this.</p>
<p>What I’m interested in here is the fact people have come up with that above process <em>in the first place</em>. How do you decide that using “I forgot my password” as authentication makes sense to you? Or more specifically, the <em>most</em> sense to you, out of all possible options?</p>
<p>I think people can’t answer why they do this because it’s not a concious decision. They don’t wake up in the morning and decide <em>yes, this is how I’m going to interact with online accounts today!</em> Instead, this is a process that has coalesced over time and become rote. It offers a guaranteed, repeatable, low-effort solution (of sorts) to passphrases they don’t need to think about (there’s those brackets again).</p>
<p>It makes me wonder if we’re looking at a bunch of these issues backwards, and whether we can take advantage of people’s tendencies towards learned behaviour like this. What if we could somehow design systems so that the people who use them evolve to use them in <em>better</em> ways? Because I do empathise with people that often improved security comes with more barriers and friction, not fewer.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A new rare high-rank elliptic curve, and an orchard of Diophantine equations (146 pts)]]></title>
            <link>https://thehighergeometer.wordpress.com/2024/09/08/two-items-a-new-rare-high-rank-elliptic-curve-and-a-beautifully-organised-orchard-of-diophantine-equations/</link>
            <guid>41475177</guid>
            <pubDate>Sat, 07 Sep 2024 17:43:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thehighergeometer.wordpress.com/2024/09/08/two-items-a-new-rare-high-rank-elliptic-curve-and-a-beautifully-organised-orchard-of-diophantine-equations/">https://thehighergeometer.wordpress.com/2024/09/08/two-items-a-new-rare-high-rank-elliptic-curve-and-a-beautifully-organised-orchard-of-diophantine-equations/</a>, See on <a href="https://news.ycombinator.com/item?id=41475177">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
		<main id="main" role="main">

		
			
<article id="post-1245">
	<!-- .entry-header -->

	<div>
		
<p>I got an email the other day from mathematician Bogdan Grechuk, whose book <em>Polynomial Diophantine Equations: A Systematic Approach</em> (<a href="https://doi.org/10.1007/978-3-031-62949-5">https://doi.org/10.1007/978-3-031-62949-5</a>) was recently released. This is to my mind a rather remarkable book. The blurb starts: </p>



<blockquote>
<p>This book proposes a novel approach to the study of Diophantine equations: define an appropriate version of the equation’s size, order all polynomial Diophantine equations by size, and then solve the equations <strong>in order.</strong> [emphasis added]</p>
</blockquote>



<p>The book really does do this systematically. The start of the book solves extremely easy examples, but pays close attention to the process, so that it can identify classes of equations that this method will apply to. And as a new method of solution is provided, hence solving a new class of equations, this class of equations is removed from considerations going forward. Grechuk, halfway through the book (&gt;400 pages in!) takes stock and provides an outline of the algorithm built up over the four chapters to that point. It has approximately 21 main cases, of increasing difficulty, spread over pages, referring constantly back through the book to various methods and algorithms for different cases. As the equations keep getting harder, the problem of solution shifts focus: from “describe all solutions parametrically”, to “write down a family of polynomials (or rational functions) that give all solutions”, to “find a recurrence relation to describe solutions”, to “determine if there are finitely or infinitely many solutions”, to “determine if there is any one solution”. The methods start out wholly elementary, and by the end the discussion uses the cutting edge of current techniques for attacking number-theoretic problems of this sort, for instance <a href="https://en.wikipedia.org/wiki/Claude_Chabauty">Chabauty</a> methods. </p>



<p>Long-time readers of the blog may recall the post <a href="https://thehighergeometer.wordpress.com/2021/07/27/diophantine-fruit/">Diophantine fruit</a>. which was inspired by a MathOverflow question of Grechuk on the problem of “the smallest unsolved Diophantine equation”. This blog post led to a <a href="https://arxiv.org/search/?query=%22fruit+diophantine%22&amp;searchtype=title">chain of papers</a> using the phrase “fruit equations” by authors wholly unconnected with me, with the first solving what was at the time an open problem on Grechuk’s list. So it’s worth consulting the companion paper <em>A systematic approach to Diophantine equations: open problems</em> (<a href="https://arxiv.org/abs/2404.08518">https://arxiv.org/abs/2404.08518</a>) if you have any particular hankering to solve an equation (in any of the various ways: from parametrising a family of solutions to just finding one single solution) and have the honour of being the <em>first person ever</em> (modulo the problem of finding some equation equivalent to it buried in the literature) to solve a hard equation. The book ends with a summary that is a line-in-the-sand version of the just-cited arXiv preprint, stating the earliest/smallest/shortest equations that the various types of solutions are not known. And the last open problem is this:</p>



<blockquote>
<p>What is the smallest (in H) equation for which the existence of integer solutions (Problem 7.1) is a problem which is independent from the standard axioms of mathematics (Zermelo–Fraenkel set theory with the axiom of choice)?</p>
</blockquote>



<p>Here “H” refers to the function that gives the “size” of a polynomial Diophantine equation, that allows a systematic ordering. Other natural orderings are given in the book, which end up being more-or-less comparable, if not the same, and the above problem is also posed for these orderings. From the MDRP solution to <a href="https://en.wikipedia.org/wiki/Hilbert%27s_tenth_problem">Hilbert’s Tenth Problem</a> we know that at some point equations whose solvability is unprovable in ZFC will turn up. By work of Zhi-Wei Sun (<a href="https://arxiv.org/abs/1704.03504">https://arxiv.org/abs/1704.03504</a>) we know that the unsolvability result (that is, there is no algorithm that can solve in integers all equations in a given class) is true taking even just Diophantine equations with no more than 11 variables. But identifying an explicit equation, let alone the smallest one, seems very hard. Moreover, trying to optimise to find a small ZFC-undecidable equation, rather than an algorithmically unsolvable one, is another whole kettle of fish; compare how the value BB(745) of the Busy Beaver function is <a href="https://www.ingo-blechschmidt.eu/assets/bachelor-thesis-undecidability-bb748.pdf">not possible to calculate in ZFC</a>, through a line of work whose current endpoint is by Johannes Riebel’s 2023 Bachelor thesis. (ADDED: I just now found that in fact BB(636) is known to uncalculable in ZFC, by <a href="https://github.com/CatsAreFluffy/metamath-turing-machines/commits/master/zf2.nql">very recent work of Rohan Ridenour</a> in the past two months)</p>



<hr>



<p>Just as Grechuk’s book starts small and tries to find the smallest so-far unsolved Diophantine equations, here is an example of one such equation, but one that is far from small:</p>



<pre><code>y^2 + xy = x^3 - 27006183241630922218434652145297453784768054621836357954737385x + 55258058551342376475736699591118191821521067032535079608372404779149413277716173425636721497</code></pre>



<p>(source: <a href="https://web.math.pmf.unizg.hr/~duje/tors/rk29.html">https://web.math.pmf.unizg.hr/~duje/tors/rk29.html</a>). This equation defines an elliptic curve, and it has the largest-known number of solutions in rational numbers of any such equation. By “largest-known” I mean that there is a copy of <img src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BZ%7D%5E%7B29%7D&amp;bg=eeeeee&amp;fg=666666&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BZ%7D%5E%7B29%7D&amp;bg=eeeeee&amp;fg=666666&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb%7BZ%7D%5E%7B29%7D&amp;bg=eeeeee&amp;fg=666666&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathbb{Z}^{29}"> in the set of rational solutions (where we are in fact finding solutions in the projective plane, not just in affine coordinates as presented). That is, there are 29 rational solutions (shown at the previous link) that are linearly-idependent (over the integers) under the abelian group operation on the rational points. It is not proved that there are no other linearly independent solutions (this number is known as the <em>rank</em> of the elliptic curve described by the equation). The announcement of the result as well as a summary of how much more is known is given in the email:</p>



<ul>
<li>N. D. Elkies and Z. Klagsbrun, <em><strong>Z</strong><sup>29</sup> in E(<strong>Q</strong>)</em>, Number Theory Listserver, Aug 2024. (<a href="https://listserv.nodak.edu/cgi-bin/wa.exe?A2=NMBRTHRY;b9d018b1.2409&amp;S=">https://listserv.nodak.edu/cgi-bin/wa.exe?A2=NMBRTHRY;b9d018b1.2409&amp;S=</a>)</li>
</ul>



<p>The above elliptic curve has been proved to have rank exactly 29 using the Generalised Riemann Hypothesis  for zeta functions of number fields, which is very far from being known (the usual Riemann Hypothesis is the special case of taking the number field to be the rationals). So the specific two-variable cubic equation above is an example of a polynomial Diophantine equation whose complete solution—and I haven’t even mentioned the possible (finite) torsion subgroup of the elliptic curve—requires knowing a the resolution of a conjecture that is wholly out of reach of current mathematics.</p>



<p>(source for image: Mark Hughes, <em><a href="https://www.allaboutcircuits.com/technical-articles/elliptic-curve-cryptography-in-embedded-systems/">How Elliptic Curve Cryptography Works</a></em>, 2019)</p>
			</div><!-- .entry-content -->

	<!-- .entry-footer -->

	</article><!-- #post-## -->

			
	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>
			
<!-- #comments -->

		
		</main><!-- #main -->
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WebP: The WebPage Compression Format (345 pts)]]></title>
            <link>https://purplesyringa.moe/blog/webp-the-webpage-compression-format/</link>
            <guid>41475124</guid>
            <pubDate>Sat, 07 Sep 2024 17:32:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://purplesyringa.moe/blog/webp-the-webpage-compression-format/">https://purplesyringa.moe/blog/webp-the-webpage-compression-format/</a>, See on <a href="https://news.ycombinator.com/item?id=41475124">Hacker News</a></p>
Couldn't get https://purplesyringa.moe/blog/webp-the-webpage-compression-format/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Cracking an old ZIP file to help open source the ANC's "Vula" secret crypto code (147 pts)]]></title>
            <link>https://blog.jgc.org/2024/09/cracking-old-zip-file-to-help-open.html</link>
            <guid>41474828</guid>
            <pubDate>Sat, 07 Sep 2024 16:41:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.jgc.org/2024/09/cracking-old-zip-file-to-help-open.html">https://blog.jgc.org/2024/09/cracking-old-zip-file-to-help-open.html</a>, See on <a href="https://news.ycombinator.com/item?id=41474828">Hacker News</a></p>
Couldn't get https://blog.jgc.org/2024/09/cracking-old-zip-file-to-help-open.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[A Post-Google World (202 pts)]]></title>
            <link>https://www.thebignewsletter.com/p/a-post-google-world</link>
            <guid>41474508</guid>
            <pubDate>Sat, 07 Sep 2024 15:39:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thebignewsletter.com/p/a-post-google-world">https://www.thebignewsletter.com/p/a-post-google-world</a>, See on <a href="https://news.ycombinator.com/item?id=41474508">Hacker News</a></p>
Couldn't get https://www.thebignewsletter.com/p/a-post-google-world: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Ten Things to Know about the Great Wave (207 pts)]]></title>
            <link>https://www.artic.edu/articles/1139/10-things-to-know-about-the-great-wave</link>
            <guid>41474449</guid>
            <pubDate>Sat, 07 Sep 2024 15:31:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.artic.edu/articles/1139/10-things-to-know-about-the-great-wave">https://www.artic.edu/articles/1139/10-things-to-know-about-the-great-wave</a>, See on <a href="https://news.ycombinator.com/item?id=41474449">Hacker News</a></p>
Couldn't get https://www.artic.edu/articles/1139/10-things-to-know-about-the-great-wave: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[The Hindenburg’s Interior (115 pts)]]></title>
            <link>https://rarehistoricalphotos.com/hindenburg-interior-photos/</link>
            <guid>41474311</guid>
            <pubDate>Sat, 07 Sep 2024 15:06:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rarehistoricalphotos.com/hindenburg-interior-photos/">https://rarehistoricalphotos.com/hindenburg-interior-photos/</a>, See on <a href="https://news.ycombinator.com/item?id=41474311">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
					<p><img fetchpriority="high" decoding="async" src="https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small.jpg" alt="The Hindenburg’s Interior: Vintage Photos Reveal What Luxury Air Travel Was Like in the 1930s" width="1600" height="1055" srcset="https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small.jpg 1600w, https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small-300x198.jpg 300w, https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small-1024x675.jpg 1024w, https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small-150x99.jpg 150w, https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small-768x506.jpg 768w, https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small-1536x1013.jpg 1536w, https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small-294x194.jpg 294w, https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small-384x253.jpg 384w, https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small-1152x759.jpg 1152w, https://rarehistoricalphotos.com/wp-content/uploads/2023/01/hindenburg-interior-photos-small-1440x950.jpg 1440w" sizes="(max-width: 1600px) 100vw, 1600px"></p>
<p>Before modern air travel and first-class suites, the grandest thing in luxury air travel was the German Zeppelin airship.</p>
<p>The Hindenburg was designed to ferry passengers across the Atlantic in serenity, with the dirigible floating smoothly through the clouds. The airship was considered the longest class of flying machine and the largest airship by envelope volume.</p>
<p>During the 1930s, airships like the Hindenburg class were widely considered the future of air travel, and the lead ship of the class, LZ 129 Hindenburg, established a regular transatlantic service. The airship’s destruction in a <span><a href="https://rarehistoricalphotos.com/hindenburg-disaster-pictures/">highly publicized accident</a></span> was the end of these expectations.</p>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-NQBLuOeM1xM/WxiUeOHDIhI/AAAAAAAAQPg/S4Z56tKVGacoO8B71ASkuizCI4MfPct7QCLcBGAs/s1600/Hindenburg_Disaster%2B%252817%2529.jpg" width="1400"></p><p>The Hindenburg floats over Manhattan Island in New York City on May 6, 1937, just hours from disaster in nearby New Jersey.</p></div>
<p>Hindenburg had a duralumin structure, incorporating 15 Ferris wheel-like main ring bulkheads along its length, with 16 cotton gas bags fitted between them.</p>
<p>The bulkheads were braced to each other by longitudinal girders placed around their circumferences. The airship’s outer skin was of cotton doped with a mixture of reflective materials intended to protect the gas bags within from radiation, both ultraviolet (which would damage them) and infrared (which might cause them to overheat).</p>
<p>The gas cells were made by a new method pioneered by Goodyear using multiple layers of gelatinized latex rather than the previous goldbeater’s skins.</p>
<div><p><img decoding="async" src="https://4.bp.blogspot.com/-uIkwCDOR4bg/Wgq84zBV6II/AAAAAAAC4uM/_cNdHt2v0YoaOSPrhhQ-vCOBazNoQCDdgCLcBGAs/s1600/hindenburg-interior-0.jpg" alt="" width="1400"></p><p>Dining Room of Airship Hindenburg. (Photo from Airships.net collection).</p></div>
<p>Hindenburg’s interior furnishings were designed by Fritz August Breuhaus, whose design experience included Pullman coaches, ocean liners, and warships of the German Navy.</p>
<p>The upper “A” Deck contained 25 small two-passenger cabins in the middle flanked by large public rooms: a dining room to port and a lounge and writing room to starboard.</p>
<p>The pictures collected in this article reveal what luxury air travel looked like aboard the airship Hindenburg in the mid-1930s. The photos are part of the <span><a href="https://www.airships.net/" rel="nofollow ">Airship.net collection</a></span> by Dan Grossman.&nbsp;</p>
<p>Each cabin had call buttons to summon a steward or stewardess, a small fold-down desk, a wash basin made of lightweight white plastic with taps for hot and cold running water, and a small closet covered with a curtain in which a limited number of suits or dresses could be hung; other clothes had to be kept in their suitcases, which could be stowed under the lower berth.</p>
<p>None of the cabins had toilet facilities; male and female toilets were available on B Deck below, as was a single shower, which provided a weak stream of water “more like that from a seltzer bottle” than a shower, according to Charles Rosendahl.</p>
<div><p><img decoding="async" src="https://2.bp.blogspot.com/-rMQmxNF-cwI/Wgq8irSaYlI/AAAAAAAC4uA/EtEvGxzE-tEQp49JK0LZ4XiT53vUINp-ACLcBGAs/s1600/hindenburg-interior-1.jpg" alt="" width="1400"></p><p>Dining Room of Airship Hindenburg. (Photo from Airships.net collection).</p></div>
<p>Paintings on the dining room walls portrayed the Graf Zeppelin’s trips to South America. A stylized world map covered the wall of the lounge.</p>
<p>Long slanted windows ran the length of both decks. The passengers were expected to spend most of their time in the public areas, rather than their cramped cabins.</p>
<p>The lower “B” Deck contained washrooms, a mess hall for the crew, and a smoking lounge. Yes, you heard it right, one of the most surprising areas aboard a hydrogen airship was the smoking room.</p>
<p>However, it was kept at higher than ambient pressure, so in case of a leak, the hydrogen couldn’t enter the room. Furthermore, its associated bar was separated from the rest of the ship by a double-door airlock. There was one electric lighter since no open flames were allowed aboard the ship.</p>
<p>Harold G. Dick, an American representative from the Goodyear Zeppelin Company, recalled<em> “The only entrance to the smoking room, which was pressurized to prevent the admission of any leaking hydrogen, was via the bar, which had a swiveling air lock door, and all departing passengers were scrutinized by the bar steward to make sure they were not carrying out a lit cigarette or pipe.”</em></p>
<div><p><img decoding="async" src="https://1.bp.blogspot.com/-B4HuKSb5ymU/Wgq8i6U3VKI/AAAAAAAC4uE/4o7L6KZO57s6IqCIoQCUnyOCbi-oXWFUQCLcBGAs/s1600/hindenburg-interior-2.jpg" alt="" width="1500"></p><p>Dining on the Hindenburg. (Photo from Airships.net collection).</p></div>
<p>The Hindenburg’s bar was a small ante-room between the smoking room and the air-lock door leading to the corridor on B-Deck.</p>
<p>This is where Hindenburg bartender Max Schulze served up LZ-129 Frosted Cocktails (gin and orange juice) and Maybach 12 cocktails (recipe lost to history), but more importantly, it is where Schulze monitored the air-lock to ensure that no one left the smoking room with burning cigarettes, cigars, or pipes.</p>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-xOHsGMqRDoc/Wgq8jNR_6lI/AAAAAAAC4uI/k6xcP-j1kE4-wATJwGwjCtoHUhuUTkelgCLcBGAs/s1600/hindenburg-interior-3.jpg" alt="" width="1400"></p><p>Dining Room of Hindenburg, with Port Promenade. (Photo from Airships.net collection).</p></div>
<p>Hindenburg made 17 round trips across the Atlantic in 1936—its first and only full year of service—with ten trips to the United States and seven to Brazil.</p>
<p>The flights were considered demonstrative rather than routine in schedule. The first passenger trip across the North Atlantic left Frankfurt on 6 May with 56 crew and 50 passengers, arriving in Lakehurst on 9 May.</p>
<p>As the elevation at Rhein-Main’s airfield lies at 111 m (364 ft) above sea level, the airship could lift 6 tonnes (13,000 lb) more at takeoff there than she could from Friedrichshafen, which was situated at 417 m (1,368 ft).</p>
<div><p><img decoding="async" src="https://2.bp.blogspot.com/-upkQIXVFZLE/Wgq-lh66laI/AAAAAAAC4uY/2WwMcaRhZlggGdHFt1msIJQsUWWCj2DZwCLcBGAs/s1600/hindenburg-interior-4.jpg" alt="" width="1400" height="992"></p><p>Passenger Lounge. (Photo from Airships.net collection).</p></div>
<p>The airship was said to be so stable a pen or pencil could be balanced on end atop a tablet without falling. Launches were so smooth that passengers often missed them, believing the airship was still docked to the mooring mast.</p>
<p>A one-way fare between Germany and the United States was US$400 (equivalent to $7,811 in 2021); Hindenburg passengers were affluent, usually, entertainers, noted sportsmen, political figures, and leaders of the industry.</p>
<p>Hindenburg was used again for propaganda when it flew over the Olympic Stadium in Berlin on August 1 during the opening ceremonies of the 1936 Summer Olympic Games.</p>
<div><p><img decoding="async" src="https://4.bp.blogspot.com/-Xdjib9Yomzg/Wgq-lmpZNPI/AAAAAAAC4uc/2v5OdBGTQx4xbl4AvDOa5C1nC-boH1AQQCLcBGAs/s1600/hindenburg-interior-5.jpg" alt="" width="1400" height="717"></p><p>Two views of the Lounge, showing a portrait of Hitler and the ship’s duralumin piano.</p></div>
<p>In 1936, Hindenburg had a Blüthner aluminium grand piano placed on board in the music salon, though the instrument was removed after the first year to save weight</p>
<p>Over the winter of 1936–37, several alterations were made to the airship’s structures. The greater lift capacity allowed nine passenger cabins to be added, eight with two beds and one with four, increasing passenger capacity to 70.</p>
<p>These windowed cabins were along the starboard side aft of the previously installed accommodations, and it was anticipated for the LZ 130 to also have these cabins. Additionally, the Olympic rings painted on the hull were removed for the 1937 season.</p>
<p>After making the first South American flight of the 1937 season in late March, Hindenburg left Frankfurt for Lakehurst on the evening of 3 May, on its first scheduled round trip between Europe and North America that season.</p>
<div><p><img decoding="async" src="https://2.bp.blogspot.com/-yB28yZ1rEaA/Wgq-tmHaGVI/AAAAAAAC4ug/VRfh-GHUY7UjjVBNxK5KSdb8XIG-qGQmACLcBGAs/s1600/hindenburg-interior-6.jpg" alt="" width="1400" height="621"></p><p>Passenger Lounge. (Photo from Airships.net collection).</p></div>
<p>The now known as the <span><a href="https://rarehistoricalphotos.com/hindenburg-disaster-pictures/" rel="nofollow ">Hindenburg disaster</a></span> occurred on May 6, 1937, in Manchester Township, New Jersey, United States. The passenger airship caught fire and was destroyed during its attempt to dock with its mooring mast at Naval Air Station Lakehurst.</p>
<p>The accident caused 35 fatalities (13 passengers and 22 crewmen) from the 97 people on board (36 passengers and 61 crewmen), and an additional fatality on the ground.</p>
<p>The disaster was the subject of newsreel coverage, photographs, and Herbert Morrison’s recorded radio eyewitness reports from the landing field, which were broadcast the next day.</p>
<p>A variety of theories have been put forward for both the cause of ignition and the initial fuel for the ensuing fire. The publicity shattered public confidence in the giant, passenger-carrying rigid airship and marked the abrupt end of the airship era.</p>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-c6oD4OWCPAw/Wgq-t4fN3qI/AAAAAAAC4uo/UcYOK1kGL2cTNZnrHJmJlMqkyvBPpNqzwCLcBGAs/s1600/hindenburg-interior-7.jpg" alt="" width="1400" height="621"></p><p>Passenger Lounge. (Photo from Airships.net collection).</p></div>
<div><p><img decoding="async" src="https://4.bp.blogspot.com/-wMNbVZEXJOY/Wgq-t4GkAGI/AAAAAAAC4uk/QbxpWej3Rw8jxLkdk8c0Bt8nlDFmH4XxwCLcBGAs/s1600/hindenburg-interior-8.jpg" alt="" width="1400" height="965"></p><p>Passenger Lounge on the Airship Hindenburg, showing promenade windows. (Photo from Airships.net collection).</p></div>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-KHnb-oX8XD0/Wgq-1hCxYoI/AAAAAAAC4us/IJtuZF-_J6YgTJE9V_oe74CqJvURb2iUACLcBGAs/s1600/hindenburg-interior-9.jpg" alt="" width="1400" height="705"></p><p>Writing Room. (Photo from Airships.net collection).</p></div>
<div><p><img decoding="async" src="https://2.bp.blogspot.com/-yoWFDccFrEk/Wgq_QEeRJ6I/AAAAAAAC4u4/NN2RN3fPDPo-LLV5Vjk4DMkA6kwByeoSgCLcBGAs/s1600/hindenburg-interior-10.jpg" alt="" width="1400" height="990"></p><p>Passenger Cabin aboard Hindenburg. (Photo from Airships.net collection).</p></div>
<div><p><img decoding="async" src="https://4.bp.blogspot.com/-mOM-IprwKeg/Wgq_UEERFlI/AAAAAAAC4u8/T8UYiNWF5YAGriWepFayRJXfP-v8GkPcACLcBGAs/s1600/hindenburg-interior-11.jpg" alt="" width="1400" height="1000"></p><p>Passenger Cabin aboard Hindenburg. (Photo from Airships.net collection).</p></div>
<div><p><img decoding="async" src="https://1.bp.blogspot.com/-zFW5xdtWoUs/Wgq_o8vhN0I/AAAAAAAC4vA/ASLcJNwhg5wlRIV1w9xMPSNkHSYGECRqQCLcBGAs/s1600/hindenburg-interior-12.jpg" alt="" width="1400" height="957"></p><p>Starboard Promenade aboard LZ-129 Hindenburg, next to the Lounge. (Photo from Airships.net collection).</p></div>
<div><p><img decoding="async" src="https://4.bp.blogspot.com/-P_d_YMDnk7I/Wgq_-eLAQoI/AAAAAAAC4vM/ifbDhAtkr4I_YkwdkmHIcUNyFoqkLmGHwCLcBGAs/s1600/hindenburg-interior-13.jpg" alt="" width="1400" height="985"></p><p>Smoking Room aboard LZ-129 Hindenburg. (Photo from Airships.net collection).</p></div>
<div><p><img decoding="async" src="https://4.bp.blogspot.com/-WQKsCxd5bc4/Wgq_-W6K7gI/AAAAAAAC4vI/ZOs-kK9PEBgjg3XU4k2IzBshEzFpY9XoACLcBGAs/s1600/hindenburg-interior-14.jpg" alt="" width="1400" height="715"></p><p>Smoking Room aboard LZ-129 Hindenburg. (Photo from Airships.net collection).</p></div>
<div><p><img decoding="async" src="https://2.bp.blogspot.com/-s9z68LriF-Q/WgrADOXOz6I/AAAAAAAC4vQ/edyPJXeLuDcpDBqNEJdtECAjDpeTz-ragCLcBGAs/s1600/hindenburg-interior-15.jpg" alt="" width="1400" height="951"></p><p>Pressurized Smoking Room aboard LZ-129 Hindenburg, showing the door to the bar, with the airlock doors beyond. (Photo from Airships.net collection).</p></div>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-KLY08X3zmfg/WgrWcnSby_I/AAAAAAAC4wg/wpLMopVo5o4cL2B99sEVqYbvYrsFeed-ACLcBGAs/s1600/hindenburg-interior-18.jpg" alt="" width="1400" height="1497"></p><p>Hindenburg Bar.</p></div>
<div><p><img decoding="async" src="https://2.bp.blogspot.com/-7tXAbjuq7EE/WgrWciuZNXI/AAAAAAAC4wc/sKHrEol1VbQoHpFWnMdVpjKM_LBQ8DUMQCLcBGAs/s1600/hindenburg-interior-19.jpg" alt="" width="1400" height="1036"></p><p>Cocktails aboard the Hindenburg.</p></div>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-pQoY4b9pzbM/WgrAnB3quoI/AAAAAAAC4vg/8OjtptcyfgAutZ8TPWrClLuAcS2iX-3KACLcBGAs/s1600/hindenburg-interior-control-car-1.jpg" alt="" width="1400" height="1037"></p><p>Hindenburg Control Room (Ludwig Felber at helm, possibly Knut Eckener to his right). At far left is ballast board, then rudder station with gyro compass repeater, to right of tall figure is the eyepiece of a drift measuring telesope, and to the right is the engine telegraph, axial corridor speaking tube, altimeter, and engine instruments; to the far right is a variometer.</p></div>
<p><img decoding="async" src="https://3.bp.blogspot.com/-QlH-8Xlfd_w/WgrAm0v-aFI/AAAAAAAC4vY/4BBEsE_BNX0-No6ECNv4jE2pN4OUxpdHgCLcBGAs/s1600/hindenburg-interior-control-car-2.jpg" width="1400"></p>
<div><p><img decoding="async" src="https://1.bp.blogspot.com/-vnpVHtGNCx4/WgrAnLYFYqI/AAAAAAAC4vc/KQVNXyXbr6s1NWdsWI1fS3JSQxT_IQGtgCLcBGAs/s1600/hindenburg-interior-control-car-3.jpg" alt="" width="1400" height="1481"></p><p>Elevator Wheel, Elevator Panel, and Ballast Board.</p></div>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-F1tsQclUo6k/WgrAnsnSP7I/AAAAAAAC4vk/bf2Sihu4bRsPVU2enBMKPpd5kHDVgUDZACLcBGAs/s1600/hindenburg-interior-control-car-4.jpg" alt="" width="1400" height="475"></p><p>Hindenburg’s Elevator Panel.</p></div>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-jfYAIMUeZ38/WgrAoGC0jbI/AAAAAAAC4vo/tCSvc-XzGy8BYm3Rte21AO84rsiVm-9oQCLcBGAs/s1600/hindenburg-interior-control-car-5.jpg" alt="" width="1400" height="1044"></p><p>Hindenburg’s Navigation Room.</p></div>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-sYR4wFg-TAo/WgrAoUGbvrI/AAAAAAAC4vs/m9OupCDxcBEfHGtV3LZyg6CodMBIMtPVgCLcBGAs/s1600/hindenburg-interior-control-car-6.jpg" alt="" width="1400" height="1046"></p><p>Ernst Lehmann with Navigation Radios.</p></div>
<div><p><img decoding="async" src="https://1.bp.blogspot.com/-3x7hpe1Hsbk/WgrAoRge8BI/AAAAAAAC4vw/eq40bGFTGRoFrACzvk2LzhgR816IH9UggCLcBGAs/s1600/hindenburg-interior-control-car-7.jpg" alt="" width="1400" height="1028"></p><p>Hindenburg’s main telephone station.</p></div>
<div><p><img decoding="async" src="https://1.bp.blogspot.com/-a6UQT1Hj05o/WgrA1rsmfQI/AAAAAAAC4v0/LzSQyFPjPIoyehFHyWlSVsr9B1XLFLVmQCLcBGAs/s1600/hindenburg-interior-crew-areas-keel-1.jpg" alt="" width="1400" height="1041"></p><p>Hindenburg Radio Room.</p></div>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-TUwOOIUinL4/WgrA1k-KA5I/AAAAAAAC4v4/Oi0vWzR1Ul8eye-NhLbZmvO4l6_LQyzxgCLcBGAs/s1600/hindenburg-interior-crew-areas-keel-2.jpg" alt="" width="1400" height="1039"></p><p>Hindenburg Electrical Room.</p></div>
<div><p><img decoding="async" src="https://1.bp.blogspot.com/-yvW6S6qw_P8/WgrA1pWgROI/AAAAAAAC4v8/wnV-NqU8F0MzrrKYA_trs-HKNU8DakLMACLcBGAs/s1600/hindenburg-interior-crew-areas-keel-3.jpg" alt="" width="1400" height="698"></p><p>Hindenburg crew bunks, along the keel.</p></div>
<div><p><img decoding="async" src="https://3.bp.blogspot.com/-TPadFVf4Hk0/WgrA2pUq-BI/AAAAAAAC4wA/uEv9YqhbrA0LfGxgPYgm3Rf0us7QKsqyQCLcBGAs/s1600/hindenburg-interior-crew-areas-keel-4.jpg" alt="" width="1400" height="752"></p><p>Cargo storage along Hindenburg’s keel.</p></div>
<div><p><img decoding="async" src="https://4.bp.blogspot.com/-KwrtcZw4uZk/WgrA25qvp2I/AAAAAAAC4wE/VroT0p_QdwQvOdqTJpbgPpgvHPfZBOBMACLcBGAs/s1600/hindenburg-interior-crew-areas-keel-5.jpg" alt="" width="1400" height="629"></p><p>Hindenburg galley on B Deck.</p></div>
<div><p><img decoding="async" src="https://4.bp.blogspot.com/-rArnMAer0GA/WgrA3B7mT6I/AAAAAAAC4wI/1IJlk6P2jR0_p_kfxqLQc4qh1XN6UiPRwCLcBGAs/s1600/hindenburg-interior-crew-areas-keel-6.jpg" alt="" width="1400" height="882"></p><p>Hindenburg galley on B Deck.</p></div>
<div><p><img decoding="async" src="https://1.bp.blogspot.com/-4sYt_U2jENo/WgrA3dSlprI/AAAAAAAC4wM/Mmxz-HIQzWktzc5owKrNOSQ-hYEEBjW4ACLcBGAs/s1600/hindenburg-interior-crew-areas-keel-7.jpg" alt="" width="1400" height="675"></p><p>B Deck: Crew mess, with photographs of Hitler and Hindenburg (left); Officers mess (right).</p></div>
<div><p><img decoding="async" src="https://4.bp.blogspot.com/-MbMH9htJrgs/WxiUfyOhG5I/AAAAAAAAQP0/dvCzifgxULIB_HELdxOQdsCqyKUa80w7ACLcBGAs/s1600/Hindenburg_Disaster%2B%252821%2529.jpg" width="1400"></p><p>As the lifting Hydrogen gas burned and escaped from the rear of the Hindenburg, the tail dropped to the ground, sending a burst of flame punching through the nose. Ground crew below scatter to flee the inferno.</p></div>
<p><em>(Photo credit: <span><a href="https://www.airships.net/" rel="nofollow ">airships.net collection by Dan Grossman</a></span> / Wikimedia Commons / Britannica / Bundesarchiv / Archiv der Luftschiffbau Zeppelin GmbH, Friedrichshafen).</em></p>
					</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA['Right to Repair for Your Body': The Rise of DIY, Pirated Medicine (192 pts)]]></title>
            <link>https://fourthievesvinegar.org/</link>
            <guid>41474080</guid>
            <pubDate>Sat, 07 Sep 2024 14:19:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fourthievesvinegar.org/">https://fourthievesvinegar.org/</a>, See on <a href="https://news.ycombinator.com/item?id=41474080">Hacker News</a></p>
Couldn't get https://fourthievesvinegar.org/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Conservative GC can be faster than precise GC (130 pts)]]></title>
            <link>https://wingolog.org/archives/2024/09/07/conservative-gc-can-be-faster-than-precise-gc</link>
            <guid>41473061</guid>
            <pubDate>Sat, 07 Sep 2024 10:44:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wingolog.org/archives/2024/09/07/conservative-gc-can-be-faster-than-precise-gc">https://wingolog.org/archives/2024/09/07/conservative-gc-can-be-faster-than-precise-gc</a>, See on <a href="https://news.ycombinator.com/item?id=41473061">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Should your garbage collector be precise or conservative?  The
prevailing wisdom is that precise is always better.  Conservative GC can
retain more objects than strictly necessary, making GC slow: GC has to
more frequently, and it has to trace a larger heap on each collection.
However the calculus is not as straightforward as most people think, and
indeed there are some reasons to expect that conservative root-finding
can result in faster systems.</p><p>(I have made / relayed some of these arguments before but I feel like a
dedicated article can make a contribution here.)</p><h3>problem precision</h3><p>Let us assume that by <i>conservative GC</i> we mean conservative
root-finding, in which the collector assumes that any integer on the
stack that happens to be a heap address indicates a reference on the
object containing that address.  The address doesn’t have to be at the
start of the object.  Assume that objects on the heap are traced
precisely; contrast to BDW-GC which generally traces both the stack and
the heap conservatively.  Assume a collector that will pin referents of
conservative roots, but in which objects not referred to by a
conservative root can be moved, as in <a href="https://dl.acm.org/doi/10.1145/2660193.2660198">Conservative
Immix</a> or Whippet’s
<a href="https://github.com/wingo/whippet/blob/main/doc/collector-mmc.md#conservative-stack-scanning"><tt>stack-conservative-mmc</tt>
collector</a>.</p><p>With that out of the way, let’s look at some reasons why conservative GC
might be faster than precise GC.</p><h3>smaller lifetimes</h3><p>A compiler that does precise root-finding will typically output a
side-table indicating which slots in a stack frame hold references to
heap objects.  These lifetimes aren’t always precise, in the sense that
although they precisely enumerate heap references, those heap references
might actually not be used in the continuation of the stack frame.  When
GC occurs, it might mark more objects as live than are actually live,
which is the imputed disadvantage of conservative collectors.</p><p>This is most obviously the case when you need to explicitly register
roots with some kind of handle API: the handle will typically be kept
live until the scope ends, but that might be an overapproximation of
lifetime.  A compiler that can assume conservative stack scanning may
well exhibit more precision than it would if it needed to emit stack
maps.</p><h3>no run-time overhead</h3><p>For generated code, stack maps are great.  But if a compiler needs to
call out to C++ or something, it needs to precisely track roots in a
<a href="https://github.com/v8/v8/blob/main/src/handles/handles.h">run-time data
structure</a>.
This is overhead, and conservative collectors avoid it.</p><h3>smaller stack frames</h3><p>A compiler may partition spill space on a stack into a part that
contains pointers to the heap and a part containing numbers or other
unboxed data.  This may lead to larger stack sizes than if you could
just re-use a slot for two purposes, if the lifetimes don’t overlap.  A
similar concern applies for compilers that partition registers.</p><h3>no stack maps</h3><p>The need to emit stack maps is annoying for a compiler and makes
binaries bigger.  Of course it’s necessary for precise roots.  But then
there is additional overhead when tracing the stack: for each frame on
the stack, you need to look up the stack map for the return
continuation, which takes time.  It may be faster to just test if words
on the stack might be pointers to the heap.</p><h3>unconstrained compiler</h3><p>Having to make stack maps is a constraint imposed on the compiler.
Maybe if you don’t need them, the compiler could do a better job, or you
could use a different compiler entirely.  A conservative compiler can sometimes have better codegen, for example by the use of interior pointers.</p><h3>anecdotal evidence</h3><p>The <a href="https://dl.acm.org/doi/10.1145/2660193.2660198">Conservative Immix</a>
paper shows that conservative stack scanning can beat precise scanning
in some cases.  I have reproduced these results with
<a href="https://github.com/wingo/whippet/blob/main/doc/collector-mmc.md#conservative-stack-scanning"><tt>parallel-stack-conservative-mmc</tt> compared to
<tt>parallel-mmc</tt></a>.
It’s small—maybe a percent—but it was a surprising result to me and I
thought others might want to know.</p><p>Also, Apple’s JavaScriptCore uses conservative stack scanning, and <a href="https://wingolog.org/archives/2023/12/07/the-last-5-years-of-v8s-garbage-collector">V8 is looking at switching to it</a>.  Funny, right?</p><h3>conclusion</h3><p>When it comes to designing a system with GC, don’t count out
conservative stack scanning; the tradeoffs don’t obviously go one way or the other, and conservative scanning might be the right engineering choice for your system.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The PERQ Computer (157 pts)]]></title>
            <link>https://graydon2.dreamwidth.org/313862.html</link>
            <guid>41472855</guid>
            <pubDate>Sat, 07 Sep 2024 09:58:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://graydon2.dreamwidth.org/313862.html">https://graydon2.dreamwidth.org/313862.html</a>, See on <a href="https://news.ycombinator.com/item?id=41472855">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>A note on the PERQ computer.</p><p>Through a sequence of random events (seeing a note about an Alto emulator, listening to a truly atrocious podcast-retelling of the NeXT computer company) I found myself reading about the <a href="https://bitsavers.org/pdf/perq/PERQ_Brochure.pdf">PERQ</a> computer this evening.</p><p>Reader: the modern <a href="https://en.wikipedia.org/wiki/Mac_(computer)">Mac</a> is not "a copy of an <a href="https://en.wikipedia.org/wiki/Xerox_Alto">Alto</a>". I mean it kinda is. But more recently than that, it's really a copy of a <a href="https://en.wikipedia.org/wiki/PERQ">PERQ</a>.</p><p><img src="https://p.dreamwidth.org/20661e79c4f3/684470-313862/venge.net/graydon/perq.png" width="400"><img src="https://p.dreamwidth.org/f695b1792867/684470-313862/venge.net/graydon/perq-guy.png" width="400"></p><p>The PERQ is an early, commercial, and technical-user-focused version of an Alto. Except not quite. It had the same fast CPU, large local memory and bitmapped display with fast microcoded rasterops (a so-called "<a href="https://en.wikipedia.org/wiki/3M_computer">3M machine</a>" -- 1 MIPS CPU, 1 megabyte RAM, 1 megapixel display, "and 1 megapenny of price", about $10,000). It had the same GUI with overlapping windows. It also had Pascal, Fortran, C and Lisp. It also demoed and started taking orders in 1979 and shipped in 1980, before the competition, including before Xerox. The Xerox <a href="https://en.wikipedia.org/wiki/Xerox_Star">Star</a> (Xerox did finally commercialize the Alto) and <a href="https://en.wikipedia.org/wiki/Apollo/Domain">Apollo/Domain</a> each shipped a year later, in 1981.</p><p>The <a href="https://en.wikipedia.org/wiki/Sun-1">Sun-1</a>? Another year out, 1982. The Apple <a href="https://en.wikipedia.org/wiki/Apple_Lisa">Lisa</a>? A third the screen real estate and another year out, 1983. Mac? <a href="https://en.wikipedia.org/wiki/1984_(advertisement)">1984</a> of course. After the Mac (which was not especially successful), Steve Jobs actually wound up in Apple's SuperMicro division trying to make a 3M machine for real, to crack that market -- a market mostly consisting of PERQs, Suns and Apollos at the time. Apple's foray was going to be the <a href="https://en.wikipedia.org/wiki/Big_Mac_(computer)">Big Mac</a>. It never shipped. When he left Apple, that team went with him to <a href="https://en.wikipedia.org/wiki/NeXT">NeXT</a>, where .. they tried again to build a 3M machine. And they did! Just extremely late, in 1989. And still $10k, despite almost a decade of brutal price competition on the low end.</p><p>The PERQ was <em>literally</em> built to be a commercial Alto, a version-you-could-buy. But it was also not from Palo Alto, or Mountain View, or Cupertino, or anywhere in California. It was from the much less flashy but extremely important computer town of <a href="https://en.wikipedia.org/wiki/Pittsburgh">Pittsburgh, PA</a>. It was built by a <a href="https://en.wikipedia.org/wiki/Carnegie_Mellon_University">CMU</a> spinoff: the <a href="https://en.wikipedia.org/wiki/Three_Rivers_Computer_Corporation">Three Rivers Computer Company</a> (Pittsburgh is at the confluence of 3 rivers). One of the company's founders -- Brian Rosen -- actually went to work on the Star at Xerox PARC for two years, from 76 to 78, and then came back to Three Rivers to pitch everything-he-learned as the basis for a new machine, which became the PERQ. (It was briefly even called the "Pascalto", because like all machines in this genre it supported user-written microcode and custom instruction sets, and the PERQ ran Pascal P-code. Through a microcode emulator. Things were wild.)</p><p>Ok so maybe the PERQ is just Alto in commercial clothing? No there's more! The PERQ didn't run <a href="https://en.wikipedia.org/wiki/Pilot_(operating_system)">Xerox Pilot</a> or whatever, it ran either PNX (a straight Unix port done by <a href="https://en.wikipedia.org/wiki/International_Computers_Limited">ICL</a> running on yet another microcoded VM, C-code) or this other operating system called <a href="https://en.wikipedia.org/wiki/Accent_kernel">Accent</a>. What's that? Why, it's the predecessor of <a href="https://en.wikipedia.org/wiki/Mach_(kernel)">Mach</a>! Written by CMU Professor <a href="https://en.wikipedia.org/wiki/Richard_Rashid">Rick Rashid</a> and his grad student <a href="https://en.wikipedia.org/wiki/Avie_Tevanian">Avie Tevanian</a>. Does that name sound familiar? Avie and Mach are what NeXT bet their farm on in 1988. Mach is what Apple bet their farm on when they bought NeXT, and is what all of today's Apple stuff from watches to phones to laptops runs on. And when Steve pitched Avie to join NeXT in 1986 it was because of the <a href="https://eecs582.github.io/readings/mach-usenix86.pdf">Usenix paper Avie just published</a> about Mach, which ran on VAX, <a href="https://en.wikipedia.org/wiki/IBM_RT_PC">IBM RT/PC</a> (the RS/6000 predecessor) and ... PERQ. Because Avie and Rick, like everyone at CMU, were big PERQ fans, had PERQs all over their department as surrogate Altos. PERQs were the Altos you could buy, that CMU had bought a bunch of, that ran Unix and Mach.</p><p>But wait, why did CMU even want surrogate Altos? How did CMU people have any connection to Altos <em>before</em> PERQs, what motivated that connection, and .. how did Xerox wind up connected here? Aha! Through the even less well-thought-of neighboring city of <a href="https://en.wikipedia.org/wiki/Rochester,_New_York">Rochester, NY</a>! Xerox isn't a west coast company at all. <a href="https://en.wikipedia.org/wiki/Xerox#History">It's from Rochester</a>. Because of even older origin-stories involving the <a href="https://en.wikipedia.org/wiki/Institute_of_Optics">optics</a> business, and Kodak, and (long digression here into east-coast tech history). Anyway it's from Rochester. But their chief scientist <a href="https://en.wikipedia.org/wiki/Jack_Goldman">Jack Goldman</a> was former faculty from CMU which is a short drive from Rochester, and he set up a wild unsupervised west-coast lab in Palo Alto, called Xerox PARC, and when PARC made the Alto, Xerox HQ back in Rochester naturally donated a bunch of them to University of Rochester, and Rick Rashid (then a Rochester PhD) and Avie Tevanian (then a Rochester undergrad) spent their days at Rochester hacking video games on the Alto. And dreaming of someday having their own.</p><p>And then they went down the road to CMU: Rick to a professorship, and Avie to be his student. And CMU was Jack Goldman's alma mater, and so Xerox had also donated a bunch of Altos there. And CMU was enjoying their donated Altos so much they had started up a 3M machine joint hardware-software project: <a href="https://bitsavers.org/pdf/cmu/spice/A_Proposal_For_A_Joint_Effort_In_Personal_Scientific_Computing_Aug1979.pdf">SPICE</a>. Which had ARPA money and was going to involve buying 200 machines from their former colleagues down the street at Three Rivers Computer Company -- 200 PERQs. Which was the first of the 3M machines everyone actually bought and used, in the years between the 3M machine becoming a cool idea and the market imploding right as NeXT tried to enter it.</p><p>So anyway, short story long: the path to modern macOS and iOS machines is less than 100% sunny California people; it involves quite a bit of slushy rust belt grad students (fun fact: mach is named after Pittsburgh winter slush, a mishearing of the word "muck".)</p><p>(There's also much more here involving a <a href="https://www.chilton-computing.org.uk/acd/sus/overview.htm">whole joint development situation with ICL</a>, not just a Unix port, which you definitely should fall down the rabbit hole of -- especially if you're not familiar with ICL itself! -- but I think I've talked enough here already.)</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Keyhole – Forge own Windows Store licenses (512 pts)]]></title>
            <link>https://massgrave.dev/blog/keyhole</link>
            <guid>41472643</guid>
            <pubDate>Sat, 07 Sep 2024 09:13:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://massgrave.dev/blog/keyhole">https://massgrave.dev/blog/keyhole</a>, See on <a href="https://news.ycombinator.com/item?id=41472643">Hacker News</a></p>
Couldn't get https://massgrave.dev/blog/keyhole: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Richard Feynman and the Connection Machine (1989) (149 pts)]]></title>
            <link>https://longnow.org/essays/richard-feynman-and-connection-machine/</link>
            <guid>41472135</guid>
            <pubDate>Sat, 07 Sep 2024 07:20:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://longnow.org/essays/richard-feynman-and-connection-machine/">https://longnow.org/essays/richard-feynman-and-connection-machine/</a>, See on <a href="https://news.ycombinator.com/item?id=41472135">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        





<p>
    Published on Sunday, January 15, 01989 &nbsp;•&nbsp; <span>35&nbsp;years, 7&nbsp;months ago</span><br> 
    Written by <span>Danny Hillis</span> for <span>Physics Today</span>
</p>

        <p><img src="https://media.longnow.org/files/2/Feynman.JPG" alt=""></p>
<p>One day when I was having lunch with Richard Feynman, I mentioned to him that        I was planning to start a company to build a parallel computer with a million        processors. His reaction was unequivocal, "That is positively the dopiest idea        I ever heard." For Richard a crazy idea was an opportunity to either prove it        wrong or prove it right. Either way, he was interested. By the end of lunch        he had agreed to spend the summer working at the company.</p>
<p>Richard's interest in computing went back to his days at Los Alamos, where        he supervised the "computers," that is, the people who operated the mechanical        calculators. There he was instrumental in setting up some of the first plug-programmable        tabulating machines for physical simulation. His interest in the field was heightened        in the late 1970's when his son, Carl, began studying computers at MIT.</p>
<p>I got to know Richard through his son. I was a graduate student at the MIT        Artificial Intelligence Lab and Carl was one of the undergraduates helping me        with my thesis project. I was trying to design a computer fast enough to solve        common sense reasoning problems. The machine, as we envisioned it, would contain        a million tiny computers, all connected by a communications network. We called        it a "Connection Machine." Richard, always interested in his son's activities,        followed the project closely. He was skeptical about the idea, but whenever        we met at a conference or I visited CalTech, we would stay up until the early        hours of the morning discussing details of the planned machine. The first time        he ever seemed to believe that we were really going to try to build it was the        lunchtime meeting.</p>
<p>Richard arrived in Boston the day after the company was incorporated. We had        been busy raising the money, finding a place to rent, issuing stock, etc. We        set up in an old mansion just outside of the city, and when Richard showed up        we were still recovering from the shock of having the first few million dollars        in the bank. No one had thought about anything technical for several months.        We were arguing about what the name of the company should be when Richard walked        in, saluted, and said, "Richard Feynman reporting for duty. OK, boss, what's        my assignment?" The assembled group of not-quite-graduated MIT students was        astounded.</p>
<p>After a hurried private discussion ("I don't know, you hired him..."), we        informed Richard that his assignment would be to advise on the application of        parallel processing to scientific problems.</p>
<p>"That sounds like a bunch of baloney," he said. "Give me something real to        do."</p>
<p>So we sent him out to buy some office supplies. While he was gone, we decided        that the part of the machine that we were most worried about was the router        that delivered messages from one processor to another. We were not sure that        our design was going to work. When Richard returned from buying pencils, we        gave him the assignment of analyzing the router.</p>
<h2>The Machine</h2>
<p>The router of the Connection Machine was the part of the hardware that allowed        the processors to communicate. It was a complicated device; by comparison, the        processors themselves were simple. Connecting a separate communication wire        between each pair of processors was impractical since a million processors would        require $10^{12]$ wires. Instead, we planned to connect the processors in a        20-dimensional hypercube so that each processor would only need to talk to 20        others directly. Because many processors had to communicate simultaneously,        many messages would contend for the same wires. The router's job was to find        a free path through this 20-dimensional traffic jam or, if it couldn't, to hold        onto the message in a buffer until a path became free. Our question to Richard        Feynman was whether we had allowed enough buffers for the router to operate        efficiently.</p>
<p>During those first few months, Richard began studying the router circuit diagrams        as if they were objects of nature. He was willing to listen to explanations        of how and why things worked, but fundamentally he preferred to figure out everything        himself by simulating the action of each of the circuits with pencil and paper.</p>
<p>In the meantime, the rest of us, happy to have found something to keep Richard        occupied, went about the business of ordering the furniture and computers, hiring        the first engineers, and arranging for the Defense Advanced Research Projects        Agency (DARPA) to pay for the development of the first prototype. Richard did        a remarkable job of focusing on his "assignment," stopping only occasionally        to help wire the computer room, set up the machine shop, shake hands with the        investors, install the telephones, and cheerfully remind us of how crazy we        all were. When we finally picked the name of the company, Thinking Machines        Corporation, Richard was delighted. "That's good. Now I don't have to explain        to people that I work with a bunch of loonies. I can just tell them the name        of the company."</p>
<p>The technical side of the project was definitely stretching our capacities.        We had decided to simplify things by starting with only 64,000 processors, but        even then the amount of work to do was overwhelming. We had to design our own        silicon integrated circuits, with processors and a router. We also had to invent        packaging and cooling mechanisms, write compilers and assemblers, devise ways        of testing processors simultaneously, and so on. Even simple problems like wiring        the boards together took on a whole new meaning when working with tens of thousands        of processors. In retrospect, if we had had any understanding of how complicated        the project was going to be, we never would have started.</p>
<h2>'Get These Guys Organized'</h2>
<p>I had never managed a large group before and I was clearly in over my head.        Richard volunteered to help out. "We've got to get these guys organized," he        told me. "Let me tell you how we did it at Los Alamos."</p>
<p>Every great man that I have known has had a certain time and place in their        life that they use as a reference point; a time when things worked as they were        supposed to and great things were accomplished. For Richard, that time was at        Los Alamos during the Manhattan Project. Whenever things got "cockeyed," Richard        would look back and try to understand how now was different than then. Using        this approach, Richard decided we should pick an expert in each area of importance        in the machine, such as software or packaging or electronics, to become the        "group leader" in this area, analogous to the group leaders at Los Alamos.</p>
<p>Part Two of Feynman's "Let's Get Organized" campaign was that we should begin        a regular seminar series of invited speakers who might have interesting things        to do with our machine. Richard's idea was that we should concentrate on people        with new applications, because they would be less conservative about what kind        of computer they would use. For our first seminar he invited John Hopfield,        a friend of his from CalTech, to give us a talk on his scheme for building neural        networks. In 1983, studying neural networks was about as fashionable as studying        ESP, so some people considered John Hopfield a little bit crazy. Richard was        certain he would fit right in at Thinking Machines Corporation.</p>
<p>What Hopfield had invented was a way of constructing an [associative memory],        a device for remembering patterns. To use an associative memory, one trains        it on a series of patterns, such as pictures of the letters of the alphabet.        Later, when the memory is shown a new pattern it is able to recall a similar        pattern that it has seen in the past. A new picture of the letter "A" will "remind"        the memory of another "A" that it has seen previously. Hopfield had figured        out how such a memory could be built from devices that were similar to biological        neurons.</p>
<p>Not only did Hopfield's method seem to work, but it seemed to work well on        the Connection Machine. Feynman figured out the details of how to use one processor        to simulate each of Hopfield's neurons, with the strength of the connections        represented as numbers in the processors' memory. Because of the parallel nature        of Hopfield's algorithm, all of the processors could be used concurrently with        100\% efficiency, so the Connection Machine would be hundreds of times faster        than any conventional computer.</p>
<h2>An Algorithm For Logarithms</h2>
<p>Feynman worked out the program for computing Hopfield's network on the Connection        Machine in some detail. The part that he was proudest of was the subroutine        for computing logarithms. I mention it here not only because it is a clever        algorithm, but also because it is a specific contribution Richard made to the        mainstream of computer science. He invented it at Los Alamos.</p>
<p>Consider the problem of finding the logarithm of a fractional number between        1.0 and 2.0 (the algorithm can be generalized without too much difficulty).        Feynman observed that any such number can be uniquely represented as a product        of numbers of the form $1 + 2^{-k]$, where $k$ is an integer. Testing each of        these factors in a binary number representation is simply a matter of a shift        and a subtraction. Once the factors are determined, the logarithm can be computed        by adding together the precomputed logarithms of the factors. The algorithm        fit especially well on the Connection Machine, since the small table of the        logarithms of $1 + 2^{-k]$ could be shared by all the processors. The entire        computation took less time than division.</p>
<p>Concentrating on the algorithm for a basic arithmetic operation was typical        of Richard's approach. He loved the details. In studying the router, he paid        attention to the action of each individual gate and in writing a program he        insisted on understanding the implementation of every instruction. He distrusted        abstractions that could not be directly related to the facts. When several years        later I wrote a general interest article on the Connection Machine for [Scientific        American], he was disappointed that it left out too many details. He asked,        "How is anyone supposed to know that this isn't just a bunch of crap?"</p>
<p>Feynman's insistence on looking at the details helped us discover the potential        of the machine for numerical computing and physical simulation. We had convinced        ourselves at the time that the Connection Machine would not be efficient at        "number-crunching," because the first prototype had no special hardware for        vectors or floating point arithmetic. Both of these were "known" to be requirements        for number-crunching. Feynman decided to test this assumption on a problem that        he was familiar with in detail: quantum chromodynamics.</p>
<p>Quantum chromodynamics is a theory of the internal workings of atomic particles        such as protons. Using this theory it is possible, in principle, to compute        the values of measurable physical quantities, such as a proton's mass. In practice,        such a computation requires so much arithmetic that it could keep the fastest        computers in the world busy for years. One way to do this calculation is to        use a discrete four-dimensional lattice to model a section of space-time. Finding        the solution involves adding up the contributions of all of the possible configurations        of certain matrices on the links of the lattice, or at least some large representative        sample. (This is essentially a Feynman path integral.) The thing that makes        this so difficult is that calculating the contribution of even a single configuration        involves multiplying the matrices around every little loop in the lattice, and        the number of loops grows as the fourth power of the lattice size. Since all        of these multiplications can take place concurrently, there is plenty of opportunity        to keep all 64,000 processors busy.</p>
<p>To find out how well this would work in practice, Feynman had to write a computer        program for QCD. Since the only computer language Richard was really familiar        with was Basic, he made up a parallel version of Basic in which he wrote the        program and then simulated it by hand to estimate how fast it would run on the        Connection Machine.</p>
<p>He was excited by the results. "Hey Danny, you're not going to believe this,        but that machine of yours can actually do something [useful]!" According to        Feynman's calculations, the Connection Machine, even without any special hardware        for floating point arithmetic, would outperform a machine that CalTech was building        for doing QCD calculations. From that point on, Richard pushed us more and more        toward looking at numerical applications of the machine.</p>
<p>By the end of that summer of 1983, Richard had completed his analysis of the        behavior of the router, and much to our surprise and amusement, he presented        his answer in the form of a set of partial differential equations. To a physicist        this may seem natural, but to a computer designer, treating a set of boolean        circuits as a continuous, differentiable system is a bit strange. Feynman's        router equations were in terms of variables representing continuous quantities        such as "the average number of 1 bits in a message address." I was much more        accustomed to seeing analysis in terms of inductive proof and case analysis        than taking the derivative of "the number of 1's" with respect to time. Our        discrete analysis said we needed seven buffers per chip; Feynman's equations        suggested that we only needed five. We decided to play it safe and ignore Feynman.</p>
<p>The decision to ignore Feynman's analysis was made in September, but by next        spring we were up against a wall. The chips that we had designed were slightly        too big to manufacture and the only way to solve the problem was to cut the        number of buffers per chip back to five. Since Feynman's equations claimed we        could do this safely, his unconventional methods of analysis started looking        better and better to us. We decided to go ahead and make the chips with the        smaller number of buffers.</p>
<p>Fortunately, he was right. When we put together the chips the machine worked.        The first program run on the machine in April of 1985 was Conway's game of Life.</p>
<h2>Cellular Automata</h2>
<p>The game of Life is an example of a class of computations that interested        Feynman called [cellular automata]. Like many physicists who had spent their        lives going to successively lower and lower levels of atomic detail, Feynman        often wondered what was at the bottom. One possible answer was a cellular automaton.        The notion is that the "continuum" might, at its lowest levels, be discrete        in both space and time, and that the laws of physics might simply be a macro-consequence        of the average behavior of tiny cells. Each cell could be a simple automaton        that obeys a small set of rules and communicates only with its nearest neighbors,        like the lattice calculation for QCD. If the universe in fact worked this way,        then it presumably would have testable consequences, such as an upper limit        on the density of information per cubic meter of space.</p>
<p>The notion of cellular automata goes back to von Neumann and Ulam, whom Feynman        had known at Los Alamos. Richard's recent interest in the subject was motivated        by his friends Ed Fredkin and Stephen Wolfram, both of whom were fascinated        by cellular automata models of physics. Feynman was always quick to point out        to them that he considered their specific models "kooky," but like the Connection        Machine, he considered the subject sufficiently crazy to put some energy into.</p>
<p>There are many potential problems with cellular automata as a model of physical        space and time; for example, finding a set of rules that obeys special relativity.        One of the simplest problems is just making the physics so that things look        the same in every direction. The most obvious pattern of cellular automata,        such as a fixed three-dimensional grid, have preferred directions along the        axes of the grid. Is it possible to implement even Newtonian physics on a fixed        lattice of automata?</p>
<p>Feynman had a proposed solution to the anisotropy problem which he attempted        (without success) to work out in detail. His notion was that the underlying        automata, rather than being connected in a regular lattice like a grid or a        pattern of hexagons, might be randomly connected. Waves propagating through        this medium would, on the average, propagate at the same rate in every direction.</p>
<p>Cellular automata started getting attention at Thinking Machines when Stephen        Wolfram, who was also spending time at the company, suggested that we should        use such automata not as a model of physics, but as a practical method of simulating        physical systems. Specifically, we could use one processor to simulate each        cell and rules that were chosen to model something useful, like fluid dynamics.        For two-dimensional problems there was a neat solution to the anisotropy problem        since [Frisch, Hasslacher, Pomeau] had shown that a hexagonal lattice with a        simple set of rules produced isotropic behavior at the macro scale. Wolfram        used this method on the Connection Machine to produce a beautiful movie of a        turbulent fluid flow in two dimensions. Watching the movie got all of us, especially        Feynman, excited about physical simulation. We all started planning additions        to the hardware, such as support of floating point arithmetic that would make        it possible for us to perform and display a variety of simulations in real time.</p>
<h2>Feynman the Explainer</h2>
<p>In the meantime, we were having a lot of trouble explaining to people what        we were doing with cellular automata. Eyes tended to glaze over when we started        talking about state transition diagrams and finite state machines. Finally Feynman        told us to explain it like this,</p>
<p>"We have noticed in nature that the behavior of a fluid depends very little        on the nature of the individual particles in that fluid. For example, the flow        of sand is very similar to the flow of water or the flow of a pile of ball bearings.        We have therefore taken advantage of this fact to invent a type of imaginary        particle that is especially simple for us to simulate. This particle is a perfect        ball bearing that can move at a single speed in one of six directions. The flow        of these particles on a large enough scale is very similar to the flow of natural        fluids."</p>
<p>This was a typical Richard Feynman explanation. On the one hand, it infuriated        the experts who had worked on the problem because it neglected to even mention        all of the clever problems that they had solved. On the other hand, it delighted        the listeners since they could walk away from it with a real understanding of        the phenomenon and how it was connected to physical reality.</p>
<p>We tried to take advantage of Richard's talent for clarity by getting him        to critique the technical presentations that we made in our product introductions.        Before the commercial announcement of the Connection Machine CM-1 and all of        our future products, Richard would give a sentence-by-sentence critique of the        planned presentation. "Don't say `reflected acoustic wave.' Say [echo]." Or,        "Forget all that `local minima' stuff. Just say there's a bubble caught in the        crystal and you have to shake it out." Nothing made him angrier than making        something simple sound complicated.</p>
<p>Getting Richard to give advice like that was sometimes tricky. He pretended        not to like working on any problem that was outside his claimed area of expertise.        Often, at Thinking Machines when he was asked for advice he would gruffly refuse        with "That's not my department." I could never figure out just what his department        was, but it did not matter anyway, since he spent most of his time working on        those "not-my-department" problems. Sometimes he really would give up, but more        often than not he would come back a few days after his refusal and remark, "I've        been thinking about what you asked the other day and it seems to me..." This        worked best if you were careful not to expect it.</p>
<p>I do not mean to imply that Richard was hesitant to do the "dirty work." In        fact, he was always volunteering for it. Many a visitor at Thinking Machines        was shocked to see that we had a Nobel Laureate soldering circuit boards or        painting walls. But what Richard hated, or at least pretended to hate, was being        asked to give advice. So why were people always asking him for it? Because even        when Richard didn't understand, he always seemed to understand better than the        rest of us. And whatever he understood, he could make others understand as well.        Richard made people feel like a child does, when a grown-up first treats him        as an adult. He was never afraid of telling the truth, and however foolish your        question was, he never made you feel like a fool.</p>
<p>The charming side of Richard helped people forgive him for his uncharming        characteristics. For example, in many ways Richard was a sexist. Whenever it        came time for his daily bowl of soup he would look around for the nearest "girl"        and ask if she would fetch it to him. It did not matter if she was the cook,        an engineer, or the president of the company. I once asked a female engineer        who had just been a victim of this if it bothered her. "Yes, it really annoys        me," she said. "On the other hand, he is the only one who ever explained quantum        mechanics to me as if I could understand it." That was the essence of Richard's        charm.</p>
<h2>A Kind Of Game</h2>
<p>Richard worked at the company on and off for the next five years. Floating        point hardware was eventually added to the machine, and as the machine and its        successors went into commercial production, they were being used more and more        for the kind of numerical simulation problems that Richard had pioneered with        his QCD program. Richard's interest shifted from the construction of the machine        to its applications. As it turned out, building a big computer is a good excuse        to talk to people who are working on some of the most exciting problems in science.        We started working with physicists, astronomers, geologists, biologists, chemists        --- everyone of them trying to solve some problem that it had never been possible        to solve before. Figuring out how to do these calculations on a parallel machine        requires understanding of the details of the application, which was exactly        the kind of thing that Richard loved to do.</p>
<p>For Richard, figuring out these problems was a kind of a game. He always started        by asking very basic questions like, "What is the simplest example?" or "How        can you tell if the answer is right?" He asked questions until he reduced the        problem to some essential puzzle that he thought he would be able to solve.        Then he would set to work, scribbling on a pad of paper and staring at the results.        While he was in the middle of this kind of puzzle solving he was impossible        to interrupt. "Don't bug me. I'm busy," he would say without even looking up.        Eventually he would either decide the problem was too hard (in which case he        lost interest), or he would find a solution (in which case he spent the next        day or two explaining it to anyone who listened). In this way he worked on problems        in database searches, geophysical modeling, protein folding, analyzing images,        and reading insurance forms.</p>
<p>The last project that I worked on with Richard was in simulated evolution.        I had written a program that simulated the evolution of populations of sexually        reproducing creatures over hundreds of thousands of generations. The results        were surprising in that the fitness of the population made progress in sudden        leaps rather than by the expected steady improvement. The fossil record shows        some evidence that real biological evolution might also exhibit such "punctuated        equilibrium," so Richard and I decided to look more closely at why it happened.        He was feeling ill by that time, so I went out and spent the week with him in        Pasadena, and we worked out a model of evolution of finite populations based        on the Fokker Planck equations. When I got back to Boston I went to the library        and discovered a book by Kimura on the subject, and much to my disappointment,        all of our "discoveries" were covered in the first few pages. When I called        back and told Richard what I had found, he was elated. "Hey, we got it right!"        he said. "Not bad for amateurs."</p>
<p>In retrospect I realize that in almost everything that we worked on together,        we were both amateurs. In digital physics, neural networks, even parallel computing,        we never really knew what we were doing. But the things that we studied were        so new that no one else knew exactly what they were doing either. It was amateurs        who made the progress.</p>
<h2>Telling The Good Stuff You Know</h2>
<p>Actually, I doubt that it was "progress" that most interested Richard. He        was always searching for patterns, for connections, for a new way of looking        at something, but I suspect his motivation was not so much to understand the        world as it was to find new ideas to explain. The act of discovery was not complete        for him until he had taught it to someone else.</p>
<p>I remember a conversation we had a year or so before his death, walking in        the hills above Pasadena. We were exploring an unfamiliar trail and Richard,        recovering from a major operation for the cancer, was walking more slowly than        usual. He was telling a long and funny story about how he had been reading up        on his disease and surprising his doctors by predicting their diagnosis and        his chances of survival. I was hearing for the first time how far his cancer        had progressed, so the jokes did not seem so funny. He must have noticed my        mood, because he suddenly stopped the story and asked, "Hey, what's the matter?"</p>
<p>I hesitated. "I'm sad because you're going to die."</p>
<p>"Yeah," he sighed, "that bugs me sometimes too. But not so much as you think."        And after a few more steps, "When you get as old as I am, you start to realize        that you've told most of the good stuff you know to other people anyway."</p>
<p>We walked along in silence for a few minutes. Then we came to a place where        another trail crossed and Richard stopped to look around at the surroundings.        Suddenly a grin lit up his face. "Hey," he said, all trace of sadness forgotten,        "I bet I can show you a better way home."</p>
<p>And so he did.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Asynchronous IO: the next billion-dollar mistake? (149 pts)]]></title>
            <link>https://yorickpeterse.com/articles/asynchronous-io-the-next-billion-dollar-mistake/</link>
            <guid>41471707</guid>
            <pubDate>Sat, 07 Sep 2024 05:43:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://yorickpeterse.com/articles/asynchronous-io-the-next-billion-dollar-mistake/">https://yorickpeterse.com/articles/asynchronous-io-the-next-billion-dollar-mistake/</a>, See on <a href="https://news.ycombinator.com/item?id=41471707">Hacker News</a></p>
<div id="readability-page-1" class="page"><section><header><time datetime="2024-09-06T16:00:00Z">September 6, 2024</time></header><p>
Asynchronous IO (also known as "non-blocking IO") is a technique applications
use to allow performing of many IO operations without blocking the calling OS
thread, and without needing to spawn many threads (i.e. one thread per
operation). In the late 1990s/early 2000s, an increasing amount of people using
the internet meant an increasing amount of traffic web services needed to
handle, better known as the <a href="https://en.wikipedia.org/wiki/C10k_problem">C10K
problem</a>.</p><p>Using asynchronous IO to approach this problem appears compelling: it allows you
to handle many connections at once, without needing to increase the number of OS
threads. This is especially compelling if you consider that support for good
multi-threading was still a hit a miss at the time. For example, Linux didn't
have good support for threads until the 2.6 release in December 2003.</p><p>Since then the use of and support for asynchronous IO has grown. Languages such
as Go and Erlang bake support for asynchronous IO directly into the language,
while others such as Rust rely on third-party libraries such as
<a href="https://tokio.rs/">Tokio</a>.</p><p><a href="https://inko-lang.org/">Inko</a>, a language that I'm working on, also includes
built-in support for asynchronous IO. Similar to Go and Erlang, this is hidden
from the user. For example, when reading from a socket there's no need to
explicitly poll or "await" anything, as the language takes care of it for you:</p><div><pre><code><span>import</span> std.net.ip (IpAddress)
<span>import</span> std.net.socket (TcpClient)

<span>class</span> <span>async</span> Main {
  <span>fn</span> <span>async</span> main {
    <span>let</span> client = TcpClient.new(ip: IpAddress.v4(<span>1</span>, <span>1</span>, <span>1</span>, <span>1</span>), port: <span>80</span>).or_panic(
      <span>'failed to connect'</span>,
    )

    client
      .write_string(<span>'GET / HTTP/1.0\r\nHost: one.one.one.one\r\n\r\n'</span>)
      .or_panic(<span>'failed to write the request'</span>)

    ...
  }
}
</code></pre></div><p>If the write would block, Inko's scheduler sets aside the calling process and
reschedules it when the write can be performed without blocking. Other languages
use a different mechanism, such as callbacks or
<a href="https://en.wikipedia.org/wiki/Async/await">async/await</a>. Each approach comes
with its own set of benefits, drawbacks and challenges.</p><p>Not every IO operation can be performed asynchronously though. File IO is
perhaps the best example of this (at least on Linux). To handle such cases,
languages must provide some sort of alternative strategy such as performing the
work in a dedicated pool of OS threads.</p><div><p>Using <a href="https://en.wikipedia.org/wiki/Io_uring">io_uring</a> is another approach,
but it's a recent addition to Linux, specific <em>to</em> Linux (meaning you need a
fallback for other platforms), and <a href="https://www.phoronix.com/news/Google-Restricting-IO_uring">disabled entirely by
some</a>. Either way,
the point still stands: you end up having to handle sockets and files (and
potentially other types of "files") differently.</p></div><p>For example, Inko handles this by the standard library signalling to the
scheduler it's about to perform a potentially blocking operation. The scheduler
periodically checks threads in a "we might be blocking" state. If the thread is
in such a state for too long, it's flagged as "blocking" and a backup thread is
woken up to take over its work. When the blocked thread finishes its work, it
reschedules the process it was running and becomes a backup thread itself. While
this works, it limits the amount of blocking IO operations you can perform
concurrently to the number of backup threads you have. Automatically adding and
removing threads can improve things, but increases the complexity of the system.</p><p>In 2009, <a href="https://en.wikipedia.org/wiki/Tony_Hoare">Tony Hoare</a> stated that his
invention of NULL pointers was something he considers a "billion-dollar mistake"
due to the problems and headaches it brought with it. The more I work on systems
that use asynchronous IO, the more I wonder: is asynchronous IO the next
billion-dollar mistake?</p><p>More specifically, what if instead of spending 20 years developing various
approaches to dealing with asynchronous IO (e.g. async/await), we had instead
spent that time making OS threads more efficient, such that one wouldn't need
asynchronous IO in the first place?</p><p>To illustrate, consider the Linux kernel today: spawning an OS thread takes
somewhere between 10 and 20 microseconds (<a href="https://github.com/inko-lang/inko/issues/690">based on my own
measurements</a>), while a context
switch takes somewhere in the range of <a href="https://eli.thegreenplace.net/2018/measuring-context-switching-and-memory-overheads-for-linux-threads/">1-2
microseconds</a>.
This becomes a problem when you want to spawn many threads such that each
blocking operation is performed on its own thread. Not only do you need many OS
threads, but the time to start them can also vary greatly, and the more OS
threads you have the more context switches occur. The end result is that while
you certainly can spawn many OS threads, performance will begin to deteriorate
as the number of threads increases.</p><p>Now imagine a parallel universe where instead of focusing on making asynchronous
IO work, we focused on improving the performance of OS threads such that one can
easily use hundreds of thousands of OS threads without negatively impacting
performance (= the cost to start threads is lower, context switches are cheaper,
etc). In this universe, asynchronous IO and async/await wouldn't need to exist
(or at least wouldn't be as widely used). You need to handle 100 000 requests
that perform a mixture of IO and CPU bound work? Just use 100 000 threads and
let the OS handle it.</p><p>Not only would this offer an easier mental model for developers, it also leads
to a simpler stack. Libraries such as epoll and kqueue wouldn't need to exist,
as one would just start a new OS thread for their blocking/polling needs.
Need to call a C function that may block the calling thread? Just run it on a
separate thread, instead of having to rely on some sort of mechanism provided by
the IO runtime/language to deal with blocking C function calls.</p><p>Unfortunately, we do not live in such a universe. Instead in our universe the
cost of OS threads is quite high, and inconsistent across platforms. Which
brings me back to Tony Hoare: over the decades, we invested a massive amount of
resources in dealing with asynchronous IO, perhaps billions of dollars worth of
resources. Was that a mistake and should we have instead invested that into
improving the performance of OS threads? I think so, but until an operating
system comes along that dramatically improves the performance of threads ,
becomes as popular as Linux, <em>and</em> is capable of running everything you can run
on Linux or provide better alternatives (such that people will actually want to
switch), we're stuck with asynchronous IO.</p></section></div>]]></description>
        </item>
    </channel>
</rss>