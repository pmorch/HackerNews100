<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 20 Apr 2025 17:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Why on Earth is OpenAI buying Windsurf? (104 pts)]]></title>
            <link>https://theahura.substack.com/p/tech-things-openai-buys-windsurf</link>
            <guid>43743993</guid>
            <pubDate>Sun, 20 Apr 2025 14:28:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf">https://theahura.substack.com/p/tech-things-openai-buys-windsurf</a>, See on <a href="https://news.ycombinator.com/item?id=43743993">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>The quiet news of the last few days was the leak/announcement of a $3 billion OpenAI acquisition of Windsurf. That's not the largest private acquisition ever made — that honor goes to Google's $30 billion acquisition of Wiz a few months prior</span><strong> </strong><span>— but man, it's up there! $3B is the kind of exit startup founders dream about. Especially for a startup that's been around for 2 years, </span><a href="https://news.ycombinator.com/item?id=42127882" rel="">with its current branding for about 5 months</a><span>.</span></p><p>I assume most people don't know what Windsurf is, which is fair because it has so few users that when you try to Google for that information you get data about the sport.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png" width="1040" height="409" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:409,&quot;width&quot;:1040,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:117182,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://theahura.substack.com/i/161689970?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fff572743-5141-4eaf-918f-90c7f25aca6e_1040x409.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Thanks Gemini!</figcaption></figure></div><p><span>Maybe that’s unfair, supposedly the company </span><a href="https://www.latent.space/p/windsurf?open=false" rel="">has over a million users</a><span>. But I'm always a bit skeptical of numbers like that. A person who uses Windsurf every day is obviously in a different category than one that installed the tool to play around for five minutes and quickly discarded it. This slipperiness has always been one of the benefits of working in the world of privately held companies. Anecdotally I know only one person who uses Windsurf, and I only kinda sorta know that person because he's just a guy that I met at an </span><a href="https://theahura.substack.com/p/notes-from-the-sf-party-scene" rel="">SF house party</a><span>.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-1-161689970" target="_self" rel="">1</a></span></p><p>If you aren't familiar with Windsurf, you may know it by its previous name, Codeium. And if you aren't familiar with Codeium, you may know its primary competition, a company called Cursor. And if you don't know what Cursor is, a) you might know what GitHub Copilot is, and b) how did you find my blog?</p><p>All of these products are roughly in the same category of "AI tools for software engineers". They all have basically the same form factor too — they integrate AI models directly into your coding workflow. And traditionally they operate on three levels of granularity:</p><ul><li><p>Auto-complete. As you type the AI will suggest the rest of the line or function, which you can generally accept with a single button press.</p></li><li><p>Sidebar Q&amp;A. The code window itself will have an integrated sidebar where you can ask models to modify a few files. You'll get a diff, which you can then choose to apply or modify.</p></li><li><p>Agentic flows. The term "agent" is wildly underspecified, but in the AI coding space the term has generally come to mean "an AI model operates in a loop over an entire code base, often with a very vague or high level prompt as a starting point, and is equipped with tools to write, run, and otherwise analyze code and the computer system".</p></li></ul><p>Different companies aim to be best in class along different verticals. Some are better at the auto complete (Copilot), others at the agent flow (Claude Code). Some aim to be the best for non-technical people (Bolt or Replit), others for large enterprises (again, Copilot). Still, all of this "differentiation" ends up making a 1-2% difference in product. In fact, I can't stress enough how much the UX and core functionality of these tools is essentially identical. </p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png" width="1159" height="692" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:692,&quot;width&quot;:1159,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Cursor Download Free (Windows) - 0.48.9 | Softpedia&quot;,&quot;title&quot;:&quot;Cursor Download Free (Windows) - 0.48.9 | Softpedia&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Cursor Download Free (Windows) - 0.48.9 | Softpedia" title="Cursor Download Free (Windows) - 0.48.9 | Softpedia" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2fd1fe08-4081-4353-8b9e-278709d03c08_1159x692.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>A screencap of cursor. This has become the ‘canonical’ UX for vibe coding — a sidebar with integrated chat that is able to call out to tools and directly change code using diffs.</figcaption></figure></div><p>These all would have pejoratively been known as "GPT wrappers" just two years ago, because they do not actually compete on the model layer but rather allow users to choose and switch between any of the big LLM providers. To really emphasize how interchangeable these AI code assistants all are, I use an even lesser known tool called Avante, an entirely free and open source neovim plugin. It does the same things as all the other tools. I like it because I don't have to leave vim.</p><p><span>But the similarities of these tools does not take away from how game changing they are. Once you get used to a form of AI powered coding, you cannot go back. The real issue with all of these products is that they are</span><em> </em><span>too</span><em> </em><span>easily verticalized. Anyone who wants to spin up a version of Windsurf with one slight change that targets a tiny market segment can do so fairly easily — again, I'm on Avante entirely because it supports vim. That means the addressable market for any of these companies may actually go </span><em>down</em><span> over time as more competitors and free alternatives enter the market, even as the number of "programmers" goes up.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-2-161689970" target="_self" rel="">2</a></span><span> In point of fact, even though I love the ingenuity behind Cursor (which really spearheaded the current AI coding paradigm) I have openly said that their long term opportunities are slim. Even though Cursor had significant first mover advantage, they have no moat or stickiness. As with the rest of the AI market, switching cost remains extremely low, and there is simply no reason to use Cursor when you can use a free version or one with better enterprise support.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-3-161689970" target="_self" rel="">3</a></span><span> Cursor isn't even living on its own platform — it's a fork of VSCode. I am personally convinced that their only long term exit opportunity is an acquisition by Microsoft, and even that seems less and less likely as Satya puts more resources into the already-VSCode-native Copilot as a real competitor.</span></p><p><span>All of which makes the $3B price tag for Windsurf seem eye wateringly high. Compared to Cursor, Windsurf has fewer users, has been around for less time, has less brand recognition, and has diminishing prospects for future growth. It’s not as tied to VSCode, which is a plus, I guess. But it all begs the question: why on </span><em>earth</em><span> is OpenAI paying so much?</span></p><p><span>This is especially strange in the context of OpenAI's financial situation. </span><a href="https://www.thealgorithmicbridge.com/p/google-is-winning-on-every-ai-front" rel="">Smart</a><span> </span><a href="https://www.wired.com/story/google-openai-gemini-chatgpt-artificial-intelligence/" rel="">observers</a><span> </span><a href="https://www.reddit.com/r/singularity/comments/1hh03ri/google_is_winning_the_ai_race/" rel="">have</a><span> </span><a href="https://www.pymnts.com/news/artificial-intelligence/2025/google-debuts-touted-gemini-winner-take-all-ai-model-race" rel="">caught</a><span> </span><a href="https://medium.com/artificial-corner/how-google-quietly-took-the-lead-in-the-ai-race-with-gemini-2-5-c98dfb58b6a1" rel="">on</a><span> </span><a href="https://venturebeat.com/ai/from-catch-up-to-catch-us-how-google-quietly-took-the-lead-in-enterprise-ai/" rel="">to</a><span> Google's inherent advantages in the space, something that I first publicly called out as early as </span><a href="https://theahura.substack.com/p/tech-things-gpt-pro-and-the-state?" rel="">December</a><span> and more fully </span><a href="https://theahura.substack.com/p/tech-things-gemini-25-and-the-bull?utm_source=publication-search" rel="">two weeks ago</a><span>. OpenAI needs to shore up both its access to compute and its access to data in order to compete. But it's once-sterling relationship with its previous patron, Microsoft, has frayed significantly. This has essentially forced the company to go to SoftBank (yes, that SoftBank) for additional capital.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-4-161689970" target="_self" rel="">4</a></span><span> </span></p><p><span>It's true that OpenAI managed to get $40bn committed, and it's also true that this is the largest amount of capital ever raised by a privately held company. But they're going against </span><em>Google</em><span>, one of the most valuable companies in the entire world, and extremely profitable to boot. That's a hell of a war chest to compete with.</span></p><p><span>In that light, the decision to spend 3 out of 40 of those billions is even harder to rationalize.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-5-161689970" target="_self" rel="">5</a></span><span> Even worse, it's not yet clear OpenAI actually </span><em>has </em><span>$40bn to spend — so far they've only got $10bn actually lined up, with the rest being held by SoftBank contingent on OpenAI actually becoming a for-profit company by the end of the year.</span></p><p>It seems pretty obvious that Windsurf will not help OpenAI get more compute. Maybe Windsurf is providing OpenAI access to data? There's certainly some possibility that this is the case — though it makes me wonder just how bad OpenAI's relationship with Microsoft has gotten if they no longer have access to GitHub, which surely dwarfs any amount of code that Windsurf could provide.</p><p><span>The other possibility is that this is entirely a long term distribution play, akin to Facebook buying WhatsApp or Instagram. People criticized those deals for being overpriced too. OpenAI may think that Windsurf will be a crown jewel in how people access GPT models. There's some sense in this — OpenAI has also announced a social media project, likely also an attempt at maintaining lines to unique data sources while providing more native ways to improve distribution and "</span><a href="https://gwern.net/complement" rel="">commoditize their complement</a><span>".</span></p><p><span>But the issue that they will inevitably run into with Windsurf is that GPT just isn't the best in class for programming. Everyone who's using Windsurf is almost definitely using Claude or Gemini. Even though the "GPT wrapper" term was always meant as an insult, it is in practice a huge table stakes feature to be able to wrap around many different LLM providers. That flexibility is what allows a company like Windsurf to ride the machine learning wave, buoyed along by everyone else's investments. Cursor really only took off when Claude suddenly got really good at programming, after all. If Windsurf ends up being tied exclusively to GPT, many of its users may leave the platform simply because it is now a worse platform. But if there isn't any vendor lock in, we're back to square one — what is the </span><em>point</em><span>?</span></p><p>Personally, I don't get it. Maybe someone smarter than I am (or more connected than I am) can help me figure it out. But for now, I'm chalking this particular check size as a symptom of the AI market being way too hot right now.</p><p>The other quiet news of the last few days is the dawning realization of just how quiet it has been. The last two weeks saw the release of 3 new OpenAI models — o3, o4-mini, and GPT 4.1 — as well as the new Llama 4 model family from Meta and Grok-3 from Grok. And…nothing. It's just crickets. In past months, a release calendar like this would have had headlines blazing. The hype train should be chugging at ridiculous speeds. But compared to what I'd expect, there's nothing.</p><p>The reason is obvious: Google is still in the lead. Take a look at these two charts.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png" width="1456" height="529" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7e34249c-afab-4751-87ae-0932f234e111_1584x575.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:529,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:137731,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://theahura.substack.com/i/161689970?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7e34249c-afab-4751-87ae-0932f234e111_1584x575.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg" width="1456" height="1067" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1067,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Imagen&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Imagen" title="Imagen" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F41c4c230-9fa1-4333-8332-4e98419ba870_3080x2258.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Even though this chart is only two weeks old, it is already out of date. </figcaption></figure></div><p>The former is the current state of the LMSYS chatbot arena; the latter maps chatbot arena performance against price. The over under? There's no headlines because there's nothing to write about. "OpenAI takes second place" no one cares!</p><p><span>It’s still too early to write about ‘general consensus’ since the OpenAI models were released only a few days ago. And to their credit, those models </span><em>do </em><span>top many of the LLM benchmarks.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-6-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-6-161689970" target="_self" rel="">6</a></span><span> But so far, the </span><a href="https://www.reddit.com/r/ChatGPTCoding/comments/1k10ehv/openais_o3_and_o4mini_just_dethroned_gemini_25_pro/" rel="">reception has been extremely muted</a><span>, with many saying something like:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png" width="867" height="195" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:195,&quot;width&quot;:867,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:37315,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://theahura.substack.com/i/161689970?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3874ceec-fd23-44dc-99cf-34c24c89851e_867x195.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Even though some of the new OpenAI models are quite powerful, they are simply too expensive and too slow for not enough extra juice. </p><p><span>I've already </span><a href="https://theahura.substack.com/p/tech-things-gemini-25-and-the-bull" rel="">written extensively about Google's Gemini 2.5 release</a><span>, which quickly became the go-to model for just about everything. What I didn't originally clock was just how much Google had shored up its model offerings all over the price/performance curve. Put bluntly: at every price point, the best model is a Google model.</span></p><p><span>That's not all. I mentioned rumors that Google has disallowed new publications; that is now confirmed as of </span><a href="https://arstechnica.com/ai/2025/04/deepmind-is-holding-back-release-of-ai-research-to-give-google-an-edge/" rel="">earlier this month</a><span>:</span></p><blockquote><p>Among the changes in the company’s publication policies is a six-month embargo before “strategic” papers related to generative AI are released. Researchers also often need to convince several staff members of the merits of publication, said two people with knowledge of the matter.</p></blockquote><p><span>Google has also apparently started offering </span><a href="https://www.tomshardware.com/tech-industry/artificial-intelligence/google-accused-of-paying-employees-to-do-nothing-for-up-to-a-year-to-stifle-ai-talent-migration" rel="">extremely generous non-compete deals</a><span> to researchers, preferring to keep them on payroll doing nothing than have them go to competitors and leak secrets:</span></p><blockquote><p><a href="https://www.tomshardware.com/tag/google" rel="">Google</a><span> is making use of aggressive noncompete clauses and extended notice periods, contends former GoogDeepMinder Nando de Freitas in a recent post on X. In some cases, Google DeepMind’s employment contracts may lock an AI developer into doing nothing for as long as a year, notes </span><a href="https://www.businessinsider.com/google-deepmind-ai-talent-war-aggressive-noncompetes-2025-4" rel="">Business Insider</a><span>, to prevent its AI talent from moving to competing firms. That’s a long time away from working on the cutting edge in the rapidly developing world of AI.</span></p></blockquote><p>And finally, Google has continued to release and improve its TPU offerings on GCP, giving them yet another method to profit off the back of the AI boom — even if they don't win on the model, they can win by providing the underlying hardware.</p><p><span>With almost no fanfare, we all just woke up one day to a Google-dominated AI landscape. I have been </span><a href="https://theahura.substack.com/p/tech-things-eu-ai-act-biden-admin?utm_source=publication-search" rel="">critical of Sundar in the past</a><span>, but I have to hand it to him — sometimes the showmanship really is just a distraction from executing a slow but precise strategy.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-7-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-7-161689970" target="_self" rel="">7</a></span><span> Google is clearly now on a war footing. They are relentlessly poaching employees while trying to close up their shop as much as possible. The AI industry as a whole owes more to Google than any other organization. It's unclear how many other players in that industry will survive when cut off from Google's research. It's also unclear how much this will last in the face of a continuing DOJ antitrust suit. More on that in a different article, though.</span></p><p><span>One last thought. I've always been a staunch defender of capitalism and free markets, even though that's historically been an unpopular opinion in my particular social circle. Watching the LLM market, I can't help but feel extremely vindicated. Over the last 5 years, the cost per token has been driven down relentlessly even as model quality has skyrocketed. The brutal and bruising competition between the tech giants has left nothing but riches for the average consumer. There's an alternative world where all of this is priced so high that only the wealthiest businesses can justify a "GPT license", or where the government ends up keeping all the best AI technology for themselves. That world would objectively suck — not only would most people not be able to access the technology, there would also be significantly less interest in or ability to innovate. Just look at Google, which has finally risen like a beast from slumber to show the world what it means to innovate once more.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-8-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-8-161689970" target="_self" rel="">8</a></span><span> </span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-9-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-9-161689970" target="_self" rel="">9</a></span></p><p>Since we've been talking about things that didn't happen, I want to talk about one last notable absence: where the hell is Apple?</p><p><a href="https://theahura.substack.com/p/tech-things-gpt-pro-and-the-state" rel="">Something</a><span> </span><a href="https://theahura.substack.com/p/tech-things-deepseek-r1-and-the-arrival?utm_source=publication-search" rel="">I've</a><span> </span><a href="https://theahura.substack.com/p/tech-things-deepseek-but-make-it?utm_source=publication-search" rel="">said</a><span> </span><a href="https://theahura.substack.com/p/tech-things-gemini-25-and-the-bull?utm_source=publication-search" rel="">repeatedly</a><span> is that the LLM market has strong winner-take-all effects, and players in the market are heavily dependent on access to scientists, compute, and data. Apple is an extraordinarily wealthy company, so they have no problem getting access to scientists. But it seems like they have had a ton of issues on both of the latter two categories.</span></p><p><span>On the compute side, it seems like Apple sorta own goaled themselves? From the </span><a href="https://www.nytimes.com/2025/04/11/technology/apple-issues-trump-tariffs.html" rel="">NYT</a><span>:</span></p><blockquote><p>The A.I. stumble was set in motion in early 2023. Mr. Giannandrea, who was overseeing the effort, sought approval from the company’s chief executive, Tim Cook, to buy more A.I. chips, known as graphics processing units, or GPUs, five people with knowledge of the request said. The chips, which can perform hundreds of computations at the same time, are critical to building the neural networks of A.I. systems, like chatbots, that can answer questions or write software code.</p><p>At the time, Apple’s data centers had about 50,000 GPUs that were more than five years old — far fewer than the hundreds of thousands of chips being bought at the time by A.I. leaders like Microsoft, Amazon, Google and Meta, these people said.</p><p>Mr. Cook approved a plan to double the team’s chip budget, but Apple’s finance chief, Luca Maestri, reduced the increase to less than half that, the people said. Mr. Maestri encouraged the team to make the chips they had more efficient.</p><p>The lack of GPUs meant the team developing A.I. systems had to negotiate for data center computing power from its providers like Google and Amazon, two of the people said. The leading chips made by Nvidia were in such demand that Apple used alternative chips made by Google for some of its A.I. development.</p></blockquote><p><span>Well, that at least explains why they haven’t been putting out any decent models. Anecdotally, Apple obviously has data centers, but they aren't a cloud provider like Google/Microsoft/Amazon, which at various points have powered DeepMind/OpenAI/Anthropic directly. So Apple is starting way behind on the whole chip thing. Maybe it makes some kind of strategic sense to try and double down on their own unique chip capacity — maybe try to do what Google has done with TPUs — but that's really being extremely generous. The more obvious answer is the simple one: Apple cheaped out, and was penny wise pound foolish. As a result, the company that dominated the mobile wave is all but absent from the AI wave.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-10-161689970" href="https://theahura.substack.com/p/tech-things-openai-buys-windsurf#footnote-10-161689970" target="_self" rel="">10</a></span></p><p>On the data side, Apple definitely own goaled themselves. In an environment of data hoarders and open disregard for information safety, Apple struck out as an ardent defender of user privacy. They made a brand out of it! They ran ads on it!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg" width="1456" height="819" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:819,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb6e29cc1-c7dd-45d1-b4ec-385969d0ba8c_1600x900.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>That all made sense a few years ago, when the data itself was more questionably useful and Apple had full control of the hardware stack. Apple was able to poke fun at Google while </span><a href="https://www.businessinsider.com/facebook-blames-apple-10-billion-loss-ad-privacy-warning-2022-2" rel="">giving Meta a pretty serious black eye</a><span> over their ads policy.</span></p><p>But now, data is almost literally fuel for deep learning models. Worse, there's basically no way to avoid leaking data through the model! People have consistently been able to get models to directly reproduce training data! Google has more or less avoided using any training data because they can, they have the whole Internet already indexed. Meta, xAI, OpenAI, and Anthropic all train on public data — the former two from public posts on their social media platforms, and all four from extremely questionable flouting of copyright law. </p><p><span>Meanwhile, Apple is stuck with the same problem Google had </span><a href="https://theahura.substack.com/p/tech-things-openai-is-an-unaligned-590?utm_source=publication-search" rel="">when they got rid of their "Don't be evil" motto</a><span>. </span></p><blockquote><p><span>"Don't be evil" was a lot of things, and there were a lot of disagreeing interpretations about what it meant. One thing that no one disagreed about: it was hard to get rid of. Execs at Google ended up regretting the "Don't be evil" motto, because no matter what Google did they would get raked over the coals for doing it. "I thought you said you </span><em>wouldn't be evil</em><span>", internet commenters would snidely say. They even </span><a href="https://en.wikipedia.org/wiki/Don%27t_be_evil#Lawsuit" rel="">got sued over it</a><span>!</span></p></blockquote><p>Apple is in a similar boat. Either they use the user data they have and risk serious brand damage that the rest of FAANG is sure to capitalize on, or they handicap themselves in the AI race. Which, really, is less of a race and more of an all out brawl, one in which Apple is fighting with both hands behind its back.</p><p><span>So far, they've taken the "handicap" approach. They've tried to pay their way out of the data access problem by straight up </span><a href="https://www.inc.com/kit-eaton/apple-signs-deal-for-ai-training-data-from-image-service-shutterstock.html" rel="">buying the copyright licenses for data</a><span> they want to train on, but, come on, it's just not anywhere near enough training data.</span></p><p><span>The worst case scenario for Apple is they decide to use user data </span><em>late</em><span>. In that setting, Apple incurs the brand risk while also being miles behind everyone else. That increasingly seems like what will happen, though, because I just can't imagine Apple actually sitting the entire AI race out.</span></p><p>So yeah. All in all, a pretty quiet few weeks for AI.</p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gemma 3 QAT Models: Bringing AI to Consumer GPUs (236 pts)]]></title>
            <link>https://developers.googleblog.com/en/gemma-3-quantized-aware-trained-state-of-the-art-ai-to-consumer-gpus/</link>
            <guid>43743337</guid>
            <pubDate>Sun, 20 Apr 2025 12:22:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://developers.googleblog.com/en/gemma-3-quantized-aware-trained-state-of-the-art-ai-to-consumer-gpus/">https://developers.googleblog.com/en/gemma-3-quantized-aware-trained-state-of-the-art-ai-to-consumer-gpus/</a>, See on <a href="https://news.ycombinator.com/item?id=43743337">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

    
      
    

    

    

    

    
    <div>
          

<div>
    <p data-block-key="sisye">Last month, we launched Gemma 3, our latest generation of open models. Delivering state-of-the-art performance, Gemma 3 quickly established itself as a leading model capable of running on a single high-end GPU like the NVIDIA H100 using its native BFloat16 (BF16) precision.</p><p data-block-key="4impe">To make Gemma 3 even more accessible, we are announcing new versions optimized with Quantization-Aware Training (QAT) that dramatically reduces memory requirements while maintaining high quality. This enables you to run powerful models like Gemma 3 27B locally on consumer-grade GPUs like the NVIDIA RTX 3090.</p>
</div>   

<div>
        
            <p><img src="https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/Gemma3QuantizedChart_RD1_01_1_qlGnyVc.original.png" alt="Chatbot Arena Elo Score - Gemma 3 QAT"></p><p>
                    This chart ranks AI models by Chatbot Arena Elo scores; higher scores (top numbers) indicate greater user preference. Dots show estimated NVIDIA H100 GPU requirements.
                </p>
            
        
    </div>
  <div>
    <h2 data-block-key="sisye">Understanding performance, precision, and quantization</h2><p data-block-key="2a2jr">The chart above shows the performance (Elo score) of recently released large language models. Higher bars mean better performance in comparisons as rated by humans viewing side-by-side responses from two anonymous models. Below each bar, we indicate the estimated number of NVIDIA H100 GPUs needed to run that model using the BF16 data type.</p><p data-block-key="ae0co"><b><br>Why BFloat16 for this comparison?</b> BF16 is a common numerical format used during inference of many large models. It means that the model parameters are represented with 16 bits of precision. Using BF16 for all models helps us to make an apples-to-apples comparison of models in a common inference setup. This allows us to compare the inherent capabilities of the models themselves, removing variables like different hardware or optimization techniques like quantization, which we'll discuss next.</p><p data-block-key="3q45i">It's important to note that while this chart uses BF16 for a fair comparison, deploying the very largest models often involves using lower-precision formats like FP8 as a practical necessity to reduce immense hardware requirements (like the number of GPUs), potentially accepting a performance trade-off for feasibility.</p><h2 data-block-key="8r8jc"><b><br></b>The Need for Accessibility</h2><p data-block-key="dkjr0">While top performance on high-end hardware is great for cloud deployments and research, we heard you loud and clear: you want the power of Gemma 3 on the hardware you already own. We're committed to making powerful AI accessible, and that means enabling efficient performance on the consumer-grade GPUs found in desktops, laptops, and even phones.</p><h2 data-block-key="950c"><b><br></b>Performance Meets Accessibility with Quantization-Aware Training in Gemma 3</h2><p data-block-key="158md">This is where quantization comes in. In AI models, quantization reduces the precision of the numbers (the model's parameters) it stores and uses to calculate responses. Think of quantization like compressing an image by reducing the number of colors it uses. Instead of using 16 bits per number (BFloat16), we can use fewer bits, like 8 (int8) or even 4 (int4).</p><p data-block-key="3a7o0">Using int4 means each number is represented using only 4 bits – a 4x reduction in data size compared to BF16. Quantization can often lead to performance degradation, so we’re excited to release Gemma 3 models that are robust to quantization. We released several quantized variants for each Gemma 3 model to enable inference with your favorite inference engine, such as Q4_0 (a common quantization format) for Ollama, llama.cpp, and MLX.</p><p data-block-key="epsbi"><b><br>How do we maintain quality?</b> We use QAT. Instead of just quantizing the model after it's fully trained, QAT incorporates the quantization process during training. QAT simulates low-precision operations during training to allow quantization with less degradation afterwards for smaller, faster models while maintaining accuracy. Diving deeper, we applied QAT on ~5,000 steps using probabilities from the non-quantized checkpoint as targets. We reduce the perplexity drop by 54% (using llama.cpp perplexity evaluation) when quantizing down to Q4_0.</p><h2 data-block-key="eatdo"><b><br></b>See the Difference: Massive VRAM Savings</h2><p data-block-key="9f9so">The impact of int4 quantization is dramatic. Look at the VRAM (GPU memory) required just to load the model weights:</p><ul><li data-block-key="41cf1"><b>Gemma 3 27B:</b> Drops from 54 GB (BF16) to just <b>14.1 GB</b> (int4)</li></ul><ul><li data-block-key="5uebr"><b>Gemma 3 12B:</b> Shrinks from 24 GB (BF16) to only <b>6.6 GB</b> (int4)</li></ul><ul><li data-block-key="9d985"><b>Gemma 3 4B:</b> Reduces from 8 GB (BF16) to a lean <b>2.6 GB</b> (int4)</li></ul><ul><li data-block-key="bf7p"><b>Gemma 3 1B:</b> Goes from 2 GB (BF16) down to a tiny <b>0.5 GB</b> (int4)</li></ul>
</div>   

<div>
    <p><img src="https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/Gemma3QuantizedChart_RD1_02.original.png" alt="Comparison chart of model weights showing VRAM required to load">
        
        
    </p>
</div>
  <div>
    <blockquote data-block-key="7ui9z"><b><sup>Note:</sup></b> <i><sup>This figure only represents the VRAM required to load the model weights. Running the model also requires additional VRAM for the KV cache, which stores information about the ongoing conversation and depends on the context length</sup></i></blockquote><h2 data-block-key="e1hmg"><b><br></b>Run Gemma 3 on Your Device</h2><p data-block-key="4jdc3">These dramatic reductions unlock the ability to run larger, powerful models on widely available consumer hardware:</p><ul><li data-block-key="bqsl5"><b>Gemma 3 27B (int4):</b> Now fits comfortably on a single desktop NVIDIA RTX 3090 (24GB VRAM) or similar card, allowing you to run our largest Gemma 3 variant locally.</li></ul><ul><li data-block-key="c4adc"><b>Gemma 3 12B (int4):</b> Runs efficiently on laptop GPUs like the NVIDIA RTX 4060 Laptop GPU (8GB VRAM), bringing powerful AI capabilities to portable machines.</li></ul><ul><li data-block-key="be3pr"><b>Smaller Models (4B, 1B):</b> Offer even greater accessibility for systems with more constrained resources, including phones and <a href="https://youtu.be/lgsD_wSZ0hI?si=pyQj23bOxNPLrxtL&amp;t=102">toasters</a> (if you have a good one).</li></ul><h2 data-block-key="7c8ds"><b><br></b>Easy Integration with Popular Tools</h2><p data-block-key="2324e">We want you to be able to use these models easily within your preferred workflow. Our official int4 and Q4_0 unquantized QAT models are available on Hugging Face and Kaggle. We’ve partnered with popular developer tools that enable seamlessly trying out the QAT-based quantized checkpoints:</p><ul><li data-block-key="avkt"><a href="https://ollama.com/library/gemma3"><b>Ollama</b></a><b>:</b> Get running quickly – all our Gemma 3 QAT models are natively supported starting today with a simple command.</li></ul><ul><li data-block-key="6sp3o"><a href="https://lmstudio.ai/model/gemma-3-12b-it-qat"><b>LM Studio</b></a><b>:</b> Easily download and run Gemma 3 QAT models on your desktop via its user-friendly interface.</li></ul><ul><li data-block-key="69oug"><a href="https://huggingface.co/collections/mlx-community/gemma-3-qat-68002674cd5afc6f9022a0ae"><b>MLX</b></a><b>:</b> Leverage MLX for efficient, optimized inference of Gemma 3 QAT models on Apple Silicon.</li></ul><ul><li data-block-key="19s6q"><a href="https://www.kaggle.com/models/google/gemma-3/gemmaCpp"><b>Gemma.cpp</b></a><b>:</b> Use our dedicated C++ implementation for highly efficient inference directly on the CPU.</li></ul><ul><li data-block-key="f05gl"><a href="https://huggingface.co/collections/google/gemma-3-qat-67ee61ccacbf2be4195c265b"><b>llama.cpp</b></a><b>:</b> Integrate easily into existing workflows thanks to native support for our GGUF-formatted QAT models.</li></ul><h2 data-block-key="c5073"><b><br></b>More Quantizations in the Gemmaverse</h2><p data-block-key="74vnv">Our official Quantization Aware Trained (QAT) models provide a high-quality baseline, but the vibrant <a href="https://ai.google.dev/gemma/gemmaverse">Gemmaverse</a> offers many alternatives. These often use Post-Training Quantization (PTQ), with significant contributions from members such as <a href="https://huggingface.co/bartowski/google_gemma-3-27b-it-GGUF">Bartowski</a>, <a href="https://huggingface.co/collections/unsloth/gemma-3-67d12b7e8816ec6efa7e4e5b">Unsloth</a>, and <a href="https://huggingface.co/collections/ggml-org/gemma-3-67d126315ac810df1ad9e913">GGML</a> readily available on Hugging Face. Exploring these community options provides a wider spectrum of size, speed, and quality trade-offs to fit specific needs.</p><h2 data-block-key="fnsl0"><b><br></b>Get Started Today</h2><p data-block-key="fdu54">Bringing state-of-the-art AI performance to accessible hardware is a key step in democratizing AI development. With Gemma 3 models, optimized through QAT, you can now leverage cutting-edge capabilities on your own desktop or laptop.</p><p data-block-key="179dk">Explore the quantized models and start building:</p><ul><li data-block-key="6uj07">Use on your PC with <a href="https://ollama.com/library/gemma3">Ollama</a></li></ul><ul><li data-block-key="741fu">Find the Models on <a href="https://huggingface.co/collections/google/gemma-3-qat-67ee61ccacbf2be4195c265b">Hugging Face</a> &amp; <a href="https://www.kaggle.com/models/google/gemma-3/transformers">Kaggle</a></li></ul><ul><li data-block-key="6069i">Run on your phone with <a href="https://developers.googleblog.com/en/gemma-3-on-mobile-and-web-with-google-ai-edge/">Google AI Edge</a></li></ul><p data-block-key="4j3l0">We can't wait to see what you build with Gemma 3 running locally!</p>
</div> 
      </div>
    

    

    
    
    
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[100 Years to Solve an Integral (2020) (182 pts)]]></title>
            <link>https://liorsinai.github.io/mathematics/2020/08/27/secant-mercator.html</link>
            <guid>43741273</guid>
            <pubDate>Sun, 20 Apr 2025 03:16:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://liorsinai.github.io/mathematics/2020/08/27/secant-mercator.html">https://liorsinai.github.io/mathematics/2020/08/27/secant-mercator.html</a>, See on <a href="https://news.ycombinator.com/item?id=43741273">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-content">
        <p><em>The integral of sec(x) is well known to any beginners calculus student. Yet this integral was once a major outstanding maths problem. It was first introduced by Geradus Mercator who needed it to make his famous map in 1569. He couldn’t find it and used an approximation instead. The exact solution was found accidentally 86 years later without calculus in 1645. It then took another two decades until a formal proof was given in 1668, 99 years after Mercator first proposed the problem.</em></p>

<p><em>Update 13 March 2021: added a note on how Napier calculated logarithm trigonometry tables. This was prompted by a correction raised in a discussion of this post on <a href="https://news.ycombinator.com/item?id=24304311">HackerNews</a>.</em></p>

<p><em>Update 10 October 2021: the great circle and rhumb line images are now made with a script that uses <a href="https://scitools.org.uk/cartopy/docs/latest/">Cartopy</a>. Previously they were made with a Matlab application. You can see the new script at my <a href="https://github.com/LiorSinai/Navigation">Github repository</a> and enter your co-ordinates to generate your own lines.</em></p>

<p>As this <a href="https://www.smbc-comics.com/comic/how-math-works">comic</a> by SMBC rightly teases, the history of mathematics is often not so straightforward. 
Theorems, formulas and notation that are routinely discussed in class, were once insights or accidents themselves.
This is the story of one such formula, the integral of the secant. 
I first read about it almost a decade ago when I got interested in cartography: the science and art of map making.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup> 
This integral is of vital importance to the Mercator map and therefore many online maps that use it like <a href="https://www.apple.com/ios/maps/">Apple Maps</a> and <a href="https://www.google.com/maps/">Google Maps</a>.</p>

<p>This story has been told several times before: see <a href="https://www.jstor.org/stable/3603395">1</a>, <a href="https://doi.org/10.1080/0025570X.1980.11976846">2</a> or <a href="https://scholarworks.umt.edu/tme/vol7/iss2/12/">3</a>.
But these are all journal articles, consigned mostly to academics.
I want to present it here in a less formal and more colourful setting to make it more accessible.</p>

<p>This is an article about mathematics so familiarity with the following is helpful: algebra, trigonometry, radians and basic calculus. 
These are usually covered in advanced high school maths classes or first year maths courses.</p>

<h2 id="first-year-maths">First year maths</h2>

<p>In first year maths at university after a month of differentiation we were starting the inverse problem: integration. 
Differentiation  is the mathematics of finding gradient functions for curves.
Integration is the mathematics of inverting this - given a gradient function, what is the curve? 
My lecturer was introducing the integration of trigonometric functions.
He started off with:</p><p>

\[\int \sin(x) dx = -\cos(x) + c \:\text{  and } \int \cos(x) dx = \sin(x) + c\]

</p><p>This relationship made sense because sine and cosine derivatives were opposites. Just had to be careful of minus signs. Next he derived the integral for the tangent:</p><p>

\[\int \tan(x) dx = \int \frac{\sin(x)}{\cos(x)}dx = -\ln|\cos(x)| + c\]

</p><p>Ok, that was tricky. It was not immediately obvious that the inverse of the chain rule could be used here, because the function $\cos(x)$ was present with its derivative $\sin(x)$.
But given enough thought it made sense. Then he said, this is the integral of the secant and learn it off by heart:</p><p>

\[\int \sec(x) dx = \ln|\sec(x) + \tan(x)| + c\]

</p><p>OK, where did that come from? My lecturer offered no explanation. It was easy to verify that it worked by finding the derivative.<sup id="fnref:derivative" role="doc-noteref"><a href="#fn:derivative" rel="footnote">2</a></sup>
(Paper <a href="https://doi.org/10.1080/0025570X.1980.11976846">2</a> has a more complex proof using only integration.)
But how had he come up with that?</p>

<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/integral_secant_graph.png" alt="Secant integral graph">
	<figcaption>The curve $\ln|\sec(x) + \tan(x)|$ has tangents with a gradient of $\sec(x)$. Discovering this fact took 100 years.</figcaption>
</figure>

<p>I think at this point most first year calculus students like me have the following fleeting thoughts:</p>
<ol>
  <li>Integration is much harder than differentiation.</li>
  <li>Some mathematician must have stumbled on this through differentiation first.</li>
  <li>It doesn’t matter anyway because where will I ever use this?</li>
</ol>

<p>Actually number 1 is true as many a student can testify after writing a test. 
Number 2 is false - in fact it was found by a teacher while looking at raw numbers. 
Such a method for finding an integral is so unusual that one might conjecture it is the <em>only</em> integral that has been found like this.
Surely in calculus class where raw numbers are so rare you would be laughed at if you attempted to solve an integral like that.
Lastly, number 3 remains true for me. But this doesn’t mean this integral isn’t useful - it is used to construct the Mercator map. 
That is why a teacher was crunching numbers when he serendipitously realised what the formula was.</p>

<h2 id="quick-revision-trigonometry">Quick revision: trigonometry</h2>

<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/secant_def.png" alt="Definition of the secant">
</figure>

<p>The secant is a standard trigonometric function. It is defined as the ratio of the hypotenuse $c$ to the adjacent side $a$ for an angle $\varphi$ in a right angled triangle.
In mathematical notation the definition is:</p><p>

\[\sec(\varphi) = \frac{c}{a}\]

</p><p>It is the reciprocal of the more widely used cosine function:</p><p>

\[\sec(\varphi) = \frac{1}{\cos(\varphi)}\]

</p><p>Here are the graphs of the secant and cosine for the angles from $-2\pi$ (-360°) to $2\pi$ (360°):</p>

<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/secant_graph.png" alt="Secant graph">
</figure>

<p>The integral of the secant can be interpreted as the area under the graph.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" rel="footnote">3</a></sup> This is illustrated by the shaded region</p>

<h2 id="an-introduction-to-cartography">An introduction to cartography</h2>

<p>The earth cannot be projected onto a flat map without distortion. 
Over the years cartographers have devised many different map projections which try to balance minimising distortion with other properties. 
They come in all shapes and sizes.
Lists of these projections can be found <a href="https://map-projections.net/singleview.php">here</a> or <a href="https://en.wikipedia.org/wiki/List_of_map_projections">here</a>.
I will explain two of the simplest here, which will help with understanding the Mercator map in the next section.</p>

<p>All map projections can be represented as equations that transform spherical co-ordinates to flat map co-ordinates.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" rel="footnote">4</a></sup>
The co-ordinates on the sphere are the angles $\varphi$ and $\lambda$. These correspond to lines of latitude (parallels) and longitude (meridans) respectively. 
The co-ordinates on the flat map are $x$ and $y$. A map projection is therefore a transformation from $\varphi$ and $\lambda$ to $x$ and $y$.</p>

<p>One of the simplest and oldest known projections is the equirectangular projection:</p>

<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/equirectangular.png" alt="Equirectangular map">
	<figcaption>Equirectangular map. From <a href="https://map-projections.net/single-view/rectang-0">map-projections.net/singleviewp/rectang-0</a>  </figcaption>
</figure>

<p>It is made by mapping meridians and parallels to vertical and horizontal straight lines of constant spacing.
This has the affect of stretching out objects along the parallels.
The equations for this projection are:</p><p>

\[\begin{align} y &amp;= R\varphi\\ x &amp;= R\lambda \end{align}\]

</p><p>While the equations are simple the construction process can be hard to visualise. Here is my attempt:</p>
<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/equirectangular_construction.png" alt="Equirectangular map construction">
	<figcaption>A segment of the sphere is peeled off and flattened.
The right most image shows a top view of the flattening. The arcs are pulled flat in the longitudinal direction so that they become straight lines.
They do not change length in this process but that requires stretching out the sides along the $x$-axis. 
Thus a single point where all the arcs meet is stretched into a line.   </figcaption>
</figure>

<p>The equirectangular map has a total area of $(2\pi R)(\pi R)=2\pi^2 R^2$ while the surface area of the sphere is $4\pi R^2$. 
Therefore this projection distorts the area by a factor of $\frac{\pi}{2}\approx1.57$.</p>

<p>A different kind of projection can be obtained by projecting lines from the sphere onto the mapping plane. 
An example is the Lambert cylindrical projection. 
It is made by wrapping a cylinder around the sphere and projecting points onto it via lines parallel to the $x$-axis. 
Here is a visualisation of this construction:</p>
<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/Cilinderprojectie-constructie.jpg" alt="Lambert cylindrical map construction">
	<figcaption>From <a href="https://en.wikipedia.org/wiki/File:Cilinderprojectie-constructie.jpg">Wikipedia</a>  </figcaption>
</figure>

<p>And here is a cross section of the sphere along side the final map:</p>
<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/Lambert_construction.png" alt="Lambert cylindrical  map">
	<figcaption>Lambert cylindrical  map. Edited from <a href="https://map-projections.net/single-view/lambert">map-projections.net/singleviewp/lambert</a>  </figcaption>
</figure>

<p>The equations are:</p><p>

\[\begin{align} y &amp;= R\sin(\varphi)\\ x &amp;= R\lambda \end{align}\]

</p><p>For objects near the equator this results in very little distortion such as for Africa. But objects near the poles are compressed because of the sphere’s curvature. 
This can be seen clearly with Greenland.</p>

<p>This map has the useful property that its area is equal to the surface area of the sphere. 
The area of the flat map is $(2\pi R)(2R) = 4\pi R^2$ which is the same as that of the sphere.
Thus, while objects are distorted, their areas are still correct.
The relative scale of Greenland to Africa is therefore accurately represented in this map.</p>

<h2 id="the-mercator-map">The Mercator map</h2>

<p>In 1569mGerardus Mercator wanted to make a global world map that would be useful for navigation. 
He lived in a time when sailing across vast ocean distances was the norm. (In 1492 Christopher Columbus had discovered America by sailing all the way from Spain.)
The maps shown above are fine for artistic impressions and applications but not for navigation.
The distortions prevent doing any accurate distance and bearing measurements on the map. 
At a local level lines (eg. roads) which in reality intersect perpendicularly to each other would be appear to be slanted with respect to each other.</p>

<p>In particular Mercator wanted to make a map where rhumb lines would be straight. Rhumb lines are curves of constant bearing relative to meridians. 
To follow a rhumb line a navigator only needs to maintain the same bearing on their compass for the whole journey.
For example, here is the rhumb line through modern day New York and Cape Town:</p>

<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/NY_to_CPT.png" alt="Arcs from NY to CPT">
	<figcaption>Orthographic map with great circle and rhumb line. Source code: <a href="https://github.com/LiorSinai/Navigation">link</a></figcaption>
</figure>

<p>At each point along the rhumb line the angle $\theta$ with the meridian is 48.56° which corresponds to a bearing of 311°26’18’’ from Cape Town to New York. 
I’ve also shown the great circle which is a circle whose centre lies on the centre of the sphere. 
Traveling along the great circle is always shorter. In this case the distance is 12550 km instead of 12600 km along the rhumb line.
With modern technology it is easy for ships and aeroplanes to stick to the great circles. But back in Mercator’s day this was rather difficult. 
So sailors preferred to stick to rhumb lines. They would rather get to their destination by traveling a little longer then get lost and travel a lot more.</p>

<p>Mercator’s idea was to stretch out a cylindrical projection map in the North-South direction to preserve shapes and angles.
Looking at the Lambert projection,<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" rel="footnote">5</a></sup> it can be seen that a different stretch factor is required for each latitude. At the equator no stretch is required.
At the 45° parallel only a small amount of upward stretching is required. The objects close to the poles have to be stretched a lot to uncompress them.</p>

<p>This stretch factor can be calculated as follows:</p>
<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/Mercator_construction.png" alt="Mercator construction">
	<figcaption>Construction process for the Mercator map. Edited from <a href="https://en.wikipedia.org/wiki/Mercator_projection"> Wikipedia</a> images </figcaption>
</figure>

<p>First Mercator divided the globe into graticules of equal spacing $\delta\varphi$ and $\delta\lambda$. 
Along the meridians the arc length of each graticule is $R\delta\varphi$.
Along the parallels the radius of the circle is $R\cos(\varphi)$ so that the arc length is $(R\cos(\varphi))\delta\lambda$.
The tangent can be then approximated as:</p><p>

\[\tan(\alpha) \approx \frac{R\cos(\varphi)\delta\lambda}{R\delta\varphi}\]

</p><p>This graticule is then flattened into the rectangle with the following two requirements:</p>

<ol>
  <li>The angles are kept constant by setting $\alpha =\beta$.</li>
  <li>The parallels are projected on to the $x$-axis like in the Lambert projection. This means $\delta x = R\delta \lambda$.</li>
</ol>

<p>Therefore the transformation is:</p><p>

\[\begin{align} \tan(\alpha) &amp;= \tan(\beta) \\ 
\frac{R\cos(\varphi)\delta\lambda}{R\delta\varphi} &amp;= \frac{\delta x}{\delta y} \\
\delta y &amp;=  \frac{\delta x}{\delta \lambda} \frac{1}{\cos(\varphi)} \delta \varphi = R \sec(\varphi) \delta \varphi
 \end{align}\]

</p><p>From here it is a small step to turn this into an integral. However, calculus was only properly invented a century later after Mercator published his map. 
Instead what Mercator did was realise that he could add up the stretch factors at each point. 
The stretch at graticule <em>n</em> is approximately the stretch of the graticule below it plus $R \sec(\varphi) \delta \varphi$. This can then be turned into a sum:</p><p>

\[\begin{align} y_n &amp;\approx R \sec(n \cdot \delta \varphi) \delta \varphi + y_{n-1} \\
                     &amp;=\sum^{n}_{k=0} R \sec(k \cdot \delta \varphi) \delta \varphi \end{align}\]

</p><p>Using a constant value for $\delta \varphi $ Mercator was able to calculate the spacings for his map. Then he drew a world map over it.
This is a modern rendering of the final result:</p>

<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/mercator_NY_to_CPT.png" alt="Mercator map">
	<figcaption>Mercator map with great circle and rhumb line. Source code: <a href="https://github.com/LiorSinai/Navigation">link</a></figcaption>
</figure>

<p>This map is very heavily distorted. Greenland now looks larger than Africa. The great circles lie along strange curves. But the rhumb lines are straight!
Calculating the bearing can be done simply with a ruler and a projector. 
No thinking or maths required! (And no fancy instruments on globes either.) In modern day terms we would say, it was a big hit with sailors.</p>

<p>For online maps the local projection is very important. If you are looking for directions in a city what matters most to you is that the roads look correct.
This is why the Mercator map is used - to preserve angles between grids in roads. Other map projections don’t meet this simple requirement.
A minor problem is that the scale changes at each latitude but online maps can easily calculate this at each point. 
Try this with <a href="https://www.google.com/maps/">Google Maps</a>. For the same zoom factor, the scale bar is not the same length at each latitude. 
Also, along the equator, the scale bar has a minimum of 5m. Up near the poles, which is way more stretched out, the scale bar goes down to 1m.
But you don’t notice this when zooming in on a specific point in the map.</p>

<p>For the record, if you are going to look at long distances on Google Maps it’s best to turn the “Globe view” option on.</p>

<h2 id="tables-for-trig-mercator-and-logs">Tables for trig, Mercator and logs</h2>

<p>This is where things take an unexpected turn. 
But in order to understand how, I want to explain another part of history: mathematical  tables. 
These days pocket calculators are so common that we have forgotten that they were once ubiquitous with maths.
This was true even into the ’90s.</p>

<p>In the past if you wanted to calculate sec(36°) you could draw a big triangle and physically measure the angle and distances with the ruler. 
Then you could write out the long division calculation.
More likely, however, you would read up the value in a trigonometry table. 
The numbers in these tables were painstakingly calculated using approximation formulas and trigonometric identities. 
But for the user they were very simple. You just had to look up the numbers and occasionally interpolate between numbers if you wanted higher accuracy. 
These tables had the added benefit of making inversion easy. 
For example if you looked for the number 1.23606 in the secant table, you would see it was next to 36°.</p>

<p>In 1599 Edward Wright published tables for the equator Mercator map equation. He used $\delta \varphi = 1’ = \frac{1}{60} 1^{\circ}$. 
He also gave the first mathematical description of the Mercator map which Mercator himself did not explain fully. 
This made it easier for others to make their own Mercator maps.</p>

<p>In 1614 John Napier introduced logarithms. This is the inverse of the exponential operation. In modern terms, the logarithm $y$ of $x$ to base $b$ is written as:</p><p>

\[y = \log_b x  \quad ; \quad b^y = x\]

</p><p>Napier’s main motivation was to find an easier way to do multiplication and division. 
For example from the laws of exponents:</p><p>

\[2^a \div 2^b = 2^{a-b}\]

</p><p>Therefore a division can be done as follows:</p><p>

\[3764 \div 873 = 2^{11.878} \div 2^{9.770} = 2^{2.108} = 4.311\]

</p><p>Where $\log_{2}(3764) = 11.878 $ and $\log_{2}(873) = 9.770 $</p>

<p>The logarithms again had to be painstakingly calculated through approximation calculations. 
Napier did this using a kinetic framework. While this idea may be unusual today, it has to do with how Napier originally visualised logarithms.<sup id="fnref:Napier" role="doc-noteref"><a href="#fn:Napier" rel="footnote">6</a></sup>
His final table related numbers to logarithms and their sines.<sup id="fnref:correction" role="doc-noteref"><a href="#fn:correction" rel="footnote">7</a></sup> Here is an example:</p>
<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/Napiertable.png" alt="Napier trigonometric table">
	<figcaption>Napier's original trigonometric table. From <a href="https://jscholarship.library.jhu.edu/bitstream/handle/1774.2/34187/31151005337641.pdf">John Napier and the Invention of Logarithms</a></figcaption>
</figure>

<p>A  user could use such a table to look up a logarithm with the added benefit that inversion was easy.
These proved to be very popular - people clearly did not like doing multiplication and division in the past.
Using addition and subtraction in their place also made calculations less error prone, especially with successive calculations.</p>

<p>Next, mathematicians extended these tables to other trigonometric function:</p>
<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/APN2002-table3-30deg.png" alt="Logarithmic trigonometric table">
	<figcaption>A page from the 2002 American Practical Navigator. Values are calculated as $log_{10}(f(n^\circ + \frac{k}{60})) + 10$. From <a href="https://en.wikipedia.org/wiki/File:APN2002-table3-30deg.tiff"> Wikipedia</a></figcaption>
</figure>

<p>In 1645, according to legend, a teacher named Henry Bond noticed something strange. 
The numbers in Wright’s Mercator table were similar to the numbers in a $\log_e(\tan(\varphi))$ table.
They just were offset by a factor of 2 and 45° in the tables. So he essentially conjectured that:</p><p>

\[\int_0^{\varphi_1} \sec(\varphi) d\varphi = \ln \left| \tan \left( \frac{\varphi_1}{2} + 45^\circ \right) \right |\]

</p><p>Mathematicians caught on to the claim but could not prove it. Calculus was still in its infancy. 
In 1668, 99 years after Mercator first made his map and 23 years after Bond gave the solution, it was finally proven by James Gregory.
This proof however was considered long-winded and “wearisome”.
In 1670 Isaac Barrow offered a more succinct proof through integration with partial fractions which can be found in <a href="https://doi.org/10.1080/0025570X.1980.11976846">2</a>.</p>

<p>Lastly, through trigonometric identities, it can be proven that the following three formulas are all equivalent:</p><p>

\[\int \sec(\varphi) d\varphi = 
\begin{cases} 
\ln |\sec(\varphi) + \tan(\varphi) | + c \\
\ln \left| \tan \left( \frac{\varphi}{2} + 45^\circ \right) \right | + c\\ 
\frac{1}{2}\ln \left| \frac{1+\sin(\varphi)}{1-\sin(\varphi)}  \right| + c
\end{cases}\]

</p><h2 id="conclusion">Conclusion</h2>

<p>This has been a long post. I hope you found this history as fascinating as I did.
It truly is remarkable to me that this little formula on my first year exam had such a colourful and varied history.
I really think it should be taught more in class. This was already tried and tested by <a href="https://scholarworks.umt.edu/tme/vol7/iss2/12/">3</a>. 
At a small scale they found it worked.</p>

<p>If you are more interested in how Google makes its map I highly suggest reading this blog post by a Google engineer:
<a href="https://medium.com/google-design/google-maps-cb0326d165f5">medium.com/google-design/google-maps-cb0326d165f5</a>.
Can you spot the integral of the secant in the Google code?</p>

<p>There is one last comment I would like to add. 
There is a lot of controversy surrounding the Mercator map.
It is an extremely common projection. When I was younger I had a map of the world on my wall in the Mercator projection.
However I hope you now fully appreciate its main purpose is navigation.
Outside of that, it unnecessarily distorts shapes and in particular makes the Americas and Europe look much larger than they actually are.
This has been linked, not without rational, to colonialism and racism. 
For decades cartographers have bemoaned its use in applications where it really has no right to be.<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" rel="footnote">8</a></sup>
Here is even an amusing clip from a 90’s TV show: <a href="https://www.youtube.com/watch?v=vVX-PrBRtTY">www.youtube.com/watch?v=vVX-PrBRtTY</a>.</p>

<figure>
<img src="https://liorsinai.github.io/assets/posts/secant-mercator/Robinson&amp;Winkel.png" alt="Robinson and Winkel Triple projections">
	<figcaption>Robinson projection (left) and Winkel Triple projection (right). Don't they look so much more natural? Source: <a href="https://en.wikipedia.org/wiki/List_of_map_projections">Wikipedia</a></figcaption>
</figure>

<p>There are many different projections out there, all with their own purpose. 
My personal favourite is the Winkel Triple. 
It is the official map of the National Geographic Society.
It is an elegant compromise between form and scale, in both the final representation and in the mathematics. 
A more general favourite is the Robinson Projection.
It was designed with an “artistic approach”. Unlike the other projections, instead of using equations, Arthur H. Robinson manually fixed the scale factors at 5° intervals.</p>

<hr>



        <hr>
        
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pretty State Machine Patterns in Rust (2016) (117 pts)]]></title>
            <link>https://hoverbear.org/blog/rust-state-machine-pattern/</link>
            <guid>43741051</guid>
            <pubDate>Sun, 20 Apr 2025 02:14:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hoverbear.org/blog/rust-state-machine-pattern/">https://hoverbear.org/blog/rust-state-machine-pattern/</a>, See on <a href="https://news.ycombinator.com/item?id=43741051">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
    <p>Lately I've been thinking a lot about the <em>patterns</em> and <em>structures</em> which we program with. It's really wonderful to start exploring a project and see familiar patterns and styles which you've already used before. It makes it easier to understand the project, and empowers you to start working on the project faster.</p>
<p>Sometimes you're working on a new project and realize that you need to do something in the same way as you did in another project. This <em>thing</em> might not be a functionality or a library, it might not be something which you can encode into some clever macro or small crate. Instead, it may be simply a pattern, or a structural concept which addresses a problem nicely.</p>
<p>One interesting pattern that is commonly applied to problems is that of the 'State Machine'. Let's take some time to consider what exactly we mean when we say that, and why they're interesting.</p>
<span id="continue-reading"></span>
<blockquote>
<p>Throughout this post you can run all examples in <a rel="noopener" target="_blank" href="https://play.rust-lang.org/">the playground</a>, I typically use 'Nightly' out of habit.</p>
</blockquote>
<h2 id="founding-our-concepts"><a href="#founding-our-concepts" aria-label="Anchor link for: founding-our-concepts">Founding Our Concepts</a></h2>
<p>There are a <strong>lot</strong> of resources and topical articles about state machines out there on the internet. Even more so, there are a lot of <strong>implementations</strong> of state machines.</p>
<p>Just to get to this web page you used one. You can model TCP as a state machine. You can model HTTP requests with one too. You can model any <em>regular</em> language, such as a regex, as a state machine. They're everywhere, hiding inside things we use every day.</p>
<p>So, a State Machine is any <strong>'machine'</strong> which has a set of <strong>'states'</strong> and <strong>'transitions'</strong> defined between them.</p>
<p>When we talk about a machine we're referring to the abstract concept of something which <em>does something</em>. For example, your 'Hello World!' function is a machine. It is started and eventually outputs what we expect it to. Some model which you use to interact with your database is just the same. We'll regard our most basic machine simply as a <code>struct</code> that can be created and destroyed.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>struct</span> </span><span><span>Machine</span></span><span>;</span>
</span><span>
</span><span><span><span><span>fn</span> </span><span>main</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>  <span>let</span> my_machine <span>=</span> Machine<span>;</span> <span> Create.
</span></span></span></span><span><span><span>  <span> `my_machine` is destroyed when it falls out of scope below.
</span></span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>States are a way to reason about <em>where</em> a machine is in its process. For example, we can think about a bottle filling machine as an example. The machine is in a 'waiting' state when it is waiting for a new bottle. Once it detects a bottle it moves to the 'filling' state. Upon detecting the bottle is filled it enters the 'done' state. After the bottle is left the machine we return to the 'waiting' state.</p>
<p>A key takeaway here is that none of the states have any information relevant for the other states. The 'filling' state doesn't care how long the 'waiting' state waited. The 'done' state doesn't care about what rate the bottle was filled at. Each state has <em>discrete responsibilities and concerns</em>. The natural way to consider these <em>variants</em> is as an <code>enum</code>.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>enum</span> <span>BottleFillerState</span> <span><span>{</span>
</span></span></span><span><span><span>  Waiting <span><span>{</span> waiting_time<span>:</span> <span>std<span>::</span></span><span>time<span>::</span></span>Duration </span><span><span>}</span></span><span>,</span>
</span></span></span><span><span><span>  Filling <span><span>{</span> rate<span>:</span> <span>usize</span> </span><span><span>}</span></span><span>,</span>
</span></span></span><span><span><span>  Done<span>,</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>struct</span> </span><span><span>BottleFiller</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>  <span>state</span><span>:</span> BottleFillerState,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>Using an <code>enum</code> in this way means all the states are mutually exclusive, you can only be in one at a time. Rust's 'fat enums' allow us to have each of these states to carry data with them as well. As far as our current definition is concerned, everything is totally okay.</p>
<p>But there is a bit of a problem here. When we described our bottle filling machine above we described three transitions: <code>Waiting -&gt; Filling</code>, <code>Filling -&gt; Done</code>, and <code>Done -&gt; Waiting</code>. We never described <code>Waiting -&gt; Done</code> or <code>Done -&gt; Filling</code>, those don't make sense!</p>
<p>This brings us to the idea of transitions. One of the nicest things about a true state machine is we never have to worry about our bottle machine going from <code>Done -&gt; Filling</code>, for example. The state machine pattern should <strong>enforce</strong> that this can never happen. Ideally this would be done before we even start running our machine, at compile time.</p>
<p>Let's look again at the transitions we described for our bottle filler in a diagram:</p>
<pre><code><span>  +++++++++++   +++++++++++   ++++++++
</span><span>  |         |   |         |   |      |
</span><span>  | Waiting +--&gt;+ Filling +--&gt;+ Done |
</span><span>  |         |   |         |   |      |
</span><span>  ++++-++++-+   +++++++++++   +--+++++
</span><span>       ^                         |
</span><span>       +++++++++++++++++++++++++-+
</span></code></pre>
<p>As we can see here there are a finite number of states, and a finite number of transitions between these states. Now, it is possible to have a valid transition between each state and every other state, but in most cases this is not true.</p>
<p>This means moving between a state such as 'Waiting' to a state such as 'Filling' should have defined semantics. In our example this can be defined as "There is a bottle in place." In the case of a TCP stream it might be "We have received a FIN packet" which means we need to finish closing out the stream.</p>
<h2 id="determining-what-we-want"><a href="#determining-what-we-want" aria-label="Anchor link for: determining-what-we-want">Determining What We Want</a></h2>
<p>Now that we know what a state machine is, how do we represent them in Rust? First, let's think about what we <strong>want</strong> from some pattern.</p>
<p>Ideally, we'd like to see the following characteristics:</p>
<ul>
<li>Can only be in one state at a time.</li>
<li>Each state should have its own associated values if required.</li>
<li>Transitioning between states should have well defined semantics.</li>
<li>It should be possible to have some level of shared state.</li>
<li>Only explicitly defined transitions should be permitted.</li>
<li>Changing from one state to another should <strong>consume</strong> the state so it can no longer be used.</li>
<li>We shouldn't need to allocate memory for <strong>all</strong> states. No more than largest sized state certainly</li>
<li>Any error messages should be easy to understand.</li>
<li>We shouldn't need to resort to heap allocations to do this. Everything should be possible on the stack.</li>
<li>The type system should be harnessed to our greatest ability.</li>
<li>As many errors as possible should be at <strong>compile-time</strong>.</li>
</ul>
<p>So if we could have a design pattern which allowed for all these things it'd be truly fantastic. Having a pattern which allowed for most would be pretty good too.</p>
<h2 id="exploring-possible-implementation-options"><a href="#exploring-possible-implementation-options" aria-label="Anchor link for: exploring-possible-implementation-options">Exploring Possible Implementation Options</a></h2>
<p>With a type system as powerful and flexible as Rusts we should be able to represent this. The truth is: there are a number of ways to try, each has valuable characteristics, and each teaches us lessons.</p>
<h3 id="a-second-shot-with-enums"><a href="#a-second-shot-with-enums" aria-label="Anchor link for: a-second-shot-with-enums">A Second Shot with Enums</a></h3>
<p>As we saw above the most natural way to attempt this is an <code>enum</code>, but we noted already that you can't control which transitions are actually permitted in this case. So can we just wrap it? We sure can! Let's take a look:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>enum</span> <span>State</span> <span><span>{</span>
</span></span></span><span><span><span>    Waiting <span><span>{</span> waiting_time<span>:</span> <span>std<span>::</span></span><span>time<span>::</span></span>Duration </span><span><span>}</span></span><span>,</span>
</span></span></span><span><span><span>    Filling <span><span>{</span> rate<span>:</span> <span>usize</span> </span><span><span>}</span></span><span>,</span>
</span></span></span><span><span><span>    Done
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>struct</span> </span><span><span>StateMachine</span> </span><span><span><span>{</span> <span>state</span><span>:</span> State </span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>impl</span> </span><span><span>StateMachine</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>new</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Self</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        StateMachine <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> <span>State<span>::</span></span>Waiting <span><span>{</span> waiting_time<span>:</span> <span>std<span>::</span></span><span>time<span>::</span></span><span>Duration<span>::</span></span>new<span><span>(</span><span>0</span><span>,</span> <span>0</span></span><span><span>)</span></span> </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>to_filling</span></span><span><span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        <span>self</span><span>.</span>state <span>=</span> <span>match</span> <span>self</span><span>.</span>state <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            </span></span></span></span></span></span><span><span><span><span><span><span>            <span>State<span>::</span></span>Waiting <span><span>{</span> <span>..</span> </span><span><span>}</span></span> <span>=&gt;</span> <span>State<span>::</span></span>Filling <span><span>{</span> rate<span>:</span> <span>1</span> </span><span><span>}</span></span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            </span></span></span></span></span></span><span><span><span><span><span><span>            <span>_</span> <span>=&gt;</span> <span>panic!</span><span><span>(</span><span><span>"</span>Invalid state transition!<span>"</span></span></span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span>    <span> ...
</span></span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span><span>fn</span> </span><span>main</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>let</span> <span>mut</span> state_machine <span>=</span> <span>StateMachine<span>::</span></span>new<span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>    state_machine<span>.</span><span>to_filling</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>At first glance it seems okay. But notice some problems?</p>
<ul>
<li>Invalid transition errors happen at runtime, which is awful!</li>
<li>This only prevents invalid transitions <em>outside</em> of the module, since the private fields can be manipulated freely inside the module. For example, <code>state_machine.state = State::Done</code> is perfectly valid inside the module.</li>
<li>Every function we implement that works with the state has to include a match statement!</li>
</ul>
<p>However this does have some good characteristics:</p>
<ul>
<li>The memory required to represent the state machine is only the size of the largest state. This is because a fat enum is only as big as its biggest variant.</li>
<li>Everything happens on the stack.</li>
<li>Transitioning between states has well defined semantics... It either works or it crashes!</li>
</ul>
<p>Now you might be thinking "Hoverbear you could totally wrap the <code>to_filling()</code> output with a <code>Result&lt;T,E&gt;</code> or have an <code>InvalidState</code> variant!" But let's face it: That doesn't make things that much better, if at all. Even if we get rid of the runtime failures we still have to deal with a lot of clumsiness with the match statements and our errors would still only be found at runtime! Ugh! We can do better, I promise.</p>
<p>So let's keep looking!</p>
<h3 id="structures-with-transitions"><a href="#structures-with-transitions" aria-label="Anchor link for: structures-with-transitions">Structures With Transitions</a></h3>
<p>So what if we just used a set of structs? We could have them all implement traits which all states should share. We could use special functions that transitioned the type into the new type! How would it look?</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> This is some functionality shared by all of the states.
</span></span><span><span><span>trait</span> <span>SharedFunctionality</span> <span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>get_shared_value</span></span><span><span><span>(</span><span>&amp;</span><span>self</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>usize</span></span></span><span>;</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>struct</span> </span><span><span>Waiting</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>waiting_time</span><span>:</span> <span>std<span>::</span></span><span>time<span>::</span></span>Duration,
</span></span></span><span><span><span>    <span> Value shared by all states.
</span></span></span></span><span><span><span>    <span>shared_value</span><span>:</span> <span>usize</span>,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span><span><span>impl</span> </span><span><span>Waiting</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>new</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Self</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        Waiting <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            waiting_time<span>:</span> <span>std<span>::</span></span><span>time<span>::</span></span><span>Duration<span>::</span></span>new<span><span>(</span><span>0</span><span>,</span><span>0</span></span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            shared_value<span>:</span> <span>0</span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span>    <span> Consumes the value!
</span></span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>to_filling</span></span><span><span><span>(</span><span>self</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> Filling</span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        Filling <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            rate<span>:</span> <span>1</span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            shared_value<span>:</span> <span>0</span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span><span><span>impl</span> </span><span>SharedFunctionality <span>for</span></span><span> <span>Waiting</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>get_shared_value</span></span><span><span><span>(</span><span>&amp;</span><span>self</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>usize</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        <span>self</span><span>.</span>shared_value
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>struct</span> </span><span><span>Filling</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>rate</span><span>:</span> <span>usize</span>,
</span></span></span><span><span><span>    <span> Value shared by all states.
</span></span></span></span><span><span><span>    <span>shared_value</span><span>:</span> <span>usize</span>,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span><span><span>impl</span> </span><span>SharedFunctionality <span>for</span></span><span> <span>Filling</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>get_shared_value</span></span><span><span><span>(</span><span>&amp;</span><span>self</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>usize</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        <span>self</span><span>.</span>shared_value
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> ...
</span></span><span>
</span><span><span><span><span>fn</span> </span><span>main</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>let</span> in_waiting_state <span>=</span> <span>Waiting<span>::</span></span>new<span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>    <span>let</span> in_filling_state <span>=</span> in_waiting_state<span>.</span><span>to_filling</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>Gosh that's a buncha code! So the idea here was that all states have some common shared values along with their own specialized values. As you can see from the <code>to_filling()</code> function we can consume a given 'Waiting' state and transition it into a 'Filling' state. Let's do a little rundown:</p>
<ul>
<li>Transition errors are caught at compile time! For example you can't even create a <code>Filling</code> state accidentally without first starting with a <code>Waiting</code> state. (You could on purpose, but this is beside the matter.)</li>
<li>Transition enforcement happens everywhere.</li>
<li>When a transition between states is made the old value is <strong>consumed</strong> instead of just modified. We could have done this with the enum example above as well though.</li>
<li>We don't have to <code>match</code> all the time.</li>
<li>Memory consumption is still lean, at any given time the size is that of the state.</li>
</ul>
<p>There are some downsides though:</p>
<ul>
<li>There is a bunch of code repetition. You have to implement the same functions and traits for multiple structures.</li>
<li>It's not always clear what values are shared between all states and just one. Updating code later could be a pain due to this.</li>
<li>Since the size of the state is variable we end up needing to wrap this in an <code>enum</code> as above for it to be usable where the state machine is simply one component of a more complex system. Here's what this could look like:</li>
</ul>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>enum</span> <span>State</span> <span><span>{</span>
</span></span></span><span><span><span>    Waiting<span><span>(</span>Waiting</span><span><span>)</span></span><span>,</span>
</span></span></span><span><span><span>    Filling<span><span>(</span>Filling</span><span><span>)</span></span><span>,</span>
</span></span></span><span><span><span>    Done<span><span>(</span>Done</span><span><span>)</span></span><span>,</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span><span>fn</span> </span><span>main</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>let</span> in_waiting_state <span>=</span> <span>State<span>::</span></span>Waiting<span><span>(</span><span>Waiting<span>::</span></span>new<span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>    <span> This doesn't work since the `Waiting` struct is wrapped! We need to `match` to get it out.
</span></span></span></span><span><span><span>    <span>let</span> in_filling_state <span>=</span> <span>State<span>::</span></span>Filling<span><span>(</span>in_waiting_state<span>.</span><span>to_filling</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>As you can see, this isn't very ergonomic. We're getting closer to what we want though. The idea of moving between distinct types seems to be a good way forward! Before we go try something entirely different though, let's talk about a simple way to change our example that could enlighten further thinking.</p>
<p>The Rust standard library defines two highly related traits: <a rel="noopener" target="_blank" href="https://doc.rust-lang.org/std/convert/trait.From.html"><code>From</code></a> and <a rel="noopener" target="_blank" href="https://doc.rust-lang.org/std/convert/trait.Into.html"><code>Into</code></a> that are extremely useful and worth checking out. An important thing to note is that implementing one of these automatically implements the other. In general implementing <code>From</code> is preferable as it's a bit more flexible. We can implement them very easily for our above example like so:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> ...
</span></span><span><span><span>impl</span> </span><span><span><span>From</span><span>&lt;</span>Waiting<span>&gt;</span></span> <span>for</span></span><span> <span>Filling</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>from</span></span><span><span><span>(</span><span>val</span><span>:</span> Waiting</span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> Filling</span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        Filling <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            rate<span>:</span> <span>1</span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            shared_value<span>:</span> val<span>.</span>shared_value<span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span><span><span>//</span> ...
</span></span></code></pre>
<p>Not only does this give us a common function for transitioning, but it also is nice to read about in the source code! This reduces mental burden on us and makes it easier for readers to comprehend. <em>Instead of implementing custom functions we're just using a pattern already existing.</em> Building our pattern on top of already existing patterns is a great way forward.</p>
<p>So this is cool, but how do we deal with all this nasty code repetition and the repeating <code>shared_value</code> stuff? Let's explore a bit more!</p>
<h3 id="generically-sophistication"><a href="#generically-sophistication" aria-label="Anchor link for: generically-sophistication">Generically Sophistication</a></h3>
<p>In this adventure we'll combine lessons and ideas from the first two, along with a few new ideas, to get something more satisfying. The core of this is to harness the power of generics. Let's take a look at a fairly bare structure representing this:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>struct</span> </span><span><span><span>BottleFillingMachine</span><span><span>&lt;</span>S<span>&gt;</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>shared_value</span><span>:</span> <span>usize</span>,
</span></span></span><span><span><span>    <span>state</span><span>:</span> S
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> The following states can be the 'S' in StateMachine&lt;S&gt;
</span></span><span>
</span><span><span><span>struct</span> </span><span><span>Waiting</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>waiting_time</span><span>:</span> <span>std<span>::</span></span><span>time<span>::</span></span>Duration,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>struct</span> </span><span><span>Filling</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>rate</span><span>:</span> <span>usize</span>,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>struct</span> </span><span><span>Done</span></span><span>;</span>
</span></code></pre>
<p>So here we're actually building the state into the type signature of the <code>BottleFillingMachine</code> itself. A state machine in the 'Filling' state is <code>BottleFillingMachine&lt;Filling&gt;</code> which is just <strong>awesome</strong> since it means when we see it as part of an error message or something we know immediately what state the machine is in.</p>
<p>From there we can go ahead and implement <code>From&lt;T&gt;</code> for some of these specific generic variants like so:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>impl</span> </span><span><span><span>From</span><span>&lt;</span><span>BottleFillingMachine<span>&lt;</span>Waiting<span>&gt;</span></span><span>&gt;</span></span> <span>for</span></span><span> <span>BottleFillingMachine</span><span><span>&lt;</span>Filling<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>from</span></span><span><span><span>(</span><span>val</span><span>:</span> <span>BottleFillingMachine<span>&lt;</span>Waiting<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>BottleFillingMachine<span>&lt;</span>Filling<span>&gt;</span></span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        BottleFillingMachine <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            shared_value<span>:</span> val<span>.</span>shared_value<span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> Filling <span><span>{</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>                rate<span>:</span> <span>1</span><span>,</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>impl</span> </span><span><span><span>From</span><span>&lt;</span><span>BottleFillingMachine<span>&lt;</span>Filling<span>&gt;</span></span><span>&gt;</span></span> <span>for</span></span><span> <span>BottleFillingMachine</span><span><span>&lt;</span>Done<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>from</span></span><span><span><span>(</span><span>val</span><span>:</span> <span>BottleFillingMachine<span>&lt;</span>Filling<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>BottleFillingMachine<span>&lt;</span>Done<span>&gt;</span></span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        BottleFillingMachine <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            shared_value<span>:</span> val<span>.</span>shared_value<span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> Done<span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>Defining a starting state for the machine looks like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>impl</span> </span><span><span>BottleFillingMachine</span><span><span>&lt;</span>Waiting<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>new</span></span><span><span><span>(</span><span>shared_value</span><span>:</span> <span>usize</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Self</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        BottleFillingMachine <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            shared_value<span>:</span> shared_value<span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> Waiting <span><span>{</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>                waiting_time<span>:</span> <span>std<span>::</span></span><span>time<span>::</span></span><span>Duration<span>::</span></span>new<span><span>(</span><span>0</span><span>,</span> <span>0</span></span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>So how does it look to change between two states? Like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span><span>fn</span> </span><span>main</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>let</span> in_waiting <span>=</span> <span>BottleFillingMachine<span>::</span></span><span><span>&lt;</span>Waiting<span>&gt;</span></span><span><span>::</span></span>new<span><span>(</span><span>0</span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>    <span>let</span> in_filling <span>=</span> <span>BottleFillingMachine<span>::</span></span><span><span>&lt;</span>Filling<span>&gt;</span></span><span><span>::</span></span>from<span><span>(</span>in_waiting</span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>Alternatively if you're doing this inside of a function whose type signature restricts the possible outputs it might look like this:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span><span>fn</span> </span><span>transition_the_states</span></span><span><span><span>(</span><span>val</span><span>:</span> <span>BottleFillingMachine<span>&lt;</span>Waiting<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>BottleFillingMachine<span>&lt;</span>Filling<span>&gt;</span></span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    val<span>.</span><span>into</span><span><span>(</span></span><span><span>)</span></span> <span> Nice right?
</span></span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>What do the <strong>compile time</strong> error messages look like?</p>
<pre><code><span>error[E0277]: the trait bound `BottleFillingMachine&lt;Done&gt;: std::convert::From&lt;BottleFillingMachine&lt;Waiting&gt;&gt;` is not satisfied
</span><span>  --&gt; &lt;anon&gt;:50:22
</span><span>   |
</span><span>50 |     let in_filling = BottleFillingMachine::&lt;Done&gt;::from(in_waiting);
</span><span>   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
</span><span>   |
</span><span>   = help: the following implementations were found:
</span><span>   = help:   &lt;BottleFillingMachine&lt;Filling&gt; as std::convert::From&lt;BottleFillingMachine&lt;Waiting&gt;&gt;&gt;
</span><span>   = help:   &lt;BottleFillingMachine&lt;Done&gt; as std::convert::From&lt;BottleFillingMachine&lt;Filling&gt;&gt;&gt;
</span><span>   = note: required by `std::convert::From::from`
</span></code></pre>
<p>It's pretty clear what's wrong from that. The error message even hints to us some valid transitions!</p>
<p>So what does this scheme give us?</p>
<ul>
<li>Transitions are ensured to be valid at compile time.</li>
<li>The error messages about invalid transitions are very understandable and even list valid options.</li>
<li>We have a 'parent' structure which can have traits and values associated with it that aren't repeated.</li>
<li>Once a transition is made the old state no longer exists, it is consumed. Indeed, the entire structure is consumed so if there are side effects of the transition on the parent (for example altering the average waiting time) we can't access stale values.</li>
<li>Memory consumption is lean and everything is on the stack.</li>
</ul>
<p>There are some downsides still:</p>
<ul>
<li>Our <code>From&lt;T&gt;</code> implementations suffer from a fair bit of "type noise". This is a highly minor concern though.</li>
<li>Each <code>BottleFillingMachine&lt;S&gt;</code> has a different size, with our previous example, so we'll need to use an enum. Because of our structure though we can do this in a way that doesn't completely suck.</li>
</ul>
<blockquote>
<p>You can play with this example <a rel="noopener" target="_blank" href="https://is.gd/CyuJlH"><strong>here</strong></a></p>
</blockquote>
<h3 id="getting-messy-with-the-parents"><a href="#getting-messy-with-the-parents" aria-label="Anchor link for: getting-messy-with-the-parents">Getting Messy With the Parents</a></h3>
<p>So how can we have some parent structure hold our state machine without it being a gigantic pain to interact with? Well, this circles us back around to the <code>enum</code> idea we had at first.</p>
<p>If you recall the primary problem with the <code>enum</code> example above was that we had to deal with no ability to enforce transitions, and the only errors we got were at runtime when we did try.</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>enum</span> <span>BottleFillingMachineWrapper</span> <span><span>{</span>
</span></span></span><span><span><span>    Waiting<span><span>(</span><span>BottleFillingMachine<span>&lt;</span>Waiting<span>&gt;</span></span></span><span><span>)</span></span><span>,</span>
</span></span></span><span><span><span>    Filling<span><span>(</span><span>BottleFillingMachine<span>&lt;</span>Filling<span>&gt;</span></span></span><span><span>)</span></span><span>,</span>
</span></span></span><span><span><span>    Done<span><span>(</span><span>BottleFillingMachine<span>&lt;</span>Done<span>&gt;</span></span></span><span><span>)</span></span><span>,</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span><span><span>struct</span> </span><span><span>Factory</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>bottle_filling_machine</span><span>:</span> BottleFillingMachineWrapper,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span><span><span>impl</span> </span><span><span>Factory</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>new</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Self</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        Factory <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            bottle_filling_machine<span>:</span> <span>BottleFillingMachineWrapper<span>::</span></span>Waiting<span><span>(</span><span>BottleFillingMachine<span>::</span></span>new<span><span>(</span><span>0</span></span><span><span>)</span></span></span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>At this point your first reaction is likely "Gosh, Hoverbear, look at that awful and long type signature!" You're quite right! Frankly it's rather long, but I picked long, explanatory type names! You'll be able to use all your favorite arcane abbreviations and type aliases in your own code. Have at!</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>impl</span> </span><span><span>BottleFillingMachineWrapper</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>step</span></span><span><span><span>(</span><span>mut</span> <span>self</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Self</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        <span>match</span> <span>self</span> <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            <span>BottleFillingMachineWrapper<span>::</span></span>Waiting<span><span>(</span>val</span><span><span>)</span></span> <span>=&gt;</span> <span>BottleFillingMachineWrapper<span>::</span></span>Filling<span><span>(</span>val<span>.</span><span>into</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            <span>BottleFillingMachineWrapper<span>::</span></span>Filling<span><span>(</span>val</span><span><span>)</span></span> <span>=&gt;</span> <span>BottleFillingMachineWrapper<span>::</span></span>Done<span><span>(</span>val<span>.</span><span>into</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            <span>BottleFillingMachineWrapper<span>::</span></span>Done<span><span>(</span>val</span><span><span>)</span></span> <span>=&gt;</span> <span>BottleFillingMachineWrapper<span>::</span></span>Waiting<span><span>(</span>val<span>.</span><span>into</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span><span>fn</span> </span><span>main</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>let</span> <span>mut</span> the_factory <span>=</span> <span>Factory<span>::</span></span>new<span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>    the_factory<span>.</span>bottle_filling_machine <span>=</span> the_factory<span>.</span>bottle_filling_machine<span>.</span><span>step</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>Again you may notice that this works by <strong>consumption</strong> not mutation. Using <code>match</code> the way we are above <em>moves</em> <code>val</code> so that it can be used with <code>.into()</code> which we've already determined should consume the state. If you'd really like to use mutation you can consider having your states <code>#[derive(Clone)]</code> or even <code>Copy</code>, but that's your call.</p>
<p>Despite this being a bit less ergonomic and pleasant to work with than we might want we still get strongly enforced state transitions and all the guarantees that come with them.</p>
<p>One thing you will notice is this scheme <strong>does</strong> force you to handle all potential states when manipulating the machine, and that makes sense. You are reaching into a structure with a state machine and manipulating it, you need to have defined actions for each state that it is in.</p>
<p>Or you can just <code>panic!()</code> if that's what you really want. But if you just wanted to <code>panic!()</code> then why didn't you just use the first attempt?</p>
<blockquote>
<p>You can see a fully worked example of this Factory example <a rel="noopener" target="_blank" href="https://is.gd/s03IaQ"><strong>here</strong></a></p>
</blockquote>
<h2 id="worked-examples"><a href="#worked-examples" aria-label="Anchor link for: worked-examples">Worked Examples</a></h2>
<p>This is the kind of thing it's always nice to have some examples for. So below I've put together a couple worked examples with comments for you to explore.</p>
<h3 id="three-state-two-transitions"><a href="#three-state-two-transitions" aria-label="Anchor link for: three-state-two-transitions">Three State, Two Transitions</a></h3>
<p>This example is very similar to the Bottle Filling Machine above, but instead it <strong>actually</strong> does work, albeit trivial work. It takes a string and returns the number of words in it.</p>
<blockquote>
<p><a rel="noopener" target="_blank" href="https://is.gd/4ITDyV">Playground link</a></p>
</blockquote>
<pre data-lang="rust"><code data-lang="rust"><span><span><span><span>fn</span> </span><span>main</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span> The `&lt;StateA&gt;` is implied here. We don't need to add type annotations!
</span></span></span></span><span><span><span>    <span>let</span> in_state_a <span>=</span> <span>StateMachine<span>::</span></span>new<span><span>(</span><span><span>"</span>Blah blah blah<span>"</span></span><span>.</span><span>into</span><span><span>(</span></span><span><span>)</span></span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> This is okay here. But later once we've changed state it won't work anymore.
</span></span></span></span><span><span><span>    in_state_a<span>.</span>some_unrelated_value<span>;</span>
</span></span></span><span><span><span>    <span>println!</span><span><span>(</span></span><span><span><span>"</span>Starting Value: <span>{}</span><span>"</span></span></span><span><span>,</span> in_state_a<span>.</span>state<span>.</span>start_value<span>)</span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Transition to the new state. This consumes the old state.
</span></span></span></span><span><span><span>    <span> Here we need type annotations (since not all StateMachines are linear in their state).
</span></span></span></span><span><span><span>    <span>let</span> in_state_b <span>=</span> <span>StateMachine<span>::</span></span><span><span>&lt;</span>StateB<span>&gt;</span></span><span><span>::</span></span>from<span><span>(</span>in_state_a</span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> This doesn't work! The value is moved when we transition!
</span></span></span></span><span><span><span>    <span> in_state_a.some_unrelated_value;
</span></span></span></span><span><span><span>    <span> Instead, we can use the existing value.
</span></span></span></span><span><span><span>    in_state_b<span>.</span>some_unrelated_value<span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>println!</span><span><span>(</span></span><span><span><span>"</span>Interm Value: <span>{:?}</span><span>"</span></span></span><span><span>,</span> in_state_b<span>.</span>state<span>.</span>interm_value<span>)</span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> And our final state.
</span></span></span></span><span><span><span>    <span>let</span> in_state_c <span>=</span> <span>StateMachine<span>::</span></span><span><span>&lt;</span>StateC<span>&gt;</span></span><span><span>::</span></span>from<span><span>(</span>in_state_b</span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> This doesn't work either! The state doesn't even contain this value.
</span></span></span></span><span><span><span>    <span> in_state_c.state.start_value;
</span></span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>println!</span><span><span>(</span></span><span><span><span>"</span>Final state: <span>{}</span><span>"</span></span></span><span><span>,</span> in_state_c<span>.</span>state<span>.</span>final_value<span>)</span></span><span>;</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> Here is our pretty state machine.
</span></span><span><span><span>struct</span> </span><span><span><span>StateMachine</span><span><span>&lt;</span>S<span>&gt;</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>some_unrelated_value</span><span>:</span> <span>usize</span>,
</span></span></span><span><span><span>    <span>state</span><span>:</span> S,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> It starts, predictably, in `StateA`
</span></span><span><span><span>impl</span> </span><span><span>StateMachine</span><span><span>&lt;</span>StateA<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>new</span></span><span><span><span>(</span><span>val</span><span>:</span> String</span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Self</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        StateMachine <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            some_unrelated_value<span>:</span> <span>0</span><span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> <span>StateA<span>::</span></span>new<span><span>(</span>val</span><span><span>)</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> State A starts the machine with a string.
</span></span><span><span><span>struct</span> </span><span><span>StateA</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>start_value</span><span>:</span> String,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span><span><span>impl</span> </span><span><span>StateA</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>new</span></span><span><span><span>(</span><span>start_value</span><span>:</span> String</span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Self</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        StateA <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            start_value<span>:</span> start_value<span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> State B goes and breaks up that String into words.
</span></span><span><span><span>struct</span> </span><span><span>StateB</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>interm_value</span><span>:</span> <span><span>Vec</span><span>&lt;</span><span>String</span><span>&gt;</span></span>,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span><span><span>impl</span> </span><span><span><span>From</span><span>&lt;</span><span>StateMachine<span>&lt;</span>StateA<span>&gt;</span></span><span>&gt;</span></span> <span>for</span></span><span> <span>StateMachine</span><span><span>&lt;</span>StateB<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>from</span></span><span><span><span>(</span><span>val</span><span>:</span> <span>StateMachine<span>&lt;</span>StateA<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>StateMachine<span>&lt;</span>StateB<span>&gt;</span></span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        StateMachine <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            some_unrelated_value<span>:</span> val<span>.</span>some_unrelated_value<span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> StateB <span><span>{</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>                interm_value<span>:</span> val<span>.</span>state<span>.</span>start_value<span>.</span><span>split</span><span><span>(</span><span><span>"</span> <span>"</span></span></span><span><span>)</span></span><span>.</span><span>map</span><span><span>(</span><span><span><span>|</span></span></span><span><span><span>x</span><span>|</span></span> </span><span>x<span>.</span><span>into</span><span><span>(</span></span><span><span>)</span></span></span></span><span><span>)</span></span><span>.</span><span>collect</span><span><span>(</span></span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> Finally, StateC gives us the length of the vector, or the word count.
</span></span><span><span><span>struct</span> </span><span><span>StateC</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>final_value</span><span>:</span> <span>usize</span>,
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span><span><span>impl</span> </span><span><span><span>From</span><span>&lt;</span><span>StateMachine<span>&lt;</span>StateB<span>&gt;</span></span><span>&gt;</span></span> <span>for</span></span><span> <span>StateMachine</span><span><span>&lt;</span>StateC<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>from</span></span><span><span><span>(</span><span>val</span><span>:</span> <span>StateMachine<span>&lt;</span>StateB<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>StateMachine<span>&lt;</span>StateC<span>&gt;</span></span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        StateMachine <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            some_unrelated_value<span>:</span> val<span>.</span>some_unrelated_value<span>,</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> StateC <span><span>{</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>                final_value<span>:</span> val<span>.</span>state<span>.</span>interm_value<span>.</span><span>len</span><span><span>(</span></span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<h3 id="a-raft-example"><a href="#a-raft-example" aria-label="Anchor link for: a-raft-example">A Raft Example</a></h3>
<p>If you've followed my posts for awhile you may know I rather enjoy thinking about Raft. Raft, and a discussion with <a rel="noopener" target="_blank" href="https://twitter.com/Argorak"><strong>@argorak</strong></a> were the primary motivators behind all of this research.</p>
<p>Raft is a bit more complex than the above examples as it does not just have linear states where <code>A-&gt;B-&gt;C</code>. Here is the transition diagram:</p>
<pre><code><span>++++++++++-+    ++++++++++--+    +++++++--+
</span><span>|          ++++-&gt;           |    |        |
</span><span>| Follower |    | Candidate ++++-&gt; Leader |
</span><span>|          &lt;+++-+           |    |        |
</span><span>+++++++--^-+    ++++++++++--+    +-++++++++
</span><span>         |                         |
</span><span>         +++++++++++++++++++++++++-+
</span></code></pre>
<blockquote>
<p><a rel="noopener" target="_blank" href="https://is.gd/HDZeGR">Playground link</a></p>
</blockquote>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> You can play around in this function.
</span></span><span><span><span><span>fn</span> </span><span>main</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span>let</span> is_follower <span>=</span> <span>Raft<span>::</span></span>new<span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>    <span> Raft typically comes in groups of 3, 5, or 7. Just 1 for us. :)
</span></span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Simulate this node timing out first.
</span></span></span></span><span><span><span>    <span>let</span> is_candidate <span>=</span> <span>Raft<span>::</span></span><span><span>&lt;</span>Candidate<span>&gt;</span></span><span><span>::</span></span>from<span><span>(</span>is_follower</span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> It wins! How unexpected.
</span></span></span></span><span><span><span>    <span>let</span> is_leader <span>=</span> <span>Raft<span>::</span></span><span><span>&lt;</span>Leader<span>&gt;</span></span><span><span>::</span></span>from<span><span>(</span>is_candidate</span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Then it fails and rejoins later, becoming a Follower again.
</span></span></span></span><span><span><span>    <span>let</span> is_follower_again <span>=</span> <span>Raft<span>::</span></span><span><span>&lt;</span>Follower<span>&gt;</span></span><span><span>::</span></span>from<span><span>(</span>is_leader</span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> And goes up for election...
</span></span></span></span><span><span><span>    <span>let</span> is_candidate_again <span>=</span> <span>Raft<span>::</span></span><span><span>&lt;</span>Candidate<span>&gt;</span></span><span><span>::</span></span>from<span><span>(</span>is_follower_again</span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> But this time it fails!
</span></span></span></span><span><span><span>    <span>let</span> is_follower_another_time <span>=</span> <span>Raft<span>::</span></span><span><span>&lt;</span>Follower<span>&gt;</span></span><span><span>::</span></span>from<span><span>(</span>is_candidate_again</span><span><span>)</span></span><span>;</span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span>
</span><span><span><span>//</span> This is our state machine.
</span></span><span><span><span>struct</span> </span><span><span><span>Raft</span><span><span>&lt;</span>S<span>&gt;</span></span></span></span><span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span> ... Shared Values
</span></span></span></span><span><span><span>    <span>state</span><span>:</span> S
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> The three cluster states a Raft node can be in
</span></span><span>
</span><span><span><span>//</span> If the node is the Leader of the cluster services requests and replicates its state.
</span></span><span><span><span>struct</span> </span><span><span>Leader</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span> ... Specific State Values
</span></span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> If it is a Candidate it is attempting to become a leader due to timeout or initialization.
</span></span><span><span><span>struct</span> </span><span><span>Candidate</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span> ... Specific State Values
</span></span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> Otherwise the node is a follower and is replicating state it receives.
</span></span><span><span><span>struct</span> </span><span><span>Follower</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span> ... Specific State Values
</span></span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> Raft starts in the Follower state
</span></span><span><span><span>impl</span> </span><span><span>Raft</span><span><span>&lt;</span>Follower<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>new</span></span><span><span><span>(</span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Self</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        </span></span></span></span></span><span><span><span><span><span>        Raft <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            </span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> Follower <span><span>{</span>  </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> The following are the defined transitions between states.
</span></span><span>
</span><span><span><span>//</span> When a follower timeout triggers it begins to campaign
</span></span><span><span><span>impl</span> </span><span><span><span>From</span><span>&lt;</span><span>Raft<span>&lt;</span>Follower<span>&gt;</span></span><span>&gt;</span></span> <span>for</span></span><span> <span>Raft</span><span><span>&lt;</span>Candidate<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>from</span></span><span><span><span>(</span><span>val</span><span>:</span> <span>Raft<span>&lt;</span>Follower<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Raft<span>&lt;</span>Candidate<span>&gt;</span></span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        </span></span></span></span></span><span><span><span><span><span>        Raft <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            </span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> Candidate <span><span>{</span>  </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> If it doesn't receive a majority of votes it loses and becomes a follower again.
</span></span><span><span><span>impl</span> </span><span><span><span>From</span><span>&lt;</span><span>Raft<span>&lt;</span>Candidate<span>&gt;</span></span><span>&gt;</span></span> <span>for</span></span><span> <span>Raft</span><span><span>&lt;</span>Follower<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>from</span></span><span><span><span>(</span><span>val</span><span>:</span> <span>Raft<span>&lt;</span>Candidate<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Raft<span>&lt;</span>Follower<span>&gt;</span></span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        </span></span></span></span></span><span><span><span><span><span>        Raft <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            </span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> Follower <span><span>{</span>  </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> If it wins it becomes the leader.
</span></span><span><span><span>impl</span> </span><span><span><span>From</span><span>&lt;</span><span>Raft<span>&lt;</span>Candidate<span>&gt;</span></span><span>&gt;</span></span> <span>for</span></span><span> <span>Raft</span><span><span>&lt;</span>Leader<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>from</span></span><span><span><span>(</span><span>val</span><span>:</span> <span>Raft<span>&lt;</span>Candidate<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Raft<span>&lt;</span>Leader<span>&gt;</span></span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        </span></span></span></span></span><span><span><span><span><span>        Raft <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            </span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> Leader <span><span>{</span>  </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span><span>
</span><span><span><span>//</span> If the leader becomes disconnected it may rejoin to discover it is no longer leader
</span></span><span><span><span>impl</span> </span><span><span><span>From</span><span>&lt;</span><span>Raft<span>&lt;</span>Leader<span>&gt;</span></span><span>&gt;</span></span> <span>for</span></span><span> <span>Raft</span><span><span>&lt;</span>Follower<span>&gt;</span></span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span><span><span>fn</span> </span><span>from</span></span><span><span><span>(</span><span>val</span><span>:</span> <span>Raft<span>&lt;</span>Leader<span>&gt;</span></span></span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>Raft<span>&lt;</span>Follower<span>&gt;</span></span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        </span></span></span></span></span><span><span><span><span><span>        Raft <span><span>{</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            </span></span></span></span></span></span><span><span><span><span><span><span>            state<span>:</span> Follower <span><span>{</span>  </span><span><span>}</span></span>
</span></span></span></span></span></span><span><span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<h2 id="alternatives-from-feedback"><a href="#alternatives-from-feedback" aria-label="Anchor link for: alternatives-from-feedback">Alternatives From Feedback</a></h2>
<p>I saw an interesting comment by <a rel="noopener" target="_blank" href="https://www.reddit.com/r/rust/comments/57ccds/pretty_state_machine_patterns_in_rust/d8rhwq4">I-impv on Reddit</a> showing off <a rel="noopener" target="_blank" href="https://play.rust-lang.org/?gist=ee3e4df093c136ced7b394dc7ffb78e1&amp;version=stable&amp;backtrace=0">this approach based on our examples above</a>. Here's what they had to say about it:</p>
<blockquote>
<p>I like the way you did it. I am working on a fairly complex FSM myself currently and did it slightly different.</p>
<p>Some things I did different:</p>
<ul>
<li>I also modeled the input for the state machine. That way you can model your transitions as a match over (State, Event) every invalid combination is handled by the 'default' pattern</li>
<li>Instead of using panic for invalid transitions I used a Failure state, So every invalid combination transitions to that Failure state</li>
</ul>
</blockquote>
<p>I really like the idea of modeling the input in the transitions!</p>
<h2 id="closing-thoughts"><a href="#closing-thoughts" aria-label="Anchor link for: closing-thoughts">Closing Thoughts</a></h2>
<p>Rust lets us represent State Machines in a fairly good way. In an ideal situation we'd be able to make <code>enum</code>s with restricted transitions between variants, but that's not the case. Instead, we can harness the power of generics and the ownership system to create something expressive, safe, and understandable.</p>
<p>If you have any feedback or suggestions on this article I'd suggest checking out the footer of this page for contact details. I also hang out on Mozilla's IRC as Hoverbear.</p>

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Novel color via stimulation of individual photoreceptors at population scale (153 pts)]]></title>
            <link>https://www.science.org/doi/10.1126/sciadv.adu1052</link>
            <guid>43741013</guid>
            <pubDate>Sun, 20 Apr 2025 02:03:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/doi/10.1126/sciadv.adu1052">https://www.science.org/doi/10.1126/sciadv.adu1052</a>, See on <a href="https://news.ycombinator.com/item?id=43741013">Hacker News</a></p>
Couldn't get https://www.science.org/doi/10.1126/sciadv.adu1052: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Layered Design in Go (111 pts)]]></title>
            <link>https://jerf.org/iri/post/2025/go_layered_design/</link>
            <guid>43740992</guid>
            <pubDate>Sun, 20 Apr 2025 01:58:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jerf.org/iri/post/2025/go_layered_design/">https://jerf.org/iri/post/2025/go_layered_design/</a>, See on <a href="https://news.ycombinator.com/item?id=43740992">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>This post will describe how I design my programs in Go. I needed this
for work, and while I searched for a link, nothing <em>quite</em> fits my
coding practices out there. The word “Layered” can pull up some fairly
close descriptions, but I want to lay out what I do.</p>
<h2 id="deriving-some-requirements">Deriving Some Requirements</h2>
<p>Go has a rule that I believe is underappreciated in its utility and
whose implications are often not fully grasped, which is: Packages may
not circularly reference each other. It is strictly forbidden. A
compile error.</p>
<p>Packages are also the primary way of hiding information within Go,
through the mechanism of <a href="https://go.dev/tour/basics/3">exported and unexported fields and
identifiers in the package</a>. Some people
will pile everything into a single package, and while I’m not quite
ready to call this unconditionally a bad idea, it does involve
sacrificing all ability to use information hiding to maintain
invariants, and that is a heck of a tool to put down. At any sort of
scale, you’d better have some concept of the discipline you’re going
to replace that with.</p>
<p>So for the purposes of this discussion, I’m going to discard the
“one large package approach”.</p>
<p>We also know that Go uses a package named <code>main</code> that contains a
function named <code>main</code> to define the entry point for a given
executable. The resulting package import structure is a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic
graph</a>, where
the packages are the nodes and the imports are the directed edges, and
there is a distinguished “top node” for each executable.</p>
<p>So how do I deal with this requirement in Go?</p>

<p>This is a portion of a package hierarchy extracted from a real
project, with many of the names substituted and rubbed off, but the
relationships are approximately correct:</p>



<figure>

    <img src="https://jerf.org/iri/post/2025/go_layered_design/initial_mess.png" alt="a mess of boxes and lines that, with my apologies, really can't be captured in an alt text. sorry. hope the rest of the text makes sense to you.">
    
        <figcaption>A sample set of packages</figcaption>
</figure>



<p>All imports of external modules are automatically not part of a loop
in the base package, so we can just look at the import patterns of the
application currently being written. Since loops are forbidden that
implies there must be packages that do not import any other package in
the application. Pull those out and put them on the bottom:</p>



<figure>

    <img src="https://jerf.org/iri/post/2025/go_layered_design/layer_1.png" alt="">
    
        <figcaption>The packages that reference nothing separated.</figcaption>
</figure>



<p>There is now a set of packages in the remaining set that only
reference the packages we just pulled out and put on the bottom. Put
them in their own layer:</p>



<figure>

    <img src="https://jerf.org/iri/post/2025/go_layered_design/layer_2.png" alt="">
    
        <figcaption>The packages that reference only the lower layer sorted out.</figcaption>
</figure>



<p>You can repeat this process until you’ve layered everything by the
depth of the import stack:</p>



<figure>

    <img src="https://jerf.org/iri/post/2025/go_layered_design/layer_full.png" alt="">
    
        <figcaption>The layers.</figcaption>
</figure>



<p>All package imports now point downwards, though it can be hard to
tell.</p>
<p>If you look at the bottom, you see very basic things, like
“the package that provides metrics to everything else”,
“the package that refines the logging for our system”, and
“a set data structure”.</p>
<p>These are composed up into slightly higher level functionality that
uses logging, metrics, etc. and puts together things like header
functionality, or information about users (imagine permissions or
metadata are stored here).</p>
<p>Throughout this post I will refer “higher level packages”; in this
case, it literally refers to the way packages will appear “higher” on
this graph than any package it imports. It is not the definition of
“higher” we often use to mean “higher level of abstraction”; yes,
if a package offers a “higher level of abstraction” it will generally
of necessity also be a “higher level package”, but a
“higher level package” is often just a package that is using the lower
level package, not an abstraction, e.g., a “crawler” may have
<code>net/http</code> show up as a “lower level package” but a crawler is not any
sort of abstraction around <code>net/http</code> so much as it is just an
application that is using <code>net/http</code>.</p>
<p>These things are then composed into higher layer objects, and so
forth, and so forth, until you finally get to the desired application
functionality.</p>
<h3 id="this-is-descriptive-not-prescriptive">This Is Descriptive, Not Prescriptive</h3>
<p>If you are the sort of person who reads things about software
architecture, you are used to people making prescriptive statements
about design. For instance, one such statement I found in another
article about layered design in Go has the prescriptive statement that
layers should be organized into very formal layers, and that no layer
should ever reach down more than one level to import a package. That
is not a requirement imposed by Go, it is a <em>prescriptive</em> statement
by the author. You can see in my graph above I don’t agree with that
particular prescription, as I have imports that reach down multiple
levels.</p>
<p>However, the previous section is not prescriptive. It may sound like
prescriptions you’ve heard before, but it’s actually <em>required</em>. You
can graph <em>all</em> Go modules in the layers I described. It’s a
mathematical consequence of the rules for how packages are allowed to
import each other. It is descriptive of the reality in Go.</p>
<p>Which means that any other prescriptive design for a Go program <em>must</em>
sit on top of this structure. It has no choice. It may not be
necessary, but it is certainly <em>convenient</em> in MVC design for the
Model, View, and Controller to be able to mutually reference each
other, at least a little. In Go, that’s not an option, if you want
them separate from each other. You can do MVC, but you must do “MVC on
top of Go layering”. If you slam all of the MVC stuff into one package
for convenience, or for it to work at all, you’re increasing the odds
that you’ll still end up with circular loops between the packages
implementing other related Models or Views or Controllers.</p>
<p>You can “hexagonal architecture”, but you <em>must</em> do it on top of Go
layering.</p>
<p>You can do any design methodology you want, but it must always rigidly
fit the layered design described in the previous section, because it
is not an option.</p>
<p>They do not all go on top of this design constraint equally well.</p>
<h3 id="so-whats-the-best-prescription">So What’s The Best Prescription?</h3>
<p>Naturally, this raises the question of what’s the best methodology to
sit on top of this.</p>
<p>My personal contention is that the answer is “none”. This is a
perfectly sensible and adequate design methodology on its own.</p>
<p>It harmonizes well with a lot of the points I make in <a href="https://jerf.org/iri/blogbooks/functional-programming-lessons-in-imperative-code/">Functional
Programming Lessons in Imperative
Code</a>. Particularly
the section about <a href="https://jerf.org/iri/post/2025/fp_lessons_purity/">purifiable
subcomponents</a> and
the ability to compose multiple component’s purifications together. If
you design a shim for the metrics for testing the metrics in a pure
manner, you can then use that to design the purification for the
bodypart2 above. Then you can use that to design the purification for
the body package, which can then be fed into the classify package, and
through all that, you can get classification tests that don’t have to
depend on any external state, despite the fact it is sitting on top of
a lot of other packages.</p>
<p>Sometimes a purification component will “absorb” the tree under it, so
for instance, the contentmodel module may absorb all metrics and
other packages into itself so the contentmodel can ignore all that and
just use the test shim provided by the contentmodel package. Other
times it may be necessary to have multiple shims related to the
packages being imported. They’re already coupled by the import, so
this is not additional coupling. Generally it’s a bit of both in my
experience.</p>
<p>Any codebase can be decomposed this way with enough work. The work can
be nontrivial, but it gets a lot easier as you practice.</p>
<p>My favorite advantage of this methodology is that for any package you point
at, there is a well-defined and limited number of packages you need to
understand in order to understand the package you are looking at, even
considering the transitive closure of imports. It is effectively
impossible to write code that requires you to understand the entire
rest of the code base to understand it, because you can’t circularly
loop in all the important code in the entire code base
accidentally.</p>
<p>As code scales up, this strongly affords a style in which packages
generally use only and exactly what they need, because otherwise they
become too likely to participate in a circular import loop at some
point.</p>
<h3 id="local-prescriptions">Local Prescriptions</h3>
<p>That’s not to say that there aren’t high level designs that can be
helpful. Web handlers can use some higher level design
patterns. Database-heavy applications may bring in some higher level
patterns. The code base I extracted the diagram I used earlier from
has a plugin-based architecture in which a particular data structure
is flowed through a uniform plugin interface which has a few dozen
implementations on it. However, these can be used in just the parts of
the code base that make sense.</p>
<p>I don’t think it’s a particularly good idea to try to force any other
architecture on Go programs at the top level. Isolate them to parts of
the codebase where they make sense. At the very least, if one is going
to impose an architecture on to a code base, it needs to be one that
came from a world that has a similar circular import restriction,
whether imposed by the language or self-imposed, as I think
methodologies that implicitly incorporate the ability to have circular
imports in them tend to scale up poorly in Go.</p>
<h2 id="avoiding-circular-dependencies">Avoiding Circular Dependencies</h2>
<p>If circular dependencies are impossible in Go, how do we deal with them?</p>
<p>There are multiple solutions, depending on exactly what your code base
is trying to express. I’ll go over some of them below, but first,
there’s a step to do first: When a circular dependency arises in your
code base, you must <em>deeply analyze</em> it and figure out <em>exactly</em> where
the circular dependency arises from.</p>
<p>I will not be so dogmatic as to say that every language should be
programmed without circular import loops, but I do think they are
something that should be <em>minimized</em> in every language. Pervasive
circular loops in a code base eventually make it impossible to
understand the code base without understanding the code base. This
poses… logical difficulties. Fortunately, the real situation is
never so stark as that, and one can eventually work one’s way up to
understanding even such a code base, but it is going to be a much more
difficult task for the pervasive circularity. So the techniques
discussed below are generally useful, even if you aren’t being
<em>forced</em> into using them. For non-Go languages, for the word
“package”, read
“whatever your primary information hiding mechanism is”, be it
classes, modules, or some other word.</p>
<p>It is not enough to say
“this package is circularly depending on that package”. It isn’t even
enough to say that this data structure is depending on that one. It
isn’t even enough to say that this method depends on that method. You
need to trace it down to what bits and pieces of a structure, specific
functionality the code is embodying. Break it down as finely as
possible, because as you ponder how to fix it, you may well be
breaking the code up along the lines you discover.</p>
<p>In general, when you come across a circular import error in the
compiler, it will be because you added some new code that created some
new dependency that turned out to be circular. In the discussions
below, I will refer to this as the “new circular code”. Upon analysis,
you should also be able to identify some particular set of variables
and bits of code that are the most modifiable aspect of the circular
dependency, which I will call the “breakable link” in the discussions
below.</p>
<p>Packages aren’t allowed to circularly reference each other, but
generally what is causing the circularity is much smaller than the
entire package.</p>
<p>Generally, if you can do one of these refactorings, you should,
because the resulting code will increase in conceptual clarity and
have a stronger design. It often as a side effect ends up reducing the
size of an interface of a package as it moves bits out of the exported
public interface that turn out not to belong there. Often if you
listen to the code, it tells you that it is wanting these things.</p>
<p>These are listed in roughly the order you should prefer them:</p>
<h3 id="move-the-functionality">Move The Functionality</h3>
<p>Unfortunately, this is not the most common in my experience, but it is
also the most important when it can be done. Sometimes after you
analyze the situation, you will find that the bit that is causing
circularity is simply in the wrong place. It probably belongs in the
same location as the new circular code.</p>
<p>This may involve slicing apart an existing conglomeration of
functionality. It could be three fields in a larger struct that turn
out to still belong together, but not to belong to the larger struct
at all. You may be slicing out bits of code and a field here and a
field there. It won’t just be about moving entire types around.</p>
<p>This will hold true for all the techniques below, so I’m not going to
mention this again and again. I just can’t emphasize enough that this
does not simply involve moving entire types around. You can even have
cases where you need to split something that looks like an atomic
field in half, though that’s rare. You need to get very granular.</p>
<p>In the rough and tumble of greenfield implementation, I find this
happens a lot initially as I am feeling out the correct
structure. Once past that phase though, this becomes rare. Still, if
you can do it, this is the best move, not just because it breaks the
circularity, but because it has the strongest outcome on the package
conceptual clarity I was talking about. A wholesale removing of the
concept that didn’t belong in the breakable link into the place it
belongs is, in the long term, a huge win for the code base.</p>
<h3 id="create-a-third-package-that-can-be-imported-for-the-shared-bit">Create A Third Package That Can Be Imported For The Shared Bit</h3>
<p>If a package is reaching for something that lives in another package
that results in a circular dependency, consider moving that thing into
a new third package that both can import.</p>
<p>This happens for me most often when I was banging away, implementing
some particular functionality, and I needed some particular type,
let’s say <code>Username</code>, and since nothing else yet needed it, I just
dropped it into the package that needed it. As the program grows,
eventually something else wants to reference the <code>Username</code> in such a
way that it causes circularity. But <code>Username</code> should generally be
just a validated string of some sort. It can almost certainly be moved
into its own package.</p>
<p>The most likely reason you’re reluctant to do this… ok, well,
honestly, the <em>most</em> likely reason is that fundamental laziness we all
share and just not wanting to make the change at all… but the
<em>second</em> most likely reason you’re reluctant to do this is that having
an entire package for a single type like this feels like bad
design.</p>
<p>However, I suggest that you learn to just do it anyhow, because in my
experience, the <em>vast</em> majority of the time, if you could see how that
new package is going to evolve, it will turn out that this new type is
not going to live there alone forever, and indeed, probably not for
very long at all. Of all the times I’ve done this, I think only once
or twice have I ended up with a package that ended up with just one
type in it by the time the program finally “settled”. Try to think
about packages not just as snapshots in time but in terms of their
evolution through time. It is almost always the case that rather than
an isolated type or value, what you have is the first exemplar of some
new non-trivial concept your package will shortly start to embody in a
more complicated and complete sense.</p>
<h3 id="a-new-third-package-that-composes-the-circular-packages">A New Third Package That Composes The Circular Packages</h3>
<p>This is much like the previous case, but moves in the other
direction. If you have two packages circularly depending on each other
for some purpose, you may be able to extract out the dependency and
turn it into something that uses the two packages to achieve the task
that requires the circularity.</p>
<p>I use this less often after I got used to designing architectures
natively in Go. However, before then, I naturally brought in my old
inheritance-based object oriented architecture, and that makes it easy
to expect architectures that deeply depend on circularity to come into
play.</p>
<p>Consider this perfectly sensible example from the ORM world. You have
a <code>Category</code> in a package, representing a category table in the DB, and
a <code>BlogPost</code> in a package. Each has a many-to-many relationship with
the other, and as such the <code>.Save()</code> operation for each ends up
depending on other, creating a circularity.</p>
<p>What I do in these cases is usually make <code>Category</code> and <code>BlogPost</code>
effectively dumber; I break away from them the idea that they know how
to “save” themselves. I create a <code>Category</code> and a <code>BlogPost</code> that are
just the data structures they represent. A higher package can tie them
together through a many-to-many relationship, and a yet higher package
will be the thing that “knows” how to load them from the DB and save
any changes. That top-level package may get assistance from the
lower-level values through various custom interface methods like
<code>UnmarshalFromDB</code> or something.</p>
<p>(This doesn’t work terribly well with ORMs, but, well, this is
technically one of the many many reasons I tend to avoid them. I don’t
like the way they make every object have to “know” about the DB in
order to have one in hand. This is one of the more common
manifestations of the whole <a href="https://www.johndcook.com/blog/2011/07/19/you-wanted-banana/">you wanted a banana but what you
got was a gorilla holding the banana and the entire
jungle</a>
problem. The layered design in Go is hostile to this approach because
the more of the jungle you end up with the more likely you have a
circular dependency, with odds rapidly approaching one. Go almost
forces you to have <code>Banana</code>s and <code>Gorilla</code>s that can be in isolation,
and expressing relationships in higher level packages… but it
doesn’t fully force it, and you can still fight it. You won’t have a
good time of it, though.)</p>
<h3 id="interface-to-break-the-dependency">Interface To Break The Dependency</h3>
<p>If a circular dependency results from taking some type that one of the
circular bits of code is going to call methods on, and the circularity
comes from the reference to the concrete type itself, you can break
the circularity by having one of the places involved in the circular
reference take an interface instead. That is, if you have something
like</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>func</span> (<span>ur</span> <span>UserRef</span>) <span>MyUserIsAdmin</span>(<span>adminDB</span> <span>users</span>.<span>DBList</span>) <span>bool</span> {
</span></span><span><span>     <span>return</span> <span>adminDB</span>.<span>Exists</span>(<span>ur</span>.<span>User</span>)
</span></span><span><span>}</span></span></code></pre></div>
<p>and that is somehow a circular reference, you could consider:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>type</span> <span>UserList</span> <span>interface</span> {
</span></span><span><span>    <span>Exists</span>(<span>username</span> <span>string</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> (<span>ur</span> <span>UserRef</span>) <span>MyUserIsAdmin</span>(<span>adminDB</span> <span>UserList</span>) <span>bool</span> {
</span></span><span><span>     <span>return</span> <span>adminDB</span>.<span>Exists</span>(<span>ur</span>.<span>User</span>)
</span></span><span><span>}</span></span></code></pre></div>
<p>This is not always a full solution. If the interface needs values from
that package as arguments or returns them as parameters this may still
leave a circular reference behind. However, even in these cases,
interfaces can still be a part of the solution.</p>
<p>You may need to create a new method that an interface can
implement. A common instance of this in Go is if the circular
reference is trying to get an exported field of some other struct. It
is fine to take that field, unexport it, and wrap it behind a method,
just so you can then use an interface to break the circular reference
chain.</p>
<p>It is also worth pointing out that this is further down the list for a
reason. While interfaces may loosen the relationship between the two
packages enough to avoid being a circular dependency, it still creates
a relationship of a sort between them. While my example above
intrinsically lacks context, as is the way of little example snippets,
it would still suggest to me that there’s probably an improper mixing
of the concept of “user” and “admin” potentially going on here that is
the root cause of the circularity. Taking the time to slice packages
apart into clean pieces that do not have intermixed concepts will
still produce superior results.</p>
<p>In many cases I start pulling this out as a project matures, and it
has nearly attained the correct degree of separation. Sometimes you
get that last minute
“oh wait, these things need to be connected after all”, and this can
be a good tool to go ahead and spend some of that design capital you
have accrued through being more careful earlier in the design process.</p>
<h3 id="copy-the-dependency">Copy The Dependency</h3>
<p>One of the <a href="https://go-proverbs.github.io/">proverbs of the Go
community</a> is
“A little copying is better than a little dependency.” This is usually
referenced in the context of not bringing in a large library just to
use a few line’s worth of code out of it, but it can apply to your own
code base too. If you’re importing an entire separate package for a
particular tiny snippet of code, and that code really does belong
there, maybe it would just be enough to have a copy of the lines in
the circular package as well.</p>
<p>This is also lower on the list for a reason. Do this every time you
have a problem and you will have the joy of rediscovering for yourself
the concept of “Don’t Repeat Yourself”. However, in my experience,
about the half the time I find myself backed into this particular
solution to circular dependency, as the code evolves it turns out this
was <a href="https://www.jerf.org/iri/post/2024/dry_strong/">false sharing and false
DRY</a> and the two
copies end up non-trivially, and correctly, diverging anyhow,
indicating they weren’t really the same thing after all.</p>
<h3 id="maybe-they-shouldnt-be-two-separate-packages">Maybe They Shouldn’t Be Two Separate Packages</h3>
<p>Finally, if none of the preceding solutions seem viable, even if you
put the effort in, perhaps because the circularity is just too
substantial, the answer may be that the code is telling you that this
is one package after all.</p>
<p>I rather like breaking things into lots of packages, for lots of
reasons, but every once in a while it’s true that I do get a bit too
zealous and I try to break something apart that just doesn’t work
separately. If this is happening to you <em>all the time</em>, you may still
need more practice and not be doing the work necessary to have a good
design, but this should happen at least sometimes in my opinion, or
you’re not trying hard enough to break things up.</p>
<p>The larger the resulting combined package would be, the more you
should fight for some other solution for breaking circular
dependencies, but as with all things in engineering, it’s ultimately a
cost/benefits decision.</p>
<h2 id="so-whats-the-difference-between-this-and-anything-else">So What’s The Difference Between This And Anything Else?</h2>
<p>I admit I struggle to describe how this differs from other design
methodologies, mostly because I’ve been doing this for too long so I’m
too close to the problem, and after a while honestly all the
methodologies sort of blur together into one vague blob of good design
practices and the Quality Without A Name. Should this get to some link
aggregator site, let me issue my own criticism in advance of anyone
else that I am well aware there is still a certain fogginess to this
entire post, in that I have not succeeded in providing a simple recipe
that you can follow every time and I am myself dissatisfied with my
own description of the benefits, despite the fact I believe I have
experienced substantial benefits from taking this approach over
years. Consider this an attempt to write my way to that level of
clarity, and one that is not done yet.</p>
<p>However, this approach does produce at least one thing distinctly
different from many other designs, which is that every package ends up
being <em>something useful</em> on its own terms. For instance, consider a
standard web framework with a standard ORM design. ORMs make it very
easy to introduce the want-banana-get-jungle problem described
above. Even architectures heavy on dependency injection can still end
up making it so every service requires effectively every possible
dependency and thus even though in principle everything is
“purifiable”, nothing is actually usable in isolation because
you still have to provide every service that exists in the system, because
nothing stops this from happening if you can have circular
references. In principle you can use things if you only provide their
dependencies, but if “providing their dependencies” still involves
providing every service in the system, it still is not truly
severable.</p>
<p>This architecture tends to force you to narrow things down to just
what they need and nothing else. If you have a system for classifying
emails, it will generally just need an email and the relevant
classification services you may need for an email; it won’t need the users
and whether those users are admins and what the users are admins over
and the forums that the users are admins over and the top posts of the
forums the users are admins over. If the email classification needs to
reach back up to something about those details, it’ll be isolated into
interfaces that can be mocked or stubbed or whathaveyou. If you just
need a user’s name, you will generally find yourself being forced to
do that over an interface for “yielding a name” rather than pulling in
the entire package for a user, and all of its dependencies.</p>
<p>Many methodologies might metaphorically object that their entire point
is to produce useful things that stand on their own, but it’s really
easy for them to <em>in practice</em> still require jungles in order to have
bananas. This methodology tends to produce <em>practically</em> useful things
in isolation.</p>
<p>On such occasions as I have had to split bits and pieces off into
microservices from what was previously a monolith, it has been an
almost mechanical process, simply following the dependencies,
providing them, and ending up with a functioning service. Every once
in a while I have to trim something I lazily bundled together a bit,
but the system has already been pushed far in that direction so it’s
not a shock to the code base. I find this is a fantastic way to design
“monolithic microservice” codebases, where the microservices can
indeed be pulled out later in very practical amounts of work if that
is desirable.</p>
<p>One of the things I would not call part of this design methodology in
general, but something that is a good idea for any Go package
regardless of what is is doing, is to try to minimize the amount of
exported stuff coming from the package. Use godoc to see what is being
exported… after all, you write documentation on your code anyhow,
right?… and when a package is sort of wrapping up, audit each
exported symbol to see if you <em>really</em> need to export it. The thinner
the public interface, the better this works. It is better to
overzealously keep things unexported, because it is really easy to
re-export something it turns out you should have simply by renaming (a
rename operation your IDE should support and which is guaranteed by
its nature to be isolated within your one package even if you do it
manually) then to unexport something previously exported. (Your IDE
should tell you if a symbol you are trying to unexport is still being
used if you use its rename functionality.)</p>
<p>Still, I don’t deny that if you read this and either don’t feel like
you have a good grasp of what I’m really talking about, or how it
differs from other methodologies, or indeed whether or not it is
really possible and practical, there is an irreducible degree to which
you just need to try it out for yourself, even in a language other
than Go. (Although if you try it in something other than Go, you
<em>need</em> circular imports to be some sort of compile or build failure
for this to work. They get sneaky!) I would recommend a greenfield
project; it is possible but really quite tedious and at times
difficult to tear apart an existing system written against another
methodology and pull it into this one, though I think that’s just a
general rearchitecting truth and not a particular problem with this.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A unique sound alleviates motion sickness (177 pts)]]></title>
            <link>https://www.nagoya-u.ac.jp/researchinfo/result-en/2025/04/20250408-01.html</link>
            <guid>43740021</guid>
            <pubDate>Sat, 19 Apr 2025 22:35:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nagoya-u.ac.jp/researchinfo/result-en/2025/04/20250408-01.html">https://www.nagoya-u.ac.jp/researchinfo/result-en/2025/04/20250408-01.html</a>, See on <a href="https://news.ycombinator.com/item?id=43740021">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          
           <p>A research group led by Takumi Kagawa and Masashi Kato at Nagoya University Graduate School of Medicine has discovered that using “a unique sound stimulation technology”—a device that stimulates the inner ear with a specific wavelength of sound—reduces motion sickness. Even a single minute of stimulation reduced the staggering and discomfort felt by people that read in a moving vehicle. The results, published in <em>Environmental Health and Preventive Medicine</em>, suggest a simple and effective way to treat this common disorder.</p>

<p>“Our study demonstrated that short-term stimulation using a unique sound called 'sound spice®' alleviates symptoms of motion sickness, such as nausea and dizziness,” Kagawa said. “The effective sound level falls within the range of everyday environmental noise exposure, suggesting that the sound technology is both effective and safe.”</p>

<p>The discovery is an important expansion of recent findings about sound and its effect on the inner ear. Increasing evidence has suggested that stimulating the part of the inner ear associated with balance using a unique sound can potentially improve balance. Using a mouse model and humans, the researchers identified a unique sound at 100 Hz as being the optimal frequency.</p>

<p>“Vibrations at the unique sound stimulate the otolithic organs in the inner ear, which detect linear acceleration and gravity,” Kato explained. “This suggests that a unique sound stimulation can broadly activate the vestibular system, which is responsible for maintaining balance and spatial orientation.”</p>

<p>To test the effectiveness of the devices, they recruited voluntary participants who were exposed to the unique sound. Following the stimulation, motion sickness was induced by a swing, a driving simulator, or riding in a car. The researchers used postural control, ECG readings, and Motion Sickness Assessment Questionnaire results to assess the effectiveness of the stimulation.</p>

<p>Exposure to the unique sound before being exposed to the driving simulator enhanced sympathetic nerve activation. The researchers found symptoms such as “lightheadedness” and “nausea,” which are often seen with motion sickness, were alleviated.</p>

<p>“These results suggest that activation of sympathetic nerves, which are often dysregulated in motion sickness, was objectively improved by the unique sound exposure,” Kato said.</p>

<p>“The health risk of short-term exposure to our unique sound is minimal,” Kagawa said. “Given that the stimulus level is well below workplace noise safety standards, this stimulation is expected to be safe when used properly.”</p>

<p>Their results suggest a safe and effective way to improve motion sickness, potentially offering help to millions of sufferers. The researchers plan to further develop the technology with the aim of practical application for a variety of travel situations including air and sea travel.</p>

<p>The study, “Just 1-min exposure to a pure tone at 100 Hz with daily exposable sound pressure levels may improve motion sickness,” was published in <em>Environmental Health and Preventive Medicine</em> on March 25, 2025, at DOI: <a href="https://www.jstage.jst.go.jp/article/ehpm/30/0/30_24-00247/_article" target="_blank" rel="noopener noreferrer">10.1265/ehpm.24-00247</a>.</p>

<p><strong>Authors:</strong><br>Yishuo Gu, Nobutaka Ohgami, Tingchao He, Takumi Kagawa, Fitri Kurniasari, Keming Tong, Xiang Li, Akira Tazaki, Kodai Takeda, Masahiro Mouri, Masashi Kato</p>

<p><strong>Media Contact:</strong><br>Matthew Coslett<br>International Communications Office, Nagoya University<br>Email: icomm_research@t.mail.nagoya-u.ac.jp</p>

<p>Top image: Induction of motion sickness using a driving simulator (credit: Masashi Kato)</p>
          
          

		  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ultrathink is a Claude Code a magic word (106 pts)]]></title>
            <link>https://simonwillison.net/2025/Apr/19/claude-code-best-practices/</link>
            <guid>43739997</guid>
            <pubDate>Sat, 19 Apr 2025 22:31:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2025/Apr/19/claude-code-best-practices/">https://simonwillison.net/2025/Apr/19/claude-code-best-practices/</a>, See on <a href="https://news.ycombinator.com/item?id=43739997">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>



<p><strong><a href="https://www.anthropic.com/engineering/claude-code-best-practices">Claude Code: Best practices for agentic coding</a></strong> (<a href="https://twitter.com/HamelHusain/status/1913702157108592719" title="@HamelHusain">via</a>) Extensive new documentation from Anthropic on how to get the best results out of their <a href="https://github.com/anthropics/claude-code">Claude Code</a> CLI coding agent tool, which includes this fascinating tip:</p>
<blockquote>
<p>We recommend using the word "think" to trigger extended thinking mode, which gives Claude additional computation time to evaluate alternatives more thoroughly. These specific phrases are mapped directly to increasing levels of thinking budget in the system: "think" &lt; "think hard" &lt; "think harder" &lt; "ultrathink." Each level allocates progressively more thinking budget for Claude to use.</p>
</blockquote>
<p>Apparently <strong>ultrathink</strong> is a magic word!</p>
<p>I was curious if this was a feature of the Claude model itself or Claude Code in particular. Claude Code isn't open source but you can view the obfuscated JavaScript for it, and make it a tiny bit less obfuscated by running it through <a href="https://prettier.io/">Prettier</a>. With <a href="https://claude.ai/share/77c398ec-6a8b-4390-91d3-6e9f0403916e">Claude's help</a> I used this recipe:</p>
<pre><code>mkdir -p /tmp/claude-code-examine
cd /tmp/claude-code-examine
npm init -y
npm install @anthropic-ai/claude-code
cd node_modules/@anthropic-ai/claude-code
npx prettier --write cli.js
</code></pre>
<p>Then used <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> to search for "ultrathink":</p>
<pre><code>rg ultrathink -C 30
</code></pre>
<p>And found this chunk of code:</p>
<pre><span>let</span> <span>B</span> <span>=</span> <span>W</span><span>.</span><span>message</span><span>.</span><span>content</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>;</span>
<span>if</span> <span>(</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think harder"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think intensely"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think longer"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think really hard"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think super hard"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think very hard"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"ultrathink"</span><span>)</span>
<span>)</span>
  <span>return</span> <span>(</span>
    <span>l1</span><span>(</span><span>"tengu_thinking"</span><span>,</span> <span>{</span> <span>tokenCount</span>: <span>31999</span><span>,</span> <span>messageId</span>: <span>Z</span><span>,</span> <span>provider</span>: <span>G</span> <span>}</span><span>)</span><span>,</span>
    <span>31999</span>
  <span>)</span><span>;</span>
<span>if</span> <span>(</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think about it"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think a lot"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think deeply"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think hard"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"think more"</span><span>)</span> <span>||</span>
  <span>B</span><span>.</span><span>includes</span><span>(</span><span>"megathink"</span><span>)</span>
<span>)</span>
  <span>return</span> <span>(</span>
    <span>l1</span><span>(</span><span>"tengu_thinking"</span><span>,</span> <span>{</span> <span>tokenCount</span>: <span>1e4</span><span>,</span> <span>messageId</span>: <span>Z</span><span>,</span> <span>provider</span>: <span>G</span> <span>}</span><span>)</span><span>,</span> <span>1e4</span>
  <span>)</span><span>;</span>
<span>if</span> <span>(</span><span>B</span><span>.</span><span>includes</span><span>(</span><span>"think"</span><span>)</span><span>)</span>
  <span>return</span> <span>(</span>
    <span>l1</span><span>(</span><span>"tengu_thinking"</span><span>,</span> <span>{</span> <span>tokenCount</span>: <span>4000</span><span>,</span> <span>messageId</span>: <span>Z</span><span>,</span> <span>provider</span>: <span>G</span> <span>}</span><span>)</span><span>,</span>
    <span>4000</span>
  <span>)</span><span>;</span></pre>

<p>So yeah, it looks like "ultrathink" is a Claude Code feature - presumably that 31999 is a number that affects the token <a href="https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking#implementing-extended-thinking">thinking budget</a>, especially since "megathink" maps to 1e4 tokens (10,000) and just plain "think" maps to 4,000.</p>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Electromagnetism as a Purely Geometric Theory (133 pts)]]></title>
            <link>https://iopscience.iop.org/article/10.1088/1742-6596/2987/1/012001</link>
            <guid>43739529</guid>
            <pubDate>Sat, 19 Apr 2025 21:14:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://iopscience.iop.org/article/10.1088/1742-6596/2987/1/012001">https://iopscience.iop.org/article/10.1088/1742-6596/2987/1/012001</a>, See on <a href="https://news.ycombinator.com/item?id=43739529">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <h2>We apologize for the inconvenience...</h2>
      <p>To ensure we keep this website safe, please can you confirm you are a human by ticking the box below. </p>
      <p>If you are unable to complete the above request please contact us using the below link, providing a screenshot of your experience.</p>
      <p>
        <a href="https://ioppublishing.org/contacts/">https://ioppublishing.org/contacts/</a>
      </p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I built an AI that turns GitHub codebases into easy tutorials (502 pts)]]></title>
            <link>https://github.com/The-Pocket/Tutorial-Codebase-Knowledge</link>
            <guid>43739456</guid>
            <pubDate>Sat, 19 Apr 2025 21:04:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/The-Pocket/Tutorial-Codebase-Knowledge">https://github.com/The-Pocket/Tutorial-Codebase-Knowledge</a>, See on <a href="https://news.ycombinator.com/item?id=43739456">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Turns Codebase into Easy Tutorial with AI</h2><a id="user-content-turns-codebase-into-easy-tutorial-with-ai" aria-label="Permalink: Turns Codebase into Easy Tutorial with AI" href="#turns-codebase-into-easy-tutorial-with-ai"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/6cd0120cc4c5ac11d28b2c60f76033b52db98dac641de3b2644bb054b449d60c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667"><img src="https://camo.githubusercontent.com/6cd0120cc4c5ac11d28b2c60f76033b52db98dac641de3b2644bb054b449d60c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT" data-canonical-src="https://img.shields.io/badge/License-MIT-yellow.svg"></a></p>
<blockquote>
<p dir="auto"><em>Ever stared at a new codebase written by others feeling completely lost? This tutorial shows you how to build an AI agent that analyzes GitHub repositories and creates beginner-friendly tutorials explaining exactly how the code works.</em></p>
</blockquote>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/The-Pocket/Tutorial-Codebase-Knowledge/blob/main/assets/banner.png"><img src="https://github.com/The-Pocket/Tutorial-Codebase-Knowledge/raw/main/assets/banner.png" width="800"></a>
</p>
<p dir="auto">This is a tutorial project of <a href="https://github.com/The-Pocket/PocketFlow">Pocket Flow</a>, a 100-line LLM framework. It crawls GitHub repositories and build a knowledge base from the code. It analyzes entire codebases to identify core abstractions and how they interact, and transforms complex code into beginner-friendly tutorials with clear visualizations.</p>
<ul dir="auto">
<li>
<p dir="auto">Check out the <a href="https://youtu.be/AFY67zOpbSo" rel="nofollow">YouTube Development Tutorial</a> for more!</p>
</li>
<li>
<p dir="auto">Check out the <a href="https://zacharyhuang.substack.com/p/ai-codebase-knowledge-builder-full" rel="nofollow">Substack Post Tutorial</a> for more!</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">⭐ Example Results for Popular GitHub Repositories!</h2><a id="user-content--example-results-for-popular-github-repositories" aria-label="Permalink: ⭐ Example Results for Popular GitHub Repositories!" href="#-example-results-for-popular-github-repositories"></a></p>
<p dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="https://github.com/The-Pocket/Tutorial-Codebase-Knowledge/blob/main/assets/example.png"><img src="https://github.com/The-Pocket/Tutorial-Codebase-Knowledge/raw/main/assets/example.png" width="600"></a>
</p>
<p dir="auto">🤯 All these tutorials are generated <strong>entirely by AI</strong> by crawling the GitHub repo!</p>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/AutoGen%20Core" rel="nofollow">AutoGen Core</a> - Build AI teams that talk, think, and solve problems together like coworkers!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/Browser%20Use" rel="nofollow">Browser Use</a> - Let AI surf the web for you, clicking buttons and filling forms like a digital assistant!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/Celery" rel="nofollow">Celery</a> - Supercharge your app with background tasks that run while you sleep!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/Click" rel="nofollow">Click</a> - Turn Python functions into slick command-line tools with just a decorator!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/Codex" rel="nofollow">Codex</a> - Turn plain English into working code with this AI terminal wizard!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/Crawl4AI" rel="nofollow">Crawl4AI</a> - Train your AI to extract exactly what matters from any website!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/CrewAI" rel="nofollow">CrewAI</a> - Assemble a dream team of AI specialists to tackle impossible problems!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/DSPy" rel="nofollow">DSPy</a> - Build LLM apps like Lego blocks that optimize themselves!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/FastAPI" rel="nofollow">FastAPI</a> - Create APIs at lightning speed with automatic docs that clients will love!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/Flask" rel="nofollow">Flask</a> - Craft web apps with minimal code that scales from prototype to production!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/Google%20A2A" rel="nofollow">Google A2A</a> - The universal language that lets AI agents collaborate across borders!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/LangGraph" rel="nofollow">LangGraph</a> - Design AI agents as flowcharts where each step remembers what happened before!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/LevelDB" rel="nofollow">LevelDB</a> - Store data at warp speed with Google's engine that powers blockchains!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/MCP%20Python%20SDK" rel="nofollow">MCP Python SDK</a> - Build powerful apps that communicate through an elegant protocol without sweating the details!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/NumPy%20Core" rel="nofollow">NumPy Core</a> - Master the engine behind data science that makes Python as fast as C!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/OpenManus" rel="nofollow">OpenManus</a> - Build AI agents with digital brains that think, learn, and use tools just like humans do!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/Pydantic%20Core" rel="nofollow">Pydantic Core</a> - Validate data at rocket speed with just Python type hints!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/Requests" rel="nofollow">Requests</a> - Talk to the internet in Python with code so simple it feels like cheating!</p>
</li>
<li>
<p dir="auto"><a href="https://the-pocket.github.io/Tutorial-Codebase-Knowledge/SmolaAgents" rel="nofollow">SmolaAgents</a> - Build tiny AI agents that punch way above their weight class!</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">🚀 Getting Started</h2><a id="user-content--getting-started" aria-label="Permalink: 🚀 Getting Started" href="#-getting-started"></a></p>
<ol dir="auto">
<li>
<p dir="auto">Clone this repository</p>
</li>
<li>
<p dir="auto">Install dependencies:</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip install -r requirements.txt"><pre>pip install -r requirements.txt</pre></div>
</li>
<li>
<p dir="auto">Set up LLM in <a href="https://github.com/The-Pocket/Tutorial-Codebase-Knowledge/blob/main/utils/call_llm.py"><code>utils/call_llm.py</code></a> by providing credentials. By default, you can use the AI Studio key with this client for Gemini Pro 2.5:</p>
<div dir="auto" data-snippet-clipboard-copy-content="client = genai.Client(
  api_key=os.getenv(&quot;GEMINI_API_KEY&quot;, &quot;your-api_key&quot;),
)"><pre><span>client</span> <span>=</span> <span>genai</span>.<span>Client</span>(
  <span>api_key</span><span>=</span><span>os</span>.<span>getenv</span>(<span>"GEMINI_API_KEY"</span>, <span>"your-api_key"</span>),
)</pre></div>
<p dir="auto">You can use your own models. We highly recommend the latest models with thinking capabilities (Claude 3.7 with thinking, O1). You can verify that it is correctly set up by running:</p>

</li>
<li>
<p dir="auto">Generate a complete codebase tutorial by running the main script:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Analyze a GitHub repository
python main.py --repo https://github.com/username/repo --include &quot;*.py&quot; &quot;*.js&quot; --exclude &quot;tests/*&quot; --max-size 50000

# Or, analyze a local directory
python main.py --dir /path/to/your/codebase --include &quot;*.py&quot; --exclude &quot;*test*&quot;

# Or, generate a tutorial in Chinese
python main.py --repo https://github.com/username/repo --language &quot;Chinese&quot;"><pre><span><span>#</span> Analyze a GitHub repository</span>
python main.py --repo https://github.com/username/repo --include <span><span>"</span>*.py<span>"</span></span> <span><span>"</span>*.js<span>"</span></span> --exclude <span><span>"</span>tests/*<span>"</span></span> --max-size 50000

<span><span>#</span> Or, analyze a local directory</span>
python main.py --dir /path/to/your/codebase --include <span><span>"</span>*.py<span>"</span></span> --exclude <span><span>"</span>*test*<span>"</span></span>

<span><span>#</span> Or, generate a tutorial in Chinese</span>
python main.py --repo https://github.com/username/repo --language <span><span>"</span>Chinese<span>"</span></span></pre></div>
<ul dir="auto">
<li><code>--repo</code> or <code>--dir</code> - Specify either a GitHub repo URL or a local directory path (required, mutually exclusive)</li>
<li><code>-n, --name</code> - Project name (optional, derived from URL/directory if omitted)</li>
<li><code>-t, --token</code> - GitHub token (or set GITHUB_TOKEN environment variable)</li>
<li><code>-o, --output</code> - Output directory (default: ./output)</li>
<li><code>-i, --include</code> - Files to include (e.g., "<em>.py" "</em>.js")</li>
<li><code>-e, --exclude</code> - Files to exclude (e.g., "tests/<em>" "docs/</em>")</li>
<li><code>-s, --max-size</code> - Maximum file size in bytes (default: 100KB)</li>
<li><code>--language</code> - Language for the generated tutorial (default: "english")</li>
</ul>
</li>
</ol>
<p dir="auto">The application will crawl the repository, analyze the codebase structure, generate tutorial content in the specified language, and save the output in the specified directory (default: ./output).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">💡 Development Tutorial</h2><a id="user-content--development-tutorial" aria-label="Permalink: 💡 Development Tutorial" href="#-development-tutorial"></a></p>
<ul dir="auto">
<li>
<p dir="auto">I built using <a href="https://zacharyhuang.substack.com/p/agentic-coding-the-most-fun-way-to" rel="nofollow"><strong>Agentic Coding</strong></a>, the fastest development paradigm, where humans simply <a href="https://github.com/The-Pocket/Tutorial-Codebase-Knowledge/blob/main/docs/design.md">design</a> and agents <a href="https://github.com/The-Pocket/Tutorial-Codebase-Knowledge/blob/main/flow.py">code</a>.</p>
</li>
<li>
<p dir="auto">The secret weapon is <a href="https://github.com/The-Pocket/PocketFlow">Pocket Flow</a>, a 100-line LLM framework that lets Agents (e.g., Cursor AI) build for you</p>
</li>
<li>
<p dir="auto">Check out the Step-by-step YouTube development tutorial:</p>
</li>
</ul>

<p><a href="https://youtu.be/AFY67zOpbSo" rel="nofollow">
    <img src="https://github.com/The-Pocket/Tutorial-Codebase-Knowledge/raw/main/assets/youtube_thumbnail.png" width="500" alt="IMAGE ALT TEXT">
  </a>
</p>
<br>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Art of Assembly Language (2010) (118 pts)]]></title>
            <link>https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AoATOC.html</link>
            <guid>43739285</guid>
            <pubDate>Sat, 19 Apr 2025 20:38:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AoATOC.html">https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AoATOC.html</a>, See on <a href="https://news.ycombinator.com/item?id=43739285">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<hr>
<h2>
  <a name="5032"> </a></h2>
<h2>
  <a name="5033"> </a></h2>
<dl>
  <dl>
    <dt> <a name="277484"> </a>"The Art of Assembly Language Programming" is now <span>hard</span>. This text is now available in published form from "No Starch Press" (http://www.nostarch.com). Please check out their website for more details.    </dt><dt> <a name="277485"> </a>
  </dt></dl>
</dl>
<h2>
  <a name="277482"> </a></h2>
<h2>
  <a name="280150"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Foreword.html#63">1.1 Foreword to the HLA Version of "The Art of Assembly..."</a></h2>
<h2>
  <a name="280152"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Foreword.html#522">1.2 Intended Audience</a></h2>
<h2>
  <a name="280154"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Foreword.html#635">1.3 Teaching From This Text</a></h2>
<h2>
  <a name="280156"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Foreword.html#623">1.4 Copyright Notice</a></h2>
<h2>
  <a name="280158"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Foreword.html#687">1.5 How to Get a Hard Copy of This Text</a></h2>
<h2>
  <a name="280160"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Foreword.html#695">1.6 Obtaining Program Source Listings and Other Materials in This Text</a></h2>
<h2>
  <a name="280162"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Foreword.html#704">1.7 Where to Get Help</a></h2>
<h2>
  <a name="280164"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Foreword.html#2307">1.8 Other Materials You Will Need (Windows Version)</a></h2>
<h2>
  <a name="280166"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Foreword.html#2314">1.9 Other Materials You Will Need (Linux Version)</a></h2>
<h2>
  <a name="280168"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorld.html#1034401">2.1 Chapter Overview</a></h2>
<h2>
  <a name="280170"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorld.html#1011931">2.2 Installing the HLA Distribution Package</a></h2>
<dl>
  <dd> <a name="280172"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorld.html#1011943">2.2.1 Installation Under Windows</a>
  </dd><dd> <a name="280174"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorld.html#1012028">2.2.2 Installation Under Linux</a>
  </dd><dd> <a name="280176"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorld.html#1012114">2.2.3 Installing "Art of Assembly" Related Files</a>
</dd></dl>
<h2>
  <a name="280178"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda2.html#1023185">2.3 The Anatomy of an HLA Program</a></h2>
<h2>
  <a name="280180"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda2.html#998296">2.4 Some Basic HLA Data Declarations</a></h2>
<h2>
  <a name="280182"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda2.html#998344">2.5 Boolean Values</a></h2>
<h2>
  <a name="280184"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda2.html#998359">2.6 Character Values</a></h2>
<h2>
  <a name="280186"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998367">2.7 An Introduction to the Intel 80x86 CPU Family</a></h2>
<h2>
  <a name="280188"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998414">2.8 Some Basic Machine Instructions</a></h2>
<h2>
  <a name="280190"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998591">2.9 Some Basic HLA Control Structures</a></h2>
<dl>
  <dd> <a name="280192"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998595">2.9.1 Boolean Expressions in HLA Statements</a>
  </dd><dd> <a name="280194"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998715">2.9.2 The HLA IF..THEN..ELSEIF..ELSE..ENDIF Statement</a>
  </dd><dd> <a name="280196"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998766">2.9.3 The WHILE..ENDWHILE Statement</a>
  </dd><dd> <a name="280198"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998784">2.9.4 The FOR..ENDFOR Statement</a>
  </dd><dd> <a name="280200"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998820">2.9.5 The REPEAT..UNTIL Statement</a>
  </dd><dd> <a name="280202"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998841">2.9.6 The BREAK and BREAKIF Statements</a>
  </dd><dd> <a name="280204"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998851">2.9.7 The FOREVER..ENDFOR Statement</a>
  </dd><dd> <a name="280206"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda3.html#998870">2.9.8 The TRY..EXCEPTION..ENDTRY Statement</a>
</dd></dl>
<h2>
  <a name="280208"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#1023187">2.10 Introduction to the HLA Standard Library</a></h2>
<dl>
  <dd> <a name="280210"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999008">2.10.1 Predefined Constants in the STDIO Module</a>
  </dd><dd> <a name="280212"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999039">2.10.2 Standard In and Standard Out</a>
  </dd><dd> <a name="280214"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999051">2.10.3 The stdout.newln Routine</a>
  </dd><dd> <a name="280216"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999054">2.10.4 The stdout.putiX Routines</a>
  </dd><dd> <a name="280218"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999060">2.10.5 The stdout.putiXSize Routines</a>
  </dd><dd> <a name="280220"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999109">2.10.6 The stdout.put Routine</a>
  </dd><dd> <a name="280222"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999157">2.10.7 The stdin.getc Routine.</a>
  </dd><dd> <a name="280224"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999206">2.10.8 The stdin.getiX Routines</a>
  </dd><dd> <a name="280226"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999257">2.10.9 The stdin.readLn and stdin.flushInput Routines</a>
  </dd><dd> <a name="280228"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999280">2.10.10 The stdin.get Macro</a>
</dd></dl>
<h2>
  <a name="280230"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda4.html#999298">2.11 Putting It All Together</a></h2>
<h2>
  <a name="280232"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda5.html#999302">2.12 Sample Programs</a></h2>
<dl>
  <dd> <a name="280234"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda5.html#999304">2.12.1 Powers of Two Table Generation</a>
  </dd><dd> <a name="280236"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda5.html#999356">2.12.2 Checkerboard Program</a>
  </dd><dd> <a name="280238"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HelloWorlda5.html#999428">2.12.3 Fibonacci Number Generation</a>
</dd></dl>
<h2>
  <a name="280240"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation.html#998841">3.1 Chapter Overview</a></h2>
<h2>
  <a name="280242"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation.html#998843">3.2 Numbering Systems</a></h2>
<dl>
  <dd> <a name="280244"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation.html#998846">3.2.1 A Review of the Decimal System</a>
  </dd><dd> <a name="280246"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation.html#998859">3.2.2 The Binary Numbering System</a>
  </dd><dd> <a name="280248"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation.html#998884">3.2.3 Binary Formats</a>
</dd></dl>
<h2>
  <a name="280250"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation2.html#998906">3.3 Data Organization</a></h2>
<dl>
  <dd> <a name="280252"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation2.html#998917">3.3.1 Bits</a>
  </dd><dd> <a name="280254"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation2.html#998925">3.3.2 Nibbles</a>
  </dd><dd> <a name="280256"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation2.html#998957">3.3.3 Bytes</a>
  </dd><dd> <a name="280258"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation2.html#999005">3.3.4 Words</a>
  </dd><dd> <a name="280260"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation2.html#999053">3.3.5 Double Words</a>
</dd></dl>
<h2>
  <a name="280262"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation3.html#1012324">3.4 The Hexadecimal Numbering System</a></h2>
<h2>
  <a name="280264"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation3.html#999193">3.5 Arithmetic Operations on Binary and Hexadecimal Numbers</a></h2>
<h2>
  <a name="280266"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation3.html#999216">3.6 A Note About Numbers vs. Representation</a></h2>
<h2>
  <a name="280268"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation4.html#1016732">3.7 Logical Operations on Bits</a></h2>
<h2>
  <a name="280270"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation4.html#999443">3.8 Logical Operations on Binary Numbers and Bit Strings</a></h2>
<h2>
  <a name="280272"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation5.html#999504">3.9 Signed and Unsigned Numbers</a></h2>
<h2>
  <a name="280274"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation5.html#999653">3.10 Sign Extension, Zero Extension, Contraction, and Saturation</a></h2>
<h2>
  <a name="280276"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation6.html#1016733">3.11 Shifts and Rotates</a></h2>
<h2>
  <a name="280278"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation7.html#999881">3.12 Bit Fields and Packed Data</a></h2>
<h2>
  <a name="280280"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DataRepresentation7.html#1001839">3.13 Putting It All Together</a></h2>
<h2>
  <a name="280282"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentation.html#998834">4.1 Chapter Overview</a></h2>
<h2>
  <a name="280284"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentation.html#1000036">4.2 An Introduction to Floating Point Arithmetic</a></h2>
<dl>
  <dd> <a name="280286"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentation.html">4.2.1 IEEE Floating Point Formats</a>
  </dd><dd> <a name="280288"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentation.html#1000155">4.2.2 HLA Support for Floating Point Values</a>
</dd></dl>
<h2>
  <a name="280290"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentation.html">4.3 Binary Coded Decimal (BCD) Representation</a></h2>
<h2>
  <a name="280292"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa2.html#1010580">4.4 Characters</a></h2>
<dl>
  <dd> <a name="280294"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa2.html#1000232">4.4.1 The ASCII Character Encoding</a>
  </dd><dd> <a name="280296"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa2.html#1000372">4.4.2 HLA Support for ASCII Characters</a>
  </dd><dd> <a name="280298"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa2.html#1000510">4.4.3 The ASCII Character Set</a>
</dd></dl>
<h2>
  <a name="280300"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa2.html#1001554">4.5 The UNICODE Character Set</a></h2>
<h2>
  <a name="280302"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa3.html#1010581">4.6 Other Data Representations</a></h2>
<dl>
  <dd> <a name="280304"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa3.html#1002170">4.6.1 Representing Colors on a Video Display</a>
  </dd><dd> <a name="280306"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa3.html#1002175">4.6.2 Representing Audio Information</a>
  </dd><dd> <a name="280308"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa3.html#1002177">4.6.3 Representing Musical Information</a>
  </dd><dd> <a name="280310"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa3.html#1002373">4.6.4 Representing Video Information</a>
  </dd><dd> <a name="280312"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa3.html#1002185">4.6.5 Where to Get More Information About Data Types</a>
</dd></dl>
<h2>
  <a name="280314"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MoreDataRepresentationa3.html#1001555">4.7 Putting It All Together</a></h2>
<h2>
  <a name="280316"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganization.html#998834">1.1 Chapter Overview</a></h2>
<h2>
  <a name="280318"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganization.html#998843">1.2 The Basic System Components</a></h2>
<dl>
  <dd> <a name="280320"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganization.html#998862">1.2.1 The System Bus</a>
  <dl>
    <dd> <a name="280322"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganization.html#998874">1.2.1.1 The Data Bus</a>
    </dd><dd> <a name="280324"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganization.html#998935">1.2.1.2 The Address Bus</a>
    </dd><dd> <a name="280326"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganization.html#999059">1.2.1.3 The Control Bus</a>
  </dd></dl>
  </dd><dd> <a name="280328"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganizationa2.html#1013690">1.2.2 The Memory Subsystem</a>
  </dd><dd> <a name="280330"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganizationa2.html#999196">1.2.3 The I/O Subsystem</a>
</dd></dl>
<h2>
  <a name="280332"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganizationa3.html#1013694">1.3 HLA Support for Data Alignment</a></h2>
<h2>
  <a name="280334"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganizationa4.html#1013695">1.4 System Timing</a></h2>
<dl>
  <dd> <a name="280336"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganization.html">1.4.1 The System Clock</a>
  </dd><dd> <a name="280338"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganizationa4.html#999338">1.4.2 Memory Access and the System Clock</a>
  </dd><dd> <a name="280340"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganizationa4.html#999367">1.4.3 Wait States</a>
  </dd><dd> <a name="280342"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganizationa4.html#999395">1.4.4 Cache Memory</a>
</dd></dl>
<h2>
  <a name="280344"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/SystemOrganizationa4.html#998197">1.5 Putting It All Together</a></h2>
<h2>
  <a name="280346"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#998834">2.1 Chapter Overview</a></h2>
<h2>
  <a name="280348"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999494">2.2 The 80x86 Addressing Modes</a></h2>
<dl>
  <dd> <a name="280350"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999500">2.2.1 80x86 Register Addressing Modes</a>
  </dd><dd> <a name="280352"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999515">2.2.2 80x86 32-bit Memory Addressing Modes</a>
  <dl>
    <dd> <a name="280354"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999520">2.2.2.1 The Displacement Only Addressing Mode</a>
    </dd><dd> <a name="280356"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999545">2.2.2.2 The Register Indirect Addressing Modes</a>
    </dd><dd> <a name="280358"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999581">2.2.2.3 Indexed Addressing Modes</a>
    </dd><dd> <a name="280360"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999608">2.2.2.4 Variations on the Indexed Addressing Mode</a>
    </dd><dd> <a name="280362"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999656">2.2.2.5 Scaled Indexed Addressing Modes</a>
    </dd><dd> <a name="280364"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1002325">2.2.2.6 Addressing Mode Wrap-up</a>
  </dd></dl>
</dd></dl>
<h2>
  <a name="280366"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999687">2.3 Run-Time Memory Organization</a></h2>
<dl>
  <dd> <a name="280368"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999697">2.3.1 The Code Section</a>
  </dd><dd> <a name="280370"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1012128">2.3.2 The Static Sections</a>
  </dd><dd> <a name="280372"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999744">2.3.3 The Read-Only Data Section</a>
  </dd><dd> <a name="280374"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999765">2.3.4 The Storage Section</a>
  </dd><dd> <a name="280376"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1008215">2.3.5 The @NOSTORAGE Attribute</a>
  </dd><dd> <a name="280378"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999848">2.3.6 The Var Section</a>
  </dd><dd> <a name="280380"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999864">2.3.7 Organization of Declaration Sections Within Your Programs</a>
</dd></dl>
<h2>
  <a name="280382"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999911">2.4 Address Expressions</a></h2>
<h2>
  <a name="280384"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#999974">2.5 Type Coercion</a></h2>
<h2>
  <a name="280386"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000029">2.6 Register Type Coercion</a></h2>
<h2>
  <a name="280388"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000052">2.7 The Stack Segment and the Push and Pop Instructions</a></h2>
<dl>
  <dd> <a name="280390"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000069">2.7.1 The Basic PUSH Instruction</a>
  </dd><dd> <a name="280392"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000098">2.7.2 The Basic POP Instruction</a>
  </dd><dd> <a name="280394"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000132">2.7.3 Preserving Registers With the PUSH and POP Instructions</a>
  </dd><dd> <a name="280396"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000154">2.7.4 The Stack is a LIFO Data Structure</a>
  </dd><dd> <a name="280398"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000220">2.7.5 Other PUSH and POP Instructions</a>
  </dd><dd> <a name="280400"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000261">2.7.6 Removing Data From the Stack Without Popping It</a>
  </dd><dd> <a name="280402"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000319">2.7.7 Accessing Data You've Pushed on the Stack Without Popping It</a>
</dd></dl>
<h2>
  <a name="280404"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000360">2.8 Dynamic Memory Allocation and the Heap Segment</a></h2>
<h2>
  <a name="280406"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000436">2.9 The INC and DEC Instructions</a></h2>
<h2>
  <a name="280408"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1000458">2.10 Obtaining the Address of a Memory Object</a></h2>
<h2>
  <a name="280410"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryAccessandOrg.html#1002585">2.11 Putting It All Together</a></h2>
<h2>
  <a name="280412"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign.html#362">3.1 Boolean Algebra</a></h2>
<h2>
  <a name="280414"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign.html#3996">3.2 Boolean Functions and Truth Tables</a></h2>
<h2>
  <a name="280416"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign2.html#20769">3.3 Algebraic Manipulation of Boolean Expressions</a></h2>
<h2>
  <a name="280418"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign2.html#4874">3.4 Canonical Forms</a></h2>
<h2>
  <a name="280420"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign3.html#20770">3.5 Simplification of Boolean Functions</a></h2>
<h2>
  <a name="280422"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign4.html#20771">3.6 What Does This Have To Do With Computers, Anyway?</a></h2>
<dl>
  <dd> <a name="280424"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign4.html#6176">3.6.1 Correspondence Between Electronic Circuits and Boolean Functions</a>
  </dd><dd> <a name="280426"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign4.html#6234">3.6.2 Combinatorial Circuits</a>
  </dd><dd> <a name="280428"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign4.html#6293">3.6.3 Sequential and Clocked Logic</a>
</dd></dl>
<h2>
  <a name="280430"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign4.html#6140">3.7 Okay, What Does It Have To Do With Programming, Then?</a></h2>
<h2>
  <a name="280432"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DigitalDesign4.html#11030">3.8 Putting It All Together</a></h2>
<h2>
  <a name="280434"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecture.html#998197">4.1 Chapter Overview</a></h2>
<h2>
  <a name="280436"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecture.html#998840">4.2 The History of the 80x86 CPU Family</a></h2>
<h2>
  <a name="280438"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea2.html#1013324">4.3 A History of Software Development for the x86</a></h2>
<h2>
  <a name="280440"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1029343">4.4 Basic CPU Design</a></h2>
<h2>
  <a name="280442"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1013328">4.5 Decoding and Executing Instructions: Random Logic Versus Microcode</a></h2>
<h2>
  <a name="280444"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1014719">4.6 RISC vs. CISC vs. VLIW</a></h2>
<h2>
  <a name="280446"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1014746">4.7 Instruction Execution, Step-By-Step</a></h2>
<h2>
  <a name="280448"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1014785">4.8 Parallelism - the Key to Faster Processors</a></h2>
<dl>
  <dd> <a name="280450"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1013332">4.8.1 The Prefetch Queue - Using Unused Bus Cycles</a>
  </dd><dd> <a name="280452"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1013340">4.8.2 Pipelining - Overlapping the Execution of Multiple Instructions</a>
  <dl>
    <dd> <a name="280454"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1015976">4.8.2.1 A Typical Pipeline</a>
    </dd><dd> <a name="280456"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1016115">4.8.2.2 Stalls in a Pipeline</a>
  </dd></dl>
  </dd><dd> <a name="280458"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1016111">4.8.3 Instruction Caches - Providing Multiple Paths to Memory</a>
  </dd><dd> <a name="280460"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1013342">4.8.4 Hazards</a>
  </dd><dd> <a name="280462"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1016344">4.8.5 Superscalar Operation- Executing Instructions in Parallel</a>
  </dd><dd> <a name="280464"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1013344">4.8.6 Out of Order Execution</a>
  </dd><dd> <a name="280466"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1016558">4.8.7 Register Renaming</a>
  </dd><dd> <a name="280468"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1016686">4.8.8 Very Long Instruction Word Architecture (VLIW)</a>
  </dd><dd> <a name="280470"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1016572">4.8.9 Parallel Processing</a>
  </dd><dd> <a name="280472"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1016641">4.8.10 Multiprocessing</a>
</dd></dl>
<h2>
  <a name="280474"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CPUArchitecturea3.html#1016617">4.9 Putting It All Together</a></h2>
<h2>
  <a name="280476"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html">5.1 Chapter Overview</a></h2>
<h2>
  <a name="280478"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1013376">5.2 The Importance of the Design of the Instruction Set</a></h2>
<h2>
  <a name="280480"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1013428">5.3 Basic Instruction Design Goals</a></h2>
<dl>
  <dd> <a name="280482"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1013211">5.3.1 Addressing Modes on the Y86</a>
  </dd><dd> <a name="280484"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1013253">5.3.2 Encoding Y86 Instructions</a>
  </dd><dd> <a name="280486"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1013175">5.3.3 Hand Encoding Instructions</a>
  </dd><dd> <a name="280488"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1014039">5.3.4 Using an Assembler to Encode Instructions</a>
  </dd><dd> <a name="280490"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1014056">5.3.5 Extending the Y86 Instruction Set</a>
</dd></dl>
<h2>
  <a name="280492"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1014076">5.4 Encoding 80x86 Instructions</a></h2>
<dl>
  <dd> <a name="280494"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1014111">5.4.1 Encoding Instruction Operands</a>
  </dd><dd> <a name="280496"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1015674">5.4.2 Encoding the ADD Instruction: Some Examples</a>
  </dd><dd> <a name="280498"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html">5.4.3 Encoding Immediate Operands</a>
  </dd><dd> <a name="280500"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1015672">5.4.4 Encoding Eight, Sixteen, and Thirty-Two Bit Operands</a>
  </dd><dd> <a name="280502"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1015679">5.4.5 Alternate Encodings for Instructions</a>
</dd></dl>
<h2>
  <a name="280504"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ISA.html#1015686">5.5 Putting It All Together</a></h2>
<h2>
  <a name="280506"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecture.html">6.1 Chapter Overview</a></h2>
<h2>
  <a name="280508"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecture.html#1013180">6.2 The Memory Hierarchy</a></h2>
<h2>
  <a name="280510"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecture.html#1013244">6.3 How the Memory Hierarchy Operates</a></h2>
<h2>
  <a name="280512"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecture.html#1013266">6.4 Relative Performance of Memory Subsystems</a></h2>
<h2>
  <a name="280514"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecturea2.html#1023796">6.5 Cache Architecture</a></h2>
<h2>
  <a name="280516"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecturea3.html#1023797">6.6 Virtual Memory, Protection, and Paging</a></h2>
<h2>
  <a name="280518"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecturea3.html#1013375">6.7 Thrashing</a></h2>
<h2>
  <a name="280520"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecturea4.html#1023802">6.8 NUMA and Peripheral Devices</a></h2>
<h2>
  <a name="280522"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecturea4.html#1013371">6.9 Segmentation</a></h2>
<h2>
  <a name="280524"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MemoryArchitecture.html">6.10 Putting it All Together</a></h2>
<h2>
  <a name="280526"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO.html">7.1 Chapter Overview</a></h2>
<h2>
  <a name="280528"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO.html#1013159">7.2 Connecting a CPU to the Outside World</a></h2>
<h2>
  <a name="280530"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO.html#1013600">7.3 Read-Only, Write-Only, Read/Write, and Dual I/O Ports</a></h2>
<h2>
  <a name="280532"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO.html#1013414">7.4 I/O (Input/Output) Mechanisms</a></h2>
<dl>
  <dd> <a name="280534"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO.html#1013591">7.4.1 Memory Mapped Input/Output</a>
  </dd><dd> <a name="280536"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO.html#1013592">7.4.2 I/O Mapped Input/Output</a>
  </dd><dd> <a name="280538"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO.html#1013228">7.4.3 Direct Memory Access</a>
</dd></dl>
<h2>
  <a name="280540"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO2.html#1027142">7.5 I/O Speed Hierarchy</a></h2>
<h2>
  <a name="280542"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO2.html#1013772">7.6 System Busses and Data Transfer Rates</a></h2>
<h2>
  <a name="280544"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO2.html#1013752">7.7 The AGP Bus</a></h2>
<h2>
  <a name="280546"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO3.html#1027143">7.8 Handshaking</a></h2>
<h2>
  <a name="280548"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO3.html#1013258">7.9 Time-outs on an I/O Port</a></h2>
<h2>
  <a name="280550"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO4.html#1027144">7.10 Interrupts and Polled I/O</a></h2>
<h2>
  <a name="280552"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO4.html#1014216">7.11 Using a Circular Queue to Buffer Input Data from an ISR</a></h2>
<h2>
  <a name="280554"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO4.html#1014217">7.12 Using a Circular Queue to Buffer Output Data for an ISR</a></h2>
<h2>
  <a name="280556"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO5.html#1027145">7.13 I/O and the Cache</a></h2>
<h2>
  <a name="280558"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO5.html#1014737">7.14 Protected Mode Operation</a></h2>
<h2>
  <a name="280560"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO5.html#998840">7.15 Device Drivers</a></h2>
<h2>
  <a name="280562"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IO5.html#1014462">7.16 Putting It All Together</a></h2>
<h2>
  <a name="280564"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html">1.1 Chapter Overview</a></h2>
<h2>
  <a name="280566"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#998838">1.2 Some Additional Instructions: INTMUL, BOUND, INTO</a></h2>
<h2>
  <a name="280568"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#999026">1.3 The QWORD and TBYTE Data Types</a></h2>
<h2>
  <a name="280570"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#999031">1.4 HLA Constant and Value Declarations</a></h2>
<dl>
  <dd> <a name="280572"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#999172">1.4.1 Constant Types</a>
  </dd><dd> <a name="280574"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#999199">1.4.2 String and Character Literal Constants</a>
  </dd><dd> <a name="280576"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#999255">1.4.3 String and Text Constants in the CONST Section</a>
  </dd><dd> <a name="280578"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#999287">1.4.4 Constant Expressions</a>
  </dd><dd> <a name="280580"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#999367">1.4.5 Multiple CONST Sections and Their Order in an HLA Program</a>
  </dd><dd> <a name="280582"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#999378">1.4.6 The HLA VAL Section</a>
  </dd><dd> <a name="280584"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes.html#999397">1.4.7 Modifying VAL Objects at Arbitrary Points in Your Programs</a>
</dd></dl>
<h2>
  <a name="280586"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes2.html#1015617">1.5 The HLA TYPE Section</a></h2>
<h2>
  <a name="280588"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes2.html#999450">1.6 ENUM and HLA Enumerated Data Types</a></h2>
<h2>
  <a name="280590"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes2.html#999488">1.7 Pointer Data Types</a></h2>
<dl>
  <dd> <a name="280592"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes2.html#999516">1.7.1 Using Pointers in Assembly Language</a>
  </dd><dd> <a name="280594"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes2.html#999543">1.7.2 Declaring Pointers in HLA</a>
  </dd><dd> <a name="280596"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes2.html#999560">1.7.3 Pointer Constants and Pointer Constant Expressions</a>
  </dd><dd> <a name="280598"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes2.html#999598">1.7.4 Pointer Variables and Dynamic Memory Allocation</a>
  </dd><dd> <a name="280600"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes2.html#999626">1.7.5 Common Pointer Problems</a>
</dd></dl>
<h2>
  <a name="280602"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ConstsVarsAndDataTypes2.html#999757">1.8 Putting It All Together</a></h2>
<h2>
  <a name="280604"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharacterStrings.html">2.1 Chapter Overview</a></h2>
<h2>
  <a name="280606"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharacterStrings.html#999760">2.2 Composite Data Types</a></h2>
<h2>
  <a name="280608"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharacterStrings.html#999763">2.3 Character Strings</a></h2>
<h2>
  <a name="280610"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharacterStrings.html#999809">2.4 HLA Strings</a></h2>
<h2>
  <a name="280612"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharacterStrings.html#999979">2.5 Accessing the Characters Within a String</a></h2>
<h2>
  <a name="280614"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharacterStringsa2.html#1000046">2.6 The HLA String Module and Other String-Related Routines</a></h2>
<h2>
  <a name="280616"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharacterStringsa2.html#1004476">2.7 In-Memory Conversions</a></h2>
<h2>
  <a name="280618"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharacterStringsa2.html#1004058">2.8 Putting It All Together</a></h2>
<h2>
  <a name="280620"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html">3.1 Chapter Overview</a></h2>
<h2>
  <a name="280622"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1000417">3.2 The HLA Standard Library CHARS.HHF Module</a></h2>
<h2>
  <a name="280624"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1004846">3.3 Character Sets</a></h2>
<h2>
  <a name="280626"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1000420">3.4 Character Set Implementation in HLA</a></h2>
<h2>
  <a name="280628"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1000479">3.5 HLA Character Set Constants and Character Set Expressions</a></h2>
<h2>
  <a name="280630"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1000520">3.6 The IN Operator in HLA HLL Boolean Expressions</a></h2>
<h2>
  <a name="280632"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1000547">3.7 Character Set Support in the HLA Standard Library</a></h2>
<h2>
  <a name="280634"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1000617">3.8 Using Character Sets in Your HLA Programs</a></h2>
<h2>
  <a name="280636"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#998197">3.9 Low-level Implementation of Set Operations</a></h2>
<dl>
  <dd> <a name="280638"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1003924">3.9.1 Character Set Functions That Build Sets</a>
  </dd><dd> <a name="280640"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1004344">3.9.2 Traditional Set Operations</a>
  </dd><dd> <a name="280642"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1003925">3.9.3 Testing Character Sets</a>
</dd></dl>
<h2>
  <a name="280644"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/CharactersAndCharSets.html#1003920">3.10 Putting It All Together</a></h2>
<h2>
  <a name="280646"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arrays.html">4.1 Chapter Overview</a></h2>
<h2>
  <a name="280648"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arrays.html#1000674">4.2 Arrays</a></h2>
<h2>
  <a name="280650"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arrays.html#1000702">4.3 Declaring Arrays in Your HLA Programs</a></h2>
<h2>
  <a name="280652"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arrays.html#1000728">4.4 HLA Array Constants</a></h2>
<h2>
  <a name="280654"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arrays.html#1000750">4.5 Accessing Elements of a Single Dimension Array</a></h2>
<dl>
  <dd> <a name="280656"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arrays.html#1000794">4.5.1 Sorting an Array of Values</a>
</dd></dl>
<h2>
  <a name="280658"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arraysa2.html#1010609">4.6 Multidimensional Arrays</a></h2>
<dl>
  <dd> <a name="280660"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arraysa2.html#1000862">4.6.1 Row Major Ordering</a>
  </dd><dd> <a name="280662"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arraysa2.html#1000988">4.6.2 Column Major Ordering</a>
</dd></dl>
<h2>
  <a name="280664"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arraysa2.html#1001023">4.7 Allocating Storage for Multidimensional Arrays</a></h2>
<h2>
  <a name="280666"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arraysa2.html#1001071">4.8 Accessing Multidimensional Array Elements in Assembly Language</a></h2>
<h2>
  <a name="280668"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arraysa3.html#1010610">4.9 Large Arrays and MASM</a></h2>
<h2>
  <a name="280670"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arraysa3.html#1009426">4.10 Dynamic Arrays in Assembly Language</a></h2>
<h2>
  <a name="280672"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arraysa3.html#1001202">4.11 HLA Standard Library Array Support</a></h2>
<h2>
  <a name="280674"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Arraysa3.html#998197">4.12 Putting It All Together</a></h2>
<h2>
  <a name="280676"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces.html">5.1 Chapter Overview</a></h2>
<h2>
  <a name="280678"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces.html#1001281">5.2 Records</a></h2>
<h2>
  <a name="280680"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces.html#1001353">5.3 Record Constants</a></h2>
<h2>
  <a name="280682"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces.html#1004084">5.4 Arrays of Records</a></h2>
<h2>
  <a name="280684"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces.html#1004035">5.5 Arrays/Records as Record Fields</a></h2>
<h2>
  <a name="280686"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces.html#1003944">5.6 Controlling Field Offsets Within a Record</a></h2>
<h2>
  <a name="280688"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces.html#1003984">5.7 Aligning Fields Within a Record</a></h2>
<h2>
  <a name="280690"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces.html#1001449">5.8 Pointers to Records</a></h2>
<h2>
  <a name="280692"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespacesa2.html#1004223">5.9 Unions</a></h2>
<h2>
  <a name="280694"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespacesa2.html#1004361">5.10 Anonymous Unions</a></h2>
<h2>
  <a name="280696"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespacesa2.html#1004283">5.11 Variant Types</a></h2>
<h2>
  <a name="280698"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces3.html#1012321">5.12 Namespaces</a></h2>
<h2>
  <a name="280700"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RecordsUnionsNamespaces3.html#1004026">5.13 Putting It All Together</a></h2>
<h2>
  <a name="280702"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes.html">6.1 Chapter Overview</a></h2>
<h2>
  <a name="280704"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes.html#1001465">6.2 Dates</a></h2>
<h2>
  <a name="280706"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes.html#1003951">6.3 A Brief History of the Calendar</a></h2>
<h2>
  <a name="280708"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes2.html#1013953">6.4 HLA Date Functions</a></h2>
<dl>
  <dd> <a name="280710"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes2.html#1001486">6.4.1 date.IsValid and date.validate</a>
  </dd><dd> <a name="280712"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes2.html#1001568">6.4.2 Checking for Leap Years</a>
  </dd><dd> <a name="280714"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes2.html#1001675">6.4.3 Obtaining the System Date</a>
  </dd><dd> <a name="280716"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes2.html#1001715">6.4.4 Date to String Conversions and Date Output</a>
  </dd><dd> <a name="280718"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes2.html#998197">6.4.5 date.unpack and data.pack</a>
  </dd><dd> <a name="280720"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes2.html#1004157">6.4.6 date.Julian, date.fromJulian</a>
  </dd><dd> <a name="280722"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes2.html#1004034">6.4.7 date.datePlusDays, date.datePlusMonths, and date.daysBetween</a>
  </dd><dd> <a name="280724"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes2.html#1004072">6.4.8 date.dayNumber, date.daysLeft, and date.dayOfWeek</a>
</dd></dl>
<h2>
  <a name="280726"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes3.html#1004142">6.5 Times</a></h2>
<dl>
  <dd> <a name="280728"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes3.html#1004208">6.5.1 time.curTime</a>
  </dd><dd> <a name="280730"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes3.html#1004214">6.5.2 time.hmsToSecs and time.secstoHMS</a>
  </dd><dd> <a name="280732"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes3.html#1004232">6.5.3 Time Input/Output</a>
</dd></dl>
<h2>
  <a name="280734"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DatesAndTimes3.html#1004357">6.6 Putting It All Together</a></h2>
<h2>
  <a name="280736"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files.html">7.1 Chapter Overview</a></h2>
<h2>
  <a name="280738"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files.html#1004585">7.2 File Organization</a></h2>
<dl>
  <dd> <a name="280740"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files.html#1004624">7.2.1 Files as Lists of Records</a>
  </dd><dd> <a name="280742"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files.html#1004641">7.2.2 Binary vs. Text Files</a>
</dd></dl>
<h2>
  <a name="280744"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Filesa2.html#1017815">7.3 Sequential Files</a></h2>
<h2>
  <a name="280746"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files3.html#1017816">7.4 Random Access Files</a></h2>
<h2>
  <a name="280748"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files3.html#998197">7.5 ISAM (Indexed Sequential Access Method) Files</a></h2>
<h2>
  <a name="280750"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files4.html#1017817">7.6 Truncating a File</a></h2>
<h2>
  <a name="280752"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files4.html#1005206">7.7 File Utility Routines</a></h2>
<dl>
  <dd> <a name="280754"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files4.html#1005713">7.7.1 Computing the File Size</a>
  </dd><dd> <a name="280756"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files4.html#1005719">7.7.2 Deleting Files</a>
</dd></dl>
<h2>
  <a name="280758"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files4.html#1005204">7.8 Directory Operations</a></h2>
<h2>
  <a name="280760"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Files4.html#1005182">7.9 Putting It All Together</a></h2>
<h2>
  <a name="280762"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures.html">8.1 Chapter Overview</a></h2>
<h2>
  <a name="280764"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures.html#998840">8.2 Procedures</a></h2>
<h2>
  <a name="280766"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures.html#998926">8.3 Saving the State of the Machine</a></h2>
<h2>
  <a name="280768"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures.html#999081">8.4 Prematurely Returning from a Procedure</a></h2>
<h2>
  <a name="280770"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures2.html#1010444">8.5 Local Variables</a></h2>
<h2>
  <a name="280772"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures2.html#999264">8.6 Other Local and Global Symbol Types</a></h2>
<h2>
  <a name="280774"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures3.html#1010445">8.7 Parameters</a></h2>
<dl>
  <dd> <a name="280776"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures3.html#999276">8.7.1 Pass by Value</a>
  </dd><dd> <a name="280778"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures3.html#999382">8.7.2 Pass by Reference</a>
</dd></dl>
<h2>
  <a name="280780"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures3.html#999477">8.8 Functions and Function Results</a></h2>
<dl>
  <dd> <a name="280782"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures3.html#999484">8.8.1 Returning Function Results</a>
  </dd><dd> <a name="280784"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures3.html#999493">8.8.2 Instruction Composition in HLA</a>
  </dd><dd> <a name="280786"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures3.html#999539">8.8.3 The HLA RETURNS Option in Procedures</a>
</dd></dl>
<h2>
  <a name="280788"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures4.html#999601">8.9 Side Effects</a></h2>
<h2>
  <a name="280790"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures4.html#999651">8.10 Recursion</a></h2>
<h2>
  <a name="280792"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures4.html#999835">8.11 Forward Procedures</a></h2>
<h2>
  <a name="280794"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntroductionToProcedures4.html#1001269">8.12 Putting It All Together</a></h2>
<h2>
  <a name="280796"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms.html">9.1 Chapter Overview</a></h2>
<h2>
  <a name="280798"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms.html#999854">9.2 Managing Large Programs</a></h2>
<h2>
  <a name="280800"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms.html#999866">9.3 The #INCLUDE Directive</a></h2>
<h2>
  <a name="280802"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms.html#1001437">9.4 Ignoring Duplicate Include Operations</a></h2>
<h2>
  <a name="280804"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms.html#999913">9.5 UNITs and the EXTERNAL Directive</a></h2>
<dl>
  <dd> <a name="280806"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms.html#1000044">9.5.1 Behavior of the EXTERNAL Directive</a>
  </dd><dd> <a name="280808"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms.html#1000078">9.5.2 Header Files in HLA</a>
</dd></dl>
<h2>
  <a name="280810"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms2.html#1010906">9.6 Make Files</a></h2>
<h2>
  <a name="280812"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms2.html#998197">9.7 Code Reuse</a></h2>
<h2>
  <a name="280814"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms2.html#1001309">9.8 Creating and Managing Libraries</a></h2>
<h2>
  <a name="280816"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms2.html#1001302">9.9 Name Space Pollution</a></h2>
<h2>
  <a name="280818"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ManagingLargePrograms2.html#1001411">9.10 Putting It All Together</a></h2>
<h2>
  <a name="280820"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic.html">10.1 Chapter Overview</a></h2>
<h2>
  <a name="280822"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic.html#998837">10.2 80x86 Integer Arithmetic Instructions</a></h2>
<dl>
  <dd> <a name="280824"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic.html#998840">10.2.1 The MUL and IMUL Instructions</a>
  </dd><dd> <a name="280826"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic.html#998921">10.2.2 The DIV and IDIV Instructions</a>
  </dd><dd> <a name="280828"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic.html#999016">10.2.3 The CMP Instruction</a>
  </dd><dd> <a name="280830"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic.html#999085">10.2.4 The SETcc Instructions</a>
  </dd><dd> <a name="280832"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic.html#999449">10.2.5 The TEST Instruction</a>
</dd></dl>
<h2>
  <a name="280834"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetica2.html#999459">10.3 Arithmetic Expressions</a></h2>
<dl>
  <dd> <a name="280836"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetica2.html#999473">10.3.1 Simple Assignments</a>
  </dd><dd> <a name="280838"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetica2.html#999504">10.3.2 Simple Expressions</a>
  </dd><dd> <a name="280840"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetica2.html#999582">10.3.3 Complex Expressions</a>
  </dd><dd> <a name="280842"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetica2.html#999744">10.3.4 Commutative Operators</a>
</dd></dl>
<h2>
  <a name="280844"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetica2.html#999863">10.4 Logical (Boolean) Expressions</a></h2>
<h2>
  <a name="280846"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic3.html#999930">10.5 Machine and Arithmetic Idioms</a></h2>
<dl>
  <dd> <a name="280848"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic3.html#999935">10.5.1 Multiplying without MUL, IMUL, or INTMUL</a>
  </dd><dd> <a name="280850"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic3.html#999966">10.5.2 Division Without DIV or IDIV</a>
  </dd><dd> <a name="280852"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic3.html#999977">10.5.3 Implementing Modulo-N Counters with AND</a>
  </dd><dd> <a name="280854"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic3.html#998197">10.5.4 Careless Use of Machine Idioms</a>
</dd></dl>
<h2>
  <a name="280856"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic3.html#1003091">10.6 The HLA (Pseudo) Random Number Unit</a></h2>
<h2>
  <a name="280858"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntegerArithmetic3.html#1003066">10.7 Putting It All Together</a></h2>
<h2>
  <a name="280860"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetic.html">11.1 Chapter Overview</a></h2>
<h2>
  <a name="280862"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetic.html#999987">11.2 Floating Point Arithmetic</a></h2>
<dl>
  <dd> <a name="280864"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetic.html#999994">11.2.1 FPU Registers</a>
  <dl>
    <dd> <a name="280866"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetic.html#999996">11.2.1.1 FPU Data Registers</a>
    </dd><dd> <a name="280868"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetic.html#1000010">11.2.1.2 The FPU Control Register</a>
    </dd><dd> <a name="280870"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetic.html#1000117">11.2.1.3 The FPU Status Register</a>
  </dd></dl>
  </dd><dd> <a name="280872"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetic.html#1000504">11.2.2 FPU Data Types</a>
  </dd><dd> <a name="280874"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1013284">11.2.3 The FPU Instruction Set</a>
  </dd><dd> <a name="280876"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000540">11.2.4 FPU Data Movement Instructions</a>
  <dl>
    <dd> <a name="280878"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000543">11.2.4.1 The FLD Instruction</a>
    </dd><dd> <a name="280880"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000560">11.2.4.2 The FST and FSTP Instructions</a>
    </dd><dd> <a name="280882"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000578">11.2.4.3 The FXCH Instruction</a>
  </dd></dl>
  </dd><dd> <a name="280884"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000587">11.2.5 Conversions</a>
  <dl>
    <dd> <a name="280886"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000590">11.2.5.1 The FILD Instruction</a>
    </dd><dd> <a name="280888"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000597">11.2.5.2 The FIST and FISTP Instructions</a>
    </dd><dd> <a name="280890"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000626">11.2.5.3 The FBLD and FBSTP Instructions</a>
  </dd></dl>
  </dd><dd> <a name="280892"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000642">11.2.6 Arithmetic Instructions</a>
  <dl>
    <dd> <a name="280894"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000646">11.2.6.1 The FADD and FADDP Instructions</a>
    </dd><dd> <a name="280896"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000664">11.2.6.2 The FSUB, FSUBP, FSUBR, and FSUBRP Instructions</a>
    </dd><dd> <a name="280898"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000691">11.2.6.3 The FMUL and FMULP Instructions</a>
    </dd><dd> <a name="280900"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000710">11.2.6.4 The FDIV, FDIVP, FDIVR, and FDIVRP Instructions</a>
    </dd><dd> <a name="280902"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000745">11.2.6.5 The FSQRT Instruction</a>
    </dd><dd> <a name="280904"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000766">11.2.6.6 The FPREM and FPREM1 Instructions</a>
    </dd><dd> <a name="280906"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000788">11.2.6.7 The FRNDINT Instruction</a>
    </dd><dd> <a name="280908"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000794">11.2.6.8 The FABS Instruction</a>
    </dd><dd> <a name="280910"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000808">11.2.6.9 The FCHS Instruction</a>
  </dd></dl>
  </dd><dd> <a name="280912"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000819">11.2.7 Comparison Instructions</a>
  <dl>
    <dd> <a name="280914"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000829">11.2.7.1 The FCOM, FCOMP, and FCOMPP Instructions</a>
    </dd><dd> <a name="280916"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000862">11.2.7.2 The FTST Instruction</a>
  </dd></dl>
  </dd><dd> <a name="280918"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000876">11.2.8 Constant Instructions</a>
  </dd><dd> <a name="280920"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000886">11.2.9 Transcendental Instructions</a>
  <dl>
    <dd> <a name="280922"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000891">11.2.9.1 The F2XM1 Instruction</a>
    </dd><dd> <a name="280924"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000909">11.2.9.2 The FSIN, FCOS, and FSINCOS Instructions</a>
    </dd><dd> <a name="280926"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000916">11.2.9.3 The FPTAN Instruction</a>
    </dd><dd> <a name="280928"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000922">11.2.9.4 The FPATAN Instruction</a>
    </dd><dd> <a name="280930"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000927">11.2.9.5 The FYL2X Instruction</a>
    </dd><dd> <a name="280932"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000934">11.2.9.6 The FYL2XP1 Instruction</a>
  </dd></dl>
  </dd><dd> <a name="280934"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000942">11.2.10 Miscellaneous instructions</a>
  <dl>
    <dd> <a name="280936"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000946">11.2.10.1 The FINIT and FNINIT Instructions</a>
    </dd><dd> <a name="280938"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000962">11.2.10.2 The FLDCW and FSTCW Instructions</a>
    </dd><dd> <a name="280940"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000976">11.2.10.3 The FCLEX and FNCLEX Instructions</a>
    </dd><dd> <a name="280942"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1000988">11.2.10.4 The FSTSW and FNSTSW Instructions</a>
  </dd></dl>
  </dd><dd> <a name="280944"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica2.html#1001007">11.2.11 Integer Operations</a>
</dd></dl>
<h2>
  <a name="280946"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica3.html#1013285">11.3 Converting Floating Point Expressions to Assembly Language</a></h2>
<dl>
  <dd> <a name="280948"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica3.html#1001073">11.3.1 Converting Arithmetic Expressions to Postfix Notation</a>
  </dd><dd> <a name="280950"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica3.html#1001126">11.3.2 Converting Postfix Notation to Assembly Language</a>
  </dd><dd> <a name="280952"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica3.html#1001174">11.3.3 Mixed Integer and Floating Point Arithmetic</a>
</dd></dl>
<h2>
  <a name="280954"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica4.html#1001196">11.4 HLA Standard Library Support for Floating Point Arithmetic</a></h2>
<dl>
  <dd> <a name="280956"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica4.html#1001204">11.4.1 The stdin.getf and fileio.getf Functions</a>
  </dd><dd> <a name="280958"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica4.html#1001209">11.4.2 Trigonometric Functions in the HLA Math Library</a>
  </dd><dd> <a name="280960"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica4.html#1001236">11.4.3 Exponential and Logarithmic Functions in the HLA Math Library</a>
</dd></dl>
<h2>
  <a name="280962"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica5.html#998197">11.5 Sample Program</a></h2>
<h2>
  <a name="280964"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/RealArithmetica5.html#1003085">11.6 Putting It All Together</a></h2>
<h2>
  <a name="280966"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TableLookups.html">12.1 Chapter Overview</a></h2>
<h2>
  <a name="280968"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TableLookups.html#1001270">12.2 Tables</a></h2>
<dl>
  <dd> <a name="280970"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TableLookups.html#1001275">12.2.1 Function Computation via Table Look-up</a>
  </dd><dd> <a name="280972"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TableLookups.html#1001377">12.2.2 Domain Conditioning</a>
  </dd><dd> <a name="280974"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TableLookups.html#1001410">12.2.3 Generating Tables</a>
</dd></dl>
<h2>
  <a name="280976"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TableLookups.html#998197">12.3 High Performance Implementation of cs.rangeChar</a></h2>
<h2>
  <a name="280978"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html">1.1 Chapter Overview</a></h2>
<h2>
  <a name="280980"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#998267">1.2 Conjunction, Disjunction, and Negation in Boolean Expressions</a></h2>
<h2>
  <a name="280982"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#1002647">1.3 TRY..ENDTRY</a></h2>
<dl>
  <dd> <a name="280984"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#998303">1.3.1 Nesting TRY..ENDTRY Statements</a>
  </dd><dd> <a name="280986"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#998406">1.3.2 The UNPROTECTED Clause in a TRY..ENDTRY Statement</a>
  </dd><dd> <a name="280988"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#998521">1.3.3 The ANYEXCEPTION Clause in a TRY..ENDTRY Statement</a>
  </dd><dd> <a name="280990"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#998526">1.3.4 Raising User-Defined Exceptions</a>
  </dd><dd> <a name="280992"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#998588">1.3.5 Reraising Exceptions in a TRY..ENDTRY Statement</a>
  </dd><dd> <a name="280994"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#998592">1.3.6 A List of the Predefined HLA Exceptions</a>
  </dd><dd> <a name="280996"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#998596">1.3.7 How to Handle Exceptions in Your Programs</a>
  </dd><dd> <a name="280998"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructures.html#998660">1.3.8 Registers and the TRY..ENDTRY Statement</a>
</dd></dl>
<h2>
  <a name="281000"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructuresa2.html#1006201">1.4 BEGIN..EXIT..EXITIF..END</a></h2>
<h2>
  <a name="281002"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructuresa2.html#998882">1.5 CONTINUE..CONTINUEIF</a></h2>
<h2>
  <a name="281004"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructuresa3.html#998908">1.6 SWITCH..CASE..DEFAULT..ENDSWITCH</a></h2>
<h2>
  <a name="281006"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedCtrlStructuresa3.html#998197">1.7 Putting It All Together</a></h2>
<h2>
  <a name="281008"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructs.html">2.1 Chapter Overview</a></h2>
<h2>
  <a name="281010"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructs.html#998931">2.2 Low Level Control Structures</a></h2>
<h2>
  <a name="281012"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructs.html#998935">2.3 Statement Labels</a></h2>
<h2>
  <a name="281014"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructs.html#998996">2.4 Unconditional Transfer of Control (JMP)</a></h2>
<h2>
  <a name="281016"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructs.html#999101">2.5 The Conditional Jump Instructions</a></h2>
<h2>
  <a name="281018"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructs.html#999571">2.6 "Medium-Level" Control Structures: JT and JF</a></h2>
<h2>
  <a name="281020"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa2.html#1004579">2.7 Implementing Common Control Structures in Assembly Language</a></h2>
<h2>
  <a name="281022"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa2.html#999582">2.8 Introduction to Decisions</a></h2>
<dl>
  <dd> <a name="281024"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa2.html#999642">2.8.1 IF..THEN..ELSE Sequences</a>
  </dd><dd> <a name="281026"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa2.html#999781">2.8.2 Translating HLA IF Statements into Pure Assembly Language</a>
  </dd><dd> <a name="281028"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa2.html#1000014">2.8.3 Implementing Complex IF Statements Using Complete Boolean Evaluation</a>
  </dd><dd> <a name="281030"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa2.html#1000046">2.8.4 Short Circuit Boolean Evaluation</a>
  </dd><dd> <a name="281032"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa2.html#1000096">2.8.5 Short Circuit vs. Complete Boolean Evaluation</a>
  </dd><dd> <a name="281034"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa2.html#1000168">2.8.6 Efficient Implementation of IF Statements in Assembly Language</a>
  </dd><dd> <a name="281036"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa2.html#1000309">2.8.7 SWITCH/CASE Statements</a>
</dd></dl>
<h2>
  <a name="281038"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa3.html#1004580">2.9 State Machines and Indirect Jumps</a></h2>
<h2>
  <a name="281040"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa3.html#1000799">2.10 Spaghetti Code</a></h2>
<h2>
  <a name="281042"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa4.html#1004581">2.11 Loops</a></h2>
<dl>
  <dd> <a name="281044"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa4.html#1000819">2.11.1 While Loops</a>
  </dd><dd> <a name="281046"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa4.html#1000869">2.11.2 Repeat..Until Loops</a>
  </dd><dd> <a name="281048"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa4.html#1000915">2.11.3 FOREVER..ENDFOR Loops</a>
  </dd><dd> <a name="281050"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa4.html#1000945">2.11.4 FOR Loops</a>
  </dd><dd> <a name="281052"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa4.html#1000997">2.11.5 The BREAK and CONTINUE Statements</a>
  </dd><dd> <a name="281054"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa4.html#1001145">2.11.6 Register Usage and Loops</a>
</dd></dl>
<h2>
  <a name="281056"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa5.html#1004582">2.12 Performance Improvements</a></h2>
<dl>
  <dd> <a name="281058"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa5.html#1001192">2.12.1 Moving the Termination Condition to the End of a Loop</a>
  </dd><dd> <a name="281060"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa5.html#1001281">2.12.2 Executing the Loop Backwards</a>
  </dd><dd> <a name="281062"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa5.html#1001317">2.12.3 Loop Invariant Computations</a>
  </dd><dd> <a name="281064"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa5.html#1001363">2.12.4 Unraveling Loops</a>
  </dd><dd> <a name="281066"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa5.html#1001387">2.12.5 Induction Variables</a>
</dd></dl>
<h2>
  <a name="281068"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa6.html#1004583">2.13 Hybrid Control Structures in HLA</a></h2>
<h2>
  <a name="281070"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/LowLevelControlStructsa6.html#998197">2.14 Putting It All Together</a></h2>
<h2>
  <a name="281072"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProcedures.html">3.1 Chapter Overview</a></h2>
<h2>
  <a name="281074"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProcedures.html#998262">3.2 Procedures and the CALL Instruction</a></h2>
<h2>
  <a name="281076"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProcedures.html#998341">3.3 Procedures and the Stack</a></h2>
<h2>
  <a name="281078"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa2.html#1004777">3.4 Activation Records</a></h2>
<h2>
  <a name="281080"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa2.html#998487">3.5 The Standard Entry Sequence</a></h2>
<h2>
  <a name="281082"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa2.html#998519">3.6 The Standard Exit Sequence</a></h2>
<h2>
  <a name="281084"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa2.html#998543">3.7 HLA Local Variables</a></h2>
<h2>
  <a name="281086"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#998595">3.8 Parameters</a></h2>
<dl>
  <dd> <a name="281088"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#998603">3.8.1 Pass by Value</a>
  </dd><dd> <a name="281090"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#998610">3.8.2 Pass by Reference</a>
  </dd><dd> <a name="281092"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#998645">3.8.3 Passing Parameters in Registers</a>
  </dd><dd> <a name="281094"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#998689">3.8.4 Passing Parameters in the Code Stream</a>
  </dd><dd> <a name="281096"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#998787">3.8.5 Passing Parameters on the Stack</a>
  <dl>
    <dd> <a name="281098"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#998876">3.8.5.1 Accessing Value Parameters on the Stack</a>
    </dd><dd> <a name="281100"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#998906">3.8.5.2 Passing Value Parameters on the Stack</a>
    </dd><dd> <a name="281102"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#999053">3.8.5.3 Accessing Reference Parameters on the Stack</a>
    </dd><dd> <a name="281104"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#999181">3.8.5.4 Passing Reference Parameters on the Stack</a>
    </dd><dd> <a name="281106"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#999278">3.8.5.5 Passing Formal Parameters as Actual Parameters</a>
    </dd><dd> <a name="281108"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#999335">3.8.5.6 HLA Hybrid Parameter Passing Facilities</a>
    </dd><dd> <a name="281110"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa3.html#999388">3.8.5.7 Mixing Register and Stack Based Parameters</a>
  </dd></dl>
</dd></dl>
<h2>
  <a name="281112"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa4.html#1004782">3.9 Procedure Pointers</a></h2>
<h2>
  <a name="281114"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa4.html#999481">3.10 Procedural Parameters</a></h2>
<h2>
  <a name="281116"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa4.html#999498">3.11 Untyped Reference Parameters</a></h2>
<h2>
  <a name="281118"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa5.html#1004783">3.12 Iterators and the FOREACH Loop</a></h2>
<h2>
  <a name="281120"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa6.html#1004784">3.13 Sample Programs</a></h2>
<dl>
  <dd> <a name="281122"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa6.html#1001074">3.13.1 Generating the Fibonacci Sequence Using an Iterator</a>
  </dd><dd> <a name="281124"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa6.html#1001163">3.13.2 Outer Product Computation with Procedural Parameters</a>
</dd></dl>
<h2>
  <a name="281126"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/IntermediateProceduresa6.html#1001415">3.14 Putting It All Together</a></h2>
<h2>
  <a name="281128"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetic.html">4.1 Chapter Overview</a></h2>
<h2>
  <a name="281130"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetic.html#998265">4.2 Multiprecision Operations</a></h2>
<dl>
  <dd> <a name="281132"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetic.html#998271">4.2.1 Multiprecision Addition Operations</a>
  </dd><dd> <a name="281134"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetic.html#998360">4.2.2 Multiprecision Subtraction Operations</a>
  </dd><dd> <a name="281136"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetic.html#998408">4.2.3 Extended Precision Comparisons</a>
  </dd><dd> <a name="281138"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica2.html#1007619">4.2.4 Extended Precision Multiplication</a>
  </dd><dd> <a name="281140"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica2.html#998729">4.2.5 Extended Precision Division</a>
  </dd><dd> <a name="281142"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica3.html#1007620">4.2.6 Extended Precision NEG Operations</a>
  </dd><dd> <a name="281144"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica3.html#999140">4.2.7 Extended Precision AND Operations</a>
  </dd><dd> <a name="281146"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica3.html#999152">4.2.8 Extended Precision OR Operations</a>
  </dd><dd> <a name="281148"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica3.html#999166">4.2.9 Extended Precision XOR Operations</a>
  </dd><dd> <a name="281150"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica3.html#999177">4.2.10 Extended Precision NOT Operations</a>
  </dd><dd> <a name="281152"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica3.html#999184">4.2.11 Extended Precision Shift Operations</a>
  </dd><dd> <a name="281154"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica3.html#999280">4.2.12 Extended Precision Rotate Operations</a>
  </dd><dd> <a name="281156"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica4.html#1007621">4.2.13 Extended Precision I/O</a>
  <dl>
    <dd> <a name="281158"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica4.html#999309">4.2.13.1 Extended Precision Hexadecimal Output</a>
    </dd><dd> <a name="281160"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica4.html#999332">4.2.13.2 Extended Precision Unsigned Decimal Output</a>
    </dd><dd> <a name="281162"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica4.html#999497">4.2.13.3 Extended Precision Signed Decimal Output</a>
    </dd><dd> <a name="281164"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica4.html#999535">4.2.13.4 Extended Precision Formatted I/O</a>
    </dd><dd> <a name="281166"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica4.html#999539">4.2.13.5 Extended Precision Input Routines</a>
    </dd><dd> <a name="281168"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica4.html#999641">4.2.13.6 Extended Precision Hexadecimal Input</a>
    </dd><dd> <a name="281170"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica4.html#999853">4.2.13.7 Extended Precision Unsigned Decimal Input</a>
    </dd><dd> <a name="281172"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica4.html#1000078">4.2.13.8 Extended Precision Signed Decimal Input</a>
  </dd></dl>
</dd></dl>
<h2>
  <a name="281174"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica5.html#1007612">4.3 Operating on Different Sized Operands</a></h2>
<h2>
  <a name="281176"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica6.html">4.4 Decimal Arithmetic</a></h2>
<dl>
  <dd> <a name="281178"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica6.html#1000228">4.4.1 Literal BCD Constants</a>
  </dd><dd> <a name="281180"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica6.html#1000233">4.4.2 The 80x86 DAA and DAS Instructions</a>
  </dd><dd> <a name="281182"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica6.html#1000281">4.4.3 The 80x86 AAA, AAS, AAM, and AAD Instructions</a>
  </dd><dd> <a name="281184"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica6.html#1000296">4.4.4 Packed Decimal Arithmetic Using the FPU</a>
</dd></dl>
<h2>
  <a name="281186"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica7.html#1007618">4.5 Sample Program</a></h2>
<h2>
  <a name="281188"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/AdvancedArithmetica7.html#998197">4.6 Putting It All Together</a></h2>
<h2>
  <a name="281190"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulation.html">5.1 Chapter Overview</a></h2>
<h2>
  <a name="281192"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulation.html#1002653">5.2 What is Bit Data, Anyway?</a></h2>
<h2>
  <a name="281194"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulation.html#1002699">5.3 Instructions That Manipulate Bits</a></h2>
<h2>
  <a name="281196"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulation.html#1003096">5.4 The Carry Flag as a Bit Accumulator</a></h2>
<h2>
  <a name="281198"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa2.html#1005792">5.5 Packing and Unpacking Bit Strings</a></h2>
<h2>
  <a name="281200"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa2.html#1002708">5.6 Coalescing Bit Sets and Distributing Bit Strings</a></h2>
<h2>
  <a name="281202"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa2.html#1003252">5.7 Packed Arrays of Bit Strings</a></h2>
<h2>
  <a name="281204"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa2.html#1002659">5.8 Searching for a Bit</a></h2>
<h2>
  <a name="281206"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa2.html#1002667">5.9 Counting Bits</a></h2>
<h2>
  <a name="281208"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa2.html#1002673">5.10 Reversing a Bit String</a></h2>
<h2>
  <a name="281210"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa2.html#1004431">5.11 Merging Bit Strings</a></h2>
<h2>
  <a name="281212"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa2.html#1004453">5.12 Extracting Bit Strings</a></h2>
<h2>
  <a name="281214"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa2.html#1002682">5.13 Searching for a Bit Pattern</a></h2>
<h2>
  <a name="281216"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa3.html#1005793">5.14 The HLA Standard Library Bits Module</a></h2>
<h2>
  <a name="281218"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/BitManipulationa3.html#1002679">5.15 Putting It All Together</a></h2>
<h2>
  <a name="281220"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html">6.1 Chapter Overview</a></h2>
<h2>
  <a name="281222"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#998860">6.2 The 80x86 String Instructions</a></h2>
<dl>
  <dd> <a name="281224"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#998872">6.2.1 How the String Instructions Operate</a>
  </dd><dd> <a name="281226"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#998888">6.2.2 The REP/REPE/REPZ and REPNZ/REPNE Prefixes</a>
  </dd><dd> <a name="281228"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#998925">6.2.3 The Direction Flag</a>
  </dd><dd> <a name="281230"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#998982">6.2.4 The MOVS Instruction</a>
  </dd><dd> <a name="281232"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#999086">6.2.5 The CMPS Instruction</a>
  </dd><dd> <a name="281234"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#999151">6.2.6 The SCAS Instruction</a>
  </dd><dd> <a name="281236"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#999169">6.2.7 The STOS Instruction</a>
  </dd><dd> <a name="281238"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#999192">6.2.8 The LODS Instruction</a>
  </dd><dd> <a name="281240"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#999209">6.2.9 Building Complex String Functions from LODS and STOS</a>
</dd></dl>
<h2>
  <a name="281242"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/StringInstructions.html#998840">6.3 Putting It All Together</a></h2>
<h2>
  <a name="281244"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguage.html">7.1 Chapter Overview</a></h2>
<h2>
  <a name="281246"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguage.html#998261">7.2 Introduction to the Compile-Time Language (CTL)</a></h2>
<h2>
  <a name="281248"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguage.html#998289">7.3 The #PRINT and #ERROR Statements</a></h2>
<h2>
  <a name="281250"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguage.html#998334">7.4 Compile-Time Constants and Variables</a></h2>
<h2>
  <a name="281252"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguage.html#998355">7.5 Compile-Time Expressions and Operators</a></h2>
<h2>
  <a name="281254"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#1006163">7.6 Compile-Time Functions</a></h2>
<dl>
  <dd> <a name="281256"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998787">7.6.1 Type Conversion Compile-time Functions</a>
  </dd><dd> <a name="281258"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998805">7.6.2 Numeric Compile-Time Functions</a>
  </dd><dd> <a name="281260"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998816">7.6.3 Character Classification Compile-Time Functions</a>
  </dd><dd> <a name="281262"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998824">7.6.4 Compile-Time String Functions</a>
  </dd><dd> <a name="281264"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998839">7.6.5 Compile-Time Pattern Matching Functions</a>
  </dd><dd> <a name="281266"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998866">7.6.6 Compile-Time Symbol Information</a>
  </dd><dd> <a name="281268"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998889">7.6.7 Compile-Time Expression Classification Functions</a>
  </dd><dd> <a name="281270"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998898">7.6.8 Miscellaneous Compile-Time Functions</a>
  </dd><dd> <a name="281272"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998912">7.6.9 Predefined Compile-Time Variables</a>
  </dd><dd> <a name="281274"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea2.html#998927">7.6.10 Compile-Time Type Conversions of TEXT Objects</a>
</dd></dl>
<h2>
  <a name="281276"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea3.html#998964">7.7 Conditional Compilation (Compile-Time Decisions)</a></h2>
<h2>
  <a name="281278"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea3.html#999072">7.8 Repetitive Compilation (Compile-Time Loops)</a></h2>
<h2>
  <a name="281280"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/HLACompileTimeLanguagea3.html#998197">7.9 Putting It All Together</a></h2>
<h2>
  <a name="281282"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html">8.1 Chapter Overview</a></h2>
<h2>
  <a name="281284"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999147">8.2 Macros (Compile-Time Procedures)</a></h2>
<dl>
  <dd> <a name="281286"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999150">8.2.1 Standard Macros</a>
  </dd><dd> <a name="281288"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999206">8.2.2 Macro Parameters</a>
  <dl>
    <dd> <a name="281290"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999222">8.2.2.1 Standard Macro Parameter Expansion</a>
    </dd><dd> <a name="281292"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999333">8.2.2.2 Macros with a Variable Number of Parameters</a>
    </dd><dd> <a name="281294"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999411">8.2.2.3 Required Versus Optional Macro Parameters</a>
    </dd><dd> <a name="281296"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999432">8.2.2.4 The "#(" and ")#" Macro Parameter Brackets</a>
    </dd><dd> <a name="281298"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999461">8.2.2.5 Eager vs. Deferred Macro Parameter Evaluation</a>
  </dd></dl>
  </dd><dd> <a name="281300"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999614">8.2.3 Local Symbols in a Macro</a>
  </dd><dd> <a name="281302"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999773">8.2.4 Macros as Compile-Time Procedures</a>
  </dd><dd> <a name="281304"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#999785">8.2.5 Multi-part (Context-Free) Macros</a>
  </dd><dd> <a name="281306"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros.html#1000000">8.2.6 Simulating Function Overloading with Macros</a>
</dd></dl>
<h2>
  <a name="281308"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros2.html#1009074">8.3 Writing Compile-Time "Programs"</a></h2>
<dl>
  <dd> <a name="281310"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros2.html#1000254">8.3.1 Constructing Data Tables at Compile Time</a>
  </dd><dd> <a name="281312"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros2.html#1000458">8.3.2 Unrolling Loops</a>
</dd></dl>
<h2>
  <a name="281314"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros2.html#1004715">8.4 Using Macros in Different Source Files</a></h2>
<h2>
  <a name="281316"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/Macros2.html#998197">8.5 Putting It All Together</a></h2>
<h2>
  <a name="281318"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs.html">9.1 Chapter Overview</a></h2>
<h2>
  <a name="281320"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs.html#1000514">9.2 Introduction to DSELs in HLA</a></h2>
<dl>
  <dd> <a name="281322"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs.html#1000519">9.2.1 Implementing the Standard HLA Control Structures</a>
  <dl>
    <dd> <a name="281324"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs.html#1000523">9.2.1.1 The FOREVER Loop</a>
    </dd><dd> <a name="281326"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs.html#1000654">9.2.1.2 The WHILE Loop</a>
    </dd><dd> <a name="281328"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs.html#1000784">9.2.1.3 The IF Statement</a>
  </dd></dl>
  </dd><dd> <a name="281330"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs2.html#1016090">9.2.2 The HLA SWITCH/CASE Statement</a>
  </dd><dd> <a name="281332"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs3.html#1016095">9.2.3 A Modified WHILE Loop</a>
  </dd><dd> <a name="281334"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs3.html#1001893">9.2.4 A Modified IF..ELSE..ENDIF Statement</a>
</dd></dl>
<h2>
  <a name="281336"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs4.html#1016089">9.3 Sample Program: A Simple Expression Compiler</a></h2>
<h2>
  <a name="281338"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/DSLs4.html#998197">9.4 Putting It All Together</a></h2>
<h2>
  <a name="281340"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjects.html">10.1 Chapter Overview</a></h2>
<h2>
  <a name="281342"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjects.html#998263">10.2 General Principles</a></h2>
<h2>
  <a name="281344"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjects.html#998285">10.3 Classes in HLA</a></h2>
<h2>
  <a name="281346"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjects.html#998346">10.4 Objects</a></h2>
<h2>
  <a name="281348"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjects.html#998375">10.5 Inheritance</a></h2>
<h2>
  <a name="281350"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjects.html#998403">10.6 Overriding</a></h2>
<h2>
  <a name="281352"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjects.html#998446">10.7 Virtual Methods vs. Static Procedures</a></h2>
<h2>
  <a name="281354"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa2.html#1010624">10.8 Writing Class Methods, Iterators, and Procedures</a></h2>
<h2>
  <a name="281356"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa2.html#998490">10.9 Object Implementation</a></h2>
<dl>
  <dd> <a name="281358"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa2.html#998492">10.9.1 Virtual Method Tables</a>
  </dd><dd> <a name="281360"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa2.html#998494">10.9.2 Object Representation with Inheritance</a>
</dd></dl>
<h2>
  <a name="281362"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa3.html#1010625">10.10 Constructors and Object Initialization</a></h2>
<dl>
  <dd> <a name="281364"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa3.html#999424">10.10.1 Dynamic Object Allocation Within the Constructor</a>
  </dd><dd> <a name="281366"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa3.html#999413">10.10.2 Constructors and Inheritance</a>
  </dd><dd> <a name="281368"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa3.html#999435">10.10.3 Constructor Parameters and Procedure Overloading</a>
</dd></dl>
<h2>
  <a name="281370"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa4.html#1010626">10.11 Destructors</a></h2>
<h2>
  <a name="281372"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa4.html#998498">10.12 HLA's "_initialize_" and "_finalize_" Strings</a></h2>
<h2>
  <a name="281374"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa4.html#999764">10.13 Abstract Methods</a></h2>
<h2>
  <a name="281376"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa5.html#1010627">10.14 Run-time Type Information (RTTI)</a></h2>
<h2>
  <a name="281378"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa5.html#1000428">10.15 Calling Base Class Methods</a></h2>
<h2>
  <a name="281380"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/ClassesAndObjectsa5.html#1000463">10.16 Putting It All Together</a></h2>
<h2>
  <a name="281382"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSet.html">11.1 Chapter Overview</a></h2>
<h2>
  <a name="281384"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSet.html#1006134">11.2 Determining if a CPU Supports the MMX Instruction Set</a></h2>
<h2>
  <a name="281386"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSet.html#1006233">11.3 The MMX Programming Environment</a></h2>
<dl>
  <dd> <a name="281388"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSet.html#1005042">11.3.1 The MMX Registers</a>
  </dd><dd> <a name="281390"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSet.html#1005053">11.3.2 The MMX Data Types</a>
</dd></dl>
<h2>
  <a name="281392"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSet.html#1005111">11.4 The Purpose of the MMX Instruction Set</a></h2>
<h2>
  <a name="281394"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSet.html#1005169">11.5 Saturation Arithmetic and Wraparound Mode</a></h2>
<h2>
  <a name="281396"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSet.html#1005195">11.6 MMX Instruction Operands</a></h2>
<h2>
  <a name="281398"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta2.html#1011009">11.7 MMX Technology Instructions</a></h2>
<dl>
  <dd> <a name="281400"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta2.html#1004344">11.7.1 MMX Data Transfer Instructions</a>
  </dd><dd> <a name="281402"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta2.html#1004347">11.7.2 MMX Conversion Instructions</a>
  </dd><dd> <a name="281404"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta2.html#1004358">11.7.3 MMX Packed Arithmetic Instructions</a>
  </dd><dd> <a name="281406"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta2.html#1006533">11.7.4 MMX Logic Instructions</a>
  </dd><dd> <a name="281408"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta2.html#1004376">11.7.5 MMX Comparison Instructions</a>
  </dd><dd> <a name="281410"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta2.html#1004388">11.7.6 MMX Shift Instructions</a>
</dd></dl>
<h2>
  <a name="281412"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta2.html#1004800">11.8 The EMMS Instruction</a></h2>
<h2>
  <a name="281414"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta3.html#1011010">11.9 The MMX Programming Paradigm</a></h2>
<h2>
  <a name="281416"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/TheMMXInstructionSeta3.html#1007023">11.10 Putting It All Together</a></h2>
<h2>
  <a name="281418"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming.html">12.1 Chapter Overview</a></h2>
<h2>
  <a name="281420"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming.html#1007902">12.2 Mixing HLA and MASM/Gas Code in the Same Program</a></h2>
<dl>
  <dd> <a name="281422"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming.html#1008009">12.2.1 In-Line (MASM/Gas) Assembly Code in Your HLA Programs</a>
  </dd><dd> <a name="281424"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming.html#1008008">12.2.2 Linking MASM/Gas-Assembled Modules with HLA Modules</a>
</dd></dl>
<h2>
  <a name="281426"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1038288">12.3 Programming in Delphi/Kylix and HLA</a></h2>
<dl>
  <dd> <a name="281428"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1008248">12.3.1 Linking HLA Modules With Delphi Programs</a>
  </dd><dd> <a name="281430"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1008250">12.3.2 Register Preservation</a>
  </dd><dd> <a name="281432"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1008423">12.3.3 Function Results</a>
  </dd><dd> <a name="281434"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1008420">12.3.4 Calling Conventions</a>
  </dd><dd> <a name="281436"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1009175">12.3.5 Pass by Value, Reference, CONST, and OUT in Delphi</a>
  </dd><dd> <a name="281438"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1009207">12.3.6 Scalar Data Type Correspondence Between Delphi and HLA</a>
  </dd><dd> <a name="281440"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1009787">12.3.7 Passing String Data Between Delphi and HLA Code</a>
  </dd><dd> <a name="281442"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1009854">12.3.8 Passing Record Data Between HLA and Delphi</a>
  </dd><dd> <a name="281444"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1010136">12.3.9 Passing Set Data Between Delphi and HLA</a>
  </dd><dd> <a name="281446"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1010158">12.3.10 Passing Array Data Between HLA and Delphi</a>
  </dd><dd> <a name="281448"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming2.html#1010914">12.3.11 Referencing Delphi Objects from HLA Code</a>
</dd></dl>
<h2>
  <a name="281450"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1030674">12.4 Programming in C/C++ and HLA</a></h2>
<dl>
  <dd> <a name="281452"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1014554">12.4.1 Linking HLA Modules With C/C++ Programs</a>
  </dd><dd> <a name="281454"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1011249">12.4.2 Register Preservation</a>
  </dd><dd> <a name="281456"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1011255">12.4.3 Function Results</a>
  </dd><dd> <a name="281458"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1011281">12.4.4 Calling Conventions</a>
  </dd><dd> <a name="281460"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1011285">12.4.5 Pass by Value and Reference in C/C++</a>
  </dd><dd> <a name="281462"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1011297">12.4.6 Scalar Data Type Correspondence Between C/C++ and HLA</a>
  </dd><dd> <a name="281464"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1011756">12.4.7 Passing String Data Between C/C++ and HLA Code</a>
  </dd><dd> <a name="281466"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1011783">12.4.8 Passing Record/Structure Data Between HLA and C/C++</a>
  </dd><dd> <a name="281468"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1011972">12.4.9 Passing Array Data Between HLA and C/C++</a>
</dd></dl>
<h2>
  <a name="281470"> </a><a href="https://www.plantation-productions.com/Webster/www.artofasm.com/Linux/HTML/MixedLanguageProgramming3.html#1007023">12.5 Putting It All Together</a></h2>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Vibe Coding is not an excuse for low-quality work (233 pts)]]></title>
            <link>https://addyo.substack.com/p/vibe-coding-is-not-an-excuse-for</link>
            <guid>43739037</guid>
            <pubDate>Sat, 19 Apr 2025 20:00:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://addyo.substack.com/p/vibe-coding-is-not-an-excuse-for">https://addyo.substack.com/p/vibe-coding-is-not-an-excuse-for</a>, See on <a href="https://news.ycombinator.com/item?id=43739037">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><strong>“Move faster and break even more things.”</strong><span> </span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png" width="2160" height="1022" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1022,&quot;width&quot;:2160,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:215932,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://addyo.substack.com/i/161584260?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff1e97c40-53bb-47f7-b305-dea867d9a293_2160x2160.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F29688e26-bc5a-4f72-9fea-f423288af3d0_2160x1022.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>That twist on Silicon Valley’s old mantra echoes through recent engineering circles as “vibe coding” enters the chat. </span><strong>Yes, AI-assisted development is transforming how we build software, but it’s not a free pass to abandon rigor, review, or craftsmanship.</strong><span> "Vibe coding" is not an excuse for low-quality work.</span></p><p><span>Let’s acknowledge the good: AI-assisted coding </span><em>can</em><span> be a game-changer. It </span><strong>lowers barriers</strong><span> for new programmers and non-programmers, allowing them to produce working software by simply describing what they need. This unblocks creativity – more people can solve their own problems with custom software, part of a trend some call the </span><em><a href="https://addyo.substack.com/p/personal-software-the-unbundling" rel="">unbundling of personal software</a></em><span> (using small AI-built tools instead of one-size-fits-all apps). Even experienced engineers stand to benefit. </span></p><p><span>However, as any seasoned engineer will tell you, </span><strong>speed means nothing if the wheels fall off down the road</strong><span>. And this is where the cracks begin to show – in the gap between the </span><em>vibe</em><span> and the </span><em>reality</em><span> of building maintainable, robust software.</span></p><p><span>For all the hype, vibe coding has earned plenty of skepticism from veteran developers. The core critique: </span><em>just because an AI can spit out code quickly doesn’t mean that code is any good</em><span>. In fact, it can be downright dangerous to accept AI-generated output at face value. The joking complaint that </span><em>“two engineers can now create the tech debt of fifty”</em><span> contains a grain of truth. </span><strong>Unchecked AI-generated code can massively amplify technical debt</strong><span>, the hidden problems that make software brittle and costly to maintain.</span></p><p><span>Many early vibe-coded projects look good on the surface (“it works, ship it!”) but hide a minefield of issues: no error handling, poor performance, questionable security practices, and logically brittle code. One might say such projects are built on </span><strong>sand</strong><span>. I’ve used the term </span><strong><span>“</span><a href="https://addyo.substack.com/p/the-70-problem-hard-truths-about" rel="">house of cards code</a><span>”</span></strong><span> – code that “looks complete but collapses under real-world pressure”. If you’ve ever seen a junior developer’s first big feature that </span><em>almost</em><span> works but crumbles with one unexpected input, you get the idea. AI can churn out a lot of code quickly, but volume ≠ quality.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg" width="1456" height="1456" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:343905,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://addyo.substack.com/i/161584260?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35589043-ada7-46f5-8243-b9b4430aa2f2_2050x2050.jpeg 1456w" sizes="100vw"></picture></div></a></figure></div><p><em><span>"AI is like having a very eager junior developer on your team" an idea well illustrated in this illustration by </span></em></p><p><em><span>.</span></em><span> </span></p><p><span>The dangers aren’t purely hypothetical. Consider maintainability: Who will maintain an AI-written module if it’s obscure or overly complex? If even the original developer doesn’t fully understand the AI’s solution, future modifications become nightmares. Security is another huge concern – AI might generate code that </span><em>appears</em><span> to work but has SQL injection flaws or unsafe error handling. Without rigorous review, these can slip into production. There’s also the risk of </span><strong>overfitting to the prompt</strong><span>: an AI will do exactly what you ask, which might not be exactly what you truly need. Human coders often adjust a design as they implement, discovering misassumptions along the way. AI won’t catch those misassumptions unless the human in the loop notices and corrects it.</span></p><p><span>None of this is to say AI can’t write </span><strong>good</strong><span> code – it sometimes does – but rather that </span><strong>context, scrutiny, and expertise are required to discern good from bad</strong><span>. In 2025, we are essentially using a very eager but inexperienced assistant. You wouldn’t let a first-year junior dev architect your entire system unsupervised; similarly you shouldn’t blindly trust an AI’s code without oversight. The hype of “AI magic” needs to meet the reality of software engineering principles.</span></p><p><span>So, how do we strike the balance? The key is </span><strong>not</strong><span> to throw vibe coding out entirely – it </span><em>can</em><span> be incredibly useful – but to integrate it in a disciplined way. Engineers must approach AI assistance as a tool </span><em>with known limitations</em><span>, not a mystical code genie. In practice, that means keeping the human in the loop and maintaining our standards of quality. Let’s explore what that looks like.</span></p><p><span>To use vibe coding effectively, change your mindset: </span><strong>treat the AI like a super-speedy but junior developer on your team</strong><span>. In other words, you – the senior engineer or team lead – are still the one responsible for the outcome. The AI might crank out the first draft of code, but you must review it with a critical eye, refine it, and verify it meets your quality bar.</span></p><p>Experienced developers who successfully incorporate AI follow this pattern intuitively. When an AI assistant suggests code, they don’t just hit “accept” and move on. Instead, they:</p><ul><li><p><strong>Read and understand</strong><span> what the AI wrote, as if a junior dev on their team wrote it.</span></p></li><li><p><strong>Refactor</strong><span> the code into clean, modular parts if the AI’s output is monolithic or messy (which it often is). Senior engineers will break the AI’s blob into “smaller, focused modules” for clarity.</span></p></li><li><p><strong>Add missing edge-case handling</strong><span>. AI often misses corner cases or error conditions, so the human needs to insert those (null checks, input validation, etc.)</span></p></li><li><p><strong>Strengthen types and interfaces</strong><span>. If the AI used loose types or a leaky abstraction, a human can firm that up, turning implicit assumptions into explicit contracts </span></p></li><li><p><strong>Question the architecture</strong><span>. Did the AI choose an inefficient approach? Maybe it brute-forced something that should use a more optimal algorithm, or perhaps it introduced global state where a pure function would suffice. A human should examine these decisions critically.</span></p></li><li><p><strong>Write tests</strong><span> (or at least, manually test the code’s behavior). Treat AI code like any PR from a coworker: it doesn’t go in until it’s tested. If the AI wrote unit tests (some tools do), double-check those tests aren’t superficial.</span></p></li></ul><p><span>By doing this, you inject </span><em>engineering wisdom</em><span> into the AI-generated code. The combination can be powerful – the AI gets you a lot of code quickly, and your oversight ensures it’s solid. In fact, studies and anecdotes suggest senior devs get </span><strong>more value</strong><span> from AI coding tools than juniors. The reason is clear: seniors have the knowledge to steer the AI properly and fix its mistakes. Juniors may be tempted to treat the AI as an infallible authority, which it isn’t. </span></p><p><span>So, a critical rule emerges: </span><strong>Never accept AI-written code into your codebase unreviewed.</strong><span> Treat it like code from a new hire: inspect every line, ensure you </span><em>get it</em><span>. If something doesn’t make sense to you, don’t assume the AI knows better – often it doesn’t. Either refine the prompt to have the AI clarify, or rewrite that part yourself. Consider AI output as a draft that </span><strong>must</strong><span> go through code review (even if that review is just you). On a team, this means if a developer used AI to generate a chunk of code, they should be prepared to explain and defend it in the code review with peers. “It works, trust me” won’t fly – the team needs confidence that the code is understandable and maintainable by humans.</span></p><p><span>Another best practice: </span><strong>keep humans in the driver’s seat of design</strong><span>. Use the AI to implement, not to decide fundamental architectures. For example, you might use vibe coding to quickly create a CRUD REST API based on an existing schema – that’s well-defined work. But you shouldn’t ask the AI to “design a scalable microservice architecture for our product” and then blindly follow it. High-level design and critical decisions should remain human-led, with AI as a helper for the tedious parts. In essence, let the AI handle the </span><em>grunt work</em><span>, not the </span><em>brain work</em><span>. </span></p><p><strong>Communication and documentation</strong><span> also become crucial. If you prompt an AI to generate a non-trivial algorithm or use an unfamiliar library, take the time to document </span><em>why</em><span> that solution was chosen (just as you would if you wrote it yourself after research). Future maintainers – or your future self – shouldn’t be left guessing about the intent behind AI-crafted code. Some teams even log the prompts used to generate important code, effectively documenting the “conversation” that led to the code. This can help when debugging later: you can see the assumptions that were given to the AI.</span></p><p><span>In summary, </span><strong>human oversight isn’t a “nice-to-have” – it’s mandatory</strong><span>. The moment you remove the human from the loop, you’re just rolling dice on your software quality. Until AI can truly replace a senior engineer’s holistic understanding (we’re not there yet), vibe coding must be a partnership: AI accelerates, human validates.</span></p><p><span>Let’s crystallize the discussion into some actionable rules and best practices for teams adopting AI-assisted development. Think of these as the new </span><em>“move fast, but don’t break everything”</em><span> handbook – a set of guardrails to keep </span><strong>quality</strong><span> high when you’re vibing with the code.</span></p><p><strong>Rule 1: Always Review AI-Generated Code</strong><span> – No exceptions. Every block of code that AI produces should be treated as if a junior engineer wrote it. Do a code review either individually or with a peer. This includes code from Copilot, ChatGPT, Cursor, or any AI agent. If you don’t have time to review it, you don’t have time to use it. Blindly merging AI code is asking for trouble.</span></p><p><strong>Rule 2: Establish Coding Standards and Follow Them</strong><span> – AI tools will mimic whatever code they were trained on, which is a mixed bag. Define your team’s style guides, architecture patterns, and best practices, and ensure that any AI-generated code is refactored to comply. For instance, if your rule is “all functions need JSDoc comments and unit tests,” then AI output must get those comments and tests before it’s done. If your project uses a specific architecture (say, layered architecture with service/repository classes), don’t let the AI shove some ad-hoc database calls in UI code – fix it to fit your layers. Consider creating </span><strong>linting or static analysis checks</strong><span> specifically for common AI mistakes (e.g. flagging use of deprecated APIs or overly complex functions). This automates quality control on AI contributions.</span></p><p><strong>Rule 3: Use AI for Acceleration, Not Autopilot</strong><span> – In practice, this means use vibe coding to speed up well-understood tasks, not to do thinking for you. Great uses: generate boilerplate, scaffold a component, translate one language to another, draft a simple algorithm from pseudocode. Risky uses: have the AI design your module from scratch with minimal guidance, or generate code in a domain you don’t understand at all (you won’t know if it’s wrong). If you intend to keep the code, don’t stay in vibe mode – switch into engineering mode and tighten it up.</span></p><p><strong>Rule 4: Test, Test, Test</strong><span> – AI doesn’t magically guarantee correctness. Write tests for all critical paths of AI-written code. If the AI wrote the code, it may even help you write some tests – but don’t rely solely on AI-generated tests, as they might miss edge cases (or could be falsely passing due to the same flawed logic). Do manual testing too, especially for user-facing features: click through the UI, try odd inputs, see how it behaves. Many vibe-coded applications work fine for the “happy path” but fall apart with unexpected input – you want to catch that before your users do. </span></p><p><strong>Rule 5: Iterate and Refine</strong><span> – Don’t accept the first thing the AI gives you if it’s not satisfactory. Vibe coding is an iterative dialogue. If the initial output is clunky or confusing, you can prompt the AI to improve it (“simplify this code,” “split this into smaller functions,” etc.). Or you can take the draft and refactor it yourself. Often, a good approach is using the AI in </span><strong>cycles</strong><span>: prompt for an implementation, identify weaknesses, then either prompt fixes or manually adjust, and repeat. </span></p><p><strong>Rule 6: Know When to Say No</strong><span> – Sometimes, vibe coding just isn’t the right tool. Part of using it responsibly is recognizing scenarios where manual coding or deeper design work is needed. For example, if you’re dealing with a critical security module, you probably want to design it carefully and maybe only use AI to assist with small pieces (if at all). Or if the AI keeps producing a convoluted solution to a simple problem, stop and write it yourself – you might save time in the end. It’s important not to become overly reliant on the AI to solve every problem. </span><strong>Don’t let “AI did it” become an excuse for not understanding your own code.</strong><span> If after a few attempts the AI isn’t producing what you need, take back control and code it the old-fashioned way; you’ll at least have full understanding then.</span></p><p><strong>Rule 7: Document and Share Knowledge</strong><span> – Ensure that any code coming from AI is documented just as thoroughly as hand-written code (if not more). If there were non-obvious decisions or if you suspect others might be confused by what the AI produced, add comments. In team discussions, be open about what was AI-generated and what wasn’t. This helps reviewers pay extra attention to those sections. </span></p><p><span>Following these rules, teams can enjoy the productivity perks of vibe coding while mitigating the worst risks. Think of it as </span><strong>augmenting</strong><span> human developers, not replacing them. The goal is to </span><strong>co-create</strong><span> with AI: let it handle the repetitive drudge work at high speed, while humans handle the creative and critical thinking parts.</span></p><p><span>It’s also important to recognize </span><strong>where vibe coding shines and where it doesn’t</strong><span>. Not every project or task is equally suited to an AI-driven workflow. Here’s a breakdown drawn from industry discussions and early experiences:</span></p><p><strong>👍 Great Use Cases:</strong><span> </span></p><ul><li><p><em>Rapid prototyping</em><span> is perhaps the sweet spot of vibe coding. If you have an idea for a small app or feature, using an AI assistant to throw together a quick prototype or proof-of-concept can be incredibly effective. In such cases, you don’t mind if the code is a bit hacky; you just want to validate the idea. Many engineers have found success in weekend projects using only AI to code – a fun way to test a concept fast. Another good use case is </span><strong>one-off scripts or internal tools</strong><span>: e.g., a script to parse a log file, a small tool to automate a personal task, or an internal dashboard for your team. These are typically low-stakes; if the script breaks, it’s not the end of the world. Here, vibe coding can save time because you don’t need production-grade perfection, just something that works for now.</span></p></li><li><p><span>Vibe coding also works well for </span><strong>learning and exploration</strong><span>. If you’re working in a new language or API, asking an AI to generate examples can accelerate your learning. (Of course, double-check the AI’s output against official docs!) . In exploratory mode, even if the AI’s code isn’t perfect, it gives you material to tinker with and learn from. It’s like having a teaching assistant who can show you attempts, which you then refine.</span></p></li><li><p><span>Additionally, AI code generation can excel at </span><strong>structured, boilerplate-heavy tasks</strong><span>. Need to create 10 similar data classes? Or implement a rote CRUD layer? AI is great at that kind of mechanical repetition, freeing you from the tedium. As long as the pattern is clear, the AI will follow it and save you keystrokes (just verify it followed the pattern correctly).</span></p></li></ul><p><strong>👎 Not-So-Great Use Cases:</strong><span> </span></p><ul><li><p><span>On the flip side, </span><em>enterprise-grade software and complex systems</em><span> are where vibe coding often falls flat. Anything that requires a deep understanding of business logic, heavy concurrency, rigorous security, or compliance is not something to fully trust to AI generation. The AI doesn’t know your business constraints or performance requirements unless you explicitly spell them out (and even then, it may not get it right). For example, a fintech application handling payments or an aerospace control system must meet standards that current AI simply isn’t equipped to guarantee. In these domains, AI can assist in parts, but human expertise and careful QA are paramount for the final product.</span></p></li><li><p><span>Vibe coding also struggles with </span><strong>long-term maintainability</strong><span>. If you’re building a codebase that will live for years and be worked on by many developers, starting it off with a hodge-podge of AI-generated code can be a poor foundation. Without strong guidance, the architecture might be inconsistent. It’s often better to spend extra time up front building a clean framework (with or without AI help) than to patchwork a whole product via successive AI prompts. Many early adopters have observed that the initial time saved by vibe coding can be lost later during code cleanup and refactoring when the project needs to scale or adapt.</span></p></li><li><p><span>Another scenario to be wary of is </span><strong>critical algorithms or optimizations</strong><span>. AI can produce a sorting algorithm or a database query, sure – but if you need it to be highly optimized (say, a custom memory management routine, or an algorithm that must run in sub-linear time), you’re in territory where human ingenuity and deep understanding are still superior. AI might give you something that works on small data, but falls over at scale, and it won’t necessarily warn you about that. A human performance engineer would design and test with those considerations in mind from the start.</span></p></li><li><p><span>Finally, any situation where </span><strong>explainability and clarity</strong><span> are top priorities might not be ideal for vibe coding. Sometimes you need code that other people (or auditors) can easily read and reason about. If the AI comes up with a convoluted approach, it could hinder clarity. Until AI can reliably produce simple and clearly structured code (which it’s not always incentivized to do – sometimes it’s overly verbose or oddly abstract), a human touch is needed to keep things straightforward.</span></p></li></ul><p><span>In summary, </span><em>vibe coding is a powerful accelerator, but not a silver bullet.</em><span> </span></p><p><span>Use it where speed matters more than polish, and where you have the leeway to iterate and fix things. </span><strong>Avoid using it as a one-shot solution for mission-critical software</strong><span> – that’s like hiring a race car driver to drive a school bus; wrong tool for the job. Maybe one day AI will be so advanced that vibe coding truly can be the default for all development – but </span><em>today is not that day</em><span>. Today, it works best as a helper for the right problems and with the right oversight.</span></p><p><span>Vibe coding, and AI-assisted software development in general, represents a thrilling leap forward in our tools. It’s </span><strong>here to stay</strong><span>, and it will only get more sophisticated from here. Forward-looking engineering teams shouldn’t ignore it – those who harness AI effectively will likely outpace those who don’t, just as teams that embraced earlier waves of automation and better frameworks outpaced those writing everything from scratch. The message of this article is </span><em>not</em><span> to reject vibe coding, but to </span><strong>approach it with eyes open and with engineering discipline intact</strong><span>.</span></p><p><span>The big takeaway is that </span><strong>speed means nothing without quality</strong><span>. Shipping buggy, unmaintainable code faster is a false victory – you’re just speeding towards a cliff. The best engineers will balance the two: using AI to move faster </span><em>without</em><span> breaking things (at least not breaking things any more than we already do!). It’s about finding that sweet spot where AI does the heavy lifting and humans ensure everything stands up properly.</span></p><p><span>For tech leads and engineering managers, the call to action is clear: set the tone that AI is a tool to be used </span><em>responsibly</em><span>. Encourage experimentation with vibe coding, but also establish the expectations (perhaps via some of the rules we outlined) that safeguard your codebase. Make code reviews mandatory for AI-generated contributions, create an environment where asking “hey, does this make sense?” is welcome, and invest in upskilling your team to work </span><em>with</em><span> AI effectively. This might even mean training developers on how to write good prompts or how to evaluate AI suggestions critically. It’s a new skill set, akin to the shift to high-level languages or to distributed version control in the past – those who adapt sooner will reap benefits.</span></p><p>We should also keep in perspective what truly matters in software engineering: solving user problems, creating reliable systems, and continuously learning. Vibe coding is a means to an end, not an end itself. If it helps us serve users better and faster, fantastic. But if it tempts us to skip the due diligence that users ultimately rely on (like quality and security), then we must rein it in. The fundamentals – clear thinking, understanding requirements, designing for change, testing thoroughly – remain as important as ever, if not more so.</p><p><span>In the end, perhaps the ethos should be: </span><strong>“Move fast, but don’t break things – or if you do, make sure you know how to fix them.”</strong><span> Leverage the vibes to code at light speed, but back it up with the solid bedrock of engineering excellence. AI can coexist with craftsmanship; in fact, in the hands of a craftsman, it can be a powerful chisel. But the craftsman’s hand is still needed to guide that chisel to create something truly enduring and well-made.</span></p><p><span>So, vibe on, developers – just do it with care. Embrace the future, but don’t abandon the principles that got us here. </span><strong>Vibe coding is not an excuse for low-quality work</strong><span>; rather, it’s an opportunity to elevate what we can achieve </span><em>when we pair human judgment with machine generative power</em><span>. The teams that internalize this will not only move fast – they’ll build things worth keeping. </span></p><p><span>Happy coding, and keep the vibes high </span><em>and</em><span> the quality higher.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png" width="1456" height="1456" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:159543,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://addyo.substack.com/i/161584260?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd180e6c3-45f2-45f2-8b12-af5bccbf8aa1_1890x1890.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Unpowered SSD endurance investigation finds data loss and performance issues (113 pts)]]></title>
            <link>https://www.tomshardware.com/pc-components/storage/unpowered-ssd-endurance-investigation-finds-severe-data-loss-and-performance-issues-reminds-us-of-the-importance-of-refreshing-backups</link>
            <guid>43739028</guid>
            <pubDate>Sat, 19 Apr 2025 19:59:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomshardware.com/pc-components/storage/unpowered-ssd-endurance-investigation-finds-severe-data-loss-and-performance-issues-reminds-us-of-the-importance-of-refreshing-backups">https://www.tomshardware.com/pc-components/storage/unpowered-ssd-endurance-investigation-finds-severe-data-loss-and-performance-issues-reminds-us-of-the-importance-of-refreshing-backups</a>, See on <a href="https://news.ycombinator.com/item?id=43739028">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">

<section>
<div>
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-994-80.jpg.webp 1920w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-994-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-994-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-320-80.jpg.webp 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV.jpg" alt="Long-term SSD durability tests" srcset="https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-994-80.jpg 1920w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-994-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-994-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV-320-80.jpg 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/W7vXqDuaaPJa4CV6hZQyGV.jpg" data-pin-nopin="true" fetchpriority="high">
</picture>
</div>
<figcaption>
<span>(Image credit: HTWingNut)</span>
</figcaption>
</div>

<div id="article-body">
<p>You may not know it, but SSDs will lose data after a period of time if they are simply left unplugged, which can be a serious threat to your data if you store backups or precious files on unplugged SSDs. A year-two update on the <a data-analytics-id="inline-link" href="https://www.youtube.com/watch?v=rx3Y5x6uzKQ" data-url="https://www.youtube.com/watch?v=rx3Y5x6uzKQ" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">how long can SSDs store data unpowered</a> video series is another reminder about the importance of regularly refreshing your backups with a bit of juice. The tests consist of storing data on an SSD and then leaving it unplugged for years to see the impact on the stored data.</p><p>As a reminder, an SSD's endurance rating is calculated based on how long it can store data if left unplugged after a certain amount of data has been written, hence the importance of this testing.</p><p>TechTuber HTWingNut is back with a report on his modest experiment involving a quartet of SATA SSDs. The key finding was that the two-year-old, well-worn drive exhibited noticeable performance degradation and was affected by a handful of corrupt files. These are signs that this particular SSD was on its way to silicon heaven. HTWingNut's video is an update on an episode from a year earlier, and further updates are promised.</p><div data-nosnippet="">
<div>
<p><span>How Long Can SSD Store Data Unpowered? Year 2 Update - YouTube</span>
<img src="https://img.youtube.com/vi/rx3Y5x6uzKQ/maxresdefault.jpg" alt="How Long Can SSD Store Data Unpowered? Year 2 Update - YouTube" data-aspect-ratio="16/9" loading="lazy">
</p>
</div>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 234.67 165.33"><path fill="red" d="M229.763 25.817c-2.699-10.162-10.65-18.165-20.748-20.881C190.716 0 117.333 0 117.333 0S43.951 0 25.651 4.936C15.553 7.652 7.6 15.655 4.903 25.817 0 44.236 0 82.667 0 82.667s0 38.429 4.903 56.85C7.6 149.68 15.553 157.681 25.65 160.4c18.3 4.934 91.682 4.934 91.682 4.934s73.383 0 91.682-4.934c10.098-2.718 18.049-10.72 20.748-20.882 4.904-18.421 4.904-56.85 4.904-56.85s0-38.431-4.904-56.85"></path><path fill="#fff" d="m93.333 117.559 61.333-34.89-61.333-34.894z"></path></svg>
<a href="https://youtu.be/rx3Y5x6uzKQ" target="_blank" data-url="https://youtu.be/rx3Y5x6uzKQ" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">Watch On <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 507.9 113.39"><g fill="#fff"><path d="M64.792 80.99V32.396l42.082 24.297zm93.803-63.285a20.285 20.285 0 0 0-14.32-14.32C131.642 0 80.99 0 80.99 0S30.337 0 17.705 3.385a20.286 20.286 0 0 0-14.32 14.32C0 30.338 0 56.693 0 56.693S0 83.049 3.385 95.68A20.285 20.285 0 0 0 17.705 110c12.632 3.386 63.285 3.386 63.285 3.386s50.652 0 63.285-3.386a20.284 20.284 0 0 0 14.32-14.32c3.385-12.632 3.385-38.988 3.385-38.988s0-26.355-3.385-38.988m94.473 74.326c.887-2.314 1.332-6.098 1.332-11.35V58.556c0-5.097-.445-8.822-1.332-11.178-.888-2.355-2.452-3.533-4.69-3.533-2.163 0-3.69 1.178-4.577 3.533-.888 2.356-1.332 6.081-1.332 11.178V80.68c0 5.25.424 9.035 1.275 11.35.848 2.318 2.392 3.475 4.633 3.475 2.239 0 3.803-1.157 4.691-3.475zm-17.953 11.122c-3.207-2.16-5.486-5.52-6.835-10.079-1.352-4.554-2.027-10.617-2.027-18.185v-10.31c0-7.644.771-13.784 2.316-18.417 1.544-4.633 3.956-8.011 7.24-10.135 3.282-2.123 7.587-3.186 12.916-3.186 5.251 0 9.459 1.082 12.626 3.243 3.165 2.162 5.482 5.542 6.95 10.136 1.466 4.595 2.2 10.715 2.2 18.36v10.31c0 7.567-.714 13.65-2.142 18.243-1.43 4.595-3.747 7.955-6.951 10.077-3.205 2.124-7.548 3.186-13.03 3.186-5.64 0-10.06-1.082-13.263-3.243m248.053-57.981c-.81 1.005-1.352 2.646-1.621 4.923-.272 2.278-.404 5.734-.404 10.367v5.097h11.697V60.46c0-4.555-.155-8.011-.463-10.367-.309-2.355-.868-4.014-1.678-4.98-.812-.966-2.067-1.449-3.766-1.449-1.7 0-2.954.503-3.765 1.506zm-2.025 29.886v3.591c0 4.557.132 7.974.404 10.251.269 2.279.828 3.94 1.68 4.982.849 1.041 2.16 1.564 3.938 1.564 2.392 0 4.035-.927 4.923-2.781.887-1.853 1.37-4.942 1.447-9.268l13.785.812c.077.62.116 1.469.116 2.548 0 6.565-1.795 11.47-5.387 14.712-3.589 3.242-8.669 4.865-15.232 4.865-7.876 0-13.398-2.47-16.564-7.414-3.168-4.94-4.75-12.586-4.75-22.935V63.589c0-10.657 1.641-18.436 4.924-23.342 3.281-4.903 8.9-7.355 16.854-7.355 5.482 0 9.691 1.004 12.626 3.012 2.933 2.01 5 5.137 6.197 9.383 1.197 4.247 1.796 10.117 1.796 17.607v12.163h-26.757m-284.953-1.33-18.187-65.68h15.869l6.37 29.77c1.623 7.339 2.82 13.594 3.591 18.766h.464c.54-3.706 1.738-9.922 3.591-18.65l6.603-29.886h15.869l-18.417 65.68v31.51h-15.754v-31.51M322.115 34.23v71.007h-12.511l-1.39-8.688h-.347c-3.399 6.564-8.496 9.845-15.291 9.845-4.71 0-8.185-1.543-10.425-4.633-2.24-3.087-3.359-7.915-3.359-14.48V34.23h15.985v52.126c0 3.168.348 5.426 1.043 6.776.695 1.353 1.853 2.027 3.475 2.027 1.39 0 2.722-.423 3.996-1.275 1.274-.849 2.22-1.928 2.838-3.241V34.229h15.986m81.995.001v71.007h-12.511l-1.391-8.688h-.345c-3.402 6.564-8.498 9.845-15.292 9.845-4.711 0-8.186-1.543-10.426-4.633-2.24-3.087-3.358-7.915-3.358-14.48V34.23h15.985v52.126c0 3.168.347 5.426 1.041 6.776.696 1.353 1.855 2.027 3.476 2.027 1.391 0 2.723-.423 3.996-1.275 1.275-.849 2.22-1.928 2.839-3.241V34.229h15.985"></path><path d="M365.552 20.908h-15.87v84.329h-15.637v-84.33h-15.869V8.05h47.376v12.858m76.811 53.636c0 5.174-.215 9.229-.639 12.162-.424 2.937-1.139 5.021-2.143 6.255-1.004 1.236-2.357 1.854-4.053 1.854a7.404 7.404 0 0 1-3.65-.927c-1.12-.618-2.026-1.544-2.722-2.78V50.796c.54-1.93 1.467-3.513 2.78-4.749 1.313-1.234 2.74-1.853 4.285-1.853 1.623 0 2.876.637 3.766 1.91.886 1.275 1.505 3.418 1.853 6.43.348 3.011.523 7.297.523 12.857zm14.652-28.964c-.967-4.478-2.531-7.721-4.692-9.73-2.163-2.007-5.136-3.011-8.919-3.011-2.935 0-5.676.83-8.224 2.49a16.926 16.926 0 0 0-5.908 6.545h-.117l.001-37.416h-15.405v100.777h13.204l1.622-6.717h.347c1.235 2.393 3.088 4.285 5.56 5.675 2.47 1.39 5.213 2.085 8.225 2.085 5.404 0 9.382-2.491 11.931-7.471 2.548-4.982 3.823-12.76 3.823-23.341V64.23c0-7.953-.484-14.17-1.448-18.65"></path></g></svg></a>
</div><p>The four tested 'Leven JS-600' branded SSDs are basically bog-standard no-name units. HTWingNut says they are all TLC SSDs of 128GB capacity and rated to withstand 60 TB of written data. Every drive has 100GB of files containing random data, with hash values for all the content provided for later verification.</p><p>The two 'Fresh' samples have barely been used; perhaps only the 100GB data set was put on there and verified, and that's it. Meanwhile, the 'Worn' drives have been subjected to 280 terabytes of written data churn, much more than their rated 60 Terabytes Written (TBW) endurance rating..</p><p>If you watch the previous <a data-analytics-id="inline-link" href="https://www.youtube.com/watch?v=igJK5YDb73w" data-url="https://www.youtube.com/watch?v=igJK5YDb73w" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">year-one video</a>, you will have seen there were no issues with either 'Worn' or 'Fresh' drives. However, time has now taken its toll. Let's take a look at the year-two samples in turn.</p><h2 id="fresh-ssd-tests-3">'Fresh' SSD tests</h2><p>The data on this SSD, which hadn't been used or powered up for two years, was 100% good on initial inspection. All the data hashes verified, but it was noted that the verification time took a smidgen longer than two years previously. HD Sentinel tests also showed good, consistent performance for a SATA SSD.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-7yDTgvWNkW6o6Rmwfza8wm"><section><p>Get Tom's Hardware's best news and in-depth reviews, straight to your inbox.</p></section></div><p>Digging deeper, all isn't well, though. Firing up Crystal Disk Info, HTWingNut noted that this SSD had a Hardware ECC Recovered value of over 400. In other words, the disk's error correction had to step in to fix hundreds of data-based parity bits.</p><p>Seeing these errors means "the SSD is on its way out," according to HTWingNut. Indeed, if there is anything iffy about your data storage integrity, it is at least a warning. However, the errors could also have something to do with the drive being left unpowered for two years.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV.jpg" alt="Long-term SSD durability tests" srcset="https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/ymKMWvrmR7iadoC8R5stGV.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: HTWingNut)</span></figcaption></figure><h2 id="worn-ssd-tests-3">'Worn' SSD tests</h2><p>As the worn SSD's data was being verified, there were already signs of performance degradation. The hashing audit eventually revealed that four files were corrupt (hash not matching). Looking at the elapsed time, it was observed that this operation astonishingly took over 4x longer, up from 10 minutes and 3 seconds to 42 minutes and 43 seconds.</p><p>Further investigations in HD Sentinel showed that three out of 10,000 sectors were bad and performance was 'spiky.' Returning to Crystal Disk Info, things look even worse. HTWingNut notes that the uncorrectable sectors count went from 0 to 12 on this drive, and the hardware ECC recovered value went from 11,745 before to 201,273 after tests on the day.</p><h2 id="some-takeaways-3">Some takeaways</h2><p>In summary, the year-one fresh and well-worn drives had no issues. However, the year-two heavily worn SSD had file corruption and performance was poor. The so-called fresh drive was still good, but ECC figures still raised concern. Come back in late 2025 for the next update from HTWingNut.</p><p>We also want to say this is a very small test sample, highlighted out of our interest in the topic rather than for its hard empirical data. I have also experienced SSD data loss after leaving a Mini PC unpowered for just six months or so at my pied-à-terre in Taiwan. On return, Windows refused to boot or be repaired, but a reformat and reinstall seemed to return everything to normal.</p><p><em>Follow&nbsp;</em><a data-analytics-id="inline-link" href="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" target="_blank" data-url="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u><em>Tom's Hardware on Google News</em></u></a><em>&nbsp;to get our up-to-date news, analysis and reviews in your <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/google" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.tomshardware.com/tag/google">Google</a> feeds. Make sure to click the Follow button.</em></p>
</div>



<!-- Drop in a standard article here maybe? -->


<div id="slice-container-authorBio-7yDTgvWNkW6o6Rmwfza8wm"><p>Mark Tyson is a news editor at Tom's Hardware. He enjoys covering the full breadth of PC tech; from business and semiconductor design to products approaching the edge of reason.</p></div>
</section>




</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Icelandic Voting System (2024) (126 pts)]]></title>
            <link>https://smarimccarthy.is/posts/2024-11-25-voting-system/</link>
            <guid>43738675</guid>
            <pubDate>Sat, 19 Apr 2025 19:10:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://smarimccarthy.is/posts/2024-11-25-voting-system/">https://smarimccarthy.is/posts/2024-11-25-voting-system/</a>, See on <a href="https://news.ycombinator.com/item?id=43738675">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><p>It’s election season here in Iceland! The election is on Saturday, 30th of November, so next Saturday from when this is written.</p>
<p>Every time elections are upcoming, somebody inevitably asks me how the voting system here works, probably expecting a simple answer. So, here’s a stab at it.</p>
<p>Iceland uses a biproportional apportionment system, as do Norway, some cantons of Switzerland, some German regions, and a few other places. Such systems have a few general features:</p>
<ul>
<li>There is some number of constituencies, each of which has:
<ul>
<li>Some number of constituency seats (CS)</li>
<li>Some number of adjustment seats (AS)</li>
</ul>
</li>
</ul>
<p>Technically, you could have 0 constituency seats, but most places have some. In Iceland every constituency must have either 1 or 2 adjustment seats. So like, we have Southwest with 14 seats total, of which 2 are AS, while Northwest has 7 total, 6 CS and 1 AS. These are decided after each election (for the next election) by the national electoral commission, and take into account population in each constituency, so as to try to minimize the disparity of voting power.</p>
<h2 id="divisor-rules">Divisor rules</h2>
<p>For this kind of system, you have a divisor rule, such as d’Hondt or Sainte-Lague. We use d’Hondt in Iceland. Scandinavia uses a modified Sainte-Lague. The rule is basically a quotient between votes and seats. d’Hondt is</p>
<p>$q = V/(s+1)$</p>
<p>Where q is the quotient, V the number of votes a party gets, and s the number of seats they’ve already been allocated.</p>
<p>By comparison, the Sainte-Lague method is:</p>
<p>$q = V / (2s+1)$</p>
<p>Norway and Sweden use a modified Sainte-Lague, which starts at 1.5 instead of 1, so you get a sequence of 1.5, 3, 5, …. There are a number of <a href="https://github.com/smari/voting/blob/master/backend/division_rules.py" target="_blank" rel="noopener noreffer">other divisor rules</a>, each optimized for a slightly different use case.</p>
<p>The key difference here is that by scaling up the divisor, you’re valuing each seat much higher, resulting in it becoming proportionally easier to get the first seat, etc.</p>
<p>It should be said that in some ways d’Hondt is the least fair of them, clearly favoring big parties, but it’s also the only such rule that actually adds up in such a way that there’s no strategic benefit to breaking a large party up into many smaller parties. You win some, you lose some.</p>
<h2 id="allocating-the-constituency-seats">Allocating the constituency seats</h2>
<p>Now that we have our divisor rule, we should start allocating, by calculating each constituency’s seats.</p>
<p>For each constituency, each party running in that constituency starts with 0 seats, so every party’s divisor is 1 (in d’Hondt). You then look at which party has the highest quotient ($q$), and you give them a seat.</p>
<p>Now recalculate the quotients (really only the one you just allocated to, the others remain unchanged). Oh, look, now the party that got a seat has a lower $q$, because their divisor is bigger. So somebody else (probably) has the highest $q$. Give them a seat. Continue until all constituency seats are allocated.</p>
<h2 id="allocating-the-adjustment-seats">Allocating the adjustment seats</h2>
<p>This is where the fun begins – the real biproportional part. Once all the constituency seats have been allocated, the next step is to calculate for the entire country. So we add up each party’s votes over the entire country and each party’s seats over the entire country.</p>
<p>If there’s a cutoff (such as the 5% rule we have in Iceland), you eliminate any parties that fall under the 5% threshold from the following process (but they keep any CS they’ve already been allocated).</p>
<p>Now, we’ve got some total number of AS, which are to be allocated, but we are not just allocating them to the parties, we’re allocating them to parties <em>in constituencies</em>. So the task is to figure out which party deserves the next seat <em>and</em> where it is most logical for them to get a seat, given the votes they got in each constituency.</p>
<p>What this effectively comes down to is, once all the CS have been allocated, you figure out which parties are most deserving of seats nationally, and give them extras, ideally in the constituencies where they got the most votes. But the devil is in the details here.</p>
<p>It has been proven that there is one and only one mathematically sound way to calculate the results, as shown in <a href="https://hal.science/hal-00686748/document" target="_blank" rel="noopener noreffer">this paper by Balinski &amp; DeMange</a>, which describes a bilinear optimization exercise aiming at minimizing entropy. Weirdly, as far as I know, only the canton of Geneva uses this correct method.</p>
<p>By “correct” here, we mean that the result is Exact, Relevant, Uniform, Monotonic and Homogenous, as per these axioms:</p>
<p><img src="https://smarimccarthy.is/img/axioms.png" data-src="/img/axioms.png" data-srcset="/img/axioms.png, /img/axioms.png 1.5x, /img/axioms.png 2x" data-sizes="auto" alt="/img/axioms.png" title="Axioms" srcset="https://smarimccarthy.is/img/axioms.png, https://smarimccarthy.is/img/axioms.png 1.5x, https://smarimccarthy.is/img/axioms.png 2x"></p>
<p>Each of these comes with a lengthy description – I’ll just refer to the paper, but basically, you don’t really want to fail any of these tests.</p>
<p>So it’s a bit weird that everywhere other than Geneva that uses this kind of method, including Iceland, uses an approximation method that is provably incorrect, but in different ways. <a href="https://github.com/smari/voting/blob/master/backend/methods/icelandic_law.py" target="_blank" rel="noopener noreffer">I wrote some code for the Icelandic law method</a>, but more about that below.</p>
<p>Specifically, the Icelandic system fails the monotonicity criteria, frequently resulting in one party losing a seat because it got more votes.</p>
<p>In 2013, Framsóknarflokkurinn got one extra seat that should have gone to Vinstri-Græn; in 2016 the Sjálfstæðisflokkur got an extra seat that should have gone to Vinstri-Græn; in 2017 Framsóknarflokkurinn got one that should have gone to Samfylkingin, and in 2021 Framsóknarflokkurinn got one that should have gone to Sjálfstæðisflokkurinn.</p>
<p>(The fact that Framsóknarflokkurinn benefits from this error more often than other parties is kind of random, or it’s a quirk of where their votes come from, but either way it’s a fun irony that the decision to use this approximation method was decided on around the kitchen table of the chairman of Framsóknarflokkurinn back in the day, during a meeting of the then coalition leaders.)</p>
<p>The main reason it’s being calculated incorrectly in Iceland is that lawyers and politicians don’t generally understand (bi)linear optimization. So rather than explain a fairly simple math operation in law, they explain this really convoluted drawn out, inaccurate method instead, because it’s less mathy. Oh well.</p>
<h2 id="some-thoughts">Some thoughts</h2>
<p>There are a lot of ways to skin a cat. This is not really a bad system; one might even argue that it’s quite good. The biggest drawback is that it might seem unfair to require the average voter to understand entropy minimization in order to have a clear sense of how elections work. It’s really not <em>super</em> complex math, but it does take a moment to wrap one’s head around it, and the tradition of rather terse notation doesn’t help at all.</p>
<p>Within this system, the biggest improvement I could suggest is increasing the number of AS quite significantly in the Icelandic system. Making it be something closer to 50% of the total seats would go a long way towards reducing vote inequality (votes in NW are worth almost 2x what they’re worth in SW) and reducing “provincialism” in politics. I would say move it to 100% AS, which has almost the same effect as just having one constituency (except you’re still having party lists in each constituency, which causes some geographic distribution to exist), but there is value in <em>some</em> provincialism and recognition of different needs and issues in different geographies. It’s just a bit too much at the moment.</p>
<p>If one were to change the system, I might suggest that the same Michel Balinski wrote a fantastic book along with Rida Laraki some years ago, <a href="https://mitpress.mit.edu/9780262545716/majority-judgment/" target="_blank" rel="noopener noreffer">Majority Judgement</a>, which outlines and proves a set of methods that are simultaneously really easy to understand, very easy to implement, and most notably they avoid the classic <a href="https://en.wikipedia.org/wiki/Arrow%27s_impossibility_theorem" target="_blank" rel="noopener noreffer">Arrow Impossibility Theorem</a> by virtue of not being prioritization systems, but rather scoring systems – where each voter essentially gives each party a grade, or “judgement” in the parlance of the book.</p>
<h2 id="some-code">Some code</h2>
<p>Many years ago, <a href="https://thorkellhelgason.is/" target="_blank" rel="noopener noreffer">Þorkell Helgason</a> contacted me about helping him build a simulator for this category of voting systems, in order to better be able to compare different systems and see how they behave under combinations of settings and weird vote outcomes. After a few remote sessions, Þorkell came and visited me in Sarajevo, where I lived at the time, and over the course of a weekend we banged out the first version, supporting the Icelandic system and the optimal entropy method described in the Balinski paper.</p>
<p>Since then we and various others have added a whole host of features and methods to the software. I haven’t much touched it myself for quite a while, but it’s interesting to take a fresh look in light of the upcoming elections.</p>
<p><a href="https://github.com/smari/voting" target="_blank" rel="noopener noreffer">Github link to the voting simulator</a>.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Web Is Broken – Botnet Part 2 (379 pts)]]></title>
            <link>https://jan.wildeboer.net/2025/04/Web-is-Broken-Botnet-Part-2/</link>
            <guid>43738603</guid>
            <pubDate>Sat, 19 Apr 2025 18:59:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jan.wildeboer.net/2025/04/Web-is-Broken-Botnet-Part-2/">https://jan.wildeboer.net/2025/04/Web-is-Broken-Botnet-Part-2/</a>, See on <a href="https://news.ycombinator.com/item?id=43738603">Hacker News</a></p>
<div id="readability-page-1" class="page"><section itemprop="text">
        <p><strong>I guess you have all heard about the growing problem of AI companies trying to aggressively collect whatever data they can get their hands on to train their models. This has caused an explosive surge in web crawlers relentlessly hitting servers big and small. But who runs these crawlers? Turns out — it could be you!</strong></p>

<table>
  <tbody>
    <tr>
      <td>1.</td>
      <td><a href="https://jan.wildeboer.net/2025/02/Blocking-Stealthy-Botnets/">Those stealthy botnets</a> - How I found out about a not so new class of botnets</td>
    </tr>
    <tr>
      <td>2.</td>
      <td><a href="https://jan.wildeboer.net/2025/04/Web-is-Broken-Botnet-Part-2/">The Web is Broken</a> - <strong>Certain companies recruit app developers to create botnets by injecting “network sharing” SDKs into their apps. These botnets then use the network bandwidth of unsuspecting users of said apps to crawl the web, brute-force mail servers and other nasty things.</strong></td>
    </tr>
  </tbody>
</table>

<p>So there is a (IMHO) shady market out there that gives app developers on iOS, Android, MacOS and Windows money for including a library into their apps that sells users network bandwidth. Infatica<sup id="fnref:infaticasdk"><a href="#fn:infaticasdk" rel="footnote" role="doc-noteref">1</a></sup> is just one example, there are many more.</p>

<p>I am 99% sure that these companies cause what effectively are DDoS attacks by aggressive AI crawlers that many webmasters have to deal with since months. This business model should simply not exist. Apple, Microsoft and Google should act.</p>

<p><img src="https://jan.wildeboer.net/images/2025/04/botnet01.png" alt="Infatica explains their SDK" title="How does the monetization work?  We connect your users’ IP addresses to the Infatica peer-to-business network, which allows companies to access web data to build price aggregation platforms, perform search engine optimization, create brand protection and marketing strategies, conduct academic research, produce uptime and performance services, ensure corporate data protection, and more.">
<em>From the <a href="https://infatica.io/sdk-monetization/">Infatica SDK page</a>, explaining how app developers can make money by including the Infatica SDK</em></p>

<p>What these companies then sell to <em>their</em> customers is network access through the devices/PCs that have an app with this SDK installed<sup id="fnref:infaticasell"><a href="#fn:infaticasell" rel="footnote" role="doc-noteref">2</a></sup>. They are proud to tell you how you can funnel your (AI) web scraping etc through millions of rotating, residential and mobile IP addresses. Exactly the pattern we see hitting our servers.</p>

<p><img src="https://jan.wildeboer.net/images/2025/04/botnet02.png" alt="The offer to customers: residential IPs, Static IPs, mobile IPs etc." title="We’re offering a set of pricing plans with varying parameters including available traffic, IP address count, and other features – or you can use our flexible pricing option to fine-tune the parameters yourself.">
<em>Infatica claiming they have millions and millions of IP addresses to hand to you</em></p>

<p><img src="https://jan.wildeboer.net/images/2025/04/botnet03.png" alt="Infatica promising millions of IP addresses " title="Global Portfolio of Residential IPs Residential IP addresses make web scraping and similar activities much easier: buy proxy IPs from residential zones, your connection is safer and more anonymous.   United States 226090 IPs Russia 792251 IPs Ukraine 367600 IPs Germany 116173 IPs India 274277 IPs Poland 305109 IPs China 670301 IPs Turkey 374577 IPs Brazil 1123823 IPs Indonesia 367978 IPs Vietnam 579580 IPs Saudi Arabia 64697 IPs">
<em>What I would call “infected users” are called “residential IPs” in this specific market</em></p>

<h2 id="there-are-many">There are many</h2>

<p>Now, again, this company is just one of many selling similar services. And they all promise that they carefully check what commands their customers send to the (IMHO) infected apps on your phone and PC. Yeah, I am sure they “do no evil”. And when they do, they can claim it’s not their problem because they are merely the proxy. Again, IMHO, a shady business model.</p>

<p>Trend Micro did some research on these companies back in 2023 and it confirms my suspicions. And I guess with AI scraping this kind of business is booming.</p>

<blockquote>
  <p>„There are malicious actors who repacked freeware and shareware written by other people to conduct drive-by downloads of the Infatica peer-to-business (P2B) service“ <sup id="fnref:trendmicro"><a href="#fn:trendmicro" rel="footnote" role="doc-noteref">3</a></sup></p>
</blockquote>

<p><img src="https://jan.wildeboer.net/images/2025/04/botnet04.png" alt="Trend Micro's finding on the real use of these offerings" title="During our one month of observation, we have seen the following suspicious or malicious behaviors that Infatica proxy customers are doing via the service:  Bruteforcing of Simperium, a cross-site data synchronization service Bruteforcing of Bitwarden Scraping of house prices Scraping of Lazada and Walmart prices Creating accounts on Live.com, Instagram, and Mail.RU"></p>

<p>But IMHO (In My Humble Opinion) this also explains the explosion of bot traffic that really cripples a lot of smaller services (like my forgejo instance, that I had to make non-public).</p>

<p>So if you as an app developer include such a 3rd party SDK in your app to make some money — you are part of the problem and I think you should be held responsible for delivering malware to your users, making them botnet members.</p>

<p>Unfortunately it is next to impossible for normal users to detect the inclusion of such shady SDKs and the network traffic they cause. Not even mentioning how hard this is for admins of (small) web servers.</p>

<p>I already blogged about this <a href="https://jan.wildeboer.net/2025/02/Blocking-Stealthy-Botnets/">back in February 2025</a> but I think it is better to put what I have learned since then in this new post. I guess it won’t be my last on this topic.</p>

<h2 id="see-for-yourself">See for yourself!</h2>

<p>If you want to feel really dirty, go to <a href="https://proxyway.com/reviews?e-filter-da2a7bc-reviews_categories=proxy-providers">https://proxyway.com/reviews?e-filter-da2a7bc-reviews_categories=proxy-providers</a> for a collection of reviews on these services. It’s a huge market and I am 100% convinced that “AI” web scraping is currently the biggest “growth” driver for these companies.</p>

<p>And when I see that quite some of them rely on injecting SDKs into 3rd party apps to “extend” their “Reach” and fill their pools of “residential proxies”, I would call out these companies for distributing malware and creating botnets. But that’s just my personal opinion. I am sure they are all legit.</p>

<p><img src="https://jan.wildeboer.net/images/2025/04/botnet05.png" alt="Reviews of proxy providers" title="Page 1 of 3 of review of &quot;residential proxy providers&quot;, listing smart proxy, Oxylabs, brightdata, netnut, soax, webshare, Nimble, Infatica, Evomi, Massive, Proxyseller, Ayobyte">
<em>Page 1 of 3 with reviews of “residential proxy” providers</em></p>

<h2 id="my-conclusion">My conclusion</h2>

<p>I am now of the opinion that <em>every</em> form of web-scraping should be considered abusive behaviour and web servers should block all of them. If you think your web-scraping is acceptable behaviour, you can thank these shady companies and the “AI” hype for moving you to the bad corner.</p>

<p>Thank you for your time and interest! I hope it helps you understand why web crawlers have become a real problem and how this is more and more an attack on the foundation of the Web as it was intended to be. This “residential proxy” business is just one part of this. And we webmasters/admins can only try to block. It is getting more and more difficult to keep up with these waves. Thanks “AI”, I guess?</p>



</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Raspberry Pi Lidar Scanner (565 pts)]]></title>
            <link>https://github.com/PiLiDAR/PiLiDAR</link>
            <guid>43738561</guid>
            <pubDate>Sat, 19 Apr 2025 18:53:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/PiLiDAR/PiLiDAR">https://github.com/PiLiDAR/PiLiDAR</a>, See on <a href="https://news.ycombinator.com/item?id=43738561">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">PiLiDAR - DIY 360° 3D Panorama Scanner</h2><a id="user-content-pilidar---diy-360-3d-panorama-scanner" aria-label="Permalink: PiLiDAR - DIY 360° 3D Panorama Scanner" href="#pilidar---diy-360-3d-panorama-scanner"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto"><em>WORK IN PROGRESS</em></h2><a id="user-content-work-in-progress" aria-label="Permalink: WORK IN PROGRESS" href="#work-in-progress"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Core Features:</h2><a id="user-content-core-features" aria-label="Permalink: Core Features:" href="#core-features"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><strong>LiDAR</strong>: custom serial driver for LDRobot <strong>LD06</strong>, <strong>LD19</strong> or <strong>STL27L</strong></p>
<ul dir="auto">
<li>CRC package integrity check</li>
<li><a href="https://github.com/Pioreactor/rpi_hardware_pwm">Hardware PWM</a> calibrated using curve fitting</li>
<li>2D live visualization and export (numpy or CSV)</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Panorama</strong>: 6K 360° spherical map</p>
<ul dir="auto">
<li>stitched from fisheye photos using <a href="https://hugin.sourceforge.io/" rel="nofollow"><strong>Hugin</strong> Panorama photo stitcher</a></li>
<li>constant camera exposure by reading EXIF data of automatic</li>
<li>constant white balance by iterative optimization of color gains</li>
</ul>
</li>
<li>
<p dir="auto"><strong>3D Scene</strong>: assembly of 3D scenes from 2D planes based on angle and offsets</p>
<ul dir="auto">
<li>sampling <strong>vertex colors from panorama</strong></li>
<li>Open3D visualization and export (PCD, PLY or <a href="https://github.com/davidcaron/pye57">e57</a>)</li>
<li>aligning multiple scenes using <strong>global registration</strong> and <strong>ICP fine-tuning</strong></li>
<li><strong>Poisson Surface Meshing</strong> (very slow on Pi4, recommended to run on PC)</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">preliminary results</h2><a id="user-content-preliminary-results" aria-label="Permalink: preliminary results" href="#preliminary-results"></a></p>
<p dir="auto">single scans, no registration, no post processing.<br>
klick the images to open the pointclouds in Sketchfab.</p>
<p dir="auto"><a href="https://sketchfab.com/models/7997b63a3cb747f99b8f161862318bec/embed?autostart=1&amp;ui_animations=0&amp;ui_stop=0&amp;ui_inspector=0&amp;ui_watermark_link=0&amp;ui_watermark=0&amp;ui_ar=0&amp;ui_help=0&amp;ui_settings=0&amp;ui_vr=0&amp;ui_fullscreen=0&amp;ui_annotations=0" rel="nofollow"><img src="https://github.com/PiLiDAR/PiLiDAR/raw/main/images/exterior.jpeg" alt="Exterior"></a></p>
<p dir="auto"><em>Exterior Scan (colormapped Intensity)</em></p>
<p dir="auto"><a href="https://sketchfab.com/models/0311c098c57b458abe3a5d3dda9fe92b/embed?autospin=0&amp;autostart=1&amp;ui_animations=0&amp;ui_inspector=0&amp;ui_watermark_link=0&amp;ui_watermark=0&amp;ui_ar=0&amp;ui_help=0&amp;ui_settings=0&amp;ui_vr=0&amp;ui_fullscreen=0&amp;ui_annotations=0" rel="nofollow"><img src="https://github.com/PiLiDAR/PiLiDAR/raw/main/images/interior.jpeg" alt="Interior"></a></p>
<p dir="auto"><em>Interior Scan (Vertex Colors)</em></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Hardware Specs:</h2><a id="user-content-hardware-specs" aria-label="Permalink: Hardware Specs:" href="#hardware-specs"></a></p>
<ul dir="auto">
<li>
<p dir="auto">LDRobot LD06, LD19 or STL27L LiDAR</p>
</li>
<li>
<p dir="auto">Raspberry Pi HQ Camera with ArduCam M12 Lens <a href="https://www.arducam.com/doc/Arducam_M12_Lens_Kit_for_Pi_HQ_Camera.pdf" rel="nofollow">(M25156H18, p.7)</a></p>
</li>
<li>
<p dir="auto">Raspberry Pi 4</p>
</li>
<li>
<p dir="auto">NEMA17 42-23 stepper with A4988 driver</p>
</li>
<li>
<p dir="auto">Power Supply:</p>
<ul dir="auto">
<li>v1: 2x <em>18650</em> Batteries (7.2V) with step-down converter</li>
<li>v2: 10.000 mAh USB Powerbank with step-up converter</li>
</ul>
</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/PiLiDAR/PiLiDAR/blob/main/images/pilidar_covershot.jpg"><img src="https://github.com/PiLiDAR/PiLiDAR/raw/main/images/pilidar_covershot.jpg" alt="PiLiDAR v1"></a>
<em>Rev. 1 using 2x 18650 Batteries and Buck Converter</em></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/PiLiDAR/PiLiDAR/blob/main/images/pilidar_covershot_v2.jpg"><img src="https://github.com/PiLiDAR/PiLiDAR/raw/main/images/pilidar_covershot_v2.jpg" alt="PiLiDAR v2"></a>
<em>Rev. 2 using 10.000 mAh Powerbank and Boost Converter</em></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">stepper driver, motor and gearbox</h3><a id="user-content-stepper-driver-motor-and-gearbox" aria-label="Permalink: stepper driver, motor and gearbox" href="#stepper-driver-motor-and-gearbox"></a></p>
<ul dir="auto">
<li>A4988 bipolar stepper driver (<a href="https://www.youtube.com/watch?v=PMS5jY7RTjo" rel="nofollow">tutorial</a>)</li>
<li>NEMA17 42x42x23 bipolar stepper (<a href="https://www.omc-stepperonline.com/e-series-nema-17-bipolar-1-8deg-17ncm-24-07oz-in-1a-42x42x23mm-4-wires-17he08-1004s" rel="nofollow">17HE08-1004S</a>, 17 Ncm torque)</li>
<li>3D-printed planetary reduction gearbox (see <a href="#fdm--3d-printing">FDM / 3D printing</a>)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">LDRobot LiDAR Specs</h3><a id="user-content-ldrobot-lidar-specs" aria-label="Permalink: LDRobot LiDAR Specs" href="#ldrobot-lidar-specs"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/PiLiDAR/PiLiDAR/blob/main/images/lidar_comparison.jpg"><img src="https://github.com/PiLiDAR/PiLiDAR/raw/main/images/lidar_comparison.jpg" alt="LD06 vs. STL27L"></a>
<em>angular resolution of LD06 (left) vs. STL27L (right)</em></p>
<p dir="auto">LD06:</p>
<ul dir="auto">
<li>sampling frequency: 4500 Hz</li>
<li>baudrate 230400</li>
<li><a href="https://www.inno-maker.com/product/lidar-ld06/" rel="nofollow">Sales page</a></li>
<li><a href="https://www.inno-maker.com/wp-content/uploads/2020/11/LDROBOT_LD06_Datasheet.pdf" rel="nofollow">mechanical Datasheet</a></li>
<li><a href="https://storage.googleapis.com/mauser-public-images/prod_description_document/2021/315/8fcea7f5d479f4f4b71316d80b77ff45_096-6212_a.pdf" rel="nofollow">Protocol Description</a></li>
</ul>
<p dir="auto">STL27L:</p>
<ul dir="auto">
<li>sampling frequency: 21600 Hz</li>
<li>baudrate 921600</li>
<li><a href="https://github.com/May-DFRobot/DFRobot/blob/master/SEN0589_Datasheet.pdf">datasheet</a></li>
<li><a href="https://www.waveshare.com/wiki/DTOF_LIDAR_STL27L" rel="nofollow">wiki</a></li>
<li>ROS2 driver <a href="https://github.com/ldrobotSensorTeam/ldlidar_stl_ros2?tab=readme-ov-file#Instructions">git</a></li>
</ul>
<p dir="auto">Scan duration:
12s initialisation
17s shooting 4x photos
1:24m scanning 0.167° x 0.18°
37s stitching, cleanup</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">wiring</h2><a id="user-content-wiring" aria-label="Permalink: wiring" href="#wiring"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/PiLiDAR/PiLiDAR/blob/main/images/pilidar_breadboard.jpg"><img src="https://github.com/PiLiDAR/PiLiDAR/raw/main/images/pilidar_breadboard.jpg" alt="breadboard version 2"></a>
<em>Breadboard Rev. 2</em></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">LD06 / STL27L:</h3><a id="user-content-ld06--stl27l" aria-label="Permalink: LD06 / STL27L:" href="#ld06--stl27l"></a></p>
<ul dir="auto">
<li>UART Tx (yellow)</li>
<li>PWM (white)</li>
<li>GND (black)</li>
<li>VCC 5V (red)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Raspberry Pi:</h3><a id="user-content-raspberry-pi" aria-label="Permalink: Raspberry Pi:" href="#raspberry-pi"></a></p>
<ul dir="auto">
<li>LD06 UART0 Rx: GP15</li>
<li>LD06 PWM0: GP18</li>
<li>Power Button: GP03</li>
<li>Scan Button: GP17</li>
<li>A4988 direction: GP26, step: GP19</li>
<li>A4988 microstepping mode: GP5, GP6, GP13</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Setup</h2><a id="user-content-setup" aria-label="Permalink: Setup" href="#setup"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Power Button (Wakeup &amp; Shutdown)</h3><a id="user-content-power-button-wakeup--shutdown" aria-label="Permalink: Power Button (Wakeup &amp; Shutdown)" href="#power-button-wakeup--shutdown"></a></p>
<ul dir="auto">
<li>
<p dir="auto">Wakeup is hardwired to Pin 3</p>
</li>
<li>
<p dir="auto">enable gpio-shutdown</p>
<div data-snippet-clipboard-copy-content="  echo &quot;dtoverlay=gpio-shutdown&quot; >> /boot/firmware/config.txt "><pre><code>  echo "dtoverlay=gpio-shutdown" &gt;&gt; /boot/firmware/config.txt 
</code></pre></div>
</li>
<li>
<p dir="auto">if necesessary:</p>
<div data-snippet-clipboard-copy-content="  sudo nano /etc/systemd/logind.conf
  HandlePowerKey=poweroff"><pre><code>  sudo nano /etc/systemd/logind.conf
  HandlePowerKey=poweroff
</code></pre></div>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">enable i2c-GPIO for GY-521 Accelerometer</h3><a id="user-content-enable-i2c-gpio-for-gy-521-accelerometer" aria-label="Permalink: enable i2c-GPIO for GY-521 Accelerometer" href="#enable-i2c-gpio-for-gy-521-accelerometer"></a></p>
<p dir="auto">GY-521 (MPU 6060): Accelerometer, Gyroscope and thermometer<br>
i2c adress: 0x68<br>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cf7b26631a1deb5b33cb19cdac3382494d9599a97105f380cc05b0846986a4c2/68747470733a2f2f7777772e6d616b657273686f702e64652f646f776e6c6f61642f4d5055363035302d50696e6f75742e706e67"><img src="https://camo.githubusercontent.com/cf7b26631a1deb5b33cb19cdac3382494d9599a97105f380cc05b0846986a4c2/68747470733a2f2f7777772e6d616b657273686f702e64652f646f776e6c6f61642f4d5055363035302d50696e6f75742e706e67" alt="GY-521" data-canonical-src="https://www.makershop.de/download/MPU6050-Pinout.png"></a></p>
<p dir="auto">Since GPIO3 is hardwired to the Power Button, we need to use i2c-GPIO to map custom i2c pins (<a href="https://www.instructables.com/Raspberry-PI-Multiple-I2c-Devices/" rel="nofollow">tutorial</a>). Unlike serial is not getting crossed, so we connect SDA-SDA and SCL-SCL.<br>
SDA: GPIO22<br>
SCL: GPIO27</p>
<p dir="auto">disable ic2_arm and enable i2c-gpio in /boot/firmware/config.txt</p>
<div data-snippet-clipboard-copy-content="dtparam=i2c_arm=off
dtoverlay=i2c-gpio,bus=3,i2c_gpio_delay_us=1,i2c_gpio_sda=22,i2c_gpio_scl=27"><pre><code>dtparam=i2c_arm=off
dtoverlay=i2c-gpio,bus=3,i2c_gpio_delay_us=1,i2c_gpio_sda=22,i2c_gpio_scl=27
</code></pre></div>
<p dir="auto">search for devices on i2c bus 3:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Power LED and CPU fan</h3><a id="user-content-power-led-and-cpu-fan" aria-label="Permalink: Power LED and CPU fan" href="#power-led-and-cpu-fan"></a></p>
<div data-snippet-clipboard-copy-content="# CPU fan at lower temp
echo &quot;dtoverlay=gpio-fan,gpiopin=4,temp=45000&quot; >> /boot/firmware/config.txt


# Power LED Heartbeat:
echo &quot;dtparam=pwr_led_trigger=timer&quot; >> /boot/firmware/config.txt"><pre><code># CPU fan at lower temp
echo "dtoverlay=gpio-fan,gpiopin=4,temp=45000" &gt;&gt; /boot/firmware/config.txt


# Power LED Heartbeat:
echo "dtparam=pwr_led_trigger=timer" &gt;&gt; /boot/firmware/config.txt
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Scan Button: register GPIO interrupt</h3><a id="user-content-scan-button-register-gpio-interrupt" aria-label="Permalink: Scan Button: register GPIO interrupt" href="#scan-button-register-gpio-interrupt"></a></p>
<p dir="auto">make script executable:</p>
<div data-snippet-clipboard-copy-content="chmod +x gpio_interrupt.py"><pre><code>chmod +x gpio_interrupt.py
</code></pre></div>
<p dir="auto">create new service for autostart</p>
<div data-snippet-clipboard-copy-content="sudo nano /etc/systemd/system/pilidar.service"><pre><code>sudo nano /etc/systemd/system/pilidar.service
</code></pre></div>
<p dir="auto">content:</p>
<div data-snippet-clipboard-copy-content="[Unit]
Description=PiLiDAR-Button
After=network.target

[Service]
Type=simple
User=pi
Environment=LG_WD=/tmp
ExecStart=/usr/bin/python3 /home/pi/PiLiDAR/gpio_interrupt.py
Restart=no

[Install]
WantedBy=multi-user.target"><pre><code>[Unit]
Description=PiLiDAR-Button
After=network.target

[Service]
Type=simple
User=pi
Environment=LG_WD=/tmp
ExecStart=/usr/bin/python3 /home/pi/PiLiDAR/gpio_interrupt.py
Restart=no

[Install]
WantedBy=multi-user.target
</code></pre></div>
<p dir="auto">reload daemon, enable and start service:</p>
<div data-snippet-clipboard-copy-content="sudo systemctl daemon-reload
sudo systemctl enable pilidar.service
sudo systemctl start pilidar.service"><pre><code>sudo systemctl daemon-reload
sudo systemctl enable pilidar.service
sudo systemctl start pilidar.service
</code></pre></div>
<p dir="auto">check service if necessary:</p>
<div data-snippet-clipboard-copy-content="sudo systemctl status pilidar.service"><pre><code>sudo systemctl status pilidar.service
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">set Permission for UART on Raspberry Pi</h3><a id="user-content-set-permission-for-uart-on-raspberry-pi" aria-label="Permalink: set Permission for UART on Raspberry Pi" href="#set-permission-for-uart-on-raspberry-pi"></a></p>
<p dir="auto">temporary solution:</p>
<div data-snippet-clipboard-copy-content="sudo chmod a+rw /dev/ttyS0"><pre><code>sudo chmod a+rw /dev/ttyS0
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">old solution: make it permanent by disabling password for chmod:</h4><a id="user-content-old-solution-make-it-permanent-by-disabling-password-for-chmod" aria-label="Permalink: old solution: make it permanent by disabling password for chmod:" href="#old-solution-make-it-permanent-by-disabling-password-for-chmod"></a></p>
<div data-snippet-clipboard-copy-content="sudo visudo
pi ALL=(ALL:ALL) NOPASSWD: /usr/bin/chmod a+rw /dev/ttyS0"><pre><code>sudo visudo
pi ALL=(ALL:ALL) NOPASSWD: /usr/bin/chmod a+rw /dev/ttyS0
</code></pre></div>
<p dir="auto">then execute the <em>temporary</em> solution from python:</p>
<div data-snippet-clipboard-copy-content="import subprocess
command = &quot;sudo chmod a+rw /dev/ttyS0&quot;
process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
output, error = process.communicate()"><pre><code>import subprocess
command = "sudo chmod a+rw /dev/ttyS0"
process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
output, error = process.communicate()
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">new solution: grant permissions to the serial port using udev rules</h4><a id="user-content-new-solution-grant-permissions-to-the-serial-port-using-udev-rules" aria-label="Permalink: new solution: grant permissions to the serial port using udev rules" href="#new-solution-grant-permissions-to-the-serial-port-using-udev-rules"></a></p>
<p dir="auto">(TODO: check and remove old!)</p>
<ul dir="auto">
<li>forget about <code>visudo</code> and the subprocess call above.</li>
<li>Open a terminal and run the following command: <code>sudo nano /etc/udev/rules.d/50-ttyS0.rules</code></li>
<li>Write the following line in the file and save it: <code>KERNEL=="ttyS0",GROUP="dialout",MODE="0660"</code></li>
<li>Run the following command to check if your user is a member of the dialout group: <code>groups</code></li>
<li>If you see <code>dialout</code> in the output, you are already a member of the group. If not, run the following command to add your user to the group: <code>sudo usermod -a -G dialout pi</code></li>
<li>Run the following command to reload the udev rules: <code>sudo udevadm control --reload-rules</code></li>
<li>Unplug and replug the serial device, or reboot the system, to apply the changes.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Hardware PWM on Raspberry Pi</h3><a id="user-content-hardware-pwm-on-raspberry-pi" aria-label="Permalink: Hardware PWM on Raspberry Pi" href="#hardware-pwm-on-raspberry-pi"></a></p>
<p dir="auto">enable GPIO_18 (PWM0) and GPIO_19 (PWM1)</p>
<div data-snippet-clipboard-copy-content="echo &quot;dtoverlay=pwm-2chan&quot; >> /boot/firmware/config.txt "><pre><code>echo "dtoverlay=pwm-2chan" &gt;&gt; /boot/firmware/config.txt 
</code></pre></div>
<p dir="auto">check if "pwm_bcm2835" now exists:</p>

<p dir="auto">Install <a href="https://github.com/Pioreactor/rpi_hardware_pwm">RPi Hardware PWM library</a>:</p>
<div data-snippet-clipboard-copy-content="pip install rpi-hardware-pwm"><pre><code>pip install rpi-hardware-pwm
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Panorama Stitching</h3><a id="user-content-panorama-stitching" aria-label="Permalink: Panorama Stitching" href="#panorama-stitching"></a></p>
<p dir="auto">install Hugin with enblend plugin</p>
<div data-snippet-clipboard-copy-content="sudo apt-get install hugin-tools enblend"><pre><code>sudo apt-get install hugin-tools enblend
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">power switching the USB port</h3><a id="user-content-power-switching-the-usb-port" aria-label="Permalink: power switching the USB port" href="#power-switching-the-usb-port"></a></p>
<p dir="auto">using <a href="https://www.baeldung.com/linux/control-usb-power-supply" rel="nofollow">uhubctl</a> cli tool. install:</p>
<div data-snippet-clipboard-copy-content="sudo apt-get install uhubctl"><pre><code>sudo apt-get install uhubctl
</code></pre></div>
<p dir="auto">list all available hubs and devices</p>

<p dir="auto">powering Raspberry Pi's USB-3-Ports (Hub 2) off / on</p>
<div data-snippet-clipboard-copy-content="sudo uhubctl -l 2 -a off
sudo uhubctl -l 2 -a on"><pre><code>sudo uhubctl -l 2 -a off
sudo uhubctl -l 2 -a on
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">jupyter over remote-ssh</h3><a id="user-content-jupyter-over-remote-ssh" aria-label="Permalink: jupyter over remote-ssh" href="#jupyter-over-remote-ssh"></a></p>
<p dir="auto">start jupyter for network access:</p>
<div data-snippet-clipboard-copy-content="jupyter notebook --ip 192.168.1.16 --no-browser PiLiDAR.ipynb"><pre><code>jupyter notebook --ip 192.168.1.16 --no-browser PiLiDAR.ipynb
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">FDM / 3D printing</h2><a id="user-content-fdm--3d-printing" aria-label="Permalink: FDM / 3D printing" href="#fdm--3d-printing"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">3D model files:</h3><a id="user-content-3d-model-files" aria-label="Permalink: 3D model files:" href="#3d-model-files"></a></p>
<ul dir="auto">
<li>
<p dir="auto">Housing and additional parts (obj and 3mf)  in <a href="https://github.com/PiLiDAR/PiLiDAR/blob/main/mechanical_design/v2/export">mechanical_design/v2/export</a>.</p>
</li>
<li>
<p dir="auto">M12 to C-Mount lens adapter (<a href="https://www.thingiverse.com/thing:4444398" rel="nofollow">thingiverse.com</a>)</p>
</li>
<li>
<p dir="auto">NEMA17 planetary reduction gearbox (<a href="https://www.printables.com/de/model/782336-nema17-planetary-gearbox-fixed" rel="nofollow">printables.com</a>)</p>
</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/PiLiDAR/PiLiDAR/blob/main/images/CAD_v2.jpg"><img src="https://github.com/PiLiDAR/PiLiDAR/raw/main/images/CAD_v2.jpg" alt="CAD model"></a>
<em>Housing CAD model Rev. 2</em></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/PiLiDAR/PiLiDAR/blob/main/images/FDM.jpg"><img src="https://github.com/PiLiDAR/PiLiDAR/raw/main/images/FDM.jpg" alt="3D printing"></a>
<em>FDM printing the old front panel (Rev. 1) in PETG</em></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Serial Protocol</h2><a id="user-content-serial-protocol" aria-label="Permalink: Serial Protocol" href="#serial-protocol"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">LD06</h3><a id="user-content-ld06" aria-label="Permalink: LD06" href="#ld06"></a></p>
<p dir="auto">baudrate 230400, data bits 8, no parity, 1 stopbit<br>
sampling frequency 4500 Hz, scan frequency 5-13 Hz, distance 2cm - 12 meter, ambient light 30 kLux</p>
<p dir="auto">total package size: 48 Byte, big endian.</p>
<ul dir="auto">
<li>starting character：Length 1 Byte, fixed value 0x54, means the beginning of data packet;</li>
<li>Data Length: Length 1 Byte, the first three digits reserved, the last five digits represent the number of measured points in a packet, currently fixed value 12;</li>
<li>speed：Length 2 Byte, in degrees per second;</li>
<li>Start angle: Length: 2 Byte; unit: 0.01 degree;</li>
<li>Data: Length 36 Byte; containing 12 data points with 3 Byte each: 2 Byte distance (unit: 1 mm), 1 Byte luminance. For white objects within 6m, the typical luminance is around 200.</li>
<li>End Angle: Length: 2 Byte; unit: 0.01 degree；</li>
<li>Timestamp: Length 2 Bytes in ms, recount if reaching to MAX 30000；</li>
<li>CRC check: Length 1 Byte</li>
</ul>
<p dir="auto">The Angle value of each data point is obtained by linear interpolation of the starting angle and the ending angle.<br>
The calculation method of the angle is as following:</p>
<div data-snippet-clipboard-copy-content="step = (end_angle – start_angle)/(len – 1)  
angle = start_angle + step*i  "><pre><code>step = (end_angle – start_angle)/(len – 1)  
angle = start_angle + step*i  
</code></pre></div>
<p dir="auto">len is the length of the packet, and the i value range is [0, len].</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">remote Open3D Visualization</h2><a id="user-content-remote-open3d-visualization" aria-label="Permalink: remote Open3D Visualization" href="#remote-open3d-visualization"></a></p>
<p dir="auto">using <del><a href="https://www.open3d.org/docs/release/tutorial/visualization/web_visualizer.html" rel="nofollow"><em>Web Visualizer</em></a></del> <a href="https://plotly.com/python/" rel="nofollow">Plotly</a> to display 3D pointclouds works great in Jupyter.</p>
<p dir="auto">Plotly seems to render client-sided, unlike Open3D Web Visualizer which renders host-sided and streams jpg sequences, which strains the Pi's both CPU and WIFI.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Dumping Scans to USB Storage</h2><a id="user-content-dumping-scans-to-usb-storage" aria-label="Permalink: Dumping Scans to USB Storage" href="#dumping-scans-to-usb-storage"></a></p>
<ol dir="auto">
<li>Clone the Repo and run the installer:
<div data-snippet-clipboard-copy-content="cd /home/pi/PiLiDAR
git clone https://github.com/LaserBorg/usb_dump --depth 1
cd usb_dump &amp;&amp; chmod +x install.sh &amp;&amp; ./install.sh &quot;$(pwd)&quot;"><pre><code>cd /home/pi/PiLiDAR
git clone https://github.com/LaserBorg/usb_dump --depth 1
cd usb_dump &amp;&amp; chmod +x install.sh &amp;&amp; ./install.sh "$(pwd)"
</code></pre></div>
</li>
<li>Create the config file:
<div data-snippet-clipboard-copy-content="echo '{&quot;source_directories&quot;: [&quot;/home/pi/PiLiDAR/scans&quot;], &quot;target_root_directory&quot;: null}' > usbdump.json"><pre><code>echo '{"source_directories": ["/home/pi/PiLiDAR/scans"], "target_root_directory": null}' &gt; usbdump.json
</code></pre></div>
</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Troubleshoot USB_dump:</h3><a id="user-content-troubleshoot-usb_dump" aria-label="Permalink: Troubleshoot USB_dump:" href="#troubleshoot-usb_dump"></a></p>
<ul dir="auto">
<li>
<p dir="auto">Check the log file:</p>

</li>
<li>
<p dir="auto">to uninstall the service, run</p>
<div data-snippet-clipboard-copy-content="chmod +x uninstall.sh &amp;&amp; ./uninstall.sh"><pre><code>chmod +x uninstall.sh &amp;&amp; ./uninstall.sh
</code></pre></div>
</li>
<li>
<p dir="auto">if the mount point is still persistend after being removed, just delete them.</p>
<div data-snippet-clipboard-copy-content="sudo rm -rf /media/pi/<your device name>"><pre><code>sudo rm -rf /media/pi/&lt;your device name&gt;
</code></pre></div>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Troubleshooting</h2><a id="user-content-troubleshooting" aria-label="Permalink: Troubleshooting" href="#troubleshooting"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Windows Serial Driver</h3><a id="user-content-windows-serial-driver" aria-label="Permalink: Windows Serial Driver" href="#windows-serial-driver"></a></p>
<p dir="auto">get <a href="https://files.waveshare.com/upload/6/63/CP210x_Universal_Windows_Driver.zip" rel="nofollow">CP210x_Universal_Windows_Driver.zip</a> here:<br>
<a href="https://www.waveshare.com/wiki/DTOF_LIDAR_STL27L#Software_Download" rel="nofollow">https://www.waveshare.com/wiki/DTOF_LIDAR_STL27L#Software_Download</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">RPi.GPIO RuntimeError: Failed to add edge detection</h3><a id="user-content-rpigpio-runtimeerror-failed-to-add-edge-detection" aria-label="Permalink: RPi.GPIO RuntimeError: Failed to add edge detection" href="#rpigpio-runtimeerror-failed-to-add-edge-detection"></a></p>
<p dir="auto">current bookworm version has deprecated sysfs GPIO interface removed.<br>
use <a href="https://pypi.org/project/rpi-lgpio/" rel="nofollow">LGPIO</a> as described <a href="https://raspberrypi.stackexchange.com/questions/147332/rpi-gpio-runtimeerror-failed-to-add-edge-detection" rel="nofollow">here</a>:</p>
<div data-snippet-clipboard-copy-content="sudo apt remove python3-rpi.gpio
sudo apt update

sudo apt install python3-rpi-lgpio

# or in an env without system packages:
pip3 install rpi-lgpio"><pre><code>sudo apt remove python3-rpi.gpio
sudo apt update

sudo apt install python3-rpi-lgpio

# or in an env without system packages:
pip3 install rpi-lgpio
</code></pre></div>
<p dir="auto">LGPIO creates temp-files (<a href="https://github.com/joan2937/lg/issues/12" data-hovercard-type="issue" data-hovercard-url="/joan2937/lg/issues/12/hovercard">issue</a>) like ".lgd-nfy0". gpio-interrupt.py executes 'export LG_WD=/tmp' to set it's CWD.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">poor performance of VS Code on Raspberry Pi</h3><a id="user-content-poor-performance-of-vs-code-on-raspberry-pi" aria-label="Permalink: poor performance of VS Code on Raspberry Pi" href="#poor-performance-of-vs-code-on-raspberry-pi"></a></p>
<p dir="auto">disable hardware acceleration for VS Code (<a href="https://code.visualstudio.com/docs/setup/raspberry-pi" rel="nofollow">source</a>)</p>
<div data-snippet-clipboard-copy-content="Preferences: Configure Runtime Arguments  
Set &quot;disable-hardware-acceleration&quot;: true"><pre><code>Preferences: Configure Runtime Arguments  
Set "disable-hardware-acceleration": true
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">pye57 on Raspberry Pi</h3><a id="user-content-pye57-on-raspberry-pi" aria-label="Permalink: pye57 on Raspberry Pi" href="#pye57-on-raspberry-pi"></a></p>
<p dir="auto">there is no wheel for arm64. build requires libxerces:</p>
<div data-snippet-clipboard-copy-content="sudo apt install libxerces-c-dev
pip install pye57"><pre><code>sudo apt install libxerces-c-dev
pip install pye57
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">add WIFI via SSH</h3><a id="user-content-add-wifi-via-ssh" aria-label="Permalink: add WIFI via SSH" href="#add-wifi-via-ssh"></a></p>
<p dir="auto"><a href="https://u-labs.de/portal/raspberry-pi-wlan-verbindung-nachtraeglich-einrichten-oder-aendern-so-geht-es-grafisch-konsole/" rel="nofollow">tutorial</a>:</p>
<div data-snippet-clipboard-copy-content="sudo nano /etc/wpa_supplicant/wpa_supplicant.conf

# make sure country code is set:
country=DE"><pre><code>sudo nano /etc/wpa_supplicant/wpa_supplicant.conf

# make sure country code is set:
country=DE
</code></pre></div>
<p dir="auto">add entry to wpa_supplicant.conf</p>
<div data-snippet-clipboard-copy-content="sudo wpa_passphrase &quot;YOUR_SSID&quot; &quot;YOUR_PASSWORD&quot; | sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf"><pre><code>sudo wpa_passphrase "YOUR_SSID" "YOUR_PASSWORD" | sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">references:</h2><a id="user-content-references" aria-label="Permalink: references:" href="#references"></a></p>
<p dir="auto">inspirations</p>
<ul dir="auto">
<li><a href="https://github.com/henjin0/LIDAR_LD06_python_loder">LIDAR_LD06_python_loder</a> and <a href="https://github.com/henjin0/Lidar_LD06_for_Arduino">Lidar_LD06_for_Arduino</a> by Inoue Minoru ("<a href="https://github.com/henjin0">henjin0</a>")</li>
<li><a href="https://github.com/ShaunPrice/360-camera">ShaunPrice's</a> StereoPi-supporting fork of <a href="https://github.com/BrianBock/360-camera">BrianBock's</a> 360-camera script (Article on <a href="https://medium.com/stereopi/stitching-360-panorama-with-raspberry-pi-cm3-stereopi-and-two-fisheye-cameras-step-by-step-guide-aeca3ff35871" rel="nofollow">Medium</a>)</li>
</ul>
<p dir="auto">another Lidar implementation in Python</p>
<ul dir="auto">
<li><a href="https://github.com/Paradoxdruid/pyLIDAR">pyLIDAR</a></li>
</ul>
<p dir="auto">hardware PWM using <a href="https://gpiozero.readthedocs.io/en/stable/migrating_from_rpigpio.html#pwm-pulse-width-modulation" rel="nofollow">GPIOZero</a></p>
<p dir="auto">ICP implementations:</p>
<ul dir="auto">
<li>Aeva <a href="https://github.com/aevainc/Doppler-ICP/blob/main/README.md">Doppler-ICP</a></li>
<li>Photogrammetry &amp; Robotics Bonn <a href="https://github.com/PRBonn/kiss-icp">KISS-ICP</a> and <a href="https://github.com/PRBonn/lidar-visualizer">Lidar-Visualizer</a></li>
</ul>
<p dir="auto">3D Demo Data for global registration, ICP, meshing etc.:</p>
<ul dir="auto">
<li><a href="https://github.com/isl-org/open3d_downloads/releases/download/20220201-data/BunnyMesh.ply">BunnyMesh.ply</a> from <a href="https://github.com/isl-org/open3d_downloads/releases/tag/20220201-data">20220201-data</a></li>
<li><a href="https://github.com/isl-org/open3d_downloads/releases/download/20220301-data/DemoICPPointClouds.zip">DemoICPPointClouds.zip</a> from <a href="https://github.com/isl-org/open3d_downloads/releases/tag/20220301-data">20220301-data</a></li>
</ul>
<p dir="auto">Using a MOSFET for switching: <a href="https://elinux.org/RPi_GPIO_Interface_Circuits#Using_a_FET" rel="nofollow">tutorial</a></p>
<p dir="auto">A4988 Enable, Sleep and Reset <a href="https://www.youtube.com/watch?v=PMS5jY7RTjo" rel="nofollow">tutorial</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ssl.com: DCV bypass and issue fake certificates for any MX hostname (202 pts)]]></title>
            <link>https://bugzilla.mozilla.org/show_bug.cgi?id=1961406</link>
            <guid>43738485</guid>
            <pubDate>Sat, 19 Apr 2025 18:44:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1961406">https://bugzilla.mozilla.org/show_bug.cgi?id=1961406</a>, See on <a href="https://news.ycombinator.com/item?id=43738485">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="wrapper">

 


<main id="bugzilla-body" tabindex="-1">



<div id="main-inner">













<div id="module-categories">
        <p><span id="field-value-component">
      <div>
        <p><span id="component-name" tabindex="0" role="button" aria-haspopup="menu" aria-controls="component-info">CA Certificate Compliance
          
        </span></p>
      </div>
        </span>
    </p></div>






































<meta name="firefox-versions" content="{&quot;FIREFOX_AURORA&quot;:&quot;&quot;,&quot;FIREFOX_DEVEDITION&quot;:&quot;138.0b9&quot;,&quot;FIREFOX_ESR&quot;:&quot;128.9.0esr&quot;,&quot;FIREFOX_ESR115&quot;:&quot;115.22.0esr&quot;,&quot;FIREFOX_ESR_NEXT&quot;:&quot;&quot;,&quot;FIREFOX_NIGHTLY&quot;:&quot;139.0a1&quot;,&quot;LAST_MERGE_DATE&quot;:&quot;2025-03-31&quot;,&quot;LAST_RELEASE_DATE&quot;:&quot;2025-04-01&quot;,&quot;LAST_SOFTFREEZE_DATE&quot;:&quot;2025-03-27&quot;,&quot;LAST_STRINGFREEZE_DATE&quot;:&quot;2025-03-28&quot;,&quot;LATEST_FIREFOX_DEVEL_VERSION&quot;:&quot;138.0b9&quot;,&quot;LATEST_FIREFOX_OLDER_VERSION&quot;:&quot;3.6.28&quot;,&quot;LATEST_FIREFOX_RELEASED_DEVEL_VERSION&quot;:&quot;138.0b9&quot;,&quot;LATEST_FIREFOX_VERSION&quot;:&quot;137.0.2&quot;,&quot;NEXT_MERGE_DATE&quot;:&quot;2025-04-28&quot;,&quot;NEXT_RELEASE_DATE&quot;:&quot;2025-04-29&quot;,&quot;NEXT_SOFTFREEZE_DATE&quot;:&quot;2025-04-24&quot;,&quot;NEXT_STRINGFREEZE_DATE&quot;:&quot;2025-04-25&quot;}">



<div id="c0" data-comment-id="17449976"><p>User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0</p>
<p>Steps to reproduce:</p>
<p>SSL.com failed to conduct accurate domain validation control when utilizing the BR 3.2.2.4.14 DCV method (Email to DNS TXT Contact). <strong>It incorrectly marks the hostname of the approver's email address as a verified domain</strong>, which is completely erroneous.</p>
<h2>Steps to reproduce:</h2>
<ul>
<li>Navigate to <a href="https://dcv-inspector.com/" rel="nofollow">https://dcv-inspector.com</a> and click "Start Test". You will be redirected to a URL such as <a href="https://dcv-inspector.com/test/d2b4eee07de5efcb8598f0586cbf2690" rel="nofollow">https://dcv-inspector.com/test/d2b4eee07de5efcb8598f0586cbf2690</a>.</li>
<li>Create a TXT record for the domain <code>_validation-contactemail.d2b4eee07de5efcb8598f0586cbf2690.test.dcv-inspector.com</code> with the value <code>myusername@aliyun.com</code>. Here, aliyun.com is both a cloud provider and an email provider, similar to @Yahoo.com, @Gmail.com, or @iCloud.com.</li>
<li>Visit SSL.com and request a certificate for the domain <code>d2b4eee07de5efcb8598f0586cbf2690.test.dcv-inspector.com</code>. Then, select <code>myusername@aliyun.com</code> from the email approvers list.</li>
<li>Log in to <code>myusername@aliyun.com</code>, retrieve the email that contains the DCV random value, and finalize the DCV validation process.</li>
<li>SSL.com will add the domain name of the email address (the part after the <code>@</code>. in this case, aliyun.com) to your list of verified domains.</li>
<li>To obtain certificates for aliyun.com and <a href="http://www.aliyun.com/" rel="nofollow">www.aliyun.com</a>, initiate the certificate request. SSL.com will then issue certificates for both aliyun.com and <a href="http://www.aliyun.com/" rel="nofollow">www.aliyun.com</a>.</li>
</ul>
<h2>Affected Certificates</h2>
<ul>
<li><a href="https://crt.sh/?id=17926238129" rel="nofollow">https://crt.sh/?id=17926238129</a></li>
</ul>
<p>Actual results:</p>
<p>SSL.com verified and issued aliyun.com.<br>
I'm not administrator、admin、hostmaster、postmaster、or webmaster of aliyun.com. and also, <code>_validation-contactemail</code> with the value of my email is never configured for <code>aliyun.com</code>.<br>
So,  this is wrong.</p>
<p>Expected results:</p>
<p>Don't list the email domain into verified domains.</p>
</div><div id="a1145_771641"><p>Summary: SSL.com: DCV bypass and issue certificates for any MX hostname → SSL.com: DCV bypass and issue fake certificates for any MX hostname</p></div><div id="c1"><p>SSL.com&nbsp;acknowledges this bug report and we are investigating further.</p></div><div id="c2"><p>Out of an abundance of caution, we have disabled domain validation method 3.2.2.4.14 that was used in the bug report for all SSL/TLS certificates while we investigate. We will provide a preliminary report on or before 2025-04-21.</p>
</div>



</div> 
</main> 
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Don't force your kids to do math (210 pts)]]></title>
            <link>https://blog.avocados.ovh/posts/how-to-force-your-kids-to-do-math/</link>
            <guid>43738195</guid>
            <pubDate>Sat, 19 Apr 2025 18:08:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.avocados.ovh/posts/how-to-force-your-kids-to-do-math/">https://blog.avocados.ovh/posts/how-to-force-your-kids-to-do-math/</a>, See on <a href="https://news.ycombinator.com/item?id=43738195">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div><p>Well… you probably shouldn’t.</p><p>This is my one rule: if my son ever says he doesn’t want to do math, we simply stop. No arguing, no bribing, no pushing. We do something else instead.</p><p>Why? Because math is not a chore—it’s a way of experiencing the world. Just like tasting new food, enjoying music, or feeling amazed by nature, math should always feel like play, never like work.</p><p><strong>Kids are born explorers</strong>. They naturally want to discover new things, including math. My main goal is simply to keep that natural curiosity alive and growing.</p><p>Before my son could even talk—as every parenting book suggests—I talked to him constantly. Counting stairs, naming colors, explaining everything around us. I emphasized numbers because I genuinely enjoy them. And that’s perhaps the most important lesson I’ve learned: <strong>children sense your true passions and naturally want to join in</strong>.</p><p>Just play. <a href="https://amzn.to/3RqZNWY">A simple wooden game</a> with numbers and colored bars was our playground. At first, it was sorting by colors or matching bars to numbers. Attention spans started short, a few moments here and there. But gradually, these moments grew into twenty or even thirty delightful minutes.</p><p>Watching him connect five bars to the numeral ‘5’ was magical—it was the spark of mathematical abstraction. Soon, we created addition games and countless imaginative scenarios. I think I enjoyed inventing these simple, playful activities just as much as he did.</p><p>To keep math exciting, we built it into stories. For a while, I drew a burning house next to a 3x3 grid with missing numbers, sums waiting to be solved. Each correct answer earned him a blue pencil to draw water, putting out fires—he loved pretending to be a fireman. Without realizing it, he was doing algebra. Train rides became great opportunities for these little games, free from distractions. Math is everywhere if you look for it—calculating how much he could buy with 20 euros at the toy store, counting steps to reach a certain location, comparing which fruit is heavier at the market, or even timing how fast he could run across the park. You just need to open your child’s eyes to see math in daily life. Repetition is key!</p><p>The games evolved as he grew older. Card games like <a href="https://amzn.to/42CcKSV">Rat-a-Tat Cat</a> also became math games—adding card values became natural. Soon, calculations like 14 + 11 happened effortlessly in his head.</p><p><strong>Repetition is key!</strong> Time flying by is probably the sneakiest thing with kids. With our busy jobs, household chores, and daily demands, it’s easy to forget to spend meaningful time with your children. I have an internal KPI: if in the last three days I haven’t spent at least 30 minutes playing with my kid, there’s something seriously wrong.</p><p>Yet, <strong>the hardest part remains balancing passion and pressure</strong>. I deeply love math, coding, music, and sports, and naturally, I want to share these joys. But there’s a thin line between sharing and imposing. Children don’t always express their discomfort openly—family dynamics can be subtle and easily overlooked. Actually, this is one of the hardest things as a parent. It should be fine, but sometimes we don’t realize that sharing our passions might actually be about our own ego. <strong>Understanding this is challenging, and we all fail at some point</strong>. Still, it’s important to keep asking ourselves the question.</p><p>In fact, we stopped regularly engaging with structured math games before he started school at six, as his interests naturally shifted toward other exciting activities like building paper airplanes, painting, and drawing—things that didn’t interest him a year earlier. He’s probably above average at math, but that isn’t the point. What I genuinely cherish now is watching his curiosity spark questions about infinity. He wonders about adding infinities together and eagerly discusses different sizes of infinity with me, imagining them as creatures that can even ’eat’ each other.</p><p>Because, in the end, <strong>the real goal isn’t math itself</strong>—it’s nurturing a child’s natural eagerness to learn, explore, and wonder about the world.</p><p>Don’t force math.</p></div></article></div></div>]]></description>
        </item>
    </channel>
</rss>