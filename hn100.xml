<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 13 Dec 2024 01:30:12 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Carta is making it too difficult to cancel subscriptions, some founders say (102 pts)]]></title>
            <link>https://techcrunch.com/2024/12/12/carta-is-making-it-too-difficult-to-cancel-subscriptions-some-founders-say/</link>
            <guid>42404144</guid>
            <pubDate>Thu, 12 Dec 2024 22:37:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2024/12/12/carta-is-making-it-too-difficult-to-cancel-subscriptions-some-founders-say/">https://techcrunch.com/2024/12/12/carta-is-making-it-too-difficult-to-cancel-subscriptions-some-founders-say/</a>, See on <a href="https://news.ycombinator.com/item?id=42404144">Hacker News</a></p>
Couldn't get https://techcrunch.com/2024/12/12/carta-is-making-it-too-difficult-to-cancel-subscriptions-some-founders-say/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA["Rules" that terminal programs follow (153 pts)]]></title>
            <link>https://jvns.ca/blog/2024/11/26/terminal-rules/</link>
            <guid>42401011</guid>
            <pubDate>Thu, 12 Dec 2024 17:09:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jvns.ca/blog/2024/11/26/terminal-rules/">https://jvns.ca/blog/2024/11/26/terminal-rules/</a>, See on <a href="https://news.ycombinator.com/item?id=42401011">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
     <p>Recently I’ve been thinking about how everything that happens in the terminal
is some combination of:</p>
<ol>
<li>Your <strong>operating system</strong>’s job</li>
<li>Your <strong>shell</strong>’s job</li>
<li>Your <strong>terminal emulator</strong>’s job</li>
<li>The job of <strong>whatever program you happen to be running</strong> (like <code>top</code> or <code>vim</code> or <code>cat</code>)</li>
</ol>
<p>The first three (your operating system, shell, and terminal emulator) are all kind of
known quantities – if you’re using bash in GNOME Terminal on Linux, you can
more or less reason about how how all of those things interact, and some of
their behaviour is standardized by POSIX.</p>
<p>But the fourth one (“whatever program you happen to be running”) feels like it
could do ANYTHING. How are you supposed to know how a program is going to
behave?</p>
<p>This post is kind of long so here’s a quick table of contents:</p>
<ul>
<li><a href="#programs-behave-surprisingly-consistently">programs behave surprisingly consistently</a></li>
<li><a href="#these-are-meant-to-be-descriptive-not-prescriptive">these are meant to be descriptive, not prescriptive</a></li>
<li><a href="#it-s-not-always-obvious-which-rules-are-the-program-s-responsibility-to-implement">it’s not always obvious which “rules” are the program’s responsibility to implement</a></li>
<li><a href="#rule-1-noninteractive-programs-should-quit-when-you-press-ctrl-c">rule 1: noninteractive programs should quit when you press <code>Ctrl-C</code></a></li>
<li><a href="#rule-2-tuis-should-quit-when-you-press-q">rule 2: TUIs should quit when you press <code>q</code></a></li>
<li><a href="#rule-3-repls-should-quit-when-you-press-ctrl-d-on-an-empty-line">rule 3: REPLs should quit when you press <code>Ctrl-D</code> on an empty line</a></li>
<li><a href="#rule-4-don-t-use-more-than-16-colours">rule 4: don’t use more than 16 colours</a></li>
<li><a href="#rule-5-vaguely-support-readline-keybindings">rule 5: vaguely support readline keybindings</a></li>
<li><a href="#rule-5-1-ctrl-w-should-delete-the-last-word">rule 5.1: <code>Ctrl-W</code> should delete the last word</a></li>
<li><a href="#rule-6-disable-colours-when-writing-to-a-pipe">rule 6: disable colours when writing to a pipe</a></li>
<li><a href="#rule-7-means-stdin-stdout">rule 7: <code>-</code> means stdin/stdout</a></li>
<li><a href="#these-rules-take-a-long-time-to-learn">these “rules” take a long time to learn</a></li>
</ul>
<h3 id="programs-behave-surprisingly-consistently">programs behave surprisingly consistently</h3>
<p>As far as I know, there are no real standards for how programs in the terminal
should behave – the closest things I know of are:</p>
<ul>
<li>POSIX, which mostly dictates how your terminal emulator / OS / shell should
work together. I think it does specify a few things about how core utilities like
<code>cp</code> should work but AFAIK it doesn’t have anything to say about how for
example <code>htop</code> should behave.</li>
<li>these <a href="https://clig.dev/">command line interface guidelines</a></li>
</ul>
<p>But even though there are no standards, in my experience programs in the
terminal behave in a pretty consistent way. So I wanted to write down a list of
“rules” that in my experience programs mostly follow.</p>
<h3 id="these-are-meant-to-be-descriptive-not-prescriptive">these are meant to be descriptive, not prescriptive</h3>
<p>My goal here isn’t to convince authors of terminal programs that they <em>should</em>
follow any of these rules. There are lots of exceptions to these and often
there’s a good reason for those exceptions.</p>
<p>But it’s very useful for me to know what behaviour to expect from a random new
terminal program that I’m using. Instead of “uh, programs could do literally
anything”, it’s “ok, here are the basic rules I expect, and then I can keep a
short mental list of exceptions”.</p>
<p>So I’m just writing down what I’ve observed about how programs behave in my 20
years of using the terminal, why I think they behave that way, and some
examples of cases where that rule is “broken”.</p>
<h3 id="it-s-not-always-obvious-which-rules-are-the-program-s-responsibility-to-implement">it’s not always obvious which “rules” are the program’s responsibility to implement</h3>
<p>There are a bunch of common conventions that I think are pretty clearly the
program’s responsibility to implement, like:</p>
<ul>
<li>config files should go in <code>~/.BLAHrc</code> or <code>~/.config/BLAH/FILE</code> or <code>/etc/BLAH/</code> or something</li>
<li><code>--help</code> should print help text</li>
<li>programs should print “regular” output to stdout and errors to stderr</li>
</ul>
<p>But in this post I’m going to focus on things that it’s not 100% obvious are
the program’s responsibility. For example it feels to me like a “law of nature”
that pressing <code>Ctrl-D</code> should quit a REPL, but programs often
need to explicitly implement support for it – even though <code>cat</code> doesn’t need
to implement <code>Ctrl-D</code> support, <code>ipython</code> <a href="https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/shortcuts/prompt.py#L824-L837">does</a>. (more about that in “rule 3” below)</p>
<p>Understanding which things are the program’s responsibility makes it much less
surprising when different programs’ implementations are slightly different.</p>
<h3 id="rule-1-noninteractive-programs-should-quit-when-you-press-ctrl-c">rule 1: noninteractive programs should quit when you press <code>Ctrl-C</code></h3>
<p>The main reason for this rule is that noninteractive programs will quit by
default on <code>Ctrl-C</code> if they don’t set up a <code>SIGINT</code> signal handler, so this is
kind of a “you should act like the default” rule.</p>
<p>Something that trips a lot of people up is that this doesn’t apply to
<strong>interactive</strong> programs like <code>python3</code> or <code>bc</code> or <code>less</code>. This is because in
an interactive program, <code>Ctrl-C</code> has a different job – if the program is
running an operation (like for example a search in <code>less</code> or some Python code
in <code>python3</code>), then <code>Ctrl-C</code> will interrupt that operation but not stop the
program.</p>
<p>As an example of how this works in an interactive program: here’s the code <a href="https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/key_binding/bindings/vi.py#L2225">in prompt-toolkit</a> (the library that iPython uses for handling input)
that aborts a search when you press <code>Ctrl-C</code>.</p>
<h3 id="rule-2-tuis-should-quit-when-you-press-q">rule 2: TUIs should quit when you press <code>q</code></h3>
<p>TUI programs (like <code>less</code> or <code>htop</code>) will usually quit when you press <code>q</code>.</p>
<p>This rule doesn’t apply to any program where pressing <code>q</code> to quit wouldn’t make
sense, like <code>tmux</code> or text editors.</p>
<h3 id="rule-3-repls-should-quit-when-you-press-ctrl-d-on-an-empty-line">rule 3: REPLs should quit when you press <code>Ctrl-D</code> on an empty line</h3>
<p>REPLs (like <code>python3</code> or <code>ed</code>) will usually quit when you press <code>Ctrl-D</code> on an
empty line. This rule is similar to the <code>Ctrl-C</code> rule – the reason for this is
that by default if you’re running a program (like <code>cat</code>) in “cooked mode”, then
the operating system will return an <code>EOF</code> when you press <code>Ctrl-D</code> on an empty
line.</p>
<p>Most of the REPLs I use (sqlite3, python3, fish, bash, etc) don’t actually use
cooked mode, but they all implement this keyboard shortcut anyway to mimic the
default behaviour.</p>
<p>For example, here’s <a href="https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/shortcuts/prompt.py#L824-L837">the code in prompt-toolkit</a>
that quits when you press Ctrl-D, and here’s <a href="https://github.com/bminor/bash/blob/6794b5478f660256a1023712b5fc169196ed0a22/lib/readline/readline.c#L658-L672">the same code in readline</a>.</p>
<p>I actually thought that this one was a “Law of Terminal Physics” until very
recently because I’ve basically never seen it broken, but you can see that it’s
just something that each individual input library has to implement in the links
above.</p>
<p>Someone pointed out that the Erlang REPL does not quit when you press <code>Ctrl-D</code>,
so I guess not every REPL follows this “rule”.</p>
<h3 id="rule-4-don-t-use-more-than-16-colours">rule 4: don’t use more than 16 colours</h3>
<p>Terminal programs rarely use colours other than the base 16 ANSI colours. This
is because if you specify colours with a hex code, it’s very likely to clash
with some users’ background colour. For example if I print out some text as
<code>#EEEEEE</code>, it would be almost invisible on a white background, though it would
look fine on a dark background.</p>
<p>But if you stick to the default 16 base colours, you have a much better chance
that the user has configured those colours in their terminal emulator so that
they work reasonably well with their background color. Another reason to stick
to the default base 16 colours is that it makes less assumptions about what
colours the terminal emulator supports.</p>
<p>The only programs I usually see breaking this “rule” are text editors, for
example Helix by default will use a custom colorscheme with this very nice
purple background which is not a default ANSI colour. It seems fine for Helix
to break this rule since Helix isn’t a “core” program and I assume any Helix
user who doesn’t like that colorscheme will just change the theme.</p>
<h3 id="rule-5-vaguely-support-readline-keybindings">rule 5: vaguely support readline keybindings</h3>
<p>Almost every program I use supports <code>readline</code> keybindings if it would make
sense to do so. For example, here are a bunch of different programs and a link
to where they define <code>Ctrl-E</code> to go to the end of the line:</p>
<ul>
<li>ipython (<a href="https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/key_binding/bindings/emacs.py#L72">Ctrl-E defined here</a>)</li>
<li>atuin (<a href="https://github.com/atuinsh/atuin/blob/a67cfc82fe0dc907a01f07a0fd625701e062a33b/crates/atuin/src/command/client/search/interactive.rs#L407">Ctrl-E defined here</a>)</li>
<li>fzf (<a href="https://github.com/junegunn/fzf/blob/bb55045596d6d08445f3c6d320c3ec2b457462d1/src/terminal.go#L611">Ctrl-E defined here</a>)</li>
<li>zsh (<a href="https://github.com/zsh-users/zsh/blob/86d5f24a3d28541f242eb3807379301ea976de87/Src/Zle/zle_bindings.c#L94">Ctrl-E defined here</a>)</li>
<li>fish (<a href="https://github.com/fish-shell/fish-shell/blob/99fa8aaaa7956178973150a03ce4954ab17a197b/share/functions/fish_default_key_bindings.fish#L43">Ctrl-E defined here</a>)</li>
<li>tmux’s command prompt (<a href="https://github.com/tmux/tmux/blob/ae8f2208c98e3c2d6e3fe4cad2281dce8fd11f31/key-bindings.c#L490">Ctrl-E defined here</a>)</li>
</ul>
<p>None of those programs actually uses <code>readline</code> directly, they just sort of
mimic emacs/readline keybindings. They don’t always mimic them <em>exactly</em>: for
example atuin seems to use <code>Ctrl-A</code> as a prefix, so <code>Ctrl-A</code> doesn’t go to the
beginning of the line.</p>
<p>Also all of these programs seem to implement their own internal cut and paste
buffers so you can delete a line with <code>Ctrl-U</code> and then paste it with <code>Ctrl-Y</code>.</p>
<p>The exceptions to this are:</p>
<ul>
<li>some programs (like <code>git</code>, <code>cat</code>, and <code>nc</code>) don’t have any line editing support at all (except for backspace, <code>Ctrl-W</code>, and <code>Ctrl-U</code>)</li>
<li>as usual text editors are an exception, every text editor has its own
approach to editing text</li>
</ul>
<p>I wrote more about this “what keybindings does a program support?” question in
<a href="https://jvns.ca/blog/2024/07/08/readline/">entering text in the terminal is complicated</a>.</p>
<h3 id="rule-5-1-ctrl-w-should-delete-the-last-word">rule 5.1: Ctrl-W should delete the last word</h3>
<p>I’ve never seen a program (other than a text editor) where <code>Ctrl-W</code> <em>doesn’t</em>
delete the last word. This is similar to the <code>Ctrl-C</code> rule – by default if a
program is in “cooked mode”, the OS will delete the last word if you press
<code>Ctrl-W</code>, and delete the whole line if you press <code>Ctrl-U</code>. So usually programs
will imitate that behaviour.</p>
<p>I can’t think of any exceptions to this other than text editors but if there
are I’d love to hear about them!</p>
<h3 id="rule-6-disable-colours-when-writing-to-a-pipe">rule 6: disable colours when writing to a pipe</h3>
<p>Most programs will disable colours when writing to a pipe. For example:</p>
<ul>
<li><code>rg blah</code> will highlight all occurrences of <code>blah</code> in the output, but if the
output is to a pipe or a file, it’ll turn off the highlighting.</li>
<li><code>ls --color=auto</code> will use colour when writing to a terminal, but not when
writing to a pipe</li>
</ul>
<p>Both of those programs will also format their output differently when writing
to the terminal: <code>ls</code> will organize files into columns, and ripgrep will group
matches with headings.</p>
<p>If you want to force the program to use colour (for example because you want to
look at the colour), you can use <code>unbuffer</code> to force the program’s output to be
a tty like this:</p>
<pre><code>unbuffer rg blah |  less -R
</code></pre>
<p>I’m sure that there are some programs that “break” this rule but I can’t think
of any examples right now. Some programs have an <code>--color</code> flag that you can
use to force colour to be on, in the example above you could also do <code>rg --color=always | less -R</code>.</p>
<h3 id="rule-7-means-stdin-stdout">rule 7: <code>-</code> means stdin/stdout</h3>
<p>Usually if you pass <code>-</code> to a program instead of a filename, it’ll read from
stdin or write to stdout (whichever is appropriate). For example, if you want
to format the Python code that’s on your clipboard with <code>black</code> and then copy
it, you could run:</p>
<pre><code>pbpaste | black - | pbcopy
</code></pre>
<p>(<code>pbpaste</code> is a Mac program, you can do something similar on Linux with <code>xclip</code>)</p>
<p>My impression is that most programs implement this if it would make sense and I
can’t think of any exceptions right now, but I’m sure there are many
exceptions.</p>
<h3 id="these-rules-take-a-long-time-to-learn">these “rules” take a long time to learn</h3>
<p>These rules took me a long time for me to learn because I had to:</p>
<ol>
<li>learn that the rule applied anywhere at all ("<code>Ctrl-C</code> will exit programs")</li>
<li>notice some exceptions (“okay, <code>Ctrl-C</code> will exit <code>find</code> but not <code>less</code>”)</li>
<li>subconsciously figure out what the pattern is ("<code>Ctrl-C</code> will generally quit
noninteractive programs, but in interactive programs it might interrupt the
current operation instead of quitting the program")</li>
<li>eventually maybe formulate it into an explicit rule that I know</li>
</ol>
<p>A lot of my understanding of the terminal is honestly still in the
“subconscious pattern recognition” stage. The only reason I’ve been taking the
time to make things explicit at all is because I’ve been trying to explain how
it works to others. Hopefully writing down these “rules” explicitly will make
learning some of this stuff a little bit faster for others.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft Recall still storing credit card, social security numbers (153 pts)]]></title>
            <link>https://www.tomshardware.com/software/windows/microsoft-recall-screenshots-credit-cards-and-social-security-numbers-even-with-the-sensitive-information-filter-enabled</link>
            <guid>42400935</guid>
            <pubDate>Thu, 12 Dec 2024 17:01:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomshardware.com/software/windows/microsoft-recall-screenshots-credit-cards-and-social-security-numbers-even-with-the-sensitive-information-filter-enabled">https://www.tomshardware.com/software/windows/microsoft-recall-screenshots-credit-cards-and-social-security-numbers-even-with-the-sensitive-information-filter-enabled</a>, See on <a href="https://news.ycombinator.com/item?id=42400935">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">

<section>
<div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:320/975UqEyQpEE6RNxsQCVvXL.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:480/975UqEyQpEE6RNxsQCVvXL.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:650/975UqEyQpEE6RNxsQCVvXL.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:970/975UqEyQpEE6RNxsQCVvXL.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:1024/975UqEyQpEE6RNxsQCVvXL.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:1200/975UqEyQpEE6RNxsQCVvXL.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:1920/975UqEyQpEE6RNxsQCVvXL.jpg.webp 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:320/975UqEyQpEE6RNxsQCVvXL.jpg" alt="Computer with recall" srcset="https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:320/975UqEyQpEE6RNxsQCVvXL.jpg 320w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:480/975UqEyQpEE6RNxsQCVvXL.jpg 480w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:650/975UqEyQpEE6RNxsQCVvXL.jpg 650w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:970/975UqEyQpEE6RNxsQCVvXL.jpg 970w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:1024/975UqEyQpEE6RNxsQCVvXL.jpg 1024w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:1200/975UqEyQpEE6RNxsQCVvXL.jpg 1200w, https://cdn.mos.cms.futurecdn.net/v2/t:0,l:0,cw:0,ch:0,q:80,w:1920/975UqEyQpEE6RNxsQCVvXL.jpg 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/975UqEyQpEE6RNxsQCVvXL.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/975UqEyQpEE6RNxsQCVvXL.jpg" data-pin-nopin="true" fetchpriority="high" crossorigin="anonymous">
</picture>
</div>
<meta itemprop="url" content="https://cdn.mos.cms.futurecdn.net/975UqEyQpEE6RNxsQCVvXL.jpg">
<meta itemprop="height" content="600">
<meta itemprop="width" content="338">
<figcaption itemprop="caption description">
<span itemprop="copyrightHolder">(Image credit: Shutterstock (1025458759))</span>
</figcaption>
</div>

<div id="article-body">
<p><a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/microsoft" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.tomshardware.com/tag/microsoft">Microsoft</a>’s Recall feature recently made its way back to Windows Insiders after having been <a data-analytics-id="inline-link" href="https://www.tomshardware.com/software/windows/microsoft-recalls-recall-controversial-ai-feature-wont-be-in-copilot-windows-build-at-launch" data-before-rewrite-localise="https://www.tomshardware.com/software/windows/microsoft-recalls-recall-controversial-ai-feature-wont-be-in-copilot-windows-build-at-launch">pulled from test builds</a> back in June, due to security and privacy concerns. The new version of Recall encrypts the screens it captures and, by default, it has a “Filter sensitive information,” setting enabled, which is supposed to prevent it from recording any app or website that is showing credit card numbers, social security numbers, or other important financial / personal info. In my tests, however, this filter only worked in some situations (on two e-commerce sites), leaving a gaping hole in the protection it promises.</p><p>When I entered a credit card number and a random username / password into a Windows Notepad window, Recall captured it, despite the fact that I had text such as “Capital One Visa” right next to the numbers. Similarly, when I filled out a loan application PDF in Microsoft Edge, entering a social <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/security" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.tomshardware.com/tag/security">security</a> number, name and DOB, Recall captured that. (Note that all info in these screenshots is made up).</p><div aria-hidden="false" data-swipeable="true" data-hydrate="true" id="slice-container-imageGallery-tbEeKQ57ATUGUnUKRir5vA-6YUdnebfNx0BJVdkqJwiIKJ8I0O4LFxp"><figure data-bordeaux-image-check="false"><div><picture data-hydrate="true"><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-320-80.png.webp 320w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-1200-80.png.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" data-normal="https://vanilla.futurecdn.net/cyclingnews/media/img/missing-image.svg" data-original-mos="https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5.png" data-pin-nopin="true" data-slice-image="true"><source type="image/png" srcset="https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-320-80.png 320w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5-1200-80.png 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" data-normal="https://vanilla.futurecdn.net/cyclingnews/media/img/missing-image.svg" data-original-mos="https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5.png" data-pin-nopin="true" data-slice-image="true"><img src="https://vanilla.futurecdn.net/cyclingnews/media/img/missing-image.svg" alt="Microsoft Recall captures social security number" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-normal="https://vanilla.futurecdn.net/cyclingnews/media/img/missing-image.svg" data-original-mos="https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/NGaToUky43YpqH5hUZFud5.png" data-pin-nopin="true" data-slice-image="true"></picture></div><figcaption><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure></div><p>I also created my own HTML page with a web form that said, explicitly, “enter your credit card number below.” The form had fields for Credit card type, number, CVC and expiration date. I thought this might trigger Recall to block it, but the software captured an image of my form filled out, complete with the credit card data.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-320-80.png.webp 320w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-1200-80.png.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-320-80.png" alt="Microsoft Recall captures credit card number from web page" srcset="https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-320-80.png 320w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC-1200-80.png 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/wh3ciFL8EPHHxqAch39dAC.png"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>On the bright side, Recall refused to capture the credit card fields when I went to the payment pages of two online stores – Pimoroni and Adafruit. In both cases, it only captured either the screens before and after the credit card entry form or a blank form.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-320-80.png.webp 320w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-1200-80.png.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-320-80.png" alt="Pimoroni Checkout page" srcset="https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-320-80.png 320w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF-1200-80.png 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/fY3PK77NpFXTdxAUC35STF.png"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>So, when it came to real-world commerce sites that I visited, Recall got it right. However, what my experiment proves is that it’s pretty much impossible for Microsoft’s AI filter to identify every situation where sensitive information is on screen and avoid capturing it. My examples were designed to test the filter, but they’re not fringe cases. Real people do put sensitive personal information into PDF forms. They write things down or copy and paste them into text files and then key them into websites that don’t look like typical shopping sites.</p><p>I asked Microsoft for a comment and the company responded by pointing me to part of its <a data-analytics-id="inline-link" href="https://www.google.com/url?q=https://blogs.windows.com/windows-insider/2024/11/22/previewing-recall-with-click-to-do-on-copilot-pcs-with-windows-insiders-in-the-dev-channel/&amp;sa=D&amp;source=editors&amp;ust=1734023528877028&amp;usg=AOvVaw0YCoKJWhOGP5TcUKiKYE97" data-url="https://www.google.com/url?q=https://blogs.windows.com/windows-insider/2024/11/22/previewing-recall-with-click-to-do-on-copilot-pcs-with-windows-insiders-in-the-dev-channel/&amp;sa=D&amp;source=editors&amp;ust=1734023528877028&amp;usg=AOvVaw0YCoKJWhOGP5TcUKiKYE97" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>blog post on the Preview Recall</u></a>, which states:</p><p><em>“We’ve updated Recall to detect sensitive information like credit card details, passwords, and personal identification numbers. When detected, Recall won’t save or store those snapshots. We’ll continue to improve this functionality, and if you find sensitive information that should be filtered out, for your context, language, or geography, please let us know through Feedback Hub. We’ve also provided an option in Settings that we encourage you to enable that will anonymously share the apps and sites you prefer to be excluded from Recall to help us improve the product.”</em></p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-tbEeKQ57ATUGUnUKRir5vA"><section><p>Get Tom's Hardware's best news and in-depth reviews, straight to your inbox.</p></section></div><p>So the company is promising that Recall will get better at filtering out sensitive information over time. But how much better it will get and how many holes will still remain is an open question.</p><h2 id="how-recall-works-3">How Recall Works</h2><p>Recall’s purpose is to provide searchable memory of all your computer activity, to become your one-stop digital memory. So the feature, which is only available on Copilot+ PCs, takes screenshots of everything you do on your PC, arranges those pictures in a timeline, and makes them searchable using natural language search. If you forgot what website you were visiting when you were considering buying a red sofa, you can search “sofa” and it should pull up a picture of the exact page you were on. Because it’s AI-powered, it also reads the text within images and lets you copy it.</p><p>The concern with Recall is that it’s keeping a digital record of everything you do and, no matter how secure, the record is there for bad actors to find. When Recall first appeared in Insider Builds last spring, researchers noticed that it wasn’t encrypting the screenshots it captured and was storing its database as plain text. The company responded to the negative press attention by pulling Recall from Insider builds and promising to bring it back only after some security upgrades.</p><p>The new version of Recall is now opt-in rather than opt-out – I got prompted to enable Recall immediately after installing the Insider Build. The pop-up prompt appeared as soon as my laptop rebooted after the updated.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-320-80.jpg" alt="Windows prompts you to enable recall at boot" srcset="https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/QaSQYn27Fwd3tzXfyT2wHP.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>Recall has a “sensitive information filter,” which is enabled by default and it appears to actually be encrypting the data it captures. It also requires you to use a Windows Hello login every time you open the timeline-like Recall app.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-320-80.png.webp 320w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-1200-80.png.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-320-80.png" alt="Recall's sensitive information filter" srcset="https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-320-80.png 320w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS-1200-80.png 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/PXYYhL9hjdNcp5ExufNbQS.png"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>While I couldn’t immediately tell how good the encryption was, I did try and fail to open both the database file and what appeared to be the screenshot files. The database file appears to be called ukg.db (this is what it <a data-analytics-id="inline-link" href="https://github.com/xaitax/TotalRecall?tab=readme-ov-file#technical-details" data-url="https://github.com/xaitax/TotalRecall?tab=readme-ov-file#technical-details" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">was called in the spring Recall release</a>) and it’s located in the C:\users\[your username]\AppData\Local\CoreAIPlatform.00\UKP\{some number} folder. In the spring, when it was unencrypted, researchers were able to open this file and read the data inside, using an app called DB Browser (SQLite). However, now I couldn’t open it.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-320-80.png.webp 320w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-1200-80.png.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-320-80.png" alt="ukg db file" srcset="https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-320-80.png 320w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ-1200-80.png 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/fBmH6aCQeXHQ6L8wkSaAkZ.png"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>The screenshots appear to be files in a subfolder called AsymStore. I couldn’t open those either and I tried to open them as PNGs, BMPs or JPGs. Perhaps hackers will figure out how to open these files, but as far as I could tell, a typical user can’t open them outside of the Recall app.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-320-80.png.webp 320w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-1200-80.png.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-320-80.png" alt="Recall screenshot folder" srcset="https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-320-80.png 320w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc-1200-80.png 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/Y2WPFD82ZpYE9HqoypDWBc.png"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>The only way I could view Recall screenshots was by using the Recall app to either search my timeline or browse it. Every time I opened the Recall app, I was asked to use a Windows Hello facial login. And the first time I opened the app, it insisted that I set up a Windows Hello biometric login using either my face or fingerprint. However, Windows Hello also allowed me to log in with a 4-digit PIN.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-320-80.png.webp 320w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-1200-80.png.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-320-80.png" alt="Windows Hello PIN login" srcset="https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-320-80.png 320w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f-1200-80.png 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/tZP4WMw7Xafwc2xwbaJT2f.png"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>So, if a bad actor has access to your computer and knows your PIN, they could view Recall bypassing the biometric security checks. They don’t even need physical access to the PC. I was able to access the Recall app and view the timeline on a remote computer by using TeamViewer, a popular remote access application.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-320-80.png.webp 320w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-480-80.png.webp 480w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-650-80.png.webp 650w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-970-80.png.webp 970w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-1024-80.png.webp 1024w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-1200-80.png.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-320-80.png" alt="Using TeamViewer to access recall" srcset="https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-320-80.png 320w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-480-80.png 480w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-650-80.png 650w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-970-80.png 970w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-1024-80.png 1024w, https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi-1200-80.png 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi.png" data-pin-media="https://cdn.mos.cms.futurecdn.net/wsU7dAsCnWSzbPdwwPyKSi.png"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>You could argue that chances are someone won’t be remotely accessing your desktop without your permission. You could also take solace in the fact that Recall seems to filter out shopping pages from its captures (at least in the instances that I tested). But all you need is the right confluence of events and your personal data, anything from your Social Security number to the username and password you use for your email, could be available to a hacker.</p>
</div>



<!-- Drop in a standard article here maybe? -->


<div id="slice-container-authorBio-tbEeKQ57ATUGUnUKRir5vA"><p>Avram Piltch is Tom's Hardware's editor-in-chief. When he's not playing with the latest gadgets at work or putting on VR helmets at trade shows, you'll find him rooting his phone, taking apart his PC or coding plugins. With his technical knowledge and passion for testing, Avram developed many real-world benchmarks, including our laptop battery test.</p></div>
</section>





<div id="slice-container-relatedArticles"><p><h5>Most Popular</h5></p></div>








</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Android XR (253 pts)]]></title>
            <link>https://blog.google/products/android/android-xr/</link>
            <guid>42400556</guid>
            <pubDate>Thu, 12 Dec 2024 16:26:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.google/products/android/android-xr/">https://blog.google/products/android/android-xr/</a>, See on <a href="https://news.ycombinator.com/item?id=42400556">Hacker News</a></p>
Couldn't get https://blog.google/products/android/android-xr/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[A simple math error sparked a panic about black plastic kitchen utensils (116 pts)]]></title>
            <link>https://nationalpost.com/news/canada/black-plastic</link>
            <guid>42400008</guid>
            <pubDate>Thu, 12 Dec 2024 15:34:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nationalpost.com/news/canada/black-plastic">https://nationalpost.com/news/canada/black-plastic</a>, See on <a href="https://news.ycombinator.com/item?id=42400008">Hacker News</a></p>
Couldn't get https://nationalpost.com/news/canada/black-plastic: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Kubernetes Spec Explorer (150 pts)]]></title>
            <link>https://kubespec.dev/</link>
            <guid>42399701</guid>
            <pubDate>Thu, 12 Dec 2024 15:02:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kubespec.dev/">https://kubespec.dev/</a>, See on <a href="https://news.ycombinator.com/item?id=42399701">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>  <div>  <h2>
Kubernetes Spec Explorer  <span>
v1.32 </span> </h2> <p>
Find the documentation for all builtin resources, properties, types, and
    examples.
</p> <p>
Select a kind from the list below to get started.
</p> </div> <div> <div> <h3> Workloads </h3> <ul> <a href="https://kubespec.dev/batch/v1/CronJob"> <div> <p> batch/v1 </p><p> CronJob </p></div> </a><a href="https://kubespec.dev/apps/v1/DaemonSet"> <div> <p> apps/v1 </p><p> DaemonSet </p></div> </a><a href="https://kubespec.dev/apps/v1/Deployment"> <div> <p> apps/v1 </p><p> Deployment </p></div> </a><a href="https://kubespec.dev/batch/v1/Job"> <div> <p> batch/v1 </p><p> Job </p></div> </a><a href="https://kubespec.dev/v1/Pod"> <div> <p> v1 </p><p> Pod </p></div> </a><a href="https://kubespec.dev/apps/v1/ReplicaSet"> <div> <p> apps/v1 </p><p> ReplicaSet </p></div> </a><a href="https://kubespec.dev/v1/ReplicationController"> <div> <p> v1 </p><p> ReplicationController </p></div> </a><a href="https://kubespec.dev/apps/v1/StatefulSet"> <div> <p> apps/v1 </p><p> StatefulSet </p></div> </a> </ul> </div><div> <h3> Cluster </h3> <ul> <a href="https://kubespec.dev/v1/Event"> <div> <p> v1 </p><p> Event </p></div> </a><a href="https://kubespec.dev/events.k8s.io/v1/Event"> <div> <p> events.k8s.io/v1 </p><p> Event </p></div> </a><a href="https://kubespec.dev/v1/Namespace"> <div> <p> v1 </p><p> Namespace </p></div> </a><a href="https://kubespec.dev/v1/Node"> <div> <p> v1 </p><p> Node </p></div> </a> </ul> </div><div> <h3> Networking </h3> <ul> <a href="https://kubespec.dev/v1/Endpoints"> <div> <p> v1 </p><p> Endpoints </p></div> </a><a href="https://kubespec.dev/discovery.k8s.io/v1/EndpointSlice"> <div> <p> discovery.k8s.io/v1 </p><p> EndpointSlice </p></div> </a><a href="https://kubespec.dev/networking.k8s.io/v1/Ingress"> <div> <p> networking.k8s.io/v1 </p><p> Ingress </p></div> </a><a href="https://kubespec.dev/networking.k8s.io/v1/IngressClass"> <div> <p> networking.k8s.io/v1 </p><p> IngressClass </p></div> </a><a href="https://kubespec.dev/networking.k8s.io/v1/NetworkPolicy"> <div> <p> networking.k8s.io/v1 </p><p> NetworkPolicy </p></div> </a><a href="https://kubespec.dev/v1/Service"> <div> <p> v1 </p><p> Service </p></div> </a> </ul> </div><div> <h3> Configuration </h3> <ul> <a href="https://kubespec.dev/v1/ConfigMap"> <div> <p> v1 </p><p> ConfigMap </p></div> </a><a href="https://kubespec.dev/autoscaling/v1/HorizontalPodAutoscaler"> <div> <p> autoscaling/v1 </p><p> HorizontalPodAutoscaler </p></div> </a><a href="https://kubespec.dev/autoscaling/v2/HorizontalPodAutoscaler"> <div> <p> autoscaling/v2 </p><p> HorizontalPodAutoscaler </p></div> </a><a href="https://kubespec.dev/coordination.k8s.io/v1/Lease"> <div> <p> coordination.k8s.io/v1 </p><p> Lease </p></div> </a><a href="https://kubespec.dev/v1/LimitRange"> <div> <p> v1 </p><p> LimitRange </p></div> </a><a href="https://kubespec.dev/policy/v1/PodDisruptionBudget"> <div> <p> policy/v1 </p><p> PodDisruptionBudget </p></div> </a><a href="https://kubespec.dev/v1/ResourceQuota"> <div> <p> v1 </p><p> ResourceQuota </p></div> </a><a href="https://kubespec.dev/v1/Secret"> <div> <p> v1 </p><p> Secret </p></div> </a> </ul> </div><div> <h3> Storage </h3> <ul> <a href="https://kubespec.dev/storage.k8s.io/v1/CSIDriver"> <div> <p> storage.k8s.io/v1 </p><p> CSIDriver </p></div> </a><a href="https://kubespec.dev/storage.k8s.io/v1/CSINode"> <div> <p> storage.k8s.io/v1 </p><p> CSINode </p></div> </a><a href="https://kubespec.dev/storage.k8s.io/v1/CSIStorageCapacity"> <div> <p> storage.k8s.io/v1 </p><p> CSIStorageCapacity </p></div> </a><a href="https://kubespec.dev/v1/PersistentVolume"> <div> <p> v1 </p><p> PersistentVolume </p></div> </a><a href="https://kubespec.dev/v1/PersistentVolumeClaim"> <div> <p> v1 </p><p> PersistentVolumeClaim </p></div> </a><a href="https://kubespec.dev/storage.k8s.io/v1/StorageClass"> <div> <p> storage.k8s.io/v1 </p><p> StorageClass </p></div> </a><a href="https://kubespec.dev/storage.k8s.io/v1/VolumeAttachment"> <div> <p> storage.k8s.io/v1 </p><p> VolumeAttachment </p></div> </a> </ul> </div><div> <h3> Administration </h3> <ul> <a href="https://kubespec.dev/admissionregistration.k8s.io/v1/MutatingWebhookConfiguration"> <div> <p> admissionregistration.k8s.io/v1 </p><p> MutatingWebhookConfiguration </p></div> </a><a href="https://kubespec.dev/scheduling.k8s.io/v1/PriorityClass"> <div> <p> scheduling.k8s.io/v1 </p><p> PriorityClass </p></div> </a><a href="https://kubespec.dev/node.k8s.io/v1/RuntimeClass"> <div> <p> node.k8s.io/v1 </p><p> RuntimeClass </p></div> </a><a href="https://kubespec.dev/admissionregistration.k8s.io/v1/ValidatingAdmissionPolicy"> <div> <p> admissionregistration.k8s.io/v1 </p><p> ValidatingAdmissionPolicy </p></div> </a><a href="https://kubespec.dev/admissionregistration.k8s.io/v1beta1/ValidatingAdmissionPolicy"> <div> <p> admissionregistration.k8s.io/v1beta1 </p><p> ValidatingAdmissionPolicy </p></div> </a><a href="https://kubespec.dev/admissionregistration.k8s.io/v1/ValidatingAdmissionPolicyBinding"> <div> <p> admissionregistration.k8s.io/v1 </p><p> ValidatingAdmissionPolicyBinding </p></div> </a><a href="https://kubespec.dev/admissionregistration.k8s.io/v1beta1/ValidatingAdmissionPolicyBinding"> <div> <p> admissionregistration.k8s.io/v1beta1 </p><p> ValidatingAdmissionPolicyBinding </p></div> </a><a href="https://kubespec.dev/admissionregistration.k8s.io/v1/ValidatingWebhookConfiguration"> <div> <p> admissionregistration.k8s.io/v1 </p><p> ValidatingWebhookConfiguration </p></div> </a> </ul> </div><div> <h3> Access Control </h3> <ul> <a href="https://kubespec.dev/rbac.authorization.k8s.io/v1/ClusterRole"> <div> <p> rbac.authorization.k8s.io/v1 </p><p> ClusterRole </p></div> </a><a href="https://kubespec.dev/rbac.authorization.k8s.io/v1/ClusterRoleBinding"> <div> <p> rbac.authorization.k8s.io/v1 </p><p> ClusterRoleBinding </p></div> </a><a href="https://kubespec.dev/rbac.authorization.k8s.io/v1/Role"> <div> <p> rbac.authorization.k8s.io/v1 </p><p> Role </p></div> </a><a href="https://kubespec.dev/rbac.authorization.k8s.io/v1/RoleBinding"> <div> <p> rbac.authorization.k8s.io/v1 </p><p> RoleBinding </p></div> </a><a href="https://kubespec.dev/v1/ServiceAccount"> <div> <p> v1 </p><p> ServiceAccount </p></div> </a> </ul> </div><div> <h3> Other </h3> <ul> <a href="https://kubespec.dev/apiregistration.k8s.io/v1/APIService"> <div> <p> apiregistration.k8s.io/v1 </p><p> APIService </p></div> </a><a href="https://kubespec.dev/certificates.k8s.io/v1/CertificateSigningRequest"> <div> <p> certificates.k8s.io/v1 </p><p> CertificateSigningRequest </p></div> </a><a href="https://kubespec.dev/certificates.k8s.io/v1alpha1/ClusterTrustBundle"> <div> <p> certificates.k8s.io/v1alpha1 </p><p> ClusterTrustBundle </p></div> </a><a href="https://kubespec.dev/v1/ComponentStatus"> <div> <p> v1 </p><p> ComponentStatus </p></div> </a><a href="https://kubespec.dev/apps/v1/ControllerRevision"> <div> <p> apps/v1 </p><p> ControllerRevision </p></div> </a><a href="https://kubespec.dev/resource.k8s.io/v1alpha3/DeviceClass"> <div> <p> resource.k8s.io/v1alpha3 </p><p> DeviceClass </p></div> </a><a href="https://kubespec.dev/resource.k8s.io/v1beta1/DeviceClass"> <div> <p> resource.k8s.io/v1beta1 </p><p> DeviceClass </p></div> </a><a href="https://kubespec.dev/flowcontrol.apiserver.k8s.io/v1/FlowSchema"> <div> <p> flowcontrol.apiserver.k8s.io/v1 </p><p> FlowSchema </p></div> </a><a href="https://kubespec.dev/networking.k8s.io/v1beta1/IPAddress"> <div> <p> networking.k8s.io/v1beta1 </p><p> IPAddress </p></div> </a><a href="https://kubespec.dev/coordination.k8s.io/v1alpha2/LeaseCandidate"> <div> <p> coordination.k8s.io/v1alpha2 </p><p> LeaseCandidate </p></div> </a><a href="https://kubespec.dev/admissionregistration.k8s.io/v1alpha1/MutatingAdmissionPolicy"> <div> <p> admissionregistration.k8s.io/v1alpha1 </p><p> MutatingAdmissionPolicy </p></div> </a><a href="https://kubespec.dev/admissionregistration.k8s.io/v1alpha1/MutatingAdmissionPolicyBinding"> <div> <p> admissionregistration.k8s.io/v1alpha1 </p><p> MutatingAdmissionPolicyBinding </p></div> </a><a href="https://kubespec.dev/v1/PodTemplate"> <div> <p> v1 </p><p> PodTemplate </p></div> </a><a href="https://kubespec.dev/flowcontrol.apiserver.k8s.io/v1/PriorityLevelConfiguration"> <div> <p> flowcontrol.apiserver.k8s.io/v1 </p><p> PriorityLevelConfiguration </p></div> </a><a href="https://kubespec.dev/resource.k8s.io/v1alpha3/ResourceClaim"> <div> <p> resource.k8s.io/v1alpha3 </p><p> ResourceClaim </p></div> </a><a href="https://kubespec.dev/resource.k8s.io/v1beta1/ResourceClaim"> <div> <p> resource.k8s.io/v1beta1 </p><p> ResourceClaim </p></div> </a><a href="https://kubespec.dev/resource.k8s.io/v1alpha3/ResourceClaimTemplate"> <div> <p> resource.k8s.io/v1alpha3 </p><p> ResourceClaimTemplate </p></div> </a><a href="https://kubespec.dev/resource.k8s.io/v1beta1/ResourceClaimTemplate"> <div> <p> resource.k8s.io/v1beta1 </p><p> ResourceClaimTemplate </p></div> </a><a href="https://kubespec.dev/resource.k8s.io/v1alpha3/ResourceSlice"> <div> <p> resource.k8s.io/v1alpha3 </p><p> ResourceSlice </p></div> </a><a href="https://kubespec.dev/resource.k8s.io/v1beta1/ResourceSlice"> <div> <p> resource.k8s.io/v1beta1 </p><p> ResourceSlice </p></div> </a><a href="https://kubespec.dev/networking.k8s.io/v1beta1/ServiceCIDR"> <div> <p> networking.k8s.io/v1beta1 </p><p> ServiceCIDR </p></div> </a><a href="https://kubespec.dev/internal.apiserver.k8s.io/v1alpha1/StorageVersion"> <div> <p> internal.apiserver.k8s.io/v1alpha1 </p><p> StorageVersion </p></div> </a><a href="https://kubespec.dev/storagemigration.k8s.io/v1alpha1/StorageVersionMigration"> <div> <p> storagemigration.k8s.io/v1alpha1 </p><p> StorageVersionMigration </p></div> </a><a href="https://kubespec.dev/storage.k8s.io/v1alpha1/VolumeAttributesClass"> <div> <p> storage.k8s.io/v1alpha1 </p><p> VolumeAttributesClass </p></div> </a><a href="https://kubespec.dev/storage.k8s.io/v1beta1/VolumeAttributesClass"> <div> <p> storage.k8s.io/v1beta1 </p><p> VolumeAttributesClass </p></div> </a> </ul> </div> </div>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The FDA Hasn't Inspected This Drug Factory After 7 Recalls for the Same Flaw (138 pts)]]></title>
            <link>https://www.propublica.org/article/glenmark-pharmaceuticals-recalls-fda-oversight</link>
            <guid>42399530</guid>
            <pubDate>Thu, 12 Dec 2024 14:45:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.propublica.org/article/glenmark-pharmaceuticals-recalls-fda-oversight">https://www.propublica.org/article/glenmark-pharmaceuticals-recalls-fda-oversight</a>, See on <a href="https://news.ycombinator.com/item?id=42399530">Hacker News</a></p>
Couldn't get https://www.propublica.org/article/glenmark-pharmaceuticals-recalls-fda-oversight: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Fermat's Last Theorem – how it's going (251 pts)]]></title>
            <link>https://xenaproject.wordpress.com/2024/12/11/fermats-last-theorem-how-its-going/</link>
            <guid>42399397</guid>
            <pubDate>Thu, 12 Dec 2024 14:30:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xenaproject.wordpress.com/2024/12/11/fermats-last-theorem-how-its-going/">https://xenaproject.wordpress.com/2024/12/11/fermats-last-theorem-how-its-going/</a>, See on <a href="https://news.ycombinator.com/item?id=42399397">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						
<p>So I’m two months into trying to teach a proof of Fermat’s Last Theorem (FLT) to a computer. Most of “how it’s going” is quite tedious and technical to explain: to cut a long story short, Wiles proved an “R=T” theorem and much of the work so far has gone into teaching the computer what R and T are; we still have not finished either definition. However my PhD student Andrew Yang has already proved the abstract commutative algebra result which we need (“if abstract rings R and T satisfy lots of technical conditions then they’re equal”), and this is an exciting first step. The current state of the write-up is <a href="https://imperialcollegelondon.github.io/FLT/blueprint/">here</a>, and the system we are using is <a href="https://lean-fro.org/">Lean</a> and its mathematical library <a href="https://github.com/leanprover-community/mathlib4">mathlib</a>, maintained by the <a href="https://leanprover-community.github.io/">Lean prover community</a>. If you know a bit of Lean and a bit of number theory then feel free to read the <a href="https://github.com/ImperialCollegeLondon/FLT/blob/main/CONTRIBUTING.md">contribution guidelines</a>, checkout the <a href="https://github.com/orgs/ImperialCollegeLondon/projects/102">project dashboard</a> and claim an <a href="https://github.com/ImperialCollegeLondon/FLT/issues">issue</a>. As I say, we’re two months in. However we already have one interesting story, which I felt was worth sharing. Who knows if it’s an indication of what is to come.</p>



<p>We’re not formalising the old-fashioned 1990s proof of FLT. Since then, work of many people (Diamond/Fujiwara, Kisin, Taylor, Scholze and several others) led to the proof being generalised and simplified, and part of the motivation of my work is not to just get FLT over the line but to prove these more general and powerful results. Why? Because if the AI mathematics revolution actually happens (which it might) and if Lean turns out to be an important component (which it might) then computers will be in a better position to start helping humans to push back the boundaries of modern number theory because of this formalization work, as they’ll have access to key modern definitions in a form which they understand. One concept which was not used in Wiles’ original proof but which is being used in the proof we’re formalizing, is crystalline cohomology, a theory developed in the 60s and 70s in Paris, with the foundations laid down by Berthelot following ideas of Grothendieck. The basic idea here is that the classical exponential and logarithm functions play a key role in differential geometry (relating Lie algebras and Lie groups, for example), and in particular in understanding de Rham cohomology, but they do not work in more arithmetic situations (for example in characteristic p); the theory of “divided power structures”, developed in the 1960s in a series of beautiful papers by Roby, play a crucial role in constructing an analogue of these functions which can be used in the arithmetic case. tl;dr: we need to teach the computer crystalline cohomology, so first we need to teach it divided powers.</p>



<p>Antoine Chambert-Loir and Maria Ines de Frutos Fernandez have been teaching the theory of divided powers to Lean, and over the summer Lean did that irritating thing which it sometimes does: it complained about the human presentation of an argument in the standard literature, and on closer inspection it turned out that the human argument left something to be desired. In particular a key lemma in Roby’s work seems to be incorrect. When Antoine told me this in a DM, he remarked that he would suppose I thought this was funny, and indeed the very long string of laughing emojis which he got back as a response to his message confirmed this. However Antoine, being rather more professional than me, argued that instead of me tweeting about the issue (which I can’t do anyway because I left Twitter and joined <a href="https://bsky.app/profile/xenaproject.bsky.social">bluesky</a> yesterday), we should in fact attempt to fix the problem. We went about this in rather different ways. Antoine put it on his job list to look at, and I completely ignored the problem and just started occasionally mentioning to people that the proof was in trouble, in a weak sense. I say “in a weak sense” because this observation has to be put into some context. According to the way I currently view mathematics (as a formalist), the entire theory of crystalline cohomology vanished from the literature at the moment Antoine discovered the issue, with massive collateral damage (for example huge chunks of Scholze’s work just disappeared, entire books and papers vaporised etc). But this disappearance is only <em>temporary</em>. Crystalline cohomology is in no practical sense “wrong”. The theorems were still undoubtedly <em>correct</em>, it’s just that the proofs were as far as I am concerned <em>incomplete</em> (or at least, the ones Antoine and Maria Ines were following were), and unfortunately it is now our job to fix them. The thing I want to stress is that it was absolutely clear to both me and Antoine that the proofs of the main results were of course going to be <em>fixable</em>, even if an intermediate lemma was false, because crystalline cohomology has been used so much since the 1970s that if there were a problem with it, it would have come to light a long time ago. Every expert I’ve spoken to is in complete agreement on this point (and several even went so far as to claim that I’m making a fuss about nothing, but perhaps they don’t understand what formalization actually means in practice: you can’t just say “I’m sure it’s fixable” — you have to <strong>actually fix it</strong>). One added twist is that Roby, Grothendieck and Berthelot have all died, so we could not go back to the original experts and ask directly for help.</p>



<p>[For those that are interested in more technical details, here they are: Berthelot’s thesis does not develop the theory of divided powers from scratch, he uses Roby’s “Les algebres a puissances divisees”, published in Bull Sci Math, 2ieme serie, 89, 1965, pages 75-91. Lemme 8 (on p86) of that paper seems to be false and it’s not obvious how to repair the proof; the proof of the lemma misquotes another lemma of Roby from his 1963 Ann Sci ENS paper; the correct statement is Gamma_A(M) tensor_A R = Gamma_R(M tensor_A R) but one of the tensor products accidentally falls off in the application. This breaks Roby’s proof that the divided power algebra of a module has divided powers, and thus stops us from defining the ring A_{cris}.]</p>



<p>So as I say, Antoine worked on fixing the problem, whereas I just worked on gossiping about it to the experts, and I made the mistake of telling Tadashi Tokieda about it in a <a href="https://www.instagram.com/coffeezeeholloway/">coffeeshop in Islington</a>, he duly went back to Stanford and mentioned it to Brian Conrad, and the next thing I knew Conrad was in my inbox asking me what was all this about crystalline cohomology being wrong. I explained the technical details of the issue, Conrad agreed that there seemed to be a problem and he went off to think about it. Several hours later he got back to me and pointed out that another, different, proof of the claim that the universal divided power algebra of a module had divided powers was in the appendix to the Berthelot-Ogus book on crystalline cohomology, and that as far as Conrad was concerned this approach should be fine. The proof was back on! </p>



<p>And that is pretty much the end of the story, other than the fact that last month I visited Berkeley and I had lunch with Arthur Ogus, who I’ve known since I was a post-doc there in the 90s. I’d promised Arthur a story of how he’d saved Fermat’s Last Theorem, and over the meal I told him about how his appendix had dug me out of a hole. His response was “Oh! That appendix has several errors in it! But it’s OK, I think I know how to fix them.”</p>



<p>This story really highlights, to me, the poor job which humans do of documenting modern mathematics. There appear to be so many things which are “known to the experts” but not correctly documented. The experts are in agreement that the important ideas are robust enough to withstand knocks like this, but the <em>details</em> of what is actually going on might not actually be where you expect them to be. For me, this is just one of many reasons why humans might want to consider getting mathematics written down <em>properly</em>, i.e. in a formal system, where the chances of error are orders of magnitude smaller. However most mathematicians are not formalists, and for those people I need to justify my work in a different way. For those mathematicians, I argue that teaching machines our arguments is a crucial step towards getting machines to do it themselves. Until then, we seemed to be doomed to fix up human errors manually.</p>



<p>The story does have a happy ending though — two weeks ago Maria Ines gave <a href="https://talks.cam.ac.uk/talk/index/222778">a talk</a> about formalization of divided powers in the Cambridge Formalization of Mathematics seminar (which was started by Angeliki Koutsoukou-Argyraki a couple of years ago — thanks Angeliki!), and my understanding of Maria Ines’ talk is that these issues have now been sorted out. So we are actually back on track. Until the next time the literature lets us down…</p>

			
														</div><div id="entry-author-info">
						<p><img alt="" src="https://2.gravatar.com/avatar/e7ccfd42722fdb89c0fdea2f473152c14ab978bc1974acc4d67944906653f36e?s=60&amp;d=identicon&amp;r=G" srcset="https://2.gravatar.com/avatar/e7ccfd42722fdb89c0fdea2f473152c14ab978bc1974acc4d67944906653f36e?s=60&amp;d=identicon&amp;r=G 1x, https://2.gravatar.com/avatar/e7ccfd42722fdb89c0fdea2f473152c14ab978bc1974acc4d67944906653f36e?s=90&amp;d=identicon&amp;r=G 1.5x, https://2.gravatar.com/avatar/e7ccfd42722fdb89c0fdea2f473152c14ab978bc1974acc4d67944906653f36e?s=120&amp;d=identicon&amp;r=G 2x, https://2.gravatar.com/avatar/e7ccfd42722fdb89c0fdea2f473152c14ab978bc1974acc4d67944906653f36e?s=180&amp;d=identicon&amp;r=G 3x, https://2.gravatar.com/avatar/e7ccfd42722fdb89c0fdea2f473152c14ab978bc1974acc4d67944906653f36e?s=240&amp;d=identicon&amp;r=G 4x" height="60" width="60" loading="lazy" decoding="async">						</p><!-- #author-avatar -->
						<div id="author-description">
							<h2>
							About xenaproject							</h2><p>
							The Xena Project aims to get mathematics undergraduates (at Imperial College and beyond) trained in the art of formalising mathematics on a computer. Why? Because I have this feeling that digitising mathematics will be really important one day.							</p><!-- #author-link	-->
						</div><!-- #author-description -->
					</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gukesh becomes the youngest chess world champion in history (816 pts)]]></title>
            <link>https://lichess.org/@/Lichess/blog/wcc-2024-round-14-gukesh-becomes-the-youngest-world-champion-in-history/cDggdNZw</link>
            <guid>42398952</guid>
            <pubDate>Thu, 12 Dec 2024 13:29:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lichess.org/@/Lichess/blog/wcc-2024-round-14-gukesh-becomes-the-youngest-world-champion-in-history/cDggdNZw">https://lichess.org/@/Lichess/blog/wcc-2024-round-14-gukesh-becomes-the-youngest-world-champion-in-history/cDggdNZw</a>, See on <a href="https://news.ycombinator.com/item?id=42398952">Hacker News</a></p>
Couldn't get https://lichess.org/@/Lichess/blog/wcc-2024-round-14-gukesh-becomes-the-youngest-world-champion-in-history/cDggdNZw: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[BlenderGPT (358 pts)]]></title>
            <link>https://www.blendergpt.org/</link>
            <guid>42398913</guid>
            <pubDate>Thu, 12 Dec 2024 13:23:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.blendergpt.org/">https://www.blendergpt.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42398913">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2>BLENDERGPT<span>®</span></h2><p>is an advanced artificial intelligence program that creates 3D models from text or image prompts in ~20 seconds.</p><p>It lets you synthesise fully textured meshes, then import directly to Blender with a shortcut or download the source files for use in any compatible software.</p><p>we think its really good, try it out for free now.</p><p><img src="https://www.blendergpt.org/supercharging.jpg" alt="Supercharging Artists"></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Quantus – LeetCode for Financial Modeling (204 pts)]]></title>
            <link>https://quantus.finance/</link>
            <guid>42398471</guid>
            <pubDate>Thu, 12 Dec 2024 12:04:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://quantus.finance/">https://quantus.finance/</a>, See on <a href="https://news.ycombinator.com/item?id=42398471">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Parkinson's Law: It’s real, so use it (146 pts)]]></title>
            <link>https://theengineeringmanager.substack.com/p/parkinsons-law-its-real-so-use-it</link>
            <guid>42397781</guid>
            <pubDate>Thu, 12 Dec 2024 09:48:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://theengineeringmanager.substack.com/p/parkinsons-law-its-real-so-use-it">https://theengineeringmanager.substack.com/p/parkinsons-law-its-real-so-use-it</a>, See on <a href="https://news.ycombinator.com/item?id=42397781">Hacker News</a></p>
Couldn't get https://theengineeringmanager.substack.com/p/parkinsons-law-its-real-so-use-it: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Timemap.org – Interactive Map of History (733 pts)]]></title>
            <link>https://www.oldmapsonline.org/en/history/regions</link>
            <guid>42397550</guid>
            <pubDate>Thu, 12 Dec 2024 09:12:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.oldmapsonline.org/en/history/regions">https://www.oldmapsonline.org/en/history/regions</a>, See on <a href="https://news.ycombinator.com/item?id=42397550">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><div><div><p><img alt="Old Maps Online Logo – Explore Historical Maps" fetchpriority="high" width="104.7" height="32.89" decoding="async" data-nimg="1" src="https://www.oldmapsonline.org/images/header_logo_light_mode.svg"><img alt="Old Maps Online Logo – Explore Historical Maps" fetchpriority="high" width="104.7" height="32.89" decoding="async" data-nimg="1" src="https://www.oldmapsonline.org/images/header_logo_dark_mode.svg"></p></div><div><p><span>​</span></p></div></div><ul><li><a href="https://www.oldmapsonline.org/en/project">Project</a></li><li><a href="https://www.oldmapsonline.org/en/community">Community</a></li><li><a href="https://www.oldmapsonline.org/en/news">News</a></li><li><a href="https://www.oldmapsonline.org/en/app">My App</a></li></ul><div><p><a tabindex="0" href="https://www.oldmapsonline.org/en/user/maps">My maps</a></p></div></div><header><div><h6>Regions</h6></div></header><div><!--$!--><template data-dgst="BAILOUT_TO_CLIENT_SIDE_RENDERING"></template><!--/$--><div><a href="https://www.oldmapsonline.org/en/history/regions"><p><span>History</span></p></a></div><div><a href="https://www.oldmapsonline.org/en"><p><span>Maps</span></p></a></div><div><a href="https://www.maptiler.com/story/oldmapsonline/" target="_blank"><div><p><img alt="Maptiler" src="https://www.oldmapsonline.org/images/maptiler/icon.svg"></p></div></a></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Canada euthanasia now accounts for nearly one in 20 deaths (311 pts)]]></title>
            <link>https://www.bbc.com/news/articles/c0j1z14p57po</link>
            <guid>42396733</guid>
            <pubDate>Thu, 12 Dec 2024 06:23:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/news/articles/c0j1z14p57po">https://www.bbc.com/news/articles/c0j1z14p57po</a>, See on <a href="https://news.ycombinator.com/item?id=42396733">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-component="text-block"><p>Medically-assisted dying – also known as voluntary euthanasia – accounted for 4.7% of deaths in Canada in 2023, new government data shows.<!-- --></p><p>The country's fifth annual report since euthanasia was legalised in 2016 showed around 15,300 people underwent assisted dying last year after being successful in their applications.<!-- --></p><p>The median age of this group was more than 77. The vast majority – around 96% - had a death deemed "reasonably foreseeable", due to severe medical conditions such as cancer.<!-- --></p><p>In the small minority of other cases, patients may not have been terminally ill, but sought an assisted death due to a long and complicated illness that had significantly impacted their quality of life.<!-- --></p></div><div data-component="text-block"><p>Canada is among a few countries that have introduced assisted dying laws in the past decade. Others include Australia, New Zealand, Spain and Austria.<!-- --></p><p>In Canada, consenting adults can request medical assistance in dying from a healthcare provider if they have a serious and irremediable medical condition.<!-- --></p><p>Some provisions are in place, including a requirement of having two independent healthcare providers confirm that the patient is eligible before their request is approved.<!-- --></p><p>More than 320,000 people died in Canada in 2023, and 15,300 of those deaths - about one in 20 - were medically assisted.<!-- --></p><p>The figures released on Wednesday by Health Canada show that the rate of assisted dying in Canada increased by nearly 16% in 2023. This number is a sharp drop from the average increase of 31% in previous years.<!-- --></p><p>The report cautioned that it is too early to determine what caused the rate to slacken.<!-- --></p><p>For the first time, the report delved into race and ethnic data of those who died by euthanasia. <!-- --></p><p>Around 96% of recipients identified as white people, who account for about 70% of Canada's population. It is unclear what caused this disparity.<!-- --></p><p>The second most reported ethnic group was east Asians (1.8%), who account for about 5.7% of Canadians.<!-- --></p><p>Assisted dying continued to have the highest usage rate in Quebec, which accounted for nearly 37% of all euthanasia deaths, despite the province holding just 22% of Canada's population.<!-- --></p><p>Quebec's government launched a study earlier this year to examine why its euthanasia rate was so high.<!-- --></p></div><div data-component="text-block"><p>While the number of assisted deaths in Canada is growing, the country still falls behind the Netherlands, where euthanasia accounted for around 5% of total deaths last year.<!-- --></p><p>UK MPs voted late last month to pass a similar bill that gives terminally ill adults in England and Wales the right to have an assisted death, though it will face months of further scrutiny before it could become law.<!-- --></p><p>As British MPs debated the legislation, Canada was cited by some as a cautionary tale due to its perceived lack of safeguards.<!-- --></p><p>Like the UK, Canada initially only legalised assisted dying for those whose death was "reasonably foreseeable".<!-- --></p><p>However, Canada expanded access in 2021 to people who may not have a terminal diagnosis, but want to end their life because of a chronic, debilitating condition.<!-- --></p><p>It was set to broaden access once again to people with mental illnesses earlier this year. <!-- --></p><p>But that was delayed for the second time after concerns were raised by Canadian provinces, which oversee healthcare delivery, about whether the system could cope with such an expansion.<!-- --></p><p>On Wednesday, Health Canada defended the procedure, saying that the criminal code sets out "strict eligibility" criteria.<!-- --></p><p>But Cardus, a Christian think tank, said the latest figures were "alarming" and showed Canada has one of the fastest growing euthanasia programmes in the world.<!-- --></p><p>A report released in October by Ontario - Canada's most populous province - has since shed some light on controversial cases where people were granted assisted dying when they were not nearing their natural death.<!-- --></p><p>One example included a woman in her 50s with a history of depression and suicidal thoughts who had a severe sensitivity to chemicals.<!-- --></p><p>Her request for euthanasia was granted after she failed to secure housing that could have met her medical needs.<!-- --></p><p>Another case made headlines in recent months of a Nova Scotia cancer patient who said she was asked if she was aware of assisted dying as an option twice as she underwent mastectomy surgeries.<!-- --></p><p>The question "came up in completely inappropriate places", she told the National Post.<!-- --></p><p>Canadian news outlets have also reported on cases where people with disabilities have considered assisted dying due to lack of housing or disability benefits.<!-- --></p><p><i id="clarification-12-december:-this-article's-introduction-has-been-amended-to-be-clearer-about-the-fact-that-these-figures-relate-to-voluntary-euthanasia-and-to-more-clearly-and-prominently-explain-the-background-to-the-data-for-two-groups-who-successfully-sought-medically-assisted-dying.">Clarification 12 December: This article's introduction has been amended to be clearer about the fact that these figures relate to voluntary euthanasia and to more clearly and prominently explain the background to the data for two groups who successfully sought medically assisted dying.<!-- --></i></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A ChatGPT clone, in 3000 bytes of C, backed by GPT-2 (2023) (338 pts)]]></title>
            <link>https://nicholas.carlini.com/writing/2023/chat-gpt-2-in-c.html</link>
            <guid>42396372</guid>
            <pubDate>Thu, 12 Dec 2024 05:01:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nicholas.carlini.com/writing/2023/chat-gpt-2-in-c.html">https://nicholas.carlini.com/writing/2023/chat-gpt-2-in-c.html</a>, See on <a href="https://news.ycombinator.com/item?id=42396372">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>
              This program is a dependency-free implementation of GPT-2. It loads
              the weight matrix and BPE file out of the original TensorFlow files,
              tokenizes the input with a simple byte-pair encoder,
              implements a basic linear algebra package with matrix math operations,
              defines the transformer architecture, performs transformer inference,
              and un-tokenizes the output with the BPE decoder.
              All in ~3000 bytes of C.
            </p>
            
      
            <p>
              It's optimized efficiently enough so that GPT-2 Small takes a few
              seconds per reply on any modern machine. To do this I've implemented
              KV caching and an efficient matrix multiplication algorithm,
              with optional OMP parallelism.
            </p>
      
            <p>
              You can then use this to create something like Chat GPT---just so long
              as you don't care about the quality of the output. (It's actually
              pretty terrible output, objectively speaking... But it does run.)
              There are a
              few quirks (especially with handling UTF-8 characters), and running
              the XL size model at long context length can require ~100GB of RAM.
              But if you're just typing with ASCII using GPT2-Small it should run
              just about anywhere.
            </p>
      
            <p>
              I've uploaded <a href="https://github.com/carlini/c-chat-gpt-2">the code to GitHub</a>, so feel free to try and use it there.
            </p>
            
      
            
        
            
            <div id="mine"><p>
            This program is made up of the following main blocks (hover over each to see the coresponding code):        
                <a href="#linalg" id="show0">Basic matrix math library (700 bytes)</a>
                <a href="#matmul" id="show1">Fast matrix multiplication (300 bytes)</a>
                <a href="#nn" id="show2">Neural network layers (300 bytes)</a>
                <a href="#gpt" id="show3">Transformer model (600 bytes)</a>
                <a href="#bpe" id="show5">Byte pair encoding (400 bytes)</a>
                <a href="#z" id="show6">I/O (200 bytes)</a>
                <a href="#loadweight" id="show8">Weight loading (300 bytes)</a>
                <a href="#loadbpe" id="show7">Byte pair encoding loading (300 bytes)</a></p><div id="main">
      <p><span>#include</span><span>&lt;stdio.h&gt;</span></p>
      <p><span>#include</span><span>&lt;stdlib.h&gt;</span></p>
      <p><span>#include</span><span>&lt;string.h&gt;</span></p>
      <p><span>#include</span><span>&lt;math.h&gt;</span></p>
      <p><span>int</span><span> </span><span>U</span><span>,</span><span>C</span><span>,</span><span>K</span><span>,</span><span>c</span><span>,</span><span>d</span><span>,</span><span>S</span><span>,</span><span>zz</span><span>;</span><span>char</span><span>*</span><span>bpe</span><span>;</span><span>typedef</span><span> </span><span>struct</span><span>{</span><span>float</span><span>*</span><span>i</span><span>;</span><span>int</span><span> </span><span>j</span><span>,</span><span>k</span><span>;} </span><span>A</span><span>;</span><span>void</span><span>*</span><span>E</span><span>,*</span><span>n</span><span>;</span><span>A</span><span>*</span><span>f</span><span>;</span><span>FILE</span><span>*</span><span>fp</span><span>;</span></p>
      <p><span>#define</span><span> </span><span>N</span><span>(</span><span>i</span><span>,</span><span>j</span><span>)</span><span>for</span><span>(</span><span>int</span><span> </span><span>i</span><span>=0; i&lt;j; i++)</span></p>
      <p><span>
      <p><span>A</span><span> </span><span>o</span><span>(</span><span>int</span><span> </span><span>j</span><span>,</span><span>int</span><span> </span><span>k</span><span>,</span><span>int</span><span> </span><span>i</span><span>){</span><span>float</span><span>*</span><span>a</span><span>=E;E+=S=4*j*k;memset(a,0,S*i);</span><span>A</span><span> </span><span>R</span><span>={ a,j,k} ;</span><span>return</span><span> R;}</span></p>
      <p><span>#define</span><span> </span><span>I</span><span>(</span><span>R</span><span>,</span><span>B</span><span>)</span><span>A</span><span> </span><span>R</span><span>(</span><span>A</span><span> </span><span>a</span><span>,</span><span>float</span><span> </span><span>k</span><span>){ N(i,a.j*a.k){ </span><span>float</span><span> </span><span>b</span><span>=a.i[i]; a.i[i]=B; } </span><span>return</span><span> a; }</span></p>
      <p><span>I</span><span>(l,b/k)</span><span>I</span><span>(q,b+k)</span><span>I</span><span>(u,1./sqrt(</span><span>b</span><span>))</span><span>I</span><span>(z,</span><span>exp</span><span>(</span><span>b</span><span>))</span><span>I</span><span>(r,a.i[(i/a.k)*a.k])</span><span>I</span><span>(P,(i/k&lt;i%(</span><span>int</span><span>)k)?0:exp(b/8))</span><span>I</span><span>(Q,b/2*(1+tanh(.7978845*(b+.044715*b*b*b))))</span></p>
      <p><span>#define</span><span> </span><span>F</span><span>(</span><span>R</span><span>,</span><span>B</span><span>)</span><span>A</span><span> </span><span>R</span><span>(</span><span>A</span><span> </span><span>a</span><span>,</span><span>A</span><span> </span><span>b</span><span>){ N(i,a.j*a.k){ a.i[i]=a.i[i]B b.i[i]; } </span><span>return</span><span> a; }</span></p>
      <p><span>F</span><span>(V,+)</span><span>F</span><span>(v,*)</span><span>F</span><span>(H,/)</span><span>F</span><span>(at,+b.i[i%a.k];)</span><span>F</span><span>(mt,*b.i[i%a.k];)</span><span>A</span><span> </span><span>X</span><span>(</span><span>A</span><span> </span><span>a</span><span>){</span><span>A</span><span> </span><span>R</span><span>=o(a.j,a.k,1);N(i,a.j*a.k)R.i[(i/a.k)*a.k]+=a.i[i];r(R,0);</span><span>return</span><span> R;}</span><span>A</span><span> </span><span>p</span><span>(</span><span>A</span><span> </span><span>a</span><span>){</span><span>A</span><span> </span><span>R</span><span>=o(a.k,a.j,1);N(i,a.j*a.k)R.i[i%a.k*a.j+i/a.k]=a.i[i];</span><span>return</span><span> R;}</span></p>
      </span>
      <span>
        <p><span>A</span><span> </span><span>g</span><span>(</span><span>A</span><span> </span><span>a</span><span>,</span><span>A</span><span> </span><span>b</span><span>){</span><span>A</span><span> </span><span>R</span><span>=o(a.j,b.j,!c);</span><span>{</span><span>for</span><span>(</span><span>int</span><span> </span><span>i</span><span>=c;i&lt;d;i++){</span><span>for</span><span>(</span><span>int</span><span> </span><span>j</span><span>=0;j&lt;b.j;j+=4){</span><span>for</span><span>(</span><span>int</span><span> </span><span>k</span><span>=0;k&lt;a.k;k+=4){N(k2,4)N(j2,4)R.i[i*b.j+j+j2]+=a.i[i*a.k+k+k2]*b.i[(j+j2)*b.k+k+k2];}}}}</span><span>return</span></p>
      </span>
      <span>
      <p><span> V(o(R.j,R.k,1),R);}</span><span>A</span><span> </span><span>J</span><span>(</span><span>A</span><span> </span><span>a</span><span>,</span><span>int</span><span> </span><span>b</span><span>,</span><span>int</span><span> </span><span>j</span><span>,</span><span>int</span><span> </span><span>k</span><span>){</span><span>A</span><span> </span><span>R</span><span>={ a.i+b*j,j,k} ;</span><span>return</span><span> R;}</span><span>A</span><span> </span><span>s</span><span>(</span><span>A</span><span> </span><span>a</span><span>,</span><span>int</span><span> </span><span>i</span><span>){</span><span>A</span><span> </span><span>b</span><span>=V(a,l(X(a),-a.k));</span><span>A</span><span> </span><span>k</span><span>=l(X(v(V(o(b.j,b.k,1),b),b)),b.k-1);</span><span>A</span><span> </span><span>R</span><span>=at(mt(v(V(o(b.j,b.k,1),b),u(q(k,1e-5),0)),f[i+1]),f[i]);</span><span>return</span><span> R;}</span></p>
      <p><span>#define</span><span> </span><span>G</span><span>(</span><span>a</span><span>,</span><span>i</span><span>)at(g(a,f[i+1]),f[i])</span></p>
      </span>
      <span>
        <p><span>A</span><span> </span><span>m</span><span>(</span><span>int</span><span> </span><span>j</span><span>,</span><span>int</span><span> </span><span>k</span><span>){j+=!j;k+=!k;</span><span>A</span><span> </span><span>a</span><span>=o(j,k,1);fread(a.i,S,1,fp);</span><span>return</span><span> p(a);}</span></p>
      </span>
      <span>
        <p><span>int</span><span> </span><span>t</span><span>;</span><span>int</span><span> </span><span>Y</span><span>(</span><span>char</span><span>*</span><span>R</span><span>){</span><span>if</span><span>(!*R)</span><span>return</span><span> 0;</span><span>int</span><span> </span><span>B</span><span>=1e9,</span><span>r</span><span>;N(i,5e4){</span><span>if</span><span>(bpe[999*i]&amp;&amp;strncmp(bpe+999*i,R,S=strlen(bpe+999*i))==0){</span><span>int</span><span> </span><span>k</span><span>=Y(R+S)+i+1e7;</span><span>if</span><span>(k&lt;B){B=k;r=i;}}}t=r;</span><span>return</span><span> B;}</span><span>int</span><span> *</span><span>w</span><span>(</span><span>char</span><span>*</span><span>q</span><span>,</span><span>int</span><span>*</span><span>B</span><span>){</span><span>char</span><span> </span><span>R</span><span>[1000];</span><span>int</span><span> </span><span>i</span><span>=0;</span><span>while</span><span>(q[i]){</span><span>int</span><span> </span><span>j</span><span>=i++;</span><span>while</span><span>(47&lt;q[i]&amp;&amp;q[i]&lt;58||64&lt;q[i]){fflush(stdout);i++;}strcpy(R,q+j);R[i-j]=0;fflush(stdout);</span><span>int</span><span> </span><span>k</span><span>=0;</span><span>while</span><span>(R[k]){Y(R+k);</span><span>char</span><span>*</span><span>M</span><span>=bpe+t*999;k+=strlen(M);*B++=t;}}</span><span>return</span><span> B;}</span></p>
      </span>
      <span>
        <p><span>int</span><span> </span><span>main</span><span>(</span><span>int</span><span> </span><span>S</span><span>,</span><span>char</span><span>**</span><span>D</span><span>){S=D[1][5]+3*D[1][7]+3&amp;3;K=12+4*S+(S&gt;2);U=K*64;C=12*S+12;zz=atoi(D[4]);E=malloc(2LL*U*U*C*zz);</span></p>
      </span>
      <span>
        <p><span>bpe=malloc(1e9);fp=fopen(D[2],</span><span>"r"</span><span>);</span><span>unsigned</span><span> </span><span>char</span><span> </span><span>a</span><span>[S=999],</span><span>b</span><span>[S];N(i,5e4){</span><span>int</span><span> </span><span>k</span><span>=i*S;</span><span>if</span><span>(i&lt;93){bpe[k]=i+33;bpe[k+1]=0;} </span><span>else</span><span> </span><span>if</span><span>(i&gt;254){fscanf(fp,</span><span>"%s %s"</span><span>,a,b);strcat((</span><span>char</span><span>*)a,(</span><span>char</span><span>*)b);</span><span>int</span><span> </span><span>j</span><span>=0;N(i,a[i])bpe[k+j++]=a[i]^196?a[i]:a[++i]-128;bpe[k+j++]=0;} </span><span>else</span><span> </span><span>if</span><span>(i&gt;187){bpe[k]=i-188;bpe[k+1]=0;}}</span><span>int</span><span> </span><span>e</span><span>[1024];d=w(D[3],e)-e;</span><span>int</span><span> </span><span>h</span><span>;N(i,d){</span><span>if</span><span>(e[i]==18861)h=i+1;}printf(</span><span>"AI"</span><span>);N(i,d-h)printf(</span><span>"%s"</span><span>,bpe+e[i+h]*999);</span></p>
      </span>
      <span>
        <p><span>fp=fopen(D[1],</span><span>"r"</span><span>);</span><span>A</span><span>\</span></p>
      <p><span><span>&nbsp;</span></span><span>x</span><span>[999];</span><span>A</span><span>*</span><span>R</span><span>=x;N(i,C){N(j,12)*R++=m(U+U*(j?j^8?j^11?0:3:3:2),U*((j%8==3)+3*(j%8==1)+(j==9)));}*R++=m(U,1);*R++=m(U,1);</span><span>A</span><span> </span><span>QA</span><span>=m(1024,U),</span><span>Z</span><span>=p(m(5e4,U));</span></p>
      </span>
      <span>
        <p><span>while</span><span>(1){</span><span>char</span><span> </span><span>W</span><span>[1000]={ 0} ;</span><span>int</span><span> </span><span>T</span><span>;strcat(W,</span><span>"\nAlice: "</span><span>);printf(</span><span>"\n%s: "</span><span>,bpe+20490*999);fflush(stdout);fgets(W+8,1000,stdin);printf(</span><span>"AI:"</span><span>);strcat(W,</span><span>"\nBob:"</span><span>);d=w(W,e+d)-e;n=E;c=0;</span></p>
      </span>
      <span>
        <p><span>while</span><span>(1){E=n;T=d+32-d%32;c*=!!(d%32);</span><span>A</span><span> </span><span>O</span><span>=o(T,U,1);N(i,d){N(j,U)O.i[i*U+j]=Z.i[e[i]*U+j]+QA.i[j*1024+i];}N(i,C){</span><span>int</span><span> </span><span>y</span><span>;S=0;N(j,10){</span><span>if</span><span>(j==i)y=S;S++;N(k,10*(j&gt;0)){</span><span>if</span><span>(j*10+k&lt;C&amp;&amp;S++&amp;&amp;i==j*10+k)y=S;}}f=x+12*y;</span><span>A</span><span> </span><span>QB</span><span>=p(J(G(s(O,4),0),0,T*3,U));</span><span>A</span><span> </span><span>B</span><span>=o(U,T,1);N(k,K){</span><span>A</span><span> </span><span>L</span><span>=p(J(QB,k*3,64*T,3)),</span><span>a</span><span>=P(g(p(J(L,0,64,T)),p(J(L,T,64,T))),T),</span><span>R</span><span>=p(g(H(a,X(a)),J(L,T*2,64,T)));memcpy(B.i+64*T*k,R.i,64*T*4);}O=V(O,G(p(B),2));O=V(O,G(Q(G(s(O,6),8),0),10));}f=x;O=s(O,12*C);c=0;</span><span>int</span><span> </span><span>S</span><span>=d;d=1;</span><span>A</span><span> </span><span>B</span><span>=g(p(J(O,S-1,U,1)),Z);c=d=S;S=0;N(i,5e4){</span><span>if</span><span>(B.i[i]&gt;B.i[S])S=i;}</span><span>if</span><span>(d==zz){memcpy(e,e+zz/2,S*2);d-=zz/2;c=0;}e[d++]=S;</span></p>
      </span>
      <span>
        <p><span>if</span><span>(bpe[S*999]==10)</span><span>break</span><span>;printf(</span><span>"%s"</span><span>,bpe+S*999);fflush(stdout);}}}</span></p>
        </span>
            </p></div>
      
            </div>
      
            
            
      
            <br>
            <h2>Background: ChatGPT and transformers</h2>
      
            <p>
              In case you've been living under a rock for the past few months,
              ChatGPT is an application where you can talk to a type of machine learning
              model called a "language model" as if it was another person. It responds remarkably well,
              and GPT-4, the latest model that powers ChatGPT, is incredibly impressive.
            </p>
      
            <p>
              This C program implements the behavior of ChatGPT using a much
              weaker model from 2019: GPT-2. Despite being just 2 smaller than GPT-4,
              it has no where near the same capabilities---but it is open source.
              So it has that going for it.
            </p>
      
            <p>
              <a href="https://d4mucfpksywv.cloudfront.net/better-language-models/language_models_are_unsupervised_multitask_learners.pdf">GPT-2</a>
              is a type of machine learning model called a <a href="https://arxiv.org/abs/1706.03762">"transformer"</a>.
              These neural networks take a fixed-size sequence of words as input,
              and predict the next word that will occur. By repeating the procedure
              over and over, you can use them to generate arbitrary-length sequences.
            </p>
      
            <p>
              This post isn't meant to be an introduction to all the machine learning
              you'll need to know <i>why</i> a transformer is designed the way it is,
              but the rest of this post will be dedicated to describing how the above
              C code works.
            </p>
      
            <br>
            <h2>Walkthrough the C Code</h2>
      
            <h3 id="linalg">Getting started: Matrix Math (700 bytes)</h3>
      
            <p>
              Seeing as neural networks are just matrix operations. So we're going to need to get
              started by building a matrix library in as few bytes as possible.
            </p>
      
            <p>
              My definition of a matrix is completely minimal:
            </p>
      
      
            <div>
            <p><span>typedef</span><span> </span><span>struct</span><span> {</span></p>
      <p><span><span>&nbsp; </span></span><span>float</span><span>* </span><span>dat</span><span>;</span></p>
            <p><span><span>&nbsp; </span></span><span>int</span><span> </span><span>rows</span><span>, </span><span>cols</span><span>;</span></p>
      <p><span>} Matrix;</span></p>
            </div>
      
            <p>
              We'll begin by by observing that while there are a bunch of different operations
              we'll need to implement, there are basically two "types" of operations"
              </p><ol>
                <li>
                  Matrix-constant operations (e.g., add 7 to each entry of a matrix)
                </li>
                <li>
                  Matrix-matrix operations (e.g., add corresponding matrix entries)
                </li>
              </ol>
            
      
            <p>
              This similarity allows us to use macros to pull out a bunch of the common logic
              into a meta-routine that knows how to operate on, for example, pairs
              of matrices and just leaves the specific operator implementation defined.
            </p>
      
            <p>
              To do this in C, I'll define the function
            </p>
      
      
            <p><span>#define</span><span> </span><span>BINARY</span><span>(</span><span>function</span><span>, </span><span>operation</span><span>)</span></p>
      
            <p>
              as the following:
            </p>
            
            <div>
              <p><span>Matrix FUNCTION(</span><span>Matrix</span><span> </span><span>a</span><span>, </span><span>Matrix</span><span> </span><span>b</span><span>) {</span></p>
      <p><span><span>&nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>i</span><span> = 0; i &lt; a.rows; i++) {</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>j</span><span> = 0; j &lt; a.cols; j++) {</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span>a[i*a.cols + j] = a[i*a.cols + j] OPERATION b[i*a.cols+j];</span></p>
      <p><span><span>&nbsp; &nbsp; </span>}</span></p>
      <p><span><span>&nbsp; </span>}</span></p>
      <p><span><span>&nbsp; </span></span><span>return</span><span> a;</span></p>
      <p><span>}</span></p>
            </div>
      
            <p>
              And so for example this lets us just write
            </p>
      
            <div>
              <p><span>BINARY(matrix_elementwise_add, +);</span></p>
      <p><span>BINARY</span><span>(matrix_elementwise_multiply, *);</span></p>
            </div>
      
            <p>
            and have it automatically expand to the full operation that perform
            elementwise addition or multiplication of two matrices. I define a few
            other easy to understand operations as well:
            </p>
      
            <p>
            Now the thing about C's #defines is they're basically just glorified regexs.
            So when we actually run this, what's going to happen is we're going to take
            the line
            </p>
      
            <p><span>a[i*a.cols + j] = a[i*a.cols + j] OPERATION b[i*a.cols+j];</span></p><p>
            
            and expand for the case of multiplication expand it to
            
            </p><p><span>a[i*a.cols + j] = a[i*a.cols + j] * b[i*a.cols+j];</span></p>
      
            <p>
              But this replacement is almost literally just a regular expression replace.
              We could have put anything in place of OPERATION.
              This allows us to define a function like
            </p>
      
            <p><span>BINARY(add_tile, + b.dat[i%a.cols] ; )</span></p>
      
            <p>
              Which at first glance looks rather confusing---what is that semi-colon doing there?---but
              if you just do a regular expression replace on it, you'll see that it expands to
            </p>
      
            <p><span><span>&nbsp; </span>a[i*a.cols + j] = a[i*a.cols + j] + b.dat[i%a.cols] ; </span><span>b</span><span>[i*a.cols+j];</span></p>
      
            <p>
              where because the second expression doesn't do anything this is just equivalent to
            </p>
            
            <p><span>a[i*a.cols + j] = a[i*a.cols + j] + b.dat[i%a.cols] ; </span><span>b</span><span>[i*a.cols+j];</span></p>
      
            <p>
              (TAKE THAT LANGUAGES WITH PROPER MACROS. LISP ISN'T ALWAYS BETTER THAN C!)
            </p>
            
            <h3 id="matmul">Fast matrix multiplication (300 bytes)</h3>
      
            <p>
              The basic implementation of matrix multiplication is entirely straightforward:
              we just implement the naive cubic-time three loops:
              (There's nothing intelligent about my matrix multiplication. If you know how to make
              matrix multiplication fast you can just move along.)
            </p>
      
      
            <div>
              <p><span>Matrix matmul(</span><span>Matrix</span><span> </span><span>a</span><span>, </span><span>Matrix</span><span> </span><span>b</span><span>) {</span></p>
      <p><span><span>&nbsp; </span></span><span>Matrix</span><span> </span><span>out</span><span> = NewMatrix(a.rows, b.rows);</span></p>
      <p><span><span>&nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>i</span><span> = 0; i &lt; a.rows; i++)</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>j</span><span> = 0; j &lt; b.rows; j++)</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>k</span><span> = 0; k &lt; a.cols; k++)</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; &nbsp; </span>out.dat[i * b.rows + j] += a.dat[i * a.cols + k+k2] * b.dat[(j+j2) * b.cols + k];</span></p>
      
      <p><span><span>&nbsp; </span></span><span>return</span><span> out;</span></p>
      <p><span>}</span></p>
            </div>
            
            <p>
              Fortunately we can make it much faster with just a few bits of intelligence.
              Because of the way memory and caches work on most computers, it's (much!) faster
              to read and write to the same piece of memory over and over.
            </p>
            
            <div>
              <p><span>Matrix matmul_t_fast(</span><span>Matrix</span><span> </span><span>a</span><span>, </span><span>Matrix</span><span> </span><span>b</span><span>) {</span></p>
      <p><span><span>&nbsp; </span></span><span>Matrix</span><span> </span><span>out</span><span> = NewMatrix(a.rows, b.rows);</span></p>
      <p><span><span>&nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>i</span><span> = 0; i &lt; a.rows; i++)</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>j</span><span> = 0; j &lt; b.rows; j += 4)</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>k</span><span> = 0; k &lt; a.cols; k += 4)</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; &nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>k2</span><span> = 0; k2 &lt; 4; k2 += 1)</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>j2</span><span> = 0; j2 &lt; 4; j2 += 1)</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span>out.dat[i * b.rows + j+j2] += a.dat[i * a.cols + k+k2] * b.dat[(j+j2) * b.cols + k+k2];</span></p>
      
      <p><span><span>&nbsp; </span></span><span>return</span><span> out;</span></p>
      <p><span>}</span></p>
            </div>
      
            <p>
              Later we're going to make one more change to the way we do inference and add a new
              parameter to the matrix multiply that instead allows us to only multiply part of Matrix A
              by Matrix B, which is useful when we've already pre-computed part of the product.
            </p>
            
            <h3 id="nn">Neural network layers (300 bytes)</h3>
      
            <p>
              In order to write a transformer I'll need to define a few special neural-network specific layers.
              One of these is the <a href="https://arxiv.org/abs/1606.08415">GELU</a> activation function,
              which you can just think of as magic.
            </p>
            <p><span>UNARY(GELU, b / 2 * (1 + tanh(.7978845 * (b + .044715 * b * b * b))))</span></p>
      
            <p>
              I also implement a function to set the lower-diagonal of a matrix
              (after exponentiating the values). This is useful for what's called <i>causal attention</i>:
              we only want to attend to the past, not the future, and so we set
              the lower diagonal of the attention matrix to zero with this function.
            </p>
      
            <p><span>UNARY(tril, (i/k&lt;i%(</span><span>int</span><span>)k) ? 0 : exp(b/8))</span></p>
      
            <p>
              And finally we need a layer normalization function.
              (Again another piece of magic that you can look up if you want.
              Basically what it does is normalize the mean and variance of each layer.)
            </p>
            <div>
              <p><span>Matrix LayerNorm(</span><span>Matrix</span><span> </span><span>a</span><span>, </span><span>int</span><span> </span><span>i</span><span>) {</span></p>
      <p><span><span>&nbsp; </span></span><span>Matrix</span><span> </span><span>b</span><span> = add(a, divide_const(sum(a), -a.cols));</span></p>
      <p><span><span>&nbsp; </span></span><span>Matrix</span><span> </span><span>k</span><span> = divide_const(sum(multiply(</span></p>
      <p><span><span>&nbsp; &nbsp; </span>add(NewMatrix(b.rows,b.cols,1),b), b)), b.cols-1);</span></p>
      <p><span><span>&nbsp; </span></span><span>Matrix</span><span> </span><span>out</span><span> = add_tile(multiply_tile(</span></p>
      <p><span><span>&nbsp; &nbsp; </span>multiply(add(NewMatrix(b.rows,b.cols,1),b),</span></p>
      <p><span><span>&nbsp; &nbsp; </span>mat_isqrt(add_const(k, 1e-5),0)), layer_weights[i+1]),</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span>layer_weights[i]);</span></p>
      
      <p><span><span>&nbsp; </span></span><span>return</span><span> out;</span></p>
      <p><span>}</span></p>
            </div>
      
            <p>
              The final piece of the model is the Linear function that
              just performs a matrix multiplication and adds (with tiling) a bias.
            </p>
      
            <p><span>#define</span><span> </span><span>Linear</span><span>(</span><span>a</span><span>, </span><span>i</span><span>) add_tile(matmul_t_fast(a, layer_weights[i+1]), layer_weights[i])</span></p>
      
            <h3 id="gpt">Transformer architecture (600 bytes)</h3>
      
            <p>
              With all of this out of the way, we can finally implement our transformer
              in just 600 bytes. 
              
            </p>
            
            <div>
              <p><span>for</span><span> (</span><span>int</span><span> </span><span>i</span><span> = 0; i &lt; NLAYER; i++) {</span></p>
      <p><span><span>&nbsp; </span>layer_weights = weights + 12*permute;</span></p>
      
      <p><span><span>&nbsp; </span></span><span>// Compute the keys, queries, and values all at once with a big multiply </span><span></span></p>
      <p><span><span>&nbsp; </span></span><span>Matrix</span><span> </span><span>qkv</span><span> = transpose(slice(Linear(LayerNorm(line, 4), 0), 0, T*3, DIM));</span></p>
      
      <p><span><span>&nbsp; </span></span><span>// Make space for the output of the computation<span>&nbsp;</span></span><span> </span></p>
      <p><span><span>&nbsp; </span></span><span>Matrix</span><span> </span><span>result</span><span> = NewMatrix(DIM, T, 1);</span></p>
      
      <p><span><span>&nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>k</span><span> = 0; k &lt; NHEAD; k++) {</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>// Split the qkv into each of the heads<span>&nbsp;</span></span><span> </span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>Matrix</span><span> </span><span>merge</span><span> = transpose(slice(qkv, k*3, 64*T, 3)),</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span></span><span>// perform the product of the queries and keys and then exponentiate </span><span></span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span></span><span>a</span><span> = tril(matmul_t_fast(transpose(slice(merge, 0, 64, T)),</span></p>
      <p><span><span>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span>transpose(slice(merge, T, 64, T))), T),</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span></span><span>// finally multiply the softmax output (a/sum(a)) with the values matrix </span><span></span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span></span><span>out</span><span> = transpose(matmul_t_fast(divide(a, sum(a)), slice(merge, T*2, 64, T)));</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>// and copy the output to the proper location in the result matrix </span><span></span></p>
      <p><span><span>&nbsp; &nbsp; </span>memcpy(result.dat+64*T*k, out.dat, 64*T*4);</span></p>
      <p><span><span>&nbsp; </span>}</span></p>
      
      <p><span><span>&nbsp; </span></span><span>// Residual connection </span><span></span></p>
      <p><span><span>&nbsp; </span>line = add(line,Linear(transpose(result), 2));</span></p>
      
      <p><span><span>&nbsp; </span></span><span>// Activation function and residual connection </span><span></span></p>
      <p><span><span>&nbsp; </span>line = add(line, Linear(GELU(Linear(LayerNorm(line, 6), 8), 0), 10));</span></p>
      <p><span>}</span></p>
      
      <p><span>// Reset layer weights so we can do the last layer norm<span>&nbsp;</span></span><span> </span></p>
      <p><span>layer_weights = weights;</span></p>
      <p><span>line = LayerNorm(line, 12*NLAYER);</span></p>
      
      <p><span>Matrix</span><span> </span><span>result</span><span> = matmul_t_fast(transpose(slice(line, tmp-1, DIM, 1)), wte);</span></p>
      
            </div>
            
            <p>
              Now here's a fact that might not be completely obvious about transformer
              inference: once you've called the model to generate one token, you don't
              actually have to re-compute the entire function to generate the next token.
              In fact, you only need to do a small amount of additional work to generate
              each additional token.
            </p>
      
            <p>
              This is because once you've computed the output of the transformer on the
              output of all the tokens up to the Nth token, you can re-use almost all of
              this output to compute the N+1st token (with a little bit more work.)
            </p>
      
            <p>
              To actually implement this, I make all allocations in my code occur
              sequentially within the same block of memory, to guarantee that each
              matrix multiply will always use exactly the same memory. Then, at each
              iteration of the loop, I can just not zero-out the memory before using
              it for the next iteration, and the memory will already contain the
              results of the previous iteration. I just need to run the computation
              for the N+1st row.
            </p>
            
            
            <h3 id="bpe">Byte pair encoding (400 bytes)</h3>
      
            <p>          
              The simplest way to build a language model is on a sequence of words.
              But because the total number of words is essentially unbounded,
              and language models need to have fixed-size inputs,
              it would be necessary to replace sufficiently rare words with a special
              [OUT OF DISTRIBUTION] token. This is no good.
            </p>
      
            <p>
              While a simple “fix” for this would be to just use character-level
              language models that only know about individual letters, this would
              be a problem because it would mean that the model would have to learn
              the meaning of every word from scratch, and also reduces the effective
              context size of the language model by a factor of the average word length.
            </p>
      
            <p>
              So to fix this, language models like GPT-2 work by creating tokens out
              of "word pieces". Some words might be tokens all by them-self, but
              rare words are broken up into smaller pieces. For example, the word
              “nicholas” might be broken up into “nich” “o” “las”.
            </p>
            
            <p>
              The general algorithm for this is rather easy to implement:
              given a word we want to tokenize, we first split it into individual
              characters. Then, we look for pairs of adjacent tokens that should
              be merged, and merge them together. We repeat this until there are
              no more possible merges.
            </p>
      
            <p>
              This algorithm is simple but unfortunately rather hard to implement
              in C because it requires a bunch of allocations, and requires keeping
              track of a tree-like structure of the tokens.
            </p>
      
            <p>
              So instead, we'll turn the rather simple linear time algorithm into a
              potentially exponential time algorithm but save a bunch of code.
              Our basic idea will work like this in C-like pseudocode:
            </p>
      
            <div>
              <p><span>word_tokenize(word) {</span></p>
      <p><span><span>&nbsp; </span></span><span>if</span><span> len(word) == 0 { </span><span>return</span><span> (0, 0); }</span></p>
      <p><span><span>&nbsp; </span>result = (1e9, -1);</span></p>
      <p><span><span>&nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>i</span><span> = 0; i &lt; VOCAB_LEN; i++) {</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>if</span><span> (is_prefix(bpe[i]), word) {</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span>sub_cost = word_tokenize(word+len(bpe[i]))[0] + i + 1e7;</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span>result = min(result, (sub_cost, i));</span></p>
      <p><span><span>&nbsp; &nbsp; </span>}</span></p>
      <p><span><span>&nbsp; </span>}</span></p>
      <p><span><span>&nbsp; </span></span><span>return</span><span> result;</span></p>
      <p><span>}</span></p>
            </div>
      
            <p>
              That is, to tokenize a word, we try each possible word in the vocabulary
              to see if it's a prefix of the current word. If so, we try to use this
              as the first token, and then recursively try to tokenize the rest of the
              word. We keep track of the best tokenization we've seen so far (as judged
              by the length, breaking ties by the index of the token in the vocab), and
              return that.
            </p>
              
            
            <h3 id="loadweight">Weight loading (300 bytes)</h3>
      
            <p>
              We're almost done! The last thing we need to do is load the actual weights
              of the neural network off disk. This is actually pretty easy, because
              the weights are stored in a simple binary format that's easy to read
              in C: it's just a completely flat serialization of 32-bit floats.
            </p>
      
            <p>
              The only thing we need to know is how big the various matrices are.
              And fortunately, this is also easy to figure out. Each of the GPT-2
              model sizes have the same architecture, and the weights are saved in the
              same order, so all we need to do is read read the correctly-shaped
              matrices off of disk.
            </p>
      
            <p>
              There's one final annoying thing. The layers of the neural network are
              not stored on disk in the order you might expect, with layer 0 first,
              then layer 1, then layer 2. Instead, the first layer is layer 0, then
              layer 1, and then layer .... TEN! (and then layer 11, and then layer 12.)
              This is because weights are stored when sorted lexicographically.
              And lexicographically, “0” comes before “1”, but “10” comes before
              “2”. So we have to do a bit of work to permute the weights into the
              correct order with the following code
            </p>
      
            <div>
              <p><span>int</span><span> permute;</span></p>
      <p><span>tmp=0;</span></p>
      <p><span>for</span><span> (</span><span>int</span><span> </span><span>j</span><span> = 0; j &lt; 10; j++) {</span></p>
      <p><span><span>&nbsp; </span></span><span>if</span><span> (j == i) {</span></p>
      <p><span><span>&nbsp; &nbsp; </span>permute = tmp;</span></p>
      <p><span><span>&nbsp; </span>}</span></p>
      <p><span><span>&nbsp; </span>tmp++;</span></p>
      <p><span><span>&nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>k</span><span> = 0; k &lt; 10*(j&gt;0); k++) {</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>if</span><span> (j*10+k &lt; NLAYER &amp;&amp; tmp++ &amp;&amp; i == j*10+k) {</span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span>permute = tmp;</span></p>
      <p><span><span>&nbsp; &nbsp; </span>}</span></p>
      <p><span><span>&nbsp; </span>}</span></p>
      <p><span>}</span></p>
            </div>
      
            
            <h3 id="loadbpe">Byte pair encoding loading (300 bytes)</h3>
      
            <p>
              In order to actually perform byte-pair encoding, we need to first load
              the byte-pair encoding vocabulary off disk. In an ideal world we'd
              actually just have a list of all the words in the vocabulary stored
              in some reasonable C-readable format, but because the original file
              was (a) meant for reading in Python, and (b) not meant to make it
              easy to parse in as few bytes as possible, we'll have to do some work here.
            </p>
      
            <p>
              You might expect the file format to just be a list of words one after
              the other, but it's actually instead a list of the byte-pair encodings.
              What this means is instead of being able to read “Hello” as one token,
              the line is “H” “ello” which means we should be merging the tokens
              “H” and “ello” into a single token “Hello”.
            </p>
      
            <p>
              The other challenge is that the file is encoded in smoothing-like
              UTF-8 (but not quite exactly that) for ... reasons.
              All of the printable ascii characters are encoded as themselves,
              but the non-printable characters from 0-31 are encoded as the value
              188+the character. So for example, a space is encoded as the token “Ġ”.
              But now the problem is that the UTF8 encoding of “Ġ” is 0xc4 0xa0
              when on disk, and so when reading it we have to do just some ugly work
              to convert this back to a space.
            </p>
      
            <p>
              And while none of this is actually that hard to do, it still requires
              a fair amount of code which is annoying when you're trying to compress
              everything to be small.
            </p>
      
            <div>
      <p><span>unsigned</span><span> </span><span>char</span><span> a[tmp=999],b[tmp];</span></p>
      <p><span>for</span><span> (</span><span>int</span><span> </span><span>i</span><span> = 0; i &lt; 5e4; i++) {</span></p>
      <p><span><span>&nbsp; </span></span><span>int</span><span> </span><span>k</span><span> = i*tmp;</span></p>
      <p><span><span>&nbsp; </span></span><span>if</span><span> (i &lt; 93) {</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>// The first 92 tokens are just the printable ascii characters </span><span></span></p>
      <p><span><span>&nbsp; &nbsp; </span>bpe[k] = i + 33;</span></p>
      <p><span><span>&nbsp; &nbsp; </span>bpe[k+1] = 0;</span></p>
      <p><span><span>&nbsp; </span>} </span><span>else</span><span> </span><span>if</span><span> (i &gt; 254) {</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>// Ones above 254 are from the BPE file. Load those<span>&nbsp;</span></span><span> </span></p>
      <p><span><span>&nbsp; &nbsp; </span>fscanf(fp, </span><span>"%s %s"</span><span>, a, b);</span></p>
      <p><span><span>&nbsp; &nbsp; </span>strcat((</span><span>char</span><span>*)a, (</span><span>char</span><span>*)b);</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>int</span><span> </span><span>j</span><span> = 0;</span></p>
      <p><span><span>&nbsp; </span></span><span>for</span><span> (</span><span>int</span><span> </span><span>i</span><span> = 0; a[i]; i++) {</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>// UTF8 encoding makes life hard so handle that here </span><span></span></p>
      <p><span><span>&nbsp; &nbsp; &nbsp; </span>bpe[k+j++] = a[i] ^ 196 ? a[i] : a[++i]-128;</span></p>
      <p><span><span>&nbsp; &nbsp; </span>}</span></p>
      <p><span><span>&nbsp; &nbsp; </span>bpe[k+j++] = 0;</span></p>
      <p><span><span>&nbsp; </span>} </span><span>else</span><span> </span><span>if</span><span> (i &gt; 187) {</span></p>
      <p><span><span>&nbsp; &nbsp; </span></span><span>// Tokens above 187 are the nonprintable asii character from 0-32<span>&nbsp;</span></span><span> </span></p>
      <p><span><span>&nbsp; &nbsp; </span>bpe[k] = i-188;</span></p>
      <p><span><span>&nbsp; &nbsp; </span>bpe[k+1] = 0;</span></p>
      <p><span><span>&nbsp; </span>}</span></p>
      <p><span>}</span></p>
      </div>        
                        
            
      
            <h2>Conclusion</h2>
            
            <p>
              It's really remarkable how you can distill so many
              decades of progress in machine learning to just a few thousand bytes.
              There is essentially nothing missing here from everything you need to run
              any state-of-the-art neural network (except for the actual model weights).
              While I mostly put this together for fun,
              it's a nice demonstration how <i>simple</i> neural networks actually are.
            </p>
      
            
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Mouseless – fast mouse control with the keyboard (179 pts)]]></title>
            <link>https://mouseless.click/</link>
            <guid>42396336</guid>
            <pubDate>Thu, 12 Dec 2024 04:53:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mouseless.click/">https://mouseless.click/</a>, See on <a href="https://news.ycombinator.com/item?id=42396336">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
    </channel>
</rss>