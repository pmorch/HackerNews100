<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 21 Dec 2024 19:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Query Apple's FindMy Network with Python (197 pts)]]></title>
            <link>https://github.com/malmeloo/FindMy.py</link>
            <guid>42479233</guid>
            <pubDate>Sat, 21 Dec 2024 12:14:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/malmeloo/FindMy.py">https://github.com/malmeloo/FindMy.py</a>, See on <a href="https://news.ycombinator.com/item?id=42479233">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">FindMy.py</h2><a id="user-content-findmypy" aria-label="Permalink: FindMy.py" href="#findmypy"></a></p>
<p dir="auto"><a href="https://pypi.org/project/FindMy/" rel="nofollow"><img src="https://camo.githubusercontent.com/05008481e4c47af10309534254d9c49d38f885f4628c874916f00cf5974b2267/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f46696e644d79" alt="" data-canonical-src="https://img.shields.io/pypi/v/FindMy"></a>
<a href="#"><img src="https://camo.githubusercontent.com/fe258deb4fd6062bd9ff919a2c3004ffac941539fb96926a5e66788fe0f34d4c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f46696e644d79" alt="" data-canonical-src="https://img.shields.io/pypi/dm/FindMy"></a>
<a href="https://github.com/malmeloo/FindMy.py/blob/main/LICENSE.md"><img src="https://camo.githubusercontent.com/38b49ae2c838ef140a0fe90a3b7b2bf26b729dcbe20046b81cb20a1fc3e74a25/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d616c6d656c6f6f2f46696e644d792e7079" alt="" data-canonical-src="https://img.shields.io/github/license/malmeloo/FindMy.py"></a>
<a href="#"><img src="https://camo.githubusercontent.com/662fd0675412b3d88182cdf75dab8e11777c6556b90172c3add700ec4cb2d6b5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f46696e644d79" alt="" data-canonical-src="https://img.shields.io/pypi/pyversions/FindMy"></a></p>
<p dir="auto">The all-in-one library that provides everything you need
to query Apple's FindMy network!</p>
<p dir="auto">The current "Find My-scene" is quite fragmented, with code
being all over the place across multiple repositories,
written by <a href="#Credits">several authors</a>. This project aims to
unify this scene, providing common building blocks for any
application wishing to integrate with the Find My network.</p>
<div dir="auto"><p dir="auto">Important</p><p dir="auto">This project is currently in Alpha. While existing functionality
will likely not change much, the API design is subject to change
without prior warning.</p>
<p dir="auto">You are encouraged to report any issues you can find on the
<a href="https://github.com/malmeloo/FindMy.py/issues/">issue tracker</a>!</p>
</div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Features</h3><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul>
<li> Cross-platform: no Mac needed</li>
<li> Fetch and decrypt location reports
<ul>
<li> Official accessories (AirTags, iDevices, etc.)</li>
<li> Custom AirTags (OpenHaystack)</li>
</ul>
</li>
<li> Apple account sign-in
<ul>
<li> SMS 2FA support</li>
<li> Trusted Device 2FA support</li>
</ul>
</li>
<li> Scan for nearby FindMy-devices
<ul>
<li> Decode their info, such as public keys and status bytes</li>
</ul>
</li>
<li> Import or create your own accessory keys</li>
<li> Both async and sync APIs</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Roadmap</h3><a id="user-content-roadmap" aria-label="Permalink: Roadmap" href="#roadmap"></a></p>
<ul>
<li> Local anisette generation (without server)
<ul dir="auto">
<li>More information: <a href="https://github.com/malmeloo/FindMy.py/issues/2" data-hovercard-type="issue" data-hovercard-url="/malmeloo/FindMy.py/issues/2/hovercard">#2</a></li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">The package can be installed from <a href="https://pypi.org/project/findmy/" rel="nofollow">PyPi</a>:</p>

<p dir="auto">For usage examples, see the <a href="https://github.com/malmeloo/FindMy.py/blob/main/examples">examples</a> directory. Documentation can be found <a href="http://docs.mikealmel.ooo/FindMy.py/" rel="nofollow">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Want to contribute code? That's great! For new features, please open an
<a href="https://github.com/malmeloo/FindMy.py/issues">issue</a> first so we can discuss.</p>
<p dir="auto">This project uses <a href="https://docs.astral.sh/ruff/" rel="nofollow">Ruff</a> for linting and formatting.
Before opening a pull request, please ensure that your code adheres to these rules.
There are pre-commit hooks included to help you with this, which you can set up as follows:</p>
<div dir="auto" data-snippet-clipboard-copy-content="pip install poetry
poetry install --with dev  # this installs pre-commit into your environment
pre-commit install"><pre>pip install poetry
poetry install --with dev  <span><span>#</span> this installs pre-commit into your environment</span>
pre-commit install</pre></div>
<p dir="auto">After following the above steps, your code will be linted and formatted automatically
before committing it.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Derivative projects</h2><a id="user-content-derivative-projects" aria-label="Permalink: Derivative projects" href="#derivative-projects"></a></p>
<p dir="auto">There are several other cool projects based on this library! Some of them have been listed below, make sure to check them out as well.</p>
<ul dir="auto">
<li><a href="https://github.com/hajekj/OfflineFindRecovery">OfflineFindRecovery</a> - Set of scripts to be able to precisely locate your lost MacBook via Apple's Offline Find through Bluetooth Low Energy.</li>
<li><a href="https://github.com/airy10/SwiftFindMy">SwiftFindMy</a> - Swift port of FindMy.py</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Credits</h2><a id="user-content-credits" aria-label="Permalink: Credits" href="#credits"></a></p>
<p dir="auto">While I designed the library, the vast majority of actual functionality
is made possible by the following wonderful people and organizations:</p>
<ul dir="auto">
<li>@seemo-lab for <a href="https://github.com/seemoo-lab/openhaystack/">OpenHaystack</a>
and their <a href="https://doi.org/10.2478/popets-2021-0045" rel="nofollow">research</a>;</li>
<li>@JJTech0130 for <a href="https://github.com/JJTech0130/pypush">Pypush</a>, providing the breakthrough necessary
for getting this to work without a Mac;</li>
<li>@biemster for <a href="https://github.com/biemster/FindMy">FindMy</a>, which is the main basis of this project;</li>
<li>@Dadoum for <a href="https://github.com/Dadoum/pyprovision/">pyprovision</a> and
<a href="https://github.com/Dadoum/anisette-v3-server">anisette-v3-server</a>;</li>
<li>@nythepegasus for <a href="https://github.com/nythepegasus/grandslam/">GrandSlam</a> SMS 2FA;</li>
<li>And probably more, so let me know! :D</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Ugly Truth About Spotify Is Finally Revealed (174 pts)]]></title>
            <link>https://www.honest-broker.com/p/the-ugly-truth-about-spotify-is-finally</link>
            <guid>42478107</guid>
            <pubDate>Sat, 21 Dec 2024 07:45:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.honest-broker.com/p/the-ugly-truth-about-spotify-is-finally">https://www.honest-broker.com/p/the-ugly-truth-about-spotify-is-finally</a>, See on <a href="https://news.ycombinator.com/item?id=42478107">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png" width="1057" height="352" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7b230059-81df-4830-9363-090897fa95c0_1057x352.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:352,&quot;width&quot;:1057,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:27483,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7b230059-81df-4830-9363-090897fa95c0_1057x352.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>In early 2022, I started noticing something strange in Spotify’s jazz playlists.</p><p>I listen to jazz every day, and pay close attention to new releases. But these Spotify playlists were filled with artists I’d never heard of before.</p><p>Who were they? Where did they come from? Did they even exist?</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp" width="1062" height="786" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:786,&quot;width&quot;:1062,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:37124,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/webp&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9a9ec525-ba8d-4708-b6e5-a1ff891b2451_1062x786.webp 1456w" sizes="100vw"></picture></div></a></figure></div><p><span>In April 2022, I finally felt justified in sharing my concerns with readers. So I published an article here called </span><a href="https://www.honest-broker.com/p/the-fake-artists-problem-is-much" rel="">“The Fake Artists Problem Is Much Worse Than You Realize.”</a></p><p>I was careful not to make accusations I couldn’t prove. But I pointed out some puzzling facts.</p><p>Many of these artists live in Sweden—where Spotify has its headquarters. According to one source, a huge amount of streaming music originates from just 20 people, who operate under 500 different names.</p><p><span>Some of them were generating supersized numbers. An obscure Swedish jazz musician got more plays than most of the tracks on Jon Batiste’s </span><em>We Are</em><span>—which had just won the Grammy for Album of the Year (not just the best jazz album, but the best album in </span><em>any</em><span> genre).</span></p><p>How was that even possible?</p><p><span>I continued to make inquiries, and brooded over this strange situation. But</span><a href="https://www.honest-broker.com/p/spotify-gives-49-different-names" rel=""> something even stranger happened a few months later</a><span>.</span></p><p>A listener noticed that he kept hearing the same track over and over on Spotify. But when he checked the name of the song, it was always different. Even worse, these almost identical tracks were attributed to different artists and composers.</p><p><span>He </span><a href="https://open.spotify.com/playlist/3wLm5nlYrHkbd29ilMRq89?si=e6f3299113e34bb9" rel="">created a playlist</a><span>, and soon had 49 different versions of this song under various names. The titles sounded as if they had come out of a random text generator—almost as if the goal was to make them hard to remember. </span></p><ul><li><p>Trumpet Bumblefig</p></li><li><p>Bumble Mistywill</p></li><li><p>Whomping Clover</p></li><li><p>Qeazpoor</p></li><li><p>Swiftspark</p></li><li><p>Vattio Bud</p></li></ul><p><a href="https://www.honest-broker.com/p/spotify-gives-49-different-names" rel="">I reported on this odd situation</a><span>. Others joined in the hunt, and </span><a href="https://open.spotify.com/playlist/2haHwyJ3pT5COriXW9z0dT?si=b9GjincIRYuiV5j1lXcE4w" rel="">found more versions</a><span> of the track under still different names. </span></p><p>The track itself was boring and non-descript, but it was showing up everywhere on the platform. </p><p>Around this same time, I started hearing jazz piano playlists on Spotify that disturbed me. Every track sounded like it was played on the same instrument with the exact same touch and tone. Yet the names of the artists were all different.</p><p>Were these AI generated? Was Spotify doing this to avoid paying royalties to human musicians?</p><p><span>Spotify </span><a href="https://www.billboard.com/music/music-news/spotify-fake-artist-allegations-response-7858015/" rel="">issued a statement</a><span> in the face of these controversies. But I couldn’t find any denial that they were playing games with playlists in order to boost profits.</span></p><p>By total coincidence, Spotify’s profitability started to improve markedly around this time. </p><p>A few months ago, I spoke with an editor at one of the largest newspapers in the world. I begged him to put together a team of investigative journalists to get to the bottom of this. </p><p>“You need to send people to Sweden. You need to find sources. You need to find out what’s really going on.”</p><p>He wasn’t interested in any of that. He just wanted a spicy opinon piece. I declined his invitation to write it.</p><p>We now finally have the ugly truth on these fake artists—but no thanks to Spotify. Or to that prestigious newspaper whose editor I petitioned. </p><p><span>Instead journalist </span><a href="https://harpers.org/archive/2025/01/the-ghosts-in-the-machine-liz-pelly-spotify-musicians/" rel="">Liz Pelly has conducted an in-depth investigation, and published her findings in </a><em><a href="https://harpers.org/archive/2025/01/the-ghosts-in-the-machine-liz-pelly-spotify-musicians/" rel="">Harper’s</a></em><span>—they are part of her forthcoming book </span><em><a href="https://lizpelly.info/book" rel="">Mood Machine: The Rise of Spotify and the Costs of the Perfect Playlist</a></em><span>. </span></p><p><em>Mood Machine</em><span> will show up in bookstores in January and may finally wake up the music industry to the dangers it faces.</span></p><p>Pelly started by knocking on the doors of these mysterious viral artists in Sweden.</p><p>Guess what? Nobody wanted to talk. At least not at first. </p><p>But Pelly kept pursuing this story for a year. She convinced former employees to reveal what they knew. She got her hands on internal documents. She read Slack messages from the company. And she slowly put the pieces together. </p><p><a href="https://harpers.org/archive/2025/01/the-ghosts-in-the-machine-liz-pelly-spotify-musicians/" rel="">Now she writes</a><span>:</span></p><blockquote><p>What I uncovered was an elaborate internal program. Spotify, I discovered, not only has partnerships with a web of production companies, which, as one former employee put it, provide Spotify with “music we benefited from financially,” but also a team of employees working to seed these tracks on playlists across the platform. In doing so, they are effectively working to grow the percentage of total streams of music that is cheaper for the platform. </p></blockquote><p>In other words, Spotify has gone to war against musicians and record labels. </p><p>At Spotify they call this the “Perfect Fit Content” (PFC) program. Musicians who provide PFC tracks “must often give up control of certain royalty rights that, if a track becomes popular, could be highly lucrative.”</p><p>Spotify apparently targeted genres where they could promote passive consumption. They identified situations in which listeners use playlists for background music. That’s why I noticed the fake artists problem first in my jazz listening.</p><p>According to Pelly, the focal points of PFC were “ambient, classical, electronic, jazz, and lo-fi beats.”</p><p><span>When some employees expressed concerns about this, Spotify managers replied (</span><a href="https://harpers.org/archive/2025/01/the-ghosts-in-the-machine-liz-pelly-spotify-musicians/" rel="">according to Pelly’s sources</a><span>) that “listeners wouldn’t know the difference.”</span></p><p>They called it payola in the 1950s. The public learned that radio deejays picked songs for airplay based on cash kickbacks, not musical merit.</p><p>Music fans got angry and demanded action. In 1959, both the US Senate and House launched investigations. Famous deejay Alan Freed got fired from WABC after refusing to sign a statement claiming that he had never taken bribes.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png" width="912" height="626" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f629fd47-74e7-4346-99ac-b78e383e6621_912x626.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:626,&quot;width&quot;:912,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:559897,&quot;alt&quot;:&quot;News headline from 1959&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="News headline from 1959" title="News headline from 1959" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff629fd47-74e7-4346-99ac-b78e383e6621_912x626.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>They called it Payola, and people got fired</figcaption></figure></div><p>Transactions nowadays are handled more delicately—and seemingly in full compliance with the laws. Nobody gives Spotify execs an envelope filled with cash.</p><p><a href="https://www.sec.gov/edgar/browse/?CIK=1639920&amp;owner=exclude" rel="">But this is better than payola</a><span>:</span></p><ul><li><p><span>On February 7, Spotify’s CEO sold</span><a href="https://www.musicbusinessworldwide.com/daniel-ek-cashes-out-another-57-5m-in-spotify-stock-after-selling-64m-months-earlier/" rel=""> 250K shares for $57.5 million</a><span>.</span></p></li><li><p><span>On April 24, Spotify’s CEO sold </span><a href="https://www.musicbusinessworldwide.com/spotifys-daniel-ek-cashes-out-118-8-million-in-shares/" rel="">400K shares for $118.8 million</a><span>.</span></p></li><li><p><span>On November 15, Spotify’s CEO sold </span><a href="https://www.musicbusinessworldwide.com/daniel-ek-just-cashed-out-35-cashed-in-384-million/" rel="">75K shares for $35.8 million</a><span>.</span></p></li><li><p><span>On November 20, Spotify’s CEO sold </span><a href="https://www.musicbusinessworldwide.com/key-spotify-executives-have-cashed-out-more-than-1-billion-in-stock-this-year-including-283-million-for-daniel-ek/" rel="">75K shares for $34.8 million</a><span>.</span></p></li><li><p><span>On November 26, Spotify’s CEO sold </span><a href="https://www.musicbusinessworldwide.com/key-spotify-executives-have-cashed-out-more-than-1-billion-in-stock-this-year-including-283-million-for-daniel-ek/" rel="">75K shares for $36.1 million</a><span>.</span></p></li><li><p><span>On December 4, Spotify’s CEO sold </span><a href="https://d18rn0p25nwr6d.cloudfront.net/CIK-0001639920/2df85ff7-808d-4889-a79f-bbce7aa19236.pdf" rel="">75K shares for $37 million</a><span>.</span></p></li><li><p><span>On December 11, Spotify’s CEO sold </span><a href="https://www.edmtunes.com/2024/12/spotify-ceo-sells-millions-stock/" rel="">60K shares for $28.3 million</a><span>.</span></p></li></ul><p>Deejay Alan Freed couldn’t dream of such riches. In fact, nobody in the history of music has made more money than the CEO of Spotify. </p><p>Taylor Swift doesn’t earn that much. Even after fifty years of concertizing, Paul McCartney and Mick Jagger can’t match this kind of wealth. </p><p>At this point, I need to complain about the stupid major record labels who have empowered and supported Spotify during its long history. At some junctures, they have even been shareholders.</p><p>I’ve warned repeatedly that this is a huge mistake. Spotify is their adversary, not their partner. The longer they avoid admitting this to themselves, the worse things will get. </p><p><span>The music media isn’t much better—these new revelations came from a freelancer publishing in </span><em>Harper’s</em><span>, not from </span><em>Rolling Stone</em><span> or </span><em>Billboard</em><span> or </span><em>Variety.</em><span> </span></p><p><span>And I could say the same for the </span><em>New York Times</em><span> and </span><em>Wall Street Journal</em><span> and </span><em>Washington Post</em><span>. </span></p><p>Why didn’t they investigate this? Why don’t they care?</p><p><span>But I </span><em>am</em><span> grateful for independent journalism, which is now my main hope for the future. </span></p><p>Let’s turn to the bigger question: What do we do about this?</p><p>By all means, let’s name and shame the perpetrators. But we need more than that.</p><p>Congress should investigate ethical violations at music streaming businesses—just like they did with payola. Laws must be passed requiring full transparency. Even better, let’s prevent huge streaming platforms from promoting songs based on financial incentives.</p><p>I don’t do that as a critic. People sometimes try to offer me money for coverage, and I tell them off. It happened again this week, and I got upset. No honest person could take those payoffs.</p><p>Streaming platforms ought to have similar standards. And if they won’t do it voluntarily, legislators and courts should force their hand.</p><p>And let me express a futile wish that the major record labels will find a spine. They need to create an alternative—even if it requires an antitrust exemption from Congress (much like major league sports). </p><p>Our single best hope is a cooperative streaming platform owned by labels and musicians. Let’s reclaim music from the technocrats. They have not proven themselves worthy of our trust. </p><p>If the music industry ‘leaders’ haven’t figured that out by now—especially after the latest revelations—we are in bad shape indeed.</p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US judge finds Israel's NSO Group liable for hacking journalists via WhatsApp (337 pts)]]></title>
            <link>https://www.reuters.com/technology/cybersecurity/us-judge-finds-israels-nso-group-liable-hacking-whatsapp-lawsuit-2024-12-21/</link>
            <guid>42476828</guid>
            <pubDate>Sat, 21 Dec 2024 01:38:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/technology/cybersecurity/us-judge-finds-israels-nso-group-liable-hacking-whatsapp-lawsuit-2024-12-21/">https://www.reuters.com/technology/cybersecurity/us-judge-finds-israels-nso-group-liable-hacking-whatsapp-lawsuit-2024-12-21/</a>, See on <a href="https://news.ycombinator.com/item?id=42476828">Hacker News</a></p>
Couldn't get https://www.reuters.com/technology/cybersecurity/us-judge-finds-israels-nso-group-liable-hacking-whatsapp-lawsuit-2024-12-21/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Compiling C to Safe Rust, Formalized (261 pts)]]></title>
            <link>https://arxiv.org/abs/2412.15042</link>
            <guid>42476192</guid>
            <pubDate>Fri, 20 Dec 2024 23:30:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2412.15042">https://arxiv.org/abs/2412.15042</a>, See on <a href="https://news.ycombinator.com/item?id=42476192">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2412.15042">View PDF</a></p><blockquote>
            <span>Abstract:</span>The popularity of the Rust language continues to explode; yet, many critical codebases remain authored in C, and cannot be realistically rewritten by hand. Automatically translating C to Rust is thus an appealing course of action. Several works have gone down this path, handling an ever-increasing subset of C through a variety of Rust features, such as unsafe. While the prospect of automation is appealing, producing code that relies on unsafe negates the memory safety guarantees offered by Rust, and therefore the main advantages of porting existing codebases to memory-safe languages.
<br>We instead explore a different path, and explore what it would take to translate C to safe Rust; that is, to produce code that is trivially memory safe, because it abides by Rust's type system without caveats. Our work sports several original contributions: a type-directed translation from (a subset of) C to safe Rust; a novel static analysis based on "split trees" that allows expressing C's pointer arithmetic using Rust's slices and splitting operations; an analysis that infers exactly which borrows need to be mutable; and a compilation strategy for C's struct types that is compatible with Rust's distinction between non-owned and owned allocations.
<br>We apply our methodology to existing formally verified C codebases: the HACL* cryptographic library, and binary parsers and serializers from EverParse, and show that the subset of C we support is sufficient to translate both applications to safe Rust. Our evaluation shows that for the few places that do violate Rust's aliasing discipline, automated, surgical rewrites suffice; and that the few strategic copies we insert have a negligible performance impact. Of particular note, the application of our approach to HACL* results in a 80,000 line verified cryptographic library, written in pure Rust, that implements all modern algorithms - the first of its kind.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Aymeric Fromherz [<a href="https://arxiv.org/show-email/8fe3c653/2412.15042" rel="nofollow">view email</a>]      <br>    <strong>[v1]</strong>
        Thu, 19 Dec 2024 16:51:29 UTC (92 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Raycaster in Bash (218 pts)]]></title>
            <link>https://github.com/izabera/pseudo3d</link>
            <guid>42475703</guid>
            <pubDate>Fri, 20 Dec 2024 22:25:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/izabera/pseudo3d">https://github.com/izabera/pseudo3d</a>, See on <a href="https://news.ycombinator.com/item?id=42475703">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">a raycaster in bash</h2><a id="user-content-a-raycaster-in-bash" aria-label="Permalink: a raycaster in bash" href="#a-raycaster-in-bash"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description wolfenstein-in-bash.mp4">wolfenstein-in-bash.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/1572859/397868206-addb77f3-f309-48ab-8609-a8ea3082c952.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzQ3NTU3MDMsIm5iZiI6MTczNDc1NTQwMywicGF0aCI6Ii8xNTcyODU5LzM5Nzg2ODIwNi1hZGRiNzdmMy1mMzA5LTQ4YWItODYwOS1hOGVhMzA4MmM5NTIubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTIyMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEyMjFUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9Nzg0YTY2YmM0MzhhNzliZmUxYTU3ODAzMzRiODQzMTJhZDkyMGVkYzI4YWM3NWJiOGEzMWFlZjY2Zjc5ZjIzMCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.6c7Jq5sz0dH0ZkjiCzBpIi5gj9WWwB73p7Ac9DdJS0I" data-canonical-src="https://private-user-images.githubusercontent.com/1572859/397868206-addb77f3-f309-48ab-8609-a8ea3082c952.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzQ3NTU3MDMsIm5iZiI6MTczNDc1NTQwMywicGF0aCI6Ii8xNTcyODU5LzM5Nzg2ODIwNi1hZGRiNzdmMy1mMzA5LTQ4YWItODYwOS1hOGVhMzA4MmM5NTIubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTIyMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEyMjFUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9Nzg0YTY2YmM0MzhhNzliZmUxYTU3ODAzMzRiODQzMTJhZDkyMGVkYzI4YWM3NWJiOGEzMWFlZjY2Zjc5ZjIzMCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.6c7Jq5sz0dH0ZkjiCzBpIi5gj9WWwB73p7Ac9DdJS0I" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto">more screenshots/vidoes at <a href="https://imgur.com/a/izas-wolfenstein-bash-journey-bAy5zhp" rel="nofollow">https://imgur.com/a/izas-wolfenstein-bash-journey-bAy5zhp</a></p>
<p dir="auto">largely a port of <a href="https://lodev.org/cgtutor/raycasting.html" rel="nofollow">https://lodev.org/cgtutor/raycasting.html</a></p>
<p dir="auto">use the arrow keys to rotate and move around, and q to quit</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">why this was a bit hard:</h3><a id="user-content-why-this-was-a-bit-hard" aria-label="Permalink: why this was a bit hard:" href="#why-this-was-a-bit-hard"></a></p>
<ul dir="auto">
<li>
<p dir="auto">bash is slow.  this is by far the biggest issue.  it's so slow that you
cannot possibly achieve an acceptable frame rate if you have to execute even
a single command per pixel.  this implies that you also cannot keep the state
of the screen in memory, neither as an array of colours (did you know that
accessing a random element in an array takes linear time?) nor as a single
long string (did you know that accessing the nth character in a string takes
linear time even in LANG=C?), because literally just reading this
representation to dump it to the screen will take longer than a frame</p>
</li>
<li>
<p dir="auto">bash has no floating point support nor access to a library of maths
functions. all the maths is done on integers, scaled up by 100000</p>
</li>
<li>
<p dir="auto">terminals are ugly if you use a full character to represent each pixel, so
this uses unicode half blocks with different foreground and background
colours, which effectively doubles the vertical resolution.  there is
unfortunately no way to update only one of the two colours in a cell, nor any
way to query the current colours of a cell (besides, it would be too slow for
bash), so every time we write a pixel we need to know the colour of an
adjacent pixel.  it would be really convenient if bash could store the state
somehow but alas it cannot</p>
</li>
<li>
<p dir="auto">various misc annoyances:</p>
<ul dir="auto">
<li>
<p dir="auto">making sure all the terminal is updated at once is not trivial with a
slow language like bash</p>
</li>
<li>
<p dir="auto">most terminals are not designed to play video games in (shockingly), so
you cannot test if a key is currently pressed.  instead you can only get
a single key that's being held down, usually really slowly debounced and
with a low limit for continued presses, so you probably get like 5-6
characters a second.  you cannot even get multiple keys pressed at the
same time unless some are modifiers.  the kitty keyboard protocol 100%
fixes all this, and i'm sure it will become a widely implemented standard
by the year 2100</p>
</li>
<li>
<p dir="auto">turns out that filling a terminal with colours takes a lot of data.  at
my normal font size this does ~10mb of i/o per second, which isn't very
much in the grand scheme of things, but, you know, it's bash</p>
</li>
<li>
<p dir="auto">bash will never use a single syscall to print a string with more than one
newline, regardless of the type of file you're writing to.  this is
pointless and dumb, and it's the reason why this never prints \n and
always moves the cursor in other ways.  ultimately this ended up printing
more data than the size your terminal is likely getting in each read, so
it might not matter too much, but it still bothered me</p>
</li>
<li>
<p dir="auto">ecma48/vt100/vt200/xterm... were all designed by insane people who hated
me specifically</p>
</li>
<li>
<p dir="auto">holy shit i'm bad at maths, i went to uni for this what the fuck</p>
</li>
</ul>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">faq:</h3><a id="user-content-faq" aria-label="Permalink: faq:" href="#faq"></a></p>
<ul dir="auto">
<li>
<p dir="auto">q: it fucks things up when i resize the window/it's a flickery mess/it
generally looks like shite on my terminal</p>
</li>
<li>
<p dir="auto">a: open an issue please</p>
</li>
<li>
<p dir="auto">q: my cpu heats up like crazy/my computer from 2005 slows down to a crawl</p>
</li>
<li>
<p dir="auto">a: try to set the env variable FPS to something less than 30</p>
</li>
<li>
<p dir="auto">q: it doesn't work on my bash &lt; 5</p>
</li>
<li>
<p dir="auto">a: yep</p>
</li>
<li>
<p dir="auto">q: is this code all pure bash?</p>
</li>
<li>
<p dir="auto">a: no.  it also calls stty once at startup to disable echo, and once at exit
to re enable it</p>
</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Qualcomm wins licensing fight with Arm over chip designs (197 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2024-12-20/qualcomm-wins-licensing-fight-with-arm-over-chip-designs</link>
            <guid>42475228</guid>
            <pubDate>Fri, 20 Dec 2024 21:28:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2024-12-20/qualcomm-wins-licensing-fight-with-arm-over-chip-designs">https://www.bloomberg.com/news/articles/2024-12-20/qualcomm-wins-licensing-fight-with-arm-over-chip-designs</a>, See on <a href="https://news.ycombinator.com/item?id=42475228">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DOS APPEND (112 pts)]]></title>
            <link>https://www.os2museum.com/wp/dos-append/</link>
            <guid>42475011</guid>
            <pubDate>Fri, 20 Dec 2024 21:04:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.os2museum.com/wp/dos-append/">https://www.os2museum.com/wp/dos-append/</a>, See on <a href="https://news.ycombinator.com/item?id=42475011">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
						
<p>For a long time, I couldn’t quite grasp what the DOS APPEND command could possibly be good for. Until I came across a situation which APPEND was made for.</p>



<p>When I worked on organizing and building the <a href="https://www.os2museum.com/wp/dos-2-11-from-scratch/" data-type="post" data-id="5611">DOS 2.11 source code</a>, I tried to place the source files in a tree structure similar to that used by DOS 3.x (this is known from DOS 3.x OAKs):</p>



<pre>C:.<br>└───src<br>    ├───bios<br>    ├───cmd<br>    │   ├───chkdsk<br>    │   ├───command<br>    │   ├───debug<br>    │   ├───diskcopy<br>    │   ├───edlin<br>    │   ├───exe2bin<br>    │   ├───fc<br>    │   ├───find<br>    │   ├───format<br>    │   ├───more<br>    │   ├───print<br>    │   ├───recover<br>    │   ├───sort<br>    │   └───sys<br>    ├───dos<br>    ├───inc<br>    └───msdos<br></pre>



<p>The <code>inc</code> subdirectory unsurprisingly contains shared include files such as <code>DOSSYM.ASM</code>, which are included just about from everywhere. No problem, right?</p>



<p>Except… to get output that most closely matches existing DOS 2.x binaries, it is necessary to use an old version of MASM (version 1.25 seems to do the trick). But MASM 1.25 is designed to run on top of DOS 1.x, and knows nothing whatsoever about directories.</p>



<p>It is possible that back in the day, DOS 2.x was built from a single huge directory on a hard disk. In fact it is known that DOS 2.0 could not be built on PCs at all, and was built on DEC mainframes. Yet DOS 2.11 was also clearly modified such that it <em>could</em> be build on PCs using Microsoft’s development tools.</p>



<p>However it was done back in 1983, lumping 150+ assembler source files into a single directory, and then adding hundreds of object and executable files, did not sound <em>at all</em> appealing. Cloning <code>DOSSYM.ASM</code> to every directory where it was needed seemed even worse.</p>



<p>That’s when I somehow remembered that APPEND exists, and realized that it’s the perfect solution to the problem. Before building, one can run</p>



<pre>APPEND ..\..\INC;..\INC</pre>



<p>and the <code>inc</code> directory becomes accessible from all of its sibling subdirectories and from subdirectories one level deeper. It would have been possible to use an absolute path as well, but this way the build batch file does not need to know where it lives.</p>



<p>With APPEND in place, the old MASM 1.25 which uses FCB I/O will find the centrally located include files, and the source code can be organized into a neat hierarchical structure that’s far easier to work with than one giant blob.</p>



<h3>What is APPEND?</h3>



<p>APPEND is a “DOS extension”, in fact it is a TSR which intercepts INT 21h and adds special handling for several subfunctions. These are primarily:</p>



<ul>
<li><strong>0Fh</strong> FCB File Open</li>



<li><strong>3Dh</strong> Handle File Open</li>



<li><strong>23h</strong> Get File Size</li>
</ul>



<p>If these subfunctions fail to find a file in the current directory, APPEND will retry them using the list of paths it manages.</p>



<p>When building DOS 2.11, MASM 1.25 will try to open DOSSYM.ASM using INT 21h/0Fh (FCB File Open). Because the file does not exist in the current directory, the initial attempt will fail. APPEND will then try opening <code>..\INC\DOSSYM.ASM</code> and, if that is unsuccessful, also <code>..\..\INC\DOSSYM.ASM</code>. Old MASM is thus magically upgraded to handle multiple directories, without actually knowing anything about them.</p>



<p>The working principle of APPEND is not complicated. It primarily serves as a bridge between old DOS applications which have no or poor support for directories, and users who really, really want to organize files and programs in multiple directories and possibly across multiple drive letters. Of course the actual APPEND implementation is anything but straightforward.</p>



<h3>APPEND Evolution and Implementation</h3>



<p>The first DOS version which came with APPEND was DOS 3.3 (1987), not coincidentally the first DOS version developed by IBM.</p>



<p>But APPEND is older than that—it first appeared in the IBM PC Network Program 1.0 in 1985. It is hard to speculate why it was shipped with the PC Network Program (later the PC LAN Program) because APPEND does not <em>really</em> have anything to do with networking. It is plausible that it was especially useful with networking, when users were motivated to store applications on a central network server and data files on their own machines. And that’s a problem for applications which cannot handle directories well.</p>



<p>Now that we can see the <a href="https://github.com/microsoft/MS-DOS/blob/main/v4.0/src/CMD/APPEND/APPEND.ASM">source code for APPEND</a>, some things are clearer. The original PC Network Program version of APPEND was written by someone with initials G. G. A., and in 1986 it was adapted for shipping with DOS by B. A. F., no doubt Barry A. Feigenbaum (best known for developing the SMB protocol).</p>



<p>APPEND by default manages the path list in its own internal storage. But it also has a <code>/E</code> option which instead causes APPEND to look for an eponymous environment variable. This mechanism has a disadvantage in that the <code>APPEND=</code> variable needs space in every newly created environment. On the other hand, it also allows different DOS processes to have different APPEND paths.</p>



<p>It should be noted that OS/2 implements a mechanism analogous to <code>APPEND /E</code> through the <code>DPATH</code> environment variable. Only on OS/2 it’s built in, with no need to load TSRs.</p>



<p>Another APPEND addition was the <code>/X</code> switch, which causes APPEND to hook further DOS subfunctions, most notably Find First and Exec. This effectively allows APPEND to supplant the <code>PATH</code> environment variable.</p>



<p>APPEND is listed in the PC DOS 3.3 reference as both internal and external command. At first glance that doesn’t make any sense, but it’s actually true.</p>



<p>The first time APPEND is run, it is an external command. But when it installs itself as a TSR, it hooks INT 2Fh/AEh. COMMAND.COM, in turn, calls INT 2Fh/AEh when it is asked to execute a command that COMMAND.COM does not know about. This mechanism allows APPEND to function as an internal command once it is installed.</p>



<p>That is, the first time APPEND is run, it must be loaded and executed from disk. But any subsequent attempt to run APPEND through COMMAND.COM, either from the command line or a batch file, will take a shortcut directly to the already installed TSR, effectively turning APPEND into an internal command. The INT 2Fh/AEh interface between COMMAND.COM and a TSR was added in DOS 3.3, quite likely for the benefit of APPEND.</p>



<p>APPEND also has its own programming interface, accessed through INT 2Fh/B7h. This allows programs to control APPEND behavior and query the current APPEND path. How widely this is used isn’t entirely clear.</p>



<h3>Summary</h3>



<p>APPEND is one of the things that are completely irrelevant 99.99% of the time… yet can be extremely useful when the need arises. It is a TSR which allows applications to find files in a directory other than the current one.</p>



<p>The first appearance in APPEND was in the IBM PC Network Program (1985), but since version 3.3 (1987) it was integrated into DOS, with an interesting link to COMMAND.COM which allows APPEND to become an internal command once it is installed.</p>
											</div></div>]]></description>
        </item>
    </channel>
</rss>