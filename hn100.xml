<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 17 Dec 2024 08:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Running NetBSD on IBM ThinkPad 380Z (105 pts)]]></title>
            <link>https://luke8086.dev/netbsd-on-thinkpad-380z.html</link>
            <guid>42438431</guid>
            <pubDate>Tue, 17 Dec 2024 04:51:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://luke8086.dev/netbsd-on-thinkpad-380z.html">https://luke8086.dev/netbsd-on-thinkpad-380z.html</a>, See on <a href="https://news.ycombinator.com/item?id=42438431">Hacker News</a></p>
<div id="readability-page-1" class="page">

<p>
  Launched in 1998, the 380Z was one very fine ThinkPad.

  It was the last ThinkPad to come in the classic bulky and rectangular form factor.

  It was also one of the first to feature a huge 13.3" TFT display, powerful 233MHz Pentium II, and whopping 160 megs of RAM.
</p>

<p>
  I recently stumbled upon one in perfect condition on eBay, and immediately thought it'd be a cool vintage gadget to put on the desk.

  I only wondered if I could still use it for some slow-paced, distraction-free coding, using reasonably modern software.
</p>

<p>
  I evaluated a bunch of contemporary operating systems, including different variants of BSD and Linux.

  Usually, the experience was underwhelming in terms of performance, hardware support and stability.

  Well... except for NetBSD, which gave me such perfectly smooth ride, that I thought it was worth sharing.
</p>

<img src="https://luke8086.dev/images/netbsd-photo-380z.jpg" alt="ThinkPad 380Z booting NetBSD">

<h2>Upgrading hard drive</h2>

<p>
  First things first, to improve performance, I've replaced the original HDD with a 16GB mSATA.

  The 380Z comes with a standard 44-pin PATA interface, so I plugged it in through a generic mSATA-to-PATA adapter.

  It works <i>almost</i> seamlessly.
</p>

<p>
  One minor issue is that the BIOS-reported size is limited to 8GB.

  It doesn't matter to operating systems, but confuses some bootloaders.

  In general it's safer to use a smaller root partition and a separate one for <code>/home</code>. 

  However, NetBSD worked just fine off a single full-disk partition.
</p>

<h2>Connecting to network</h2>

<p>
  The 380Z doesn't have a built-in network card.

  Fortunately it has both CardBus and USB slots, so there are plenty of options.
</p>

<p>
  One that worked for me was Edimax EW-7108PCg — a WiFi CardBus card based on a RT2561S chipset.

  Another one was a generic no-name USB-to-LAN adapter based on RTL8153.
</p>

<h2>Booting the installer</h2>

<p>
  Despite having a USB port, the 380Z doesn't support USB boot.

  My CD drive was also erratic and practically unusable - a common issue in vintage laptops.

  Fortunately, the 380Z supports yet another, rather unusual boot option — using a CardBus disk.
</p>

<p>
  So I grabbed the <code>NetBSD-10.0-i386-install.img</code> image and wrote to a Compact Flash card.

  Then, plugged it in using a generic CF-to-CardBus adapter, and off it went.

  For NetBSD, booting from CardBus is business as usual, no questions asked.
</p>

<p>
  To be fair, with other systems it's also doable, but usually requires some tinkering to mount the root filesystem.
</p>


<h2>Installation</h2>

<p>
  NetBSD comes with a lightweight, friendly, text-mode installer.

  Step by step, it guides you through setting the keyboard layout, partitioning, selecting distribution sets, setting up the network, timezone, root shell and password, enabling the package manager, choosing optional daemons, and adding a user account.
</p>

<p>
  Unless you go for automatic full-disk mode, the trickiest part may be partitioning, since NetBSD uses its own custom scheme on top of MBR partitions.

  Fortunately, the whole process is <a href="https://www.netbsd.org/docs/guide/en/" target="_blank">well documented</a>.
</p>

<p>
  In my case, when prompted for distribution sets, I selected "custom installation", and selected all sets except for source and debug ones.

  The resulting installation took about 1.6GB of disk space, and included the entire X11 environment.
</p>

<img src="https://luke8086.dev/images/netbsd-shot-install.png" alt="NetBSD installer">

  
<h2>Enabling framebuffer</h2>

<p>
  NetBSD supports VESA console framebuffer, though it's not enabled by default, and not particularly advertised in the docs.

  Turning it on is as simple as adding <code>vesa on; vesa 1024x768;</code> commands to a menu item in <code>/boot.cfg</code>.
</p>

<p>
  By the way, it's too bad that NetBSD's console doesn't support unicode, so it's not very usable without X.

  I think this could be a killer feature for hardware with even less RAM.
</p>

<h2>Saving RAM</h2>

<p>
  Even NetBSD comes with some bloatware ;-)

  To save as much RAM as possible, you can turn it off by adding to <code>/etc/rc.conf</code>:
</p>

<pre><code>inetd=NO
postfix=NO
cron=NO
virecover=NO
makemandb=NO
powerd=NO
syslogd=NO
</code></pre>

<p>
  You can also reduce the amount of consoles by commenting them out in <code>/etc/ttys</code>.
</p>

<p>
  After reboot, you'll have a pretty clean slate:
</p>


<pre><code>t380z# ps auxc
USER PID %CPU %MEM   VSZ   RSS TTY   STAT STARTED    TIME COMMAND
root   0  0.0 18.6     0 30300 ?     DKl   3:45PM 0:00.08 system
root   1  0.0  0.9  5836  1504 ?     Ss    3:45PM 0:00.08 init
root 345  0.0  2.0 12724  3292 ?     Ss    3:45PM 0:00.09 wpa_supplicant
root 707  0.0  1.0  6104  1544 ttyE0 O+    3:45PM 0:00.03 ps
root 711  0.0  3.1 12848  4988 ttyE0 Ss    3:45PM 0:00.54 login
root 712  0.0  1.4  6576  2216 ttyE0 S     3:45PM 0:00.24 sh
root 709  0.0  1.0  5744  1556 ttyE1 Ss+   3:45PM 0:00.03 getty

t380z# cat /proc/meminfo
        total:    used:    free:  shared: buffers: cached:
Mem:  139943936 32768000 107175936        0  8208384 18546688
Swap: 167759872        0 167759872
MemTotal:    136664 kB
MemFree:     104664 kB
MemShared:        0 kB
Buffers:     104664 kB
Cached:       18112 kB
SwapTotal:   163828 kB
SwapFree:    163828 kB
</code></pre>

<h2>WireGuard</h2>

<p>
  In case you'd like to use WireGuard, NetBSD's got you covered.

  It supports it out of the box, with no extra dependencies.
  
  The entire documentation is a single man page and it's very straighforward.

  However, it only shows commands to manually execute, there's no dedicated config file.

  To make your setup persistent, you can simply add it to <code>/etc/rc.local</code>:
</p>

<pre><code>echo -n 'Setting up wireguard: '

ifconfig wg0 create
ifconfig wg0 inet [ip/prefix]
wgconfig wg0 set private-key /etc/wg/key
wgconfig wg0 add peer [peer-name] \
        [public-key]
        --allowed-ips=[ip/prefix] \
        --endpoint=[endpoint]
ifconfig wg0 up

echo 'done.'
</code></pre>

<h2>Setting locale</h2>

<p>
  The default locale in NetBSD is C.

  The installer doesn't prompt you to change it, and there isn't any dedicated config file.

  Instead, you need to set it manually, for example in <code>/etc/profile</code> or <code>~/.profile</code>:
</p>

<pre><code>export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_COLLATE=en_US.UTF-8
</code></pre>

<h2>The X server</h2>

<p>
  The GPU on 380Z is a NeoMagic MagicMedia 256AV and it has a dedicated driver in Xorg, called <code>neomagic</code>.

  However, only in NetBSD it worked out of the box without any tinkering, just by running <code>startx</code>.

  On other systems I tried, it required some adjustments or even resorting to plain VESA/FB drivers.
</p>


<h2>Window manager</h2>

<p>
  The default desktop environment of NetBSD, as included in the basesystem, consists of CTWM, XClock and XTerm.

  It looks <a href="https://luke8086.dev/images/netbsd-shot-ctwm.jpg" target="_blank">like this</a>.

  It's as minimal as it gets, it's not too ugly, and it's somewhat usable.
</p>

<p>
  I tried it for a bit, but couldn't get to like CTWM.

  Instead I've replaced it with <a href="https://fastestcode.org/emwm.html" target="_blank">EMWM</a> (Enhanced Motif Window Manager), which is similarly lightweight.
</p>

<img src="https://luke8086.dev/images/netbsd-shot-emwm.png" alt="NetBSD running EMWM">

<h2>Terminal emulator</h2>

<p>
  I haven't found a terminal with a smaller memory footprint than XTerm.

  Even urxvt or st were larger.

  However, for me XTerm is actually good enough, so I didn't spent much time looking for alternatives.

  I only adjusted some colors, changed the font to Terminus, and added shortcuts for copy-pasting:
</p>

<pre><code>XTerm*VT100.background: black
XTerm*VT100.foreground: grey90
XTerm*VT100.faceName: Terminus
XTerm*VT100.faceSize: 12
XTerm*VT100.allowBoldFonts: false
XTerm*VT100.translations: #override \
      Ctrl Shift <key>V:    insert-selection(CLIPBOARD) \n\
      Ctrl Shift <key>C:    copy-selection(CLIPBOARD)
</key></key></code></pre>

<h2>The shell</h2>

<p>
  In the basesystem, NetBSD comes with sh, csh and ksh.

  I've never bothered learning csh, but sh is fine for basic administrative tasks, and ksh is somewhere in between sh and bash in terms of functionality.

  I tried using ksh for a while but I kept missing features.

  Eventually I gave up on it and installed bash from packages.
</p>

<h2>Browsing web</h2>

<p>
  The most reasonable web browser for the 380Z is <a href="https://dillo-browser.github.io/" target="_blank">Dillo</a>.

  It lacks support for JavaScript and modern CSS layouts, so many pages render all over the place, but it's still useful for reading docs and static pages.

  To my surprise, Google seems to work, and doesn't block it with captcha.
</p>

<p>
  One could argue Dillo is <i>exactly</i> what a web browser is supposed to be — a productivity tool for browsing nicely-formatted hypertext documents.

  I only wish I had some time to contribute to its development.

  Well, maybe when I retire...
</p>

<img src="https://luke8086.dev/images/netbsd-shot-web.png" alt="NetBSD running Dillo browser">

<h2>Playing music</h2>

<p>
  NetBSD was the only system I tried that properly supported the built-in Crystal CS4237B soundcard.

  In fact, it detected it twice, with two different drivers, <code>wss</code>&nbsp;and&nbsp;<code>sb</code>.

  Unfortunately this caused a conflict and they both emited garbage noise.

  I was able to fix it by adding <code>usermod disable wss</code> to the bootloader line.
</p>

<p>
  The most viable player is mpg123.

  It manages to play an online low-fi radio stream with only slight stuttering when other CPU-heavy tasks are running.

  Itself it seems to take around 10-20% of the CPU time.

  The audio quality of the soundcard is also just adequate for low-fi music, so for sure it won't be too distracting.
</p>

<h2>Once set up, what's it good for?</h2>

<p>
  The 380Z has a very comfortable, high-profile, classic ThinkPad keyboard, as well as a crispy 4:3 display.

  It's not as snappy as your latest MacBook, but it's fine for many terminal-based tasks, for example:
</p>

<ul>
  <li>any kind of work over SSH, even through WireGuard</li>
  <li>tinkering with UNIX and learning its internals</li>
  <li>low-level coding in C, assembly, etc.</li>
  <li>developing TUI and even lightweight GUI apps</li>
  <li>taking notes, writing blog posts</li>
  <li>developing a modern web browser (building dillo only takes ~20min) ;-)</li>
  <li>learning how to solve problems in a resource constrained environment</li>
  <li><span><a href="https://luke8086.dev/retronews.html" target="_blank">wasting time</a> on social media</span> practicing patience and mindfulness</li>
</ul>

<h2>Final thoughts on NetBSD</h2>

<p>
  NetBSD is a lightweight, compact, finely engineered system.

  It doesn't get as much attention as its BSD cousins, not to mention Linux, but I just cannot overstate how <i>pleasant</i> it is to use.
</p>

<p>
  It doesn't overwhelm you with thousands of packages and dozens of boot services right in a fresh install.

  On the contrary, it does only what you tell it to do.

  It puts you in charge and makes you feel like you can understand it top to bottom.
</p>

<p>
  It happily boots on a 25-year old machine, like you moved back in time, but still provides you with a full repository of the latest software.
</p>

<p>
  It may not be mainstream enough for a daily driver, but I think it's the ultimate UNIX to put on a spare, underpowered machine.
</p>

<p><em>~luke, 2024-12-16</em></p>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Waymo will bring autonomous vehicles to Tokyo (158 pts)]]></title>
            <link>https://waymo.com/blog/2024/12/partnering-with-nihon-kotsu-and-go-on-our-first-international-road-trip</link>
            <guid>42438009</guid>
            <pubDate>Tue, 17 Dec 2024 03:17:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://waymo.com/blog/2024/12/partnering-with-nihon-kotsu-and-go-on-our-first-international-road-trip">https://waymo.com/blog/2024/12/partnering-with-nihon-kotsu-and-go-on-our-first-international-road-trip</a>, See on <a href="https://news.ycombinator.com/item?id=42438009">Hacker News</a></p>
<div id="readability-page-1" class="page"><article aria-labelledby="P0-7-title"><a href="https://waymo.com/blog/"><img alt="" role="presentation" src="https://waymo.com/static/images/blog/icon-left-arrow.svg"><img alt="" role="presentation" src="https://waymo.com/static/images/blog/icon-left-arrow-rollover.svg"><span>Back to all posts</span></a><section><div><picture><source srcset="https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?fm=webp 2x, https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?w=1440&amp;fm=webp" media="(min-width: 600px)" type="image/webp" width="1920" height="1080"><source srcset="https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg 2x, https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?w=1440" media="(min-width: 600px)" type="image/jpeg" width="1920" height="1080"><source srcset="https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?fm=webp 2x, https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?w=1024&amp;fm=webp" media="(min-width: 600px) and (max-width: 1023px)" type="image/webp" width="1920" height="1080"><source srcset="https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg 2x, https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?w=1024" media="(min-width: 600px) and (max-width: 1023px)" type="image/jpeg" width="1920" height="1080"><source srcset="https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?fm=webp 2x, https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?w=1024&amp;fm=webp" media="(max-width: 599px)" type="image/webp" width="1920" height="1080"><img alt="A white Waymo vehicle in front of a a radiating red spiral, with Nihon Kotsu, Waymo, and GO logos in the footer" loading="lazy" srcset="https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg 2x, https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?w=1024" src="https://images.ctfassets.net/e6t5diu0txbw/lHhourBhrG3ffzwe7rNqU/b952ca5a0e2c73bf60f058081b7b96b8/Waymo_GO_NihonKotsu_Hero.jpg?w=420" width="1920" height="1080"></picture></div><div><p>こんにちは(Konnichiwa) and hello, Japan! We're thrilled to announce that Waymo, in partnership with Nihon Kotsu and GO, will bring our autonomous vehicles to Tokyo for our first international <a href="https://waymo.com/blog/2023/11/road-trip-how-our-cross-country-testing-helps-advance-the-waymo-driver/"><u>road trip</u></a>. There, our Driver will learn and adapt to left-hand traffic and new driving nuances associated with operating in one of the world's most densely populated urban environments.</p><p>Our upcoming road trip to Tokyo gives us the chance to work alongside local partners, government officials, and community groups to understand the new landscape. We’ll learn how Waymo can serve Tokyo’s residents and become a beneficial part of the city’s transportation ecosystem. And every step of the way, we’ll take a rigorous approach to validating our technology's safety and performance.</p><p>This expansion into Japan aligns with the country's vision for the future of transportation. Over the years, the Japanese National and Tokyo Metropolitan governments have been proactively working to address the evolving transportation needs of society and foster the adoption of innovative technologies that can enhance safety and mobility. We are engaging with Japanese policymakers, regulators, and local safety officials to ensure a responsible and seamless implementation of Waymo's technology to Tokyo's streets.</p><p>The first Waymo, all-electric Jaguar I-PACEs will arrive in Tokyo in early 2025. Our partner, Nihon Kotsu, Tokyo’s largest taxi company, will oversee the management and servicing of the Waymo vehicles. The companies are working closely together to train Nihon Kotsu’s team on operating vehicles equipped with Waymo's autonomous driving system. Initially, Nihon Kotsu drivers will operate the vehicles manually to map key areas of the Japanese capital, including Minato, Shinjuku, Shibuya, Chiyoda, Chūō, Shinagawa, and Kōtō.&nbsp;</p><p>Through this initial phase in Tokyo, we’ll gain valuable experience that accelerates the development of the Waymo Driver, allowing us to evaluate how our AI-powered driver generalizes to new environments through simulation. This expansion follows Waymo's best-in-class <a href="https://waymo.com/blog/2020/10/sharing-our-safety-framework/"><u>safety framework</u></a>—the same approach that guided us from the world's first fully autonomous ride on public roads to tens of millions of miles on US roads, and soon, our first kilometers in Tokyo.&nbsp;&nbsp;</p><p>We look forward to sharing more as we introduce Waymo to Tokyo residents, providing updates on our progress along the way.</p></div></section></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Always go to the funeral (2005) (151 pts)]]></title>
            <link>https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral</link>
            <guid>42435972</guid>
            <pubDate>Mon, 16 Dec 2024 22:04:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral">https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral</a>, See on <a href="https://news.ycombinator.com/item?id=42435972">Hacker News</a></p>
Couldn't get https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Go Protobuf: The New Opaque API (232 pts)]]></title>
            <link>https://go.dev/blog/protobuf-opaque</link>
            <guid>42434947</guid>
            <pubDate>Mon, 16 Dec 2024 20:18:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://go.dev/blog/protobuf-opaque">https://go.dev/blog/protobuf-opaque</a>, See on <a href="https://news.ycombinator.com/item?id=42434947">Hacker News</a></p>
Couldn't get https://go.dev/blog/protobuf-opaque: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Our muscles will atrophy as we climb the Kardashev Scale (134 pts)]]></title>
            <link>https://solmaz.io/our-muscles-will-atrophy</link>
            <guid>42433205</guid>
            <pubDate>Mon, 16 Dec 2024 17:34:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://solmaz.io/our-muscles-will-atrophy">https://solmaz.io/our-muscles-will-atrophy</a>, See on <a href="https://news.ycombinator.com/item?id=42433205">Hacker News</a></p>
Couldn't get https://solmaz.io/our-muscles-will-atrophy: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Lfgss shutting down 16th March 2025 (day before Online Safety Act is enforced) (510 pts)]]></title>
            <link>https://www.lfgss.com/conversations/401475/</link>
            <guid>42433044</guid>
            <pubDate>Mon, 16 Dec 2024 17:18:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lfgss.com/conversations/401475/">https://www.lfgss.com/conversations/401475/</a>, See on <a href="https://news.ycombinator.com/item?id=42433044">Hacker News</a></p>
Couldn't get https://www.lfgss.com/conversations/401475/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Veo 2: Our video generation model (405 pts)]]></title>
            <link>https://deepmind.google/technologies/veo/veo-2/</link>
            <guid>42432914</guid>
            <pubDate>Mon, 16 Dec 2024 17:04:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://deepmind.google/technologies/veo/veo-2/">https://deepmind.google/technologies/veo/veo-2/</a>, See on <a href="https://news.ycombinator.com/item?id=42432914">Hacker News</a></p>
Couldn't get https://deepmind.google/technologies/veo/veo-2/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[What did Ada Lovelace's program actually do? (2018) (261 pts)]]></title>
            <link>https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html</link>
            <guid>42432867</guid>
            <pubDate>Mon, 16 Dec 2024 16:58:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html">https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html</a>, See on <a href="https://news.ycombinator.com/item?id=42432867">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
  <p>The story of Microsoft’s founding is one of the most famous episodes in
computing history. In 1975, Paul Allen flew out to Albuquerque to demonstrate
the BASIC interpreter that he and Bill Gates had written for the Altair
microcomputer. Because neither of them had a working Altair, Allen and Gates
tested their interpreter using an emulator that they wrote and ran on Harvard’s
computer system. The emulator was based on nothing more than the published
specifications for the Intel 8080 processor. When Allen finally ran their
interpreter on a real Altair—in front of the person he and Gates hoped would
buy their software—he had no idea if it would work. But it did. The next month,
Allen and Gates officially founded their new company.</p>

<p>Over a century before Allen and Gates wrote their BASIC interpreter, Ada
Lovelace wrote and published a computer program. She, too, wrote a program for
a computer that had only been described to her. But her program, unlike the
Microsoft BASIC interpreter, was never run, because the computer she was
targeting was never built.</p>

<!--more-->

<p>Lovelace’s program is often called the world’s first computer program. Not
everyone agrees that it should be called that. Lovelace’s legacy, it turns out,
is one of computing history’s most hotly debated subjects. Walter Isaacson has
written that the dispute about the extent and merit of her contributions
constitutes a “minor academic specialty.”<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" rel="footnote">1</a></sup> Inevitably, the fact that
Lovelace was a woman has made this dispute a charged one. Historians have cited
all kinds of primary evidence to argue that the credit given to Lovelace is
either appropriate or undeserved. But they seem to spend less time explaining
the technical details of her published writing, which is unfortunate, because
the technical details are the most fascinating part of the story. Who wouldn’t
want to know exactly how a program written in 1843 was supposed to work?</p>

<p>In fairness, Lovelace’s program is not easy to explain to the layperson without
some hand-waving. It’s the intricacies of her program, though, that make it so
remarkable. Whether or not she ought to be known as “the first programmer,” her
program was specified with a degree of rigor that far surpassed anything that
came before. She thought carefully about how operations could be organized into
groups that could be repeated, thereby inventing the loop. She realized how
important it was to track the state of variables as they changed, introducing a
notation to illustrate those changes. As a programmer myself, I’m startled to
see how much of what Lovelace was doing resembles the experience of writing
software today.</p>

<p>So let’s take a closer look at Lovelace’s program. She designed it to calculate
the Bernoulli numbers. To understand what those are, we have to go back a
couple millennia to the genesis of one of mathematics’ oldest problems.</p>

<h2 id="sums-of-powers">Sums of Powers</h2>
<p>The Pythagoreans lived on the shores of the Mediterranean and worshiped
numbers. One of their pastimes was making triangles out of pebbles.</p>

<p><img src="https://twobithistory.org/images/triangular_numbers1.png" alt=""></p>

<p>One pebble followed by a row of two pebbles makes a triangle
containing three pebbles. Add another row of three pebbles and you get a
triangle containing six pebbles. You can continue like this, each time adding a
row with one more pebble in it than the previous row. A triangle with six rows
contains 21 pebbles. But how many pebbles does a triangle with 423 rows
contain?</p>

<p>What the Pythagoreans were looking for was a way to calculate the following
without doing all the addition:</p>

\[1 + 2 + 3 + \cdots + n\]

<p>They eventually realized that, if you place two triangles of the same size up
against each other so that they form a rectangle, you can find the area of the
rectangle and divide by two to get the number of pebbles in each of the
triangles:</p>

<p><img src="https://twobithistory.org/images/triangular_numbers2.png" alt=""></p>

\[1 + 2 + 3 + \cdots + n = \frac{n(n+1)}{2}\]

<p>Archimedes later explored a similar problem. He was interested in the following
series:</p>

\[1^2 + 2^2 + 3^2 + \cdots + n^2\]

<p>You might visualize this series by imagining a stack of progressively larger
squares (made out of tiny cubes), one on top of the other, forming a pyramid.
Archimedes wanted to know if there was an easy way to tell how many cubes would
be needed to construct a pyramid with, say, 423 levels. He recorded a solution
that also permits a geometrical interpretation.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Three pyramids can be fit together to form a rectangular prism with a tiny,
one-cube-high extrusion at one end. That little extrusion happens to be a
triangle that obeys the same rules that the Pythagoreans used to make their
pebble triangles. (<a href="https://www.youtube.com/watch?v=aXbT37IlyZQ">This video</a>
might be a more helpful explanation of what I mean.) So the volume of the whole
shape is given by the following equation:</p>

\[3(1^2 + 2^2 + 3^2 + \cdots + n^2) = (n+1)n^2 + (1 + 2 + 3 + \cdots + n)\]

<p>By substituting the Pythagorean equation for the sum of the first <em>n</em>
integers and doing some algebra, you get this:</p>

\[1^2 + 2^2 + 3^2 + \cdots + n^2 = \frac{n(n+1)(2n+1)}{6}\]

<p>In 499, the Indian mathematician and astronomer, Aryabhata, published a work
known as the <em>Aryabhatiya</em>, which included a formula for calculating the sum of
cubes:</p>

\[1^3 + 2^3 + 3^3 + \cdots + n^3 = (1 + 2 + 3 + \cdots + n)^2\]

<p>A formula for the sum of the first <em>n</em> positive integers raised to the fourth
power wasn’t published for another 500 years.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>You might be wondering at this point if there is a general method for finding
the sum of the first <em>n</em> integers raised to the <em>kth</em> power.
Mathematicians were wondering too. Johann Faulhaber, a German mathematician and
slightly kooky numerologist, was able to calculate formulas for sums of
integers up to the 17th power, which he published in 1631. But this may have
taken him years and he did not state a general solution.<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" rel="footnote">4</a></sup> Blaise Pascal
finally outlined a general method in 1665, though it depended on first knowing
how to calculate the sum of integers raised to every lesser power.<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" rel="footnote">5</a></sup> To
calculate the sum of the first <em>n</em> positive integers raised to the sixth power,
for example, you would first have to know how to calculate the sum of the first
<em>n</em> positive integers raised to the fifth power.</p>

<p>A more practical general solution was stated in the posthumously published work
of Swiss mathematician Jakob Bernoulli, who died in 1705. Bernoulli began by
deriving the formulas for calculating the sums of the first <em>n</em> positive
integers to the first, second, and third powers.<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" rel="footnote">6</a></sup> These he gave in
polynomial form, so they looked like the below:</p>

\[1 + 2 + 3 + \cdots + n = \frac{1}{2}n^2 + \frac{1}{2}n \\

1^2 + 2^2 + 3^2 + \cdots + n^2 = \frac{1}{3}n^3 + \frac{1}{2}n^2 + \frac{1}{6}n
\\

1^3 + 2^3 + 3^3 + \cdots + n^3 = \frac{1}{4}n^4 + \frac{1}{2}n^3 +
\frac{1}{4}n^2\]

<p>Using Pascal’s Triangle, Bernoulli realized that these polynomials followed a
predictable pattern. Essentially, Bernoulli broke the coefficients of each
term down into two factors, one of which he could determine using Pascal’s
Triangle and the other which he could derive from the interesting property that
all the coefficients in the polynomial seemed to always add to one. Figuring
out the exponent that should be attached to each term was no problem,
because that also followed a predictable pattern. The factor of each
coefficient that had to be calculated using the sums-to-one rule formed a
sequence that became known as the Bernoulli numbers.</p>

<p>Bernoulli’s discovery did not mean that it was now trivial to calculate the sum
of the first positive <em>n</em> integers to any given power. In order to calculate
the sum of the first positive <em>n</em> integers raised to the <em>kth</em> power,
you would need to know every Bernoulli number up to the <em>kth</em> Bernoulli
number. Each Bernoulli number could only be calculated if the previous
Bernoulli numbers were known. But calculating a long series of Bernoulli
numbers was significantly easier than deriving each sum of powers formula in
turn, so Bernoulli’s discovery was a big advance for mathematics.</p>

<h2 id="babbage">Babbage</h2>
<p>Charles Babbage was born in 1791, nearly a century after Bernoulli died. I’ve
always had some vague idea that Babbage designed but did not build a mechanical
computer. But I’ve never entirely understood how that computer was supposed to
work. The basic ideas, as it happens, are not that difficult to grasp, which is
good news. Lovelace’s program was designed to run on one of Babbage’s machines,
so we need to take another quick detour here to talk about how those machines
worked.</p>

<p>Babbage designed two separate mechanical computing machines. His first machine
was called the Difference Engine. Before the invention of the pocket
calculator, people relied on logarithmic tables to calculate the product of
large numbers. (There is a good <a href="https://youtu.be/VRzH4xB0GdM">Numberphile
video</a> on how this was done.) Large logarithmic
tables are not difficult to create, at least conceptually, but the sheer number
of calculations that need to be done in order to create them meant that in
Babbage’s time they often contained errors. Babbage, frustrated by this, sought
to create a machine that could tabulate logarithms mechanically and therefore
without error.<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p>The Difference Engine was not a computer, because all it did was add and
subtract. It took advantage of a method devised by the French mathematician
Gaspard de Prony that broke the process of tabulating logarithms down into
small steps.<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" rel="footnote">8</a></sup> These small steps involved only addition and subtraction,
meaning that a small army of people without any special mathematical aptitude
or training could be employed to produce a table. De Prony’s method, known as
the method of divided differences, could be used to tabulate any polynomial.
Polynomials, in turn, could be used to approximate logarithmic and
trigonometric functions.</p>

<p>To get a sense of how this process worked, consider the following simple
polynomial function:</p>

\[y = x^2 + 1\]

<p>The method of divided differences involves finding the difference between each
successive value of <em>y</em> for different values of <em>x</em>. The differences
between these differences are then found, and possibly the differences between
those next differences themselves, until a constant difference appears. These
differences can then be used to get the next value of the polynomial simply by
adding.</p>

<p>Because the above polynomial is only a second-degree polynomial, we are able to
find the constant difference after only two columns of differences:</p>

<div>
  <table>
    <thead>
      <tr>
        <th>x</th>
        <th>y</th>
        <th>Diff 1</th>
        <th>Diff 2</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>1</td>
        <td>2</td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>2</td>
        <td>5</td>
        <td>3</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>3</td>
        <td>10</td>
        <td>5</td>
        <td>2</td>
      </tr>
      <tr>
        <td>4</td>
        <td>17</td>
        <td>7</td>
        <td>2</td>
      </tr>
      <tr>
        <td>5</td>
        <td>?</td>
        <td>?</td>
        <td>2</td>
      </tr>
      <tr>
        <td>…</td>
        <td>…</td>
        <td>…</td>
        <td>…</td>
      </tr>
    </tbody>
  </table>

</div>

<p>Now, since we know that the constant difference is 2, we can find the value of
<em>y</em> when <em>x</em> is 5 through addition only. If we add 2 to 7, the last entry in
the “Diff 1” column, we get 9. If we add 9 to 17, the last entry in the <em>y</em>
column, we get 26, our answer.</p>

<p>Babbage’s Difference Engine had, for each difference column in a table like the
one above, a physical column of gears. Each gear was a decimal digit and one
whole column was a decimal number. The Difference Engine had eight columns of
gears, so it could tabulate a polynomial up to the seventh degree. The columns
were initially set with values matching an early row in the difference table,
worked out ahead of time. A human operator would then turn a crank shaft,
causing the constant difference to propagate through the machine as the value
stored on each column was added to the next.</p>

<p>Babbage was able to build a small section of the Difference Engine and use it
to demonstrate his ideas at parties.<sup id="fnref:9" role="doc-noteref"><a href="#fn:9" rel="footnote">9</a></sup> But even after spending an amount of
public money equal to the cost of two large warships, he never built the entire
machine.<sup id="fnref:10" role="doc-noteref"><a href="#fn:10" rel="footnote">10</a></sup> Babbage could not find anyone in the early 1800s that could make
the number of gears he needed with sufficient accuracy. A working Difference
Engine would not be built until the 1990s, after the advent of precision
machining. There is <a href="https://www.youtube.com/watch?v=BlbQsKpq3Ak">a great video on
YouTube</a> demonstrating a working
Difference Engine on loan to the Computer History Museum in Mountain View,
which is worth watching even just to listen to the marvelous sounds the machine
makes while it runs.</p>

<p>Babbage eventually lost interest in the Difference Engine when he realized that
a much more powerful and flexible machine could be built. His Analytical Engine
was the machine that we know today as Babbage’s mechanical computer. The
Analytical Engine was based on the same columns of gears used in the Difference
Engine, but whereas the Difference Engine only had eight columns, the
Analytical Engine was supposed to have many hundreds more. The Analytical
Engine could be programmed using punched cards like a Jacquard Loom and could
multiply and divide as well as add and subtract. In order to perform one of
these operations, a section of the machine called the “mill” would rearrange
itself into the appropriate configuration, read the operands off of other
columns used for data storage, and then write the result back to another
column.</p>

<p>Babbage called his new machine the Analytical Engine because it was powerful
enough to do something resembling mathematical analysis. The Difference Engine
could tabulate a polynomial, but the Analytical Engine would be able to
calculate, for example, the coefficients of the polynomial expansion of another
expression. It was an amazing machine, but the British government wisely
declined to fund its construction. So Babbage went abroad to Italy to try to
drum up support for his idea.</p>

<h2 id="notes-by-the-translator">Notes by The Translator</h2>
<p>In Turin, Babbage met Italian engineer and future prime minister Luigi
Menabrea. He persuaded Menabrea to write an outline of what the Analytical
Engine could accomplish. In 1842, Menabrea published a paper on the topic in
French. The following year, Lovelace published a translation of Menabrea’s
paper into English.</p>

<p>Lovelace, then known as Ada Byron, first met Babbage at a party in 1833, when
she was 17 and he was 41.<sup id="fnref:11" role="doc-noteref"><a href="#fn:11" rel="footnote">11</a></sup> Lovelace was fascinated with Babbage’s
Difference Engine. She could also understand how it worked, because she had
been extensively tutored in mathematics throughout her childhood. Her mother,
Annabella Milbanke, had decided that a solid grounding in mathematics would
ward off the wild, romantic sensibility that possessed Lovelace’s father, Lord
Byron, the famous poet. After meeting in 1833, Lovelace and Babbage remained a
part of the same social circle and wrote to each other frequently.</p>

<p>Ada Byron married William King in 1835. King later became the Earl of Lovelace,
making Ada the Countess of Lovelace. Even after having three children, she
continued her education in mathematics, employing Augustus de Morgan, who
discovered De Morgan’s laws, as her tutor.<sup id="fnref:12" role="doc-noteref"><a href="#fn:12" rel="footnote">12</a></sup> Lovelace saw the potential of
Babbage’s Analytical Machine immediately and was eager to work with him to
promote the idea. A friend suggested that she translate Menabrea’s paper for an
English audience.<sup id="fnref:13" role="doc-noteref"><a href="#fn:13" rel="footnote">13</a></sup></p>

<p>Menabrea’s paper gave a brief overview of how the Difference Engine worked,
then showed how the Analytical Engine would be a far superior machine. The
Analytical Engine would be so powerful that it could “form the product of two
numbers, each containing twenty figures, in <em>three minutes</em>”<sup id="fnref:14" role="doc-noteref"><a href="#fn:14" rel="footnote">14</a></sup> (emphasis in
the original). Menabrea gave further examples of the machine’s capabilities,
demonstrating how it could solve a simple system of linear equations and
expand the product of two binomial expressions. In both cases, Menabrea
provided what Lovelace called “diagrams of development,” which listed the
sequence of operations that would need to be performed to calculate the correct
answer.<sup id="fnref:15" role="doc-noteref"><a href="#fn:15" rel="footnote">15</a></sup> These were programs in the same sense that Lovelace’s own program
was a program and they were originally published the year before. But as we
will see, Menabrea’s programs were only simple examples of what was possible.
All of them were trivial in the sense that they did not require any kind of
branching or looping.</p>

<p>Lovelace appended a series of notes to her translation of Menabrea’s paper that
together ran much longer than the original work. It was here that she made her
major contributions to computing. In Note A, which Lovelace attached to
Menabrea’s initial description of the Analytical Engine, Lovelace explained at
some length and often in lyrical language the promise of a machine that could
perform arbitrary mathematical operations. She foresaw that a machine like the
Analytical Engine wasn’t just limited to numbers and could in fact act on
any objects “whose mutual fundamental relations could be expressed by those of
the abstract science of operations, and which should be also susceptible of
adaptations to the action of the operating notation and mechanism of the
engine.”<sup id="fnref:16" role="doc-noteref"><a href="#fn:16" rel="footnote">16</a></sup> She added that the machine might one day, for example, compose
music. This insight was all the more remarkable given that Menabrea saw the
Analytical Engine primarily as a tool for automating “long and arid
computation,” which would free up the intellectual capacities of brilliant
scientists for more advanced thinking.<sup id="fnref:17" role="doc-noteref"><a href="#fn:17" rel="footnote">17</a></sup> The miraculous foresight that
Lovelace demonstrated in Note A is one major reason that she is celebrated
today.</p>

<p>The other famous note is Note G. Lovelace begins Note G by arguing that,
despite its impressive powers, the Analytical Machine cannot really be said to
“think.” This part of Note G is what Alan Turing would later refer to as “Lady
Lovelace’s Objection.” Nevertheless, Lovelace continues, the machine can do
extraordinary things. To illustrate its ability to handle even more complex
problems, Lovelace provides her program calculating the Bernoulli numbers.</p>

<p>The full program, in the expanded “diagram of development” format that Lovelace
explains in Note D, can be seen
<a href="https://upload.wikimedia.org/wikipedia/commons/c/cf/Diagram_for_the_computation_of_Bernoulli_numbers.jpg">here</a>.
The program is essentially a list of operations, specified using the usual
mathematical symbols. It doesn’t appear that Babbage or Lovelace got as far as
developing anything like a set of op codes for the Analytical Engine.</p>

<p>Though Lovelace was describing a method for computing the entire sequence of
Bernoulli numbers up to some limit, the program she provided only illustrated
one step of that process. Her program calculated a number that she called B7,
which modern mathematicians know as the eighth Bernoulli number. Her program
thus sought to solve the following equation:</p>

\[B_7 = -1(A_0 + B_1A_1 + B_3A_3 + B_5A_5)\]

<p>In the above, each term represents a coefficient in the polynomial formula for
the sum of integers to a particular power. Here that power is eight, since the
eighth Bernoulli number first appears in the formula for the sum of positive
integers to the eighth power. The B and A numbers represent the two kinds of
factors that Bernoulli discovered. B1 through B7 are all different Bernoulli
numbers, indexed according to Lovelace’s indexing. A0 through A5 represent the
factors of the coefficients that Bernoulli could calculate using Pascal’s
Triangle. The values of A0, A1, A3, and A5 appear below. Here <em>n</em> represents
the index of the Bernoulli number in the sequence of odd-numbered Bernoulli
numbers starting with the first. Lovelace’s program used <em>n</em> = 4.</p>

\[A_0 = -\frac{1}{2} \cdot \frac{2n - 1}{2n + 1} \\
A_1 = \frac{2n}{2} \\
A_3 = \frac{2n(2n-1)(2n-2)}{2 \cdot 3 \cdot 4} \\
A_5 = \frac{2n(2n-1)(2n-2)(2n-3)(2n-4)}{2 \cdot 3 \cdot 4 \cdot 5 \cdot 6}\]

<p>I’ve created a
<a href="https://gist.github.com/sinclairtarget/ad18ac65d277e453da5f479d6ccfc20e">translation</a>
of Lovelace’s program into C, which may be easier to follow. Lovelace’s program
first calculates A0 and the product B1A1. It then enters a loop that repeats
twice to calculate B3A3 and B5A5, since those are formed according to an
identical pattern. After each product is calculated, it is added with all the
previous products, so that by the end of the program the full sum has been
obtained.</p>

<p>Obviously the C translation is not an exact recreation of Lovelace’s program.
It declares variables on the stack, for example, whereas Lovelace’s variables
were more like registers. But it makes obvious the parts of Lovelace’s program
that were so prescient. The C program contains two <code>while</code> loops, one nested
inside the other. Lovelace’s program did not have <code>while</code> loops exactly, but
she made groups of operations and in the text of her note specified when they
should repeat. The variable <code>v10</code>, in the original program and in the C
translation, functions as a counter variable that decrements with each loop, a
construct any programmer would be familiar with. In fact, aside from the
profusion of variables with unhelpful names, the C translation of Lovelace’s
program doesn’t look that alien at all.</p>

<p>The other thing worth mentioning quickly is that translating Lovelace’s program
into C was not that difficult, thanks to the detail present in her diagram.
Unlike Menabrea’s tables, her table includes a column labeled “Indication of
change in the value on any Variable,” which makes it much easier to follow the
mutation of state throughout the program. She adds a superscript index here to
each variable to indicate the successive values they hold. A superscript of
two, for example, means that the value being used here is the second value that
has been assigned to the variable since the beginning of the program.</p>

<h2 id="the-first-programmer">The First Programmer?</h2>
<p>After I had translated Lovelace’s program into C, I was able to run it on my
own computer. To my frustration, I kept getting the wrong result. After some
debugging, I finally realized that the problem wasn’t the code that I had
written. The bug was in the original!</p>

<p>In her “diagram of development,” Lovelace gives the fourth operation as
<code>v5 / v4</code>. But the correct ordering here is <code>v4 / v5</code>. This may well have been
a typesetting error and not an error in the program that Lovelace devised. All
the same, this must be the oldest bug in computing. I marveled that, for ten
minutes or so, unknowingly, I had wrestled with this first ever bug.</p>

<p>Jim Randall, another blogger that has <a href="https://enigmaticcode.wordpress.com/tag/bernoulli-numbers/">translated Lovelace’s program into
Python</a>, has noted
this division bug and two other issues. What does it say about Ada Lovelace
that her published program contains minor bugs? Perhaps it shows that she
was attempting to write not just a demonstration but a real program. After all,
can you really be writing anything more than toy programs if you aren’t also
writing lots of bugs?</p>

<p>One Wikipedia article calls Lovelace the first to publish a “complex
program.”<sup id="fnref:18" role="doc-noteref"><a href="#fn:18" rel="footnote">18</a></sup> Maybe that’s the right way to think about Lovelace’
accomplishment. Menabrea published “diagrams of development” in his paper a
year before Lovelace published her translation. Babbage also wrote more than
twenty programs that he never published.<sup id="fnref:19" role="doc-noteref"><a href="#fn:19" rel="footnote">19</a></sup> So it’s not quite accurate to say
that Lovelace wrote or published the first program, though there’s always room
to quibble about what exactly constitutes a “program.” Even so, Lovelace’s
program was miles ahead of anything else that had been published before. The
longest program that Menabrea presented was 11 operations long and contained no
loops or branches; Lovelace’s program contains 25 operations and a nested loop
(and thus branching). Menabrea wrote the following toward the end of his paper:</p>

<blockquote>
  <p>When once the engine shall have been constructed, the difficulty will be
reduced to the making of the cards; but as these are merely the translation
of algebraic formulae, it will, by means of some simple notation, be easy to
consign the execution of them to a workman.<sup id="fnref:20" role="doc-noteref"><a href="#fn:20" rel="footnote">20</a></sup></p>
</blockquote>

<p>Neither Babbage nor Menabrea were especially interested in applying the
Analytical Engine to problems beyond the immediate mathematical challenges that
first drove Babbage to construct calculating machines. Lovelace saw that the
Analytical Engine was capable of much more than Babbage or Menabrea could
imagine. Lovelace also grasped that “the making of the cards” would not be a
mere afterthought and that it could be done well or done poorly. This is hard
to appreciate without understanding her program from Note G and seeing for
oneself the care she put into designing it. But having done that, you might
agree that Lovelace, even if she was not the very first programmer, was the
first programmer to deserve the title.</p>

<p><em>
If you enjoyed this post, more like it come out every four weeks! Follow
<a href="https://twitter.com/TwoBitHistory">
  @TwoBitHistory
</a> on Twitter or subscribe to the
<a href="https://twobithistory.org/feed.xml">
  RSS feed
</a>
to make sure you know when a new post is out.
</em></p>

<p><em>Previously on TwoBitHistory…</em></p>

<blockquote data-lang="en"><p lang="en" dir="ltr">This week's post: Parsing Vim's prestigious pedigree!<a href="https://t.co/1YUszI5dIC">https://t.co/1YUszI5dIC</a></p>— TwoBitHistory (@TwoBitHistory) <a href="https://twitter.com/TwoBitHistory/status/1026240555062386689?ref_src=twsrc%5Etfw">August 5, 2018</a></blockquote>




</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In Search of a Faster SQLite (250 pts)]]></title>
            <link>https://avi.im/blag/2024/faster-sqlite/</link>
            <guid>42432730</guid>
            <pubDate>Mon, 16 Dec 2024 16:46:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://avi.im/blag/2024/faster-sqlite/">https://avi.im/blag/2024/faster-sqlite/</a>, See on <a href="https://news.ycombinator.com/item?id=42432730">Hacker News</a></p>
Couldn't get https://avi.im/blag/2024/faster-sqlite/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Xiaomi has provided official support for Home Assistant (482 pts)]]></title>
            <link>https://github.com/XiaoMi/ha_xiaomi_home</link>
            <guid>42432151</guid>
            <pubDate>Mon, 16 Dec 2024 15:52:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/XiaoMi/ha_xiaomi_home">https://github.com/XiaoMi/ha_xiaomi_home</a>, See on <a href="https://news.ycombinator.com/item?id=42432151">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Xiaomi Home Integration for Home Assistant</h2><a id="user-content-xiaomi-home-integration-for-home-assistant" aria-label="Permalink: Xiaomi Home Integration for Home Assistant" href="#xiaomi-home-integration-for-home-assistant"></a></p>
<p dir="auto"><a href="https://github.com/XiaoMi/ha_xiaomi_home/blob/main/README.md">English</a> | <a href="https://github.com/XiaoMi/ha_xiaomi_home/blob/main/doc/README_zh.md">简体中文</a></p>
<p dir="auto">Xiaomi Home Integration is an integrated component of Home Assistant supported by Xiaomi official. It allows you to use Xiaomi IoT smart devices in Home Assistant.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<blockquote>
<p dir="auto">Home Assistant version requirement:</p>
<ul dir="auto">
<li>Core <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="f12297ba6e5c0ae3b6b0018d7cce056e">$\geq$</math-renderer> 2024.11.0</li>
<li>Operating System <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="f12297ba6e5c0ae3b6b0018d7cce056e">$\geq$</math-renderer> 13.0</li>
</ul>
</blockquote>
<p dir="auto"><h3 tabindex="-1" dir="auto">Method 1: Git clone from GitHub</h3><a id="user-content-method-1-git-clone-from-github" aria-label="Permalink: Method 1: Git clone from GitHub" href="#method-1-git-clone-from-github"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="cd config
git clone https://github.com/XiaoMi/ha_xiaomi_home.git
cd ha_xiaomi_home
./install.sh /config"><pre><span>cd</span> config
git clone https://github.com/XiaoMi/ha_xiaomi_home.git
<span>cd</span> ha_xiaomi_home
./install.sh /config</pre></div>
<p dir="auto">We recommend this installation method, for it is convenient to switch to a tag when updating <code>xiaomi_home</code> to a certain version.</p>
<p dir="auto">For example, update to version v1.0.0</p>
<div dir="auto" data-snippet-clipboard-copy-content="cd config/ha_xiaomi_home
git checkout v1.0.0
./install.sh /config"><pre><span>cd</span> config/ha_xiaomi_home
git checkout v1.0.0
./install.sh /config</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Method 2: <a href="https://hacs.xyz/" rel="nofollow">HACS</a></h3><a id="user-content-method-2-hacs" aria-label="Permalink: Method 2: HACS" href="#method-2-hacs"></a></p>
<p dir="auto">HACS &gt; Overflow Menu &gt; Custom repositories &gt; Repository: <a href="https://github.com/XiaoMi/ha_xiaomi_home.git">https://github.com/XiaoMi/ha_xiaomi_home.git</a> &amp; Category: Integration &gt; ADD</p>
<blockquote>
<p dir="auto">Xiaomi Home has not been added to the HACS store as a default yet. It's coming soon.</p>
</blockquote>
<p dir="auto"><h3 tabindex="-1" dir="auto">Method 3: Manually installation via <a href="https://github.com/home-assistant/addons/tree/master/samba">Samba</a> / <a href="https://github.com/hassio-addons/addon-ftp">FTPS</a></h3><a id="user-content-method-3-manually-installation-via-samba--ftps" aria-label="Permalink: Method 3: Manually installation via Samba / FTPS" href="#method-3-manually-installation-via-samba--ftps"></a></p>
<p dir="auto">Download and copy <code>custom_components/xiaomi_home</code> folder to <code>config/custom_components</code> folder in your Home Assistant.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Configuration</h2><a id="user-content-configuration" aria-label="Permalink: Configuration" href="#configuration"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Login</h3><a id="user-content-login" aria-label="Permalink: Login" href="#login"></a></p>
<p dir="auto"><a href="https://my.home-assistant.io/redirect/brand/?brand=xiaomi_home" rel="nofollow">Settings &gt; Devices &amp; services &gt; ADD INTEGRATION</a> &gt; Search <code>Xiaomi Home</code> &gt; NEXT &gt; Click here to login &gt; Sign in with Xiaomi account</p>
<p dir="auto"><a href="https://my.home-assistant.io/redirect/config_flow_start/?domain=xiaomi_home" rel="nofollow"><img src="https://camo.githubusercontent.com/adbb09f7a40eb3933f3220dfe49dd8dff1e0f86acf59e9803662bb6f8f988910/68747470733a2f2f6d792e686f6d652d617373697374616e742e696f2f6261646765732f636f6e6669675f666c6f775f73746172742e737667" alt="Open your Home Assistant instance and start setting up a new integration." data-canonical-src="https://my.home-assistant.io/badges/config_flow_start.svg"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Add MIoT Devices</h3><a id="user-content-add-miot-devices" aria-label="Permalink: Add MIoT Devices" href="#add-miot-devices"></a></p>
<p dir="auto">After logging in successfully, a dialog box named "Select Home and Devices" pops up. You can select the home containing the device that you want to import in Home Assistant.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Multiple User Login</h3><a id="user-content-multiple-user-login" aria-label="Permalink: Multiple User Login" href="#multiple-user-login"></a></p>
<p dir="auto">After a Xiaomi account login and its user configuration are completed, you can continue to add other Xiaomi accounts in the configured Xiaomi Home Integration page.</p>
<p dir="auto">Method: <a href="https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home" rel="nofollow">Settings &gt; Devices &amp; services &gt; Configured &gt; Xiaomi Home</a> &gt; ADD HUB &gt; NEXT &gt; Click here to login &gt; Sign in with Xiaomi account</p>
<p dir="auto"><a href="https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home" rel="nofollow"><img src="https://camo.githubusercontent.com/15a86d08f7563387040afaf0ccbc46e4bee0f1002dfba800b01196693feff43f/68747470733a2f2f6d792e686f6d652d617373697374616e742e696f2f6261646765732f696e746567726174696f6e2e737667" alt="Open your Home Assistant instance and show an integration." data-canonical-src="https://my.home-assistant.io/badges/integration.svg"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Update Configurations</h3><a id="user-content-update-configurations" aria-label="Permalink: Update Configurations" href="#update-configurations"></a></p>
<p dir="auto">You can change the configurations in the "Configuration Options" dialog box, in which you can update your user nickname and the list of the devices importing from Xiaomi Home APP, etc.</p>
<p dir="auto">Method: <a href="https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home" rel="nofollow">Settings &gt; Devices &amp; services &gt; Configured &gt; Xiaomi Home</a> &gt; CONFIGURE &gt; Select the option to update</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Debug Mode for Action</h3><a id="user-content-debug-mode-for-action" aria-label="Permalink: Debug Mode for Action" href="#debug-mode-for-action"></a></p>
<p dir="auto">You can manually send Action command message with parameters to the device when the debug mode for action is activated. The user interface for sending the Action command with parameters is shown as a Text entity.</p>
<p dir="auto">Method: <a href="https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home" rel="nofollow">Settings &gt; Devices &amp; services &gt; Configured &gt; Xiaomi Home</a> &gt; CONFIGURE &gt; Debug mode for action</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Security</h2><a id="user-content-security" aria-label="Permalink: Security" href="#security"></a></p>
<p dir="auto">Xiaomi Home Integration and the affiliated cloud interface is provided by Xiaomi officially. You need to use your Xiaomi account to login to get your device list. Xiaomi Home Integration implements OAuth 2.0 login process, which does not keep your account password in the Home Assistant application. However, due to the limitation of the Home Assistant platform, the user information (including device information, certificates, tokens, etc.) of your Xiaomi account will be saved in the Home Assistant configuration file in clear text after successful login. You need to ensure that your Home Assistant configuration file is properly stored. The exposure of your configuration file may result in others logging in with your identity.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">FAQ</h2><a id="user-content-faq" aria-label="Permalink: FAQ" href="#faq"></a></p>
<ul dir="auto">
<li>
<p dir="auto">Does Xiaomi Home Integration support all Xiaomi Home devices?</p>
<p dir="auto">Xiaomi Home Integration currently supports most categories of Home device. Only a few categories are not supported. They are Bluetooth device, infrared device and virtual device.</p>
</li>
<li>
<p dir="auto">Does Xiaomi Home Integration support multiple Xiaomi accounts?</p>
<p dir="auto">Yes, it supports multiple Xiaomi accounts. Furthermore, Xiaomi Home Integration allows that devices belonging to different accounts can be added to a same area.</p>
</li>
<li>
<p dir="auto">Does Xiaomi Home Integration support local control?</p>
<p dir="auto">Local control is implemented by <a href="https://www.mi.com/shop/buy/detail?product_id=15755&amp;cfrom=search" rel="nofollow">Xiaomi Central Hub Gateway</a> (firmware version 3.4.0_0000 above) or Xiaomi home devices with built-in central hub gateway (software version 0.8.0 above) inside. If you do not have a Xiaomi central hub gateway or other devices having central hub gateway function, all control commands are sent through Xiaomi Cloud. The firmware for Xiaomi central hub gateway including the built-in central hub gateway supporting Home Assistant local control feature has not been released yet. Please refer to MIoT team's notification for upgrade plans.</p>
<p dir="auto">Xiaomi central hub gateway is only available in mainland China. In other regions, it is not available.</p>
<p dir="auto">Xiaomi Home Integration can also implement partial local control by enabling Xiaomi LAN control function. Xiaomi LAN control function can only control IP devices (devices connected to the router via WiFi or ethernet cable) in the same local area network as Home Assistant. It cannot control BLE Mesh, ZigBee, etc. devices. This function may cause some abnormalities. We recommend not to use this function. Xiaomi LAN control function is enabled by <a href="https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home" rel="nofollow">Settings &gt; Devices &amp; services &gt; Configured &gt; Xiaomi Home</a> &gt; CONFIGURE &gt; Update LAN control configuration</p>
<p dir="auto">Xiaomi LAN control function is not restricted by region. It is available in all regions. However, if there is a central gateway in the local area network where Home Assistant is located, even Xiaomi LAN control function is enabled in the integration, it will not take effect.</p>
</li>
<li>
<p dir="auto">In which regions is Xiaomi Home Integration available?</p>
<p dir="auto">Xiaomi Home Integration can be used in the mainland of China, Europe, India, Russia, Singapore, and USA. As user data in Xiaomi Cloud of different regions is isolated, you need to choose your region when importing MIoT devices in the configuration process. Xiaomi Home Integration allows you to import devices of different regions to a same area.</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Principle of Messaging</h2><a id="user-content-principle-of-messaging" aria-label="Permalink: Principle of Messaging" href="#principle-of-messaging"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Control through the Cloud</h3><a id="user-content-control-through-the-cloud" aria-label="Permalink: Control through the Cloud" href="#control-through-the-cloud"></a></p>
<div dir="auto">
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/XiaoMi/ha_xiaomi_home/blob/main/doc/images/cloud_control.jpg"><img src="https://github.com/XiaoMi/ha_xiaomi_home/raw/main/doc/images/cloud_control.jpg" width="300"></a></p><p dir="auto">Image 1: Cloud control architecture</p>
 </div>
<p dir="auto">Xiaomi Home Integration subscribes to the interested device messages on the MQTT Broker in MIoT Cloud. When a device property changes or a device event occurs, the device sends an upstream message to MIoT Cloud, and the MQTT Broker pushes the subscribed device message to Xiaomi Home Integration. Because Xiaomi Home Integration does not need to poll to obtain the current device property value in the cloud, it can immediately receive the notification message when the properties change or the events occur. Thanks to the message subscription mechanism, Xiaomi Home Integration only queries the properties of all devices from the cloud once when the integration configuration is completed, which puts little access pressure on the cloud.</p>
<p dir="auto">Xiaomi Home Integration sends command messages to the devices via the HTTP interface of MIoT Cloud to control devices. The device reacts and responds after receiving the downstream message sent forward by MIoT Cloud.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Control locally</h3><a id="user-content-control-locally" aria-label="Permalink: Control locally" href="#control-locally"></a></p>
<div dir="auto">
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/XiaoMi/ha_xiaomi_home/blob/main/doc/images/local_control.jpg"><img src="https://github.com/XiaoMi/ha_xiaomi_home/raw/main/doc/images/local_control.jpg" width="300"></a></p><p dir="auto">Image 2: Local control architecture</p>
</div>
<p dir="auto">Xiaomi central hub gateway contains a standard MQTT Broker, which implements a complete subscribe-publish mechanism. Xiaomi Home Integration subscribes to the interested device messages through Xiaomi central hub gateway. When a device property changes or a device event occurs, the device sends an upstream message to Xiaomi central hub gateway, and the MQTT Broker pushes the subscribed device message to Xiaomi Home Integration.</p>
<p dir="auto">When Xiaomi Home Integration needs to control a device, it publishes a device command message to the MQTT Broker, which is then forwarded to the device by Xiaomi central hub gateway. The device reacts and responds after receiving the downstream message from the gateway.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mapping Relationship between MIoT-Spec-V2 and Home Assistant Entity</h2><a id="user-content-mapping-relationship-between-miot-spec-v2-and-home-assistant-entity" aria-label="Permalink: Mapping Relationship between MIoT-Spec-V2 and Home Assistant Entity" href="#mapping-relationship-between-miot-spec-v2-and-home-assistant-entity"></a></p>
<p dir="auto"><a href="https://iot.mi.com/v2/new/doc/introduction/knowledge/spec" rel="nofollow">MIoT-Spec-V2</a> is the abbreviation for MIoT Specification Version 2, which is an IoT protocol formulated by Xiaomi IoT platform to give a standard functional description of IoT devices. It includes function definition (referred to as data model by other IoT platforms), interaction model, message format, and encoding.</p>
<p dir="auto">In MIoT-Spec-V2 protocol, a product is defined as a device. A device contains several services. A service may have some properties, events and actions. Xiaomi Home Integration creates Home Assistant entities according to MIoT-Spec-V2. The conversion relationship is as follows.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">General Conversion</h3><a id="user-content-general-conversion" aria-label="Permalink: General Conversion" href="#general-conversion"></a></p>
<ul dir="auto">
<li>Property</li>
</ul>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>format</th>
<th>access</th>
<th>value-list</th>
<th>value-range</th>
<th>Entity in Home Assistant</th>
</tr>
</thead>
<tbody>
<tr>
<td>writable</td>
<td>string</td>
<td>-</td>
<td>-</td>
<td>Text</td>
</tr>
<tr>
<td>writable</td>
<td>bool</td>
<td>-</td>
<td>-</td>
<td>Switch</td>
</tr>
<tr>
<td>writable</td>
<td>not string &amp; not bool</td>
<td>existent</td>
<td>-</td>
<td>Select</td>
</tr>
<tr>
<td>writable</td>
<td>not string &amp; not bool</td>
<td>non-existent</td>
<td>existent</td>
<td>Number</td>
</tr>
<tr>
<td>not writable</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>Sensor</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<ul dir="auto">
<li>Event</li>
</ul>
<p dir="auto">MIoT-Spec-V2 event is transformed to Event entity in Home Assistant. The event's parameters are also passed to entity's <code>_trigger_event</code>.</p>
<ul dir="auto">
<li>Action</li>
</ul>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>in</th>
<th>Entity in Home Assistant</th>
</tr>
</thead>
<tbody>
<tr>
<td>empty</td>
<td>Button</td>
</tr>
<tr>
<td>not empty</td>
<td>Notify</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">If the debug mode for action is activated, the Text entity will be created when the "in" field in the action spec is not empty.</p>
<p dir="auto">The "Attribute" item in the entity details page displays the format of the input parameter which is an ordered list, enclosed in square brackets []. The string elements in the list are enclosed in double quotation marks "".</p>
<p dir="auto">For example, the "Attributes" item in the details page of the Notify entity converted by the "Intelligent Speaker Execute Text Directive" action of xiaomi.wifispeaker.s12 siid=5, aiid=5 instance shows the action params as <code>[Text Content(str), Silent Execution(bool)]</code>. A properly formatted input is <code>["Hello", true]</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Specific Conversion</h3><a id="user-content-specific-conversion" aria-label="Permalink: Specific Conversion" href="#specific-conversion"></a></p>
<p dir="auto">MIoT-Spec-V2 uses URN for defining types. The format is <code>urn:&lt;namespace&gt;:&lt;type&gt;:&lt;name&gt;:&lt;value&gt;[:&lt;vendor-product&gt;:&lt;version&gt;]</code>, in which <code>name</code> is a human-readable word or phrase describing the instance of device, service, property, event and action. Xiaomi Home Integration first determines whether to convert the MIoT-Spec-V2 instance into a specific Home Assistant entity based on the instance's name. For the instance that does not meet the specific conversion rules, general conversion rules are used for conversion.</p>
<p dir="auto"><code>namespace</code> is the namespace of MIoT-Spec-V2 instance. When its value is miot-spec-v2, it means that the specification is defined by Xiaomi. When its value is bluetooth-spec, it means that the specification is defined by Bluetooth Special Interest Group (SIG). When its value is not miot-spec-v2 or bluetooth-spec, it means that the specification is defined by other vendors. If MIoT-Spec-V2 <code>namespace</code> is not miot-spec-v2, a star mark <code>*</code> is added in front of the entity's name .</p>
<ul dir="auto">
<li>Device</li>
</ul>
<p dir="auto">The conversion follows <code>SPEC_DEVICE_TRANS_MAP</code>.</p>
<div data-snippet-clipboard-copy-content="{
    '<device instance name>':{
        'required':{
            '<service instance name>':{
                'required':{
                    'properties': {
                        '<property instance name>': set<property access: str>
                    },
                    'events': set<event instance name: str>,
                    'actions': set<action instance name: str>
                },
                'optional':{
                    'properties': set<property instance name: str>,
                    'events': set<event instance name: str>,
                    'actions': set<action instance name: str>
                }
            }
        },
        'optional':{
            '<service instance name>':{
                'required':{
                    'properties': {
                        '<property instance name>': set<property access: str>
                    },
                    'events': set<event instance name: str>,
                    'actions': set<action instance name: str>
                },
                'optional':{
                    'properties': set<property instance name: str>,
                    'events': set<event instance name: str>,
                    'actions': set<action instance name: str>
                }
            }
        },
        'entity': str
    }
}"><pre><code>{
    '&lt;device instance name&gt;':{
        'required':{
            '&lt;service instance name&gt;':{
                'required':{
                    'properties': {
                        '&lt;property instance name&gt;': set&lt;property access: str&gt;
                    },
                    'events': set&lt;event instance name: str&gt;,
                    'actions': set&lt;action instance name: str&gt;
                },
                'optional':{
                    'properties': set&lt;property instance name: str&gt;,
                    'events': set&lt;event instance name: str&gt;,
                    'actions': set&lt;action instance name: str&gt;
                }
            }
        },
        'optional':{
            '&lt;service instance name&gt;':{
                'required':{
                    'properties': {
                        '&lt;property instance name&gt;': set&lt;property access: str&gt;
                    },
                    'events': set&lt;event instance name: str&gt;,
                    'actions': set&lt;action instance name: str&gt;
                },
                'optional':{
                    'properties': set&lt;property instance name: str&gt;,
                    'events': set&lt;event instance name: str&gt;,
                    'actions': set&lt;action instance name: str&gt;
                }
            }
        },
        'entity': str
    }
}
</code></pre></div>
<p dir="auto">The "required" field under "device instance name" indicates the required services of the device. The "optional" field under "device instance name" indicates the optional services of the device. The "entity" field indicates the Home Assistant entity to be created. The "required" and the "optional" field under "service instance name" are required and optional properties, events and actions of the service respectively. The value of "property instance name" under "required" "properties" field is the access mode of the property. The condition for a successful match is that the value of "property instance name" is a subset of the access mode of the corresponding MIoT-Spec-V2 property instance.</p>
<p dir="auto">Home Assistant entity will not be created if MIoT-Spec-V2 device instance does not contain all required services, properties, events or actions.</p>
<ul dir="auto">
<li>Service</li>
</ul>
<p dir="auto">The conversion follows <code>SPEC_SERVICE_TRANS_MAP</code>.</p>
<div data-snippet-clipboard-copy-content="{
    '<service instance name>':{
        'required':{
            'properties': {
                '<property instance name>': set<property access: str>
            },
            'events': set<event instance name: str>,
            'actions': set<action instance name: str>
        },
        'optional':{
            'properties': set<property instance name: str>,
            'events': set<event instance name: str>,
            'actions': set<action instance name: str>
        },
        'entity': str
    }
}"><pre><code>{
    '&lt;service instance name&gt;':{
        'required':{
            'properties': {
                '&lt;property instance name&gt;': set&lt;property access: str&gt;
            },
            'events': set&lt;event instance name: str&gt;,
            'actions': set&lt;action instance name: str&gt;
        },
        'optional':{
            'properties': set&lt;property instance name: str&gt;,
            'events': set&lt;event instance name: str&gt;,
            'actions': set&lt;action instance name: str&gt;
        },
        'entity': str
    }
}
</code></pre></div>
<p dir="auto">The "required" field under "service instance name" indicates the required properties, events and actions of the service. The "optional" field indicates the optional properties, events and actions of the service. The "entity" field indicates the Home Assistant entity to be created. The value of "property instance name" under "required" "properties" field is the access mode of the property. The condition for a successful match is that the value of "property instance name" is a subset of the access mode of the corresponding MIoT-Spec-V2 property instance.</p>
<p dir="auto">Home Assistant entity will not be created if MIoT-Spec-V2 service instance does not contain all required properties, events or actions.</p>
<ul dir="auto">
<li>Property</li>
</ul>
<p dir="auto">The conversion follows <code>SPEC_PROP_TRANS_MAP</code>.</p>
<div data-snippet-clipboard-copy-content="{
    'entities':{
        '<entity name>':{
            'format': set<str>,
            'access': set<str>
        }
    },
    'properties': {
        '<property instance name>':{
            'device_class': str,
            'entity': str
        }
    }
}"><pre><code>{
    'entities':{
        '&lt;entity name&gt;':{
            'format': set&lt;str&gt;,
            'access': set&lt;str&gt;
        }
    },
    'properties': {
        '&lt;property instance name&gt;':{
            'device_class': str,
            'entity': str
        }
    }
}
</code></pre></div>
<p dir="auto">The "format" field under "entity name" represents the data format of the property, and matching with one value indicates a successful match. The "access" field under "entity name" represents the access mode of the property, and matching with all values is considered a successful match.</p>
<p dir="auto">The "entity" field under "property instance name", of which value is one of entity name under "entities" field, indicates the Home Assistant entity to be created. The "device_class" field under "property instance name" indicates the Home Assistant entity's <code>_attr_device_class</code>.</p>
<ul dir="auto">
<li>Event</li>
</ul>
<p dir="auto">The conversion follows <code>SPEC_EVENT_TRANS_MAP</code>.</p>
<div data-snippet-clipboard-copy-content="{
    '<event instance name>': str
}"><pre><code>{
    '&lt;event instance name&gt;': str
}
</code></pre></div>
<p dir="auto">The value of the event instance name indicates <code>_attr_device_class</code> of the Home Assistant entity to be created.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">MIoT-Spec-V2 Filter</h3><a id="user-content-miot-spec-v2-filter" aria-label="Permalink: MIoT-Spec-V2 Filter" href="#miot-spec-v2-filter"></a></p>
<p dir="auto"><code>spec_filter.json</code> is used to filter out the MIoT-Spec-V2 instance that will not be converted to Home Assistant entity.</p>
<p dir="auto">The format of <code>spec_filter.json</code> is as follows.</p>
<div data-snippet-clipboard-copy-content="{
    &quot;<MIoT-Spec-V2 device instance>&quot;:{
        &quot;services&quot;: list<service_iid: str>,
        &quot;properties&quot;: list<service_iid.property_iid: str>,
        &quot;events&quot;: list<service_iid.event_iid: str>,
        &quot;actions&quot;: list<service_iid.action_iid: str>,
    }
}"><pre><code>{
    "&lt;MIoT-Spec-V2 device instance&gt;":{
        "services": list&lt;service_iid: str&gt;,
        "properties": list&lt;service_iid.property_iid: str&gt;,
        "events": list&lt;service_iid.event_iid: str&gt;,
        "actions": list&lt;service_iid.action_iid: str&gt;,
    }
}
</code></pre></div>
<p dir="auto">The key of <code>spec_filter.json</code> dictionary is the urn excluding the "version" field of the MIoT-Spec-V2 device instance. The firmware of different versions of the same product may be associated with the MIoT-Spec-V2 device instances of different versions. It is required that the MIoT-Spec-V2 instance of a higher version must contain all MIoT-Spec-V2 instances of the lower versions when a vendor defines the MIoT-Spec-V2 of its product on MIoT platform. Thus, the key of <code>spec_filter.json</code> does not need to specify the version number of MIoT-Spec-V2 device instance.</p>
<p dir="auto">The value of "services", "properties", "events" or "actions" fields under "device instance" is the instance id (iid) of the service, property, event or action that will be ignored in the conversion process. Wildcard matching is supported.</p>
<p dir="auto">Example:</p>
<div data-snippet-clipboard-copy-content="{
    &quot;urn:miot-spec-v2:device:television:0000A010:xiaomi-rmi1&quot;:{
        &quot;services&quot;: [&quot;*&quot;]   # Filter out all services. It is equivalent to completely ignoring the device with such MIoT-Spec-V2 device instance.
    },
    &quot;urn:miot-spec-v2:device:gateway:0000A019:xiaomi-hub1&quot;: {
        &quot;services&quot;: [&quot;3&quot;],  # Filter out the service whose iid=3.
        &quot;properties&quot;: [&quot;4.*&quot;]   # Filter out all properties in the service whose iid=4.
        &quot;events&quot;: [&quot;4.1&quot;],  # Filter out the iid=1 event in the iid=4 service.
        &quot;actions&quot;: [&quot;4.1&quot;]  # Filter out the iid=1 action in the iid=4 service.
    }
}"><pre><code>{
    "urn:miot-spec-v2:device:television:0000A010:xiaomi-rmi1":{
        "services": ["*"]   # Filter out all services. It is equivalent to completely ignoring the device with such MIoT-Spec-V2 device instance.
    },
    "urn:miot-spec-v2:device:gateway:0000A019:xiaomi-hub1": {
        "services": ["3"],  # Filter out the service whose iid=3.
        "properties": ["4.*"]   # Filter out all properties in the service whose iid=4.
        "events": ["4.1"],  # Filter out the iid=1 event in the iid=4 service.
        "actions": ["4.1"]  # Filter out the iid=1 action in the iid=4 service.
    }
}
</code></pre></div>
<p dir="auto">Device information service (urn:miot-spec-v2:service:device-information:00007801) of all devices will never be converted to Home Assistant entity.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Multiple Language Support</h2><a id="user-content-multiple-language-support" aria-label="Permalink: Multiple Language Support" href="#multiple-language-support"></a></p>
<p dir="auto">There are 8 languages available for selection in the config flow language option of Xiaomi Home, including Simplified Chinese, Traditional Chinese, English, Spanish, Russian, French, German, and Japanese. The config flow page in Simplified Chinese and English has been manually reviewed by the developer. Other languages are translated by machine translation. If you want to modify the words and sentences in the config flow page, you need to modify the json file of the certain language in <code>custom_components/xiaomi_home/translations/</code> directory.</p>
<p dir="auto">When displaying Home Assistant entity name, Xiaomi Home downloads the multiple language file configured by the device vendor from MIoT Cloud, which contains translations for MIoT-Spec-V2 instances of the device. <code>multi_lang.json</code> is a locally maintained multiple language dictionary, which has a higher priority than the multiple language file obtained from the cloud and can be used to supplement or modify the multiple language translation of devices.</p>
<p dir="auto">The format of <code>multi_lang.json</code> is as follows.</p>
<div data-snippet-clipboard-copy-content="{
    &quot;<MIoT-Spec-V2 device instance>&quot;: {
        &quot;<language code>&quot;: {
            &quot;<instance code>&quot;: <translation: str>
        }
    }
}"><pre><code>{
    "&lt;MIoT-Spec-V2 device instance&gt;": {
        "&lt;language code&gt;": {
            "&lt;instance code&gt;": &lt;translation: str&gt;
        }
    }
}
</code></pre></div>
<p dir="auto">The key of <code>multi_lang.json</code> dictionary is the urn excluding the "version" field of the MIoT-Spec-V2 device instance.</p>
<p dir="auto">The language code is zh-Hans, zh-Hant, en, es, ru, fr, de, or ja, corresponding to the 8 selectable languages mentioned above.</p>
<p dir="auto">The instance code is the code of the MIoT-Spec-V2 instance, which is in the format of:</p>
<div data-snippet-clipboard-copy-content="service:<siid>                  # service
service:<siid>:property:<piid>  # property
service:<siid>:property:<piid>:valuelist:<value> # the value in value-list of a property
service:<siid>:event:<eiid>     # event
service:<siid>:action:<aiid>    # action"><pre><code>service:&lt;siid&gt;                  # service
service:&lt;siid&gt;:property:&lt;piid&gt;  # property
service:&lt;siid&gt;:property:&lt;piid&gt;:valuelist:&lt;value&gt; # the value in value-list of a property
service:&lt;siid&gt;:event:&lt;eiid&gt;     # event
service:&lt;siid&gt;:action:&lt;aiid&gt;    # action
</code></pre></div>
<p dir="auto">siid, piid, eiid, aiid and value are all decimal three-digit integers.</p>
<p dir="auto">Example:</p>
<div data-snippet-clipboard-copy-content="{
    &quot;urn:miot-spec-v2:device:health-pot:0000A051:chunmi-a1&quot;: {
        &quot;zh-Hant&quot;: {
            &quot;service:002&quot;: &quot;養生壺&quot;,
            &quot;service:002:property:001&quot;: &quot;工作狀態&quot;,
            &quot;service:002:property:001:valuelist:000&quot;: &quot;待機中&quot;,
            &quot;service:002:action:002&quot;: &quot;停止烹飪&quot;,
            &quot;service:005:event:001&quot;: &quot;烹飪完成&quot;
        }
    }
}"><pre><code>{
    "urn:miot-spec-v2:device:health-pot:0000A051:chunmi-a1": {
        "zh-Hant": {
            "service:002": "養生壺",
            "service:002:property:001": "工作狀態",
            "service:002:property:001:valuelist:000": "待機中",
            "service:002:action:002": "停止烹飪",
            "service:005:event:001": "烹飪完成"
        }
    }
}
</code></pre></div>
<blockquote>
<p dir="auto">If you edit <code>specv2entity.py</code>, <code>spec_filter.json</code> or <code>multi_lang.json</code> in the <code>custom_components/xiaomi_home/miot/specs</code> directory in your Home Assistant, you need to update the entity conversion rule in the integration's CONFIGURE page to take effect. Method: <a href="https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home" rel="nofollow">Settings &gt; Devices &amp; services &gt; Configured &gt; Xiaomi Home</a> &gt; CONFIGURE &gt; Update Entity Conversion Rule</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Documents</h2><a id="user-content-documents" aria-label="Permalink: Documents" href="#documents"></a></p>
<ul dir="auto">
<li><a href="https://github.com/XiaoMi/ha_xiaomi_home/blob/main/LICENSE.md">License</a></li>
<li>Contribution Guidelines: <a href="https://github.com/XiaoMi/ha_xiaomi_home/blob/main/doc/CONTRIBUTING.md">English</a> | <a href="https://github.com/XiaoMi/ha_xiaomi_home/blob/main/doc/CONTRIBUTING_zh.md">简体中文</a></li>
<li><a href="https://github.com/XiaoMi/ha_xiaomi_home/blob/main/doc/CHANGELOG.md">ChangeLog</a></li>
<li>Development Documents: <a href="https://developers.home-assistant.io/docs/creating_component_index" rel="nofollow">https://developers.home-assistant.io/docs/creating_component_index</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Directory Structure</h2><a id="user-content-directory-structure" aria-label="Permalink: Directory Structure" href="#directory-structure"></a></p>
<ul dir="auto">
<li>miot: core code.</li>
<li>miot/miot_client: Adding a login user in the integration needs adding a miot_client instance.</li>
<li>miot/miot_cloud: Contains functions related to the cloud service, including OAuth login process, HTTP interface functions (to get the user information, to send the device control command, etc.)</li>
<li>miot/miot_device: Device entity, including device information, processing logic of property, event and action.</li>
<li>miot/miot_mips: Message bus for subscribing and publishing method.</li>
<li>miot/miot_spec: Parse MIoT-Spec-V2.</li>
<li>miot/miot_lan: Device LAN control, including device discovery, device control, etc.</li>
<li>miot/miot_mdns: Central hub gateway service LAN discovery.</li>
<li>miot/miot_network: Obtain network status and network information.</li>
<li>miot/miot_storage: File storage for the integration.</li>
<li>miot/test: Test scripts.</li>
<li>config_flow: Config flow.</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Using Guile for Emacs (140 pts)]]></title>
            <link>https://lwn.net/SubscriberLink/1001645/b1e4453a8c6c16d7/</link>
            <guid>42432004</guid>
            <pubDate>Mon, 16 Dec 2024 15:37:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/SubscriberLink/1001645/b1e4453a8c6c16d7/">https://lwn.net/SubscriberLink/1001645/b1e4453a8c6c16d7/</a>, See on <a href="https://news.ycombinator.com/item?id=42432004">Hacker News</a></p>
Couldn't get https://lwn.net/SubscriberLink/1001645/b1e4453a8c6c16d7/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Modelica (248 pts)]]></title>
            <link>https://modelica.org/</link>
            <guid>42431186</guid>
            <pubDate>Mon, 16 Dec 2024 14:22:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://modelica.org/">https://modelica.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42431186">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

      
      <p><a href="https://modelica.org/news/2024-11-18-fall-ma-newsletter/">
        <span>
          Fall Modelica Association Newsletter published
          <i></i>
        </span>
      </a></p>
  
      
  
      <p>
        Modelica is an object oriented language to model cyber-physical systems. 
        It supports acausal connection of reusable components governed by mathematical equations to facilitate modeling from first principles.
      </p>

      <div>
          <p><a href="https://modelica.org/language/"><i></i>Modelica Language</a>
          <a href="https://modelica.org/libraries/"><i></i>Modelica Libraries</a>
          <a href="https://modelica.org/tools/"><i></i>Modelica Tools</a>
          <a href="https://modelica.org/association/"><i></i>Modelica Association</a>
      </p></div>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: SWEs how do you future-proof your career in light of LLMs? (352 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=42431103</link>
            <guid>42431103</guid>
            <pubDate>Mon, 16 Dec 2024 14:11:19 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=42431103">Hacker News</a></p>
Couldn't get https://news.ycombinator.com/item?id=42431103: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Most iPhone owners see little to no value in Apple Intelligence so far (317 pts)]]></title>
            <link>https://9to5mac.com/2024/12/16/most-iphone-owners-see-little-to-no-value-in-apple-intelligence-so-far/</link>
            <guid>42431090</guid>
            <pubDate>Mon, 16 Dec 2024 14:10:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://9to5mac.com/2024/12/16/most-iphone-owners-see-little-to-no-value-in-apple-intelligence-so-far/">https://9to5mac.com/2024/12/16/most-iphone-owners-see-little-to-no-value-in-apple-intelligence-so-far/</a>, See on <a href="https://news.ycombinator.com/item?id=42431090">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
					
<figure>
	<img width="1500" height="750" src="https://9to5mac.com/wp-content/uploads/sites/6/2024/12/Most-iPhone-owners-see-little-to-no-value-in-Apple-Intelligence-so-far.webp?w=1500" alt="Most iPhone owners see little to no value in Apple Intelligence so far | AI icons seen on Mac, iPad, and iPhone" srcset="https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2024/12/Most-iPhone-owners-see-little-to-no-value-in-Apple-Intelligence-so-far.webp?w=320&amp;quality=82&amp;strip=all&amp;ssl=1 320w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2024/12/Most-iPhone-owners-see-little-to-no-value-in-Apple-Intelligence-so-far.webp?w=640&amp;quality=82&amp;strip=all&amp;ssl=1 640w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2024/12/Most-iPhone-owners-see-little-to-no-value-in-Apple-Intelligence-so-far.webp?w=1024&amp;quality=82&amp;strip=all&amp;ssl=1 1024w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2024/12/Most-iPhone-owners-see-little-to-no-value-in-Apple-Intelligence-so-far.webp?w=1500&amp;quality=82&amp;strip=all&amp;ssl=1 1500w" decoding="async" fetchpriority="high"></figure>

<p>A new survey suggests that <a href="https://9to5mac.com/guides/apple-intelligence/" target="_blank" rel="noreferrer noopener">Apple Intelligence</a> matters to <a href="https://9to5mac.com/guides/iphone-16/" target="_blank" rel="noreferrer noopener">iPhone</a> buyers, but the majority say that the initial features add little to no value. It remains to be seen whether Genmoji and ChatGPT integration will change that view.</p>



<p>Things are even worse for Samsung smartphones, with an even greater majority of owners saying they can’t see much point in the AI features offered … </p>



<h2 id="h-iphone-owners-do-care-about-ai">iPhone owners do care about AI</h2>



<p><a href="https://www.sellcell.com/blog/iphone-vs-samsung-ai-survey/" target="_blank" rel="noreferrer noopener">A new survey</a> by tech trade-in site SellCell found that AI is an important factor when choosing a new smartphone.</p>



<blockquote>
<p>iPhone users showed relatively higher interest in mobile AI than Samsung users as almost half (47.6%) of iPhone users reported AI features as a ‘very’ or ‘somewhat’ important deciding factor when buying a new phone vs. 23.7% of Samsung users who said the same.</p>
</blockquote>



<h2 id="h-but-what-they-ve-seen-so-far-doesn-t-impress">But what they’ve seen so far doesn’t impress</h2>



<p>But while iPhone users want AI features, the Apple Intelligence ones seen to date don’t seem to impress them.</p>



<blockquote>
<p>Smartphone users in general are unsatisfied with the existing AI features as the survey recorded 73% of Apple Intelligence users and 87% of Galaxy AI users stating the new features to be either ‘not very valuable’ or they ‘add little to no value’ to their smartphone experience.</p>
</blockquote>



<p>The site also ranked the popularity of different Apple Intelligence features available prior to the launch of iOS 18.2:</p>



<ul>
<li>Writing Tools (72%)</li>



<li>Notification summaries (54%)</li>



<li>Priority Messages (44.5%)</li>



<li>Clean Up in Photos (29.1%)</li>



<li>Smart Reply in Mail and Messages (20.9%)</li>
</ul>



<h2 id="h-perhaps-genmoji-and-chatgpt-will-change-that">Perhaps Genmoji and ChatGPT will change that</h2>



<p>The survey was carried out before the launch of iOS 18.2, which <a href="https://9to5mac.com/2024/12/11/genmoji-are-here-in-ios-182/" target="_blank" rel="noreferrer noopener">added Genmoji</a> and <a href="https://9to5mac.com/chatgpt-in-ios-18-2-heres-what-apple-intelligence-has-coming-next/" target="_blank" rel="noreferrer noopener">ChatGPT integration</a>.</p>



<blockquote>
<p>Genmoji is a play on two phrases: ‘emoji’ and ‘AI-generated.’ Simply put, in iOS 18.2 you can use Apple Intelligence to create new emoji in an instant.</p>



<p>Open the emoji keyboard on your iPhone running iOS 18.2, and you’ll see a new glowing smiley icon in the top-right corner.&nbsp;Tap that icon, then describe the emoji you’d like created—and that’s it! […]</p>



<p>Apple demoed its ChatGPT integration as something secondary to Siri’s knowledge, with certain questions answered by Siri and others by ChatGPT. But in iOS 18.2 you can start your Siri request with “Ask ChatGPT” and the assistant will automatically send the query straight to ChatGPT.</p>
</blockquote>



<p><em>Image: Apple and Michael Bower/9to5Mac</em></p>
	<p>
		<a target="_blank" rel="nofollow" href="https://news.google.com/publications/CAAqBggKMLOFATDAGg?hl=en-US&amp;gl=US&amp;ceid=US:en">
			<em>Add 9to5Mac to your Google News feed.</em>&nbsp;
					</a>
	</p>
	<div><p><em>FTC: We use income earning auto affiliate links.</em> <a href="https://9to5mac.com/about/#affiliate">More.</a></p><p><a href="https://bit.ly/4eWBGsp"><img src="https://9to5mac.com/wp-content/uploads/sites/6/2024/12/XGIMI-750-150.jpg?quality=82&amp;strip=all" alt="" width="750" height="150"></a></p></div>				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Coder wrote a bug so bad security guards wanted a word when he arrived at work (126 pts)]]></title>
            <link>https://www.theregister.com/2024/12/16/who_me/</link>
            <guid>42431046</guid>
            <pubDate>Mon, 16 Dec 2024 14:05:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2024/12/16/who_me/">https://www.theregister.com/2024/12/16/who_me/</a>, See on <a href="https://news.ycombinator.com/item?id=42431046">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p><span>Who, Me?</span> Welcome once again to Who, Me? The Register's Monday morning feature in which we share tales of technological messes your fellow readers made, and escaped, to give you hope in case you err during the coming week.</p>
<p>This week's hero we'll Regomize as "Trey" because back in the first decade of this millennium he was working for one of the many startup telcos trying to cash in on 3G. (Sadly, he tells Who, Me? it was not one of the ones that succeeded.)</p>
<p>Trey worked on the platforms and services team, which created and maintained apps for internal users and customers. Among his responsibilities was working with external service providers, such as a payment provider, an identity services outfit, and bulk SMS handler.</p>

    

<p>One day, Trey noticed the payments gateway misbehaving, so he wrote a piece of software that sent it a test transaction, checked it had worked, then repeated the process five minutes later.</p>

        


        

<p>Another experiment saw him write a demo app that automated payments, using SMS as prompts.</p>
<p>The app had its own syntax for commands. In theory, the message “Credit 5” would send that sum to an account, and so on.</p>

        

<p>Trey showed the automated payments applications to the head of his department, who was well pleased – so pleased he asked for it to be deployed immediately.</p>
<p>Oh yeah, immediate deployment. That never goes wrong, right?</p>
<ul>

<li><a href="https://www.theregister.com/2024/12/09/who_me/">Panic at the Cisco tech, thanks to ancient IOS syntax helper that outsmarted itself</a></li>

<li><a href="https://www.theregister.com/2024/12/02/who_me/">NetAdmin learns that wooden chocks, unlike swipe cards, open doors when networks can't</a></li>

<li><a href="https://www.theregister.com/2024/11/25/who_me/">Network engineer chose humiliation over a night on the datacenter floor</a></li>

<li><a href="https://www.theregister.com/2024/11/18/who_me/">Undergrad thought he had mastered Unix in weeks. Then he discovered rm -rf</a></li>
</ul>
<p>Wrong. It turns out Trey's little demo had exactly three bugs in it that had not been spotted in his limited testing.</p>
<p>The first bug was in the value of the test transactions. The value had to be a whole number, followed by a modifier.</p>
<p>His intention was that the whole number would be 1 and the modifier -2, a combo that would generate a test transaction of $0.01. But the exponent had accidentally been set to 2 – so each transaction was worth $100. Not an insignificant difference.</p>

        

<p>The second bug was the lack of a liveness check. If one of the gateways failed, the program wouldn't sleep for five minutes but would simply attempt the transaction again immediately.</p>
<p>The third bug – which Trey did in fact know about but had made a mental note to fix later – was that the choice of credit or debit on the test transactions was supposed to be random, but for some reason always came up credit. He figured it wouldn't be that big of an issue, given the transactions were only supposed to be $0.01 every five minutes, right?</p>
<p>You can easily see where this is headed. As he ran the program overnight, one of the gateways failed. Trey's little proof of concept demo program then began crediting his test account with $100 pretty much constantly for the next few hours.</p>
<p>When he arrived at work the next morning, there were some very serious faces – including a security team – waiting to greet him and find out what sort of fraud he thought he was trying to pull. The account had amassed a considerable fortune by that stage.</p>
<p>Thankfully the head of department, who had authorized the deployment, came to Trey's rescue and explained the situation. Tragically, though, the balance of the test account was reset to zero.</p>
<p>Ever had a programming error make a fortune appear – or disappear – like magic? <a target="_blank" href="mailto:whome@theregister.com">Tell us all about it in an email to Who, Me?</a> and we may share your adventure on some future Monday morning. ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why is it so hard to buy things that work well? (573 pts)]]></title>
            <link>https://danluu.com/nothing-works/</link>
            <guid>42430450</guid>
            <pubDate>Mon, 16 Dec 2024 12:38:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://danluu.com/nothing-works/">https://danluu.com/nothing-works/</a>, See on <a href="https://news.ycombinator.com/item?id=42430450">Hacker News</a></p>
Couldn't get https://danluu.com/nothing-works/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA["Nvidia is so far ahead that all the 4090s are nerfed to half speed" (185 pts)]]></title>
            <link>https://twitter.com/realGeorgeHotz/status/1868356459542770087</link>
            <guid>42430184</guid>
            <pubDate>Mon, 16 Dec 2024 11:45:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/realGeorgeHotz/status/1868356459542770087">https://twitter.com/realGeorgeHotz/status/1868356459542770087</a>, See on <a href="https://news.ycombinator.com/item?id=42430184">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Using Drop for safety in Rust (108 pts)]]></title>
            <link>https://v5.chriskrycho.com/journal/read-the-code/using-drop-for-safety-in-rust/</link>
            <guid>42429672</guid>
            <pubDate>Mon, 16 Dec 2024 10:13:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://v5.chriskrycho.com/journal/read-the-code/using-drop-for-safety-in-rust/">https://v5.chriskrycho.com/journal/read-the-code/using-drop-for-safety-in-rust/</a>, See on <a href="https://news.ycombinator.com/item?id=42429672">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      


<p><b><a href="https://v4.chriskrycho.com/2018/assumed-audiences.html">Assumed audience</a>:</b> People who can read Rust and have a basic (and I do mean basic!) understanding of its ownership semantics and <a href="https://doc.rust-lang.org/1.82.0/std/ops/trait.Drop.html">its <code>Drop</code> trait</a>.</p><p>As I was working on some revisions to <cite>The Rust Programming Language</cite> book,<sup><a href="#fn1" id="fnref1">1</a></sup> I had cause to look at <a href="https://doc.rust-lang.org/1.83.0/std/vec/struct.Vec.html#method.drain">the <code>Vec::drain</code> method</a>, and that led me down a rabbit hole — the rabbit hole we are now going to traverse together.</p>
<p>If you are not familiar with <code>Vec::drain</code>, you can use it like this to<span></span> <span>“</span>drain” items out of a <code>Vec</code> (there are similar methods for <code>String</code>, <code>HashMap</code>, and a bunch of other collection types):</p>
<pre><code><span>let</span> <span>mut </span><span>values</span> = <span>vec!</span>[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>];
<span>for</span> <span>val</span> <span>in</span> values.<span>drain</span>(<span>1</span>..<span>3</span>) {
    <span>println!</span>(<span>"Removed: {val}"</span>);
}
<span>println!</span>(<span>"Remaining: {values:?}"</span>);
</code></pre>
<p>The output from that code would be:</p>
<pre><code>Removed: 2
Removed: 3
Remaining: [1, 4, 5]
</code></pre>
<p>Here’s how <a href="https://doc.rust-lang.org/1.83.0/std/vec/struct.Vec.html#method.drain">the docs</a> describe <code>Vec::drain</code> as of Rust 1.83 (emphasis mine):</p>
<blockquote>
<p>Removes the specified range from the vector in bulk, returning all removed elements as an iterator. If the iterator is dropped before being fully consumed, it drops the remaining removed elements.</p>
<p>The returned iterator <em>keeps a mutable borrow</em> on the vector to optimize its implementation.</p>
</blockquote>
<p>That last sentence, particularly the bit I bolded, caught my attention and got me digging into the implementation.</p>
<p>After all, there is a totally reasonable way you could do this: take in the <code>Vec</code>, copy out all the elements to be removed and place them into a new <code>Vec</code>, update the original <code>Vec</code> to remove all of those elements, and return an iterator backed by that newly allocated <code>Vec</code>.</p>
<p>That could potentially be a <em>lot</em> of work for the computer to do right up front, though. If you have a large <code>Vec</code> (thousands or millions of elements) and are operating on some chunk in the middle of it, that is a lot of extra memory to allocate and a lot of copy operations to do before we even know if we are going to use any of those values.</p>
<p>So Rust does something totally different here instead: it <em>keeps</em> a mutable reference to the original <code>Vec</code>, and it only ever reads from and updates the original storage. It can do that because of Rust’s ownership rules: nothing else is allowed to get read or write access to the original <code>Vec</code> as long as the iterator produced by <code>Vec::drain</code> exists, so nothing can ever get into a buggy state by invalidating the iterator or its backing storage (for example, by mutating the values in the <code>Vec</code>, changing its length, etc.).</p>
<p>Rust does this <a href="https://github.com/rust-lang/rust/blob/1f3bf231e160b9869e2a85260fd6805304bfcee2/library/alloc/src/vec/mod.rs#L2603-L2631">by creating a new data structure</a>, quite reasonably named <a href="https://doc.rust-lang.org/1.83.0/std/vec/struct.Drain.html"><code>Drain</code></a>, which <a href="https://github.com/rust-lang/rust/blob/1f3bf231e160b9869e2a85260fd6805304bfcee2/library/alloc/src/vec/drain.rs#L22-L34">holds onto</a> that mutable reference to the original <code>Vec</code> and an iterator for accessing the values of the <code>Vec</code> by using a slice of the <code>Vec</code>. When you then use iterator methods on <code>Drain</code>, it forwards to an iterator over the slice. This means it does not have to implement the iteration itself, but can use the exact same (well-optimized!) implementation as any other iteration over a slice would. The one differences, and it is a critical one, is that <code>drain</code> immediately returns the values from the slice via an unsafe <code>std::ptr::read</code> call.</p>
<p>That <em>would</em> be unsound if it were possible for someone to get access to the values in the <code>Vec</code> during or after the <code>Drain</code> iterator had access to it. As I noted above, though, nothing can get access to it while the <code>Drain</code> iterator has access, because it takes <code>self</code> by mutable reference. So far, this probably seems pretty straightforward if you are familiar with Rust — the <code>std::ptr::read</code> bit is the only unusual part.</p>
<p>What about <em>after</em> you finish with the draining iterator, though? How does Rust guarantee that part of the contract?</p>
<p>This is where it gets interesting.</p>
<p>When the iterator is dropped — either because you hit the end of a <code>for</code> loop over it or because you drop it after iterating over some subset of elements — the <code>Drain</code> type’s implementation of <a href="https://doc.rust-lang.org/1.83.0/std/ops/trait.Drop.html">the <code>Drop</code> trait</a> takes over. That means that <code>impl Drop for Drain</code> is responsible for making sure that <code>Drain</code> is sound. This is a common pattern in Rust, well worth understanding, and it is also really <em>neat</em>, so let’s walk through it — all of it, every last line!</p>
<section aria-label="Note" aria-role="note"><p>I am going to leave off the extra type parameter for the <code>Allocator</code>, but otherwise, this post includes every bit of code in <a href="https://github.com/rust-lang/rust/blob/1f3bf231e160b9869e2a85260fd6805304bfcee2/library/alloc/src/vec/drain.rs#L173-L240">the implementation</a> (in this case, as of Rust 1.85 nightly). Even so, you may want to pull up that code side by side with this post to make it easy to see all of it in context!</p>
</section>
<p>We’ll start with the boilerplate for the trait implementation:</p>
<pre><code><span>impl</span>&lt;T&gt; <span>Drop</span> <span>for</span> <span>Drain</span>&lt;<span>'_</span>, T&gt; {
    <span>fn</span> <span>drop</span>(&amp;<span>mut</span> <span>self</span>) {
        <span>// ...</span>
    }
}
</code></pre>
<p>The thing to notice about this is that <code>drop</code> takes <code>&amp;mut self</code>. This means we cannot do anything which requires <em>ownership</em> of <code>self</code>, which in turn motivates the next thing that we’ll see:</p>
<pre><code><span>/// Moves back the un-`Drain`ed elements to restore the original `Vec`.</span>
<span>struct</span> <span>DropGuard</span>&lt;<span>'r</span>, <span>'a</span>, T&gt;(&amp;<span>'r</span> <span>mut</span> Drain&lt;<span>'a</span>, T&gt;);
</code></pre>
<p>This is an internal data structure, a type <em>only</em> available in the body of this particular function. As the documentation comment explains, the purpose of this is to provide a way to guarantee that this implementation will always move all the contents of the original <code>Vec</code> back into that <code>Vec</code>, with the correct locations. It does that, as its name might imply…</p>
<pre><code><span>impl</span>&lt;<span>'r</span>, <span>'a</span>, T&gt; <span>Drop</span> <span>for</span> <span>DropGuard</span>&lt;<span>'r</span>, <span>'a</span>, T&gt; {
    <span>fn</span> <span>drop</span>(&amp;<span>mut</span> <span>self</span>) {
        <span>// the body of the implementation (which we’re about to see!)</span>
    }
}
</code></pre>
<p>…by way of its <em>own</em> implementation of <code>Drop</code>! This is a <em>relatively</em> straightforward implementation, and it is therefore relatively easy to check for safety, but it <em>is</em> doing a bunch of things that have to be done in an <code>unsafe</code> block because this is all valid if and only if it happens in the context where you have <code>&amp;mut self</code> access to the <code>DropGuard</code> and therefore also to the <code>Drain</code> struct.</p>
<p>The first thing this does is check whether there is anything to do at all by checking the <code>tail_len</code>:</p>
<pre><code><span>if</span> <span>self</span>.<span>0</span>.tail_len &gt; <span>0</span> {
    <span>// ...</span>
}
</code></pre>
<p>The<span></span> <span>“</span>tail” whose length is calculated here is the set of elements which come after the end of the range specified when calling <code>Vec::drain</code>. Returning to the example code I showed at the beginning:</p>
<pre><code><span>let</span> <span>mut </span><span>values</span> = <span>vec!</span>[<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>, <span>5</span>];
<span>for</span> <span>val</span> <span>in</span> values.<span>drain</span>(<span>1</span>..<span>3</span>) {
    <span>println!</span>(<span>"Removed: {val}"</span>);
}
<span>println!</span>(<span>"Remaining: {values:?}"</span>);
</code></pre>
<p>The tail here are the values <code>4</code> and <code>5</code>, which are not drained.</p>
<p>The <code>tail_len</code> value is set only once, when the struct is initialized in <code>Vec::drain</code>, along with <code>tail_start</code>:</p>
<pre><code><span>pub</span> <span>fn</span> <span>drain</span>&lt;R&gt;(&amp;<span>mut</span> <span>self</span>, range: R) <span>-&gt;</span> Drain&lt;<span>'_</span>, T&gt;
<span>where</span>
    R: RangeBounds&lt;<span>usize</span>&gt;,
{
    <span>// Memory safety</span>
    <span>//</span>
    <span>// When the Drain is first created, it shortens the length of</span>
    <span>// the source vector to make sure no uninitialized or moved-from elements</span>
    <span>// are accessible at all if the Drain's destructor never gets to run.</span>
    <span>//</span>
    <span>// Drain will ptr::read out the values to remove.</span>
    <span>// When finished, remaining tail of the vec is copied back to cover</span>
    <span>// the hole, and the vector length is restored to the new length.</span>
    <span>//</span>
    <span>let</span> <span>len</span> = <span>self</span>.<span>len</span>();
    <span>let</span> <span>Range</span> { start, end } = slice::<span>range</span>(range, ..len);

    <span>unsafe</span> {
        <span>// set self.vec length's to start, to be safe in case Drain is leaked</span>
        <span>self</span>.<span>set_len</span>(start);
        <span>let</span> <span>range_slice</span> = slice::<span>from_raw_parts</span>(<span>self</span>.<span>as_ptr</span>().<span>add</span>(start), end - start);
        Drain {
            tail_start: end,
            tail_len: len - end,
            iter: range_slice.<span>iter</span>(),
            vec: NonNull::<span>from</span>(<span>self</span>),
        }
    }
}
</code></pre>
<p>Here you can see that <code>tail_start</code> and <code>tail_end</code> represent anything <em>after</em> the section you are pulling out with <code>drain</code>, with a special bit of handling to guarantee memory safety when dealing with the original <code>Vec</code><span></span><span>’</span>s contents.</p>
<p>Thus, in my example code, <code>tail_start</code> will be <code>3</code> and <code>tail_end</code> will be <code>4</code>: <code>..</code> <em>excludes</em> the end of the range, with the values <code>4</code> and <code>5</code>, exactly as I described above.</p>
<p>If there is a tail, the <code>DropGuard</code> relocates each of those items using <a href="https://doc.rust-lang.org/1.83.0/std/ptr/fn.copy.html">the <code>std::ptr::copy</code> function</a>, which is similar to the C function <code>memmove</code>. It gets a mutable reference to the original <code>Vec</code>, and again only copies over the values if the tail is not already at the end of the original <code>Vec</code>.</p>
<pre><code><span>if</span> <span>self</span>.<span>0</span>.tail_len &gt; <span>0</span> {
    <span>unsafe</span> {
        <span>let</span> <span>source_vec</span> = <span>self</span>.<span>0</span>.vec.<span>as_mut</span>();
        <span>// memmove back untouched tail, update to new length</span>
        <span>let</span> <span>start</span> = source_vec.<span>len</span>();
        <span>let</span> <span>tail</span> = <span>self</span>.<span>0</span>.tail_start;
        <span>if</span> tail != start {
            <span>let</span> <span>src</span> = source_vec.<span>as_ptr</span>().<span>add</span>(tail);
            <span>let</span> <span>dst</span> = source_vec.<span>as_mut_ptr</span>().<span>add</span>(start);
            ptr::<span>copy</span>(src, dst, <span>self</span>.<span>0</span>.tail_len);
        }
        source_vec.<span>set_len</span>(start + <span>self</span>.<span>0</span>.tail_len);
    }
}
</code></pre>
<p>Finally, this implementation updates the length of the original <code>Vec</code>. This is an unsafe operation because it does not even bother trying to uphold the normal invariants about a <code>Vec</code>: that it contains no uninitialized memory, that the new length is less than or equal to the total allocated capacity of the <code>Vec</code>, and so on. Here, we can see that it is safe by inspection because we guarantee at construction that the <code>tail_len</code> is bounded by the length of the original vector — but we can (and Rust <em>does</em>) also do a bunch of extra dynamic analysis with the <a href="https://github.com/rust-lang/miri">Miri</a> tool to <em>make sure</em> that is true via extensive testing.</p>
<details><summary>A bit more about Miri (click to expand!)</summary>
<p>Per its <span>README</span>:</p>
<blockquote>
<p>Miri is an <a href="https://doc.rust-lang.org/reference/behavior-considered-undefined.html">Undefined Behavior</a> detection tool for Rust. It can run binaries and test suites of cargo projects and detect unsafe code that fails to uphold its safety requirements.</p>
</blockquote>
<p>You can read a little about how to use it in <a href="https://doc.rust-lang.org/nightly/book/ch20-01-unsafe-rust.html#using-miri-to-check-unsafe-code">a section I recently added</a> to <cite>The Rust Programming Language</cite>, and much more in <a href="https://github.com/rust-lang/miri">its repo</a>.</p>
</details>
<p>When I said earlier that we would minimize the work done for relocating items, this is what I meant: we <em>only</em> move these items after actually using the <code>Drain</code>; we do not preemptively move the originals out of place and move these over.</p>
<p>(If you’re wondering, this does mean that if you&nbsp;are draining some small part of a large <code>Vec</code>, you may see a performance hiccup when you’re done with the <code>Drain</code>. As always with performance, though, you should measure before you assume this is a problem!)</p>
<p>Once the memory move is done, the <code>DropGuard</code> is also done. We will see shortly how it gets <em>used</em>, and I will explain then why it is used <em>this way</em>. Back to the rest of the <code>drop</code> implementation for <code>Drain</code>.</p>
<p>First, it pulls the range iterator out of the <code>Drain</code> and uses it to figure out how many items it needs to drop when cleaning everything up — because, as the docs noted,<span></span> <span>“</span>If the iterator is dropped before being fully consumed, it drops the remaining removed elements.”</p>
<pre><code><span>let</span> <span>iter</span> = mem::<span>take</span>(&amp;<span>mut</span> <span>self</span>.iter);
<span>let</span> <span>drop_len</span> = iter.<span>len</span>();
</code></pre>
<p><a href="https://doc.rust-lang.org/1.83.0/std/mem/fn.take.html">The <code>mem::take</code> function</a> replaces a given value with whatever its <em>default</em> value is, as defined by its implementation of <a href="https://doc.rust-lang.org/1.83.0/std/default/trait.Default.html">the <code>std::default::Default</code> trait</a>. For a <code>Range&lt;usize&gt;</code> (as we have for indexing into a <code>Vec</code>), that is <code>0..0</code>, which runs from <code>0</code>-inclusive to <code>0</code>-exclusive. In other words, it is the <em>empty</em> range, which is hopefully what you would expect. That step sets <code>self.iter</code> to a useless value and makes the <code>iter</code> value available for further manipulation — and, critically, <em>available to drop</em> when this <code>Drain</code> goes out of scope, but not attached to it, which matters for some pointer arithmetic which happens later.</p>
<p>Next up, this <code>drop</code> implementation gets a mutable reference to the original <code>Vec</code>:</p>
<pre><code><span>let</span> <span>mut </span><span>vec</span> = <span>self</span>.vec;
</code></pre>
<p>At first read, it might not be obvious that it is a <em>reference</em> that we are getting there, but the type of <code>self.vec</code> here is <code>NonNull&lt;Vec&lt;T&gt;&gt;</code>, which always wraps a reference. In this case, it was constructed by calling <code>NonNull::from(self)</code> back when <code>Drain</code> got constructed, where <code>self</code> was <code>&amp;mut self</code> referencing the <code>Vec</code> we called <code>drain</code> on:</p>
<pre><code><span>pub</span> <span>fn</span> <span>drain</span>&lt;R&gt;(&amp;<span>mut</span> <span>self</span>, range: R) <span>-&gt;</span> Drain&lt;<span>'_</span>, T&gt;
<span>where</span>
    R: RangeBounds&lt;<span>usize</span>&gt;,
{
    <span>// all the safe setup...</span>
    <span>unsafe</span> {
        <span>// all the unsafe setup...</span>
        Drain {
            <span>// the other fields, and then at last...</span>
            vec: NonNull::<span>from</span>(<span>self</span>),
        }
    }
}
</code></pre>
<p>So <code>let mut vec = self.vec</code> is a mutable reference to <a href="https://doc.rust-lang.org/1.83.0/std/ptr/struct.NonNull.html">the <code>NonNull</code> pointer</a> to the <code>Vec</code>, which in turn we can use via its implementation of <a href="https://doc.rust-lang.org/1.83.0/std/ops/trait.Deref.html">the <code>Deref</code> trait</a> to use all the normal <code>Vec</code> methods. That is exactly what we do next.</p>
<p>First, there is a special case for zero-sized types. A zero-sized type is a type like this — </p>
<pre><code><span>struct</span> <span>TotallyEmpty</span>;
</code></pre>
<p> — that is, one that has no data associated with it and that the compiler will thus guarantee takes up no memory at all. We have to handle this case distinctly because there is nothing to move!</p>
<section aria-label="Note" aria-role="note"><p>Idiomatic Rust uses these kinds of types for a couple of reasons — neither of them <em>extremely</em> common, but not especially <em>uncommon</em>, either:</p>
<ul>
<li>
<p>As a<span></span> <span>“</span>marker” for distinguishing between other types. This can help provide type safety without any additional runtime cost, because Rust will distinguish between two zero-sized types. This can be super handy for implementing type-safe state machines, for example.</p>
</li>
<li>
<p>To have a useful place to implement a trait. You cannot implement a trait on <em>nothing</em>. You can, however, <code>impl SomeTrait for TotallyEmpty</code>. That can be useful, especially when in conjunction with use as a marker type! One time you might want this is as a marker to make a given type opt out of being <code>Send</code> or <code>Sync</code>.</p>
</li>
</ul>
<p>I could say a lot more about zero-sized types, but instead: back to the <code>drop</code> implementation!</p>
</section>
<p>The implementation therefore starts by doing something a little interesting: checking a value on <code>T</code>. But <code>T</code> is a type!</p>
<pre><code><span>if</span> T::IS_ZST {
    <span>// ZSTs have no identity, so we don't need to move them around, we only need to drop the correct amount.</span>
    <span>// this can be achieved by manipulating the Vec length instead of moving values out from `iter`.</span>
    <span>unsafe</span> {
        <span>let</span> <span>vec</span> = vec.<span>as_mut</span>();
        <span>let</span> <span>old_len</span> = vec.<span>len</span>();
        vec.<span>set_len</span>(old_len + drop_len + <span>self</span>.tail_len);
        vec.<span>truncate</span>(old_len + <span>self</span>.tail_len);
    }

    <span>return</span>;
}
</code></pre>
<p>This is actually <a href="https://github.com/rust-lang/rust/blob/75716b45105e443199ce9800c7009ddfd6d2be53/library/core/src/mem/mod.rs#L1239">implemented</a> in Rust’s standard library — technically in <code>libcore</code> — using an unstable feature currently only designed for internal use like this.<sup><a href="#fn2" id="fnref2">2</a></sup> That means you cannot write this in your own code, as you can confirm with <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=b935f58d234eb36ce3a2cbfcdc360905">this playground</a>.<sup><a href="#fn3" id="fnref3">3</a></sup> Under the hood, though, it is doing something pretty simple:</p>
<pre><code><span>pub</span> <span>trait</span> <span>SizedTypeProperties</span>: <span>Sized</span> {
    <span>// other such compiler-only bits...</span>

    <span>const</span> IS_ZST: <span>bool</span> = size_of::&lt;<span>Self</span>&gt;() == <span>0</span>;
}

<span>impl</span>&lt;T&gt; SizedTypeProperties <span>for</span> <span>T</span> {}
</code></pre>
<p>That is, at compile time, it determines for any type <code>T</code> whether it is a zero-sized type or not, and then Rust’s internals can use that associated field. This <em>is</em> something you can do yourself for other traits (see <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=d6f069372555fe4eb8c1f2e1d77abf43">this playground</a> for a silly example); it is just not something you see very often!</p>
<p>Back to the <code>drop</code> implementation, we can see that all we need to do in this case is update the length of the original <code>Vec</code>, with no need to copy memory around. Then we <code>return</code> because there is nothing else to do in that case, and the <code>Drain</code> instance can be safely cleaned up.</p>
<pre><code><span>unsafe</span> {
    <span>let</span> <span>vec</span> = vec.<span>as_mut</span>();
    <span>let</span> <span>old_len</span> = vec.<span>len</span>();
    vec.<span>set_len</span>(old_len + drop_len + <span>self</span>.tail_len);
    vec.<span>truncate</span>(old_len + <span>self</span>.tail_len);
}

<span>return</span>;
</code></pre>
<p>The<span></span> <span>“</span>normal” pattern, though, is for types which <em>do</em> have a size. In that case, the <code>DropGuard</code> finally makes its appearance:</p>
<pre><code><span>// ensure elements are moved back into their appropriate places, even when</span>
<span>// drop_in_place panics</span>
<span>let</span> <span>_guard</span> = <span>DropGuard</span>(<span>self</span>);
</code></pre>
<p>The comment explains why <code>DropGuard</code> exists: we need to <em>guarantee</em> the constraint I outlined at the top, and the reason this all exists — that the original values from the <code>Vec</code> are <em>never</em> accessible once they are included in a <code>Drain</code>, because otherwise we would violate Rust’s memory safety guarantees. We will see what the <code>drop_in_place</code> bit refers to in a moment, but there is one other thing to do first: return immediately if there is nothing extra to drop!</p>
<p>Remember, we got the number of items to drop, i.e. the number of items left in the iterator. If there is nothing left to drop, we’re done:</p>
<pre><code><span>let</span> <span>iter</span> = mem::<span>take</span>(&amp;<span>mut</span> <span>self</span>.iter);
<span>let</span> <span>drop_len</span> = iter.<span>len</span>();

<span>// zero-sized type handling and creating the drop guard...</span>

<span>if</span> drop_len == <span>0</span> {
    <span>return</span>;
}
</code></pre>
<p>And by<span></span> <span>“</span>done”, I mean that the drop method returns, and so the drop guard we declared with <code>let _guard = DropGuard(self)</code> now goes out of scope. That means its <code>Drop</code> implementation — where we started! — will run. Anything that needs to be moved in the original <code>Vec</code> will be moved here at the end of the scope.</p>
<p>The same basic thing will apply, with a small tweak, for the final part of this <code>drop</code> implementation:</p>
<pre><code><span>// as_slice() must only be called when iter.len() is &gt; 0 because</span>
<span>// it also gets touched by vec::Splice which may turn it into a dangling</span>
<span>// pointer which would make it and the vec pointer point to different</span>
<span>// allocations which would lead to invalid pointer arithmetic below.</span>
<span>let</span> <span>drop_ptr</span> = iter.<span>as_slice</span>().<span>as_ptr</span>();

<span>unsafe</span> {
    <span>// drop_ptr comes from a slice::Iter which only gives us a &amp;[T] but</span>
    <span>// for drop_in_place a pointer with mutable provenance is necessary.</span>
    <span>// Therefore we must reconstruct it from the original vec but also</span>
    <span>// avoid creating a &amp;mut to the front since that could invalidate raw</span>
    <span>// pointers to it which some unsafe code might rely on.</span>
    <span>let</span> <span>vec_ptr</span> = vec.<span>as_mut</span>().<span>as_mut_ptr</span>();
    <span>let</span> <span>drop_offset</span> = drop_ptr.<span>sub_ptr</span>(vec_ptr);
    <span>let</span> <span>to_drop</span> = ptr::<span>slice_from_raw_parts_mut</span>(vec_ptr.<span>add</span>(drop_offset), drop_len);
    ptr::<span>drop_in_place</span>(to_drop);
}
</code></pre>
<p>The comment on the first line of code here tells us why we handled the <code>drop_len</code> check <em>before</em> doing any of this. It is also suggestive of a theme that has been here implicitly throughout: Rust makes it <em>easier</em> to isolate safety checks, but they are often impossible to make totally local. In this case, <a href="https://doc.rust-lang.org/1.83.0/std/vec/struct.Splice.html">the <code>Splice</code> type</a> created via <a href="https://doc.rust-lang.org/1.83.0/std/vec/struct.Vec.html#method.splice">the <code>Vec::splice</code> method</a> uses <code>Drain</code>, and also uses <code>unsafe</code> pointers to the original <code>Vec</code> in its own <code>Drop</code> implementation, so <code>Drain</code> has to be careful not to violate the assumptions that <code>Splice</code> makes. This is hard to get right! And it’s why we use Miri, as I noted above — that’s what <a href="https://github.com/rust-lang/rust/pull/106950">led to</a> this bit of code being written the way it is!</p>
<p>The next block of comments and the first line in the unsafe block get into something Rust is working hard to improve in terms of its model of safety: <em>provenance</em>. In brief, provenance is about tracking not just the address of a pointer but <em>where it came from</em> and therefore what we can prove about it. Provenance is an incredibly deep and fascinating subject about which I know too little, so I won’t say much more than that.</p>
<p>Here, the point is to make sure we have a valid pointer provenance to use when dropping any values that are unused at the end of the original range specified when calling <code>drain</code>: Miri will (rightly!) complain otherwise.</p>
<p>Once we have pointers with valid provenances, we get a<span></span> <span>“</span>raw slice” with <a href="https://doc.rust-lang.org/1.83.0/std/ptr/fn.slice_from_raw_parts_mut.html">the <code>std::ptr::slice_from_raw_parts_mut</code> function</a>. A<span></span> <span>“</span>raw slice” is <em>basically</em> just a chunk of memory interpreted as a contiguous sequence of items of a given type. It is called<span></span> <span>“</span>raw” because it is unsafe: it is constructed directly from a pointer and size; it is on the caller to make sure it is valid.<sup><a href="#fn4" id="fnref4">4</a></sup> We use the <code>_mut</code> version of the function here because the next, and next-to-last, thing we do is call <a href="https://doc.rust-lang.org/1.83.0/std/primitive.pointer.html#method.drop_in_place">the <code>std::ptr::drop_in_place</code> function</a>, which runs the <code>Drop</code> implementation for whatever it is called on <em>without</em> moving them. Called on a slice, that will in turn recursively call the <code>Drop</code> on each item in the slice.</p>
<p><code>drop_in_place</code> is unsafe because it leaves the resulting memory exactly as it was, modulo whatever a given item’s own <code>Drop</code> implementation might do. That takes us back to the guarantee we have to uphold about clearing all of that memory. That is also why I said calling <code>drop_in_place</code> is the<span></span> <span>“</span>next-to-last” thing this does, though: This is the end of the function, and thus the end of the scope, which means the <code>_guard</code> instance of <code>DropGuard</code> goes out of scope and runs. That means the guarantee gets upheld! And, as the comment at the creation of the <code>DropGuard</code> instance indicated — </p>
<pre><code><span>// ensure elements are moved back into their appropriate places, even when</span>
<span>// drop_in_place panics</span>
<span>let</span> <span>_guard</span> = <span>DropGuard</span>(<span>self</span>);
</code></pre>
<p> — Rust will run the <code>DropGuard</code> implementation of <code>Drop</code> even if <code>drop_in_place</code> panics, which could happen if something in some inner type’s <code>Drop</code> implementation is ill-behaved. This allows this function to <em>guarantee</em> that even if something went wrong with the data which was originally in the <code>Vec</code>, the memory itself is valid, and the <code>Vec</code> itself remains valid afterward. That is: There might be a serious bug or problem, but it will not be a bug or problem that violates Rust’s safety and soundness guarantees.</p>
<hr>
<p>That was a lot of ground, but it showed off some interesting bits about providing a safe abstraction for unsafe code and how Rust can take advantage of its ownership semantics to provide great performance while upholding those guarantees. In particular:</p>
<ol>
<li>The original <code>Vec</code> is never accessible in an invalid state during or after using <code>drain</code> on it.</li>
<li>The iterator over that <code>Vec</code> can never be invalidated either.</li>
<li>Both (1) and (2) are true <em>even in the face of badly behaved implementations of other types</em>, as long as there is no <em>unsound</em> code in that bad behavior.</li>
</ol>
<p>It is also worth seeing that while this <em>includes</em> memory safety, the way the ownership semantics work in the public <abbr title="application programming interface">API</abbr> here eliminates <em>other</em> kinds of bugs too. You can have iterator invalidation bugs in Java or JavaScript just fine if you don’t take care! In Rust, you can only have an iterator invalidation bug by explicitly opting into <code>unsafe</code>. That’s neat, and it’s one reason I miss Rust when working in other languages!</p>
<p>I also particularly want to note this use of a <code>DropGuard</code> to uphold those guarantees. This is <em>similar</em> to the kind of thing you can do with the <code>using</code> construct in C# or JavaScript or the <code>with</code> construct in Python — but in those cases, there is a special language affordance built in to handle that kind of scoping so you can deploy it for cases where you need it. In Rust, it falls directly out of the combination of ownership and having a destructor that runs automatically when an item goes out of scope. You do not <em>need</em> any special language constructs for it other than those two.</p>
<h2 id="further-reading" tabindex="-1"><a href="#further-reading">Further reading</a></h2>
<p>If you want to read more about provenance, check out these posts by Rust memory model expert Ralf Jung:</p>
<ul>
<li><a href="https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html">Pointers Are Complicated, or: What’s in a Byte?</a></li>
<li><a href="https://www.ralfj.de/blog/2020/12/14/provenance.html">Pointers Are Complicated II, or: We need better language specs</a></li>
<li><a href="https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html">Pointers Are Complicated III, or: Pointer-integer casts exposed</a></li>
</ul>
<p>You might also want to look into <a href="https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/">the <abbr title="Capability Hardware Enhanced RISC Instructions">CHERI</abbr> project</a>, which is working on adding provenance to pointers at the hardware instruction level, which would help immensely with safety in C.</p>
<p>For two more great reads on how you can (and Rust does) use ownership in related ways to provide powerful guarantees about your code, check out Cliff Biffle’s posts <a href="https://cliffle.com/blog/rust-typestate/">The Typestate Pattern in Rust</a> and <a href="https://cliffle.com/blog/rust-mutexes/">Why Rust mutexes look like they do</a>. Those are where I first came to understand the pattern I walked through in this post!</p>
<hr>
<section>
<ol>
<li id="fn1"><p>It still surprises and delights me every time I launch the version of the book that will come out with Rust 1.85 and read:</p>
<blockquote>
<p>by Steve Klabnik, Carol Nichols, and Chris Krycho, with contributions from the Rust Community</p>
</blockquote>
 <a href="#fnref1">↩︎</a></li>
<li id="fn2"><p>The standard library does this a fair bit for specific things like this. Less over time, though, in general! <a href="#fnref2">↩︎</a></p>
</li>
<li id="fn3"><p>You could use the relevant feature flag to do it on nightly Rust… but you shouldn’t, particularly because it is not planned for stabilization at present. <a href="#fnref3">↩︎</a></p>
</li>
<li id="fn4"><p>In other words, it is basically a C array. <a href="#fnref4">↩︎</a></p>
</li>
</ol>
</section>

   </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Popeye and Tintin enter the public domain in 2025 along with Faulkner, Hemingway (301 pts)]]></title>
            <link>https://apnews.com/article/public-domain-2025-popeye-tintin-e71ca89b7a430e68e66a7c6ce45a98eb</link>
            <guid>42429606</guid>
            <pubDate>Mon, 16 Dec 2024 10:02:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://apnews.com/article/public-domain-2025-popeye-tintin-e71ca89b7a430e68e66a7c6ce45a98eb">https://apnews.com/article/public-domain-2025-popeye-tintin-e71ca89b7a430e68e66a7c6ce45a98eb</a>, See on <a href="https://news.ycombinator.com/item?id=42429606">Hacker News</a></p>
Couldn't get https://apnews.com/article/public-domain-2025-popeye-tintin-e71ca89b7a430e68e66a7c6ce45a98eb: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Nokia 5110 – Back from the Dead (243 pts)]]></title>
            <link>https://opsbros.com/nokia-5110-back-from-the-dead/</link>
            <guid>42429197</guid>
            <pubDate>Mon, 16 Dec 2024 08:52:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://opsbros.com/nokia-5110-back-from-the-dead/">https://opsbros.com/nokia-5110-back-from-the-dead/</a>, See on <a href="https://news.ycombinator.com/item?id=42429197">Hacker News</a></p>
Couldn't get https://opsbros.com/nokia-5110-back-from-the-dead/: Error: timeout of 10000ms exceeded]]></description>
        </item>
    </channel>
</rss>