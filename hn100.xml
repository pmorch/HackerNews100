<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 28 Oct 2025 00:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Easy RISC-V (131 pts)]]></title>
            <link>https://dramforever.github.io/easyriscv/</link>
            <guid>45726192</guid>
            <pubDate>Mon, 27 Oct 2025 20:57:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dramforever.github.io/easyriscv/">https://dramforever.github.io/easyriscv/</a>, See on <a href="https://news.ycombinator.com/item?id=45726192">Hacker News</a></p>
<div id="readability-page-1" class="page">

    

    <p>(Last updated: 2025-10-27 14:51)</p>

    <nav>
        <ul>
        <li><a href="#introduction" id="toc-introduction">Introduction</a></li>
        <li><a href="#my-first-risc-v-assembly-program" id="toc-my-first-risc-v-assembly-program">My first RISC-V
        assembly program</a></li>
        <li><a href="#emulator-controls" id="toc-emulator-controls">Emulator controls</a></li>
        <li><a href="#processor-state" id="toc-processor-state">Processor state</a></li>
        <li><a href="#instruction-syntax" id="toc-instruction-syntax">Instruction syntax</a></li>
        <li><a href="#computational-instructions" id="toc-computational-instructions">Computational
        instructions</a>
        <ul>
        <li><a href="#arithmetic-instructions" id="toc-arithmetic-instructions">Arithmetic
        instructions</a></li>
        <li><a href="#bitwise-instructions" id="toc-bitwise-instructions">Bitwise instructions</a></li>
        <li><a href="#comparison-instructions" id="toc-comparison-instructions">Comparison
        instructions</a></li>
        <li><a href="#shift-instructions" id="toc-shift-instructions">Shift instructions</a></li>
        <li><a href="#thats-it" id="toc-thats-it">That’s it…?</a></li>
        <li><a href="#summary-of-computational-instructions" id="toc-summary-of-computational-instructions">Summary of
        computational instructions</a></li>
        </ul></li>
        <li><a href="#intermission-larger-numbers" id="toc-intermission-larger-numbers">Intermission: Larger
        numbers</a></li>
        <li><a href="#jumps-and-branches" id="toc-jumps-and-branches">Jumps and branches</a>
        <ul>
        <li><a href="#branches" id="toc-branches">Branches</a></li>
        <li><a href="#jumps" id="toc-jumps">Jumps</a></li>
        <li><a href="#jump-and-link" id="toc-jump-and-link">Jump and
        link</a></li>
        </ul></li>
        <li><a href="#memory" id="toc-memory">Memory</a>
        <ul>
        <li><a href="#basic-memory-accesses" id="toc-basic-memory-accesses">Basic memory accesses</a></li>
        <li><a href="#smaller-widths" id="toc-smaller-widths">Smaller
        widths</a></li>
        <li><a href="#memory-mapped-io" id="toc-memory-mapped-io">Memory-mapped I/O</a></li>
        </ul></li>
        <li><a href="#functions" id="toc-functions">Functions</a>
        <ul>
        <li><a href="#register-aliases-and-calling-conventions" id="toc-register-aliases-and-calling-conventions">Register
        aliases and calling conventions</a></li>
        <li><a href="#the-stack" id="toc-the-stack">The stack</a></li>
        </ul></li>
        <li><a href="#intermission-numeric-labels" id="toc-intermission-numeric-labels">Intermission: Numeric
        labels</a></li>
        <li><a href="#position-independence" id="toc-position-independence">Position independence</a></li>
        <li><a href="#privileged-architecture-fundamentals" id="toc-privileged-architecture-fundamentals">Privileged
        architecture fundamentals</a>
        <ul>
        <li><a href="#privilege-levels" id="toc-privilege-levels">Privilege levels</a></li>
        <li><a href="#control-and-status-registers-csrs" id="toc-control-and-status-registers-csrs">Control and status
        registers (CSRs)</a></li>
        <li><a href="#counters" id="toc-counters">Counters</a></li>
        <li><a href="#current-privilege-level" id="toc-current-privilege-level">Current privilege
        level</a></li>
        </ul></li>
        <li><a href="#exceptions" id="toc-exceptions">Exceptions</a>
        <ul>
        <li><a href="#exception-entry" id="toc-exception-entry">Exception entry</a></li>
        <li><a href="#exception-causes" id="toc-exception-causes">Exception causes</a></li>
        <li><a href="#exception-return" id="toc-exception-return">Exception return</a></li>
        </ul></li>
        <li><a href="#handling-user-mode" id="toc-handling-user-mode">Handling User mode</a>
        <ul>
        <li><a href="#entering-user-mode" id="toc-entering-user-mode">Entering User mode</a></li>
        <li><a href="#intentionally-causing-an-exception" id="toc-intentionally-causing-an-exception">Intentionally
        causing an exception</a></li>
        <li><a href="#saving-and-restoring-all-registers" id="toc-saving-and-restoring-all-registers">Saving and restoring
        all registers</a></li>
        </ul></li>
        <li><a href="#writing-a-very-very-bare-bones-operating-system" id="toc-writing-a-very-very-bare-bones-operating-system">Writing
        a very very bare bones operating system</a>
        <ul>
        <li><a href="#design" id="toc-design">Design</a></li>
        <li><a href="#code" id="toc-code">Code</a></li>
        <li><a href="#pseudocode-reference" id="toc-pseudocode-reference">Pseudocode reference</a></li>
        </ul></li>
        <li><a href="#lies-and-omissions" id="toc-lies-and-omissions">Lies and omissions</a></li>
        <li><a href="#references" id="toc-references">References</a></li>
        <li><a href="#thanks" id="toc-thanks">Thanks</a></li>
        <li><a href="#license" id="toc-license">License</a></li>
        <li><a href="#index" id="toc-index">Index</a>
        <ul>
        <li><a href="#instructions" id="toc-instructions">Instructions</a></li>
        <li><a href="#registers-and-csrs" id="toc-registers-and-csrs">Registers and CSRs</a></li>
        <li><a href="#special-assembly-syntax" id="toc-special-assembly-syntax">Special assembly
        syntax</a></li>
        <li><a href="#other-terms" id="toc-other-terms">Other
        terms</a></li>
        </ul></li>
        </ul>
    </nav>

<p><a href="https://dramforever.github.io/easyriscv/?no-emulator">(Emulators disabled version)</a></p>
<p>This page is not designed to be used on a narrow screen or without
CSS. If you’re having issues using the emulator, try the <a href="https://dramforever.github.io/easyriscv/?no-emulator">emulators disabled version</a>.</p>
<p>An interactive introduction to RISC-V assembly programming, by <a href="https://github.com/dramforever">dramforever</a>.</p>
<p>Interested in the code? Want to report an issue? Check out the GitHub
page: <a href="https://github.com/dramforever/easyriscv">https://github.com/dramforever/easyriscv</a></p>
<h2 id="introduction">Introduction</h2>
<p>Inspired by <a href="https://skilldrick.github.io/easy6502/">Easy
6502 by Nick Morgan</a>, this is a quick-ish introductory tutorial to
RISC-V assembly programming. This tutorial is intended for those with a
basic familiarity with low level computer science concepts, but
unfamiliar with RISC-V. If you’re curious about RISC-V, I hope this will
be a good start to your journey to learning about it.</p>
<p>RISC-V (pronounced “risk-five”), as its name suggests, is <a href="https://en.wikipedia.org/wiki/Reduced_instruction_set_computer">RISC
(Reduced instruction set computer)</a> architecture. Having started its
life at UC Berkerley, RISC-V has bred a lively community of students,
researchers, engineers and hobbyists working on software and hardware.
Some highlights of RISC-V include:</p>
<ul>
<li>Clean design: Although loosely based on many previous designs,
RISC-V is at its core a new and clean design. It does away with integer
status flags like “carry” or “overflow”, and does not have MIPS’s branch
delay slots. RISC-V is designed primarily as a target for compilers, but
writing RISC-V assembly by hand is still quite pleasant.</li>
<li>Open standard: RISC-V specifications are developed publicly and
anyone can use them without copyright or patent licensing issues. Many
researchers and companies around the world have made their own RISC-V
processor cores and chips based on these specificaions.</li>
<li>Community support: If you want to make your own processors, rather
than paying a hefty license fee to Arm, or designing your own
architecture, you can just use RISC-V. Using RISC-V instead of a custom
architecture allows you to make use of the existing and growing software
ecosystem instead of having to maintain your own.</li>
</ul>
<p>RISC-V is less mature than more established architectures like x86 or
Arm, but it is quickly gaining steam and has found great success in many
areas of application, such as embedded systems, custom processors,
education, and research.</p>
<p>This article will cover the 32-bit bare bones RV32I_Zicsr instruction
set with a tiny subset of the privileged architecture. You’ll probably
never find a “real” chip with such bare bones instruction support. Most
of them will have more <em>extensions</em> for other features like
floating point or compressed instructions. However, I would still
consider what we have here a “complete” instruction set. For example,
Rust has <a href="https://doc.rust-lang.org/nightly/rustc/platform-support/riscv32-unknown-none-elf.html">Tier
2 support</a> for the target <code>riscv32i-unknown-none-elf</code>
which works completely fine with only the instructions we’ll cover
here.</p>
<p>Speaking of instructions we will cover, why don’t we meet the 45 of
them right here and now:</p>
<!-- TODO: Ordering? -->
<pre><code>lui auipc
jal jalr
beq bne blt bge bltu bgeu
lb lh lw lbu lhu sb sh sw
addi slti sltiu xori ori andi slli srli srai
add sub slt sltu xor or and sll srl sra
ecall ebreak
csrrw csrrs csrrc csrrwi csrrsi csrrci</code></pre>
<p>Some of these instruction names should ring a bell (<code>add</code>,
<code>or</code>, <code>xor</code>). Others will look like they have some
pattern to it. A few weird ones like <code>auipc</code> stand out. These
instructions form the foundation of RISC-V, performing the basic tasks a
processor would do.</p>
<p>You will also catch a glimpse of what creating an operating system on
RISC-V is like, namely handling exceptions and privilege levels.</p>
<p>Let’s get started.</p>
<h2 id="my-first-risc-v-assembly-program">My first RISC-V assembly program</h2>
<p>Throughout this article you will see emulator panes like these:</p>
<p>(If you just see a code block, there’s a JavaScript problem. Make
sure you’ve enabled JavaScript, probably…)</p>
<p>
start:
    addi x10, x0, 0x123
    ebreak
</p>
<p>You can use the buttons to control each emulator. Go ahead and click
on ‘Start’. A register view should pop up showing the state of the
emulator. Now click on ‘Run’. You’ll notice that:</p>
<pre><code>a0 (x10) 0x00000000</code></pre>
<p>Changed into:</p>
<pre><code>a0 (x10) 0x00000123</code></pre>
<p>And the emulator stopped. Congratulations, you’ve run your first
RISC-V assembly program. First here, at least.</p>
<h2 id="emulator-controls">Emulator controls</h2>
<p>‘Start’ assembles your code and, well, starts the emulator. If
there’s a problem with your code, it will tell you about it and the
emulator will not start.</p>
<p>When the emulator is started, you can see the current state of the
registers in the side pane. More controls also becomes available. ‘Run’
runs until the end or until you hit ‘Pause’. ‘Step’ runs a single
step.</p>
<p>If you hit ‘Step’, you’ll notice that the above program takes two
steps to run. You may have guessed correctly that the first step
corresponds to <code>addi</code>, and the second corresponds to
<code>ebreak</code>. The top of the register panel shows
<code>pc</code>, the current instruction address, and in parentheses the
current instruction.</p>
<p>‘Dump’ opens a new window containing some text. There are two
sections: the first is the symbol table, which tells you about the
labels in your code:</p>
<pre><code># Symbols
# 0x40000000 start</code></pre>
<p>The second section is an annotated version of your code:</p>
<pre><code>start:
{ 0x40000000: 12300513 } addi x10, x0, 0x123
{ 0x40000004: 00100073 } ebreak</code></pre>
<p>This tells you that the <code>addi</code> instruction encodes to hex
<code>12300513</code>, and starts at address hex <code>40000000</code>.
Similarly, <code>ebreak</code> encodes as <code>00100073</code> at
address hex <code>40000004</code>.</p>
<p>(Note: RISC-V instructions are <em>little-endian</em>, meaning that
the four bytes of <code>addi</code> are actually
<code>13 05 30 12</code>.)</p>
<p>We’ll talk in detail about all of <code>pc</code>, registers,
instructions, labels, and the two checkboxes later.</p>
<p>Now you may have also guessed that <code>addi x10, x0, 0x123</code>
means <code>x10 = x0 + 0x123</code>. As for <code>ebreak</code>, for
now, just remember that <code>ebreak</code> stops the emulator.</p>
<h2 id="processor-state">Processor state</h2>
<p>The <span id="term-program-counter"><em>program counter</em></span>,
or <span id="term-pc"><em><code>pc</code></em></span> is the address of
the current instruction. It points to the instruction to be
executed.</p>
<p>RV32I has 31 <span id="term-general-purpose-registers"><em>general
purpose registers</em></span> numbered <span id="reg-x1-through-x31"><em><code>x1</code> through
<code>x31</code></em></span>. These can contain any 32-bit data.</p>
<p>(If you’re wondering, there are no flags for RV32I.)</p>
<p>The register <span id="reg-x0"><em><code>x0</code></em></span> is a
special “zero register”. For computational instructions, you can use
<code>x0</code> anywhere a register is expected. Reading it always gives
zero, and writing to it just gets ignored. The use of a special register
simplifies the design of the architecture, and this design is shared by
MIPS and Arm AArch64. We will make good use of <code>x0</code> soon.</p>
<p>(Note: In the emulator, the instruction listed in parenthesis next to
<code>pc</code> in the register view is provided as a convenience and is
not part of the processor state.)</p>
<h2 id="instruction-syntax">Instruction syntax</h2>
<p>But before we can start talking about instructions themselves, we
need a way to talk about the <span id="term-instruction-syntax"><em>instruction syntax</em></span> so I
can, you know, write it down for you.</p>
<p>The syntax of an instruction is the instruction name and then several
comma-separated operands. For example, for this instruction we’ve seen
above:</p>
<pre><code>addi x10, x0, 0x123</code></pre>
<p><code>x10</code> is the <span id="term-destination-register"><em>destination register</em></span> or
<span id="term-rd"><em><code>rd</code></em></span>. The next operand is
the first (and only) <span id="term-source-register"><em>source
register</em></span> or <span id="term-rs1"><em><code>rs1</code></em></span>. The last operand is an
<span id="term-immediate-value"><em>immediate value</em></span> or <span id="term-imm"><em><code>imm</code></em></span>. Using these
abbreviations, we can summarize that the syntax for <code>addi</code>
is:</p>
<pre><code>addi rd, rs1, imm</code></pre>
<p>Some other instructions have a second source register or <span id="term-rs2"><em><code>rs2</code></em></span>. For example, the
non-immediate <code>add</code> instruction has this syntax:</p>
<pre><code>add rd, rs1, rs2</code></pre>
<p>Some other instructions have no operands, like <code>ebreak</code>.
Others have slightly more complex operands.</p>
<h2 id="computational-instructions">Computational instructions</h2>
<p>Using the registers as a playground of numbers, we can use
computational instructions to work with them.</p>
<h2 id="arithmetic-instructions">Arithmetic instructions</h2>
<p>As we’ve seen above, you can get a RISC-V machine to add numbers
together.</p>
<p>The <span id="insn-addi"><em><code>addi</code></em></span>
instruction adds the value in <code>rs1</code> to the immediate value
<code>imm</code>, and puts the result in <code>rd</code>.</p>
<pre><code>addi rd, rs1, imm</code></pre>
<p>The <span id="insn-add"><em><code>add</code></em></span> instruction
adds the value in <code>rs1</code> to the value in <code>rs2</code>, and
puts the result in <code>rd</code>.</p>
<pre><code>add rd, rs1, rs2</code></pre>
<p>The opposite of addition is subtraction. The <span id="insn-sub"><em><code>sub</code></em></span> instruction subtracts the
value in <code>rs2</code> from the value in <code>rs1</code>
(i.e.&nbsp;<code>rs1 - rs2</code>), and puts the result in <code>rd</code>.
There’s no corresponding <code>subi</code> instruction — Just use
<code>addi</code> with a negative number.</p>
<pre><code>sub rd, rs1, rs2</code></pre>
<p>Step through this demo program and try writing your own additions and
subtractions:</p>
<p>
    addi x10, x0, 0x123
    addi x11, x0, 0x555

    addi x12, x10, 0x765
    add x13, x10, x11
    sub x14, x11, x10

    addi x10, x10, 1
    addi x10, x10, 1
    addi x10, x10, -1
    addi x10, x10, -1

    ebreak
</p>
<p>One thing you should note is that the immediate value has a limited
range, namely <code>[-2048, 2047]</code>, the range of a 12-bit two’s
complement signed integer. This limitation is because RV32I uses fixed
32-bit i.e.&nbsp;4-byte instructions, and only the top 12 bits are available
to encode an immediate value. You can see the hexadecimal value encoded
in the instruction from the ‘Dump’. This article will not go into much
further detail about instruction encodings.</p>
<pre><code>{ 0x40000000: 12300513 } addi x10, x0, 0x123
{ 0x40000004: 55500593 } addi x11, x0, 0x555</code></pre>
<p>Even instructions as simple as addition and subtraction have other
interesting uses. We have already used <code>addi x10, x0, 0x123</code>
to put <code>0x123</code> in the register <code>x10</code>. When writing
in assembly, we can use a little shortcut called <span id="term-pseudoinstructions"><em>pseudoinstructions</em></span>. The
<span id="insn-li"><em><code>li</code></em></span> (“load immediate”)
pseudoinstruction is a convenient way to put a small value in a
register. It expands to <code>addi rd, x0, imm</code> when
<code>imm</code> is in the range <code>[-2048, 2047]</code>.</p>
<pre><code>li rd, imm</code></pre>
<p>When <code>imm</code> is <code>0</code>, <code>addi</code> copies the
value without changing it because adding zero is the same as doing
nothing. The <span id="insn-mv"><em><code>mv</code></em></span> (“move”)
pseudoinstruction copies the value from <code>rs1</code> to
<code>rd</code>. It expands to <code>addi rd, rs1, 0</code>.</p>
<pre><code>mv rd, rs1</code></pre>
<p>Using the pseudoinstruction is exactly equivalent to using the “real”
instruction. You can see in the dump that the two are assembled exactly
the same way.</p>
<p>
    addi x10, x0, 0x123
    li x10, 0x123

    addi x11, x10, 0
    mv x11, x10

    ebreak
</p>
<p>Subtracting from zero is negation. What’s the negative of
<code>0x123</code>?</p>
<p>
    li x10, 0x123
    sub x11, x0, x10

    ebreak
</p>
<p>Hmm, we get <code>0xfffffccd</code>. That’s the 32-bit <span id="term-two’s-complement"><em>two’s complement</em></span>
representation of <code>-291</code>, or <code>-0x123</code>. There’s
plenty of tutorials on this out there, so we’ll just note that whenever
something is “signed”, RISC-V uses two’s complement representation. The
benefit of this is that there are fewer instructions for separate signed
and unsigned instructions — both signed and unsigned numbers have the
same overflow wrap-around behavior.</p>
<p>Speaking of overflow wrap-around, what happens if we add something
too much and it overflows? We’ll use <code>add</code> to repeatedly
double <code>0x123</code> and see what happens:</p>
<p>
    li x10, 0x123
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10
    add x10, x10, x10

    ebreak
</p>
<p>As <code>0x123</code> crawls up to the upper bits and eventually we
get to <code>0x9180_0000</code>, in the next iteration it turns into
<code>0x2300_0000</code>. There was an overflow! Doubling of
<code>0x9180_0000</code> gives <code>0x1_2300_0000</code>, but that
needs 33 bits in binary, so the highest bit can’t be put in the result.
Since RISC-V doesn’t have flag bits for carry or overflow, it’s simply
gone. The programmer is expected to deal with this.</p>
<h2 id="bitwise-instructions">Bitwise instructions</h2>
<p>While we’re talking about bits, another thing we can do with bits is
performing bitwise logical operations on them.</p>
<p>The <span id="insn-and"><em><code>and</code></em></span> instruction
performs a bitwise-“and” between the bits of <code>rs1</code> and
<code>rs2</code> and puts the result in <code>rd</code>. The <span id="insn-or"><em><code>or</code></em></span> and <span id="insn-xor"><em><code>xor</code></em></span> instructions similarly
performs bitwise-“or” and bitwise-“xor”, respectively.</p>
<pre><code>and rd, rs1, rs2
or rd, rs1, rs2
xor rd, rs1, rs2</code></pre>
<p>Immediate operand versions of the three, namely <span id="insn-andi"><em><code>andi</code></em></span>, <span id="insn-ori"><em><code>ori</code></em></span>, <span id="insn-xori"><em><code>xori</code></em></span> also exist.</p>
<pre><code>andi rd, rs1, imm
ori rd, rs1, imm
xori rd, rs1, imm</code></pre>
<p>Here are some random bit operation examples you can play with:</p>
<p>
    li x10, 0x5a1
    xori x10, x10, 0xf0
    xori x10, x10, -1

    li x11, 0x5a1
    addi x12, x11, -1
    and x11, x11, x12
    addi x12, x11, -1
    and x11, x11, x12
    addi x12, x11, -1
    and x11, x11, x12

    li x13, 0x5a1
    ori x14, x13, 0xf
    ori x14, x13, 0xff
    ori x14, x13, 0xf0

    ebreak
</p>
<p>Remember that the immediate value is in the range
<code>[-2048, 2047]</code>. For negative values, the two’s complement
representation used means that the high bits are all ones. For example,
using <code>-1</code> as <code>imm</code> means the second operand is
binary all ones, or <code>0xffff_ffff</code>. This allows us to use
<code>xori rd, rs1, -1</code> as bitwise-“not”.</p>
<p>
    li x10, 0x5a1
    xori x11, x10, -1

    or x12, x10, x11
    add x13, x10, x11

    ebreak
</p>
<p>Another interesting operation you can do is to round/<span id="term-align"><em>align</em></span> something up or down to a multiple
of a power of two. For example, if you want to find the closest multiple
of 16 below <code>a</code>, in binary that would be clearing the lowest
4 bits, or <code>a &amp; ~0b1111</code>. Conveniently, that’s
<code>a &amp; -16</code> in two’s complement.</p>
<p>Aligning up is less intuitive, but one idea would be adding 16 first.
However that gives an incorrect result for multiples of 16. It’s easy
enough to fix though: adding one less works exactly right:
<code>(a + 15) &amp; -16</code></p>
<p>
    li x10, 0x123
    andi x11, x10, -16

    addi x12, x10, 15
    andi x12, x12, -16
    ebreak
</p>
<h2 id="comparison-instructions">Comparison instructions</h2>
<p>Usually when you write a comparison of some sort like
<code>a == b</code> or <code>a &gt;= b</code>, it’s used as a condition
for some <code>if</code> or loop, but… those things are complicated!
We’ll get to it later.</p>
<p>Sometimes you just want a boolean value out of a comparison. The C
convention uses 1 for true and 0 for false, and since the world runs on
C now, that’s what RISC-V provides.</p>
<p>In C there are six comparison operators:</p>
<pre><code>== != &lt; &gt; &lt;= &gt;=</code></pre>
<p>The values being compared can also be both signed or both
unsigned.</p>
<p>How many comparison instructions do we have at our disposal? Let’s
see…</p>
<p>The <span id="insn-slt"><em><code>slt</code></em></span> (“set less
than”) instruction compares <code>rs1</code> and <code>rs2</code> as
signed 32-bit integers, and sets <code>rd</code> to <code>1</code> if
<code>rs1 &lt; rs2</code>, and <code>0</code> otherwise
(<code>rs1 &gt;= rs2</code>). The <span id="insn-sltu"><em><code>sltu</code></em></span> instruction is similar
but it treats the operands as unsigned values. <span id="insn-slti"><em><code>slti</code></em></span> and <span id="insn-sltiu"><em><code>sltiu</code></em></span> are similar but the
second operand is an immediate value.</p>
<pre><code>slt rd, rs1, rs2
sltu rd, rs1, rs2
slti rd, rs1, imm
sltiu rd, rs1, imm</code></pre>
<p>(Of particular note is <code>sltiu</code>, where the immediate
operand still has the range <code>[-2048, 2047]</code> but is sign
extended to 32 bits and then treated as an unsigned value, like what
would happen in C with <code>a &lt; (unsigned)-1</code>.)</p>
<p>That’s… one of the six comparisons settled. What about the others? As
it turns out, we can synthesize any of the other five, using up to two
instructions.</p>
<p>Making <code>&gt;</code> from <code>&lt;</code> is easy, as you can
just swap the operands. Using <code>xori</code> with <code>1</code> we
can invert the result of a comparison, giving as <code>&lt;=</code> and
<code>&gt;=</code>.</p>
<p>
    li x10, 0x3
    li x11, 0x5

    slt x12, x10, x11   # x10 &lt; x11
    slt x13, x11, x10   # x10 &gt; x11

    xori x14, x12, 1    # x10 &gt;= x11  i.e.  !(x10 &lt; x11)
    xori x15, x13, 1    # x10 &lt;= x11  i.e.  !(x10 &gt; x11)

    ebreak
</p>
<p>That was signed comparison but unsigned comparison works the same
using <code>sltu</code> instead of <code>slt</code>.</p>
<p>As for <code>==</code> and <code>!=</code>, let’s tackle the easier
case of <code>a == 0</code> and <code>a != 0</code> first. We will use
the fact that for unsigned values, <code>a != 0</code> is equivalent to
<code>a &gt; 0</code>. The negation of that is <code>a &lt;= 0</code>,
which is the same as <code>a &lt; 1</code>.</p>
<p>
    li x10, 0

    sltu x11, x0, x10   # 0 &lt;u x10  i.e.  x10 != 0
    sltiu x12, x10, 1   # x10 &lt;u 1  i.e.  x10 == 0
</p>
<p>As a bonus, this is also how we get logical not and converting
integer to boolean.</p>
<p>Now that we have these, <code>a == b</code> is just
<code>(a - b) == 0</code>, and <code>a != b</code> is just
<code>(a - b) != 0</code>.</p>
<p>
    li x10, 0x3         # a
    li x11, 0x5         # b
    sub x10, x10, x11   # x10 = a - b

    sltu x11, x0, x10   # 0 &lt;u x10  i.e.  x10 != 0
    sltiu x12, x10, 1   # x10 &lt;u 1  i.e.  x10 == 0

    ebreak
</p>
<p>In summary: (<code>[u]</code> means use <code>u</code> for unsigned
comparison and nothing for signed comparison)</p>
<ul>
<li><code>a &lt; b</code>: <code>slt[u]</code></li>
<li><code>a &gt; b</code>: <code>slt[u] reversed</code></li>
<li><code>a &lt;= b</code>: <code>slt[u] reversed ; xori 1</code></li>
<li><code>a &gt;= b</code>: <code>slt[u] ; xori 1</code></li>
<li><code>a == 0</code>: <code>sltu x0</code></li>
<li><code>a != 0</code>: <code>sltiu 1</code></li>
<li><code>a == b</code>: <code>sub ; sltu x0</code></li>
<li><code>a != b</code>: <code>sub ; sltiu 1</code></li>
</ul>
<h2 id="shift-instructions">Shift instructions</h2>
<p>There is no way I can do justice to the usage of bit shifts in the
middle of a tutorial on RISC-V assembly. If you’re here, you’ve probably
heard of them. There’s nothing really special to the way they appear in
usage for RISC-V.</p>
<p>There are two variants for right shifting: <span id="insn-srl"><em><code>srl</code></em></span> and <span id="insn-srli"><em><code>srli</code></em></span> (“shift right logical
(immediate)”) performs “logical” or unsigned right shift where the
leftmost or most significant bits are filled with zeros.</p>
<p><span id="insn-sra"><em><code>sra</code></em></span> and <span id="insn-srai"><em><code>srai</code></em></span> (“shift right
arithmetic (immediate)”) performs “arithmetic” or signed right shift
where the leftmost bits are filled with the same of what highest/sign
bit was. So if you shift a negative value, you get a negative result; if
you shift a non-negative value, you get a non-negative result.</p>
<pre><code>srl rd, rs1, rs2
sra rd, rs1, rs2
srli rd, rs1, imm
srai rd, rs1, imm</code></pre>
<p>As before, the ones with the <code>i</code> suffix take an immediate
value as the second operand, and the ones without <code>i</code> take a
register.</p>
<p>
    li x10, -3
    srai x11, x10, 16
    srli x12, x10, 16
    ebreak
</p>
<p>So <code>a</code> means “arithmetic”, <code>l</code> means “logical”.
Got it.</p>
<p>Left shifts have no such distinction. For consistency they are still
“logical”: <span id="insn-sll"><em><code>sll</code></em></span> is left
shift, and <span id="insn-slli"><em><code>slli</code></em></span> is
left shift with immediate.</p>
<pre><code>sll rd, rs1, rs2
slli rd, rs1, imm</code></pre>
<p>Aha, now we can blow up <code>0x123</code> without repeating myself
so much:</p>
<p>
    li x10, 0x123
    slli x10, x10, 10
    slli x10, x10, 10
    slli x10, x10, 10
    ebreak
</p>
<p>The immediate value for shift instructions are special: they can only
be in the range of 0 to 31, inclusive, because it doesn’t make sense to
shift by a negative amount, or by more than 31. When the shift amount is
taken from a register, the value is considered modulo 32, or in other
words only the last 5 bits are taken into account:</p>
<p>
    li x10, 0x444
    li x11, 0x81

    srl x10, x10, x11   # Same as shifting by 1

    ebreak
</p>
<p>For some fun, let’s try multiplying a value by 10, something you
would do when parsing decimal numbers: <code>a * 10</code> can be
rewritten as <code>(a &lt;&lt; 1) + (a &lt;&lt; 3)</code>:</p>
<p>
    li x10, 0x5

    slli x11, x10, 1
    slli x12, x10, 3
    add x11, x11, x12

    ebreak
</p>
<h2 id="thats-it">That’s it…?</h2>
<p>That’s it?</p>
<p>You may have noticed some glaring omissions. What we’ve learned
doesn’t even cover grade school math: multiplication and division are
missing.</p>
<p>RISC-V is designed with <span id="term-extensions"><em>extensions</em></span> in mind. Remember that
as said in the introduction, RV32I is the barest bones of the barest
bones we’ve got. Forcing everyone to make their processors with
multiplication and division even for tasks that don’t need them would
waste silicon area and money on every chip. Instead those making RISC-V
processors have great freedom to choose, and indeed some would say they
have too much freedom.</p>
<p>For us… Honestly, I’m just glad we’ve been dealt a hand that we can
tackle completely in full. There’s no way I’m finishing writing this
tutorial if RV32I wasn’t so bare boned.</p>
<h2 id="summary-of-computational-instructions">Summary of computational instructions</h2>
<p>(Operand <code>a</code> is <code>rs1</code>, and <code>b</code> is
<code>rs2</code> or immediate. In the instruction name <code>[i]</code>
means an immediate variant is available. Subscript <code>u</code> means
unsigned and <code>s</code> means two’s complement signed.)</p>
<table>
<colgroup>
<col>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Instruction</th>
<th>Operation</th>
<th>Immediate range</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>add[i]</code></td>
<td><code>a + b</code></td>
<td><code>[-2048, 2047]</code></td>
</tr>
<tr>
<td><code>sub</code></td>
<td><code>a - b</code></td>
<td>(n/a)</td>
</tr>
<tr>
<td><code>slt[i]</code></td>
<td><code>(a &lt;<sub>s</sub> b) ? 1 : 0</code></td>
<td><code>[-2048, 2047]</code></td>
</tr>
<tr>
<td><code>slt[i]u</code></td>
<td><code>(a &lt;<sub>u</sub> b) ? 1 : 0</code></td>
<td><code>[-2048, 2047]</code></td>
</tr>
<tr>
<td><code>xor[i]</code></td>
<td><code>a ^ b</code></td>
<td><code>[-2048, 2047]</code></td>
</tr>
<tr>
<td><code>or[i]</code></td>
<td><code>a | b</code></td>
<td><code>[-2048, 2047]</code></td>
</tr>
<tr>
<td><code>and[i]</code></td>
<td><code>a &amp; b</code></td>
<td><code>[-2048, 2047]</code></td>
</tr>
<tr>
<td><code>sll[i]</code></td>
<td><code>a &lt;&lt; b</code></td>
<td><code>[0, 31]</code></td>
</tr>
<tr>
<td><code>srl[i]</code></td>
<td><code>a &gt;&gt;<sub>u</sub> b</code></td>
<td><code>[0, 31]</code></td>
</tr>
<tr>
<td><code>sra[i]</code></td>
<td><code>a &gt;&gt;<sub>s</sub> b</code></td>
<td><code>[0, 31]</code></td>
</tr>
</tbody>
</table>
<h2 id="intermission-larger-numbers">Intermission: Larger numbers</h2>
<p>The <code>addi</code> instruction has limit on the immediate value.
How do we make bigger values?</p>
<p>The <span id="insn-lui"><em><code>lui</code></em></span> (“load upper
immediate”) instruction takes an immediate in the range
<code>[0, 1048575]</code> (i.e.&nbsp;up to <code>2<sup>20</sup> - 1</code>)
and sets <code>rd</code> to that value left shifted 12 bits:</p>
<pre><code>lui rd, imm20</code></pre>
<p>That was… slightly confusing. Why don’t we give it a try:</p>
<p>
    lui x10, 1
    lui x11, 2
    ebreak
</p>
<p>Instead of <code>li</code> loading a “low” immediate, we control the
<em>upper</em> 20 bits of what we put in the register. After that, we
can use another <code>addi</code> instruction to fill in the lower bits.
For example, if we want <code>0x12345</code>:</p>
<p>
    lui x10, 0x12
    addi x10, x10, 0x345
    ebreak
</p>
<p>For convenience, in assembly you can use <span id="rel-%hi()"><em><code>%hi()</code></em></span> and <span id="rel-%lo()"><em><code>%lo()</code></em></span> to extract the, well,
high 20 and low 10 bits of a value. The previous example could also be
written:</p>
<p>
    lui x10, %hi(0x12345)
    addi x10, x10, %lo(0x12345)
    ebreak
</p>
<p>Letting <code>lui</code> handle the high 20 bits, and
<code>addi</code> for the low 12 bits, you can make any 32-bit
value.</p>
<p>(A small complication arises if you want to use values with bit 11
set. In that case, the immediate operand to <code>addi</code> will have
to be negative. However <code>%hi</code> understands this and adds one
to compensate, so this <code>%hi</code>/<code>%lo</code> combination
does work for everything.)</p>
<h2 id="jumps-and-branches">Jumps and branches</h2>
<p>So far, everything that we’ve had so far can be done on even the most
basic programmer’s calculator. To truly make a computer… do computer
stuff, we’d want loops and conditionals.</p>
<p>In RISC-V parlance, a <span id="term-branch"><em>branch</em></span>
is a conditional transfer of control flow, and a <span id="term-jump"><em>jump</em></span> is an unconditional transfer of
control flow.</p>
<p>I think the branch instructions are slightly simpler, so let’s start
with those.</p>
<h2 id="branches">Branches</h2>
<p>All the branch instruction follow the form “If some comparison, go to
somewhere.” The conditions are:</p>
<ul>
<li><span id="insn-beq"><em><code>beq</code></em></span>:
<code>rs1 == rs2</code> (“equal”)</li>
<li><span id="insn-bne"><em><code>bne</code></em></span>:
<code>rs1 != rs2</code> (“not equal”)</li>
<li><span id="insn-blt"><em><code>blt</code></em></span>:
<code>rs1 &lt; rs2</code> signed (“less than”)</li>
<li><span id="insn-bge"><em><code>bge</code></em></span>:
<code>rs1 &gt;= rs2</code> signed (“greater or equal”)</li>
<li><span id="insn-bltu"><em><code>bltu</code></em></span>:
<code>rs1 &lt; rs2</code> signed (“less than unsigned”)</li>
<li><span id="insn-bgeu"><em><code>bgeu</code></em></span>:
<code>rs1 &gt;= rs2</code> signed (“greater or equal unsigned”)</li>
</ul>
<p>(In case you’re wondering about the confusing choice of ordering
operators here, it’s just that the negation of <code>&lt;</code> is
<code>&gt;=</code>.)</p>
<pre><code>beq rs1, rs2, label
bne rs1, rs2, label
blt rs1, rs2, label
bge rs1, rs2, label
bltu rs1, rs2, label
bgeu rs1, rs2, label</code></pre>
<p>Oh, right, almost forgot to explain what labels are. Labels are
convenience identifiers for addresses at some line of your code. They
are some identifier followed by a colon (like <code>this:</code>). They
can appear on a line of its own, or before any instruction on the line.
You can see which address they point to using the “Dump” button. The
third operand of a branch instruction is a label to jump to if the
condition holds.</p>
<p>Let’s add up all the numbers from 1 to 100:</p>
<p>
    li x10, 100         # i = 100
    li x11, 0           # sum = 0

loop:
    add x11, x11, x10   # sum = sum + i
    addi x10, x10, -1   # i = i - 1
    blt x0, x10, loop   # If i &gt; 0: loop again
                        # Otherwise: done

    ebreak
</p>
<p>You can try your hands on making your favorite loops, like fibonacci
numbers or something. Speaking of trying your hands, just so we’re
ready, here’s what an infinite loop looks like. Try pausing or stopping
the loop, and single stepping through the instructions.</p>
<p>
loop:
    addi x10, x10, 1
    add x11, x11, x10
    beq x0, x0, loop
</p>
<p>(If you know a thing or two about JavaScript in the browser, you’ll
know that a real infinite loop in JavaScript makes the whole page
becomes unresponsive, unless it’s in a worker or something. The “Run”
button here just runs the emulator for a certain number of steps,
pausing by giving back control to the event loop in between.)</p>
<p>(This isn’t the preferred way to write an unconditional jump. We’ll
see what is later.)</p>
<p>By the way, there’s no <code>bgt[u]</code> or <code>ble[u]</code>
because you can just swap <code>rs1</code> and <code>rs2</code> to get
those.</p>
<h2 id="jumps">Jumps</h2>
<p>There are two jump instructions in RISC-V. One of them is <span id="insn-jal"><em><code>jal</code></em></span> “jump and link”, which
sets <code>rd</code> to the address of the following instruction, and
then jumps to a label:</p>
<pre><code>jal rd, label</code></pre>
<p>Another is <span id="insn-jalr"><em><code>jalr</code></em></span>
“jump and link register”, which sets <code>rd</code> to the address of
the following instruction, and then jumps to the address at
<code>imm + rs1</code>.</p>
<pre><code>jalr rd, imm(rs1)</code></pre>
<p>(Actually, the address jumped to is
<code>(imm + rs1) &amp; ~1</code>, i.e.&nbsp;the least significant bit is
cleared. This distinction won’t come up in normal code, like, pretty
much ever.)</p>
<p>Eesh, that’s some funky looking syntax. When you see parentheses like
this, it has something to do with an <em>address</em>. Parens means
address.</p>
<p>That’s… still a lot going on. Let’s take on some simpler cases first:
If <code>rd</code> is <code>x0</code> then the only thing these
instructions do is jumping. We can use it instead of the branch
instructions for an unconditional jump.</p>
<p>
loop:
    # Yes this is an infinite loop.
    # You can see that we execute
    # this one instruction over and over
    jal x0, loop
</p>
<p>For convenience, a pseudoinstruction is available for you: <span id="insn-j"><em><code>j</code></em></span> (“jump”) is for
<code>jal</code> with <code>rd</code> being <code>x0</code>:</p>
<pre><code>j label</code></pre>
<p>As for why you would want to do this… Well, we only have 32 bits per
instruction, and since the <code>jal</code> instruction only needs one
register number instead of the branch instructions’ two, and it doesn’t
need a condition, the instruction encoding permits jumping over a longer
range. So this is always preferred over something like
<code>beq x0, x0, label</code> for a jump.</p>
<p>As for <code>jalr</code>, you can jump to an address that’s stored in
a register. In C, that would be dealing with function pointers. You’d
need this any time dynamic dispatch is needed. For example, we load the
address of <code>foo</code> into a register first before jumping to
it.</p>
<p>
    lui x10, %hi(foo)
    addi x10, x10, %lo(foo)
    jalr x0, 0(x10)

    # This isn't executed
    li x12, 1
    ebreak

foo:
    # This is executed
    li x12, 2
    ebreak
</p>
<p>In case you forgot by now, the <code>lui</code>/<code>addi</code>
combo at the start puts the address of the label <code>foo</code> in
register <code>x10</code>.</p>
<p>Similar to <code>j</code>, <span id="insn-jr"><em><code>jr</code></em></span> (“jump register”) is a
psuedoinstruction for <code>jalr</code> with <code>rd</code> being
<code>x0</code> and <code>imm</code> being <code>0</code>:</p>
<pre><code>jr rs1</code></pre>
<p>Hmmm… If I didn’t really need the address in <code>x10</code>, that
<code>addi</code> would be unnecessary, since <code>jalr</code> has the
ability to add a low immediate on its own:</p>
<p>
    lui x10, %hi(foo)
    jalr x0, %lo(foo)(x10)

    # This isn't executed
    li x12, 1
    ebreak

foo:
    # This is executed
    li x12, 2
    ebreak
</p>
<p>What’s the advantage of this over <code>jal x0</code>? Since
<code>%hi</code> and <code>%lo</code> can represent any 32-bit value,
this two-instruction combo can jump to any address, free from range
restrictions. You do need a free scratch register for the high part of
the address though, but since RISC-V gives you 31 of them, this
shouldn’t be too much of a problem.</p>
<h2 id="jump-and-link">Jump and link</h2>
<p>What’s the deal with the destination register then? What do you need
the address of the next instruction for? For jumping <em>back</em> of
course. We can use this functionality to call functions and return
back.</p>
<p>
    li x10, 1
    jal x1, double  # Call double
    jal x1, double  # Call double
    ebreak

    # Double the value in x10
double:
    add x10, x10, x10
    jr x1           # Return
</p>
<p>Note that I used the register <code>x1</code> for this, which is the
register for providing the return address by convention. For
convenience, if the destination register is omitted in <code>jal</code>,
it defaults to <code>x1</code>. Meanwhile, <span id="insn-ret"><em><code>ret</code></em></span> (“return”) is a
pseudoinstruction that stands for <code>jr x1</code>,
i.e.&nbsp;<code>jalr x0, 0(x1)</code>:</p>
<pre><code>jal label
ret</code></pre>
<p>So the example above can be rewritten more conveniently as:</p>
<p>
    li x10, 1
    jal foo
    jal foo
    ebreak

foo:
    add x10, x10, x10
    ret
</p>
<h2 id="memory">Memory</h2>
<p>That’s a nice computer we have here. Now we have… all of 31 × 4 = 124
bytes of storage in the form of registers to work with. I want more…</p>
<h2 id="basic-memory-accesses">Basic memory accesses</h2>
<p>The emulator has 1 MiB of memory starting at address
<code>0x4000_0000</code>. That’s <code>0x4000_0000</code> to
<code>0x400f_ffff</code>, inclusive. The assembler starts assembling at
the beginning of memory, as you can see in the dump, starting at address
<code>0x4000_0000</code>.</p>
<p>The <span id="dir-.word"><em><code>.word</code></em></span> <span id="term-directive"><em>directive</em></span> straight up puts a
4-byte/32-bit word into the current position. You can specify multiple
values separated by commas.</p>
<pre><code>.word value [ , value [ , ...  ] ]</code></pre>
<p>The <span id="insn-lw"><em><code>lw</code></em></span> (“load word”)
instruction loads a word from the address <code>rs1 + imm</code> and
puts it in <code>rd</code>, in other words it reads the word from
memory:</p>
<pre><code>lw rd, imm(rs1)</code></pre>
<p>As with <code>jalr</code>, you can combine it with <code>lui</code>
to access any address.</p>
<p>
    lui x10, %hi(foo)
    lw x11, %lo(foo)(x10)
    ebreak

foo:
    # Get it? foo, f00 ...
    .word 0xf00
</p>
<p>The <span id="insn-sw"><em><code>sw</code></em></span> (“store word”)
instruction stores <code>rs2</code> to a word in memory at address
<code>rs2 + imm</code>, in other words it writes the word to memory:</p>
<pre><code>sw rs2, imm(rs1)</code></pre>
<p>
    lui x10, %hi(foo)
    lw x11, %lo(foo)(x10)

    li x12, 0x123
    sw x12, %lo(foo)(x10)

    # Now it's changed
    lw x13, %lo(foo)(x10)
    ebreak

foo:
    .word 0xf00
</p>
<p>Just to make absolutely sure we’re clear on this, <span id="term-load"><em>load</em></span> means reading from memory, <span id="term-store"><em>store</em></span> means writing to memory. Both
words can be nouns and verbs. Also, a <span id="term-word"><em>word</em></span> is 32-bit for RISC-V.</p>
<p>Let’s have some fun. Can we have the program read itself?</p>
<p>
here:
    lui x10, %hi(here)
    lw x10, %lo(here)(x10)
    ebreak
</p>
<p>Ohh that’s fun. Does this mean I can also write programs with just
<code>.word</code>?</p>
<p>
    .word 0x40000537 # lui x10, %hi(here)
    .word 0x00052503 # lw x10, %lo(here)(x10)
    .word 0x00100073 # ebreak
</p>
<p>Oh that’s nice. Just a peek into the world of machine code and
instruction encodings… which we will not be getting into.</p>
<p>With memory accesses under our belt, we can address a lot more data
easily. Here’s an example where we find the sum of all the values in an
array. Note how we can access different addresses of memory, whereas
there is no way to address a register by a number in another
register.</p>
<p>
    lui x10, %hi(array)
    addi x10, x10, %lo(array)

    li x11, 8   # length

    # Get end address
    slli x11, x11, 2
    add x11, x11, x10

    li x12, 0 # sum

loop:
    # If current == end, done
    beq x10, x11, end
    lw x13, 0(x10)      # Load from array
    add x12, x12, x13   # Add to sum
    addi x10, x10, 4    # Bump current pointer
    j loop

end:
    ebreak


array:
    .word 13, 24, 6, 7, 8, 19, 0, 4
</p>
<p>The equivalent in C would be something like</p>
<pre><code>uint32_t array[], length;

uint32_t *current = array;
uint32_t *end = array + length;
uint32_t sum = 0;

for (; current != end; current ++) {
    sum += *current;
}</code></pre>
<p>Note how adding one to a pointer to word bumps the address by 4,
because the addresses are all byte addresses, and one word is four
bytes. In C, the compiler handles the multiplier for you, but in
assembly you have to remember to do it manually.</p>
<!-- TODO: I need some memory dump thing to make useful examples of `sw` -->
<h2 id="smaller-widths">Smaller widths</h2>
<p>Not everything in memory is word sized. You’ve already seen an array,
which is multiple-word-sized. There are also stuff smaller than
word-sized.</p>
<p>An obvious one is the <span id="term-byte"><em>byte</em></span>,
which is, well, 1-byte/8-bit and written <code>[u]int8_t</code> in C. In
the middle is the <span id="term-halfword"><em>halfword</em></span>,
which is 2-byte/16-bit and written <code>[u]int16_t</code> in C. You can
use the directives <span id="dir-.byte"><em><code>.byte</code></em></span> and <span id="dir-.half"><em><code>.half</code></em></span> respectively for those
data types.</p>
<pre><code>.byte value [ , value [ , ...  ] ]
.half value [ , value [ , ...  ] ]</code></pre>
<p>And just in case you don’t remember those, <span id="dir-.2byte"><em><code>.2byte</code></em></span> means the same as
<code>.half</code>, and <span id="dir-.4byte"><em><code>.4byte</code></em></span> means the same as
<code>.word</code>.</p>
<pre><code>.2byte value [ , value [ , ...  ] ] # Same as .half
.4byte value [ , value [ , ...  ] ] # Same as .word</code></pre>
<p>There’s a small problem with loading smaller-than-word sized values
into word-sized registers: What do you do with the rest of the bits?
Obviously the lowest of the bits gets the actual value loaded. There are
two most useful ways to fill the upper bits:</p>
<ul>
<li><span id="term-zero-extension"><em>zero extension</em></span>: The
higher bits are filled with zeros</li>
<li><span id="term-sign-extension"><em>sign extension</em></span>: The
higher bits are filled with copies of the highest bit of the original
value</li>
</ul>
<p>Zero extension is easy enough. As the name suggests, sign extension
has something to do with signed values. It’s what happens when you
convert a narrower signed value into a wider one.</p>
<p>(Keeping the rest of the bits unchanged isn’t a good option. It
complicates the implementation for processor, especially of modern high
performance design, to just write parts of a register. It would be
easiest if the new value didn’t depend on the old value.)</p>
<p>For example, the signed byte value <code>-100</code> is
<code>0x9c</code>. Since the highest bit i.e. the sign bit of it is
<code>1</code>, when we expand it into 32 bits we fill the high 24 bits
with one so the new value, <code>0xffff_ff9c</code> still represents
<code>-100</code>. This is sign extension.</p>
<p>If we want to convert the unsigned byte value <code>156</code>, still
<code>0x9c</code>, into an unsigned word, it would have to be
<code>0x0000_009c</code> to preserve its value.</p>
<p>For bytes, the <span id="insn-lb"><em><code>lb</code></em></span>
(“load byte”) instruction loads a byte and sign extends the result, and
the <span id="insn-lbu"><em><code>lbu</code></em></span> (“load byte
unsigned”) instruction does the same but zero extends the result. As
with <code>lw</code>, the address is <code>rs1 + imm</code>.</p>
<pre><code>lb rd, imm(rs1)
lbu rd, imm(rs1)</code></pre>
<p>Similarly for <span id="insn-lh"><em><code>lh</code></em></span>
(“load half”) and <span id="insn-lhu"><em><code>lhu</code></em></span>
(“load half unsigned”), just for unsigned halfwords (two bytes each,
remember):</p>
<pre><code>lh rd, imm(rs1)
lhu rd, imm(rs1)</code></pre>
<p>We can try out the sign extension and zero extension example from
earlier.</p>
<p>
    # Signed
    li x10, -100
    lui x11, %hi(test)
    lb x11, %lo(test)(x11)

    # Unsigned
    li x12, 156
    lui x13, %hi(test)
    lbu x13, %lo(test)(x13)

    ebreak

test:
    .byte 0x9c
</p>
<p>Correspondingly, the <span id="insn-sb"><em><code>sb</code></em></span> (“store byte”) and <span id="insn-sh"><em><code>sh</code></em></span> (“store half”) do the
opposite of <code>lb</code> and <code>lh</code>, storing bytes and
halfwords to memory. Instead of widening small values to register size,
these take the lowest order bits from <code>rs1</code> and stores it to
memory. (There’s no <code>sbu</code> and <code>shu</code> because stores
are narrowing instead of widening operations.)</p>
<pre><code>sb rs2, imm(rs1)
sh rs2, imm(rs1)</code></pre>
<p>While we’re at it, here’s two more minor details. Firstly, <span id="term-endianness"><em>endianness</em></span>. While theoretically big
endian RISC-V machines can exist, I’ve never seen one… and this emulator
is little endian, meaning that the four bytes in a word are laid out in
memory lowest first. So, <code>.byte 0x1, 0x2, 0x3, 0x4</code> would be
the same as <code>.word 0x04030201</code>.</p>
<p>
    lui x10, %hi(test)
    lw x10, %lo(test)(x10)
    ebreak

test:
    .byte 0x1, 0x2, 0x3, 0x4
</p>
<p>Secondly, memory accesses should be <span id="term-aligned"><em>aligned</em></span> for maximum efficiency. This
means that the address for a halfword/2byte should be a multiple of two,
and the address for a word/4byte should be a multiple of four.
Misaligned accesses (meaning, well, when the address is not aligned) may
not work as expected.</p>
<p>For user programs running on a rich operating systems, misaligned
accesses are supported but may be slow. In embedded application running
on microcontrollers and such, it might not work at all.</p>
<p>This emulator supports misaligned memory accesses.</p>
<p>
    lui x10, %hi(test)
    addi x10, x10, %lo(test)

    lw x11, 0(x10)
    lw x12, 1(x10)
    lw x13, 3(x10)

test:
    .byte 1, 2, 3, 4, 5, 6, 7, 8
</p>
<p>Now you can try translating some basic C code into RISC-V assembly.
Functions are… still out of the question for now. Variables have to be
either global or put in registers. What else are we missing…</p>
<h2 id="memory-mapped-io">Memory-mapped I/O</h2>
<p>Is it Hello World time? I think it’s Hello World time…</p>
<p>For a computer to not just be a space heater, we need some way for it
to at least generate output and take input. While other architectures
may have dedicated I/O instructions, RISC-V uses <span id="term-memory-mapped-i/o"><em>memory mapped I/O</em></span>.
Essentially, this means that loads and stores to special addresses
communicate with other <span id="term-devices"><em>devices</em></span>.
They do not work like normal memory, and you should only use the
supported widths to access them.</p>
<p>One output device we have here is at address
<code>0x1000_0000</code>. Any 32-bit writes to it appends the lowest 8
bits as a byte to the text in the output pane. In other words, a
<code>sw</code> to that address writes a byte of output.</p>
<p>(The output pane uses UTF-8 encoding.)</p>
<!-- TODO: Uhh... Make the assembler support character and string literals? -->
<p>
    lui x11, %hi(0x10000000)
    li x10, 0x48 # 'H'
    sw x10, 0(x11)
    li x10, 0x69 # 'i'
    sw x10, 0(x11)
    li x10, 0x21 # '!'
    sw x10, 0(x11)
    li x10, 0x0a # '\n'
    sw x10, 0(x11)
    ebreak
</p>
<p>Eh, close enough to greeting the entire world. We could refactor it a
bit to use a loop, or whatever… Now that we think about it, how about
going one step further and organize our code into some functions?</p>
<h2 id="functions">Functions</h2>
<p>We already know how to call a function and return back. Namely,
<code>jal</code> calls a function, and <code>ret</code> returns. Usually
functions take arguments, uses local variables, and returns results.
Since there’s no real difference between the 31 general purpose
registers, on account of them being, well, general purpose, we could
just use any of them as we wish. Usually though, there are some standard
conventions to follow</p>
<h2 id="register-aliases-and-calling-conventions">Register aliases and calling conventions</h2>
<p>This whole time you probably have noticed that registers are listed
with two names each, and indeed both work identically in assembly.</p>
<p>
    li x10, 1
    li a0, 1
    ebreak
</p>
<p>These <span id="term-register-aliases"><em>register
aliases</em></span> are named after their uses:</p>
<ul>
<li><span id="regalias-s0-through-s11"><em><code>s0</code> through
<code>s11</code></em></span> are <em>saved</em> registers</li>
<li><span id="regalias-t0-through-t6"><em><code>t0</code> through
<code>t6</code></em></span> are <em>temporary</em> registers</li>
<li><span id="regalias-a0-through-a7"><em><code>a0</code> through
<code>a7</code></em></span> are <em>argument</em> registers</li>
<li><span id="regalias-zero"><em><code>zero</code></em></span> is the,
well, zero register</li>
<li><span id="regalias-ra"><em><code>ra</code></em></span> is for the
return address, by convention, as we’ve seen</li>
<li><span id="regalias-sp"><em><code>sp</code></em></span> … we’ll talk
about <code>sp</code> later</li>
<li>(The use of <span id="regalias-tp"><em><code>tp</code></em></span>
and <span id="regalias-gp"><em><code>gp</code></em></span> is out of the
scope of this document.)</li>
</ul>
<p>(Yeah it’s… all placed in a weird order. The reason is out of the
scope of this tutorial.)</p>
<p>When you call a function, you put up to eight arguments in the… well,
argument registers, in the order <code>a0</code>, <code>a1</code>, …,
<code>a7</code>. After that you use <code>jal</code> or something, which
puts the return address in <code>ra</code>, and jumps to the
function.</p>
<p>Inside, the function, if it wishes to use the <span id="term-call-saved"><em>call-saved</em></span> registers
<code>s0</code> through <code>s11</code>, it must save their values at
the start of the function, and restore them before returning. The non
call-saved registers <code>a0</code> through <code>a7</code>,
<code>t0</code> through <code>t6</code> and <code>ra</code> may be
modified without restoring their values.</p>
<p>When the called function is done, it would, as mentioned, restore any
used call-saved registers, and jump back to the return address, resuming
the calling code.</p>
<p>Here’s a basic-ish example:</p>
<pre><code>int memcmp(const void *a, const void *b, size_t n)</code></pre>
<p>The parameter <code>a</code> is passed in <code>a0</code>,
<code>b</code> is passed in <code>a1</code>, and <code>n</code> is
passed in <code>a2</code>. The return value will be in <code>a0</code>.
Here’s an implementation and test run:</p>
<p>
    # memcmp(test1, test2, 4)

    lui a0, %hi(test1)
    addi a0, a0, %lo(test1)
    lui a1, %hi(test2)
    addi a1, a1, %lo(test2)
    li a2, 4
    jal memcmp
    ebreak

    # int memcmp(const void *a, const void *b, size_t n);
memcmp:
    add a3, a0, a2 # a3 = a + n
    li t0, 0

memcmp_loop:
    beq a0, a3, memcmp_done # No more bytes

    lb t0, 0(a0)
    lb t1, 0(a1)
    sub t0, t0, t1  # t0 = *a - *b

    bne t0, zero, memcmp_done # If different, done

    addi a0, a0, 1  # a ++
    addi a1, a1, 1  # b ++

    j memcmp_loop

memcmp_done:
    mv a0, t0
    ret

test1:
    .byte 1, 2, 3, 4
test2:
    .byte 1, 2, 2, 4
</p>
<p>Here’s a slightly better-organized “Hello World”, using a
<code>puts</code> function:</p>
<p>
    lui a0, %hi(msg)
    addi a0, a0, %lo(msg)
    jal puts
    ebreak

    # void puts(const char *);
puts:
    lui t1, %hi(0x10000000)
puts_loop:
    lb t0, 0(a0)
    beq t0, zero, puts_done
    sw t0, 0(t1)
    addi a0, a0, 1
    j puts_loop

puts_done:
    ret

msg:
    .byte 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77
    .byte 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x0a, 0x00
</p>
<h2 id="the-stack">The stack</h2>
<p>Although we can write some very basic functions now, there are still
a few problems:</p>
<ul>
<li>You can’t call a function within another function because if you do
so <code>ra</code> would be overwritten, and then you can’t return back
from the outer function anymore.</li>
<li>We still don’t know how “saving” registers work.</li>
</ul>
<p>Clearly, both would require using memory somehow. We can feed two
birds with one scone by using memory in a structured way: The <span id="term-stack"><em>stack</em></span>.</p>
<p>Unlike some other architectures, the <code>sp</code> register is not
really special in any way. But just like how we can designate how
<code>a0</code> is used, we can have some conventions about how
<code>sp</code> is supposed to be used:</p>
<ul>
<li>The register is call-saved, which means that when you return from a
function, <code>sp</code> needs to have the same value as when the
function was entered</li>
<li><code>sp</code> <em>always</em> points to somewhere in an area of
memory called the “stack”, and it is <em>always</em> 16-byte
aligned.</li>
</ul>
<p>And, for the stack itself:</p>
<ul>
<li>On RISC-V, the stack grows to lower addresses, meaning that the
memory where <code>address &gt;= sp</code> are “in the stack”, and
<code>address &lt; sp</code> are free space that the stack can grow
into.</li>
<li>Code can allocate space on the stack by decrementing
<code>sp</code>, and deallocate space by incrementing <code>sp</code>.
Of course, allocations and deallocations must be balanced properly.</li>
<li>You can only freely use space that you have allocated.</li>
</ul>
<p>An example is in order. Let’s say you have a function
<code>foo</code> which just calls <code>bar</code> twice.</p>
<pre><code>void foo() {
    bar();
    bar();
}</code></pre>
<p>Inside <code>foo</code>, it would need to save the initial
<code>ra</code>, so it can return back later. Even though
<code>ra</code> takes only 4 bytes, <code>sp</code> needs to be 16-byte
aligned at all times, so we round that up to 16 bytes. Decrementing
<code>sp</code> by 16 we allocate the space:</p>
<pre><code>foo:
    addi sp, sp, -16</code></pre>
<p>Now, in addition to all of the non call-saved registers, we have 16
bytes of scratch space at <code>sp</code> through <code>sp + 15</code>.
We can backup the value of <code>ra</code> here</p>
<pre><code>    ...
    sw ra, 0(sp)</code></pre>
<p>Then we just call <code>bar</code> twice, which overwrites
<code>ra</code>:</p>
<pre><code>    ...
    jal bar
    jal bar</code></pre>
<p>At the end of the function, we just need to get back the return
address, deallocate the stack space, and return. Although using any
register would suffice for the return address, since it is the backed up
value of <code>ra</code> after all, we load it back to
<code>ra</code>.</p>
<pre><code>    ...
    lw ra, 0(sp)
    addi sp, sp, 16
    ret</code></pre>
<p>In a similar way you can save and restore the <code>s</code>
(remember, call-saved) registers. Usually, the most convenient way to
manage this is to put values that need to be preserved across inner
function calls in the <code>s</code> registers, and then add code at the
beginning to save them, and add code at the end to restore them.</p>
<p>Obligatory recursive Fibonacci time!</p>
<p>
    li a0, 10
    jal fib
    ebreak

fib:
    li t0, 2

    # If n &lt; 2, then return n
    bge a0, t0, fib_large
    ret

fib_large:
    # Otherwise, n &gt;= 2

    # Save stuff to stack
    addi sp, sp, -16
    sw ra, 0(sp)
    sw s0, 4(sp)
    sw s1, 8(sp)

    mv s0, a0       # s0 = n
    addi a0, a0, -1 # a0 = n - 1

    jal fib
    mv s1, a0       # s1 = fib(n - 1)

    addi a0, s0, -2
    jal fib         # fib(n - 2)

    add a0, a0, s1

    # Restore stuff from stack and return
    lw ra, 0(sp)
    lw s0, 4(sp)
    lw s1, 8(sp)
    addi sp, sp, 16
    ret
</p>
<p>The algorithm should be fairly straightforward:</p>
<pre><code>fibonacci(n) {
    if (n &lt; 2) { return n; }
    else { return fib(n - 1) + fib(n - 2); }
}</code></pre>
<p>What’s worth noting here is the fairly symmetric pattern of saving
registers at the start:</p>
<pre><code>    addi sp, sp, -16
    sw ra, 0(sp)
    sw s0, 4(sp)
    sw s1, 8(sp)</code></pre>
<p>And restoring them at the end:</p>
<pre><code>    lw ra, 0(sp)
    lw s0, 4(sp)
    lw s1, 8(sp)
    addi sp, sp, 16
    ret</code></pre>
<p>A little thing to also note that the <code>s</code> registers are
only saved in the more complex branch, where as the simpler branch just
returns directly. This is also acceptable from a calling convention
perspective.</p>
<p>(Note: In the emulator, the <code>sp</code> register is initialized
to an address that would be convenient for you for use as a stack, as a,
well, convenience.)</p>
<h2 id="intermission-numeric-labels">Intermission: Numeric labels</h2>
<p>Let’s go back to this example:</p>
<pre><code>    # void puts(const char *);
puts:
    lui t1, %hi(0x10000000)
puts_loop:
    lb t0, 0(a0)
    beq t0, zero, puts_done
    sw t0, 0(t1)
    addi a0, a0, 1
    j puts_loop

puts_done:
    ret</code></pre>
<p>Having to name things like <code>puts_loop</code>,
<code>puts_done</code> is a bit annoying. There’s a shorter way: <span id="term-numeric-labels"><em>numeric labels</em></span>.</p>
<p>A numeric label is one with a name of a decimal number. To refer to a
numeric label, use the number and a <code>f</code> suffix for “forward”,
and <code>b</code> for “backward”, and it will correspond to the nearest
numeric label with that number, searching forwards or backwards,
respectively.</p>
<p>So, the <code>puts</code> example from earlier can be rewritten:</p>
<pre><code>    # void puts(const char *);
puts:
    lui t1, %hi(0x10000000)
1:
    lb t0, 0(a0)
    beq t0, zero, 2f
    sw t0, 0(t1)
    addi a0, a0, 1
    j 1b

2:
    ret</code></pre>
<p>Yeah I don’t really like this syntax either, but it is what we’ve
got.</p>
<h2 id="position-independence">Position independence</h2>
<p>Remember that oddball instruction I mentioned way back,
<code>auipc</code>?</p>
<p>I don’t know about your experience, but the first time I saw RISC-V
disassembly, this is the one instruction that caught my eye. And this
memory has stuck with me ever since. It’s a rather common occurrence in
real RISC-V programs, and somehow I’ve been hiding it from you this
whole time. If you take a sneak peek at the next section’s title, you’ll
see how far we’ve come without <code>auipc</code>.</p>
<p>So what does it do?</p>
<p>The <span id="insn-auipc"><em><code>auipc</code></em></span> (“add
upper immediate to pc”) instruction is very similar to <code>lui</code>.
Instead of setting <code>rd</code> to <code>imm20 &lt;&lt; 12</code>, it
sets it to <code>pc + (imm20 &lt;&lt; 12)</code>, where <code>pc</code>
is the address of the <code>auipc</code> instruction itself.</p>
<pre><code>auipc rd, imm20</code></pre>
<p>It works very similarly to <code>lui</code>. You can think of them as
a pair: the “base” of <code>lui</code> is <code>0</code>, whereas the
“base” of <code>auipc</code> is the address of the <code>auipc</code>
instruction. So this code:</p>
<pre><code>start:
    auipc a0, 3
    addi a0, a0, 4</code></pre>
<p>Gives you <code>0x3004</code>, whereas this:</p>
<pre><code>start:
    auipc a0, 3
    addi a0, a0, 4</code></pre>
<p>Gives you <code>start + 0x3004</code>.</p>
<p>Why would you need this? On modern systems, it’s often desirable to
have machine code that can be moved around in address space. For
example, a shared library i.e.&nbsp;dynamically linked library can be loaded
into any program, at any address. It would be helpful if the machine
code does not need to be patched every time. This is called <span id="term-position-independent-code"><em>position independent
code</em></span> (<span id="term-pic"><em>PIC</em></span>).</p>
<p>Some instructions already exhibit position independence. For example,
as mentioned earlier when we talked about using <code>lui</code> and
<code>jalr</code> as a pair, the branch instructions and
<code>jal</code> are encoded, as with all RV32I instructions, into
32-bit instruction words, so they can’t possibly be able to encode every
possible address. Instead, the jump destination is <code>pc</code> plus
some offset (<code>pc</code> being, as before, the jump/branch
instruction itself), and the offset itself is encoded.</p>
<p>You can see these are three different instructions that jump to
itself. Since the offset is <code>0</code> in each case, the encoding is
the same. Use the “Dump” button to see for yourself.</p>
<p>
    ebreak

test1:
    j test1

test2:
    j test2

test3:
    j test3
</p>
<p>The <code>auipc</code> instruction allows for very flexible position
independence. You can make arbitrary calculations based on the address
at which code is located. The immediate-bit operand mirroring
<code>lui</code> means that it is well suited for two-instruction pairs,
just like <code>lui</code>. These kind of “<code>pc</code> plus
something” calculations are known as <span id="term-pc-relative-addressing"><em>pc-relative
addressing</em></span>.</p>
<p>The syntax for getting the assembler to generate the immediate values
for pc-relative addressing a bit arcane but hear me out:</p>
<p>
1:
    auipc a0, %pcrel_hi(foo)
    addi a0, a0, %pcrel_lo(1b)
    ebreak

foo:
    .word 0x12345
</p>
<p>Like <code>%hi()</code> and <code>%lo()</code>, <span id="rel-%pcrel_hi()"><em><code>%pcrel_hi()</code></em></span> and <span id="rel-%pcrel_lo()"><em><code>%pcrel_lo()</code></em></span> gives you
the immediate values needed for pc-relative addressing. You pass the
label you want to address to <code>%pcrel_hi()</code>, but pass a label
to <em>the <code>auipc</code> instruction</em> to
<code>%pcrel_lo()</code>.</p>
<p>Unlike <code>%lo()</code>, We need the address of the
<code>auipc</code> instruction itself to calculate the immediate value,
and this is why you need to pass a label to it. You don’t need to write
<code>foo</code> again, since the assembler will look at the
<code>auipc</code> instruction and see it’s supposed to be for
<code>foo</code>.</p>
<p>If you hate writing that, you can also use the convenience
pseudoinstruction <span id="insn-la"><em><code>la</code></em></span>:</p>
<pre><code>la rd, label</code></pre>
<p>Just like a <code>lui</code> + <code>jalr</code> pair, an
<code>auipc</code> + <code>jalr</code> can be used to jump to somewhere
farther away than one <code>jal</code> can reach in position-independent
code.</p>
<p>One very common case is to call a function that might not be within
reach of <code>jal</code>. You can use the pseudoinstruction <span id="insn-call"><em><code>call</code></em></span> for that.</p>
<pre><code>call label</code></pre>
<p>This expands to:</p>
<pre><code>1:
    auipc ra, %pcrel_hi(label)
    jalr ra, %pcrel_lo(1b)(ra)</code></pre>
<p>Notice how <code>ra</code> is used as a temporary register to store
the intermediate result, which is immediately overwritten by
<code>jalr</code>.</p>
<p>In fact, there really isn’t any reason to prefer <code>lui</code>
over <code>auipc</code> when using a label. This is why you if you
disassemble a real RISC-V program, you see it everywhere, even in
non-position-independent code.</p>
<p>Now would be a good time to take a break, since we’re ready to head
into…</p>
<h2 id="privileged-architecture-fundamentals">Privileged architecture fundamentals</h2>
<p>We’re going to write an <em>extremely</em> bare bones operating
system.</p>
<h2 id="privilege-levels">Privilege levels</h2>
<p>One of the tasks an operating system performs is to control what
programs can and cannot do. On RISC-V, the most basic of this control is
implemented using <span id="term-privilege-levels"><em>privilege
levels</em></span>. RISC-V defines… let’s just say, several privilege
levels, but we’re only going to use two here:</p>
<ul>
<li>“<span id="term-machine"><em>Machine</em></span>”, number 3</li>
<li>“<span id="term-user"><em>User</em></span>”, number 0</li>
</ul>
<p>The lower the privilege level number goes, the less privileged that
level is. Higher privilege levels treat lower privilege levels as
generally completely unreliable and untrusted, and must isolate
themselves from adversarial software and failures of lower privilege
levels.</p>
<p>(However, we won’t be talking about all of the features that make
this full isolation possible, and the emulator you’ve been seeing does
not have enough features for that anyway. Therefore, the operating
system we’ll be building will leave itself unprotected in various
ways.)</p>
<p>The privilege levels are sometimes called “<span id="term-modes"><em>modes</em></span>” for short. And, if that’s not
short enough, we can shorten the level names themselves, ending up with
<span id="term-m-mode"><em>M-mode</em></span> and <span id="term-u-mode"><em>U-mode</em></span>. All of the ways to refer to
these privilege levels are interchangable.</p>
<p>When a RISC-V machine starts (This is known as “<span id="term-reset"><em>reset</em></span>”), it begins execution in Machine
mode. On a typical “embedded” system where only Machine mode and User
mode are implemented, execution begins in the initialization code read
from flash memory. This code can either perform what needs to be done
itself, or it can be an operating system that manages some tasks, each
executing in User mode.</p>
<p>The former design is used for simpler programs, and is analogous to
the programs we’ve seen and run so far. The latter is more complicated.
We’ll see the basics of how to achieve that soon.</p>
<h2 id="control-and-status-registers-csrs">Control and status registers (CSRs)</h2>
<p>The <span id="term-control-and-status-registers"><em>control and
status registers</em></span> (<span id="term-csrs"><em>CSRs</em></span>)
deal with various features that are in some sense “special”. No I don’t
have a better explanation of what “special” means.</p>
<p>Six instructions are available for manipulating CSRs.</p>
<pre><code>csrrw rd, csr, rs1
csrrs rd, csr, rs1
csrrc rd, csr, rs1
csrrwi rd, csr, uimm5
csrrsi rd, csr, uimm5
csrrci rd, csr, uimm5</code></pre>
<p>To refer to a CSR in these instructions, use its name in assembly
code. We’ll get to those in a bit.</p>
<p>The pattern works like this. Each of the instructions
<em>atomically</em> reads the old value of the CSR, and writes the new
value based on some operation performed on the old value and the last
operand. The possible operations are:</p>
<ul>
<li><span id="insn-csrrw"><em><code>csrrw</code></em></span> (“CSR read
write”): <code>{ csr = rs1; rd = csr_old; }</code></li>
<li><span id="insn-csrrs"><em><code>csrrs</code></em></span> (“CSR read
set”): <code>{ csr = csr | rs1; rd = csr_old; }</code></li>
<li><span id="insn-csrrc"><em><code>csrrc</code></em></span> (“CSR read
clear”): <code>{ csr = csr &amp; ~rs1; rd = csr_old; }</code></li>
</ul>
<p>Where <code>&amp;</code>, <code>|</code>, <code>~</code> are bitwise
“and”, “or”, “not” respectively.</p>
<p>Specifically, note that <code>rd</code> and <code>rs1</code> can be
the same. For example, this instruction swaps the value in
<code>a0</code> and <code>mscratch</code>:</p>
<pre><code>csrrw a0, mscratch, a0</code></pre>
<p>For the “immediate” variants, instead of a register, they take an
“unsigned”/zero-extended 5-bit immediate value, i.e.&nbsp;an immediate value
0 through 31, inclusive. This is represented using <code>uimm5</code> in
the assembly syntax description. The operation is the same
otherwise.</p>
<ul>
<li><span id="insn-csrrwi"><em><code>csrrwi</code></em></span> (“CSR
read write immediate”): <code>{ csr = uimm5; rd = csr_old; }</code></li>
<li><span id="insn-csrrsi"><em><code>csrrsi</code></em></span> (“CSR
read set immediate”):
<code>{ csr = csr | uimm5; rd = csr_old; }</code></li>
<li><span id="insn-csrrci"><em><code>csrrci</code></em></span> (“CSR
read clear immediate”):
<code>{ csr = csr &amp; ~uimm5; rd = csr_old; }</code></li>
</ul>
<p>The full feature set of these instructions are designed for
manipulating bit fields in CSRs, which we will not be doing that much of
in this tutorial. Still, this orthogonal design should be fairly
intuitive to remember.</p>
<p>CSRs and fields in CSRs do not behave like general purpose registers:
Some of them are read/write, some are read-only. Also, invalid values
have special behaviors. We will touch on more details as we introduce
the individual CSRs themselves, but one thing you may have noticed is
that we don’t seem to have read-only CSR instructions. Read-only access
is achieved using special cases in the instruction encodings:</p>
<ul>
<li><code>csrrs</code> and <code>csrrc</code> do not write to the CSR if
<code>rs1</code> is <code>x0</code> (a.k.a. <code>zero</code>) (Note
that just the value of <code>rs1</code> being 0 is not enough.)</li>
<li><code>csrrsi</code> and <code>csrrci</code> do not write to the CSR
if <code>uimm5</code> is 0.</li>
</ul>
<p>While we’re at it:</p>
<ul>
<li><code>csrrw</code> and <code>csrrwi</code> do not read the CSR if
<code>rd</code> is <code>x0</code> (a.k.a. <code>zero</code>). (Note
that writing to <code>x0</code> has no effect anyway, since it’s
constant 0.)</li>
</ul>
<p>(No standard RISC-V CSR is write-only, or has side effects on
read.)</p>
<p>As a convenience, the pseudoinstructions <span id="insn-csrr"><em><code>csrr</code></em></span> (“CSR read”) and <span id="insn-csrw"><em><code>csrw</code></em></span> (“CSR write”) are
available. <code>csrw csr, rs1</code> expands to
<code>csrrw x0, csr, rs1</code>. Meanwhile, <code>csrr rd, csr</code>
expands specifically to <code>csrrs rd, csr, x0</code>, just so we can
agree on an encoding.</p>
<pre><code>csrw csr, rs1
csrr rd, csr</code></pre>
<p>You may have seen these CSR things if you’ve scrolled down on the
register view. Yes, we’re finally getting into those.</p>
<h2 id="counters">Counters</h2>
<p>An example of CSRs is <span id="term-counters"><em>counters</em></span>. Two basic read-only
counters are <span id="csr-cycle"><em><code>cycle</code></em></span> and
<span id="csr-instret"><em><code>instret</code></em></span>. These
counters, well, <em>count</em> the number of “cycles” and “instructions
retired”. “Retired” is a technical term basically meaning “successfully
completed”.</p>
<p>Since a 32-bit counter will overflow quite fast, on RV32, the
counters have “high” counterparts: <span id="csr-cycleh"><em><code>cycleh</code></em></span> and <span id="csr-instreth"><em><code>instreth</code></em></span>. So, for
example, the full cycle counter has 64 bits, with the lower 32 bits in
the CSR <code>cycle</code> and higher 32 bits in the CSR
<code>cycleh</code>.</p>
<p>While the emulator is running, scroll down on the register view
panel, and on the bottom you’ll see the values of these counters. For
convenience, they’re shown combined, so,
<code>cycle = 0x11223344_55667788</code> means <code>cycleh</code> is
<code>0x11223344</code>, and <code>cycle</code> is
<code>0x55667788</code>.</p>
<p>On real hardware <code>cycle</code> is coupled to the clock cycle. In
this emulator, every time you press “Step”, it counts as a cycle. When
you press “Run” and it starts, well, running, a certain number of cycles
happen periodically.</p>
<p>Let’s look at a really simple example:</p>
<p>
    addi a0, a0, 1
    addi a0, a0, 1
    addi a0, a0, 1
    ebreak
</p>
<p>It takes 4 cycles for this program to stop, but <code>instret</code>
ends up at only 3 because the final <code>ebreak</code> instruction
never actually completes.</p>
<p>(Do not confuse “retired” with “retried”.)</p>
<p>A program can read its own counters. For example, this fun little
program loops until the cycle count is over 1000, assuming the low 32
bits doesn’t overflow before it has time to react:</p>
<p>
    li t1, 1000
loop:
    csrr t0, cycle
    blt t0, t1, loop

    ebreak
</p>
<h2 id="current-privilege-level">Current privilege level</h2>
<p>Technically <code>cycle</code> and <code>instret</code> are not part
of the privileged architecture. The real fun begins <em>now</em>.</p>
<p>The emulator shows the current privilege level as
<code>(priv)</code>. It is in parentheses to remind you of a very
important fact:</p>
<p><em>There is no CSR for the current privilege level.</em></p>
<p>In general, it is not possible for a RISC-V program to learn what
privilege level it’s in. This is required for the <a href="https://en.wikipedia.org/wiki/Popek_and_Goldberg_virtualization_requirements">Popek
and Goldberg conditions of virtualization</a> to work, specifically
because being able to read the current privilege level at a
lower-than-maximum privilege level would be a “sensitive” but
“unprivileged” instruction.</p>
<p>If you’re writing a program for a certain privilege level, you should
simply assume that it is correctly being run at that privilege
level.</p>
<h2 id="exceptions">Exceptions</h2>
<h2 id="exception-entry">Exception entry</h2>
<p>A fundamental way an operating system does its job is through
handling exceptions. In general, <span id="term-exceptions"><em>exceptions</em></span> occur when there’s a
problem with a specific instruction, and execution cannot continue. For
example, since <code>cycle</code> is a read-only CSR, writing to it is
an illegal instruction:</p>
<p>
    csrw cycle, x0
</p>
<p>Since we have no exception handling in the program, we’ll have to
inspect what happened manually in the emulator. Indeed, a lot has
happened:</p>
<p>Firstly, this message tells you that an exception happened:</p>
<pre><code>[ Exception: Illegal instruction (2) | tval = 0xc0001073, epc = 0x4000000c ]</code></pre>
<p>The same information is now also available in the CSRs, as
follows:</p>
<ul>
<li><span id="csr-mcause"><em><code>mcause</code></em></span> (“M-mode
trap cause”): The kind of exception.</li>
<li><span id="csr-mepc"><em><code>mepc</code></em></span> (“M-mode
exception pc”): The address of the instruction that caused the
exception.</li>
<li><span id="csr-mtval"><em><code>mtval</code></em></span> (“M-mode
trap value”): Extra information about the exception.</li>
<li><span id="csr-mstatus"><em><code>mstatus</code></em></span> (“M-mode
status”): It is set to <code>0x00001800</code>. The two bits in the
middle, <code>mstatus[12:11]</code> (In C syntax,
<code>(mstatus &gt;&gt; 11) &amp; 0x3</code>) is the
<code>mstatus.MPP</code> (“M-mode previous privilege level”) field,
which contains 3, meaning that the exception occurred while running in
Machine mode.</li>
</ul>
<p>When an exception happens, in addition to recording the exception
information in these CSR fields, <code>pc</code> is set to
<code>mtvec</code>, which is supposed to be the handler address. Let’s
write ourselves an exception handler that simply prints a message and
stops the emulator, and see the handling in action:</p>
<p>
    la t0, handler
    csrw mtvec, t0

    # Now cause an exception
    csrw cycle, x0

    # Rest of the main program is never executed
    addi a0, a0, 1
    addi a0, a0, 1

handler:
    la a0, msg
    call puts
    ebreak

msg:
    .byte 0x4f, 0x68, 0x20, 0x6e, 0x6f, 0x21, 0x0a, 0x00

    # void puts(const char *);
puts:
    lui t1, %hi(0x10000000)
1:
    lb t0, 0(a0)
    beq t0, zero, 2f
    sw t0, 0(t1)
    addi a0, a0, 1
    j 1b

2:
    ret
</p>
<p>Yeah it just prints <code>Oh no!</code> on error. Baby steps…</p>
<p>The checkboxes “Pause on exc.” and “Print on exc.” control whether
the emulator should pause or print a message, respectively, when an
exception occurs. You can uncheck those if you want the exception
handler set in the program to run without interference.</p>
<p>(Another case that will cause a jump to <code>mtvec</code> is <span id="term-interrupts"><em>interrupts</em></span>. However, this feature
does not exist in the emulator. The two cases are collectively called
<span id="term-traps"><em>traps</em></span>.)</p>
<h2 id="exception-causes">Exception causes</h2>
<p>These are the exceptions possible in this emulator, and their
respective numeric codes:</p>
<table>
<thead>
<tr>
<th></th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Instruction address misaligned</td>
</tr>
<tr>
<td>1</td>
<td>Instruction access fault</td>
</tr>
<tr>
<td>2</td>
<td>Illegal instruction</td>
</tr>
<tr>
<td>3</td>
<td>Breakpoint</td>
</tr>
<tr>
<td>5</td>
<td>Load access fault</td>
</tr>
<tr>
<td>7</td>
<td>Store/AMO access fault</td>
</tr>
<tr>
<td>8</td>
<td>Environment call from User mode</td>
</tr>
<tr>
<td>11</td>
<td>Environment call from Machine mode</td>
</tr>
</tbody>
</table>
<p>“Instruction address misaligned” happens when attempting to jump to
an instruction that is not 4-byte aligned. The exception happens on the
jump or branch instruction, not the target.</p>
<p>“Load access fault” and “Store/AMO access fault” happens when
accessing an invalid memory address, or accessing a memory address in an
invalid way.</p>
<p>(“AMO” stands for “atomic memory operation”, which we will not talk
about and is not featured in the emulator.)</p>
<p>“Illegal instruction” happens not only in the self explanatory way
when an invalid instruction is executed, but also when accessing a CSR
in an invalid way, or from too low a privilege level.</p>
<p>“Breakpoint”, “Environment call from User mode” and “Environment call
from Machine mode” will be explained in a future section.</p>
<h2 id="exception-return">Exception return</h2>
<p>The <span id="insn-mret"><em><code>mret</code></em></span> (“M-mode
return”) instruction performs the reverse of part of what happens when
an exception occurs. To be precise, what happens is:</p>
<ul>
<li>The current privilege levels is set back to
<code>mstatus.MPP</code></li>
<li><code>mstatus.MPP</code> is set to 0</li>
<li><code>pc</code> is set to <code>mepc</code></li>
</ul>
<p>(You can think of the privilege mode bits as shifting in a chain
<code>0 → MPP → priv</code>. And, to be even more precise,
<code>mstatus.MPP</code> is set to the lowest supported privilege mode
since it’s not supposed to contain unsupported modes.)</p>
<p><code>mret</code> takes no operands, so the assembly syntax is
simply:</p>
<pre><code>mret</code></pre>
<p>If we do <code>mret</code> after getting an exception, then we simply
go back to retrying the same instruction again. This is useful for more
featureful implementations, where for example, after handling a page
fault the correct course of action is to retry the faulting
instruction.</p>
<p>However, <code>mstatus</code> and <code>mepc</code> are also
writable. This gives us more flexibility in the use of
<code>mret</code>. As an analogy, the same <code>jr</code> instruction
(really <code>jalr</code> instruction) can be used to return from a
call, and also can be used to jump to any address. Similarly,
<code>mret</code> not only lets us return from an exception, but also
lets us jump to any address <em>and</em> switch to any privilege
level.</p>
<h2 id="handling-user-mode">Handling User mode</h2>
<h2 id="entering-user-mode">Entering User mode</h2>
<p>Even though <code>mret</code> is named “return”, it is in fact the
only way to lower the privilege level to <em>enter</em> User mode.
Here’s an example of entering User mode, with a User mode program that
does something bad:</p>
<p>
    la t0, handler
    csrw mtvec, t0

    lui t0, %hi(0x1800)
    addi t0, t0, %lo(0x1800)

    # Clear MPP to 0
    csrrc zero, mstatus, t0

    la t0, user_entry
    csrw mepc, t0
    mret

handler:
    ebreak # Just stop the emulator

user_entry:
    # Try to access an M-mode CSR
    csrr a0, mstatus
</p>
<p>As you can see, after we enter User mode, all of the CSRs used for
exception handling become completely inaccessible, not even readable. As
with writing a read-only CSR, accessing an CSR without permission also
causes an illegal instruction exception.</p>
<p>Moreover, when an exception happens, we go back to Machine mode, so
the exception handler runs in Machine mode. Here the handler does
nothing except stopping the emulator.</p>
<h2 id="intentionally-causing-an-exception">Intentionally causing an exception</h2>
<p>Sometimes, a program may wish to intentionally cause an exception.
There are several well-defined way to do that:</p>
<ul>
<li>The pseudoinstruction <span id="insn-unimp"><em><code>unimp</code></em></span> has the same encoding
as <code>csrrw zero, cycle, zero</code>, and it is the canonical RV32I
illegal instruction. It causes causes an “Illegal instruction”
exception.</li>
<li>The instruction <span id="insn-ebreak"><em><code>ebreak</code></em></span> causes a
“Breakpoint” exception</li>
<li>The instruction <span id="insn-ecall"><em><code>ecall</code></em></span> causes an
“Environment call from User mode” exception when executed in User mode,
and “Environment call from Machine mode” exception when executed in
Machine mode.</li>
</ul>
<p>Give those exceptions a try here:</p>
<p>
    la t0, handler
    csrw mtvec, t0

    lui t0, %hi(0x1800)
    addi t0, t0, %lo(0x1800)

    # Clear MPP to 0
    csrrc zero, mstatus, t0

    la t0, user_entry
    csrw mepc, t0
    mret

handler:
    ebreak # Just stop the emulator

user_entry:
    ebreak
    # ecall
    # unimp
</p>
<p>As the names suggest, <code>ebreak</code> is used for debugging
breakpoints. As a special case, in this emulator <code>ebreak</code> in
Machine mode stops the emulator. You can think of it as the emulator
being a debugger, and the debugger catching the breakpoint.</p>
<p><code>unimp</code> can be used to intentionally crash a program upon
detection of some unrecoverable error.</p>
<p>Meanwhile, <code>ecall</code> is used for things like system calls.
“Environment call from User mode” is a distinct exception cause code to
make it easy to check specifically for this case.</p>
<h2 id="saving-and-restoring-all-registers">Saving and restoring all registers</h2>
<p>One thing that you would want in your trap handler is to not trust or
disturb <em>any</em> general purpose registers in the code that the trap
occurred in, unless you intentionally want to do so, for example to
return a value from a system call. So you’d want to save all the
registers to memory, before doing anything else. However, accessing
memory requires a general purpose register.</p>
<p>The <span id="csr-mscratch"><em><code>mscratch</code></em></span>
(“M-mode scratch”) CSR can help with this. This register, unlike all the
others, have no special functionality. It can hold any 32-bit value.
However, like all the other M-mode CSRs, it can only be accessed in
Machine mode. User mode code cannot change the value of it.</p>
<p>So for example, you can stash the operating system stack pointer in
<code>mscratch</code> before switching to User mode, and it will stay in
<code>mscratch</code> untouched in User mode. At the top of the handler,
<code>csrrw sp, mscratch, sp</code> to swap from the user stack pointer
to the operating system stack pointer.</p>
<pre><code>handler:
    csrrw sp, mscratch, sp
    # Save registers except sp
    csrr t0, mscratch
    # t0 = user sp, save it
    # Save user pc
    ...</code></pre>
<p>And, to restore:</p>
<pre><code>    lw t0, ... # Load user pc
    csrw mepc, t0
    lw t0, ... # Load user sp
    csrw mscratch, t0
    # Restore registers except sp
    csrrw sp, mscratch, sp
    mret</code></pre>
<p>We’ll see the full code for this in the following section.</p>
<h2 id="writing-a-very-very-bare-bones-operating-system">Writing a very very bare
bones operating system</h2>
<h2 id="design">Design</h2>
<p>We have enough of to write a very very bare bones operating system.
It will support these features:</p>
<ul>
<li>System calls:
<ul>
<li><code>a7 = 1</code>: putchar, <code>a0</code> is the byte to
write</li>
<li><code>a7 = 2</code>: exit</li>
</ul></li>
<li>Exception handling: Print error message and exit</li>
</ul>
<p>We design the exception handling as follows:</p>
<ul>
<li>During most of the time in M-mode, <code>mscratch</code> is 0.</li>
<li>While in U-mode, <code>mscratch</code> points to the operating
system stack pointer</li>
<li>At trap handler, if <code>mscratch</code> is 0, the exception came
from M-mode, which we cannot handle, so we report a fatal
exception.</li>
<li>If it did come from U-mode, allocate 128 bytes on the stack to save
the U-mode registers, and call <code>trap_main</code>, which manipulates
U-mode registers in memory</li>
<li>After <code>trap_main</code>, we restore registers from memory,
deallocate the space from the stack, and go back to U-mode, as outlined
in the previous section.</li>
</ul>
<p>The structure to save registers in is fairly simple:</p>
<pre><code>struct regs {
  unsigned long pc;
  unsigned long ra; // x1
  unsigned long sp; // x2
  ...
  unsigned long t6; // x31
};</code></pre>
<p>Basically you can think of it as an array where element 0 is
<code>pc</code>, and elements 1 through 31 are registers x1 through
x31.</p>
<p>Inside <code>trap_main</code>, we check <code>mcause</code> to see if
it’s a system call. If it is, we dispatch based on <code>a7</code>. If
it’s not, we report an exception from U-mode.</p>
<p>At the beginning, we simply initialize the <code>struct regs</code>
structure on stack, initialize user <code>sp</code> and <code>pc</code>
in it, and jump to the same code that handles returning to U-mode.</p>
<h2 id="code">Code</h2>
<p>Here’s the assembly code with User mode code at the bottom. You may
want to uncheck “Pause on exc.” and “Print on exc.” for convenience.</p>
<p>Do not be too hard on yourself if you have trouble understanding the
code fully. This is, after all, a fairly complete OS kernel entry and
exit implementation. Really, the most important part I’m showing you
here is that it is possible.</p>
<p>
    # Reserve 256 bytes for OS stack
    # User stack starts 256 bytes lower
    addi t2, sp, -256

    la t0, handler
    csrw mtvec, t0

    # Prepare struct reg
    addi sp, sp, -128

    mv a0, sp # struct regs *

    # Set user pc to user_entry
    la t0, user_entry
    sw t0, 0(a0)

    # Set user sp
    sw t2, 8(a0)

    j enter_user

    # void trap_main(struct regs *regs)
trap_main:
    # Save regs based on calling convention
    addi sp, sp, -16
    sw s0, (sp)
    sw ra, 4(sp)

    mv s0, a0
    csrr a1, mcause
    li t1, 8 # "Environment call from User mode"
    bne a1, t1, do_bad_exception # Not ecall, that's bad

    # Call do_syscall with args from ecall

    lw a0, 40(s0)
    lw a1, 44(s0)
    lw a2, 48(s0)
    lw a3, 52(s0)
    lw a4, 56(s0)
    lw a5, 60(s0)
    lw a6, 64(s0)
    lw a7, 68(s0)
    call do_syscall

    sw a0, 40(s0)   # Set user a0 return value

    # Bump user pc by 4
    # Skip over ecall instruction
    lw t0, 0(s0)
    addi t0, t0, 4
    sw t0, 0(s0)

    # Restore regs based on calling convention
    lw s0, (sp)
    lw ra, 4(sp)
    addi sp, sp, 16
    ret

    # a0 = arg0, a7 = syscall number
do_syscall:
    # Dispatch based on syscall number
    li t0, 1
    beq a7, t0, sys_putchar
    li t0, 2
    beq a7, t0, sys_exit

    # Bad syscall
    li a0, -1
    ret

    # int sys_putchar(char c)
sys_putchar:
    # Save regs based on calling convention
    addi sp, sp, -16
    sw s0, (sp)
    sw ra, 4(sp)

    call kputchar
    li a0, 0

    # Restore regs based on calling convention
    lw s0, (sp)
    lw ra, 4(sp)
    addi sp, sp, 16
    ret

    # [[noreturn]] void sys_exit()
sys_exit:
    # Just stop the emulator
    ebreak

    # [[noreturn]] void do_bad_exception(struct regs *regs, long cause)
    # Print message about bad U-mode exception, then stop
do_bad_exception:
    mv s0, a1

    # Equivalent of printf("Exception 0x%x", cause);
    la a0, msg_exception
    call kputs

    mv a0, s0
    la t0, hex_chars
    add t0, t0, a0
    lbu a0, (t0)
    call kputchar

    li a0, 0xa # '\n'
    call kputchar

    # Stop the emulator
    ebreak

fatal:
    # Print message about fatal exception, then stop
    la a0, msg_fatal
    call kputs
    ebreak

msg_exception:
    # "Exception 0x"
    .byte 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x30, 0x78, 0x00

msg_fatal:
    # "Fatal exception\n"
    .byte 0x46, 0x61, 0x74, 0x61, 0x6c, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x00

hex_chars:
    # "0123456789abcdef"
    .byte 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x00

    .byte 0x00 # Alignment padding
    # Otherwise, the next instruction wouldn't be aligned

    # void kputs(const char *);
    # Print string by accessing MMIO directly
kputs:
    lui t1, %hi(0x10000000)
1:
    lb t0, 0(a0)
    beq t0, zero, 2f
    sw t0, 0(t1)
    addi a0, a0, 1
    j 1b
2:
    ret

    # void kputchar(char);
    # Print byte by accessing MMIO directly
kputchar:
    lui t1, %hi(0x10000000)
    sw a0, (t1)
    ret

    # The big exception handler
handler:
    csrrw sp, mscratch, sp

    # If mscratch was 0, this is exception from M-mode
    # Can't handle that, it's a fatal error
    beq sp, zero, fatal

    # Save all registers
    addi sp, sp, -128
    sw x1, 4(sp)
    # x2/sp handled separately
    sw x3, 12(sp)
    sw x4, 16(sp)
    sw x5, 20(sp)
    sw x6, 24(sp)
    sw x7, 28(sp)
    sw x8, 32(sp)
    sw x9, 36(sp)
    sw x10, 40(sp)
    sw x11, 44(sp)
    sw x12, 48(sp)
    sw x13, 52(sp)
    sw x14, 56(sp)
    sw x15, 60(sp)
    sw x16, 64(sp)
    sw x17, 68(sp)
    sw x18, 72(sp)
    sw x19, 76(sp)
    sw x20, 80(sp)
    sw x21, 84(sp)
    sw x22, 88(sp)
    sw x23, 92(sp)
    sw x24, 96(sp)
    sw x25, 100(sp)
    sw x26, 104(sp)
    sw x27, 108(sp)
    sw x28, 112(sp)
    sw x29, 116(sp)
    sw x30, 120(sp)
    sw x31, 124(sp)

    # Save user sp, also set mscratch to 0 in M-mode
    csrrw t0, mscratch, zero
    sw t0, 8(sp)

    # Save user pc
    csrr t0, mepc
    sw t0, 0(sp)

    mv a0, sp
    call trap_main
    # ... falls through after trap_main ...
enter_user:
    # Set mstatus.MPP = User
    lui t0, %hi(0x1800)
    addi t0, t0, %lo(0x1800)
    csrrc zero, mstatus, t0

    # Set mepc = user pc
    # Will actually jump with mret
    lw t0, 0(sp)
    csrw mepc, t0

    # Set mscratch = user sp temporarily
    # Will swap right before mret
    lw t0, 8(sp)
    csrw mscratch, t0

    # Restore other registers from stack
    lw x1, 4(sp)
    # x2/sp handled separately
    lw x3, 12(sp)
    lw x4, 16(sp)
    lw x5, 20(sp)
    lw x6, 24(sp)
    lw x7, 28(sp)
    lw x8, 32(sp)
    lw x9, 36(sp)
    lw x10, 40(sp)
    lw x11, 44(sp)
    lw x12, 48(sp)
    lw x13, 52(sp)
    lw x14, 56(sp)
    lw x15, 60(sp)
    lw x16, 64(sp)
    lw x17, 68(sp)
    lw x18, 72(sp)
    lw x19, 76(sp)
    lw x20, 80(sp)
    lw x21, 84(sp)
    lw x22, 88(sp)
    lw x23, 92(sp)
    lw x24, 96(sp)
    lw x25, 100(sp)
    lw x26, 104(sp)
    lw x27, 108(sp)
    lw x28, 112(sp)
    lw x29, 116(sp)
    lw x30, 120(sp)
    lw x31, 124(sp)
    addi sp, sp, 128

    # Actually restore sp
    csrrw sp, mscratch, sp
    mret    # Time to go to user mode!

################

user_entry:
    la a0, msg_hello
    call puts
    call exit

    # void puts(const char *);
    # Print string using system call
puts:
    addi sp, sp, -16
    sw s0, (sp)
    sw ra, 4(sp)

    mv s0, a0
1:
    lb a0, 0(s0)
    beq a0, zero, 2f
    call putchar
    addi s0, s0, 1
    j 1b
2:

    lw s0, (sp)
    lw ra, 4(sp)
    addi sp, sp, 16
    ret

    # void putchar(const char *);
    # Print byte using system call
putchar:
    li a7, 1
    ecall
    ret

    # [[noreturn]] void exit();
exit:
    li a7, 2
    ecall
    # Not supposed to return, just to be safe
    unimp

msg_hello:
    .byte 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x0a, 0x00
</p>
<h2 id="pseudocode-reference">Pseudocode reference</h2>
<p>For reference, here’s some of the OS code in pseudo-C.</p>
<pre><code>void trap_main(struct regs *regs) {
    unsigned long cause = csr_read(mcause);
    if (cause != 8)
        do_bad_exception(regs, cause);

    # Call do_syscall with args from ecall
    unsigned long ret = do_syscall(regs-&gt;a0, ..., regs-&gt;a7);
    regs-&gt;a0 = ret;

    // Bump user pc by 4, skip over ecall instruction
    regs-&gt;pc += 4;
}

unsigned long do_syscall(
    unsigned long a0,
    ...,
    unsigned long a7
) {
    if (a7 == 1)
        sys_putchar(a0);
    else if (a7 == 8)
        sys_exit();
    else
        return -1;
}

unsigned long sys_putchar(char a) {
    kputchar(a);
    return 0;
}

[[noreturn]]
unsigned long sys_exit(char a) {
    ebreak();
}

[[noreturn]]
void do_bad_exception(struct regs *regs, unsigned long cause) {
    kputs("Exception 0x");
    kputchar(hex_chars[cause]);
    kputchar('\n');
    ebreak();
}

[[noreturn]]
void fatal() {
    kputs("Fatal exception\n");
    ebreak();
}

void kputs(const char *str) {
    while (*str) {
        u32 val = (u32)*str;
        writel(0x10000000, val); // MMIO write
        str ++;
    }
}

void kputchar(char c) {
    u32 val = (u32)c;
    writel(0x10000000, val); // MMIO write
}</code></pre>
<p>And here’s the user code, again in pseudo C:</p>
<pre><code>[[noreturn]]
void user_entry() {
    puts(...);
    exit();
}

void puts(const char *str) {
    while (*str) {
        putchar(*str);
        str ++;
    }
}

void putchar(char c) {
    ecall(a0 = c, a7 = 1);
}

void exit() {
    ecall(a7 = 2);
}</code></pre>
<h2 id="lies-and-omissions">Lies and omissions</h2>
<p>As long as this tutorial is, some simplifications have been made.
Here are some of the most egregious lies and omissions, compared to the
“real” RISC-V architecture and “real” RISC-V assembly code found in the
world:</p>
<ul>
<li>The assembly syntax resembles the syntax used by LLVM assembler and
GNU Binutils for RISC-V. However, it is not identical.</li>
<li>There are a lot more pseudoinstructions and CSRs than what I have
described.</li>
<li>The <code>li</code> pseudoinstruction should support a wider range
of constants.</li>
<li><code>mstatus</code> is a lot more complicated than what I have
described.</li>
<li><code>%hi</code>, <code>%lo</code>, <code>%pcrel_hi</code>,
<code>%pcrel_lo</code> are more complicated than what I have
described.</li>
</ul>
<p>There are also very important topics that are common or even
ubiquitous in the RISC-V world, but I chose not to cover:</p>
<ul>
<li>64-bit architecture</li>
<li>Compressed instructions</li>
<li>Other privileged architecture and operating systems topics:
Interrupts, memory protection, virtual memory, …</li>
</ul>
<p>However, what I’ve taught you should be more than enough to get you
started into learning more on your own, or with further materials.</p>
<h2 id="references">References</h2>
<p>Here are some references and tutorials I would personally recommend,
if you’re looking to get further into RISC-V low-level development</p>
<ul>
<li>RISC-V Instruction Set Manual <a href="https://github.com/riscv/riscv-isa-manual">https://github.com/riscv/riscv-isa-manual</a></li>
<li>RISC-V Assembly Programmer’s Manual <a href="https://github.com/riscv-non-isa/riscv-asm-manual">https://github.com/riscv-non-isa/riscv-asm-manual</a></li>
<li>RISC-V Calling Conventions <a href="https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc">https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc</a></li>
<li>Operating System in 1,000 Lines <a href="https://operating-system-in-1000-lines.vercel.app/en/">https://operating-system-in-1000-lines.vercel.app/en/</a></li>
</ul>
<p>Other useful resources that I have used while writing this
tutorial:</p>
<ul>
<li><code>arch/riscv/kernel/entry.S</code> from Linux <a href="https://elixir.bootlin.com/linux/latest/source/arch/riscv/kernel/entry.S">https://elixir.bootlin.com/linux/latest/source/arch/riscv/kernel/entry.S</a></li>
</ul>
<h2 id="thanks">Thanks</h2>
<p>Thanks to these folks for UI design help and content suggestions:</p>
<ul>
<li>Aria Desires <a href="https://faultlore.com/">https://faultlore.com</a></li>
<li>Riven Skaye <a href="https://skaye.blog/">https://skaye.blog</a></li>
<li>robotreader <a href="https://sdubinsky.com/">https://sdubinsky.com</a></li>
<li>Bruce Hoult <a href="http://hoult.org/bruce">http://hoult.org/bruce</a></li>
</ul>
<p>And thanks to you for coming along with me on this journey. Come on
over to <a href="https://github.com/dramforever/easyriscv">https://github.com/dramforever/easyriscv</a> if you have
suggestions, grievances, or just want to share some thoughts.</p>
<h2 id="license">License</h2>
<p>This tutorial is under the <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>
license. To the maximum extent permitted by law, this tutorial is
dedicated to the public domain.</p>
<h2 id="index">Index</h2>
<h2 id="instructions">Instructions</h2>
<ul>
<li><a href="#insn-add"><code>add</code></a></li>
<li><a href="#insn-addi"><code>addi</code></a></li>
<li><a href="#insn-and"><code>and</code></a></li>
<li><a href="#insn-andi"><code>andi</code></a></li>
<li><a href="#insn-auipc"><code>auipc</code></a></li>
<li><a href="#insn-beq"><code>beq</code></a></li>
<li><a href="#insn-bge"><code>bge</code></a></li>
<li><a href="#insn-bgeu"><code>bgeu</code></a></li>
<li><a href="#insn-blt"><code>blt</code></a></li>
<li><a href="#insn-bltu"><code>bltu</code></a></li>
<li><a href="#insn-bne"><code>bne</code></a></li>
<li><a href="#insn-call"><code>call</code></a></li>
<li><a href="#insn-csrr"><code>csrr</code></a></li>
<li><a href="#insn-csrrc"><code>csrrc</code></a></li>
<li><a href="#insn-csrrci"><code>csrrci</code></a></li>
<li><a href="#insn-csrrs"><code>csrrs</code></a></li>
<li><a href="#insn-csrrsi"><code>csrrsi</code></a></li>
<li><a href="#insn-csrrw"><code>csrrw</code></a></li>
<li><a href="#insn-csrrwi"><code>csrrwi</code></a></li>
<li><a href="#insn-csrw"><code>csrw</code></a></li>
<li><a href="#insn-ebreak"><code>ebreak</code></a></li>
<li><a href="#insn-ecall"><code>ecall</code></a></li>
<li><a href="#insn-j"><code>j</code></a></li>
<li><a href="#insn-jal"><code>jal</code></a></li>
<li><a href="#insn-jalr"><code>jalr</code></a></li>
<li><a href="#insn-jr"><code>jr</code></a></li>
<li><a href="#insn-la"><code>la</code></a></li>
<li><a href="#insn-lb"><code>lb</code></a></li>
<li><a href="#insn-lbu"><code>lbu</code></a></li>
<li><a href="#insn-lh"><code>lh</code></a></li>
<li><a href="#insn-lhu"><code>lhu</code></a></li>
<li><a href="#insn-li"><code>li</code></a></li>
<li><a href="#insn-lui"><code>lui</code></a></li>
<li><a href="#insn-lw"><code>lw</code></a></li>
<li><a href="#insn-mret"><code>mret</code></a></li>
<li><a href="#insn-mv"><code>mv</code></a></li>
<li><a href="#insn-or"><code>or</code></a></li>
<li><a href="#insn-ori"><code>ori</code></a></li>
<li><a href="#insn-ret"><code>ret</code></a></li>
<li><a href="#insn-sb"><code>sb</code></a></li>
<li><a href="#insn-sh"><code>sh</code></a></li>
<li><a href="#insn-sll"><code>sll</code></a></li>
<li><a href="#insn-slli"><code>slli</code></a></li>
<li><a href="#insn-slt"><code>slt</code></a></li>
<li><a href="#insn-slti"><code>slti</code></a></li>
<li><a href="#insn-sltiu"><code>sltiu</code></a></li>
<li><a href="#insn-sltu"><code>sltu</code></a></li>
<li><a href="#insn-sra"><code>sra</code></a></li>
<li><a href="#insn-srai"><code>srai</code></a></li>
<li><a href="#insn-srl"><code>srl</code></a></li>
<li><a href="#insn-srli"><code>srli</code></a></li>
<li><a href="#insn-sub"><code>sub</code></a></li>
<li><a href="#insn-sw"><code>sw</code></a></li>
<li><a href="#insn-unimp"><code>unimp</code></a></li>
<li><a href="#insn-xor"><code>xor</code></a></li>
<li><a href="#insn-xori"><code>xori</code></a></li>
</ul>
<h2 id="registers-and-csrs">Registers and CSRs</h2>
<ul>
<li><a href="#reg-x0"><code>x0</code></a></li>
<li><a href="#reg-x1-through-x31"><code>x1</code> through
<code>x31</code></a></li>
</ul>
<ul>
<li><a href="#regalias-a0-through-a7"><code>a0</code> through
<code>a7</code></a></li>
<li><a href="#regalias-gp"><code>gp</code></a></li>
<li><a href="#regalias-ra"><code>ra</code></a></li>
<li><a href="#regalias-s0-through-s11"><code>s0</code> through
<code>s11</code></a></li>
<li><a href="#regalias-sp"><code>sp</code></a></li>
<li><a href="#regalias-t0-through-t6"><code>t0</code> through
<code>t6</code></a></li>
<li><a href="#regalias-tp"><code>tp</code></a></li>
<li><a href="#regalias-zero"><code>zero</code></a></li>
</ul>
<ul>
<li><a href="#csr-cycle"><code>cycle</code></a></li>
<li><a href="#csr-cycleh"><code>cycleh</code></a></li>
<li><a href="#csr-instret"><code>instret</code></a></li>
<li><a href="#csr-instreth"><code>instreth</code></a></li>
<li><a href="#csr-mcause"><code>mcause</code></a></li>
<li><a href="#csr-mepc"><code>mepc</code></a></li>
<li><a href="#csr-mscratch"><code>mscratch</code></a></li>
<li><a href="#csr-mstatus"><code>mstatus</code></a></li>
<li><a href="#csr-mtval"><code>mtval</code></a></li>
</ul>
<h2 id="special-assembly-syntax">Special assembly syntax</h2>
<ul>
<li><a href="#dir-.2byte"><code>.2byte</code></a></li>
<li><a href="#dir-.4byte"><code>.4byte</code></a></li>
<li><a href="#dir-.byte"><code>.byte</code></a></li>
<li><a href="#dir-.half"><code>.half</code></a></li>
<li><a href="#dir-.word"><code>.word</code></a></li>
</ul>
<ul>
<li><a href="#rel-%hi()"><code>%hi()</code></a></li>
<li><a href="#rel-%lo()"><code>%lo()</code></a></li>
<li><a href="#rel-%pcrel_hi()"><code>%pcrel_hi()</code></a></li>
<li><a href="#rel-%pcrel_lo()"><code>%pcrel_lo()</code></a></li>
</ul>
<h2 id="other-terms">Other terms</h2>
<ul>
<li><a href="#term-align">align</a></li>
<li><a href="#term-aligned">aligned</a></li>
<li><a href="#term-branch">branch</a></li>
<li><a href="#term-byte">byte</a></li>
<li><a href="#term-call-saved">call-saved</a></li>
<li><a href="#term-control-and-status-registers">control and status
registers</a></li>
<li><a href="#term-counters">counters</a></li>
<li><a href="#term-csrs">CSRs</a></li>
<li><a href="#term-destination-register">destination register</a></li>
<li><a href="#term-devices">devices</a></li>
<li><a href="#term-directive">directive</a></li>
<li><a href="#term-endianness">endianness</a></li>
<li><a href="#term-exceptions">exceptions</a></li>
<li><a href="#term-extensions">extensions</a></li>
<li><a href="#term-general-purpose-registers">general purpose
registers</a></li>
<li><a href="#term-halfword">halfword</a></li>
<li><a href="#term-imm"><code>imm</code></a></li>
<li><a href="#term-immediate-value">immediate value</a></li>
<li><a href="#term-instruction-syntax">instruction syntax</a></li>
<li><a href="#term-interrupts">interrupts</a></li>
<li><a href="#term-jump">jump</a></li>
<li><a href="#term-load">load</a></li>
<li><a href="#term-m-mode">M-mode</a></li>
<li><a href="#term-machine">Machine</a></li>
<li><a href="#term-memory-mapped-i/o">memory mapped I/O</a></li>
<li><a href="#term-modes">modes</a></li>
<li><a href="#term-numeric-labels">numeric labels</a></li>
<li><a href="#term-pc"><code>pc</code></a></li>
<li><a href="#term-pc-relative-addressing">pc-relative
addressing</a></li>
<li><a href="#term-pic">PIC</a></li>
<li><a href="#term-position-independent-code">position independent
code</a></li>
<li><a href="#term-privilege-levels">privilege levels</a></li>
<li><a href="#term-program-counter">program counter</a></li>
<li><a href="#term-pseudoinstructions">pseudoinstructions</a></li>
<li><a href="#term-rd"><code>rd</code></a></li>
<li><a href="#term-register-aliases">register aliases</a></li>
<li><a href="#term-reset">reset</a></li>
<li><a href="#term-rs1"><code>rs1</code></a></li>
<li><a href="#term-rs2"><code>rs2</code></a></li>
<li><a href="#term-sign-extension">sign extension</a></li>
<li><a href="#term-source-register">source register</a></li>
<li><a href="#term-stack">stack</a></li>
<li><a href="#term-store">store</a></li>
<li><a href="#term-traps">traps</a></li>
<li><a href="#term-two’s-complement">two’s complement</a></li>
<li><a href="#term-u-mode">U-mode</a></li>
<li><a href="#term-user">User</a></li>
<li><a href="#term-word">word</a></li>
<li><a href="#term-zero-extension">zero extension</a></li>
</ul>

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[The PSF has withdrawn a $1.5M proposal to US Government grant program (233 pts)]]></title>
            <link>https://simonwillison.net/2025/Oct/27/psf-withdrawn-proposal/</link>
            <guid>45726137</guid>
            <pubDate>Mon, 27 Oct 2025 20:52:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2025/Oct/27/psf-withdrawn-proposal/">https://simonwillison.net/2025/Oct/27/psf-withdrawn-proposal/</a>, See on <a href="https://news.ycombinator.com/item?id=45726137">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>



<p><strong><a href="https://pyfound.blogspot.com/2025/10/NSF-funding-statement.html">The PSF has withdrawn a $1.5 million proposal to US government grant program</a></strong>. The Python Software Foundation was recently "recommended for funding" (NSF terminology) for a $1.5m grant from the US government National Science Foundation to help improve the security of the Python software ecosystem, after an grant application process lead by Seth Larson and Loren Crary.</p>
<p>The PSF's annual budget is less than $6m so this is a meaningful amount of money for the organization!</p>
<p>We were forced to withdraw our application and turn down the funding, thanks to new language that was added to the agreement requiring us to affirm that we "do not, and will not during the term of this financial assistance award, operate any programs that advance or promote DEI, or discriminatory equity ideology in violation of Federal anti-discrimination laws."</p>
<p>Our legal advisors confirmed that this would not just apply to security work covered by the grant - this would apply to all of the PSF's activities.</p>
<p>This was not an option for us. Here's the <a href="https://www.python.org/psf/mission/">mission</a> of the PSF:</p>
<blockquote>
<p>The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers.</p>
</blockquote>
<p>If we accepted and spent the money despite this term, there was a very real risk that the money could be clawed back later. That represents an existential risk for the foundation since we would have already spent the money!</p>
<p>I was one of the board members who voted to reject this funding - a unanimous but tough decision. I’m proud to serve on a board that can make tough decisions like this.</p>




</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amazon targets as many as 30k corporate job cuts, sources say (121 pts)]]></title>
            <link>https://www.reuters.com/business/world-at-work/amazon-targets-many-30000-corporate-job-cuts-sources-say-2025-10-27/</link>
            <guid>45724813</guid>
            <pubDate>Mon, 27 Oct 2025 18:49:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/business/world-at-work/amazon-targets-many-30000-corporate-job-cuts-sources-say-2025-10-27/">https://www.reuters.com/business/world-at-work/amazon-targets-many-30000-corporate-job-cuts-sources-say-2025-10-27/</a>, See on <a href="https://news.ycombinator.com/item?id=45724813">Hacker News</a></p>
Couldn't get https://www.reuters.com/business/world-at-work/amazon-targets-many-30000-corporate-job-cuts-sources-say-2025-10-27/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Avoid 2:00 and 3:00 am cron jobs (2013) (251 pts)]]></title>
            <link>https://www.endpointdev.com/blog/2013/04/avoid-200-and-300-am-cron-jobs/</link>
            <guid>45723554</guid>
            <pubDate>Mon, 27 Oct 2025 17:08:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.endpointdev.com/blog/2013/04/avoid-200-and-300-am-cron-jobs/">https://www.endpointdev.com/blog/2013/04/avoid-200-and-300-am-cron-jobs/</a>, See on <a href="https://news.ycombinator.com/item?id=45723554">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="blog-content">
  <article class="page">
    
    


    <p>A word to the wise: <strong>Do not set any cron jobs for 2:00 am or 3:00 am on Sunday morning!</strong> Or to be safe, on other mornings besides Sunday as well, since jobs originally set to run on some particular day may eventually be changed to run on another day, or every day.</p>
<p>Most of the time such cron jobs will run fine, but if they run every Sunday morning, then twice per year they will run at the exact time daylight savings time (aka summer time) kicks in or ends, sometimes with very strange results.</p>
<p>On Linux with vixie-cron we saw two cron jobs run something like once per second between 3:00 and 3:01 when the most recent daylight savings time began. Thus they ran about 60 times, stepping all over each other and making a noisy mess in email. No serious harm was done, but that’s only because they were not tasks capable of causing serious harm.</p>
<p>Feel free to wish for or agitate for or fund or write a better open source job scheduler that everyone will use, one that will ensure no overlapping runs, allow specifying time limits, etc. Better tools exist, but until one of them achieves cron’s level of ubiquity, we have to live with cron at least some places and sometimes.</p>
<p>Alternatively, where possible set the server timezone to UTC so that no daylight savings changes will happen at all.</p>
<p>Or most preferable: Governments of the world, stop the twice-yearly dance of daylight saving time altogether.</p>
<p>But in the meantime this particular problem can be entirely avoided by just not scheduling any cron jobs to run on Sunday morning at 2:00 or 3:00 server time.</p>

    <p>
      
        <a href="https://www.endpointdev.com/blog/tags/devops/">devops</a>
      
        <a href="https://www.endpointdev.com/blog/tags/linux/">linux</a>
      
        <a href="https://www.endpointdev.com/blog/tags/sysadmin/">sysadmin</a>
      
    </p>
    <hr>
    
    
  </article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why Busy Beaver hunters fear the Antihydra (131 pts)]]></title>
            <link>https://benbrubaker.com/why-busy-beaver-hunters-fear-the-antihydra/</link>
            <guid>45723359</guid>
            <pubDate>Mon, 27 Oct 2025 16:56:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://benbrubaker.com/why-busy-beaver-hunters-fear-the-antihydra/">https://benbrubaker.com/why-busy-beaver-hunters-fear-the-antihydra/</a>, See on <a href="https://news.ycombinator.com/item?id=45723359">Hacker News</a></p>
Couldn't get https://benbrubaker.com/why-busy-beaver-hunters-fear-the-antihydra/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[JetKVM – Control any computer remotely (244 pts)]]></title>
            <link>https://jetkvm.com/</link>
            <guid>45723159</guid>
            <pubDate>Mon, 27 Oct 2025 16:44:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jetkvm.com/">https://jetkvm.com/</a>, See on <a href="https://news.ycombinator.com/item?id=45723159">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><div><h2>Ultra-Low Latency</h2><p>High-definition 1080p video at 60 FPS with<!-- --> <span>30-60 millisecond latency,</span> <!-- -->using efficient H.264 encoding. Smooth mouse and keyboard action transfer for responsive remote interaction.</p></div><div><h2>Free &amp; Optional Cloud Access</h2><p>Optional remote management via our open-source JetKVM Cloud using WebRTC.<!-- --> <span>Privacy-first design with opt-in cloud access</span> <!-- -->that provides secure and fast direct connections, even behind the most restrictive NAT environments, with our STUN and TURN servers.</p></div></div><div><p><img src="https://jetkvm.com/assets/logo-blue-DHU5o_UO.png" alt="JetKVM logo" loading="lazy"></p><h2>Open Source: Built for Collaboration</h2><p>JetKVM is built on a robust Golang foundation and powered by Linux for adaptability and transparency. Whether you're a seasoned developer or an enthusiastic tinkerer,<!-- --> <span>you can easily modify or fine-tune the software using familiar tooling and straightforward SSH uploads.</span></p><hr><div><h4>Available Source Code</h4><a target="_blank" rel="noopener noreferrer" href="https://github.com/jetkvm/kvm"></a></div><div><div><h5>KVM Runtime</h5><p>Combining a Go-based backend with a React-powered WebRTC dashboard. Perfect for forking, submitting new features, fixing bugs, or customizing local streaming and control.</p></div><div><h5>Cloud API &amp; Dashboard</h5><p>Our cloud-hosted management interface is fully open source. Delve into our secure remote connection orchestration or fork it to build specialized workflows and unique integrations.</p></div><div><h5>Documentation</h5><p>Complete transparency includes in-depth documentation, all open source. Contribute directly to help maintain clarity or even add tutorials.</p></div><div><h5>Core System</h5><p>Minimal Linux system built with BusyBox for core utilities. No bloat or unnecessary services - just the essential components needed for stable remote access.</p></div></div></div><div><h2>Universally loved</h2><p>Every single tech reviewer who's tested JetKVM has given it a glowing review. No exceptions. From professional data centers to home labs, the verdict is unanimous: this is the remote access solution the tech world has been waiting for.</p></div><div><h2>Unlimited Hackability</h2><p>The JetKVM hardware is fully customizable. Through the RJ12 extension port, extra hardware capabilities can easily be added by anyone. The JetKVM extension port is the way to fully customize your device.</p></div><div><h2>Seamless Remote Control</h2><p>Experience fluid control and crystal-clear video quality that makes remote access feel local. Perfect for IT professionals, developers, and power users who demand responsive remote management.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[fnox, a secret manager that pairs well with mise (113 pts)]]></title>
            <link>https://github.com/jdx/mise/discussions/6779</link>
            <guid>45722931</guid>
            <pubDate>Mon, 27 Oct 2025 16:29:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/jdx/mise/discussions/6779">https://github.com/jdx/mise/discussions/6779</a>, See on <a href="https://news.ycombinator.com/item?id=45722931">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="presentation" data-paste-markdown-skip="">
    <tbody data-target-translation-id="9073537" data-target-translation-type="discussion">
        <tr>
    <td>
        <p dir="auto">I'm excited to announce <strong><a href="https://github.com/jdx/fnox">fnox</a></strong> – a new secret management tool designed to work seamlessly alongside mise in your development workflow.</p>
<p dir="auto">While it's brand new, I have labeled it 1.0 since it seems pretty feature complete and given my experience with several experiments with secrets over the years with mise, I think will be a lot more stable than its young age would indicate.</p>
<h2 dir="auto">What is fnox?</h2>
<p dir="auto">fnox (think "Fort Knox") is a command-line secret manager that handles encrypted and remote secrets for development, CI/CD, and production environments. It provides a unified interface for managing sensitive data through either local encryption or remote storage backends.</p>
<h2 dir="auto">Why fnox?</h2>
<p dir="auto">While mise has built-in secret support (age encryption and sops), these work best for simple, file-based scenarios. For more complex production needs, fnox provides:</p>
<ul dir="auto">
<li><strong>Remote storage</strong> in cloud providers (AWS Secrets Manager, Azure Key Vault) or password managers (1Password, Bitwarden)</li>
<li><strong>Keychain support</strong> using local OS cred stores</li>
<li><strong>Remote encryption</strong> using cloud KMS services</li>
<li><strong>Team collaboration</strong> with per-user encryption keys</li>
<li><strong>Enterprise integration</strong> with HashiCorp Vault and other secret stores</li>
<li><strong>Real-time access</strong> without caching security concerns trying to do this in mise would've involved</li>
</ul>
<h3 dir="auto">🚀 <strong>Developer-Friendly</strong></h3>
<ul dir="auto">
<li><strong>Shell integration</strong>: Automatically loads secrets when you <code>cd</code> into directories</li>
<li><strong>Profile support</strong>: Different secret sets for prod, staging, dev</li>
<li><strong>Simple TOML config</strong>: Checked into git (no secrets in the file itself)</li>
<li><strong>Works offline</strong>: When using encryption providers</li>
</ul>
<h3 dir="auto">👥 <strong>Team-Ready</strong></h3>
<ul dir="auto">
<li>Multiple recipients can decrypt the same secrets</li>
<li>Each team member can use their own SSH/age keys or leverage KMS</li>
<li>No shared master passwords</li>
</ul>
<h2 dir="auto">Getting Started</h2>
<p dir="auto">Install fnox with mise:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ mise use -g fnox
$ fnox --version"><pre>$ <span>mise use -g fnox</span>
$ <span>fnox --version</span></pre></div>
<p dir="auto">Create your first secret:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ fnox init
$ fnox provider add age --id main --recipients ~/.ssh/id_ed25519.pub
$ fnox secret set API_KEY --value &quot;your-secret-value&quot; --provider main"><pre>$ <span>fnox init</span>
$ <span>fnox provider add age --id main --recipients <span>~</span>/.ssh/id_ed25519.pub</span>
$ <span>fnox secret <span>set</span> API_KEY --value <span><span>"</span>your-secret-value<span>"</span></span> --provider main</span></pre></div>
<p dir="auto">Use secrets in your workflow:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Export secrets as environment variables
$ fnox exec -- your-command

# Get a single secret
$ fnox get API_KEY

# Shell integration (auto-load secrets on cd)
$ fnox shell hook"><pre># <span>Export secrets as environment variables</span>
$ <span>fnox <span>exec</span> -- your-command</span>

# <span>Get a single secret</span>
$ <span>fnox get API_KEY</span>

# <span>Shell integration (auto-load secrets on cd)</span>
$ <span>fnox shell hook</span></pre></div>
<h2 dir="auto">How It Works with mise</h2>
<p dir="auto">fnox and mise work independently but complement each other:</p>
<ul dir="auto">
<li><strong>mise</strong>: Manages tools, tasks, and general environment variables</li>
<li><strong>fnox</strong>: Manages sensitive secrets with encryption and remote storage</li>
</ul>
<p dir="auto">A typical setup:</p>
<p dir="auto"><strong><code>mise.toml</code></strong>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[env]
NODE_ENV = &quot;development&quot;
DATABASE_HOST = &quot;localhost&quot;

[tools]
node = &quot;20&quot;
fnox = &quot;latest&quot;"><pre>[<span>env</span>]
<span>NODE_ENV</span> = <span><span>"</span>development<span>"</span></span>
<span>DATABASE_HOST</span> = <span><span>"</span>localhost<span>"</span></span>

[<span>tools</span>]
<span>node</span> = <span><span>"</span>20<span>"</span></span>
<span>fnox</span> = <span><span>"</span>latest<span>"</span></span></pre></div>
<p dir="auto"><strong><code>fnox.toml</code></strong>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[providers.age]
type = &quot;age&quot;
recipients = [&quot;age1ql3z7...&quot;]

[secrets]
DATABASE_PASSWORD = { provider = &quot;age&quot;, value = &quot;AGE-SECRET-KEY...&quot; }
API_KEY = { provider = &quot;1password&quot;, ref = &quot;op://dev/api/credential&quot; }"><pre>[<span>providers</span>.<span>age</span>]
<span>type</span> = <span><span>"</span>age<span>"</span></span>
<span>recipients</span> = [<span><span>"</span>age1ql3z7...<span>"</span></span>]

[<span>secrets</span>]
<span>DATABASE_PASSWORD</span> = { <span>provider</span> = <span><span>"</span>age<span>"</span></span>, <span>value</span> = <span><span>"</span>AGE-SECRET-KEY...<span>"</span></span> }
<span>API_KEY</span> = { <span>provider</span> = <span><span>"</span>1password<span>"</span></span>, <span>ref</span> = <span><span>"</span>op://dev/api/credential<span>"</span></span> }</pre></div>
<p dir="auto">Then use both together:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$ mise x -- fnox x -- npm start"><pre>$ <span>mise x -- fnox x -- npm start</span></pre></div>
<p dir="auto">Or you can activate one or the other in your shell to avoid that.</p>
<h2 dir="auto">Why Separate Tools?</h2>
<p dir="auto">You might wonder why fnox isn't built into mise. The answer comes down to fundamental architectural constraints:</p>
<p dir="auto"><strong>The Performance Problem</strong>: mise reloads its environment frequently (on directory changes, after commands, etc.). If secrets relied on remote calls to services like KMS or 1Password, each reload would require network requests, making mise unacceptably slow.</p>
<p dir="auto"><strong>The Security Tradeoff</strong>: Caching could solve the performance issue, but introduces security risks:</p>
<ul dir="auto">
<li>Where do you store encrypted cache files safely?</li>
<li>Where do you put the encryption keys needed to decrypt those caches?</li>
<li>How do you prevent cache files from becoming a security vulnerability?</li>
</ul>
<p dir="auto"><strong>The Architecture Challenge</strong>: Making mise skip reloading certain env vars would require a major architectural overhaul—a change that would complicate the codebase significantly.</p>
<p dir="auto">By creating fnox as a separate tool with its own shell integration, we avoid these problems entirely. Each tool can focus on what it does best:</p>
<ul dir="auto">
<li><strong>mise</strong>: Fast environment management with aggressive caching</li>
<li><strong>fnox</strong>: Secure secret management with real-time access to remote providers</li>
</ul>
<blockquote>
<p dir="auto"><strong>Note</strong>: For more context on this architectural decision, see the <a href="https://github.com/jdx/mise/discussions/3712" data-hovercard-type="discussion" data-hovercard-url="/jdx/mise/discussions/3712/hovercard">vaults/secrets management discussion</a>.</p>
</blockquote>
<h2 dir="auto">What's going to happen to mise secrets?</h2>
<p dir="auto">They're still marked as experimental so the future is technically up in the air. That said, mise does work well for age/sops encryption so I think it could probably come out of experimental. For now, I don't have plans to introduce remote secret backends like fnox provides.</p>
<h2 dir="auto">Learn More</h2>
<ul dir="auto">
<li><strong>GitHub</strong>: <a href="https://github.com/jdx/fnox">https://github.com/jdx/fnox</a></li>
<li><strong>Documentation</strong>: <a href="https://github.com/jdx/fnox#readme">https://github.com/jdx/fnox#readme</a></li>
<li><strong>mise Registry</strong>: Now available as <code>mise use fnox</code></li>
</ul>
    </td>
  </tr>

    </tbody>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Claude for Excel (427 pts)]]></title>
            <link>https://www.claude.com/claude-for-excel</link>
            <guid>45722639</guid>
            <pubDate>Mon, 27 Oct 2025 16:09:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.claude.com/claude-for-excel">https://www.claude.com/claude-for-excel</a>, See on <a href="https://news.ycombinator.com/item?id=45722639">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main"><div id="w-node-_3a6d922b-481c-8223-f125-4a2683463b8a-e42aa0aa" data-prevent-flicker="true" data-animate-hero-wrap="" data-wf--section-hero-2-col--section-theme="inherit"><div data-animate-hero-heading=""><p>Piloting Claude for Excel</p></div><div data-animate-hero-text=""><p>Claude understands your entire workbook—from nested formulas to multiple tab dependencies. Get explanations with cell-level citations, and update assumptions while preserving formulas. Now in beta as a research preview.</p></div></div><div data-wf--content-wrapper--alignment="inherit" data-wf--section--theme="white" id=""><div data-animate-header-wrap="" data-wf--module-header-main--styles-style="h2"><p>Claude listens carefully, follows instructions precisely,  and thinks through complex problems.</p></div><div id=""><p><img src="https://cdn.prod.website-files.com/6889473510b50328dbb70ae6/68fa94dc16356da66436a5f4_5119f756e464e5db496beaf87894fa3d_claude-excel.avif" loading="lazy" alt="" sizes="(max-width: 1375px) 100vw, 1375px" srcset="https://cdn.prod.website-files.com/6889473510b50328dbb70ae6/68fa94dc16356da66436a5f4_5119f756e464e5db496beaf87894fa3d_claude-excel-p-500.avif 500w, https://cdn.prod.website-files.com/6889473510b50328dbb70ae6/68fa94dc16356da66436a5f4_5119f756e464e5db496beaf87894fa3d_claude-excel-p-800.avif 800w, https://cdn.prod.website-files.com/6889473510b50328dbb70ae6/68fa94dc16356da66436a5f4_5119f756e464e5db496beaf87894fa3d_claude-excel-p-1080.avif 1080w, https://cdn.prod.website-files.com/6889473510b50328dbb70ae6/68fa94dc16356da66436a5f4_5119f756e464e5db496beaf87894fa3d_claude-excel-p-1600.avif 1600w, https://cdn.prod.website-files.com/6889473510b50328dbb70ae6/68fa94dc16356da66436a5f4_5119f756e464e5db496beaf87894fa3d_claude-excel-p-2000.avif 2000w, https://cdn.prod.website-files.com/6889473510b50328dbb70ae6/68fa94dc16356da66436a5f4_5119f756e464e5db496beaf87894fa3d_claude-excel.avif 2388w"></p></div><div data-wf--grid--column-count="4" data-animate-card-wrap=""><div data-animate-card-card="" data-slider-card="" data-wf--card-feature--variant="heading-below"><div><h3>Get answers about any cell in seconds</h3></div><p>Navigate complex models instantly. Ask Claude about specific formulas, entire worksheets, or calculation flows across tabs. Every explanation includes cell-level citations so you can verify the logic.</p></div><div data-animate-card-card="" data-slider-card="" data-wf--card-feature--variant="heading-below"><div><h3>Test scenarios without breaking formulas</h3></div><p>Update assumptions across your entire model while preserving all dependencies. Test different scenarios quickly—Claude highlights every change with explanations for full transparency.</p></div><div data-animate-card-card="" data-slider-card="" data-wf--card-feature--variant="heading-below"><div><h3>Debug and fix errors</h3></div><p>Trace #REF!, #VALUE!, and circular reference errors to their source in seconds. Claude explains what went wrong and how to fix it without disrupting the rest of your model.</p></div><div data-animate-card-card="" data-slider-card="" data-wf--card-feature--variant="heading-below"><div><h3>Build models or fill existing templates</h3></div><p>Create draft financial models from scratch based on your requirements. Or populate existing templates with fresh data while maintaining all formulas and structure.</p></div></div></div><div data-animate-card-wrap="" data-wf--content-wrapper--alignment="inherit" data-wf--section--theme="ivory" id=""><div><div data-animate-card-card=""><p>See Claude’s changes in real time with explanations</p></div><div data-animate-card-card=""><p>Maintain Excel model structure and formatting</p></div><div data-animate-card-card=""><p>Works within your existing compliance framework</p></div></div><div data-aside-rail=""><div><article data-animate-card-card="" data-aside-card=""><div><p>What assumptions drive the revenue forecast in Q3?</p></div></article></div><div><article data-animate-card-card="" data-aside-card=""><div><p>Increase revenue growth by 2% and show the impact on terminal value.</p></div></article></div><div><article data-animate-card-card="" data-aside-card=""><div><p>Why is the NPV calculation returning #VALUE! in cell G145?</p></div></article></div></div></div><div data-accordion="wrap" role="list" data-close-previous="true" data-close-on-second-click="true" data-open-on-hover="false" data-open-by-default="0" data-animate-card-wrap="" data-wf--content-wrapper--alignment="inherit" data-wf--section--theme="white" id=""><div data-cta-copy="Where is this available?" data-accordion="component" data-cta="Claude and Slack page" data-cta-position="FAQ section" role="listitem"><h3></h3><div data-accordion="content"><p>Claude for Excel is available in beta as a research preview through a waitlist for 1,000 Max, Team and Enterprise plan customers. We’ll gradually expand access as we build confidence through this limited preview.</p></div></div><div data-cta-copy="What are the security risks I should know about?" data-accordion="component" data-cta="Claude and Slack page" data-cta-position="FAQ section" role="listitem"><h3></h3><div data-accordion="content"><p>Claude for Excel works within your existing security framework. Claude can make mistakes, so you should always review changes before finalizing, especially for client-facing deliverables.</p></div></div><div data-cta-copy="Are there any limitations to Claude for Excel?" data-accordion="component" data-cta="Claude and Slack page" data-cta-position="FAQ section" role="listitem"><h3></h3><div data-accordion="content"><p>Claude for Excel is currently in beta as a research preview, so it’s best for model analysis, assumption updates, error debugging, template population, formula explanations, multi-tab navigation. Claude doesn’t have advanced Excel capabilities including pivot tables, conditional formatting, data validation, data tables, macros, and VBA. We’re actively working on these features.</p></div></div><div data-cta-copy="Does Claude understand financial modeling conventions?" data-accordion="component" data-cta="Claude and Slack page" data-cta-position="FAQ section" role="listitem"><h3></h3><div data-accordion="content"><p>Yes, Claude is trained to recognize common financial modeling patterns, formula structures, and industry-standard calculations. However, always verify outputs match your specific methodologies.</p></div></div><div data-cta-copy="What file formats are supported?" data-accordion="component" data-cta="Claude and Slack page" data-cta-position="FAQ section" role="listitem"><h3></h3><div data-accordion="content"><p>Currently .xlsx and .xlsm files are supported. File size limits apply based on your Claude plan.</p></div></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[It's insulting to read AI-generated blog posts (810 pts)]]></title>
            <link>https://blog.pabloecortez.com/its-insulting-to-read-your-ai-generated-blog-post/</link>
            <guid>45722069</guid>
            <pubDate>Mon, 27 Oct 2025 15:27:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.pabloecortez.com/its-insulting-to-read-your-ai-generated-blog-post/">https://blog.pabloecortez.com/its-insulting-to-read-your-ai-generated-blog-post/</a>, See on <a href="https://news.ycombinator.com/item?id=45722069">Hacker News</a></p>
<div id="readability-page-1" class="page">
  
  <header>
    <a href="https://blog.pabloecortez.com/">
      <h2>
        pablog
      </h2>
    </a>
    <nav>
      <p><a href="https://blog.pabloecortez.com/">Home</a> <a href="https://blog.pabloecortez.com/blog">Blog</a></p>

    </nav>
  </header>
  <main>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2025-10-24T21:02Z">
                    24 Oct 2025
                </time>
            </i>
        </p>
    

    <p>It seems so rude and careless to make me, a person with thoughts, ideas, humor, contradictions and life experience to read something spit out by the equivalent of a lexical bingo machine because you were too lazy to write it yourself.</p>
<p>Do you not enjoy the pride that comes with attaching your name to something you made on your own? It's great!</p>
<p>No, don't use it to fix your grammar, or for translations, or for whatever else you think you are incapable of doing. Make the mistake. Feel embarrassed. Learn from it. Why? Because that's what makes us human!</p>
<p>Everyone wants to help each other. And people are far kinder than you may think. By adding a sterile robo-liaison between yourself and your readers, you don't give us a chance to engage with you.</p>
<p>Here is a secret: most people want to help you succeed. The problem is that you, yes, <em>you</em> are too afraid to ask for help. You think smart, capable people don't ask for help because they should know it all. Wrooooooooong. On the contrary, smart people know when to ask for help and when to give it too. They create mutually beneficial relationships with the people surrounding them.</p>
<p>I ask you, human to human, both as beings capable of love and fear and humor and all the other great feelings we have cultivated for thousands of years: leave the AI to your quantitative tasks if you have to use it at all. Face the world with your thoughts and strengthen them through real-world experience.  The best thoughts are the ones that have been <em>felt</em>, anyway.</p>


    

    
        

        
            


        
    


  </main>
  

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[PSF has withdrawn $1.5M proposal to US Government grant program (454 pts)]]></title>
            <link>https://pyfound.blogspot.com/2025/10/NSF-funding-statement.html</link>
            <guid>45721904</guid>
            <pubDate>Mon, 27 Oct 2025 15:12:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pyfound.blogspot.com/2025/10/NSF-funding-statement.html">https://pyfound.blogspot.com/2025/10/NSF-funding-statement.html</a>, See on <a href="https://news.ycombinator.com/item?id=45721904">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-6987768209724422979" itemprop="description articleBody">
<p>In January 2025, the PSF submitted a proposal to the US government National Science Foundation under the <a href="https://www.nsf.gov/funding/opportunities/safe-ose-safety-security-privacy-open-source-ecosystems" target="_blank">Safety, Security, and Privacy of Open Source Ecosystems program</a> to address structural vulnerabilities in Python and PyPI. It was the PSF’s first time applying for government funding, and navigating the intensive process was a steep learning curve for our small team to climb. Seth Larson, PSF Security Developer in Residence, serving as Principal Investigator (PI) with Loren Crary, PSF Deputy Executive Director, as co-PI, led the multi-round proposal writing process as well as the months-long vetting process. We invested our time and effort because we felt the PSF’s work is a strong fit for the program and that the benefit to the community if our proposal were accepted was considerable.&nbsp;&nbsp;</p><div><p>We were honored when, after many months of work, our proposal was recommended for funding, particularly as only <a href="https://www.nsf.gov/funding/overview" target="_blank">36% </a>of new NSF grant applicants are successful on their first attempt. We became concerned, however, when we were presented with the terms and conditions we would be required to agree to if we accepted the grant. These terms included affirming the statement that we “do not, and will not during the term of this financial assistance award, operate any programs that advance or promote DEI, or discriminatory equity ideology in violation of Federal anti-discrimination laws.” This restriction would apply not only to the security work directly funded by the grant, <b>but to any and all activity of the PSF as a whole</b>. Further, violation of this term gave the NSF the right to “claw back” previously approved and transferred funds. This would create a situation where money we’d already spent could be taken back, which would be an enormous, open-ended financial risk.&nbsp; &nbsp;</p></div><p>Diversity, equity, and inclusion are core to the PSF’s values, as committed to in our <a href="https://www.python.org/psf/mission/" target="_blank">mission statement</a>:&nbsp;</p><blockquote><div><p><i>The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of <b>a diverse and international community</b> of Python programmers.</i></p></div></blockquote><div><p>Given the value of the grant to the community and the PSF, we did our utmost to get clarity on the terms and to find a way to move forward in concert with our values. We consulted our NSF contacts and reviewed decisions made by other organizations in similar circumstances, particularly <a href="https://carpentries.org/blog/2025/06/announcing-withdrawal-of-nsf-pose-proposal/" target="_blank">The Carpentries</a>.&nbsp;&nbsp;</p></div><div><p>In the end, however, the PSF simply can’t agree to a statement that we won’t operate any programs that “advance or promote” diversity, equity, and inclusion, as it would be a betrayal of our mission and our community.&nbsp;</p></div><div><p>We’re disappointed to have been put in the position where we had to make this decision, because we believe our proposed project would offer invaluable advances to the Python and greater open source community, protecting millions of PyPI users from attempted supply-chain attacks. The proposed project would create new tools for automated proactive review of all packages uploaded to PyPI, rather than the current process of reactive-only review. These novel tools would rely on capability analysis, designed based on a dataset of known malware. Beyond just protecting PyPI users, the outputs of this work could be transferable for all open source software package registries, such as NPM and Crates.io, improving security across multiple open source ecosystems.</p></div><div><p>In addition to the security benefits, the grant funds would have made a big difference to the PSF’s budget. The PSF is a relatively small organization, operating with an annual budget of around $5 million per year, with a staff of just 14. $1.5 million over two years would have been quite a lot of money for us, and easily the largest grant we’d ever received. Ultimately, however, the value of the work and the size of the grant were not more important than practicing our values and retaining the freedom to support every part of our community. The PSF Board voted unanimously to withdraw our application.&nbsp;</p></div><div><p>Giving up the NSF grant opportunity—along with inflation, lower sponsorship, economic pressure in the tech sector, and global/local uncertainty and conflict—means the PSF needs financial support now more than ever. We are incredibly grateful for any help you can offer. If you're already a PSF member or regular donor, you have our deep appreciation, and we urge you to share your story about why you support the PSF. Your stories make all the difference in spreading awareness about the mission and work of the PSF.&nbsp;</p></div><div><ul><li><a href="https://psfmember.org/civicrm/contribute/transact/?reset=1&amp;id=1">Become a Member</a>: When you sign up as a Supporting Member of the PSF, you become a part of the PSF. You’re eligible to vote in PSF elections, using your voice to guide our future direction, and you help us sustain what we do with your annual support.</li><li><a href="https://psfmember.org/civicrm/contribute/transact/?reset=1&amp;id=2">Donate</a>: Your donation makes it possible to continue our work supporting Python and its community, year after year.</li><li><a href="https://www.python.org/sponsors/application/">Sponsor</a>: If your company uses Python and isn’t yet a sponsor, send them our <a href="https://www.python.org/sponsors/application/">sponsorship page</a> or reach out to sponsors@python.org today. The PSF is ever grateful for our sponsors, past and current, and we do everything we can to make their sponsorships beneficial and rewarding.</li></ul></div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pyrex catalog from from 1938 with hand-drawn lab glassware [pdf] (253 pts)]]></title>
            <link>https://exhibitdb.cmog.org/opacimages/Images/Pyrex/Rakow_1000132877.pdf</link>
            <guid>45721801</guid>
            <pubDate>Mon, 27 Oct 2025 15:04:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://exhibitdb.cmog.org/opacimages/Images/Pyrex/Rakow_1000132877.pdf">https://exhibitdb.cmog.org/opacimages/Images/Pyrex/Rakow_1000132877.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=45721801">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft in court for allegedly misleading Australians over 365 subscriptions (239 pts)]]></title>
            <link>https://www.accc.gov.au/media-release/microsoft-in-court-for-allegedly-misleading-millions-of-australians-over-microsoft-365-subscriptions</link>
            <guid>45721682</guid>
            <pubDate>Mon, 27 Oct 2025 14:54:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.accc.gov.au/media-release/microsoft-in-court-for-allegedly-misleading-millions-of-australians-over-microsoft-365-subscriptions">https://www.accc.gov.au/media-release/microsoft-in-court-for-allegedly-misleading-millions-of-australians-over-microsoft-365-subscriptions</a>, See on <a href="https://news.ycombinator.com/item?id=45721682">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>The ACCC has commenced proceedings in the Federal Court against Microsoft Australia and its parent company Microsoft Corporation for allegedly misleading approximately 2.7 million Australian customers when communicating subscription options and price increases, after it integrated its AI assistant, Copilot, into Microsoft 365 plans.&nbsp;</p>

<p>The ACCC alleges that since 31 October 2024, Microsoft has told subscribers of Microsoft 365 Personal and Family plans with auto-renewal enabled that to maintain their subscription they must accept the integration of Copilot and pay higher prices for their plan, or, alternatively, cancel their subscription.</p>

<p>The ACCC alleges this information provided to subscribers was false or misleading because there was an undisclosed third option, the Microsoft 365 Personal or Family Classic plans, which allowed subscribers to retain the features of their existing plan, without Copilot, at the previous lower price.</p>

<p>Microsoft’s communication with subscribers did not refer to the existence of the “Classic” plans, and the only way subscribers could access them was to begin the process of cancelling their subscription. This involved navigating to the subscriptions section of their Microsoft account and selecting “Cancel subscription”. It was only on the following page that subscribers were given the option to instead move to the Classic plan.&nbsp;See a <a href="#screenshot-page">screenshot of the cancellation page revealing the Classic plan</a>.</p>

<p>“Following a detailed investigation, we will allege in Court that Microsoft deliberately omitted reference to the Classic plans in its communications and concealed their existence until after subscribers initiated the cancellation process to increase the number of consumers on more expensive Copilot-integrated plans,” ACCC Chair Gina Cass-Gottlieb said.</p>

<p>“The Microsoft Office apps included in 365 subscriptions are essential in many people’s lives and given there are limited substitutes to the bundled package, cancelling the subscription is a decision many would not make lightly.”</p>

<p>“We’re concerned that Microsoft’s communications denied its customers the opportunity to make informed decisions about their subscription options, which included the possibility of retaining all the features of their existing plan without Copilot and at the lower price,” Ms Cass-Gottlieb said.</p>

<p>“We believe many Microsoft 365 customers would have opted for the Classic plan had they been aware of all the available options.”</p>

<p>Following the integration of Copilot, the annual subscription price of the Microsoft 365 Personal plan increased by 45 per cent from $109 to $159. The annual subscription price for the Microsoft 365 Family plan increased by 29 per cent from $139 to $179.</p>

<p>Microsoft sent two emails and published a blog post to inform auto-renewing subscribers (as of 31 October 2024) about the Copilot integration and the impending price increase that would apply at their next renewal. These three pieces of communication are central to the ACCC’s case.</p>

<p>“We allege that Microsoft’s two emails to existing subscribers and the blog post were false or misleading as they conveyed that consumers had to accept the more expensive Copilot-integrated plans, and that the only other option was to cancel,” Ms Cass-Gottlieb said.</p>

<p>“All businesses need to provide accurate information about their services and prices. Failure to do so risks breaching the Australian Consumer Law,” Ms Cass-Gottlieb said.</p>

<p>In establishing its investigation into this matter, the ACCC drew on a significant number of consumer reports, as well as commentary in online forums such as Reddit. Information provided by consumers to the ACCC’s Infocentre was critical to alerting the ACCC to the alleged conduct, particularly in identifying the availability of the Classic plan through subscribers’ cancellation flows.</p>

<p>The ACCC is seeking orders including penalties, injunctions, declarations, consumer redress, and costs.</p>

<h2>Consumer response</h2>

<p>The ACCC believes the millions of Australian consumers who were allegedly misled by Microsoft about the availability of the Classic plan may have suffered economic harm through the automatic renewal of their subscription with Copilot integration at a higher price.</p>

<p>The ACCC is seeking consumer redress in this case for Microsoft 365 Personal and Family subscribers affected by the alleged conduct.</p>

<p>Existing Microsoft 365 Personal and Family subscribers who have not had their subscription renewed since 8 July 2025 and would like to revert to their previous plan may be able to select the cancel option and follow the steps in the cancellation process until the Classic plan is offered. However, the ACCC notes that the subscription options and prices offered are entirely in Microsoft’s control and could be subject to change at any time.</p>

<h2><strong>Example timeline for a subscriber on a Microsoft 365 Personal plan </strong></h2>

<ul>
<li>On 19 April 2024, a consumer purchased an annual Microsoft 365 Personal subscription for $109 and enabled auto-renewal for one year’s time.</li>
<li>On 31 October 2024, Microsoft published a blog post in which it stated:
<ul>
<li>“<i>To reflect the value we’ve added over the past decade and enable us to deliver new innovations for years to come, we’re increasing the prices of Microsoft 365 Personal and Family. The price increase will apply to existing subscribers upon their next renewal.</i>”</li>
</ul>
</li>
<li>On 9 January 2025, the consumer received an email informing them that AI features were being added to their plan and the price of the annual subscription would increase from $109 to $159 starting on 19 April 2025.&nbsp;See a <a href="#screenshot-email">screenshot of the first email sent to the consumers about the price increase</a>.</li>
<li>On 13 April 2025, 7 days before their renewal date, the consumer received a second email in which Microsoft stated:
<ul>
<li>“<i>We want to let you know about a change to the amount of your next payment. Unless you cancel two days before Saturday, April 19 2025, we’ll charge AUD 159.00 including taxes every year… We’ll tell you if this price ever changes. Cancel any time to stop future charges or change how you pay by managing your subscription in your Microsoft account.</i>”</li>
</ul>
</li>
<li>On 19 April 2025, the consumer's subscription was automatically renewed at the increased price of $159.&nbsp; The consumer was not aware that switching to the Classic plan at the existing subscription price of $109 was possible.</li>
</ul>

<h2>Screenshots showing the communications with subscribers</h2>

<h3><a name="screenshot-email"></a>Email sent to subscribers informing them of the Copilot integration and price increase</h3>

<p><img src="https://www.accc.gov.au/sites/www.accc.gov.au/files/2025-10/ms-email-accc-capture.jpg" width="2481" height="2429" alt="Example of the email informing subscribers that AI features were being added to their plan and the price of their annual subscription would increase from $109 to $159 on their next renewal." title="Email sent to subscribers informing them of the Copilot integration and price increase" loading="lazy">



</p>

<h3><a name="screenshot-page"></a>The page late in the cancellation process revealing the Classic plan</h3>

<p><img src="https://www.accc.gov.au/sites/www.accc.gov.au/files/2025-10/ms-cancellation-screen-accc-capture.jpg" width="961" height="1117" alt="This page late in the cancellation process reveals to subscribers the option to move to the Classic plan." title="The page late in the cancellation process revealing the Classic plan" loading="lazy">



</p>

<p>A subscriber only saw this screen once they had navigated to the subscriptions section of their Microsoft account, selected “Cancel subscription”, and continued with the cancellation process.</p>

<h2>Background</h2>

<p>Microsoft Pty Ltd (Microsoft AU) is an Australian proprietary company, and a wholly owned subsidiary of the Microsoft Corporation (Microsoft US), a US-based technology conglomerate. Microsoft AU is the supplier of Microsoft’s proprietary software in Australia, including Microsoft 365 plans.</p>

<p>The ACCC alleges Microsoft US was responsible for preparing and publishing the communications to Australian Microsoft 365 subscribers containing the misrepresentations alleged by the ACCC. The ACCC alleges that Microsoft AU adopted the communications as the seller of Microsoft 365 subscriptions to Australian consumers.</p>

<p>The ACCC’s case only relates to Microsoft 365 Personal and Family plans, which are designed for home use. The case does not involve Microsoft 365 subscriptions for business or enterprise.</p>

<p>Microsoft 365 Personal and Family offerings are supplied on a monthly or annual subscription basis, and are comprised of:</p>

<ul>
<li>software products, such as Word, Excel, PowerPoint and OneNote</li>
<li>collaboration and communication applications like Outlook, Teams and SharePoint</li>
<li>cloud-based services through OneDrive.</li>
</ul>

<p>Microsoft launched Copilot as its consumer-facing generative AI product in 2023. Copilot was integrated into Microsoft 365 Personal and Family subscriptions in Australia on 31&nbsp;October 2024.</p>

<p>In January 2025, the Copilot integration was rolled out across Microsoft 365 worldwide, with varying subscription price increases applying to each jurisdiction.</p>

<p>Competition, product safety, consumer and fair trading issues in the digital economy is a current ACCC <a href="https://www.accc.gov.au/about-us/accc-priorities/compliance-and-enforcement-priorities">compliance and enforcement priority</a>.</p>

<h3>Maximum penalties</h3>

<p>For corporations, the maximum penalty for each breach of the Australian Consumer Law is the greater of:</p>

<ul>
<li>$50 million</li>
<li>three times the total benefits that have been obtained and are reasonably attributable, or</li>
<li>if the total value of the benefits cannot be determined, 30 per cent of the corporation’s adjusted turnover during the breach turnover period.</li>
</ul>

<p>Any penalty that might apply to this conduct is a matter for the Court to determine and would depend on the Court’s findings. The ACCC will not comment on what penalties the Court may impose.</p>

<h3>Concise statement</h3>

<p><span>
  
  <a href="https://www.accc.gov.au/system/files/accc-v-microsoft-concise-statement-27-october-2025.pdf">
  ACCC v Microsoft Concise Statement 27 October 2025</a>
  <span>
    (    <a href="https://www.accc.gov.au/system/files/accc-v-microsoft-concise-statement-27-october-2025.pdf">PDF 1.6 MB</a>     )
  </span>
</span>
</p>

<p>This document contains the ACCC’s initiating court documents in relation to this matter. We will not be uploading further documents in the event these initial documents are subsequently amended.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[10M people watched a YouTuber shim a lock; the lock company sued him – bad idea (703 pts)]]></title>
            <link>https://arstechnica.com/tech-policy/2025/10/suing-a-popular-youtuber-who-shimmed-a-130-lock-what-could-possibly-go-wrong/</link>
            <guid>45720376</guid>
            <pubDate>Mon, 27 Oct 2025 12:42:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/tech-policy/2025/10/suing-a-popular-youtuber-who-shimmed-a-130-lock-what-could-possibly-go-wrong/">https://arstechnica.com/tech-policy/2025/10/suing-a-popular-youtuber-who-shimmed-a-130-lock-what-could-possibly-go-wrong/</a>, See on <a href="https://news.ycombinator.com/item?id=45720376">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">
            <article data-id="2123501">
  
  <header>
  <div>
    

    

    <p>
      It’s still legal to pick locks, even when you swing your legs.
    </p>

    

    <div>
            <p><a data-pswp-width="2463" data-pswp-height="1385" data-pswp-srcset="https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death.jpg 2463w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-640x360.jpg 640w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-1024x576.jpg 1024w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-768x432.jpg 768w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-1536x864.jpg 1536w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-2048x1152.jpg 2048w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-384x216.jpg 384w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-1152x648.jpg 1152w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-980x551.jpg 980w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-1440x810.jpg 1440w" data-cropped="false" href="https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death.jpg" target="_blank">
              <img width="2463" height="1385" src="https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death.jpg" alt="" loading="eager" decoding="async" fetchpriority="high" srcset="https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death.jpg 2463w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-640x360.jpg 640w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-1024x576.jpg 1024w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-768x432.jpg 768w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-1536x864.jpg 1536w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-2048x1152.jpg 2048w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-384x216.jpg 384w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-1152x648.jpg 1152w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-980x551.jpg 980w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-1440x810.jpg 1440w" sizes="(max-width: 2463px) 100vw, 2463px">
            </a></p>
          </div>

    
  </div>
</header>


  

  
      
    
    <div>
                      
                      
          
<p>“Opening locks” might not sound like scintillating social media content, but Trevor McNally has turned lock-busting into online gold. A former US Marine Staff Sergeant, McNally today has more than 7 million followers and has amassed more than 2 billion views just by showing how easy it is to open many common locks by slapping, picking, or shimming them.</p>
<p>This does not always endear him to the companies that make the locks.</p>
<p>On March 3, 2025, a Florida lock company called Proven Industries released a social media promo video just begging for the McNally treatment. The video was called, somewhat improbably, “YOU GUYS KEEP SAYING YOU CAN EASILY BREAK OFF OUR LATCH PIN LOCK.” In it, an enthusiastic man in a ball cap says he will “prove a lot of you haters wrong.” He then goes hard at Proven’s $130 model 651 trailer hitch lock with a sledgehammer, bolt cutters, and a crowbar.</p>
<p>Naturally, the lock hangs tough.</p>
<p>An Instagram user brought the lock to McNally’s attention by commenting, “Let’s introduce it to the @mcnallyofficial poke.” Someone from Proven responded, saying that McNally only likes “the cheap locks lol because they are easy and fast.” Proven locks were said to be made of sterner stuff.</p>
<p>But on April 3, McNally posted a <a href="https://www.youtube.com/shorts/YjzlmKz_MM8">saucy little video</a> to social media platforms. In it, he watches the Proven promo video while swinging his legs and drinking a Juicy Juice. He then hops down from his seat, goes over to a Proven trailer hitch lock, and opens it in a matter of seconds using nothing but a shim cut from a can of <a href="https://liquiddeath.com/">Liquid Death</a>. He says nothing during the entire video, which has been viewed nearly 10 million times on YouTube alone.</p>

          
                      
                  </div>
                    
        
          
    
    <div>
          
          
<p>Despite practically begging people to attempt this, Proven Industries owner Ron Lee contacted McNally on Instagram. “Just wanted to say thanks and be prepared!” he wrote. McNally took this as a threat.</p>
<p>(Oddly enough, Proven’s own homepage <a href="https://www.youtube.com/watch?v=gIajKFBtq28&amp;t=3s">features a video</a> in which the company trashes competing locks and shows just how easy it is to defeat them. And its news pages contain <a href="https://www.provenlocks.com/blogs/news/master-lock-failure-reasons">articles</a> and videos on “The Hidden Flaws of Master Locks” and other brands. Why it got so upset about McNally’s video is unclear.)</p>
<p>The next day, Lee texted McNally’s wife. The message itself was apparently Lee’s attempt to de-escalate things; he says he thought the number belonged to McNally, and the message itself was unobjectionable. But after the “be prepared!” notice of the day before, and given the fact that Lee already knew how to contact him on Instagram, McNally saw the text as a way “to intimidate me and my family.” That feeling was cemented when McNally found out that Lee was a triple felon—and that in one case, Lee had hired someone “to throw a brick through the window of his ex-wife.”</p>
<p>Concerned about losing business, Lee kept trying to shut McNally down. Proven posted a “<a href="https://www.youtube.com/shorts/16nZqtT-1sI">response video</a>” on April 6 and engaged with numerous social media commenters, telling them that things were “going to get really personal” for McNally. Proven employees alleged publicly that McNally was deceiving people about all the prep work he had done to make a “perfectly cut out” shim. Without extensive experience, long prep work, and precise measurements, it was said, Proven’s locks were in little danger of being opened by rogue actors trying to steal your RV.</p>

          
                  </div>
                    
        
          
    
    <div>
          
          
<p>“Sucks to see how many people take everything they see online for face value,” one Proven employee wrote. “Sounds like a bunch of liberals lol.”</p>
<p>Proven also had its lawyers file “multiple” DMCA takedown notices against the McNally video, claiming that its use of Proven’s promo video was copyright infringement.</p>
<p>McNally didn’t bow to the pressure, though, instead uploading several more videos showing him opening Proven locks. In <a href="https://www.youtube.com/shorts/MbQp5JcQwLA">one of them</a>, he takes aim at Proven’s claims about his prep work by retrieving a new lock from an Amazon delivery kiosk, taking it outside—and popping it in seconds using a shim he cuts right on camera, with no measurements, from an aluminum can.</p>
<div>
    
          
<h2>Help us write more stories like this—while ditching ads</h2>
<p>Ars subscribers support our independent journalism, which they can read ad-free and with enhanced privacy protections. And it’s only a few bucks a month.<br>

    
    
    </p><div>
                                  
          
          
          
          <div>
            
            
            
            <p>
              Ars Pro
            </p>

            
            <p><span>
                $5</span>
              <span>/ month</span>
            </p>

            
            <p>
              Subscribe
            </p><div>
                              <ul>
                                                          <li>
                      No ads
                    </li>
                                                          <li>
                      No tracking
                    </li>
                                                          <li>
                      Enhanced experience
                    </li>
                                  </ul>
                          </div>
          </div>
                            
          
          
          
          <div>
            
                          <p>
                58.3333% off!
              </p>
            
            
            <p>
              Ars Pro
            </p>

            
            <p><span>
                $25</span>
              <span>/ year</span>
            </p>

            
            <p>
              Subscribe
            </p><div>
                              <ul>
                                                          <li>
                      Best value
                    </li>
                                                          <li>
                      Still no ads
                    </li>
                                                          <li>
                      Still no tracking
                    </li>
                                  </ul>
                          </div>
          </div>
                            
          
          
          
          <div>
            
            
            
            <p>
              Ars Pro++
            </p>

            
            <p><span>
                $50</span>
              <span>/ year</span>
            </p>

            
            <p>
              Subscribe
            </p><div>
                              <ul>
                                                          <li>
                      All Ars Pro features
                    </li>
                                                          <li>
                      Support journalism
                    </li>
                                                          <li>
                      Special ++ badge
                    </li>
                                  </ul>
                          </div>
          </div>
                            
                                          
                              
          </div>
  </div>


<p>On May 1, Proven filed a federal lawsuit against McNally in the Middle District of Florida, charging him with a huge array of offenses: (1) copyright infringement, (2) defamation by implication, (3) false advertising, (4) violating the Florida Deceptive and Unfair Trade Practices Act, (5) tortious interference with business relationships, (6) unjust enrichment, (7) civil conspiracy, <em>and</em> (8) trade libel. Remarkably, the claims stemmed from a video that all sides admit was accurate and in which McNally himself said nothing.</p>
<figure>
    <p><img width="640" height="383" src="https://cdn.arstechnica.net/wp-content/uploads/2025/10/they-like-cheap-locks-640x383.jpg" alt="Screenshot of a social media exchange." decoding="async" loading="lazy" srcset="https://cdn.arstechnica.net/wp-content/uploads/2025/10/they-like-cheap-locks-640x383.jpg 640w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/they-like-cheap-locks-1024x613.jpg 1024w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/they-like-cheap-locks-768x460.jpg 768w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/they-like-cheap-locks-1536x920.jpg 1536w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/they-like-cheap-locks-980x587.jpg 980w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/they-like-cheap-locks-1440x862.jpg 1440w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/they-like-cheap-locks.jpg 1954w" sizes="auto, (max-width: 640px) 100vw, 640px">
                  </p>
          <figcaption>
        <div>
    
    <p>
      In retrospect, this was probably not a great idea.

          </p>
  </div>
      </figcaption>
      </figure>

<h2>Don’t mock me, bro</h2>
<p>How can you defame someone without even speaking? Proven claimed “defamation by implication,” arguing that the whole setup of McNally’s videos was unfair to the company and its product. McNally does not show his prep work, which (Proven argued) conveys to the public the false idea that Proven’s locks are easy to bypass. While the shimming does work, Proven argued that it would be difficult for an untrained user to perform.</p>
<p>But what Proven really, <em>really</em> didn’t like was being mocked. McNally’s decision to drink—and shake!—a juice box on video comes up in court papers a mind-boggling number of times. Here’s a sample:</p>

          
                  </div>
                    
        
          
    
    <div>
          
          
<blockquote><p>McNally appears swinging his legs and sipping from an apple juice box, conveying to the purchasing public that bypassing Plaintiff’s lock is simple, trivial, and even comical…</p>
<p>…showing McNally drinking from, and shaking, a juice box, all while swinging his legs, and displaying the Proven Video on a mobile device…</p>
<p>The tone, posture, and use of the juice box prop and childish leg swinging that McNally orchestrated in the McNally Video was intentional to diminish the perceived seriousness of Proven Industries…</p>
<p>The use of juvenile imagery, such as sipping from a juice box while casually applying the shim, reinforces the misleading impression that the lock is inherently insecure and marketed deceptively…</p>
<p>The video then abruptly shifts to Defendant in a childlike persona, sipping from a juice box and casually applying a shim to the lock…</p></blockquote>
<p>In the end, Proven argued that the McNally video was “for commercial entertainment and mockery,” produced for the purpose of “humiliating Plaintiff.” McNally, it was said, “will not stop until he destroys Proven’s reputation.” Justice was needed. Expensive, litigious justice.</p>
<p>But the proverbially level-headed horde of Internet users does not always love it when companies file thermonuclear lawsuits against critics. Sometimes, in fact, the level-headed horde disregards everything taught by that fount of judicial knowledge, <a href="https://en.wikipedia.org/wiki/The_People%27s_Court"><em>The People’s Court</em></a>, and they take the law into their own hands.</p>
<p>Proven was soon the target of McNally fans. The company says it was “forced to disable comments on posts and product videos due to an influx of mocking and misleading replies furthering the false narrative that McNally conveyed to the viewers.” The company’s customer service department received such an “influx of bogus customer service tickets… that it is experiencing difficulty responding to legitimate tickets.”</p>

          
                  </div>
                    
        
          
    
    <div>
          
          
<figure>
    <p><img width="640" height="561" src="https://cdn.arstechnica.net/wp-content/uploads/2025/10/fooling-people-for-years-640x561.jpg" alt="Screenshot of a social media post from Proven Industries." decoding="async" loading="lazy" srcset="https://cdn.arstechnica.net/wp-content/uploads/2025/10/fooling-people-for-years-640x561.jpg 640w, https://cdn.arstechnica.net/wp-content/uploads/2025/10/fooling-people-for-years.jpg 660w" sizes="auto, (max-width: 640px) 100vw, 640px">
                  </p>
          <figcaption>
        <div>
    
    <p>
      Proven was quite proud of its lawsuit… at first.

          </p>
  </div>
      </figcaption>
      </figure>

<p>Someone posted Lee’s personal phone number to the comment section of a McNally video, which soon led to “a continuous stream of harassing phone calls and text messages from unknown numbers at all hours of the day and night,” which included “profanity, threats, and racially charged language.”</p>
<p>Lest this seem like mere high spirits and hijinks, Lee’s partner and his mother both “received harassing messages through Facebook Messenger,” while other messages targeted Lee’s son, saying things like “I would kill your f—ing n—– child” and calling him a “racemixing pussy.”</p>
<p>This is clearly terrible behavior; it also has no obvious connection to McNally, who did not direct or condone the harassment. As for Lee’s phone number, McNally said that he had nothing to do with posting it and wrote that “it is my understanding that the phone number at issue is publicly available on the Better Business Bureau website and can be obtained through a simple Google search.”</p>

<p>And this, with both sides palpably angry at each other, is how things stood on June 13 at 9:09 am, when the case got a hearing in front of the Honorable Mary Scriven, an extremely feisty federal judge in Tampa. Proven had demanded a preliminary injunction that would stop McNally from sharing his videos while the case progressed, but Proven had issues right from the opening gavel:</p>
<blockquote><p><strong>LAWYER 1:</strong> Austin Nowacki on behalf of Proven industries.<br>
<strong>THE COURT:</strong> I’m sorry. What is your name?<br>
<strong>LAWYER 1:</strong> Austin Nowacki.<br>
<strong>THE COURT:</strong> I thought you said Austin No Idea.<br>
<strong>LAWYER 2:</strong> That’s Austin Nowacki.<br>
<strong>THE COURT</strong>: All right.</p></blockquote>
<p>When Proven’s lead lawyer introduced a colleague who would lead that morning’s arguments, the judge snapped, “Okay. Then you have a seat and let her speak.”</p>

          
                  </div>
                    
        
          
    
    <div>
          
          
<p>Things went on this way for some time, as the judge wondered, “Did the plaintiff bring a lock and a beer can?” (The plaintiff did not.) She appeared to be quite disappointed when it was clear there would be no live shimming demonstration in the courtroom.</p>
<p>Then it was on to the actual arguments. Proven argued that the 15 seconds of its 90-second promo video used by McNally were not fair use, that McNally had defamed the company by implication, and that shimming its locks was actually quite difficult. Under questioning, however, one of Proven’s employees admitted that he had been able to duplicate McNally’s technique, leading to the question from McNally’s lawyer: “When you did it yourself, did it occur to you for one moment that maybe the best thing to do, instead of file a lawsuit, was to fix [the lock]?”</p>
<p>At the end of several hours of wrangling, the judge stepped in, saying that she “declines to grant the preliminary injunction motion.” For her to do so, Proven would have to show that it was likely to win at trial, among other things; it had not.</p>
<p>As for the big copyright infringement claim, of which Proven had made so much hay, the judge reached a pretty obvious finding: You’re allowed to quote snippets of copyrighted videos in order to critique them.</p>
<p>“The purpose and character of the use to which Mr. McNally put the alleged infringed work is transformative, artistic, and a critique,” said the judge. “He is in his own way challenging and critiquing Proven’s video by the use of his own video.”</p>
<p>As for the amount used, it was “substantial enough but no more than is necessary to make the point that he is trying to critique Proven’s video, and I think that’s fair game and a nominative fair use circumstance.”</p>

          
                  </div>
                    
        
          
    
    <div>
          
          
<p>While Proven <em>might</em> convince her otherwise after a full trial, “the copyright claim fails as a basis for a demand for preliminary injunctive relief.”</p>
<p>As for “tortious interference” and “defamation by implication,” the judge was similarly unimpressed.</p>
<p>“The fact that you might have a repeat customer who is dissuaded to buy your product due to a criticism of the product is not the type of business relationship the tortious interference with business relationship concept is intended to apply,” she said.</p>
<p>In the end, the judge said she would see the case through to its end, if that was really what everyone wanted, but “I will pray that you all come to a resolution of the case that doesn’t require all of this. This is a capitalist market and people say what they say. As long as it’s not false, they say what they say.”</p>
<p>She gave Proven until July 7 to amend its complaint if it wished.</p>
<p>On July 7, the company dismissed the lawsuit against McNally instead.</p>
<p>Proven also made a highly unusual request: Would the judge please seal almost the entire court record—including the request to seal?</p>

<p>Court records are presumptively public, but Proven complained about a “pattern of intimidation and harassment by individuals influenced by Defendant McNally’s content.” According to the company, a key witness had already backed out of the case, saying, “Is there a way to leave my name and my companies name out of this due to concerns of potential BLOW BACK from McNally or others like him?” Another witness, who did submit a declaration, wondered, “Is this going to be public? My concern is that there may be some backlash from the other side towards my company.”</p>

          
                  </div>
                    
        
          
    
    <div>

        
        <div>
          
          
<p>McNally’s lawyer laid into this seal request, pointing out that the company had shown no concern over these issues until it lost its bid for a preliminary injunction. Indeed, “Proven boasted to its social media followers about how it sued McNally and about how confident it was that it would prevail. Proven even encouraged people to search for the lawsuit.” Now, however, the company “suddenly discover[ed] a need for secrecy.”</p>
<p>The judge has not yet ruled on the request to seal.</p>
<h2>Another way</h2>
<p>The strange thing about the whole situation is that Proven actually knew how to respond constructively to the first McNally video. Its own <a href="https://www.youtube.com/shorts/16nZqtT-1sI">response video</a> opened with a bit of humor (the presenter drinks a can of Liquid Death), acknowledged the issue (“we’ve had a little bit of controversy in the last couple days”), and made clear that Proven could handle criticism (“we aren’t afraid of a little bit of feedback”).</p>
<p>The video went on to show how their locks work and provided some context on shimming attacks and their likelihood of real-world use. It ended by showing how users concerned about shimming attacks could choose more expensive but more secure lock cores that should resist the technique.</p>
<p>Quick, professional, non-defensive—a great way to handle controversy.</p>
<p>But it was all blown apart by the company’s angry social media statements, which were unprofessional and defensive, and the litigation, which was spectacularly ill-conceived as a matter of both law and policy. In the end, the case became a classic example of the <a href="https://en.wikipedia.org/wiki/Streisand_effect">Streisand Effect</a>, in which the attempt to censor information can instead call attention to it.</p>
<p>Judging from the number of times the lawsuit talks about 1) ridicule and 2) harassment, it seems like the case quickly became a personal one for Proven’s owner and employees, who felt either mocked or threatened. That’s understandable, but being mocked is not illegal and should never have led to a lawsuit or a copyright claim. As for online harassment, it remains a serious and unresolved issue, but launching a personal vendetta—and on pretty flimsy legal grounds—against McNally himself was patently unwise. (Doubly so given that McNally had a huge following and had already responded to DMCA takedowns by creating further videos on the subject; this wasn’t someone who would simply be intimidated by a lawsuit.)</p>
<p>In the end, Proven’s lawsuit likely cost the company serious time and cash—and generated little but bad publicity.</p>


          
                  </div>

                  
          






  <div>
          <p><a href="https://arstechnica.com/author/nate-anderson/"><img src="https://cdn.arstechnica.net/wp-content/uploads/2016/05/n.anderson-17.jpg" alt="Photo of Nate Anderson"></a></p>
  </div>


  <p>
    <a href="https://arstechnica.com/tech-policy/2025/10/suing-a-popular-youtuber-who-shimmed-a-130-lock-what-could-possibly-go-wrong/#comments" title="208 comments">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80"><defs><clipPath id="bubble-zero_svg__a"><path fill="none" stroke-width="0" d="M0 0h80v80H0z"></path></clipPath><clipPath id="bubble-zero_svg__b"><path fill="none" stroke-width="0" d="M0 0h80v80H0z"></path></clipPath></defs><g clip-path="url(#bubble-zero_svg__a)"><g fill="currentColor" clip-path="url(#bubble-zero_svg__b)"><path d="M80 40c0 22.09-17.91 40-40 40S0 62.09 0 40 17.91 0 40 0s40 17.91 40 40"></path><path d="M40 40 .59 76.58C-.67 77.84.22 80 2.01 80H40z"></path></g></g></svg>
    208 Comments
  </a>
      </p>
              </div>
  </article>


  


  


  <div>
    <header>
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 26"><defs><clipPath id="most-read_svg__a"><path fill="none" d="M0 0h40v26H0z"></path></clipPath><clipPath id="most-read_svg__b"><path fill="none" d="M0 0h40v26H0z"></path></clipPath></defs><g clip-path="url(#most-read_svg__a)"><g fill="none" clip-path="url(#most-read_svg__b)"><path fill="currentColor" d="M20 2h.8q1.5 0 3 .6c.6.2 1.1.4 1.7.6 1.3.5 2.6 1.3 3.9 2.1.6.4 1.2.8 1.8 1.3 2.9 2.3 5.1 4.9 6.3 6.4-1.1 1.5-3.4 4-6.3 6.4-.6.5-1.2.9-1.8 1.3q-1.95 1.35-3.9 2.1c-.6.2-1.1.4-1.7.6q-1.5.45-3 .6h-1.6q-1.5 0-3-.6c-.6-.2-1.1-.4-1.7-.6-1.3-.5-2.6-1.3-3.9-2.1-.6-.4-1.2-.8-1.8-1.3-2.9-2.3-5.1-4.9-6.3-6.4 1.1-1.5 3.4-4 6.3-6.4.6-.5 1.2-.9 1.8-1.3q1.95-1.35 3.9-2.1c.6-.2 1.1-.4 1.7-.6q1.5-.45 3-.6zm0-2h-1c-1.2 0-2.3.3-3.4.6-.6.2-1.3.4-1.9.7-1.5.6-2.9 1.4-4.3 2.3-.7.5-1.3.9-1.9 1.4C2.9 8.7 0 13 0 13s2.9 4.3 7.5 7.9c.6.5 1.3 1 1.9 1.4 1.3.9 2.7 1.7 4.3 2.3.6.3 1.3.5 1.9.7 1.1.3 2.3.6 3.4.6h2c1.2 0 2.3-.3 3.4-.6.6-.2 1.3-.4 1.9-.7 1.5-.6 2.9-1.4 4.3-2.3.7-.5 1.3-.9 1.9-1.4C37.1 17.3 40 13 40 13s-2.9-4.3-7.5-7.9c-.6-.5-1.3-1-1.9-1.4-1.3-.9-2.8-1.7-4.3-2.3-.6-.3-1.3-.5-1.9-.7C23.3.4 22.1.1 21 .1h-1"></path><path fill="#ff4e00" d="M20 5c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8m0 11c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3"></path></g></g></svg>
      
    </header>
    <ol>
              <li>
                      <a href="https://arstechnica.com/tech-policy/2025/10/suing-a-popular-youtuber-who-shimmed-a-130-lock-what-could-possibly-go-wrong/">
              <img src="https://cdn.arstechnica.net/wp-content/uploads/2025/10/lockpick-death-768x432.jpg" alt="Listing image for first story in Most Read: Suing a popular YouTuber who shimmed a $130 lock—what could possibly go wrong?" decoding="async" loading="lazy">
            </a>
                    
        </li>
                    <li>
                    
        </li>
                    <li>
                    
        </li>
                    <li>
                    
        </li>
                    <li>
                    
        </li>
                  </ol>
</div>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amazon strategised about keeping water use secret (226 pts)]]></title>
            <link>https://www.source-material.org/amazon-leak-reveals-true-data-centres-water-usage-secret-plan/</link>
            <guid>45719927</guid>
            <pubDate>Mon, 27 Oct 2025 11:53:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.source-material.org/amazon-leak-reveals-true-data-centres-water-usage-secret-plan/">https://www.source-material.org/amazon-leak-reveals-true-data-centres-water-usage-secret-plan/</a>, See on <a href="https://news.ycombinator.com/item?id=45719927">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
				<div>
					
<h2>Company worried higher numbers could damage its reputation</h2>



<p>Amazon strategised about ways to keep the public in the dark over the true extent of its data centres’ water use, a leaked internal document reveals.</p>



<p>The biggest owner of data centres in the world, Amazon dwarfs competitors Microsoft and Google and is planning a huge increase in capacity as part of a push into artificial intelligence. The Seattle-based company operates hundreds of facilities worldwide, with many more planned despite concerns over how much water is being used to cool them.&nbsp;</p>



<p>Amazon’s data centres were projected to use 7.7 billion gallons of water a year by 2030,&nbsp; according to the leaked strategy memo, which was circulated within the company in 2022. The $2.4 trillion corporation defends its approach to water usage and has taken steps to improve water efficiency.&nbsp;</p>



<p>But while Microsoft and Google regularly publish their water consumption, Amazon has <a href="https://grist.org/technology/amazon-data-centers-water-positive-energy/#:~:text=Amazon%20said%20in%20its%20most,water%20as%20traditional%20power%20plants.">never publicly disclosed</a> how much water its giant server farms consume. In the leaked document, Amazon executives warned that transparency was “a one-way door” and advised keeping its projections confidential, even as they feared inviting accusations of a cover-up.&nbsp;</p>



<p>“Amazon hides its water consumption,” was one hypothetical headline the authors warned of.</p>



<figure><img fetchpriority="high" decoding="async" width="1024" height="683" src="https://www.source-material.org/wp-content/uploads/2025/10/Amazon-data-centres-min-1024x683.jpg" alt="" srcset="https://www.source-material.org/wp-content/uploads/2025/10/Amazon-data-centres-min-1024x683.jpg 1024w, https://www.source-material.org/wp-content/uploads/2025/10/Amazon-data-centres-min-300x200.jpg 300w, https://www.source-material.org/wp-content/uploads/2025/10/Amazon-data-centres-min-768x512.jpg 768w, https://www.source-material.org/wp-content/uploads/2025/10/Amazon-data-centres-min-1536x1024.jpg 1536w, https://www.source-material.org/wp-content/uploads/2025/10/Amazon-data-centres-min-2048x1365.jpg 2048w" sizes="(max-width: 1024px) 100vw, 1024px"><figcaption><em>Amazon data centres in Arizona, where their water use has been controversial (picture: <a href="https://commons.wikimedia.org/wiki/File:Amazon_AWS_us-west-2_morrow_east_AZ_01.jpg">Tedder</a>)</em></figcaption></figure>



<p>When designing a campaign for water efficiency, Amazon Web Services (AWS), the company’s cloud computing division that oversees its data centres, noted that it would be harder to reach its internal target if its calculations included “secondary” use—water used in generating the electricity to power its data centres, according to the document.</p>



<p>Instead, Amazon officials opted to use only the relatively smaller figure of primary use, 7.7 billion gallons, when calculating progress towards its target because of “reputational risk”, fearing bad publicity if the full scale of Amazon’s consumption was revealed, the document shows.</p>



<p>“In environmental science, it is standard practice to include both to more accurately capture the true water cost of data centres,” said Shaolei Ren, associate professor of electrical and computer engineering at the University of California, Riverside.</p>



<p>Asked about the leaked document, an Amazon spokeswoman, Margaret Callahan, described it as “obsolete” and said it “completely misrepresents Amazon’s current water usage strategy”.</p>



<p>She said efficiency savings have already been achieved and pointed out that other companies also don’t count secondary water use.&nbsp;</p>



<p>“A document’s existence doesn’t guarantee its accuracy or finality,” she said. “Meetings often reshape documents or reveal flawed findings or claims.”</p>



<p>Callahan declined to elaborate on which strategic elements of the document were “obsolete”.&nbsp;</p>



<h2>Water positive</h2>



<p>As US tech companies ride the wave of AI investment and pursue greater heights of computational power, Amazon is building new data centres in some of the world’s driest areas, SourceMaterial and The Guardian <a href="https://www.source-material.org/amazon-microsoft-google-trump-data-centres-water-use/">revealed</a> in April.</p>



<p>In November 2022, AWS announced a new sustainability campaign, ‘Water Positive’, with a commitment to “return more water than it uses by 2030”.</p>



<p>The leaked document, titled ‘AWS Water Positive Public Launch’ and dated one month before the launch, sets out the campaign’s strategy. Its authors noted that any increase in Amazon’s projected water use could bring bad publicity if the company missed its target.&nbsp;&nbsp;</p>



<p>Using a higher estimate by including secondary use “would double the size and budget” for the campaign “without addressing meaningful operational, regulatory or reputational risks”, they wrote, adding that there was “no focus from customers or media” on water used for electricity.</p>



<blockquote>
<p>“It’s a one-way door”</p>
</blockquote>



<p>As part of the campaign, Amazon planned water efficiency savings to cut its 7.7 billion-gallon primary consumption to 4.9 billion by 2030 without addressing secondary use. In the meantime, secondary data should only be released if governments demand it, the authors wrote.</p>



<p>“We may decide to release water volumes in the future,” the document said. “But it’s a one-way door and we should only do so if the lack of data undermines the programme or is required by regulators.”</p>



<p>Callahan said that “like other corporate water positive programs, we focus on our direct water footprint in line with industry best practices to ensure we’re making the most concentrated impact possible.” AWS had cut water use per kilowatt of electricity by 40 per cent since 2021, she said.&nbsp;</p>



<p>“It would be better if they could own up to it,” said a current Amazon software developer, who asked to remain anonymous for fear of retaliation. “Even if they said it was a low priority, at least that would be honest.”</p>



<h2>Hidden consumption?</h2>



<p>The Water Positive campaign only applies to AWS. The wider Amazon group, including the world’s biggest online retail business, has an overall water consumption that is far higher.&nbsp;</p>



<p>In 2021, Amazon as a whole used about 105 billion gallons, as much as 958,000 US households, which would make for a city bigger than Houston, Texas, the document reveals.</p>



<p>“The models referenced in this document were preliminary and unvetted,” said Amazon’s Callahan, who declined to provide any alternative figures.</p>



<blockquote>
<p>“Amazon hides its water consumption”</p>
</blockquote>



<p>The document’s authors advised not to release data about the wider company.&nbsp;</p>



<p>But they also warned that selective disclosure could lead to accusations of a cover-up. There was&nbsp; “reputational risk of publicly committing to a goal for only a portion of Amazon’s direct water footprint”, they wrote.&nbsp;</p>



<p>They even suggested negative headlines that might result:&nbsp;“Amazon hides its water consumption behind AWS” and “Amazon disappoints, failing to take full responsibility for water” were among the adverse media stories they hoped to avoid.</p>



<p>In a sustainability report last month, AWS claimed it had achieved 53 per cent of its Water Positive goal. The division’s plan for reaching the target relies mostly on “water replenishment” projects, some in partnership with Water.org, a non-profit organisation co-founded by actor Matt Damon. The strategy document refers to these projects as “offsets”, describing initiatives like using Amazon computer technology to help utilities prioritise which pipes to fix in order to minimise leaks.&nbsp;</p>





<p>But of the $109 million AWS planned to spend on offsets, around half would have been spent anyway, either to meet regulatory requirements or because the projects would help AWS operations by making water more available, the document shows. Experts said this amounted to incomplete accounting.&nbsp;</p>



<p>“Regardless of what sort of offsetting or replenishment you do, it doesn’t necessarily nullify the water footprints of your own operations,” said Tyler Farrow, standards manager at the Alliance for Water Stewardship. “Calling your operations water positive or water neutral is misleading.”</p>



<p>Amazon’s Callahan said that the “replenishment spending” is voluntary, not a regulatory requirement.&nbsp;</p>



<p>“We’ve expanded well beyond what was imagined in the document because it’s the right thing to do for the world and for the communities in which we operate,” she said.&nbsp;</p>



<h2>‘Obfuscate the footprint’</h2>



<p>Amazon is also engineering industry standards to downplay its water use and avert scrutiny, said Nathan Wangusi, a former water sustainability manager at the company.</p>



<p>The corporation has funded efforts by non-profit groups The Nature Conservancy and World Resources Institute, alongside LimnoTech, a consultancy, “to create a globally-accepted methodology for quantifying the benefit of watershed restoration projects”.</p>



<p>Responding to questions from SourceMaterial, all three organisations defended their integrity and independence and said that Amazon had no undue influence on any methodologies they had created.</p>



<p>“They spend a lot of time creating methodologies that are used to obfuscate the water footprint,” Wangusi said, referring to Amazon.</p>



<p>Callahan said these efforts were “standard practice” and that Amazon’s “customers expect us to hold ourselves accountable to credible guidance and best practices”.</p>



<p>As well as choosing not to disclose water use from electricity generation, Amazon has estimated its larger “indirect” water footprint, the document shows. This extra usage, which falls under a classification known as “scope 3”, includes water for production and construction—in Amazon’s case, mostly irrigation of cotton plantations supplying its fashion brands, and vegetables for its grocery arm, Amazon Fresh.</p>



<p>Here too, Amazon decided to keep its consumption confidential, even though “indirect water use represents roughly 90 per cent of Amazon’s total water footprint”, according to the document.&nbsp;</p>



<p>AWS avoided establishing targets for indirect water use because that figure would be “much more significant for the rest of Amazon, especially in the agricultural supply chain, and the team does not want to establish a standard for addressing scope 3 water use that the rest of Amazon would need to follow, given the larger resource implications”, the authors wrote.</p>



<p>“You don’t need to obscure or obfuscate,” said Wangusi, who believes he was “hounded out” of Amazon for criticising the company’s approach. (Amazon declined to comment on his departure.)&nbsp;</p>



<p>“It doesn’t make you more profitable,” he said. “It makes you less trustworthy.”</p>



<p><em>Headline picture: StockPhotoAstur / Shutterstock.com</em></p>
				</div>
			</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[You are how you act (294 pts)]]></title>
            <link>https://boz.com/articles/you-are-how-you-act</link>
            <guid>45719788</guid>
            <pubDate>Mon, 27 Oct 2025 11:35:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://boz.com/articles/you-are-how-you-act">https://boz.com/articles/you-are-how-you-act</a>, See on <a href="https://news.ycombinator.com/item?id=45719788">Hacker News</a></p>
<div id="readability-page-1" class="page"><section><p>The modern American self is best defined by two Enlightenment thinkers who
never met but have been arguing in our heads ever since.</p>
<p>Jean-Jacques Rousseau believed in the primacy of the inner self: a core of
goodness constantly betrayed by circumstance. In his view, the world corrupts
us. We begin pure and only fail because society, obligation, or expectation
pulls us away from who we truly are.</p>
<p>Benjamin Franklin saw it differently. For him there was no such thing as a good
person or a bad person, only people who do good things and people who do bad
things. Virtue was a habit, not an essence.</p>
<p>Modern America carries both of these ideas, switching between them whenever
convenient. We invoke Rousseau when we need forgiveness: I meant well. We
invoke Franklin when we need accountability: Show me what you’ve done. It’s an
almost entirely incompatible pair of philosophies that coexist perfectly in
practice because they’re both so flattering — one to our intentions, the other
to our ambition.</p>
<p>But only one of them scales.</p>
<p>“Fake it until you make it” is often dismissed as shallow, but it’s closer to
Franklin’s truth. Faking it long enough is making it. The repetition of
behavior, not the sincerity of belief, is what shapes character. You become the
kind of person who does the things you repeatedly do.</p>
<p>Rousseau invites endless introspection. Franklin invites progress. The first is
about how you feel; the second is about what you build.</p>
<p>I find the Franklin model far more useful. Not because it’s truer in some
cosmic sense, but because it gives you agency. You can’t always change how you
feel, but you can always decide what to do next.</p>
<p>“It doesn’t take great men to do things, but it is doing things that make men
great.” — Arnold Glasow</p></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft needs to open up more about its OpenAI dealings (248 pts)]]></title>
            <link>https://www.wsj.com/tech/ai/microsoft-needs-to-open-up-more-about-its-openai-dealings-59102de8</link>
            <guid>45719669</guid>
            <pubDate>Mon, 27 Oct 2025 11:19:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/tech/ai/microsoft-needs-to-open-up-more-about-its-openai-dealings-59102de8">https://www.wsj.com/tech/ai/microsoft-needs-to-open-up-more-about-its-openai-dealings-59102de8</a>, See on <a href="https://news.ycombinator.com/item?id=45719669">Hacker News</a></p>
Couldn't get https://www.wsj.com/tech/ai/microsoft-needs-to-open-up-more-about-its-openai-dealings-59102de8: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Don't forget these tags to make HTML work like you expect (388 pts)]]></title>
            <link>https://blog.jim-nielsen.com/2025/dont-forget-these-html-tags/</link>
            <guid>45719140</guid>
            <pubDate>Mon, 27 Oct 2025 10:01:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.jim-nielsen.com/2025/dont-forget-these-html-tags/">https://blog.jim-nielsen.com/2025/dont-forget-these-html-tags/</a>, See on <a href="https://news.ycombinator.com/item?id=45719140">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I was watching <a href="https://notes.jim-nielsen.com/#2025-10-24T2205">Alex Petros’ talk</a> and he has a slide in there titled “Incantations that make HTML work correctly”.</p><p>This got me thinking about the basic snippets of HTML I’ve learned to always include in order for my website to work as I expect in the browser — like “Hey I just made a <code>.html</code> file on disk and am going to open it in the browser. What should be in there?”</p><p>This is what comes to mind:</p><pre><code><span>&lt;!doctype <span>html</span>&gt;</span>
<span>&lt;<span>html</span> <span>lang</span>=<span>"en"</span>&gt;</span>
<span>&lt;<span>meta</span> <span>charset</span>=<span>"utf-8"</span>&gt;</span>
<span>&lt;<span>meta</span> <span>name</span>=<span>"viewport"</span> <span>content</span>=<span>"width=device-width,initial-scale=1.0"</span>&gt;</span>
</code></pre><p>Why each?</p><h2 id="doctype">doctype</h2><pre><code><span>&lt;!doctype <span>html</span>&gt;</span>
</code></pre><p>Without <code>&lt;!doctype html&gt;</code>, browsers may switch to quirks mode, emulating legacy, pre-standards behavior. This will change how calculations work around layout, sizing, and alignment.</p><p><code>&lt;!doctype html&gt;</code> is what you want for consistent rendering. Or <code>&lt;!DOCTYPE HTML&gt;</code> if you prefer writing markup like it’s 1998. Or even <code>&lt;!doCTypE HTml&gt;</code> if you eschew all societal norms. It’s case-insensitive so they’ll all work.</p><h2 id="html-lang">html lang</h2><pre><code><span>&lt;<span>html</span> <span>lang</span>=<span>"en"</span>&gt;</span>
</code></pre><p>Declare the document’s language. Browsers, search engines, assistive technologies, etc. can leverage it to:</p><ul><li>Get pronunciation and voice right for screen readers</li><li>Improve indexing and translation accuracy</li><li>Apply locale-specific tools (e.g. spell-checking)</li><li>And more…</li></ul><p>Omit it and things will <em>look</em> ok, but lots of basic web-adjacent tools might get things wrong. Specifying it makes everything <em>around</em> the HTML work better and more accurately, so I always try to remember to include it.</p><p>This piece of info can come back from the server as a header, e.g.</p><pre><code><span>return</span> <span>new</span> <span>Response</span>(
    <span>"&lt;!doctype html&gt;&lt;h1&gt;Hello world&lt;/h1&gt;"</span>,
    {
        <span>status</span>: <span>200</span>,
        <span>headers</span>: { <span>"Content-Type"</span>: <span>"text/html; charset=utf-8"</span> },
    }
);
</code></pre><p>But I like to set it in my HTML, especially when I’m making files on disk I open manually in the browser.</p><pre><code><span>&lt;<span>meta</span> <span>charset</span>=<span>"utf-8"</span>&gt;</span>
</code></pre><p>This tells the browser how to interpret text, ensuring characters like é, ü, and others display correctly.</p><p>So many times I’ve opened a document without this tag and things just don’t look right — like my <a href="https://smartquotesforsmartpeople.com/">smart quotes</a>.</p><p>For example: copy this snippet, stick it in an HTML file, and open it on your computer:</p><pre><code><span>&lt;!doctype <span>html</span>&gt;</span>
<span>&lt;<span>h1</span>&gt;</span>Without meta utf-8<span>&lt;/<span>h1</span>&gt;</span>
<span>&lt;<span>dl</span>&gt;</span>
  <span>&lt;<span>dt</span>&gt;</span>Smart quotes<span>&lt;/<span>dt</span>&gt;</span>
  <span>&lt;<span>dd</span>&gt;</span>“” and ‘’<span>&lt;/<span>dd</span>&gt;</span>
  <span>&lt;<span>dt</span>&gt;</span>Symbols<span>&lt;/<span>dt</span>&gt;</span>
  <span>&lt;<span>dd</span>&gt;</span>©, ™, ®, etc.<span>&lt;/<span>dd</span>&gt;</span>
  <span>&lt;<span>dt</span>&gt;</span>Ellipsis<span>&lt;/<span>dt</span>&gt;</span>
  <span>&lt;<span>dd</span>&gt;</span>…<span>&lt;/<span>dd</span>&gt;</span>
  <span>&lt;<span>dt</span>&gt;</span>Emojis<span>&lt;/<span>dt</span>&gt;</span>
  <span>&lt;<span>dd</span>&gt;</span>👍<span>&lt;/<span>dd</span>&gt;</span>
  <span>&lt;<span>dt</span>&gt;</span>Non-latin characters<span>&lt;/<span>dt</span>&gt;</span>
  <span>&lt;<span>dd</span>&gt;</span>é, ñ, etc.<span>&lt;/<span>dd</span>&gt;</span>
<span>&lt;/<span>dl</span>&gt;</span>
</code></pre><p>Things might look a bit wonky. But stick a <code>&lt;meta charset="utf-8"&gt;</code> tag in there and you’ll find some relief.</p><p><img src="https://cdn.jim-nielsen.com/blog/2025/basic-html-quotes-meta-tags.png" width="620" height="3000" alt=""></p><pre><code><span>&lt;<span>meta</span> <span>name</span>=<span>"viewport"</span> <span>content</span>=<span>"width=device-width,initial-scale=1.0"</span>&gt;</span>
</code></pre><p>Sometimes I’ll quickly prototype a little HTML and think, “Great it’s working as I expect!” Then I go open it on mobile and everything looks tiny — “[Facepalm] you forgot the meta viewport tag!”</p><p>Take a look at this screenshot, where I forgot the meta viewport tag on the left but included it on the right:</p><p><img src="https://cdn.jim-nielsen.com/blog/2025/basic-html-quotes-meta-viewport-tags.png" width="600" height="640" alt="Two screenshots of a basic HTML with an h1 tag that says “Hello world” that are side-by-side. The one on the left looks like it’s zoomed way out becuase it’s missing the meta viewport tag. The one on the right looks like you expect."></p><p>That ever happen to you? No, just me? Well anyway, it’s a good ‘un to include to make HTML work the way you expect.</p><h2 id="last-but-not-least">Last But Not Least…</h2><p>I know what you’re thinking, I forgot the most important snippet of them all for writing HTML:</p><pre><code><span>&lt;<span>div</span> <span>id</span>=<span>"root"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span>
<span>&lt;<span>script</span> <span>src</span>=<span>"bundle.js"</span>&gt;</span><span>&lt;/<span>script</span>&gt;</span>
</code></pre><p>Lol.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rust cross-platform GPUI components (456 pts)]]></title>
            <link>https://github.com/longbridge/gpui-component</link>
            <guid>45719004</guid>
            <pubDate>Mon, 27 Oct 2025 09:44:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/longbridge/gpui-component">https://github.com/longbridge/gpui-component</a>, See on <a href="https://news.ycombinator.com/item?id=45719004">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">GPUI Component</h2><a id="user-content-gpui-component" aria-label="Permalink: GPUI Component" href="#gpui-component"></a></p>
<p dir="auto"><a href="https://github.com/longbridge/gpui-component/actions/workflows/ci.yml"><img src="https://github.com/longbridge/gpui-component/actions/workflows/ci.yml/badge.svg" alt="Build Status"></a> <a href="https://docs.rs/gpui-component/" rel="nofollow"><img src="https://camo.githubusercontent.com/0de77e5f6916f1fd1b985957e1a7636c5c22863637afae6b48fcbde66b760abb/68747470733a2f2f646f63732e72732f677075692d636f6d706f6e656e742f62616467652e737667" alt="Docs" data-canonical-src="https://docs.rs/gpui-component/badge.svg"></a> <a href="https://crates.io/crates/gpui-component" rel="nofollow"><img src="https://camo.githubusercontent.com/0f0be3194b65c9fc618a5d4b167841b67868cac7a7bf8d363c815edeeb3f452b/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f677075692d636f6d706f6e656e742e737667" alt="Crates.io" data-canonical-src="https://img.shields.io/crates/v/gpui-component.svg"></a></p>
<p dir="auto">UI components for building fantastic desktop applications using <a href="https://gpui.rs/" rel="nofollow">GPUI</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li><strong>Richness</strong>: 60+ cross-platform desktop UI components.</li>
<li><strong>Native</strong>: Inspired by macOS and Windows controls, combined with shadcn/ui design for a modern experience.</li>
<li><strong>Ease of Use</strong>: Stateless <code>RenderOnce</code> components, simple and user-friendly.</li>
<li><strong>Customizable</strong>: Built-in <code>Theme</code> and <code>ThemeColor</code>, supporting multi-theme and variable-based configurations.</li>
<li><strong>Versatile</strong>: Supports sizes like <code>xs</code>, <code>sm</code>, <code>md</code>, and <code>lg</code>.</li>
<li><strong>Flexible Layout</strong>: Dock layout for panel arrangements, resizing, and freeform (Tiles) layouts.</li>
<li><strong>High Performance</strong>: Virtualized Table and List components for smooth large-data rendering.</li>
<li><strong>Content Rendering</strong>: Native support for Markdown and simple HTML.</li>
<li><strong>Charting</strong>: Built-in charts for visualizing your data.</li>
<li><strong>Editor</strong>: High performance code editor (support up to 200K lines) with LSP (diagnostics, completion, hover, etc).</li>
<li><strong>Syntax Highlighting</strong>: Syntax highlighting for editor and markdown components using Tree Sitter.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Showcase</h2><a id="user-content-showcase" aria-label="Permalink: Showcase" href="#showcase"></a></p>
<p dir="auto">Here is the first application: <a href="https://longbridge.com/desktop" rel="nofollow">Longbridge Pro</a>, built using GPUI Component.</p>
<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/5518/499888493-e1ecb9c3-2dd3-431e-bd97-5a819c30e551.png?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjE1Njg1MDEsIm5iZiI6MTc2MTU2ODIwMSwicGF0aCI6Ii81NTE4LzQ5OTg4ODQ5My1lMWVjYjljMy0yZGQzLTQzMWUtYmQ5Ny01YTgxOWMzMGU1NTEucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyNyUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjdUMTIzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MzZiNzc0N2Y1ZGEyMjFkNjBhZTZiOTQ2YzEzMjkzOWVlNTM5YjA4ZTYzZGUxZjFmZmE1ZDlmNjc5ZTM5NmYxZiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.7Y-Z4C7MbkBUZp2O6dKtEOgUCWkiIwk1yq2ltNNB4Es"><img width="1763" alt="Image" src="https://private-user-images.githubusercontent.com/5518/499888493-e1ecb9c3-2dd3-431e-bd97-5a819c30e551.png?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NjE1Njg1MDEsIm5iZiI6MTc2MTU2ODIwMSwicGF0aCI6Ii81NTE4LzQ5OTg4ODQ5My1lMWVjYjljMy0yZGQzLTQzMWUtYmQ5Ny01YTgxOWMzMGU1NTEucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MTAyNyUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTEwMjdUMTIzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MzZiNzc0N2Y1ZGEyMjFkNjBhZTZiOTQ2YzEzMjkzOWVlNTM5YjA4ZTYzZGUxZjFmZmE1ZDlmNjc5ZTM5NmYxZiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.7Y-Z4C7MbkBUZp2O6dKtEOgUCWkiIwk1yq2ltNNB4Es"></a>
<p dir="auto">We built multi-theme support in the application. This feature is not included in GPUI Component itself, but is based on the <code>Theme</code> feature, so it's easy to implement.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">GPUI and GPUI Component are still in development, so you need to add dependencies by git.</p>
<div dir="auto" data-snippet-clipboard-copy-content="gpui = &quot;0.2.2&quot;
gpui-component = &quot;0.3.0&quot;"><pre><span>gpui</span> = <span><span>"</span>0.2.2<span>"</span></span>
<span>gpui-component</span> = <span><span>"</span>0.3.0<span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Basic Example</h3><a id="user-content-basic-example" aria-label="Permalink: Basic Example" href="#basic-example"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="use gpui::*;
use gpui_component::{button::*, *};

pub struct HelloWorld;
impl Render for HelloWorld {
    fn render(&amp;mut self, _: &amp;mut Window, _: &amp;mut Context<Self>) -> impl IntoElement {
        div()
            .v_flex()
            .gap_2()
            .size_full()
            .items_center()
            .justify_center()
            .child(&quot;Hello, World!&quot;)
            .child(
                Button::new(&quot;ok&quot;)
                    .primary()
                    .label(&quot;Let's Go!&quot;)
                    .on_click(|_, _, _| println!(&quot;Clicked!&quot;)),
            )
    }
}

fn main() {
    let app = Application::new();

    app.run(move |cx| {
        // This must be called before using any GPUI Component features.
        gpui_component::init(cx);

        cx.spawn(async move |cx| {
            cx.open_window(WindowOptions::default(), |window, cx| {
                let view = cx.new(|_| HelloWorld);
                // This first level on the window, should be a Root.
                cx.new(|cx| Root::new(view.into(), window, cx))
            })?;

            Ok::<_, anyhow::Error>(())
        })
        .detach();
    });
}"><pre><span>use</span> gpui<span>::</span><span>*</span><span>;</span>
<span>use</span> gpui_component<span>::</span><span>{</span>button<span>::</span><span>*</span><span>,</span> <span>*</span><span>}</span><span>;</span>

<span>pub</span> <span>struct</span> <span>HelloWorld</span><span>;</span>
<span>impl</span> <span>Render</span> <span>for</span> <span>HelloWorld</span> <span>{</span>
    <span>fn</span> <span>render</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> _<span>:</span> <span>&amp;</span><span>mut</span> <span>Window</span><span>,</span> _<span>:</span> <span>&amp;</span><span>mut</span> <span>Context</span><span>&lt;</span><span>Self</span><span>&gt;</span><span>)</span> -&gt; <span>impl</span> <span>IntoElement</span> <span>{</span>
        <span>div</span><span>(</span><span>)</span>
            <span>.</span><span>v_flex</span><span>(</span><span>)</span>
            <span>.</span><span>gap_2</span><span>(</span><span>)</span>
            <span>.</span><span>size_full</span><span>(</span><span>)</span>
            <span>.</span><span>items_center</span><span>(</span><span>)</span>
            <span>.</span><span>justify_center</span><span>(</span><span>)</span>
            <span>.</span><span>child</span><span>(</span><span>"Hello, World!"</span><span>)</span>
            <span>.</span><span>child</span><span>(</span>
                <span>Button</span><span>::</span><span>new</span><span>(</span><span>"ok"</span><span>)</span>
                    <span>.</span><span>primary</span><span>(</span><span>)</span>
                    <span>.</span><span>label</span><span>(</span><span>"Let's Go!"</span><span>)</span>
                    <span>.</span><span>on_click</span><span>(</span>|_<span>,</span> _<span>,</span> _| <span>println</span><span>!</span><span>(</span><span>"Clicked!"</span><span>)</span><span>)</span><span>,</span>
            <span>)</span>
    <span>}</span>
<span>}</span>

<span>fn</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    <span>let</span> app = <span>Application</span><span>::</span><span>new</span><span>(</span><span>)</span><span>;</span>

    app<span>.</span><span>run</span><span>(</span><span>move</span> |cx| <span>{</span>
        <span>// This must be called before using any GPUI Component features.</span>
        gpui_component<span>::</span><span>init</span><span>(</span>cx<span>)</span><span>;</span>

        cx<span>.</span><span>spawn</span><span>(</span><span>async</span> <span>move</span> |cx| <span>{</span>
            cx<span>.</span><span>open_window</span><span>(</span><span>WindowOptions</span><span>::</span><span>default</span><span>(</span><span>)</span><span>,</span> |window<span>,</span> cx| <span>{</span>
                <span>let</span> view = cx<span>.</span><span>new</span><span>(</span>|_| <span>HelloWorld</span><span>)</span><span>;</span>
                <span>// This first level on the window, should be a Root.</span>
                cx<span>.</span><span>new</span><span>(</span>|cx| <span>Root</span><span>::</span><span>new</span><span>(</span>view<span>.</span><span>into</span><span>(</span><span>)</span><span>,</span> window<span>,</span> cx<span>)</span><span>)</span>
            <span>}</span><span>)</span>?<span>;</span>

            <span>Ok</span><span>::</span><span>&lt;</span><span>_</span><span>,</span> anyhow<span>::</span><span>Error</span><span>&gt;</span><span>(</span><span>(</span><span>)</span><span>)</span>
        <span>}</span><span>)</span>
        <span>.</span><span>detach</span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">WebView</h3><a id="user-content-webview" aria-label="Permalink: WebView" href="#webview"></a></p>
<blockquote>
<p dir="auto">Still early and experimental; there are a lot of limitations.</p>
</blockquote>
<p dir="auto">GPUI Component has a <code>WebView</code> element based on <a href="https://github.com/tauri-apps/wry">Wry</a>. This is an optional feature, which you can enable with a feature flag.</p>
<div dir="auto" data-snippet-clipboard-copy-content="gpui-component = { version = &quot;0.3.0&quot;, features = [&quot;webview&quot;] }
wry = { version = &quot;0.53.3, package = &quot;lb-wry&quot; }"><pre><span>gpui-component</span> = { <span>version</span> = <span><span>"</span>0.3.0<span>"</span></span>, <span>features</span> = [<span><span>"</span>webview<span>"</span></span>] }
<span>wry</span> = { <span>version</span> = <span><span>"</span>0.53.3, package = <span>"</span></span>lb-wry" }</pre></div>
<p dir="auto">More usage examples can be found in the <a href="https://github.com/longbridge/gpui-component/tree/main/crates/story">story</a> directory.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Icons</h3><a id="user-content-icons" aria-label="Permalink: Icons" href="#icons"></a></p>
<p dir="auto">GPUI Component has an <code>Icon</code> element, but it does not include SVG files by default.</p>
<p dir="auto">The example uses <a href="https://lucide.dev/" rel="nofollow">Lucide</a> icons, but you can use any icons you like. Just name the SVG files as defined in <a href="https://github.com/longbridge/gpui-component/blob/main/crates/ui/src/icon.rs#L86">IconName</a>. You can add any icons you need to your project.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Development</h2><a id="user-content-development" aria-label="Permalink: Development" href="#development"></a></p>
<p dir="auto">We have a gallery of applications built with GPUI Component.</p>

<p dir="auto">More examples can be found in the <code>examples</code> directory. You can run them with <code>cargo run --example &lt;example_name&gt;</code>.</p>
<p dir="auto">Check out <a href="https://github.com/longbridge/gpui-component/blob/main/CONTRIBUTING.md">CONTRIBUTING.md</a> for more details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Compare to others</h2><a id="user-content-compare-to-others" aria-label="Permalink: Compare to others" href="#compare-to-others"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Features</th>
<th>GPUI Component</th>
<th><a href="https://github.com/iced-rs/iced">Iced</a></th>
<th><a href="https://github.com/emilk/egui">egui</a></th>
<th><a href="https://www.qt.io/product/qt6" rel="nofollow">QT 6</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>Language</td>
<td>Rust</td>
<td>Rust</td>
<td>Rust</td>
<td>C++/QML</td>
</tr>
<tr>
<td>Core Render</td>
<td>GPUI</td>
<td>wgpu</td>
<td>wgpu</td>
<td>QT</td>
</tr>
<tr>
<td>License</td>
<td>Apache 2.0</td>
<td>MIT</td>
<td>MIT/Apache 2.0</td>
<td>Commercial</td>
</tr>
<tr>
<td>Min Binary Size <sup><a href="#user-content-fn-1-98ce86583acfda55a3fada93265db382" id="user-content-fnref-1-98ce86583acfda55a3fada93265db382" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup></td>
<td>12MB</td>
<td>11MB</td>
<td>5M</td>
<td>20MB <sup><a href="#user-content-fn-2-98ce86583acfda55a3fada93265db382" id="user-content-fnref-2-98ce86583acfda55a3fada93265db382" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup></td>
</tr>
<tr>
<td>Cross-Platform</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Documentation</td>
<td>No</td>
<td>Simple</td>
<td>Simple</td>
<td>Good</td>
</tr>
<tr>
<td>Web</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>UI Style</td>
<td>Modern</td>
<td>Basic</td>
<td>Basic</td>
<td>Basic</td>
</tr>
<tr>
<td>CJK Support</td>
<td>Yes</td>
<td>Yes</td>
<td>Bad</td>
<td>Yes</td>
</tr>
<tr>
<td>Chart</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Table (Large dataset)</td>
<td>Yes<br>(Virtual Rows, Columns)</td>
<td>No</td>
<td>Yes<br>(Virtual Rows)</td>
<td>Yes<br>(Virtual Rows, Columns)</td>
</tr>
<tr>
<td>Table Column Resize</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Text base</td>
<td>Rope</td>
<td><a href="https://github.com/pop-os/cosmic-text">COSMIC Text</a> <sup><a href="#user-content-fn-3-98ce86583acfda55a3fada93265db382" id="user-content-fnref-3-98ce86583acfda55a3fada93265db382" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup></td>
<td>trait TextBuffer <sup><a href="#user-content-fn-4-98ce86583acfda55a3fada93265db382" id="user-content-fnref-4-98ce86583acfda55a3fada93265db382" data-footnote-ref="" aria-describedby="footnote-label">4</a></sup></td>
<td><a href="https://doc.qt.io/qt-6/qtextdocument.html" rel="nofollow">QTextDocument</a></td>
</tr>
<tr>
<td>CodeEditor</td>
<td>Simple</td>
<td>Simple</td>
<td>Simple</td>
<td>Basic API</td>
</tr>
<tr>
<td>Dock Layout</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Syntax Highlight</td>
<td><a href="https://tree-sitter.github.io/tree-sitter/" rel="nofollow">Tree Sitter</a></td>
<td><a href="https://github.com/trishume/syntect">Syntect</a></td>
<td><a href="https://github.com/trishume/syntect">Syntect</a></td>
<td><a href="https://doc.qt.io/qt-6/qsyntaxhighlighter.html" rel="nofollow">QSyntaxHighlighter</a></td>
</tr>
<tr>
<td>Markdown Rendering</td>
<td>Yes</td>
<td>Yes</td>
<td>Basic</td>
<td>No</td>
</tr>
<tr>
<td>Markdown mix HTML</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>HTML Rendering</td>
<td>Basic</td>
<td>No</td>
<td>No</td>
<td>Basic</td>
</tr>
<tr>
<td>Text Selection</td>
<td>TextView</td>
<td>No</td>
<td>Any Label</td>
<td>No</td>
</tr>
<tr>
<td>Themes</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>I18n</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<blockquote>
<p dir="auto">Please submit an issue or PR if any mistakes or outdated are found.</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Apache-2.0</p>
<ul dir="auto">
<li>UI design based on <a href="https://ui.shadcn.com/" rel="nofollow">shadcn/ui</a>.</li>
<li>Icons from <a href="https://lucide.dev/" rel="nofollow">Lucide</a>.</li>
</ul>
<section data-footnotes="">
<ol dir="auto">
<li id="user-content-fn-1-98ce86583acfda55a3fada93265db382">
<p dir="auto">Release builds by use simple hello world example. <a href="#user-content-fnref-1-98ce86583acfda55a3fada93265db382" data-footnote-backref="" aria-label="Back to reference 1">↩</a></p>
</li>
<li id="user-content-fn-2-98ce86583acfda55a3fada93265db382">
<p dir="auto"><a href="https://www.qt.io/blog/reducing-binary-size-of-qt-applications-part-3-more-platforms">Reducing Binary Size of Qt Applications</a> <a href="#user-content-fnref-2-98ce86583acfda55a3fada93265db382" data-footnote-backref="" aria-label="Back to reference 2">↩</a></p>
</li>
<li id="user-content-fn-3-98ce86583acfda55a3fada93265db382">
<p dir="auto">Iced Editor: <a href="https://github.com/iced-rs/iced/blob/db5a1f6353b9f8520c4f9633d1cdc90242c2afe1/graphics/src/text/editor.rs#L65-L68">https://github.com/iced-rs/iced/blob/db5a1f6353b9f8520c4f9633d1cdc90242c2afe1/graphics/src/text/editor.rs#L65-L68</a> <a href="#user-content-fnref-3-98ce86583acfda55a3fada93265db382" data-footnote-backref="" aria-label="Back to reference 3">↩</a></p>
</li>
<li id="user-content-fn-4-98ce86583acfda55a3fada93265db382">
<p dir="auto">egui TextBuffer: <a href="https://github.com/emilk/egui/blob/0a81372cfd3a4deda640acdecbbaf24bf78bb6a2/crates/egui/src/widgets/text_edit/text_buffer.rs#L20">https://github.com/emilk/egui/blob/0a81372cfd3a4deda640acdecbbaf24bf78bb6a2/crates/egui/src/widgets/text_edit/text_buffer.rs#L20</a> <a href="#user-content-fnref-4-98ce86583acfda55a3fada93265db382" data-footnote-backref="" aria-label="Back to reference 4">↩</a></p>
</li>
</ol>
</section>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The last European train that travels by sea (138 pts)]]></title>
            <link>https://www.bbc.com/travel/article/20251024-the-last-european-train-that-travels-by-sea</link>
            <guid>45718711</guid>
            <pubDate>Mon, 27 Oct 2025 08:58:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/travel/article/20251024-the-last-european-train-that-travels-by-sea">https://www.bbc.com/travel/article/20251024-the-last-european-train-that-travels-by-sea</a>, See on <a href="https://news.ycombinator.com/item?id=45718711">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div data-component="image-block"><figure><div><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0mbltb6.jpg.webp 160w, https://ichef.bbci.co.uk/images/ic/240xn/p0mbltb6.jpg.webp 240w, https://ichef.bbci.co.uk/images/ic/320xn/p0mbltb6.jpg.webp 320w, https://ichef.bbci.co.uk/images/ic/480xn/p0mbltb6.jpg.webp 480w, https://ichef.bbci.co.uk/images/ic/640xn/p0mbltb6.jpg.webp 640w, https://ichef.bbci.co.uk/images/ic/800xn/p0mbltb6.jpg.webp 800w, https://ichef.bbci.co.uk/images/ic/1024xn/p0mbltb6.jpg.webp 1024w, https://ichef.bbci.co.uk/images/ic/1376xn/p0mbltb6.jpg.webp 1376w, https://ichef.bbci.co.uk/images/ic/1920xn/p0mbltb6.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0mbltb6.jpg.webp" loading="lazy" alt="Alamy Silver and red train on track next to the sea in Sicily (Credit: Alamy)"><span>Alamy</span></p></div></figure></div><div data-component="layout-block"><p><b id="italy's-sleeper-from-milan-to-sicily-ends-with-a-rare-rail-ferry-crossing-that's-threatened-by-a-new-mega-bridge.">Italy's sleeper from Milan to Sicily ends with a rare rail-ferry crossing that's threatened by a new mega bridge.</b></p><p>Our ferry cuts through the roiling waters of the Strait of Messina under clouds that blanket all but the hems of Sicily's distant mountains. The sea passage to the Italian island doesn't want for drama. It's governed by tidal currents so strong they inspired Scylla and Charybdis, the sea monsters in Homer's Odyssey, and is overseen by a golden statue of the Madonna at the end of Messina Harbour, arm raised in blessing. But my eye is drawn to a stranger sight: the train carriages travelling across the sea on the ferry itself.</p><p>This is unique cargo. The narrow strait is the only place in Europe where passenger trains still travel by sea. Every morning, passengers aboard the&nbsp;<a target="_blank" href="https://www.trenitalia.com/en/intercity-notte.html">Intercity Notte</a> follow the same ritual: watching the train split in the southern Italian city of Villa San Giovanni, get shunted onto the ferry’s tracks and carried across to the city of Messina before being reassembled for the final run to Palermo or Syracuse.&nbsp;</p><p>"It is a small engineering choreography that keeps two shores and two worlds together every day: students, workers, families returning home, strait commuters, tourists who choose the slow pace of the night train," Francesca Serra, director of Intercity operations at national operator Trenitalia, tells me.</p><p>But this choreography connecting land and sea may soon come to an end.&nbsp;</p><p>In August, the Italian government revived long-standing plans to build a vast €13.5bn (£11.7bn) <a target="_self" href="https://www.bbc.co.uk/news/articles/c80d74v0e4lo">suspension bridge</a> over the strait – one of the world's most ambitious engineering projects. Supporters see it as progress, while critics warn it could drain resources from southern Italy's more urgent infrastructure needs. Whether or not it's ever built, the proposal has cast a shadow over one of Europe's most poetic journeys and the sense of ritual and connection it represents.</p></div><div data-component="layout-block"><figure><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0mblwb6.jpg.webp 160w, https://ichef.bbci.co.uk/images/ic/240xn/p0mblwb6.jpg.webp 240w, https://ichef.bbci.co.uk/images/ic/320xn/p0mblwb6.jpg.webp 320w, https://ichef.bbci.co.uk/images/ic/480xn/p0mblwb6.jpg.webp 480w, https://ichef.bbci.co.uk/images/ic/640xn/p0mblwb6.jpg.webp 640w, https://ichef.bbci.co.uk/images/ic/800xn/p0mblwb6.jpg.webp 800w, https://ichef.bbci.co.uk/images/ic/1024xn/p0mblwb6.jpg.webp 1024w, https://ichef.bbci.co.uk/images/ic/1376xn/p0mblwb6.jpg.webp 1376w, https://ichef.bbci.co.uk/images/ic/1920xn/p0mblwb6.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0mblwb6.jpg.webp" loading="lazy" alt="Getty Images Plans for a megabridge between Calabria and Sicily could mark the end of the historic train-ferry crossing (Credit: Getty Images)"><span>Getty Images</span></p><figcaption>Plans for a megabridge between Calabria and Sicily could mark the end of the historic train-ferry crossing (Credit: Getty Images)</figcaption></figure><p>When I travelled on the Intercity Notte in February 2025, none of this seemed particularly urgent. The bridge plan was still languishing in political limbo and the sea crossing felt like an evocative journey that would surely always exist. This was the backbone of an overland trip my partner and I were taking from Nottingham to Sicily, and we wound our way down through France and Turin before arriving at the grand Milano Centrale. From here, the overnight journey to Syracuse in Sicily – Italy's longest sleeper service – promised something special: a 1,489km passage through the length of Italy, linking mainland and island.</p><div><p><span>It is a small engineering choreography that keeps two shores and two worlds together every day – Francesca Serra</span></p></div><p>Our train left at 19:40 and night was closing in as we rattled down the coast, passing bright constellations of Cinque Terre towns. Compartment doors left open offered glimpses of life along the aisle: families playing cards, an old man with a cup of wine, a couple and their handsome Italian greyhound. I drifted asleep, stirred occasionally by melodic Tannoy announcements from dark platforms washed in orange light.</p><p>Around 07:00, I was woken by a knock at the door and, scrambling for my glasses, found the carriage attendant waiting patiently with a shot of espresso. A breakfast tray of juice, croissant, dry biscuits and apricot spread followed. Calabrian towns began their days beneath pale skies, which took on a moodier complexion over the Tyrrhenian Sea, flecked with lightning. We came into the salt-licked station of Villa San Giovanni just in time to see Intercity day train returning from Sicily snake out of the ferry's open bow, pulled by a sturdy locomotive.</p></div><div data-component="layout-block"><p>Our train continued a little way along the track before we switched direction and were pushed into the empty vessel. I felt a jolt as our row of carriages was decoupled from the one in front and my sea views were briefly replaced by metal walls. As we were pushed into the bowels of the ferry, a well-rehearsed crew in high-vis jackets shouted instructions at each other above the burr of machinery.</p><figure><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0mblvmj.jpg.webp 160w, https://ichef.bbci.co.uk/images/ic/240xn/p0mblvmj.jpg.webp 240w, https://ichef.bbci.co.uk/images/ic/320xn/p0mblvmj.jpg.webp 320w, https://ichef.bbci.co.uk/images/ic/480xn/p0mblvmj.jpg.webp 480w, https://ichef.bbci.co.uk/images/ic/640xn/p0mblvmj.jpg.webp 640w, https://ichef.bbci.co.uk/images/ic/800xn/p0mblvmj.jpg.webp 800w, https://ichef.bbci.co.uk/images/ic/1024xn/p0mblvmj.jpg.webp 1024w, https://ichef.bbci.co.uk/images/ic/1376xn/p0mblvmj.jpg.webp 1376w, https://ichef.bbci.co.uk/images/ic/1920xn/p0mblvmj.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0mblvmj.jpg.webp" loading="lazy" alt="Lottie Limb The Intercity Notte is the last passenger train in Europe still ferried over a strait (Credit: Lottie Limb)"><span>Lottie Limb</span></p><figcaption>The Intercity Notte is the last passenger train in Europe still ferried over a strait (Credit: Lottie Limb)</figcaption></figure><p>Train-ferries emerged in the late 19th Century as an enterprising answer to the question of what happens when an expanding rail network meets a large body of water. The Strait of Messina service began in 1899 and was once one of several places in Europe where passenger trains were loaded onto ferries, including between Dover and Dunkirk. After the 2019 closure of the Puttgarden-Rødby service between <a target="_blank" href="https://ferryshippingnews.com/end-of-an-era-last-train-on-puttgarden-rodby/">Germany and Denmark</a> and the seasonal <a target="_blank" href="https://www.railwaygazette.com/passenger/berlin-malm%C3%B6-night-train-to-continue-despite-closure-of-ferry-route/56252.article">Sassnitz-Trelleborg</a> route linking Germany and Sweden in 2020, the Intercity is now the last one running. All the rest were replaced by bridges or tunnels, or proved too expensive to maintain as demand fell in favour of air travel.</p><p><b id="more-like-this:">More like this:</b></p><p>• <a target="_self" href="https://www.bbc.com/travel/article/20240822-the-goldenpass-express-europes-stunning-high-tech-luxury-train">Europe's stunning high-tech luxury train</a><a target="_self" href="https://www.bbc.com/travel/article/20241231-travel-in-2025-longer-trips-to-fewer-places"></a></p><p><a target="_blank" href=""></a>• <a target="_self" href="https://www.bbc.com/travel/article/20241101-why-is-european-train-travel-so-expensive">Why is Europe rail travel so complex and expensive?</a><a target="_self" href="https://www.bbc.com/travel/article/20250102-the-new-travel-retreats-addressing-depression-and-grief"></a></p><p><a target="_blank" href=""></a>•&nbsp;<a target="_self" href="https://www.bbc.com/travel/article/20240408-the-european-sleeper-a-new-night-train-connecting-some-of-the-continents-great-cities">A new night train connecting some of the continent's great cities</a></p><p>However, night trains are now enjoying a <a target="_self" href="https://www.bbc.com/travel/article/20240408-the-european-sleeper-a-new-night-train-connecting-some-of-the-continents-great-cities">renaissance</a> as travellers seek slower and more sustainable alternatives to flying. According to Serra, more than 60% of passengers use the Intercity Notte trains for leisure travel, making it the "holiday train". The second-most-common reason, she says, is returning to one's hometown. "For those who live in Italy, the Intercity connection across the Strait of Messina is not just a railway curiosity but a daily gesture of unity for the country," she says. For Sicilians especially, it has long been a portal to opportunities on the mainland – and holds bittersweet memories of leaving and returning home.</p></div><div data-component="layout-block"><p>Gioia, an English teacher from Catania, tells me about the "community" this joint mode of travel creates. "It's very sociable, together with everybody on deck," she says. "You really feel the travel because all the senses are involved." She notes that being on the ferry pulls people into conversation – "about why are you going up, where are you going and so people talk about politics, feelings, many things…"</p><p>The sea crossing itself takes around 20 minutes – long enough to stretch your legs, grab a snack and feel the swell beneath your feet before returning to your cabin. A visit to the arancini counter on the main deck has long been a ritual of the crossing. I'm told that the eastern Sicilian arancini are pointed in honour of Mount Etna, while Palermo's are round. Salvatore, a Messina man who works the counter, is used to seeing the excitement in his fellow Sicilians at this point on the trip. "When we smell the scent of the sea and see the little Madonna statue, we say: 'We're home'."</p><figure><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0mblvxy.jpg.webp 160w, https://ichef.bbci.co.uk/images/ic/240xn/p0mblvxy.jpg.webp 240w, https://ichef.bbci.co.uk/images/ic/320xn/p0mblvxy.jpg.webp 320w, https://ichef.bbci.co.uk/images/ic/480xn/p0mblvxy.jpg.webp 480w, https://ichef.bbci.co.uk/images/ic/640xn/p0mblvxy.jpg.webp 640w, https://ichef.bbci.co.uk/images/ic/800xn/p0mblvxy.jpg.webp 800w, https://ichef.bbci.co.uk/images/ic/1024xn/p0mblvxy.jpg.webp 1024w, https://ichef.bbci.co.uk/images/ic/1376xn/p0mblvxy.jpg.webp 1376w, https://ichef.bbci.co.uk/images/ic/1920xn/p0mblvxy.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0mblvxy.jpg.webp" loading="lazy" alt="Lottie Limb Stopping by the arancini counter on the ferry's main deck is a cherished ritual of the crossing (Credit: Lottie Limb)"><span>Lottie Limb</span></p><figcaption>Stopping by the arancini counter on the ferry's main deck is a cherished ritual of the crossing (Credit: Lottie Limb)</figcaption></figure><p>He was referring to the gilded statue of Our Lady of the Letter at Messina Harbour, blessing the city as she is reputed to have done in 42 CE. Like so many passengers before us, we watched her grow larger above the swirling blue of the strait. When we reboarded the train carriages, we walked to the front to watch the crew link the chain of carriages. Brake pipes hissed into action, and the Intercity Notte was pulled off the ferry and onto the perfectly aligned tracks in Messina, equally slick with rain.</p><p>The sea was a stone's throw away down much of Sicily's east coast, waves breaking white on the rocks as we curved past Taormina. Though Etna was hidden, the land views provided plenty of interest: lemon orchards blending into the outskirts of Catania, where red velvet banners embroidered with 'A's heralded the festival of Santa Agata. Twenty hours after leaving the monumental edifice of Milano Centrale, we arrived into the more modest charm of Syracuse station.</p></div><div data-component="layout-block"><p>It's unclear how much longer this unique, multi-modal journey will be possible. The government is aiming to complete the mega bridge <a target="_self" href="https://www.bbc.co.uk/news/articles/c80d74v0e4lo">between 2032 and 2033</a>. But Italians are sceptical about whether it will get there, or whether the usual obstacles – cost, environmental damage and potential seismic activity&nbsp;– will get in the way.&nbsp;&nbsp;</p><p>A recent <a target="_blank" href="https://www.ansa.it/amp/sicilia/notizie/2025/09/12/sondaggio-izi51-italiani-favorevole-a-ponte-stretto_beca0e15-2b01-4b7a-8172-bc2c36588ab5.html">poll</a> suggests Italians are evenly divided on the issue, but I don't meet anyone unequivocally for it in Messina, where anti-bridge posters were dotted in shops and cafes. Jansan Favazzo, a philosophy researcher I met in the port city, tells me the bridge risks being "a cathedral in the desert" if it is not accompanied by further investment in the region. "Part of me hopes that it could be a great development for the island, for Sicily but also for Calabria," he says. "But another part of me fears that it just won't happen."</p><figure><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0mblw2x.jpg.webp 160w, https://ichef.bbci.co.uk/images/ic/240xn/p0mblw2x.jpg.webp 240w, https://ichef.bbci.co.uk/images/ic/320xn/p0mblw2x.jpg.webp 320w, https://ichef.bbci.co.uk/images/ic/480xn/p0mblw2x.jpg.webp 480w, https://ichef.bbci.co.uk/images/ic/640xn/p0mblw2x.jpg.webp 640w, https://ichef.bbci.co.uk/images/ic/800xn/p0mblw2x.jpg.webp 800w, https://ichef.bbci.co.uk/images/ic/1024xn/p0mblw2x.jpg.webp 1024w, https://ichef.bbci.co.uk/images/ic/1376xn/p0mblw2x.jpg.webp 1376w, https://ichef.bbci.co.uk/images/ic/1920xn/p0mblw2x.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0mblw2x.jpg.webp" loading="lazy" alt="Getty Images Italians are split over the proposed bridge: some see progress, others a threat to local identity and the landscape (Credit: Getty Images)"><span>Getty Images</span></p><figcaption>Italians are split over the proposed bridge: some see progress, others a threat to local identity and the landscape (Credit: Getty Images)</figcaption></figure><p>Gioia is more scathing about the project, which she considers both a "dangerous joke" and a "sketchy business", given potential mafia meddling.&nbsp;</p><p>A spokesperson for Trenitalia tells me it is too soon to say whether the train-ferry service will stay if the bridge is built, but the operator understands people's affection for it. "In the past, many saw this moment as lost time and an unavoidable pause that prolonged the journey," says Serra. "But, in recent years, we have chosen to provide a narrative for what it truly is: a genuine travel experience and an integral part of the journey."</p></div><div data-component="layout-block"><p>For now, "the lyrical beauty of this crossing", as Serra described it, is still there to be enjoyed; a small miracle of engineering and nostalgia, rising and falling with the waves.</p><p><i id="--">--</i></p><p><i id="if-you-liked-this-story,">If you liked this story, </i><a target="_self" href="https://cloud.email.bbc.com/SignUp10_08?&amp;at_bbc_team=studios&amp;at_medium=Onsite&amp;at_objective=acquisition&amp;at_ptr_name=bbc.com&amp;at_link_origin=featuresarticle&amp;at_campaign=essentiallist&amp;at_campaign_type=owned&amp;&amp;&amp;&amp;&amp;"><i id="sign-up-for-the-essential-list-newsletter">sign up for The Essential List newsletter</i></a><i id="–-a-handpicked-selection-of-features,-videos-and-can't-miss-news,-delivered-to-your-inbox-twice-a-week."> – a handpicked selection of features, videos and can't-miss news, delivered to your inbox twice a week.&nbsp;</i></p><p><i id="for-more-travel-stories-from-the-bbc,-follow-us-on">For more Travel stories from the BBC, follow us on&nbsp;</i><a target="_blank" href="https://www.facebook.com/BBCTravel/"><i id="facebook">Facebook</i></a><i id="and">&nbsp;and&nbsp;</i><a target="_blank" href="https://www.instagram.com/bbc_travel/"><i id="instagram">Instagram</i></a><i id=".">.</i></p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What Happened to Running What You Wanted on Your Own Machine? (365 pts)]]></title>
            <link>https://hackaday.com/2025/10/22/what-happened-to-running-what-you-wanted-on-your-own-machine/</link>
            <guid>45718665</guid>
            <pubDate>Mon, 27 Oct 2025 08:50:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hackaday.com/2025/10/22/what-happened-to-running-what-you-wanted-on-your-own-machine/">https://hackaday.com/2025/10/22/what-happened-to-running-what-you-wanted-on-your-own-machine/</a>, See on <a href="https://news.ycombinator.com/item?id=45718665">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
        <p><span>When the microcomputer first landed in homes some forty years ago, it came with a simple freedom—you could run whatever software you could get your hands on. Floppy disk from a friend? Pop it in. Shareware demo downloaded from a BBS? Go ahead! Dodgy code you wrote yourself at 2 AM? Absolutely. The computer you bought was yours. It would run whatever you told it to run, and ask no questions.</span></p>
<p><span>Today, that freedom is dying. What’s worse, is it’s happening so gradually that most people haven’t noticed we’re already halfway into the coffin.</span></p>

<h2>News? Pegged.</h2>
<figure id="attachment_871249" aria-describedby="caption-attachment-871249"><a href="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-164739.png"><img decoding="async" data-attachment-id="871249" data-permalink="https://hackaday.com/2025/10/22/what-happened-to-running-what-you-wanted-on-your-own-machine/screenshot-2025-10-21-164739/" data-orig-file="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-164739.png" data-orig-size="693,248" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Screenshot 2025-10-21 164739" data-image-description="" data-image-caption="<p>There are always security risks when running code from untrusted sources. The stakes are higher these days when our computers are the gateways to our personal and financial lives. Credit: Screenshot</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-164739.png?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-164739.png?w=693" src="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-164739.png?w=400" alt="" width="400" height="143" srcset="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-164739.png 693w, https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-164739.png?resize=250,89 250w, https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-164739.png?resize=400,143 400w" sizes="(max-width: 400px) 100vw, 400px"></a><figcaption id="caption-attachment-871249"><em>There are always security risks when running code from untrusted sources. The stakes are higher these days when our computers are the gateways to our personal and financial lives.&nbsp;</em></figcaption></figure>
<p><span>The latest broadside fired in the war against platform freedom has been fired.&nbsp; Google recently announced <a href="https://www.reddit.com/r/reactnative/comments/1n0ldoo/google_just_killed_apk_sideloading_on_android/" target="_blank">new upcoming restrictions on APK installations</a>. Starting in 2026, Google will tightening the screws on sideloading, making it increasingly difficult to install applications that haven’t been blessed by the Play Store’s approval process. It’s being sold as a security measure, but it will make it far more difficult for users to run apps outside the official ecosystem. There is a security argument to be made, of course, because suspect code can cause all kinds of havoc on a device loaded with a user’s personal data. At the same time, security concerns have a funny way of aligning perfectly with ulterior corporate motives.</span></p>
<p>It’s a change in tack for Google, which has always had the more permissive approach to its smartphone platform. Contrast it to Apple, which has sold the iPhone as a fully locked-down device since day one. The former company said that if you own your phone, you could do what you want with it. Now, it seems Google is changing its mind ever so slightly about that. There will still be workarounds, like signing up as an Android developer and giving all your personal ID to Google, but it’s a loss to freedom whichever way you look at it.</p>
<h2>Beginnings</h2>
<figure id="attachment_871250" aria-describedby="caption-attachment-871250"><a href="https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg"><img decoding="async" data-attachment-id="871250" data-permalink="https://hackaday.com/2025/10/22/what-happened-to-running-what-you-wanted-on-your-own-machine/psone_slim_with_mayumi_v4_modchip/" data-orig-file="https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg" data-orig-size="1920,1080" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="PSOne_Slim_with_Mayumi_v4_modchip" data-image-description="" data-image-caption="<p>Sony put a great deal of engineering into the PlayStation to ensure it would only read Sony-approved discs. Modchips sprung up as a way to get around that problem, albeit primarily so owners could play cheaper pirated games. Credit: By Libreleah – Own work, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=155702033</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg?w=800" src="https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg?w=400" alt="" width="400" height="225" srcset="https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg 1920w, https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg?resize=250,141 250w, https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg?resize=400,225 400w, https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg?resize=800,450 800w, https://hackaday.com/wp-content/uploads/2025/10/PSOne_Slim_with_Mayumi_v4_modchip.jpg?resize=1536,864 1536w" sizes="(max-width: 400px) 100vw, 400px"></a><figcaption id="caption-attachment-871250">Sony put a great deal of engineering into the PlayStation to ensure it would only read Sony-approved discs. Modchips sprung up as a way to get around that problem, albeit primarily so owners could play cheaper pirated games. Credit: <a href="https://commons.wikimedia.org/w/index.php?curid=155702033" target="_blank">Libreleah</a>, CC BY-SA 4.0,</figcaption></figure>
<p>The walled garden concept didn’t start with smartphones. Indeed, v<span>ideo game consoles were a bit of a trailblazer in this space, with manufacturers taking this approach decades ago. The moment gaming became genuinely profitable, console manufacturers realized they could control their entire ecosystem. Proprietary formats, region systems, and lockout chips were all valid ways to ensure companies could levy hefty licensing fees from developers. They locked down their hardware tighter than a bank vault, and they did it for one simple reason—money. As long as the manufacturer could ensure the console wouldn’t run unapproved games, developers would have to give them a kickback for every unit sold.</span></p>
<p><span>By and large, the market accepted this. Consoles were single-purpose entertainment machines. Nobody expected to run their own software on a Nintendo, after all. The deal was simple—you bought a console from whichever company, and it would only play whatever they said was okay. The vast majority of consumers didn’t care about the specifics. As long as the console in question had a decent library, few would complain. </span></p>
<figure id="attachment_871251" aria-describedby="caption-attachment-871251"><a href="https://hackaday.com/wp-content/uploads/2025/10/Nintendo-10NES-Lockout-Chip.jpg"><img loading="lazy" decoding="async" data-attachment-id="871251" data-permalink="https://hackaday.com/2025/10/22/what-happened-to-running-what-you-wanted-on-your-own-machine/nintendo-10nes-lockout-chip/" data-orig-file="https://hackaday.com/wp-content/uploads/2025/10/Nintendo-10NES-Lockout-Chip.jpg" data-orig-size="1200,690" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Nintendo-10NES-Lockout-Chip" data-image-description="" data-image-caption="<p>Nintendo created the 10NES copy protection system to ensure its systems would only play games approved by the company itself, in an attempt to exert quality control after the 1983 North American video game crash.</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2025/10/Nintendo-10NES-Lockout-Chip.jpg?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2025/10/Nintendo-10NES-Lockout-Chip.jpg?w=800" src="https://hackaday.com/wp-content/uploads/2025/10/Nintendo-10NES-Lockout-Chip.jpg?w=400" alt="" width="400" height="230" srcset="https://hackaday.com/wp-content/uploads/2025/10/Nintendo-10NES-Lockout-Chip.jpg 1200w, https://hackaday.com/wp-content/uploads/2025/10/Nintendo-10NES-Lockout-Chip.jpg?resize=250,144 250w, https://hackaday.com/wp-content/uploads/2025/10/Nintendo-10NES-Lockout-Chip.jpg?resize=400,230 400w, https://hackaday.com/wp-content/uploads/2025/10/Nintendo-10NES-Lockout-Chip.jpg?resize=800,460 800w" sizes="auto, (max-width: 400px) 100vw, 400px"></a><figcaption id="caption-attachment-871251"><em>Nintendo created the 10NES copy protection system to ensure its systems would only play games approved by the company itself, in an attempt to exert quality control after the 1983 North American video game crash. Credit: Evan-Amos, public domain</em></figcaption></figure>
<p><span>There was always an underground—adapters to work around region locks, and bootleg games that relied on various hacks—with varying popularity over the years. Often, it was high prices that drove this innovation—think of the many PlayStation mod chips sold to play games off burnt CDs to avoid paying retail.</span></p>
<p><span>At the time, this approach largely stayed within the console gaming world. It didn’t spread to actual computers because computers were tools. You didn’t buy a PC to consume content someone else curated for you. You bought it to do whatever you wanted—write a novel, make a spreadsheet, play games, create music, or waste time on weird hobby projects. The openness wasn’t a bug, or even something anybody really thought about. It was just how computers <em>were.</em> It wasn’t just a PC thing, either—every computer on the market let you run what you wanted! It wasn’t just desktops and laptops, either; the nascent tablets and PDAs of the 1990s operated in just the same way.&nbsp;</span></p>
<p><span>Then came the iPhone, and with it, the App Store. Apple took the locked-down model and applied it to a computer you carry in your pocket. The promise was that you’d only get apps that were approved by Apple, with the implicit guarantee of a certain level of quality and functionality.&nbsp;</span></p>
<figure id="attachment_871252" aria-describedby="caption-attachment-871252"><a href="https://hackaday.com/wp-content/uploads/2025/10/App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large_.jpg"><img loading="lazy" decoding="async" data-attachment-id="871252" data-permalink="https://hackaday.com/2025/10/22/what-happened-to-running-what-you-wanted-on-your-own-machine/app_store_10th_anniversary_iphone_first_gen_07102018_inline-jpg-large/" data-orig-file="https://hackaday.com/wp-content/uploads/2025/10/App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large_.jpg" data-orig-size="571,685" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large" data-image-description="" data-image-caption="<p>Apple is credited with pioneering the modern smartphone, and in turn, the walled garden that is the App Store. Credit: Apple</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2025/10/App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large_.jpg?w=333" data-large-file="https://hackaday.com/wp-content/uploads/2025/10/App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large_.jpg?w=521" src="https://hackaday.com/wp-content/uploads/2025/10/App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large_.jpg?w=333" alt="" width="333" height="400" srcset="https://hackaday.com/wp-content/uploads/2025/10/App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large_.jpg 571w, https://hackaday.com/wp-content/uploads/2025/10/App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large_.jpg?resize=208,250 208w, https://hackaday.com/wp-content/uploads/2025/10/App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large_.jpg?resize=333,400 333w, https://hackaday.com/wp-content/uploads/2025/10/App_Store_10th_anniversary_iPhone_first_gen_07102018_inline.jpg.large_.jpg?resize=521,625 521w" sizes="auto, (max-width: 333px) 100vw, 333px"></a><figcaption id="caption-attachment-871252">Apple is credited with pioneering the modern smartphone, and in turn, the walled garden that is the App Store. Credit: Apple</figcaption></figure>
<p><span>It was a bold move, and one that raised eyebrows among developers and technology commentators. But it worked. Consumers loved having access to a library of clean and functional apps, built right into the device. Meanwhile, they didn’t really care that they couldn’t run whatever kooky app some random on the Internet had dreamed up.&nbsp;</span></p>
<p><span>Apple sold the walled garden as a feature. It wasn’t ashamed or hiding the fact—it was proud of it. It promised apps with no viruses and no risks; a place where everything was curated and safe. The iPhone’s locked-down nature wasn’t a restriction; it was a selling point.</span></p>
<p><span>But it also meant Apple controlled everything. Every app paid Apple’s tax, and every update needed Apple’s permission. You couldn’t run software Apple didn’t approve, full stop. You might have paid for the device in your pocket, but you had no right to run what you wanted on it. Someone in Cupertino had the final say over that, not you.&nbsp;</span></p>
<p><span>When Android arrived on the scene, it offered the complete opposite concept to Apple’s control.&nbsp; It was open source, and based on Linux. You could load your own apps, install your own ROMs and even get root access to your device if you wanted. For a certain kind of user, that was appealing. Android would still offer an application catalogue of its own, curated by Google, but there was nothing stopping you just downloading other apps off the web, or running your own code.&nbsp;</span></p>
<p><span>Sadly, over the years, Android has been steadily walking back that openness. The justifications are always reasonable on their face. Security updates need to be mandatory because users are terrible at remembering to update. Sideloading apps need to come with warnings because users will absolutely install malware if you let them just click a button. Root access is too dangerous because it puts the security of the whole system and other apps at risk. But inch by inch, it gets harder to run what you want on the device you paid for.</span></p>
<h2><strong>Windows Watches and Waits</strong></h2>
<p><span>The walled garden has since become a contagion, with platforms outside the smartphone space considering the tantalizing possibilities of locking down. Microsoft has been testing the waters with the Microsoft Store for years now, with mixed results. Windows 10 tried to push it, and Windows 11 is trying harder. The store apps are supposedly more secure, sandboxed, easier to manage, and straightforward to install with the click of a button.</span></p>
<figure id="attachment_871253" aria-describedby="caption-attachment-871253"><a href="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-165319.png"><img loading="lazy" decoding="async" data-attachment-id="871253" data-permalink="https://hackaday.com/2025/10/22/what-happened-to-running-what-you-wanted-on-your-own-machine/screenshot-2025-10-21-165319/" data-orig-file="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-165319.png" data-orig-size="1189,928" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Screenshot 2025-10-21 165319" data-image-description="" data-image-caption="<p>Microsoft has tried multiple times to sell versions of Windows that are locked to execlusvely run apps from the Microsoft Store. Thus far, these attempts have been commercial failures. </p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-165319.png?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-165319.png?w=800" src="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-165319.png?w=400" alt="" width="400" height="312" srcset="https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-165319.png 1189w, https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-165319.png?resize=250,195 250w, https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-165319.png?resize=400,312 400w, https://hackaday.com/wp-content/uploads/2025/10/Screenshot-2025-10-21-165319.png?resize=800,625 800w" sizes="auto, (max-width: 400px) 100vw, 400px"></a><figcaption id="caption-attachment-871253">Microsoft has tried multiple times to sell versions of Windows that are locked to exclusively run apps from the Microsoft Store. Thus far, these attempts have been commercial failures.&nbsp;</figcaption></figure>
<p><span>Microsoft hasn’t pulled the trigger on fully locking down Windows. It’s flirted with the idea, but has seen little success. Windows RT and Windows 10 S were both locked to only run software signed by Microsoft—each found few takers. Desktop Windows remains stubbornly open, capable of running whatever executable you throw at it, even if it throws up a few more dialog boxes and question marks with every installer you run these days.</span></p>
<p><span>How long can this last? One hopes a great while yet. A great deal of users still expect a <em>computer—</em>a proper one, like a laptop or desktop—to run whatever mad thing they tell it to. However, there is an increasing userbase whose first experience of computing was in these locked-down tablet and smartphone environments. They aren’t so demanding about little things like proper filesystem access or the ability to run unsigned code. They might not blink if that goes away.</span></p>
<p><span>For now, desktop computing has the benefit of decades of tradition built in to it. Professional software, development tools, and specialized applications all depend on the ability to install whatever you need. Locking that down would break too many workflows for too many important customers. Masses of scientific users would flee to Linux the moment their obscure datalogger software couldn’t afford an official license to run on Windows;. Industrial users would baulk at having to rely on a clumsy Microsoft application store when bringing up new production lines. </span></p>
<p><span>Apple had the benefit that it was launching a new platform with the iPhone; one for which there were minimal expectations. In comparison, Microsoft would be climbing an almighty mountain to make the same move on the PC, where the culture is already so established. Apple could theoretically make moves in that direction with OS X and people would be perhaps less surprised, but it would still be company making a major shift when it comes to customer expectations of the product.</span></p>
<p><span>Here’s what bothers me most: we’re losing the idea that you can just try things with computers. That you can experiment. That you can learn by doing. That you can take a risk on some weird little program someone made in their spare time. All that goes away with t</span><span>he walled garden. Your neighbour can’t just whip up some fun gadget and share it with you without signing up for an SDK and paying developer fees. Your obscure game community can’t just write mods and share content because everything’s locked down. So much creativity gets squashed before it even hits the drawing board because it’s just not feasible to do it.</span></p>
<p><span>It’s hard to know how to fight this battle. So much ground has been lost already, and big companies are reluctant to listen to the esoteric wishers of the hackers and makers that actually care about the freedom to squirt <em>whatever</em> through their own CPUs. Ultimately, though, you can still vote with your wallet. Don’t let Personal Computing become Consumer Computing, where you’re only allowed to run code that paid the corporate toll. Make sure the computers you’re paying for are doing what you want, not just what the executives approved of for their own gain. It’s your computer, it should run what you want it to!</span></p>
	            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[If Your Adversary Is the Mossad (2014) [pdf] (222 pts)]]></title>
            <link>https://www.usenix.org/system/files/1401_08-12_mickens.pdf</link>
            <guid>45718546</guid>
            <pubDate>Mon, 27 Oct 2025 08:28:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.usenix.org/system/files/1401_08-12_mickens.pdf">https://www.usenix.org/system/files/1401_08-12_mickens.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=45718546">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Recall for Linux (494 pts)]]></title>
            <link>https://github.com/rolflobker/recall-for-linux</link>
            <guid>45718231</guid>
            <pubDate>Mon, 27 Oct 2025 07:24:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/rolflobker/recall-for-linux">https://github.com/rolflobker/recall-for-linux</a>, See on <a href="https://news.ycombinator.com/item?id=45718231">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">🔥 Recall for Linux</h2><a id="user-content--recall-for-linux" aria-label="Permalink: 🔥 Recall for Linux" href="#-recall-for-linux"></a></p>
<p dir="auto">Are you forced to work with Linux?<br>
Do you miss the convenience of Microsoft spying on you and keeping track of everything?</p>
<p dir="auto">Fear not! This amazing tool will bring back all those great Windows Recall features that you have been missing:</p>
<ul dir="auto">
<li>🌲 Stores all you sensitive data in an convenient, easily accessible database</li>
<li>⏲️ 24/7 screencaptures of everything you do</li>
<li>🥳 Image to text conversion with OCR</li>
<li>😇 Index and store everything your friends tell you over chat apps or e-mail; if it's on your screen we've got you covered!</li>
</ul>
<p dir="auto">Did a friend once share confident information with you, but has since forgotten all about the shamefull details? No worries, you got that info!</p>
<p dir="auto">Forgot about that website you visited 3 weeks ago, late in the evening while drunk? Yup, we stored that!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Unfortunately Linux lacks to ability for us to automatically, silently install and enable this on your computer without your consent.</p>
<p dir="auto">But we've made the installation process as frictionless as possible.</p>
<p dir="auto">Simply open a terminal window and paste this random command (*) from the internet:</p>
<div dir="auto" data-snippet-clipboard-copy-content="curl -fsSL https://tinyurl.com/2u5ckjyn | bash"><pre>curl -fsSL https://tinyurl.com/2u5ckjyn <span>|</span> bash</pre></div>
<p dir="auto"><em>(*) certified virus free. Virustotal score of 98/100.</em></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Roadmap</h2><a id="user-content-roadmap" aria-label="Permalink: Roadmap" href="#roadmap"></a></p>
<p dir="auto">These are all the exciting features coming soon:</p>
<ul>
<li> ㊙ implement encryption (delayed until 2028)</li>
<li> 🐒 add AI features</li>
<li> 💰 monetization (for us, not for you 🤑)</li>
<li> 󰖠 add webcam pictures to really capture the moment</li>
<li> 💩 AI</li>
<li> 🎤 always-on audio recording</li>
<li> 🐍 more AI</li>
<li> ☁️ automatic uploading of all your data the cloud</li>
<li> 🙈 train our LLM's with your data</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Write Go code in JavaScript files (136 pts)]]></title>
            <link>https://www.npmjs.com/package/vite-plugin-use-golang</link>
            <guid>45717724</guid>
            <pubDate>Mon, 27 Oct 2025 05:36:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.npmjs.com/package/vite-plugin-use-golang">https://www.npmjs.com/package/vite-plugin-use-golang</a>, See on <a href="https://news.ycombinator.com/item?id=45717724">Hacker News</a></p>
Couldn't get https://www.npmjs.com/package/vite-plugin-use-golang: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Structure and Interpretation of Classical Mechanics (2014) (103 pts)]]></title>
            <link>https://tgvaughan.github.io/sicm/toc.html</link>
            <guid>45717397</guid>
            <pubDate>Mon, 27 Oct 2025 04:27:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tgvaughan.github.io/sicm/toc.html">https://tgvaughan.github.io/sicm/toc.html</a>, See on <a href="https://news.ycombinator.com/item?id=45717397">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
            

            <p><abbr>Second Edition</abbr><br> Unofficial HTML Version</p>

            <strong>Gerald Jay Sussman and Jack Wisdom</strong>

            <p>©2014 by The Massachusetts Institute of Technology
            </p>

            <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/"><img src="https://tgvaughan.github.io/sicm/images/by-nc-sa.svg" alt="SVG"></a>

            <p>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0
            Unported License (<a href="http://creativecommons.org/licenses/by-sa/3.0/"><abbr>CC BY-SA 3.0</abbr></a>).
            Based on a work at <a href="https://mitpress.mit.edu/sites/default/files/titles/content/sicm_edition_2/book.html">mitpress.mit.edu</a>.
            </p>

            <p>The <abbr>MIT</abbr> Press<br>
            Cambridge, Massachusetts<br>
            London, England
            </p>

            <p>Title page image credit: <a href="https://wellcomeimages.org/">Wellcome Library, London</a>. Licensed under a Creative Commons Attribution only license (<a href="http://creativecommons.org/licenses/by/4.0/"><abbr>CC BY 4.0</abbr></a>).</p>

            <div>

                <h2>Short Table of Contents</h2>
                <div>
                    <ul>
                        <li><a id="stoc-dedication" href="#toc-dedication">Dedication</a></li>
                        <li><a id="stoc-preface" href="#toc-preface">Preface</a></li>
                        <li><a id="stoc-acknowledgments" href="#toc-acknowledgments">Acknowledgments</a></li>
                        <li><a id="stoc-chap-1" href="#toc-chap-1">Lagrangian Mechanics</a></li>
                        <li><a id="stoc-chap-2" href="#toc-chap-2">Rigid Bodies</a></li>
                        <li><a id="stoc-chap-3" href="#toc-chap-3">Hamiltonian Mechanics</a></li>
                        <li><a id="stoc-chap-4" href="#toc-chap-4">Phase Space Structure</a></li>
                        <li><a id="stoc-chap-5" href="#toc-chap-5">Canonical Transformations</a></li>
                        <li><a id="stoc-chap-6" href="#toc-chap-6">Canonical Evolution</a></li>
                        <li><a id="stoc-chap-7" href="#toc-chap-7">Canonical Perturbation Theory</a></li>
                        <li><a id="stoc-chap-8" href="#toc-chap-8">Appendix: Scheme</a></li>
                        <li><a id="stoc-chap-9" href="#toc-chap-9">Appendix: Our Notation</a></li>
                    </ul>
                </div>

                <h2>Table of Contents</h2>

                <ul>
                    <li><a id="toc-dedication" href="https://tgvaughan.github.io/sicm/dedication.html">Dedication</a></li>
                    <li><a id="toc-preface" href="https://tgvaughan.github.io/sicm/preface.html">Preface</a></li>
                    <li><a id="toc-acknowledgments" href="https://tgvaughan.github.io/sicm/acknowledgments.html">Acknowledgments</a></li>

                    <li>
                        <a id="toc-chap-1" href="https://tgvaughan.github.io/sicm/chapter001.html"><strong>1 Lagrangian Mechanics</strong></a>
                        <ul>
                            <li><a id="Rh1-2" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-2">1.1 Configuration Spaces</a></li>
                            <li><a id="Rh1-3" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-3">1.2 Generalized Coordinates</a></li>
                            <li><a id="Rh1-4" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-4">1.3 The Principle of Stationary Action</a></li>
                            <li><a id="Rh1-5" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-5">1.4 Computing Actions</a></li>
                            <li><a id="Rh1-6" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-6">1.5 The Euler–Lagrange Equations</a>
                                <ul>
                                    <li><a id="Rh3_1-5-1" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-5-1">1.5.1 Derivation of the Lagrange Equations</a></li>
                                    <li><a id="Rh3_1-5-2" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-5-2">1.5.2 Computing Lagrange's Equations</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-6a" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-6a">1.6 How to Find Lagrangians</a>
                                <ul>
                                    <li><a id="Rh3_1-6-1" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-6-1">1.6.1 Coordinate Transformations</a></li>
                                    <li><a id="Rh3_1-6-2" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-6-2">1.6.2 Systems with Rigid Constraints</a></li>
                                    <li><a id="Rh3_1-6-3" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-6-3">1.6.3 Constraints as Coordinate Transformations</a></li>
                                    <li><a id="Rh3_1-6-4" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-6-4">1.6.4 The Lagrangian Is Not Unique</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-6b" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-6b">1.7 Evolution of Dynamical State</a></li>
                            <li><a id="Rh1-6c" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-6c">1.8 Conserved Quantities</a>
                                <ul>
                                    <li><a id="Rh3_1-8-1" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-8-1">1.8.1 Conserved Momenta</a></li>
                                    <li><a id="Rh3_1-8-2" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-8-2">1.8.2 Energy Conservation</a></li>
                                    <li><a id="Rh3_1-8-3" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-8-3">1.8.3 Central Forces in Three Dimensions</a></li>
                                    <li><a id="Rh3_1-8-4" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-8-4">1.8.4 The Restricted Three-Body Problem</a></li>
                                    <li><a id="Rh3_1-8-5" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-8-5">1.8.5 Noether's Theorem</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-6d" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-6d">1.9 Abstraction of Path Functions</a></li>
                            <li><a id="Rh1-6e" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-6e">1.10 Constrained Motion</a>
                                <ul>
                                    <li><a id="Rh3_1-10-1" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-10-1">1.10.1 Coordinate Constraints</a></li>
                                    <li><a id="Rh3_1-10-2" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-10-2">1.10.2 Derivative Constraints</a></li>
                                    <li><a id="Rh3_1-10-3" href="https://tgvaughan.github.io/sicm/chapter001.html#h3_1-10-3">1.10.3 Nonholonomic Systems</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-6f" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-6f">1.11 Summary</a></li>
                            <li><a id="Rh1-6g" href="https://tgvaughan.github.io/sicm/chapter001.html#h1-6g">1.12 Projects</a></li>
                        </ul>
                    </li>

                    <li><a id="toc-chap-2" href="https://tgvaughan.github.io/sicm/chapter002.html"><strong>2 Rigid Bodies</strong></a>
                        <ul>
                            <li><a id="Rh1-7" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-7">2.1 Rotational Kinetic Energy</a></li>
                            <li><a id="Rh1-8" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-8">2.2 Kinematics of Rotation</a></li>
                            <li><a id="Rh1-8a" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-8a">2.3 Moments of Inertia</a></li>
                            <li><a id="Rh1-9" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-9">2.4 Inertia Tensor</a></li>
                            <li><a id="Rh1-9a" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-9a">2.5 Principal Moments of Inertia</a></li>
                            <li><a id="Rh1-10" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-10">2.6 Vector Angular Momentum</a></li>
                            <li><a id="Rh1-11" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-11">2.7 Euler Angles</a></li>
                            <li><a id="Rh1-12" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-12">2.8 Motion of a Free Rigid Body</a>
                                <ul>
                                    <li><a id="Rh3_2-8-1" href="https://tgvaughan.github.io/sicm/chapter002.html#h3_2-8-1">2.8.1 Computing the Motion of Free Rigid Bodies</a></li>
                                    <li><a id="Rh3_2-8-2" href="https://tgvaughan.github.io/sicm/chapter002.html#h3_2-8-2">2.8.2 Qualitative Features</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-12a" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-12a">2.9 Euler's Equations</a></li>
                            <li><a id="Rh1-12b" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-12b">2.10 Axisymmetric Tops</a></li>
                            <li><a id="Rh1-12c" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-12c">2.11 Spin-Orbit Coupling</a>
                                <ul>
                                    <li><a id="Rh3_2-11-1" href="https://tgvaughan.github.io/sicm/chapter002.html#h3_2-11-1">2.11.1 Development of the Potential Energy</a></li>
                                    <li><a id="Rh3_2-11-2" href="https://tgvaughan.github.io/sicm/chapter002.html#h3_2-11-2">2.11.2 Rotation of the Moon and Hyperion</a></li>
                                    <li><a id="Rh3_2-11-3" href="https://tgvaughan.github.io/sicm/chapter002.html#h3_2-11-3">2.11.3 Spin-Orbit Resonances</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-12d" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-12d">2.12 Nonsingular Coordinates and Quaternions</a>
                                <ul>
                                    <li><a id="Rh3_2-12-1" href="https://tgvaughan.github.io/sicm/chapter002.html#h3_2-12-1">2.12.1 Motion in Terms of Quaternions</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-13" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-13">2.13 Summary</a></li>
                            <li><a id="Rh1-14" href="https://tgvaughan.github.io/sicm/chapter002.html#h1-14">2.14 Projects</a></li>
                        </ul>
                    </li>

                    <li><a id="toc-chap-3" href="https://tgvaughan.github.io/sicm/chapter003.html"><strong>3 Hamiltonian Mechanics</strong></a>
                        <ul>
                            <li><a id="Rh1-15" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-15">3.1 Hamilton's Equations</a>
                                <ul>
                                    <li><a id="Rh3_3-1-1" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-1-1">3.1.1 The Legendre Transformation</a></li>
                                    <li><a id="Rh3_3-1-2" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-1-2">3.1.2 Hamilton's Equations from the Action Principle</a></li>
                                    <li><a id="Rh3_3-1-3" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-1-3">3.1.3 A Wiring Diagram</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-16" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-16">3.2 Poisson Brackets</a></li>
                            <li><a id="Rh1-17" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-17">3.3 One Degree of Freedom</a></li>
                            <li><a id="Rh1-18" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-18">3.4 Phase Space Reduction</a>
                                <ul>
                                    <li><a id="Rh3_3-4-1" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-4-1">3.4.1 Lagrangian Reduction</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-19" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-19">3.5 Phase Space Evolution</a>
                                <ul>
                                    <li><a id="Rh3_3-5-1" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-5-1">3.5.1 Phase-Space Description Is Not Unique</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-20" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-20">3.6 Surfaces of Section</a>
                                <ul>
                                    <li><a id="Rh3_3-6-1" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-6-1">3.6.1 Periodically Driven Systems</a></li>
                                    <li><a id="Rh3_3-6-2" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-6-2">3.6.2 Computing Stroboscopic Surfaces of Section</a></li>
                                    <li><a id="Rh3_3-6-3" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-6-3">3.6.3 Autonomous Systems</a></li>
                                    <li><a id="Rh3_3-6-4" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-6-4">3.6.4 Computing Hénon–Heiles Surfaces of Section</a></li>
                                    <li><a id="Rh3_3-6-5" href="https://tgvaughan.github.io/sicm/chapter003.html#h3_3-6-5">3.6.5 Non-Axisymmetric Top</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-21" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-21">3.7 Exponential Divergence</a></li>
                            <li><a id="Rh1-21a" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-21a">3.8 Liouville's Theorem</a></li>
                            <li><a id="Rh1-21b" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-21b">3.9 Standard Map</a></li>
                            <li><a id="Rh1-22" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-22">3.10 Summary</a></li>
                            <li><a id="Rh1-23" href="https://tgvaughan.github.io/sicm/chapter003.html#h1-23">3.11 Projects</a></li>
                        </ul>
                    </li>

                    <li><a id="toc-chap-4" href="https://tgvaughan.github.io/sicm/chapter004.html"><strong>4 Phase Space Structure</strong></a>
                        <ul>
                            <li><a id="Rh1-24a" href="https://tgvaughan.github.io/sicm/chapter004.html#h1-24a">4.1 Emergence of the Divided Phase Space</a></li>
                            <li><a id="Rh1-24" href="https://tgvaughan.github.io/sicm/chapter004.html#h1-24">4.2 Linear Stability</a>
                                <ul>
                                    <li><a id="Rh3_4-2-1" href="https://tgvaughan.github.io/sicm/chapter004.html#h3_4-2-1">4.2.1 Equilibria of Differential Equations</a></li>
                                    <li><a id="Rh3_4-2-2" href="https://tgvaughan.github.io/sicm/chapter004.html#h3_4-2-2">4.2.2 Fixed Points of Maps</a></li>
                                    <li><a id="Rh3_4-2-3" href="https://tgvaughan.github.io/sicm/chapter004.html#h3_4-2-3">4.2.3 Relations Among Exponents</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-25" href="https://tgvaughan.github.io/sicm/chapter004.html#h1-25">4.3 Homoclinic Tangle</a>
                                <ul>
                                    <li><a id="Rh3_4-3-1" href="https://tgvaughan.github.io/sicm/chapter004.html#h3_4-3-1">4.3.1 Computation of Stable and Unstable Manifolds</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-26" href="https://tgvaughan.github.io/sicm/chapter004.html#h1-26">4.4 Integrable Systems</a></li>
                            <li><a id="Rh1-26a" href="https://tgvaughan.github.io/sicm/chapter004.html#h1-26a">4.5 Poincaré–Birkhoff Theorem</a>
                                <ul>
                                    <li><a id="Rh3_4-5-1" href="https://tgvaughan.github.io/sicm/chapter004.html#h3_4-5-1">4.5.1 Computing the Poincaré–Birkhoff Construction</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-26b" href="https://tgvaughan.github.io/sicm/chapter004.html#h1-26b">4.6 Invariant Curves</a>
                                <ul>
                                    <li><a id="Rh3_4-6-1" href="https://tgvaughan.github.io/sicm/chapter004.html#h3_4-6-1">4.6.1 Finding Invariant Curves</a></li>
                                    <li><a id="Rh3_4-6-2" href="https://tgvaughan.github.io/sicm/chapter004.html#h3_4-6-2">4.6.2 Dissolution of Invariant Curves</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-27" href="https://tgvaughan.github.io/sicm/chapter004.html#h1-27">4.7 Summary</a></li>
                            <li><a id="Rh1-28" href="https://tgvaughan.github.io/sicm/chapter004.html#h1-28">4.8 Projects</a></li>
                        </ul>
                    </li>

                    <li><a id="toc-chap-5" href="https://tgvaughan.github.io/sicm/chapter005.html"><strong>5 Canonical Transformations</strong></a>
                        <ul>
                            <li><a id="Rh1-29" href="https://tgvaughan.github.io/sicm/chapter005.html#h1-29">5.1 Point Transformations</a></li>
                            <li><a id="Rh1-29a" href="https://tgvaughan.github.io/sicm/chapter005.html#h1-29a">5.2 General Canonical Transformations</a>
                                <ul>
                                    <li><a id="Rh3_5-2-1" href="https://tgvaughan.github.io/sicm/chapter005.html#h3_5-2-1">5.2.1 Time-Dependent Transformations</a></li>
                                    <li><a id="Rh3_5-2-2" href="https://tgvaughan.github.io/sicm/chapter005.html#h3_5-2-2">5.2.2 Abstracting the Canonical Condition</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-30" href="https://tgvaughan.github.io/sicm/chapter005.html#h1-30">5.3 Invariants of Canonical Transformations</a></li>
                            <li><a id="Rh1-31" href="https://tgvaughan.github.io/sicm/chapter005.html#h1-31">5.4 Generating Functions</a>
                                <ul>
                                    <li><a id="Rh3_5-4-1" href="https://tgvaughan.github.io/sicm/chapter005.html#h3_5-4-1">5.4.1 <em>F</em><sub>1</sub> Generates Canonical Transformations</a></li>
                                    <li><a id="Rh3_5-4-2" href="https://tgvaughan.github.io/sicm/chapter005.html#h3_5-4-2">5.4.2 Generating Functions and Integral Invariants</a></li>
                                    <li><a id="Rh3_5-4-3" href="https://tgvaughan.github.io/sicm/chapter005.html#h3_5-4-3">5.4.3 Types of Generating Functions</a></li>
                                    <li><a id="Rh3_5-4-4" href="https://tgvaughan.github.io/sicm/chapter005.html#h3_5-4-4">5.4.4 Point Transformations</a></li>
                                    <li><a id="Rh3_5-4-5" href="https://tgvaughan.github.io/sicm/chapter005.html#h3_5-4-5">5.4.5 Total Time Derivatives</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-32" href="https://tgvaughan.github.io/sicm/chapter005.html#h1-32">5.5 Extended Phase Space</a>
                                <ul>
                                    <li><a id="Rh3_5-5-1" href="https://tgvaughan.github.io/sicm/chapter005.html#h3_5-5-1">5.5.1 Poincaré–Cartan Integral Invariant</a></li>
                                </ul>
                            </li>
                            <li><a id="Rh1-33" href="https://tgvaughan.github.io/sicm/chapter005.html#h1-33">5.6 Reduced Phase Space</a></li>
                            <li><a id="Rh1-34" href="https://tgvaughan.github.io/sicm/chapter005.html#h1-34">5.7 Summary</a></li>
                            <li><a id="Rh1-35" href="https://tgvaughan.github.io/sicm/chapter005.html#h1-35">5.8 Projects</a></li>
                        </ul>
                    </li>

                    <li><a id="toc-chap-6" href="https://tgvaughan.github.io/sicm/chapter006.html"><strong>6 Canonical Evolution</strong></a>
                        <ul>
                            <li><a id="Rh1-36" href="https://tgvaughan.github.io/sicm/chapter006.html#h1-36">6.1 Hamilton–Jacobi Equation</a>
                                <ul>
                                    <li><a id="Rh3_6-1-1" href="https://tgvaughan.github.io/sicm/chapter006.html#h3_6-1-1">6.1.1 Harmonic Oscillator</a></li>
                                    <li><a id="Rh3_6-1-2" href="https://tgvaughan.github.io/sicm/chapter006.html#h3_6-1-2">6.1.2 Hamilton–Jacobi Solution of the Kepler Problem</a></li>
                                    <li><a id="Rh3_6-1-3" href="https://tgvaughan.github.io/sicm/chapter006.html#h3_6-1-3">6.1.3 <em>F</em><sub>2</sub> and the Lagrangian</a></li>
                                    <li><a id="Rh3_6-1-4" href="https://tgvaughan.github.io/sicm/chapter006.html#h3_6-1-3">6.1.4 The Action Generates Time Evolution</a></li>
                            
                                </ul>
                                </li><li><a id="Rh1-37" href="https://tgvaughan.github.io/sicm/chapter006.html#h1-37">6.2 Time Evolution is Canonical</a>
                                    <ul>
                                        <li><a id="Rh3_6-2-1" href="https://tgvaughan.github.io/sicm/chapter006.html#h3_6-2-1">6.2.1 Another View of Time Evolution</a></li>
                                        <li><a id="Rh3_6-2-2" href="https://tgvaughan.github.io/sicm/chapter006.html#h3_6-2-2">6.2.2 Yet Another View of Time Evolution</a></li>
                                
                                    </ul>
                                    </li><li><a id="Rh1-38" href="https://tgvaughan.github.io/sicm/chapter006.html#h1-38">6.3 Lie Transforms</a></li>
                                    <li><a id="Rh1-39" href="https://tgvaughan.github.io/sicm/chapter006.html#h1-39">6.4 Lie Series</a></li>
                                    <li><a id="Rh1-39a" href="https://tgvaughan.github.io/sicm/chapter006.html#h1-39a">6.5 Exponential Identities</a></li>
                                    <li><a id="Rh1-40" href="https://tgvaughan.github.io/sicm/chapter006.html#h1-40">6.6 Summary</a></li>
                                    <li><a id="Rh1-41" href="https://tgvaughan.github.io/sicm/chapter006.html#h1-41">6.7 Projects</a></li>
                    
                        </ul>

                        </li><li><a id="toc-chap-7" href="https://tgvaughan.github.io/sicm/chapter007.html"><strong>7 Canonical Perturbation Theory</strong></a>
                            <ul>
                                <li><a id="Rh1-42" href="https://tgvaughan.github.io/sicm/chapter007.html#h1-42">7.1 Perturbation Theory with Lie Series</a></li>
                                <li><a id="Rh1-42a" href="https://tgvaughan.github.io/sicm/chapter007.html#h1-42a">7.2 Pendulum as a Perturbed Rotor</a>
                                    <ul>
                                        <li><a id="Rh3_7-2-1" href="https://tgvaughan.github.io/sicm/chapter007.html#h3_7-2-1">7.2.1 Higher Order</a></li>
                                        <li><a id="Rh3_7-2-2" href="https://tgvaughan.github.io/sicm/chapter007.html#h3_7-2-2">7.2.2 Eliminating Secular Terms</a></li>
                                    </ul>
                                </li>
                                <li><a id="Rh1-43" href="https://tgvaughan.github.io/sicm/chapter007.html#h1-43">7.3 Many Degrees of Freedom</a>
                                    <ul>
                                        <li><a id="Rh3_7-3-1" href="https://tgvaughan.github.io/sicm/chapter007.html#h3_7-3-1">7.3.1 Driven Pendulum as a Perturbed Rotor</a></li>
                                    </ul>
                                </li>
                                <li><a id="Rh1-44" href="https://tgvaughan.github.io/sicm/chapter007.html#h1-44">7.4 Nonlinear Resonance</a>
                                    <ul>
                                        <li><a id="Rh3_7-4-1" href="https://tgvaughan.github.io/sicm/chapter007.html#h3_7-4-1">7.4.1 Pendulum Approximation</a></li>
                                        <li><a id="Rh3_7-4-2" href="https://tgvaughan.github.io/sicm/chapter007.html#h3_7-4-2">7.4.2 Reading the Hamiltonian</a></li>
                                        <li><a id="Rh3_7-4-3" href="https://tgvaughan.github.io/sicm/chapter007.html#h3_7-4-3">7.4.3 Resonance-Overlap Criterion</a></li>
                                        <li><a id="Rh3_7-4-4" href="https://tgvaughan.github.io/sicm/chapter007.html#h3_7-4-4">7.4.4 Higher-Order Perturbation Theory</a></li>
                                        <li><a id="Rh3_7-4-5" href="https://tgvaughan.github.io/sicm/chapter007.html#h3_7-4-5">7.4.5 Stability of the Inverted Vertical Equilibrium</a></li>
                                    </ul>
                                </li>
                                <li><a id="Rh1-45" href="https://tgvaughan.github.io/sicm/chapter007.html#h1-45">7.5 Summary</a></li>
                                <li><a id="Rh1-46" href="https://tgvaughan.github.io/sicm/chapter007.html#h1-46">7.6 Projects</a></li>
                            </ul>
                        </li>

                        <li><a id="toc-chap-8" href="https://tgvaughan.github.io/sicm/chapter008.html"><strong>8 Appendix: Scheme</strong></a></li>

                        <li><a id="toc-chap-9" href="https://tgvaughan.github.io/sicm/chapter009.html"><strong>9 Appendix: Our Notation</strong></a></li>

                        <li><a id="bib-1" href="https://tgvaughan.github.io/sicm/bibliography.html">References</a></li>
                        <li><a id="app-1" href="https://tgvaughan.github.io/sicm/appendix.html">List of Exercises</a></li>
                        <li><a id="indx-1" href="https://tgvaughan.github.io/sicm/keyword_index.html">Index</a></li>
                </ul>
            </div>

        </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ICE Will Use AI to Surveil Social Media (293 pts)]]></title>
            <link>https://jacobin.com/2025/10/ice-zignal-surveillance-social-media</link>
            <guid>45716296</guid>
            <pubDate>Mon, 27 Oct 2025 00:43:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jacobin.com/2025/10/ice-zignal-surveillance-social-media">https://jacobin.com/2025/10/ice-zignal-surveillance-social-media</a>, See on <a href="https://news.ycombinator.com/item?id=45716296">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-content">

                <!-- Antescript -->

                
                  
                

                <!-- Intro -->
                
                  
                

                
                  
                    <section id="ch-0">
                      <p>Immigration and Customs Enforcement has inked a new $5.7 million contract for AI-driven social media surveillance software, according to federal procurement <a href="https://www.usaspending.gov/award/CONT_AWD_70CMSD25FR0000089_7012_47QSWA18D008F_4732" target="_blank" rel="noreferrer noopener">records</a>&nbsp;reviewed by&nbsp;<em>The Lever</em>. It’s the latest move in the agency’s ongoing quest to build out a social media surveillance dragnet.</p>
<p>The five-year contract with government technology middleman Carahsoft Technology, made public in September, provides Immigration and Customs Enforcement (ICE) licenses for a product called Zignal Labs, a social media monitoring platform used by the Israeli military and the Pentagon.</p>
<p>An informational pamphlet&nbsp;marked <a href="https://www.documentcloud.org/documents/26194326-2025-zignal-executive-summary/" target="_blank" rel="noreferrer noopener">confidential</a> but publicly available online advertises that Zignal Labs “leverages artificial intelligence and machine learning” to analyze over eight billion social media posts per day, providing “curated detection feeds” for its clients. The information, the company <a href="https://www.carahsoft.com/news/zignal-labs-and-carahsoft-partner-to-deliver-next-generation-osint-platform-to-government-and-defense-agencies-2025" target="_blank" rel="noreferrer noopener">says</a>, allows law enforcement to “detect and respond to threats with greater clarity and speed.”</p>
<p>The Department of Homeland Security, ICE’s parent agency, has in the past procured Zignal licenses for the US Secret Service, signing its first <a href="https://www.usaspending.gov/award/CONT_AWD_70US0919C70090051_7009_-NONE-_-NONE-" target="_blank" rel="noreferrer noopener">contract</a>&nbsp;for the software in 2019. The company also has contracts with the Department of Defense and the Department of Transportation.</p>
<p>But the September notice appears to be the first indication that ICE has access to the platform. The licenses will be provided to Homeland Security Investigations, ICE’s&nbsp;<a href="https://theintercept.com/2025/06/20/mahmoud-khalil-homeland-security-investigations-ice-surveillance/" target="_blank" rel="noreferrer noopener">intelligence unit</a>, to provide “real-time data analysis for criminal investigations,” per the disclosure.</p>
<p>Zignal joins ICE’s growing arsenal of social media surveillance tools, many of which employ artificial intelligence to generate leads and identify “threats” from vast quantities of online data. These tools pose a particular threat as ICE, under the Trump administration, appears to be increasingly using social media to direct its immigration enforcement strategy.</p>
<p>Several pro-Palestinian activists, including Mahmoud Khalil, were targeted and jailed by immigration authorities&nbsp;after being <a href="https://ccrjustice.org/home/press-center/press-releases/mahmoud-khalil-demands-info-trump-administration-collusion-anti" target="_blank" rel="noreferrer noopener">doxed</a> online by right-wing, pro-Israel blacklist websites like <a href="https://www.aljazeera.com/news/2025/7/11/canary-mission-how-us-uses-a-hate-group-to-target-palestine-advocates" target="_blank" rel="noreferrer noopener">Canary Mission</a>. Just this week, immigration agents raided street vendors in New York City after a&nbsp;right-wing <a href="https://www.nytimes.com/2025/10/21/nyregion/nyc-raid-canal-st-agents-ice.html" target="_blank" rel="noreferrer noopener">influencer</a>&nbsp;posted a video of the block online, demanding action by authorities.</p>
<p>Last week, a&nbsp;group of <a href="https://www.eff.org/document/uaw-v-dos-complaint" target="_blank" rel="noreferrer noopener">labor unions</a>&nbsp;sued over the federal government’s growing use of social media surveillance to target immigrants for their political speech, calling it a “mass, viewpoint-driven surveillance program.”</p>
<p>And there are indications that ICE intends to further expand its social media surveillance capabilities. As&nbsp;<em>Wired&nbsp;</em><a href="https://www.wired.com/story/ice-social-media-surveillance-24-7-contract/" target="_blank" rel="noreferrer noopener">reported</a> earlier this month, ICE has plans to develop a round-the-clock social media monitoring team to identify leads for immigration enforcers.</p>
<p>Advocates told&nbsp;<em>The Lever&nbsp;</em>that ICE’s purchase of Zignal Labs licenses, like its other uses of digital surveillance tech, raises civil liberty concerns.</p>
<p>“[The Department of Homeland Security] should not be buying surveillance tools that scrape our social media posts off the internet and then use AI to scrutinize our online speech,” said Patrick Toomey, the deputy director of the American Civil Liberties Union’s National Security Project. “And agencies certainly shouldn’t be deploying this kind of black box technology in secret without any accountability.”</p>

                    </section>
                  
                

                <!-- Main Content -->

                
    
      
        
          <section id="ch-1">
            
              <h2>“Tactical Intelligence” to Israel and the Pentagon</h2>
              
            
            <p>Zignal Labs, founded in Silicon Valley in 2011, initially&nbsp;<a href="https://www.prweek.com/article/1364900/josh-ginsberg-innovation-50" target="_blank" rel="noreferrer noopener">catered to</a>&nbsp;public relations firms and political campaigns, advertising data analytics and media monitoring to help identify and respond to narrative trends online.</p>
<p>But like the many private companies that now provide digital surveillance tools to the federal government, Zignal Labs soon moved into the defense and intelligence industries,&nbsp;formally announcing the <a href="https://www.globenewswire.com/news-release/2021/10/07/2310442/0/en/Zignal-Labs-Announces-Public-Sector-Advisory-Board-with-Top-National-Security-Experts.html" target="_blank" rel="noreferrer noopener">new focus</a>, along with a “public sector advisory board” staffed by industry veterans, in 2021. One&nbsp;Zignal <a href="https://www.documentcloud.org/documents/26194326-2025-zignal-executive-summary/" target="_blank" rel="noreferrer noopener">pamphlet</a> from this year advertises the company’s work with the Israeli military, saying its data analytics platform provides “tactical intelligence” to “operators on the ground” in Gaza. The pamphlet also highlights Zignal’s work with the US Marines and the State Department.</p>
<p>Zignal Labs did not return a request for comment about its work with Israeli forces or its new contract with ICE.</p>
<p>The unions’ lawsuit over the Trump administration’s use of social media surveillance details the myriad digital surveillance tools that ICE already has at its disposal, including ShadowDragon, a software that uses publicly available websites to map out an&nbsp;individual’s <a href="https://www.404media.co/the-200-sites-an-ice-surveillance-contractor-is-monitoring/" target="_blank" rel="noreferrer noopener">online activity</a>, and Babel X, which&nbsp;<a href="https://www.vice.com/en/article/dhs-uses-ai-tool-babel-x-babel-street-social-media-citizens-refugees/" target="_blank" rel="noreferrer noopener">links</a> social media profiles&nbsp;and location information to a target’s Social Security number.</p>
<p>“We’ve been seeing an uptick in ICE surveillance contracts,” said Julie Mao, an attorney with Just Futures Law, a legal advocacy group that closely monitors ICE’s surveillance regime.</p>
<p>This week, ICE&nbsp;signed a $7 million <a href="https://www.usaspending.gov/award/CONT_AWD_70CDCR26C00000001_7012_-NONE-_-NONE-" target="_blank" rel="noreferrer noopener">contract</a>&nbsp;with the firm SOS International LLC, for “skip tracing services,” a term that refers to tracking a person’s whereabouts, per federal procurement records reviewed by&nbsp;<em>The Lever</em>. The multimillion-dollar contract comes just three months after SOS International LLC, which also does business as SOSi, announced that the company had&nbsp;<a href="https://www.sosi.com/press-releases/sosi-hires-former-hsi-executive-andre-watson-to-bolster-law-enforcement-partnerships/" target="_blank" rel="noreferrer noopener">hired</a> Andre Watson, an ICE Homeland Security Investigations intelligence chief, to “expand [the company’s] business and deliver capabilities to state and federal law enforcement agencies.”</p>
<p>Many of these services tout that their surveillance capabilities are enhanced by artificial intelligence, including Zignal. In a July post&nbsp;<a href="https://www.carahsoft.com/news/zignal-labs-and-carahsoft-partner-to-deliver-next-generation-osint-platform-to-government-and-defense-agencies-2025" target="_blank" rel="noreferrer noopener">announcing</a>&nbsp;the latter company’s partnership with Carahsoft Technology, Zignal’s CEO boasted that the latest iteration of the software used AI to scour global digital data, “helping defense and intelligence teams detect and respond to threats with greater clarity and speed.” Two months after this announcement, ICE signed its new contract with Carahsoft for Zignal licenses.</p>
<p>ICE’s use of AI to surveil vast swathes of the internet in real time presents serious privacy and free speech concerns, the labor unions argued in their lawsuit against the Trump administration.</p>
<p>“The government’s utilization of AI and automated tools for viewpoint-driven online surveillance gives teeth to its threat to surveil ‘everyone’ online for disfavored expression,” attorneys with the civil liberties group the Electronic Freedom Foundation and Yale Law School’s Media Freedom and Information Access Clinic wrote in the complaint, saying that such tools “exacerbate the chilling impact of that surveillance.”</p>

          </section>
        
      
    
  

              </div></div>]]></description>
        </item>
    </channel>
</rss>