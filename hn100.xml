(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
(ignoring known css parsing error)
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 28 Mar 2025 09:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Architecture Patterns with Python (104 pts)]]></title>
            <link>https://www.cosmicpython.com/book/preface.html</link>
            <guid>43501989</guid>
            <pubDate>Fri, 28 Mar 2025 05:57:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cosmicpython.com/book/preface.html">https://www.cosmicpython.com/book/preface.html</a>, See on <a href="https://news.ycombinator.com/item?id=43501989">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>You may be wondering who we are and why we wrote this book.</p>
<p>At the end of Harry’s last book,
<a href="http://www.obeythetestinggoat.com/"><em>Test-Driven Development with Python</em></a> (O’Reilly),
he found himself asking a bunch of questions about architecture, such as,
What’s the best way of structuring your application so that it’s easy to test?
More specifically, so that your core business logic is covered by unit tests,
and so that you minimize the number of integration and end-to-end tests you need?
He made vague references to "Hexagonal Architecture" and "Ports and Adapters"
and "Functional Core, Imperative Shell," but if he was honest, he’d have to
admit that these weren’t things he really understood or had done in practice.</p>
<p>And then he was lucky enough to run into Bob, who has the answers to all these
questions.</p>
<p>Bob ended up as a software architect because nobody else on his team was
doing it. He turned out to be pretty bad at it, but <em>he</em> was lucky enough to run
into Ian Cooper, who taught him new ways of writing and thinking about code.</p>
<div>
<h3 id="_managing_complexity_solving_business_problems"><a href="#_managing_complexity_solving_business_problems"></a>Managing Complexity, Solving Business Problems</h3>
<p>We both work for MADE.com, a European ecommerce company that sells furniture
online; there, we apply the techniques in this book to build distributed systems
that model real-world business problems. Our example domain is the first system
Bob built for MADE, and this book is an attempt to write down all the <em>stuff</em> we
have to teach new programmers when they join one of our teams.</p>
<p>MADE.com operates a global supply chain of freight partners and manufacturers.
To keep costs low, we try to optimize the delivery of stock to our
warehouses so that we don’t have unsold goods lying around the place.</p>
<p>Ideally, the sofa that you want to buy will arrive in port on the very day
that you decide to buy it, and we’ll ship it straight to your house without
ever storing it. <span>Getting</span> the timing right is a tricky balancing act when goods take
three months to arrive by container ship. Along the way, things get broken or water
damaged, storms cause unexpected delays, logistics partners mishandle goods,
paperwork goes missing, customers change their minds and amend their orders,
and so on.</p>
<p>We solve those problems by building intelligent software representing the
kinds of operations taking place in the real world so that we can automate as
much of the business as possible.</p>
</div>
<div>
<h3 id="_why_python"><a href="#_why_python"></a>Why Python?</h3>
<p>If you’re reading this book, we probably don’t need to convince you that Python
is great, so the real question is "Why does the <em>Python</em> community need a book
like this?" The answer is about Python’s popularity and maturity: although Python is
probably the world’s fastest-growing programming language and is nearing the top
of the absolute popularity tables, it’s only just starting to take on the kinds
of problems that the C# and Java world has been working on for years.
Startups become real businesses; web apps and scripted automations are becoming
(whisper it) <em>enterprise</em> <span><em>software</em></span>.</p>
<p>In the Python world, we often quote the Zen of Python:
"There should be one—​and preferably only one—​obvious way to do it."<sup>[<a id="_footnoteref_1" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>
Unfortunately, as project size grows, the most obvious way of doing things
isn’t always the way that helps you manage complexity and evolving
requirements.</p>
<p>None of the techniques and patterns we discuss in this book are
new, but they are mostly new to the Python world. And this book isn’t
a replacement for the classics in the field such as Eric Evans’s
<em>Domain-Driven Design</em>
or Martin Fowler’s <em>Patterns of
Enterprise Application Architecture</em> (both published by Addison-Wesley <span>Professional</span>)—which we often refer to and
encourage you to go and read.</p>
<p>But all the classic code examples in the literature do tend to be written in
Java or <span>C++/#</span>, and if you’re a Python person and haven’t used either of
those languages in a long time (or indeed ever), those code listings can be
quite…​trying. There’s a reason the latest edition of that other classic text, Fowler’s
<em>Refactoring</em> (Addison-Wesley Professional), is in JavaScript.</p>
</div>
<div>
<h3 id="_tdd_ddd_and_event_driven_architecture"><a href="#_tdd_ddd_and_event_driven_architecture"></a>TDD, DDD, and Event-Driven Architecture</h3>
<p>In order of notoriety, we know of three tools for managing complexity:</p>
<div>
<ol>
<li>
<p><em>Test-driven development</em> (TDD) helps us to build code that is correct
and enables us to refactor or add new features, without fear of regression.
But it can be hard to get the best out of our tests: How do we make sure
that they run as fast as possible? That we get as much coverage and feedback
from fast, dependency-free unit tests and have the minimum number of slower,
flaky end-to-end tests?</p>
</li>
<li>
<p><em>Domain-driven design</em> (DDD) asks us to focus our efforts on building a good
model of the business domain, but how do we make sure that our models aren’t
encumbered with infrastructure concerns and don’t become hard to change?</p>
</li>
<li>
<p>Loosely coupled (micro)services integrated via messages (sometimes called
<em>reactive microservices</em>) are a well-established answer to managing complexity
across multiple applications or business domains. But it’s not always
obvious how to make them fit with the established tools of
the Python world—​Flask, Django, Celery, and so on.</p>
</li>
</ol>
</div>
<div>
<table>
<tbody><tr>
<td>
<p>Note</p>
</td>
<td>
Don’t be put off if you’re not working with (or interested in) microservices.
    The vast majority of the patterns we discuss,
    including much of the event-driven architecture material,
    is absolutely applicable in a monolithic architecture.
</td>
</tr>
</tbody></table>
</div>
<p>Our aim with this book is to introduce several classic architectural patterns
and show how they support TDD, DDD, and event-driven services.  We hope
it will serve as a reference for implementing them in a Pythonic way, and that
people can use it as a first step toward further research  in this field.</p>
</div>
<div>
<h3 id="_who_should_read_this_book"><a href="#_who_should_read_this_book"></a>Who Should Read This Book</h3>
<p>Here are a few things we assume about you, dear reader:</p>
<div>
<ul>
<li>
<p>You’ve been close to some reasonably complex Python applications.</p>
</li>
<li>
<p>You’ve seen some of the pain that comes with trying to manage
that complexity.</p>
</li>
<li>
<p>You don’t necessarily know anything about DDD or any of the
classic application architecture patterns.</p>
</li>
</ul>
</div>
<p>We structure our explorations of architectural patterns around an example app,
building it up chapter by chapter. We use TDD at
work, so we tend to show listings of tests first, followed by implementation.
If you’re not used to working test-first, it may feel a little strange at
the beginning, but we hope you’ll soon get used to seeing code "being used"
(i.e., from the outside) before you see how it’s built on the inside.</p>
<p>We use some specific Python frameworks and technologies, including Flask,
SQLAlchemy, and pytest, as well as Docker and Redis. If you’re already
familiar with them, that won’t hurt, but we don’t think it’s required.  One of
our main aims with this book is to build an architecture for which specific
technology choices become minor implementation details.</p>
</div>
<div>
<h3 id="_a_brief_overview_of_what_youll_learn"><a href="#_a_brief_overview_of_what_youll_learn"></a>A Brief Overview of What You’ll Learn</h3>
<p>The book is divided into two parts; here’s a look at the topics we’ll cover
and the chapters they live in.</p>
<div>
<h4 id="_part1"><a href="#_part1"></a><a data-type="xref" data-xrefstyle="chap-num-title" href="https://www.cosmicpython.com/book/part1.html">#part1</a></h4>
<div>
<dl>
<dt>Domain modeling and DDD (Chapters <a href="https://www.cosmicpython.com/book/chapter_01_domain_model.html">1</a>, <a href="https://www.cosmicpython.com/book/chapter_02_repository.html">2</a> and <a href="https://www.cosmicpython.com/book/chapter_07_aggregate.html">7</a>)</dt>
<dd>
<p>At some level, everyone has learned the lesson that complex business
problems need to be reflected in code, in the form of a model of the domain.
But why does it always seem to be so hard to do without getting tangled
up with infrastructure concerns, our web frameworks, or whatever else?
In the first chapter we give a broad overview of <em>domain modeling</em> and DDD, and we
show how to get started with a model that has no external dependencies, and
fast unit tests. Later we return to DDD patterns to discuss how to choose
the right aggregate, and how this choice relates to questions of data
integrity.</p>
</dd>
<dt>Repository, Service Layer, and Unit of Work patterns (Chapters <a href="https://www.cosmicpython.com/book/chapter_02_repository.html">2</a>, <a href="https://www.cosmicpython.com/book/chapter_04_service_layer.html">4</a>, and <a href="https://www.cosmicpython.com/book/chapter_05_high_gear_low_gear.html">5</a>)</dt>
<dd>
<p>In these three chapters we present three closely related and
mutually reinforcing patterns that support our ambition to keep
the model free of extraneous dependencies.  We build a layer of
abstraction around persistent storage, and we build a service
layer to define the entrypoints to our system and capture the
primary use cases. We show how this layer makes it easy to build
thin entrypoints to our system, whether it’s a Flask API or a CLI.</p>
</dd>
</dl>
</div>
<div>
<dl>
<dt>Some thoughts on testing and abstractions (Chapter <a href="https://www.cosmicpython.com/book/chapter_03_abstractions.html">3</a> and <a href="https://www.cosmicpython.com/book/chapter_05_high_gear_low_gear.html">5</a>)</dt>
<dd>
<p>After presenting the first abstraction (the Repository pattern), we take the
opportunity for a general discussion of how to choose abstractions, and
what their role is in choosing how our software is coupled together. After
we introduce the Service Layer pattern, we talk a bit about achieving a <em>test pyramid</em>
and writing unit tests at the highest possible level of abstraction.</p>
</dd>
</dl>
</div>
</div>
<div>
<h4 id="_part2"><a href="#_part2"></a><a data-type="xref" data-xrefstyle="chap-num-title" href="https://www.cosmicpython.com/book/part2.html">#part2</a></h4>
<div>
<dl>
<dt>Event-driven architecture (Chapters <a href="https://www.cosmicpython.com/book/chapter_08_events_and_message_bus.html">8</a>-<a href="https://www.cosmicpython.com/book/chapter_11_external_events.html">11</a>)</dt>
<dd>
<p>We introduce three more mutually reinforcing patterns:
the Domain Events, Message Bus, and Handler patterns.
<em>Domain events</em> are a vehicle for capturing the idea that
some interactions with a system are triggers for others.
We use  a <em>message bus</em> to allow actions to trigger events
and call appropriate <em>handlers</em>.
We move on to discuss how events can be used as a pattern
for integration between services in a microservices architecture.
Finally, we distinguish between <em>commands</em> and <em>events</em>.
Our application is now fundamentally a message-processing system.</p>
</dd>
<dt>Command-query responsibility segregation (<a href="https://www.cosmicpython.com/book/chapter_12_cqrs.html">[chapter_12_cqrs]</a>)</dt>
<dd>
<p>We present an example of <em>command-query responsibility segregation</em>,
with and without events.</p>
</dd>
<dt>Dependency injection (<a href="https://www.cosmicpython.com/book/chapter_13_dependency_injection.html">[chapter_13_dependency_injection]</a>)</dt>
<dd>
<p>We tidy up our explicit and implicit dependencies and implement a
simple dependency injection framework.</p>
</dd>
</dl>
</div>
</div>
<div>
<h4 id="_additional_content"><a href="#_additional_content"></a>Additional Content</h4>
<div>
<dl>
<dt>How do I get there from here? (<a href="https://www.cosmicpython.com/book/epilogue_1_how_to_get_there_from_here.html">[epilogue_1_how_to_get_there_from_here]</a>)</dt>
<dd>
<p>Implementing architectural patterns always looks easy when you show a simple
example, starting from scratch, but many of you will probably be wondering how
to apply these principles to existing software. We’ll provide a
few pointers in the epilogue and some links to further reading.</p>
</dd>
</dl>
</div>
</div>
</div>
<div>
<h3 id="_example_code_and_coding_along"><a href="#_example_code_and_coding_along"></a>Example Code and Coding Along</h3>
<p>You’re reading a book, but you’ll probably agree with us when we say that
the best way to learn about code is to code.  We learned most of what we know
from pairing with people, writing code with them, and learning by doing, and
we’d like to re-create that experience as much as possible for you in this book.</p>
<p>As a result, we’ve structured the book around a single example project
(although we do sometimes throw in other examples). We’ll build up this project as the chapters progress, as if you’ve paired with us and
we’re explaining what we’re doing and why at each step.</p>
<p>But to really get to grips with these patterns, you need to mess about with the
code and get a feel for how it works. You’ll find all the code on
GitHub; each chapter has its own branch. You can find <a href="https://github.com/cosmicpython/code/branches/all">a list</a> of the branches on GitHub as well.</p>
<p>Here are three ways you might code along with the book:</p>
<div>
<ul>
<li>
<p>Start your own repo and try to build up the app as we do, following the
examples from listings in the book, and occasionally looking to our repo
for hints. A word of warning, however: if you’ve read Harry’s previous book
and coded along with that, you’ll find that this book requires you to figure out more on
your own; you may need to lean pretty heavily on the working versions on GitHub.</p>
</li>
<li>
<p>Try to apply each pattern, chapter by chapter, to your own (preferably
small/toy) project, and see if you can make it work for your use case.  This
is high risk/high reward (and high effort besides!). It may take quite some
work to get things working for the specifics of your project, but on the other
hand, you’re likely to learn the most.</p>
</li>
<li>
<p>For less effort, in each chapter we outline an "Exercise for the Reader,"
and point you to a GitHub location where you can download some partially finished
code for the chapter with a few missing parts to write yourself.</p>
</li>
</ul>
</div>
<p>Particularly if you’re intending to apply some of these patterns in your own
projects, working through a simple example is a great way to
safely practice.</p>
<div>
<table>
<tbody><tr>
<td>
<p>Tip</p>
</td>
<td>
At the very least, do a <code>git checkout</code> of the code from our repo as you
    read each chapter. Being able to jump in and see the code in the context of
    an actual working app will help answer a lot of questions as you go, and
    makes everything more real. You’ll find instructions for how to do that
    at the beginning of each chapter.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h3 id="_license"><a href="#_license"></a>License</h3>
<p>The code (and the online version of the book) is licensed under a Creative
Commons CC BY-NC-ND license, which means you are free to copy and share it with
anyone you like, for non-commercial purposes, as long as you give attribution.
If you want to re-use any of the content from this book and you have any
worries about the license, contact O’Reilly at <a href="mailto:permissions@oreilly.com"><em>permissions@oreilly.com</em></a>.</p>
<p>The print edition is licensed differently; please see the copyright page.</p>
</div>
<div>
<h3 id="_conventions_used_in_this_book"><a href="#_conventions_used_in_this_book"></a>Conventions Used in This Book</h3>
<p>The following typographical conventions are used in this book:</p>
<div>
<dl>
<dt><em>Italic</em></dt>
<dd>
<p>Indicates new terms, URLs, email addresses, filenames, and file extensions.</p>
</dd>
<dt>Constant width</dt>
<dd>
<p>Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.</p>
</dd>
<dt><strong><code>Constant width bold</code></strong></dt>
<dd>
<p>Shows commands or other text that should be typed literally by the user.</p>
</dd>
<dt><em>Constant width italic</em></dt>
<dd>
<p>Shows text that should be replaced with user-supplied values or by values determined by context.</p>
</dd>
</dl>
</div>
<div>
<table>
<tbody><tr>
<td>
<p>Tip</p>
</td>
<td>
<p>This element signifies a tip or suggestion.</p>
</td>
</tr>
</tbody></table>
</div>
<div>
<table>
<tbody><tr>
<td>
<p>Note</p>
</td>
<td>
<p>This element signifies a general note.</p>
</td>
</tr>
</tbody></table>
</div>
<div>
<table>
<tbody><tr>
<td>
<p>Warning</p>
</td>
<td>
<p>This element indicates a warning or caution.</p>
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h3 id="_oreilly_online_learning"><a href="#_oreilly_online_learning"></a>O’Reilly Online Learning</h3>
<div>
<table>
<tbody><tr>
<td>
<p>Note</p>
</td>
<td>
<p>For more than 40 years, <a href="http://oreilly.com/"><em>O’Reilly Media</em></a> has provided technology and business training, knowledge, and insight to help companies succeed.</p>
</td>
</tr>
</tbody></table>
</div>
<p>Our unique network of experts and innovators share their knowledge and expertise through books, articles, conferences, and our online learning platform. O’Reilly’s online learning platform gives you on-demand access to live training courses, in-depth learning paths, interactive coding environments, and a vast collection of text and video from O’Reilly and 200+ other publishers. For more information, please visit <a href="http://oreilly.com/"><em>http://oreilly.com</em></a>.</p>
</div>
<div>
<h3 id="_how_to_contact_oreilly"><a href="#_how_to_contact_oreilly"></a>How to Contact O’Reilly</h3>
<p>Please address comments and questions concerning this book to the publisher:</p>
<ul>
  <li>O’Reilly Media, Inc.</li>
  <li>1005 Gravenstein Highway North</li>
  <li>Sebastopol, CA 95472</li>
  <li>800-998-9938 (in the United States or Canada)</li>
  <li>707-829-0515 (international or local)</li>
  <li>707-829-0104 (fax)</li>
</ul>

<!--Don't forget to update the link above.-->

<p>For more information about our books, courses, conferences, and news, see our website at <a href="http://www.oreilly.com/">http://www.oreilly.com</a>.</p>



</div>
<div>
<h3 id="_acknowledgments"><a href="#_acknowledgments"></a>Acknowledgments</h3>
<p>To our tech reviewers, David Seddon, Ed Jung, and Hynek Schlawack: we absolutely
do not deserve you. You are all incredibly dedicated, conscientious, and
rigorous. Each one of you is immensely smart, and your different points of
view were both useful and complementary to each other. Thank you from the
bottom of our hearts.</p>
<p>Gigantic thanks also to all our readers so far for their comments and
suggestions:
Ian Cooper, Abdullah Ariff, Jonathan Meier, Gil Gonçalves, Matthieu Choplin,
Ben Judson, James Gregory, Łukasz Lechowicz, Clinton Roy, Vitorino Araújo,
Susan Goodbody, Josh Harwood, Daniel Butler, Liu Haibin, Jimmy Davies, Ignacio
Vergara Kausel, Gaia Canestrani, Renne Rocha, pedroabi, Ashia Zawaduk, Jostein
Leira, Brandon Rhodes, Jazeps Basko, simkimsia, Adrien Brunet, Sergey Nosko,
Dmitry Bychkov,
and many more; our apologies if we missed you on this list.</p>
<p>Super-mega-thanks to our editor Corbin Collins for his gentle chivvying, and
for being a tireless advocate of the reader. Similarly-superlative thanks to
the production staff, Katherine Tozer, Sharon Wilkey, Ellen Troutman-Zaig, and
Rebecca Demarest, for your dedication, professionalism, and attention to
detail. This book is immeasurably improved thanks to you.</p>
<p>Any errors remaining in the book are our own, naturally.</p>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A decompilation and port of Sonic Advance 2-a GameBoy Advance game written in C (117 pts)]]></title>
            <link>https://github.com/SAT-R/sa2</link>
            <guid>43500769</guid>
            <pubDate>Fri, 28 Mar 2025 02:21:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/SAT-R/sa2">https://github.com/SAT-R/sa2</a>, See on <a href="https://news.ycombinator.com/item?id=43500769">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-turbo-body="">
      


    <div>
      <p><a href="#start-of-content" data-skip-target-assigned="false">Skip to content</a>

      <span data-view-component="true">
    <span data-view-component="true"></span>
</span></p>

<react-partial partial-name="keyboard-shortcuts-dialog" data-ssr="false" data-attempted-ssr="false">
  
  
  
</react-partial>




      

          

              


<header role="banner" data-is-top="true" data-color-mode="light" data-light-theme="light" data-dark-theme="dark">
  <h2>Navigation Menu</h2>

  

  <div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                    
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_product_navbar&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code Review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_product_navbar&quot;}" href="https://github.com/features/code-search">
      
      <div>
        <p>Code Search</p><p>
        Find more, search less
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
                    <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;events_amp_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;events_amp_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      Events &amp; Webinars

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ebooks_amp_whitepapers&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ebooks_amp_whitepapers_link_resources_navbar&quot;}" href="https://github.com/resources/whitepapers">
      Ebooks &amp; Whitepapers

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      
      <div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

                </ul>
              </div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

                </ul>
              </div>
              
          </div>
</li>


                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:SAT-R/sa2" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="79ixn-h9tNSGeYQ-HNvTZ_mhddCK4OOqfmgCaZS3cddSju5Hal5JXivA42Z-odc8Ra6QXJ-ncRyf35PAcAY6KQ" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="SAT-R/sa2" data-current-org="SAT-R" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>


            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=SAT-R%2Fsa2" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/SAT-R/sa2&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="359e97713e71210e387eaff2e2babf2871d0c46553b358cd5cb43a9a8cfc607a" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>
          
        </p></div>
      </div>
</header>

      
    </div>

  








    


    






  <div itemscope="" itemtype="http://schema.org/SoftwareSourceCode" data-commit-hovercards-enabled="" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="" data-project-hovercards-enabled="">
    <main id="js-repo-pjax-container">
      
  





    
    

    






  
  

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance">
    <div data-view-component="true" id="repo-content-pjax-container">      











<react-partial partial-name="repos-overview" data-ssr="true" data-attempted-ssr="true">
  
  
  <div data-target="react-partial.reactRoot"><div itemscope="" itemtype="https://schema.org/abstract"><h2>Repository files navigation</h2><nav aria-label="Repository files"><ul role="list"><li><a href="#" aria-current="page"><span data-component="icon"></span><span data-component="text" data-content="README">README</span></a></li></ul></nav></div><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Sonic Advance 2</h2><a id="user-content-sonic-advance-2" aria-label="Permalink: Sonic Advance 2" href="#sonic-advance-2"></a></p>
<p dir="auto"><a href="https://github.com/SAT-R/sa2/actions/workflows/build.yml"><img src="https://github.com/SAT-R/sa2/actions/workflows/build.yml/badge.svg" alt="CI status"></a> <a href="https://github.com/SAT-R/sa2"><img src="https://camo.githubusercontent.com/fd2e8b6eb7275955dcd77e92f905b802ffd24a7f453456176a3ed812c4f477dd/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f7361742d722e6769746875622e696f2f7361322f7265706f7274732f70726f67726573732d7361322d736869656c642e6a736f6e" alt="Decompilation Progress" data-canonical-src="https://img.shields.io/endpoint?url=https://sat-r.github.io/sa2/reports/progress-sa2-shield.json"></a> <a href="https://github.com/SAT-R/sa2"><img src="https://camo.githubusercontent.com/4716dfed72757527aab2acd1c65b443c222424b9200c4dc944d4007121803170/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f7361742d722e6769746875622e696f2f7361322f7265706f7274732f70726f67726573732d7361322d736869656c642d6d61746368696e672e6a736f6e" alt="Decompilation Matching Progress" data-canonical-src="https://img.shields.io/endpoint?url=https://sat-r.github.io/sa2/reports/progress-sa2-shield-matching.json"></a> <a href="https://github.com/SAT-R/sa2/graphs/contributors"><img src="https://camo.githubusercontent.com/89bdefe4415b0b76f4a1214569e1e8dd14eaba85ed674523408a24ad530b7419/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f5341542d522f736132" alt="Contributors" data-canonical-src="https://img.shields.io/github/contributors/SAT-R/sa2"></a> <a href="https://discord.gg/vZTvVH3gA9" rel="nofollow"><img src="https://camo.githubusercontent.com/c067c51cf022e56200635fe742a3509e0e701388a97aca2213ded7c64d5f07ad/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f31303532333437323939343537363731323030" alt="Discord" data-canonical-src="https://img.shields.io/discord/1052347299457671200"></a></p>
<blockquote>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> <strong>This project is not completed and still under active development</strong></p>
</blockquote>
<p dir="auto">This is a work in progress matching decompilation of Sonic Advance 2</p>
<p dir="auto">It so far builds the following ROMs:</p>
<ul dir="auto">
<li><a href="https://datomatic.no-intro.org/index.php?page=show_record&amp;s=23&amp;n=0890" rel="nofollow"><strong>sa2.gba</strong></a> <code>sha1: 7bcd6a07af7c894746fa28073fe0c0e34408022d</code> (USA) (En,Ja,Fr,De,Es,It)</li>
<li><a href="https://datomatic.no-intro.org/index.php?page=show_record&amp;s=23&amp;n=0900" rel="nofollow"><strong>sa2_europe.gba</strong></a> <code>sha1: b0f64bdca097f2de8f05ac4c8caea2b80c5faeb1</code> (Europe) (En,Ja,Fr,De,Es,It)</li>
<li>🚧 <a href="https://datomatic.no-intro.org/index.php?page=show_record&amp;s=23&amp;n=0799" rel="nofollow"><strong>sa2_japan.gba</strong></a> <code>sha1: dffd0188fc78154b42b401398a224ae0713edf23</code> (Japan) (En,Ja,Fr,De,Es,It) (Work in Progress)</li>
</ul>
<p dir="auto">It can also build:</p>
<ul dir="auto">
<li><strong>sa2.sdl</strong> <code>make sdl</code> (Linux/MacOS SDL 64bit port)</li>
<li><strong>sa2.sdl_win32.exe</strong> <code>make sdl_win32</code> (Windows SDL 64bit port)</li>
<li>🚧 <strong>sa2.win32.exe</strong> <code>make win32</code> (Win32 native port, not functional)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Current state</h2><a id="user-content-current-state" aria-label="Permalink: Current state" href="#current-state"></a></p>
<ul dir="auto">
<li>🎉 The build is 100% from C files with <a href="https://github.com/SAT-R/sa2/blob/main/asm/non_matching">~80 functions which currently don't match</a></li>
<li>All assembly code extracted, disassembled, and decompiled by hand to their C equivilent</li>
<li>All songs have been extracted, and documented as <a href="https://github.com/SAT-R/sa2/blob/main/sound/songs/midi">matching MIDI files</a></li>
<li>All sprite animation frames have been <a href="https://github.com/SAT-R/sa2/blob/main/graphics/obj_tiles">extracted to PNGs and are used to build the matching rom</a></li>
<li>All tilemaps (backgrounds) have been documented and <a href="https://github.com/SAT-R/sa2/blob/main/data/tilemaps">had their tiles extracted</a></li>
<li>The game compiles to a widescreen port (<em>426x240</em>) for multiple platforms</li>
<li>The "sub games" (Chao Garden and Collect The Rings) have been disassembled but not yet decompiled</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Setting up the repo</h2><a id="user-content-setting-up-the-repo" aria-label="Permalink: Setting up the repo" href="#setting-up-the-repo"></a></p>
<p dir="auto">Please see follow <a href="https://github.com/SAT-R/sa2/blob/main/INSTALL.md">these instructions</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Community</h2><a id="user-content-community" aria-label="Permalink: Community" href="#community"></a></p>
<p dir="auto">Join us on <a href="https://discord.gg/vZTvVH3gA9" rel="nofollow">discord</a> to get started in helping out</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Notes</h2><a id="user-content-notes" aria-label="Permalink: Notes" href="#notes"></a></p>
<ul dir="auto">
<li>The <a href="https://github.com/jiangzhengwenjz/katam/">Kirby &amp; The Amazing Mirror</a> decompilation uses a very similar codebase, as it was written by the same dev team (Dimps)</li>
<li><a href="https://decomp.me/" rel="nofollow">https://decomp.me</a> is a great resource for helping to create matching functions</li>
<li><code>ldscript.txt</code> tells the linker the order which files should be linked</li>
<li>For more info, see the <a href="https://zelda64.dev/games/tmc" rel="nofollow">FAQs section</a> of TMC</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Credits</h2><a id="user-content-credits" aria-label="Permalink: Credits" href="#credits"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/JaceCear">JaceCear</a> for his dedication to understanding the internals of the graphics engine, writing <a href="https://github.com/JaceCear/SA-Trilogy-Animation-Exporter">tools to extract this data</a>, as well as massive effort in contributing towards the decompilation process, <em>and</em> setting up the PC ports</p>
</li>
<li>
<p dir="auto">Shout out to <a href="https://github.com/froggestspirit">@froggestspirit</a> for the drive to set this project up</p>
</li>
<li>
<p dir="auto">Special thanks to <a href="https://github.com/normmatt">@normmatt</a> for the initial repo setup and sounds decompilation</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/pret">Pokemon Reverse Engineering Tools</a> community for their help with the project, and tooling for GBA decompilations</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/Kermalis">Kermalis</a> for <a href="https://github.com/Kermalis/VGMusicStudio">their tool</a> which was used to dump the game midis</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/laqieer">琪姬</a> for their exellent work <a href="https://github.com/FireEmblemUniverse/fireemblem8u/pull/137" data-hovercard-type="pull_request" data-hovercard-url="/FireEmblemUniverse/fireemblem8u/pull/137/hovercard">documenting</a> all the quirks of matching midis</p>
</li>
</ul>
</article></div></div>
</react-partial>

      </div>

</turbo-frame>


    </main>
  </div>

          



    <ghcc-consent id="ghcc" data-initial-cookie-consent-allowed="" data-cookie-consent-required="true"></ghcc-consent>



  

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open="">
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog="">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Using uv and PEP 723 for Self-Contained Python Scripts (143 pts)]]></title>
            <link>https://thisdavej.com/share-python-scripts-like-a-pro-uv-and-pep-723-for-easy-deployment/</link>
            <guid>43500124</guid>
            <pubDate>Fri, 28 Mar 2025 00:53:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thisdavej.com/share-python-scripts-like-a-pro-uv-and-pep-723-for-easy-deployment/">https://thisdavej.com/share-python-scripts-like-a-pro-uv-and-pep-723-for-easy-deployment/</a>, See on <a href="https://news.ycombinator.com/item?id=43500124">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>We all love Python’s comprehensive standard library, but let’s face it – PyPI’s wealth of packages often becomes essential. Sharing single-file, self-contained Python scripts that rely on these external tools can be a headache. Historically, we’ve relied on <code>requirements.txt</code> or full-fledged package managers such as Poetry or pipenv, which can be overkill for simple scripts and intimidating for newcomers. But what if there was a simpler way? That’s where uv and PEP 723 come in. This article delves into how uv harnesses PEP 723 to embed dependencies directly within scripts, making distribution and execution extremely easy.</p><h2 id="uv-and-pep-723">uv and PEP 723</h2><p>One of my favorite features of <a href="https://docs.astral.sh/uv/" target="_blank" rel="noreferrer noopener">uv</a> and its next-gen Python tooling is the ability to run single-file Python scripts that contain references to external Python packages without a lot of ceremony. This feat is accomplished by uv with the help of <a href="https://peps.python.org/pep-0723/" target="_blank" rel="noreferrer noopener">PEP 723</a> which is focused on “Inline script metadata.” This PEP defines a standardized method for embedding script metadata, including external package dependencies, directly into single-file Python scripts.</p><p>PEP 723 has gone through the Python Enhancement Proposal process and has been approved by the Python steering council and it is now part of the official Python specifications. Various tools in the Python ecosystem have implemented support including uv, <a href="https://pdm-project.org/en/latest/" target="_blank" rel="noreferrer noopener">PDM (Python Development Master)</a>, and <a href="https://hatch.pypa.io/latest/" target="_blank" rel="noreferrer noopener">Hatch</a>. In this article, we focus on the uv’s excellent support of PEP 723 to create and distribute single-file Python scripts.</p><h2 id="setting-the-stage">Setting the stage</h2><p>We have created a Python script called <code>wordlookup.py</code> to fetch definitions from a dictionary API. It’s looking pretty solid, but we want to distribute and give it to others to run with ease:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span>import</span> <span>httpx</span>
</span></span><span><span><span>import</span> <span>json</span>
</span></span><span><span><span>import</span> <span>argparse</span>
</span></span><span><span><span>import</span> <span>asyncio</span>
</span></span><span><span><span>import</span> <span>textwrap</span>
</span></span><span><span><span>import</span> <span>os</span>
</span></span><span><span>
</span></span><span><span>
</span></span><span><span><span>async</span> <span>def</span> <span>fetch_word_data</span><span>(</span><span>word</span><span>:</span> <span>str</span><span>)</span> <span>-&gt;</span> <span>list</span><span>:</span>
</span></span><span><span>    <span>"""Fetches word data from the dictionary API."""</span>
</span></span><span><span>    <span>url</span> <span>=</span> <span>f</span><span>"https://api.dictionaryapi.dev/api/v2/entries/en/</span><span>{</span><span>word</span><span>}</span><span>"</span>
</span></span><span><span>    <span>try</span><span>:</span>
</span></span><span><span>        <span>async</span> <span>with</span> <span>httpx</span><span>.</span><span>AsyncClient</span><span>()</span> <span>as</span> <span>client</span><span>:</span>
</span></span><span><span>            <span>response</span> <span>=</span> <span>await</span> <span>client</span><span>.</span><span>get</span><span>(</span><span>url</span><span>)</span>
</span></span><span><span>            <span>response</span><span>.</span><span>raise_for_status</span><span>()</span>
</span></span><span><span>            <span>return</span> <span>response</span><span>.</span><span>json</span><span>()</span>
</span></span><span><span>    <span>except</span> <span>httpx</span><span>.</span><span>HTTPError</span><span>:</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>    <span>except</span> <span>json</span><span>.</span><span>JSONDecodeError</span> <span>as</span> <span>exc</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"Error decoding JSON for '</span><span>{</span><span>word</span><span>}</span><span>': </span><span>{</span><span>exc</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>    <span>except</span> <span>Exception</span> <span>as</span> <span>e</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"An unexpected error occurred: </span><span>{</span><span>e</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>
</span></span><span><span>
</span></span><span><span><span>async</span> <span>def</span> <span>main</span><span>(</span><span>word</span><span>:</span> <span>str</span><span>):</span>
</span></span><span><span>    <span>"""Fetches and prints definitions for a given word with wrapping."""</span>
</span></span><span><span>    <span>data</span> <span>=</span> <span>await</span> <span>fetch_word_data</span><span>(</span><span>word</span><span>)</span>
</span></span><span><span>    <span>if</span> <span>data</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"Definitions for '</span><span>{</span><span>word</span><span>}</span><span>':"</span><span>)</span>
</span></span><span><span>        <span>try</span><span>:</span>
</span></span><span><span>            <span>terminal_width</span> <span>=</span> <span>os</span><span>.</span><span>get_terminal_size</span><span>()</span><span>.</span><span>columns</span> <span>-</span> <span>4</span>  <span># 4 for padding</span>
</span></span><span><span>        <span>except</span> <span>OSError</span><span>:</span>
</span></span><span><span>            <span>terminal_width</span> <span>=</span> <span>80</span>  <span># default if terminal size can't be determined</span>
</span></span><span><span>
</span></span><span><span>        <span>for</span> <span>entry</span> <span>in</span> <span>data</span><span>:</span>
</span></span><span><span>            <span>for</span> <span>meaning</span> <span>in</span> <span>entry</span><span>.</span><span>get</span><span>(</span><span>"meanings"</span><span>,</span> <span>[]):</span>
</span></span><span><span>                <span>part_of_speech</span> <span>=</span> <span>meaning</span><span>.</span><span>get</span><span>(</span><span>"partOfSpeech"</span><span>)</span>
</span></span><span><span>                <span>definitions</span> <span>=</span> <span>meaning</span><span>.</span><span>get</span><span>(</span><span>"definitions"</span><span>,</span> <span>[])</span>
</span></span><span><span>                <span>if</span> <span>part_of_speech</span> <span>and</span> <span>definitions</span><span>:</span>
</span></span><span><span>                    <span>print</span><span>(</span><span>f</span><span>"</span><span>\n</span><span>{</span><span>part_of_speech</span><span>}</span><span>:"</span><span>)</span>
</span></span><span><span>                    <span>for</span> <span>definition_data</span> <span>in</span> <span>definitions</span><span>:</span>
</span></span><span><span>                        <span>definition</span> <span>=</span> <span>definition_data</span><span>.</span><span>get</span><span>(</span><span>"definition"</span><span>)</span>
</span></span><span><span>                        <span>if</span> <span>definition</span><span>:</span>
</span></span><span><span>                            <span>wrapped_lines</span> <span>=</span> <span>textwrap</span><span>.</span><span>wrap</span><span>(</span>
</span></span><span><span>                                <span>definition</span><span>,</span> <span>width</span><span>=</span><span>terminal_width</span><span>,</span>
</span></span><span><span>                                <span>subsequent_indent</span><span>=</span><span>""</span>
</span></span><span><span>                            <span>)</span>
</span></span><span><span>                            <span>for</span> <span>i</span><span>,</span> <span>line</span> <span>in</span> <span>enumerate</span><span>(</span><span>wrapped_lines</span><span>):</span>
</span></span><span><span>                                <span>if</span> <span>i</span> <span>==</span> <span>0</span><span>:</span>
</span></span><span><span>                                    <span>print</span><span>(</span><span>f</span><span>"- </span><span>{</span><span>line</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>                                <span>else</span><span>:</span>
</span></span><span><span>                                    <span>print</span><span>(</span><span>f</span><span>"  </span><span>{</span><span>line</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>    <span>else</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"Could not retrieve definition for '</span><span>{</span><span>word</span><span>}</span><span>'."</span><span>)</span>
</span></span><span><span>
</span></span><span><span>
</span></span><span><span><span>if</span> <span>__name__</span> <span>==</span> <span>"__main__"</span><span>:</span>
</span></span><span><span>    <span>parser</span> <span>=</span> <span>argparse</span><span>.</span><span>ArgumentParser</span><span>(</span><span>description</span><span>=</span><span>"Fetch definitions for a word."</span><span>)</span>
</span></span><span><span>    <span>parser</span><span>.</span><span>add_argument</span><span>(</span><span>"word"</span><span>,</span> <span>type</span><span>=</span><span>str</span><span>,</span> <span>help</span><span>=</span><span>"The word to look up."</span><span>)</span>
</span></span><span><span>    <span>args</span> <span>=</span> <span>parser</span><span>.</span><span>parse_args</span><span>()</span>
</span></span><span><span>
</span></span><span><span>    <span>asyncio</span><span>.</span><span>run</span><span>(</span><span>main</span><span>(</span><span>args</span><span>.</span><span>word</span><span>))</span>
</span></span></code></pre></div><p>This script imports several Python modules, setting the stage for a script that interacts with a dictionary API web service, processes JSON data, handles command-line arguments, utilizes asynchronous operations, formats text output, and interacts with the operating system to fetch the terminal width. With the exception of <a href="https://www.python-httpx.org/" target="_blank" rel="noreferrer noopener"><code>httpx</code></a>, an HTTP client library package, all of the other Python modules we import are part of the Python standard library. While I could technically accomplish the goal with Python’s built-in <a href="https://docs.python.org/3/library/urllib.request.html" target="_blank" rel="noreferrer noopener">urllib.request</a> module, I prefer <code>httpx</code>. This, however, presents a dilemma since I will need a good way to distribute this script so my friends and coworkers can use it without a lot of fuss installing the needed <code>httpx</code> dependency.</p><p>How do we solve this dilemma? uv to the rescue! We’ll walk through how this works next.</p><h2 id="installing-uv">Installing uv</h2><p>As a first step, we first need to install uv. Please refer to the official uv documentation for guidance on <a href="https://docs.astral.sh/uv/getting-started/installation/" target="_blank" rel="noreferrer noopener">installing uv</a>. A couple of common ways to install uv include:</p><div><pre tabindex="0"><code data-lang="sh"><span><span><span># Assuming you have pipx installed, this is the recommended way since it installs</span>
</span></span><span><span><span># uv into an isolated environment</span>
</span></span><span><span>pipx install uv
</span></span><span><span>
</span></span><span><span><span># uv can also be installed this way</span>
</span></span><span><span>pip install uv
</span></span></code></pre></div><p>uv is an amazingly versatile and, in my opinion, is very much the future of Python tooling. In this article, however, I’m just demonstrating one of uv’s awesome features for invoking single-file scripts with external dependencies.</p><h2 id="adding-package-dependencies-in-single-file-scripts-with-uv">Adding package dependencies in single-file scripts with uv</h2><p>We’re now ready to add <code>httpx</code> as a dependency in our <code>wordlookup.py</code> script! Here’s how it’s done:</p><div><pre tabindex="0"><code data-lang="sh"><span><span>uv add --script wordlookup.py httpx
</span></span></code></pre></div><p>That’s it! After this, uv will add metadata in the comments at the top of our script. Here’s the first part of the script with a few lines after for context so you can see this in action:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span># /// script</span>
</span></span><span><span><span># requires-python = "&gt;=3.13"</span>
</span></span><span><span><span># dependencies = [</span>
</span></span><span><span><span>#     "httpx",</span>
</span></span><span><span><span># ]</span>
</span></span><span><span><span># ///</span>
</span></span><span><span>
</span></span><span><span><span>import</span> <span>httpx</span>
</span></span><span><span><span>import</span> <span>json</span>
</span></span><span><span><span>import</span> <span>argparse</span>
</span></span><span><span><span>import</span> <span>asyncio</span>
</span></span><span><span><span>import</span> <span>textwrap</span>
</span></span><span><span><span>import</span> <span>os</span>
</span></span><span><span>
</span></span><span><span><span>async</span> <span>def</span> <span>fetch_word_data</span><span>(</span><span>word</span><span>:</span> <span>str</span><span>)</span> <span>-&gt;</span> <span>list</span><span>:</span>
</span></span><span><span>    <span>"""Fetches word data from the dictionary API."""</span>
</span></span><span><span>    <span>url</span> <span>=</span> <span>f</span><span>"https://api.dictionaryapi.dev/api/v2/entries/en/</span><span>{</span><span>word</span><span>}</span><span>"</span>
</span></span><span><span>    <span>try</span><span>:</span>
</span></span><span><span>        <span>async</span> <span>with</span> <span>httpx</span><span>.</span><span>AsyncClient</span><span>()</span> <span>as</span> <span>client</span><span>:</span>
</span></span><span><span>            <span>response</span> <span>=</span> <span>await</span> <span>client</span><span>.</span><span>get</span><span>(</span><span>url</span><span>)</span>
</span></span><span><span>            <span>response</span><span>.</span><span>raise_for_status</span><span>()</span>
</span></span><span><span>            <span>return</span> <span>response</span><span>.</span><span>json</span><span>()</span>
</span></span><span><span>    <span>except</span> <span>httpx</span><span>.</span><span>HTTPError</span><span>:</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>    <span>except</span> <span>json</span><span>.</span><span>JSONDecodeError</span> <span>as</span> <span>exc</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"Error decoding JSON for '</span><span>{</span><span>word</span><span>}</span><span>': </span><span>{</span><span>exc</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>    <span>except</span> <span>Exception</span> <span>as</span> <span>e</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"An unexpected error occurred: </span><span>{</span><span>e</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span></code></pre></div><p>If you have used <code>pyproject.toml</code> with various Python tools such as Poetry, Flit, Hatch, Maturin, setuptools, etc., this syntax will likely look at least somewhat familiar. For example, Poetry might look like this:</p><div><pre tabindex="0"><code data-lang="toml"><span><span><span># &lt;-- other package metadata here --&gt;</span>
</span></span><span><span>
</span></span><span><span><span>[</span><span>tool</span><span>.</span><span>poetry</span><span>.</span><span>dependencies</span><span>]</span>
</span></span><span><span><span>python</span> <span>=</span> <span>"&gt;=3.13"</span>
</span></span><span><span><span>httpx</span> <span>=</span> <span>"^0.28.1"</span>
</span></span><span><span>
</span></span><span><span><span>[</span><span>build-system</span><span>]</span>
</span></span><span><span><span>requires</span> <span>=</span> <span>[</span><span>"poetry-core"</span><span>]</span>
</span></span><span><span><span>build-backend</span> <span>=</span> <span>"poetry.core.masonry.api"</span>
</span></span></code></pre></div><p>You will observe that uv adds the metadata for <code>httpx</code>, but does not specify a version. uv will fetch the latest stable version of httpx from PyPI for use with the script. You can add dependency constraints by modifying the metadata directly after the fact or specifying a version dependency through the command line:</p><div><pre tabindex="0"><code data-lang="sh"><span><span>uv add --script wordlookup.py <span>"httpx&gt;=0.28.1"</span>
</span></span></code></pre></div><h2 id="running-your-script-with-uv">Running your script with uv</h2><p>We are ready to run our script. The uv tool makes it as simple to run as this (note that I am passing a <code>--help</code> argument to the script as well):</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ uv run wordlookup.py --help
</span></span><span><span>Installed <span>7</span> packages in 74ms
</span></span><span><span>usage: wordlookup.py <span>[</span>-h<span>]</span> word
</span></span><span><span>
</span></span><span><span>Fetch definitions <span>for</span> a word.
</span></span><span><span>
</span></span><span><span>positional arguments:
</span></span><span><span>  word        The word to look up.
</span></span><span><span>
</span></span><span><span>options:
</span></span><span><span>  -h, --help  show this <span>help</span> message and <span>exit</span>
</span></span></code></pre></div><p>When invoking the script with <code>uv run</code> the first time, you will see some extra activity at the beginning as uv automatically creates an isolated virtual environment behind the scenes and fetches and installs the <code>httpx</code> package and its associated dependencies. This is why we see <code>Installed 7 packages in 74ms</code> in the terminal output.</p><p>If you try to run the script with <code>python wordlookup.py</code>, the script will fail unless you happen to have <code>httpx</code> installed globally or in your current virtual environment. How does uv use the script metadata? When invoking the script with <code>uv run</code>, uv:</p><ul><li>Checks that the required Python version is available.</li><li>Automatically creates an isolated virtual environment (without modifying your global Python environment).</li><li>Installs the listed dependencies (<code>httpx</code> in this case) if they’re not already installed.</li><li>Executes the script.</li></ul><p>For each subsequent launch of the script with <code>uv run</code>, uv will leverage the virtual environment it created behind the scenes and invoke the script:</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ uv run wordlookup.py postulate
</span></span><span><span>Definitions <span>for</span> <span>'postulate'</span>:
</span></span><span><span>
</span></span><span><span>noun:
</span></span><span><span>- Something assumed without proof as being self-evident or generally accepted, especially when used as a basis
</span></span><span><span>  <span>for</span> an argument. Sometimes distinguished from axioms as being relevant to a particular science or context,
</span></span><span><span>  rather than universally true, and following from other axioms rather than being an absolute assumption.
</span></span><span><span>- A fundamental element<span>;</span> a basic principle.
</span></span><span><span>- An axiom.
</span></span><span><span>- A requirement<span>;</span> a prerequisite.
</span></span><span><span>
</span></span><span><span>verb:
</span></span><span><span>- To assume as a truthful or accurate premise or axiom, especially as a basis of an argument.
</span></span><span><span>- To appoint or request one<span>'</span>s appointment to an ecclesiastical office.
</span></span><span><span>- To request, demand or claim <span>for</span> oneself.
</span></span><span><span>
</span></span><span><span>adjective:
</span></span><span><span>- Postulated.
</span></span></code></pre></div><p>If we add additional dependencies to our script or change the Python or <code>httpx</code> version in the metadata, <code>uv run</code> will create a new isolated virtual environment the next time it is invoked.</p><h2 id="making-it-even-easier-to-run-with-a-python-shebang">Making it even easier to run with a Python shebang</h2><p>We can add a shebang (sometimes called a hashbang) at the top of the Python script to make it even easier to invoke the script with uv. I learned this excellent trick from Trey Hunner <a href="https://treyhunner.com/2024/12/lazy-self-installing-python-scripts-with-uv/" target="_blank" rel="noreferrer noopener">here</a>.</p><h3 id="linuxmacos-users">Linux/macOS users</h3><p>For Linux and macOS (and BSD users), add the following line at the top of the script:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span>#!/usr/bin/env -S uv run --script</span>
</span></span></code></pre></div><p>The fuller script context will look like the following at the top of the file:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span>#!/usr/bin/env -S uv run --script</span>
</span></span><span><span><span># /// script</span>
</span></span><span><span><span># requires-python = "&gt;=3.13"</span>
</span></span><span><span><span># dependencies = [</span>
</span></span><span><span><span>#     "httpx&gt;=0.28.1",</span>
</span></span><span><span><span># ]</span>
</span></span><span><span><span># ///</span>
</span></span><span><span>
</span></span><span><span><span>import</span> <span>httpx</span>
</span></span><span><span><span>import</span> <span>json</span>
</span></span><span><span><span>import</span> <span>argparse</span>
</span></span><span><span><span>import</span> <span>asyncio</span>
</span></span><span><span><span>import</span> <span>textwrap</span>
</span></span><span><span><span>import</span> <span>os</span>
</span></span></code></pre></div><p>Next, make the file executable:</p><p>Once that’s done, you can run the script directly, without needing to use the full <code>uv run wordlookup.py</code> command:</p><h3 id="windows-users">Windows users</h3><p>For Windows users, you’re also in luck since the py launcher for Windows is also able to interpret shebangs. The py launcher is included by default when you install Python on Windows. Please note that you’ll need to omit the <code>-S</code> from the shebang for the script to work correctly. The first line of your script should look like this:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span>#!/usr/bin/env uv run --script</span>
</span></span></code></pre></div><p>You can when invoke the script on Windows as follows with the <code>py</code> command:</p><blockquote><p>Note: This will not work if you invoke the script via <code>python wordlookup.py</code> since the shebang will not be interpreted.</p></blockquote><h2 id="setting-up-your-uv-script-to-be-invoked-from-anywhere-on-your-computer">Setting up your uv script to be invoked from anywhere on your computer</h2><p>To make your uv (Python) script easily executable from anywhere on your system, you can move it to a common executable directory that’s included in your system’s PATH.</p><h3 id="linuxmacos-users-1">Linux/macOS users</h3><p>For Linux and macOS users, copy the <code>wordlookup.py</code> script to a directory in your systems <code>$PATH</code>. On my system, the <code>$HOME/bin</code> folder is in the path and I moved it there:</p><p>I also elected to rename the file and remove the .py file extension to make it more ergonomic to invoke since the shebang contains all of the needed information to identify the file as a Python script:</p><div><pre tabindex="0"><code data-lang="sh"><span><span>mv wordlookup.py wordlookup
</span></span></code></pre></div><p>I am now able to invoke it from anywhere. (You will also observe that uv will create a new virtual environment and resolve the package dependencies the first time the Python script is invoked form the new location.)</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ wordlookup --help
</span></span><span><span>Installed <span>7</span> packages in 21ms
</span></span><span><span>usage: wordlookup.py <span>[</span>-h<span>]</span> word
</span></span><span><span>
</span></span><span><span>Fetch definitions <span>for</span> a word.
</span></span><span><span>
</span></span><span><span>positional arguments:
</span></span><span><span>  word        The word to look up.
</span></span><span><span>
</span></span><span><span>options:
</span></span><span><span>  -h, --help  show this <span>help</span> message and <span>exit</span>
</span></span></code></pre></div><h3 id="windows-users-1">Windows users</h3><p>For Windows users, you can either move the script to one of the directories already included in your system’s <code>PATH</code> environment variable or add a new folder to the <code>PATH</code>. I will assume you have created a folder called <code>c:\scripts</code> and added it to your <code>PATH</code>.</p><p>Next, create a file called <code>wordlookup.cmd</code> and add the following contents:</p><div><pre tabindex="0"><code data-lang="bat"><span><span><span>@</span><span>echo</span> off
</span></span><span><span>py c:\scripts\wordlookup.py <span>%*</span>
</span></span></code></pre></div><p>You will then be able to invoke the script from Windows Terminal or Command Prompt anywhere on the system like this:</p><h2 id="bonus-where-does-uv-install-its-virtual-environments">Bonus: where does uv install its virtual environments?</h2><p>Being a curious software engineer, I decided to dive deeper to see if I could discover where uv was installing its virtual environments on my Fedora Linux system. After all, I had <code>wordlookup.py</code> sitting in its own dedicated directory. After running <code>uv add --script</code> to add the <code>httpx</code> package dependency metadata and invoking <code>uv run</code>, a virtual environment directory such as <code>.venv</code> was nowhere in sight in the local folder.</p><p>I first started by finding all directories named <code>httpx</code> on my system since a new folder by this name would likely get created on the first invocation of <code>uv run</code> after the script had been created.</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ find -type d -name httpx
</span></span><span><span>./.cache/uv/environments-v2/wordlookup-f6e73295bfd5f60b/lib/python3.13/site-packages/httpx
</span></span><span><span><span># &lt;other folders found but omitted for brevity&gt;</span>
</span></span></code></pre></div><p>Lo and behold, I found a folder called <code>httpx</code> in a parent folder called <code>./.cache/uv/environments-v2</code>. This looked promising.</p><p>I then discovered a command I could run (<a href="https://docs.astral.sh/uv/concepts/cache/#clearing-the-cache" target="_blank" rel="noreferrer noopener">uv cache clean</a>) to clear out all of the uv virtual environments. These would be harmless since the virtual environments could easily be recreated.</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ uv cache clean
</span></span><span><span>Clearing cache at: .cache/uv
</span></span><span><span>Removed <span>848</span> files <span>(</span>8.2MiB<span>)</span>
</span></span></code></pre></div><p>To watch everything in action on my Linux system (perhaps this was overkill 😃), I used <code>inotifywait</code> to monitor all of the file create events that would occur when I invoked <code>uv run wordlookup.py</code> since uv would need to recreate its virtual environment as I had cleared the cache.</p><div><pre tabindex="0"><code data-lang="sh"><span><span>inotifywait -m -r -e create ~/.cache/
</span></span><span><span>
</span></span><span><span><span># While this was running and waiting for event, I invoked `uv run wordlookup.py` from another terminal window</span>
</span></span></code></pre></div><p>The <code>inotifywait</code> command (part of the <code>inotify-tools</code> package) waits for filesystem events and outputs them. Here are the arguments I used:</p><ul><li>-m (monitor): This option tells <code>inotifywait</code> to continuously monitor the specified directory for events. Without this, <code>inotifywait</code> would only report the first event and then exit.</li><li>-r (recursive): This option tells <code>inotifywait</code> to recursively monitor the specified directory and all its subdirectories for events. Any new files or directories created within <code>.cache/</code> or any of its subdirectories will trigger an event.</li><li>-e create (event: create): This option specifies that <code>inotifywait</code> should only report create events. A create event occurs when a new file or directory is created within the monitored directory.</li><li>.cache/: This is the directory that <code>inotifywait</code> was asked to monitor.</li></ul><p>Sure enough, <code>inotifywait</code> revealed the folders being dynamically created when <code>uv run wordlookup.py</code> was launched.</p><p>When I copied the <code>wordlookup.py</code> script to my <code>$HOME/bin</code> folder and invoked it from there, I checked <code>./.cache/uv/environments-v2/</code> and yet another <code>wordlookup-*</code> was created there housing the virtual environment.</p><p>In reviewing my Windows VM, I similarly found <code>uv</code> virtual environments installed under <code>%LOCALAPPDATA%\uv\cache</code>.</p><p>Upon further investigation, I found some <a href="https://docs.astral.sh/uv/concepts/cache/#cache-directory" target="_blank" rel="noreferrer noopener">uv cache directory documentation</a> that described how uv determines the location of its cache directory. Here’s how it works:</p><blockquote><p>uv determines the cache directory according to, in order:</p><ul><li>A temporary cache directory, if <code>--no-cache</code> was requested.</li><li>The specific cache directory specified via <code>--cache-dir</code>, <code>UV_CACHE_DIR</code>, or <code>tool.uv.cache-dir</code>.</li><li>A system-appropriate cache directory, e.g., <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Unix and <code>%LOCALAPPDATA%\uv\cache</code> on Windows</li></ul></blockquote><p>Typically, on Unix-like systems like my Fedora setup, uv stores its cache in $HOME/.cache/uv. However, you have the option to change this location by setting the $XDG_CACHE_HOME environment variable. For those unfamiliar with XDG, the XDG Base Directory Specification is a set of guidelines that applications follow to organize their files. It defines a few key environment variables that point to specific directories, ensuring that different types of application data are stored in their designated places. See <a href="https://wiki.archlinux.org/title/XDG_Base_Directory" target="_blank" rel="noreferrer noopener">here</a> for more information.</p><p>To summarize, uv stores virtual environments for single-file Python scripts within its cache, typically at these OS-specific locations if you don’t do anything special to change the default:</p><table><thead><tr><th>OS</th><th>Virtual Environment Location</th></tr></thead><tbody><tr><td>Linux</td><td><code>~/.cache/uv/environments-v2/</code></td></tr><tr><td>macOS</td><td><code>~/.cache/uv/environments-v2/</code></td></tr><tr><td>Windows</td><td><code>%LOCALAPPDATA%\uv\cache\environments-v2</code></td></tr></tbody></table><h3 id="how-does-uv-derive-its-virtual-environment-folder-name">How does uv derive its virtual environment folder name?</h3><p>Take a look at the following uv virtual environment folder on my Linux system. How is the folder name of <code>wordlookup-f6e73295bfd5f60b</code> generated?</p><div><pre tabindex="0"><code data-lang="text"><span><span>./.cache/uv/environments-v2/wordlookup-f6e73295bfd5f60b
</span></span></code></pre></div><p>My preliminary investigation of uv’s Rust code and other resources suggests that the virtual environment folder names are generated from a hash of the Python version and the external package dependency versions (such as <code>httpx</code> in my context). This design ensures that any modification to these elements, including the script’s name (which is embedded in the folder name itself), results in the creation of a unique virtual environment in the cache. I validated this empirically by observing that uv created a new virtual environment if I specified a different version of <code>httpx</code> in the metadata or if I changed the name of the script file.</p><h2 id="conclusion">Conclusion</h2><p>In conclusion, uv with its implementation of PEP 723 is an awesome tool that simplifies the way we handle single-file Python scripts with external dependencies. By embedding metadata directly within the script, uv eliminates the need for separate <code>requirements.txt</code> files and complex package managers. uv streamlines the process of installing dependencies and managing virtual environments, making it significantly easier to run these scripts. The added convenience of shebangs and system-wide executables further enhances usability. Ultimately, this combination makes Python scripting more accessible, particularly for single-file scripts, and promises a more streamlined workflow for both developers and users.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Things I would have told myself before building an autorouter (187 pts)]]></title>
            <link>https://blog.autorouting.com/p/13-things-i-would-have-told-myself</link>
            <guid>43499992</guid>
            <pubDate>Fri, 28 Mar 2025 00:38:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.autorouting.com/p/13-things-i-would-have-told-myself">https://blog.autorouting.com/p/13-things-i-would-have-told-myself</a>, See on <a href="https://news.ycombinator.com/item?id=43499992">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>I’ve spent about a year working on an autorouter for </span><a href="https://tscircuit.com/" rel="">tscircuit</a><span> (an open-source electronics CAD kernel written in Typescript). If I could go back a year, these are the 13 things I would tell myself:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png" width="1456" height="752" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:752,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>An intermediate stage of our autorouting routing a keyboard.</figcaption></figure></div><p>If I was king for a day, I would rename A* to “Fundamental Algorithm”. It is truly one of the most adaptable and important algorithms for _any kind_ of search. It is simply the best foundation for any kind of informed search (not just for 2d grids!)</p><p>Here’s an animated version of A* versus “breadth first search” on a 2d grid:</p><p><span>The way A* explores nodes is a lot faster and more intuitive. The major difference between these two algorithms is BFS explores all adjacent nodes, while A* prioritizes exploring nodes that are closer to the destination. Because it considers a metric outside the graph (the distance to the destination) it’s an </span><em>informed search</em><span>.</span></p><p><strong>You are already either using BFS or DFS (depth-first search) in your code.</strong><span> A recursive algorithm is a depth first search. Any loop that explores candidates/neighbors without sorting the candidates is a BFS. </span><strong>99% of the time you can convert it to A* and get dramatic performance gains!</strong></p><p>One of my favorite techniques in our autorouter is we run multiple levels of A* to discover the optimal hyperparameters for a particular problem. So we’re basically running each autorouter as a candidate, then using A* to determine which autorouters we should spend the most time on!</p><p>See all those numbers at the top? Those are each different configurations of hyper parameters. Running each autorouter fairly would be a huge waste of time- if one autorouter starts to win (it is successfully routing with good costs) allocate more iterations to it! This kind of meta-A* combines a regular cost function that penalizes distance with a cost function that penalizes iterations.</p><p>I’m controversially writing our autorouter in Javascript. This is the first thing people call out, but it’s not as unreasonable as you might expect. Consider that when optimizing an algorithm, you’re basically looking at improving two things:</p><ol><li><p>Lowering the number of iterations required (make the algorithm smart)</p></li><li><p>Increasing the speed of each iteration</p></li></ol><p><span>People focus </span><em>way too much</em><span> on improving the speed of each iteration. If you are doing something dumb (like converting everything to a grid for overlap testing), Javascript performance will beat you no matter what language you use!</span></p><p><span>Dumb algorithms in optimal assembly </span><em><span>are slower than smart algorithms in Javascript! </span><strong>Algorithm &gt; Language!</strong></em></p><p>95% of your focus should be on reducing the number of iterations. This is why language doesn’t matter. Whatever gets you to the smartest, most cacheable algorithm fastest is the best language.</p><p><span>You can’t walk 5 feet into multi-dimensional space optimization without someone mentioning a QuadTree, this incredible data structure that makes </span><code>O(N)</code><span> search </span><code>O(log(N))</code><span> when searching for nearby objects in 2d/3d space.</span></p><p><strong>The QuadTree and every general-purpose tree data structure are insanely slow.</strong><span> </span><strong>Trees are not an informed representation of your data.</strong></p><p><span>Any time you’re using a tree you’re ignoring an  </span><code>O(~1)</code><span> hash algorithm for a more complicated </span><code>O(log(N))</code><span> algorithm</span></p><p><span>Why does Javascript use HashSets and HashMaps by default and every chance it gets? </span><strong>They’re super super fast. </strong><span>A Spatial Hash Index is the same concept as a HashMap, but instead of hashing the object we hash it’s location and store it in a Cell (or “bucket of things that are close together”)</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png" width="1456" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1994340,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Let’s look at how we might replace the QuadTree with a SpatialHashIndex with 20% as much code:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png" width="465" height="643.9985795454545" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1950,&quot;width&quot;:1408,&quot;resizeWidth&quot;:465,&quot;bytes&quot;:393368,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>There are many variants of this basic data structure for different types of objects, but they all look pretty similar. We’re basically just creating “buckets” with spatial hashes and filling them with any object that is contained within the cell represented by the spatial hash.</p><p>The reason spatial hashes aren’t as popular is you need to be careful about selecting your cell size- this is what makes it an informed algorithm. If your cell size isn’t calibrated well, you’ll end up paying high fixed costs per retrieval. In practice, it’s not that difficult to pick a reasonable cell size.</p><p><span>A circuit board like the one inside an IPhone probably has somewhere between 10,000 and 20,000 traces and take a team several months to route with the best EDA tools in world. It can seem daunting to try to optimize such an incredibly complex task- but the truth is the entire industry is neglecting a very simple idea: </span><strong>everything that has been routed has been routed before.</strong></p><p>Game developers “pre-bake” navigation meshes into many gigabytes for their games. LLMs compress the entire internet into weights for search. The next generation of autorouters will spatially partition their problems, then call upon a massive cache for pre-solved solutions. The speed of the algorithm doesn’t matter when you have a massive cache with 99% of the autorouting problem pre-solved.</p><p>Most algorithms today do not focus on the effective cache-reusability or effective spatial partitioning, but a critical component of future autorouters will be caching inputs and outputs from each stage in a spatially partitioned way.</p><p>Moreover, the size of storage and caching seems to go down faster than the speed of computation goes up. It’s not a big deal to have a gigabyte cache to make your autorouter 50% faster.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png" width="404" height="404" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1024,&quot;width&quot;:1024,&quot;resizeWidth&quot;:404,&quot;bytes&quot;:1579631,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>At the end of the day, the cache will win. Cacheable algorithms matter more than fast algorithms!</figcaption></figure></div><p><span>If there is one thing I could have printed on a poster, it would be </span><strong>VISUALIZE THE PROBLEM. </strong><span>You can’t debug problems by staring at numbers.</span></p><p><span>For every tiny problem we solve, we have a visualization. We will often </span><em>start</em><span> with the visualization. Time and time again this enables us to debug and solve problems 10x faster than we could otherwise. Here’s a visualization we made of a subalgorithm for finding 45 degree paths, we use this in our “Path Simplification Phase”, an ~final phase of the autorouter.</span></p><p><span>Javascript profiling tools are incredibe, you can easily see the </span><em>exact total time in ms spend on each line of code</em><span>. You don’t need to use any performance framework, just execute your javascript in the browser and pull up the performance tab. There are also awesome features like flame charts and stuff for memory usage.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png" width="1456" height="1016" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1016,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:493490,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>You can easily see the time spent on each line of code inside Chrome’s performance tools!</figcaption></figure></div><p><span>Here’s a little </span><a href="https://youtube.com/shorts/xuBoiuK-VlU?si=b9lT9gPzXhbfQ9qc" rel="">youtube short</a><span> I made about it</span></p><p>Recursive functions are bad for multiple reasons:</p><ul><li><p>They are almost always synchronous (can’t be broken out for animation)</p></li><li><p>They are inherently a Depth-First Search, and can’t be easily morphed to A*</p></li><li><p>You can’t easily track iterations</p></li><li><p>Mutability is often unnatural in recursive functions but critical to performance</p></li></ul><p>Here’s an example of an “obviously recursive” function converted to a non-recursive function:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png" width="1456" height="715" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:715,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:3554373,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The iteration-based implementation is much faster because it keeps a set of </span><code>visitedNodes</code><span> and checks nodes prior to exploration. You can do this with recursive functions, but you have to pass around a mutable object and do other unnatural things. It’s just best to avoid recursive functions when writing performant code.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png" width="439" height="439" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1024,&quot;width&quot;:1024,&quot;resizeWidth&quot;:439,&quot;bytes&quot;:1095069,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Monte Carlo algorithms use randomness to iterate towards a solution. They are bad because:</p><ul><li><p>They lead to non-deterministic, hard-to-debug algorithms</p></li><li><p>They are basically never optimal relative to a heuristic</p></li></ul><p>I sometimes use Monte Carlo-style algorithms when I don’t yet know how the algorithm should get to the solution, but I know how to score a candidate. They can help give some basic intuition about how to solve a problem. Once you have something approximating a cost function, do something smarter than Monte Carlo or any other random technique like Simulated Annealing. If your algorithm is sensitive to local minimums, consider using hyper parameters or more complex cost functions. Almost any local minimum your human eye can see can be made into a component of a cost function.</p><p>Another way to think about it: How many PCB Designers randomly draw lines on their circuit board? None. Nobody does that. It’s just not a good technique for this domain. You’ll always be able to find a better heuristic.</p><p>Our autorouter is currently a pipeline with 13 stages and something like 20 sub-algorithms that we measure the iteration count of for various things like determining spatial partitions or simplifying paths at the boundaries independently autorouted sections.</p><p>Being able to overlay different inputs/output visualizations of each stage of the algorithm helps you understand the context surrounding the problem you’re solving. I often ran into issues at downstream stages (often our “high density routing” stage) that could be solved by improving the output of previous stages.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png" width="1456" height="480" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:480,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1187396,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The temptation when building sub-algorithms is to isolate the algorithm to its simplest form, maybe even normalizing around (0, 0). The danger with normalization or any complex transformation is it might impact the ability to quickly see consequences from early stages of the algorithm to later stages of the algorithm. To prevent this, just keep your coordinate space consistent throughout the lifecycle of the algorithm.</p><p>Here’s each stage of our algorithm one after another. We often zoom in on this to see what stage is the most guilty culprit for a failed Design Rule Check.</p><p>Remember how it’s super important to lower your iteration count?</p><p>Animating the iterations of your algorithm will show you how “dumb” it’s being by giving you an intuition for how many iterations are wasted exploring paths that don’t matter. This is particularly helpful when adjusting the greedy multiplier (discussed in 12)</p><p>This video is an animation of a simple trace failing to solve, but instead of failing outright attempting to solve endlessly outward. Without the animation, it would have been hard to tell what was going on!</p><p>Consider two ways to determine if a trace A overlaps another trace B:</p><ol><li><p><span>Consider each segment of A and B, and check for intersections</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-160020973" href="https://blog.autorouting.com/p/13-things-i-would-have-told-myself#footnote-1-160020973" target="_self" rel="">1</a></span></p></li><li><p>Create a binary grid that marks each square where trace B is present, then check all the squares where trace A is present to see if B is there</p></li></ol><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png" width="712" height="474.8296703296703" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:712,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Generated image&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="Generated image" title="Generated image" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Believe it or not, most people would choose to use Option 2 with a binary grid check, even though this can easily be 1000x slower. People do this because math is hard 🤦</p><p><span>Luckily LLMs make this kind of intersection math trivial. Use fast vector math!! </span><strong>Checking a SINGLE grid square (memory access!) can literally be slower than doing a dot product to determine if two segments intersect!</strong></p><p>When doing spatial partitioning of the problem, you can measure the probability of solve failure of each stage with some leading indicators. For example, in the Unravel Autorouter we track the probability of failure for each “Capacity Node” at each major pipeline stage. Each stage focuses on reconfiguring adjacent nodes or rerouting to reduce the probability of failure.</p><p>The great thing about probability of failure as a metric is you can literally measure it and improve your prediction as your algorithm changes. Each stage can then do it’s best to minimize the chance of future stages failing.</p><p>I think generally prioritizing solvability is better than trying to incorporate too many constraints. Once a board is solved, it’s often easier to “work with that solution” than to generate optimal solution from scratch.</p><p>Ok it’s not exactly a secret, maybe a “well-known secret”, but if you don’t know about it, you’re not using A* properly.</p><p><span>By default, A* is guaranteed to give you the optimal solution, but what if you care more about speed than about optimality? Make one tiny change to your </span><code>f(n)</code><span>and you have Weighted A*, a variant of A* that solves more greedily, and generally much, much faster!</span></p><p><span>Normal A*:</span><code><span> f(n) = g(n) + h(n)</span><br></code><span>Weighted A*:</span><code> f(n) = g(n) + w * h(n)</code></p><p><span>You can read more about </span><a href="https://movingai.com/astar-var.html" rel="">weighted A* and other A* variants here</a><span>.</span></p><p>Game developers have a lot of the same problems as autorouting developers, so it’s not a bad idea to look for game development papers if you’re searching for related work!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg" width="461" height="330.70301291248205" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:500,&quot;width&quot;:697,&quot;resizeWidth&quot;:461,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>If this was interesting to you, I’d love to show you our autorouter as it gets closer to release. I believe that solving autorouting will be a massive unlock for physical-world innovation and is a key piece to enable the “vibe-building” of electronics. All of our work is MIT-licensed open-source. You can also </span><a href="https://x.com/seveibar" rel="">follow me on twitter.</a></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Arctic sea ice sets a record low maximum in 2025 (114 pts)]]></title>
            <link>https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025</link>
            <guid>43499966</guid>
            <pubDate>Fri, 28 Mar 2025 00:34:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025">https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025</a>, See on <a href="https://news.ycombinator.com/item?id=43499966">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page-wrapper" data-off-canvas-main-canvas=""> <main id="content" role="main"> <section id="https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025_section"> <a id="main-content" tabindex="-1"></a><div id="block-nsidc-content"> <article data-history-node-id="406583" about="https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025" typeof="schema:Article"><div><div><p>WEDNESDAY, MARCH 26, 2025</p></div><div property="schema:text"><p>Arctic sea ice extent appears to have reached its annual maximum on March 22, 2025. This is the lowest maximum in the 47-year satellite record, with previous low maximums occurring in 2017, 2018, 2016, and 2015.</p><p><em>Please note that this is a preliminary announcement. Changing weather or late-season growth could still increase the Arctic sea ice extent. NSIDC scientists will release a full analysis of the 2024 to 2025 Arctic winter sea ice conditions in early April.</em></p><h2>Overview of conditions</h2><p>On March 22, Arctic sea ice likely reached its maximum extent for the year, at 14.33 million square kilometers (5.53 million square miles), the lowest in the 47-year satellite record. This year’s maximum extent is 1.31 million square kilometers (506,000 square miles) below the 1981 to 2010 average maximum of 15.64 million square kilometers (6.04 million square miles) and 80,000 square kilometers (31,000 square miles) below the previous lowest maximum that occurred on March 7, 2017.</p><p>This year’s maximum occurred&nbsp;10&nbsp;days later than the 1981 to 2010 average date of March 12. The date of the maximum has varied considerably over the years, occurring as early as February 24 in 1987 and 1996 and as late as April 2 in 2010.</p><figure data-quickedit-entity-id="media/13084"><p><a href="https://nsidc.org/sites/default/files/images/Data/n_20250322_extn_hires_v3.0.png" aria-label="{&quot;alt&quot;:&quot;Arctic sea ice extent on March 22, 2025&quot;}" role="button" title="Arctic sea ice sets a record low maximum in 2025" data-colorbox-gallery="gallery-image-13084-xrBSWLGgpmQ" aria-controls="colorbox-14KYJMmThd4" data-cbox-img-attrs="{&quot;alt&quot;:&quot;Arctic sea ice extent on March 22, 2025&quot;}"><img id="colorbox-14KYJMmThd4" src="https://nsidc.org/sites/default/files/styles/article_image/public/images/Data/n_20250322_extn_hires_v3.0.png.webp?itok=81j6ehzu" width="672" height="800" alt="Arctic sea ice extent on March 22, 2025" loading="lazy" typeof="foaf:Image" title="Arctic sea ice extent on March 22, 2025"></a></p> <figcaption> <span>Figure 1. Arctic sea ice extent for March 22, 2025, was 14.33 million square kilometers (5.53 million square miles). The orange line shows the 1981 to 2010 average extent for that day. <a href="https://nsidc.org/data/seaice_index">Sea Ice Index</a> data. <a href="https://nsidc.org/sea-ice-today/about-data">About the data</a></span> <span> <span>— Credit:</span> <span>National Snow and Ice Data Center </span> </span> </figcaption> </figure><h2>Conditions in context</h2><p>Low sea ice extent persisted around most of the Arctic during the 2024 to 2025 winter season. Notably, the Gulf of St. Lawrence remained virtually ice free and the Sea Okhotsk had substantially lower sea ice extent than average. Only the East Greenland Sea had near-average extent through the winter. The Bering Sea ice extent was low for much of the season, but growth from late February through late March brought the region closer to average conditions and was the primary contributor to the increase of total Arctic sea ice during March. Temperatures were 1 to 2 degrees Celsius (2 to 4 degrees Fahrenheit) above average in the Arctic and the surrounding seas, which likely slowed the rate of ice growth. &nbsp;</p><figure data-quickedit-entity-id="media/13085"><p><a href="https://nsidc.org/sites/default/files/images/Data/2025-03-22_asina_n_iqr_timeseries.png" aria-label="{&quot;alt&quot;:&quot;Arctic sea ice extent and four other years as of March 22, 2025&quot;}" role="button" title="Arctic sea ice sets a record low maximum in 2025" data-colorbox-gallery="gallery-image-13085-xrBSWLGgpmQ" aria-controls="colorbox-Op4YNAHnZ8s" data-cbox-img-attrs="{&quot;alt&quot;:&quot;Arctic sea ice extent and four other years as of March 22, 2025&quot;}"><img id="colorbox-Op4YNAHnZ8s" src="https://nsidc.org/sites/default/files/styles/article_image/public/images/Data/2025-03-22_asina_n_iqr_timeseries.png.webp?itok=X8GFxj66" width="1000" height="800" alt="Arctic sea ice extent and four other years as of March 22, 2025" loading="lazy" typeof="foaf:Image" title="Arctic sea ice extent and four other years as of March 22, 2025"></a></p> <figcaption> <span>Figure 2. The graph above shows Arctic sea ice extent as of March 22, 2025, along with daily ice extent data for four previous years and the record low year. 2024 to 2025 is shown in blue, 2023 to 2024 in green, 2022 to 2023 in orange, 2021 to 2022 in brown, 2020 to 2021 in magenta, and 2011 to 2012 in dashed brown. The 1981 to 2010 median is in dark gray. The gray areas around the median line show the interquartile and interdecile ranges of the data. <a href="https://nsidc.org/data/seaice_index">Sea Ice Index</a> data.</span> <span> <span>— Credit:</span> <span>National Snow and Ice Data Center </span> </span> </figcaption> </figure><h2>Top 10 lowest Arctic sea ice maximum extents</h2><table><caption><strong>Table 1.&nbsp;</strong>Top 10 lowest maximum Arctic sea ice extents (satellite record, 1979 to present)</caption><thead><tr><th rowspan="2">RANK</th><th rowspan="2">YEAR</th><th colspan="2">MAXIMUM SEA ICE EXTENT</th><th rowspan="2">DATE</th></tr><tr><th>IN MILLIONS OF SQUARE KILOMETERS</th><th>IN MILLIONS OF SQUARE MILES</th></tr></thead><tbody><tr><td>1</td><td>2025</td><td>14.33</td><td>5.53</td><td>March 22</td></tr><tr><td>2</td><td>2017</td><td>14.41</td><td>5.56</td><td>March 7</td></tr><tr><td>3</td><td>2018</td><td>14.47</td><td>5.59</td><td>March 17</td></tr><tr><td>4</td><td>2016<br>2015</td><td>14.51<br>14.52</td><td>5.60<br>5.61</td><td>March 23<br>Feb. 25</td></tr><tr><td>6</td><td>2023</td><td>14.62</td><td>5.64</td><td>March 6</td></tr><tr><td>7</td><td>2011<br>2006</td><td>14.67<br>14.68</td><td>5.66<br>5.67</td><td>March 9<br>March 12</td></tr><tr><td>9</td><td>2007<br>2021</td><td>14.77<br>14.78</td><td>5.70<br>5.71</td><td>March 12<br>March 12</td></tr></tbody></table><p><em>Values within 40,000 square kilometers (15,000 square miles) are considered tied.&nbsp;</em></p></div></div> </article></div> </section> </main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[LibreOffice downloads on the rise as users look to avoid subscription costs (176 pts)]]></title>
            <link>https://www.computerworld.com/article/3840480/libreoffice-downloads-on-the-rise-as-users-look-to-avoid-subscription-costs.html</link>
            <guid>43499860</guid>
            <pubDate>Fri, 28 Mar 2025 00:20:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.computerworld.com/article/3840480/libreoffice-downloads-on-the-rise-as-users-look-to-avoid-subscription-costs.html">https://www.computerworld.com/article/3840480/libreoffice-downloads-on-the-rise-as-users-look-to-avoid-subscription-costs.html</a>, See on <a href="https://news.ycombinator.com/item?id=43499860">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-3840480">
	<div>
			<div>
						<div>
			<h2>
				The free open-source Microsoft Office alternative is being downloaded by nearly 1 million users a week.			</h2>
			
		</div>					
						
<div id="remove_no_follow">
<div>




<p>Interest in&nbsp;<a href="https://www.libreoffice.org/discover/libreoffice/" target="_blank" rel="noreferrer noopener">LibreOffice</a>, the open-source alternative to Microsoft Office, is on the rise, with weekly downloads of its software package close to 1 million a week. That’s the&nbsp;<a href="https://stats.documentfoundation.org/downloads#week,version" target="_blank" rel="noreferrer noopener">highest download number since 2023</a>.</p>



<p>LibreOffice, which runs on Windows, Linux, and macOS, is a standalone desktop office productivity software that is free to use. Downloads have picked up since The Document Foundation, which manages its development,&nbsp;<a href="https://blog.documentfoundation.org/blog/2025/02/27/announcement-of-libreoffice-25-2-1/" target="_blank" rel="noreferrer noopener">released version 25.2 last week</a>.&nbsp;</p>



<p>It has emerged as the most popular open-source suite, with alternative versions such as Apache’s OpenOffice losing steam. The last version of OpenOffice was released in 2023.</p>
</div>
							
							<div>


<p>“We estimate around 200 million [LibreOffice] users, but it’s important to note that we respect users’ privacy and don’t track them, so we can’t say for sure,” said Mike Saunders, an open-source advocate and a deputy to the board of directors at The Document Foundation.</p>

		

			


<p>There is still noteworthy interest in LibreOffice as a standalone desktop alternative to paid office productivity suites, said Jason Wong, distinguished vice president and analyst at Gartner. “Usually these are clients seeking to keep their on-premises implementation, given that both Microsoft and Google have focused on their cloud offerings,” Wong said.&nbsp;</p>



<p>Cost is a factor for evaluating software suites like LibreOffice, Wong said. “The downside is the additional specialized resources and new skills needed to maintain the [software],” he&nbsp;&nbsp;said.</p>
</div>
							
							<div>


<p>Downloads of LibreOffice have been steadily climbing with each new version, Saunders said.&nbsp;</p>



<p>Though LibreOffice has traditionally been a favorite of home users, there’s growing interest in businesses and government, Saunders said.&nbsp;The northern German state of Schleswig-Holstein last year said it would move 30,000 PCs from&nbsp;<a href="https://www.computerworld.com/article/3555023/heres-whats-new-in-office-2024.html">Microsoft Office</a>&nbsp;to LibreOffice.</p>



<p>“The majority of our users — 85% — are on Windows, followed by macOS and then Linux,” Saunders said.&nbsp;</p>
</div>
							
							<div>


<p>Many desktop Linux distributions pre-install LibreOffice, but it’s unclear how many users that represents.</p>



<p>LibreOffice users typically want a straightforward interface, Saunders said. “They don’t want subscriptions, and they don’t want AI being ‘helpful’ by poking its nose into their work — it reminds them of Clippy from the bad old days,” he said.&nbsp;</p>



<p>There are genuine use cases for generative AI tools, but many users prefer to opt-in to it and choose when and where to enable it. “We have zero plans to put AI into LibreOffice. But we understand the value of some AI tools and are encouraging developers to create … extensions that use AI in a responsible way,” Saunders said.&nbsp;</p>
</div>
							
							<div>
									<p>Although there are cloud-based versions of OpenOffice, The Document Foundation has focused on the desktop version, Saunders said.</p></div>
</div>					</div>

			<!--right side bar-->
			<div id="rightrail-wrapper">
					<p>SUBSCRIBE TO OUR NEWSLETTER			</p>
							<h3>
				From our editors straight to your inbox			</h3>
						<p>
			Get started by entering your email address below.		</p>
				
	</div>
			<!--right side bar ends here-->

		</div>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A note on the USB-to-PS/2 mouse adapter that came with Microsoft mouse devices (185 pts)]]></title>
            <link>https://devblogs.microsoft.com/oldnewthing/20250325-00/?p=110993</link>
            <guid>43499823</guid>
            <pubDate>Fri, 28 Mar 2025 00:16:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://devblogs.microsoft.com/oldnewthing/20250325-00/?p=110993">https://devblogs.microsoft.com/oldnewthing/20250325-00/?p=110993</a>, See on <a href="https://news.ycombinator.com/item?id=43499823">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="single-wrapper">
    
    <article data-clarity-region="article" id="post-110993">
        <div data-bi-area="body_article" data-bi-id="post_page_body_article">
            <p>Back in the early days of USB, Microsoft mouse devices often came with a USB plug at the end of the cable, but also came with a small green adapter to convert the USB type-A plug into a PS/2 plug. How did this adapter work?</p>
<p>USB and PS/2 are completely different protocols that are not compatible in any way. The adapter was purely mechanical (passive). It connected one set of pins to another, but it contained no circuitry. All of the smarts was in the mouse.</p>
<p>The mouse detected whether it received USB-like signals or PS/2-like signals on the pins and changed its behavior accordingly. The mouse did all the work.</p>
<p>It’s similar to the inexpensive electrical outlet adapters which convert between different national plug types. There are no smarts in the adapter. It just connects one set of plugs to another. The actual intelligence is in the appliance itself (or the power brick for the appliance).</p>
<p>So if you find one of these adapters in your junk drawer, be aware that it is not a universal mouse adapter. It is just a physical adapter; the actual conversion happens in the dual-bus mouse on the other end.</p>
<p><b>Bonus chatter</b>: An Internet search shows that people still make these types of mouse adapters. I don’t know whether the ones you can buy today are smart adapters that translate between the PS/2 and USB signaling protocols, or whether they are purely mechanical adapters that rely on the mouse to do the work.</p>
        </div><!-- .entry-content -->

        <!-- AI Disclaimer -->
            </article>
    
</div><div><!-- Author section -->
            <h2>Author</h2>
            <div><div><p><img src="https://devblogs.microsoft.com/oldnewthing/wp-content/uploads/sites/38/2019/02/RaymondChen_5in-150x150.jpg" alt="Raymond Chen"></p></div><p>Raymond has been involved in the evolution of Windows for more than 30 years. In 2003, he began a Web site known as The Old New Thing which has grown in popularity far beyond his wildest imagination, a development which still gives him the heebie-jeebies. The Web site spawned a book, coincidentally also titled The Old New Thing (Addison Wesley 2007). He occasionally appears on the Windows Dev Docs Twitter account to tell stories which convey no useful information.</p></div>        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Giant, fungus-like organism may be a completely unknown branch of life (107 pts)]]></title>
            <link>https://www.livescience.com/animals/giant-fungus-like-organism-may-be-a-completely-unknown-branch-of-life</link>
            <guid>43499342</guid>
            <pubDate>Thu, 27 Mar 2025 23:15:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.livescience.com/animals/giant-fungus-like-organism-may-be-a-completely-unknown-branch-of-life">https://www.livescience.com/animals/giant-fungus-like-organism-may-be-a-completely-unknown-branch-of-life</a>, See on <a href="https://news.ycombinator.com/item?id=43499342">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-widget-type="contentparsed" id="content">
<div>
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1600-80.jpg.webp 1920w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-320-80.jpg.webp 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1200-80.jpg" alt="A rendering of Prototaxites as it may have looked during the early Devonian Period, approximately 400 million years" srcset="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1600-80.jpg 1920w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-320-80.jpg 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o.jpg" data-pin-nopin="true" fetchpriority="high">
</picture>
</div>
<figcaption>
<span>A painting of what Prototaxites may have looked like, 400 million years ago.</span>
<span>(Image credit: Painting by Mary Parrish, National Museum of Natural History.)</span>
</figcaption>
</div>

<div id="article-body">
<p>A bizarre ancient life-form, considered to be the <a data-analytics-id="inline-link" href="https://www.biorxiv.org/content/10.1101/2025.03.14.643340v1.full.pdf" target="_blank" data-url="https://www.biorxiv.org/content/10.1101/2025.03.14.643340v1.full.pdf" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>first giant organism</u></a> to live on land, may belong to a totally unknown branch of the tree of life, scientists say.</p><p>These organisms, named <em>Prototaxites</em>, lived around 420 million to 375 million years ago during the Devonian period and resembled branchless, cylindrical tree trunks. These organisms would have been massive, with some species growing <a data-analytics-id="inline-link" href="https://pubs.geoscienceworld.org/gsa/geology/article-abstract/35/5/399/129855/Devonian-landscape-heterogeneity-recorded-by-a?redirectedFrom=fulltext" target="_blank" data-url="https://pubs.geoscienceworld.org/gsa/geology/article-abstract/35/5/399/129855/Devonian-landscape-heterogeneity-recorded-by-a?redirectedFrom=fulltext" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>up to 26 feet (8 meters) tall </u></a>and 3 feet (1 meter) wide.</p><p>Since the first <em>Prototaxites</em> fossil was discovered in 1843, scientists haven't been sure whether they were a plant, fungus or even a <a data-analytics-id="inline-link" href="https://phys.org/news/2007-04-prehistoric-mystery-giant-fungus.html" target="_blank" data-url="https://phys.org/news/2007-04-prehistoric-mystery-giant-fungus.html" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>type of algae</u></a>. However, <a data-analytics-id="inline-link" href="https://www.livescience.com/1461-prehistoric-mystery-organism-humongous-fungus.html" data-before-rewrite-localise="https://www.livescience.com/1461-prehistoric-mystery-organism-humongous-fungus.html"><u>chemical analyses of </u><u><em>Prototaxites</em></u><u> fossils</u></a> in 2007 suggested they were likely a <a data-analytics-id="inline-link" href="https://pubs.geoscienceworld.org/gsa/geology/article-abstract/35/5/399/129855/Devonian-landscape-heterogeneity-recorded-by-a?redirectedFrom=fulltext" target="_blank" data-url="https://pubs.geoscienceworld.org/gsa/geology/article-abstract/35/5/399/129855/Devonian-landscape-heterogeneity-recorded-by-a?redirectedFrom=fulltext" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>giant ancient fungus</u></a>.</p><p>Now, <a data-analytics-id="inline-link" href="https://www.biorxiv.org/content/10.1101/2025.03.14.643340v1" target="_blank" data-url="https://www.biorxiv.org/content/10.1101/2025.03.14.643340v1" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>according to a paper</u></a> published March 17 on the preprint server bioRxiv, <em>Prototaxites</em> might not have been a humongous fungus after all — rather, it may have been an entirely different and previously unknown life-form. The study has not yet been peer-reviewed.</p><p>All life on Earth is classified within three domains — bacteria, archaea and eukarya — with eukarya containing all multicellular organisms within the four kingdoms of fungi, animals, plants <a data-analytics-id="inline-link" href="https://www.livescience.com/54242-protists.html" data-before-rewrite-localise="https://www.livescience.com/54242-protists.html"><u>and protists</u></a>. Bacteria and archaea contain only single-celled organisms.</p><p>Previous chemical analysis of <em>Prototaxites</em> fossils indicated that they likely fed off decaying organisms, just like many fungi do today, rather than making their food from carbon dioxide in the air like plants.</p><p>However, according to this new research, <em>Prototaxites</em> may actually have been part of a totally different kingdom of life, separate from fungi, plants, animals and protists.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-TT23hGQ7XJtsjBD4MeoeD7"><section><p>Get the world’s most fascinating discoveries delivered straight to your inbox.</p></section></div><p>The researchers studied the fossilized remains of one <em>Prototaxites</em> species named <em>Prototaxites taiti</em>, found preserved in the Rhynie chert, a sedimentary deposit of exceptionally well-preserved fossils of early land plants and animals in Scotland. This species was much smaller than many other species of <em>Prototaxites</em>, only growing up to a few inches tall, but it is still the largest <em>Prototaxites</em> specimen found in this region.</p><p>Upon examining the internal structure of the fossilized <em>Prototaxites</em>, the researchers found that its interior was made up of a series of tubes, similar to those within a fungus. But these tubes branched off and reconnected in ways very unlike those seen in modern fungi.</p><p>"We report that <em>Prototaxites taiti</em> was the largest organism in the Rhynie ecosystem and its anatomy was fundamentally distinct from all known extant or extinct fungi," the researchers wrote in the paper. "We therefore conclude that <em>Prototaxites</em> was not a fungus, and instead propose it is best assigned to a now entirely extinct terrestrial lineage."</p><p>True fungi from the same period have also been preserved in the Rhynie chert, enabling the researchers to chemically compare them to <em>Prototaxites</em>. In addition to their unique structural characteristics, the team found that the <em>Prototaxites</em> fossils left completely different chemical signatures to the fungi fossils, indicating that the <em>Prototaxites</em> did not contain chitin, a major building block of fungal cell walls and a hallmark of the fungal kingdom. The <em>Prototaxites</em> fossils instead appeared to contain chemicals similar to lignin, which is found in the wood and bark of plants.</p><p>"We conclude that the morphology and molecular fingerprint of <em>P. taiti</em> is clearly distinct from that of the fungi and other organism preserved alongside it in the Rhynie chert, and we suggest that it is best considered a member of a previously undescribed, entirely extinct group of eukaryotes," the researchers wrote.</p><p><a data-analytics-id="inline-link" href="https://profiles.stanford.edu/charles-boyce" target="_blank" data-url="https://profiles.stanford.edu/charles-boyce" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>Kevin Boyce</u></a>, a professor at Stanford University, led the 2007 study that posited <em>Prototaxites</em> is a giant fungus and was not involved in this new research. However, he <a data-analytics-id="inline-link" href="https://mail.google.com/mail/u/1/#inbox/FMfcgzQZTpzCtMvvcJkXtStFlTLPfFDr?compose=CllgCJvkXVHJsgLpfZdhzNWHHPWtRqFrwhJfmzgpqMlrqdsGgSvRwHxTNMmLMRfttWcxVfRdptg" target="_blank" data-url="https://mail.google.com/mail/u/1/#inbox/FMfcgzQZTpzCtMvvcJkXtStFlTLPfFDr?compose=CllgCJvkXVHJsgLpfZdhzNWHHPWtRqFrwhJfmzgpqMlrqdsGgSvRwHxTNMmLMRfttWcxVfRdptg" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>told the New Scientist</u></a> that he agreed with the study's findings.</p><p>"Given the phylogenetic information we have now, there is no good place to put Prototaxites in the fungal phylogeny," Boyce said. "So maybe it is a fungus, but whether a fungus or something else entirely, it represents a novel experiment with complex multicellularity that is now extinct and does not share a multicellular common ancestor with anything alive today."</p><p>More research into <em>Prototaxites</em> fossils needs to be done to determine if they were fungi or a completely different type of life, and what caused them to go extinct millions of years ago.</p><p>"The conclusion that it is a completely unknown eukaryote certainly creates an air of mystery and intrigue around it — probably not likely to be solved until more fossils are discovered or new analytical techniques developed," <a data-analytics-id="inline-link" href="https://www.botanicgardens.org.au/about-us/our-people/meet-our-experts/brett-summerell" target="_blank" data-url="https://www.botanicgardens.org.au/about-us/our-people/meet-our-experts/brett-summerell" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>Brett Summerell</u></a>, a plant pathologist and fungi expert at the Botanic Gardens of Sydney, Australia, who not involved in this new study, told the New Scientist.</p>
</div>
<div id="slice-container-authorBio-TT23hGQ7XJtsjBD4MeoeD7"><p>Jess Thomson is a freelance journalist. She previously worked as a science reporter for Newsweek, and has also written for publications including VICE, The Guardian, The Cut, and Inverse. Jess holds a Biological Sciences degree from the University of Oxford, where she specialised in animal behavior and ecology.</p></div>

</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Most promoted and blocked domains on Kagi (290 pts)]]></title>
            <link>https://kagi.com/stats?stat=leaderboard</link>
            <guid>43499045</guid>
            <pubDate>Thu, 27 Mar 2025 22:39:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kagi.com/stats?stat=leaderboard">https://kagi.com/stats?stat=leaderboard</a>, See on <a href="https://news.ycombinator.com/item?id=43499045">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <table>
        
  <tbody><tr>
    <td>?</td>
    <td>
      Toggle open/close this keyboard shortcut help screen
      
    </td>
  </tr>

        
  <tr>
    <td>j / arrowdown</td>
    <td>
      Move highlight down a result
      
    </td>
  </tr>

        
  <tr>
    <td>k / arrowup</td>
    <td>
      Move highlight up a result
      
    </td>
  </tr>

        
  <tr>
    <td>h / arrowleft</td>
    <td>
      Move left within horizontal inline content, or change boost/ban status in site info modal
      
    </td>
  </tr>

        
  <tr>
    <td>l / arrowright</td>
    <td>
      Move right within horizontal inline content, or change boost/ban status in site info modal
      
    </td>
  </tr>

        
  <tr>
    <td>enter</td>
    <td>
      Go to highlighted result <br>(or open first result, which would be highlighted)
      
    </td>
  </tr>

        
  <tr>
    <td>/</td>
    <td>
      Focus the search bar
      
    </td>
  </tr>

        
  <tr>
    <td>!</td>
    <td>
      Focus the search bar, and add a "!" to start typing a bang
      
    </td>
  </tr>

        
  <tr>
    <td>q</td>
    <td>
      Open quick answer
      
    </td>
  </tr>

        
  <tr>
    <td>Escape</td>
    <td>
      Reset highlight scroll state to first result, or close site info modal
      
    </td>
  </tr>

        
  <tr>
    <td>Shift + ~</td>
    <td>
      Open control center
      
    </td>
  </tr>

        
  <tr>
    <td>s</td>
    <td>
      Open site info modal on the currently highlighted result if applicable, or close it if already open.
      
    </td>
  </tr>

        
  <tr>
    <td>w</td>
    <td>
      Open web search tab
      
    </td>
  </tr>

        
  <tr>
    <td>i</td>
    <td>
      Open images tab
      
    </td>
  </tr>

        
  <tr>
    <td>v</td>
    <td>
      Open videos tab
      
    </td>
  </tr>

        
  <tr>
    <td>m</td>
    <td>
      Open maps tab
      
    </td>
  </tr>

        
  <tr>
    <td>n</td>
    <td>
      Open news tab
      
    </td>
  </tr>

        
        
  <tr>
    <td>]</td>
    <td>
      Cycle forward between navigation tabs
      
    </td>
  </tr>

        
  <tr>
    <td>[</td>
    <td>
      Cycle backwards between navigation tabs
      
    </td>
  </tr>

      </tbody></table>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple Needs a Snow Sequoia (687 pts)]]></title>
            <link>https://reviews.ofb.biz/safari/article/1300.html</link>
            <guid>43498984</guid>
            <pubDate>Thu, 27 Mar 2025 22:32:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://reviews.ofb.biz/safari/article/1300.html">https://reviews.ofb.biz/safari/article/1300.html</a>, See on <a href="https://news.ycombinator.com/item?id=43498984">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	<p>Mar 19, 2025 </p>

	
	
<!--break #-->
<p>The same year Apple launched the iPhone, it unveiled a massive upgrade to Mac OS X known as Leopard, sporting “300 New Features.” Two years later, it did something almost unheard of: it released Snow Leopard, an upgrade all about how <em>little</em> it added and how much it took away. Apple needs to make it snow again.</p>



<!--break #-->
<p>Snow Leopard did what it was made to do. It was one of the most solid software releases Apple ever put out. I’d say one of the best modern operating system releases, period.</p>

<p>After Apple’s frenetic run of overhauling and quickly iterating on the entire Mac platform in the early 2000s, becoming a major technology player again with the iPod, moving the Mac to a new processor architecture (for the second of three times) and releasing the iPhone, it was time for detail work. 2009’s Snow Leopard was understated, but improved the underlying system while <em>shrinking</em> it in size by removing outdated accretions.</p>

<p>In an era when people still paid money for operating system upgrades every few years (anyone else remember standing in line for Windows 95?), releasing an OS upgrade without huge new features was unusual. But, it was the right idea and cemented one of the best eras of the Mac. </p>

<p>Nowadays, Apple includes the system upgrades in the upfront cost of its computers, so the incentive to constantly roll out ten or twenty or three hundred “new features” <em>should</em> be lower. Inexplicably, since the company adopted that no extra charge, yearly release cadence, it has seemingly been more reticent to do a disciplined “Snow” release, no matter how necessary.</p>

<p>The latest releases — MacOS Sequoia and iOS/iPadOS 18 — are <em>screaming</em> for such a reset. Yes, they work and are still smoother and less glitchy than Windows 11, but they feel like software developed by people who don’t actually use that software. In the 22 years since I became <a href="https://en.wikipedia.org/wiki/Switch_(advertising_campaign)">a “switcher”</a>, this is the worst state I can remember Apple’s platforms being in.</p>

<p>Some bugs are inevitable with major releases, sure. The troubling aspect is that many are easily reproducible across devices and show up in high-traffic areas, not just forgotten nooks. <em>How do Apple’s engineers not notice these problems?</em></p>

<p>Take Messages. Apple’s iMessage and SMS tool is an essential app for communication for me and, I suspect, the vast majority of Apple users. Since the release of Sequoia last fall, one can no longer reliably cut or copy text from the Mac app. Attempting to copy a message bubble is a game of roulette: the message may copy or it may not. <em>Who knows until you try to paste!</em> Select text in a message and attempt to copy a specific part and it will copy… the whole message, not the selected portion. This is basic, nailed-down-in-the-1980s functionality even my first PC could get right every time.</p>

<p>Surface-level problems like this are joined by deeper structural issues, such as how slow and bloated Messages is. Compared to other end-to-end encrypted messaging tools, Messages takes <em>forever</em> to synchronize if the computer has been off or without Internet for even a day. Nor does it give any indication of an incomplete sync while it takes an hour or more to catch up. Meanwhile, I regularly catch it consuming 20-40% of a processor core when idling. </p>

<p>This is not good.</p>

<p>On my laptop, Mail, and any other tool that depends on MacOS’s secure networking libraries, will at times refuse to connect to the necessary servers. Because the problem is with some aspect of the underlying system, nothing less than a full restart of my Mac will allow connections to flow again. Separately, Safari regularly has internal components jam up and silently prevent a tab <em>or the whole browser</em> from loading pages. </p>

<p>Neither are the glitches confined to the Mac. UI bugs are strewn across Apple’s mobile platforms, too. Messages on iPad, for example, will regularly lose its top navigation bar, requiring a force quit of the app to get things working again. The emoji picker on both the iPad and Mac regularly comes up blank or fails to pass through a selection.</p>

<p>Then there are design decisions that aren’t bugs, they’re just bad. System Settings is a perfect case. For most of MacOS’s existence, you could rearrange a second display’s location in relation to the primary display simply by going into the System Preferences, clicking on Displays and dragging the pictured displays around. Now, counterintuitively, the picture of the displays on this main screen are immovable, with rearrangement functionality hidden behind a button that leads to another window.</p>

<p>That’d be an annoying step backward in the olden days, but it is worse in an era when an iPad can share the Mac’s mouse pointer and even double as a secondary display. Am I the only one who sometimes has his iPad on the left of the Mac and sometimes the right? Why make it harder to rearrange displays <em>now</em>?</p>

<p>I could walk item by item through System Settings and point out many equally inexplicable decisions. Did anyone at Apple really believe a Mac user’s life would be <em>better</em> if common features were buried deep in menus? Or that those menus would be better if designed with odd, glitchy interface arrangements more akin to web pages than a proper Mac app?</p>

<p>Then there’s the abomination that is the iOS and iPadOS Photos app. The previous release was not perfect, but it was <em>good</em>. The new release buried quick access to functions such as favorites. The first release also defaulted to showing all photos and videos with huge margins around them rather than using the full screen. When is the last time you heard someone say, “I sure hate when photos fill my whole screen, I wish they’d put a big border around them instead”? Meanwhile, navigation items are non-standard and riddled with inconsistencies — sometimes there’s a back navigation button, sometimes an “X,” sometimes in one place, sometimes in another — more akin to an Android app than a core part of iOS.</p>

<p>A year focused on cleaning up these and a thousand similar issues big and small is the single step Apple could take that would most enhance its products.</p>

<center><iframe width="800" height="450" src="https://www.youtube.com/embed/XAEPqUtra6E?si=gXq4Ei7Hrvk6DQZB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></center>
<figcaption>This decade old video from Apple’s WWDC conference summarizes Steve Jobs’ philosophy that “Innovation is saying no to 1,000 things.” This has exemplified Apple’s best moments and been absent during their worst.</figcaption>

<p>This is not to say Apple’s platforms are without the need for updates. Apple is clearly behind on the AI arms race and the <a href="https://www.axios.com/2025/03/07/siri-apple-ai-delay">recent announcement</a> that Apple Intelligence’s most exciting features are indefinitely delayed instills little confidence the company will soon catch up. John Gruber is right that Apple now seems to be producing <a href="https://daringfireball.net/2025/03/something_is_rotten_in_the_state_of_cupertino">concept videos of vaporware</a>.</p>

<p>The company’s struggle to release its most important new features in years may be more than tangentially related to everything I’ve bemoaned in this column. Reports <a href="https://www.msn.com/en-us/technology/artificial-intelligence/siri-s-real-ai-upgrade-could-still-be-years-away/ar-AA1A5Hxi?ocid=BingNewsSerp">suggest Siri is actually divided into two different systems</a> — the old, core, limited Siri and a newer one for the latest features — because they haven’t been able to pull off integrating them. </p>

<p>You can put beautiful new windows on your house when the wood is solid; when it is rotten, you need to replace the rotted-out structure first. Snow Leopard’s clean-up paved the way for years of solid, reliable upgrades to MacOS, including many of the flashy features we now take for granted. </p>

<p>I am not suggesting Apple has fallen behind Windows or Android. Changing a setting on Windows 11 can often involve a journey through three or four different interface designs, artifacts of half-implemented changes dating back to the last century. Whenever I find myself stuck outside of Appleland, I am eager to return “home,” flaws and all. </p>

<p>Yet, Apple’s products gained loyal supporters like me because their products were polished and “just worked.” They are middle of the road to premium offerings; it is no compliment when they are the “least bad” instead of the “best.” They <em>should</em> be better than the experience on a $200 PC. </p>

<p>Apple is a company with enormous resources. Apple has not wisely directed some, significant portion of those resources in recent years. An ill-advised focus on the far-fetched Vision Pro occupied Apple when it should have seen AI racing into the mainstream. I <a href="https://ofb.biz/safari/article/1113.html">lamented that nearly two years ago</a>. Having squandered its lead going the wrong direction, Apple’s temptation could now be to ignore the infrastructure rot and simply keep trying to bolt on catchup features without fixing what’s already broken.</p>

<p>With the company’s size and resources, though, this needn’t be a call to fall even further behind on AI. Apple could <em>easily</em> have its core operating system team focused on clean up releases of its operating systems even while its AI team tried to find its footing. </p>

<p>AI or no-AI, spring cleaning would make the Mac, iPhone and iPad really shine. If Apple Intelligence can get caught up, so much the better: the software around it won’t get in the way. <img src="https://ofb.biz/phoenix/images/ofb.svg"></p>

<p><em>Full Disclosure: Tim does own some Apple (AAPL) and Microsoft (MSFT) stock.</em></p>


<!--break #-->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Asking good questions is harder than giving great answers (125 pts)]]></title>
            <link>https://newsletter.dancohen.org/archive/asking-good-questions-is-harder-than-giving-great-answers/</link>
            <guid>43498570</guid>
            <pubDate>Thu, 27 Mar 2025 21:48:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newsletter.dancohen.org/archive/asking-good-questions-is-harder-than-giving-great-answers/">https://newsletter.dancohen.org/archive/asking-good-questions-is-harder-than-giving-great-answers/</a>, See on <a href="https://news.ycombinator.com/item?id=43498570">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
            <date>
                
                March 18, 2025
                
            </date>
            

            

            
            <h2>
                The tests we are using to assess the intelligence of AI are missing an essential aspect of human inquiry — the query itself
            </h2>
            

            
            
            <p>by <a href="https://dancohen.org/?utm_source=dancohen&amp;utm_medium=email" target="_blank">Dan Cohen</a></p>
            
            

            
            
            
<figure><img alt="A painting of Socrates about to drink the hemlock, as his disciples look away in dismay" draggable="false" src="https://assets.buttondown.email/images/9eb0fcbd-5985-4441-b49f-bd8bc19e3200.jpg?w=960&amp;fit=max"><figcaption><em>Jacques-Louis David, “The Death of Socrates,” 1787, Metropolitan Museum of Art. Perhaps he asked too many good questions</em></figcaption></figure>

<p>Recently, I sharpened a #2 pencil and took the history section of "<a href="https://agi.safe.ai/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">Humanity's Last Exam</a>.” Consisting of 3,000 extremely difficult questions, the test is intended for AI, not me. According to its creators and contributors, Humanity’s Last Exam will tell us when artificial general intelligence has arrived to supersede human beings, once a brilliant bot scores an A.</p>
<p>I got an F. Actually, worse than that: Only one of my answers was correct, and I must admit it helped that the question was multiple choice. This is fairly embarrassing for someone with a PhD in history.</p>
<p>What happened? Let me indulge in a standard academic humiliation-avoidance technique: examining the examiners. A much easier exercise. Of the thousands of questions on the test, a mere 16 are on history. By comparison, over 1,200 are on mathematics. This is a rather rude ratio for a purported Test of All Human Knowledge, and a major demerit in this human’s assessment of the exam.</p>
<p>The offense extends further to the historical topics covered. Of the 16 history questions, four of them — 25% of historical understanding! — are about naval battles. My knowledge of the displacement of various warships is admittedly weak. Other questions are byzantine, alas not literally, but figuratively, long narrative journeys with twists and turns that are clearly trying to confuse any AI by flooding its memory with countless opaque terms. Those questions certainly succeeded in confusing me.</p>
<p>I will not be reproducing the history questions here since the creators of Humanity’s Last Exam don’t want AI to have a sneak peek at the questions ahead of taking the test. Of course, this raises another question: Would a true superintelligence cheat? I feel like it would? If you, presumably a human reader, want to take the test yourself, you can find a database of the questions on <a href="https://huggingface.co/datasets/cais/hle?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">Hugging Face</a> and <a href="https://github.com/centerforaisafety/hle?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">GitHub</a>. I should also note that I did not take the “classics” section of the exam, as I am a historian of the modern era and do not know Latin, Greek, etc., but much of that section is history too, perhaps because there <a href="https://en.wikipedia.org/wiki/Battle_of_Salamis?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">were</a> <a href="https://en.wikipedia.org/wiki/Battle_of_Artemisium?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">also</a> <a href="https://en.wikipedia.org/wiki/Battle_of_Sybota?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">naval</a> <a href="https://en.wikipedia.org/wiki/Battle_of_Sphacteria?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">battles</a> in the ancient world.</p>
<p>* * *</p>
<p>Although I failed Humanity’s Last Exam, I did learn something about the current state of our assessment of AI, and what we expect from it. HLE’s implicit definition of “intelligence” is the ability to provide correct answers to complicated questions, and it is just one of many similar exams. Another, <a href="https://proceedings.neurips.cc/paper_files/paper/2024/hash/38cc5cba8e513547b96bc326e25610dc-Abstract-Datasets_and_Benchmarks_Track.html?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">less naval-gazing test</a> of historical knowledge is based on <a href="https://seshat-db.com/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">a comprehensive global history database</a>, but still relies on question-answer pairs so it can provide numerical scores for each LLM’s ability. Upon the release of their latest models, AI companies tout improvements on these assessment tools, which allows them to proclaim definitive AI progress: “This LLM got a 92% on a PhD-level history exam, up from 56% last year!”</p>
<p>And the companies are not wrong about genuinely impressive improvements. <a href="https://newsletter.dancohen.org/archive/humane-ingenuity-3-ai-in-the-archives/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">Six years ago in this newsletter</a>, I wrote about some initial testing I had been doing with computer vision APIs from Google and Microsoft, a first attempt to analyze the photo morgue my library had recently acquired from the <em>Boston Globe</em>. There were glimmers of hope that these pre-GPT tools could help us identify topics in millions of photographs that lacked rigorous metadata, and I found even 80% accuracy to be promising. Now our library’s digital team, much more capable than I am, has created an abstracted interface to all of the main multimodal AI services and is testing the ability of these services to provide subject headings and descriptions, with much better results (although all of the services are still imperfect).</p>
<p>Fellow historian Benjamin Breen <a href="https://resobscura.substack.com/p/the-leading-ai-models-are-now-very?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">has documented similar advances</a> in his testing of AI. The latest models are scarily on par with a first-year doctoral student in history in some areas, able to provide solid context and advanced interpretations of documents and images, even complex ones that require substantial background in a field. The frontier models are much better than most doctoral students in other tasks, such as translation and transcription. Handwriting recognition for historical documents, in particular, has been among the hardest problems for computer scientists to solve, and cracking it will have a significant impact on historical research. Historian <a href="https://cblevins.github.io/posts/llm-primary-sources/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">Cameron Blevins has shown</a> that custom GPTs are now on a path to a solution that could make archives and special collections much more searchable and readable in ways that might transform our ability to do history. What these other tests of artificial intelligence show is that significant AI progress may lie not in some kind of examination endgame, of perfect answers to tough questions, but in the important, but often hidden, middle stages of a research project, when evidence is being assembled and interpreted.</p>
<p>* * *</p>
<p>Even more obscured right now in the conversation about AI and intelligence is that PhD-level work is not just about correct answers. It is more about <em>asking distinctive, uncommon questions</em>. Ultimately, we may want answers, but we must begin with new queries, new areas of interest. Along the way to a better understanding of the past and present, good questions in history may eventually require accurate translations of inscriptions or the location of sea skirmishes. But first, we must imagine why someone, today, should care about such documents and events in the first place, envision how they may have shaped our world. This is a much bigger challenge.</p>
<p>The most vibrant historical studies begin with questions that are unexpected and which therefore have revelatory power. Recently in this newsletter, for instance, <a href="https://newsletter.dancohen.org/archive/synths-and-sensibility/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">I covered a book</a> that originated with the seemingly simple query, “Why did audiences at orchestral performances become silent when previously they were rowdy?” Before I read <a href="https://www.ucpress.edu/books/listening-in-paris/paper?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank"><em>Listening in Paris</em></a>, I assumed naively that the eternally proper behavior at a concert has been respectful quiet. By asking this curious question, James Johnson was able to unveil a major change in the nature and relationship of music, composers, and audiences that still resonates today, even if our musical tastes have largely changed.</p>
<p>Other books that have influenced me originated with equally novel questions. Why, over a relatively short period of time, <a href="https://www.hup.harvard.edu/books/9780674037076?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">did the British radically change their view of some animals</a>, like dogs, from unkempt wild beasts to delightful members of the household, proudly coiffed and paraded at dog shows? Why did Isaac Newton, the paragon of modern science, <a href="https://www.cambridge.org/us/universitypress/subjects/history/history-science-and-technology/foundations-newtons-alchemy?format=PB&amp;isbn=9780521273817&amp;utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">write more on alchemy</a> than he did on physics or math? How does the experience of war — not the abstract tactics of naval battles but the actual first-person experience — <a href="https://en.wikipedia.org/wiki/The_Great_War_and_Modern_Memory?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">profoundly change individual soldiers and then, in aggregate, an entire culture</a>?</p>
<p>Can AI ever produce good <em>questions</em> in history rather than great <em>answers</em>? I’ll tackle that important question in another newsletter.</p>
            
            

            

            





        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Golang on the Playstation 2 (112 pts)]]></title>
            <link>https://rgsilva.com/blog/ps2-go-part-1/</link>
            <guid>43498481</guid>
            <pubDate>Thu, 27 Mar 2025 21:37:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rgsilva.com/blog/ps2-go-part-1/">https://rgsilva.com/blog/ps2-go-part-1/</a>, See on <a href="https://news.ycombinator.com/item?id=43498481">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      
      <figure>
        <img src="https://rgsilva.com/blog/ps2-go-part-1/cover.jpg">
      </figure>
      <p>I always wanted to do some weird stuff with consoles. I’m not sure why, but making devices do unexpected things is always an interesting topic for me. And the same applies to the <a href="https://en.wikipedia.org/wiki/PlayStation_2">PlayStation 2</a>, the 2000 console released by Sony.</p>
<p>Also, Sony, don’t sue me for this lol</p>
<p>Let’s get straight into it: I want to run code into consoles (more on <em>why</em> this in a future post). Normally this is done in low(er) level languages, but nowadays we have better and easier to work with languages such as <a href="https://go.dev/">Go</a>. So I was wondering.. why not?</p>
<p>Looking online, however, yielded no easy way of doing this, so I decided to tackle this problem myself.</p>
<blockquote>
<p>Please note that I’m writing this after a lot of the research here has been done and tested already. This means that a lot of the experimentation here is from memory and from retracing my steps, so there might be inconsistencies here and there.</p>
</blockquote>
<blockquote>
<p>Also note that this is all running inside an emulator. I do own a PS2 that I can test this, but I’m too lazy to set it up. Plus I want fully functional demos before doing so.</p>
</blockquote>
<blockquote>
<p>Final note: the code will be released at a later point and I’ll update the post accordingly.</p>
</blockquote>
<h2 id="the-challenge">The challenge</h2>
<p>By default, <a href="https://go.dev/wiki/MinimumRequirements">Go only supports a handful of platforms</a>, and unfortunately that does not include the PS2. In fact, Go seems to require an OS behind the scenes, thing that we don’t even have over there (not considering PS2 Linux). To solve that, however, we have <a href="https://tinygo.org/">TinyGo</a>, a Go compiler for small devices, like microcontrollers and embedded systems. The basic way it works is that it gets the Go code, turns into LLVM IR, and then that into the binary code for whatever target we’re trying to code for.</p>
<p>The PS2 main CPU is called <a href="https://en.wikipedia.org/wiki/Emotion_Engine">Emotion Engine</a>, which is based on a MIPS R5900. It implements the instructions for MIPS-III and MIPS-IV, plus some custom stuff. It also is missing a few other things (more on that later). Go can actually build code for MIPS already, which should save me some time, but not a lot, as I need to get TinyGo to work on it. TinyGo relies on LLVM 19, which does support MIPS-III, but not the R5900 CPU directly.</p>
<p>These are all technical issues. There’s a much more pressing one: I don’t know how the PS2 works.</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-10.png"><figcaption>
      Well, that should be fun.
    </figcaption>
</figure>
<h2 id="the-ps2dev-sdk-and-its-quirks">The ps2dev SDK and its quirks</h2>
<p>If you look it up online for a way of developing code for the PS2, you’ll probably cross paths with <a href="https://github.com/ps2dev/ps2dev">ps2dev</a>. This is a full-blown SDK that lets you generate binaries for it in a pretty neat way. The coolest thing about it is that it already provides a bunch of libraries for graphical operations, debugging, I/O, etc - even a stdlib is provided! Because of that, I thought: hey, maybe I want to link to their code - this would allow an easier and faster implementation of anything for the PS2 in Go. Think of it as an “OS” API (technically it’s not?), which we could call whenever we want to do things we don’t want to reimplement (or that aren’t even worth trying sometimes).</p>
<p>That said, this introduces a few problems. The first one is that the ps2dev libraries are compiled to the MIPS-III N32 standard. This means that, whatever code we produce, needs to target the same thing. Same hard-float, same N32 ABI, etc. This is a bit annoying, but manageable. The reason why it needs to match is because we’ll be linking our code to their pre-built libraries, and linkers are not really fond of dealing with different targets.</p>
<blockquote>
<p>For the sake of clarification: MIPS-III N32 means that this is targeting a MIPS CPU that is implementing the MIPS-III instruction set. This is a 64bit CPU, but due to the N32, this is running 32bit code with some 64bit instructions to handle 64bit integers. This is very confusing, but you can check <a href="https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models">this</a> to read more about it.</p>
</blockquote>
<p>Because of this, you’ll see my attempts to target <code>mipsel</code> with a <code>mips3</code> CPU in the next steps, even though it should, technically speaking, be a <code>mips64el</code>, as this is a 64bit CPU. N32 should force things to run in 32bit mode, even though though our target should support 64bit code. However, Clang/LLVM and TinyGo get kinda messy on this and it gets very confusing and complicated. Also, building for <code>mips64el</code> caused TinyGo to failed some verification steps when generating code with the LLVM, as well as clang to refuse to properly build it as the code is kinda broken. Since I <em>really</em> wanted to move forward, I gave up and opted for generating <code>mipsel</code> code with the N32 ABI, which will force clang to change it to a MIPS64 internally, but still generate valid code. Like I said, it’s very weird. Please bear with me, this is all new to me too! :D</p>
<p>Further reiteration on this topic might be necessary to get this just right, but I’m not diving into this hell right now. Future-wise we can try dropping ps2dev and doing things directly in Go, but some assembly is required - literally and metaphorically.</p>
<h2 id="getting-tinygo-to-generate-some-code">Getting TinyGo to generate some code</h2>
<p>For TinyGo to know about a certain target, it requires a file defining it - we’ll call it <code>ps2.json</code>. It defines a bunch of very interesting things that we don’t really care at the moment, but here are the most important ones:</p>
<div><pre tabindex="0"><code data-lang="json"><span><span>{
</span></span><span><span>	<span>"llvm-target"</span>: <span>"mipsel-unknown-unknown"</span>,
</span></span><span><span>	<span>"cpu"</span>: <span>"mips3"</span>,
</span></span><span><span>	<span>"features"</span>: <span>"-noabicalls"</span>,
</span></span><span><span>	<span>"build-tags"</span>: [<span>"ps2"</span>, <span>"baremetal"</span>, <span>"mipsel"</span>],
</span></span><span><span>	<span>"goos"</span>: <span>"linux"</span>,
</span></span><span><span>	<span>"goarch"</span>: <span>"mipsle"</span>,
</span></span><span><span>	<span>"linker"</span>: <span>"ld.lld"</span>,
</span></span><span><span>	<span>"rtlib"</span>: <span>"compiler-rt"</span>,
</span></span><span><span>	<span>"libc"</span>: <span>""</span>,
</span></span><span><span>	<span>"cflags"</span>: [
</span></span><span><span>	],
</span></span><span><span>	<span>"ldflags"</span>: [
</span></span><span><span>	],
</span></span><span><span>	<span>"linkerscript"</span>: <span>""</span>,
</span></span><span><span>	<span>"extra-files"</span>: [
</span></span><span><span>	],
</span></span><span><span>	<span>"gdb"</span>: []
</span></span><span><span>}
</span></span></code></pre></div><p>This file is the culmination of many, maaany days testing different configurations. It is only <strong>partially functional</strong>. It cannot generate object files yet (more below), hence the reason why I’m not bothering to fill in flags for compiling and linking code. There are some relevant things I need to explain, though, so here we go:</p>
<ol>
<li>Target is <code>mipsel-unknown-unknown</code>. This is our LLVM target. I’m sticking with <code>mipsel</code> here for the reasons I explained previously.</li>
<li>The features have <code>-noabicalls</code>. It is required as otherwise shit hits the fan and nothing works (the LLVM IR that gets generated gets broken).</li>
<li>I’ve set it to not use any <code>libc</code>. This is because ps2dev already provides one, and I don’t want to mess with that (trust me). Plus, since we’ll be linking to their code, we might as well use their version of it.</li>
</ol>
<p>This is the <em>basic</em> target file we need so that TinyGo at least <em>knows</em> what a PS2 is. But that’s not all - we need to define a bunch of functions which are target-specific.</p>
<h3 id="baremetal-definitions">Baremetal definitions</h3>
<p>Our target needs a baremetal configuration - <code>baremetal_ps2.go</code>. Usually the <a href="https://github.com/tinygo-org/tinygo/blob/release/src/runtime/baremetal.go">default baremetal file</a> is enough, but in our case I’ve opted to create a custom one so that I can redefine some things.</p>
<blockquote>
<p>Note from the future: this can be improved by adjusting the linker file so it finds the correct externs. I might end up doing that and come back here later on.</p>
</blockquote>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//go:build ps2
</span></span></span><span><span><span></span>
</span></span><span><span><span>package</span> <span>runtime</span>
</span></span><span><span>
</span></span><span><span><span>import</span> <span>"C"</span>
</span></span><span><span><span>import</span> (
</span></span><span><span>	<span>"unsafe"</span>
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span>//go:extern _heap_start
</span></span></span><span><span><span></span><span>var</span> <span>heapStartSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>//go:extern _heap_end
</span></span></span><span><span><span></span><span>var</span> <span>heapEndSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>//go:extern _fdata
</span></span></span><span><span><span></span><span>var</span> <span>globalsStartSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>//go:extern _edata
</span></span></span><span><span><span></span><span>var</span> <span>globalsEndSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>//go:extern _stack_top
</span></span></span><span><span><span></span><span>var</span> <span>stackTopSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>var</span> (
</span></span><span><span>	<span>heapStart</span>    = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>heapStartSymbol</span>))
</span></span><span><span>	<span>heapEnd</span>      = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>heapEndSymbol</span>))
</span></span><span><span>	<span>globalsStart</span> = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>globalsStartSymbol</span>))
</span></span><span><span>	<span>globalsEnd</span>   = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>globalsEndSymbol</span>))
</span></span><span><span>	<span>stackTop</span>     = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>stackTopSymbol</span>))
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span>func</span> <span>growHeap</span>() <span>bool</span> {
</span></span><span><span>	<span>// On baremetal, there is no way the heap can be grown.
</span></span></span><span><span><span></span>	<span>return</span> <span>false</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>//export runtime_putchar
</span></span></span><span><span><span></span><span>func</span> <span>runtime_putchar</span>(<span>c</span> <span>byte</span>) {
</span></span><span><span>	<span>putchar</span>(<span>c</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>//go:linkname syscall_Exit syscall.Exit
</span></span></span><span><span><span></span><span>func</span> <span>syscall_Exit</span>(<span>code</span> <span>int</span>) {
</span></span><span><span>  	<span>// TODO
</span></span></span><span><span><span></span>	<span>exit</span>(<span>code</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>const</span> <span>baremetal</span> = <span>true</span>
</span></span><span><span>
</span></span><span><span><span>var</span> <span>timeOffset</span> <span>int64</span>
</span></span><span><span>
</span></span><span><span><span>//go:linkname now time.now
</span></span></span><span><span><span></span><span>func</span> <span>now</span>() (<span>sec</span> <span>int64</span>, <span>nsec</span> <span>int32</span>, <span>mono</span> <span>int64</span>) {
</span></span><span><span>	<span>mono</span> = <span>nanotime</span>()
</span></span><span><span>	<span>sec</span> = (<span>mono</span> <span>+</span> <span>timeOffset</span>) <span>/</span> (<span>1000</span> <span>*</span> <span>1000</span> <span>*</span> <span>1000</span>)
</span></span><span><span>	<span>nsec</span> = int32((<span>mono</span> <span>+</span> <span>timeOffset</span>) <span>-</span> <span>sec</span><span>*</span>(<span>1000</span><span>*</span><span>1000</span><span>*</span><span>1000</span>))
</span></span><span><span>	<span>return</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>AdjustTimeOffset</span>(<span>offset</span> <span>int64</span>) {
</span></span><span><span>	<span>timeOffset</span> <span>+=</span> <span>offset</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>var</span> <span>errno</span> <span>int32</span>
</span></span><span><span>
</span></span><span><span><span>//export __errno_location
</span></span></span><span><span><span></span><span>func</span> <span>libc_errno_location</span>() <span>*</span><span>int32</span> {
</span></span><span><span>	<span>return</span> <span>&amp;</span><span>errno</span>
</span></span><span><span>}
</span></span></code></pre></div><p>Do we need to understand how most of this works? No, we don’t. Not only that, most of this is copy-paste from the normal <code>baremetal.go</code> implementation. We can adjust later if necessary, no worries. Like I said, we mostly need this to <em>build</em>, so that we can figure out what is wrong and fix it accordingly.</p>
<blockquote>
<p>Note: for this to work, you still need to disable the building of the original <code>baremetal.go</code> for our target, so we need to change its build flag to <code>//go:build baremetal &amp;&amp; !ps2</code>.</p>
</blockquote>
<h3 id="runtime">Runtime</h3>
<p>Our target needs a runtime definitions file - <code>runtime_ps2.go</code>. This is the place where a bunch of target-specific functions get defined, including how <code>putchar</code>, <code>exit</code> and even <code>main</code> (later) gets implemented. Pretty cool part of the code if I’d say so.</p>
<p>A very basic implementation would look like this:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//go:build ps2
</span></span></span><span><span><span></span>
</span></span><span><span><span>package</span> <span>runtime</span>
</span></span><span><span>
</span></span><span><span><span>/*
</span></span></span><span><span><span>extern void _exit(int status);
</span></span></span><span><span><span>extern void* malloc(unsigned int size);
</span></span></span><span><span><span>extern void free(void *ptr);
</span></span></span><span><span><span>extern void scr_printf(const char *format, ...);
</span></span></span><span><span><span>*/</span>
</span></span><span><span><span>import</span> <span>"C"</span>
</span></span><span><span><span>import</span> <span>"unsafe"</span>
</span></span><span><span>
</span></span><span><span><span>// timeUnit in nanoseconds
</span></span></span><span><span><span></span><span>type</span> <span>timeUnit</span> <span>int64</span>
</span></span><span><span>
</span></span><span><span><span>func</span> <span>initUART</span>() {
</span></span><span><span>  <span>// Unsupported.
</span></span></span><span><span><span></span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>putchar</span>(<span>c</span> <span>byte</span>) {
</span></span><span><span>	<span>// This is a very hacky way of doing this. It assumes the debug screen is already active, and prints
</span></span></span><span><span><span></span>	<span>// a whole string for a single char every single time. Very slow, but works. We can improve it later.
</span></span></span><span><span><span></span>
</span></span><span><span>	<span>x</span> <span>:=</span> <span>C</span>.<span>CString</span>(string(<span>c</span>))
</span></span><span><span>	<span>C</span>.<span>scr_printf</span>(<span>x</span>)
</span></span><span><span>	<span>C</span>.<span>free</span>(<span>unsafe</span>.<span>Pointer</span>(<span>x</span>))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>getchar</span>() <span>byte</span> {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> <span>0</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>buffered</span>() <span>int</span> {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> <span>0</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>sleepWDT</span>(<span>period</span> <span>uint8</span>) {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>exit</span>(<span>code</span> <span>int</span>) {
</span></span><span><span>  	<span>// This just delegates it to the ps2dev _exit(int) function.
</span></span></span><span><span><span></span>	<span>C</span>.<span>_exit</span>(<span>C</span>.int(<span>code</span>))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>abort</span>() {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>ticksToNanoseconds</span>(<span>ticks</span> <span>timeUnit</span>) <span>int64</span> {
</span></span><span><span>  	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> int64(<span>ticks</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>nanosecondsToTicks</span>(<span>ns</span> <span>int64</span>) <span>timeUnit</span> {
</span></span><span><span>  	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> <span>timeUnit</span>(<span>ns</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>sleepTicks</span>(<span>d</span> <span>timeUnit</span>) {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>ticks</span>() (<span>ticksReturn</span> <span>timeUnit</span>) {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> <span>0</span>
</span></span><span><span>}
</span></span></code></pre></div><p>A lot of it is not implemented, and this is intentional - I won’t be using those things at the moment, so I don’t care about them. We can later implement them accordingly, and get them to work as expected. Some of them might be even doable through ps2dev’s C functions, for example.</p>
<h3 id="interrupts">Interrupts</h3>
<p>Another basic file we need is the interrupts defintions - <code>interrupt_ps2.go</code>. I know that ps2dev has implementations for those calls, but I’ve opted to not call them yet. At this moment, we don’t need interrupts, so let’s just implement dummy functions for that:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//go:build ps2
</span></span></span><span><span><span></span>
</span></span><span><span><span>package</span> <span>interrupt</span>
</span></span><span><span>
</span></span><span><span><span>type</span> <span>State</span> <span>uintptr</span>
</span></span><span><span>
</span></span><span><span><span>func</span> <span>Disable</span>() (<span>state</span> <span>State</span>) {
</span></span><span><span>	<span>return</span> <span>0</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>Restore</span>(<span>state</span> <span>State</span>) {}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>In</span>() <span>bool</span> {
</span></span><span><span>	<span>return</span> <span>false</span>
</span></span><span><span>}
</span></span></code></pre></div><p>With that, we <em>should</em> be able to build some Go code. So let’s give it a try.</p>
<h2 id="calling-go-functions-from-c">Calling Go functions from C</h2>
<p>Let’s start with a simple example: get our C code to return a number and a string. Nothing major. We’ll split this into 2 parts: the loader (in C) and our Go code. It will work like this:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-2.png"><figcaption>
      It works!
    </figcaption>
</figure>
<p>Here’s our Go code:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//export aGoString
</span></span></span><span><span><span></span><span>func</span> <span>aGoString</span>() <span>*</span><span>C</span>.<span>char</span> {
</span></span><span><span>	<span>return</span> <span>C</span>.<span>CString</span>(<span>"The answer for everything is"</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>//export aGoNumber
</span></span></span><span><span><span></span><span>func</span> <span>aGoNumber</span>() <span>C</span>.<span>int</span> {
</span></span><span><span>	<span>return</span> <span>C</span>.int(<span>42</span>)
</span></span><span><span>}
</span></span></code></pre></div><p>And our loader, which contains our <code>main</code> function:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>// Our go functions, exported before.
</span></span></span><span><span><span></span><span>extern</span> <span>char</span><span>*</span> <span>aGoString</span>();
</span></span><span><span><span>extern</span> <span>int</span> <span>aGoNumber</span>();
</span></span><span><span>
</span></span><span><span><span>int</span> <span>main</span>() {
</span></span><span><span>  <span>// Initialize our debug screen.
</span></span></span><span><span><span></span>  <span>sceSifInitRpc</span>(<span>0</span>);
</span></span><span><span>  <span>init_scr</span>();
</span></span><span><span>
</span></span><span><span>  <span>// Print stuff we get from Go functions.
</span></span></span><span><span><span></span>  <span>scr_printf</span>(<span>"%s: %d</span><span>\n</span><span>"</span>, <span>aGoString</span>(), <span>aGoNumber</span>());
</span></span><span><span>
</span></span><span><span>  <span>// Infinite loop so we keep the program running.
</span></span></span><span><span><span></span>  <span>while</span> (<span>1</span>) {}
</span></span><span><span>
</span></span><span><span>  <span>return</span> <span>0</span>;
</span></span><span><span>}
</span></span></code></pre></div><p>Very simple code, right? Let’s build it.</p>
<p>Well, no, wait. There’s a problem. TinyGo, by default, wants you to generate the final ELF (<code>.elf</code>) or the object file (<code>.o</code>) with it. However, the ELF requires adding a linkfile and some other extra bits of code to it, which we’re far from. For now, we just want to get some functions in a way that we can link - so we should be able to just use the object file.</p>
<p>However, attempting to do so generates an incorrect file:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ tinygo build -target ps2 -o test.o
</span></span><span><span>$ file test.o
</span></span><span><span>test.o: ELF 32-bit LSB relocatable, MIPS, MIPS-III version <span>1</span> <span>(</span>SYSV<span>)</span>, with debug_info, not stripped
</span></span></code></pre></div><figcaption>
  Note the missing `N32` in the string
</figcaption>
<p>I thought: oh, ok, we’re just missing the proper <code>cflags</code> and <code>ldflags</code> here, right? So let’s try adding it:</p>
<div><pre tabindex="0"><code data-lang="json"><span><span>{
</span></span><span><span>	<span>// (...)
</span></span></span><span><span><span></span>	<span>"cflags"</span>: [
</span></span><span><span>		<span>"-mabi=n32"</span>
</span></span><span><span>	],
</span></span><span><span>	<span>"ldflags"</span>: [
</span></span><span><span>		<span>"-mabi=n32"</span>
</span></span><span><span>	],
</span></span><span><span>	<span>// (...)
</span></span></span></code></pre></div><figcaption>
  These might not be the right flags, but according to some docs it seems like it is.
</figcaption>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ tinygo build -target ps2 -o test.o
</span></span><span><span>$ file test.o                                        
</span></span><span><span>test.o: ELF 32-bit LSB relocatable, MIPS, MIPS-III version <span>1</span> <span>(</span>SYSV<span>)</span>, with debug_info, not stripped
</span></span></code></pre></div><p>Oh. Ok then.</p>
<p>Since TinyGo is, for some reason, not playing nice here, I’ve opted for breaking this into steps that I can more easily control. TinyGo internally will generating some LLVM IR from your Go code, and then build it. Let’s stop at the LLVM IR level then:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ tinygo build -target ps2 -o build/go.ll
</span></span></code></pre></div><p>This will generate a valid LLVM IR file! 🎉 Now we can just manually build it into the object file with the format we want:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ clang -fno-pic -c --target<span>=</span>mips64el -mcpu<span>=</span>mips3 -fno-inline-functions -mabi<span>=</span>n32 -mhard-float -mxgot -mlittle-endian -o build/go.o build/go.ll
</span></span></code></pre></div><p>The flags here are important. Our target is a MIPS64 (only TinyGo is not happy with it), Little Endian, with the MIPS-III instruction set, using the N32 ABI. It uses hardware floating numbers, and the <code>-fno-pic</code> and <code>-mxgot</code> is to deal with a global offset table size limit issue when linking. With all that, here’s what we get:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ file build/go.o
</span></span><span><span>build/go.o: ELF 32-bit LSB relocatable, MIPS, N32 MIPS-III version <span>1</span> <span>(</span>SYSV<span>)</span>, with debug_info, not stripped
</span></span></code></pre></div><figcaption>
  Finally!
</figcaption>
<p>From here, we can link with our C code. For that, I’ve opted to use the ps2dev linking command (extracted from the Makefile and some testing), with our Go code added into it:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>mips64r5900el-ps2-elf-gcc <span>\
</span></span></span><span><span><span></span>	-Tlinkfile <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/ps2sdk/ee/lib <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/ps2sdk/ports/lib <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/gsKit/lib/ <span>\
</span></span></span><span><span><span></span>	-Lmodules/ds34bt/ee/ <span>\
</span></span></span><span><span><span></span>	-Lmodules/ds34usb/ee/ <span>\
</span></span></span><span><span><span></span>	-Wl,-zmax-page-size<span>=</span><span>128</span> <span>\
</span></span></span><span><span><span></span>	-lpatches <span>\
</span></span></span><span><span><span></span>	-lfileXio <span>\
</span></span></span><span><span><span></span>	-lpad <span>\
</span></span></span><span><span><span></span>	-ldebug <span>\
</span></span></span><span><span><span></span>	-lmath3d <span>\
</span></span></span><span><span><span></span>	-ljpeg <span>\
</span></span></span><span><span><span></span>	-lfreetype <span>\
</span></span></span><span><span><span></span>	-lgskit_toolkit <span>\
</span></span></span><span><span><span></span>	-lgskit <span>\
</span></span></span><span><span><span></span>	-ldmakit <span>\
</span></span></span><span><span><span></span>	-lpng <span>\
</span></span></span><span><span><span></span>	-lz <span>\
</span></span></span><span><span><span></span>	-lmc <span>\
</span></span></span><span><span><span></span>	-laudsrv <span>\
</span></span></span><span><span><span></span>	-lelf-loader <span>\
</span></span></span><span><span><span></span>	-laudsrv <span>\
</span></span></span><span><span><span></span>	-lc <span>\
</span></span></span><span><span><span></span>	-mhard-float <span>\
</span></span></span><span><span><span></span>	-msingle-float <span>\
</span></span></span><span><span><span></span>	-o build/main.elf <span>\
</span></span></span><span><span><span></span>	build/loader.o <span>\
</span></span></span><span><span><span></span>	build/asm_mipsx.o <span>\
</span></span></span><span><span><span></span>	build/go.o
</span></span></code></pre></div><figcaption>
  Loader is our C code, and Go is our.. well, Go code.
</figcaption>
<blockquote>
<p>Note: the <code>asm_mipsx.o</code> is some assembly code provided by TinyGo that I just copied into the project and built with clang. You can find it <a href="https://github.com/tinygo-org/tinygo/blob/release/src/runtime/asm_mipsx.S">here</a>.</p>
</blockquote>
<p>And, with that, we build our new application!</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ file build/main.elf
</span></span><span><span>build/main.elf: ELF 32-bit LSB executable, MIPS, N32 MIPS-III version <span>1</span> <span>(</span>SYSV<span>)</span>, statically linked, with debug_info, not stripped
</span></span></code></pre></div><p>And running it yields success:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-3.png"><figcaption>
      It works! This is PCSX2 v2.3.223 btw.
    </figcaption>
</figure>
<h2 id="switching-to-gos-main">Switching to Go’s main</h2>
<p>Right now the <code>main</code> function that is being called is not in Go, but in C - that is what we’ve been calling <em>loader</em> so far. However, Go applications can start by themselves without a C-based loader - and it would be great if our <del>games</del> PS2 applications would so!</p>
<h3 id="runtime-changes">Runtime changes</h3>
<p>The first step to allowing Go applications to run without our loader is to have the <code>main</code> function exposed by Go. We can do that in our <code>runtime_ps2.go</code>:</p>
<pre tabindex="0"><code>//export main
func main() {
	preinit()
	run()
	preexit()
	exit(0)
}

const (
	memSize = uint(24 * 1024 * 1024)
)

var (
	goMemoryAddr uintptr
)

func preinit() {
	// NOTE: no need to clear .bss and other memory areas as crt0 is already doing that in __start.

	// Since we're loading into whatever ps2dev kernel thingy that exists, it's safer for us to do
	// a proper malloc before proceeding. This guarantees that the heap location is ours. We will
	// need to free it later on though.

	goMemoryAddr = uintptr(unsafe.Pointer(C.malloc(C.uint(memSize))))
	heapStart = goMemoryAddr
	heapEnd = goMemoryAddr + uintptr(memSize)
}

func preexit() {
	C.free(unsafe.Pointer(heapStart))
}
</code></pre><p>There are some important things to note here:</p>
<ol>
<li>The heap start and end could be defined by the linker file. And, ironically, they are. However, the <code>crt0</code> provided by ps2dev will clear those variables for some reason, making it kinda broken.
<ol>
<li>We could just assume that anything above a certain memory address is ours, <em>buuuut</em> ps2dev may want to play with more memory and I don’t want to deal with this right now.</li>
<li>We’ll allocate the memory using ps2dev’s <code>malloc</code> as per stated in the code. This will guarantee that this memory area is ours - if the libraries need more, they should still have some memory left, as the PS2 should have 32MB and we’re allocating 24MB only.</li>
<li>Technically speaking we could make the heap grow per demand - but that’s a problem for future me.</li>
</ol>
</li>
<li>We’ll intentionally unallocate the memory after usage. Not really required, but <em>just in case</em>.</li>
<li>The <code>run</code> function is responsible for calling our <code>main</code> function inside our <code>main</code> package. This is not something we need to deal with - TinyGo’s code does that for us, we just need to call it.</li>
</ol>
<p>It works basically like this:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-4.png"><figcaption>
      Exitpoint is even a word?!
    </figcaption>
</figure>
<p>This is technically a mixed approach: it’s both baremetal - because it runs without a proper OS - but it’s also not - because it allocates memory, enters and exits application.</p>
<p>Fun fact: once the code exits, it shows the memory card selection screen!</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-5.png">
</figure>
<h3 id="our-go-code">Our Go code</h3>
<p>Let’s code something in Go then. First step is to have something to call, so let’s create a package called <code>debug</code> with the debug screen functions:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>package</span> <span>debug</span>
</span></span><span><span>
</span></span><span><span><span>/*
</span></span></span><span><span><span>extern void free(void *ptr);
</span></span></span><span><span><span>extern void sceSifInitRpc(int mode);
</span></span></span><span><span><span>extern void init_scr(void);
</span></span></span><span><span><span>extern void scr_printf(const char *format, ...);
</span></span></span><span><span><span>*/</span>
</span></span><span><span><span>import</span> <span>"C"</span>
</span></span><span><span><span>import</span> (
</span></span><span><span>	<span>"fmt"</span>
</span></span><span><span>	<span>"unsafe"</span>
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span>func</span> <span>Init</span>() {
</span></span><span><span>	<span>C</span>.<span>sceSifInitRpc</span>(<span>0</span>)
</span></span><span><span>	<span>C</span>.<span>init_scr</span>()
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>Printf</span>(<span>format</span> <span>string</span>, <span>args</span> <span>...</span><span>interface</span>{}) {
</span></span><span><span>	<span>formatted</span> <span>:=</span> <span>fmt</span>.<span>Sprintf</span>(<span>format</span>, <span>args</span><span>...</span>)
</span></span><span><span>
</span></span><span><span>	<span>str</span> <span>:=</span> <span>C</span>.<span>CString</span>(<span>formatted</span>)
</span></span><span><span>	<span>C</span>.<span>scr_printf</span>(<span>str</span>)
</span></span><span><span>	<span>C</span>.<span>free</span>(<span>unsafe</span>.<span>Pointer</span>(<span>str</span>))
</span></span><span><span>}
</span></span></code></pre></div><blockquote>
<p>Yes, there is an <code>extern</code> for the <code>free</code> function which could be replaced by stdlib. I’ve avoided that at the moment as that requires adding some C flags for include paths and that made it messy. Here’s how it looks like with it:</p>
<pre tabindex="0"><code>/*
#cgo CFLAGS: -I/Users/ricardo/dev/ps2dev/ee/mips64r5900el-ps2-elf/include -I/Users/ricardo/dev/ps2dev/ee/lib/gcc/mips64r5900el-ps2-elf/14.2.0/include/ -I/Users/ricardo/dev/ps2dev/gsKit/include -I/Users/ricardo/dev/ps2dev/ps2sdk/common/include -I/Users/ricardo/dev/ps2dev/ps2sdk/ports/include/freetype2 -I/Users/ricardo/dev/ps2dev/ps2sdk/ports/include/zlib
#include &lt;stdlib.h&gt;

extern void sceSifInitRpc(int mode);
extern void init_scr(void);
extern void scr_printf(const char *format, ...);
*/
</code></pre><p>This can be improved by moving those flags externally to the build process but that’s a problem for future me once this gets released.</p>
</blockquote>
<p>Overall, this is nothing too crazy - it’s just the normal debug functions exposed by ps2dev (declared <a href="https://ps2dev.github.io/ps2sdk/ee_2debug_2include_2debug_8h.html">here</a> and implemented <a href="https://github.com/ps2dev/ps2sdk/blob/master/ee/debug/src/scr_printf.c">here</a>). And then we just call it:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>package</span> <span>main</span>
</span></span><span><span>
</span></span><span><span><span>import</span> (
</span></span><span><span>	<span>"ps2go/debug"</span>
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span>func</span> <span>main</span>() {
</span></span><span><span>	<span>debug</span>.<span>Init</span>()
</span></span><span><span>
</span></span><span><span>	<span>debug</span>.<span>Printf</span>(<span>"Hello world from Go!\n"</span>)
</span></span><span><span>	<span>debug</span>.<span>Printf</span>(<span>`
</span></span></span><span><span><span>   ____                                _                           
</span></span></span><span><span><span>  / ___| ___    _ __ _   _ _ __  _ __ (_)_ __   __ _    ___  _ __  
</span></span></span><span><span><span> | |  _ / _ \  | '__| | | | '_ \| '_ \| | '_ \ / _' |  / _ \| '_ \ 
</span></span></span><span><span><span> | |_| | (_) | | |  | |_| | | | | | | | | | | | (_| | | (_) | | | |
</span></span></span><span><span><span>  \____|\___/  |_|   \__,_|_| |_|_| |_|_|_| |_|\__, |  \___/|_| |_|
</span></span></span><span><span><span>    ____  _             ____  _        _   _   |___/       ____    
</span></span></span><span><span><span>   |  _ \| | __ _ _   _/ ___|| |_ __ _| |_(_) ___  _ __   |___ \   
</span></span></span><span><span><span>   | |_) | |/ _' | | | \___ \| __/ _' | __| |/ _ \| '_ \    __) |  
</span></span></span><span><span><span>   |  __/| | (_| | |_| |___) | || (_| | |_| | (_) | | | |  / __/   
</span></span></span><span><span><span>   |_|   |_|\__,_|\__, |____/ \__\__,_|\__|_|\___/|_| |_| |_____|  
</span></span></span><span><span><span>                  |___/                                            
</span></span></span><span><span><span>`</span>)
</span></span><span><span>	<span>for</span> {
</span></span><span><span>		<span>// Infinite loop to not exit!
</span></span></span><span><span><span></span>	}
</span></span><span><span>}
</span></span></code></pre></div><p>Fancy, no? Let’s build the code and see what happens:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ tinygo build -target ps2 -o build/go.ll
</span></span><span><span>$ clang -fno-pic -c --target<span>=</span>mips64el -mcpu<span>=</span>mips3 -fno-inline-functions -mabi<span>=</span>n32 -mhard-float -mxgot -mlittle-endian -o build/go.o build/go.ll
</span></span><span><span>$ mips64r5900el-ps2-elf-gcc <span>\
</span></span></span><span><span><span></span>	-Tlinkfile <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/ps2sdk/ee/lib <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/ps2sdk/ports/lib <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/gsKit/lib/ <span>\
</span></span></span><span><span><span></span>	-Lmodules/ds34bt/ee/ <span>\
</span></span></span><span><span><span></span>	-Lmodules/ds34usb/ee/ <span>\
</span></span></span><span><span><span></span>	-Wl,-zmax-page-size<span>=</span><span>128</span> <span>\
</span></span></span><span><span><span></span>	-lpatches <span>\
</span></span></span><span><span><span></span>	-lfileXio <span>\
</span></span></span><span><span><span></span>	-lpad <span>\
</span></span></span><span><span><span></span>	-ldebug <span>\
</span></span></span><span><span><span></span>	-lmath3d <span>\
</span></span></span><span><span><span></span>	-ljpeg <span>\
</span></span></span><span><span><span></span>	-lfreetype <span>\
</span></span></span><span><span><span></span>	-lgskit_toolkit <span>\
</span></span></span><span><span><span></span>	-lgskit <span>\
</span></span></span><span><span><span></span>	-ldmakit <span>\
</span></span></span><span><span><span></span>	-lpng <span>\
</span></span></span><span><span><span></span>	-lz <span>\
</span></span></span><span><span><span></span>	-lmc <span>\
</span></span></span><span><span><span></span>	-laudsrv <span>\
</span></span></span><span><span><span></span>	-lelf-loader <span>\
</span></span></span><span><span><span></span>	-laudsrv <span>\
</span></span></span><span><span><span></span>	-lc <span>\
</span></span></span><span><span><span></span>	-mhard-float <span>\
</span></span></span><span><span><span></span>	-msingle-float <span>\
</span></span></span><span><span><span></span>	-o build/main.elf <span>\
</span></span></span><span><span><span></span>	build/asm_mipsx.o <span>\
</span></span></span><span><span><span></span>	build/go.o
</span></span></code></pre></div><figcaption>
  Easy, no?
</figcaption>
<p>That builds the ELF file. Now let’s load it in the emulator and see what happens!</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-6.png"><figcaption>
      Yeeeeeeeeey!
    </figcaption>
</figure>
<p>Success! 🎉</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-9.png"><figcaption>
      Gotta love memes
    </figcaption>
</figure>
<h2 id="the-ddivu-problem">The DDIVU problem</h2>
<p>While testing some basic functionality, I’ve noticed that <code>fmt.Sprintf</code> didn’t work properly. Look at this very simple basic code:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>func</span> <span>main</span>() {
</span></span><span><span>	<span>debug</span>.<span>Init</span>()
</span></span><span><span>
</span></span><span><span>	<span>for</span> <span>i</span> <span>:=</span> <span>-</span><span>32</span>; <span>i</span> <span>&lt;=</span> <span>32</span>; <span>i</span><span>++</span> {
</span></span><span><span>		<span>debug</span>.<span>Printf</span>(<span>"%02d, "</span>, <span>i</span>)
</span></span><span><span>	}
</span></span><span><span>
</span></span><span><span>	<span>for</span> {
</span></span><span><span>		<span>// Infinite loop to not exit!
</span></span></span><span><span><span></span>	}
</span></span><span><span>}
</span></span></code></pre></div><figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-7.png"><figcaption>
      Errr this is awkward
    </figcaption>
</figure>
<p>Ok, this is not normal. The numbers between <code>-9</code> and <code>+9</code> are correct, while everything else is wrong. This specific problem took me <em>days</em> to figure out what the hell was going on. I eventually narrowed it down to <a href="https://cs.opensource.google/go/go/+/master:src/fmt/format.go;l=243-249?q=fmtinteger&amp;ss=go%2Fgo">this</a> part of the <code>fmtInteger</code> implementation, used by <code>Sprintf</code> inside the <code>fmt</code> package:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>func</span> (<span>f</span> <span>*</span><span>fmt</span>) <span>fmtInteger</span>(<span>u</span> <span>uint64</span>, <span>base</span> <span>int</span>, <span>isSigned</span> <span>bool</span>, <span>verb</span> <span>rune</span>, <span>digits</span> <span>string</span>) {
</span></span><span><span>	<span>// (... bunch of code here ...)
</span></span></span><span><span><span></span>
</span></span><span><span>	<span>switch</span> <span>base</span> {
</span></span><span><span>	<span>case</span> <span>10</span>:
</span></span><span><span>		<span>for</span> <span>u</span> <span>&gt;=</span> <span>10</span> {
</span></span><span><span>			<span>i</span><span>--</span>
</span></span><span><span>			<span>next</span> <span>:=</span> <span>u</span> <span>/</span> <span>10</span>
</span></span><span><span>			<span>buf</span>[<span>i</span>] = byte(<span>'0'</span> <span>+</span> <span>u</span> <span>-</span> <span>next</span><span>*</span><span>10</span>)
</span></span><span><span>			<span>u</span> = <span>next</span>
</span></span><span><span>		}
</span></span><span><span>
</span></span><span><span>	<span>// (... bunch of code here ...)
</span></span></span><span><span><span></span>}
</span></span></code></pre></div><p>Look at how TinyGo is generating the LLVM IR code for that:</p>
<pre tabindex="0"><code>!875 = !DIFile(filename: "format.go", directory: "/usr/local/go/src/fmt")
!15696 = !DILocalVariable(name: "next", scope: !15679, file: !875, line: 243, type: !373)

; (...)

lookup.next:                                      ; preds = %for.body
  %31 = udiv i64 %27, 10, !dbg !15759
    #dbg_value(i64 %31, !15696, !DIExpression(), !15757)
  %.neg = mul i64 %31, 246, !dbg !15760
  %32 = add i64 %27, 48, !dbg !15761
  %33 = add i64 %32, %.neg, !dbg !15762
  %34 = trunc i64 %33 to i8, !dbg !15763
  %35 = getelementptr inbounds i8, ptr %.pn75, i32 %30, !dbg !15758
  store i8 %34, ptr %35, align 1, !dbg !15758
    #dbg_value(i64 %31, !15696, !DIExpression(), !15764)
    #dbg_value(i64 %31, !15684, !DIExpression(), !15765)
  br label %for.loop, !dbg !15700
</code></pre><figcaption>
  Hopefully this is the right section of the code lol
</figcaption>
<p>Which all seems just fine. Looking deeper into it, there’s this specific thing: <code>udiv i64 %27, 10</code> - this is a unsigned division of a 64bit integer by 10. Keep that 64bit part in mind.</p>
<p>This generates the following MIPS assembly code:</p>
<div><pre tabindex="0"><code data-lang="asm"><span><span>.LBB139_23:                             <span># %lookup.next
</span></span></span><span><span><span></span>                                        <span>#   in Loop: Header=BB139_19 Depth=1
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:i &lt;- [DW_OP_plus_uconst 176] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:u &lt;- [DW_OP_plus_uconst 184] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:negative &lt;- [DW_OP_plus_uconst 332] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:digits &lt;- [DW_OP_LLVM_fragment 32 32] 17
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:base &lt;- [DW_OP_plus_uconst 316] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:verb &lt;- [DW_OP_plus_uconst 312] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:digits &lt;- [DW_OP_plus_uconst 308, DW_OP_LLVM_fragment 0 32] [$sp+0]
</span></span></span><span><span><span></span>	<span>.loc</span>	<span>129</span> <span>0</span> <span>7</span> <span>is_stmt</span> <span>0</span>               <span># format.go:0:7
</span></span></span><span><span><span></span>	<span>lw</span>	<span>$1</span>, <span>176</span>(<span>$sp</span>)                    <span># 4-byte Folded Reload
</span></span></span><span><span><span></span>	<span>lw</span>	<span>$4</span>, <span>272</span>(<span>$sp</span>)                    <span># 4-byte Folded Reload
</span></span></span><span><span><span></span>	<span>ld</span>	<span>$3</span>, <span>184</span>(<span>$sp</span>)                    <span># 8-byte Folded Reload
</span></span></span><span><span><span></span>	<span>daddiu</span>	<span>$2</span>, <span>$zero</span>, <span>10</span>
</span></span><span><span>	<span>.loc</span>	<span>129</span> <span>243</span> <span>14</span> <span>is_stmt</span> <span>1</span>            <span># format.go:243:14
</span></span></span><span><span><span></span>	<span>ddivu</span>	<span>$zero</span>, <span>$3</span>, <span>$2</span>
</span></span><span><span>	<span>teq</span>	<span>$2</span>, <span>$zero</span>, <span>7</span>
</span></span><span><span>	<span>mflo</span>	<span>$2</span>
</span></span></code></pre></div><p>Let’s ignore most of this and focus on one specific thing: <code>ddivu $zero, $3, $2</code>. Looks correct, right?</p>
<p>Well… let’s look into how PCSX2 loads this:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-8.png"><figcaption>
      ??????
    </figcaption>
</figure>
<p>Yep. PCSX2 doesn’t see the <code>DDIVU</code> instruction. Or, more specifically, <em>the PlayStation</em>  doesn’t see it.</p>



<p>The <code>DDIVU</code> (doubleword divide unsigned) is a instruction defined in MIPS-III (<a href="https://www.cs.cmu.edu/afs/cs/academic/class/15740-f97/public/doc/mips-isa.pdf">source</a>) responsible for doing the division of 2 unsigned 64bit integers.</p>
<p>However, that doesn’t work in the PS2, as we saw before. You see, the <code>DDIVU</code> instruction is not defined (<a href="https://psi-rockin.github.io/ps2tek/">source</a>) in the PS2 MIPS instruction set - only <code>DIVU</code> is. This introduces a major problem, as now all <code>int64</code> (with <code>DDIV</code>) and <code>uint64</code> (with <code>DDIVU</code>) divisions won’t execute - or will execute incorrectly if it ends up matching some other instruction. We need to avoid that, and either split this division inside the Go compiler in a way that would not do the 64bit version of it, or modify the LLVM so that it won’t use this instruction, even on a <code>mips3</code> CPU. Or maybe we can implement a custom CPU inside the LLVM - the <code>r5900</code>, like ps2dev’s GCC.</p>
<h3 id="finding-a-way-out">Finding a way out</h3>
<p>My first thought was “oh, let’s adapt this in the LLVM”. But, and I’m not gonna lie to you, changing that code is <em>hell</em>. It’s very complex and requires a ton of changes and most of the time it even requires full rebuild of the LLVM project. I’m just too lazy for that. So I’ve opted for the terrible approach of doing this inside TinyGo’s compiler.</p>
<p>The first step is to <em>have</em> a 64bit division code. According to my good friend ChatGPT (<em>who has never been wrong before /s</em>), whenever 64bit division is not available (like in the R5900), GCC uses an auxiliary function called <code>__udivdi3</code>:</p>
<pre tabindex="0"><code>uint64_t __udivdi3(uint64_t a, uint64_t b);
</code></pre><p>So my thought was: oh, I can just map the uint64 division to this then. The first step is to add this as something that is available on our <code>runtime_ps2.go</code> (because I’m too lazy to do the full proper call):</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//go:build ps2
</span></span></span><span><span><span></span>
</span></span><span><span><span>package</span> <span>runtime</span>
</span></span><span><span>
</span></span><span><span><span>/*
</span></span></span><span><span><span>extern long __divdi3(long a, long b);
</span></span></span><span><span><span>extern unsigned long __udivdi3 (unsigned long a, unsigned long b);
</span></span></span><span><span><span>extern long __moddi3(long a, long b);
</span></span></span><span><span><span>extern unsigned long __umoddi3(unsigned long a, unsigned long b);
</span></span></span><span><span><span>*/</span>
</span></span><span><span><span>import</span> <span>"C"</span>
</span></span><span><span>
</span></span><span><span><span>func</span> <span>int64div</span>(<span>a</span>, <span>b</span> <span>int64</span>) <span>int64</span> {
</span></span><span><span>	<span>return</span> int64(<span>C</span>.<span>__divdi3</span>(<span>C</span>.<span>long</span>(<span>a</span>), <span>C</span>.<span>long</span>(<span>b</span>)))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>uint64div</span>(<span>a</span>, <span>b</span> <span>uint64</span>) <span>uint64</span> {
</span></span><span><span>	<span>return</span> uint64(<span>C</span>.<span>__udivdi3</span>(<span>C</span>.<span>ulong</span>(<span>a</span>), <span>C</span>.<span>ulong</span>(<span>b</span>)))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>int64mod</span>(<span>a</span>, <span>b</span> <span>int64</span>) <span>int64</span> {
</span></span><span><span>	<span>return</span> int64(<span>C</span>.<span>__moddi3</span>(<span>C</span>.<span>long</span>(<span>a</span>), <span>C</span>.<span>long</span>(<span>b</span>)))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>uint64mod</span>(<span>a</span>, <span>b</span> <span>uint64</span>) <span>uint64</span> {
</span></span><span><span>	<span>return</span> uint64(<span>C</span>.<span>__umoddi3</span>(<span>C</span>.<span>ulong</span>(<span>a</span>), <span>C</span>.<span>ulong</span>(<span>b</span>)))
</span></span><span><span>}
</span></span></code></pre></div><p>Then, we need to modify TinyGo’s compiler to use it. That is simpler than it sounds - <a href="https://github.com/tinygo-org/tinygo/blob/3e60eeb368f25f237a512e7553fd6d70f36dc74c/compiler/compiler.go#L2514-L2566">it’s all handled here</a>.</p>
<p>Let’s start with the unsigned operations:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>if</span> <span>op</span> <span>==</span> <span>token</span>.<span>QUO</span> {
</span></span><span><span>	<span>return</span> <span>b</span>.<span>CreateUDiv</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>} <span>else</span> {
</span></span><span><span>	<span>return</span> <span>b</span>.<span>CreateURem</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>}
</span></span></code></pre></div><p>will then become:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>if</span> <span>op</span> <span>==</span> <span>token</span>.<span>QUO</span> {
</span></span><span><span>	<span>if</span> (<span>x</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>x</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) <span>||</span>
</span></span><span><span>		(<span>y</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>y</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>createRuntimeCall</span>(<span>"uint64div"</span>, []<span>llvm</span>.<span>Value</span>{<span>x</span>, <span>y</span>}, <span>""</span>), <span>nil</span>
</span></span><span><span>	} <span>else</span> {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>CreateUDiv</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>	}
</span></span><span><span>} <span>else</span> {
</span></span><span><span>	<span>if</span> (<span>x</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>x</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) <span>||</span>
</span></span><span><span>		(<span>y</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>y</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>createRuntimeCall</span>(<span>"uint64mod"</span>, []<span>llvm</span>.<span>Value</span>{<span>x</span>, <span>y</span>}, <span>""</span>), <span>nil</span>
</span></span><span><span>	} <span>else</span> {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>CreateURem</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>	}
</span></span><span><span>}
</span></span></code></pre></div><p>Then we just rebuild the TinyGo’s compiler with a <code>make</code>, and rebuild our application. Let’s retest our previous code:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-11.png"><figcaption>
      Fuck yeah!
    </figcaption>
</figure>
<p>And for our <code>int64</code> operations as well please. From the following code:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>if</span> <span>op</span> <span>==</span> <span>token</span>.<span>QUO</span> {
</span></span><span><span>	<span>return</span> <span>b</span>.<span>CreateSDiv</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>} <span>else</span> {
</span></span><span><span>	<span>return</span> <span>b</span>.<span>CreateSRem</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>}
</span></span></code></pre></div><p>we adapt it into this:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>if</span> <span>op</span> <span>==</span> <span>token</span>.<span>QUO</span> {
</span></span><span><span>	<span>if</span> (<span>x</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>x</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) <span>||</span>
</span></span><span><span>		(<span>y</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>y</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>createRuntimeCall</span>(<span>"int64div"</span>, []<span>llvm</span>.<span>Value</span>{<span>x</span>, <span>y</span>}, <span>""</span>), <span>nil</span>
</span></span><span><span>	} <span>else</span> {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>CreateSDiv</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>	}
</span></span><span><span>} <span>else</span> {
</span></span><span><span>	<span>if</span> (<span>x</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>x</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) <span>||</span>
</span></span><span><span>		(<span>y</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>y</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>createRuntimeCall</span>(<span>"int64mod"</span>, []<span>llvm</span>.<span>Value</span>{<span>x</span>, <span>y</span>}, <span>""</span>), <span>nil</span>
</span></span><span><span>	} <span>else</span> {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>CreateSRem</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>	}
</span></span><span><span>}
</span></span></code></pre></div><p>Finally, we can test our changes by doing this:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>debug</span>.<span>Printf</span>(<span>"\n\n"</span>)
</span></span><span><span><span>for</span> <span>i</span> <span>:=</span> int64(<span>-</span><span>8</span>); <span>i</span> <span>&lt;=</span> <span>8</span>; <span>i</span><span>++</span> {
</span></span><span><span>	<span>debug</span>.<span>Printf</span>(<span>"%02d | div02 = %02d | mod04 = %02d\n"</span>, <span>i</span>, <span>i</span><span>/</span><span>2</span>, <span>i</span><span>%</span><span>4</span>)
</span></span><span><span>}
</span></span></code></pre></div><figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-12.png">
</figure>
<p>And with that, we’re done for the 64bit integer problem! Yey!</p>
<blockquote>
<p>Yes, I know, there might be other instructions that are not implemented. Not looking into this now for sure. Also, yes, I didn’t get big-ass numbers, but also I don’t need them now.</p>
</blockquote>
<blockquote>
<p>Spoiler: not doing this on the LLVM level will bite our asses in the future.</p>
</blockquote>
<h2 id="what-now">What now?</h2>
<p>Well, now we need to keep pushing forward! But I need to stop this post at some point so that people can catch up with this project, and also so I can publish these findings. But there’s a lot still to get done:</p>
<ul>
<li>Target-specific things, such as syscalls, inline assembly and interrupt support</li>
<li>Floating points as they are non-functional at the moment</li>
<li>New LLVM MIPS CPU - yes, we’ll probably need that, plus this way we can avoid hacking code inside TinyGo’s compiler</li>
<li>Everything else we want!</li>
</ul>
<p>You may be wondering, “what can I do with it <em>now</em>”? Well, you can do whatever you want, actually. You can call ps2dev’s libraries and play with them, and if something fails, you can just call C code from Go. But your code will be running from the Go side of things first, which is pretty neat in my opinion - even if a bit limited for now.</p>
<p>I’m already working on the next part of this project though, so stay tuned! See you around!</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-13.png"><figcaption>
      👋
    </figcaption>
</figure>
<ul>
  
   <li>
     <a href="https://rgsilva.com/tags/coding/">Coding</a>
   </li>
  
   <li>
     <a href="https://rgsilva.com/tags/embedded/">Embedded</a>
   </li>
  
   <li>
     <a href="https://rgsilva.com/tags/go/">Go</a>
   </li>
  
</ul>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I genuinely don't understand why some people are still bullish about LLMs (386 pts)]]></title>
            <link>https://twitter.com/skdh/status/1905132853672784121</link>
            <guid>43498338</guid>
            <pubDate>Thu, 27 Mar 2025 21:22:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/skdh/status/1905132853672784121">https://twitter.com/skdh/status/1905132853672784121</a>, See on <a href="https://news.ycombinator.com/item?id=43498338">Hacker News</a></p>
Couldn't get https://twitter.com/skdh/status/1905132853672784121: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Take this on-call rotation and shove it (161 pts)]]></title>
            <link>https://www.scottsmitelli.com/articles/take-oncall-and-shove-it/</link>
            <guid>43498213</guid>
            <pubDate>Thu, 27 Mar 2025 21:09:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.scottsmitelli.com/articles/take-oncall-and-shove-it/">https://www.scottsmitelli.com/articles/take-oncall-and-shove-it/</a>, See on <a href="https://news.ycombinator.com/item?id=43498213">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><p>The familiar blue and gold intro graphic fills the screen every evening at six o’clock on the dot. The jabbing staccato string music conjures up vague secondhand memories of what a teletype machine might have sounded like. A high angle view of the studio floor with the large Lexan-clad desk in the middle, then a cross dissolve to a two shot of the presenters for this newscast. The music fades, each person introduces themselves, then they jump straight into the top story for the evening. It’s been this way for as long as anybody can remember. They’ve never failed to get this show on the air.</p><p><em>They’ve never failed.</em></p><h2 id="who-you-gonna-call">Who you gonna call?<a href="#who-you-gonna-call" title="Permalink - Who you gonna call?"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>Everything fails all the time.</p></blockquote><p>Producing any sort of live television show is a complex ballet. The studio’s cameras and microphones route their signals into video switchers and audio mixers, pre-taped packages come from the video server, field reporters are connected bidirectionally through a satellite link, and with a sprinkling of pizazz from the motion graphics machine, the final product is sent off to master control and ultimately to all the kitchen counters and family rooms across the city.</p><p>But there are ancillary systems outside of this direct pipeline. The studio lighting is quite important, as most professional broadcast cameras tend to produce underwhelming images under inadequate light. The teleprompters feeding the anchors their scripts are obviously important. The weather reporting segments use an entirely separate system of graphics rendering equipment that must be linked through a chroma keyer to place the meteorologist in front of the computer-generated forecast images. And quite obviously, this equipment requires a handful of human operators.</p><p>Studio-grade equipment is obscenely expensive, but it is also incredibly reliable. It is rare for things to outright fail, but anything can eventually wear out after enough daily use. If a camera fails, perhaps they can wheel the one from the sports desk over to cover this part of the broadcast. If the teleprompters fail, the anchors have a copy of the script at their desk that they can look down at. If one of the anchors calls out sick, they can sub in talent from the morning news team.</p><p>Each of these is an example of either a redundant backup system or spare capacity that can be reallocated if needed. The broadcast technically does not need any of these contingencies to function under normal circumstances, but in cases where things go wrong it can mean the difference between success and total failure.</p><p>Not everything can be made completely redundant. A failure in the power system for the lights will most likely plunge the entire studio into darkness, and that’s no way to run a news program. Similarly, if the $50,000 video switcher dies, it’s highly unlikely that they’ll have a spare holed up in the supply closet. To insure against every possible thing that could ever go wrong, they would have to build a second studio on a separate part of the city’s electric grid, with redundant copies of all the equipment and broadcast content, along with a full crew of understudies ready to take over at a moment’s notice. This is a degree of redundancy that can’t reasonably be achieved by any budget-conscious station.</p><p>There is a hybrid between the two options, allowing the station to only maintain a single instance of anything expensive while having some assurance that the equipment they do have will work when needed: They can find an expert of some sort who is capable of fixing anything that breaks well enough to get the broadcast out. We’ll name this person Alex. If the microphone battery dies, Alex will swap it out. If the video server acts up, Alex knows how to get it working again. If the tire pressure light in the Chevrolet Weather Beast comes on, or the studio’s air conditioning fails, or the technical director breaks both their hands and needs somebody to push the buttons on their behalf, it’s Alex’s time to shine.</p><p>Now, naturally, most of the time everything is going fine and Alex has nothing to do. So Alex has some other regular job in the studio—say running the audio mixer. In fact, the audio mixer thing is their official job title and their primary responsibility at the station; they only jump into universal-problem-solving mode when something goes wrong. As soon as the problem is resolved, it’s back to the audio mixer.</p><p>The other thing about all this is, well, it’s very difficult to find and train people like Alex. So since they are at the station all evening anyway, why not also have them stick around in case anything goes wrong during the 7:00 news, and 11:00? And if anything happens during the 4:30–7 a.m. news, the station can call Alex at home and have them bop over and fix the problem. Oh, and also the news at noon, and the 4 p.m. block. <label for="_margin-note:0"></label><mark> Apparently this station broadcasts six hours of live news programming most days. At least it’s only four hours on Sunday.</mark> In the station’s view, there is no need for anybody to relieve Alex because—most of the time—they never need Alex’s emergency response skills at all. There should be no need to hire and train somebody else to do this stuff because they barely use the services of the person they already have.</p><p>There is, of course, another option that the station has never seriously entertained: Don’t hold Alex to any of those responsibilities at all, and if things really go to hell they can just throw on an old <em>The Price Is Right</em> rerun and hope for better luck during the next scheduled newscast.</p><h2 id="grandpa-whats-a-beeper">Grandpa, what’s a beeper?<a href="#grandpa-whats-a-beeper" title="Permalink - Grandpa, what’s a beeper?"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>1-800-759-7243<br>But if you ain’t got that pin number, dummy, you can’t call me<br>To hook up with Mix you gotta call that number<br>Then sit by the phone and wonder<br>Will he call? If you’re fine I might<br>If you’re a duck, good night</p></blockquote><p>There was a time—not that long ago, really—where people couldn’t contact you if they didn’t know where you were. Telephones were literally screwed into the walls of houses and businesses. Portable two way radios existed, but they were a massive pain to carry around and operate. If somebody wished to contact you, they would not call <em>you</em> specifically but rather <em>your house</em> or <em>your workplace</em>, places where you might or might not have been at the time. If you were not there, maybe they’d try to call your brother’s house, your favorite bar, the Kiwanis club, or another location that was significant to you. If they still couldn’t find you, eventually they’d give up. People used to be more chill in that way.</p><p>In a more structured environment—say a hospital where doctors moved from room to room but stayed inside one building—it was important to be able to get in touch with a specific person without knowing which room they were in. To accomplish this, a phone operator would <strong>page</strong> <label for="_margin-note:1"></label><mark> This verb form of the word “page” uses the same sense as the noun “page,” an old-timey word meaning roughly “servant boy.” I page you in the sense that I am asking <a href="https://en.wikipedia.org/wiki/Kenneth_Parcell" rel="external" data-link-id="wiki-kenneth-parcell">Kenneth, the NBC page from <em>30 Rock</em></a> to send for you.</mark> the desired person via an announcement over the building’s public address speakers: “Paging Dr. Johnson, Dr. Johnson, please call fourth floor nurse station.” Assuming Dr. Johnson was in the building to hear this, they would find a phone and call the station as instructed.</p><p>This worked fine, but it generated a lot of “useless” noise because most of the staff were uninvolved in most of the pages they overheard. Thanks to incremental improvements in technology, the voice announcements were phased out to make way for unidirectional radio broadcasts that covered the entire building. The content of the radio message remained the same as the audible announcement: who the page was for, and who that person needed to contact in response. Each person who needed to receive pages was given a <strong>pager</strong>, a radio receiver that was pre-programmed to only activate in response to pages specifically addressed to it. Each pager contained a small numeric display where the information about who to call could be shown. These were colloquially called <strong>beepers</strong> because, well, they made a beeping sound to announce each incoming page.</p><p>To send a page, a person would pick up one of the building’s telephones and dial the number for the paging system. They would be prompted to enter the recipient’s PIN or unique identification code along with a callback number. If the sender wanted the recipient to call them directly, the callback number would be a phone that the sender was ready to pick up. It didn’t have to be, though. For example, the sender and recipient could have a prearranged system in which a code like “505” could be interpreted as the distress signal SOS with some mutually understood meaning. <label for="_margin-note:2"></label><mark> These codes were more common from senders that the recipient knew well, representing messages they frequently needed to exchange. To a building maintenance worker, “234” could indicate an emergency at 234 Maple Avenue while “5300” could have been 5300 Elm Street. The codes meant what the sender and recipient agreed they meant.</mark></p><p>Technology got better. Things got smaller and faster. The unidirectional pager networks started becoming overshadowed by mobile phone networks which soon gained the ability to send bidirectional SMS messages. Microprocessors advanced to the point where a battery-operated handheld device could serve as a phone that could also send and receive text messages. These advances made it possible to send longer messages using a more expressive character set on a device that also did other things.<label for="_margin-note:3"></label><mark> My very first mobile phone could run a game of Snake that objectively blew. But the capabilities were there.</mark> Phones continued to gain capabilities, the networks they ran on continued to get faster with wider coverage, but the central thread of “I need to get <em>this</em> message to <em>that</em> device” is as clear today as it was when Sir Mix-A-Lot was courting his lady friends in the 1980s.</p><p>Also, the systems described up to this point had one thing in common: The person sending the page was a human being.</p><h2 id="getting-on-the-same-page">Getting on the same page<a href="#getting-on-the-same-page" title="Permalink - Getting on the same page"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p><strong>Dude:</strong> They gave Dude a beeper, so whenever these guys call—</p><p><strong>Walter:</strong> What if it’s during a game?</p><p><strong>Dude:</strong> Oh, I told them if it was during league play…</p><p><strong>Donny:</strong> What’s during league play?</p><p><strong>Walter:</strong> Life does not stop and start at your convenience, you miserable piece of shit.</p></blockquote><p>Like a disheartening number of things in the tech industry, there are no real standards around what <strong>on-call</strong> responsibilities look like. Each organization<label for="_margin-note:4"></label><mark> And each team within!</mark> is free to set things up in whichever way suits their tastes, and the resulting practices vary widely as a result. In order to ground this article in something concrete, I will describe Alex’s on-call arrangement, which seems to be typical for US companies whose business model is “Have a website and/or mobile app, and either put ads all over it or convince the users to enter their credit card information somewhere to use it.” The prevailing attitude of these organizations is that the product must work at all times, otherwise it results in failure to show an ad or collect a payment. Both of these negatively affect revenue.</p><p>Alex’s company uses the <strong>SEV</strong> system, which might<label for="_margin-note:5"></label><mark> Again, no standards. Somebody copied part of the philosophy from Amazon or Facebook or someplace but never bothered to codify exactly what the abbreviation meant to them.</mark> mean “<strong>sev</strong>erity,” “<strong>s</strong>ite <strong>ev</strong>ent,” “<strong>s</strong>ignificant <strong>ev</strong>ent,” “<strong>s</strong>erious <strong>ev</strong>ent,” or anything else you might care to contrive that matches the pattern. SEVs are further divided into numbered classes depending on their impact on the product experience; a SEV 1 means that the business is currently failing to be a business because it is unable to perform its core functions and/or collect its revenue. The lesser SEV 3 might represent degraded performance on some non-critical portion of the application. <label for="_margin-note:6"></label><mark> An example of a SEV 3 might be a situation where users can still change their profile pictures, but those changes are not showing up promptly in the app due to some kind of processing delay. This will <em>probably</em> not impact the quarterly financial statement in a measurable way. An instance of a SEV 1, on the other hand, might entail the mobile app showing a perpetual loading spinner on every request to every user at once. That type of thing tends to get noticed.</mark></p><p>Below the SEV system, there is a bubbling churn of things that are subtly broken, or are well on the way to someday being definitely broken, but are fine for the time being. A good example of this would be a disk that is 98% full. In its current state, nothing is actually wrong. But once it finally becomes 100% full and cannot accept any more data, something else in the system is going to respond poorly and this can likely cascade into some kind of SEV. Most systems in most organizations have monitoring in place for this sort of thing, and it is common for an on-call engineer to receive pages due to (e.g.) high disk usage to investigate specifically to avoid a potential SEV in the future. Practically all pages of this nature are generated and sent through automated means, and these pages can sometimes resolve themselves without outside intervention if (e.g.) the disk usage abates naturally.</p><p>The on-call engineer in Alex’s department is selected out of a <strong>rotation</strong> of all the team members. The on-call <strong>shift</strong> is seven consecutive days of 24-hour support, or 168 solid hours.<label for="_margin-note:7"></label><mark> ±1 hour depending on how daylight saving time shakes out.</mark> The on-call engineer does not need to stay awake for seven straight days; the idea is that they’re supposed to work on typical tasks during business hours and go about their non-work lives as usual, but be able to jump into handling an issue quickly after receiving any page at any time. The “quickly” part is formally defined as <strong>time to acknowledge</strong>, and durations from 5 to 30 minutes are fairly typical. Alex’s team expects pages to be acknowledged within 15 minutes.</p><p>If a page is not acknowledged by the on-call engineer, a system of <strong>escalation</strong> begins. The escalation policy usually follows one of these patterns:</p><ul><li>If there is only a single on-call engineer, the page may escalate to them again. This re-raises the original alert in case it was somehow missed the first time.</li><li>In a “primary/secondary” type of arrangement, there are actually two people on-call at any given moment. All pages go to the primary, and only unacknowledged pages escalate to the secondary. If the secondary doesn’t acknowledge the page either, it may escalate further as described by the other bullet points here.</li><li>In a “hunt group” configuration, an unacknowledged page is sent to every member of the team—none of whom are officially on-call at the moment—in the hopes that one of them is free to acknowledge and handle the issue. This arrangement has a strong tendency to break down into one of two degenerate states:<ol><li>One or a few people naturally become highly responsive to all pages, acknowledging them before most of their teammates have the opportunity to do so. Over time, most of the team members stop paying attention to pages and leave their highly-responsive peers to handle everything that comes in.</li><li>Something very close to the <a href="https://en.wikipedia.org/wiki/Bystander_effect" rel="external" data-link-id="wiki-bystander-effect">bystander effect</a> occurs, where everybody in the group assumes somebody else will acknowledge the page, and ultimately nobody steps up to do it. This deadlock is broken when somebody (perhaps a team lead or supervisor) tags a specific team member and tasks them with taking ownership of the issue.</li></ol></li></ul><p>In each of the setups described above, the team’s manager may or may not be part of the escalation chain. If they are, it adds a whole new layer to the on-call calculus: Nobody wants their unacknowledged pages to end up notifying their manager, especially outside of working hours. Alex’s team uses the “single on-call engineer” model with escalation to the manager.</p><p>On-call shifts occur one week out of every <em>N</em> weeks, where <em>N</em> is the number of people on the team. <label for="_margin-note:9"></label><mark> For primary/secondary arrangements, the shift frequency is <em>two</em> weeks out of <em>N</em>, even though one of those weeks will ideally see few or zero pages. Still, the secondary must remain fully available during that time.</mark> If there are fifteen people on a team, each person will barely need to cover one shift per quarter. On a team of two, each person is on-call <em>every other week.</em> This is a substantial source of variability, and it can change suddenly as team members go on vacation, take personal leave, or part ways with the team or company. Alex works in a department of four, resulting in an on-call shift approximately once a month.</p><p>Sometimes life interferes with on-call scheduling, and for those times there is usually a mechanism for team members to trade partial or complete on-call shifts between themselves. If the active on-call engineer needs a few uninterrupted hours to attend a family function or unavoidable appointment, they can seek out a peer who is willing to cover the responsibility for that time. At some future date, the favor can be reciprocated when that other person is on-call and needs somebody to cover for them.</p><p>When an engineer receives a page and needs to do unplanned work in response to it, that work is called on-call <strong>load</strong>. Each organization has an expected amount of on-call load for each shift. Or rather, they’re <em>supposed</em> to, but it’s not surprising to find places that have never given the idea any serious thought. If an excessive number of issues occur and the load exceeds the expectations for the shift, it becomes on-call <strong>pain</strong>.<label for="_margin-note:10"></label><mark> <a href="https://reviews.pagerduty.com/definitions/" rel="external" data-link-id="pagerduty-definitions">True fact.</a> Why would I make that up?</mark> Pages that occur outside of regular working hours are considered more painful than those that occur during weekdays.</p><p>As far as what the on-call engineer needs to do during <strong>incident response</strong>—the time between acknowledging a page and resolving the issue that caused it—this is another area of huge variance. Sometimes they’ll need to log into some web UI and click one button. Sometimes they’ll spend ten straight hours trying to resuscitate a completely inaccessible product. <label for="_margin-note:11"></label><mark> A team may experience both ends of the load spectrum from one week to another just by luck of the draw.</mark></p><p>Occasionally the on-call engineer will be faced with a situation that is objectively unfixable. Sometimes <a href="https://aws.amazon.com/message/41926/" rel="external" data-link-id="aws-2017-outage">a critical piece of AWS’s entire us-east-1 region fails</a>, ultimately hobbling a significant chunk of the internet along with it. Sometimes <a href="https://www.datacenterknowledge.com/security-and-risk-management/after-sandy-datagram-recovers-from-apocalyptic-flood" rel="external" data-link-id="datacenterknowledge-after-sandy">33 Whitehall loses generator power</a> after Superstorm Sandy drowns its fuel pumps in seawater. Alex’s company has worked very hard to cut down on operational costs by farming out a bit too much of its core functionality to a third party with bad customer support turnaround times, whose outages then become Alex’s outages by proxy. In instances like these, sometimes the on-call engineer just has to throw up their hands in defeat. Other than simply waiting out the problem, the only other feasible option would be to undertake some over-ambitions migration to an entirely different provider. That’s not something that anybody can do in any kind of reasonable time frame, and doing it under the duress of a service outage would be unwise at best. At a certain point, the best Alex can do is turn on <em>The Price Is Right</em> and wait for things to blow over.</p><p>Now, obviously, on-call duty is by no means a job requirement that is specific to the tech industry. Doctors and surgeons can be on-call. The building superintendent for an apartment complex can be on-call. The guy who fixes air conditioners can be on-call. The difference is that the people in those industries are fairly compensated for doing it.</p><h2 id="wait-you-guys-are-getting-paid">Wait, you guys are getting paid?<a href="#wait-you-guys-are-getting-paid" title="Permalink - Wait, you guys are getting paid?"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>Work work work, day after day<br>Fifty hour week, forty hour pay<br>No time to get over all this overtime<br>Yeah I’m always runnin’, but I’m always runnin’ behind</p></blockquote><p>There are ways of looking at employee wages in the US that are elegantly simple. An employee is hired at a rate of $<em>X</em>/hour, they work for <em>Y</em> hours in a week, and the total pay is the product of those two numbers. There is a minimum wage at the federal and possibly state level that sets the smallest legal amount for $<em>X</em>. The employee should work a maximum <em>Y</em> of 40 hours in that week, otherwise they enter an <strong>overtime</strong> situation where their hourly $<em>X</em> becomes $<em>X</em> and a half. Those highfalutin white collar workers are basically the same, except their <em>Y</em> is fixed at 40 hours regardless of the time actually worked so their total pay stays the same week after week. That’s how it all works, right?</p><p>This is the system laid out in the <strong><a href="https://en.wikipedia.org/wiki/Fair_Labor_Standards_Act_of_1938" rel="external" data-link-id="wiki-fair-labor-standards-act">Fair Labor Standards Act of 1938</a></strong> (FLSA) and its many amendments. This is the law that underpins concepts like minimum wage, overtime, the 40-hour work week, and the notion that child labor probably isn’t such a good thing to do. It also defines a set of <strong>exemptions</strong> to the rules, thus creating the concept of an <strong>exempt employee</strong>. If you are a US-based tech worker in a full-time position, I’m going to take a stab in the dark and assume that you are almost certainly classified as an exempt employee. This means that the FLSA’s protections <em>effectively do not exist for you.</em> You are not guaranteed overtime, and you could conceivably work so many hours over the course of a week that your effective hourly rate ends up less than minimum wage. <label for="_margin-note:15"></label><mark> Now I’m wondering if an employer could get away with hiring child labor by classifying them as exempt employees. I would guess not, or somebody out there would be doing it right now.</mark></p><p>The FLSA is designed with repetitive and predictable work in mind: Somebody who works on an assembly line, or who moves boxes around in a warehouse, drivers and couriers, et cetera. Workers in these sorts of jobs have a tendency to produce a similar and predictable amount of work in any given hour. Drop in on them during one hour of the workday and you’ll observe roughly the same level of productivity that you would find from them at any other hour.</p><p>Employees who are exempt from the FLSA tend to have variability in their workday. The original thinking was that this would apply to executives and highly-skilled professionals who performed such a wide range of tasks throughout the day that some hours were markedly more valuable than others. These sensibilities changed and eventually morphed into “white collar jobs that paid a lot.” The current regulations specifically list <a href="https://www.dol.gov/agencies/whd/fact-sheets/17e-overtime-computer" rel="external" data-link-id="dol-17e-overtime-computer">computer-related occupations</a> in their list of exempted fields. And from a certain angle, if you really squint, it makes sense! Think of hours where you have pounded out hundreds of lines of code, then compare it to hours where you sat in a conference room staring at a blinking text insertion cursor instead of paying attention to the presenter. Sometimes you’ll make no progress towards a thorny challenge during the course of an entire workday, which might be completely offset by a single spark of creative inspiration while washing the dishes later that night.</p><p>All this to say, there is nothing in the regulations of the United States that can protect Alex from working more than 40 hours in a week. There is no requirement that overtime be paid to them. If the work requires more than 40 hours in a week, oh well, sucks to be Alex. <label for="_margin-note:17"></label><mark> This means that technically Alex could work fewer than 40 hours by applying the same logic, assuming they get all their necessary work done. They have been meaning to work up the nerve to try to pull that one day.</mark></p><p>So. With that bit of background out of the way, it’s clear that there is no legal or regulatory requirement for an employer to pay anything for performing on-call duties as long as the responsibility is given to an exempt employee. Based on my own experiences and informal polling of others in the industry, the prevailing attitude is that on-call is part of the job description and “baked in” with the total compensation. It’s not at all unusual to find on-call shifts that receive no additional payment or consideration for carrying the pager. There is also usually nothing extra paid for responding to a page that occurs outside of regular working hours.</p><p>And again, there are no absolute rules about this. Some places actually do pay a modest honorarium for each on-call shift worked. Some will provide “unofficial” compensatory time<label for="_margin-note:18"></label><mark> And if your employer gives comp time, a small question for you: Do they <em>also</em> reduce the amount of sprint story points they expect you to work through when you take it?</mark> to balance out a page handled outside of typical business hours. Legends are told of organizations where the teams are staffed adequately and the systems simply don’t page. Just imagine a magical place where a person is only on-call for like three weeks a year, and who never gets paged during those times. Alex, who once spent an entire summer being on-call every other week while occasionally fielding a dozen pages in the span of a single day, cannot.</p><p>Most places won’t even provide a phone or subsidize a mobile carrier bill, nor will they provide a company-paid mobile hotspot for laptop tethering purposes. It’s just assumed that you’ll happily install PagerDuty or Opsgenie or some other hateful app that violates the sanctity of your personal device, right there on the home screen next to Okta Verify.<label for="_margin-note:19"></label><mark> A brief tangent: Fuck Okta Verify.</mark> Your personal phone becomes your pager, the thing that pulls you out of leisure time and into work time. After a while, you might start to notice on-call beginning to fundamentally change your relationship with the device.</p><p>The absolute largest source of variability comes from a team’s willingness to improve the on-call situation as opposed to simply accepting that things are the way they’re meant to be. Some teams view every page—no matter how trivial—as a signal that something needs to be immediately fixed to prevent that specific thing from <em>ever</em> happening again. Other teams view it as something that just happens as a natural consequence of supporting a product, like a smoke detector battery chirp that everybody has learned to tune out over the course of several years. It is the manifestation of technical debt that has been boiling for years, looking for a pressure relief valve to escape through, and it just happens to keep finding its release through Alex’s pager.</p><p>Perhaps unsurprisingly, the teams that are most willing to defend against recurring pages are also the most likely to actually perform in-depth postmortems so they can write and maintain their on-call runbooks. Sometimes the runbook is the only friend an on-call engineer has, and there’s nothing more disappointing than discovering that this friend can’t help fix anything.</p><h2 id="168-long-cold-lonely-hours">168 long, cold, lonely hours<a href="#168-long-cold-lonely-hours" title="Permalink - 168 long, cold, lonely hours"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>All I wanna do all day is spend it in bed<br>But that’s bad for the body and even worse for my head<br>So I’ll try and find a place where no one will ask me a thing<br>It’ll help me to forget and help me to sing</p></blockquote><p>A page can conceivably come at any time, day or night. Alex needs to receive the alert and begin working on the issue within fifteen minutes, which means they must have a suitable work computer and sufficient internet connectivity available within that time commitment. They must remain cognizant of their phone’s signal quality and the availability of nearby Wi-Fi networks. Unless they take their bulky work laptop with them, <label for="_margin-note:20"></label><mark> By the way, not everybody lives in a perfectly idyllic area. There are plenty of places where computers get stolen from parked cars and bags get snatched. Carrying this stuff around is a <em>genuine risk</em> for people in some situations.</mark> it’s not possible to travel anywhere that takes more than a few minutes to return from.</p><p>Even certain household tasks—cutting the lawn for example—require special consideration. If a page arrives during that activity, Alex needs to put the mower away to a certain extent <label for="_margin-note:21"></label><mark> In some areas, as above, an unattended mower might get swiped. In others, it could lead to an HOA fine.</mark> before going inside to clean up enough to do knowledge work. It’s mentally taxing to jump from domestic labor to complex problem-solving, and it’s equally difficult to go back when the issue is finally resolved.</p><p>It turns out that there are many things in life that are technically compatible with an on-call shift, but which require such delicate planning and forethought that it sometimes ends up being easier to just not bother doing any of that stuff during an on-call week. No significant travel or long walks/drives, no excessive drinking or <em>*ahem*</em>, no ability to simply unplug and decompress. Even if a page never actually comes, there is always the <em>potential</em> for a page to come. Maybe the primary on-call turned off their phone without telling anybody to attend a screening of <em>Oppenheimer</em>.<label for="_margin-note:22"></label><mark> Actually happened.</mark> Maybe there’s time to quickly run to the grocery store and back, but it might be cutting it close. Maybe it’s better to just stay home until the end of the week. Park in front of the TV and run out the clock. But don’t watch anything too engrossing; getting paged right during the good part really sucks.</p><p>This has a tendency to happen eventually, even at organizations where the expected on-call load is near zero. It’s not possible to live life completely normally while staying prepared to handle any page at any time. It would perhaps be hyperbolic to compare the experience to that of being placed under house arrest, but it’s the closest a lot of us will ever get to experiencing that level of freedom-yet-confinement.</p><p>And, of course, when a page does come, it manages to find the most inopportune time to do so. Alex has been paged during nice dinners, in the middle of live entertainment, and at times that rightly should’ve been devoted to time with family members and friends. Not to mention that alert sound, and the notification box on the phone’s lock screen. Alex’s phone became a source of resentment and negative emotions to the point where they basically had to disable almost every other sound and all other notifications because their heart jumped every time one popped up. Alex won’t go as far as to say it caused PTSD, but it sure led to a fair number of the <em>symptoms</em> of PTSD.</p><p>Also, it regularly ruined my sleep. Whoops, I meant Alex’s sleep. I’m not Alex. Nope.</p><p>Sometimes pages decide to come during overnight hours. Here’s what happens when a page occurs in the middle of the night: First, if you happen to have a significant other, the alert sound invariably wakes them up before it wakes you. You get out of bed. It’s dark. It’s cold. You open your work laptop. Even at its lowest brightness setting, the 16-inch Liquid Retina XDR display lights up the room with its blinding intensity. You log into your email and Slack, open some dashboards, open Okta Verify on your phone,<label for="_margin-note:23"></label><mark> Fuck Okta Verify.</mark> and you’ve basically done everything you usually do at 9 a.m. on a regular workday. Six hours before you’re supposed to be here, you’re here. Still half asleep—no sense having any caffeine if the intention is to try to go back to bed after this is over—this is really not the right kind of headspace to be in while poking at unfamiliar and on-fire code on production systems. And since it’s the middle of the night, nobody else is here to help diagnose or double-check anything. There would be a kind of palpable loneliness here, if you had the mental acuity to notice it. Maybe you’ll manually page somebody else to come and help. Or maybe you can’t bear the thought of being the one responsible for spreading this on-call pain onto them.</p><p>Eventually the problem gets resolved one way or another. You close the laptop and try to quietly return to bed. Your significant other (if applicable) is awoken again by this. You end up lying there for a while, unable to go to sleep due to the mental exertion, the light from the computer screen, and a fair bit of leftover adrenaline. May as well just stay awake; the issue probably isn’t actually fixed and it’ll likely page again in a few minutes anyway.</p><p>Hey, you know what this sounds like? Anxiety! On-call basically causes anxiety. And if you’re a person who <em>already has</em> anxiety due to some other preexisting reason, congratulations! Now you have extra anxiety. And for what? Because some Kafka broker stopped running?</p><h2 id="we-need-to-talk-about-kafka">We need to talk about Kafka<a href="#we-need-to-talk-about-kafka" title="Permalink - We need to talk about Kafka"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>I thought that since Kafka was a system optimized for writing, using a writer’s name would make sense. I had taken a lot of lit classes in college and liked Franz Kafka. Plus the name sounded cool for an open source project.</p></blockquote><p>Jay Kreps contributed to the technology that would eventually become <strong><a href="https://kafka.apache.org/" rel="external" data-link-id="apache-kafka">Apache Kafka</a></strong> while he was working at LinkedIn. Very broadly, Kafka can be thought of as a message queue that accepts data from one side and sends it out to one or many interested parties on the other side. Unlike a typical queue it also persists this stream of messages on disk so that delivery can be deferred, batched, or even repeated at some future date. At scale, it may be tasked with handling such an immense volume of data that the operation of the system becomes a major pain in the ass.</p><p>Part of this operational difficulty is caused by the fact that Kafka runs on multiple discrete computers that must constantly cooperate with each other to behave as a single larger system.<label for="_margin-note:25"></label><mark> Much like the Borg in <em>Star Trek</em>. But Google already <a href="https://en.wikipedia.org/wiki/Borg_%28cluster_manager%29" rel="external" data-link-id="wiki-borg-cluster-manager">took that name</a>.</mark> If any of the members of the cluster of computers become disconnected or degraded, the performance and stability of the entire group is impacted. If an organization runs Kafka in production, there is a very good chance it is routinely paging somebody due to low disk space, processing lag, or other inscrutable gremlins.</p><p>The sheer quantity of data that Kafka wants to write to its disks, as alluded to in the Kreps quote above, is what led to its name. Apache Kafka writes a lot, just like author Franz Kafka did. Surely there is no reason to think any further about this.</p><p><strong>Franz Kafka</strong> created literary worlds in which unbearably absurd things happen for seemingly no reason and people are expected to simply endure them as if nothing out of the ordinary is going on. His environments only <em>partially</em> make sense, producing bureaucracies that defy any attempt at comprehension. The protagonists in his stories feel alienated and isolated. A queasy undercurrent of anxiousness and sometimes outright horror runs through his whole oeuvre. The author was likely neurotic, he destroyed approximately 90% of everything he ever wrote, then he died well ahead of when he probably should have—leaving several substantial works unfinished. In this regard, Apache Kafka shares some similarities.</p><p><em>That</em> is how you justify the project’s name. Saying “I took some literature classes in college and I thought I remembered liking them” is just intellectually lazy.</p><h2 id="important-meaningless-things--meaningful-unimportant-things">Important meaningless things / Meaningful unimportant things<a href="#important-meaningless-things--meaningful-unimportant-things" title="Permalink - Important meaningless things / Meaningful unimportant things"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p><strong>Jesse:</strong> Look, I like making cherry product, but let’s keep it real, alright? We make poison for people who don’t care. We probably have the most unpicky customers in the world.</p></blockquote><p>I am going to pose what might sound like an unthinkable question: <em>Is this important?</em></p><p>My question is sincere. Does this service or product fulfill a need so critical that there is a legitimate reason to always keep one or more human beings on-call for it? <label for="_margin-note:26"></label><mark> Or my personal favorite, usually offered by engineers trying to pull one another back into the <a href="https://en.wikipedia.org/wiki/Crab_mentality" rel="external" data-link-id="wiki-crab-mentality">crab bucket</a>, which goes something like: “Don’t you think you should be responsible for your own code that you have put into production?” The proper response to this, of course, is “What <em>my</em> code? We are a team; this is <em>our</em> code.” Or, probably a more healthy view, “This is <em>the</em> code.” The production system in question is almost certainly a schizophrenic box of compromises brought about through poor decision-making, unaddressed technical debt, design-by-committee, and impossible timelines and budgets. This is not a system that any single rational human being on the team would’ve chosen to build if permitted to do so alone. Trying to assert ownership over an environment like that is just begging to get your shit rocked.</mark> Will the business suffer a significant loss in sales due to an outage? Will they break a contractual service-level agreement (SLA) and expose themselves to legal liability if the outage exceeds a certain threshold? Will they lose the goodwill of customers if the product is unavailable for too long? Do the customers have other options if they get upset with the reliability of the product? Is it even feasible for them to switch to those competitors? Can an unaddressed issue lead to loss of life or property damage?</p><p>The answer to at least one of those questions is probably automatically “yes,” which justifies the use of any means the organization deems appropriate to avoid risks. Like an adult sternly barking “because I said so,” the conversation is supposed to end here. On-call is important because it’s important. The mere idea of questioning that axiom brings almost certain trouble, so few people dare prying further.</p><p>But it is worth prying. If there are no firm SLAs, it’s hard to justify why the “time to acknowledge” expectations are set the way they are. How much additional customer goodwill does the organization earn by adding one more <a href="https://en.wikipedia.org/wiki/High_availability#%22Nines%22" rel="external" data-link-id="wiki-high-availability-nines">nine</a> of availability? What is customer goodwill actually worth in the first place?<label for="_margin-note:28"></label><mark> Is it worth more or less than the long term mental well-being of the engineering staff and the eventual turnover incurred by burning them all out?</mark></p><p>Each of these perspectives boil down to the same thing: The business might lose money (either from uncaptured revenue or due to penalties) if somebody is not around all the time to handle any technical fault that may occur. It then follows that this person—this lowly on-call engineer—is like an insurance policy that can prevent a larger calamity.</p><p>But here’s the key difference: Insurance policies have <em>premiums that cost something.</em> The insured entity can’t just hand-wave the cost away by smearing the responsibility across a bunch of exempt employees who have the words “and other duties as assigned” at the end of their job descriptions. Handling on-call load is work. Modifying life outside of business hours to make them compatible with <em>potential</em> on-call load is work. On-call pain is tantamount to a large volume of work. Work should be compensated, especially if that work is such a critical part of the organization’s risk mitigation plan. If it’s not important enough to fairly compensate the people who have to shoulder the on-call load, why is it important enough to base the success of the business on?</p><p>“Importance” really is the key to thinking about all of this. Some might hold the opinion that if an engineer is not on-call as a part of their regular duties, they clearly must not be working on anything very important. I propose to look at it a different way. To understand this perspective, you’ll need to go deep into the forgotten corner of your closet and find <em>That Cage.</em> You know, That Cage you have worked so long and so hard to trap your imposter syndrome in. Go ahead and pull That Cage out for a minute. Lift off the bed sheet that’s been covering it up. Stare deeply into the dark, haunting eyes of that demon. Once comfortable in each other’s presence, ask your imposter syndrome a simple question: If this was actually important to the success of the organization, why did they trust <em>us</em> with it?</p><h2 id="something-for-the-pain">Something for the pain<a href="#something-for-the-pain" title="Permalink - Something for the pain"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p><strong>Bart:</strong> Milhouse, how could you let this happen? You were supposed to be the night watchman!</p><p><strong>Milhouse:</strong> I was watching. I saw the whole thing. First it started falling over, then it fell over.</p></blockquote><p>Obviously, there are ways to support a product that don’t involve putting staff on-call outside of working hours. The so-called “follow the sun” paradigm pretty accurately describes itself—the team is distributed around the world and the product is supported by whichever part of the globe is in daylight at that time. To do this perfectly fairly, there should be a minimum of three teams each separated by eight hours of timezone distance. When it’s 5 p.m. in Chicago and folks are preparing to go home, it’s 9 a.m in Melbourne. When the Aussies are done for the day, it’s a new workday in Lviv and the sun is rising over Dublin. <label for="_margin-note:29"></label><mark> This doesn’t provide perfectly fair coverage during weekends or holidays, but see below for some ideas about that. Or, just close during those times. Banks and financial institutions all do it, and they seem to be doing fine!</mark> At any given point during the course of the day, there is some team that is already awake and already within working hours that can handle things without pulling somebody out of their slumber.</p><p>If there is no other option than to require on-call support outside working hours, consider making it voluntary. Now I know what you’re going to say to that: If it’s voluntary, nobody will want to do it. And that is absolutely the point. Nobody wants to do it because it freakin’ sucks. It’s not a good deal. So it’s the organization’s responsibility to sweeten that deal enough for somebody to consider taking it. Pay people something for taking an on-call shift. Either a per-day or per-week stipend, or something like the equivalent of one hour’s pay for every four hours on-call. Saying “well, you’re already making plenty of money with your engineer’s salary so that should count” ain’t the way to do it at all.</p><p>On-call staff should also be paid something each time they respond to a page, especially when it occurs outside of working hours. If simply <em>being available</em> is worth a flat-rate stipend, actually having to jump into a firefight should be worth something even greater than that. Because if not, it implies that a span of unbearable on-call pain endured by person <em>A</em> is exactly equivalent to an uncharacteristically tranquil week enjoyed by person <em>B</em> at a different time. This is not fair to either of these people or the team as a whole.</p><p>Making the business pay to page staff will certainly change the timbre of the on-call load. Nothing cleans up noisy, flapping, inactionable pager alerts quicker than making them expensive to generate.</p><p>In a distant past life, this was proposed and shot down with the following rationale, which I distinctly remember as being one of the stupidest things I have ever heard somebody in my management chain say. Paraphrasing: “If on-call engineers were to receive compensation for each incident they resolved, it would incentivize them to intentionally build systems that fail so they could increase their pay by increasing their on-call load.” My guy, that is <em>sabotage</em> and <em>fraud</em>. You are hypothesizing a scenario where your subordinates are committing actual crimes. If somebody is doing <em>criminal acts</em> at work, fire their ass! Not to mention that anybody who deliberately self-inflicts on-call load is a goddamn idiot and should be sacked just on that basis alone.</p><p>There is also the radical option of simply leaving certain spans of the day/week uncovered, with nobody officially on-call during those hours. If something fails, let it fail for a while and then deal with it during support hours. Sometimes a large and visceral production incident needs to bubble up to senior management’s attention in order to rally together the willpower to actually pay down some of the technical debt that led to the problem. If all the engineers know that the product is a wobbly tower of paperclips and duct tape, perhaps the people seated at the very top of the infernal structure should get to see exactly how precarious the whole thing really is from time to time. It’s rather easy to put up a fake facade of perfect customer-facing uptime, and it’s also surprisingly easy to conceal the damage done to the employees who are tasked with carrying the weight of that facade on their backs. At least until they all become disillusioned and quit, anyway.</p><p>Something to bear in mind is that you, as the employee, have a certain voice here. You can ask potential employers during the interview stage how they do on-call, and withdraw yourself from consideration if you don’t like the answer they give. You can tell them flatly that this is your reason for not wanting to work there. You can leave a job if on-call is cramping your style or ruining your life, and you can tell the exit interviewer exactly this. If you’re at a place that’s thinking about formally adopting on-call, you can dig your heels in and either demand compensation for it or refuse to do it. Will your employer respect the boundaries you’re drawing? There’s really only one way to find out.</p><p>If you find yourself negotiating a job, try to get a line in the employment agreement that specifically disallows unpaid after-hours on-call shenanigans. Remember, negotiating isn’t just about arguing over compensation numbers, you can try to haggle over material job duties and expectations. Push back on the non-compete and non-solicitation clauses while you’re at it, and the overreaching intellectual property assignment, all that crap. <label for="_margin-note:30"></label><mark> Have you ever redlined a contract? It might be worth giving it a shot someday!</mark> And I won’t go as far as to say that tech workers should unionize or anything like that, but I will say that it seems like a whole lot of employers in this industry specifically do not want their employees to unionize. There’s probably a reason they’re apprehensive about it, and that reason almost certainly benefits the employers and not the rest of us.</p><p>And it’s <em>scary</em> to stand up for principles like this, which is likely a big part of why on-call duties get successfully foisted on so many unfortunate people. I can’t promise this won’t lead to an uncomfortable and fruitless conversation, or a burned bridge, or a pay cut, or months of unemployment. All I can say is that you—<em>you</em> specifically—are worth something. Your time is worth something, just like your mental health and physical well-being. Your employer spent money hiring you, and they would need to spend money to replace you with another hire. Unless you are absolutely useless or a complete dickhead, losing you would negatively affect your team’s morale and output. Your manager has to go through the performance review cycle just like you do, and losing a direct report is not a good look for them. You have a voice and you have some leverage. It’s up to you what you do with it.</p><h2 id="sleeping-through-the-night">Sleeping through the night<a href="#sleeping-through-the-night" title="Permalink - Sleeping through the night"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>But it’s a five o’clock world when the whistle blows<br>No one owns a piece of my time<br>And there’s a five o’clock me inside my clothes<br>Thinking that the world looks fine, yeah</p></blockquote><p>Earlier, when I asked if this was important, I suspect that most readers answered from the perspective of the company. Of course it’s important, why wouldn’t it be? But now I’m asking <em>you</em>, specifically. Is this important <em>to you?</em></p><p>I suspect that a fair number of readers are going to feel that what I wrote is naive, overly cynical, too idealistic, or simply incompatible with the realities of modern business expectations. Perhaps this article will be perceived as a handbook for how to become embittered and then get fired. But detached from all of that, in the innate nature of almost every human that participates in these systems, this can’t possibly sit right. Why do we accept this plainly abusive practice? Why do we go above and beyond to forfeit the enjoyment of our free time to an organization that is unwilling to reciprocate in any meaningful way? To an organization that is perhaps <em>incapable</em> of reciprocating?</p><p>It turns out that there are all kinds of different people out there. Some are young (or young at heart) and have nothing better to do outside of work than party and pass out drunk. For them, on-call might be almost fun, like that invigorating feeling somebody might get when they sign up for stage crew in high school and get to screw around in the building after all the other students and staff have gone home and it’s weird and empty. Others have complicated home lives with difficult caretaking situations and really do not need to be dealing with yet another source of stress and anxiety in an existence that is already a hair’s breadth from going completely off the rails. Some people simply do not care about work when they’re not physically there; they clock in, work for the day, then clock out. There is nothing inherently wrong with trying to limit the encroachment of work into life. Each of these people have different priorities, different needs, different values and principles. It is not fair to blindly shoehorn them all into the same on-call rotation and pretend they are going to respond to it the same way.</p><p>On average, most of us get around 4,000 weeks of life on this earth. If you’re exceptionally fortunate, you might make it to 5,000. How many of those weeks do you want to spend in the shadow of a pager?</p><p>When I was just shy of 2,000 weeks old, I suffered through a particularly acute week of on-call pain. At one point I was in my third or fourth video call about the same long and protracted smoldering SEV and, in a moment of frustrated weakness, I made an offhand comment about just being <em>tired</em> of repeatedly handling the same problem. My manager was present on the call, and my statement seemed to really set him off. I was essentially told that my feelings about the situation—perhaps the only authentic part of myself I ever expressed there—were wrong. In the days that followed I was made to feel like I was not a team player, that I was not pulling my weight, and that I was not meeting the bare minimum of what was expected of a person bearing the torch of on-call. With the utterance of a single sentence, I opened a rift in the relationship with my manager that remained until the day I left that job.</p><p>But I meant what I said. I mean it now more than ever: I have been paged enough.</p><a href="https://www.scottsmitelli.com/articles/" title="Articles">«&nbsp;Back to Articles</a></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Learning Theory from First Principles [pdf] (142 pts)]]></title>
            <link>https://www.di.ens.fr/~fbach/ltfp_book.pdf</link>
            <guid>43497954</guid>
            <pubDate>Thu, 27 Mar 2025 20:45:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.di.ens.fr/~fbach/ltfp_book.pdf">https://www.di.ens.fr/~fbach/ltfp_book.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=43497954">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[How to Use Em Dashes (–), En Dashes (–), and Hyphens (-) (375 pts)]]></title>
            <link>https://www.merriam-webster.com/grammar/em-dash-en-dash-how-to-use</link>
            <guid>43497719</guid>
            <pubDate>Thu, 27 Mar 2025 20:19:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.merriam-webster.com/grammar/em-dash-en-dash-how-to-use">https://www.merriam-webster.com/grammar/em-dash-en-dash-how-to-use</a>, See on <a href="https://news.ycombinator.com/item?id=43497719">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                    <h2>What is an Em Dash?</h2>

<p>The em dash (—) can function like a comma, a colon, or parenthesis. Like commas and parentheses, em dashes set off extra information, such as examples, explanatory or descriptive phrases, or supplemental facts. Like a colon, an em dash introduces a clause that explains or expands upon something that precedes it.</p>



<h2>The Em Dash Indicates a New Direction</h2>

<ul>
<li>An em dash can mark an abrupt change or break in the structure of a sentence.</li>
</ul>

<blockquote>
  <p>Mabel the Cat was delighted with the assortment of pastries the new bakery featured, but Harry the Dog—he felt otherwise, for the bakery did not offer cheese Danishes at all.</p>
</blockquote>

<ul>
<li>An em dash can indicate interrupted speech or a speaker’s confusion or hesitation.</li>
</ul>

<blockquote>
  <p>“Of course you have a point,” Mabel murmured. “That is—I suppose it is concerning.”</p>
</blockquote>

<h2>The Em Dash as Comma or Parenthesis</h2>

<ul>
<li>Em dashes are used in place of commas or parentheses to emphasize or draw attention to parenthetical or amplifying material. In this particular task, em dashes occupy a kind of middle ground among the three: when commas do the job, the material is most closely related to what’s around it, and when parentheses do the job, the material is most distantly related to what’s around it; when dashes do the job the material is somewhere in the middle.</li>
</ul>

<blockquote>
  <p>The bakery's significantly broad hours of operation—6 a.m. to 6 p.m.—certainly showed concern for customers’ manifold circumstances.</p>
</blockquote>

<ul>
<li>Dashes set off or introduce defining phrases and lists.</li>
</ul>

<blockquote>
  <p>A regular selection of three kinds of croissants—plain, almond, and chocolate—was heartening, both Mabel and Harry agreed.</p>
</blockquote>

<ul>
<li>An em dash is often used in place of a colon or semicolon to link clauses, especially when the clause that follows the dash explains, summarizes, or expands upon the preceding clause in a somewhat dramatic way.</li>
</ul>

<blockquote>
  <p>Harry would never forget the Tuesday that Mabel called him from the bakery, her voice brimming with excitement—the bakery had added cheese Danishes to its selection.</p>
</blockquote>

<ul>
<li>An em dash or pair of dashes often sets off illustrative or amplifying material introduced by such phrases as <em>for example</em>, <em>namely</em>, and <em>that is</em>, when the break in continuity is greater than that shown by a comma, or when the dash would clarify the sentence structure better than a comma.</li>
</ul>

<blockquote>
  <p>The bakery was truly phenomenal. Although they did miss the mark somewhat with the pineapple upside-down cake Mabel ordered—that is, the cake had clearly been baked right-side up.</p>
</blockquote>

<ul>
<li>An em dash may introduce a summary statement that follows a series of words or phrases.</li>
</ul>

<blockquote>
  <p>Chocolate chip, oatmeal raisin, peanut butter, snickerdoodle, both macarons and macaroons—the panoply of cookie varieties was impressive as well.</p>
</blockquote>

<ul>
<li>A dash often precedes the name of an author or source at the end of a quoted passage—such as an epigraph, extract, or book or film blurb—that is not part of the main text. The attribution may appear immediately after the quotation or on the next line.</li>
</ul>

<blockquote>
  <p>“One cannot overestimate the effect that a good bakery can have on a person’s well-being.” —Mabel the Cat, quoted in <em>The Websterburg Reporter</em></p>
</blockquote>

<h2>The Em Dash in the Company of Other Punctuation Marks</h2>

<ul>
<li>If an em dash appears at a point where a comma could also appear, the comma is omitted.</li>
</ul>

<blockquote>
  <p>Within its first year, Mabel and Harry had sampled all of the bakery’s offerings—all 62 items—and had also decided that the exercise was worth repeating.</p>
</blockquote>

<ul>
<li>When a pair of em dashes sets off material ending with an exclamation point or a question mark, the mark is placed inside the dashes.</li>
</ul>

<blockquote>
  <p>When the bakery closed for the month of August Mabel tried, despite her dolefulness—for how could she be otherwise?—to bake her own bread but each loaf that emerged from her oven tasted vaguely of tears.</p>
</blockquote>

<ul>
<li>Dashes are used inside parentheses, and vice versa, to indicate parenthetical material within parenthetical material. The second dash is omitted if it would immediately precede the closing parenthesis; a closing parenthesis is never omitted.</li>
</ul>

<blockquote>
  <p>The bakery’s reputation for scrumptious goods (ambrosial, even—each item was surely fit for gods) spread far and wide.</p>
</blockquote>

<h2>Em dash vs en dash</h2>

<ul>
<li>Remembering that the em dash is the length of a capital M, it will surprise no one that the so-called “en dash” is the approximate length of a capital N, –. The en dash is the least loved of all; it’s not easily rendered by the average keyboard user (one has to select it as a special character, whereas the em dash can be conjured with two hyphens), so it’s mostly encountered in typeset material. (A hyphen does its job in other text.) It is most often used between numbers, dates, or other notations to signify “(up) to and including.”</li>
</ul>

<blockquote>
  <p>The bakery will be closed August 1–August 31.</p>
  
  <p>The bakery is open 6:00 a.m.–6:00 p.m.</p>
  
  <p>The exceedingly complex recipe spans pages 128–34.</p>
  
  <p>Mabel and Harry lived elsewhere 2007–2019.</p>
</blockquote>

<p>Note that one does not need words like <em>from</em> and <em>between</em> in these cases. The phrase “open 6:00 a.m.–6:00 p.m.” can be read as “open between 6:00 a.m. and 6:00 p.m.” or as “open from 6:00 a.m. to/until 6:00 p.m.”</p>

<ul>
<li>If you want to be official about things, use the en dash to replace a hyphen in compound adjectives when at least one of the elements is a two-word compound. </li>
</ul>

<blockquote>
  <p>the pre–Websterburg Bakery era</p>
</blockquote>

<p>The thinking is that using a hyphen here, as in “the pre-Websterburg Bakery era,” risks the suggestion that <em>pre</em> attaches only to <em>Websterburg</em>. It’s unlikely, though, that a reader would truly be confused.</p>

<ul>
<li>The en dash replaces the word <em>to</em> between capitalized names, and is used to indicate linkages such as boundaries, treaties, and oppositions.</li>
</ul>

<blockquote>
  <p>a Springfield–Websterburg train</p>
  
  <p>the pie–cake divide</p>
</blockquote>

<ul>
<li>A two-em dash, ——, is used to indicate missing letters in a word and, less frequently, to indicate a missing word.</li>
</ul>

<blockquote>
  <p>The butter-stained and crumb-embedded note was attributed to a Ms. M—— of Websterburg.</p>
</blockquote>

<ul>
<li>A three-em dash, ———, indicates that a word has been left out or that an unknown word or figure is to be supplied.</li>
</ul>

<blockquote>
  <p>Years later it was revealed that the Websterburg bakers had once had a bakery in ———, a city to the south. But the water quality there was prohibitive to the creating of decent bagels.</p>
</blockquote>

<h2>Hyphen use</h2>

<p>While we said above that the em dash, also called the “common dash,” is the most common of the true dashes, hyphens show up more frequently in text. They have a variety of uses.</p>

<ul>
<li><a href="https://www.merriam-webster.com/words-at-play/hyphen-rules-open-closed-compound-words">Hyphens are used to link elements in compound words</a>. </li>
</ul>

<blockquote>
  <p>a baker-owner</p>
</blockquote>

<ul>
<li>In some words, a hyphen separates a prefix, suffix, or medial element from the rest of the word. </li>
</ul>

<blockquote>
  <p>Websterburg’s pre-bakery days</p>
  
  <p>a bread-like scone</p>
  
  <p>jack-o'-lantern sugar cookies</p>
</blockquote>

<ul>
<li>As we noted above, a hyphen often does the job of an en dash between numbers and dates, providing the meaning "(up) to and including."</li>
</ul>

<blockquote>
  <p>pages 128-34</p>
  
  <p>the years 2007-2019</p>
</blockquote>

<ul>
<li>A hyphen marks an end-of-line division of a word.</li>
</ul>

<blockquote>
  <p>Mabel and Harry don’t like to linger on their memories of Webster-
  <br>burg’s pre-bakery days.</p>
</blockquote>

<ul>
<li>A hyphen divides letters or syllables to give the effect of stuttering, sobbing, or halting speech.</li>
</ul>

<blockquote>
  <p>"M-m-mabel, the cheese Danish is divine!”</p>
</blockquote>

<ul>
<li>Hyphens indicate a word spelled out letter by letter.</li>
</ul>

<blockquote>
  <p>Let’s not even talk about August, when the bakery is c-l-o-s-e-d.</p>
</blockquote>

<p>The em dash is sometimes considered a less formal equivalent of the colon and parenthesis, but in truth it’s used in all kinds of writing, including the most formal—the choice of which mark to use is really a matter of personal preference.</p>

<p>Spacing around an em dash varies. Most newspapers insert a space before and after the dash, and many popular magazines do the same, but most books and journals omit spacing, closing whatever comes before and after the em dash right up next to it. This website prefers the latter, its style requiring the closely held em dash in running text.</p>
                            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I tried making artificial sunlight at home (359 pts)]]></title>
            <link>https://victorpoughon.fr/i-tried-making-artificial-sunlight-at-home/</link>
            <guid>43497394</guid>
            <pubDate>Thu, 27 Mar 2025 19:49:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://victorpoughon.fr/i-tried-making-artificial-sunlight-at-home/">https://victorpoughon.fr/i-tried-making-artificial-sunlight-at-home/</a>, See on <a href="https://news.ycombinator.com/item?id=43497394">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2025-03-27T11:51Z">
                    27 Mar, 2025
                </time>
            </i>
        </p>
    

    <p>Some time ago, I saw <a href="https://www.youtube.com/watch?v=6bqBsHSwPgw">this video by DIY Perks</a> where they make artificial sunlight at home with a 500W LED and a gigantic (1.2m) parabolic reflector. I've been fascinated by this project ever since, and I wanted my own.</p>
<p>Over the past year or so, I finally took the time to work on a similar project, but I had the idea for a different design. The issue with the parabolic reflector is that it takes a huge amount of space. Could I do something similar, but with a less bulky design? This is the story of my first attempt at this project - version 1 so to speak. Perhaps there will be a version 2 in the future. Enjoy the read!</p>
<hr>
<p>My idea - as others have had I'm sure - was to use an array of lenses laid out as a grid. Then, instead of a single light source, I would use a grid array of multiple LEDs, one per lens. In my mind, this would have two major advantages:</p>
<ul>
<li>Less bulky. The size of the device would be determined by the focal length of the individual lens elements, and because each would be small, the focal length could be small also, while maintaining a decent f number.</li>
<li>Easier thermal management. Multiple light sources could be regular low power LEDs which wouldn't need special cooling. There would just be a lot of them, spread out over the entire device surface.</li>
</ul>
<p>Over the course of this project, I also intended to teach myself some manufacturing and 3D design, as I don't have any experience doing any of this. My background is software, and as you'll see I took a very software heavy approach to this. It was all a long learning journey for me, but in the end I used:</p>
<ul>
<li>Mostly <a href="https://build123d.readthedocs.io/en/latest/">build123d</a> for CAD modeling, with some <a href="https://www.freecad.org/">FreeCAD</a> for final assembly checks and some experiments here and there - including with the cool <a href="https://github.com/chbergmann/OpticsWorkbench">OpticsWorkbench</a>.</li>
<li><a href="https://www.kicad.org/">KiCad</a> for PCB design.</li>
<li>Custom python code for simulating light and optimizing the optical system. (This custom code eventually became <a href="https://victorpoughon.github.io/torchlensmaker/">an entire open-source project for optimization-based optical design</a>)</li>
<li><a href="https://jlcpcb.com/">JLCPCB</a> for printing and assembling PCBs, and for manufacturing aluminum and plastic parts with their CNC service.</li>
</ul>
<p><strong>TL;DR: I did it!</strong> Here is the finished device sitting on my desk today, at night:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/main4.JPG" alt="main6.jpg"></p>
<p>And here it is during the day (much less impressive!)</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/daylight.jpg" alt="daylight"></p>
<p>Beware it's kinda hard to take good pictures of it, and I don't have the best photo gear. Here's also a video: (at night)</p>
<video width="640" controls="">
  <source src="https://github.com/victorpoughon/pulaski-v1-blog-post/raw/refs/heads/main/video-web.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>
<p>Kinda cool that you can see a lens flare effect in the shape of the lens grid array.</p>
<h2 id="technical-specs">Technical specs</h2><p>Mechanical:</p>
<ul>
<li>Lens square side length: 30mm</li>
<li>Effective Focal length: 55mm</li>
<li>Array size: 6x6 = 36 LEDs</li>
<li>Total size: 180x180mm</li>
</ul>
<p>Parts:</p>
<ul>
<li>Lenses: 1 biconvex lens array, 1 plano-convex lens array - custom made out of PMMA acrylic, CNC fabrication with vapor polish finish @ <a href="https://jlccnc.com/">JLCCNC</a></li>
<li>LEDs: <a href="https://lumileds.com/products/mid-power-leds/luxeon-2835-architectural/">LUXEON 2835 3V</a> -- Ref: 2835HE. CRI: 95+, color temp: 4000K, 65mA.</li>
<li>PCBs: Custom design</li>
<li>Mounting hardware: custom design - aluminium 60601 for the CNC parts and mate black resin for the 3D printed parts</li>
<li>Rayleigh diffuser: waterproof printing inkjet film</li>
</ul>
<h2 id="general-design-and-sizing">General design and sizing</h2><p>To create artificial sunlight, you need four ingredients:</p>
<ul>
<li>Parallel light rays. The sun is so far away that light rays emitted from a point on the surface of the sun reach us essentially parallel. This is not to say that all light rays coming from the sun are parallel, as it still has a 0.5 deg apparent angular size. But they need to be pretty straight. Any light coming from an artificial light source like an LED will be going in all directions, so some optics is required.</li>
<li>High color quality. A good indicator to look for on a datasheet is the <a href="https://en.wikipedia.org/wiki/Color_rendering_index">color rendering index (CRI)</a>. 95+ is recommended to achieve a good effect. I'm sure there's more color science you could get into, but CRI is a great start for off the shelf parts.</li>
<li>Rayleigh scattering, or an imitation of it.</li>
<li>A LOT of power.</li>
</ul>
<p>Light intensity is the most important sizing constraint, so let's look at it first. Now, the sun is <strong>very bright</strong>. Like, ridiculously bright: around 100,000 lux. To achieve this with LEDs is by no means impossible, but it's a challenge. For this first version, I thought that targetting 10,000 lux would be quite enough because it would reduce the power consumption a lot for a first prototype, and also brightness perception is logarithmic. So one tenth of the intensity is really, perceptually, almost the same as full brightness. (In the end, I estimate my design only effectively achieved something between 1000 and 10000 lux).</p>
<p>The general grid based design of this project really has two variables:</p>
<ul>
<li>the individual LED light output, in lumens</li>
<li>the individual lens surface area in mm²</li>
</ul>
<p>After some research, I think values between 30 to 130 lumens are typical for high CRI surface mount LEDs. So, assuming this is what we are working with, what is the required lens size to achieve the brightness of the sun?</p>
<p>We have to assume some non perfect efficiency for collimating the light. This will never be 100%, and in fact may be quite low if the focal length is high, because a lot of the light will be hitting the side walls instead of reaching the lens. The lens itself will also be absorbing some light. So taking a wild guess of 0.5 for the overall optical efficiency, and taking three lumens value of 30, 80 and 130, we get this plot:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/plot.png" alt="plot"></p>
<p>With that in mind, I selected 30mm as my lens square side length. Presumably, this would be small enough to achieve some effect, but not too small to make the lenses too hard to make.</p>
<h2 id="lenses">Lenses</h2><p>Focal length, and the lenses shape in general, is the next design consideration. The goal is to have perfectly parallel light rays. In theory, with a perfect point source and a perfect lens this is easy. Put the light source at the lens focal length, you're done. In practice, a lot of things make it harder to achieve with a lens. (This is where the parabolic reflector design is superior to a lens).</p>
<ul>
<li>A LED is not a point source</li>
<li>A lens will not have perfect optical performance (i.e. aberrations)</li>
<li>Mechanical reality of the device means that positioning and orientation will not be perfect</li>
<li>A LED radiation pattern is not isotropic, meaning intensity will be greater at the lens center</li>
</ul>
<p>This is the radiation pattern characteristics diagram from my LED datasheet:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/led-radiation.png" alt="led-radiation"></p>
<p>I wrote some custom python code to simulate the optical system I had in mind, and find the best lens shape using numerical optimization. (This code eventually became an <a href="https://victorpoughon.github.io/torchlensmaker/">open-source project: torchlensmaker</a>) After a lot of experimentation, I settled on a 2 lens design:</p>
<ul>
<li>Lens 1: Biconvex parabolic lens</li>
<li>Lens 2: Planoconvex parabolic lens</li>
</ul>
<p>The effective focal length of this two lens system is about 55mm. Focal length is a key design parameter, and here I feel like more experimentation is needed. It's a big tradeoff consideration and has a huge impact on the system design. It impacts:</p>
<ul>
<li>The curvature of the lens surface, which is a key manufacturing point (you want to minimize curvature for manufacturing, which means maximizing focal length)</li>
<li>The optical efficiency of the system due to the led radiance pattern (here you want to minimize focal length, to gather more of the emitted light)</li>
<li>The device thickness (here I wanted a not-too-thick device, so to minimize focal length also)</li>
</ul>
<p>I used a two lens system mostly to reduce the surface curvature of the lens arrays. This reduces the manufacturing cost by a lot. High curvature lenses are more expensive in general, and this grid array design means that a high curvature lens will create sort of "valleys" in between the lenses. Because I was targetting CNC manufacturing, this is to be minimized to get a design that's even possible to machine.</p>
<p>This is the optical simulation I had at the time I finalized the design and ordered the lenses. (Since then my simulation code has improved and I could likely do much better modeling today using the latest version of torchlensmaker):</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/lenses.png" alt="lenses"></p>
<p>With some custom build123d code I was able to make the two lenses 3D models by stacking the lenses in a grid pattern and adding edges for mounting:</p>


<p>What's really cool using <a href="https://build123d.readthedocs.io/en/latest/">build123d</a> for 3D modeling, is that I can just change a python variable to change the size of the array, of the thickness of the lens, of anything else really. It's all parametric out of the box because it's regular Python code! This makes exploring the design space very efficient. I've never done 3D modeling any other way, but I can't imagine ever not having the power of programming with me if I ever do it again!</p>
<p>I had the lenses manufactured out of PMMA acrylic at JLC with a vapor polish finish. Total cost for the lenses was about 55€ which is really not bad!</p>
<p>One of the two main lens array, built by JLCCNC:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-lens.jpg" alt="assembly-lens"></p>
<h2 id="leds">LEDs</h2><p>I really wanted to use the <a href="https://store.yujiintl.com/collections/yujileds-led-emitters/products/yujileds-cri-95-0-9w-high-efficacy-led-smd-3030-g04?variant=42570626072833">3030 G04 from YUJILEDS</a>, but it's only sold on 5000 units reels that cost $1000 a piece... maybe for version 2 I will upgrade to those. For version 1, I settled on <a href="https://lumileds.com/products/mid-power-leds/luxeon-2835-architectural/">LUXEON 2835 3V</a>. They are about 3 times less bright than the YUJILED, but they have good color rendering and the SMD package I was looking for. And importantly, the minimum order quantity was only 50 at JLC global sourcing.</p>
<p>In the version 1 design, the grid is 6x6 which means 36 LEDs total.</p>
<h2 id="pcbs">PCBs</h2><p>I designed a custom PCB with KiCAD. Each PCB holds 6 LEDs which are laid out as 2 segments of a 12V led strip in parallel. This allows to use a standard wall plug 12V power supply.</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/pcb-schematic.png" alt="pcb-schematic"></p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/pcb-layout.png" alt="pcb-layout"></p>
<p>The mechanical role of the PCB is very important in this design. Not only does it distribute power to the LEDs and regulate current, it also precisely positions the LEDs at the lens focal point. For this, exporting the PCB 3D model and importing it into FreeCAD was very useful to check that everything fits together: the PCB in the aluminum support baseplate, the holes on the light hoods, etc. My Python code exported the precise LED coordinates which I could input into KiCad's layout editor.</p>
<p>I had the PCB printed and the components assembled by JLCPCB. It's very very cool to design an electronic board on your computer and get it fully assembled in the mail a few weeks later - no soldering required! (for this step anyway).</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-pcbs.jpg" alt="assembly-pcb"></p>
<h2 id="mechanical-mounting-parts">Mechanical mounting parts</h2><p>To mount everything together I designed 3 parts:</p>
<ul>
<li>A baseplate, to hold the PCBs and the side walls. The PCBs are fitted below the baseplate, and light goes through holes drilled into the baseplate. There are also partial holes to allow for the thickness of the SMD resistors mounted on top of the PCBs, and finally two mounting holes per PCB. This is why it has so many holes :)</li>
</ul>

<ul>
<li>Side walls to hold the lenses using grooves in which to insert them, and a larger groove to secure in the baseplate. The baseplate side holes are threaded to support M2 screws securing the base of the walls. Again, JLCCNC did the drilling and threading of the holes at a great price.</li>
</ul>

<ul>
<li>Light hoods, a rectangle block with rectangular holes. It sits on top of the PCB to shape the light coming from each LED into a cone (or really a four sided pyramid). This is to make sure light from a given LED only reaches its matching lens on the lens array, and no other. Bleed light is inevitable, but at least this prevents direct leakage.</li>
</ul>

<p>The hoods were 3D printed out of black resin, the walls and baseplate were CNC cut out of Aluminum 60601.</p>
<p>I'm not a mechanical engineer so this process was... trial and error. Still the result is working so I'm quite happy with that. For a possible version 2, there's a lot I'll change in the mechanical design. But apart from the one design flaw I was able to fix manually with a drill (more on that below), everything fit together quite well on the first try.</p>
<h2 id="rayleigh-scattering">Rayleigh scattering</h2><p>The final ingredient is <a href="https://en.wikipedia.org/wiki/Rayleigh_scattering">Rayleigh scattering</a>. This is the physical phenomenon that makes the sky look blue, and it's important to achieve a convincing effect. In the DIY Perks video that inspired this project, they used a home made liquid solution with suspended particles of the correct size for Rayleigh scattering. Not super practical and I really wanted to find another solution (get it?). Thankfully, some time after the original video, someone on the <a href="https://forum.diyperks.com/lighting/artificial-sunlight-official-topic/paged/3/#post-3191">diyperks forum</a> discovered that inkjet print film achieves a very similar effect. A quick trip to <a href="https://www.avery.fr/produit/transparent-2503">a local office supply store</a> was all I needed here! Amazing discovery.</p>
<p>I didn't anticipate this step during the initial design phase, so the film is simply cut to the correct size and secured with black electrical tape.</p>
<h2 id="assembly">Assembly</h2><p>After a few weeks of design work, and another few weeks of waiting for the parts to arrive, it was finally time for assembly!</p>
<p>On top of the individual 3D models made with build123d, I had a final assembly FreeCAD model with all parts fitted together, including the lenses:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/freecad_assembly.png" alt="freecad_assembly"></p>
<p>Note the green brackets that I initially planned to use. When actually assembling the walls to the baseplate, the solidity of the formed box was very high, I decided to drop the brackets entirely. This is why some extra unused holes remain on the side walls.</p>
<p>This is all the parts just after unboxing (excluding the inkjet film, solder tin, screws, power supply, wiring, electrical tape):</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-all-parts.jpg" alt="assembly-all-parts"></p>
<p>The only real design flaw was insufficient width of the grooves that hold the lenses. The lenses have an edge thickness of 1.2mm, which I had intended to fit into a 1.22mm groove. Turns out this was not enough, probably due to a combination of manufacturing tolerance and additional thickness added by the anodizing black matte surface finish of the aluminum part. The lenses didn't fit into the grooves!</p>
<p>I don't have a very advanced tools at home, so my best solution to this was making the existing grooves wider by hand using a power drill. I bought a 1.5mm metal drill bit and achieved a decent result by doing 4 to 5 passes per groove. This took about 2-3h in total because I had to move the bit quite slow and could only machine about 1/4th of each groove depth at a time by moving the drill bit slowly accross, and there are 8 grooves total.</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/drill.jpg" alt="drill"></p>
<p>Here's some more pictures of assembly below.</p>
<p>The back side after soldering wires to the PCB power pins and a socket for the 12V power supply. The PCBs and hood pieces share a common mounting hole so only two screws per PCB-hood pair are used.</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-back.jpg" alt="assembly-back"></p>
<p>The front side of the baseplate + PCB + hoods assembly, but without the lenses, powered on. Don't look at it directly :)</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-front.jpg" alt="assembly-front"></p>
<p>It's interesting to note that in the picture above, all of the light you can see from the LEDs is actually "bleed light" and not useful light. None of the light visible above is the light that's intended to go into the lens and produce the sunlight effect.</p>
<p>Testing with partial assembly of the walls and only 1 out of the 2 lenses:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-one-lens.jpg" alt="assembly-one-lens"></p>
<p>Testing the inkjet film layers with an avocado as a subject. I settled on using two layers of the inkjet film for the final build:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-avocado.jpg" alt="assembly-avocado"></p>
<h2 id="cost">Cost</h2><p>Overall I spent around 1000€ on this project. But this includes cost of tools I was missing, prototype parts that I had manufactured but discarded, bulk orders for parts like LEDs and PCBs which had a minium order quantity above what I need for 1 unit, and various supplies like screws, etc. The actual raw cost of parts only, without shipping, to build the final unit is hard to estimate. But I would say around 300€. The most expensive parts are the CNC parts (PMMA lenses and the aluminum baseplate and walls) accounting for about 2/3rd of the total price. The rest (PCBs, assembly service, LEDs, 3D printed plastic parts) was quite cheap.</p>
<h2 id="conclusion">Conclusion</h2><p>As I write this the final piece is sitting on my desk and producing a pleasant soft white glow. It's definitely nice, and I'm very proud of the result - especially because this was by far the biggest build project I have ever done.</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/main1.JPG" alt="main1.jpg"></p>
<p>Thanks to this project, I've learned a ton about PCB design, electronics and CNC manufacturing and optics. I even got so far down the side quest of learning optics that I started <a href="https://victorpoughon.github.io/torchlensmaker/">an open-source python project</a> for modeling geometric optics.</p>
<p><strong>So, is it convincing as artificial sunlight?</strong></p>
<p>My honest answer to that is: partially. The geometric effect of the light source appearing at infinity works. As I pan and tilt my head from side to side, the illusion of light coming from way far behind the object is 100% a success. On top of that, if you look at it while moving your head into the light beam, my eyes get surprised - almost hurt - by the sudden intensity jump. This indicates that collimation is good and you can sort of see it in the video at the start of this post.</p>
<p>However it's apparent that it's simply too weak. Don't get me wrong, it's still bright. I can't look at it directly without sunglasses, and honestly it's really hard to take a good picture of it because the contrast between the light it emits and the outside of it is very high.</p>
<p>Another downside is that I can definitely make out the grid of lenses, as the intensity pattern clearly reveals the grid shape. This is quite a minor downside and not really unpleasant, and I'm sure it could be improved upon.</p>
<p>If I were to ever work on a version 2, I would focus on:</p>
<ul>
<li>More power. My feeling is the light output needs to be 3 to 5 times stronger to get any closer to a convincing effect, and it's not crazy to aim for as much as 10x brighter than this prototype.</li>
<li>More surface area. This prototype is 18cm x 18cm. So you only really get the effect if you are able to sit with the produced straight beam of light, which is quite narrow to resemble any kind of "fake window". A future version would need to be 2 to 4 times wider in my opinion.</li>
<li>Better optical design. I still think a refraction based design is possible, but it requires very precise optical design and mechanical tolerances. My feeling is that a refraction based design, especially as a grid, is very sensitive to positioning and orientation of parts. I lack mechanical engineering skills in this area.</li>
</ul>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/main3.JPG" alt="main3.jpg"></p>
<p>However there are some really encouraging things that I really like about this grid based, refractive design:</p>
<ul>
<li>It's scalable. If I had built 4 identical items, I could literally stack them on top of each other and get more surface area. The "bezels" would be only 5% of the total light emitting area, and I'm sure this could be lowered. I also like that the inner design calls for repeated elements, as this introduces some economy of scale, even at the prototype level. The only part that's not trivially scalable is the lens grid. Maybe it could be injection molded for very large scale production, or for medium scale you could come up with a way to tile multiple lens grids into a larger overall grid pattern, adding some thin bezels for mounting.</li>
<li>It's compact. The total size is 19cm x 19cm x 9cm. This is quite compact for a 5cm focal length and an effective lighting area of 18cm x 18cm. Reflective designs like the DIYPerks video or commercial products like <a href="https://www.coelux.com/">CoeLux</a> do not achieve this form factor.</li>
<li>Thermal management is better by design. This is not really something I got into for this design, as it's quite underpowered. The whole thing runs comfortably on a 12V / 3A wall brick power supply. But this design offers great margin for scaling up because there isn't a single light source to cool down, but a number of LEDs proportional to the surface area. I suspect the main thermal issue when scaling up would be the cooling of the power supply itself, not of the lamp.</li>
</ul>
<p>As final thoughts, let me talk about the software heavy approach I had for this project. It's awesome. If I was starting a manufacturing company today, I would do it all code based. PCBs, 3D models, assembly, testing... I want code everywhere. The power of changing a parameter and having the entire design updated with a single script it so good. Run a script and get all the production data including GERBERs, BOM, 3D models, mechanical schematics, technical diagrams, automated tolerance and electrical checks... absolutely no manual steps between changing a design parameter and ready to send a new order to manufacturing. The PCB and CAD space is even evolving to use <a href="https://sschueller.github.io/posts/ci-cd-with-kicad-and-gitlab/">proper CI/CD tools</a> which is really exciting.</p>
<p>I don't know if I'll ever have the time to work on version 2 of this project, but it was great fun anyway! And now I have a cool unique lamp. Thank you for reading!</p>


    

    
        

        
            


        
    


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SignalGate Is Driving the Most US Downloads of Signal Ever (116 pts)]]></title>
            <link>https://www.wired.com/story/signalgate-is-driving-the-most-us-downloads-of-signal-ever/</link>
            <guid>43497150</guid>
            <pubDate>Thu, 27 Mar 2025 19:28:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wired.com/story/signalgate-is-driving-the-most-us-downloads-of-signal-ever/">https://www.wired.com/story/signalgate-is-driving-the-most-us-downloads-of-signal-ever/</a>, See on <a href="https://news.ycombinator.com/item?id=43497150">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="ArticlePageChunks"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>SignalGate, as it's <a href="https://www.wired.com/story/signalgate-isnt-about-signal/">come to be called</a>, may be the biggest scandal to hit the Trump administration in its first months in power. But it's been great for <a href="https://www.wired.com/story/signal-tips-private-messaging-encryption/">Signal</a>.</p><p>Since the <a data-offer-url="https://www.theatlantic.com/politics/archive/2025/03/trump-administration-accidentally-texted-me-its-war-plans/682151/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.theatlantic.com/politics/archive/2025/03/trump-administration-accidentally-texted-me-its-war-plans/682151/&quot;}" href="https://www.theatlantic.com/politics/archive/2025/03/trump-administration-accidentally-texted-me-its-war-plans/682151/" rel="nofollow noopener" target="_blank">news broke</a> on Monday that <a href="https://www.wired.com/story/trump-officials-signal-chat-candlelight-dinner-mar-a-lago-yemen/">senior Trump administration cabinet members</a> accidentally included the editor in chief of The Atlantic in a group chat on the Signal encrypted messaging platform where the officials were making secret plans to bomb Yemen, the ensuing news cycle and the constant mentions of Signal have led to the encrypted messaging platform doubling its usual rate of new downloads, the nonprofit organization that runs Signal tells WIRED. Given that 2025 has already been a “banner year” for Signal's growth, according to Signal's leadership, that makes this week the single biggest bump in US adoption of the app in Signal's nearly 11 years of existence.</p><p>“In Signal’s history, this is the largest US-growth moment by a massive margin,” says Jun Harada, Signal's head of growth and partnerships. “It’s mind-blowing, even on our side.”</p><p>Harada declined to give absolute numbers for Signal's user growth beyond saying that its total downloads are in the “hundreds of millions,” which has been the case for several years. But he said that the week’s rate of adoption has been twice that of a typical week for 2025, which in turn was twice that of a typical week the same time last year. “It happened immediately” after The Atlantic broke the story of Signal's use in the Yemeni bombing, Harada says. “And it’s been sustained. We’ve been maintaining that rate every day.”</p><p>In Signal's history, the only comparable spike in adoption occurred when WhatsApp <a href="https://www.wired.com/story/whatsapp-privacy-policy-facebook-data-sharing/">changed its privacy policy in 2021</a>, Harada says, leading to millions of users abandoning that communications app. But that incident mostly brought non-Americans to Signal, unlike the current, US-focused SignalGate bump.</p><p>Numbers from the market intelligence firm Sensor Tower largely align with Signal's own analysis of that growth: The company says that Signal downloads in the US increased 105 percent compared to the prior week—and 150 percent compared to an average week in 2024. Outside of the US, Sensor Tower saw only a 21 percent increase in Signal downloads compared to the prior week.</p><p>The Atlantic's revelation on Monday that secretary of defense Pete Hegseth, director of national intelligence Tulsi Gabbard, national security adviser Michael Waltz, vice president JD Vance, and other Trump administration officials used a Signal group chat to plan an air strike against Houthi rebels in Yemen—and that Waltz accidentally added Atlantic editor Jeffrey Goldberg to that group in a shocking breach of confidentiality—has raised serious questions about the security practices of the Trump administration that are still resonating days later.</p><p>The scandal has called into question whether the executive branch officials were planning the air strike using vulnerable non-approved or even personal devices rather than the secure machines intended for classified conversations. Screenshots of the group chat <a data-offer-url="https://www.theatlantic.com/politics/archive/2025/03/signal-group-chat-attack-plans-hegseth-goldberg/682176/" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://www.theatlantic.com/politics/archive/2025/03/signal-group-chat-attack-plans-hegseth-goldberg/682176/&quot;}" href="https://www.theatlantic.com/politics/archive/2025/03/signal-group-chat-attack-plans-hegseth-goldberg/682176/" rel="nofollow noopener" target="_blank">published by The Atlantic on Wednesday</a> indicate that the officials were using Signal's disappearing messages feature to delete their communications, potentially in violation of US record retention laws.</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>The incident has raised sometimes-misguided questions, too, about whether Signal itself is to blame for the breach—including from President Trump, who suggested in comments on Wednesday that Signal might be “defective"—despite <a href="https://www.wired.com/story/signalgate-isnt-about-signal/">many cybersecurity and encryption experts' recommendation of Signal</a> as the best end-to-end encrypted messaging tool freely available to the public. “You use Signal, we use Signal, everyone uses Signal,” Trump told reporters, “but it could be a defective platform.”</p><p>Signal's Harada declined to respond to Trump's “defective” comment and pointed to Signal's <a href="https://www.wired.com/story/signalgate-isnt-about-signal/">previous statements</a> that it has yet to see any evidence of any vulnerability in the app, much less one that has anything to do with Jeffrey Goldberg being accidentally added to a White House group chat.</p><p>But Harada noted that the overall attention to Signal—even the president himself saying that “everyone uses Signal” in the Oval Office—is an example of the kind of visibility it has never had before. “All awareness for Signal is a net positive. The interest in Signal continues to be at an all-time high,” Harada says.</p><p>“I don’t think my phone has ever buzzed this much, from people from every walk of life. People are learning about Signal who maybe have never even heard about or considered encrypted messaging before.” Harada also pointed to a <a data-offer-url="https://x.com/yashar/status/1905253909981204506?t=eqvxMROEfpYVZfmiCIJwaQ" data-event-click="{&quot;element&quot;:&quot;ExternalLink&quot;,&quot;outgoingURL&quot;:&quot;https://x.com/yashar/status/1905253909981204506?t=eqvxMROEfpYVZfmiCIJwaQ&quot;}" href="https://x.com/yashar/status/1905253909981204506?t=eqvxMROEfpYVZfmiCIJwaQ" rel="nofollow noopener" target="_blank">report</a> that Google searches for “Signal” were up more than 1,000 percent.</p><p>Harada says that Signal was already seeing a significant uptick in adoption in the first few months of 2025. He attributes that growth partly to increasing general interest in privacy among consumers and partly to the breach of nine US telecoms by China's Salt Typhoon hacker group, which led to the hackers accessing some targets' real-time calls and texts. Federal officials at the FBI and the Cybersecurity and Infrastructure Security Agency responded to those breaches by publicly recommending that Americans <a href="https://www.wired.com/story/encryption-apps-chinese-telecom-hacking-hydra-russia-exxon/">use encrypted messaging and calling applications</a>.</p><p>But all of that has been dwarfed by the attention and interest Signal has received this week. As messy as SignalGate may be, Harada says, it has made Signal a household name like never before. “To have this kind of mainstream moment is massive,” he says. “I believe it’s a sea change for private encrypted messaging for the US and the world.”</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI models miss disease in Black and female patients (292 pts)]]></title>
            <link>https://www.science.org/content/article/ai-models-miss-disease-black-female-patients</link>
            <guid>43496644</guid>
            <pubDate>Thu, 27 Mar 2025 18:38:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/ai-models-miss-disease-black-female-patients">https://www.science.org/content/article/ai-models-miss-disease-black-female-patients</a>, See on <a href="https://news.ycombinator.com/item?id=43496644">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/ai-models-miss-disease-black-female-patients: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[California bill aims to phase out harmful ultra-processed foods in schools (125 pts)]]></title>
            <link>https://www.thenewlede.org/2025/03/california-bill-aims-to-phase-out-harmful-ultra-processed-foods-in-schools/</link>
            <guid>43495997</guid>
            <pubDate>Thu, 27 Mar 2025 17:45:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thenewlede.org/2025/03/california-bill-aims-to-phase-out-harmful-ultra-processed-foods-in-schools/">https://www.thenewlede.org/2025/03/california-bill-aims-to-phase-out-harmful-ultra-processed-foods-in-schools/</a>, See on <a href="https://news.ycombinator.com/item?id=43495997">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

                                        <p>As states across the country move to ban food dyes, California lawmakers on March 19 introduced the first US bill that would phase out certain ultra-processed foods from school meals.</p>
<p>If signed into law, <a href="https://leginfo.legislature.ca.gov/faces/billNavClient.xhtml?bill_id=202520260AB1264" target="_blank" rel="noopener">Assembly Bill 1264</a> would establish the first statutory definition of what qualifies as an ultra-processed food and would direct state scientists to work with university experts to identify particularly harmful products, which would then be removed from school cafeterias by 2032.</p>
<p>“We have not done enough to protect [children] from ultra-processed foods and beverages that have far more in common with a cigarette than they do a fruit or vegetable,” Ashley Gearhardt, a professor of psychology at the University of Michigan and director of the school’s Food Addiction Science &amp; Treatment Lab, said on a March 19 press call.</p>
<p>AB 1264 is a “courageous step forward” towards treating ultra-processed foods like the serious health threats they are, said Gearhardt.</p>
<p>To identify which ultra-processed foods should be eliminated from school offerings, scientists will consider whether a product includes additives that are banned elsewhere, whether it has been linked to health harms, whether it has been show to contribute to food addiction, and whether it contains excessive fat, sugar or salt, California Assemblymember Jesse Gabriel, one of the lawmakers who introduced the bill, said on the call.</p>
<p>The scientists will be required to publish a first report outlining this subcategory of especially harmful ultra-processed foods by July 1, 2026, said Gabriel, and will be required to update the list every two years as research on these foods evolves.</p>
<p>The bill was embraced by both Democrat and Republican lawmakers, added Gabriel. “Protecting our kids from harm is, and always should be, a bipartisan issue,” he said</p>
<p>In 2023, Gabriel introduced the <a href="https://www.thenewlede.org/2023/06/californias-skittles-bill-could-kick-off-broader-actions-against-food-additives/" target="_blank" rel="noopener">California Food Safety Act</a> or so-called “Skittles bill”, which is set to ban foods in the state containing brominated vegetable oil, Red Dye No. 3 and other toxic chemicals beginning in 2027. The bill was followed by the California School Food Safety Act last year,&nbsp; which will ban schools from serving foods with six artificial dyes linked to neurobehavioral problems in children.</p>
<p>The bills, signed into law by Governor Gavin Newsom, have been followed by a <a href="https://www.thenewlede.org/2025/03/amid-lack-of-faith-in-fda-us-states-rush-to-ban-food-dyes/" target="_blank" rel="noopener">wave of recent legislation across the country</a>. West Virginia this month <a href="https://westvirginiawatch.com/2025/03/05/wv-senate-passes-bill-banning-artificial-dyes-in-food-opponents-say-its-overreach/" target="_blank" rel="noopener">advanced a sweeping bipartisan bill</a> that would ban a range of food dyes linked to health problems, while New York lawmakers have <a href="https://www.nysenate.gov/legislation/bills/2025/S1239/amendment/A" target="_blank" rel="noopener">proposed a law</a> that would ban seven food dyes from public schools and eliminate Red Dye 3 and two other food additives statewide.</p>
<p>Ultra-processed foods, which have typically undergone many industrial changes such as the addition of preservatives, sweeteners, and artificial flavors, have been linked to 32 health conditions, according to a 2024 <a href="https://www.bmj.com/content/384/bmj-2023-077310" target="_blank" rel="noopener">review</a> in the British Medical Journal (BMJ), including heart disease, diabetes, mental health disorders and obesity. About <a href="https://www.cdc.gov/obesity/childhood-obesity-facts/childhood-obesity-facts.html" target="_blank" rel="noopener">one in five US children</a> between the ages of two and 19 are obese. Eating ultra-processed foods has also been associated with <a href="https://www.clinicalnutritionespen.com/article/S2405-4577(22)01132-9/fulltext" target="_blank" rel="noopener">attention-deficit/hyperactivity disorder (ADHD) in children</a>.</p>
<p>Some industry players have pushed back against the growing negative perception of ultra-processed foods, with General Mills reportedly arguing in a <a href="https://www.startribune.com/ultra-processed-food-is-tasty-and-easy-how-bad-is-it-for-you/600371266" target="_blank" rel="noopener">letter</a> to the Department of Health and Human Services last year that “Not all processed foods are nutritionally equivalent and do not have the same impact on health.”</p>
<p>Processing is “part of a complex food system that helps consumers meet nutritional needs within their abilities, budget and preferences,” wrote General Mills.</p>
<p>Countries around the world have banned ingredients with concerning health effects that are still commonly used in US foods, including titanium dioxide, brominated vegetable oil and artificial food dyes.</p>
<p>“We hope that this bill will inspire food companies to tweak their recipes and remove unnecessary harmful additives so that they can continue to access this enormous [California] market,” said Gabriel.</p>
<p>(Featured image by <a href="https://unsplash.com/@gainingvisuals?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash" target="_blank" rel="noopener">Gaining Visuals</a> on <a href="https://unsplash.com/photos/orange-and-white-plastic-pack-0hyliwOpNH0?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash" target="_blank" rel="noopener">Unsplash</a>.)</p>

            
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Abundance Isn't Going to Happen Unless Politicians Are Scared of the Status Quo (212 pts)]]></title>
            <link>https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless</link>
            <guid>43495644</guid>
            <pubDate>Thu, 27 Mar 2025 17:09:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless">https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless</a>, See on <a href="https://news.ycombinator.com/item?id=43495644">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>“</span><a href="https://www.scottlucas.me/the-housing-caucus" rel="">Too many goods created a bad</a><span>.”</span></p><p>That’s how California Governor Jerry Brown put it in 2017 when he signed a package of 15 housing-related bills, the first YIMBY-supported pro-housing bills. He was explaining, in his meandering way, how the housing shortage was the result of hundreds of well-intentioned laws, which had promised all kinds of things, but mostly succeeded in slowing down the production of new housing.</p><p><span>In many ways, Jerry was ahead of the curve. He was lamenting “</span><a href="https://www.nytimes.com/2023/04/02/opinion/democrats-liberalism.html" rel="">everything bagel liberalism</a><span>” and “</span><a href="https://marginallyproductive.com/2020/07/08/process-oriented-politics/" rel="">process over outcomes”</a><span> before it was cool.</span></p><p>But at the same time, there was a distinct lack of fire under the Governor’s ass. He was skeptical that this new legislation would do much to unwind the tangled legal web holding back housing production. And while we YIMBYs were bright eyed and bushy tailed, seeing as it was the first state bill signing we’d been invited to, it was also kind of depressing.</p><p><span>Less than ten years later, the discourse is suddenly</span><em> all about</em><span> the seemingly simple idea that we should “do things and build things,” and there is finally a sense of urgency. I’m heading to Atlanta this week to interview Derek Thompson about his new book </span><em><a href="https://bookshop.org/p/books/abundance-what-progress-takes-derek-thompson/20165403?ean=9781668023488&amp;next=t&amp;affiliate=2181" rel="">Abundance</a></em><span> with Ezra Klein at the Georgia Center for the Book (</span><a href="https://www.acappellabooks.com/pages/events/1332/georgia-center-for-the-book-presents-derek" rel="">tickets</a><span>). Their thesis is simple: we need more of everything. More housing, more immigrants, more clean energy infrastructure.</span></p><p>And Klein and Thomson’s book is just the latest entry into the growing genre that attempts to address the root causes of stagnation in America and prescribe a path towards abundance and renewal. Recent books in this genre include:</p><ul><li><p><em><a href="https://www.hachettebookgroup.com/titles/marc-j-dunkelman/why-nothing-works/9781541700215/" rel="">Why Nothing Works</a></em><span> by Marc J. Dunkelman</span></p></li><li><p><em><a href="https://www.amazon.com/dp/0593449290/ref=mes-dp?_encoding=UTF8&amp;pd_rd_w=jmm7l&amp;content-id=amzn1.sym.7d2923e8-7496-46a5-862d-8ef28e908025&amp;pf_rd_p=7d2923e8-7496-46a5-862d-8ef28e908025&amp;pf_rd_r=X4ZZ1XY6FB725V25M091&amp;pd_rd_wg=d3jBw&amp;pd_rd_r=9360970f-e272-462b-9a4a-c861c20f7fc1" rel="">Stuck</a></em><span> by Yoni Applebaum,</span></p></li><li><p><em><a href="https://www.amazon.com/dp/1250266777/ref=mes-dp?_encoding=UTF8&amp;pd_rd_w=jmm7l&amp;content-id=amzn1.sym.7d2923e8-7496-46a5-862d-8ef28e908025&amp;pf_rd_p=7d2923e8-7496-46a5-862d-8ef28e908025&amp;pf_rd_r=X4ZZ1XY6FB725V25M091&amp;pd_rd_wg=d3jBw&amp;pd_rd_r=9360970f-e272-462b-9a4a-c861c20f7fc1" rel="">Recoding America</a></em><span> by Jennifer Pahlka,</span></p></li></ul><p><span>Meanwhile Ned Resnikoff is </span><a href="https://resnikoff.beehiiv.com/p/the-abundance-discourse-trap" rel="">pointing out that YIMBYs were doing abundance before it was cool (or maybe were the driving force in making it cool)</a><span>. While I appreciate the credit to the original YIMBY brand, I’m choosing to adopt an abundance mindset about abundance. More is more, after all.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png" width="1200" height="900" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:900,&quot;width&quot;:1200,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:949873,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://inpractice.yimbyaction.org/i/159774522?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>As I see it, the Abundance concept isn’t quite an ideology, it’s more of a refocusing on outcomes. It’s a framework that points to tangible outcomes and asks us to tactically identify what is blocking progress to that goal, irrespective of what the intention of that blockage might be. It extends the classic YIMBY way of doing politics into a larger philosophy. It is a re-focusing on “ends” over “means,” and allows for a variety of ideologies to come together on specific ends. The language around “outcomes focused legislating” brings some degree of sanity to our often self-sabotaging process.</p><p>Outcome-based politics seems so obvious that it can sound silly to say it out loud. Government should deliver material outcomes. Elected officials should be extremely motivated to produce tangible outcomes for the largest number of people.</p><p>So why isn’t that happening?</p><p><span>The hot topic in the growing abundance discourse is </span><a href="https://www.niskanencenter.org/policy/state-capacity/" rel="">state capacity</a><span>. That’s a fancy term for a simple concept — the government’s ability to deliver outcomes, whether those are growing the economy, establishing laws, or just picking up the garbage.</span></p><p><span>It’s not a new idea. In fact, five decades ago, some of the world’s most pre-eminent political scientists fretted about the erosion of state capacity in democracies across the world. “The demands on democratic government grow,” </span><a href="https://web.archive.org/web/20120309011043/http://www.trilateral.org/download/doc/crisis_of_democracy.pdf" rel="">wrote Michael Crozier, Samuel Huntington, and Joji Watanuki</a><span>, “while the capacity of democratic government stagnates.”</span></p><p><span>Sounds familiar, doesn’t it? They argued that in countries like the United States, Japan, and Western Europe, citizens were asking their governments to take on more and more without increasing their government’s ability to carry out those projects. That led to an erosion in legitimacy, and decades of retrenchment and cutbacks. About the only thing that the left and the right seemed to agree on was that the “</span><a href="https://clintonwhitehouse4.archives.gov/WH/New/other/sotu.html#:~:text=The%20era%20of%20big%20government,virtues%3B%20we%20must%20have%20both." rel="">era of big government is over</a><span>.”</span></p><p><span>The 70’s was an era of community organizing to stop The Big Bad Thing, and this urge to tap the breaks continues to this day. Elaborate outreach processes, reporting requirements and the opportunities for objections about those reports… they all can seem reasonable. But added together they created a mighty web. Marc Dunkelman explained the problem of this approach on </span><a href="https://slate.com/podcasts/political-gabfest/2025/02/politics-justice-department-scandal-amid-corrupt-bargain-of-eric-adams" rel="">a recent episode of the Political Gabfest</a><span>: “We've now created a system where there are so many veto players and you need so many approvals that government fundamentally doesn't work.”</span></p><p><span>Little by little, we stitched together a gigantic wet blanket that continues to hold back housing production. It’s easy to blame liberals, but like all of our worst problems, it was bipartisan. Conservatives liked constraining government because they didn’t trust it. Liberals liked constraining it because they overestimated how much those constraints would produce better outcomes like protecting the marginalized, preserving the environment, and elevating the voices of the community. And people who felt that integration was a threat, helped </span><a href="https://www.nytimes.com/2021/02/16/opinion/ezra-klein-podcast-heather-mcghee.html" rel="">create innumerable local processes to tap the brakes on all kinds of public goods and housing</a><span>.</span></p><p><span>As a society, we have chronically underestimated the cost of all this. It’s a chronic case of letting the perfect be the enemy of the good. Every constraint makes the continuation of the status quo more likely. Legislators and advocates know this, but treat it like the normal cost of getting the sausage made. In the process of getting pro-housing bills passed, I’ve had countless arguments with other advocates and legislators over the innumerable ways bills are weakened. And while we’re taking steps in the right direction, </span><a href="https://www.yimbylaw.org/law-journal/californias-streamlining-laws-dlf8x" rel="">the outcomes still aren’t great.</a></p><p>State capacity is being eaten by excessive process. Overly restrictive rules (zoning) and elaborate process (permitting and planning) create chronic shortages driving prices higher and creating an angry populace. That’s the TLDR thesis of a lot of the abundance books. Things grind to a halt. People suffer. It all feels incredibly self-sabotaging and frustrating.</p><p>That brings us to today, in which people across the country are mad that shit sucks. I could say more but, come on, shit sucks. Prices are high, infrastructure is crumbling, people are pissed, you’ve heard this already.</p><p>There are two big responses happening right now:</p><ol><li><p>Tear down (DOGE vibes)</p></li><li><p>Build up (Abundance vibes)</p></li></ol><p><span>The DOGE point of view says </span><em>if the government can’t do anything, we should just get rid of the government</em><span>. That appeals to many Americans because they are angry. The frustrated urge to blow it all up is strong. As a rule, shortages do not bring out the best in humanity. They make us blame perceived-outsiders and foster the urge to topple governments.</span></p><p>The housing shortage fosters a “crabs in a bucket” mentality everywhere, from Blue-dot cities to Red rural communities. Whether your enemy is yuppies, coastal elites or immigrants, the through-line is that there isn’t enough to go around and someone is stealing from us. The DOGE-style of governance is about trying to tell everyone who has been stealing and publicly firing those people.</p><p><span>The alternative gaining traction is a (sometimes vague) notion of abundance, which boils down to “things should work.” But if these new books are any indication, the Build Up team is feeling more urgency. The consensus that government is not delivering tangible good outcomes for average people is </span><em>finally </em><span>being recognized as an existential threat to the democratic project. The constituency for “can we please just fucking do things” is real.</span></p><p>YIMBY has a practical goal of housing abundance. And for years, YIMBYs have been building ideologically diverse coalitions aligned on that specific, narrow goal.</p><p><span>And while that work is great, my key point is that </span><em>we are running out of time</em><span>. “Get your house in order” should have a deep level of urgency right now. Elected officials at the state and local level need to rebuild the belief that government is worth preserving and can deliver a thriving middle class.</span></p><p>We are in the middle of a race between the destroyers and the builders, and too many elected officials are twiddling their thumbs the sinking ship of the status quo.</p><p>People will nod and agree to everything I just said above, but what does it actually look like in practice?</p><p><span>Literally yesterday I spoke with a city council member who was thinking about introducing single stair reform in their city. He knew how it </span><a href="https://www.jchs.harvard.edu/blog/how-could-legalizing-mid-rise-single-stair-housing-expand-and-improve-housing-supply" rel="">could be a deeply impactful reform</a><span> and </span><a href="https://www.pewtrusts.org/en/research-and-analysis/reports/2025/02/small-single-stairway-apartment-buildings-have-strong-safety-record" rel="">is completely safe</a><span>. But then he said “We can’t do it without the support of the firefighters union, and they’re deeply opposed.” </span><a href="https://www.niskanencenter.org/understanding-single-stair-reform-efforts-across-the-united-states/" rel="">Every redundant requirement was deliberately put there by someone who doesn’t think it needs reform and will fight it.</a><strong> </strong><span>Most elected officials weigh the various highly engaged stakeholders, as if they represent the average voters in their district. They’re not.</span></p><p><span>YIMBY Action, through </span><a href="https://yimbyaction.org/get-involved/what-is-a-chapter/" rel="">our local chapter model</a><span>, is building a visible constituency to incentivize politicians to take bolder action on housing. But politicians need to get ahead of this. To critique my own work: it shouldn’t be necessary! Elected officials should be more concerned that the general public is feeling economically stunted and enraged!</span></p><p><span>The status quo is a </span><em>downward trajectory</em><span> and you will be punished electorally for maintaining it. If people continue to feel economically stunted, they will continue to boot incumbents. Being committed to outcomes requires continuous deep commitment to pushing back, with the knowledge that outcomes add up to that important “right track / wrong track” polling data.</span></p><p data-attrs="{&quot;url&quot;:&quot;https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tracing the thoughts of a large language model (714 pts)]]></title>
            <link>https://www.anthropic.com/research/tracing-thoughts-language-model</link>
            <guid>43495617</guid>
            <pubDate>Thu, 27 Mar 2025 17:05:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.anthropic.com/research/tracing-thoughts-language-model">https://www.anthropic.com/research/tracing-thoughts-language-model</a>, See on <a href="https://news.ycombinator.com/item?id=43495617">Hacker News</a></p>
Couldn't get https://www.anthropic.com/research/tracing-thoughts-language-model: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Zoom bias: The social costs of having a 'tinny' sound during video conferences (124 pts)]]></title>
            <link>https://phys.org/news/2025-03-bias-social-tinny-video-conferences.html</link>
            <guid>43495465</guid>
            <pubDate>Thu, 27 Mar 2025 16:49:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://phys.org/news/2025-03-bias-social-tinny-video-conferences.html">https://phys.org/news/2025-03-bias-social-tinny-video-conferences.html</a>, See on <a href="https://news.ycombinator.com/item?id=43495465">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
										
<div data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2021/zoom-call-1.jpg" data-src="https://scx2.b-cdn.net/gfx/news/hires/2021/zoom-call-1.jpg" data-sub-html="Credit: Unsplash/CC0 Public Domain">
        <figure>
            <img src="https://scx1.b-cdn.net/csz/news/800a/2021/zoom-call-1.jpg" alt="zoom call" title="Credit: Unsplash/CC0 Public Domain" width="800" height="530">
             <figcaption>
                Credit: Unsplash/CC0 Public Domain
            </figcaption>        </figure>
    </div><p>Most job candidates know to dress nicely for Zoom interviews and to arrange a professional-looking background for the camera. But a new Yale study suggests they also ought to test the quality of their microphones.</p>


										      
																																	<p>A tinny voice caused by a cheap mic, researchers say, could sink their chances.</p>
<p>Through a series of experiments, the study demonstrates that tinny speech—a thin, metallic sound—during video conferences can have surprisingly deep social consequences, leading listeners to lower their judgments of a speaker's intelligence, credibility, and romantic desirability. It can also hurt an individual's chances of landing a job.</p>
<p>These effects could be a potential source of unintentional bias and discrimination, given the likelihood that microphone quality is correlated with <a href="https://phys.org/tags/socioeconomic+status/" rel="tag">socioeconomic status</a>, the researchers said.</p>
<p>"Now that videoconferencing has become so ubiquitous, we wondered how the sounds of people's voices might be influencing others' impressions, beyond the actual words they speak," said senior author Brian Scholl, professor of psychology in Yale's Faculty of Arts and Sciences and the Wu Tsai Institute.</p>
<p>"Every experiment we conducted showed that a familiar tinny or hollow sound associated with a poor-quality microphone negatively affects people's impressions of a speaker—independent of the message conveyed.</p>
<p>"This is both fascinating and concerning, especially when the sound of your voice is determined not just by your vocal anatomy, but also by the technology you're using."</p>
<p>The study is <a href="https://doi.org/10.1073/pnas.2415254122" target="_blank">published</a> in the journal the <i>Proceedings of the National Academy of Sciences</i>. Robert Walter-Terrill, a Ph.D. candidate in psychology in Yale's Graduate School of Arts and Sciences, is the study's lead author. Joan Danielle K. Ongchoco, an assistant professor in the psychology department of the University of British Columbia, and a former Ph.D. student at Yale, is a co-author.</p>

																																						
																																			<p>Scholl, who is also director of the Yale Perception &amp; Cognition Lab, was inspired to pursue the study by a faculty meeting that he had participated in over Zoom during the early stages of the COVID-19 pandemic.</p>
<p>During that video conference, one colleague was using a high-quality microphone in his home recording studio, which made his voice sound especially rich and resonant. Another colleague was using an old laptop that lent a tinny quality to his voice.</p>
<p>In that moment, it occurred to Scholl that the points raised by the colleague with the better sound quality seemed more profound, and those raised by the colleague with the weak mic seemed less compelling, even though he tended to see eye to eye with the latter colleague. It made him curious about how superficial audio quality may affect listeners' perceptions of a speaker.</p>
<p>To answer that question, the researchers performed a series of six experiments in which participants listened to a short speech recording and then made judgments about the speaker.</p>
<p>In each experiment, half of the participants were randomly assigned to listen to a recording that was clear and lively as though delivered through a high-quality microphone, while the other half heard a distorted version of the same message that mimicked the tinny and hollow sound associated with poor-quality microphones.</p>
<p>Importantly, the words themselves were always identical, and the distortions did not affect the comprehensibility of the messages: In each experiment, the participants were asked to transcribe the words and sentences they had heard to confirm they had understood them.</p>

																									
																																			<p>Across the experiments, the researchers varied both the speaker's gender (male and female) and accent (American and British). In some experiments, they even used obviously computer-synthesized voices, for which the "speakers" clearly couldn't be responsible, in terms of either their vocal anatomy or their microphone choices.</p>
<p>In an experiment testing the effects of <a href="https://phys.org/tags/microphone/" rel="tag">microphone</a> quality on whether a candidate is hirable, participants listened to a male human voice deliver a standard elevator pitch for a sales job. (This experiment was repeated using a computerized voice. It was also used to test the effects of audio quality on perceptions of intelligence.)</p>
<p>In an experiment concerning romantic desirability, they listened to a female human voice responding positively to a potential suitor's profile on a dating app. In one focused on credibility, participants listened to a computerized female voice with a British accent deny culpability for a traffic accident.</p>
<p>In these and the other experiments, participants' value judgments significantly favored the recordings with the richer and more resonant tones. They perceived the people from the higher-quality recordings as more hirable, desirable, intelligent, and credible. This work shows that judgments from speech are based not only on the content of their message, but also on the superficial vehicle through which that message is delivered.</p>
<p>The researchers noted that this effect may be particularly difficult to notice in practice.</p>
<p>"During videoconferencing, of course, you know how you look, since you can see yourself too," Walter-Terrill noted. "But on a call with dozens of people, you may be the only one who doesn't know how you sound to everyone else: you may hear yourself as rich and resonant, while everyone else hears a tinny voice."</p>

																																																					
																				<div>
																						<p><strong>More information:</strong>
												Walter-Terrill, Robert et al, Superficial auditory (dis)fluency biases higher-level social judgment, <i>Proceedings of the National Academy of Sciences</i> (2025). <a data-doi="1" href="https://dx.doi.org/10.1073/pnas.2415254122" target="_blank">DOI: 10.1073/pnas.2415254122</a>. <a href="https://doi.org/10.1073/pnas.2415254122" target="_blank">doi.org/10.1073/pnas.2415254122</a>
																						
																						</p>
																					</div>
                               											
																					
                              										                                        
										<!-- print only -->
										<div>
											 <p><strong>Citation</strong>:
												Zoom bias: The social costs of having a 'tinny' sound during video conferences (2025, March 24)
												retrieved 27 March 2025
												from https://phys.org/news/2025-03-bias-social-tinny-video-conferences.html
											 </p>
											 <p>
											 This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no
											 part may be reproduced without the written permission. The content is provided for information purposes only.
											 </p>
										</div>
                                        
									</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Launch HN: Continue (YC S23) – Create custom AI code assistants (153 pts)]]></title>
            <link>https://hub.continue.dev/explore/assistants</link>
            <guid>43494427</guid>
            <pubDate>Thu, 27 Mar 2025 15:06:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hub.continue.dev/explore/assistants">https://hub.continue.dev/explore/assistants</a>, See on <a href="https://news.ycombinator.com/item?id=43494427">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Custom AI code assistants are configurations of building blocks that enable you to receive assistance tailored to your specific use cases</p><a href="https://docs.continue.dev/hub/assistants/intro" target="_blank" rel="noopener noreferrer">Learn more<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M15 3h6v6"></path><path d="M10 14 21 3"></path><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path></svg></a></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A filmmaker and a crooked lawyer shattered Denmark's self-image (190 pts)]]></title>
            <link>https://www.theguardian.com/world/2025/mar/27/black-swan-denmark-documentary-mads-brugger-amira-smajic</link>
            <guid>43493159</guid>
            <pubDate>Thu, 27 Mar 2025 13:01:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/world/2025/mar/27/black-swan-denmark-documentary-mads-brugger-amira-smajic">https://www.theguardian.com/world/2025/mar/27/black-swan-denmark-documentary-mads-brugger-amira-smajic</a>, See on <a href="https://news.ycombinator.com/item?id=43493159">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p><span>T</span>he trap was laid in a rented office: two rooms in downtown Copenhagen, furnished without a whisper of Scandi style. If it wasn’t for a Frida Kahlo print on one wall, the premises might have felt as impersonal and stark as a confessional. That, in any event, was what it became. For six months, beginning in mid-2022, a parade of people – members of motorcycle gangs, entrepreneurs, lawyers, real-estate barons, politicians – trooped through to recount their sins to Amira Smajic. They didn’t come for expiation. They knew Smajic to be one of them – an outlaw, and in her particular case, a business lawyer so skilled at laundering money that she’d enabled a couple of billion kroner in financial crime over the previous decade. They called her the Ice Queen, because she showed not a flicker of regret for what she did.</p><p>In her office, Smajic’s visitors bragged about dodging tax, bribing officials or exploiting the bankruptcy code. She offered them coffee and coaxed forth their confidences. Six cameras and three microphones, secreted in power sockets, captured it all – footage that was turned into a documentary called The Black Swan. In its surreptitious method and breathtaking drama, The Black Swan bore all the fingerprints of its director, Mads Brügger, a provocateur who has spent his career searching for bombshells to drop but who had never quite managed it as well as he did here. Denmark’s national bird is the <em>Cygnus olor</em>, a swan as white as virtue. The Black Swan, in showing such easy, unbridled formulations of crime, blew up Denmark’s idea of itself.</p><p>Since airing last May as a five-part series on TV2, Denmark’s biggest television network, The Black Swan has sent the country into convulsions. One out of every two Danes has seen the documentary. After its release, a biker-gang member and his accountant were charged with financial crimes and taken into custody; others, including a municipal official, are under investigation. The Danish Bar and Law Society formally apologised to the minister of justice for the conduct of two lawyers caught on camera; they have been either fired or disbarred. A new money-laundering law was introduced to give banks more oversight over “client accounts” – the kind of accounts in which lawyers pool the funds of several clients and transact on their behalf, and that featured in many of the machinations in Smajic’s office. In her New Year’s speech, Denmark’s prime minister suggested biker-gang criminals ought to be stripped of their pension rights – a detail so specific it was surely inspired by The Black Swan.</p><p>Other Scandinavian nations also reeled upon watching The Black Swan. After the series premiered in Sweden, a criminologist at Lund University warned: “There’s a lot of evidence that it’s probably even worse here.” Norwegian civil servants invited Brügger to Oslo in January to talk to them about money-laundering. All of Scandinavia, he believes, has persuaded itself that crime exists only in violent, poor abscesses on the edges of their societies. “The Danes totally subscribe to this idea that Denmark has no corruption, and to the idea of Denmark as the end of the road,” Brügger said, referring to the political scientist Francis Fukuyama’s notion that “getting to Denmark” is the goal of every modern democracy. “The Black Swan punctured that hallucination,” Brügger said. “It was Denmark’s red-pill moment.”</p><p>Sitting in the Copenhagen offices of Frihedsbrevet, or Freedom Letter, an investigative journalism site Brügger co-founded in 2021, I asked him what ordinarily passes for corruption in Denmark. He thought about it for a comically long time. During his boyhood, he recalled, one major scandal involved a small-town mayor being bribed with a bathroom renovation for his home. In 2011, Danish newspapers carried as front-page news the revelation that the prime minister, Helle Thorning-Schmidt, was leasing her car from Germany, saving €20 a month and depriving the exchequer of €70 a month in tax. Brügger had told a Greek friend about this brouhaha; the friend stared at him and said: “Back home, we’re talking about a politician who was given an entire island as a bribe.” Brügger also related a Frihedsbrevet scoop: Copenhagen’s leading newspaper editors had been attending a Proust book club run by a government official, a degree of socialising that Brügger characterised as unhealthy. This was, he was suggesting, the scale of grift Danes were used to – chump-change tax avoidance and highbrow hobnobbing – until The Black Swan came along.</p><p>But he was embroidering for effect. There have been graver controversies: a stock price manipulation scheme in 2008; a money-laundering case <a href="https://www.theguardian.com/business/2018/sep/21/is-money-laundering-scandal-at-danske-bank-the-largest-in-history" data-link-name="in body link">involving Danske Bank</a>; a $1bn tax fraud case that ended in a 12-year prison sentence for its mastermind last December. Michael Bang Petersen, a political scientist at Aarhus University who studies trust in Danish society, told me that citizens’ trust in politicians has fallen by 20 percentage points since 2007. But their trust in fellow citizens has stayed stable. When asked if they can trust most people, an astonishing 80% of Danes reply in the affirmative. Lawyers, roasted as rogues practically everywhere, enjoy a glowing reputation in Denmark, and the welfare state is revered, as inviolable as a cathedral.</p><p>“We’re taught from a young age that cheating the system is not something you do, because you end up pissing on everybody,” Ane Cortzen, a television presenter and Brügger’s sister, told me. “Cheating on taxes is one of the most serious crimes you can commit.” Kalle Johannes Rose, an associate professor at Copenhagen Business School, observed: “Most Danish scandals have to do with the state – public healthcare, public banks, public something or the other. People want to know their high taxes are being spent correctly. If they don’t trust the system, they don’t pay their taxes, and then the house of cards falls down.” The Black Swan thus invited viewers to dwell on their worst nightmare: a shattering of the trust that underpins not just the smooth functioning of their beloved welfare state but the essence of what makes Danes proud to be Danes.</p><hr><p><span>A</span>mira Smajic wears her dark hair pulled back so tightly that her skin tightens around her high cheekbones. It lends her the severe, credible look of a schoolteacher, doubtless an asset during her years of crime. In her first job after university, at an accounting firm, Smajic quickly sensed they were skating close to the edge of the law. Her employer was subsequently <a href="https://www.tv2fyn.dk/odense/amiras-laeremester-gav-gode-raad-paa-tv-men-traekker-spor-af-kriminalitet-bag-sig" data-link-name="in body link">convicted</a> of fraud and forgery – but by then, Smajic had struck out on her own, working with Denmark’s biker gangs, which are notorious for criminality and violence. “I specialised in making accounts look as needed – getting white money to turn black and vice versa,” she says in the film. For these services, she earned several hundred thousand kroner a month. “I shopped in Louis Vuitton every week. I bought shoes like other people buy milk.”</p><figure id="242ddae3-3346-4bf5-8735-d09d40c05c63" data-spacefinder-role="showcase" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-2"><picture><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=880&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=880&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=800&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=800&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=640&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=640&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A woman with dark hair looks pensive and to the side of the image" src="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="234.66796875" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Amira Smajic in a still from The Black Swan.</span> Photograph: Wingman Media/TV2 Denmark</figcaption></figure><p>In 2020, wearying of the paranoia and guilt of this delinquent life, Smajic thought of going public – through a book, perhaps, or a film. Having met several publishers and journalists, she eventually found her way to Brügger, and she commanded every shred of his attention. Over sushi, she told him so much about her connections with the criminal underworld that “she was clearly the real deal”, Brügger told me. He was instantly smitten, in that half-ardent, half-extractive way that journalists are with their subjects.</p><p>Brügger and TV2 first considered investigating the old contracts, emails and texts in Smajic’s files. But Michael Nørgaard, TV2’s editor-in-chief, said he was aware that Smajic had spent years engaging in fraud and forgery. “Could we believe that the materials she came to us with were intact – that she didn’t take out documents to put her in a better light?” he wondered. The idea to open a new office and clandestinely film its operations, Brügger and Nørgaard told me, came from Smajic. In a 2021 email, which Brügger showed me, Smajic excitedly laid out five pages of plans to monetise her past: articles, newsletters, podcasts, an eight-part true-crime show, the documentary, four books, the full panoply of a repentance empire. The arc, Smajic wrote, referring to herself in the third person, would be of “her social and moral redress”.</p><p>Brügger says he believed her. Smajic had come to Denmark as a child refugee from Bosnia, along with her family, and on one occasion she told Brügger that her father, who’d died of cancer, would have been disappointed that she’d turned to crime after Denmark had taken her in. “I will never get out of this life if I do nothing,” Smajic says in the first episode, with the air of a woman plotting to burn a bridge even as she flees over it. Before filming began, a security expert talked Smajic through the consequences of making the documentary, Brügger told me. “He didn’t spare her. He said she may have to relocate to another country, change her name, or not see her friends any more. She was crying, and I thought: ‘OK, that’s it. She’s out.’ But she insisted on continuing.”</p><p>Brügger and Nørgaard knew one more thing about Smajic. She was at the time, and had been for years, a police informant. On her request, they withheld that from the documentary – but they also didn’t let the police know in advance about the trap they were setting. In a brief contract, drafted at the outset of production and barely two pages long, Brügger’s producer, Peter Engel, stipulated that Smajic would be paid 30,000 kroner (roughly £3,350) a month. Engel said she also agreed to refrain from any actual criminal activity during production. In the opening minutes of The Black Swan, sitting across a desk from Smajic in a room resembling an interrogation chamber, Brügger asks her what the worst outcome of her undertaking could be. She replies: “That someone finds out and I will be liquidated before any of this is shown.”</p><hr><p><span>T</span>he suspense of whether Smajic will be unmasked keeps The Black Swan as taut as a bowstring. The documentary’s more immediate shocks come from watching people methodically plan to break the law. The crimes range from the paltry to the serious. A man named Wassem, to whom Smajic introduces herself in the first episode, runs a shawarma shop and wants to skip out on tax. Fasar Abrar Raja, a grey-bearded member of a motorcycle gang called Bandidos, helps demolition crews dispose of asbestos and other toxic material without the costly safety measures the law requires. For a fee, he will bribe environmental analysts and local officials to look the other way while he dumps the material in the Danish countryside. Fasar also brings along Martin Malm, a smooth-faced businessman who launders millions of kroner a month through his “invoice factories”: companies that issue fake invoices for services never rendered. (Malm might invoice a nightclub owner for providing bouncers, say; the owner would pay Malm, who’d keep a fee and return the rest to the owner in cash or some other fashion, allowing him to avoid paying tax on it. The bouncers, needless to say, don’t exist.)</p><p>One of the film’s revelations, Brügger says in a voiceover, is the connection “between the nice-looking, everyday citizens and the underworld”. In Smajic’s presence, a lawyer named Lise Roulund delivers to Fasar a USB drive full of confidential documents she has obtained from the police – an illegal act in itself. On suspicions of money-laundering, Fasar’s bank account has been frozen, so Roulund helps him enact his tax dodges by transferring money in and out of an account she controls. Without lawyers willing to look the other way, criminal activity would seize up, Roulund says. “We’re the ones who make it go around.”</p><p>Another lawyer, named Nicolai Dyhr, <a href="https://nyheder-tv2-dk.translate.goog/krimi/2024-05-15-topadvokat-fanget-paa-skjult-kamera-lovede-at-daekke-over-fakturafabrik-og-opfordrede-til-selskabssvindel?_x_tr_sl=da&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=sc" data-link-name="in body link">a partner at one of Denmark’s most prestigious law firms</a>, is a fount of suggestions on how to exploit the bankruptcy code. He lays out how Wassem could shutter his shawarma business, declare bankruptcy and avoid a tax debt of 2.4m kroner; he even details how Wassem could squeeze additional money out of a government fund that guarantees worker salaries while companies are going through bankruptcy. Malm, the businessman with the invoice factories, also files for bankruptcy, and Dyhr advises him to hide evidence of fraud and deliberately undervalue his businesses. (Later, Dyhr claimed he was “eel-trapping” – leading Malm on to secure him as a client, but with no plans to commit crimes. Dyhr sued TV2, demanding that all covert footage of him be edited out of the film, but <a href="https://nyheder.tv2.dk/samfund/2024-05-30-topadvokat-taber-sag-mod-tv-2-i-retten" data-link-name="in body link">lost</a> his case. Fasar denied committing the crimes discussed on camera; Malm told TV2 it “didn’t have the whole picture”; Roulund has refused to comment.)</p><p>By themselves, the sums of laundered money bandied about run only to a few million pounds, small enough in scale that one expert described it to me as <em>hyggekrim</em> – crime so domestic it’s practically cosy. But all these cons purport to show how simple it is to exploit the Danish state. It was one of the earliest lessons of Smajic’s career, she says: “The state always pays.”</p><p>Some episodes of The Black Swan prickle with violence. On a trip to his native Pakistan, Fasar discusses killing a patient in a hospital – a potential witness in a trial against him. (Nørgaard told me TV2 tipped off the Danish police about Fasar’s plans.) After returning to Copenhagen, Fasar storms into Smajic’s office, threatening to “crush you with my bare hands” because she has failed to secure a Danish passport for his daughter. Without breaking character, Smajic mollifies him. By the end of the meeting, they’re reminiscing about how a mental illness diagnosis concocted years ago has kept Fasar out of prison for drug and arms trafficking offences, and he’s laughing along. It’s an astonishing performance from Smajic – like watching someone act out Hamlet while walking a high wire.</p><p>Then, in the final episode, we learn Smajic is an even more nerveless and consummate actor than we thought – that she has double-crossed Brügger himself.</p><p>From one of Smajic’s sound recorders, the producers recover a file she has deleted, and discover that she knows Wassem far better than she lets on. His name is not even Wassem, and from their conversation on the file, about transporting cash, she seems to be engaged in an entirely different caper with him, one that Brügger and TV2 know nothing about. Upon investigation, they find she has secretly been running a second office, where they suspect she has been laundering hundreds of thousands of kroner via invoice factories for other clients. (Smajic has said she never facilitated any crimes during this period.) In <a href="https://nyheder.tv2.dk/samfund/2024-07-04-nye-tv-2-afsloeringer-faar-muldvarps-fortaelling-til-at-smuldre-yderligere" data-link-name="in body link">one case</a>, TV2 claims to have found undiluted fraud: Smajic embezzling 65,000 kroner from a client by forwarding him emails that she’d fabricated, and that appeared to be from the tax authority. Smajic isn’t a crook on the mend at all, the film concludes; she’s a crook in the thick of committing an assortment of crimes. When she finds out that Brügger and his colleagues know about her side hustles, she demands the documentary be shelved.</p><p>All documentaries are artificial: their footage has been carefully threshed and sieved with an eye to telling a story or pushing an argument. The Black Swan, though, relies on the unblinking, real-time gaze of hidden CCTV cameras, so we lull ourselves into thinking that we’re seeing the full picture, the full truth. No such thing. Instead, we get evasion upon evasion: Smajic’s charade for her clients, Malm cheating the taxman, TV2 withholding their work from the police, Brügger keeping details from his audience. Smajic’s final bluff merely confirms what Brügger seems to have believed throughout his career: everywhere, there are conspiracies and lies that he must expose, even if he has to participate in the dissembling himself.</p><hr><p><span>B</span>rügger, who turns 53 in June, is a very tall, very bald man with a very red beard. He never seems to run out of conversational energy; whatever time of day it is, he’s likely to be ready to talk for hours, looking at you unblinkingly through his chunky spectacles as he tells you how bizarre or absurd the world really is. When I first met him, at the Frihedsbrevet offices in January, we loitered in the building’s courtyard, our pates goose-pimpling over in the Danish winter, so he could finish his cigarette. He warmed us up with fresh gossip. We had originally planned to attend, that evening, a public lecture by three TV2 journalists about The Black Swan. But Smajic had emailed the journalists a few days earlier, promising to show up and ask a few questions of her own, such as: “How does it feel to take credit for a program I pay for with my life (even though I’m still breathing, yes)?” or “How many people have you thrown under the bus against your better judgment to make your story work?”</p><p>After the documentary’s release, fearing for her safety and that of her young son, Smajic had gone into hiding, so her cameo at the lecture would have been sensational. She would bring “a bunch of friends”, she warned – and then, in a second email, added: “Have you thought about and arranged security for that night … The assessment is that my participation that evening increases the risk for both me, you and the audience.”</p><p>Citing caution, TV2 cancelled the event. I couldn’t tell if Brügger felt disappointed or vindicated – the first at the dashed prospect of seeing Smajic rising in the audience and setting it abuzz, the second at how Smajic’s emails appeared laced with an articulate derangement. “She’s an expert in creating conflict and manipulating people,” he told me. “If you plant her inside a biker gang, she could tear it apart within two weeks.”</p><figure id="cd5cbf35-ce37-4549-b962-0ae96e7562ed" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-3"><picture><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A women with her hair in a tight bun talks intensely to a man with a full beard. Both are gesticulating." src="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="222.5" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Smajic and Fasar Abrar Raja in a still from The Black Swan.</span> Photograph: Wingman Media</figcaption></figure><p>Brügger was raised in the belief that conflict makes for great copy. His parents were journalists, and at the dinner table, his sister, Ane Cortzen, said: “We’d talk about society and politics, and you couldn’t just sit and listen. You had to have an opinion.” Cortzen remembers Brügger as an inventive child obsessed with comic books, to the point that he developed a “very black-and-white view of the world, in which some people are good and some are evil”. (On the middle finger of his right hand, Brügger wears a skull ring as homage to The Phantom, a comic-book crimefighter who wears a skintight purple suit and lives in a cave resembling a human cranium.) At university, Brügger studied film-making, and then worked at the state broadcaster, where he met his longtime producer, Peter Engel. “The best thing, I discovered, is to let him do his own stuff,” Engel said. “If you hear there’s a black market for diplomatic credentials, an ordinary journalist will say: ‘I’ll interview the broker and write a piece.’ Mads would say: ‘Let me become a fake diplomat.’ He always wants to step into his own universe.”</p><p>As a documentarian, Brügger likes to make things happen. Not for him the Attenboroughian serenity of waiting for a lion to grow hungry and then track down its antelope; he’d rather starve the lion, hobble the antelope, and then introduce both beasts into a cage to film the carnage. In all his projects, Brügger has mounted elaborate, artificial setups just like Smajic’s office, and lured people into self-indictment, folly or sudden disclosures. Most of his films pivot on Brügger pretending to be someone he isn’t. In The Red Chapel, which won a Sundance award in 2010, he plays the manager of a pair of comedians touring North Korea. In The Ambassador, he impersonates a Liberian diplomat in Central African Republic. His cameras are, if not hidden, claiming to be present for benign purposes. In Pyongyang with his comedians, Brügger’s tapes were screened every night by a government agency; the film’s splenetic views of North Korea – “a sanctuary for crazy people” – emerge in the edits and in Brügger’s voiceovers. As in The Black Swan, the most burning question in these films is always: will someone tear the facade away and expose Brügger?</p><p>Even in Cold Case Hammarskjöld, in which Brügger tamely appears as himself – a film-maker smelling conspiracy behind the death of Dag Hammarskjöld, the UN secretary general, in a 1961 plane crash – he cannot resist a splash of play-acting. He wears an all-white outfit, down to his sneakers, because, as he says in his narration: “I know for a fact that the villain of this story, he wore only white.” Brügger fails to prove that this villain – a long-dead South African mercenary – actually brought down Hammarskjöld’s plane, but that kind of factfinding is, in any case, never the priority of his films. “Hammarskjöld was a ticket to all the things I really enjoy: tracking down mercenaries, telling tales of evil men who dress in white, [and] rumours about secret African societies,” Brügger says in one voiceover. He’s always out for spectacle, shock and a wild ride. “If Hunter S Thompson had gone into film and ditched all the drugs,” a Norwegian columnist wrote of Cold Case Hammarskjöld, “maybe this is what he could have ended up with.”</p><p>Brügger’s approach can leave his collaborators uneasy. When I spoke to one of the comedians in The Red Chapel, he euphemistically called Brügger’s journalism “uncompromising,” adding: “Mads is often portrayed as either a villain or a genius – and maybe he’s both.” An early collaborator described Brügger to me as ruthlessly ambitious – someone who wouldn’t hesitate to pilfer an idea or sell out a friend to make good TV. But he admits Brügger can be charming and persuasive, and I know what he means. When Brügger outlines his outre philosophies of journalism – of orchestrating scenarios and entering them – you feel like a mug for having arranged an interview in a cafe.</p><p>It’s often unclear what Brügger is setting out to discover, what facts he’s seeking to establish. In The Red Chapel, even as his comedians rehearse on a riverbank, Brügger declares he wants to “expose the very core of the evil in North Korea” – an aim as grand and adolescent as it is vague. (As it happens, he never even makes it out of his minders’ line of sight.) As a Liberian diplomat in The Ambassador, Brügger tries to buy blood diamonds, pretends he wants to start a match factory in Central African Republic (CAR), and arranges to tour a “Pygmy village”. The CAR is a place with no moral boundaries, he tells us, and so it “offers itself as a sort of Jurassic Park for people longing for the Africa of the 1970s”. He circles some sort of exposé – evidence of how illicitly obtained diplomatic papers can be used to smuggle diamonds and commit other crimes – but never quite pins it to the mat. By the end of Cold Case Hammarskjöld, similarly, Brügger has proven no conspiracy. The ride has been weird, but the case remains cold.</p><figure id="2e6dc4ef-c60f-4268-a286-148c4a48ef49" data-spacefinder-role="supporting" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-4"><picture><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=380&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=380&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=300&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=300&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A man leans against a railing with a large tree beside him. He is wearing sunglasses, a white shirt and tie and a long coat. " src="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="567.1856123009335" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Mads Brügger.</span> Photograph: Marie Hald/The Guardian</figcaption></figure><p>Only in The Mole, a story of such reckless and dogged infiltration that it might have been hatched by an intelligence agency, does Brügger obtain more orthodox journalistic results. Ulrich Larsen, a retired chef who had watched The Red Chapel, tracked Brügger down in 2010 and volunteered as a spy within the Copenhagen chapter of the Korean Friendship Association. Brügger gave him cameras and instructed him to film everything. “I thought I’d just be showing these Danish guys as Monty Python weirdos doing silly walks,” Larsen told me. Instead, under Brügger’s supervision, Larsen posed so effectively as a sympathiser that he wound up penetrating the heart of North Korea’s influence network better than any full-time spy – and filmed himself doing it, to boot. With an accomplice, he duped North Korean officials into thinking he was setting up a drug and arms factory in Uganda – part of a plan to make enough money to buy North Korea weapons despite prevailing sanctions. The con ran a full decade – so long that Brügger sometimes clean forgot about it for months on end.</p><p>Brügger wouldn’t necessarily quibble with these characterisations of his movies. “I’m a film-maker who craves sensation,” he says in The Mole, and that he does provide. His tone is caustic, his characters are colourful, and his plot twists are what Lotte Folke Kaarsholm, the opinion editor at the Danish daily Politiken, wryly calls “maximalist”. During one of our conversations, Brügger quoted Jørgen Leth, the doyen of Danish documentarians, to describe their line of work as “laying a trap in the forest and then waiting behind a tree to see who falls in”. Later, I looked up the quote and found that Leth had talked about setting a trap for reality, to capture the most authentic version of the world. “We are relaxed, attentive and noncommittal,” he said in a 2000 interview. “Things happen when they happen.” Leth was advocating patience and preparation; Brügger was thinking of a literal trap to tempt someone into making a mistake.</p><hr><p><span>O</span>ne morning in Copenhagen, I visited Smajic’s lawyer, who led me into a conference room, laid his mobile on the table, and dialled her on speakerphone. The previous day, she’d been convicted in a different case of a million-kroner fraud; the following week, she would be sentenced to 18 months in prison. When we spoke, she was still in hiding, but there wasn’t a trace of anxiety in her voice. She complimented me on pronouncing her name correctly, and said she’d spoken to no other journalist since the documentary’s release. Midway through our conversation, while mentioning the episode during which Fasar threatened her, I told her I was appalled that journalists had put her in that position. I did mean it, but it’s also the sort of thing a journalist says, with exaggerated concern, to gain someone’s confidence. “That’s the first time someone has been sympathetic and said that,” she told me – something I knew to be false, because I’d read Danish columnists expressing the same views. Later, I learned that I <a href="https://www.berlingske.dk/indland/muldvarpen-fra-den-sorte-svane-taler-ud-for-foerste-gang-mit-familieliv-er?gaa_at=eafs&amp;gaa_n=AerBZYPjfiiCeAAOO_bRMmuC3e9iqWKjq_DRpaR6qkF8MPzipYwYAYzBjPpHb61Ocqs%3D&amp;gaa_ts=67cc5c96&amp;gaa_sig=2qAhukP5LmbRdoPxyXNVUhC9YQ0PDsHKKBaouYajSeunh_ynmu6epcvlSFrIZC21QUWIFajYL-bBATnf4dyVjw%3D%3D" data-link-name="in body link">was also not</a> the first journalist to interview her about the film.</p><p>Smajic believes she’s a victim of journalistic deceit. The Black Swan was meant to be about her life, she said, with the hidden camera footage being used only sparingly to corroborate her stories. She’d been offered no security during the filming, she said. When TV2 screened the first three episodes for her approval, they were really just raw, unedited clips, she maintained, and in any case, she’d been strongly medicated after a surgery and couldn’t assess them with a clear mind. (“Amira watched the edited episodes, they just needed finalising,” TV2’s Nørgaard told me. “During the four hours she spent with the editorial team that day, she appeared unaffected and seemed coherent, as we also documented in the series.”) Smajic hadn’t been running any other office at the time, she said to me, and in any case, “they hadn’t bought the rights to every single moment in my life”.</p><p>Smajic felt betrayed. “For two years, these people were telling me to go through with it, saying: ‘This is going to be the biggest thing. You’re going to be a star.’” When she began worrying that the documentary would place her in danger, she asked for it to be suspended. “They figured that if they made me out to be a criminal, I wouldn’t have a say,” she told me. Early in 2024, months before The Black Swan was due to be broadcast, Smajic sued for an injunction against the film. A court denied her plea on grounds of public interest. In its verdict, it decided Smajic was fully aware of the project’s risks, the protection that TV2 arranged for her, and the ambit of the documentary.</p><p>Among those who think Smajic was treated poorly is Jacob Mollerup, a veteran of the Danish media and a co-founder of Foreningen for Undersøgende Journalistik (FUJ), an association of investigative journalists. Mollerup described The Black Swan as “an exceptional production”, but argued Brügger had prized his dramatisation too much, abandoning fairness and balance in the bargain. “Normally, you protect your sources, but here they say: ‘Now she’s just a criminal, she broke our contract, so we can set aside her wishes about the production,” Mollerup told me. Hiding Smajic’s ongoing work as a police informant from The Black Swan’s viewers was dishonest, he said. If she was telling her handlers everything about the sting as it happened, that made it an operation implicitly sanctioned by the police – and plunged it into all sorts of ethical murk. Was Smajic inviting into her lair suspects whom the police wanted to nab? Which of the crimes being planned on camera were actually carried out, and how? Mollerup believes journalists must be transparent about their methods and precise in documenting misdeeds. When The Black Swan won an FUJ prize, he gave up his membership. “I told them: ‘This is not what I worked for.’”</p><p>Brügger briskly rejected all of Smajic’s statements. She’d often claimed to be on medication before, he said, including once when she was pleading loss of memory while testifying in another criminal trial. She was merely recycling this excuse to explain to me why she hadn’t objected to the advance cuts of the first three episodes, Brügger told me. On his laptop, he found a photo of a production team’s stakeout that had been in place throughout the sting, in an office near Smajic’s. The team constantly watched the feed from the hidden cameras, ready to summon security if things went south – a setup she knew about, he said. When I wondered if the police had known of Smajic’s parallel adventures in money-laundering, or perhaps even endorsed them for their own purposes, Brügger said: “I find it highly unlikely, but it’s a possibility. The police wouldn’t confirm or deny this anyway.”</p><p>Nothing I learned from Smajic solved the central mystery of The Black Swan: why did she choose to capsize her life by participating at all? Janet Malcolm, the deft vivisectionist of the psyche in journalism, would argue that such masochistic tendencies can be found in anyone who volunteers to talk to the press. But Smajic wasn’t just anyone: she was a habitual lawbreaker, so for her to let a television crew into the darkest corners of her life felt positively self-destructive. Perhaps she did think of exposure as disinfectant, a step towards a cure. Perhaps she believed she could bear any waves of bad press, or even surf them towards fame and freedom. “The thing is,” Brügger said, “with Amira, you can just never be sure of anything.”</p><figure id="a94f231d-1646-4653-90ab-23b5656477f0" data-spacefinder-role="supporting" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-5"><picture><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=380&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=380&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=300&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=300&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A painting of two woman with dark hair, holding hands. The woman on the left wears a white dress, the woman on the right wears a red and blue dress." src="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="427.7085714285715" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Frida Kahlo, The Two Fridas (1939).</span> Photograph: Archivart/Alamy</figcaption></figure><p>He said this with the kind of awe that one veteran trickster reserves for another. Despite the lies and lawsuits, Brügger remains magnetised by Smajic. In one conversation, he’d mentioned his sole contribution to the decor of Smajic’s office: a print of The Two Fridas, in which Frida Kahlo painted herself twice, once with a gaping hole in her chest cavity, and again with a healthy heart and a small picture in her hand. “I’d hoped someone would come in and ask about it, but I didn’t prepare Amira for that,” Brügger said. This trap-within-a-trap is sprung in the fourth episode by a motorcycle thug’s curiosity, but Smajic improvises like a maestro. “It’s only when you cut out the heart that you can think coldly and rationally,” she explains. The picture the second Kahlo holds is of her child, Smajic ad-libs: “You can’t be cold if you have a family … That was me then, and this is me now.”</p><p>Brügger was delighted. “It was brilliant. I became so happy and excited when I saw that. It’s my favourite scene.” The journalist may often be cast as the seducer, coaxing information out of people, but he’s just as liable to be seduced – by the mirage of the perfect story, as clean and vivid as a comic book. For Brügger, Smajic had initially promised to provide just that. When she turned out to be staging a perilous deception, throwing his production into chaos, he only grew further enthralled – perhaps because he recognised in Smajic an even more skilled version of himself.</p><hr><p><span>I</span>t’s difficult to feel sorry for Smajic, or for anyone in The Black Swan. The most moving passages in Brügger’s films always involve peripheral players in the great jape: the Ugandan villagers who are told they will be relocated so that an arms factory can be built on their land; or the North Korean interpreter who weeps at the memorial to Kim Il-Sung, claiming she’s mourning him but possibly grieving for some other reason; or the Central African Republicans who take lessons in how to make matches in a factory that Brügger will never build. To his credit, Brügger acknowledges the odd pang of guilt in his voiceovers – but only in passing.</p><p>For The Ambassador, Brügger flew an Indian match-exporter named Sumeet Mehta to the CAR for a few days, ostensibly to train his employees. The Ambassador came out in 2011, but until I called him recently, Mehta didn’t know he’d featured in a documentary – or, indeed, that Brügger was a film-maker and not a diplomat. “I was kind of afraid to go, but I went anyway,” Mehta said, sounding baffled. “I sensed this factory was some kind of gimmick, but I didn’t know the reason behind it.” Ulrich Larsen told me that he wonders about the repercussions that the North Koreans unwittingly cast in The Mole might have suffered. “The rough answer is: I’m not responsible for what the regime does,” Larsen said. He hoped that “Mr Kang”, his translator in Pyongyang, was all right, “but of course, nobody knows. I did what I could. I brought his daughter a Lego.” Like Brügger, Larsen seemed to write it off as the cost of making an engrossing film. As Brügger says in The Red Chapel: “For your sake and mine, I have to lie.”</p><figure id="966ecf39-66e3-45f3-811a-b1a9553c0936" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:49,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;text&quot;:&quot;Who killed the prime minister? The unsolved murder that still haunts Sweden&quot;,&quot;elementId&quot;:&quot;966ecf39-66e3-45f3-811a-b1a9553c0936&quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/news/2019/may/16/olof-palme-sweden-prime-minister-unsolved-murder-new-evidence&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;design&quot;:10,&quot;display&quot;:1,&quot;theme&quot;:0}}"></gu-island></figure><p>The Black Swan is such a careful, hermetically sealed production that it yields no such collateral damage, and I wondered if it was because Brügger was less cavalier in his own country, with his compatriots. Most journalists begin their careers at home before venturing farther afield. Brügger’s has run in reverse – in part, I think, because he, too, had once bought into the image of Denmark as a safe, dull place where nothing ever happens. “I’ve come to Africa because <a href="https://www.theguardian.com/world/europe-news" data-link-name="in body link" data-component="auto-linked-tag">Europe</a> has become old and tired,” he says in The Ambassador – a sentence that could have been uttered by a European man in any of the last half-dozen centuries. It was a backhanded jibe: a suggestion that Europe was no longer troubled by the anarchic social disorder that he desires in his films. The Black Swan showed Brügger can find all that he craves at home: conspiracy, corruption, shape-shifters, sensation, stories that evaporate like dry ice or swallow you like quicksand. The world is full of lies, not least the ones we tell ourselves.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Blasting Past WebP - An analysis of the NSO BLASTPASS iMessage exploit (242 pts)]]></title>
            <link>https://googleprojectzero.blogspot.com/2025/03/blasting-past-webp.html</link>
            <guid>43493056</guid>
            <pubDate>Thu, 27 Mar 2025 12:49:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://googleprojectzero.blogspot.com/2025/03/blasting-past-webp.html">https://googleprojectzero.blogspot.com/2025/03/blasting-past-webp.html</a>, See on <a href="https://news.ycombinator.com/item?id=43493056">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-4442255878341841259" itemprop="description articleBody">

 <p id="h.7totxo172g4m"><span>An analysis of the NSO BLASTPASS iMessage exploit</span></p>
 <p><span>Posted by Ian Beer, Google Project Zero</span></p>
 
 <p><span>On September 7, 2023 Apple </span><span><a href="https://support.apple.com/en-us/106361">issued</a></span><span>&nbsp;an out-of-band security update for iOS:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpVzqhKSxPZc0TxpxC_Ka4_MVC3fJD4u9HbPMnh5jE4_tLYK08va_RroD4K3PkzOHV5SLJa8ovjXtUpF5FJRaA2SBW-SFv4fELlDeF8kEznmeBu4Zzi-kV_AMIlQLXBZTgUj9s6WQvkpE041lbp2XmSqGkj4u49X9EQOdNCeum_m1acT1HAul-xsuToi0/s1748/image8.png"><img alt="Release notes for iOS 16.6.1 and iPadOS 16.6.1, including CVE-2023-41064 for ImageIO and CVE-2023-41061 for Wallet, detailing security updates and potential exploitation." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpVzqhKSxPZc0TxpxC_Ka4_MVC3fJD4u9HbPMnh5jE4_tLYK08va_RroD4K3PkzOHV5SLJa8ovjXtUpF5FJRaA2SBW-SFv4fELlDeF8kEznmeBu4Zzi-kV_AMIlQLXBZTgUj9s6WQvkpE041lbp2XmSqGkj4u49X9EQOdNCeum_m1acT1HAul-xsuToi0/s1200/image8.png" title="Release notes for iOS 16.6.1 and iPadOS 16.6.1, including CVE-2023-41064 for ImageIO and CVE-2023-41061 for Wallet, detailing security updates and potential exploitation."></a></span></p>
 
 <p><span>Around the same time on September 7th 2023, </span><span><a href="https://citizenlab.ca/2023/09/blastpass-nso-group-iphone-zero-click-zero-day-exploit-captured-in-the-wild/">Citizen Lab published a blog post</a></span><span>&nbsp;linking the two CVEs fixed in iOS 16.6.1 to an "NSO Group Zero-Click, Zero-Day exploit captured in the wild":</span></p>
 
 <p><span>"</span><span>[The target was] an individual employed by a Washington DC-based civil society organization with international offices...</span></p>
 
 <p><span>The exploit chain was capable of compromising iPhones running the latest version of iOS (16.6) without any interaction from the victim.</span></p>
 
 <p><span>The exploit involved PassKit attachments containing malicious images sent from an attacker iMessage account to the victim."</span></p>
 
 <p><span>The day before, on September 6th 2023, Apple </span><span><a href="https://issues.chromium.org/issues/40071416">reported a vulnerability to the WebP project</a></span><span>, indicating in the report that they planned to ship a custom fix for Apple customers the next day.</span></p>
 
 <p><span>The WebP team posted their first </span><span><a href="https://chromium.googlesource.com/webm/libwebp/%2B/902bc9190331343b2017211debcec8d2ab87e17a">proposed fix</a></span><span>&nbsp;in the public git repo the next day, and five days after that on September 12th Google released a </span><span><a href="https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_12.html">new Chrome stable release</a></span><span>&nbsp;containing the WebP fix. Both Apple and Google marked the issue as exploited in the wild, alerting other integrators of WebP that they should rapidly integrate the fix as well as causing the security research community to take a closer look...</span></p>
 
 <p><span>A couple of weeks later on September 21st 2023, former Project Zero team lead Ben Hawkes (in collaboration with </span><span><a href="https://x.com/mistymntncop">@mistymntncop</a></span><span>) published the </span><span><a href="https://blog.isosceles.com/the-webp-0day/">first detailed writeup</a></span><span>&nbsp;of the root cause of the vulnerability on the </span><span>Isosceles</span><span>&nbsp;Blog. A couple of months later, on November 3rd, a group called </span><span><a href="https://www.darknavy.org/">Dark Navy</a></span><span>&nbsp;published their first blog post: a two-part analysis (</span><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_1/">Part 1</a></span><span>&nbsp;- </span><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_2/">Part 2</a></span><span>) of the WebP vulnerability and a </span><span><a href="https://github.com/DarkNavySecurity/PoC/tree/main/CVE-2023-4863">proof-of-concept exploit</a></span><span>&nbsp;targeting Chrome (CVE-2023-4863).</span></p>
 
 
 <p><span>Whilst the Isosceles and Dark Navy posts explained the underlying memory corruption vulnerability in great detail, they were unable to solve another fascinating part of the puzzle: just how exactly do you land an exploit for this vulnerability in a one-shot, zero-click setup? As we'll soon see, the corruption primitive is very limited. Without access to the samples it was almost impossible to know.</span></p>
 
 <p><span>In mid-November, in collaboration with </span><span><a href="https://securitylab.amnesty.org/">Amnesty International Security Lab</a></span><span>, I was able to obtain a number of BLASTPASS </span><span><a href="https://en.wikipedia.org/wiki/PKPASS">PKPass</a></span><span>&nbsp;sample files as well as crash logs from failed exploit attempts.</span></p>
 
 <p><span>This blog post covers my analysis of those samples and the journey to figure out how one of NSO's recent zero-click iOS exploits really worked. For me that journey began by immediately taking three months of paternity leave, and resumed in March 2024 where this story begins:</span></p><h3 id="h.l3phtwrgqdig"><span>Setting the scene</span></h3>
 <p><span>For a detailed analysis of the root-cause of the WebP vulnerability and the primitive it yields, I recommend first reading the three blog posts I mentioned earlier (</span><span><a href="https://blog.isosceles.com/the-webp-0day/">Isosceles</a></span><span>, </span><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_1/">Dark Navy 1</a></span><span>, </span><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_2/">Dark Navy 2</a></span><span>.) I won't restate their analyses here (both because you should read their original work, and because it's quite complicated!) Instead I'll briefly discuss WebP and the corruption </span><span>primitive the vulnerability</span><span>&nbsp;yields.</span></p><h3 id="h.115gmx6di0dd"><span>WebP</span></h3>
 <p><span><a href="https://developers.google.com/speed/webp">WebP</a></span><span>&nbsp;is a relatively modern image file format, first released in 2010. In reality WebP is actually two completely distinct image formats: </span><span><a href="https://developers.google.com/speed/webp/docs/compression%23lossy_webp">a lossy format</a></span><span>&nbsp;based on the VP8 video codec and a separate </span><span><a href="https://developers.google.com/speed/webp/docs/compression%23lossless_webp">lossless format</a></span><span>. The two formats share nothing apart from both using a </span><span><a href="https://en.wikipedia.org/wiki/Resource_Interchange_File_Format">RIFF</a></span><span>&nbsp;container and the string </span><span>WEBP</span><span>&nbsp;for the first chunk name. From that point on (12 bytes into the file) they are completely different. The vulnerability is in the lossless format, with the RIFF chunk name </span><span>VP8L</span><span>.</span></p>
 
 <p><span>Lossless WebP makes extensive use of </span><span><a href="https://en.wikipedia.org/wiki/Huffman_coding">Huffman coding</a></span><span>; there are at least 10 huffman trees present in the BLASTPASS sample. In the file they're stored as </span><span><a href="https://en.wikipedia.org/wiki/Canonical_Huffman_code">canonical huffman trees</a></span><span>, meaning that only the code lengths are retained. At decompression time those lengths are converted directly into a two-level huffman decoding table, with the five largest tables all getting squeezed together into the same pre-allocated buffer. The (it turns out not quite) maximum size of these tables is pre-computed based on the number of symbols they encode. If you're up to this part and you're slightly lost, the other three blogposts referenced above explain this in detail.</span></p>
 
 <p><span>With control over the symbol lengths it's possible to define all sorts of strange trees, many of which aren't valid. The fundamental issue was that the WebP code only checked the validity of the tree </span><span>after</span><span>&nbsp;building the decoding table. But the pre-computed size of the decoding table was only correct for </span><span>valid</span><span>&nbsp;trees.</span></p>
 
 <p><span>As the Isosceles blog post points out, this means that a fundamental part of the vulnerability is that triggering the bug </span><span>is</span><span>&nbsp;detected, though after memory has been corrupted, and image parsing stops only a few lines of code later</span><span>. This presents another exploitation mystery: in a zero-click context, how do you exploit a bug where every time the issue is triggered it also stops parsing any attacker-controlled data?</span></p>
 
 <p><span>The second mystery involves the actual corruption primitive. The vulnerability will write a </span><span>HuffmanCode</span><span>&nbsp;structure at a known offset past the end of the huffman tables buffer:</span></p>
 
 <p><span>// Huffman lookup table entry</span></p>
 <p><span>typedef struct {</span></p>
 <p><span>&nbsp; uint8_t bits;</span></p>
 <p><span>&nbsp; uint16_t value;</span></p>
 <p><span>} HuffmanCode;</span></p>
 
 <p><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_1/%23how-to-control-the-data-to-write">As DarkNavy point out</a></span><span>, whilst the </span><span>bits</span><span>&nbsp;and </span><span>value</span><span>&nbsp;fields are nominally attacker-controlled, in reality there isn't that much flexibility. The fifth huffman table (the one at the end of the preallocated buffer, part of which can get written </span><span>out-of-bounds</span><span>) only has </span><span>40</span><span>&nbsp;symbols, limiting </span><span>value</span><span>&nbsp;to a maximum value of </span><span>39</span><span>&nbsp;(</span><span>0x27</span><span>) and </span><span>bits</span><span>&nbsp;will be between </span><span>1</span><span>&nbsp;and </span><span>7</span><span>&nbsp;(for a second-level table entry). There's a padding byte between </span><span>bits</span><span>&nbsp;and </span><span>value</span><span>&nbsp;which makes the largest value that could be written out-of-bounds </span><span>0x00270007</span><span>. And it just so happens that that's exactly the value which the exploit does write — and they likely didn't have that much choice about it.</span></p>
 
 <p><span>There's also not much flexibility in the huffman table allocation size. The table allocation in the exploit is </span><span>12072</span><span>&nbsp;(</span><span>0x2F28</span><span>) bytes, which will get rounded up to fit within a </span><span>0x3000</span><span>&nbsp;byte libmalloc </span><span>small</span><span>&nbsp;region. The code lengths are chosen such that the overflow occurs like this:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgDhw37v8HaNAcUY9lTzT-ePEPn_stvb57BbFv0ktM5_XCGEvQD2Mego6iMH3bBO8EZgWOfhFhg-e5R1YoUquDFdVwBWX6QRHIcccAWJnWQXlxwSU44nDYIQF_MCldcENnaef5JPaCR1Nmam7NrnZD2yng0BPEfrIDnIfww-efdAECA5F4UaSDfGi1dSJY/s766/image10.png"><img alt="Memory layout diagram showing Huffman tables at offset 0x3000 and the structure of a Huffman lookup table entry at offset 0x3058." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgDhw37v8HaNAcUY9lTzT-ePEPn_stvb57BbFv0ktM5_XCGEvQD2Mego6iMH3bBO8EZgWOfhFhg-e5R1YoUquDFdVwBWX6QRHIcccAWJnWQXlxwSU44nDYIQF_MCldcENnaef5JPaCR1Nmam7NrnZD2yng0BPEfrIDnIfww-efdAECA5F4UaSDfGi1dSJY/s766/image10.png" title="Memory layout diagram showing Huffman tables at offset 0x3000 and the structure of a Huffman lookup table entry at offset 0x3058."></a></span></p>
 
 <p><span>To summarize: The 32-bit value </span><span>0x270007</span><span>&nbsp;will be written </span><span>0x58</span><span>&nbsp;bytes past the end of a </span><span>0x3000</span><span>&nbsp;byte huffman table allocation. And then WebP parsing will fail, and the decoder will bail out.</span></p><h3 id="h.ow3137rwwm6g"><span>Déjà vu?</span></h3>
 <p><span>Long-term readers of the Project Zero blog might be experiencing a sense of déjà vu at this point... haven't I already written a blog post about an NSO zero-click iPhone zero day exploiting a vulnerability in a slightly obscure lossless compression format used in an image parsed from an iMessage attachment?</span></p>
 
 <p><span><a href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html">Indeed</a></span><span>.</span></p>
 
 <p><span>BLASTPASS has many similarities with </span><span><a href="https://en.wikipedia.org/wiki/FORCEDENTRY">FORCEDENTRY</a></span><span>, and my initial hunch (which turned out to be completely wrong) was that this exploit might take a similar approach to build a weird machine using some fancier WebP features. To that end I started out by writing a WebP parser to see what features were actually used.</span></p><h3 id="h.2q4vz1fpty3b"><span>Transformation</span></h3>
 <p><span>In a very similar fashion to </span><span><a href="https://en.wikipedia.org/wiki/JBIG2">JBIG2</a></span><span>, WebP also </span><span><a href="https://developers.google.com/speed/webp/docs/webp_lossless_bitstream_specification">supports</a></span><span>&nbsp;invertible transformations on the input pixel data:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisPMddn7TKdOEgMlAvECAc_0pAKivdDJ6Zs0O-FmBK8MOiTFlpnf5SUTXiaHcK0EYE733CtDTMboqnyHpUNw-2FTMA606fQvta_MUm0TPwoY6GeZHctPb-MKo4U73mbXbF0XGAZG4UtB3iqTCW_sUFYvY7VAKxIQJQRc8ZsmE678can0zHE445bOnVVG8/s1964/image12.png"><img alt="Screenshot of WebP documentation explaining '4 Transforms' and their role in image compression." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisPMddn7TKdOEgMlAvECAc_0pAKivdDJ6Zs0O-FmBK8MOiTFlpnf5SUTXiaHcK0EYE733CtDTMboqnyHpUNw-2FTMA606fQvta_MUm0TPwoY6GeZHctPb-MKo4U73mbXbF0XGAZG4UtB3iqTCW_sUFYvY7VAKxIQJQRc8ZsmE678can0zHE445bOnVVG8/s1200/image12.png" title="Screenshot of WebP documentation explaining '4 Transforms' and their role in image compression."></a></span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjOaeJ5e_hL-BxqWZFAVyDb38AlNiW53Uf_67I9jiMTNvSRP8sJbF6GOZtxM587_jVZPDvL84Lu2P7D4HshHEwN5Ui3KBUMa7zmv8hh5bMvThElMj7-5k1lefL5siOGS1M2uu8lW-FjV-0ZQSUstBbbkETa10kFbWFE-65ZAb_S5Qpw-fuZvnQ2GusU33I/s1356/image3.png"><img alt="Screenshot of a table listing pixel prediction modes with corresponding formulas for calculating predicted values." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjOaeJ5e_hL-BxqWZFAVyDb38AlNiW53Uf_67I9jiMTNvSRP8sJbF6GOZtxM587_jVZPDvL84Lu2P7D4HshHEwN5Ui3KBUMa7zmv8hh5bMvThElMj7-5k1lefL5siOGS1M2uu8lW-FjV-0ZQSUstBbbkETa10kFbWFE-65ZAb_S5Qpw-fuZvnQ2GusU33I/s1200/image3.png" title="Screenshot of a table listing pixel prediction modes with corresponding formulas for calculating predicted values."></a></span></p>
 
 <p><span>My initial theory was that the exploit might operate in a similar fashion to FORCEDENTRY and apply sequences of these transformations outside of the bounds of the image buffer to build a weird machine. But after implementing enough of the WebP format in python to parse every bit of the </span><span>VP8L</span><span>&nbsp;chunk it became pretty clear that it was only triggering the Huffman table overflow and nothing more. The VP8L chunk was only </span><span>1052</span><span>&nbsp;bytes, and pretty much all of it was the 10 Huffman tables needed to trigger the overflow.</span></p><h3 id="h.jkdp8pyrc6re"><span>What's in a pass?</span></h3>
 <p><span>Although BLASTPASS is often referred to as an exploit for "the WebP vulnerability", the attackers don't actually just send a WebP file (even though that is supported in iMessage). They send a </span><span><a href="https://developer.apple.com/documentation/passkit_apple_pay_and_wallet">PassKit</a></span><span>&nbsp;PKPass file, which contains a WebP. There must be a reason for this. So let's step back and actually take a look at one of the sample files I received:</span></p>
 
 <p><span>171K sample.pkpass</span></p>
 
 <p><span>$ file sample.pkpass </span></p>
 <p><span>sample.pkpass: Zip archive data, at least v2.0 to extract, compression method=deflate</span></p>
 
 <p><span>There are five files inside the PKPass zip archive:</span></p>
 
 <p><span>60K &nbsp;background.png</span></p>
 <p><span>5.5M logo.png</span></p>
 <p><span>175B manifest.json</span></p>
 <p><span>18B &nbsp;pass.json</span></p>
 <p><span>3.3K signature</span></p>
 
 <p><span>The 5.5MB </span><span>logo.png</span><span>&nbsp;is the WebP image, just with a </span><span>.png</span><span>&nbsp;extension instead of </span><span>.webp</span><span>:</span></p>
 
 <p><span>$ file logo.png:</span></p>
 <p><span>logo.png: &nbsp; &nbsp; &nbsp; &nbsp; RIFF (little-endian) data, Web/P image</span></p>
 
 <p><span>The closest thing to a specification for the PKPass format appears to be the </span><span><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/Creating.html">Wallet Developer Guide</a></span><span>, and whilst it doesn't explicitly state that the </span><span>.png</span><span>&nbsp;files should actually be Portable Network Graphics images, that's presumably the intention. This is yet another parallel with FORCEDENTRY, where a similar trick was used to reach the PDF parser when attempting to parse a GIF.</span></p>
 
 <p><span>PKPass files require a valid signature which is contained in </span><span>manifest.json</span><span>&nbsp;and </span><span>signature</span><span>. The signature has a presumably fake name and more timestamps indicating that the PKPass is very likely being generated and signed on the fly for each exploit attempt.</span></p>
 
 <p><span>pass.json</span><span>&nbsp;is just this:</span></p>
 
 <p><span>{"pass": "PKpass"}</span></p>
 
 <p><span>Finally </span><span>background.png</span><span>:</span></p>
 
 <p><span>$ file background.png </span></p>
 <p><span>background.png: TIFF image data, big-endian, direntries=15, height=16, bps=0, compression=deflate, PhotometricIntepretation=RGB, orientation=upper-left, width=48</span></p>
 
 <p><span>Curious. Another file with a misleading extension; this time a </span><span>TIFF</span><span>&nbsp;file with a </span><span>.png</span><span>&nbsp;extension. </span></p>
 
 <p><span>We'll return to this TIFF later in the analysis as it plays a critical role in the exploit flow, but for now we'll focus on the WebP, with one short diversion:</span></p><h3 id="h.cf35pgn7ecq3"><span>Blastdoor</span></h3>
 <p><span>So far I've only mentioned the WebP vulnerability, but the Apple advisory I linked at the start of this post mentions two separate CVEs:</span></p>
 
 <p><span>The first, CVE-2023-41064 in ImageIO, is the WebP bug (though just to keep things confusing with a different CVE from the upstream WebP fix which is CVE-2023-4863 - they're the same vulnerability though).</span></p>
 
 <p><span>The second, CVE-2023-41061 in "Wallet", is described in the Apple advisory as: "</span><span>A maliciously crafted attachment may result in arbitrary code execution</span><span>".</span></p>
 
 <p><span>The </span><span><a href="https://blog.isosceles.com/the-webp-0day/">Isosceles blog post</a></span><span>&nbsp;hypothesises:</span></p>
 
 <p><span>"</span><span>Citizen Lab called this attack "BLASTPASS", since the attackers found a clever way to bypass the "BlastDoor" iMessage sandbox. We don't have the full technical details, but it looks like by bundling an image exploit in a PassKit attachment, the malicious image would be processed in a different, unsandboxed process. This corresponds to the first CVE that Apple released, CVE-2023-41061.</span><span>"</span></p>
 
 <p><span>This theory makes sense — FORCEDENTRY had a similar trick where the </span><span><a href="https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html">JBIG2 bug was actually exploited inside </a></span><span><a href="https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html">IMTranscoderAgent</a></span><span>&nbsp;instead of the more restrictive sandbox of BlastDoor. But in all my experimentation, as well as all the in-the-wild crash logs I've seen, this hypothesis doesn't seem to hold.</span></p>
 
 <p><span>The PKPass file and the images enclosed within </span><span>do</span><span>&nbsp;get parsed inside the BlastDoor sandbox and that's where the crashes occur or the payload executes — later on we'll also see evidence that the </span><span>NSExpression</span><span>&nbsp;payload which eventually gets evaluated expects to be running </span><span>inside</span><span>&nbsp;BlastDoor.</span></p>
 
 <p><span>My guess is that CVE-2023-41061 is more likely referring to the lax parsing of PKPasses which didn't reject images which weren't </span><span>png'</span><span>s.</span></p>
 
 <p><span>In late 2024</span><span>, I received another set of in-the-wild crash logs including two which do in fact strongly indicate that there was also a path to hit the WebP vulnerability in the MobileSMS process, outside the BlastDoor sandbox! Interestingly, the timestamps indicate that these devices were targeted in November 2023, two months after the vulnerability was patched.</span></p>
 
 <p><span>In those cases the WebP code was reached inside the MobileSMS process via a </span><span>ChatKit</span><span>&nbsp;</span><span>CKPassPreviewMediaObject</span><span>&nbsp;created by a </span><span>CKAttachmentMessagePartChatItem</span><span>.</span></p><h3 id="h.le24xell6lgv"><span>What's in a WebP?</span></h3>
 <p><span>I mentioned that the </span><span>VP8L</span><span>&nbsp;chunk in the WebP file is only around 1KB. Yet in the file listing above the WebP file is 5.5MB! So what's in the rest of it? Expanding out my WebP parser we see that there's one more RIFF chunk:</span></p>
 
 <p><span>EXIF : 0x586bb8</span></p>
 <p><span>exif is Intel byte alignment</span></p>
 <p><span>EXIF has n_entries=1</span></p>
 <p><span>tag=8769 fmt=4 n_components=1 data=1a</span></p>
 <p><span>subIFD has n_entries=1</span></p>
 <p><span>tag=927c fmt=7 n_components=586b8c data=2c</span></p>
 
 <p><span>It's a (really really huge) </span><span><a href="https://en.wikipedia.org/wiki/Exif">EXIF</a></span><span>&nbsp;- the standard format which cameras use to store image metadata — stuff like the camera model, exposure time, f-stop etc.</span></p>
 
 <p><span>It's a tag-based format and pretty much all 5.5MB is inside one tag with the id </span><span>0x927c</span><span>. So what's that?</span></p>
 
 <p><span>Looking through an </span><span><a href="https://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif.html">online list of EXIF tags</a></span><span>&nbsp;just below the lens FocalLength tag and above the UserComment tag we spot </span><span>0x927c</span><span>:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi4qMYlckEAJZhphzfIDHw4kQg6htOmpV99VYzwChysKpCA9l6gNZriWUdWxws3xcVGIq7Hl3WNtBmNdXLQC6ezsQ6lPjdRHhv2z9LHCXhWPwTuSnxJGURaDEhBz_ZjjPLviIO3Y87lo3VHmTFyLhONCSE_RAWzZ6-iVm-Yub5AQ5Q5wo2K31SZBdvL83s/s1999/image4.png"><img alt="Screenshot of a table listing EXIF tag definitions. The table includes columns for tag number, tag name, and description. The row for tag number 0x927C with the tag name 'MakerNote' is highlighted in red, with the description 'Manufacturer specific information'." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi4qMYlckEAJZhphzfIDHw4kQg6htOmpV99VYzwChysKpCA9l6gNZriWUdWxws3xcVGIq7Hl3WNtBmNdXLQC6ezsQ6lPjdRHhv2z9LHCXhWPwTuSnxJGURaDEhBz_ZjjPLviIO3Y87lo3VHmTFyLhONCSE_RAWzZ6-iVm-Yub5AQ5Q5wo2K31SZBdvL83s/s1200/image4.png" title="Screenshot of a table listing EXIF tag definitions. The table includes columns for tag number, tag name, and description. The row for tag number 0x927C with the tag name 'MakerNote' is highlighted in red, with the description 'Manufacturer specific information'."></a></span></p>
 
 <p><span>It's the very-vague-yet-fascinating sounding: "</span><span>MakerNote - Manufacturer specific information.</span><span>"</span></p>
 
 <p><span>Looking to </span><span><a href="https://en.wikipedia.org/wiki/Exif">Wikipedia for some clarification</a></span><span>&nbsp;on what that actually is, we learn that </span></p>
 
 <p><span>"the "MakerNote" tag contains information normally in a proprietary binary format."</span></p>
 
 <p><span>Modifying the webp parser to now dump out the MakerNote tag we see:</span></p>
 
 <p><span>$ file sample.makernote </span></p>
 <p><span>sample.makernote: Apple binary property list</span></p>
 
 <p><span>Apple's chosen format for the "proprietary binary format" is binary plist!</span></p>
 
 <p><span>And indeed: looking through the ImageIO library in IDA there's a clear path between the WebP parser, the EXIF parser, the MakerNote parser and the binary plist parser.</span></p><h3 id="h.9tu54e9o1ow0"><span>unbplisting</span></h3>
 <p><span>I covered the binary plist format in </span><span><a href="https://googleprojectzero.blogspot.com/2023/10/an-analysis-of-an-in-the-wild-ios-safari-sandbox-escape.html">a previous blog post</a></span><span>. That was the second time I'd had to analyse a large bplist. The first time (for the FORCEDENTRY sandbox escape) it was possible mostly by hand, just using the human-readable output of </span><span>plutil</span><span>. Last year, for the Safari sandbox escape analysis, the bplist was 437KB and I had to write a custom bplist parser to figure out what was going on. Keeping the exponential curve going this year the bplist was 10x larger again.</span></p>
 
 <p><span>In this case it's fairly clear that the bplist must be a heap groom - and at 5.5MB, presumably a fairly complicated one. So what's it doing?</span></p><h3 id="h.dwp3fpvl5otv"><span>Switching Views</span></h3>
 <p><span>I had a hunch that the bplist would use duplicate dictionary keys as a fundamental building block for the heap groom, but running my parser it didn't output any... until I realised that my tool stored the parsed dictionaries directly as python dictionaries before dumping them. Fixing the tools to instead keep lists of keys and values it became clear that there were duplicate keys. Lots of them:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhi8ixELdnlgPEAlry1qJUaZAL0gu_lmlCy2OFHIpWIe3Jdmc89ST1jaPfEyInzGSxxUEbtX5L0dk5d5Z9L1RPSpDS0FDG_PJtCfy-HLcQBMYHZNokkE1XEgizDmBr_5Sww7JxA7joYE7zI0fMbuUt-34d5pXHAHSplO9t7lhzRMk7NObBmdIaPGkEe4eY/s1999/image6.png"><img alt="Screenshot of code showing a series of nested dictionary creations / duplicate keys" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhi8ixELdnlgPEAlry1qJUaZAL0gu_lmlCy2OFHIpWIe3Jdmc89ST1jaPfEyInzGSxxUEbtX5L0dk5d5Z9L1RPSpDS0FDG_PJtCfy-HLcQBMYHZNokkE1XEgizDmBr_5Sww7JxA7joYE7zI0fMbuUt-34d5pXHAHSplO9t7lhzRMk7NObBmdIaPGkEe4eY/s1200/image6.png" title="Screenshot of code showing a series of nested dictionary creations / duplicate keys"></a></span></p>
 
 <p><span>In the Safari exploit writeup I described how I used different visualisation techniques to try to explore the structure of the objects, looking for patterns I could use to simplify what was going on. In this case, modifying the parser to emit well-formed curly brackets and indentation then relying on </span><span><a href="https://code.visualstudio.com/">VS Code</a></span><span>'s automatic code-folding proved to work well enough for browsing around and getting a feel for the structure of the groom object.</span></p>
 
 <p><span>Sometimes the right visualisation technique is sufficient to figure out what the exploit is trying to do. In this case, where the primitive is a heap-based buffer overflow, the groom will inevitably try to put two things next to each other in memory and I want to know "what two things?"</span></p>
 
 <p><span>But no matter how long I stared and scrolled, I couldn't figure anything out. Time to try something different.</span></p><h3 id="h.qsa5rb3wbgxp"><span>Instrumentation</span></h3>
 <p><span>I wrote a small helper to load the bplist using the same API as the </span><span>MakerNote</span><span>&nbsp;parser and ran it using the Mac Instruments app:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEioXK-ctrJxcKGIj-UEWZpLrFDR6z8L4jtEne1cJrcBpAEM_jYaHWn1NaQ_-DEAf7kZ8PSgrk1pzy11pe9TGfurgmHfFwW3MezoSrdZ_KQJzMUEIjkiL7mWt-gE-3XOiK1ooX7AibTNufcXkAjlWqS-x87ld2xLNm7sDygVVgduf_npeudyoA0645BDRuw/s1999/image1.png"><img alt="Screenshot of Instruments app showing memory allocation with detailed information for the top three categories: 'All Heap &amp; Anonymous...', 'CFString (store)', and 'Malloc 16.00 KiB'" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEioXK-ctrJxcKGIj-UEWZpLrFDR6z8L4jtEne1cJrcBpAEM_jYaHWn1NaQ_-DEAf7kZ8PSgrk1pzy11pe9TGfurgmHfFwW3MezoSrdZ_KQJzMUEIjkiL7mWt-gE-3XOiK1ooX7AibTNufcXkAjlWqS-x87ld2xLNm7sDygVVgduf_npeudyoA0645BDRuw/s1200/image1.png" title="Screenshot of Instruments app showing memory allocation with detailed information for the top three categories: 'All Heap &amp; Anonymous...', 'CFString (store)', and 'Malloc 16.00 KiB'"></a></span></p>
 
 <p><span>Parsing the single 5.5MB bplist causes nearly half a million allocations, churning through nearly a gigabyte of memory. Just looking through this allocation summary it's clear there's lots of </span><span>CFString</span><span>&nbsp;and </span><span>CFData</span><span>&nbsp;objects, likely used for heap shaping. Looking further down the list there are other interesting numbers:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTNContQj1sCDNIzAplyRVfRMR6y1vgjkGkRBbKXdlIrmiVV90kTNmxSvWwcv4iQ7Ju6W_bbrmqoh7k7UoTvytds40F1p7WUWhGmMtk8a5LfZuVNt7P1VjwZJ980-Xee42x_rNEK_HTmGSkPy8xucdhd0eyHj5XCcH3PwPfN5ZmzbNXR0hu_T6UNwZlbE/s1428/image11.png"><img alt="Memory allocation table showing 'All Heap &amp; Anonymous...' using 990.66 MiB of total bytes, with 660.77 MiB being persistent." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTNContQj1sCDNIzAplyRVfRMR6y1vgjkGkRBbKXdlIrmiVV90kTNmxSvWwcv4iQ7Ju6W_bbrmqoh7k7UoTvytds40F1p7WUWhGmMtk8a5LfZuVNt7P1VjwZJ980-Xee42x_rNEK_HTmGSkPy8xucdhd0eyHj5XCcH3PwPfN5ZmzbNXR0hu_T6UNwZlbE/s1200/image11.png" title="Memory allocation table showing 'All Heap &amp; Anonymous...' using 990.66 MiB of total bytes, with 660.77 MiB being persistent."></a></span></p>
 
 <p><span>The </span><span>20'000</span><span>&nbsp;in the last line is far too round a number to be a coincidence. This number matches up with the number of </span><span>__NSDictionaryM</span><span>&nbsp;objects allocated:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFVqxOaJc8pyHBEa74GIoOpG-Y7TbNOvBcaslTYe3e-sFEe7nW2GjN4YA0xlKhmd0FT8c1vCkY5OwWtGdsO_tGDic8CZC3jHHe9HKy33YMGRrdp_yyPUvdtOQkaL3kVTV1p8eZT_LzWsKoCSOZIFVd_t3zszVFhlQhYARImnbr7sKHO7n56fDyEKmQmGA/s1510/image7.png"><img alt="Table displaying memory usage broken down by allocation size, showing the number of allocations, the size of each allocation, and the total memory used for each size. In the middle of the image, there are 20000 __NSDictionaryM objects allocated." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFVqxOaJc8pyHBEa74GIoOpG-Y7TbNOvBcaslTYe3e-sFEe7nW2GjN4YA0xlKhmd0FT8c1vCkY5OwWtGdsO_tGDic8CZC3jHHe9HKy33YMGRrdp_yyPUvdtOQkaL3kVTV1p8eZT_LzWsKoCSOZIFVd_t3zszVFhlQhYARImnbr7sKHO7n56fDyEKmQmGA/s1200/image7.png" title="Table displaying memory usage broken down by allocation size, showing the number of allocations, the size of each allocation, and the total memory used for each size. In the middle of the image, there are 20000 __NSDictionaryM objects allocated."></a></span></p>
 
 <p><span>Finally, at the very bottom of the list there are two more allocation patterns which stand out:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiqhUsJFzltLPjA4xT4zUvWvbkRNrboNac_h7srw04M3PhAisiqgVw5EmdczdjaCP7sDwUwfqU1TR6d27MY0EzAEHOwGfWz6mNx2GJJmRyKEmY_JeV8Mvtzx41up9VSGRV3d9kYbKB4DZ8bNXkwQc0wCUR7BFU445qNnY2-euwBgJIu2p_-re5PXC7hEx8/s1622/image9.png"><img alt="Screenshot of a table listing memory allocations with details like size, count, and total bytes, highlighting two sets of very large allocations: eighty 1MB allocations and 44 4MB ones." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiqhUsJFzltLPjA4xT4zUvWvbkRNrboNac_h7srw04M3PhAisiqgVw5EmdczdjaCP7sDwUwfqU1TR6d27MY0EzAEHOwGfWz6mNx2GJJmRyKEmY_JeV8Mvtzx41up9VSGRV3d9kYbKB4DZ8bNXkwQc0wCUR7BFU445qNnY2-euwBgJIu2p_-re5PXC7hEx8/s1200/image9.png" title="Screenshot of a table listing memory allocations with details like size, count, and total bytes, highlighting two sets of very large allocations: eighty 1MB allocations and 44 4MB ones."></a></span></p>
 
 <p><span>There are two sets of very large allocations: eighty 1MB allocations and 44 4MB ones.</span></p>
 
 <p><span>I modified my bplist tool again to dump out each unique string or data buffer, along with a count of how many times it was seen and its hash. Looking through the file listing there's a clear pattern:</span></p>
 <table><tbody><tr><td colspan="1" rowspan="1">
 <p><span>Object Size</span></p></td><td colspan="1" rowspan="1">
 <p><span>Count</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x3FFFFF</span></p></td><td colspan="1" rowspan="1">
 <p><span>44</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0xFFFFF</span></p></td><td colspan="1" rowspan="1">
 <p><span>80</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x3FFF</span></p></td><td colspan="1" rowspan="1">
 <p><span>20</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x26A9</span></p></td><td colspan="1" rowspan="1">
 <p><span>24978</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x2554</span></p></td><td colspan="1" rowspan="1">
 <p><span>44</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x23FF</span></p></td><td colspan="1" rowspan="1">
 <p><span>5822</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x22A9</span></p></td><td colspan="1" rowspan="1">
 <p><span>4</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x1FFF</span></p></td><td colspan="1" rowspan="1">
 <p><span>2</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x1EA9</span></p></td><td colspan="1" rowspan="1">
 <p><span>26</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x1D54</span></p></td><td colspan="1" rowspan="1">
 <p><span>40</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x17FF</span></p></td><td colspan="1" rowspan="1">
 <p><span>66</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x13FF</span></p></td><td colspan="1" rowspan="1">
 <p><span>66</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x3FF</span></p></td><td colspan="1" rowspan="1">
 <p><span>322</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x3D7</span></p></td><td colspan="1" rowspan="1">
 <p><span>404</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0xF</span></p></td><td colspan="1" rowspan="1">
 <p><span>112882</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x8</span></p></td><td colspan="1" rowspan="1">
 <p><span>3</span></p></td></tr></tbody></table>
 
 
 <p><span>There are a large number of allocations which fall just below a "round" number in hexadecimal: </span><span>0x3ff</span><span>, </span><span>0x13ff</span><span>, </span><span>0x17ff</span><span>, </span><span>0x1fff</span><span>, </span><span>0x23ff</span><span>, </span><span>0x3fff</span><span>... That heavily hints that they are sized to fall exactly within certain allocator size buckets.</span></p>
 
 <p><span>Almost all of the allocations are just filled with zeros or '</span><span>A</span><span>'s. But the 1MB one is quite different:</span></p>
 
 <p><span>$ hexdump -C 170ae757_80.bin | head -n 20</span></p>
 
 <p><span>00000000 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000010 &nbsp;00 00 00 00 00 00 00 00 &nbsp;80 26 00 00 01 00 00 00 &nbsp;|.........&amp;......|</span></p>
 <p><span>00000020 &nbsp;1f 00 00 00 00 00 00 00 &nbsp;10 00 8b 56 02 00 00 00 &nbsp;|...........V....|</span></p>
 <p><span>00000030 &nbsp;b0 c3 31 16 02 00 00 00 &nbsp;60 e3 01 00 00 00 00 00 &nbsp;|..1.....`.......|</span></p>
 <p><span>00000040 &nbsp;20 ec 46 58 02 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;| .FX............|</span></p>
 <p><span>00000050 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000060 &nbsp;00 00 00 00 00 00 00 00 &nbsp;60 bf 31 16 02 00 00 00 &nbsp;|........`.1.....|</span></p>
 <p><span>00000070 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>*</span></p>
 <p><span>000004b0 &nbsp;00 00 00 00 00 00 00 00 &nbsp;10 c4 31 16 02 00 00 00 &nbsp;|..........1.....|</span></p>
 <p><span>000004c0 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>*</span></p>
 <p><span>000004e0 &nbsp;02 1c 00 00 01 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>000004f0 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000500 &nbsp;00 00 00 00 00 00 00 00 &nbsp;70 80 33 16 02 00 00 00 &nbsp;|........p.3.....|</span></p>
 <p><span>00000510 &nbsp;b8 b5 e5 57 02 00 00 00 &nbsp;ff ff ff ff ff ff ff ff &nbsp;|...W............|</span></p>
 <p><span>00000520 &nbsp;58 c4 31 16 02 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|X.1.............|</span></p>
 <p><span>00000530 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>*</span></p>
 <p><span>00000550 &nbsp;50 75 2c 18 02 00 00 00 &nbsp;01 00 00 00 00 00 00 00 &nbsp;|Pu,.............|</span></p>
 
 
 <p><span>Further on in the hexdump of the 1MB object there's clearly an </span><span>NSExpression</span><span>&nbsp;payload - this payload is also visible just running </span><span>strings</span><span>&nbsp;on the WebP file. Matthias Frielingsdorf from iVerify gave a </span><span><a href="https://i.blackhat.com/Asia-24/Asia-24-Frielingsdorf-YouShallNotPassAnalysing.pdf">talk at BlackHat Asia with an initial analysis of this NSExpression payload</a></span><span>, we'll return to that at the end of this blog post.</span></p>
 
 <p><span>Equally striking (and visible in the hexdump above): there are clearly pointers in there. It's too early in the analysis to know whether this is a payload which gets rebased somehow, or whether there's a separate ASLR disclosure step.</span></p>
 
 <p><span>On a slightly higher level this hexdump looks a little bit like an Objective-C or C++ object, though some things are strange. Why are the first 24 bytes all zero? Why isn't there an isa pointer or vtable? It looks a bit like there are a number of integer fields before the pointers, but what are they? At this stage of the analysis, I had no idea.</span></p><h3 id="h.m4inyehexyvr"><span>Thinking dynamically</span></h3>
 <p><span>I had tried a </span><span>lot</span><span>&nbsp;to reproduce the exploit primitives on a real device; I built tooling to dynamically generate and sign legitimate PKPass files that I could send via iMessage to test devices and I could crash a lot, but I never seemed to get very far into the exploit - the iOS version range where the heap grooming works seems to be pretty small, and I didn't have an exact device and iOS version match to test on.</span></p>
 
 <p><span>Regardless of what I tried: sending the original exploits via iMessage, sending custom PKPasses with the trigger and groom, rendering the WebP directly in a test app or trying to use the PassKit APIs to render the PKPass file the best I could manage dynamically was to trigger a heap metadata integrity check failure, which I assumed was indicative of the exploit failing.</span></p>
 
 <p><span>(Amusingly, using the legitimate APIs to render the PKPass inside an app failed with an error that the PKPass file was malformed. And indeed, the exploit sample PKPass is malformed: it's missing multiple required files. But the "secure" PKPass BlastDoor parser entrypoint (</span><span>PKPassSecurePreviewContextCreateMessagesPreview</span><span>) is, in this regard at least, less strict and will attempt to render an incomplete and invalid PKPass).</span></p>
 
 <p><span>Though getting the whole PKPass parsed was proving tricky, with a bit of reversing it was possible to call the correct underlying CoreGraphics APIs to render the WebP and also get the EXIF/MakerNote parsed. By then setting a breakpoint when the huffman tables were allocated I had hoped it would be obvious what the overflow target was. But it was actually totally unclear what the following object was: (Here </span><span>X</span><span>3</span><span>&nbsp;points to the start of the huffman tables which are </span><span>0x3000</span><span>&nbsp;bytes large)</span></p>
 
 <p><span>(lldb) x/6xg $x3+0x3000</span></p>
 <p><span>0x112000000: 0x0000000111800000 0x0000000000000000</span></p>
 <p><span>0x112000010: 0x00000000001a1600 0x0000000000000004</span></p>
 <p><span>0x112000020: 0x0000000000000001 0x0000000000000019</span></p>
 
 <p><span>The first qword (</span><span>0x111800000</span><span>) is a valid pointer, but this is clearly not an Objective-C object, nor did it seem to look like any other recognizable object or have much to do with either the bplist or WebP. But running the tests a few times, there was a curious pattern:</span></p>
 
 <p><span>(lldb) x/6xg $x3+0x3000</span></p>
 <p><span>0x148000000: 0x0000000147800000 0x0000000000000000</span></p>
 <p><span>0x148000010: 0x000000000019c800 0x0000000000000004</span></p>
 <p><span>0x148000020: 0x0000000000000001 0x0000000000000019</span></p>
 
 <p><span>The huffman table is </span><span>0x2F28</span><span>&nbsp;bytes, which the allocator rounds up to </span><span>0x3000</span><span>. And in both of those test runs, adding the allocation size to the huffman table pointer yielded a suspiciously round number. There's no way that's a coincidence. Running a few more tests the </span><span>table+0x3000</span><span>&nbsp;pointer is always 8MB aligned. I remembered from some presentations on the iOS userspace allocator I'd read that 8MB is a meaningful number. Here's </span><span><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf">one from Synaktiv</a></span><span>:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgTLmTlzJ81OUix0D0YbwLxJHqxvWz9FoODHNMMlc2YXu7zIsXlnDlN3rLeYeZS89uMuNXWVyT21f6WweYNhi7T9rjYNI48bdaMdwu99QNv5W04XPk2zciSMmvnPr5WeixDG9UqD5feWIVoP8nx9Sq4_CJeASquS0cD3gvJvT992qTLTh7Ggp7CjaVC41k/s1999/image13.png"><img alt="Presentation slide from SynAckTiv explaining scalable zone memory allocation using Tiny, Small, and Large racks" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgTLmTlzJ81OUix0D0YbwLxJHqxvWz9FoODHNMMlc2YXu7zIsXlnDlN3rLeYeZS89uMuNXWVyT21f6WweYNhi7T9rjYNI48bdaMdwu99QNv5W04XPk2zciSMmvnPr5WeixDG9UqD5feWIVoP8nx9Sq4_CJeASquS0cD3gvJvT992qTLTh7Ggp7CjaVC41k/s1200/image13.png" title="Presentation slide from SynAckTiv explaining scalable zone memory allocation using Tiny, Small, and Large racks"></a></span></p>
 
 <p><span>Or </span><span><a href="https://www.slideshare.net/AngelBoy1/macos-memory-allocator-libmalloc-exploitation%2352">this one from Angelboy</a></span><span>:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi93g-2hZd6CFI7vQ8H7FcV3FCyUlIQJ94eWD85k_8UmrLJHqjLF4tWkKjzQmQA2g3LdKts1IY9zovIt0c1Fhc40ZkqbMTmdV7IwHkkKK0AkVpzTML52EstSqcu4SLB9RcAoDl15qgGLucFzYpVjlM8v1LgoChwrrfiDBA6nxGgDgOy-S5nNpuKrSb46ak/s1670/image5.png"><img alt="Slide from Angelboy explaining the 'Small' memory region in libmalloc, noting its size of 0x800000 and 16319 blocks, and showing a diagram of its memory layout and linked list structure." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi93g-2hZd6CFI7vQ8H7FcV3FCyUlIQJ94eWD85k_8UmrLJHqjLF4tWkKjzQmQA2g3LdKts1IY9zovIt0c1Fhc40ZkqbMTmdV7IwHkkKK0AkVpzTML52EstSqcu4SLB9RcAoDl15qgGLucFzYpVjlM8v1LgoChwrrfiDBA6nxGgDgOy-S5nNpuKrSb46ak/s1200/image5.png" title="Slide from Angelboy explaining the 'Small' memory region in libmalloc, noting its size of 0x800000 and 16319 blocks, and showing a diagram of its memory layout and linked list structure."></a></span></p>
 
 <p><span>8MB is the size of the iOS userspace default allocator's small rack regions. It looks like they might be trying to groom the allocator not to target application-specific data but allocator metadata. Time to dive into some libmalloc internals!</span></p><h3 id="h.ghgbtq9u1wm2"><span>libmalloc</span></h3>
 <p><span>I'd suggest reading the two presentations linked above for a good overview of the iOS default userspace malloc implementation</span><span>. Libmalloc manages memory on four levels of abstraction. From largest to smallest those are: rack, magazine, region and block. The size split between the tiny, small and large racks depends on the platform. Almost all the relevant allocations for this exploit come from the small rack, so that's the one I'll focus on.</span></p>
 
 <p><span>Reading through the libmalloc source I noticed that the region trailer, whilst still called a trailer, has been now moved to the start of the region object. The small region manages memory in chunks of 8MB. That 8MB gets split up in to (for our purposes) three relevant parts: a header, an array of metadata words, then blocks of 512 bytes which form the allocations:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCMp-bRPTYK_XPZAy21JujY_GaDKo20e3Jov0_Z4CD8xpL7AZpmYoH6BgC-m4bamxMvpIxz-mXXnKarp-HelkUvP_BSxEfrYGtI2ABj8x9k_C_X7sMG-H0kMXuWiGI7azIvlzyb7v4l3MnyE071j5pfoTktL0c4wg7L3ODkaZecnY29TdOPoDwAdE1T_A/s899/image2.png"><img alt="Diagram showing a memory layout with a small pink block on the left labeled with 'free flag bit' and '15 count bits', and dimensions '0x28 bytes'. Below it is a larger white block labeled '512 bytes'. On the right is a larger structure composed of three stacked blocks, colored green, red, and blue, with the entire structure labeled '0x8200 bytes' and '8MB'." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCMp-bRPTYK_XPZAy21JujY_GaDKo20e3Jov0_Z4CD8xpL7AZpmYoH6BgC-m4bamxMvpIxz-mXXnKarp-HelkUvP_BSxEfrYGtI2ABj8x9k_C_X7sMG-H0kMXuWiGI7azIvlzyb7v4l3MnyE071j5pfoTktL0c4wg7L3ODkaZecnY29TdOPoDwAdE1T_A/s899/image2.png" title="Diagram showing a memory layout with a small pink block on the left labeled with 'free flag bit' and '15 count bits', and dimensions '0x28 bytes'. Below it is a larger white block labeled '512 bytes'. On the right is a larger structure composed of three stacked blocks, colored green, red, and blue, with the entire structure labeled '0x8200 bytes' and '8MB'."></a></span></p>
 
 <p><span>The first 0x28 bytes are a header where the first two fields form a linked-list of small regions:</span></p>
 
 <p><span>typedef</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>region_trailer</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>struct</span><span>&nbsp;</span><span>region_trailer</span><span>&nbsp;</span><span>*prev;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>struct</span><span>&nbsp;</span><span>region_trailer</span><span>&nbsp;</span><span>*next;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>unsigned</span><span>&nbsp;</span><span>bytes_used;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>unsigned</span><span>&nbsp;</span><span>objects_in_use;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>mag_index_t</span><span>&nbsp;</span><span>mag_index;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>volatile</span><span>&nbsp;</span><span>int32_t</span><span>&nbsp;</span><span>pinned_to_depot;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>bool</span><span>&nbsp;</span><span>recirc_suitable;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>rack_dispose_flags_t</span><span>&nbsp;</span><span>dispose_flags;</span></p>
 <p><span>}</span><span>&nbsp;</span><span>region_trailer_t;</span></p>
 
 <p><span>The small region manages memory in units of 512 bytes called blocks. On iOS allocations from the small region consist of contiguous runs of up to 31 blocks. Each block has an associated 16-bit metadata word called a small meta word, which itself is subdivided into a "free" flag in the most-significant bit, and a 15-bit count.</span></p>
 
 <p><span>To mark a contiguous run of blocks as in-use (belonging to an allocation) the first meta word has its free flags cleared and the count set to the number of blocks in the run. On </span><span>free</span><span>, </span><span>an allocation is first placed on a lookaside list for rapid reuse without freeing. But once an allocation really gets freed the allocator will attempt to greedily coalesce neighbouring chunks. While in-use runs can never exceed 31 blocks, free runs can grow to encompass the entire region.</span></p><h3 id="h.r67dy0s0nxnn"><span>The groom</span></h3>
 <p><span>Below you can see the state of the meta words array for the small region directly following the one containing the huffman table as its last allocation: </span></p>
 
 <p><span>(lldb) x/200wh 0x148000028</span></p>
 <p><span>0x148000028: </span><span>0x0019</span><span>&nbsp;0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000038: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000048: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000058: </span><span>0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000a8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000b8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000c8: </span><span>0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x001d 0x0000 0x0000 0x0000 0x0000</span></p>
 
 <p><span>With some simple maths we can convert indexes in the meta words array into their corresponding heap pointers. Doing that it's possible to dump the memory associated with the allocations shown above. The larger </span><span>0x19</span><span>, </span><span>0x18</span><span>&nbsp;and </span><span>0x1c</span><span>&nbsp;allocations all seem to be generic groom allocations, but the two </span><span>0x3</span><span>&nbsp;block allocations appear more interesting. The first one (with the first metadata word at </span><span>0x14800005a</span><span>, shown in yellow) is the </span><span>code_lengths</span><span>&nbsp;array which gets freed directly after the huffman table building fails. The blue </span><span>0x3</span><span>&nbsp;block run (with the first metadata word at </span><span>0x148000090</span><span>) is the backing buffer for a </span><span>CFSet</span><span>&nbsp;object from the MakerNote and contains object pointers.</span></p>
 
 <p><span>Recall that the corruption primitive will write the dword </span><span>0x270007</span><span>&nbsp;</span><span>0x58</span><span>&nbsp;bytes off the end of the </span><span>0x3000</span><span>&nbsp;allocation (and that allocation happens to sit directly in front of this small region). That corruption has the following effect (shown in bold):</span></p>
 
 <p><span>(lldb) x/200wh 0x148000028</span></p>
 <p><span>0x148000028: </span><span>0x0019 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000038: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000048: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000058: </span><span>0x0007</span><span>&nbsp;</span><span>0x0027</span><span>&nbsp;0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000a8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000b8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000c8: </span><span>0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x001d 0x0000 0x0000 0x0000 0x0000</span></p>
 
 <p><span>It's changed the size of an in-use allocation from </span><span>3</span><span>&nbsp;blocks to </span><span>39</span><span>&nbsp;(or from </span><span>1536</span><span>&nbsp;to </span><span>19968</span><span>&nbsp;bytes). I mentioned before that the maximum size of an in-use allocation is meant to be 31 blocks, but this doesn't seem to be checked in every single free path. If things don't quite work out, you'll hit a runtime check. But if things do work out you end up with a situation like this:</span></p>
 
 <p><span>(lldb) x/200wh 0x148000028</span></p>
 <p><span>0x148000028: </span><span>0x0019 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000038: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000048: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000058: </span><span>0x0007</span><span>&nbsp;</span><span>0x8027</span><span>&nbsp;0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 </span><span>0x8027</span></p>
 <p><span>0x1480000a8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000b8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000c8: </span><span>0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x001d 0x0000 0x0000 0x0000 0x0000</span></p>
 
 <p><span>The yellow (</span><span>0x8027</span><span>) allocation now extends beyond its original three blocks and completely overlaps the following green (</span><span>0x18</span><span>) and blue (</span><span>0x3</span><span>) as well as the start of the purple (</span><span>0x1c</span><span>) allocation.</span></p>
 
 <p><span>But as soon as this corruption occurs WebP parsing fails and it's not going to make any other allocations. So what are they doing? How are they able to leverage these overlapping allocations? I was pretty stumped.</span></p>
 
 <p><span>One theory was that perhaps it was some internal ImageIO or BlastDoor specific object which reallocated the overlapping memory. Another theory was that perhaps the exploit had two parts; this first part which puts overlapping entries on the allocator freelist, then another file which is sent to exploit that? And maybe I was lacking that file? But then, why would there be that huge 1MB payload with NSExpressions in it? That didn't add up.</span></p><h3 id="h.swwxr4jh7qvs"><span>Puzzling pieces</span></h3>
 <p><span>As is so often the case, stepping back and not thinking about the problem for a while I realised that I'd completely overlooked and forgotten something critical. Right at the very start of the analysis I had run </span><span>file</span><span>&nbsp;on all the files inside the PKPass and noted that </span><span>background.png</span><span>&nbsp;was actually not a </span><span>png</span><span>&nbsp;but a </span><span>TIFF</span><span>. I had then completely forgotten that. But now the solution seemed obvious: the reason to use a PKPass versus just a WebP is that the PKPass parser will render multiple images in sequence, and there must be something in the TIFF which reallocates the overlapping allocation with something useful.</span></p>
 
 <p><span><a href="http://www.libtiff.org/">Libtiff</a></span><span>&nbsp;comes with a suite of tools for parsing tiff files. </span><span>tiffdump</span><span>&nbsp;displays the headers and </span><span>EXIF</span><span>&nbsp;tags:</span></p>
 
 <p><span>$ tiffdump background-15.tiff </span></p>
 <p><span>background-15.tiff:</span></p>
 <p><span>Magic: 0x4d4d &lt;big-endian&gt; Version: 0x2a &lt;ClassicTIFF&gt;</span></p>
 <p><span>Directory 0: offset 68 (0x44) next 0 (0)</span></p>
 <p><span>ImageWidth (256) SHORT (3) 1&lt;48&gt;</span></p>
 <p><span>ImageLength (257) SHORT (3) 1&lt;16&gt;</span></p>
 <p><span>BitsPerSample (258) SHORT (3) 4&lt;8 8 8 8&gt;</span></p>
 <p><span>Compression (259) SHORT (3) 1&lt;8&gt;</span></p>
 <p><span>Photometric (262) SHORT (3) 1&lt;2&gt;</span></p>
 <p><span>StripOffsets (273) LONG (4) 1&lt;8&gt;</span></p>
 <p><span>Orientation (274) SHORT (3) 1&lt;1&gt;</span></p>
 <p><span>SamplesPerPixel (277) SHORT (3) 1&lt;4&gt;</span></p>
 <p><span>StripByteCounts (279) LONG (4) 1&lt;59&gt;</span></p>
 <p><span>PlanarConfig (284) SHORT (3) 1&lt;1&gt;</span></p>
 <p><span>ExtraSamples (338) SHORT (3) 1&lt;2&gt;</span></p>
 <p><span>700 (0x2bc) BYTE (1) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>33723 (0x83bb) UNDEFINED (7) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>34377 (0x8649) BYTE (1) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>ICC Profile (34675) UNDEFINED (7) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 
 <p><span>The presence of the four 15KB buffers is notable, but they seemed to mostly just be zeros. Here's the output from </span><span>tiffinfo</span><span>:</span></p>
 
 <p><span>$ tiffinfo -c -j -d -s -z background-15.tiff </span></p>
 <p><span>=== TIFF directory 0 ===</span></p>
 <p><span>TIFF Directory at offset 0x44 (68)</span></p>
 <p><span>&nbsp; Image Width: 48 Image Length: 16</span></p>
 <p><span>&nbsp; Bits/Sample: 8</span></p>
 <p><span>&nbsp; Compression Scheme: AdobeDeflate</span></p>
 <p><span>&nbsp; Photometric Interpretation: RGB color</span></p>
 <p><span>&nbsp; Extra Samples: 1&lt;unassoc-alpha&gt;</span></p>
 <p><span>&nbsp; Orientation: row 0 top, col 0 lhs</span></p>
 <p><span>&nbsp; Samples/Pixel: 4</span></p>
 <p><span>&nbsp; Planar Configuration: single image plane</span></p>
 <p><span>&nbsp; XMLPacket (XMP Metadata):</span></p>
 
 <p><span>&nbsp; RichTIFFIPTC Data: &lt;present&gt;, 15347 bytes</span></p>
 <p><span>&nbsp; Photoshop Data: &lt;present&gt;, 15347 bytes</span></p>
 <p><span>&nbsp; ICC Profile: &lt;present&gt;, 15347 bytes</span></p>
 <p><span>&nbsp; 1 Strips:</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; 0: [ &nbsp; &nbsp; &nbsp; 8, &nbsp; &nbsp; &nbsp; 59]</span></p>
 <p><span>Strip 0:</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 84 13 00 00 01 00 00 00 01 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;cd ab 34 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>...</span></p>
 
 <p><span>This dumps the uncompressed TIFF strip buffer and this looks much more interesting! There's clearly some structure, though not a lot of it. Is this really enough to do something useful? It looks like there could be some sort of object, but I didn't recognise the structure, and had no idea how replacing an object with this would be useful. I explored two possibilities:</span></p><h4 id="h.w1yajpmi02ag"><span>1) Alpha blending:</span></h4>
 <p><span>This is actually the raw TIFF strip after decompression but before the rendering step which applies the </span><span><a href="https://en.wikipedia.org/wiki/Alpha_compositing">alpha</a></span><span>, so it was possible that this got rendered "on top" of another object. That seemed like a reasonable explanation for why the object seemed so sparse; perhaps the idea was to just "move" a pointer value. The first 16 bytes of the strip look like this:</span></p>
 
 <p><span>00 00 00 00 00 00 00 00 84 13 00 00 01 00 00 00</span></p>
 
 <p><span>which when viewed as two 64-bit values look like this:</span></p>
 
 <p><span>0x0000000000000000 0x0000000100001384</span></p>
 
 <p><span>It seemed sort-of plausible that rendering the </span><span>0x100001384</span><span>&nbsp;on top of another pointer might be a neat primitive, but there was something that didn't quite add up. This pointer-</span><span>ish</span><span>&nbsp;value is at the </span><span>start</span><span>&nbsp;of the strip buffer, so if the overlapping allocation got reallocated with this strip buffer </span><span>directly,</span><span>&nbsp;nothing interesting would happen, as the </span><span>overlapping</span><span>&nbsp;parts are </span><span>further</span><span>&nbsp;along. Maybe the overlapping buffer gets split up multiple times, but this was seeming less and less likely, and I couldn't reproduce this part of the exploit to actually observe what happened.</span></p><h4 id="h.xf2e3zlng30e"><span>2) This is an object:</span></h4>
 <p><span>The other theory I had was that this actually was an object. The 8 zero bytes at the start were certainly strange… </span><span>so then</span><span>&nbsp;what's the significance of the next 8 bytes?</span></p>
 
 <p><span>84 13 00 00 01 00 00 00</span></p>
 
 <p><span>I tried using </span><span>lldb</span><span>'s </span><span>memory find</span><span>&nbsp;command to see if there were other instances of that exact byte sequence occurring in a test iOS app rendering the WebP then the TIFF using the CoreGraphics APIs:</span></p>
 
 <p><span>(lldb) memory find -e 0x100001384 -- 0x100000000 0x200000000</span></p>
 <p><span>data not found within the range.</span></p>
 
 <p><span>Nope, plus it was very, very slow.</span></p>
 
 <p><span>One thing I had noticed was that this byte sequence was similar to one near the start of the 1MB groom object:</span></p>
 
 <p><span>00000000 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000010 &nbsp;00 00 00 00 00 00 00 00 &nbsp;</span><span>80 26 00 00 01 00 00 00</span><span>&nbsp; |.........&amp;......|</span></p>
 <p><span>00000020 &nbsp;1f 00 00 00 00 00 00 00 &nbsp;10 00 8b 56 02 00 00 00 &nbsp;|...........V....|</span></p>
 <p><span>00000030 &nbsp;b0 c3 31 16 02 00 00 00 &nbsp;60 e3 01 00 00 00 00 00 &nbsp;|..1.....`.......|</span></p>
 
 <p><span>They're not identical, but it seemed a strange coincidence.</span></p>
 
 <p><span>I took a bunch of test app core dumps using </span><span>lldb</span><span>'s </span><span>process save-core</span><span>&nbsp;command and wrote some simple code to search for similar-ish byte patterns. After some experimentation I managed to find something:</span></p>
 
 <p><span>1c7b2600 &nbsp;49 d2 e4 29 02 00 00 01 &nbsp;</span><span>84 13 00 00 02 00 00 00</span><span>&nbsp; |I..)............|</span></p>
 <p><span>1c7b2610 &nbsp;42 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|B...............|</span></p>
 <p><span>1c7b2620 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>1c7b2630 &nbsp;c0 92 d6 83 02 00 00 00 &nbsp;00 93 d6 83 02 00 00 00 &nbsp;|................|</span></p>
 
 <p><span>Converting those coredump offsets into VM address and looking them up revealed:</span></p>
 
 <p><span>(lldb) x/10xg 0x121E47600</span></p>
 <p><span>0x121e47600: </span><span>0x0100000229e4d249</span><span>&nbsp;0x0000000200001384 </span></p>
 <p><span>0x121e47610: 0x0000000000000042 0x0000000000000000</span></p>
 <p><span>0x121e47620: 0x0000000000000000 0x0000000000000000</span></p>
 
 <p><span>(lldb) image lookup --address </span><span>0x229e4d248</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; Address: CoreFoundation[0x00000001dceed248] (CoreFoundation.__DATA_DIRTY.__objc_data + 7800)</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; Summary: (void *)0x0000000229e4d0e0: __NSCFArray</span></p>
 
 <p><span>It's an </span><span>NSCFArray</span><span>, which is the Foundation (Objective-C) "</span><span><a href="https://ridiculousfish.com/blog/posts/bridge.html">toll-free bridged</a></span><span>" version of the Core Foundation (C) CFArray type! This was the hint that I was looking for to identify the significance of the TIFF and that 1MB groom object, which also contains a similar byte sequence. </span></p><h3 id="h.udq8imwbq2pa"><span>Cores and Foundations</span></h3>
 <p><span>Even though Apple hasn't updated the open-source version of CoreFoundation for almost a decade, the old source is still helpful. Here's what a CoreFoundation object looks like:</span></p>
 
 <p><span>/*</span><span>&nbsp;</span><span>All</span><span>&nbsp;</span><span>CF</span><span>&nbsp;</span><span>"instances"</span><span>&nbsp;</span><span>start</span><span>&nbsp;</span><span>with</span><span>&nbsp;</span><span>this</span><span>&nbsp;</span><span>structure.</span><span>&nbsp; </span><span>Never</span><span>&nbsp;</span><span>refer</span><span>&nbsp;</span><span>to</span></p>
 <p><span>&nbsp;</span><span>*</span><span>&nbsp;</span><span>these</span><span>&nbsp;</span><span>fields</span><span>&nbsp;</span><span>directly</span><span>&nbsp;</span><span>--</span><span>&nbsp;</span><span>they</span><span>&nbsp;</span><span>are</span><span>&nbsp;</span><span>for</span><span>&nbsp;</span><span>CF's</span><span>&nbsp;</span><span>use</span><span>&nbsp;</span><span>and</span><span>&nbsp;</span><span>may</span><span>&nbsp;</span><span>be</span><span>&nbsp;</span><span>added</span></p>
 <p><span>&nbsp;</span><span>*</span><span>&nbsp;</span><span>to</span><span>&nbsp;</span><span>or</span><span>&nbsp;</span><span>removed</span><span>&nbsp;</span><span>or</span><span>&nbsp;</span><span>change</span><span>&nbsp;</span><span>format</span><span>&nbsp;</span><span>without</span><span>&nbsp;</span><span>warning.</span><span>&nbsp; </span><span>Binary</span></p>
 <p><span>&nbsp;</span><span>*</span><span>&nbsp;</span><span>compatibility</span><span>&nbsp;</span><span>for</span><span>&nbsp;</span><span>uses</span><span>&nbsp;</span><span>of</span><span>&nbsp;</span><span>this</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>is</span><span>&nbsp;</span><span>not</span><span>&nbsp;</span><span>guaranteed</span><span>&nbsp;</span><span>from</span></p>
 <p><span>&nbsp;</span><span>*</span><span>&nbsp;</span><span>release</span><span>&nbsp;</span><span>to</span><span>&nbsp;</span><span>release.</span></p>
 <p><span>&nbsp;</span><span>*/</span></p>
 <p><span>typedef</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>__CFRuntimeBase</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>uintptr_t</span><span>&nbsp;</span><span>_cfisa;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>uint8_t</span><span>&nbsp;</span><span>_cfinfo[4];</span></p>
 <p><span>#if</span><span>&nbsp;</span><span>__LP64__</span></p>
 <p><span>&nbsp; &nbsp; </span><span>uint32_t</span><span>&nbsp;</span><span>_rc;</span></p>
 <p><span>#endif</span></p>
 <p><span>}</span><span>&nbsp;</span><span>CFRuntimeBase;</span></p>
 
 <p><span>So the header is an Objective-C </span><span><a href="https://alwaysprocessing.blog/2023/01/19/objc-class-isa">isa</a></span><span>&nbsp;pointer followed by four bytes of </span><span>_cfinfo</span><span>, </span><span>followed by a reference count. Taking a closer look at the uses of </span><span>__cfinfo</span><span>:</span></p>
 
 <p><span>CF_INLINE</span><span>&nbsp;</span><span>CFTypeID</span><span>&nbsp;</span><span>__CFGenericTypeID_inline(const</span><span>&nbsp;</span><span>void</span><span>&nbsp;</span><span>*cf)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; </span><span>//</span><span>&nbsp;</span><span>yes,</span><span>&nbsp;</span><span>10</span><span>&nbsp;</span><span>bits</span><span>&nbsp;</span><span>masked</span><span>&nbsp;</span><span>off,</span><span>&nbsp;</span><span>though</span><span>&nbsp;</span><span>12</span><span>&nbsp;</span><span>bits</span><span>&nbsp;</span><span>are</span></p>
 <p><span>&nbsp; </span><span>//</span><span>&nbsp;</span><span>there</span><span>&nbsp;</span><span>for</span><span>&nbsp;</span><span>the</span><span>&nbsp;</span><span>type</span><span>&nbsp;</span><span>field;</span><span>&nbsp;</span><span>__CFRuntimeClassTableSize</span><span>&nbsp;</span><span>is</span><span>&nbsp;</span><span>1024</span></p>
 <p><span>&nbsp; </span><span>uint32_t</span><span>&nbsp;</span><span>*cfinfop</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>(uint32_t</span><span>&nbsp;</span><span>*)&amp;(((CFRuntimeBase</span><span>&nbsp;</span><span>*)cf)-&gt;_cfinfo);</span></p>
 <p><span>&nbsp; </span><span>CFTypeID</span><span>&nbsp;</span><span>typeID</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>(*cfinfop</span><span>&nbsp;</span><span>&gt;&gt;</span><span>&nbsp;</span><span>8)</span><span>&nbsp;</span><span>&amp;</span><span>&nbsp;</span><span>0x03FF;</span><span>&nbsp;</span><span>//</span><span>&nbsp;</span><span>mask</span><span>&nbsp;</span><span>up</span><span>&nbsp;</span><span>to</span><span>&nbsp;</span><span>0x0FFF</span></p>
 <p><span>&nbsp; </span><span>return</span><span>&nbsp;</span><span>typeID;</span></p>
 <p><span>}</span></p>
 
 <p><span>It seems that the second byte in </span><span>__cfinfo</span><span>&nbsp;is a type identifier. And indeed, running </span><span>expr (int) CFArrayGetTypeID()</span><span>&nbsp;in </span><span>lldb</span><span>&nbsp;prints: </span><span>19</span><span>&nbsp;(</span><span>0x13</span><span>) which matches up with both the object found in the coredump as well as the strange (or now not so strange) object in the TIFF strip buffer.</span></p><h3 id="h.rn1kanz6est3"><span>X steps forwards, Y steps back</span></h3>
 <p><span>Looking through more of the CoreFoundation code it seems that the object in the TIFF strip buffer is a </span><span>CFArray</span><span>&nbsp;with inline storage containing one element with the value </span><span>0x1234abcd</span><span>. It also seems that it's possible for CF objects to have NULL isa pointers, which explains why the first 8 bytes of the fake object are zero.</span></p>
 
 <p><span>This is interesting, but it still doesn't actually get us any closer to figuring out what the next step of the exploit actually is. If the </span><span>CFArray</span><span>&nbsp;is meant to overlap with something, then what? And what interesting side-effects could having an </span><span>CFArray</span><span>&nbsp;with only a single element with the value </span><span>0x1234abcd</span><span>&nbsp;possibly have?</span></p>
 
 <p><span>This seems like one step forward and two steps back, but there's something else which we can now figure out: what that 1MB groom object actually is. Let's take a look at the start of it again:</span></p>
 
 <p><span>00000000 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000010 &nbsp;00 00 00 00 00 00 00 00 &nbsp;80 26 00 00 01 00 00 00 &nbsp;|.........&amp;......|</span></p>
 <p><span>00000020 &nbsp;1f 00 00 00 00 00 00 00 &nbsp;10 00 8b 56 02 00 00 00 &nbsp;|...........V....|</span></p>
 <p><span>00000030 &nbsp;b0 c3 31 16 02 00 00 00 &nbsp;48 e3 01 00 00 00 00 00 &nbsp;|..1.....H.......|</span></p>
 <p><span>00000040 &nbsp;20 ec 46 58 02 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;| .FX............|</span></p>
 <p><span>00000050 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000060 &nbsp;00 00 00 00 00 00 00 00 &nbsp;60 bf 31 16 02 00 00 00 &nbsp;|........`.1.....|</span></p>
 <p><span>00000070 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 
 <p><span>It looks like another CF object, starting at </span><span>+0x10</span><span>&nbsp;in the buffer with the same NULL isa pointer, a reference count of </span><span>1</span><span>&nbsp;and a </span><span>__cfinfo</span><span>&nbsp;of </span><span>{0x80, 0x26, 0, 0}</span><span>. The type identifiers aren't actually fixed, they're allocated dynamically via calls to </span><span>_CFRuntimeRegisterClass</span><span>&nbsp;like this:</span></p>
 
 <p><span>CFTypeID</span><span>&nbsp;</span><span>CFArrayGetTypeID(void)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>static</span><span>&nbsp;</span><span>dispatch_once_t</span><span>&nbsp;</span><span>initOnce;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>dispatch_once(&amp;initOnce,</span><span>&nbsp;</span><span>^{</span><span>&nbsp;</span><span>__kCFArrayTypeID</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>_CFRuntimeRegisterClass(&amp;__CFArrayClass);</span><span>&nbsp;</span><span>});</span></p>
 <p><span>&nbsp; &nbsp; </span><span>return</span><span>&nbsp;</span><span>__kCFArrayTypeID;</span></p>
 <p><span>}</span></p>
 
 <p><span>The </span><span>CFTypeID</span><span>s</span><span>&nbsp;are really just indexes into the </span><span>__CFRuntimeClassTable</span><span>&nbsp;array, and even though the types are allocated dynamically the ordering seems sufficiently stable that the hardcoded type values in the exploit work. </span><span>0x26</span><span>&nbsp;is the </span><span>CFTypeID</span><span>&nbsp;for </span><span>CFReadStream</span><span>:</span></p>
 
 <p><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFRuntimeBase</span><span>&nbsp;</span><span>_cfBase;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFOptionFlags</span><span>&nbsp;</span><span>flags;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFErrorRef</span><span>&nbsp;</span><span>error;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>struct</span><span>&nbsp;</span><span>_CFStreamClient</span><span>&nbsp;</span><span>*client;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>void</span><span>&nbsp;</span><span>*info;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>const</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>_CFStreamCallBacks</span><span>&nbsp;</span><span>*callBacks;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFLock_t</span><span>&nbsp;</span><span>streamLock;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFArrayRef</span><span>&nbsp;</span><span>previousRunloopsAndModes;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>dispatch_queue_t</span><span>&nbsp;</span><span>queue;</span></p>
 <p><span>};</span></p>
 
 <p><span>Looking through the </span><span>CFStream</span><span>&nbsp;code it seems to call various callback functions during object destruction — that seems like a very likely path towards code execution, though with some significant caveats:</span></p>
 
 <p><span>Caveat I: It's still unclear how an overlapping allocation in the small malloc region could lead to a </span><span>CFRelease</span><span>&nbsp;being called on this 1MB allocation.</span></p>
 
 <p><span>Caveat II: What about ASLR? There have been some tricks in the past targeting "universal gadgets" which work across multiple slides. Nemo also had </span><span><a href="http://www.phrack.org/issues/69/9.html">a neat objective-c trick</a></span><span>&nbsp;for defeating ASLR in the past, so it's plausible that there's something like that here.</span></p>
 
 <p><span>Caveat III: What about PAC? If it's a data-only attack then maybe PAC isn't an issue, but if they are trying to JOP they'd need a trick beyond just an ASLR leak, as all forward control flow edges should be protected by PAC.</span></p><h3 id="h.w6e9d5pn9dq0"><span>Special Delivery</span></h3>
 <p><span>Around this time in my analysis </span><span><a href="https://x.com/helthydriver">Matthias Frielingsdorf</a></span><span>&nbsp;</span><span>offered me the use of an iPhone running 16.6, the same version as the targeted ITW victim. With Matthias' vulnerable iPhone, I was able to use the </span><span><a href="https://ellekit.space/dopamine/">Dopamine</a></span><span>&nbsp;jailbreak to attach </span><span>lldb</span><span>&nbsp;to </span><span>MessagesBlastDoorService</span><span>&nbsp;and a</span><span>fter a few tries was able to reproduce the exploit right up to the </span><span>CFRelease</span><span>&nbsp;call on the fake </span><span>CFReadStream</span><span>, confirming that that part of my analysis was correct! </span></p>
 
 <p><span>Collecting a few crashes led, yet again, to even more questions...</span></p><h3 id="h.ie8yjj3vyb3y"><span>Caveat I:</span><span>&nbsp;</span><span>Mysterious Pointers</span></h3>
 
 <p><span>Similar to the analysis of the huffman tables, there was a clear pattern in the fake object pointers, which this time were even stranger than the huffman tables. The crash site was here:</span></p>
 
 <p><span>LDR</span><span>&nbsp; &nbsp; </span><span>X8,</span><span>&nbsp;</span><span>[X19,#0x30]</span></p>
 <p><span>LDR</span><span>&nbsp; &nbsp; </span><span>X8,</span><span>&nbsp;</span><span>[X8,#0x58]</span></p>
 
 <p><span>At this point </span><span>X19</span><span>&nbsp;points to the fake </span><span>CFReadStream</span><span>&nbsp;object, and collecting a few </span><span>X19</span><span>&nbsp;values there's a pretty clear pattern:</span></p>
 
 <p><span>0x000000075f000010</span></p>
 <p><span>0x0000000d4f000010</span></p>
 
 <p><span>The fake object is inside a 1MB heap allocation, but all those fake object addresses are always 16 bytes above a 16MB-aligned address. It seemed really strange to me to end up with a pointer 0x10 bytes past such a round number. What kind of construct would lead to the creation of such a pointer? Even though I did have a debugger attached to </span><span>MessagesBlastDoorService</span><span>, it wasn't a time-travel debugger, so figuring out the history of such a pointer was non-trivial. Using the same core dump analysis techniques I could see that the pointer which would end up in </span><span>X19</span><span>&nbsp;was also present in the backing buffer of the </span><span>CFSet</span><span>&nbsp;described earlier. But how did it get there?</span></p>
 
 <p><span>Having found the strange </span><span>CFArray</span><span>&nbsp;inside the TIFF I was heavily biased towards believing that this must have something to do with it, so I wrote some tooling to modify the fake </span><span>CFArray</span><span>'s in the TIFF in the exploit. The theory was that by messing with that </span><span>CFArray</span><span>, I could cause a crash when it was used and figure out what was going on. But making minor changes to the strip buffer didn't seem to have any effect — the exploit still worked! Even replacing the entire strip buffer with </span><span>A</span><span>'s didn't stop the exploit working... What's going on?</span></p><h3 id="h.du8xlqhnw8z7"><span>Stepping back</span></h3>
 <p><span>I had made a list of the primitives I thought might lead to the creation of such a strange looking pointer — first on the list was a partial pointer overwrite. But then why the </span><span>CFArray</span><span>? But now having shown that the </span><span>CFArray</span><span>&nbsp;can't be involved, it was time to go back to the list. And step back even further and make sure I'd really looked at all of that TIFF...</span></p>
 
 <p><span>There were still those four other metadata buffers in the </span><span>tiffdump</span><span>&nbsp;output I'd shown earlier:</span></p>
 
 <p><span>700 (0x2bc) BYTE (1) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>33723 (0x83bb) UNDEFINED (7) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>34377 (0x8649) BYTE (1) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>ICC Profile (34675) UNDEFINED (7) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 
 <p><span>I'd just dismissed them, but, maybe I shouldn't have done that? I had actually already dumped the full contents of each of those buffers and checked that there wasn't something else apart from the zeros. They were all zeros, except the third-to-last bytes which were 0x10, which I'd considered completely uninteresting. Uninteresting, unless you wanted to partially overwrite the three least-significant bytes of a little-endian pointer value with 0x000010 that is!</span></p>
 
 <p><span>Let's look back at the SMALL metadata:</span></p>
 
 <p><span>0x148000058: </span><span>0x0007</span><span>&nbsp;</span><span>0x8027</span><span>&nbsp;0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 </span><span>0x8027</span></p>
 
 <p><span>Each of those four metadata buffers in the TIFF is </span><span>15347</span><span>&nbsp;bytes, which is </span><span>0x3bf3</span><span>&nbsp;— looked at another way that's </span><span>0x3c00</span><span>&nbsp;(the size rounded up to the next </span><span>0x200</span><span>&nbsp;block size), minus </span><span>5</span><span>, minus </span><span>8</span><span>.</span></p>
 
 <p><span>0x3c00</span><span>&nbsp;is exactly 30 </span><span>0x200</span><span>&nbsp;byte blocks. Each 16-bit word in the metadata array shown above corresponds to one </span><span>0x200</span><span>&nbsp;block, where the overlapping chunk in yellow starts at </span><span>0x14800005a</span><span>. Counting forwards 30 chunks means that the end of a </span><span>0x3c00</span><span>&nbsp;allocation overlaps perfectly with the end of the original blue three-chunk allocation:</span></p>
 
 <p><span>0x148000058: </span><span>0x0007</span><span>&nbsp;</span><span>0x8027</span><span>&nbsp;0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 </span><span>0x8027</span></p>
 
 <p><span>This has the effect of overwriting all but the last 16 bytes of the blue allocation with zeros, then overwriting the three least-significant bytes of the second-to-last pointer-sized value with </span><span>0x10 00 00</span><span>; which, if that memory happened to contain a pointer, has the effect of "shifting" that pointer down to the nearest 16MB boundary, then adding </span><span>0x10</span><span>&nbsp;bytes! (For those who saw my </span><span><a href="https://www.youtube.com/watch?v%3DZawX9I9MM6Y">2024 Offensivecon talk</a></span><span>, this was the missing link between the overlapping allocations and code execution I mentioned.)</span></p>
 
 
 <p><span>As mentioned earlier, that</span><span>&nbsp;blue allocation</span><span>&nbsp;starting with </span><span>0x0003</span><span>&nbsp;is the backing buffer of a </span><span>CFSet</span><span>&nbsp;object from the bplist inside the WebP MakerNote. The set is constructed in a very precise fashion such that the target pointer (the one to be rounded down) ends up as the second-to-last pointer in the backing buffer. The 1MB object is then also groomed such that it falls on a 16MB boundary below the object which the CFSet entry originally points to. Then when that </span><span>CFSet</span><span>&nbsp;is destructed it calls </span><span>CFRelease</span><span>&nbsp;on each object, causing the fake </span><span>CFReadStream</span><span>&nbsp;destructor to run.</span></p><h3 id="h.vdkjpva8e9lq"><span>Caveat II: ASLR</span></h3>
 <p><span>We've looked at the whole flow from huffman table overflow to </span><span>CFRelease</span><span>&nbsp;being invoked on a fake </span><span>CFReadStream</span><span>&nbsp;— but there's still stuff missing. The second open question I discussed earlier was ASLR. I had theorised that maybe it used a trick like a universal gadget, but is that the case?</span></p>
 
 <p><span>In addition to the samples, I was also able to obtain a number of crash logs from failed exploit attempts where those samples were thrown, which meant I could figure out the ASLR slide of the </span><span>MessagesBlastDoorService</span><span>&nbsp;when the exploit failed. In combination with the target device and exact OS build (also contained in the crash log) I could then obtain the matching </span><span>dyld_shared_cache</span><span>, subtract the runtime ASLR slide from a bunch of the pointer-looking things in the 1MB object and take a look at them. </span></p>
 
 <p><span>The simple answer is:</span><span>&nbsp;the 1MB object contains a large number of hardcoded, pre-slid, valid pointers. There's no weird machine, tricks or universal gadget here. By the time the PKPass is built and sent by the attackers they already know both the target device type and build as well as the runtime ASLR slide of the </span><span>MessagesBlastDoorService</span><span>...</span></p>
 
 <p><span>Based on </span><span><a href="https://iverify.io/post/clipping-wings-our-analysis-of-a-pegasus-spyware-sample">analysis by iVerify</a></span><span>,</span><span>&nbsp;as well as analysis of </span><span><a href="https://citizenlab.ca/2023/04/nso-groups-pegasus-spyware-returns-in-2022/">earlier exploit chains published by Citizen Lab</a></span><span>, my current working theory is that the large amount of HomeKit traffic seen in those cases is likely a separate ASLR/memory disclosure exploit.</span></p><h3 id="h.pybpzzcf990c"><span>Caveat III: Pointer Authentication</span></h3>
 <p><span>In the years since PAC was introduced we've seen a whole spectrum of interesting ways to either defeat, or just avoid, PAC. So what did these attackers do? To understand that let's follow the </span><span>CFReadStream</span><span>&nbsp;destruction code closely. (All these code snippets are from the most recently available version of CF from 2015, but the code doesn't seem to have changed much.)</span></p>
 
 <p><span>Here's the definition of the </span><span>CFReadStream</span><span>:</span></p>
 
 <p><span>static</span><span>&nbsp;</span><span>const</span><span>&nbsp;</span><span>CFRuntimeClass</span><span>&nbsp;</span><span>__CFReadStreamClass</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>0</span><span>,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>"CFReadStream"</span><span>,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span><span>&nbsp; &nbsp; &nbsp; </span><span>// init</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span><span>&nbsp; &nbsp; &nbsp; </span><span>// copy</span></p>
 <p><span>&nbsp; &nbsp; </span><span>__CFStreamDeallocate,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span><span>&nbsp; &nbsp; &nbsp; </span><span>// copyHumanDesc</span></p>
 <p><span>&nbsp; &nbsp; </span><span>__CFStreamCopyDescription</span></p>
 <p><span>};</span></p>
 
 <p><span>When a </span><span>CFReadStream</span><span>&nbsp;is passed to </span><span>CFRelease</span><span>, it will call </span><span>__CFStreamDeallocate</span><span>:</span></p>
 
 <p><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;</span><span>__CFStreamDeallocate(CFTypeRef</span><span>&nbsp;</span><span>cf)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; </span><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>*stream</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>(</span><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>*)cf;</span></p>
 <p><span>&nbsp; </span><span>const</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>_CFStreamCallBacks</span><span>&nbsp;</span><span>*cb</span><span>&nbsp;</span><span>=</span></p>
 <p><span>&nbsp; &nbsp; </span><span>_CFStreamGetCallBackPtr(stream);</span></p>
 <p><span>&nbsp; </span><span>CFAllocatorRef</span><span>&nbsp;</span><span>alloc</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>CFGetAllocator(stream);</span></p>
 <p><span>&nbsp; </span><span>_CFStreamClose(stream);</span></p>
 
 <p><span>_CFStreamGetCallBackPtr</span><span>&nbsp;just returns the </span><span>CFStream</span><span>'s </span><span>callBacks</span><span>&nbsp;field:</span></p>
 
 <p><span>CF_INLINE</span><span>&nbsp;</span><span>const</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>_CFStreamCallBacks</span><span>&nbsp;</span><span>*_CFStreamGetCallBackPtr(</span><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>*stream)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>return</span><span>&nbsp;</span><span>stream-&gt;callBacks;</span></p>
 <p><span>}</span></p>
 
 <p><span>Here's </span><span>_CFStreamClose</span><span>:</span></p>
 
 <p><span>CF_PRIVATE</span><span>&nbsp;</span><span>void</span><span>&nbsp;</span><span>_CFStreamClose(</span><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>*stream)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; </span><span>CFStreamStatus</span><span>&nbsp;</span><span>status</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>_CFStreamGetStatus(stream);</span></p>
 <p><span>&nbsp; </span><span>const</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>_CFStreamCallBacks</span><span>&nbsp;</span><span>*cb</span><span>&nbsp;</span><span>=</span></p>
 <p><span>&nbsp; &nbsp; </span><span>_CFStreamGetCallBackPtr(stream);</span></p>
 <p><span>&nbsp; </span><span>if</span><span>&nbsp;</span><span>(status</span><span>&nbsp;</span><span>==</span><span>&nbsp;</span><span>kCFStreamStatusNotOpen</span><span>&nbsp;</span><span>||</span><span>&nbsp;</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; </span><span>status</span><span>&nbsp;</span><span>==</span><span>&nbsp;</span><span>kCFStreamStatusClosed</span><span>&nbsp;</span><span>||</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp;</span><span>(status</span><span>&nbsp;</span><span>==</span><span>&nbsp;</span><span>kCFStreamStatusError</span><span>&nbsp;</span><span>&amp;&amp;</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>__CFBitIsSet(stream-&gt;flags,</span><span>&nbsp;</span><span>HAVE_CLOSED)</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; </span><span>))</span></p>
 <p><span>&nbsp; </span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>// Stream is not open from the client's perspective;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>// do not callout and do not update our status to "closed"</span></p>
 <p><span>&nbsp; &nbsp; </span><span>return</span><span>;</span></p>
 <p><span>&nbsp; </span><span>}</span></p>
 <p><span>&nbsp; </span><span>if</span><span>&nbsp;</span><span>(!</span><span>&nbsp;</span><span>__CFBitIsSet(stream-&gt;flags,</span><span>&nbsp;</span><span>HAVE_CLOSED))</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>__CFBitSet(stream-&gt;flags,</span><span>&nbsp;</span><span>HAVE_CLOSED);</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>__CFBitSet(stream-&gt;flags,</span><span>&nbsp;</span><span>CALLING_CLIENT);</span></p>
 <p><span>&nbsp; &nbsp; </span><span>if</span><span>&nbsp;</span><span>(cb-&gt;close)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; </span><span>cb-&gt;close(stream,</span><span>&nbsp;</span><span>_CFStreamGetInfoPointer(stream));</span></p>
 <p><span>&nbsp; &nbsp; </span><span>}</span></p>
 
 
 
 <p><span>_CFStreamGetStatus</span><span>&nbsp;extracts the </span><span>status</span><span>&nbsp;bitfield from the </span><span>flags</span><span>&nbsp;field:</span></p>
 
 <p><span>#define</span><span>&nbsp;</span><span>__CFStreamGetStatus(x)</span><span>&nbsp;</span><span>__CFBitfieldGetValue((x)-&gt;flags,</span><span>&nbsp;</span><span>MAX_STATUS_CODE_BIT,</span><span>&nbsp;</span><span>MIN_STATUS_CODE_BIT)</span></p>
 
 <p><span>Looking at the 1MB object again the flags field is the first non-base field:</span></p>
 
 <p><span>00000000 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000010 &nbsp;00 00 00 00 00 00 00 00 &nbsp;80 26 00 00 01 00 00 00 &nbsp;|.........&amp;......|</span></p>
 <p><span>00000020 &nbsp;</span><span>1f 00 00 00</span><span>&nbsp;00 00 00 00 &nbsp;10 00 8b 56 02 00 00 00 &nbsp;|...........V....|</span></p>
 <p><span>00000030 &nbsp;b0 c3 31 16 02 00 00 00 &nbsp;48 e3 01 00 00 00 00 00 &nbsp;|..1.....H.......|</span></p>
 <p><span>00000040 &nbsp;20 ec 46 58 02 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;| .FX............|</span></p>
 <p><span>00000050 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000060 &nbsp;00 00 00 00 00 00 00 00 &nbsp;60 bf 31 16 02 00 00 00 &nbsp;|........`.1.....|</span></p>
 <p><span>00000070 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 
 <p><span>That gives a status code of </span><span>0x1f</span><span>&nbsp;with all the other flags bits clear. This gets through the two conditional branches to reach this close callback call:</span></p>
 
 
 <p><span>&nbsp; </span><span>if</span><span>&nbsp;</span><span>(cb-&gt;close)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>cb-&gt;close(stream,</span><span>&nbsp;</span><span>_CFStreamGetInfoPointer(stream));</span></p>
 <p><span>&nbsp; </span><span>}</span></p>
 
 
 <p><span>At this point we need to switch to looking at the assembly to see what's really happening:</span></p>
 
 <p><span>__CFStreamClose</span></p>
 
 <p><span>var_30=</span><span>&nbsp;</span><span>-0x30</span></p>
 <p><span>var_20=</span><span>&nbsp;</span><span>-0x20</span></p>
 <p><span>var_10=</span><span>&nbsp;</span><span>-0x10</span></p>
 <p><span>var_s0=</span><span>&nbsp; </span><span>0</span></p>
 
 <p><span>PACIBSP</span></p>
 <p><span>STP</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X24,</span><span>&nbsp;</span><span>X23,</span><span>&nbsp;</span><span>[SP,#-0x10+var_30]!</span></p>
 <p><span>STP</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X22,</span><span>&nbsp;</span><span>X21,</span><span>&nbsp;</span><span>[SP,#0x30+var_20]</span></p>
 <p><span>STP</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X20,</span><span>&nbsp;</span><span>X19,</span><span>&nbsp;</span><span>[SP,#0x30+var_10]</span></p>
 <p><span>STP</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X29,</span><span>&nbsp;</span><span>X30,</span><span>&nbsp;</span><span>[SP,#0x30+var_s0]</span></p>
 <p><span>ADD</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X29,</span><span>&nbsp;</span><span>SP,</span><span>&nbsp;</span><span>#0x30</span></p>
 <p><span>MOV</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X19,</span><span>&nbsp;</span><span>X0</span></p>
 <p><span>BL</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>__CFStreamGetStatus</span></p>
 <p><span>CBZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X0,</span><span>&nbsp;</span><span>loc_187076958</span></p>
 
 <p><span>The fake </span><span>CFReadStream</span><span>&nbsp;is the first argument to this function, so passed in the </span><span>X0</span><span>&nbsp;register. It's then stored into </span><span>X19</span><span>&nbsp;so it survives the call to </span><span>__CFStreamGetStatus</span><span>.</span></p>
 
 <p><span>Skipping ahead past the flag checks we reach the callback callsite (this is also the crash site seen earlier):</span></p>
 
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>[X19,#0x30]</span></p>
 <p><span>...</span></p>
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>[X8,#0x58]</span></p>
 <p><span>CBZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>loc_187076758</span></p>
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X1,</span><span>&nbsp;</span><span>[X19,#0x28]</span></p>
 <p><span>MOV</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X0,</span><span>&nbsp;</span><span>X19</span></p>
 <p><span>BLRAAZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>X8</span></p>
 
 <p><span>Let's walk through each instruction in turn there:</span></p>
 
 <p><span>First it loads the 64-bit value from </span><span>X19+0x30</span><span>&nbsp;into </span><span>X8</span><span>:</span></p>
 
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>[X19,#0x30]</span></p>
 
 <p><span>Looking at the hexdump of the 1MB object above this will load the value </span><span>0x25846ec20</span><span>.</span></p>
 
 <p><span>From the crash reports we know the runtime ASLR slide of the </span><span>MessagesBlastDoorService</span><span>&nbsp;when this exploit was thrown was </span><span>0x3A8D0000</span><span>, so subtracting that we can figure out where in the shared cache this pointer should point:</span></p>
 
 <p><span>0x25846ec20-0x3A8D0000=0x21DB9EC20</span></p>
 
 <p><span>It points into the </span><span>__const</span><span>&nbsp;segment of the </span><span>TextToSpeechMauiSupport</span><span>&nbsp;library in the shared cache:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisVBydDqsc93nYCwXZuJdCfA16RTdCOLAgDG0jBVQ1_qAmFpkdYPTzqHv4W69SbzLVBkNd9lgBoy8m3EWOfwDpS9EKDxwWt35m1eJnpER6E2UxaG3e8tBYdBwxA7bHvMuvUzH2zRNYj-C1HfRQHrOAI5qWHBVm9E4XYMWV8q-Wu0qk0j4-hEyYMEGxuWc/s1999/image14.png"><img alt="Assembly code snippet with the memory address 000000021DB9EC20 highlighted, followed by DataSectionWriter function definitions." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisVBydDqsc93nYCwXZuJdCfA16RTdCOLAgDG0jBVQ1_qAmFpkdYPTzqHv4W69SbzLVBkNd9lgBoy8m3EWOfwDpS9EKDxwWt35m1eJnpER6E2UxaG3e8tBYdBwxA7bHvMuvUzH2zRNYj-C1HfRQHrOAI5qWHBVm9E4XYMWV8q-Wu0qk0j4-hEyYMEGxuWc/s1200/image14.png" title="Assembly code snippet with the memory address 000000021DB9EC20 highlighted, followed by DataSectionWriter function definitions."></a></span></p>
 
 <p><span>The next instruction adds </span><span>0x58</span><span>&nbsp;to that TextToSpeechMauiSupport pointer and reads a 64-bit value from there:</span></p>
 
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>[X8,#0x58]</span><span>&nbsp;</span><span>//</span><span>&nbsp;</span><span>x8</span><span>&nbsp;</span><span>:=</span><span>&nbsp;</span><span>[0x21DB9EC20+0x58]</span></p>
 
 <p><span>This loads the pointer to the function </span><span>_DataSectionWriter_CommitDataBlock</span><span>&nbsp;from </span><span>0x21DB9EC78</span><span>.</span></p>
 
 <p><span>IDA is simplifying something for us here: the function pointer loaded there is actually signed with the </span><span><a href="https://googleprojectzero.blogspot.com/2019/02/examining-pointer-authentication-on.html">A-family instruction key</a></span><span><a href="https://googleprojectzero.blogspot.com/2019/02/examining-pointer-authentication-on.html">&nbsp;with a zero context</a></span><span>. This signing happens transparently (either during load or when the page is faulted in).</span></p>
 
 <p><span>The remaining four instructions then check that the pointer wasn't </span><span>NULL</span><span>, load </span><span>X1</span><span>&nbsp;from offset </span><span>+0x28</span><span>&nbsp;in the fake 1MB object, move the pointer to the fake object back into </span><span>X0</span><span>&nbsp;and call the PAC'ed </span><span>_DataSectionWriter_CommitDataBlock</span><span>&nbsp;function pointer via </span><span>BLRAAZ</span><span>:</span></p>
 
 <p><span>CBZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>loc_187076758</span></p>
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X1,</span><span>&nbsp;</span><span>[X19,#0x28]</span></p>
 <p><span>MOV</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X0,</span><span>&nbsp;</span><span>X19</span></p>
 <p><span>BLRAAZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>X8</span></p>
 <h3 id="h.85z2ks5ykaev"><span>Callback-Oriented Programming</span></h3>
 <p><span>A well-known attack against PAC is to swap two valid, PAC'ed pointers which are signed in the same way but point to different places (e.g. swapping two function pointers with different semantics, allowing you to exploit those semantic differences).</span></p>
 
 <p><span>Since a large number of PAC-protected pointers are signed with the A-family instruction key with a zero-context value, there are a large number of pointers to choose from. "Just" having an ASLR defeat shouldn't be enough to achieve this though; surely you'd need to disclose the actual PAC'ed pointer value? But that's not what happened above.</span></p>
 
 <p><span>Notice that the </span><span>CFStream</span><span>&nbsp;objects don't directly contain the callback function pointers — there's an extra level of indirection. The </span><span>CFStream</span><span>&nbsp;object contains a pointer </span><span>to</span><span>&nbsp;a callback structure, and </span><span>that</span><span>&nbsp;structure has the PAC'd function pointers. And crucially: that first pointer, the one </span><span>to</span><span>&nbsp;the callbacks structure, isn't protected by PAC. This means that the attackers can freely swap pointers to callback structures, operating one-level removed from the function pointers.</span></p>
 
 <p><span>This might seem like a severe constraint, but the dyld_shared_cache is vast and there are easily enough pre-existing callback structures to build a "callback-oriented JOP" chain, chaining together unsigned pointers to signed function pointers.</span></p>
 
 <p><span>The initial portion of the payload is a large callback-oriented JOP chain which is used to bootstrap the evaluation of the next payload stage, a large NSExpression.</span></p><h3 id="h.x0b2urrhmfz4"><span>Similarities</span></h3>
 <p><span>There are a number of similarities between this exploit chain and PWNYOURHOME, an earlier exploit also attributed by CitizenLab to NSO, </span><span><a href="https://citizenlab.ca/2023/04/nso-groups-pegasus-spyware-returns-in-2022/">described in this blog post in April 2023</a></span><span>.</span></p>
 
 <p><span>That chain also had an initial stage targeting HomeKit, followed by a stage targeting </span><span>MessagesBlastDoorService</span><span>&nbsp;and also involving a </span><span>MakerNote</span><span>&nbsp;object — the Citizen Lab post claims that at the time the </span><span>MakerNote</span><span>&nbsp;was inside a PNG file. My guess would be that that PNG was being used as the delivery mechanism for the </span><span>MakerNote</span><span>&nbsp;bplist heap grooming primitives discussed in this post.</span></p>
 
 <p><span>Based on Citizen Lab's description it also seems like PWNYOURHOME was leveraging a similar callback-oriented JOP technique, and it seems likely that there was also a HomeKit-based ASLR disclosure. The PWNYOURHOME post has a couple of extra details around a minor fix which Apple made, preventing parsing of "</span><span>certain HomeKit messages unless they arrive from a plausible source.</span><span>" But there still aren't enough details to figure out the underlying vulnerability or primitive. It seems likely to me that the same issue, or a variant thereof was still in use in BLASTPASS.</span></p><h3 id="h.x3s02rsriugj"><span>Key material</span></h3>
 <p><span>Matthias from iVerify presented an </span><span><a href="https://i.blackhat.com/Asia-24/Asia-24-Frielingsdorf-YouShallNotPassAnalysing.pdf">initial analysis of the NSExpression payload at BlackHat Asia</a></span><span>&nbsp;in April 2024. In early July 2024, Matthias and I took a closer look at the final stages of the NSExpression payload which decrypts an AES-encrypted NSExpression and executes it.</span></p>
 
 <p><span>It seems very likely that the encrypted payload contains a BlastDoor sandbox escape. Although the BlastDoor sandbox profile is fairly restrictive it still allows access to a number of system services like </span><span>notifyd</span><span>, </span><span>logd</span><span>&nbsp;and </span><span>mobilegestalt</span><span>. In addition to the syscall attack surface there's also a non-trivial IOKit driver attack surface:</span></p>
 
 <p><span>...</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>iokit-open-user-client</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>(iokit-user-client-class</span><span>&nbsp;</span><span>"IOSurfaceRootUserClient")</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>(iokit-user-client-class</span><span>&nbsp;</span><span>"IOSurfaceAcceleratorClient")</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>(iokit-user-client-class</span><span>&nbsp;</span><span>"AGXDevice"))</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>iokit-open-service)</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>mach-derive-port)</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>mach-kernel-endpoint)</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>mach-lookup</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>(require-all</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(require-not</span><span>&nbsp;</span><span>(global-name</span><span>&nbsp;</span><span>"com.apple.diagnosticd"))</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(require-any</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(global-name</span><span>&nbsp;</span><span>"com.apple.logd")</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(global-name</span><span>&nbsp;</span><span>"com.apple.system.notification_center")</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(global-name</span><span>&nbsp;</span><span>"com.apple.mobilegestalt.xpc"))))</span></p>
 <p><span>...</span></p>
 
 <p><span>(This profile snippet was generated using the </span><span><a href="https://github.com/cellebrite-labs/sandblaster">Cellebrite labs' fork of SandBlaster</a></span><span>)</span></p>
 
 <p><span>In FORCEDENTRY the sandbox escape was contained directly in the NSExpression payload (though that was an escape from the less-restrictive IMTranscoderAgent sandbox). This time around it seems extra care has been taken to prevent analysis of the sandbox escape.</span></p>
 
 <p><span>The question is: where does the key come from? We had a few theories:</span></p>
 <ul><li><span>Perhaps the key is just obfuscated, and by completely reversing the </span><span>NSExpression</span><span>&nbsp;payload we can find it?</span></li><li><span>Perhaps the key is derived from some target-specific information?</span></li><li><span>Perhaps the key was somehow delivered in some other way and can be read from inside BlastDoor?</span></li></ul>
 
 <p><span>We spent a day analysing the NSExpression payload and concluded that the third theory appeared to be the correct one. The NSExpression walks up the native stack looking for the communication ports back to </span><span>imagent</span><span>. It then hijacks that communication, effectively taking over responsibility for parsing all subsequent incoming requests from </span><span>imagent</span><span>&nbsp;for "defusing" of iMessage payloads. The NSExpression loops 100 times, parsing incoming requests as XPC messages, reading the </span><span>request</span><span>&nbsp;xpc dictionary then the </span><span>data</span><span>&nbsp;</span><span>xpc data</span><span>&nbsp;object to get access to the raw, binary iMessage format. It waits until the device receives another iMessage with a specific format, and from that message extracts an AES key which is then used to decrypt the next NSExpression stage and evaluate it.</span></p>
 
 <p><span>We were unable to recover any messages with the matching format and therefore unable to analyse the next stage of the exploit.</span></p><h3 id="h.kwbzpb78bv4k"><span>Conclusion</span></h3>
 <p><span>In contrast to FORCEDENTRY, BLASTPASS's separation of the ASLR disclosure and RCE phases mitigated the need for a novel weird machine. Whilst the heap groom was impressively complicated and precise, the exploit still relied on well-known exploitation techniques. Furthermore, the MakerNote bplist groom and callback-JOP PAC defeat techniques appear to have been in use for multiple years, based on similarities with </span><span><a href="https://citizenlab.ca/2023/04/nso-groups-pegasus-spyware-returns-in-2022/">Citizenlab's blogpost in 2023</a></span><span>, which looked at devices compromised in 2022. </span></p>
 
 <p><span>Enforcing much stricter requirements on the format of the bplist inside the MakerNote (for example: a size limit or a strict-parser mode which rejects duplicate keys) would seem prudent. The callback-JOP issue is likely harder to mitigate.</span></p>
 
 <p><span>The HomeKit aspect of the exploit chain remains mostly a mystery, but it seems very likely that it was somehow involved in the ASLR disclosure. </span><span><a href="https://googleprojectzero.blogspot.com/2021/01/a-look-at-imessage-in-ios-14.html">Samuel Groß's post "A Look at iMessage in iOS 14"</a></span><span>&nbsp;in 2021,</span><span>&nbsp;mentioned that Apple added support for re-randomizing the shared cache slide of certain services. Ensuring that BlastDoor has a unique ASLR slide could be a way to mitigate this.</span></p>
 
 <p><span>This is the second in-the-wild NSO exploit which relied on simply renaming a file extension to access a parser in an unexpected context which shouldn't have been allowed. </span></p>
 
 <p><span>FORCEDENTRY had a .gif which was really a .pdf. </span></p>
 
 <p><span>BLASTPASS had a .png which was really a .webp. </span></p>
 
 <p><span>A basic principle of sandboxing is treating all incoming attacker-controlled data as untrusted, and not simply trusting a file extension.</span></p>
 
 <p><span>This speaks to a broader challenge in sandboxing: that current approaches based on process isolation can only take you so far. They increase the length of an exploit chain, but don't necessarily reduce the size of the initial remote attack surface. Accurately mapping, then truly reducing the scope of that initial remote attack surface should be a top priority.</span></p>
 
 


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Source code art in the Rivulet language (158 pts)]]></title>
            <link>https://github.com/rottytooth/Rivulet</link>
            <guid>43492652</guid>
            <pubDate>Thu, 27 Mar 2025 11:55:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/rottytooth/Rivulet">https://github.com/rottytooth/Rivulet</a>, See on <a href="https://news.ycombinator.com/item?id=43492652">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8b6255a742dcf233027f246b3233216d6f2c33d9641ba21e3de97e506571c7c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e31322d626c7565"><img src="https://camo.githubusercontent.com/8b6255a742dcf233027f246b3233216d6f2c33d9641ba21e3de97e506571c7c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e31322d626c7565" alt="Python versions" data-canonical-src="https://img.shields.io/badge/Python-3.12-blue"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cce5a2a14b0faab422e0bfcdc074afb46089831a0bf5930a7d8af3f31b98f847/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667"><img src="https://camo.githubusercontent.com/cce5a2a14b0faab422e0bfcdc074afb46089831a0bf5930a7d8af3f31b98f847/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667" alt="License" data-canonical-src="https://img.shields.io/badge/License-MIT-blue.svg"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Rivulet</h2><a id="user-content-rivulet" aria-label="Permalink: Rivulet" href="#rivulet"></a></p>
<p dir="auto">Rivulet is a programming language of flowing strands, written in semigraphic characters. A strand is not pictographic: its flow does not simulate computation. There are four kinds of strands, each with their own symbolism and grammatical rules. Together, they form glyphs, tightly-packed blocks of code whose strands execute together.</p>
<p dir="auto">Here is a complete Fibonacci program:</p>
<div data-snippet-clipboard-copy-content="   ╵──╮───╮╭─    ╵╵╭────────╮
    ╰─╯╰──╯│       ╰─╶ ╶╮╶╮╶╯
   ╰─────╮ │      ╭─────╯ ╰─────╮
         ╰─╯ ╷    ╰───       ───╯╷

   ╵╵─╮  ╭─╮     ╭──       ╵╵╰─╮  ──╮──╮
      ╰─╮│ ╰─╯ ╵╵╰─╯╶╮       ╴─╯  ╭─╯╭─╯
      ╰─╯╰─ ╰──╯╰────╯       ╭╴ ╵╶╯ ╶╯╶╮
        ╭─╮ ╭╴               │  ╰──────╯
        │ │ │                ╰─╮       ╭─╮ 
      │ │ ╰─╯                  │     │   │
      ╰─╯            ╷         ╰──── ╰───╯╷

   ╵╵ ╭──  ──╮  ╭─╮         ╵╰─╮
      ╰─╮  ╭─╯╭─╯ │          ╴─╯
       ╶╯╵╶╯  │ ╷╶╯          ╭─╮
     ╭─╮ ╰────╯ │   ╭─╮        │
     │ ╰────╮ ╭─╯ ╭╴│ │      ╭─╯
     ╰────╮ │ │ │ │ │ │      │
     ╭────╯ │ │ ╰─╯ │ ╷      ╰─╷
     ╰────╮ │ ╰─────╯ │  
          │ ╰─────────╯╷"><pre><code>   ╵──╮───╮╭─    ╵╵╭────────╮
    ╰─╯╰──╯│       ╰─╶ ╶╮╶╮╶╯
   ╰─────╮ │      ╭─────╯ ╰─────╮
         ╰─╯ ╷    ╰───       ───╯╷

   ╵╵─╮  ╭─╮     ╭──       ╵╵╰─╮  ──╮──╮
      ╰─╮│ ╰─╯ ╵╵╰─╯╶╮       ╴─╯  ╭─╯╭─╯
      ╰─╯╰─ ╰──╯╰────╯       ╭╴ ╵╶╯ ╶╯╶╮
        ╭─╮ ╭╴               │  ╰──────╯
        │ │ │                ╰─╮       ╭─╮ 
      │ │ ╰─╯                  │     │   │
      ╰─╯            ╷         ╰──── ╰───╯╷

   ╵╵ ╭──  ──╮  ╭─╮         ╵╰─╮
      ╰─╮  ╭─╯╭─╯ │          ╴─╯
       ╶╯╵╶╯  │ ╷╶╯          ╭─╮
     ╭─╮ ╰────╯ │   ╭─╮        │
     │ ╰────╮ ╭─╯ ╭╴│ │      ╭─╯
     ╰────╮ │ │ │ │ │ │      │
     ╭────╯ │ │ ╰─╯ │ ╷      ╰─╷
     ╰────╮ │ ╰─────╯ │  
          │ ╰─────────╯╷
</code></pre></div>
<p dir="auto">Here is the same program formatted by the interpreter into an svg, alongside two variations that produce equivalent computer instructions:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Fibonacci 1</th>
<th>Fibonacci 2</th>
<th>Fibonacci 4</th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/rottytooth/Rivulet/blob/main/images/fibonacci1.png"><img src="https://github.com/rottytooth/Rivulet/raw/main/images/fibonacci1.png"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/rottytooth/Rivulet/blob/main/images/fibonacci2.png"><img src="https://github.com/rottytooth/Rivulet/raw/main/images/fibonacci2.png"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/rottytooth/Rivulet/blob/main/images/fibonacci4.png"><img src="https://github.com/rottytooth/Rivulet/raw/main/images/fibonacci4.png"></a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th><g-emoji alias="warning">⚠️</g-emoji> WARNING</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Status: Version 0.4</strong>. This is a mostly-working interpreter, and a tool to generate svg files of source code. The command list will likely need to expand for usability.</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Design Philosophy</h2><a id="user-content-design-philosophy" aria-label="Permalink: Design Philosophy" href="#design-philosophy"></a></p>
<p dir="auto">Rivulet is a list-based language that avoids ordinary approaches to branching and looping. Strands never split and no strand is left un-executed.</p>
<p dir="auto">Its writing system was inspired by the satisfying compactness of mazes, Anni Albers's Meanders series, and space-filling algorithms. Its calligraphic aspects draw from natural language and favor the ability to write by hand.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Data Model</h2><a id="user-content-data-model" aria-label="Permalink: Data Model" href="#data-model"></a></p>
<p dir="auto">In Rivulet, data is organized into lists of adjacent cells, populated with zeros by default. Commands are applied to either a single cell or an entire list. They take a second parameter, a constant or the value of another cell.</p>
<p dir="auto">Commands can also be run list-to-list, applying the command to each successive cell of one list, from the corresponding cells of the other. While these consider zero-populated cells as well, a list-to-list command ends at the last cell holding a value in either list.</p>
<p dir="auto">The first list, List 1, is sometimes used as the output stream. This is an interpreter setting, as is whether they are displayed as numerical data or a Unicode string (where each value is rounded to the nearest integer).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Control Flow</h2><a id="user-content-control-flow" aria-label="Permalink: Control Flow" href="#control-flow"></a></p>
<p dir="auto">Every strand of every glyph runs in a Rivulet program; there is no equivalent of an "if" statement. If a glyph leads to an unwanted state, that glyph and the others of its block (all contiguous glyphs of the same level or higher), can be rolled back, setting the execution state to what it was before the glyph (or set of glyphs) fired. The conditional rollback is the only form of branching in Rivulet. Loops only end with a rollback of their last iteration. Tests for rollback are that a single cell or an entire list is either zero or non-zero, indicated by a special strand called the Question Strand.</p>
<p dir="auto">Data strands are run in the order they begin at the top left, moving through each column flowing to the right. So the strand beginning at coordinate 2,0 is run, then 2,1, then 3,0, and so on. Question strands are always run after the data strands are executed.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Syntax</h2><a id="user-content-syntax" aria-label="Permalink: Syntax" href="#syntax"></a></p>
<p dir="auto">Rivulet's nuanced grammar may seem overwhelming at first but becomes easy to read and write with practice.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Glyphs</h3><a id="user-content-glyphs" aria-label="Permalink: Glyphs" href="#glyphs"></a></p>
<p dir="auto">Glyphs begin with markers: ╵ in the upper left and end with ╷ at the bottom right. They must not have a vertically-oriented character directly above or below them, or they'll be confused for strands. Any text outside of glyph markers is ignored.</p>
<p dir="auto">The level of the glyph is marked by how many ╵s appear at the beginning of the glyph. Levels tell where glyphs fall within larger blocks of code.</p>
<p dir="auto">Glyphs can be arranged vertically or side-by-side. They are read in the order of their starting marker location: top-to-bottom, left-to-right.</p>
<p dir="auto">In other words, this program:</p>
<div data-snippet-clipboard-copy-content="1 ╵╰──╮╰─ ╭──╯ ╶╮
2    ─┘   └─    │
3    ╭──────────┘
5    └────────  ╷

1 ╵╵     ╭───╮ ╭─
2    ╴─╮╶╯╶╮ ╷╶╯
3  ╵╰──┘   │
5  ╰───────╯"><pre><code>1 ╵╰──╮╰─ ╭──╯ ╶╮
2    ─┘   └─    │
3    ╭──────────┘
5    └────────  ╷

1 ╵╵     ╭───╮ ╭─
2    ╴─╮╶╯╶╮ ╷╶╯
3  ╵╰──┘   │
5  ╰───────╯
</code></pre></div>
<p dir="auto">is identical to this one:</p>
<div data-snippet-clipboard-copy-content="1 ╵╰──╮╰─ ╭──╯ ╶╮ ╵╵     ╭───╮ ╭─
2    ─┘   └─    │    ╴─╮╶╯╶╮ ╷╶╯
3    ╭──────────┘  ╵╰──┘   │
5    └────────  ╷  ╰───────╯"><pre><code>1 ╵╰──╮╰─ ╭──╯ ╶╮ ╵╵     ╭───╮ ╭─
2    ─┘   └─    │    ╴─╮╶╯╶╮ ╷╶╯
3    ╭──────────┘  ╵╰──┘   │
5    └────────  ╷  ╰───────╯
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Lines of code</h3><a id="user-content-lines-of-code" aria-label="Permalink: Lines of code" href="#lines-of-code"></a></p>
<p dir="auto">The interpreter refers to code locations in terms of glyph numbers and then line numbers. Line numbers reset to 1 in each glyph. After line 1, they are numbered for each successive prime. These numbers are semantically meaningful for some strands.</p>
<p dir="auto">Other strand types use horizontal line numbers, counting in primes away from their starting hook. They always begin on line 1 and their neighbors are 2 on each side. They progress through primes, but always in distance from their starting point. Line numbers are every-other-line vertically: this is so vertical lines are not packed too tightly.</p>
<p dir="auto">Here are examples of such strands:</p>
<div data-snippet-clipboard-copy-content="  ╭─╮ ╭╴  ╭╴ 
  │ │ │   │ │
│ │ ╰─╯   │ │
╰─╯       ╰─╯
5 3 2 1   1 2"><pre><code>  ╭─╮ ╭╴  ╭╴ 
  │ │ │   │ │
│ │ ╰─╯   │ │
╰─╯       ╰─╯
5 3 2 1   1 2
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Lexemes</h2><a id="user-content-lexemes" aria-label="Permalink: Lexemes" href="#lexemes"></a></p>
<p dir="auto">Rivulet commands are written with these signs. Some re-use characters in a way that only context can disambiguate:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Name</th>
<th>Signs</th>
<th>Context</th>
<th>Interpretation</th>
</tr>
</thead>
<tbody>
<tr>
<td>Glyph Start and End</td>
<td>╵ ╷</td>
<td>Not be adjacent another sign with a vertical reading</td>
<td>Marks the glyph, the smallest block of code in Rivulet</td>
</tr>
<tr>
<td>Location</td>
<td>╵ ╷ ╴╶</td>
<td>Leaves a gap, to punctuate the end of a strand e.g. from left: ──╶</td>
<td>A reference pointer to a cell</td>
</tr>
<tr>
<td>Continue</td>
<td>─ │</td>
<td>Continues the flows in the same direction e.g.  ────</td>
<td>Depending on the strand type, it can add or subtract the line number of its horizontal or vertical line number, or simply continue the strand</td>
</tr>
<tr>
<td>Corner</td>
<td>╯┘╰└ ╮┐╭┌</td>
<td>Sharp or curved corners have the same meaning and can be used interchangeably</td>
<td>Turns direction of flow</td>
</tr>
<tr>
<td>Hook</td>
<td>╯┘╰╴└╴ ╮┐╭╴┌╴</td>
<td>It's a character or characters that turn ninety degrees at the beginning of some strands. If it turns to the right or left, it is extended with a half-length line, the same character used to indicate Location, but flipped to extend the hook and not leave a gap.</td>
<td></td>
</tr>
<tr>
<td>Non-hook Begin Strand</td>
<td>╷ above a │</td>
<td>Strands with no hook begin with the half-length character to extend it</td>
<td>Marks the beginning of a Question Strand</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Data Strands</h2><a id="user-content-data-strands" aria-label="Permalink: Data Strands" href="#data-strands"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Value Strands</h3><a id="user-content-value-strands" aria-label="Permalink: Value Strands" href="#value-strands"></a></p>
<p dir="auto">A value strand indicates a command that takes a constant value. Value strands (and other data strands), begin with a hook that points up (as in the third strand below) or to the left (as in the first two). All three of the strands below are value strands:</p>
<div data-snippet-clipboard-copy-content="1 ╵╰──╮╭──╯╶╮
2    ─┘└─   └─╮
3               
5              ╷"><pre><code>1 ╵╰──╮╭──╯╶╮
2    ─┘└─   └─╮
3               
5              ╷
</code></pre></div>
<p dir="auto">Each of these value strands writes to list 1, as their hooks sit on line 1. The first strand writes to the first cell (cell 0), as it appears first on that line, the second writes to the second cell (cell 1), etc.</p>
<p dir="auto">The first strand moves two spaces (two ── characters) to the right on line 1, adding 1 twice. It then moves one ── to the left on line 2, subtracting two. This leaves zero. This makes the first strand a <em>zero strand</em>. The default command applied to a strand is addition assignement, and so zero strands usually invoke no operation.</p>
<p dir="auto">The second strand is also a zero strand: it makes the same motions in reverse of the first strand, subtracting two and then adding two strand back.</p>
<p dir="auto">The third strand adds the value two to the third cell or list 1. The importance of the two zero strands is in marking the third strand to write to cell 2 of list 1, rather than cell 0.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Reference Strands</h3><a id="user-content-reference-strands" aria-label="Permalink: Reference Strands" href="#reference-strands"></a></p>
<p dir="auto">Reference strands look identical to value strands, only they end with a Location Marker, a small gap that punctuates the end of the strand. It appears in the two top strands here:</p>
<div data-snippet-clipboard-copy-content="1 ╵╰──╮  ╭──╯
2   ╴─┘╶╮└─╶ 
3       └─╮        
5            ╷"><pre><code>1 ╵╰──╮  ╭──╯
2   ╴─┘╶╮└─╶ 
3       └─╮        
5            ╷
</code></pre></div>
<p dir="auto">The movement of Reference Strands back and forth through the glyph has no effect on what they reference; only where they end.</p>
<p dir="auto">The first strand above is no longer a Zero Strand, but a reference to the first cell (cell 0) of List 2. The second strand beginning on line 1 refers to the second cell (cell 1) of List 2. This is because between those two strands is a strand writing to cell 0 of List 2. If we wanted both of the top strands to read from cell 0 of List 2, we would move its end to before that assignment (here using the vertical version of the Location Marker):</p>
<div data-snippet-clipboard-copy-content="1 ╵╰──╮╭────╯
2   ╴─┘╷╶╮ 
3        └─╮        
5            ╷"><pre><code>1 ╵╰──╮╭────╯
2   ╴─┘╷╶╮ 
3        └─╮        
5            ╷
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Action Strands</h2><a id="user-content-action-strands" aria-label="Permalink: Action Strands" href="#action-strands"></a></p>
<p dir="auto">The default command is addition assignment ( += ). To choose another commands, we create an Action Strand to apply to an existing data strand.</p>
<p dir="auto">Action Strands have hooks that point down or to the right. They sit directly below the data strand they apply to. If two data strands' hooks are aligned vertically, the top action strand applies to the top data strand, the second to the second, etc.</p>
<p dir="auto">Where a data strand's value is determined by movements to the left and right, action strands determine value through vertical movement. Their line numbers are independent of the other strands in the glyph, each beginning with line 1 as the column where they begin. Their neighbors to the left and right are line 2, followed by 3 and 5.</p>
<p dir="auto">EXAMPLE: This command that raises the values of list 1, cells 0 and 1, each to their fourth power:</p>
<div data-snippet-clipboard-copy-content=" 1 ╵╰─╮ ╰─╮
 2    │   │ 
 3  ╭╴└─╭╴└─
 5  │   │ 
 7  │   │
11  ╰─╮ ╰─╮
13    │   │ ╷
    1 2 1 2"><pre><code> 1 ╵╰─╮ ╰─╮
 2    │   │ 
 3  ╭╴└─╭╴└─
 5  │   │ 
 7  │   │
11  ╰─╮ ╰─╮
13    │   │ ╷
    1 2 1 2
</code></pre></div>
<p dir="auto">The action strands each have a value of 4, which corresponds to exponentiation_assignment, under data strands of value 4. Here is the (INCOMPLETE) command list, showing which values assign to what command:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Value</th>
<th>Command</th>
<th>Interpretation</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>addition_assignment</td>
<td>add to location, set to zero by default</td>
</tr>
<tr>
<td>0</td>
<td>overwrite</td>
<td>assignment, overwriting existing value</td>
</tr>
<tr>
<td>1</td>
<td>insert</td>
<td>inserts value after indicated cell</td>
</tr>
<tr>
<td>-1</td>
<td>subtraction assignment</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>multiplication assignment</td>
<td></td>
</tr>
<tr>
<td>-2</td>
<td>division assignment</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>no-op</td>
<td>TBD; currently only has value when assigned to list</td>
</tr>
<tr>
<td>-3</td>
<td>mod assignment</td>
<td>modulus of cell value against supplied argument</td>
</tr>
<tr>
<td>4</td>
<td>exponentiation assignment</td>
<td>raise to power of supplied argument"</td>
</tr>
<tr>
<td>-4</td>
<td>root assignment</td>
<td>take root at power of supplied argument</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">:WARNING: It is every-other-line that increments between the primes, as the vertical length for a block-drawing char is longer than their horizontal length. This sounds confusing but is usually clear visually.</p>
<p dir="auto">Here is an example of two action strands and their numbering:</p>
<div data-snippet-clipboard-copy-content="  ╭─╮ ╭╴  ╭╴ 
  │ │ │   │ │
│ │ ╰─╯   │ │
╰─╯       ╰─╯
5 3 2 1   1 2"><pre><code>  ╭─╮ ╭╴  ╭╴ 
  │ │ │   │ │
│ │ ╰─╯   │ │
╰─╯       ╰─╯
5 3 2 1   1 2
</code></pre></div>
<p dir="auto">The first strand has a value of: (1 - 2 + 2*3 - 5) = 2, multiplication assignment. The second strand has a value of (2 * 1) - (2 * 2) = -2, division assignment.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">List indicator</h3><a id="user-content-list-indicator" aria-label="Permalink: List indicator" href="#list-indicator"></a></p>
<p dir="auto">Action strands can also mark that a command applies not to a single cell (as is the default) but to an entire list. This is indicated by ending an action strand with a horizontal movement. When a list indicator appears, the data strand maintains the same order as if it were its cell that updates. If cell 3 has an action strand, it is still run after cell 2 and before cell 4 strands.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">List 2 List</h3><a id="user-content-list-2-list" aria-label="Permalink: List 2 List" href="#list-2-list"></a></p>
<p dir="auto">If an action strand ends with a location marker (the tiny gap), it shows that the action should be applied for every cell of the referenced list to every cell of the assigned list. This is only syntactically valid when the data strand also ends with a location marker (is a reference strand).</p>
<p dir="auto">Every cell with a number in the second list is applied to the cells in the first.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Question Strand Sets</h2><a id="user-content-question-strand-sets" aria-label="Permalink: Question Strand Sets" href="#question-strand-sets"></a></p>
<p dir="auto">Question Strands appear in pairs, one above the other.</p>
<p dir="auto">Together, they pose a question about the state of the data. Should it be found wanting, the glyph and its siblings (those at the same level) are rolled back. If in a loop, only the most recent iteration is undone. This is the only way to exit a loop.</p>
<p dir="auto">The top question strand begins with a vertical line. It ends either to the left or right of where it began (above or below has no semantic meaning).</p>
<p dir="auto">The bottom question strand begins directly above its partner. It too ends either to the left or right of where it began, and it ends with a vertical piece (indicating the question applies only to a single cell) or a horizontal piece (indicating the entire list is to be questioned, the answer an accumulation of its answer).</p>
<p dir="auto">Question strands, read only by their beginning vs end, can move back and forth through the glyph, filling in blank spaces. They are often decorative, gap-filling lines.</p>
<p dir="auto">Question lines always fail if an item is less than or equal to zero.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Top Line</th>
<th>Bottom Line</th>
<th>Use</th>
<th>Checks</th>
</tr>
</thead>
<tbody>
<tr>
<td>Left</td>
<td>Horizontal</td>
<td>If</td>
<td>List (all items)</td>
</tr>
<tr>
<td>Left</td>
<td>Vertical</td>
<td>If</td>
<td>Cell</td>
</tr>
<tr>
<td>Right</td>
<td>Horizontal</td>
<td>While</td>
<td>List</td>
</tr>
<tr>
<td>Right</td>
<td>Vertical</td>
<td>While</td>
<td>Cell</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">(any) vs (all) are equivalent if testing only a single cell</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Piranesi's Perspective Trick (2019) (324 pts)]]></title>
            <link>https://medium.com/@brunopostle/piranesis-perspective-trick-6bcd7a754da9</link>
            <guid>43492562</guid>
            <pubDate>Thu, 27 Mar 2025 11:41:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://medium.com/@brunopostle/piranesis-perspective-trick-6bcd7a754da9">https://medium.com/@brunopostle/piranesis-perspective-trick-6bcd7a754da9</a>, See on <a href="https://news.ycombinator.com/item?id=43492562">Hacker News</a></p>
Couldn't get https://medium.com/@brunopostle/piranesis-perspective-trick-6bcd7a754da9: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Modern C (119 pts)]]></title>
            <link>https://gustedt.gitlabpages.inria.fr/modern-c/</link>
            <guid>43492211</guid>
            <pubDate>Thu, 27 Mar 2025 10:49:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gustedt.gitlabpages.inria.fr/modern-c/">https://gustedt.gitlabpages.inria.fr/modern-c/</a>, See on <a href="https://news.ycombinator.com/item?id=43492211">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="text-1">
<p>
The free version of this new edition is now available at
</p>



<p>
This new edition has been the occasion to overhaul the presentation in
many places, but its main purpose is the update to the new C standard,
<a href="https://www.iso.org/standard/82075.html">C23</a>.  The goal was to publish this new edition of Modern C at the same
time as the new C standard goes through the procedure of ISO
publication. The closest approximation of the contents of the new
standard in a publically available document can be found <a href="https://www.open-std.org/JTC1/SC22/WG14/www/docs/n3220.pdf">here</a>.  New
releases of major compilers already implement most of the new features
that it brings.
</p>

<p>
Among the most noticeable changes and additions that we handle are
those for integers: there are new bit-precise types coined
<code>_BitInt(N)</code>, new C library headers <code>&lt;stdckdint.h&gt;</code> (for arithmetic
with overflow check) and <code>&lt;stdbit.h&gt;</code> (for bit manipulation),
possibilities for 128 bit types on modern architectures, and
substantial improvements for enumeration types. Other new concepts in
C23 include a <code>nullptr</code> constant and its underlying type, syntactic
annotation with attributes, more tools for type generic programming
such as type inference with <code>auto</code> and <code>typeof</code>, default
initialization with <code>{}</code>, even for variable length arrays, and
<code>constexpr</code> for name constants of any type. Furthermore, new material
has been added, discussing compound expressions and lambdas, so-called
“internationalization”, a comprehensive approach for program failure.
</p>

<p>
Also added has been an appendix and a temporary include header for an
easy transition to C23 on existing platforms, that will allow you to
start off with C23 right away.
</p>

<hr>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Glider for Apple II (104 pts)]]></title>
            <link>https://www.colino.net/wordpress/en/glider-for-apple-ii/</link>
            <guid>43491977</guid>
            <pubDate>Thu, 27 Mar 2025 10:12:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.colino.net/wordpress/en/glider-for-apple-ii/">https://www.colino.net/wordpress/en/glider-for-apple-ii/</a>, See on <a href="https://news.ycombinator.com/item?id=43491977">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="wrapper">
	
		
	<article class="page">
		<div>
					
<p>A lot of people my age that touched Macintoshes in the nineties know that game, Glider, written by John Calhoun. I recently started wanting to try and program a game for the Apple II as it is something I never attempted before, and I wanted to see if I got good enough at 6502 assembly for that. After a difficult start, I managed to have the project take off (pun intended) and decided to make a Glider reimplementation for the Apple II.</p>



<figure><a href="https://www.colino.net/wordpress/wp-content/uploads/glider-splash.png"><img fetchpriority="high" decoding="async" width="917" height="688" src="https://www.colino.net/wordpress/wp-content/uploads/glider-splash.png" alt="" srcset="https://www.colino.net/wordpress/wp-content/uploads/glider-splash.png 917w, https://www.colino.net/wordpress/wp-content/uploads/glider-splash-400x300.png 400w, https://www.colino.net/wordpress/wp-content/uploads/glider-splash-150x113.png 150w, https://www.colino.net/wordpress/wp-content/uploads/glider-splash-768x576.png 768w" sizes="(max-width: 917px) 100vw, 917px"></a><figcaption>Glider’s splash screen</figcaption></figure>



<p>I hope you will enjoy playing it as much as I enjoyed developing it!</p>



<p>Glider for Apple II is now freely downloadable:</p>



<div><figure><img decoding="async" width="256" height="225" src="https://www.colino.net/wordpress/wp-content/uploads/glider-dl.png" alt="" srcset="https://www.colino.net/wordpress/wp-content/uploads/glider-dl.png 256w, https://www.colino.net/wordpress/wp-content/uploads/glider-dl-150x132.png 150w" sizes="(max-width: 256px) 100vw, 256px"></figure></div>



<p>If you find issues, please <a href="https://github.com/colinleroy/a2tools/issues">report them on the issue tracker</a>!</p>



<p>Glider for Apple II requires an Apple ][+ or more recent; on the Apple ][+, a Mouse Card and mouse are required to play. On more recent computers of the Apple II line, the mouse is optional and Glider can be controlled either by mouse or keyboard. Glider for Apple II is best enjoyed on a monochrome screen. This is a design choice.</p>



<p>If you’re interested in some technical details about my first 6502 game’s development, I have put up a <a href="https://www.colino.net/wordpress/en/archives/2025/03/22/glider-for-apple-ii-development-log/" data-type="post" data-id="6540">Glider for Apple II development log</a> article.</p>



<figure><video controls="" src="https://www.colino.net/wordpress/wp-content/uploads/glider-demo.mp4"></video><figcaption>Playing through the first level</figcaption></figure>
					
				</div>
	</article><!--/.post-->
	
	
</div></div>]]></description>
        </item>
    </channel>
</rss>