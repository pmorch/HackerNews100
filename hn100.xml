<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 03 May 2024 15:00:05 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[DNS traffic can leak outside the VPN tunnel on Android (138 pts)]]></title>
            <link>https://mullvad.net/en/blog/dns-traffic-can-leak-outside-the-vpn-tunnel-on-android</link>
            <guid>40247604</guid>
            <pubDate>Fri, 03 May 2024 13:46:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mullvad.net/en/blog/dns-traffic-can-leak-outside-the-vpn-tunnel-on-android">https://mullvad.net/en/blog/dns-traffic-can-leak-outside-the-vpn-tunnel-on-android</a>, See on <a href="https://news.ycombinator.com/item?id=40247604">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main"><article itemscope="" itemtype="https://schema.org/BlogPosting"><div> <p> <time datetime="2024-05-03T12:43:30.052367Z" itemprop="datePublished" content="2024-05-03T12:43:30.052367Z">May 3, 2024</time> <a href="https://mullvad.net/en/blog/tag/privacy">Privacy</a>&nbsp;<a href="https://mullvad.net/en/blog/tag/app">App</a>&nbsp;</p>  <p>We were recently made aware of multiple potential DNS leaks on Android. They stem from bugs in Android itself, and only affect certain apps.</p>
<p>On Monday 22 of April we became aware of a <a href="https://www.reddit.com/r/mullvadvpn/comments/1c9p96y/dns_leak_with_block_connections_without_vpn_on/">user report on Reddit</a> of a <a href="https://en.wikipedia.org/wiki/DNS_leak">DNS leak</a>. The report detailed how the user managed to leak DNS queries when disabling and enabling VPN while having “Block connections without VPN” on. We immediately started an internal investigation that could confirm the issue. The investigation also led to more findings of scenarios that can cause DNS leaks on Android.</p>
<h3>Findings</h3>
<p>Identified scenarios where the Android OS can leak DNS traffic:</p>
<ul>
<li>If a VPN is active without any DNS server configured.</li>
<li>For a short period of time while a VPN app is re-configuring the tunnel or is being force stopped/crashes.</li>
</ul>
<p>The leaks seem to be limited to direct calls to the C function <code>getaddrinfo</code>. Apps that use this way to resolve domain names cause leaks in the scenarios listed above. We have not found any leaks from apps that only use Android API:s such as <a href="https://developer.android.com/reference/android/net/DnsResolver" rel="nofollow">DnsResolver</a>. The Chrome browser is an example of an app that can use <code>getaddrinfo</code> <a href="https://source.chromium.org/chromium/chromium/src/+/main:android_webview/browser/aw_pac_processor.cc;l=197;drc=133b2d903fa57cfda1317bc589b349cf4c284b7c" rel="nofollow">directly</a>.</p>
<p>The above applies regardless of whether <em>Always-on VPN</em> and <em>Block connections without VPN</em> is enabled or not, which is not expected OS behavior and should therefore be fixed upstream in the OS.</p>
<p>We’ve been able to confirm that these leaks occur in multiple versions of Android, including the latest version (Android 14).</p>
<h3>Improvements</h3>
<p>Our app currently does not set any DNS server in its blocking state. When our app fails to set up a tunnel in a way that is not recoverable, it enters the blocking state. In this state it stops traffic from leaving the device. However, it does not set any DNS server in this state, and as a result the above described DNS leaks can happen. We will work around the OS bug by setting a bogus DNS server for now. You can expect a release with this fix soon.</p>
<p>The leak during tunnel reconnects is harder for us to mitigate in our app. We are still looking for solutions. We can potentially minimize the amount of times a tunnel re-configuration happens, but we currently don’t think this leak can be fully prevented.</p>
<p>It should be made clear that these workarounds should not be needed in any VPN app. Nor is it wrong for an app to use <code>getaddrinfo</code> to resolve domain names. Instead, these issues should be addressed in the OS in order to protect all Android users regardless of which apps they use.</p>
<p>We have reported <a href="https://issuetracker.google.com/issues/337961996" rel="nofollow">the issues and suggested improvements</a> to Google and hope that they will address this quickly.</p>
<h3>Steps to reproduce</h3>
<p>The following steps reproduce the second scenario above, where a VPN user changes the tunnel configuration, e.g. switching to another server or changing DNS server.</p>
<p>Here we use the WireGuard app since it has become a reference Android VPN implementation. It should be noted that the leaks can probably be reproduced with any other Android VPN app also. We use Chrome to trigger the leaks since it is one of the apps we have confirmed uses <code>getaddrinfo</code>.</p>
<ol>
<li>Download <a href="https://mullvad.net/media/uploads/2024/05/03/spam_get_requests.html">spam_get_requests.html</a></li>
<li>Install the WireGuard app &amp; Chrome</li>
<li>Import <a href="https://mullvad.net/media/uploads/2024/05/03/wg1.conf">wg1.conf</a>, <a href="https://mullvad.net/media/uploads/2024/05/03/wg2.conf">wg2.conf</a> into WireGuard</li>
<li>Enable the wg1 tunnel in the WireGuard app and allow the VPN permission</li>
<li>In Android VPN Settings enable “Always-on VPN” &amp; “Block connections without VPN” for WireGuard</li>
<li>Start capturing data on your router by using e.g <code>tcpdump</code><br><code>$ tcpdump -i &lt;INTERFACE&gt; host &lt;IP of android device&gt;</code></li>
<li>Split the screen to show both WireGuard &amp; Chrome side by side</li>
<li>Open <code>spam_get_requests.html</code> with Chrome &amp; press “Start”</li>
<li>Toggle back and fourth between wg1 and wg2 in the WireGuard app until you see the leaks in the next step.</li>
<li>Observe DNS traffic similar to this on the router:
<pre>11:50:27.816359 IP Pixel-Tablet.lan.53353 &gt; OpenWrt.lan.53: 11200+ A? 307lf5rgn6-19282-11-50-27-519z.mullvad.test.lan. (65)<br>11:50:27.816359 IP Pixel-Tablet.lan.48267 &gt; OpenWrt.lan.53: 44347+ A? 307lf5rgn6-19284-11-50-27-579z.mullvad.test.lan. (65)<br>11:50:27.816396 IP Pixel-Tablet.lan.16747 &gt; OpenWrt.lan.53: 44584+ A? 307lf5rgn6-19289-11-50-27-729z.mullvad.test. (61)<br>11:50:27.816458 IP OpenWrt.lan.53 &gt; Pixel-Tablet.lan.53353: 11200 NXDomain 0/0/0 (65)<br>11:50:27.816476 IP Pixel-Tablet.lan.45727 &gt; OpenWrt.lan.53: 40503+ A? 307lf5rgn6-19290-11-50-27-759z.mullvad.test. (61)<br>11:50:27.816542 IP OpenWrt.lan.53 &gt; Pixel-Tablet.lan.48267: 44347 NXDomain 0/0/0 (65)<br>11:50:27.816588 IP Pixel-Tablet.lan.43821 &gt; OpenWrt.lan.53: 36295+ A? 307lf5rgn6-19291-11-50-27-789z.mullvad.test. (61) 
11:50:27.816625 IP OpenWrt.lan.53 &gt; Pixel-Tablet.lan.16747: 44584 NXDomain 0/0/0 (61)</pre>
</li>
</ol>
<p>Since “Block connections without VPN” was active, nothing except encrypted WireGuard traffic should have left the device, but here we see plaintext DNS leaving the device.</p>
<h3>Conclusions and recommendations</h3>
<p>DNS leaks may have serious privacy implications for users, and can be used to derive users' approximate location or find out what websites and services a user uses.</p>
<p>These finding also shows once again that “Block connections without VPN” does not live up to its name (or documentation) and that it has multiple flaws. Apps may still leak DNS traffic during the conditions mentioned above, and as <a href="https://mullvad.net/en/blog/android-leaks-connectivity-check-traffic">previously reported</a> it still leaks connection check traffic.</p>
<p>Depending on your threat model this might mean that you should avoid using Android altogether for anything sensitive, or employ other mitigations to prevent the leaks. We aim to partially mitigate these problems in our app, so make sure to keep the app up-to-date.</p><!-- HTML_TAG_END --></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Deletion of user account (166 pts)]]></title>
            <link>https://www.soflow.com/eu/product/deletion-of-user-account/</link>
            <guid>40246171</guid>
            <pubDate>Fri, 03 May 2024 10:40:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.soflow.com/eu/product/deletion-of-user-account/">https://www.soflow.com/eu/product/deletion-of-user-account/</a>, See on <a href="https://news.ycombinator.com/item?id=40246171">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                <p>Always wear a helmet when riding. Avoid riding in water, slick surfaces, riding in the rain/snow, up steep hills, down steep hills, in traffic, and over cracks, train tracks, gravel, rocks, or any other surface that isn’t meant to be ridden on. Never ride in mud or dirt.</p>
<p>Warning: When you ride a SoFlow Electric Skateboard or Scooter, there is a risk of death or serious injury from loss of control, collisions, and falls. Before you ride, click here also, please read and follow all warnings and instructions in your SoFlow manual.</p>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to Use JSON Path (147 pts)]]></title>
            <link>https://bump.sh/blog/how-to-use-json-path</link>
            <guid>40245637</guid>
            <pubDate>Fri, 03 May 2024 09:06:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bump.sh/blog/how-to-use-json-path">https://bump.sh/blog/how-to-use-json-path</a>, See on <a href="https://news.ycombinator.com/item?id=40245637">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      









































































































































































































































































































































































































<p>A few years ago most API designers, developers, and technical writers would have had very little reason to bump into JSONPath, but its starting to get more and more relevant as more tools and standards start relying on it. So what is JSONPath, what is it used for, and how can you get up to speed with using it?</p>

<p>JSONPath is a query language that can be used to extract data from JSON documents, which at first might not sound very exciting, but remember... OpenAPI is just a JSON (or YAML) document, so you can use JSONPath to poke around in OpenAPI and do various things.</p>

<p>You can use <a href="https://github.com/OAI/Overlay-Specification" rel="nofollow noopener" target="_blank">JSONPath for OpenAPI Overlays</a>, to patch OpenAPI documents with extra documentation content, code samples, or whatever else.</p>

<p>You can use <a href="https://docs.stoplight.io/docs/spectral/d3482ff0ccae9-rules#given" rel="nofollow noopener" target="_blank">JSONPath in Spectral</a> to write incredibly advanced linting rules which can power your <a href="https://apisyouwonthate.com/blog/automated-style-guides-for-rest-graphql-grpc/" rel="nofollow noopener" target="_blank">automated API Style Guides</a>.</p>

<p>You can even use <a href="https://aws.amazon.com/blogs/compute/using-jsonpath-effectively-in-aws-step-functions/" rel="nofollow noopener" target="_blank">JSONPath in AWS Step Functions</a>.</p>

<p>JSONPath is popping up all over the the place these days, and if you work with OpenAPI it's definitely a handy tool to have on your belt.</p>

<h2 id="how-does-jsonpath-work">How does JSONPath Work?</h2>

<p>JSONPath is one of several query languages which will let you filter, query, and traverse through a chunk of JSON, not just to pull bits out, but to navigate complex data structures, with syntax for getting into specific array indexes, filtering through an objects properties or array values before continuing on to its children.</p>

<p>Here's a sample JSONPath from the RFC.</p>
<div><pre><code><span>$</span><span>.</span><span>store</span><span>.</span><span>book</span><span>[?@.</span><span>price</span> <span>&lt;</span> <span>10</span><span>].</span><span>title</span>
</code></pre></div><p>Anyone familiar with XPath in XML will be thinking "hmm, this looks pretty familiar!" and you're spot on, JSONPath is <a href="https://www.rfc-editor.org/rfc/rfc9535#inspired-by-xpath" rel="nofollow noopener" target="_blank">inspired by XPath</a>. If you've never heard of XPath no worries, we'll start from scratch here.
</p>
<p>To see how this works we'll need some JSON to run it against, so here is an example of some JSON from the RFC.</p>
<div><pre><code><span>{</span><span>
  </span><span>"store"</span><span>:</span><span> </span><span>{</span><span>
    </span><span>"book"</span><span>:</span><span> </span><span>[</span><span>
      </span><span>{</span><span>
        </span><span>"category"</span><span>:</span><span> </span><span>"reference"</span><span>,</span><span>
        </span><span>"author"</span><span>:</span><span> </span><span>"Nigel Rees"</span><span>,</span><span>
        </span><span>"title"</span><span>:</span><span> </span><span>"Sayings of the Century"</span><span>,</span><span>
        </span><span>"price"</span><span>:</span><span> </span><span>8.95</span><span>
      </span><span>},</span><span>
      </span><span>{</span><span>
        </span><span>"category"</span><span>:</span><span> </span><span>"fiction"</span><span>,</span><span>
        </span><span>"author"</span><span>:</span><span> </span><span>"Evelyn Waugh"</span><span>,</span><span>
        </span><span>"title"</span><span>:</span><span> </span><span>"Sword of Honour"</span><span>,</span><span>
        </span><span>"price"</span><span>:</span><span> </span><span>12.99</span><span>
      </span><span>},</span><span>
      </span><span>{</span><span>
        </span><span>"category"</span><span>:</span><span> </span><span>"fiction"</span><span>,</span><span>
        </span><span>"author"</span><span>:</span><span> </span><span>"Herman Melville"</span><span>,</span><span>
        </span><span>"title"</span><span>:</span><span> </span><span>"Moby Dick"</span><span>,</span><span>
        </span><span>"isbn"</span><span>:</span><span> </span><span>"0-553-21311-3"</span><span>,</span><span>
        </span><span>"price"</span><span>:</span><span> </span><span>8.99</span><span>
      </span><span>},</span><span>
      </span><span>{</span><span>
        </span><span>"category"</span><span>:</span><span> </span><span>"fiction"</span><span>,</span><span>
        </span><span>"author"</span><span>:</span><span> </span><span>"J. R. R. Tolkien"</span><span>,</span><span>
        </span><span>"title"</span><span>:</span><span> </span><span>"The Lord of the Rings"</span><span>,</span><span>
        </span><span>"isbn"</span><span>:</span><span> </span><span>"0-395-19395-8"</span><span>,</span><span>
        </span><span>"price"</span><span>:</span><span> </span><span>22.99</span><span>
      </span><span>}</span><span>
    </span><span>],</span><span>
    </span><span>"bicycle"</span><span>:</span><span> </span><span>{</span><span>
      </span><span>"color"</span><span>:</span><span> </span><span>"red"</span><span>,</span><span>
      </span><span>"price"</span><span>:</span><span> </span><span>399</span><span>
    </span><span>}</span><span>
  </span><span>}</span><span>
</span><span>}</span><span>
</span></code></pre></div>
<p>Now when you run that through any sort of JSONPath tool, you could expect to see these results.</p>
<div><pre><code><span>[</span><span>
  </span><span>"Sayings of the Century"</span><span>,</span><span>
  </span><span>"Moby Dick"</span><span>
</span><span>]</span><span>
</span></code></pre></div>
<h3 id="syntax">Syntax</h3>

<p>There is a whole lot of syntax to learn, but once you figure out the constituent pieces you can start to compile them into really advanced queries.</p>

<table><thead>
<tr>
<th>Syntax</th>
<th>Element Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>$</code></td>
<td>root node identifier (Section 2.2)</td>
</tr>
<tr>
<td><code>@</code></td>
<td>current node identifier (Section 2.3.5) (valid only within filter selectors)</td>
</tr>
<tr>
<td><code>[&lt;selectors&gt;]</code></td>
<td>child segment (Section 2.5.1): selects zero or more children of a node</td>
</tr>
<tr>
<td><code>.name</code></td>
<td>shorthand for ['name' ]</td>
</tr>
<tr>
<td><code>.*</code></td>
<td>shorthand for [*]</td>
</tr>
<tr>
<td><code>..⁠[&lt;selectors&gt;]</code></td>
<td>descendant segment (Section 2.5.2): selects zero or more descendants of a node</td>
</tr>
<tr>
<td><code>..name</code></td>
<td>shorthand for .. [' name' ]</td>
</tr>
<tr>
<td><code>..*</code></td>
<td>shorthand for ..[*]</td>
</tr>
<tr>
<td><code>'name'</code></td>
<td>name selector (Section 2.3.1): selects a named child of an object</td>
</tr>
<tr>
<td><code>*</code></td>
<td>wildcard selector (Section 2.3.2): selects all children of a node</td>
</tr>
<tr>
<td><code>3</code></td>
<td>index selector (Section 2.3.3): selects an indexed child of an array (from 0)</td>
</tr>
<tr>
<td><code>0:100:5</code></td>
<td>array slice selector (Section 2.3.4): start:end:step for arrays</td>
</tr>
<tr>
<td><code>?&lt;logical-expr&gt;</code></td>
<td>filter selector (Section 2.3.5): selects particular children using a logical expression</td>
</tr>
<tr>
<td><code>length(@.foo)</code></td>
<td>function extension (Section 2.4): invokes a function in a filter expression</td>
</tr>
</tbody></table>

<p><em>Overview of JSONPath Syntax, from <a href="https://www.rfc-editor.org/rfc/rfc9535#tbl-overview" rel="nofollow noopener" target="_blank">RFC 9535</a>.</em></p>

<h3 id="examples">Examples</h3>

<p>If that isn't making too much sense, here are some examples to help you visualize.</p>

<table><thead>
<tr>
<th>JSONPath</th>
<th>Intended Result</th>
</tr>
</thead><tbody>
<tr>
<td><code>$.store.book[*].author</code></td>
<td>the authors of all books in the store</td>
</tr>
<tr>
<td><code>$..author</code></td>
<td>all authors</td>
</tr>
<tr>
<td><code>$.store.*</code></td>
<td>all things in the store, which are some books and a red bicycle</td>
</tr>
<tr>
<td><code>$.store..price</code></td>
<td>the prices of everything in the store</td>
</tr>
<tr>
<td><code>$..book[2]</code></td>
<td>the third book</td>
</tr>
<tr>
<td><code>$..book[2].author</code></td>
<td>the third book's author</td>
</tr>
<tr>
<td><code>$..book[2].publisher</code></td>
<td>empty result: the third book does not have a "publisher" member</td>
</tr>
<tr>
<td><code>$..book[-1]</code></td>
<td>the last book in order</td>
</tr>
<tr>
<td><code>$..book[0,1]</code></td>
<td>the first two books</td>
</tr>
<tr>
<td><code>$..book[:2]</code></td>
<td>the first two books</td>
</tr>
<tr>
<td><code>$..book[<a href="https://bump.sh/cdn-cgi/l/email-protection" data-cfemail="526d127c3b21303c">[email&nbsp;protected]</a>]</code></td>
<td>all books with an ISBN number</td>
</tr>
<tr>
<td><code>$..book[<a href="https://bump.sh/cdn-cgi/l/email-protection" data-cfemail="80bfc0aef0f2e9e3e5">[email&nbsp;protected]</a>&lt;10]</code></td>
<td>all books cheaper than 10</td>
</tr>
<tr>
<td><code>$..*</code></td>
<td>all member values and array elements contained in the input value</td>
</tr>
</tbody></table>

<p><em>Example JSONPath Expressions and Their Intended Results When Applied to the Example JSON Value, from <a href="https://www.rfc-editor.org/rfc/rfc9535#name-jsonpath-examples" rel="nofollow noopener" target="_blank">RFC 9535: 1.5. JSONPath Examples</a>.</em></p>

<p>By combining these bits of example syntax together you can do amazing and powerful things with JSONPath, so let's look at how to do those amazing things in OpenAPI.</p>

<h3 id="jsonpath-openapi">JSONPath &amp; OpenAPI</h3>

<p>Take an OpenAPI document, like the <a href="https://github.com/bump-sh-examples/train-travel-api" rel="nofollow noopener" target="_blank">Train Travel API</a>.</p>
<div><pre><code>git clone github.com/bump-sh-examples/train-travel-api

<span>cd </span>train-travel-api
</code></pre></div>
<p>Then install <a href="https://www.jsware.io/jsonpath-cli/" rel="nofollow noopener" target="_blank">jsonpath-cli</a> just so we can try some things out.</p>
<div><pre><code>npm <span>install</span> <span>-g</span> @jsware/jsonpath-cli
</code></pre></div>
<p>Optional, if you're working with YAML, you might want to convert from YAML to JSON in the CLI too.</p>
<div><pre><code>brew <span>install </span>yq

yq <span>eval</span> <span>-o</span><span>=</span>json openapi.yaml <span>&gt;</span> openapi.json
</code></pre></div>
<p>Don't worry this is just for playing around, all of the tooling that uses JSONPath will support YAML without bodges like this. Let's just get on the same page for this guide.</p>

<h3 id="querying-openapi-with-jsonpath">Querying OpenAPI with JSONPath</h3>

<p>Once you have a JSON file to work with, we can use the <code>jpp</code> command, pass in a JSON/YAML document, and provide a JSONPath expression to query the document for specific parts.</p>
<div><pre><code><span>$ </span>jpp <span>--pretty</span> <span>'$.info'</span> openapi.json

<span>[</span>
  <span>{</span>
    <span>"title"</span>: <span>"Train Travel API"</span>,
    <span>"description"</span>: <span>"API for finding and booking train trips across Europe."</span>,
    <span>"version"</span>: <span>"1.0.0"</span>,
    <span>"contact"</span>: <span>{</span>
      <span>"name"</span>: <span>"Train Support"</span>,
      <span>"url"</span>: <span>"https://example.com/support"</span>,
      <span>"email"</span>: <span>"<a href="https://bump.sh/cdn-cgi/l/email-protection" data-cfemail="9eedebeeeef1eceadefbe6fff3eef2fbb0fdf1f3">[email&nbsp;protected]</a>"</span>
    <span>}</span>,
    <span>"license"</span>: <span>{</span>
      <span>"name"</span>: <span>"Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"</span>,
      <span>"identifier"</span>: <span>"CC-BY-NC-SA-4.0"</span>
    <span>}</span>
  <span>}</span>
<span>]</span>
</code></pre></div>
<p>In this example <code>$</code> refers to the root JSON document, then <code>.info</code> is using dot notation to access the <code>info</code> key in that object.</p>

<p>We can get a bit more advanced, and pull up a list of paths.</p>
<div><pre><code><span>$ </span>jpp <span>--pretty</span> <span>'$.paths.*~'</span> openapi.json

<span>[</span>
  <span>"/stations"</span>,
  <span>"/trips"</span>,
  <span>"/bookings"</span>,
  <span>"/bookings/{bookingId}"</span>,
  <span>"/bookings/{bookingId}/payment"</span>
<span>]</span>
</code></pre></div>
<p>This uses the <code>.*</code> syntax which is basically grabbing all children of the paths object, then using <code>~</code> to grab the keys instead of the values.</p>

<p>What sort of query language would JSONPath be if we could not do queries? Let's pull up a list of paths which are a <code>get</code> or a <code>post</code>, but ignore all the <code>put</code>, <code>patch</code>, <code>delete</code>, etc.</p>
<div><pre><code><span>$ </span>jpp <span>--pretty</span> <span>'$.paths[?(@.put || @.post)]~'</span> openapi.json

<span>[</span>
  <span>"/bookings"</span>,
  <span>"/bookings/{bookingId}/payment"</span>
<span>]</span>
</code></pre></div>
<h2 id="openapi-overlays-powered-by-jsonpath">OpenAPI Overlays powered by JSONPath</h2>

<p>One of the main uses for JSONPath will be for working OpenAPI documents, often by technical writers or other folks in the API governance space to check or improve OpenAPI documents.</p>

<p>Overlays are a list of actions, which make up a "target" which is a JSONPath, and an operation of either "update" or "remove".</p>

<p>Let's look at an update command.</p>
<div><pre><code><span># overlays.yaml</span>

<span>overlay</span><span>:</span> <span>1.0.0</span>
<span>info</span><span>:</span>
  <span>title</span><span>:</span> <span>Overlay to customise API for Protect Earth</span>
  <span>version</span><span>:</span> <span>0.0.1</span>
<span>actions</span><span>:</span>
  <span>-</span> <span>target</span><span>:</span> <span>'</span><span>$.info'</span>
    <span>description</span><span>:</span> <span>Update description and contact for our audience.</span>
    <span>update</span><span>:</span>
      <span>description</span><span>:</span> <span>&gt;</span>
        <span>A new and much more interesting long form description, which has all sorts of</span>
        <span>Markdown, or more specifically [CommonMark](https://commonmark.org/) which</span>
        <span>is _like_ Markdown but **better**, because it's an actual standard instead of a</span>
        <span>series of sometimes vaguely consistent conventions.</span>

        <span>Anyway, this is a good place to write all sorts of helpful stuff, link to other</span>
        <span>getting started content, link to where people can find access tokens, or even</span>
        <span>paste some code samples for getting your first API request off the ground.</span>

      <span>contact</span><span>:</span>
        <span>name</span><span>:</span> <span>Support Team</span>
        <span>url</span><span>:</span> <span>https://example.com/contact</span>
        <span>email</span><span>:</span> <span><a href="https://bump.sh/cdn-cgi/l/email-protection" data-cfemail="6b181e1b1b04191f2b0e130a061b070e4504190c">[email&nbsp;protected]</a></span>

</code></pre></div>
<p>This overlays file is pointing to the JSONPath target <code>$.info</code>, then updating the object with the new bits of OpenAPI for <code>description</code> and <code>contact</code>, as per the <a href="https://spec.openapis.org/oas/v3.1.0" rel="nofollow noopener" target="_blank">OpenAPI specification</a>. This can be handy for improving the quality of all sorts of descriptions, not just info, and for popping in support team contact information if the API developers inevitably forgot to mention that sort of thing.</p>

<p>Instead of using those <code>yq</code> or <code>jpp</code> tools we grabbed just to practice, we can use the <a href="https://github.com/bump-sh/cli" rel="nofollow noopener" target="_blank">Bump.sh CLI</a> which has support for Overlays built in, and thankfully it'll work just fine with YAML or JSON.</p>
<div><pre><code>npm <span>install</span> <span>-g</span> bump-cli

bump overlay openapi.yaml overlays.yaml <span>&gt;</span> openapi.new.yaml
</code></pre></div>
<p>If we were to run that overlay on the Train Travel API, the resulting <code>openapi.new.yaml</code> would like like this:</p>
<div><pre><code><span>openapi</span><span>:</span> <span>3.1.0</span>
<span>info</span><span>:</span>
  <span>title</span><span>:</span> <span>Train Travel API</span>
  <span>description</span><span>:</span> <span>&gt;</span>
    <span>A new and much more interesting long form description, which has all sorts</span>
    <span>of  Markdown, or more specifically [CommonMark](https://commonmark.org/)</span>
    <span>which  is _like_ Markdown but **better**, because its an actual standard</span>
    <span>instead of a  series of sometimes vaguely consistent conventions.</span>

    <span>Anyway, this is a good place to write all sorts of helpful stuff, link to</span>
    <span>other getting started content, link to where people can find access tokens,</span>
    <span>or even paste some code samples for getting your first API request off the</span>
    <span>ground.</span>
  <span>version</span><span>:</span> <span>1.0.0</span>
  <span>contact</span><span>:</span>
    <span>name</span><span>:</span> <span>Support Team</span>
    <span>url</span><span>:</span> <span>'</span><span>https://example.com/contact'</span>
    <span>email</span><span>:</span> <span><a href="https://bump.sh/cdn-cgi/l/email-protection" data-cfemail="384b4d4848574a4c785d40595548545d16574a5f">[email&nbsp;protected]</a></span>
  <span>license</span><span>:</span>
    <span>name</span><span>:</span> <span>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International</span>
    <span>identifier</span><span>:</span> <span>CC-BY-NC-SA-4.0</span>
<span># snipped</span>
</code></pre></div>
<p>When combined with more advanced queries you can start to get really specific with bits of the OpenAPI document you'd like to update, enabling all sorts of random use cases like cleaning up the servers list for publishing an API Catalogue, removing Development and Staging servers not accessible or relevant to API consumers.</p>
<div><pre><code><span># openapi.yaml</span>
<span>openapi</span><span>:</span> <span>3.1.0</span>
<span>servers</span><span>:</span>
  <span>-</span> <span>url</span><span>:</span> <span>http://localhost:3000</span>
    <span>description</span><span>:</span> <span>Development</span>

  <span>-</span> <span>url</span><span>:</span> <span>https://api-staging.example.com</span>
    <span>description</span><span>:</span> <span>Staging</span>

  <span>-</span> <span>url</span><span>:</span> <span>https://api.example.com</span>
    <span>description</span><span>:</span> <span>Production</span>
</code></pre></div>
<p>An overlay can target the servers array with <code>$.servers</code> then query through them with <code>$.servers[?(@.description=="Development" || @.description=="Staging")]</code>, which is looking through objects in the array, and looking through the children for <code>description: Development</code> or <code>description: Staging</code> using basically JavaScript syntax.</p>

<p>The Overlay for this would combine that JSONPath target with <code>remove: true</code> operation like this:</p>
<div><pre><code><span># overlays.yaml</span>
<span>overlay</span><span>:</span> <span>1.0.0</span>
<span>info</span><span>:</span>
  <span>title</span><span>:</span> <span>Overlay to customise API</span>
  <span>version</span><span>:</span> <span>0.0.1</span>
<span>actions</span><span>:</span>
  <span>-</span> <span>target</span><span>:</span> <span>'</span><span>$.servers[?(@.description=="Development"</span><span> </span><span>||</span><span> </span><span>@.description=="Staging")]'</span>
    <span>description</span><span>:</span> <span>Remove Development and Staging servers but leave anything else.</span>
    <span>remove</span><span>:</span> <span>true</span>
</code></pre></div>
<p>That would leave this resulting OpenAPI.</p>
<div><pre><code><span># openapi.yaml</span>
<span>openapi</span><span>:</span> <span>3.1.0</span>
<span>servers</span><span>:</span>
  <span>-</span> <span>url</span><span>:</span> <span>https://api.example.com</span>
    <span>description</span><span>:</span> <span>Production</span>
</code></pre></div>
<p>Then the Developer Experience folks decide to roll out a Mocking or Sandbox experience, where consumers can play around with requests without actually triggering real emails, real data, or spending real money, but how can we show everyone where that is? Do we have to go and pester all the API teams to add it? Nope, just add another action.</p>
<div><pre><code><span># overlays.yaml</span>
<span>overlay</span><span>:</span> <span>1.0.0</span>
<span>info</span><span>:</span>
  <span>title</span><span>:</span> <span>Overlay to customise API</span>
  <span>version</span><span>:</span> <span>0.0.1</span>
<span>actions</span><span>:</span>
  <span>-</span> <span>target</span><span>:</span> <span>'</span><span>$.servers[?(@.description=="Development"</span><span> </span><span>||</span><span> </span><span>@.description=="Staging")]'</span>
    <span>description</span><span>:</span> <span>Remove Development and Staging servers but leave anything else.</span>
    <span>remove</span><span>:</span> <span>true</span>

  <span>-</span> <span>target</span><span>:</span> <span>'</span><span>$.servers'</span>
    <span>description</span><span>:</span> <span>Let everyone know about our amazing new hosted mocking/sandbox server.</span>
    <span>update</span><span>:</span>
      <span>-</span> <span>description</span><span>:</span> <span>Sandbox</span>
        <span>url</span><span>:</span> <span>https://api-sandbox.example.com/</span>
</code></pre></div>
<h3 id="leaning-more-about-jsonpath">Leaning more about JSONPath</h3>

<p>JSONPath made it to IETF "proposed standard" RFC status in 2024 (<a href="https://www.rfc-editor.org/rfc/rfc9535" rel="nofollow noopener" target="_blank">RFC 9535</a>), but before then it was in a similar position to <a href="https://philsturgeon.com/state-of-markdown/" rel="nofollow noopener" target="_blank">Markdown in the days before CommonMark</a>, in that there are a few different variations of JSONPath as a concept.</p>

<ul>
<li><a href="https://goessner.net/articles/JsonPath/" rel="nofollow noopener" target="_blank">JSONPath "The Blog Post"</a> - Written by Stefan Gössner in 2007.</li>
<li><a href="https://jsonpath.com/" rel="nofollow noopener" target="_blank">jsonpath.com</a> - An online evaluator which as far as I can tell matches the blog post.</li>
<li><a href="https://www.npmjs.com/package/jsonpath-plus" rel="nofollow noopener" target="_blank">JSONPath-Plus</a> - A popular (but now abandoned) fork which expands on the original specification to add some additional operators.</li>
<li><a href="https://www.npmjs.com/package/nimma" rel="nofollow noopener" target="_blank">Nimma</a> - A fork of JSONPath Plus created by the Stoplight team for Spectral to handle more advanced use cases. A list of caveats can be found here.</li>
</ul>

<p>Then to further compound this confusion, all of the implementations have different support for certain features, and have filled in the grey areas differently due to their own interpretations and community requests. The amazing <a href="https://cburgmer.github.io/json-path-comparison/" rel="nofollow noopener" target="_blank">JSONPath Comparison project</a> has collated all of the differences into a massive test suite and published the results, which was really helpful in shaping the new standard. Hopefully this will help tools converge, and we can forget all about this incompatibility.</p>

<p>For now, try to follow the RFC 9535 syntax, and use tooling which lines up with that syntax. Unfortunately that means not using <code>jsonpath.com</code>, and even the <code>jpp</code> CLI tool we used earlier is JSONPath Plus, which has a few differences to the RFC...</p>

<p>The Bump.sh CLI <code>overlays</code> functionality is JSONPath RFC 9535 compliant, and if you spot any valid RFC JSONPath syntax not working as expected please <a href="https://github.com/bump-sh/cli/issues" rel="nofollow noopener" target="_blank">create an issue on GitHub</a> so we can get that sorted out.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Woodworking as an Escape from the Absurdity of Software (295 pts)]]></title>
            <link>https://alinpanaitiu.com/blog/woodworking-escape-from-software-absurdity/</link>
            <guid>40245601</guid>
            <pubDate>Fri, 03 May 2024 09:00:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://alinpanaitiu.com/blog/woodworking-escape-from-software-absurdity/">https://alinpanaitiu.com/blog/woodworking-escape-from-software-absurdity/</a>, See on <a href="https://news.ycombinator.com/item?id=40245601">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<main role="main">
<section>
<article>

<section>
<p>Some of you might remember the <a href="https://github.com/docker/cli/issues/267#issuecomment-695149477" target="_blank" rel="noopener">legendary comment of Eric Diven</a> on a Docker CLI issue he opened years ago:</p>
<blockquote>
<p>@solvaholic: Sorry I missed your comment of many months ago. I no longer build software; I now make furniture out of wood. The hours are long, the pay sucks, and there’s always the opportunity to remove my finger with a table saw, but nobody asks me if I can add an RSS feed to a DBMS, so there’s that :-)</p>
</blockquote>
<p>I say <em>legendary</em> because it has over 9000 reactions and most are positive. There’s a reason why so many devs resonate with that comment.</p>
<p>A lot of us said at some point things like <em>“I’m gonna throw my laptop out the window and start a farm”</em>. Even my last team leader sent me a message out of the blue saying <em>“I think I’ll run a bar. I want to be a bartender and listen to other people’s stories, not figure out why protobuf doesn’t deserialize data that worked JUST FINE for the past three years”</em>.</p>
<p>You know the drill, sometimes the world of software development feels so absurd that you just want to buy a hundred alpaca and sell some wool socks and forget about solving conflicts in <code>package.json</code> for the rest of your life.</p>
<p>I went through those stages too: when the Agile meetings at my last job got so absurd that we were being asked to estimate JIRA task time in T-shirt sizes, I took the decision to quit that comfy well paying job for the uncertainty of making a living from macOS apps. <em>I had only one app that didn’t even work on the latest Apple Silicon chips, and it was making $0, so I really took a bet with it.</em></p>
<p>Recently, when people started coming with so many unrealistic and absurd expectations and demands about what my apps should do, I started thinking if it would be possible to leave software development for a more physical trade.</p>
<h2 id="a-bit-of-history"><a href="#a-bit-of-history">#</a> A bit of history</h2>
<p>Most of my pre-college time was spent on things I didn’t want to do.</p>
<p>I had a bit of childhood, but then I started going to school 6 hours per day, with 1-2 hours spent on commute after 5th grade. I only liked the 10-minute breaks between classes where I played basketball or practiced parkour.</p>
<p>Every day after I came back from school, I had to work in agriculture, either out in the field with crazy winds and sun and UV radiation, or inside a 100-meter long greenhouse where it’s either a 50°C sauna or a muddy rainforest. I was very bad at every job I was given, but it’s what my parents did for a living and I had to help them, no questions asked.</p>
<p>The few hours that remained, usually very late at night, tired both physically and mentally, I spent practicing acoustic guitar, doing bodybuilding exercises, writing bad poetry or drawing graphite portraits.</p>
<a href="https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg">
<figure>
<figcaption>me, ages ago, playing a classical guitar on someone's old couch</figcaption>
<picture>
<source sizes="(min-width: 60em) 350px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 350px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 350px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg 64w">
<img src="https://alinpanaitiu.com/images/guitar-alin-classical-slippers.jpg" alt="me, ages ago, playing a classical guitar on someone's old couch">
</picture>
</figure>
</a>
<p>I almost never did homework or memorize whatever had to be memorized for the next day of school. I just couldn’t justify spending those few hours I had left on even more stuff I did not want to do.</p>
<p>When I found my liberty in college, hundreds of kilometers away from my parents, it’s like something clicked. I suddenly became incapable of doing work that I found meaningless.</p>
<p>Failing classes became acceptable, quitting jobs was something I did with little remorse if I felt I wasn’t helping anyone with the work I was assigned, and bureaucracy became a disease I had to avoid at all costs.</p>
<p><em>I still washed the dishes though. Cleaning and other “chores” never felt meaningless for some reason.</em></p>
<h2 id="the-first-wood-thing-i-did"><a href="#the-first-wood-thing-i-did">#</a> The first wood thing I did</h2>
<p>… was a chess board and piece set. With magnets inside them. Where the pieces look nothing like ordinary chess pieces.</p>
<a href="https://alinpanaitiu.com/images/chess-board-on-carpet.jpg">
<figure>
<figcaption>chess board, first iteration</figcaption>
<picture>
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/chess-board-on-carpet.jpg 64w">
<img src="https://alinpanaitiu.com/images/chess-board-on-carpet.jpg" alt="chess board, first iteration">
</picture>
</figure>
</a>
<p>I was trying to get the pieces to snap into place in a satisfying way, and make sure the game stays that way when kids or dogs inevitably bump the table where the board sits.</p>
<p>You know how Magnus Carlsen always adjusts his pieces so meticulously before a game? Well I have half of that obsession as well so I wanted to avoid doing that.</p>
<p>
<figure>
<video autoplay="" loop="" muted="" playsinline="">
<source src="https://alinpanaitiu.com/video/magnus-carlsen-adjusting-pieces.mp4">
</video>
<figcaption>Magnus Carlsen adjusting his pieces before a game</figcaption>
</figure>
<figure>
<video autoplay="" loop="" muted="" playsinline="">
<source src="https://alinpanaitiu.com/video/chess-piece-snapping-in-place.mp4">
</video>
<figcaption>pawn snapping into its square because of the magnet inside</figcaption>
</figure>
</p>
<hr>
<h3 id="how-it-was-done"><a href="#how-it-was-done">#</a> How it was done</h3>
<p>I started with a cheap but hefty pine board which I rounded with a lot of sandpaper. Then I asked my wife to help me colour in the darker squares because I’m pretty bad at colouring inside the edges <em>(both literally and figuratively)</em>. We used some wood floor markers for that and the colour seems to be holding well.</p>
<blockquote>
<p>Most chess board builds you see on YouTube are done by gluing squares of different wood species with alternating colors, but I had neither the skill nor the tools to do that.</p>
</blockquote>
<p>Then I drilled holes for the super strong neodymium magnets from the underside of the board, having to get really close to the top side without passing through. I failed on two squares, but some wood putty took care of that.</p>
<a href="https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg">
<figure>
<figcaption>sculpting chess pieces with my dremel on the balcony</figcaption>
<picture>
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg 64w">
<img src="https://alinpanaitiu.com/images/sculpting-chess-pieces-balcony.jpg" alt="sculpting chess pieces with my dremel on the balcony">
</picture>
</figure>
</a>
<p>I spent a few sunny days on the balcony sculpting the pieces with a badly sharpened knife and my Dremel. This was quite satisfying, there’s something really nice about seeing a non-descript rectangle take the shape of a little horse in your hands. I mean <a href="https://en.wikipedia.org/wiki/Knight_%28chess%29" target="_blank" rel="noopener">knight</a>, but in Romanian that piece is called “horse”, and I really don’t see any knight there.</p>
<a href="https://alinpanaitiu.com/images/chess-board-collage.jpg">
<figure>
<figcaption>chess board, start to finish</figcaption>
<picture>
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/chess-board-collage.jpg 64w">
<img src="https://alinpanaitiu.com/images/chess-board-collage.jpg" alt="chess board, start to finish">
</picture>
</figure>
</a>
<p>Regarding the design, I got some inspiration after seeing these <a href="http://www.chess-museum.com/modern-and-modernist---special-show.html" target="_blank" rel="noopener">modernist chess sets</a>, which not only looked beautiful in my eyes, but also had these geometric shapes that didn’t need that much sculpting to replicate. I found ready-to-buy spheres and cubes of wood at a craft shop around me <em>(which took care of pawns and rooks)</em>, and the rest were carved out of rectangles and cones of wood.</p>
<a href="https://alinpanaitiu.com/images/modernist-chess-sets.jpg">
<figure>
<figcaption>Modernist chess set designs</figcaption>
<picture>
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/modernist-chess-sets.jpg 64w">
<img src="https://alinpanaitiu.com/images/modernist-chess-sets.jpg" alt="Modernist chess set designs">
</picture>
</figure>
</a>
<h2 id="kaval"><a href="#kaval">#</a> Kaval</h2>
<p>Two Octobers ago, a Romanian music band called <a href="https://www.youtube.com/watch?v=_OkPq67c3ik" target="_blank" rel="noopener">Subcarpați</a> was holding a free <em>“make a Kaval with your own hands”</em> course, where a flute artisan taught the basics of his trade for a week.</p>
<blockquote>
<p>The Kaval or “caval” is a long flute with 5 holes and a distinct lower register where notes can sound melancholic and coming from far away, as opposed to the thin cheerful sound of the small shepherd flute.</p>
</blockquote>
<figure>
<audio controls="" src="https://alinpanaitiu.com/audio/a-lupilor.mp3"></audio>
<figcaption>Kaval sample in G minor</figcaption>
</figure>
<p>Ever since I bought my first Kaval, I always wanted to learn how to build one myself. It’s one of those trades where there’s very little info on the internet, so it feels almost mystical compared to what I’m used to in programming. I would also have the chance to walk home with the finished flute, so of course I went to the course.</p>
<a href="https://alinpanaitiu.com/images/making-caval-bminor.jpg">
<figure>
<figcaption>Making my own Kaval, in B minor</figcaption>
<picture>
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/making-caval-bminor.jpg 64w">
<img src="https://alinpanaitiu.com/images/making-caval-bminor.jpg" alt="Making my own Kaval, in B minor">
</picture>
</figure>
</a>
<p>I loved the fact that we worked in teams of two, and that everything had to be done by hand with no power tools. Even the long bore through the 70cm branch of elder tree had to be done with a hand drill, taking turns to rest our hands.</p>
<p>The artisan had been a shepherd himself since childhood, and taught himself with a lot of trial and error about how to build good sounding flutes and how to make the holes so that the flute stays in tune. But he didn’t know <em>why</em> the holes should be at those specific distances or why the wood tube should be of that specific length for each scale.</p>
<p>I wanted to know those things, because I had an idea of making a universal Kaval that can play in any scale.</p>
<blockquote>
<p>You see, if you want to play on top of songs in various scales, you need a Kaval made for each specific scale. So you’ll need an A minor flute, and a B minor one and a C minor one and so on, for a total of 12 different flute lengths.</p>
</blockquote>
<p>I eventually found info on <a href="https://newt.phys.unsw.edu.au/jw/fluteacoustics.html" target="_blank" rel="noopener">how a flute works</a> by thinking about it as an open or closed tube where the vibrating air creates nodes and antinodes that should coincide with the hole position. At the moment I’m still studying this and working towards my “universal flute” goal.</p>
<h2 id="what-does-this-have-to-do-with-software"><a href="#what-does-this-have-to-do-with-software">#</a> What does this have to do with software?</h2>
<p>For the past 10 years I lived in rented apartments, usually at the 3rd or 4th story with no access to a courtyard. I was never able to get used to that, given that all my childhood I lived and played in a 2000m² courtyard, on a road where there were more slow horse carriages than noisy cars.</p>
<p>This year I moved into a rented house with a tiny but welcoming garden and a bit of paved court and only now I notice the effect this has had on my mind and behaviour.</p>
<p>I develop <a href="https://lowtechguys.com/" target="_blank" rel="noopener">macOS apps</a> for a living, and there are some unhealthy things in this field that piled up over the years. I get a lot of messages in a demanding and negative tone, and because walking outside the apartment meant unbearable car noise, obnoxious smells and zero privacy, I always defaulted to simply acting on the feedback, putting up with it and working long hours into the night, instead of going for a walk to calm down.</p>
<p>A few months ago, the most absurd demands started coming up for my apps: things like <em>“why does your app not control the volume of my &lt;weird sound device&gt;? why don’t you just do it, people pay you for it”</em> when the app in question is <a href="https://lunar.fyi/" target="_blank" rel="noopener">Lunar</a>, an app for controlling <strong>monitor brightness</strong>, not sound devices.</p>
<p>Or <em>“why do you disable your apps from working on Windows?”</em>, or <em>“make Clop compress text and copy it to clipboard”</em> (where <a href="https://lowtechguys.com/clop" target="_blank" rel="noopener">Clop</a> is my app that automatically compresses copied images, videos and PDFs, I have no idea what compressing text even means in that context).</p>
<p>But this time, I was able to simply walk out the front door, grab a branch of beech wood, and, because I remembered my wife saying we forgot to package the french rolling pin when moving, I took out my pocket knife and started carving a simple rolling pin for her. It was so liberating to be able to just ignore those messages for a while and do something with my hands.</p>
<a href="https://alinpanaitiu.com/images/beech-rolling-pin.jpg">
<figure>
<figcaption>the rolling pin is such a simple tool and to this day, my wife still tells me how much she likes it because it's exactly the right length and thickness for making her tasty egg noodles.. and best of all, it was free</figcaption>
<picture>
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/beech-rolling-pin.jpg 64w">
<img src="https://alinpanaitiu.com/images/beech-rolling-pin.jpg" alt="the rolling pin is such a simple tool and to this day, my wife still tells me how much she likes it because it's exactly the right length and thickness for making her tasty egg noodles.. and best of all, it was free">
</picture>
</figure>
</a>
<p>I understand that those people don’t know better, and they would have no idea that there’s no checkbox where you can choose whether an app works on macOS, Windows or Linux. I understand how if the app does <em>something</em> with audio volume or compression, some think that it should do <em>everything</em> related to those workloads, even if it’s completely outside the scope of the app.</p>
<p>But the combination of the <strong>negative tone</strong> and <strong>getting message after message</strong>, some people being so persistent that they insist on sending me those messages through all possible mediums <em>(email, Discord, Twitter, contact form, they’ll find me everywhere)</em>, makes it hard to just ignore them.</p>
<p>There’s also this oily smell of AI and machine learning in the tech atmosphere, where I no longer feel relevant and I seem to have stopped caring about new tech when I noticed that 8 in 10 articles are about some new LLM or image generation model. I guess I like the smell of wood better.</p>
<h3 id="side-tangent-on-privileges-of-being-a-software-dev"><a href="#side-tangent-on-privileges-of-being-a-software-dev">#</a> Side tangent on privileges of being a software dev</h3>
<p>I know I’m privileged to even be able to have the choice of what to do with my time. I got lucky when I chose a computer science university at the right time which allowed me to progress towards a huge semi-passive income in the last 10 years. <em>that doesn’t mean I didn’t work my ass off, but luck plays a huge role too</em></p>
<p>I got <em>“lucky”</em> to have my mind traumatised into some kind of OCD-like state where I hate leaving a thing unfinished. So I plow through exhaustion, skip meals, miss house chores and annoy dear people around me because I know <strong>“I just need to fix this little thing”</strong> and I’ll finish this app/feature/task I started. Even though I also know there’s no real deadline and I can leave it half-finished for now.</p>
<p>But even if it sounds annoying for a person like me to whine about how I don’t feel good or I feel burnt out, the privilege doesn’t negate the feelings. The regression to the norm will make everyone, rich or poor, get used to the status quo and complain about every thing that’s just a little worse than their current state. That’s happiness and sadness in a nutshell.</p>
<p>I’m also vaguely aware that software dev as we know it is about to disappear soon, and I got tired of learning the newest thing just to have it replaced next year. I got tired of back pain and chronic finger pain from so many hours of sitting and typing, I’d rather have pain from work that also builds some muscle.</p>
<p>And I got so tired of everything being online, immaterial, ephemeral and lonely, like indie development tends to be.</p>
<hr>

<p>This house we rented is small and the owners had to fit the bedroom upstairs. I really don’t like climbing stairs up and down, especially when I have to let my dog out three times per night. So we gave up a room and started furnishing our own bedroom downstairs.</p>
<p>I didn’t want to buy bedside tables for the price of the bed itself, so I thought I could maybe make by own. <em>I’m not yet skilled enough to build my own bed though, so we bought that</em></p>
<p>One day, while walking with my dog, I noticed that some trees were getting trimmed in the vicinity of our house and there were a lot of white birch branches on the side of the road. I said <strong>why not?</strong>, grabbed some branches and walked like a lunatic with white long sticks dangling up and down and a black dog zig-zagging left and right, all the way home.</p>
<p>I had another small pine panel left from that chess project so I started thinking about the simplest way to turn what I have into a bedside table.</p>
<a href="https://alinpanaitiu.com/images/bedside-table-before.jpg">
<figure>
<figcaption>pine board with birch branches</figcaption>
<picture>
<source sizes="(min-width: 60em) 600px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 600px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 600px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bedside-table-before.jpg 64w">
<img src="https://alinpanaitiu.com/images/bedside-table-before.jpg" alt="pine board with birch branches">
</picture>
</figure>
</a>
<p>I used low-grit sandpaper to give the board some nice round corners because I love <a href="https://webflow.com/blog/squircle-vs-rounded-squares" target="_blank" rel="noopener">squircles</a>, <em>swallowed about a spoonful of sawdust because I couldn’t find any breathing mask left</em>, criss-crossed 4 branches in a way that would give a stable base, and screwed them to the underside of the board with long wood screws.</p>
<p>The legs would wobble around though, so I drilled small 3mm holes into each branch where they met in the middle, and weaved a florist wire through them to keep the table steady.</p>
<a href="https://alinpanaitiu.com/images/bedside-table.jpg">
<figure>
<figcaption>Bedside table, made out of pine with birch legs</figcaption>
<picture>
<source sizes="(min-width: 60em) 450px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bedside-table.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 450px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bedside-table.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 450px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bedside-table.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bedside-table.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bedside-table.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bedside-table.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bedside-table.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bedside-table.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bedside-table.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bedside-table.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bedside-table.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bedside-table.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bedside-table.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bedside-table.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bedside-table.jpg 64w">
<img src="https://alinpanaitiu.com/images/bedside-table.jpg" alt="Bedside table, made out of pine with birch legs">
</picture>
</figure>
</a>
<h3 id="the-laptop-bed-table"><a href="#the-laptop-bed-table">#</a> The laptop bed table</h3>
<p>After I’ve shown the bedside table to a friend of mine, he said he also needed a laptop table for those mornings when he’d rather not get out of bed. I wanted to say <em>that’s not very healthy</em>, but what got out instead was <em>sure thing, I’ll do it!</em>. Oh well..</p>
<p>I still had the large desk top I glued from smaller beech boards, on which I worked for the past 4 years. It stayed unused currently, so I cut part of it and built this cute thing:</p>
<a href="https://alinpanaitiu.com/images/masa-danut.jpg">
<figure>
<figcaption>cute but heavy laptop table, made out of glued beech wood</figcaption>
<picture>
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/masa-danut.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/masa-danut.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/masa-danut.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/masa-danut.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/masa-danut.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/masa-danut.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/masa-danut.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/masa-danut.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/masa-danut.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/masa-danut.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/masa-danut.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/masa-danut.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/masa-danut.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/masa-danut.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/masa-danut.jpg 64w">
<img src="https://alinpanaitiu.com/images/masa-danut.jpg" alt="cute but heavy laptop table, made out of glued beech wood">
</picture>
</figure>
</a>
<p>You’ll notice three defining features that every laptop table should have:</p>
<ul>
<li>a hole for a charging cable</li>
<li>a carved coaster for the coffee cup</li>
<li>a mildly surprised face? 😦</li>
</ul>
<p>To tell the truth, all those are side effects of me drilling holes where there should be no hole, and dropping the board on the ground multiple times because my workbench was not large enough. All the things that could go wrong, went wrong with this table.</p>
<p>I hid the defects by turning them into features.</p>
<p>The whole truth actually is that the table looks nothing like what I planned. I bought these nice hidden brass cylindrical hinges to make the table foldable. That way, you could fold the sides flat inside and use it as some kind of armchair desk if you wanted.</p>
<a href="https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg">
<figure>
<figcaption>Brass hinges</figcaption>
<picture>
<source sizes="(min-width: 60em) 250px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 250px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 250px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg 64w">
<img src="https://alinpanaitiu.com/images/brass-cylindrical-hinges.jpg" alt="Brass hinges">
</picture>
</figure>
</a>
<p>I wasn’t able to drill the correctly sized or positioned holes for the hinges because I still lack a lot of knowledge and skill in working with wood. So after losing my temper with the frickin’ hinges that still didn’t fit after a full day of drilling and chiseling, I glued the sides and inserted 2 trusty long wood screws per side, which I patched with a glue gun that made the screw holes look like eyes.</p>
<p>After I also carved the handles, the table grew kind of a personality of its own, as you can see above.</p>
<hr>
<p><strong>Why didn’t I do some wood joints, like a dovetail instead of ugly screws and glue?</strong></p>
<p>Because I had no idea they existed. Also, I wasn’t able to fit a simple hinge, I would have probably never finished this table if I tried learning wood joinery on it.</p>
<p>This reminds me of how whenever I did pair programming with a colleague, I noticed how they were doing some <em>“nonoptimal”</em> action and I would say:</p>
<blockquote>
<p>Why don’t you just use <code>ripgrep</code> instead of sifting through all these files?</p>
</blockquote>
<p>Because they don’t know it exists, stupid. Or because they just want to get this thing done and move on, they don’t <code>grep</code> files all day like you do.</p>
<p>But in my ignorance, I seem to have chosen a good enough joining method. As you can see in this <a href="https://www.youtube.com/watch?v=OWFyBCkwLOQ" target="_blank" rel="noopener">wood joinery comparison</a>, 5cm (2inch) screws can hold more than 50kg (110lbs) of force, and I used even longer screws so I think it’s going to hold a 3kg laptop just fine.</p>
<hr>
<p>Oh right, forgot about this little detail.. I also added a cork pocket for holding a notebook, tablet, phone etc. which I lined with a microfiber cloth on the inside for strength and sewn to the wood with that leftover alpaca wool for style.</p>
<a href="https://alinpanaitiu.com/images/masa-danut-pocket.jpg">
<figure>
<figcaption>Cork pocket sewn to the table side</figcaption>
<picture>
<source sizes="(min-width: 60em) 350px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 350px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 350px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/masa-danut-pocket.jpg 64w">
<img src="https://alinpanaitiu.com/images/masa-danut-pocket.jpg" alt="Cork pocket sewn to the table side">
</picture>
</figure>
</a>
<h3 id="the-bookshelf-without-books"><a href="#the-bookshelf-without-books">#</a> The bookshelf without books</h3>
<a href="https://alinpanaitiu.com/images/bookshelf.jpg">
<figure>
<figcaption>Large bookshelf (200x120x40 cm), made out of pine boards</figcaption>
<picture>
<source sizes="(min-width: 60em) 450px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bookshelf.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 450px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bookshelf.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 450px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bookshelf.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bookshelf.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bookshelf.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bookshelf.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bookshelf.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bookshelf.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bookshelf.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bookshelf.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bookshelf.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bookshelf.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bookshelf.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bookshelf.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bookshelf.jpg 64w">
<img src="https://alinpanaitiu.com/images/bookshelf.jpg" alt="Large bookshelf (200x120x40 cm), made out of pine boards">
</picture>
</figure>
</a>
<p>While we were stuck in the apartment in the 2020 pandemic, me and my wife bought a lot of stuff that we thought would help us learn new things and start new hobbies. <em>I thought I’m going to build smart LED lighting all my life and my wife would become a professional wool knitter.</em> We were losing our minds, for sure.</p>
<p>So now we were stuck with crates of stuff we haven’t used in years, and didn’t want to start unpacking them around the house. The clutter that followed after the pandemic, tired our minds just as much as the lockdown itself.</p>
<p>We dumped the crates on an unused stairway spot, and I thought that a bookshelf as large as that spot would clear the clutter.</p>
<a href="https://alinpanaitiu.com/images/bookshelf-before-after.jpg">
<figure>
<figcaption>Before: clutter | After: organized clutter</figcaption>
<picture>
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bookshelf-before-after.jpg 64w">
<img src="https://alinpanaitiu.com/images/bookshelf-before-after.jpg" alt="Before: clutter | After: organized clutter">
</picture>
</figure>
</a>
<p>But I could not find any bookshelf that large, certainly not for cheap. So I traced a few lines in <a href="https://apps.apple.com/us/app/freeform/id6443742539" target="_blank" rel="noopener">Freeform</a>, took some measurements, and ordered a bunch of large pine boards and a ton of long screws.</p>
<p><em>I also ordered the cheapest portable workbench I could find ($30) that had a vise, so I can stop making sawdust inside.</em></p>
<p>A few days later, I got to sawing the shelves with my cheap Japanese pull saw I bought from Lidl years ago.</p>
<blockquote>
<p>Hint: Hand sawing a long wood board with no skill will certainly end up with a crooked edge. Stacking up 5 boards one on top of the other will still end up crooked.</p>
</blockquote>
<blockquote>
<p>Uhm, I guess the hint is, buy a track saw, or make sure the crooked edge isn’t visible.</p>
</blockquote>
<a href="https://alinpanaitiu.com/images/bookshelf-work-process.jpg">
<figure>
<figcaption>making the bookshelf</figcaption>
<picture>
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/bookshelf-work-process.jpg 64w">
<img src="https://alinpanaitiu.com/images/bookshelf-work-process.jpg" alt="making the bookshelf">
</picture>
</figure>
</a>
<p>My wife helped a lot with measuring and figuring out where to drill holes and place the screws, while my dog inspected the work regularly to make sure the defects were hidden correctly.</p>
<p>It took two days of screwing.. erm.. driving screws, I mean. But in the end we got the result we wanted! <em>And I got sores in my right arm for days, driving those long screws is harder than I thought.</em></p>
<h2 id="the-desk-that-became-a-workbench"><a href="#the-desk-that-became-a-workbench">#</a> The desk that became a workbench</h2>
<p>In the thumbnail of this post you can see the current “workbench” I use, which is basically that $30 vise workbench I bought for the bookshelf, with the top of my previous “coding desk” attached in the front.</p>
<a href="https://alinpanaitiu.com/images/workbench.jpg">
<figure>
<figcaption>my current workbench</figcaption>
<picture>
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/workbench.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/workbench.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 810px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/workbench.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/workbench.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/workbench.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/workbench.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/workbench.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/workbench.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/workbench.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/workbench.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/workbench.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/workbench.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/workbench.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/workbench.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/workbench.jpg 64w">
<img src="https://alinpanaitiu.com/images/workbench.jpg" alt="my current workbench">
</picture>
</figure>
</a>
<p>In the image you can see (bottom-left to top, then right):</p>
<ul>
<li>the cheapest block plane I could find ($8)</li>
<li>a red no-name plane I found in the shed of that 100-year old house that we never finished rebuilding</li>
<li>an axe I found rusted and partly broken in the same shed, on which I learnt how to sharpen and restore axes</li>
<li>a folding japanese pull saw that I take everywhere with me</li>
<li>some grip blocks on which I place boards for sanding</li>
<li>a bottle of Osmo Polyx oil I use for finishing</li>
<li>a set of carving knives from Beavercraft (really good and they were available at a nice discount)</li>
<li>a combination square (tucked somewhere at the top of the bench)</li>
<li>a branch of elder tree, which is prepared for drilling a hole through it for making a kaval</li>
</ul>
<p>I also own some no-name chisels that work well enough and some card scrapers that I still struggle sharpening.</p>
<p>The only power tools I have are a <a href="https://www.makitauk.com/product/ddf487.html" target="_blank" rel="noopener">Makita drill</a> and a <a href="https://www.makitauk.com/product/dbo180.html" target="_blank" rel="noopener">random orbit sander</a> on which I did spend some money, an old circular saw I found in that old shed <em>(it was good enough to cut miters on that laptop table)</em> and a Dremel I use rarely because I don’t like its power cord. I prefer battery powered tools.</p>
<h2 id="the-window-bench"><a href="#the-window-bench">#</a> The window bench</h2>
<p>Our dog Cora loves sitting at the window, growling at old people and barking at children passing around. Yeah, she’s terrified of children for some reason.</p>
<p>But the window sill is not wide enough and her leg kept falling with a <em>“clang”</em> on the radiator below. So I widened it by placing two glued up boards of pine on top of the radiator, that I planed and smoothed beforehand.<br>
</p>

<blockquote>
<p>This is when I learned that a hand plane is not some antique tool that nobody uses anymore, but a quite versatile piece that can easily smoothen grain where I would waste 5 sheets of sandpaper and choke on sawdust.</p>
</blockquote>
<p>I had to still let the heat radiate somehow, so I drilled large holes with a <a href="https://sawsonskates.com/forstner-bit/" target="_blank" rel="noopener">forstner bit</a>, but I also blew the grain fibers on the underside because I had no idea of this possible problem. Turns out there is a simple solution to drilling large holes without ripping the fibers:</p>
<ol>
<li>Drill a small 3-6mm hole in the center with a normal wood drill, all the way to the other side <em>(this will help see where the forstner bit should be place from both sides)</em></li>
<li>Place the forstner bit in the hole <em>(this also helps with keeping the bit centered)</em> and drill the large hole, stopping midway through the board</li>
<li>Turn the board around and repeat step 2 until you meet the other end of the hole</li>
</ol>
<p>We also wanted to sit with Cora and there was not much space between the bed and the radiator, so I built a narrow bench. I used another two pine boards of the same size, but this time glued them on the side to create a wider board.</p>
<p>For the legs, well the tree trimming continued near us, so one day I found some thick cherry branches which I brought home, scraped the bark from them, then attached them to the bench using screws from the top side.</p>
<p>I was ok with a <em>rustic</em> look so I didn’t spend much on finishing, patching holes, or even proper wood drying. I did use the hand plane to chamfer the edges though, I love taking those thin continuous wood shavings from the edge.</p>
<a href="https://alinpanaitiu.com/images/window-bench.jpg">
<figure>
<figcaption>Window bench, in the morning sun</figcaption>
<picture>
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/window-bench.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/window-bench.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/window-bench.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/window-bench.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/window-bench.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/window-bench.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/window-bench.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/window-bench.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/window-bench.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/window-bench.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/window-bench.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/window-bench.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/window-bench.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/window-bench.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/window-bench.jpg 64w">
<img src="https://alinpanaitiu.com/images/window-bench.jpg" alt="Window bench, in the morning sun">
</picture>
</figure>
</a>
<h2 id="the-trunk-coffee-table"><a href="#the-trunk-coffee-table">#</a> The trunk coffee table</h2>
<a href="https://alinpanaitiu.com/images/trunk-table.jpg">
<figure>
<figcaption>Coffee table made out of a beech log</figcaption>
<picture>
<source sizes="(min-width: 60em) 600px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/trunk-table.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 600px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/trunk-table.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 600px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/trunk-table.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/trunk-table.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/trunk-table.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/trunk-table.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/trunk-table.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/trunk-table.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/trunk-table.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/trunk-table.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/trunk-table.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/trunk-table.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/trunk-table.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/trunk-table.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/trunk-table.jpg 64w">
<img src="https://alinpanaitiu.com/images/trunk-table.jpg" alt="Coffee table made out of a beech log">
</picture>
</figure>
</a>
<p>We recently visited my parents, and loved how the grass finally started growing in some spots where their house and court renovation was finished and was no longer spewing cement dust. It was an abnormally sunny April and I wanted to chat with them at a coffee outside in the early morning before they started the field work, but there was nowhere to place the coffee outside.</p>
<blockquote>
<p>First world problems right? If you read about <a href="https://waitbutwhy.com/2015/12/the-tail-end.html" target="_blank" rel="noopener">The tail end</a>, you might already understand why a trivial thing like coffee time with my parents feels so important to me.</p>
</blockquote>
<p>So one day, while walking on a gravel road near their house, I noticed one neighbour had these huge logs of beech that were recently cut. I thought that would be easy to turn into a small exterior coffee table, so I went to ask if I could buy one.</p>
<p>Well I kind of had to yell <em>“HELLO!”</em> at their gate because I didn’t know their name, and did that a few times until a seemingly sleepy old man appeared at the front door <em>(it was 5 PM)</em> asking what I want. I asked how much he’d want for one of those logs, but he just said to get one, no money needed. Ok, there’s no point in insisting, I chose a wide enough but not too wide log, because these things are heavy and I wasn’t sure I could lift it, and rolled it slowly back home.</p>
<p>I didn’t have my usual tools at my parents house, so I improvised. I found a battered cleaver which my dad used for chopping kindling for the barbecue. I sharpened it as well as I could, then used a hammer to roll a burr on the back of the cleaver that I could use for scraping.</p>
<figure>
<video controls="" muted="" playsinline="">
<source src="https://alinpanaitiu.com/video/trunk-table-bark.mp4">
</video>
<figcaption>Scraping the bark off the beech log</figcaption>
</figure>
<p>Beech wood has such a smooth hard wood under the bark that it didn’t even need sanding. I used my dad’s power planer to smooth out the top and make a quasi-flat surface then finished it with some walnut oil and it was (almost) ready!</p>
<p>Because the wood was so green, it was certain that it will crack and roughen as it dried. So I cut a groove and wrapped a flat iron band around the top to keep it from moving too much. The bottom can expand as much as it wants, I’m actually quite curious to watch the table morph throughout the summer as we use it.</p>
<h2 id="the-orchard-bench"><a href="#the-orchard-bench">#</a> The orchard bench</h2>
<a href="https://alinpanaitiu.com/images/garden-bench.jpg">
<figure>
<figcaption>Bench made from reclaimed wood, for my parents-in-law orchard</figcaption>
<picture>
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/garden-bench.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/garden-bench.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 700px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/garden-bench.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/garden-bench.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/garden-bench.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/garden-bench.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/garden-bench.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/garden-bench.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/garden-bench.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/garden-bench.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/garden-bench.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/garden-bench.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/garden-bench.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/garden-bench.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/garden-bench.jpg 64w">
<img src="https://alinpanaitiu.com/images/garden-bench.jpg" alt="Bench made from reclaimed wood, for my parents-in-law orchard">
</picture>
</figure>
</a>
<p>Because we were born in villages that aren’t that far apart, me and my wife always visit both our parents in the same trip. This time when I got to my parents-in-law, I took a stroll through their little orchard. They added new trees this year! I can’t wait to taste the large apricots.</p>
<p>What struck me as odd about the orchard was that there was no patch of grass to lay on. They like digging up the soil every year, and leaving it like that: an arid looking patch of land made of dry dirt boulders. I thought a bench would be a good solution and what do you know, there was an old broken door thrown in the firewood pile just outside the orchard, that had the perfect length and width for a bench.<br>
I forgot to take a photo of the door, but it looked kind of like this one, only worse and with a large rhomboid ◊ hole at the top.</p>
<a href="https://alinpanaitiu.com/images/old-broken-wood-door.jpg">
<figure>
<figcaption>old broken wooden door</figcaption>
<picture>
<source sizes="(min-width: 60em) 300px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 300px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 300px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/old-broken-wood-door.jpg 64w">
<img src="https://alinpanaitiu.com/images/old-broken-wood-door.jpg" alt="old broken wooden door">
</picture>
</figure>
</a>
<p>I got to work immediately, dismantling the door piece by piece and pulling out nail after nail <em>(they really liked their nails in those old times)</em>. I was left with two long and narrow wooden boards, a pile of rotten wood and two pocketfuls of rusted nails.</p>
<p>I sawed the broken ends of the boards, then I used my father-in-law’s power planer to remove the old gray wood from the top, bottom and sides to get to the fresh wood below. <em>There were a lot of holes and valleys so I had to scrape them by hand with sandpaper rolled around a screwdriver.</em> This took a few more days than I expected, but I eventually got two cleanish boards of.. fir? pine? No idea.</p>
<p>I used a velcro sandpaper attachment for the battery powered drill to sand out the rotten sides and give the boards a curvy and smooth live edge.</p>
<a href="https://alinpanaitiu.com/images/garden-bench-curvy.jpg">
<figure>
<figcaption>Curvy live edge of the bench</figcaption>
<picture>
<source sizes="(min-width: 60em) 600px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 600px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 600px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/garden-bench-curvy.jpg 64w">
<img src="https://alinpanaitiu.com/images/garden-bench-curvy.jpg" alt="Curvy live edge of the bench">
</picture>
</figure>
</a>
<p>For the legs, I stole some more firewood from their pile, where I found some thick branches of unidentified species that were roughly the same length. Stripping the bark with an axe made them look good enough so I screwed them at the four corners of the board. The bench was wobbly with just the legs, so I strengthened it sideways by adding shorter and thinner branches of more unidentified wood between the legs and the center of the board.</p>
<p>I had to do something with the rhomboid ◊ hole, so I filled it with a square 4-by-4 salvaged from a recently dismantled shed, and now the bench has 5 legs. Instead of sawing the leg to size, I left it protruding above the bench and placed another thick salvaged board on top of it to serve as an arm rest, or coffee table, or a place for the bowl of cherries.</p>
<p>For the finish, I burned the bench and the bottom of the legs to get a honey-brown aspect and to make it water resistant. I put a very thin layer of whatever wood lacquer I found in my in-laws shed, just for resistance because I don’t like glossy wood.</p>
<a href="https://alinpanaitiu.com/images/garden-bench-2.jpg">
<figure>
<figcaption>Side photo of the bench for a better view of the legs</figcaption>
<picture>
<source sizes="(min-width: 60em) 400px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 400px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 400px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/garden-bench-2.jpg 64w">
<img src="https://alinpanaitiu.com/images/garden-bench-2.jpg" alt="Side photo of the bench for a better view of the legs">
</picture>
</figure>
</a>
<h2 id="other-small-wood-things"><a href="#other-small-wood-things">#</a> Other small wood things</h2>
<h3 id="water-glass-shelf"><a href="#water-glass-shelf">#</a> Water glass shelf</h3>
<p>We don’t have much space on the current eating table, so I built a two-shelf stand where we can place the always present water filter jug and the glasses and free up some of the center space.</p>
<p><em>It’s incredible how strong just a few screws can be.</em></p>
<a href="https://alinpanaitiu.com/images/water-shelf.jpg">
<figure>
<figcaption>Table shelf for holding water filter and glasses</figcaption>
<picture>
<source sizes="(min-width: 60em) 400px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/water-shelf.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 400px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/water-shelf.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 400px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/water-shelf.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/water-shelf.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/water-shelf.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/water-shelf.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/water-shelf.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/water-shelf.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/water-shelf.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/water-shelf.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/water-shelf.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/water-shelf.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/water-shelf.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/water-shelf.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/water-shelf.jpg 64w">
<img src="https://alinpanaitiu.com/images/water-shelf.jpg" alt="Table shelf for holding water filter and glasses">
</picture>
</figure>
</a>
<h3 id="kaval-stand"><a href="#kaval-stand">#</a> Kaval stand</h3>
<p>I thought I should finally do something about the kavals always rolling around on some table or couch throughout the house, so I made a stand from long thin wood boards glued on the side, and finished it with sunflower oil to give it a golden/orange colour.</p>
<p>This way I can always expand it by adding more boards to the side if I want to add more flutes.</p>
<a href="https://alinpanaitiu.com/images/kaval-stand.jpg">
<figure>
<figcaption>Stand for holding my kaval collection</figcaption>
<picture>
<source sizes="(min-width: 60em) 400px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@avif 64w" type="image/avif">
<source sizes="(min-width: 60em) 400px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/kaval-stand.jpg@webp 64w" type="image/webp">
<source sizes="(min-width: 60em) 400px, 80vw" srcset="https://img.alinpanaitiu.com/_/1920/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 1920w,https://img.alinpanaitiu.com/_/1620/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 1620w,https://img.alinpanaitiu.com/_/1400/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 1400w,https://img.alinpanaitiu.com/_/1280/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 1280w,https://img.alinpanaitiu.com/_/1200/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 1200w,https://img.alinpanaitiu.com/_/1080/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 1080w,https://img.alinpanaitiu.com/_/1024/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 1024w,https://img.alinpanaitiu.com/_/992/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 992w,https://img.alinpanaitiu.com/_/768/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 768w,https://img.alinpanaitiu.com/_/640/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 640w,https://img.alinpanaitiu.com/_/576/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 576w,https://img.alinpanaitiu.com/_/320/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 320w,https://img.alinpanaitiu.com/_/64/plain/https://alinpanaitiu.com/images/kaval-stand.jpg 64w">
<img src="https://alinpanaitiu.com/images/kaval-stand.jpg" alt="Stand for holding my kaval collection">
</picture>
</figure>
</a>
<h3 id="sharpening-block"><a href="#sharpening-block">#</a> Sharpening block</h3>
<p>I need to sharpen blades almost daily, be it the pocket knife, axe, plane blade or chisels. So I made a custom sharpening block with the perfect tools for my sharpening technique.</p>
<figure>
<video autoplay="" loop="" muted="" playsinline="">
<source src="https://alinpanaitiu.com/video/sharpening-stone.mp4">
</video>
<figcaption>Sharpening block, diamond plate with leather strop on a beech base</figcaption>
</figure>
<p>It has a $5 diamond plate with <code>600</code> grit on one side and a $5 leather strop <em>(a piece of leather belt might work just as well)</em> on the other side. I attached the leather with two small screws at the top so I can take it out easily if I need a flexible strop for my carving gouge for example. It is loaded with diamond paste which can be found for cheap at gemstone cutting online stores <em>(the knife-specific pastes are a lot more expensive and I’m not sure why)</em>.</p>
<p>To be honest, a $0.5 green compound <em>(chromium oxide)</em> works just as well for stropping, that’s what I used before and still use for my detail carving knives. It gives a smoother edge than the diamond, the disadvantage being that it needs to be re-applied more often on the leather and that you need a bit more blade passes to get the same result. The diamonds seem be cutting faster, but really not much faster.</p>
<h4 id="a-bit-of-a-tangent-on-the-sharpening-topic"><a href="#a-bit-of-a-tangent-on-the-sharpening-topic">#</a> A bit of a tangent on the sharpening topic</h4>
<p>I went through all the phases with sharpening tools. I’ve used water stones, natural stones, ceramic stones, pull-through carbide sharpeners <em><a href="https://www.youtube.com/watch?v=3jJZdGst8wE" target="_blank" rel="noopener">(don’t use these)</a></em>, powered belt sharpeners, wheel sharpeners.</p>
<p>Aside from the pull-through sharpeners and the steel rods, all the others work just as well with the right technique. I settled on the diamond plate because they’re cheap, stay flat, need zero maintenance, and can cut through any type of metal. Paired with a leather strop, for me it’s the simplest way to sharpen.</p>
<p>I recommend this <a href="https://www.youtube.com/watch?v=yLlPiBSP_1U" target="_blank" rel="noopener">OUTDOORS55 video</a> for a no-bullshit sharpening tutorial and <a href="https://scienceofsharp.com/home/" target="_blank" rel="noopener">the Science of Sharp blog</a> if you’re curious what the different sharpening techniques do to an edge under a microscope.</p>
<details closed="">
<dl>
<dt>Posted on:</dt>
<dd>April 28, 2024</dd>
</dl>
<dl>
<dt>Length:</dt>
<dd>27 minute read, 5570 words</dd>
</dl>
<dl>
<dt>Categories:</dt>
<dd> <a href="https://alinpanaitiu.com/categories/wood">Wood</a> </dd>
</dl>
<dl>
<dt>Series:</dt>
<dd> <a href="https://alinpanaitiu.com/series/woodworking">Woodworking</a> </dd>
</dl>
<dl>
<dt>Tags:</dt>
<dd> <a href="https://alinpanaitiu.com/tags/wood">wood</a> </dd>
</dl>
<dl>
<dt>See Also:</dt>
</dl>
</details>
</section>

</article>
</section>

</main>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Georgia Tech, Meta create open dataset to advance solutions for carbon capture (118 pts)]]></title>
            <link>https://news.gatech.edu/news/2024/05/02/georgia-tech-and-meta-create-massive-open-dataset-advance-ai-solutions-carbon</link>
            <guid>40243242</guid>
            <pubDate>Fri, 03 May 2024 01:58:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.gatech.edu/news/2024/05/02/georgia-tech-and-meta-create-massive-open-dataset-advance-ai-solutions-carbon">https://news.gatech.edu/news/2024/05/02/georgia-tech-and-meta-create-massive-open-dataset-advance-ai-solutions-carbon</a>, See on <a href="https://news.ycombinator.com/item?id=40243242">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    
                    <p>To avoid catastrophic climate impacts, excessive carbon emissions must be addressed. At this point, cutting emissions isn’t enough. Direct air capture, a technology that pulls carbon dioxide out of ambient air, has great potential to help solve the problem.</p>

<p>But there’s a big challenge. For direct air capture technology, every type of environment and location requires a uniquely specific design. A direct air capture configuration in Texas, for example, would necessarily be different from one in Iceland. These systems must be designed with exact parameters for humidity, temperature, and air flows for each place.</p>

<p>Now, Georgia Tech and Meta have collaborated to produce a massive database, potentially making it easier and faster to design and implement direct air capture technologies. The open-source database enabled the team to train an AI model that is orders of magnitude faster than existing chemistry simulations. The project, named <a href="https://open-dac.github.io/">OpenDAC</a>, could accelerate climate solutions the planet desperately needs.</p>

<p>The team’s research was <a href="https://pubs.acs.org/doi/10.1021/acscentsci.3c01629">published</a> in <em>ACS Central Science</em>, a journal of the American Chemical Society.</p>

<p>“For direct air capture, there are many ideas about how best to take advantage of the air flows and temperature swings of a given environment,” said <a href="https://research.gatech.edu/andrew-medford">Andrew J. Medford</a>, associate professor in the <a href="https://www.chbe.gatech.edu/">School of Chemical and Biomolecular Engineering</a> (ChBE) and a lead author of the paper. “But a major problem is finding a material that can capture carbon efficiently under each environment’s specific conditions.”</p>

<p>Their idea was to “create a database and a set of tools to help engineers broadly, who need to find the right material that can work,” Medford said. “We wanted to use computing to take them from not knowing where to start to giving them a robust list of materials to synthesize and try.”</p>

<p>Containing reaction data for 8,400 different materials and powered by nearly 40 million quantum mechanics calculations, the team believes it’s the largest and most robust dataset of its kind.</p>

<h3>Building a Partnership (and a Database)</h3>

<p>Researchers with Meta’s <a href="https://ai.meta.com/">Fundamental AI Research (FAIR)</a> team were looking for ways to harness their machine learning prowess to address climate change. They landed on direct air capture as a promising technology and needed to find a partner with expertise in materials chemistry as it relates to carbon capture. They went straight to Georgia Tech.</p>

<p><a href="https://research.gatech.edu/david-s-sholl">David Sholl</a>, ChBE professor, Cecile L. and David I.J. Wang Faculty Fellow, and director of Oak Ridge National Laboratory’s <a href="https://www.ornl.gov/content/transformational-decarbonization-initiative">Transformational Decarbonization Initiative</a>, is one of the world’s top experts in metal-organic frameworks (MOFs). These are a class of materials promising for direct air capture because of their cagelike structure and proven ability to attract and trap carbon dioxide. Sholl brought Medford, who specializes in applying machine learning models to atomistic and quantum mechanical simulations as they relate to chemistry, into the project.</p>

<p>Sholl, Medford, and their students provided all the inputs for the database. Because the database predicts the MOF interactions and the energy output of those interactions, considerable information was required.</p>

<p>They needed to know the structure of nearly every known MOF — both the MOF structure by itself and the structure of the MOF interacting with carbon dioxide and water molecules.</p>

<p>“To predict what a material might do, you need to know where every single atom is and what its chemical element is,” Medford said. “Figuring out the inputs for the database was half of the problem, and that’s where our Georgia Tech team brought the core expertise.”</p>

<p>The team took advantage of large collections of MOF structures that Sholl and his collaborators had previously developed. They also created a large collection of structures that included imperfections found in practical materials.</p>

<h3>The Power of Machine Learning</h3>

<p><a href="https://anuroopsriram.com/">Anuroop Sriram</a>, research engineering lead at FAIR and first author on the paper, generated the database by running quantum chemistry computations on the inputs provided by the Georgia Tech team. These calculations used about 400 million CPU hours, which is hundreds of times more computing than the average academic computing lab can do in a year.</p>

<p>FAIR also trained machine learning models on the database. Once trained on the 40 million calculations, the machine learning models were able to accurately predict how the thousands of MOFs would interact with carbon dioxide.</p>

<p>The team demonstrated that their AI models are powerful new tools for material discovery, offering comparable accuracy to traditional quantum chemistry calculations while being much faster. These features will allow other researchers to extend the work to explore many other MOFs in the future.</p>

<p>“Our goal was to look at the set of all known MOFs and find those that most strongly attract carbon dioxide while not attracting other air components like water vapor, and using these highly accurate quantum computations to do so,” Sriram said. “To our knowledge, this is something no other carbon capture database has been able to do.”</p>

<p>Putting their own database to use, the Georgia Tech and Meta teams identified about 241 MOFs of exceptionally high potential for direct air capture.</p>

<h3>Moving Forward With Impact</h3>

<p>“According <a href="https://www.un.org/en/climatechange/net-zero-coalition#:~:text=to%202010%20levels.-,To%20keep%20global%20warming%20to%20no%20more%20than%201.5%C2%B0,reach%20net%20zero%20by%202050.">to the UN</a> and most industrialized countries, we need to get to net-zero carbon dioxide emissions by 2050,” said Matt Uyttendaele, director of Meta’s FAIR chemistry team and a co-author on the paper. “Most of that must happen by outright stopping carbon emissions, but we must also address historical carbon emissions and sectors of the economy that are very hard to decarbonize — such as aviation and heavy industry. That’s why CO2 removal technologies like direct air capture must come online in the next 25 years."</p>

<p>While direct air capture is still a nascent field, the researchers say it’s crucial that groundbreaking tools — like the OpenDAC database made available in the team’s paper — are in development now.&nbsp;</p>

<p>“There is not going to be one solution that will get us to net-zero emissions,” Sriram said. “Direct air capture has great potential but needs to be scaled up significantly before we can make a real impact. I think the only way we can get there is by finding better materials.”</p>

<p>The researchers from both teams hope the scientific community will join the search for suitable materials. The entire OpenDAC dataset project is open source, from the data to the models to the algorithms.</p>

<p>“I hope this accelerates the development of negative-emission technologies like direct air capture that may not have been possible otherwise,” Medford said. “As a species, we must solve this problem at some point. I hope this work can contribute to getting us there, and I think it has a real shot at doing that.”</p>



<p><strong>Note</strong>: Georgia Tech ChBE graduate students Sihoon Choi, Logan Brabson, and Xiaohan Yu made major contributions and are co-authors of the paper.</p>

<p><strong>Citation</strong>: A. Sriram et al, The Open DAC 2023 Dataset and Challenges for Sorbent Discovery in Direct Air Capture,&nbsp;<em>ACS Central Science</em>&nbsp;(2024).</p>

<p><strong>DOI</strong>: <a href="https://doi.org/10.1021/acscentsci.3c01629">https://doi.org/10.1021/acscentsci.3c01629</a></p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cardio fitness is a strong, consistent predictor of morbidity and mortality (399 pts)]]></title>
            <link>https://bjsm.bmj.com/content/58/10/556</link>
            <guid>40243238</guid>
            <pubDate>Fri, 03 May 2024 01:58:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bjsm.bmj.com/content/58/10/556">https://bjsm.bmj.com/content/58/10/556</a>, See on <a href="https://news.ycombinator.com/item?id=40243238">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[I'm writing a new vector search SQLite Extension (323 pts)]]></title>
            <link>https://alexgarcia.xyz/blog/2024/building-new-vector-search-sqlite/index.html</link>
            <guid>40243168</guid>
            <pubDate>Fri, 03 May 2024 01:44:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://alexgarcia.xyz/blog/2024/building-new-vector-search-sqlite/index.html">https://alexgarcia.xyz/blog/2024/building-new-vector-search-sqlite/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=40243168">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>2024-05-02 by <a href="https://alexgarcia.xyz/">Alex Garcia</a></p><section>


<div>
<blockquote>
<p><em>tl;dr — <a href="https://github.com/asg017/sqlite-vec"><code>sqlite-vec</code></a> will be a new
SQLite extension for vector search, replacing <code>sqlite-vss</code>. It will be an
embeddable "fast enough" vector search tool, that can run anywhere SQLite
runs - including WASM! It's still in active development, but
<a href="https://github.com/asg017/sqlite-vec">check out the repo</a> to learn when it
will be ready!</em></p>
</blockquote>
<hr>
</div>

<p>I'm working on a new SQLite extension! It's called
<a href="https://github.com/asg017/sqlite-vec"><code>sqlite-vec</code></a>, an extension for vector
search, written purely in C. It's meant to replace
<a href="https://github.com/asg017/sqlite-vss"><code>sqlite-vss</code></a>, another vector search
SQLite extension I released in February 2023, which
<a href="#wrong-sqlite-vss">has a number of problems</a>. I believe the approach I'm taking
with <code>sqlite-vec</code> solves a number of problem it's predecessor has, will have a
much nicer and performant SQL API, and is a better fit for all applications who
want an embed vector search solution!</p>
<h2>What <code>sqlite-vec</code> will be</h2>
<p><code>sqlite-vec</code> will be a SQLite extension written purely in C with no
dependencies. It will provide custom SQL functions and virtual tables for fast
vector search, as well as other tools and utilities for working with vectors
(quantization, JSON/BLOB/numpy conversions, vector arithmetic, etc.).</p>
<p>A quick sample of what vector search will look like with <code>sqlite-vec</code>, in pure
SQL:</p>
<pre tabindex="0"><code><span><span>.</span><span>load</span><span> .</span><span>/</span><span>vec0</span></span>
<span></span>
<span><span>-- a "vector store" for 8-dimensional floating point numbers</span></span>
<span><span>create</span><span> virtual</span><span> table</span><span> vec_examples </span><span>using</span><span> vec0(</span></span>
<span><span>  sample_embedding </span><span>float</span><span>[8]</span></span>
<span><span>);</span></span>
<span></span>
<span><span>-- vectors can be provided as JSON or in a compact binary format</span></span>
<span><span>insert into</span><span> vec_examples(rowid, sample_embedding)</span></span>
<span><span>  values</span></span>
<span><span>    (</span><span>1</span><span>, </span><span>'[-0.200, 0.250, 0.341, -0.211, 0.645, 0.935, -0.316, -0.924]'</span><span>),</span></span>
<span><span>    (</span><span>2</span><span>, X</span><span>'E5D0E23E894100BF8FC2B53E426045BFF4FD343F7D3F35BFA4703DBE1058B93E'</span><span>),</span></span>
<span><span>    (</span><span>3</span><span>, </span><span>'[0.716, -0.927, 0.134, 0.052, -0.669, 0.793, -0.634, -0.162]'</span><span>),</span></span>
<span><span>    (</span><span>4</span><span>, X</span><span>'8FC235BFC3F5A83E9EEF273F9EEF273DA4707DBF23DB393FB81EC53E7D3F75BF'</span><span>);</span></span>
<span></span>
<span></span>
<span><span>-- KNN style query goes brrrr</span></span>
<span><span>  select</span></span>
<span><span>    rowid,</span></span>
<span><span>    distance</span></span>
<span><span>  from</span><span> vec_examples</span></span>
<span><span>  where</span><span> sample_embedding match </span><span>'[0.890, 0.544, 0.825, 0.961, 0.358, 0.0196, 0.521, 0.175]'</span></span>
<span><span>  order by</span><span> distance</span></span>
<span><span>  limit</span><span> 2</span><span>;</span></span>
<span></span>
<span><span>/*</span></span>
<span><span>rowid,distance</span></span>
<span><span>2,2.38687372207642</span></span>
<span><span>1,2.38978505134583</span></span>
<span><span>*/</span></span></code></pre>
<p>Using <code>sqlite-vec</code> means using pure SQL, just <code>CREATE VIRTUAL TABLE</code>,
<code>INSERT INTO</code>, and <code>SELECT</code> statements.</p>
<p>This work is exciting - for many reasons! First off, "written in pure C" means
it will be able to run anywhere. The previous <code>sqlite-vss</code> extension, which had
some cumbersome C++ dependencies, was only able to reliably run on Linux and
MacOS machines, with binaries in the <code>3MB</code>-<code>5MB</code> range. By contrast,
<code>sqlite-vec</code> will run on all platforms (Linux/MacOS/Windows), in the browser
with WebAssembly, and even smaller devices like mobile phones and Raspberry Pis!
Smaller binaries too, in the few 100's of KB range.</p>
<p>Additionally, <code>sqlite-vec</code> has more control over memory usage. By default,
vectors are stored in 'chunks' in shadow tables, and are read chunk-by-chunk
during KNN searches. This means you don't need to store everything in RAM!
Though if you do want in-memory speed, you could use the
<a href="https://www.sqlite.org/pragma.html#pragma_mmap_size"><code>PRAGMA mmap_size</code></a>
command to make KNN searches much faster.</p>
<p>And finally, <code>sqlite-vec</code> is built in a new "era" of vector search tooling and
research. There will be better support for "adative-length embeddings" (aka
<a href="https://huggingface.co/blog/matryoshka">Matryoshka embeddings</a>), and
<code>int8</code>/<code>bit</code> vector support for
<a href="https://huggingface.co/blog/embedding-quantization">binary and scalar quantization</a>.
This means more control over the speed, accuracy, and disk space that your
vectors take up.</p>
<p>Though initially, <code>sqlite-vec</code> will only support exhaustive full-scan vector
search. There will be no "approximate nearest neighbors" (ANN) options. But I
hope to add IVF + HNSW in the future!</p>
<h2>Demo</h2>
<p>Enough yappin' let's see a demo</p>
<p><code>sqlite-vec</code> is running right now in your browser! If you open up devtools,
you'll see an (un-optimized) <code>5.9MB</code> <code>sqlite3.wasm</code> file, which is the
<a href="https://sqlite.org/wasm/doc/trunk/about.md">official SQLite WASM build</a> with
<code>sqlite-vec</code> compiled in. There is a <code>movies.bit.db</code> SQLite database also
loaded, which is a <code>2.6MB</code> SQLite database, which has
<a href="https://www.kaggle.com/datasets/tmdb/tmdb-movie-metadata?select=tmdb_5000_movies.csv">this movies dataset</a>
with 4,800 movie overviews in the <code>articles</code> table. The separate <code>vec_movies</code>
virtual table is a vector index of those "overviews" embedded, with
<a href="https://blog.nomic.ai/posts/nomic-embed-matryoshka">Nomic's 1.5 embeddings model</a>,
quantized to binary vectors.</p>
<p>Here's a quick sample of what the data looks like:</p>

<p>Here we see the <code>articles</code> table has columns like <code>title</code>, <code>release_date</code>, and
<code>overview</code>. The <code>overview</code> column here is important - it's a very short sentence
describing the plot of the movie. We also have the <code>vec_articles</code> virtual table,
which stores embeddings of the <code>articles.overview</code> as the <code>overview_embeddings</code>
column. Thy are binary vectors with 768 dimensions, which takes up 96 bytes
(<code>768 / 8 = 96</code>).</p>
<p>Now let's see how a KNN-style search works! Here's a lil' table select
component. Select a movie with the radio button on the left-hand side.</p>

<p>The movie ID you selected will now pre-populate the <code>:selected_movie</code> SQL
parameter in this KNN SQL query!</p>

<p>Those are the 10 closest movies to the one you selected! The "closest" one
(using hamming distance, because it's a binary vector) will always be the same
movie, with a distance of 0. Keep in mind, embedding a single-sentence plot
description of a small movie dataset doesn't give the best results (and binary
quantization sacrifices even more quality), but the core idea remains. Fast,
"good enough" vector search, in your browser!</p>
<p>More docs about this KNN-style query will come soon, but in case you wanted to
poke around at the internals, try adding a <code>EXPLAIN QUERY PLAN</code> to the beginning
of the <code>SELECT</code> statement. You'll see the <code>0:knn</code> "index" that <code>vec_movies</code>
uses.</p>
<h2 id="wrong-sqlite-vss"> But what's wrong with <code>sqlite-vss</code>?</h2>
<p>I won't go into all the details, but there were a number of roadblocks in the
development and adoption of <code>sqlite-vss</code>, including:</p>
<ul>
<li>Only worked on Linux + MacOS machines (no Windows, WASM, mobile devices, etc.)</li>
<li>Stored vectors all in-memory</li>
<li>Various transaction-related bugs and issues</li>
<li>Extremely hard and time-consuming to compile</li>
<li>Missing common vector operations (scalar/binary quantization)</li>
</ul>
<p>Nearly all of these are because <code>sqlite-vss</code> depended on
<a href="https://github.com/facebookresearch/faiss">Faiss</a>. With a lot of time and
energy, some of these issues could <em>maybe</em> be solved, but many of them would be
blocked by Faiss.</p>
<p>Given all this, a no-dependency and low-level solution seemed really enticing.
Turns out, vector search isn't too complicated, so <code>sqlite-vec</code> was born!</p>
<h2>Still not ready, but soon!</h2>
<p>The core features of <code>sqlite-vec</code> work, but I have very little error handling +
testing. I have 246 TODOs in the <code>sqlite-vec.c</code> file, which I'm tracking with a
lil script:</p>
<pre tabindex="0"><code><span><span>$ make progress</span></span>
<span><span>deno run --allow-read=sqlite-vec.c scripts/progress.ts</span></span>
<span><span>Number of todo_assert()'s:      191</span></span>
<span><span>Number of "// TODO" comments:   41</span></span>
<span><span>Number of todo panics:          14</span></span>
<span><span>Total TODOs:                    246</span></span>
<span><span></span></span>
<span><span>░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ (0/246)</span></span>
<span><span></span></span>
<span><span>0% complete to sqlite-vec v0</span></span></code></pre>
<p>Once those 246 TODOs are completed, then the first <code>v0.1.0</code> of <code>sqlite-vec</code> will
be released, with documentation, demos, bindings, and more! I'm aiming for a
month or so, but we shall see!</p>
<h2>I'm looking for sponsors!</h2>
<p>Is your company interested in the success of <code>sqlite-vec</code>? I'd love to chat!
<a href="https://alexgarcia.xyz/">Email me</a> for more information.</p>
</section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Dressmaking CAD (108 pts)]]></title>
            <link>https://xn--6xw240d.net/</link>
            <guid>40243014</guid>
            <pubDate>Fri, 03 May 2024 01:10:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xn--6xw240d.net/">https://xn--6xw240d.net/</a>, See on <a href="https://news.ycombinator.com/item?id=40243014">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">


<p>
洋裁CAD
</p>


<div>

<p>
洋裁CADは趣味洋裁用に開発されたフリーのアパレルCAD、パラメトリック設計方式の2D/3D-CADです。<br>
<a href="https://xn--6xw240d.net/download.htm" target="_blank" title="洋裁CADのダウンロード">こちら</a>からダウンロードできます。<br>
従来のアパレルCADにはない、優れた機能を備えています。<br>
<img src="https://xn--6xw240d.net/img/Tomo20210521081612_320_240.png" alt="設計手順"></p><p>
<br>
<img src="https://xn--6xw240d.net/img/20220424215339.png" alt="フリーアパレル洋裁CAD"></p><p>広告</p>

<!-- cardsita -->
<h2>寸法、デザインを簡単に変更</h2><p>
一度書いた型紙は、後から数値を変えるだけで。簡単にサイズやデザインを変えることが出来ます。<br>
下の図は、ワンピースの裾を数値を変更してフイッシュテールに変更しています。<br>
<img src="https://xn--6xw240d.net/img/Tomo20210521095827_320_240.png" alt="パラメーター変更"></p><h2>パターンのライブラリー化</h2><p>
原型や衿、袖、人体寸法などを個別ファイル、ライブラリー化し、必要に応じて読み込み調整することが可能です。<br>
読み込んだファイルは差し替えできるため、人体寸法を差し替えて別の人のサイズに替えたり、原型を差し替えて女性体型を男性体形にする変更が簡単に出来ます。<br>
下の図では人体寸法を女性サイズから男性サイズ、原型を女性から男性、袖を半袖から長袖に入れ替えています。<br>
<img src="https://xn--6xw240d.net/img/Tomo20210521102156_320_240.png" alt="パターンのライブラリー化"></p><h2>３つの出力機能</h2><p>
型紙をプリンターから紙で出力するだけでなく、レーザーカッター用データファイル、テキスタイルプリント用イメージファイルでも出力できます。<br>
<img src="https://xn--6xw240d.net/img/Tomo20190325065220_320_240.jpg" alt="テキスタイルプリント"></p><p>
<img src="https://xn--6xw240d.net/img/Tomo20200714093006_320_240.png" alt=""></p><h2>パターンの変更結果を即3Dに反映</h2><p>
製図したパターンを3D空間で人体3Dデータに着せることが出来ます。CADの中で縫い合わせ確認ができるため、裁断後にミスに気付くことが減ります。<br>
パターンを修正するとそのまま3Dに反映されるため、3Dシミュレーションしながらデザインの微調整が出来ます。<br>
</p><video controls="" width="340"><source src="https://xn--6xw240d.net/img/20210521104912.mp4" type="video/mp4"></video>
<p>
 最終更新日：
2021-05-21 10:57:02
</p>
</div>

<!-- google_ad_section_start(weight=ignore) -->






</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stirling PDF: Self-hosted, web-based PDF manipulation tool (233 pts)]]></title>
            <link>https://github.com/Stirling-Tools/Stirling-PDF</link>
            <guid>40242639</guid>
            <pubDate>Thu, 02 May 2024 23:56:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Stirling-Tools/Stirling-PDF">https://github.com/Stirling-Tools/Stirling-PDF</a>, See on <a href="https://news.ycombinator.com/item?id=40242639">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/docs/stirling.png"><img src="https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/docs/stirling.png" width="80"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Stirling-PDF</h2><a id="user-content-stirling-pdf" aria-label="Permalink: Stirling-PDF" href="#stirling-pdf"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/frooodle/s-pdf" rel="nofollow"><img src="https://camo.githubusercontent.com/48562806f8cc9e2908867f4597baf742ed0a9d239a43811e157f2a57aa4d7d60/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f66726f6f6f646c652f732d706466" alt="Docker Pulls" data-canonical-src="https://img.shields.io/docker/pulls/frooodle/s-pdf"></a>
<a href="https://discord.gg/Cn8pWhQRxZ" rel="nofollow"><img src="https://camo.githubusercontent.com/12331246a09363ff2363ecb5301f5cffbc878b57c3796db780232282e2ada880/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f313036383633363734383831343438333731383f6c6162656c3d446973636f7264" alt="Discord" data-canonical-src="https://img.shields.io/discord/1068636748814483718?label=Discord"></a>
<a href="https://github.com/Stirling-Tools/Stirling-PDF/"><img src="https://camo.githubusercontent.com/b8b36687091a8fd105503594ac783dfd35180f747f524b3ced93eb9e5266aceb/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f762f66726f6f6f646c652f732d7064662f6c6174657374" alt="Docker Image Version (tag latest semver)" data-canonical-src="https://img.shields.io/docker/v/frooodle/s-pdf/latest"></a>
<a href="https://github.com/Stirling-Tools/stirling-pdf"><img src="https://camo.githubusercontent.com/04fd48791563d631b885204a785c825cb33a46af971301f2e504f8cab7468a83/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f737469726c696e672d746f6f6c732f737469726c696e672d7064663f7374796c653d736f6369616c" alt="GitHub Repo stars" data-canonical-src="https://img.shields.io/github/stars/stirling-tools/stirling-pdf?style=social"></a>
<a href="https://www.paypal.com/paypalme/froodleplex" rel="nofollow"><img src="https://camo.githubusercontent.com/73ffcfb9a7fab2f24e9a13318a61efe906fe41713405d837036b50aeb13c5a57/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f50617970616c253230446f6e6174652d79656c6c6f773f7374796c653d666c6174266c6f676f3d70617970616c" alt="Paypal Donate" data-canonical-src="https://img.shields.io/badge/Paypal%20Donate-yellow?style=flat&amp;logo=paypal"></a>
<a href="https://github.com/sponsors/Frooodle"><img src="https://camo.githubusercontent.com/a328cb6ab7c75b7e9a14d9634e767f2c00a4e9d5ba5e0548072c30ad6191b16a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f47697468756225323053706f6e736f722d79656c6c6f773f7374796c653d666c6174266c6f676f3d676974687562" alt="Github Sponsor" data-canonical-src="https://img.shields.io/badge/Github%20Sponsor-yellow?style=flat&amp;logo=github"></a></p>
<p dir="auto"><a href="https://cloud.digitalocean.com/apps/new?repo=https://github.com/Stirling-Tools/Stirling-PDF/tree/digitalOcean&amp;refcode=c3210994b1af" rel="nofollow"><img src="https://camo.githubusercontent.com/159b79f1d2eb07b3de258a6abef0fdc09c4bbed5cbfb6f51642c27d5f93a3b6d/68747470733a2f2f7777772e6465706c6f79746f646f2e636f6d2f646f2d62746e2d626c75652e737667" alt="Deploy to DO" data-canonical-src="https://www.deploytodo.com/do-btn-blue.svg"></a></p>
<p dir="auto">This is a robust, locally hosted web-based PDF manipulation tool using Docker. It enables you to carry out various operations on PDF files, including splitting, merging, converting, reorganizing, adding images, rotating, compressing, and more. Originally developed entirely by ChatGPT, this locally hosted web application has evolved to encompass a comprehensive set of features, addressing all your PDF requirements.</p>
<p dir="auto">Stirling PDF does not initiate any outbound calls for record-keeping or tracking purposes.</p>
<p dir="auto">All files and PDFs exist either exclusively on the client side, reside in server memory only during task execution, or temporarily reside in a file solely for the execution of the task. Any file downloaded by the user will have been deleted from the server by that point.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Stirling-Tools/Stirling-PDF/blob/main/images/stirling-home.jpg"><img src="https://github.com/Stirling-Tools/Stirling-PDF/raw/main/images/stirling-home.jpg" alt="stirling-home"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>Dark mode support.</li>
<li>Custom download options (see <a href="https://github.com/Stirling-Tools/Stirling-PDF/blob/main/images/settings.png">here</a> for example)</li>
<li>Parallel file processing and downloads</li>
<li>API for integration with external scripts</li>
<li>Optional Login and Authentication support (see <a href="https://github.com/Stirling-Tools/Stirling-PDF/tree/main#login-authentication">here</a> for documentation)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto"><strong>PDF Features</strong></h2><a id="user-content-pdf-features" aria-label="Permalink: PDF Features" href="#pdf-features"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><strong>Page Operations</strong></h3><a id="user-content-page-operations" aria-label="Permalink: Page Operations" href="#page-operations"></a></p>
<ul dir="auto">
<li>View and modify PDFs - View multi page PDFs with custom viewing sorting and searching. Plus on page edit features like annotate, draw and adding text and images. (Using PDF.js with Joxit and Liberation.Liberation fonts)</li>
<li>Full interactive GUI for merging/splitting/rotating/moving PDFs and their pages.</li>
<li>Merge multiple PDFs together into a single resultant file.</li>
<li>Split PDFs into multiple files at specified page numbers or extract all pages as individual files.</li>
<li>Reorganize PDF pages into different orders.</li>
<li>Rotate PDFs in 90-degree increments.</li>
<li>Remove pages.</li>
<li>Multi-page layout (Format PDFs into a multi-paged page).</li>
<li>Scale page contents size by set %.</li>
<li>Adjust Contrast.</li>
<li>Crop PDF.</li>
<li>Auto Split PDF (With physically scanned page dividers).</li>
<li>Extract page(s).</li>
<li>Convert PDF to a single page.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto"><strong>Conversion Operations</strong></h3><a id="user-content-conversion-operations" aria-label="Permalink: Conversion Operations" href="#conversion-operations"></a></p>
<ul dir="auto">
<li>Convert PDFs to and from images.</li>
<li>Convert any common file to PDF (using LibreOffice).</li>
<li>Convert PDF to Word/Powerpoint/Others (using LibreOffice).</li>
<li>Convert HTML to PDF.</li>
<li>URL to PDF.</li>
<li>Markdown to PDF.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto"><strong>Security &amp; Permissions</strong></h3><a id="user-content-security--permissions" aria-label="Permalink: Security &amp; Permissions" href="#security--permissions"></a></p>
<ul dir="auto">
<li>Add and remove passwords.</li>
<li>Change/set PDF Permissions.</li>
<li>Add watermark(s).</li>
<li>Certify/sign PDFs.</li>
<li>Sanitize PDFs.</li>
<li>Auto-redact text.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto"><strong>Other Operations</strong></h3><a id="user-content-other-operations" aria-label="Permalink: Other Operations" href="#other-operations"></a></p>
<ul dir="auto">
<li>Add/Generate/Write signatures.</li>
<li>Repair PDFs.</li>
<li>Detect and remove blank pages.</li>
<li>Compare 2 PDFs and show differences in text.</li>
<li>Add images to PDFs.</li>
<li>Compress PDFs to decrease their filesize (Using OCRMyPDF).</li>
<li>Extract images from PDF.</li>
<li>Extract images from Scans.</li>
<li>Add page numbers.</li>
<li>Auto rename file by detecting PDF header text.</li>
<li>OCR on PDF (Using OCRMyPDF).</li>
<li>PDF/A conversion (Using OCRMyPDF).</li>
<li>Edit metadata.</li>
<li>Flatten PDFs.</li>
<li>Get all information on a PDF to view or export as JSON.</li>
</ul>
<p dir="auto">For a overview of the tasks and the technology each uses please view <a href="https://github.com/Stirling-Tools/Stirling-PDF/blob/main/Endpoint-groups.md">Endpoint-groups.md</a>
Demo of the app is available <a href="https://stirlingpdf.io/" rel="nofollow">here</a>. username: demo, password: demo</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Technologies used</h2><a id="user-content-technologies-used" aria-label="Permalink: Technologies used" href="#technologies-used"></a></p>
<ul dir="auto">
<li>Spring Boot + Thymeleaf</li>
<li><a href="https://github.com/apache/pdfbox/tree/trunk">PDFBox</a></li>
<li><a href="https://www.libreoffice.org/discover/libreoffice/" rel="nofollow">LibreOffice</a> for advanced conversions</li>
<li><a href="https://github.com/ocrmypdf/OCRmyPDF">OcrMyPdf</a></li>
<li>HTML, CSS, JavaScript</li>
<li>Docker</li>
<li><a href="https://github.com/mozilla/pdf.js">PDF.js</a></li>
<li><a href="https://github.com/Hopding/pdf-lib">PDF-LIB.js</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">How to use</h2><a id="user-content-how-to-use" aria-label="Permalink: How to use" href="#how-to-use"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Locally</h3><a id="user-content-locally" aria-label="Permalink: Locally" href="#locally"></a></p>
<p dir="auto">Please view <a href="https://github.com/Stirling-Tools/Stirling-PDF/blob/main/LocalRunGuide.md">https://github.com/Stirling-Tools/Stirling-PDF/blob/main/LocalRunGuide.md</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Docker / Podman</h3><a id="user-content-docker--podman" aria-label="Permalink: Docker / Podman" href="#docker--podman"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/frooodle/s-pdf" rel="nofollow">https://hub.docker.com/r/frooodle/s-pdf</a></p>
<p dir="auto">Stirling PDF has 2 different versions, a Full version and ultra-Lite version. Depending on the types of features you use you may want a smaller image to save on space.
To see what the different versions offer please look at our <a href="https://github.com/Stirling-Tools/Stirling-PDF/blob/main/Version-groups.md">version mapping</a>
For people that don't mind about space optimization just use the latest tag.
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fbd9884966c7b2cb6df6cdb0ce00df746aee87215f1395da3f79d52f5c2ff622/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f66726f6f6f646c652f732d7064662f6c61746573743f6c6162656c3d537469726c696e672d50444625323046756c6c"><img src="https://camo.githubusercontent.com/fbd9884966c7b2cb6df6cdb0ce00df746aee87215f1395da3f79d52f5c2ff622/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f66726f6f6f646c652f732d7064662f6c61746573743f6c6162656c3d537469726c696e672d50444625323046756c6c" alt="Docker Image Size (tag)" data-canonical-src="https://img.shields.io/docker/image-size/frooodle/s-pdf/latest?label=Stirling-PDF%20Full"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a3d47e7dc39ea0473c5d476cf4b1d600a97755154b923467a49526e7055b67ed/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f66726f6f6f646c652f732d7064662f6c61746573742d756c7472612d6c6974653f6c6162656c3d537469726c696e672d504446253230556c7472612d4c697465"><img src="https://camo.githubusercontent.com/a3d47e7dc39ea0473c5d476cf4b1d600a97755154b923467a49526e7055b67ed/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f66726f6f6f646c652f732d7064662f6c61746573742d756c7472612d6c6974653f6c6162656c3d537469726c696e672d504446253230556c7472612d4c697465" alt="Docker Image Size (tag)" data-canonical-src="https://img.shields.io/docker/image-size/frooodle/s-pdf/latest-ultra-lite?label=Stirling-PDF%20Ultra-Lite"></a></p>
<p dir="auto">Docker Run</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -d \
  -p 8080:8080 \
  -v /location/of/trainingData:/usr/share/tessdata \
  -v /location/of/extraConfigs:/configs \
  -v /location/of/logs:/logs \
  -e DOCKER_ENABLE_SECURITY=false \
  -e INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false \
  -e LANGS=en_GB \
  --name stirling-pdf \
  frooodle/s-pdf:latest


  Can also add these for customisation but are not required

  -v /location/of/customFiles:/customFiles \"><pre>docker run -d \
  -p 8080:8080 \
  -v /location/of/trainingData:/usr/share/tessdata \
  -v /location/of/extraConfigs:/configs \
  -v /location/of/logs:/logs \
  -e DOCKER_ENABLE_SECURITY=false \
  -e INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false \
  -e LANGS=en_GB \
  --name stirling-pdf \
  frooodle/s-pdf:latest


  Can also add these <span>for</span> customisation but are not required

  -v /location/of/customFiles:/customFiles \</pre></div>
<p dir="auto">Docker Compose</p>
<div dir="auto" data-snippet-clipboard-copy-content="version: '3.3'
services:
  stirling-pdf:
    image: frooodle/s-pdf:latest
    ports:
      - '8080:8080'
    volumes:
      - /location/of/trainingData:/usr/share/tessdata #Required for extra OCR languages
      - /location/of/extraConfigs:/configs
#      - /location/of/customFiles:/customFiles/
#      - /location/of/logs:/logs/
    environment:
      - DOCKER_ENABLE_SECURITY=false
      - INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false
      - LANGS=en_GB"><pre><span>version</span>: <span><span>'</span>3.3<span>'</span></span>
<span>services</span>:
  <span>stirling-pdf</span>:
    <span>image</span>: <span>frooodle/s-pdf:latest</span>
    <span>ports</span>:
      - <span><span>'</span>8080:8080<span>'</span></span>
    <span>volumes</span>:
      - <span>/location/of/trainingData:/usr/share/tessdata </span><span><span>#</span>Required for extra OCR languages</span>
      - <span>/location/of/extraConfigs:/configs</span>
<span><span>#</span>      - /location/of/customFiles:/customFiles/</span>
<span><span>#</span>      - /location/of/logs:/logs/</span>
    <span>environment</span>:
      - <span>DOCKER_ENABLE_SECURITY=false</span>
      - <span>INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false</span>
      - <span>LANGS=en_GB</span></pre></div>
<p dir="auto">Note: Podman is CLI-compatible with Docker, so simply replace "docker" with "podman".</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Enable OCR/Compression feature</h2><a id="user-content-enable-ocrcompression-feature" aria-label="Permalink: Enable OCR/Compression feature" href="#enable-ocrcompression-feature"></a></p>
<p dir="auto">Please view <a href="https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToUseOCR.md">https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToUseOCR.md</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Supported Languages</h2><a id="user-content-supported-languages" aria-label="Permalink: Supported Languages" href="#supported-languages"></a></p>
<p dir="auto">Stirling PDF currently supports 27!</p>
<table>
<thead>
<tr>
<th>Language</th>
<th>Progress</th>
</tr>
</thead>
<tbody>
<tr>
<td>English (English) (en_GB)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1807370956e6a5ca096d77997b25186acdd92b1a3573490cd9f2bf8395438ef5/68747470733a2f2f676570732e6465762f70726f67726573732f313030"><img src="https://camo.githubusercontent.com/1807370956e6a5ca096d77997b25186acdd92b1a3573490cd9f2bf8395438ef5/68747470733a2f2f676570732e6465762f70726f67726573732f313030" alt="100%" data-canonical-src="https://geps.dev/progress/100"></a></td>
</tr>
<tr>
<td>English (US) (en_US)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1807370956e6a5ca096d77997b25186acdd92b1a3573490cd9f2bf8395438ef5/68747470733a2f2f676570732e6465762f70726f67726573732f313030"><img src="https://camo.githubusercontent.com/1807370956e6a5ca096d77997b25186acdd92b1a3573490cd9f2bf8395438ef5/68747470733a2f2f676570732e6465762f70726f67726573732f313030" alt="100%" data-canonical-src="https://geps.dev/progress/100"></a></td>
</tr>
<tr>
<td>Arabic (العربية) (ar_AR)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b8e040de43b795adfdd7ce0c18fb3159a8c66b41163fec5a54097afa6f99281e/68747470733a2f2f676570732e6465762f70726f67726573732f3432"><img src="https://camo.githubusercontent.com/b8e040de43b795adfdd7ce0c18fb3159a8c66b41163fec5a54097afa6f99281e/68747470733a2f2f676570732e6465762f70726f67726573732f3432" alt="42%" data-canonical-src="https://geps.dev/progress/42"></a></td>
</tr>
<tr>
<td>German (Deutsch) (de_DE)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1807370956e6a5ca096d77997b25186acdd92b1a3573490cd9f2bf8395438ef5/68747470733a2f2f676570732e6465762f70726f67726573732f313030"><img src="https://camo.githubusercontent.com/1807370956e6a5ca096d77997b25186acdd92b1a3573490cd9f2bf8395438ef5/68747470733a2f2f676570732e6465762f70726f67726573732f313030" alt="100%" data-canonical-src="https://geps.dev/progress/100"></a></td>
</tr>
<tr>
<td>French (Français) (fr_FR)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/476b0fb5e7ceccc890d3be563ff2b126dd8e182191c5057a528f23a1e38764c8/68747470733a2f2f676570732e6465762f70726f67726573732f3931"><img src="https://camo.githubusercontent.com/476b0fb5e7ceccc890d3be563ff2b126dd8e182191c5057a528f23a1e38764c8/68747470733a2f2f676570732e6465762f70726f67726573732f3931" alt="91%" data-canonical-src="https://geps.dev/progress/91"></a></td>
</tr>
<tr>
<td>Spanish (Español) (es_ES)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/56ca0e85731a93838f4c7bced8c256e4dd1300c0bdada0fc981d74a9913b1717/68747470733a2f2f676570732e6465762f70726f67726573732f3939"><img src="https://camo.githubusercontent.com/56ca0e85731a93838f4c7bced8c256e4dd1300c0bdada0fc981d74a9913b1717/68747470733a2f2f676570732e6465762f70726f67726573732f3939" alt="99%" data-canonical-src="https://geps.dev/progress/99"></a></td>
</tr>
<tr>
<td>Simplified Chinese (简体中文) (zh_CN)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c2f4dd8999790b4cebd8dde128a78dee462cb59da66df7e5504eae3c5d223bd3/68747470733a2f2f676570732e6465762f70726f67726573732f3938"><img src="https://camo.githubusercontent.com/c2f4dd8999790b4cebd8dde128a78dee462cb59da66df7e5504eae3c5d223bd3/68747470733a2f2f676570732e6465762f70726f67726573732f3938" alt="98%" data-canonical-src="https://geps.dev/progress/98"></a></td>
</tr>
<tr>
<td>Traditional Chinese (繁體中文) (zh_TW)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c2f4dd8999790b4cebd8dde128a78dee462cb59da66df7e5504eae3c5d223bd3/68747470733a2f2f676570732e6465762f70726f67726573732f3938"><img src="https://camo.githubusercontent.com/c2f4dd8999790b4cebd8dde128a78dee462cb59da66df7e5504eae3c5d223bd3/68747470733a2f2f676570732e6465762f70726f67726573732f3938" alt="98%" data-canonical-src="https://geps.dev/progress/98"></a></td>
</tr>
<tr>
<td>Catalan (Català) (ca_CA)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/7d366682e299151c5bf9af589fd511748c99b516943ff900dbf2c92d2329fa6f/68747470733a2f2f676570732e6465762f70726f67726573732f3531"><img src="https://camo.githubusercontent.com/7d366682e299151c5bf9af589fd511748c99b516943ff900dbf2c92d2329fa6f/68747470733a2f2f676570732e6465762f70726f67726573732f3531" alt="51%" data-canonical-src="https://geps.dev/progress/51"></a></td>
</tr>
<tr>
<td>Italian (Italiano) (it_IT)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/56ca0e85731a93838f4c7bced8c256e4dd1300c0bdada0fc981d74a9913b1717/68747470733a2f2f676570732e6465762f70726f67726573732f3939"><img src="https://camo.githubusercontent.com/56ca0e85731a93838f4c7bced8c256e4dd1300c0bdada0fc981d74a9913b1717/68747470733a2f2f676570732e6465762f70726f67726573732f3939" alt="99%" data-canonical-src="https://geps.dev/progress/99"></a></td>
</tr>
<tr>
<td>Swedish (Svenska) (sv_SE)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b8e040de43b795adfdd7ce0c18fb3159a8c66b41163fec5a54097afa6f99281e/68747470733a2f2f676570732e6465762f70726f67726573732f3432"><img src="https://camo.githubusercontent.com/b8e040de43b795adfdd7ce0c18fb3159a8c66b41163fec5a54097afa6f99281e/68747470733a2f2f676570732e6465762f70726f67726573732f3432" alt="42%" data-canonical-src="https://geps.dev/progress/42"></a></td>
</tr>
<tr>
<td>Polish (Polski) (pl_PL)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1972470d0b9a5a3231a5fbb765bbd7105ce5958d9e3a26219cfbff74c42ab49e/68747470733a2f2f676570732e6465762f70726f67726573732f3434"><img src="https://camo.githubusercontent.com/1972470d0b9a5a3231a5fbb765bbd7105ce5958d9e3a26219cfbff74c42ab49e/68747470733a2f2f676570732e6465762f70726f67726573732f3434" alt="44%" data-canonical-src="https://geps.dev/progress/44"></a></td>
</tr>
<tr>
<td>Romanian (Română) (ro_RO)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e0ee38489bf7c971a614eef84e2e3e8af8da73afcd7355b620453f574973ae5c/68747470733a2f2f676570732e6465762f70726f67726573732f3431"><img src="https://camo.githubusercontent.com/e0ee38489bf7c971a614eef84e2e3e8af8da73afcd7355b620453f574973ae5c/68747470733a2f2f676570732e6465762f70726f67726573732f3431" alt="41%" data-canonical-src="https://geps.dev/progress/41"></a></td>
</tr>
<tr>
<td>Korean (한국어) (ko_KR)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/476b0fb5e7ceccc890d3be563ff2b126dd8e182191c5057a528f23a1e38764c8/68747470733a2f2f676570732e6465762f70726f67726573732f3931"><img src="https://camo.githubusercontent.com/476b0fb5e7ceccc890d3be563ff2b126dd8e182191c5057a528f23a1e38764c8/68747470733a2f2f676570732e6465762f70726f67726573732f3931" alt="91%" data-canonical-src="https://geps.dev/progress/91"></a></td>
</tr>
<tr>
<td>Portuguese Brazilian (Português) (pt_BR)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ff09f2bee51920bc267f650f1bd83203ade240ae0f28025e19fc3a5c3c6f6231/68747470733a2f2f676570732e6465762f70726f67726573732f3634"><img src="https://camo.githubusercontent.com/ff09f2bee51920bc267f650f1bd83203ade240ae0f28025e19fc3a5c3c6f6231/68747470733a2f2f676570732e6465762f70726f67726573732f3634" alt="64%" data-canonical-src="https://geps.dev/progress/64"></a></td>
</tr>
<tr>
<td>Russian (Русский) (ru_RU)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/476b0fb5e7ceccc890d3be563ff2b126dd8e182191c5057a528f23a1e38764c8/68747470733a2f2f676570732e6465762f70726f67726573732f3931"><img src="https://camo.githubusercontent.com/476b0fb5e7ceccc890d3be563ff2b126dd8e182191c5057a528f23a1e38764c8/68747470733a2f2f676570732e6465762f70726f67726573732f3931" alt="91%" data-canonical-src="https://geps.dev/progress/91"></a></td>
</tr>
<tr>
<td>Basque (Euskara) (eu_ES)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ed436d18441d0d2f23ca78ddf686680c7795aab3c9ecf30cc5494a083c25f4a3/68747470733a2f2f676570732e6465762f70726f67726573732f3636"><img src="https://camo.githubusercontent.com/ed436d18441d0d2f23ca78ddf686680c7795aab3c9ecf30cc5494a083c25f4a3/68747470733a2f2f676570732e6465762f70726f67726573732f3636" alt="66%" data-canonical-src="https://geps.dev/progress/66"></a></td>
</tr>
<tr>
<td>Japanese (日本語) (ja_JP)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/476b0fb5e7ceccc890d3be563ff2b126dd8e182191c5057a528f23a1e38764c8/68747470733a2f2f676570732e6465762f70726f67726573732f3931"><img src="https://camo.githubusercontent.com/476b0fb5e7ceccc890d3be563ff2b126dd8e182191c5057a528f23a1e38764c8/68747470733a2f2f676570732e6465762f70726f67726573732f3931" alt="91%" data-canonical-src="https://geps.dev/progress/91"></a></td>
</tr>
<tr>
<td>Dutch (Nederlands) (nl_NL)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c974c02d8c743d54f27ce92d1f904aaf171f3ba9ef9a9216f1d18f86cdcbf287/68747470733a2f2f676570732e6465762f70726f67726573732f3838"><img src="https://camo.githubusercontent.com/c974c02d8c743d54f27ce92d1f904aaf171f3ba9ef9a9216f1d18f86cdcbf287/68747470733a2f2f676570732e6465762f70726f67726573732f3838" alt="88%" data-canonical-src="https://geps.dev/progress/88"></a></td>
</tr>
<tr>
<td>Greek (Ελληνικά) (el_GR)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c974c02d8c743d54f27ce92d1f904aaf171f3ba9ef9a9216f1d18f86cdcbf287/68747470733a2f2f676570732e6465762f70726f67726573732f3838"><img src="https://camo.githubusercontent.com/c974c02d8c743d54f27ce92d1f904aaf171f3ba9ef9a9216f1d18f86cdcbf287/68747470733a2f2f676570732e6465762f70726f67726573732f3838" alt="88%" data-canonical-src="https://geps.dev/progress/88"></a></td>
</tr>
<tr>
<td>Turkish (Türkçe) (tr_TR)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/56ca0e85731a93838f4c7bced8c256e4dd1300c0bdada0fc981d74a9913b1717/68747470733a2f2f676570732e6465762f70726f67726573732f3939"><img src="https://camo.githubusercontent.com/56ca0e85731a93838f4c7bced8c256e4dd1300c0bdada0fc981d74a9913b1717/68747470733a2f2f676570732e6465762f70726f67726573732f3939" alt="99%" data-canonical-src="https://geps.dev/progress/99"></a></td>
</tr>
<tr>
<td>Indonesia (Bahasa Indonesia) (id_ID)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d45ceb15908e6be2f6703df808b5417e4da62bbd93a783cddfdfee076eff8352/68747470733a2f2f676570732e6465762f70726f67726573732f3832"><img src="https://camo.githubusercontent.com/d45ceb15908e6be2f6703df808b5417e4da62bbd93a783cddfdfee076eff8352/68747470733a2f2f676570732e6465762f70726f67726573732f3832" alt="82%" data-canonical-src="https://geps.dev/progress/82"></a></td>
</tr>
<tr>
<td>Hindi (हिंदी) (hi_IN)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d45ceb15908e6be2f6703df808b5417e4da62bbd93a783cddfdfee076eff8352/68747470733a2f2f676570732e6465762f70726f67726573732f3832"><img src="https://camo.githubusercontent.com/d45ceb15908e6be2f6703df808b5417e4da62bbd93a783cddfdfee076eff8352/68747470733a2f2f676570732e6465762f70726f67726573732f3832" alt="82%" data-canonical-src="https://geps.dev/progress/82"></a></td>
</tr>
<tr>
<td>Hungarian (Magyar) (hu_HU)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/d455e3ec21a4cebca8e58c20d28ab172c2d27f52917bde2e94c2bf5337c48aba/68747470733a2f2f676570732e6465762f70726f67726573732f3831"><img src="https://camo.githubusercontent.com/d455e3ec21a4cebca8e58c20d28ab172c2d27f52917bde2e94c2bf5337c48aba/68747470733a2f2f676570732e6465762f70726f67726573732f3831" alt="81%" data-canonical-src="https://geps.dev/progress/81"></a></td>
</tr>
<tr>
<td>Bulgarian (Български) (bg_BG)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/e2e83a63f4c01bd8be27ef6ee57e0f97dbe77ca66de609e8f60e466f389fc582/68747470733a2f2f676570732e6465762f70726f67726573732f3735"><img src="https://camo.githubusercontent.com/e2e83a63f4c01bd8be27ef6ee57e0f97dbe77ca66de609e8f60e466f389fc582/68747470733a2f2f676570732e6465762f70726f67726573732f3735" alt="75%" data-canonical-src="https://geps.dev/progress/75"></a></td>
</tr>
<tr>
<td>Sebian Latin alphabet (Srpski) (sr_LATN_RS)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/47fc7562f1ce54c6b9a2b690cbf9e798061f9620829e774125a3633e91aa0348/68747470733a2f2f676570732e6465762f70726f67726573732f3834"><img src="https://camo.githubusercontent.com/47fc7562f1ce54c6b9a2b690cbf9e798061f9620829e774125a3633e91aa0348/68747470733a2f2f676570732e6465762f70726f67726573732f3834" alt="84%" data-canonical-src="https://geps.dev/progress/84"></a></td>
</tr>
<tr>
<td>Ukrainian (Українська) (uk_UA)</td>
<td><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8c607e50c188cd67d9af696fd87485ea7d7f629bd9a5dff8d16c7ae44bf0ca14/68747470733a2f2f676570732e6465762f70726f67726573732f3930"><img src="https://camo.githubusercontent.com/8c607e50c188cd67d9af696fd87485ea7d7f629bd9a5dff8d16c7ae44bf0ca14/68747470733a2f2f676570732e6465762f70726f67726573732f3930" alt="90%" data-canonical-src="https://geps.dev/progress/90"></a></td>
</tr>
</tbody>
</table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing (creating issues, translations, fixing bugs, etc.)</h2><a id="user-content-contributing-creating-issues-translations-fixing-bugs-etc" aria-label="Permalink: Contributing (creating issues, translations, fixing bugs, etc.)" href="#contributing-creating-issues-translations-fixing-bugs-etc"></a></p>
<p dir="auto">Please see our <a href="https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md">Contributing Guide</a>!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Customisation</h2><a id="user-content-customisation" aria-label="Permalink: Customisation" href="#customisation"></a></p>
<p dir="auto">Stirling PDF allows easy customization of the app.
Includes things like</p>
<ul dir="auto">
<li>Custom application name</li>
<li>Custom slogans, icons, HTML, images CSS etc (via file overrides)</li>
</ul>
<p dir="auto">There are two options for this, either using the generated settings file <code>settings.yml</code>
This file is located in the <code>/configs</code> directory and follows standard YAML formatting</p>
<p dir="auto">Environment variables are also supported and would override the settings file
For example in the settings.yml you have</p>
<div dir="auto" data-snippet-clipboard-copy-content="system:
  defaultLocale: 'en-US'"><pre><span>system</span>:
  <span>defaultLocale</span>: <span><span>'</span>en-US<span>'</span></span></pre></div>
<p dir="auto">To have this via an environment variable you would have <code>SYSTEM_DEFAULTLOCALE</code></p>
<p dir="auto">The Current list of settings is</p>
<div dir="auto" data-snippet-clipboard-copy-content="security:
  enableLogin: false # set to 'true' to enable login
  csrfDisabled: true

system:
  defaultLocale: 'en-US' # Set the default language (e.g. 'de-DE', 'fr-FR', etc)
  googlevisibility: false # 'true' to allow Google visibility (via robots.txt), 'false' to disallow
  customStaticFilePath: '/customFiles/static/' # Directory path for custom static files
  showUpdate: true # see when a new update is available
  showUpdateOnlyAdmin: false # Only admins can see when a new update is available, depending on showUpdate it must be set to 'true'
  customHTMLFiles: false # enable to have files placed in /customFiles/templates override the existing template html files

#ui:
#  appName: exampleAppName # Application's visible name
#  homeDescription: I am a description # Short description or tagline shown on homepage.
#  appNameNavbar: navbarName # Name displayed on the navigation bar

endpoints:
  toRemove: [] # List endpoints to disable (e.g. ['img-to-pdf', 'remove-pages'])
  groupsToRemove: [] # List groups to disable (e.g. ['LibreOffice'])

metrics:
  enabled: true # 'true' to enable Info APIs endpoints (view http://localhost:8080/swagger-ui/index.html#/API to learn more), 'false' to disable"><pre><span>security</span>:
  <span>enableLogin</span>: <span>false </span><span><span>#</span> set to 'true' to enable login</span>
  <span>csrfDisabled</span>: <span>true</span>

<span>system</span>:
  <span>defaultLocale</span>: <span><span>'</span>en-US<span>'</span></span> <span><span>#</span> Set the default language (e.g. 'de-DE', 'fr-FR', etc)</span>
  <span>googlevisibility</span>: <span>false </span><span><span>#</span> 'true' to allow Google visibility (via robots.txt), 'false' to disallow</span>
  <span>customStaticFilePath</span>: <span><span>'</span>/customFiles/static/<span>'</span></span> <span><span>#</span> Directory path for custom static files</span>
  <span>showUpdate</span>: <span>true </span><span><span>#</span> see when a new update is available</span>
  <span>showUpdateOnlyAdmin</span>: <span>false </span><span><span>#</span> Only admins can see when a new update is available, depending on showUpdate it must be set to 'true'</span>
  <span>customHTMLFiles</span>: <span>false </span><span><span>#</span> enable to have files placed in /customFiles/templates override the existing template html files</span>

<span><span>#</span>ui:</span>
<span><span>#</span>  appName: exampleAppName # Application's visible name</span>
<span><span>#</span>  homeDescription: I am a description # Short description or tagline shown on homepage.</span>
<span><span>#</span>  appNameNavbar: navbarName # Name displayed on the navigation bar</span>

<span>endpoints</span>:
  <span>toRemove</span>: <span>[] </span><span><span>#</span> List endpoints to disable (e.g. ['img-to-pdf', 'remove-pages'])</span>
  <span>groupsToRemove</span>: <span>[] </span><span><span>#</span> List groups to disable (e.g. ['LibreOffice'])</span>

<span>metrics</span>:
  <span>enabled</span>: <span>true </span><span><span>#</span> 'true' to enable Info APIs endpoints (view http://localhost:8080/swagger-ui/index.html#/API to learn more), 'false' to disable</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Extra notes</h3><a id="user-content-extra-notes" aria-label="Permalink: Extra notes" href="#extra-notes"></a></p>
<ul dir="auto">
<li>Endpoints. Currently, the endpoints ENDPOINTS_TO_REMOVE and GROUPS_TO_REMOVE can include comma separate lists of endpoints and groups to disable as example ENDPOINTS_TO_REMOVE=img-to-pdf,remove-pages would disable both image-to-pdf and remove pages, GROUPS_TO_REMOVE=LibreOffice Would disable all things that use LibreOffice. You can see a list of all endpoints and groups <a href="https://github.com/Stirling-Tools/Stirling-PDF/blob/main/Endpoint-groups.md">here</a></li>
<li>customStaticFilePath. Customise static files such as the app logo by placing files in the /customFiles/static/ directory. An example of customising app logo is placing a /customFiles/static/favicon.svg to override current SVG. This can be used to change any images/icons/css/fonts/js etc in Stirling-PDF</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Environment only parameters</h3><a id="user-content-environment-only-parameters" aria-label="Permalink: Environment only parameters" href="#environment-only-parameters"></a></p>
<ul dir="auto">
<li><code>SYSTEM_ROOTURIPATH</code> ie set to <code>/pdf-app</code> to Set the application's root URI to <code>localhost:8080/pdf-app</code></li>
<li><code>SYSTEM_CONNECTIONTIMEOUTMINUTES</code> to set custom connection timeout values</li>
<li><code>DOCKER_ENABLE_SECURITY</code> to tell docker to download security jar (required as true for auth login)</li>
<li><code>INSTALL_BOOK_AND_ADVANCED_HTML_OPS</code> to download calibre onto stirling-pdf enabling pdf to/from book and advanced html conversion</li>
<li><code>LANGS</code> to define custom font libraries to install for use for document conversions</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">API</h2><a id="user-content-api" aria-label="Permalink: API" href="#api"></a></p>
<p dir="auto">For those wanting to use Stirling-PDFs backend API to link with their own custom scripting to edit PDFs you can view all existing API documentation
<a href="https://app.swaggerhub.com/apis-docs/Stirling-Tools/Stirling-PDF/" rel="nofollow">here</a> or navigate to /swagger-ui/index.html of your stirling-pdf instance for your versions documentation (Or by following the API button in your settings of Stirling-PDF)</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Login authentication</h2><a id="user-content-login-authentication" aria-label="Permalink: Login authentication" href="#login-authentication"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Stirling-Tools/Stirling-PDF/blob/main/images/login-light.png"><img src="https://github.com/Stirling-Tools/Stirling-PDF/raw/main/images/login-light.png" alt="stirling-login"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Prerequisites:</h3><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites:" href="#prerequisites"></a></p>
<ul dir="auto">
<li>User must have the folder ./configs volumed within docker so that it is retained during updates.</li>
<li>Docker uses must download the security jar version by setting <code>DOCKER_ENABLE_SECURITY</code> to <code>true</code> in environment variables.</li>
<li>Then either enable login via the settings.yml file or via setting <code>SECURITY_ENABLE_LOGIN</code> to <code>true</code></li>
<li>Now the initial user will be generated with username <code>admin</code> and password <code>stirling</code>. On login you will be forced to change the password to a new one. You can also use the environment variables <code>SECURITY_INITIALLOGIN_USERNAME</code> and  <code>SECURITY_INITIALLOGIN_PASSWORD</code> to set your own straight away (Recommended to remove them after user creation).</li>
</ul>
<p dir="auto">Once the above has been done, on restart, a new stirling-pdf-DB.mv.db will show if everything worked.</p>
<p dir="auto">When you login to Stirling PDF you will be redirected to /login page to login with those default credentials. After login everything should function as normal</p>
<p dir="auto">To access your account settings go to Account settings in the settings cog menu (top right in navbar) This Account settings menu is also where you find your API key.</p>
<p dir="auto">To add new users go to the bottom of Account settings and hit 'Admin Settings', here you can add new users. The different roles mentioned within this are for rate limiting. This is a Work in progress which will be expanding on more in future</p>
<p dir="auto">For API usage you must provide a header with 'X-API-Key' and the associated API key for that user.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">FAQ</h2><a id="user-content-faq" aria-label="Permalink: FAQ" href="#faq"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Q1: What are your planned features?</h3><a id="user-content-q1-what-are-your-planned-features" aria-label="Permalink: Q1: What are your planned features?" href="#q1-what-are-your-planned-features"></a></p>
<ul dir="auto">
<li>Progress bar/Tracking</li>
<li>Full custom logic pipelines to combine multiple operations together.</li>
<li>Folder support with auto scanning to perform operations on</li>
<li>Redact text (Via UI not just automated way)</li>
<li>Add Forms</li>
<li>Multi page layout (Stich PDF pages together) support x rows y columns and custom page sizing</li>
<li>Fill forms manually or automatically</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Q2: Why is my application downloading .htm files?</h3><a id="user-content-q2-why-is-my-application-downloading-htm-files" aria-label="Permalink: Q2: Why is my application downloading .htm files?" href="#q2-why-is-my-application-downloading-htm-files"></a></p>
<p dir="auto">This is an issue caused commonly by your NGINX configuration. The default file upload size for NGINX is 1MB, you need to add the following in your Nginx sites-available file. <code>client_max_body_size SIZE;</code> Where "SIZE" is 50M for example for 50MB files.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Q3: Why is my download timing out</h3><a id="user-content-q3-why-is-my-download-timing-out" aria-label="Permalink: Q3: Why is my download timing out" href="#q3-why-is-my-download-timing-out"></a></p>
<p dir="auto">NGINX has timeout values by default so if you are running Stirling-PDF behind NGINX you may need to set a timeout value such as adding the config <code>proxy_read_timeout 3600;</code></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Single Div (306 pts)]]></title>
            <link>https://a.singlediv.com/</link>
            <guid>40242410</guid>
            <pubDate>Thu, 02 May 2024 23:17:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://a.singlediv.com/">https://a.singlediv.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40242410">Hacker News</a></p>
<div id="readability-page-1" class="page"><header><a href="https://a.singlediv.com/2014-2019">2014-2019</a><a href="https://github.com/lynnandtonic/a-single-div">GitHub</a><a href="https://a.singlediv.com/divtober2023">#divtober</a><a href="https://www.buymeacoffee.com/lynnandtonic">Buy me a coffee</a></header><!-- 31 Oct 2023 - #divtober--><!-- 30 Oct 2023 - #divtober--><!-- 29 Oct 2023 - #divtober--><!-- 28 Oct 2023 - #divtober--><!-- 27 Oct 2023 - #divtober--><!-- 26 Oct 2023 - #divtober--><!-- 25 Oct 2023 - #divtober--><!-- 24 Oct 2023 - #divtober--><!-- 23 Oct 2023 - #divtober--><!-- 22 Oct 2023 - #divtober--><!-- 21 Oct 2023 - #divtober--><!-- 20 Oct 2023 - #divtober--><!-- 19 Oct 2023 - #divtober--><!-- 18 Oct 2023 - #divtober--><!-- 17 Oct 2023 - #divtober--><!-- 16 Oct 2023 - #divtober--><!-- 15 Oct 2023 - #divtober--><!-- 14 Oct 2023 - #divtober--><!-- 13 Oct 2023 - #divtober--><!-- 12 Oct 2023 - #divtober--><!-- 11 Oct 2023 - #divtober--><!-- 10 Oct 2023 - #divtober--><!-- 9 Oct 2023 - #divtober--><!-- 8 Oct 2023 - #divtober--><!-- 7 Oct 2023 - #divtober--><!-- 6 Oct 2023 - #divtober--><!-- 5 Oct 2023 - #divtober--><!-- 4 Oct 2023 - #divtober--><!-- 3 Oct 2023 - #divtober--><!-- 2 Oct 2023 - #divtober--><!-- 1 Oct 2023 - #divtober--><!-- 22 May 2023--><!-- 31 Oct 2022 - #divtober--><!-- 30 Oct 2022 - #divtober--><!-- 29 Oct 2022 - #divtober--><!-- 28 Oct 2022 - #divtober--><!-- 27 Oct 2022 - #divtober--><!-- 26 Oct 2022 - #divtober--><!-- 25 Oct 2022 - #divtober--><!-- 24 Oct 2022 - #divtober--><!-- 23 Oct 2022 - #divtober--><!-- 22 Oct 2022 - #divtober--><!-- 21 Oct 2022 - #divtober--><!-- 20 Oct 2022 - #divtober--><!-- 19 Oct 2022 - #divtober--><!-- 18 Oct 2022 - #divtober--><!-- 17 Oct 2022 - #divtober--><!-- 16 Oct 2022 - #divtober--><!-- 15 Oct 2022 - #divtober--><!-- 14 Oct 2022 - #divtober--><!-- 13 Oct 2022 - #divtober--><!-- 12 Oct 2022 - #divtober--><!-- 11 Oct 2022 - #divtober--><!-- 10 Oct 2022 - #divtober--><!-- 9 Oct 2022 - #divtober--><!-- 8 Oct 2022 - #divtober--><!-- 7 Oct 2022 - #divtober--><!-- 6 Oct 2022 - #divtober--><!-- 5 Oct 2022 - #divtober--><!-- 4 Oct 2022 - #divtober--><!-- 3 Oct 2022 - #divtober--><!-- 2 Oct 2022 - #divtober--><!-- 1 Oct 2022 - #divtober--><!-- 10 Sep 2022--><!-- 22 May 2022--><!-- 31 Oct 2021 - #divtober--><!-- 30 Oct 2021 - #divtober--><!-- 29 Oct 2021 - #divtober--><!-- 28 Oct 2021 - #divtober--><!-- 27 Oct 2021 - #divtober--><!-- 26 Oct 2021 - #divtober--><!-- 25 Oct 2021 - #divtober--><!-- 24 Oct 2021 - #divtober--><!-- 23 Oct 2021 - #divtober--><!-- 22 Oct 2021 - #divtober--><!-- 21 Oct 2021 - #divtober--><!-- 20 Oct 2021 - #divtober--><!-- 19 Oct 2021 - #divtober--><!-- 18 Oct 2021 - #divtober--><!-- 17 Oct 2021 - #divtober--><!-- 16 Oct 2021 - #divtober--><!-- 15 Oct 2021 - #divtober--><!-- 14 Oct 2021 - #divtober--><!-- 13 Oct 2021 - #divtober--><!-- 12 Oct 2021 - #divtober--><!-- 11 Oct 2021 - #divtober--><!-- 10 Oct 2021 - #divtober--><!-- 9 Oct 2021 - #divtober--><!-- 8 Oct 2021 - #divtober--><!-- 7 Oct 2021 - #divtober--><!-- 6 Oct 2021 - #divtober--><!-- 5 Oct 2021 - #divtober--><!-- 4 Oct 2021 - #divtober--><!-- 3 Oct 2021 - #divtober--><!-- 2 Oct 2021 - #divtober--><!-- 1 Oct 2021 - #divtober--><!-- 22 May 2021--><!-- 31 Oct 2020 - #divtober--><!-- 30 Oct 2020 - #divtober--><!-- 29 Oct 2020 - #divtober--><!-- A misquote vote tote--><!-- 28 Oct 2020 - #divtober--><!-- 27 Oct 2020 - #divtober--><!-- 26 Oct 2020 - #divtober--><!-- 25 Oct 2020 - #divtober--><!-- 24 Oct 2020 - #divtober--><!-- 23 Oct 2020 - #divtober--><!-- 22 Oct 2020 - #divtober--><!-- 21 Oct 2020 - #divtober--><!-- 20 Oct 2020 - #divtober--><!-- 19 Oct 2020 - #divtober--><!-- 18 Oct 2020 - #divtober--><!-- 17 Oct 2020 - #divtober--><!-- 16 Oct 2020 - #divtober--><!-- 15 Oct 2020 - #divtober--><!-- 14 Oct 2020 - #divtober--><!-- 13 Oct 2020 - #divtober--><!-- 12 Oct 2020 - #divtober--><!-- 11 Oct 2020 - #divtober--><!-- 10 Oct 2020 - #divtober--><!-- 9 Oct 2020 - #divtober--><!-- 8 Oct 2020 - #divtober--><!-- 7 Oct 2020 - #divtober--><!-- 6 Oct 2020 - #divtober--><!-- 5 Oct 2020 - #divtober--><!-- 4 Oct 2020 - #divtober--><!-- 3 Oct 2020 - #divtober--><!-- 2 Oct 2020 - #divtober--><!-- 1 Oct 2020 - #divtober--><!-- 16 Aug 2020--><!-- 18 June 2020--><!-- Seigaiha pattern by Lea Verou - https://leaverou.github.io/css3patterns/#seigaiha--><!-- 12 Jul 2020--><!-- 22 May 2020--><!-- 19 May 2020--><!-- 17 May 2020--><!-- 16 May 2020--><!-- 15 May 2020--><!-- 14 May 2020--><!-- 13 May 2020--><!-- Based on the font from Action Hollywood (1995) as seen in Arcade Game Typography by Toshi Omagari--><!-- 12 May 2020--><!-- 11 May 2020--><!-- 10 May 2020--><!-- 1 Mar 2020--></div>]]></description>
        </item>
        <item>
            <title><![CDATA[You receive a call on your phone. The caller says they're from your bank (103 pts)]]></title>
            <link>https://mastodon.social/@Edent/112372412442888807</link>
            <guid>40242379</guid>
            <pubDate>Thu, 02 May 2024 23:13:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mastodon.social/@Edent/112372412442888807">https://mastodon.social/@Edent/112372412442888807</a>, See on <a href="https://news.ycombinator.com/item?id=40242379">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[More info about synonyms at Google (2010) (102 pts)]]></title>
            <link>https://www.mattcutts.com/blog/google-synonyms/</link>
            <guid>40242335</guid>
            <pubDate>Thu, 02 May 2024 23:05:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.mattcutts.com/blog/google-synonyms/">https://www.mattcutts.com/blog/google-synonyms/</a>, See on <a href="https://news.ycombinator.com/item?id=40242335">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>by  on <span title="2010-01-19T14:38:14-07:00">January 19, 2010</span>  <span>in <a href="https://www.mattcutts.com/blog/type/googleseo/" rel="category tag">Google/SEO</a></span>  </p></div><div><p>Steve Baker, an engineer in the search quality group at Google, just did a nice post about <a href="http://googleblog.blogspot.com/2010/01/helping-computers-understand-language.html">synonyms</a> on the Google blog. A lot of people seem to think that Google only does simple-minded matching of the users’ keywords with words that we indexed. The truth is that Google does a lot more sophisticated stuff than most people realize. I’d say that Google does more with “semantics” and both document and query understanding than almost any other search engine.</p>
<p><a href="http://googleblog.blogspot.com/2010/01/helping-computers-understand-language.html">Read the blog post</a> for more info, but I liked a couple examples that Steve mentioned. “Pictures” and “picture” often mean the same thing, but the query [arm reduction] is very different than [arms reduction]. Also, in the query [dura ace track bb axle njs] the “bb” is probably referring to a bottom bracket while in the query [software update on bb color id] the “bb” probably means blackberry.</p>
<p>Still not convinced? Here’s some new stats from Steve that we haven’t made public before:</p>
<blockquote><p>However, our measurements show that synonyms affect 70 percent of user searches <em>[note from Matt: of course, it could be a subtle change]</em> across the more than 100 languages Google supports. We took a set of these queries and analyzed how precise the synonyms were, and were happy with the results: For every 50 queries where synonyms significantly improved the search results, we had only one truly bad synonym.</p></blockquote>
<p>I hope Google continues to open up more about search quality and talk more about our search rankings. Steve is a <a href="http://arnoldit.com/wordpress/2009/12/24/google-nails-patent-for-query-synonyms-in-query-context/">smart engineer</a>. I love that Google has a lot of smart engineers like Steve and with any luck we’ll continue to highlight the sort of work that those engineers do.</p>
<p>As far as concrete advice for webmasters, the same advice still holds that we’ve always said: think about the different words that searchers might use when looking for your content. Don’t just use technical terms–think about real-world terms and slang that users will type. For example, if you’re talking about a “usb drive,” some people might call it a flash drive or a thumb drive. Bear in mind the terms that people will type and think about synonyms that can fit naturally into your content. Don’t stuff an article with keywords or make it awkward, but if you can incorporate different ways of talking about a subject in a natural way, that can help users.</p>
<p><strong>Added, Jan 22, 2010</strong>: Another nice post on the Google blog, this time about <a href="http://googleblog.blogspot.com/2010/01/understanding-web-to-make-search-more.html">highlighting users’ answers</a> directly in search result snippets.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[YouTube's Legal Team sent me a letter [video] (151 pts)]]></title>
            <link>https://www.youtube.com/watch?v=dqTYg6vnQvw</link>
            <guid>40242114</guid>
            <pubDate>Thu, 02 May 2024 22:33:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=dqTYg6vnQvw">https://www.youtube.com/watch?v=dqTYg6vnQvw</a>, See on <a href="https://news.ycombinator.com/item?id=40242114">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Second Boeing Whistleblower Dies in Less Than Two Months (216 pts)]]></title>
            <link>https://www.newshub.co.nz/home/world/2024/05/whistleblower-josh-dean-of-boeing-supplier-spirit-aerosystems-dies-of-sudden-illness.html</link>
            <guid>40241734</guid>
            <pubDate>Thu, 02 May 2024 21:47:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newshub.co.nz/home/world/2024/05/whistleblower-josh-dean-of-boeing-supplier-spirit-aerosystems-dies-of-sudden-illness.html">https://www.newshub.co.nz/home/world/2024/05/whistleblower-josh-dean-of-boeing-supplier-spirit-aerosystems-dies-of-sudden-illness.html</a>, See on <a href="https://news.ycombinator.com/item?id=40241734">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-emptytext="Text" data-text-id="body">
    <p>Another whistleblower who publicly spoke out about safety issues with Boeing planes has died, less than two months after fellow whistleblower John Barnett died from a gunshot wound police have yet to finish investigating.</p>
<p>Joshua Dean, a former quality auditor at Boeing supplier Spirit AeroSystems and one of the first to allege wilful ignorance of manufacturing defects on the notorious 737 MAX, died after a "short and sudden illness", the <i><a href="https://www.seattletimes.com/business/whistleblower-josh-dean-of-boeing-supplier-spirit-aerosystems-has-died/" target="_blank">Seattle Times</a></i> reports.</p>
<p>The 45-year-old was reportedly "known for a healthy lifestyle" but fell ill and was admitted to hospital a little over two weeks ago due to breathing difficulties. He was subsequently diagnosed with pneumonia and a severe bacterial infection known as MRSA.</p>
<p>Despite various treatments, his condition worsened rapidly before it was revealed he had suffered a stroke, and Dean's mother posted on Facebook on April 26 that he was "fighting for his life".</p>
<p>He died Tuesday morning (local time), the <i>Seattle Times</i> quotes his aunt Carol Parsons as confirming.&nbsp;A Spirit spokesperson said: "Our thoughts are with Josh Dean's family. This sudden loss is stunning news here and for his loved ones."</p>

</div><div data-emptytext="Text" data-text-id="text_21698527">
    <p>Dean and Barnett were both represented by the same legal company in South Carolina.</p>
<p>After <a href="https://www.newshub.co.nz/home/world/2024/03/boeing-whistleblower-found-dead-in-truck-in-south-carolina-during-lawsuit-against-company.html" target="_blank">Barnett died from a gunshot wound</a> in Charleston, the same South Carolina city Boeing has its 787 manufacturing facility, the coroner reported his death appeared to be "self-inflicted"; but the police are yet to complete their investigation into his death.</p>
<p>"They found him in his truck. I don't know what to say. I've never experienced anything like this in my life," one of his lawyers Brian Knowles told media.</p>
<p>Boeing released a statement at the time saying the company was "saddened" by Barnett's death.</p>
<p>Knowles told the&nbsp;<i>Seattle Times</i> he would not speculate on the close timing and circumstances of the two deaths.</p>
<p>“Whistleblowers are needed. They bring to light wrongdoing and corruption in the interests of society. It takes a lot of courage to stand up,” Knowles said.</p>
<p>"It's a difficult set of circumstances. Our thoughts now are with John’s family and Josh’s family."</p>
<p>A recent deposition and complaint filed by Dean have brought attention to what he alleged was "serious and gross misconduct by senior quality management" within Spirit's 737 production line.</p>
<p>It came amid heightened scrutiny of a Boeing 737 MAX aircraft and former colleagues of Dean have corroborated some of his claims.</p>
<p>Barnett, who was 62 when he died, was a veteran of 32 years at Boeing and was well known for his vocal criticism of the company's alleged decline in production standards.</p>
<p>He died amid providing testimony in a high-profile legal case against Boeing, having testified just days prior and shortly before he was scheduled for further questioning.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[TSMC Jumps into Silicon Photonics, Lays Out Roadmap for 12.8 Tbps Interconnect (170 pts)]]></title>
            <link>https://www.anandtech.com/show/21373/tsmc-adds-silicon-photonics-coupe-roadmap-128tbps-on-package</link>
            <guid>40241694</guid>
            <pubDate>Thu, 02 May 2024 21:44:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.anandtech.com/show/21373/tsmc-adds-silicon-photonics-coupe-roadmap-128tbps-on-package">https://www.anandtech.com/show/21373/tsmc-adds-silicon-photonics-coupe-roadmap-128tbps-on-package</a>, See on <a href="https://news.ycombinator.com/item?id=40241694">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>

                

<div>
    <nav>
        <ul>
            <li><a href="https://www.anandtech.com/">Home</a><span>&gt;</span></li>
                <li><a href="https://www.anandtech.com/tag/semiconductors">Semiconductors</a></li>
        </ul>
        
    </nav>

    
    
</div>






<div>

                <p><img src="https://images.anandtech.com/doci/21373/council-bluffs-network-room_678x452.jpg" alt="">
                </p>

            


        <div>
            <p>Optical connectivity&nbsp;– and especially silicon photonics&nbsp;– is expected to become a crucial technology to enable connectivity for next-generation datacenters, particularly those designed HPC applications. With ever-increasing bandwidth requirements needed to keep up with (and keep scaling out) system performance, copper signaling alone won't be enough to keep up. To that end, several companies are developing silicon photonics solutions, including fab providers like TSMC, who this week outlined its 3D Optical Engine roadmap as part of its 2024 North American Technology Symposium, laying out its plan to bring up to 12.8 Tbps optical connectivity to TSMC-fabbed processors.</p>

<p>TSMC's Compact Universal Photonic Engine (COUPE) stacks an electronics integrated circuit on photonic integrated circuit (EIC-on-PIC) using the company's SoIC-X packaging technology. The foundry says that usage of its SoIC-X enables the lowest impedance at the die-to-die interface and therefore the highest energy efficiency. The EIC itself is produced at a 65nm-class process technology.</p>

<p><a href="https://images.anandtech.com/doci/21373/TSMC-3D-Optical-Engine.png"><img alt="" src="https://images.anandtech.com/doci/21373/TSMC-3D-Optical-Engine.png"></a></p>

<p>TSMC's 1st Generation 3D Optical Engine (or COUPE) will be integrated into an OSFP pluggable device running at 1.6 Tbps. That's a transfer rate well ahead of current copper Ethernet standards – which top out at 800 Gbps – underscoring the immediate bandwidth advantage of optical interconnects for heavily-networked compute clusters, never mind the expected power savings.</p>

<p>Looking further ahead, the 2nd Generation of COUPE is designed to integrate into CoWoS packaging as co-packaged optics with a switch, allowing optical interconnections to be brought to the motherboard level. This version COUPE will support data transfer rates of up to 6.40 Tbps with reduced latency compared to the first version.</p>

<p>TSMC's third iteration of COUPE – COUPE running on a CoWoS interposer – is projected to improve on things one step further, increasing transfer rates to 12.8 Tbps while bringing optical connectivity even closer to the processor itself. At present, COUPE-on-CoWoS is in the pathfinding stage of development and TSMC does not have a target date set.</p>

<p>Ultimately, unlike many of its industry peers, TSMC has not participated in the silicon photonics market up until now, leaving this to players like GlobalFoundries. But with its 3D Optical Engine Strategy, the company will enter this important market as it looks to make up for lost time.</p>

<h3><strong>Related Reading</strong></h3>

<ul>
	<li><a href="https://www.anandtech.com/show/21369/tsmcs-16nm-technology-announced-for-late-2026-a16-with-super-power-rail-bspdn">TSMC's 1.6nm Technology Announced for Late 2026: A16 with "Super Power Rail" Backside Power</a></li>
	<li><a href="https://www.anandtech.com/show/21370/tsmc-2nm-update-n2-in-2025-n2p-loses-bspdn-nanoflex-optimizations">TSMC 2nm Update: N2 In 2025, N2P Loses Backside Power, and NanoFlex Brings Optimal Cells</a></li>
	<li><a href="https://www.anandtech.com/show/21371/tsmc-preps-lower-cost-4nm-n4c-process-for-2025">TSMC Preps Cheaper 4nm N4C Process For 2025, Aiming For 8.5% Cost Reduction</a></li>
	<li><a href="https://www.anandtech.com/show/21372/tsmcs-system-on-wafer-platform-goes-3d-cow-sow">TSMC's System-on-Wafer Platform Goes 3D: CoW-SoW Stacks Up the Chips</a></li>
</ul>

        </div>
        
            
            
            
            
            


</div>

    



            </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[They thought they were joining an accelerator – instead they lost their startups (219 pts)]]></title>
            <link>https://techcrunch.com/2024/05/02/they-thought-they-were-joining-an-accelerator-instead-they-lost-their-startups/</link>
            <guid>40241525</guid>
            <pubDate>Thu, 02 May 2024 21:24:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2024/05/02/they-thought-they-were-joining-an-accelerator-instead-they-lost-their-startups/">https://techcrunch.com/2024/05/02/they-thought-they-were-joining-an-accelerator-instead-they-lost-their-startups/</a>, See on <a href="https://news.ycombinator.com/item?id=40241525">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p id="speakable-summary"><span>Lacey Hunter thought</span> all was well as she put her startup through the three-month <a href="https://techcrunch.com/2023/05/19/this-austin-accelerator-made-big-claims-employees-and-customers-say-it-didnt-deliver/">Newchip accelerator</a>. Then the organization filed for bankruptcy in May 2023. Things went from bad to worse later that year when she discovered warrants of her company — rights to buy an ownership stake — had become part of the proceedings, which ultimately forced her to shut down her company.</p>
<p>In 2022, Hunter started TechAid, an AI smart-matching tool for humanitarian aid, and was just beginning the accelerator’s curriculum when Newchip filed for bankruptcy.</p>
<p>“I made a few friends, but functionally, got nothing from Newchip,” Hunter said. “I was shooting to have the curriculum done by August, but in May, the website went down.”</p>
<p>The now-defunct Austin accelerator had <a href="https://techcrunch.com/2023/05/19/this-austin-accelerator-made-big-claims-employees-and-customers-say-it-didnt-deliver/">filed for bankruptcy</a> amid employee and customer discontent. The court has since ordered the company to auction off the warrants it held in more than 1,000 of the startups that went through the accelerator program.</p>
<p>Normally, private companies like startups have control over which investors are allowed to buy shares and the prices they pay. But the bankruptcy court, which works to restore creditors rather than equity holders, isn’t allowing Newchip’s startups to exert that kind of control. Instead, the auctions are ongoing, with the first tranche already sold and upcoming tranches expected to be sold this spring and summer.</p>
<p>Founders are outraged — including some, like Hunter, who have actually lost their companies as a result.</p>
<p>TechAid fought the sale of the warrants prior to closing the company. Hunter tried to buy them back herself from Newchip, but the organization’s lawyers declined her offer, she told TechCrunch. She had lined up a grant from a bank to help fund her offer, but it ultimately told her no because it was too risky for them to be involved with an unknown warrant holder on her cap table. So Hunter felt she had no choice but to shut TechAid.</p>
<p>“There was no path,” Hunter said. “I knew I was not going to be able to raise money. I mean, I couldn’t even get a no-strings-attached grant. I totally get that, but it still sucks.”</p>
<h2>Newchip’s fall from accelerator grace</h2>
<p>Newchip started out as an aggregator of top deals from “various equity-based crowdfunding platforms,” according to <a href="https://www.siliconhillsnews.com/2023/05/13/newchip-enters-into-bankruptcy-liquidation/" target="_blank" rel="noopener">Silicon Hills News</a>, and later evolved into an accelerator that promised to help startups grow their companies and meet investors — for a hefty fee.</p>
<p>It charged startups between a few thousand dollars and $18,000 to $20,000 for its training programs, founders said. Startups also granted Newchip the right to buy $250,000 worth of shares in the company at a later date, but at their current valuation — this type of deal is also known as a warrant.</p>
<p>Newchip founder and CEO Andrew Ryan previously faced harsh criticism about his leadership style, including allegations that he could be “abusive” and threatening to employees, according to eight former employees who walked out. (Ryan acknowledged to TechCrunch last year that <a href="https://techcrunch.com/2023/05/19/this-austin-accelerator-made-big-claims-employees-and-customers-say-it-didnt-deliver/">his leadership style was based on “a military mindset.”</a>) One example involved a meeting of about 15 employees in sales, operations and marketing. Ryan had asked the leaders of each department to read a book on how to help college volunteers be more passionate about volunteering, recalled one person who attended the meeting. Ryan asked two of the company’s leaders to lead the group in a discussion of the book. But many were confused by it and didn’t see how it applied to Newchip’s business.</p>
<p>“They were struggling with it. Andrew kept jumping in and interrupting them, and directly challenging them.” And finally, recalled the source, Ryan said, “This was a test for individuals that I’ve asked to do this today. I was going to fire one of you, based on whoever did the worst job.”</p>
<p>He then singled out one person, told the room the person was fired, and, this person recalled, Ryan then said, “I do stuff sometimes to see who’s loyal and to see who is going to do what I tell them to do. This was a test and you failed. You’re out.’”</p>
<p>After seeing Ryan fire this guy in front of the whole room, “I literally watched all of his direct reports sitting there saying to themselves, ‘I will never trust this man again,’” the source said.</p>
<p>Ryan contends that the person who was fired during that meeting had behaved aggressively after being singled out. Ryan also claims that the individual had come unprepared to lead the meeting, which Ryan viewed as an “act of overt insubordination,” telling TechCrunch: “While conducting the termination publicly in that meeting may seem harsh, it was intended to reinforce the gravity of the situation and ensure all managers understood that we took these training sessions and their responsibilities as leaders seriously.”</p>
<div id="attachment_2546240"><p><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-2546240" src="https://techcrunch.com/wp-content/uploads/2023/05/MOSHED-2023-5-19-8-45-41.jpg" alt="Newchip logo glitched" width="2000" height="1000" srcset="https://techcrunch.com/wp-content/uploads/2023/05/MOSHED-2023-5-19-8-45-41.jpg 2000w, https://techcrunch.com/wp-content/uploads/2023/05/MOSHED-2023-5-19-8-45-41.jpg?resize=150,75 150w, https://techcrunch.com/wp-content/uploads/2023/05/MOSHED-2023-5-19-8-45-41.jpg?resize=300,150 300w, https://techcrunch.com/wp-content/uploads/2023/05/MOSHED-2023-5-19-8-45-41.jpg?resize=768,384 768w, https://techcrunch.com/wp-content/uploads/2023/05/MOSHED-2023-5-19-8-45-41.jpg?resize=680,340 680w, https://techcrunch.com/wp-content/uploads/2023/05/MOSHED-2023-5-19-8-45-41.jpg?resize=1536,768 1536w, https://techcrunch.com/wp-content/uploads/2023/05/MOSHED-2023-5-19-8-45-41.jpg?resize=1200,600 1200w, https://techcrunch.com/wp-content/uploads/2023/05/MOSHED-2023-5-19-8-45-41.jpg?resize=50,25 50w" sizes="(max-width: 2000px) 100vw, 2000px"></p><p id="caption-attachment-2546240"><strong>Image Credits:</strong> TechCrunch</p></div>
<p>When Newchip (which also did business under the name Astralabs) initially filed for bankruptcy in March 2023, it was a Chapter 11 debt reorg. It then went into Chapter 7 — dissolution and liquidation —&nbsp; two months later.</p>
<p>Its Chapter 11 <a href="https://www.rkc.llc/post/astralabsinc" target="_blank" rel="noopener">filing</a> revealed that it had $1.7 million in total assets and $4.8 million in total liabilities. But the value of the warrants was apparently not taken into account at that time, a source familiar with internal happenings said. Those warrants were estimated to be valued at an eye-popping just under $500 million by Austin-based VC fund and early Newchip investor Sputnik ATX, according to a document viewed by TechCrunch.</p>
<div>
		<blockquote>
			“I feel so much stress and embarrassment. I’m a struggling founder and don’t have the money to pay for a lawyer. Here was this accelerator supposed to help founders, and instead it is imposing stress on young founders.”					</blockquote>
	</div>
	
<p>Management had not been keeping up with the warrants to the point where it had missed that some companies had exited or raised money, losing out on the potential upside, noted Kerstin Hadzik, a consultant who was brought in to serve as interim CFO a few weeks after the initial bankruptcy filing.</p>
<p>How much did Newchip potentially lose? Sputnik ATX said it identified $54 million in warrant value from companies that had liquidity events “that should have been reported to Newchip but were not,” according to documents viewed by TechCrunch.</p>
<p>In Hadzik’s view, Newchip might have also been saved from going into Chapter 7 if Ryan had been willing to step down as CEO and had presented the warrants as assets when initially filing for Chapter 11.</p>
<p>The judge repeatedly asked Ryan if he would voluntarily step down and let someone else, such as a chief restructuring officer, run the company. Ryan repeatedly dodged the question, expressing doubt that anyone could do so successfully. Ryan also noted that employees had requested “a new CEO” and later claimed that he “was going to step aside … but the shareholders and investors, as part of them putting capital in, preferred that I stay here to make sure that we have the capital … to continue driving the business.”</p>
<p>Ryan also admitted that he was the company’s “major owner and shareholder” and that he had just “terminated all the board” the week before, just after having filed for bankruptcy, according to court documents viewed by TechCrunch.</p>
<p>“The judge was offering like a lifeline,” and Ryan “just said no,” Hadzik recalled.</p>
<p>In a Zoom interview with TechCrunch back when we first reported on the bankruptcy, and <a href="https://www.linkedin.com/posts/andrewryanatx_startupstories-accelerator-startups-activity-7063597921149087744-8awa?utm_source=share&amp;utm_medium=member_desktop" target="_blank" rel="noopener">in two </a><a href="https://www.linkedin.com/posts/andrewryanatx_startupstories-accelerator-startups-activity-7062789888596717568-c57v?utm_source=share&amp;utm_medium=member_desktop" target="_blank" rel="noopener">LinkedIn posts</a> in 2023, Ryan said that he accepted “full responsibility for the events at Newchip.”</p>
<p>Ryan later alleged that there was an attempted coup on the part of an investor but sources say that Ryan had actually asked early investor Joe Merrill to serve as CEO before changing his mind and resuming the role himself. Merrill, who was an early investor in Newchip under its previous model and also co-founder of Sputnik ATX, declined to comment beyond noting that he believed the attempted sale of the warrants was a valid move.</p>
<h2>Founders fight for their companies</h2>
<p>One founder, who asked to remain anonymous, told TechCrunch that Newchip had approached her on LinkedIn and told her if she got approved to join, she would get introductions to investors. So she paid a $7,500 deposit and was all set to join Newchip when a founder friend told her to “never pay for introductions.”</p>
<p>She decided to hear out Ryan. What convinced her to ask for her money back was that Ryan “blew off our meeting.” He reached out later, but she had already emailed Newchip asking for her deposit back on the basis that she had not started yet.</p>
<p>The founder got her money back, but Newchip didn’t void her contract, so she is now part of the bankruptcy lawsuit. That’s when she learned that someone could buy the warrants of her company for pennies on the dollar, and “it could screw your valuation going forward,” she said.</p>
<p>“I feel so much stress and embarrassment,” she told TechCrunch. “I’m a struggling founder and don’t have the money to pay for a lawyer. Here was this accelerator supposed to help founders, and instead it is imposing stress on young founders.”</p>
<p>There was a period of time when founders could object to their warrants being sold, according to Chad Harding, managing partner at Peak Technology Partners, the investment banking firm tasked by the court to sell the warrants.</p>
<p>The deadline for those in the first tranche to object to these sales was January 15, he told TechCrunch. Founders from all over the world, including Australia and Finland, filed objections, according to court documents.</p>
<p>“We were in the process of obtaining a refund from Newchip when Newchip went bust,” wrote Veronica Hey, CEO and founder of Australian startup Ok Away. “The contract is therefore null and void and the warrant attached to it is not applicable. None of this will stand up in an Australian court. If you continue to pursue in ‘selling’ this warrant you are selling something that does not exist and there will be repercussions.”</p>

<p>But startups’ objections were made in vain when the court overruled them. A bankruptcy court’s goal is to oversee the selling of assets to settle debts. If there is money left over, it’s paid to shareholders. Ryan is the majority shareholder.</p>
<p>So the warrants are being sold in three tranches. The first involved 133 companies, including for startups such as Cleanster.com, bitewell, Agshift and Firehawk Aerospace. Combined, those 133 startups had raised over $340 million in funding, according to documents shared by the sales agent with potential investors and viewed by TechCrunch.</p>
<p>Ultimately, the sales agent ended up selling 28 warrants in just four companies from the first tranche for a total of about $58,000, presumably at a discount. Successful bidders included Bitewell and ClearForce — startups that bought back their own warrants in advance for $5,000 each, according to an agreement with the trustee — as well as Palm Ventures and Angel Deal Syndicate. The latter purchased the bulk of the warrants, spending $43,000 on warrants in 24 companies, according to court documents viewed by TechCrunch.</p>
<p>The second tranche will likely be sold this summer and will include over 1,400 warrants for sale, according to Harding. The bid deadline will likely be late July, Harding said.</p>
<p>Founders of those startups included in the second tranche will also have the opportunity to object with a proposed deadline of May 31.</p>
<p>Ryan maintains that extensive efforts “have been made to notify stakeholders well in advance.”</p>
<p>“This has afforded ample time for interested parties to access information and documents, raise any objections or issues, and prepare for participation in the sale,” Ryan told TechCrunch.</p>
<h2>When dreams become nightmares</h2>
<p>Like TechAid’s Hunter, Garrett Temple blames the loss of his company on Newchip’s demise. He, similar to Hunter, also participated in Newchip’s accelerator program from January until May 2023. His startup, Novogiene, was a medical tech company focused on epidemic prevention.</p>
<p>Temple put around $7,500 on his credit cards to be part of the program and said that he never spoke with investors. His main reason for doing Newchip was to get investors for a $500,000 round, in part to pay for a small production run of his device so he could send it to universities and medical schools for pilot testing.</p>
<p>The meetings with investors were supposed to happen after a demo day that was scheduled for the summer. But when Newchip shut down in May, that demo day, and hence those introductions, didn’t happen. Temple wasn’t able to keep going and ended up dissolving Novogiene in the summer of 2023. As such, his company no longer existed for warrants to be sold to potential investors.</p>
<p>Temple said he spoke with his bank about getting money back from the program since he used credit cards. The bank was at first successful in getting $5,000 returned. However, about a month later, Temple noticed that money was no longer in his account and believes Newchip protested the funds.</p>
<p>Though Temple has moved on, he still has some intellectual property for Novogiene and says he is hoping at some point to license the technology to someone else or perhaps at another time pick up where he left off.</p>
<p>“It was very sad to call it quits because getting the funding to make those units was the only hurdle before making serious progress,” Temple said. “If they connected me with investors like they said, I could have made my invention, gotten efficacy and would be shipping units right now. I really do believe that.”</p>
<p>Accelerator operators sell dreams. But that doesn’t always mean that the accelerator will come through. And sadly, the founders who buy into those dreams can be the ones who end up paying the price.</p>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Got an old Raspberry Pi spare? Try RISC OS. It is, something else (233 pts)]]></title>
            <link>https://www.theregister.com/2024/05/02/rool_530_is_here/</link>
            <guid>40240737</guid>
            <pubDate>Thu, 02 May 2024 19:55:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2024/05/02/rool_530_is_here/">https://www.theregister.com/2024/05/02/rool_530_is_here/</a>, See on <a href="https://news.ycombinator.com/item?id=40240737">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>The new version of RISC OS, the original native Arm OS, runs on eight or nine Arm-based platforms, including the Raspberry Pi Zero, 1, 2, 3 and 4 – and on that last two, this release supports wireless networking.</p>
<div><p><a href="https://regmedia.co.uk/2024/05/01/ro530-desktop.jpg" target="_blank"><img src="https://regmedia.co.uk/2024/05/01/ro530-desktop.jpg?x=648&amp;y=365&amp;infer_y=1" alt="RISC OS 5.30 comes with quite an assortment of applications, and plenty more are online." title="RISC OS 5.30 comes with quite an assortment of applications, and plenty more are online." height="365" width="648"></a></p><p>RISC OS 5.30 comes with quite an assortment of applications, and plenty more are online (click to enlarge)</p>
</div>
<p><a href="https://www.riscosopen.org/news/articles/2024/04/27/risc-os-5-30-now-available" rel="nofollow">RISC OS 5.30</a> is the latest release&nbsp;of Acorn's original native operating system for its Arm processors. Original, but not first: As Acornsoft project lead Paul Fellows <a href="https://www.theregister.com/2022/06/23/how_risc_os_happened/">told</a> the <em>Reg</em> in 2022, what was then called "Arthur" supplanted a far more ambitious project called ARX, which never shipped. ROS 5.30 is the first <a href="https://www.riscosopen.org/content/documents/stable-releases" rel="nofollow">stable release</a> from the RISC OS Open (aka ROOL) project since <a href="https://www.riscosopen.org/news/articles/2020/10/24/risc-os-5-28-now-available" rel="nofollow">version 5.28</a> in 2020. (If you have that, you can <a href="https://www.iconbar.com/articles/Upgrading_your_RISC_OS_system_to_5.30/index2067.html" rel="nofollow">upgrade in place</a>.)</p>
<p>RISC OS Open project leader Steve Revill, who we <a href="https://www.theregister.com/2023/01/17/retro_tech_week_rool/">interviewed</a> last year, told us:</p>

<p>Acorn's original, and very comprehensive, documentation has been updated for this release, too:</p>

<div><p><a href="https://regmedia.co.uk/2024/05/01/ro530-netsurf.jpg" target="_blank"><img src="https://regmedia.co.uk/2024/05/01/ro530-netsurf.jpg?x=648&amp;y=365&amp;infer_y=1" alt="It also includes a very basic web browser, but one without Javascript – so it's limited." title="It also includes a very basic web browser, but one without Javascript – so it's limited." height="365" width="648"></a></p><p>It also includes a very basic web browser, but one without Javascript – so it's limited (click to enlarge)</p>
</div>
<p>New owners RISC OS Developments <a href="https://www.theregister.com/2018/10/23/risc_os_open_source/">made RISC OS 5 open source</a> in 2018 and it's still in active development under RISC OS Open. That is no trivial project: Although by modern standards this desktop operating system is tiny, significant chunks of it were hand-coded in Arm assembly code – for 20th century hardware. Version 5.30 supports <a href="https://www.riscosopen.org/content/downloads/stable-release-status" rel="nofollow">seven</a> platforms: Post-1994 Acorn machines with the <a href="https://www.riscosopen.org/content/sales/risc-os-roms/iomd-rom-guide" rel="nofollow">IOMD chipset</a>, the Iyonix and Beagleboard hardware <a href="https://www.theregister.com/Print/2010/06/25/riscos_beagleboard/">we described</a> in 2010, and Elesar's <a href="https://www.riscository.com/2023/titanium-pc-and-keyboard-offer/" rel="nofollow">Titanium PC</a>, plus three Arm development boards (the <a href="https://labs.isee.biz/index.php/IGEPv5" rel="nofollow">IGEPv5</a>, the <a href="https://svtronics.com/portfolio/5432" rel="nofollow">OMAP 5432</a>, and the <a href="https://embedjournal.com/pandaboard/" rel="nofollow">Pandaboard</a>). And, of course, the Raspberry Pi, which is by some distance the cheapest member of the family. For now, RISC OS does not support the Raspberry Pi 5, but it does run on the Pi Zero, 1, 2, 3 and 4, and it's fast and responsive on all of them.</p>
<p>We found the new support for the Wi-Fi controllers&nbsp;in the Raspberry Pi 3 and 4 a little clunky – for instance, changes to the network configuration require a reboot. Even so, it's a lot better than nothing. First, you enable the SDIO WLAN interface; then, after&nbsp;a restart, a new Wi-Fi icon appears on the left of the icon bar, which allows you to connect to both 2.4 and 5GHz networks.</p>
<p>This is a fairly modernized and refurbished late-1980s single-user GUI-based OS, and that implies some limitations. It was first released the same year as OS/2 1.0, long before Apple System 7 or Windows 3.0. In fact, it'll remind you of Windows 3 on MS-DOS: it's a single-tasking text-mode OS, with networking, on top of which is a graphical desktop that does cooperative multitasking. RISC OS gives applications access to much of the memory map, and so if a program accidentally scribbles over the wrong parts of that address space, the whole computer can freeze up – which in testing our Pi 400 did several times.</p>
<p>But saying that, it's an admirably complete OS, in this vulture's opinion, with quite a rich portfolio&nbsp;of applications. RISC OS 5.30 comes with a selection of productivity apps, plus development tools, including a choice of editors, Python, Lua, and a C compiler – and of course with a 32-bit version of BBC BASIC V, a fully structured interpreter which also supports inline Arm assembly language.</p>

    

<p>This is, in a way, a mature OS with an ecosystem and an aftermarket. (Which, we feel we must explicitly spell out, means that quite a few of those third-party applications and drivers will cost you money.) There are emulators that will let you run 20th century Acorn apps that you can find online, but this isn't an <a href="https://www.theregister.com/2019/01/03/amiga_forever/">emulated</a> vintage environment like Amiga Forever. It's not meant for running games from thirty years ago. This is a native bare-metal OS, built on 1980s roots but updated for 21st century hardware. It's also not an experimental project with little practical use, like <a href="https://www.theregister.com/2022/11/29/redox_os_version_08/">Redox OS</a> or <a href="https://www.theregister.com/2023/10/17/serenity_os_turns_five/">Serenity OS</a>, interesting though those are.</p>

        


        

<p>The RISC OS GUI – called simply the <a href="http://www.riscos.com/support/developers/prm/wimp.html" rel="nofollow">WIMP</a> – will take some getting used to. It has no application menu bars at all, for example. You <em>middle</em> click&nbsp;on things to get at the relevant menu; this GUI <em>only</em> has context menus, nothing else. (What menu is <a href="https://www.theregister.com/2022/08/31/microsoft_windows_start_menu/">easier to hit</a> than whacking the mouse pointer up to the top of the screen? One where <em>you don't move the mouse at all!</em> The menu is always where your mouse already is.) And yes, there is an icon bar along the bottom where you can bring up menus and windows for running programs and other things; but when you want to do something in an app, you click the menu mouse button in the context of that application rather than look for a menu bar.</p>
<p>The idea of having a directory navigation right in the save dialog, so you can choose where to put the file, was <a href="https://www.theregister.com/2024/01/29/mac_at_40_real_significance/">a hack</a> invented for the original 128kB Macintosh, because it didn't have enough RAM to show a filer window alongside your app. RISC OS didn't need that: In 1987, it ran on a 32-bit RISC workstation with a meg of RAM, so its <em>Save</em> dialog just has an icon that you drag to the directory window you want.</p>

        

<p>Similarly, this is the OS whose GUI perhaps inspired NeXTstep's Dock, which in turn inspired the Windows 95 taskbar. RISC OS doesn't work like them, because it's often thought they got their ideas from RISC OS.</p>
<p>When you run a RISC OS application, all that happens is that it puts an icon in the icon bar. Middle-click that new icon for global options, or in most apps, just left-click it to open a new empty window. The right button doesn't go unused: it's called <em>Adjust</em> and it modifies what a left-click would do. So, for example, left-click a scrollbar to move in that direction, but right-click&nbsp;it to move the other direction. Left-click an "OK" button to save your settings, but right-click it to <em>Apply</em> them without closing. It's odd, but in its way, it's <em>more</em> elegant than any other mouse-driven desktop.</p>
<p>As you can no doubt tell, the <em>Reg</em> FOSS desk is very fond of RISC OS. It was the first GUI we got to know, on our Archimedes A310 – back when Apple's <a href="https://lowendmac.com/2014/the-joy-of-six-apples-fast-svelte-reliable-and-still-useful-system-6/" rel="nofollow">System 6</a> was new. That ran best on the <a href="https://lowendmac.com/1989/mac-iici/" rel="nofollow">Mac IIci</a>, which was $6,269 – in 2024, that's $15¾K or £12½K. When&nbsp;this vulture was 20, our used Archie cost £800 (one kilobuck).</p>

        

<p>RISC OS is a fascinating glimpse into another world. It has almost no influence from the worlds of 32-bit Windows, or MacOS 7 or Mac OS X, or Linux – because they hadn't been invented yet. It has a superbly elegant graphical desktop, but it's almost totally unlike anything else you've ever seen.</p>
<p>Imagine if the classic 1980s Motorola 68000 computers – the Atari ST, the Amigas, or the Classic MacOS pre-PowerPC Macs – <em>and their CPUs</em> had kept on developing and evolving into the present day, completely separately from modern world of 64-bit chips and both FOSS and proprietary OSes. That's what RISC OS is: A time-traveler from the 1980s, alive and well, modernized and updated, but almost completely free of any influence from the rest of the 32-bit World Wide Web era. You <em>will</em> find it very disorienting, especially if all you know is post-1990s OSes, but that's part of the fun. Almost everything you could want – web browsers, email, office-type apps, games, dev tools – it's all there, and enough to get you started is here, free and open source.</p>
<p>The 2024 release of RISC OS runs fine on a £12 ($15) Raspberry Pi Zero – and the same SD card will boot any model up to the Pi 4 or 400. (But not, for now, the new, 64-bit-only Pi 5.) If you don't have one of those, but have an old Pi 1, 2 or 3 lying in a drawer somewhere, dusty and neglected, dig it out and put RISC OS onto an SD card – even a 2GB card will do – and give it a try. ®</p>
<h3>Bootnote</h3>
<p>ROOL is <strong>not</strong> the only flavor of RISC OS, and the machines listed above aren't the only modern RISC OS hardware in the world – they just happen to be the ones that the RISC OS Open project currently supports. There are some other devices that aren't included in version 5.30 right now, because there are too many outstanding bugs. Some of these have their own separate ports of RISC OS available. This includes the <a href="http://www.riscoscomputers.co.uk/Pinebok.shtml" rel="nofollow">PineBook</a> and <a href="https://www.riscoscomputers.co.uk/PinebokPro.shtml" rel="nofollow">PineBook Pro</a> laptops, and the <a href="https://wiki.pine64.org/wiki/PINE_A64" rel="nofollow">PINE A64 board</a>.</p>
<p>In addition, there are two other noteworthy editions.</p>
<p>There's a distribution specifically aimed at the Raspberry Pi, called <a href="https://www.riscosdev.com/direct/" rel="nofollow">RISC OS Direct</a>, also from RISC OS Developments. We talked to Andrew Rawnsley of RISC OS Developments, who told us:</p>

<p>There's also a separately-maintained 26-bit <a href="http://www.riscos.com/" rel="nofollow">branch of RISC OS</a> for original Acorn hardware, although these days most users run it on x86 PCs or Macs on a commercial emulator called <a href="http://www.virtualacorn.co.uk/" rel="nofollow">Virtual Acorn</a>.</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Building a rocket engine from scratch (294 pts)]]></title>
            <link>https://blog.ablspacesystems.com/p/building-e2</link>
            <guid>40240724</guid>
            <pubDate>Thu, 02 May 2024 19:54:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.ablspacesystems.com/p/building-e2">https://blog.ablspacesystems.com/p/building-e2</a>, See on <a href="https://news.ycombinator.com/item?id=40240724">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><div id="youtube2-vNh-o_s-tS0" data-attrs="{&quot;videoId&quot;:&quot;vNh-o_s-tS0&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/vNh-o_s-tS0?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p>The E2 Engine is a simple, robust, resilient machine. It starts up. It burns smooth. It shuts down. It’s tolerant to a variety of startup sequences and inlet conditions. Recently, a qualification E2 engine achieved a 4x life on total duration and starts. After 28 starts and 1300 seconds of run time, this fleet leader shows no signs of performance degradation. E2 wants to run, and it wants to run for a long time.&nbsp;&nbsp;</p><p>It wasn’t always like this though; engine development is unforgiving. Thousands of decisions go into designing an engine, into architecting its sequences, and into building its test stands. When you go to start it up, they all need to be right. Otherwise, you’re likely to be exercising the test stand’s fire suppression system.&nbsp;&nbsp;</p><p>I started the ABL engine program from scratch. Over the years, we have burned through hot walls, hard started chambers, and fine-tuned our turbomachinery. Along the way, we put together an excellent team of engineers and technicians. We built test stands and then we ran those test stands hard. We accumulated hours and hours of hotfire time across fifty different engines. </p><p>We worked relentlessly to create a flight-worthy engine system and went from nothing to having ten flight-worthy engines tested and installed on a rocket in under four years. I’m excited to talk through the path we took to get there. &nbsp;</p><figure data-drag-handle="" data-component-name="ImageGallery"><div><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa6a58ec4-258a-4af8-a635-f5e455f1fa63_2000x3000.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa6a58ec4-258a-4af8-a635-f5e455f1fa63_2000x3000.jpeg 720w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa6a58ec4-258a-4af8-a635-f5e455f1fa63_2000x3000.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa6a58ec4-258a-4af8-a635-f5e455f1fa63_2000x3000.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa6a58ec4-258a-4af8-a635-f5e455f1fa63_2000x3000.jpeg 720w" width="720"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddef93e5-8388-4c86-aa3d-5f22eccfa810_1365x2048.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddef93e5-8388-4c86-aa3d-5f22eccfa810_1365x2048.jpeg 720w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddef93e5-8388-4c86-aa3d-5f22eccfa810_1365x2048.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddef93e5-8388-4c86-aa3d-5f22eccfa810_1365x2048.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fddef93e5-8388-4c86-aa3d-5f22eccfa810_1365x2048.jpeg 720w" width="720"></picture></div><figcaption>Engines on Stages</figcaption></div></figure><p>You don’t get to a simple, robust, resilient engine by accident. The E2 engine runs on Jet-A and Liquid Oxygen, the most commonly available propellants in the world. It operates on the robust Gas Generator Cycle, and is powered by a single-shaft turbopump. The RS1 rocket uses E2 in three variants. Stage 2 uses the E2 Vacuum engine. Stage 1 uses E2 Sea Level Radial and Center. Center is a tightly-packaged double chamber variant of Radial mounted at the center of RS1’s aft end. Each generating over 16,000 lbf of thrust in vacuum, these engines are designed, manufactured, and tested in-house at ABL.&nbsp;</p><p>You might call me an unlikely candidate to lead an engine program from scratch, but I was hired by ABL in 2018 to do just that. My background was in commercial aircraft interiors, web development, semiconductor fab fluid components, and SpaceX Falcon 9 hydraulic systems. Rather than direct propulsion experience, I leaned on lifelong curiosity, mechanical intuition, and engineering practical solutions to a wide range of problems.&nbsp;&nbsp;</p><p>In college I pursued the air and ground-based mechanical and aerospace engineering coursework, shunning classes on rocket engines and orbital mechanics. It wasn’t an exciting time for spaceflight. The Space Shuttle was heading towards retirement, and the remaining launch vehicles were primarily Russian and American rockets from the 1960s. Unless you were really paying attention, and I wasn’t, you knew nothing of the SpaceX Falcon 1 launches that were moving incrementally closer to orbit.&nbsp;&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg" width="960" height="1440" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1440,&quot;width&quot;:960,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:982762,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F12958144-dde8-4cca-93e5-500fda9ff1bd_960x1440.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>ABL’s E2 Engine Radial Variant</figcaption></figure></div><p>In 2015 SpaceX’s repeated attempts to land boosters finally did catch my attention, and I joined the Falcon 9 stage systems team alongside ABL founder Harry O’Hanley. I learned a lot about reusability and what it takes to land rockets on barges and on land. Unfortunately, I didn’t learn as much about engines. I was obviously aware of them and how they worked but didn’t spend much time in or around them. I recall a coworker talking about an engine performance-related question they had asked an interviewee, where they scoffed at the inadequate answer they received, and which I myself would not have been able to do better than.&nbsp;</p><p>All that is to say, I joined ABL as a blank slate. This meant two things: 1, I had to do a lot of research to figure out where to start. 2, I did not have any predispositions about designing an engine that could hold me back. I was a team of one and I hit the textbooks, NASA monographs, and research papers on rocket engines to start wrapping my head around the problem.&nbsp;&nbsp;&nbsp;</p><p><span>NASA monographs, describing in detail the design problems central to rocket engines and their components and their solutions engineered in the 1960s, are available to the world at nasa.gov. Reading through these, you end up with thousands of tidbits, ranging through rules of thumb, key ratios, materials that don’t work well in engines, materials that </span><em>usually</em><span> work well in engines, and so on. What they lack is a single best set of solutions for the specific type of engine you want to build, test, and operate. This is where the fun starts.&nbsp;&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png" width="1136" height="716" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:716,&quot;width&quot;:1136,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F408ff1ac-0fd7-44fd-85c1-39fb4352f0e0_1136x716.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Turbopumps Seal Test History Example from NASA Monograph (NASA-SP-8121)&nbsp;</figcaption></figure></div><p>Most rocket engine designs do not start with textbooks and monographs. They often have a starting point, whether it be a previous generation of engine within the same company, a legacy technology demonstrator that was crated up after completion awaiting a new owner, or key components or IP purchased from another entity.&nbsp;&nbsp;</p><p>At ABL we started from a true clean sheet. Some small components – seals, bearings, sensors – were purchased from vendors, but everything else was designed from scratch. And not only the engine itself, but the test infrastructure, the test software, and entire test sites we built from bare dirt. Since our trade space was completely open, we had to move quickly to make key early decisions to limit that space to avoid the paralysis that too many choices can induce. A few things seemed obvious when looking at industry examples and the high level understanding we had of engines and engine manufacturing technology.&nbsp;&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png" width="682" height="293.44213649851633" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:145,&quot;width&quot;:337,&quot;resizeWidth&quot;:682,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Shape&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="Shape" title="Shape" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d9ad1c-01c7-48d2-9e57-e5ec073d5e15_337x145.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Example of a Clean Sheet&nbsp;</figcaption></figure></div><p>First, engine cycle. All rocket engines combust propellants in a combustion chamber and accelerate the biproducts through a nozzle to generate thrust. The way the propellant gets to the combustion chamber is dictated by the type of engine cycle, each with its own advantages and disadvantages. These range from the pressure fed cycle, where the propellant tanks are held at a high pressure and propellant flows directly from them to the chamber, to the staged combustion cycle, where propellants flow through pumps and turbines and burn a bit of each along the way to self-power the pumps. We chose the gas generator cycle, which can provide moderate efficiency, and where each component can be tested and tuned on its own without requiring the others be present or even ready.&nbsp;&nbsp;</p><p>With the cycle chosen we split out the four key areas to work on: 1. The turbopump, which takes propellants stored in the rocket at low pressures and pumps them up to the high pressures required to feed the engine’s combustion chamber. 2. The main combustion chamber. 3. The main chamber injector, which mixes the propellants coming into the chamber just so to ensure they mix and burn steadily and efficiently. 4. The gas generator, a small combustion chamber that provides pressurized hot gas to power a turbine that powers the turbopump.&nbsp;&nbsp;</p><figure data-drag-handle="" data-component-name="ImageGallery"><div><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3df3f6d1-e843-455d-868c-61902610d0f8_5373x8056.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3df3f6d1-e843-455d-868c-61902610d0f8_5373x8056.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3df3f6d1-e843-455d-868c-61902610d0f8_5373x8056.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3df3f6d1-e843-455d-868c-61902610d0f8_5373x8056.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3df3f6d1-e843-455d-868c-61902610d0f8_5373x8056.jpeg 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbfbc535-69df-4cda-a9cd-c38d9de2b13e_2475x2475.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbfbc535-69df-4cda-a9cd-c38d9de2b13e_2475x2475.png 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbfbc535-69df-4cda-a9cd-c38d9de2b13e_2475x2475.png" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbfbc535-69df-4cda-a9cd-c38d9de2b13e_2475x2475.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbfbc535-69df-4cda-a9cd-c38d9de2b13e_2475x2475.png 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9df611b2-d6dd-41a9-8632-a825eef68477_3938x2813.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9df611b2-d6dd-41a9-8632-a825eef68477_3938x2813.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9df611b2-d6dd-41a9-8632-a825eef68477_3938x2813.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9df611b2-d6dd-41a9-8632-a825eef68477_3938x2813.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9df611b2-d6dd-41a9-8632-a825eef68477_3938x2813.jpeg 474w" width="474"></picture></div><figcaption>From Left to Right: Turbopump, Chamber + Injector, Gas Generator</figcaption></div></figure><p>Before getting into any fine details, I gathered equations from textbooks and monographs into an excel spreadsheet that worked sequentially through sizing the requirements for each component. I later learned that this is called a “power balance” or “1D code” in industry. Basically, if you want X thrust, you must flow Y rate of propellants, and you must set the main combustion chamber exit to Z diameter. Parts of it were as simple as this, but when I added in the governing equations for turbopump impeller sizing it became fairly complicated. Time to get into detailed design.&nbsp;&nbsp;</p><p>To divide up the work, I took the turbopump and main injector, and the other two engineers on the team took the main combustion chamber and gas generator.&nbsp;&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg" width="1456" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:5786668,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2e41fd1-cdbb-4193-9819-5a3a7644d028_8688x5792.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Early Production Turbopumps</figcaption></figure></div><p><span>I dug in on the turbopump, a frightening device spinning at about 50,000 RPM and operating with a complex system of fluid passages and bearings and impellers and turbines. A typical turbopump boosts propellants from around 50 psi to 2000 psi, while pushing many gallons </span><em>per second</em><span> into the combustion chamber. By contrast, a Formula 1 race car fuel pump also pumps up 1000s of psi of pressure, but flows less than one gallon per minute. If you look at the cross section of a typical turbopump (for example, the F1 turbopump from the Apollo missions), you’ll see the expected impellers and turbines but will quickly get lost in a sea of complex secondary features such as slingers, balance pistons, labyrinth seals, recirculation channels, multi-stage turbines, bearing coolant systems, and so on. And even for the impellers and turbines, a 2D cross section highly simplifies them, as their sweeping, spiraling blades are one of the most 3D, organic looking features in a rocket engine.&nbsp;&nbsp;</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png" width="1205" height="704" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:704,&quot;width&quot;:1205,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;BEARING \nSUPPORT \nPRIMARY FUEL \nSEAL DRAIN \n(2 PLACES LOCATED \n180 DEGREES APART) \nFUEL PUMP \nBALANCE \nCAVITY \nBALANCE CAVITY \nLUBE SEAL \nECOND -STAGE \nF•ÜEL \nINLET \nFUEL \nVOLUTE \nBALANCE \nCAVITY \nWEAR \n0 \n00 \nNUT, RING, \nTORQUE \nGEAR \nASSEMBLY \nTORQUE \nGEAR \nRETURN LINE \nTHRUST WASHER, \nLOCK &amp; NUT \n2 BEARmG \nSHrELD \nPRIMARY \nOXIDIZER \nSEAL DRAIN \nFIRST-STAGE WZZLE \nSECOND- STAGE NOZZLE \n(STA-mR SEGMENTS) \nHOT - GAS \nSECONDARY SEAL \nSPACER \nHOT -GAS \nPRIMARY SEAL \nBEARING \nRETAINER \nAND HEATER \nASSEMBLY \nBAFFLE \nOXIDIZER \nBAFFLE \nNO. 1 BEARING \nLUBE SEAL \nPISTON \nOXIDIZER IMPELLER \nOXIDIZER \nVOLUTE \nOXIDIZER \nDRILLED \nPASSAGE \nOXIDIZER INLET \noxm1ZER OUTLET \n(TYP 2 PLACES) \nc»anrzER \nINDUCER \nBOLT \nBOLT \nWASHER \n0 \no \nSLINGER \nWHEEL \nFIRST -STAGE \nWHEEL \nHOT-GAS \nDIAPHRAGM \nNO. 3 BEARING \nLUBE DRAIN \nHOT GAS MANINLD \nW. 3 BEARING \nFUEL INLET \nSEAL DRAIN \nFUEL INLET on. SEAL \nFUEL INLET SEAL \nO \nSHAFT \no \nLOCKW ASHER \nPLUG \nSPLINED SLEEVE \n2 BEARING \n1 BEARING \nOXIDIZER INTERMEDIATE \nSEAL \nSLINGER AND GASKET \nm'RGE \nOXIDIZER \nAND GASKET \nRmG AND SPACER \nWEAR-RING \nFUEL INDUCER \nFUEL IMPELLER \n—PRIMARY FUEL SEAL \nNO. 1 AND NO. 2 \nLUBE DRAIN \n(LOCATED 2 PLACES \n180 DEGREES APART) \n458800-C-IB &quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="BEARING 
SUPPORT 
PRIMARY FUEL 
SEAL DRAIN 
(2 PLACES LOCATED 
180 DEGREES APART) 
FUEL PUMP 
BALANCE 
CAVITY 
BALANCE CAVITY 
LUBE SEAL 
ECOND -STAGE 
F•ÜEL 
INLET 
FUEL 
VOLUTE 
BALANCE 
CAVITY 
WEAR 
0 
00 
NUT, RING, 
TORQUE 
GEAR 
ASSEMBLY 
TORQUE 
GEAR 
RETURN LINE 
THRUST WASHER, 
LOCK &amp; NUT 
2 BEARmG 
SHrELD 
PRIMARY 
OXIDIZER 
SEAL DRAIN 
FIRST-STAGE WZZLE 
SECOND- STAGE NOZZLE 
(STA-mR SEGMENTS) 
HOT - GAS 
SECONDARY SEAL 
SPACER 
HOT -GAS 
PRIMARY SEAL 
BEARING 
RETAINER 
AND HEATER 
ASSEMBLY 
BAFFLE 
OXIDIZER 
BAFFLE 
NO. 1 BEARING 
LUBE SEAL 
PISTON 
OXIDIZER IMPELLER 
OXIDIZER 
VOLUTE 
OXIDIZER 
DRILLED 
PASSAGE 
OXIDIZER INLET 
oxm1ZER OUTLET 
(TYP 2 PLACES) 
c»anrzER 
INDUCER 
BOLT 
BOLT 
WASHER 
0 
o 
SLINGER 
WHEEL 
FIRST -STAGE 
WHEEL 
HOT-GAS 
DIAPHRAGM 
NO. 3 BEARING 
LUBE DRAIN 
HOT GAS MANINLD 
W. 3 BEARING 
FUEL INLET 
SEAL DRAIN 
FUEL INLET on. SEAL 
FUEL INLET SEAL 
O 
SHAFT 
o 
LOCKW ASHER 
PLUG 
SPLINED SLEEVE 
2 BEARING 
1 BEARING 
OXIDIZER INTERMEDIATE 
SEAL 
SLINGER AND GASKET 
m'RGE 
OXIDIZER 
AND GASKET 
RmG AND SPACER 
WEAR-RING 
FUEL INDUCER 
FUEL IMPELLER 
—PRIMARY FUEL SEAL 
NO. 1 AND NO. 2 
LUBE DRAIN 
(LOCATED 2 PLACES 
180 DEGREES APART) 
458800-C-IB " title="BEARING 
SUPPORT 
PRIMARY FUEL 
SEAL DRAIN 
(2 PLACES LOCATED 
180 DEGREES APART) 
FUEL PUMP 
BALANCE 
CAVITY 
BALANCE CAVITY 
LUBE SEAL 
ECOND -STAGE 
F•ÜEL 
INLET 
FUEL 
VOLUTE 
BALANCE 
CAVITY 
WEAR 
0 
00 
NUT, RING, 
TORQUE 
GEAR 
ASSEMBLY 
TORQUE 
GEAR 
RETURN LINE 
THRUST WASHER, 
LOCK &amp; NUT 
2 BEARmG 
SHrELD 
PRIMARY 
OXIDIZER 
SEAL DRAIN 
FIRST-STAGE WZZLE 
SECOND- STAGE NOZZLE 
(STA-mR SEGMENTS) 
HOT - GAS 
SECONDARY SEAL 
SPACER 
HOT -GAS 
PRIMARY SEAL 
BEARING 
RETAINER 
AND HEATER 
ASSEMBLY 
BAFFLE 
OXIDIZER 
BAFFLE 
NO. 1 BEARING 
LUBE SEAL 
PISTON 
OXIDIZER IMPELLER 
OXIDIZER 
VOLUTE 
OXIDIZER 
DRILLED 
PASSAGE 
OXIDIZER INLET 
oxm1ZER OUTLET 
(TYP 2 PLACES) 
c»anrzER 
INDUCER 
BOLT 
BOLT 
WASHER 
0 
o 
SLINGER 
WHEEL 
FIRST -STAGE 
WHEEL 
HOT-GAS 
DIAPHRAGM 
NO. 3 BEARING 
LUBE DRAIN 
HOT GAS MANINLD 
W. 3 BEARING 
FUEL INLET 
SEAL DRAIN 
FUEL INLET on. SEAL 
FUEL INLET SEAL 
O 
SHAFT 
o 
LOCKW ASHER 
PLUG 
SPLINED SLEEVE 
2 BEARING 
1 BEARING 
OXIDIZER INTERMEDIATE 
SEAL 
SLINGER AND GASKET 
m'RGE 
OXIDIZER 
AND GASKET 
RmG AND SPACER 
WEAR-RING 
FUEL INDUCER 
FUEL IMPELLER 
—PRIMARY FUEL SEAL 
NO. 1 AND NO. 2 
LUBE DRAIN 
(LOCATED 2 PLACES 
180 DEGREES APART) 
458800-C-IB " srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F16a20162-f70b-4ce7-a74c-7a7460c0a2e1_1205x704.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>F1 Turbopump Cutaway (Rocketdyne R-3896-1A), Credit: NASA</figcaption></figure></div><p>I can’t go into the exact details of how our turbopump design shook out, but the general idea was to not add a feature until we were convinced it was needed. Keep it as simple as possible as long as possible. &nbsp;</p><p>The 1D excel code took impeller and turbine design as far as they could go on paper, spitting out speeds, inlet and outlet sizes and blade angles, and expected efficiencies. There is a big gap between the end of the equations and the gracefully shaped blades of final designs, which is spanned by specialized software.&nbsp;&nbsp;</p><p>While on the phone with an engineer who was demoing the software we ended up purchasing, I bluntly asked “if we have a set of inlet requirements and exit requirements for an impeller, why can’t the software just give us the best answer?” Using the software required a huge amount of tweaking of parameters and manually adjusting curves until things looked just so. He answered that you don’t know exactly how a design is going to perform until you do time-intensive computational fluid dynamics modelling, so you have to design and iterate based on your experience and intuition. Ultimately, impeller and turbine design is part equation, part rule of thumb, with a sprinkling of art. Wild, for something that I had previously perceived as a triumph of engineering.&nbsp;&nbsp;</p><p>I interspersed pump design and part procurement with work on the injector for our main chamber. Since I had significant valve design experience, we decided to go with a pintle architecture. Most engine heritage uses showerhead or impinging jet type injectors, where an array of 100s of small holes in the injector spray propellants in a way that they collide with each other and atomize into small particles that burn quickly and efficiently. These designs, however, require a network of complex passages within the injector, and precisely controlled injection hole diameters, angles, and placements. This adds up to an expensive, manufacturing-intensive process, and as far as we could tell from the resources available then, 3D printing was not an appropriate solution to make it simpler, as it could not provide the precise dimensions and surface finishes required. Pintles require none of this – they inject propellants in two “sheets,” one axial, one radial, that collide with each other to provide the atomization needed for good combustion and are designed and manufactured much more like valves than not. It also allowed us to simplify packaging and reducing the total number of parts we had to work with.&nbsp;&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg" width="1456" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:965395,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb81baab0-74a4-4827-9984-90c154c02a47_3000x2000.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>3D Printed Main Chambers</figcaption></figure></div><p>Main chamber design was another interesting exercise in theory meets reality. We narrowed our design trade space quickly by deciding we would 3D print our chamber and would do so using machines and materials that were well-distributed and understood – nothing cutting edge. This set the maximum size for our printed parts, and set our material as Inconel. Inconel is a nickel superalloy initially developed for use in jet engines. It is very strong, very heat tolerant, very weldable, and was readily available in 3D printers around the country. It is also difficult to machine and has poor thermal conductivity, two challenges we had to take on and live with. &nbsp;</p><p>The crux of rocket engine combustion chambers is that the combustion inside them reaches about 6,000°F (flirting with the surface of the sun at 10,000°F), and even the best metals get quite soft at 1,200°F and melt at 2,500°F. There are a few ways to make a chamber survive this, but the most common is to run a portion of the propellants through the walls of the chamber to cool it. This sets up an interesting thermal management problem. You have to make the inner wall of the chamber as thin as possible to ensure the cooling effects of the flowing propellant can penetrate it, but not so thin that it ruptures under pressure. You have to make cooling channels in the wall narrow so the propellant flows at high velocity and cools the wall more effectively, but not so narrow that they generate excessive backpressure in the system that requires a huge amount of effort from the turbopump to overcome. You have to let the propellant suck as much heat out of the wall as possible, but not so much that it boils or breaks down.&nbsp;&nbsp;</p><p>The combustion chamber engineer wrote a slick code that could optimize all of these parameters in a continuous sweep down the length of the combustion chamber, spitting out geometry that he could directly port over to 3D modeling software that would in turn feed the 3D printers. We made a few key assumptions and locked down a design so we could get into test and adjust, if needed. Five years later, we continue to be pleased with the outcome of this sizing. To this day we have not changed from that original chamber cooling solution. The design just works.</p><p>One of the most energizing moments during a product development cycle is when the parts you have been designing&nbsp; on a computer screen for months finally show up in person. There’s a general rule for when you first see your parts – they are either larger or smaller than you were picturing them, never exactly how you imagined. Most of our early parts were printed and machined by aerospace manufacturing shops from around the country. These shops are a special type, taking on high-value, low-quantity jobs, and delivering them rapidly to support the pace required by the industry. We had a handful of key partnerships and owe a lot to them. Seeing our early engine parts in person was awesome. First a small print of a chamber section to prove out thickness limits, then a GG, then chamber sections and injector parts. It was feeling very real.&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png" width="799" height="674" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/cafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:674,&quot;width&quot;:799,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:963016,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafa54a0-6ccd-4664-abb2-cc20d7ebf641_799x674.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The First Development Injector</figcaption></figure></div><p><span>An outlier was the impellers and turbine for our pump. I knew they would not be the kind of parts just any machine shop would take on, and dug around and found a few that specialized in making them. When I received quotes back, it was wake up time. The impellers and the turbine were </span><em>each </em><span>quoted at around $18k – more than a small car! Even worse, the lead time was four months. While the cost was high, the lead time is what was ultimately untenable. We were certain to have to go through a few revisions to these designs before they were ready to fly, and adding a four month cycle to each of those revisions would drag out the overall pump development time beyond what was reasonable for a startup trying to move quickly and prove itself.&nbsp;&nbsp;</span></p><p>It was time to verticalize. We leased our first 5-axis mill and hired a machinist. These parts were made from hard metals and had small intricate features. The machining wasn’t easy. I think we spent more than the outsourced quotes in broken end mills on the first set. But over time we got better, due to advances in our machining and advances in the design.&nbsp;&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png" width="1180" height="779" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:779,&quot;width&quot;:1180,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1614042,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1e385a77-c679-4c89-bc21-d1277252a154_1180x779.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Machining Our First Impeller</figcaption></figure></div><p>At one point, I received a well-deserved earful from our machinist about how tightly spaced the turbine blades were. The program was taking nearly a month to run and required tiny end mills that broke often. We performed a turbine blade count study to see if we could use fewer blades with more space between them. It turned out the performance impact of running fewer blades was minimal, so we cut the number down, allowing our machinist to use larger, less fragile tools. Machine time dropped to less than a day, which was a significant win for turbine cost and machine time. It was also a good lesson in thinking comprehensively about a design’s manufacturability (those passages between the blades looked so big on the computer screen!) in addition to its performance.&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg" width="1456" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2615812,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa3fe47c-ef44-4bea-a5fa-10103df66585_2458x1639.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>A Close Up of E2’s Turbine</figcaption></figure></div><p>We can now produce impellers and turbines in a matter of days and at a fraction of the cost. There’s an example of the benefit of this that we reference often in tours and when recruiting engineers to our propulsion team. At one point during early pump testing, we kept running into performance issues with our fuel impeller. It wasn’t grabbing the incoming flow effectively and was giving our engine unpredictable performance. While we could combat this and work with it on the test stand, we ultimately concluded that it wasn’t going to work for flight. From the point of making that conclusion, through redesigning the impeller, getting it into the machine shop, getting it built into a pump and balanced (a step in every pump build to ensure everything spins smoothly), and getting the pump back into test to prove out the design change, it took us 10 days. If we had not brought that capability in house, we would have been stuck with either a multi month delay or with transferring the impact of this performance issue into other rocket systems or into the performance of the rocket itself. Big win.&nbsp;&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg" width="1456" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:259705,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F28b1a098-30c0-4a48-b63c-5397b00c66b6_2000x1334.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Production turbines - what once took weeks, now takes hours</figcaption></figure></div><p>We’ve continued to verticalize where it has made sense. We now operate a handful of 3D printers in house, have numerous 5 axis mills and multi-axis lathes. Our turbopump rotors are balanced in house. Many of these processes or technologies seemed daunting when we first learned of them or saw them performed by another party. But once in house, you learn, you do it over and over, and it becomes routine. During my time at SpaceX we saw landing rockets go from insane to routine. The same has happened here at ABL, first for building engines and then for testing them.&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg" width="1456" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:473448,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1403eaf5-b5fc-4ae1-b2c6-5896e6c7cc92_2000x1334.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>ABL Machine Shop</figcaption></figure></div><p>Building an effective team is often more challenging than building a working engine. We’ve strived to stay as small as possible as long as possible, being very thoughtful about who we bring onboard and when. Part of ABL’s philosophy is to produce more than we consume. As we strive to do more with less, we’ve often found less enables us to do more.&nbsp;&nbsp;</p><p>We started the propulsion program in 2018 with two engineers (myself included). We were a team of five for the first two years of development - all the way through running our first fully integrated engine. Today, it’s a team of fifteen. We’ve made hires that worked and ones that didn’t. We’ve made new grad hires and experienced hires, from inside the industry and outside. We’ve found a few traits to be key indicators of success, which are influenced by our simple engine architecture that allows first principles to prevail:&nbsp; &nbsp;</p><ul><li><p>Engineers who don’t stay behind a desk all day, who love getting their hands on hardware, being in the field, helping with tests are almost always more effective than those who do not.&nbsp;&nbsp;</p></li><li><p>Where engineers bring experience, they don’t over-focus on it. They allow their experience to be a guide, a part of the puzzle, not the whole answer.&nbsp;&nbsp;</p></li><li><p>An engineer may own a few specific parts of an engine, of the rocket. They will be most successful if they have a comprehensive understanding and interest in how those parts fit into the bigger picture. How they effect the teams interfacing with them, the build, operation, and performance of the rocket.&nbsp;&nbsp;</p></li><li><p>The best engineers never sit on what they think is right, they quickly take action or they speak up regardless of org structure or seniority.&nbsp;&nbsp;</p></li><li><p>Overall, the best indicator of success is a strong foundation of mechanical and fluid dynamic intuition. From there, it’s easy to fill in the gaps.&nbsp;</p></li></ul><p>We expect a lot of each engineer and they all work incredibly hard. And because the team is small, we give each the opportunity to experience real ownership of a large part of the design, build, and test of rocket engines.&nbsp;</p><p>We started&nbsp; our first E2 test campaign in summer 2019, a just under a year after we started engine design. Our first test site was on a flat concrete pad at Spaceport America in New Mexico. There we set up our first test stand which took us through pressure-fed (no turbopump, yet) testing of first our GG and then our thrust chamber. In this test campaign we accomplished a few things and learned a few things. We deployed to an austere location, we ran our first combustors, we lit with TEA-TEB (the pyrophoric liquid that is used to start many rocket and jet engines), and we worked with cryogens. We learned that snap rings don’t work well inside of combustion chambers and we learned that pintles melted easily and weren’t the slam dunk we thought they would be.&nbsp;&nbsp;</p><p>In 2020 we deployed to site 1-56 at the Air Force Research Laboratory (AFRL) near Edwards Air Force Base, where we again set up our pressure fed test stand but also a development rocket tank for pump-fed testing. Having the opportunity to operate at this site significantly accelerated our development program. At AFRL we ran our first turbopump, and it pumped! We had some challenges. We melted turbines and we had power instabilities, but we learned and adapted. Changes were made to the test stand to make the engine more controllable, changes were made to the turbine exhaust to make it more stable, and changes were made to the turbopump to make it more efficient.&nbsp;&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png" width="1456" height="624" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:624,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd40c7073-f030-462e-ac20-6da0b5b9090c_1550x664.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Turbopump Testing at AFRL</figcaption></figure></div><p>In the time between the testing at Spaceport America and AFRL we designed and manufactured a new version of our injector that didn’t use a pintle. Since we had shown we could make a chamber that worked and a GG that worked we were no longer as concerned about other injector types, and took a leap on a manufacturing method that was much less arduous than the traditional method. It wasn’t that we didn’t think we could make the pintle work eventually – I’m confident we could have – it was that we knew this other type of injector was almost certain to work right away. And it did. And we have not changed it since.&nbsp;</p><p>One of the biggest accomplishments at AFRL was running a fully integrated engine, which we did on our Stage 2 development tank. We had a fully integrated engine, with a pump, GG, and TCA closing the loop and running under their own power. We were in the game.&nbsp;&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg" width="1456" height="1020" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1020,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:635731,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff263ad47-fb27-441e-89cd-9d415d51e75c_2000x1401.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Integrated Engine Testing on Stage 2 Tank</figcaption></figure></div><p>2021 was dedicated to building out a brand new test site in Mojave, CA and getting into testing there. As we did, we implemented a new round of upgrades to the turbopump and matured the design of everything around it on the rocket. At the end of 2021 we started the testing of engines for Flight 1, a campaign that looked dramatically different for us. We had multiple test stands, we were running many, many engines, and we were running them for full flight durations. All of a sudden our total engine run time was measured in thousands of seconds rather than tens of seconds. And they were working.</p><div id="youtube2-xxaIo4cgzCk" data-attrs="{&quot;videoId&quot;:&quot;xxaIo4cgzCk&quot;,&quot;startTime&quot;:&quot;3s&quot;,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/xxaIo4cgzCk?start=3s&amp;rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p>In 2022 we made thrust upgrades to the engine to give us more power. We also kicked off the build of a new engine test site, dedicated for production testing. We would soon have the ability to run engine development and production test campaigns entirely in parallel. In 2023 we repackaged the same engine components into a configuration that was more modular, making it even easier to build and test. More recently, we’ve optimized different key features of the engine, such as the TEA-TEB system to enhance reliability and long term performance. </p><figure data-drag-handle="" data-component-name="ImageGallery"><div><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbc0dc14-d67c-4d25-97a6-7043eccfbd86_5325x3550.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbc0dc14-d67c-4d25-97a6-7043eccfbd86_5325x3550.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbc0dc14-d67c-4d25-97a6-7043eccfbd86_5325x3550.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbc0dc14-d67c-4d25-97a6-7043eccfbd86_5325x3550.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbc0dc14-d67c-4d25-97a6-7043eccfbd86_5325x3550.jpeg 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fecb4cdda-d2b8-4602-bb00-f174e37d5c62_4191x2853.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fecb4cdda-d2b8-4602-bb00-f174e37d5c62_4191x2853.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fecb4cdda-d2b8-4602-bb00-f174e37d5c62_4191x2853.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fecb4cdda-d2b8-4602-bb00-f174e37d5c62_4191x2853.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fecb4cdda-d2b8-4602-bb00-f174e37d5c62_4191x2853.jpeg 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b0b171b-20d4-4a28-a1a9-452cdb9772a7_8688x5792.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b0b171b-20d4-4a28-a1a9-452cdb9772a7_8688x5792.png 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b0b171b-20d4-4a28-a1a9-452cdb9772a7_8688x5792.png" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b0b171b-20d4-4a28-a1a9-452cdb9772a7_8688x5792.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0b0b171b-20d4-4a28-a1a9-452cdb9772a7_8688x5792.png 474w" width="474"></picture></div><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73efabec-b585-4885-aa1c-5caa757c7776_3840x2160.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73efabec-b585-4885-aa1c-5caa757c7776_3840x2160.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73efabec-b585-4885-aa1c-5caa757c7776_3840x2160.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73efabec-b585-4885-aa1c-5caa757c7776_3840x2160.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73efabec-b585-4885-aa1c-5caa757c7776_3840x2160.jpeg 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35217d99-70c1-4db6-8841-e03827af96dc_5472x3648.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35217d99-70c1-4db6-8841-e03827af96dc_5472x3648.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35217d99-70c1-4db6-8841-e03827af96dc_5472x3648.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35217d99-70c1-4db6-8841-e03827af96dc_5472x3648.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F35217d99-70c1-4db6-8841-e03827af96dc_5472x3648.jpeg 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48c4d1f2-1083-4b0d-b0cf-119ca06d7dc5_5472x3648.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48c4d1f2-1083-4b0d-b0cf-119ca06d7dc5_5472x3648.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48c4d1f2-1083-4b0d-b0cf-119ca06d7dc5_5472x3648.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48c4d1f2-1083-4b0d-b0cf-119ca06d7dc5_5472x3648.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48c4d1f2-1083-4b0d-b0cf-119ca06d7dc5_5472x3648.jpeg 474w" width="474"></picture></div><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafb4904-10a1-4412-b589-d6250de8f5f0_5472x3648.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafb4904-10a1-4412-b589-d6250de8f5f0_5472x3648.jpeg 720w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafb4904-10a1-4412-b589-d6250de8f5f0_5472x3648.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafb4904-10a1-4412-b589-d6250de8f5f0_5472x3648.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcafb4904-10a1-4412-b589-d6250de8f5f0_5472x3648.jpeg 720w" width="720"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F938be8bd-6266-44c9-87c8-b59ec9339acc_5472x3648.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F938be8bd-6266-44c9-87c8-b59ec9339acc_5472x3648.jpeg 720w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F938be8bd-6266-44c9-87c8-b59ec9339acc_5472x3648.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F938be8bd-6266-44c9-87c8-b59ec9339acc_5472x3648.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F938be8bd-6266-44c9-87c8-b59ec9339acc_5472x3648.jpeg 720w" width="720"></picture></div><figcaption>Production and Qualification Engine Testing </figcaption></div></figure><p>We’ve built 50 individual engines and operated them on 6 different test stands across 3 sites. These units have racked up many hours of hotfire time and hundreds of starts. E2 iterative development is not complete, and it may never be. There will always be small improvements to manufacturing, performance, mass, or cost to make. </p><p>We’ve learned a ton and will continue to do so. Problems that seemed like existential crises at the moment look small in retrospect. You assess, you solve, you move on, you don’t make the same mistake again. We’ve had print powder in pump bearings, underperforming volutes, underperforming impellers, melting liners, melting turbines, melting manifolds, melting tubes, chugging pumps, unstable gas generators, countless leaking seals and hard starts. Each solved problem makes our engineers stronger, makes our engine stronger, makes our company stronger.&nbsp;</p><p>You can only learn and solve problems like these when you test. Our biggest misses have come from not continuing to test when we didn’t absolutely have to, and pushed uncovering issues until further down the line where they were more impactful. Just like when running up a hill in a race, don’t stop and rest when you get to the top, keep the pedal down and get over the crest.&nbsp;</p><p>Looking forward, we are continuing to build out our team with a blend of talented generalist engineers and propulsion engineers. It is awesome to see the assumptions and institutional knowledge we have built up over the last 6 years both leveraged and challenged. So far the results have been great, and I am excited to be a part of it.&nbsp;&nbsp;&nbsp;</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg" width="738" height="1154.8333333333333" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:845,&quot;width&quot;:540,&quot;resizeWidth&quot;:738,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F957518ac-bb8c-49bb-b692-fa882d796501_540x845.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>E2 Ignition Testing&nbsp;</figcaption></figure></div></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft bans U.S. police departments from using enterprise AI tool (243 pts)]]></title>
            <link>https://techcrunch.com/2024/05/02/microsoft-bans-u-s-police-departments-from-using-enterprise-ai-tool/</link>
            <guid>40240037</guid>
            <pubDate>Thu, 02 May 2024 18:51:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2024/05/02/microsoft-bans-u-s-police-departments-from-using-enterprise-ai-tool/">https://techcrunch.com/2024/05/02/microsoft-bans-u-s-police-departments-from-using-enterprise-ai-tool/</a>, See on <a href="https://news.ycombinator.com/item?id=40240037">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p id="speakable-summary">Microsoft has changed its <a href="https://learn.microsoft.com/en-us/legal/cognitive-services/openai/code-of-conduct">policy</a> to ban U.S. police departments from using generative AI for facial recognition through the <a href="https://techcrunch.com/tag/azure-openai-service/">Azure OpenAI Service</a>, the company’s fully managed, enterprise-focused wrapper around OpenAI technologies.</p>
<p>Language added Wednesday to the terms of service for Azure OpenAI Service prohibits integrations with Azure OpenAI Service from being used “by or for” police departments for facial recognition in the U.S., including integrations with OpenAI’s text- and speech-analyzing models.</p>
<p>A separate new bullet point covers “any law enforcement globally,” and explicitly bars the use of “real-time facial recognition technology” on mobile cameras, like body cameras and dashcams, to attempt to identify a person in “uncontrolled, in-the-wild” environments.</p>
<p>The changes in terms come a week after Axon, a maker of tech and weapons products for military and law enforcement, announced a <a href="https://www.forbes.com/sites/thomasbrewster/2024/04/23/axon-ai-police-reports-/#:~:text=Axon%20senior%20principal%20AI%20product,facts%20of%20what's%20being%20recorded.">new product</a> that leverages OpenAI’s <a href="https://techcrunch.com/tag/gpt-4/">GPT-4</a> generative text model to summarize audio from body cameras. Critics were quick to point out the potential pitfalls, like <a href="https://techcrunch.com/2023/09/04/are-language-models-doomed-to-always-hallucinate/">hallucinations</a> (even the best generative AI models today invent facts) and <a href="https://techcrunch.com/2019/08/14/racial-bias-observed-in-hate-speech-detection-algorithm-from-google/">racial biases</a> introduced from the training data (which is especially concerning given that people of color are <a href="https://www.washingtonpost.com/politics/2022/09/15/driving-while-black-racial-discrimination-traffic-tickets/">far more likely to be stopped by police</a> than their white peers).</p>
<p>It’s unclear whether Axon was using GPT-4 via Azure OpenAI Service, and, if so, whether the updated policy was in response to Axon’s product launch. OpenAI had <a href="https://www.nytimes.com/2023/07/18/technology/openai-chatgpt-facial-recognition.html">previously restricted</a> the use of its models for facial recognition through its APIs. We’ve reached out to Axon, Microsoft and OpenAI and will update this post if we hear back.</p>
<p>The new terms leave wiggle room for Microsoft.</p>
<p>The complete ban on Azure OpenAI Service usage pertains only to U.S.<em>,</em> not international, police. And it doesn’t cover facial recognition performed with <em>stationary</em> cameras in <em>controlled</em> environments, like a back office (although the terms prohibit any use of facial recognition by U.S. police).</p>
<p>That tracks with Microsoft’s and close partner OpenAI’s recent approach to AI-related law enforcement and defense contracts.</p>
<p>In January, reporting by Bloomberg <a href="https://www.bloomberg.com/news/articles/2024-01-16/openai-working-with-us-military-on-cybersecurity-tools-for-veterans?embedded-checkout=true">revealed</a> that OpenAI is working with the Pentagon on a number of projects including cybersecurity capabilities — a departure from the startup’s <a href="https://techcrunch.com/2024/01/12/openai-changes-policy-to-allow-military-applications/">earlier ban</a> on providing its AI to militaries. Elsewhere, Microsoft has pitched using OpenAI’s image generation tool, DALL-E, to help the Department of Defense (DoD) build software to execute military operations, <a href="https://theintercept.com/2024/04/10/microsoft-openai-dalle-ai-military-use/">per</a> The Intercept.</p>
<p>Azure OpenAI Service became available in Microsoft’s Azure Government product in February, adding additional compliance and management features geared toward government agencies including law enforcement. In a <a href="https://devblogs.microsoft.com/azuregov/azure-openai-service-now-available-in-azure-gov-cloud/">blog post</a>, Candice Ling, SVP of Microsoft’s government-focused division Microsoft Federal, pledged that Azure OpenAI Service would be “submitted for additional authorization” to the DoD for workloads supporting DoD missions.</p>
<p><em><strong>Update: </strong>After publication, Microsoft said its original change to the terms of service contained an error, and in fact the ban applies only to facial recognition in the U.S. It is not a blanket ban on police departments using the service.&nbsp;</em></p>

			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Making a 3D modeler in C in a week (535 pts)]]></title>
            <link>https://danielchasehooper.com/posts/shapeup/</link>
            <guid>40239164</guid>
            <pubDate>Thu, 02 May 2024 17:48:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://danielchasehooper.com/posts/shapeup/">https://danielchasehooper.com/posts/shapeup/</a>, See on <a href="https://news.ycombinator.com/item?id=40239164">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Last fall I participated in a week long programming event called the <a href="https://handmade.network/jam/2023" target="_blank" rel="noopener">Wheel Reinvention Jam</a>. The point of the Jam was to revisit existing software systems with fresh eyes. I ended up making a 3D modeler called “ShapeUp”. This post will make more sense if you watch the <a href="https://youtu.be/-Xb3Kk3HhIw" target="_blank" rel="noopener">video demo of ShapeUp</a> before reading more. You can <a href="https://danielchasehooper.com/projects/shapeup">try ShapeUp in your browser</a>.</p><p>This is what it looks like:</p><p><a href="https://danielchasehooper.com/posts/shapeup/mike.png" title="ShapeUp with a monster model"><img src="https://danielchasehooper.com/posts/shapeup/mike_hu8dfea9063e5ecc351e92b806a8a30330_158503_700x0_resize_box_3.png" srcset="https://danielchasehooper.com/posts/shapeup/mike_hu8dfea9063e5ecc351e92b806a8a30330_158503_1050x0_resize_box_3.png 3x, https://danielchasehooper.com/posts/shapeup/mike_hu8dfea9063e5ecc351e92b806a8a30330_158503_1050x0_resize_box_3.png 2x, https://danielchasehooper.com/posts/shapeup/mike_hu8dfea9063e5ecc351e92b806a8a30330_158503_700x0_resize_box_3.png 1x" alt="ShapeUp with a monster model"></a><br>Mike Wazowski modeled in ShapeUp</p><h2 id="a-3d-modeler">A 3D Modeler</h2><p>I hate how slow the typescript compiler is (this connects, trust me). The jam seemed like a good opportunity to implement a faster subset of Typescript to beat <code>tsc</code>. Starting with the <a href="https://esbuild.github.io/" target="_blank" rel="noopener">esbuild</a> or <a href="https://bun.sh/" target="_blank" rel="noopener">Bun</a> typescript parser made the project seem plausible. It dawned on me that success would look like one terminal command finishing faster than another. As far as demos go, not super compelling. I wanted a cool demo. So I pivoted to 3D.</p><p>The only reason a 3D project from scratch in a week seemed doable was because of a technique called <a href="https://youtu.be/-Xb3Kk3HhIw?si=g95rRsHRZlJYznN8&amp;t=58" target="_blank" rel="noopener">ray marched signed distance fields</a> (SDFs). A ray marched SDF scene with colors, soft shadows, and ambient occlusion can be implemented much faster than an equivalent triangle based renderer. The amazing <a href="https://twitter.com/iquilezles" target="_blank" rel="noopener">Inigo Quilez</a> uses SDFs to create <a href="https://www.youtube.com/watch?v=8--5LwHRhjk" target="_blank" rel="noopener">pixar-like characters</a> in one sitting. I had written SDF shaders before but they were rudimentary. Modeling by editing code felt unnatural to me. I wanted to edit the shapes with a mouse. This jam seemed like my chance to make that a reality. I named it ShapeUp.</p><p><a href="https://danielchasehooper.com/posts/shapeup/sdf.png" title="The signed distance field visualized"><img src="https://danielchasehooper.com/posts/shapeup/sdf_hu0bc9c124672beefeb4a0e3eb8a4f4b40_275943_700x0_resize_box_3.png" srcset="https://danielchasehooper.com/posts/shapeup/sdf_hu0bc9c124672beefeb4a0e3eb8a4f4b40_275943_1051x0_resize_box_3.png 3x, https://danielchasehooper.com/posts/shapeup/sdf_hu0bc9c124672beefeb4a0e3eb8a4f4b40_275943_1051x0_resize_box_3.png 2x, https://danielchasehooper.com/posts/shapeup/sdf_hu0bc9c124672beefeb4a0e3eb8a4f4b40_275943_700x0_resize_box_3.png 1x" alt="The signed distance field visualized">
</a>ShapeUp’s Signed Distance Field visualized</p><h2 id="in-c">In C</h2><p>I wrote ShapeUp in C, and used <a href="https://www.raylib.com/" target="_blank" rel="noopener">raylib</a> to create the OpenGL window. Raylib turned out to be one of those libraries that gets you going quickly, but slows you down in the long run. More about that later.</p><p>Some view C as a language so simple and raw that you’ll spend all your time working around the language’s lack of built in data structures, and fixing pointer bugs. The truth is that C’s simplicity is a strength. It compiles quickly. Its syntax doesn’t hide complex operations. It’s simple enough that I don’t have to constantly look things up. And I can easily compile it to both native and web assembly. While C has its share of quirks, I avoid them by habits developed over 22 years of use.</p><p>My “day job” project is 177,000 lines of C and Objective-C. By comparison, ShapeUp’s small single C file is trivial. Even so, I think it’s interesting to look at how it uses data. Models are made up of Shapes:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span></code></pre></td><td><pre tabindex="0"><code data-lang="c"><span><span><span>typedef</span> <span>struct</span> <span>{</span>
</span></span><span><span>    <span>Vector3</span> <span>pos</span><span>;</span>
</span></span><span><span>    <span>Vector3</span> <span>size</span><span>;</span>
</span></span><span><span>    <span>Vector3</span> <span>angle</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>corner_radius</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>blob_amount</span><span>;</span>
</span></span><span><span>    <span>struct</span> <span>{</span>
</span></span><span><span>        <span>uint8_t</span> <span>r</span><span>,</span><span>g</span><span>,</span><span>b</span><span>;</span>
</span></span><span><span>    <span>}</span> <span>color</span><span>;</span>
</span></span><span><span>    <span>struct</span> <span>{</span>
</span></span><span><span>        <span>bool</span> <span>x</span><span>,</span><span>y</span><span>,</span><span>z</span><span>;</span>
</span></span><span><span>    <span>}</span> <span>mirror</span><span>;</span>
</span></span><span><span>    <span>bool</span> <span>subtract</span><span>;</span>
</span></span><span><span><span>}</span> <span>Shape</span><span>;</span>
</span></span></code></pre></td></tr></tbody></table></div><p>The Shapes are kept in a statically allocated array:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span><span>2
</span><span>3
</span><span>4
</span></code></pre></td><td><pre tabindex="0"><code data-lang="c"><span><span><span>#define MAX_SHAPE_COUNT 100
</span></span></span><span><span><span></span><span>Shape</span> <span>shapes</span><span>[</span><span>MAX_SHAPE_COUNT</span><span>];</span>
</span></span><span><span><span>int</span> <span>shape_count</span><span>;</span>
</span></span><span><span><span>int</span> <span>selected_shape</span> <span>=</span> <span>-</span><span>1</span><span>;</span>
</span></span></code></pre></td></tr></tbody></table></div><p>Can’t fail to allocate, can’t be leaked, no fluff. Lovely. The 100 shape limit wasn’t limiting in practice. With very little time to optimize the renderer, the framerate would drop before you even got to 100 shapes. If there had been time, I would have <a href="https://youtu.be/u9KNtnCZDMI?si=8QTGMnqVV8TnEPf9&amp;t=937" target="_blank" rel="noopener">broken the model into little bricks</a> and then raymarched within each brick.</p><p>For dynamic memory, ShapeUp calls malloc in only 3 places:</p><ul><li>Saving (allocates a buffer big enough to hold the whole document)</li><li>.OBJ export (again, allocates a buffer large enough to hold all vertices)</li><li>GLSL shader generation (buffer for shader source)</li></ul><p>In all cases there is a single free at the end of the function. Again, this is all trivial - I mention it mostly as an existence proof that memory in C can be trivial. You could certainly make it harder on yourself by malloc-ing each <code>Shape</code> individually and storing those pointers in a dynamic array. Using a language like C#, Javascript, or Python would force that allocation structure. I appreciate that C gives me control over memory layout.</p><p>The UI is implemented as an <a href="https://www.youtube.com/watch?v=Z1qyvQsjK5Y" target="_blank" rel="noopener">immediate mode user interface</a> (IMGUI). I love this approach to UI. It’s very easy to debug and you use a real programming language to position elements (unlike CSS, constraints, or SwiftUI). Like most IMGUIs, I used an enum to keep track of what element had focus, or what action the mouse was making:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span> 1
</span><span> 2
</span><span> 3
</span><span> 4
</span><span> 5
</span><span> 6
</span><span> 7
</span><span> 8
</span><span> 9
</span><span>10
</span><span>11
</span><span>12
</span><span>13
</span><span>14
</span><span>15
</span><span>16
</span><span>17
</span><span>18
</span><span>19
</span><span>20
</span><span>21
</span><span>22
</span><span>23
</span><span>24
</span></code></pre></td><td><pre tabindex="0"><code data-lang="c"><span><span><span>typedef</span> <span>enum</span> <span>{</span>
</span></span><span><span>    <span>CONTROL_NONE</span><span>,</span>
</span></span><span><span>    <span>CONTROL_POS_X</span><span>,</span>
</span></span><span><span>    <span>CONTROL_POS_Y</span><span>,</span>
</span></span><span><span>    <span>CONTROL_POS_Z</span><span>,</span>
</span></span><span><span>    <span>CONTROL_SCALE_X</span><span>,</span>
</span></span><span><span>    <span>CONTROL_SCALE_Y</span><span>,</span>
</span></span><span><span>    <span>CONTROL_SCALE_Z</span><span>,</span>
</span></span><span><span>    <span>CONTROL_ANGLE_X</span><span>,</span>
</span></span><span><span>    <span>CONTROL_ANGLE_Y</span><span>,</span>
</span></span><span><span>    <span>CONTROL_ANGLE_Z</span><span>,</span>
</span></span><span><span>    <span>CONTROL_COLOR_R</span><span>,</span>
</span></span><span><span>    <span>CONTROL_COLOR_G</span><span>,</span>
</span></span><span><span>    <span>CONTROL_COLOR_B</span><span>,</span>
</span></span><span><span>    <span>CONTROL_TRANSLATE</span><span>,</span>
</span></span><span><span>    <span>CONTROL_ROTATE</span><span>,</span>
</span></span><span><span>    <span>CONTROL_SCALE</span><span>,</span>
</span></span><span><span>    <span>CONTROL_CORNER_RADIUS</span><span>,</span>
</span></span><span><span>    <span>CONTROL_ROTATE_CAMERA</span><span>,</span>
</span></span><span><span>    <span>CONTROL_BLOB_AMOUNT</span><span>,</span>
</span></span><span><span><span>}</span> <span>Control</span><span>;</span>
</span></span><span><span>
</span></span><span><span><span>Control</span> <span>focused_control</span><span>;</span>
</span></span><span><span><span>Control</span> <span>mouse_action</span><span>;</span>
</span></span></code></pre></td></tr></tbody></table></div><p>This project didn’t need dynamic arrays or hashmaps, but if it had, I would’ve used something like <a href="https://danielchasehooper.com/posts/shapeup/www.sdf.com">stb_ds.h</a>.</p><h3 id="aside-wrestling-raylib">Aside: Wrestling Raylib</h3><p>So while I feel good about deciding to use C, raylib turned out to be trouble. First off, it has strange design choices that harm the developer experience:</p><ul><li><p>Raylib uses <code>int</code> everywhere that you would expect an enum type. This prevents the compiler from type checking and the functions don’t self document. Take this line in raylib’s header for example:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span><span>2
</span></code></pre></td><td><pre tabindex="0"><code data-lang="c"><span><span><span>// Check if a gesture have been detected
</span></span></span><span><span><span></span><span>RLAPI</span> <span>bool</span> <span>IsGestureDetected</span><span>(</span><span>unsigned</span> <span>int</span> <span>gesture</span><span>);</span>    
</span></span></code></pre></td></tr></tbody></table></div><p>It looks like <code>gesture</code> might be an ID for a gesture you’ve registered for. Reading the raylib source reveals that <code>gesture</code> parameter is actually a <code>Gesture</code> enum! This happens everywhere. Raylib’s only documentation is the header file, so you have to go to the implementation to see if any <code>int</code> parameter is really an enum, and if it is, <em>which</em> enum.</p></li><li><p>Raylib doesn’t do basic parameter validation, <a href="https://github.com/raysan5/raylib/issues/3365#issuecomment-1743827668" target="_blank" rel="noopener">by design</a>. This function segfaults when dataSize is null:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span>1
</span></code></pre></td><td><pre tabindex="0"><code data-lang="c"><span><span><span>unsigned</span> <span>char</span> <span>*</span><span>LoadFileData</span><span>(</span><span>const</span> <span>char</span> <span>*</span><span>fileName</span><span>,</span> <span>int</span> <span>*</span><span>dataSize</span><span>);</span>
</span></span></code></pre></td></tr></tbody></table></div><p>The raylib header doesn’t indicate that dataSize is an out parameter, or that it must not be null. This no-validation choice affects many functions and made trivial problems hard to track down. If you’re lucky it segfaults somewhere useful (but it doesn’t log an error). If you’re unlucky it just silently does something weird.</p></li><li><p>Raylib doesn’t take responsibility for its dependencies. There are issues in GLFW that raylib won’t work around or submit a patch for. As an end user of raylib, the method they chose to create a window is an invisible implementation detail. I care about raylib’s features working for me, regardless of what that means internally.</p></li></ul><p>The raygui UI library is just a toy:</p><ul><li>can’t display floating point numbers. I had to make a float text field.</li><li>doesn’t handle mouse event routing for overlapping or clipped elements</li><li>can’t do rounded corners, which are everywhere in UIs.</li><li>can’t be styled to look good</li></ul><p>And finally just plain bugs:</p><ul><li>raygui tooling had a bug that prevented changing the font from the hyper-stylized default (please pick a reasonable default!)</li><li>Drawing functions like <code>DrawCircle(...)</code> don’t share vertices between triangles. That causes pixel gaps due to floating point error when the current matrix has scaling or rotation.</li></ul><p>For a while I reported issues as I found them, but almost all of them them were closed as “wont fix”. This was frustrating and discouraging, and it was time consuming to write the bug reports, so I just stopped.</p><p>So yeah, while it was great that raylib made me an OpenGL window, I paid dearly for that convenience. Luckily I usually found an escape hatch: either by using OpenGL functions directly, or implementing a feature from scratch. In the future I’ll go with <a href="https://github.com/floooh/sokol" target="_blank" rel="noopener">sokol</a>.</p><h2 id="in-a-week">In a Week</h2><p>At a high level, ShapeUp came down to 4 main parts that needed to be completed in 6 days:</p><ol><li>The user interface (3D gizmos, keyboard shortcuts, sidebar, game controller)</li><li>GLSL shader generator + Ray marching renderer (<a href="https://youtu.be/-Xb3Kk3HhIw?si=GvNTl31sHP0L2yey&amp;t=58" target="_blank" rel="noopener">explained in video</a>)</li><li>GPU-based mouse selection (<a href="https://youtu.be/-Xb3Kk3HhIw?si=epq9opaS74rgcJSL&amp;t=149" target="_blank" rel="noopener">explained in video</a>)</li><li>Marching cubes for export (<a href="https://youtu.be/-Xb3Kk3HhIw?si=UWTZE9hZKTW7yRbY&amp;t=172" target="_blank" rel="noopener">explained in video</a>)</li></ol><p>Each one individually was not hard. The hard thing was prioritizing correctly and not <a href="https://www.youtube.com/watch?v=AbSehcT19u0" target="_blank" rel="noopener">getting sidetracked</a>. It helped to solve finicky or time consuming problems by designing around them, or by using a dumb solution that works in 90% of cases. Sometimes punting a feature by a day gave my subconscious time to find a solution.</p><p>I tried to work in such a way that I always had a working 3D modeler, and progressively improved it as time allowed. I think about it like building a pyramid. If you build layer by layer, you don’t have a pyramid until the very end. On the other hand you can build it so that stopping at any step is a complete pyramid.</p><p><a href="https://danielchasehooper.com/posts/shapeup/Pyramid.png" title="Two ways to build a pyramid, in flat layers or as progressively bigger pyramids"><img src="https://danielchasehooper.com/posts/shapeup/Pyramid_hu023cf4e44e1a4c03b239c35c3afc4f1d_9722_534x0_resize_box_3.png" srcset="https://danielchasehooper.com/posts/shapeup/Pyramid_hu023cf4e44e1a4c03b239c35c3afc4f1d_9722_534x0_resize_box_3.png 3x, https://danielchasehooper.com/posts/shapeup/Pyramid_hu023cf4e44e1a4c03b239c35c3afc4f1d_9722_534x0_resize_box_3.png 2x, https://danielchasehooper.com/posts/shapeup/Pyramid_hu023cf4e44e1a4c03b239c35c3afc4f1d_9722_534x0_resize_box_3.png 1x" alt="Two ways to build a pyramid, in flat layers or as progressively bigger pyramids"></a></p><h2 id="closing">Closing</h2><p>By the end of the week I had a 3D program that could make meaningful 3D models and export them to an .obj file. It also runs on multiple platforms and has file open/save.</p><p><a href="https://danielchasehooper.com/posts/shapeup/wrench.png" title="a model of a wrench in ShapeUp"><img src="https://danielchasehooper.com/posts/shapeup/wrench_huc2d7734d2a9a96e05815e68917714e79_52979_700x0_resize_box_3.png" srcset="https://danielchasehooper.com/posts/shapeup/wrench_huc2d7734d2a9a96e05815e68917714e79_52979_761x0_resize_box_3.png 3x, https://danielchasehooper.com/posts/shapeup/wrench_huc2d7734d2a9a96e05815e68917714e79_52979_761x0_resize_box_3.png 2x, https://danielchasehooper.com/posts/shapeup/wrench_huc2d7734d2a9a96e05815e68917714e79_52979_700x0_resize_box_3.png 1x" alt="a model of a wrench in ShapeUp">
</a>A Wrench Modeled in ShapeUp</p><p>The project is 2024 lines of C and 250 lines GLSL. Kind of surprising that a somewhat useful 3D modeler can be expressed in ~2300 lines.</p><p>I was fortunate enough to be asked to demo ShapeUp in the <a href="https://youtu.be/BuYoXfPZ6cI?si=NPHplwABaAB1HJ7p&amp;t=104" target="_blank" rel="noopener">jam recap</a>, and again at the Handmade Seattle conference, which had a <a href="https://vimeo.com/889290506/e5a560faba" target="_blank" rel="noopener">Q&amp;A portion</a>.</p><p>People seemed impressed by ShapeUp but I don’t feel like I achieved much. It’s a relatively simple project. If there is anything special about what I did, it is that I had the taste to choose what to make, the knowledge to make it, and the discipline to do it in a week.</p><p>You can try <a href="https://danielchasehooper.com/projects/shapeup">ShapeUp in your browser</a>, just keep in mind it was made in a week :)</p><p>Discuss on <a href="https://twitter.com/DanielcHooper/status/1786068396745937190" target="_blank" rel="noopener">Twitter</a><br>Discuss on <a href="https://lobste.rs/s/l6julm/making_3d_modeler_c_week" target="_blank" rel="noopener">Lobste.rs</a><br>Discuss on <a href="https://news.ycombinator.com/item?id=40239164" target="_blank" rel="noopener">Hacker News</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Piccolo – A Stackless Lua Interpreter (229 pts)]]></title>
            <link>https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/</link>
            <guid>40239029</guid>
            <pubDate>Thu, 02 May 2024 17:38:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/">https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/</a>, See on <a href="https://news.ycombinator.com/item?id=40239029">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

<p><strong>2024-05-01</strong></p>

    <ul>
    
        <li>
            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#history-of-piccolo">History of piccolo</a>
            
        </li>
    
        <li>
            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#a-stackless-interpreter-design">A "Stackless" Interpreter Design</a>
            
        </li>
    
        <li>
            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#benefits-of-stackless">Benefits of Stackless</a>
            
                <ul>
                    
                        <li>
                            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#cancellation">Cancellation</a>
                        </li>
                    
                        <li>
                            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#pre-emptive-concurrency">Pre-emptive Concurrency</a>
                        </li>
                    
                        <li>
                            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#fuel-pacing-and-custom-scheduling">Fuel, Pacing, and Custom Scheduling</a>
                        </li>
                    
                        <li>
                            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#symmetric-coroutines-and-coroutine-yieldto">"Symmetric" Coroutines and coroutine.yieldto</a>
                        </li>
                    
                </ul>
            
        </li>
    
        <li>
            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#the-big-lie">The "Big Lie"</a>
            
        </li>
    
        <li>
            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#rust-coroutines-lua-coroutines-and-snarfing">Rust Coroutines, Lua Coroutines, and Snarfing</a>
            
        </li>
    
        <li>
            <a href="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/#zooming-out">Zooming Out</a>
            
        </li>
    
    </ul>

<hr>


<p><a href="https://github.com/kyren/piccolo">piccolo</a> is an interpreter for the Lua
language written in pure, mostly safe Rust with an eye towards safe sandboxing
and resiliency. It uses <a href="https://github.com/kyren/gc-arena">gc-arena</a> for its
garbage collection system, and in fact <code>gc-arena</code> was originally created as part
of <code>piccolo</code>.</p>
<p>You can try it out below in an the interactive REPL. I'm not much of a web
developer, and this is a little homegrown web terminal thingy, so hopefully this
works for you. I'm going to be using REPLs like this to demonstrate a lot of
what makes <code>piccolo</code> unique, so if it doesn't work or you or you don't have
Javascript turned on, then this might be a pretty boring post and I'm sorry!</p>
<p><strong>↓ Type Some Lua Here ↓</strong><span><sup><a data-aside="aside-1">[1]</a></sup><span id="aside-1">You know, if you want to...</span></span>

</p>


<p>I find REPLs to be really magical and inviting,<span><sup><a data-aside="aside-2">[2]</a></sup><span id="aside-2"><img src="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/neat.png" alt="I just think they're neat okay"></span></span>

and I end up eventually wanting to attach them to everything I ever make.<span><sup><a data-aside="aside-3">[3]</a></sup><span id="aside-3">It's possible to like things <em>too</em> much.</span></span>
 Not just a REPL
but the idea that your program is a sort of <em>Living Thing</em> that understands
a <em>Language</em>, and if the normal UI isn't fit for purpose and you're enough of
a <em>Witch</em>, you can always just <em>Speak</em> to the program in the way it naturally
understands... cast a <em>Spell</em> to achieve your <em>Goals</em>, or maybe just have a
<em>Conversation</em>. I think it helps close the gap between the author of a program
and the user. I'm not better than the user, who am I to tell them what they can
and can't say to the program?</p>
<p>I hope you feel the same way about REPLs as I do because there are a lot of them
on this page, and I'm going to ask you to type things into them. If you're not
into it, well... I'll try and always give you working code that you can copy and
paste, but where's the fun in that?</p>
<hr>
<p>I said in my <a href="https://kyju.org/blog/rust-safe-garbage-collection/">last post in this series</a>
that my goal wasn't to try to sell anyone on <code>gc-arena</code> or <code>piccolo</code><span><sup><a data-aside="aside-4">[4]</a></sup><span id="aside-4"><em>yet</em> anyway</span></span>
 and I think that's still true here. <code>piccolo</code> is pretty
rough around the edges<span><sup><a data-aside="aside-5">[5]</a></sup><span id="aside-5">which you probably noticed if you tried to
use large parts of the stdlib in the REPL above</span></span>
 right now, but it's
more complete than you might think<span><sup><a data-aside="aside-6">[6]</a></sup><span id="aside-6">The implementation strategy so
far has been to do the hardest parts first to prove that the basic idea works,
so most of really hard parts of the VM are feature complete.</span></span>
 and it
has some interesting and unique features. Still, I'm not telling you to go out
and replace <a href="https://luajit.org/">LuaJIT</a> or <a href="https://luau-lang.org/">Luau</a> or
<a href="https://lua.org/">The Ur Lua</a> with <code>piccolo</code> just yet.</p>
<p>In this post, I  just want to talk about what makes <code>piccolo</code> special, and
hopefully you'll find it interesting. In a future post, I'm going to tie all of
this together, the way <code>gc-arena</code> and <code>piccolo</code> are designed, how they work now,
and how I <em>wish</em> they could work in the future, but this post is going to focus
just on <code>piccolo</code> as it works right now.</p>
<h2 id="history-of-piccolo">History of <code>piccolo</code></h2>
<p>When I was first writing <code>piccolo</code> (in 2019), I had noticed that nobody had
quite figured out how to make VMs for certain kinds of languages that could be
competitive with C while being implemented primarily in safe Rust. Mostly I'm
referring to problems surrounding garbage collection, rather than something like
designing fast interpreter loops (which is something I'm not very good at yet!).</p>
<p>Languages that have ownership semantics similar to Rust are of course much
easier to write VMs for <em>in</em> Rust, because the implemented language can
<em>snarf</em><span><sup><a data-aside="aside-7">[7]</a></sup><span id="aside-7">my absolute favorite PLT jargon</span></span>
 much of the
functionality from the host language. It's pretty easy to express the exact
semantics of <code>Rc</code> by just... using <code>Rc</code> itself to implement the language. There
are several such scripting languages that try to have matching ownership and
mutability semantics with Rust and I think that's honestly a great idea because
sharing these core semantics with the host language just removes a huge amount
of cognitive burden when crossing the language boundary, and you can make an
embedded language this way that feels like it fits in perfectly with the host.</p>
<p><em>However</em>, I also think it's a bit of a disappointment if only Rust-like
languages can be easily made using Rust. Certainly this is not actually true,
and there are plenty of other Rust runtimes for languages with "unrestricted
ownership" (proper garbage collection, unrestricted references... the terms for
this are a bit all over the place, but what I <em>mean</em> is languages like Lua).
At the time at least, when I surveyed language runtimes written in Rust they
broadly fell into one of several categories, none of which was what I wanted
for <code>piccolo</code>...</p>
<ol>
<li>Languages with ownership semantics similar to Rust, so no "true garbage
collection" / "unrestricted ownership" or whatever you want to call it
(<a href="https://github.com/pistondevelopers/dyon">dyon</a>,
<a href="https://github.com/rune-rs/rune">rune</a>, etc...)</li>
<li>Language runtimes with true garbage collection (tracing or generational
collector) but whose implementations were <em>wildly</em>, <em>infectiously</em> unsafe as
they would be in C, due to the nature of garbage collected pointers and their
interactions with the Rust stack.</li>
<li>Language runtimes for languages that are meant to have proper garbage
collection but the implementer used <code>Rc</code> or similar and left the problem of
what to do about reference cycles for later
(<a href="https://github.com/RustPython/RustPython/issues/4181">RustPython</a>).</li>
</ol>
<p>I wanted to have a language for Rust that felt as natural as Lua does for C,
<em>and</em> one that had true garbage collection<span><sup><a data-aside="aside-8">[8]</a></sup><span id="aside-8"><em>and</em> I have extremely bad
NIH syndrome</span></span>
... and frankly I really like just plain vanilla Lua. I
think it matches perfectly with Rust <em>because</em> they're so different, I think
having an Rust embedded language that frees you from even having to <em>think</em>
about ownership is very powerful because it can be used for things where having
to think about ownership can be more trouble than its worth. Let each language
play to their strengths, and Rust and Lua in a lot of ways have complementary
strengths.</p>
<p>Since I just looooove Lua so much and I had so much experience with vanilla
PUC-Rio Lua (aka <a href="https://lua.org/">The Ur Lua</a>), I decided to try and write an
interpreter designed similarly to<span><sup><a data-aside="aside-9">[9]</a></sup><span id="aside-9">shamelessly stolen from</span></span>

PUC-Rio's Lua, with a similar sort of garbage collector, but because I was
primarily interested in sandboxing untrusted scripts, <em>somehow</em> made of mostly
safe Rust.<span><sup><a data-aside="aside-10">[10]</a></sup><span id="aside-10">or at least not like
<a href="https://github.com/luau-lang/luau/blob/e76802f2ce698ca090a793b24c07e336b21ade9f/VM/src/lvmexecute.cpp#L26">this</a></span></span>
 <code>gc-arena</code> was born out of my efforts to solve this problem.</p>
<p>But I <em>really</em> don't intend to throw any shade at any of the projects I listed
above or any other Rust-implemented language runtime written in a different
style. These are hard problems and <code>gc-arena</code> is <em>not</em> a perfect solution.
In fact, in the early days of <code>gc-arena</code> and <code>piccolo</code>, I ran into so many
seemingly unsolvable problems that I became hopelessly frustrated and gave up on
<code>piccolo</code> entirely for about <em>four years</em>.</p>
<img src="https://kyju.org/blog/piccolo-a-stackless-lua-interpreter/hiatus.png" title="Portrait of Frustration" width="100%">
<p>It was only through <a href="https://github.com/ruffle-rs/ruffle">Ruffle</a>'s use of
<code>gc-arena</code> and Ruffle contributors helping to get through the roadblocks we
encountered that I was eventually able to pick <code>piccolo</code> back up. Today, there
are not <em>nearly</em> so many unsolved problems in trying to use <code>gc-arena</code> to
implement a language like Lua or ActionScript, but it really came down
to <code>Ruffle</code> contributors helping to solve each issue one by one over the
intervening years.</p>
<p>BUT, even with all of the major roadblocks overcome (pointers to <code>Unsize</code> types,
GC finalization, non-'static <code>Any</code>, a bunch more I've forgotten) influence from
the biggest limitation of <code>gc-arena</code> stubbornly remained: the "Mutation XOR
Collection" design of <code>gc-arena</code> that was talked about in the 
<a href="https://kyju.org/blog/rust-safe-garbage-collection/">last post</a>. <code>gc-arena</code>'s design
requires that code that wants to access garbage collected data do so through
special <em>mutation</em> methods, and that <em>collection</em> must ONLY happen when no
<em>mutation</em> methods are executing.</p>
<p>This "Mutation XOR Collection" design means that calls to <code>Arena::mutate</code>
must <em>return</em> before garbage collection can safely take place, to prove that
no garbage collected pointers exist anywhere on the Rust stack. Unless I were
willing to just give up on ever hoping to match Lua runtimes written in C, or
were willing to limit the places <code>piccolo</code> could be used,<span><sup><a data-aside="aside-11">[11]</a></sup><span id="aside-11">If I were
making a runtime that was more limited in purpose, I could instead limit garbage
collection to, say, once a frame if I were making a video game or something like
Ruffle, or just simply require that continuous execution of Lua not go on
for "too long", but this would make <code>piccolo</code> much less <em>general</em>.</span></span>

I had to figure out a way to make the entire execution context of <code>piccolo</code>
<em>suspendable</em>, just to be able to leave calls to <code>Arena::mutate</code>, so that
garbage collection could take place at arbitrary points.</p>
<p>At the beginning, this limitation <em>infuriated</em> me, and I spent ages trying
<strong>anything</strong> I could to find an acceptable way around it. It still certainly
is limiting, but now that <code>piccolo</code> has gotten further along I think what I've
ended up with is actually very cool, and what started out as purely a painful
compromise might actually end up being <code>piccolo</code>'s "killer feature"...</p>
<h2 id="a-stackless-interpreter-design">A "Stackless" Interpreter Design</h2>
<p>Some of the biggest, most interesting features of <code>piccolo</code> come from its
"stackless" design, originally born only from necessity due to the limitations
of <code>gc-arena</code>. This design is similar to other "stackless" interpreters, and
the one most people have heard of is
<a href="https://github.com/stackless-dev/stackless/wiki/">Stackless Python</a>, so if
you're familiar with it, most of what you know will be applicable to <code>piccolo</code>
as well.</p>
<p>"Stackless" here is jargon that's used in a couple of places, not just in
interpreter design. You may have heard that Rust has "stackless" coroutines,
and the word "stackless" as I'm using it here means the exact same thing. It
means that piccolo's Lua runtime is not "stackful", it does not rely on the
Rust function call stack to maintain its execution state, and execution can be
suspended at any time. This applies not just for plain interpreted Lua bytecode
but also for Rust code executed from Lua (callbacks) in any form, for any
depth of Lua -&gt; Rust -&gt; Lua calls. The overriding design decision made early in
piccolo's life was that execution of Lua (and ALL callback code called from Lua)
must always be able to be suspended, and that execution would be driven from the
outside by polling:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>//</span> This is pseudocode to demonstrate the "stackless" or "trampoline" VM style,
</span></span><span><span><span>//</span> how this really works inside piccolo is slightly more complex.
</span></span><span>
</span><span><span><span>//</span> Set up the execution of some Lua code and produce an object representing the
</span></span><span><span><span>//</span> execution state. The internal Lua / Callback call stack is reified into this
</span></span><span><span><span>//</span> object, and does not rely on the normal Rust function call stack.
</span></span><span><span>let</span> execution_state <span>=</span> <span>...</span><span>;</span>
</span><span>
</span><span><span><span>//</span> We need to call a method to make progress, and call that method in a loop
</span></span><span><span><span>//</span> until the running Lua code is complete.
</span></span><span><span>loop</span> <span><span>{</span>
</span></span><span><span>    <span>match</span> execution_state<span>.</span><span>poll</span><span><span>(</span></span><span><span>)</span></span> <span><span>{</span>
</span></span></span><span><span><span>        <span>None</span> <span>=&gt;</span> <span><span>{</span>
</span></span></span></span><span><span><span><span>            </span></span></span></span><span><span><span><span>            </span></span></span></span><span><span><span><span>            </span></span></span></span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span><span><span><span>        <span>Some</span><span><span>(</span>result</span><span><span>)</span></span> <span>=&gt;</span> <span><span>{</span>
</span></span></span></span><span><span><span><span>            </span></span></span></span><span><span><span><span>            </span></span></span></span><span><span><span><span>            <span>break</span><span>;</span>
</span></span></span></span><span><span><span><span>        </span><span><span>}</span></span>
</span></span></span><span><span><span>    </span><span><span>}</span></span>
</span></span><span><span></span><span><span>}</span></span>
</span></code></pre>
<p>This should be <em>extremely</em> familiar to anyone who has ever touched Rust futures,
and the similarity is no accident. The core of the design of <code>piccolo</code> is
virtually the same as Async Rust: that all long running operations are reified
into objects that must be <em>polled to completion</em>.</p>
<p>The obvious benefit for <code>piccolo</code> is that it becomes trivial now to exit a call
to <code>gc_arena::Arena::mutate</code> and allow for collection, since we can now do so
in-between calls to <code>execution_state.poll()</code>.<span><sup><a data-aside="aside-12">[12]</a></sup><span id="aside-12">In reality this is
<code>piccolo::Executor::step</code>, but I wanted to show the similarity to normal Rust
futures.</span></span>
 What I didn't fully appreciate when I began writing <code>piccolo</code>
is that this style of writing an interpreter, though at times more difficult,
comes with <em>many</em> other benefits that make it (in my opinion) a worthwhile goal,
or at least a very interesting place in the design space and I hope a unique
niche that piccolo can fill.</p>
<h2 id="benefits-of-stackless">Benefits of Stackless</h2>
<h3 id="cancellation">Cancellation</h3>
<p>An obvious side benefit of polling execution in the style of <code>Future</code> is that,
just like a <code>Future</code>, execution can be canceled at any time by just... not
continuing to call <code>poll</code>.</p>
<p>Let's go back to the REPL from above, but this time, let's see what happens when
we run some Lua code that never returns.</p>
<p>If you don't know much Lua, try typing something like:</p>
<pre data-lang="lua"><code data-lang="lua"><span><span>while</span> <span>true</span> <span><span>do</span> <span>end</span></span>
</span></code></pre>
<p>or maybe</p>
<pre data-lang="lua"><code data-lang="lua"><span><span><span>repeat</span>
</span></span><span><span>    <span>print</span><span><span><span>(</span><span><span>"</span>Look Around You<span>"</span></span><span>)</span></span></span>
</span></span><span><span></span><span>until</span> <span>false</span>
</span></code></pre>
<p><strong>↓ Just Endlessly Do It ∞ ↓</strong>
</p>


<p>You should see a big <strong>interrupt</strong> button appear, and when you press it, the
command should stop. How this works under the hood in this demo is that inside
this webpage there is some javascript that looks something like this:</p>
<pre data-lang="javascript"><code data-lang="javascript"><span><span>this</span><span>.</span><span>interval</span> <span>=</span> <span><span>setInterval</span></span><span>(</span><span>(</span><span><span><span>(</span><span>)</span></span> </span><span><span>=&gt;</span> <span><span>{</span>
</span></span></span><span><span><span>    <span>if</span> <span>(</span><span><span>this</span><span>.</span><span>executor</span><span>.</span><span>step</span></span><span>(</span><span>8192</span><span>)</span><span>)</span> <span><span>{</span>
</span></span></span></span><span><span><span><span>        <span><span>this</span><span>.</span><span>finish</span></span><span>(</span><span>)</span><span>;</span>
</span></span></span></span><span><span><span><span>    <span>}</span></span>
</span></span></span><span><span><span><span>}</span></span></span><span>)</span><span><span>.</span><span>bind</span></span><span>(</span><span>this</span><span>)</span><span>,</span> <span>0</span><span>)</span><span>;</span>
</span></code></pre>
<p>This is the "poll loop" that we talked about above that polls running
Lua code to completion. This is still not exactly how it would look when
using <code>piccolo</code> directly but it's a little closer... The <code>executor</code> there is
a <code>piccolo::Executor</code> object,<span><sup><a data-aside="aside-13">[13]</a></sup><span id="aside-13">Well, it's a simplified wrapper for
Javascript</span></span>
 and <code>Executor::step</code> is called in a loop until the code
has completed. Here, Lua execution actually hooks into the normal Javascript
event loop, every time the closure is run, the <code>piccolo::Executor</code> is "stepped"
for <code>8192</code> "steps". The "steps" value here is referred to inside <code>piccolo</code> as
"fuel" and (more or less) corresponds to a number of Lua VM instructions to run
before returning. Since the timeout given to <code>setInterval</code> is <code>0</code>, we run this
function regularly and rapidly but without blocking the main Javascript event
loop. When the <strong>interrupt</strong> button is pressed, the interval is canceled and
the executor is dropped, interrupting execution. In fact, every REPL on the page
works in the same way and shares the main Javascript event loop, so all of them
can execute Lua code concurrently.</p>
<p>Interruptable Lua code is not something new to <code>piccolo</code>, PUC-Rio Lua (and most
of its forks) have something like this in the form of
<a href="https://www.lua.org/manual/5.4/manual.html#lua_sethook">lua_sethook</a>. This
function allows you to, among a few other things, set "hook" function that runs
every <code>count</code> VM instructions, and one of the things this function can do when
run is interrupt running code by calling e.g.
<a href="https://www.lua.org/manual/5.4/manual.html#lua_error">lua_error</a>.<span><sup><a data-aside="aside-14">[14]</a></sup><span id="aside-14">If you also know that you can call
<a href="https://www.lua.org/manual/5.4/manual.html#lua_yield">lua_yield</a> from a hook
function and mimic what <code>piccolo</code> tasklets do, I know that too, <em>wait just a
bit</em> and I'll talk about it.</span></span>
So we can imagine a situation in which we
can set up something similar to what <code>piccolo</code> is doing here, either by running
Lua code in a different thread and waiting for an <code>interrupt</code> flag to be set in
the hook function, or by pumping an event loop from within the hook function or
something similar.<span><sup><a data-aside="aside-15">[15]</a></sup><span id="aside-15">If you're internally screaming about calling
<code>lua_yield</code> from a hook, <em><strong>wait</strong></em>.</span></span>
</p>
<p>However, I would argue that the way <code>piccolo</code> is structured makes this
effortless and natural due to its stackless design. Since PUC-Rio Lua is written
in normal, stackful style, the best thing it can offer is a hook function that
will be periodically called by the VM loop, whereas with <code>piccolo</code> the user
never <em>loses control</em> to the VM in the first place. <code>piccolo</code> is designed such
that a call to <code>Executor::step</code> should <em>always</em> return in a reasonable, bounded
amount of time proportional to the "fuel" it is given,<span><sup><a data-aside="aside-16">[16]</a></sup><span id="aside-16">Ensuring
this is true in <em>all</em> cases so that it can be relied on as a security boundary
is complex and a WIP, but is 100% a goal of <code>piccolo</code>.</span></span>
 so it is not
necessary to provide an equivalent to <code>lua_hook</code> at all.</p>
<h3 id="pre-emptive-concurrency">Pre-emptive Concurrency</h3>
<p>One of Lua's best and most defining features is its support for coroutines.
Coroutines in Lua can be used to provide seamless <em>cooperative</em> multitasking,
and are especially powerful for things like game development where some kind of
<em>script</em> must execute concurrently with the running simulation of a video game.</p>
<p>However, Lua coroutines only provide <em>cooperative</em> multitasking, the script must
decide where and when to yield control to the caller, and a buggy (or malicious)
script that does not yield control may need to be interrupted and canceled (via
<code>lua_sethook</code>) or might make the game hang.</p>
<p>Rust (at least, unstable Rust) also has coroutines, and they are used behind
the scenes to implement async. In Rust, like in Lua, these coroutines provide
<em>cooperative</em> multitasking, Rust code must decide when to call <code>await</code>,
or an implementation of <code>Future::poll</code> must decide when to return. A buggy
implementation of <code>Future</code> will hang an async executor thread just like a buggy
Lua coroutine might hang a game loop.</p>
<p>In <code>piccolo</code>, running Lua code acts very similarly to a Rust "task" (a term for
something that implements <code>Future</code> and is run on an async "executor"), and like
Rust tasks, they can easily be run concurrently. However, <code>piccolo</code> works very
hard to <em>guarantee</em> that <code>piccolo::Executor::step</code> returns in a bounded amount
of time, even <em>without</em> the cooperation of the running Lua code. So, by using
several independent <code>piccolo::Executor</code> "tasklets" and multiplexing calls to
each <code>piccolo::Executor::step</code>, we can give Lua <em>pre-emptive multitasking</em>.</p>
<p>It's easier to understand with a demonstration. The two REPLs below are
connected to <em>one</em> Lua instance. Instead of a single <code>print</code> function, they have
the functions <code>print_left</code> and <code>print_right</code> to print in the left or right REPL
console. They share global variables, so we can use this to demonstrate that the
two interfaces are running Lua code on the same VM.</p>
<p>In the left REPL, type something like this</p>
<pre data-lang="lua"><code data-lang="lua"><span><span>i</span> <span>=</span> <span>0</span>
</span><span><span>while</span> <span>true</span> <span><span>do</span>
</span></span><span><span>    <span>i</span> <span>=</span> <span>i</span> <span>+</span> <span>1</span>
</span></span><span><span><span>end</span></span>
</span></code></pre>
<p>While that is running in the left REPL, in the right REPL type this:</p>
<pre data-lang="lua"><code data-lang="lua"><span><span>while</span> <span>true</span> <span><span>do</span>
</span></span><span><span>    <span>print_right</span><span><span><span>(</span><span>i</span><span>)</span></span></span>
</span></span><span><span><span>end</span></span>
</span></code></pre>
<p><strong>↓ These two REPLs are connected to the same <code>Lua</code> instance! ↓</strong>
</p>


<p>You should notice that it appears that two separate Lua REPLs access the same
state, seemingly in parallel! In fact, if you copied the exact code above, the
right REPL probably prints values of <code>i</code> seemingly at random, every thousand and
a half or so increments.</p>
<p>In this demo, this behavior comes from the way that running Lua code is run
inside <code>setInterval</code> callbacks... The REPLs here work exactly the same as any
of the REPLs above <em>except</em> that they both share a Lua instance, and this
really is the only difference. There are two <code>setInterval</code> callbacks calling
<code>Executor::step</code> being run by the browser at the same time and each callback
is run in a round-robin fashion.<span><sup><a data-aside="aside-17">[17]</a></sup><span id="aside-17">I actually don't know how the
task scheduler in browsers works <em>exactly</em>, but I think it will execute
both REPLs in a simple round-robin way?</span></span>
 In a plain Rust environment
you could get the same behavior by looping and calling <code>Executor::step</code> for
one executor then another in turn, in a simple round-robin scheduler. This is
very similar in a way to OS threads which also are pre-emptively scheduled, but
instead of using an OS scheduler, we write our own scheduler and execute some
running Lua for a <em>time slice</em> via calls to <code>Executor::step</code>.<span><sup><a data-aside="aside-18">[18]</a></sup><span id="aside-18">This
idea is not new, and other stackless interpreters have called this scheduling
idea <a href="https://github.com/stackless-dev/stackless/wiki/Tasklets">tasklets</a>.</span></span>
 In fact, though you can't observe actual <em>data races</em> here or even an
analogue of it within Lua, you can observe a mirror of other <em>race condition</em>
problems that OS concurrency primitives are meant to solve, and a custom
scheduler for these Lua "tasklets" might even want to provide a version of
common OS primitives to prevent them and aid scheduling.<span><sup><a data-aside="aside-19">[19]</a></sup><span id="aside-19">Stackless
Python has a custom version of
<a href="https://github.com/stackless-dev/stackless/wiki/Channels">channels</a> to
communicate between tasklets that serves this purpose, but I don't actually know
whether these channels affect tasklet scheduling (but they could!).</span></span>
</p>
<p>This is <em>also</em> again, VERY similar to how rust Futures (well, tasks) work when
running on an async executor. Async tasks can be round robin scheduled <em>or</em> in
some more advanced way, but each task has a "slice" of execution given to
it by calling its <code>Future::poll</code> method. The difference in <code>piccolo</code> is that
Lua scripts are not actually <em>aware</em> that they are being scheduled this way,
and <em>from the perspective of Lua</em>, this scheduling happens pre-emptively. Rust
<em>callbacks</em> in <code>piccolo</code> are more privileged than this and actually receive a
<code>piccolo::Fuel</code> object that they can use to consume fuel proportional to their
work, and must be trusted to cooperatively schedule themselves (you can always
incorrectly write <code>loop {}</code> in a callback, after all), but <em>Lua code</em> cannot
break out, at least not on its own.</p>
<p>Yet another way to look at this is that <code>piccolo</code> executes Lua code <em>sort of</em>
as if there are something like invisible <code>coroutine.yield</code> statements inserted
everywhere, but ones that operate on a different level of abstraction from the
real <code>coroutine.yield</code>, ones which regular Lua code cannot interact with.</p>
<p>Let's imagine we transformed the above code that I asked you to type in the
paired REPLs into something like this in plain Lua:</p>
<pre data-lang="lua"><code data-lang="lua"><span><span><span>--</span> This example is in a big function loaded in the REPL below so you can easily
</span></span><span><span><span>--</span> call it, and I'll do the same thing with later examples. I'm not gonna ask
</span></span><span><span><span>--</span> you to type *that* much.
</span></span><span><span><span><span>function</span> <span><span>coroutine_example</span></span><span><span>(</span><span>)</span></span>
</span></span></span><span><span><span>    <span>local</span> <span>i</span> <span>=</span> <span>0</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>local</span> <span>co1</span> <span>=</span> <span>coroutine</span><span>.</span><span><span>create</span></span><span><span><span>(</span><span><span><span>function</span><span><span>(</span><span>)</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        <span>while</span> <span>true</span> <span><span>do</span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>i</span> <span>=</span> <span>i</span> <span>+</span> <span>1</span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>coroutine</span><span>.</span><span><span>yield</span></span><span><span><span>(</span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>        <span>end</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>    <span>end</span></span></span><span>)</span></span></span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>local</span> <span>co2</span> <span>=</span> <span>coroutine</span><span>.</span><span><span>create</span></span><span><span><span>(</span><span><span><span>function</span><span><span>(</span><span>)</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        <span>while</span> <span>true</span> <span><span>do</span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>print</span><span><span><span>(</span><span>i</span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>coroutine</span><span>.</span><span><span>yield</span></span><span><span><span>(</span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>        <span>end</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>    <span>end</span></span></span><span>)</span></span></span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>while</span> <span>true</span> <span><span>do</span>
</span></span></span></span><span><span><span><span>        <span>coroutine</span><span>.</span><span><span>resume</span></span><span><span><span>(</span><span>co1</span><span>)</span></span></span>
</span></span></span></span><span><span><span><span>        <span>coroutine</span><span>.</span><span><span>resume</span></span><span><span><span>(</span><span>co2</span><span>)</span></span></span>
</span></span></span></span><span><span><span><span>    <span>end</span></span>
</span></span></span><span><span><span><span>end</span></span></span>
</span></code></pre>
<p><strong>↓ The above code is loaded here you want to run it ↓</strong>
</p>


<p>This behaves <em>sort of</em> like the code above but in a much more predictable way.
If you know Lua and are comfortable with coroutines, you can probably tell that
the above code is pretty much just a convoluted version of a simple for loop,
but it's enough to demonstrate the idea. We have two coroutines that execute
their own loops independent of each other and we schedule between them, but this
time we require that the body of the coroutines <em>decide</em> where to yield to the
scheduler to allow the other task to run. Stackless execution in <code>piccolo</code> is
<em>almost</em> the same as if we could painlessly <em>automatically</em> insert these calls
to <code>coroutine.yield</code> everywhere in the body of our running Lua tasks and use
this to pre-emptively rather than cooperatively schedule them.</p>
<h3 id="fuel-pacing-and-custom-scheduling">Fuel, Pacing, and Custom Scheduling</h3>
<p>In the last section where I transformed the code executed in the concurrent
REPLs into basic Lua coroutines, you may have noticed a big difference between
the two. In the first example, the scheduling between the two Lua REPLs was
somewhat random and hard to discern, the left REPL would increment the <code>i</code> value
more than a thousand times for every time the right REPL printed the value of
<code>i</code>, but in the second example the first task would increment the <code>i</code> value once
for every time the second task printed <code>i</code>. The reason for this has to do with
how the javascript for this page is actually written, but it's a perfect, simple
example of something using <code>piccolo</code> enables: custom tasklet scheduling.</p>
<p>I've mentioned "fuel" before in the context of <code>piccolo::Executor::step</code>. Here
is the <em>real</em> signature of <code>Executor::step</code> inside <code>piccolo</code>:</p>
<pre data-lang="rust"><code data-lang="rust"><span><span><span>impl</span> </span><span><span>Executor</span> </span><span><span><span>{</span>
</span></span></span><span><span><span>    <span> Runs the VM for a period of time controlled by the `fuel` parameter.
</span></span></span></span><span><span><span>    <span>
</span></span></span></span><span><span><span>    <span> The VM and callbacks will consume fuel as they run, and `Executor::step`
</span></span></span></span><span><span><span>    <span> will return as soon as `Fuel::can_continue()` returns false *and some
</span></span></span></span><span><span><span>    <span> minimal positive progress has been made*.
</span></span></span></span><span><span><span>    <span>
</span></span></span></span><span><span><span>    <span> Returns `false` if the method has exhausted its fuel, but there is
</span></span></span></span><span><span><span>    <span> more work to do, and returns `true` if no more progress can be made.
</span></span></span></span><span><span><span>    <span><span><span>pub</span> <span>fn</span> </span><span>step</span></span><span><span><span>(</span><span>self</span>, <span>ctx</span><span>:</span> <span>Context<span>&lt;</span><span>'gc</span><span>&gt;</span></span>, <span>fuel</span><span>:</span> <span>&amp;</span><span>mut</span> Fuel</span><span><span><span>)</span></span></span></span><span> <span><span>-&gt;</span> <span>bool</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>        <span>...</span>
</span></span></span></span></span><span><span><span><span><span>    </span><span><span>}</span></span></span>
</span></span></span><span><span><span></span><span><span>}</span></span></span>
</span></code></pre>
<p>The method requires a <code>fuel: &amp;mut Fuel</code> parameter to, well, "fuel" the VM, and
the running VM <em>consumes</em> this fuel as it runs. <code>Fuel</code> is a very simple wrapper
around an <code>i32</code> value (you can see the current implementation
<a href="https://github.com/kyren/piccolo/blob/973951add4ad02d4fe5c0b27079ce342464a80c2/src/fuel.rs#L9">here</a>),
that is decremented by <code>Executor</code> as it runs Lua code, and also optionally by
<em>any Rust callback</em> that it calls. <code>piccolo</code>'s ultimate goal is to enable
treating all loaded Lua code as potentially malicious, but Rust callbacks
are <em>never</em> on the other side of this security boundary. Callbacks are meant
to <em>cooperate</em> with the execution system of <code>piccolo</code> and act as part of the
security boundary to potentially malicious Lua, and as such, they can consume
<code>Fuel</code> or even "interrupt" the "flow" of fuel to the <code>Executor</code> that calls them.</p>
<p>This system makes a lot of sense to provide, and not only strictly for
<em>security</em>. <code>piccolo</code>'s goal is to enable Lua tasks to <em>run concurrently</em> not
only with Rust but with each other, and as such there are many ways we we might
want to give certain tasks more or less time to run. We could imagine a game
engine where we want to provide a sandbox for running Lua code such that <em>no
matter what</em>, if the script is badly written or buggy, that the game simulation
can continue without being compromised. Tasks could be scheduled such that
they are assigned a certain amount of fuel "per second" up to a predefined
"tank limit", giving them a kind of "burst" fuel. In this way, a task that
periodically needs a lot of computational power can get it, but a <em>broken</em> task
that has infinite looped will always use a much smaller amount of sustainable
fuel per frame.<span><sup><a data-aside="aside-20">[20]</a></sup><span id="aside-20">You could get funky with this too, make game
entities that have scripts attached that always use the maximum fuel get
<em>hot</em> in game and make that have a gameplay effect. This might only be fun in
something like ComputerCraft... or maybe it's not fun at all and you shouldn't
listen to me about gamedev... probably the second one.</span></span>
</p>
<p>Besides just "consuming" fuel, another thing a Rust callback can do is
<em>interrupt</em> fuel. This is quite similar in behavior to just consuming all of
the remaining fuel so the difference isn't that important, but it exists to mesh
well with the use case described before, where we want to give tasks a
sizeable "reserve tank" of fuel. "Interrupting" fuel flow makes the outer
<code>Executor::step</code> <em>immediately</em> return to the Rust code calling it, no matter the
amount of fuel currently consumed. This is mostly useful for technical purposes,
for example if one Lua task is waiting on some event and cannot possibly
currently make any progress, or if some callback <em>must</em> return to the outer Rust
caller immediately to take effect.</p>
<p>This is what is happening on REPLs on this page when <code>print</code> is called! I
noticed when testing the REPL I was writing that calling <code>print</code> in a hot loop
slowed down the whole page quite a lot, and mostly just to create and destroy
a bunch of output <code>div</code>s faster than they could be read as the output went far
past the console scrollback limit. So, to fix this, I made <code>print</code> callbacks
in this page <em>always call <code>Fuel::interrupt</code></em> to make the page more responsive
during hot loops. When you call <code>print</code> in a REPL on this page, it immediately
yields control to the browser task queue! This is the sort of thing that having
deep control over VM scheduling allows you to do: <em>customize</em> it to make it
work in many different situations.<span><sup><a data-aside="aside-21">[21]</a></sup><span id="aside-21"><em>Yes</em> I know you can also use
<code>lua_yield</code> in a callback for the same effect, but crucially, that means you
<em>cannot</em> mix these callbacks with normal Lua coroutines. I'm going to talk more
about this before the end, I promise.</span></span>
</p>
<h3 id="symmetric-coroutines-and-coroutine-yieldto">"Symmetric" Coroutines and <code>coroutine.yieldto</code></h3>
<p>It's tough to talk about coroutines because there tend to not be universally
agreed upon definitions, but I'm going to try. You might want to have the
<a href="https://en.wikipedia.org/wiki/Coroutine">wikipedia article</a> on coroutines and
possibly <a href="https://dl.acm.org/doi/pdf/10.1145/1462166.1462167">this paper</a> open
if you want the full extra credit for this section.</p>
<p>Lua has what is usually referred to as "asymmetric coroutines", which
are (as far as I can tell) the most commonly seen type of coroutine.
This is also the same sort of coroutine that Rust supports with the
(unstable)
<a href="https://doc.rust-lang.org/stable/std/ops/trait.Coroutine.html">std::ops::Coroutine</a>
trait. As such, this can feel like a fancy term for a simple idea, but it refers
to the limitation that coroutines yield <em>only to their caller</em>. It is also
possible to instead support fully "symmetric" coroutines that can yield <em>to any
other coroutine</em>, not just the calling one!</p>
<p>This is probably easier to understand expressed as a Lua function that <em>almost</em>
provides what we want. Symmetric coroutines work as if we had the following
function in Lua:</p>
<pre data-lang="lua"><code data-lang="lua"><span><span><span>--</span> We want to yeild control to another coroutine directly, so we need to yield
</span></span><span><span><span>--</span> control *and* resume another coroutine somehow at the same time.
</span></span><span><span><span><span>function</span> <span><span>yieldto</span></span><span><span>(</span><span>co</span><span>)</span></span>
</span></span></span><span><span><span>    <span> Unfortunately this doesn't quite work as is, because there is no such
</span></span></span></span><span><span><span>    <span> thing as a "tail yield" in standard Lua. This will resume the given
</span></span></span></span><span><span><span>    <span> coroutine, but it will keep around a stack frame for *this* coroutine
</span></span></span></span><span><span><span>    <span> until the entire sequence of coroutines eventually returns, which may
</span></span></span></span><span><span><span>    <span> be *never*. As it is, this "works" but it is a stack leak.
</span></span></span></span><span><span><span>    <span>coroutine</span><span>.</span><span><span>yield</span></span><span><span><span>(</span><span>coroutine</span><span>.</span><span><span>resume</span></span><span><span><span>(</span><span>co</span><span>)</span></span></span><span>)</span></span></span>
</span></span></span><span><span><span><span>end</span></span></span>
</span></code></pre>
<p>We want a function that can yield <em>to</em> another coroutine by resuming that
coroutine and yielding to the caller... whatever that other coroutine would
have yielded. The <em>problem</em> is that this function as written is a stack leak:
there is no way for normal Lua to "tail yield" like it can "tail return", the
<code>yieldto</code> function as written will consume stack space for the current call to
<code>coroutine.resume</code>, only giving the stack space up when the stack of coroutines
eventually finishes. True symmetric coroutines do not have this limitation, and
can mutually yield to each other without bound.</p>
<p>Because of the way <code>piccolo</code>'s <code>Executor</code> works, Lua control flow that might
normally be expressed as a Rust function call (such as a callback resuming
another coroutine) is <em>reified</em> into the structure of the <code>Executor</code>, and the
actual Rust control flow always "jumps back up" to <code>Executor::step</code>. This is
actually the origin of the term "trampoline style" when referring to stackless
interpreters, that control flow always "jumps back" to the same place. In
PUC-Rio Lua, <code>coroutine.resume</code> is a normal C function call, so it is impossible
to directly support this "tail yield" operation and avoid the stack leak, but
<code>piccolo</code>'s design <em>just</em> so happens to allow easily providing this as a builtin
function: <code>coroutine.yieldto</code>, enabling full symmetric coroutines!</p>
<p>Let's see how it works...</p>
<pre data-lang="lua"><code data-lang="lua"><span><span><span>--</span> I'm deeply sorry for this example...
</span></span><span><span><span><span>function</span> <span><span>browse_internet</span></span><span><span>(</span><span>)</span></span>
</span></span></span><span><span><span>    <span>local</span> <span>be_bored</span>
</span></span></span><span><span><span>    <span>local</span> <span>be_optimistic</span>
</span></span></span><span><span><span>    <span>local</span> <span>be_dooming</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>be_bored</span> <span>=</span> <span>coroutine</span><span>.</span><span><span>create</span></span><span><span><span>(</span><span><span><span>function</span><span><span>(</span><span>)</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        <span>while</span> <span>true</span> <span><span>do</span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>print</span><span><span><span>(</span><span><span>"</span>I'm bored, I think I'll mindlessly browse The Internet<span>"</span></span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>coroutine</span><span>.</span><span><span>yieldto</span></span><span><span><span>(</span><span>be_optimistic</span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>        <span>end</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>    <span>end</span></span></span><span>)</span></span></span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>be_optimistic</span> <span>=</span> <span>coroutine</span><span>.</span><span><span>create</span></span><span><span><span>(</span><span><span><span>function</span><span><span>(</span><span>)</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        <span>while</span> <span>true</span> <span><span>do</span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>print</span><span><span><span>(</span><span><span>"</span>Maybe The Internet won't be so bad this time<span>"</span></span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>coroutine</span><span>.</span><span><span>yieldto</span></span><span><span><span>(</span><span>be_dooming</span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>        <span>end</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>    <span>end</span></span></span><span>)</span></span></span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>be_dooming</span> <span>=</span> <span>coroutine</span><span>.</span><span><span>create</span></span><span><span><span>(</span><span><span><span>function</span><span><span>(</span><span>)</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        <span>while</span> <span>true</span> <span><span>do</span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>print</span><span><span><span>(</span><span><span>"</span>I think I need a break from The Internet<span>"</span></span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>coroutine</span><span>.</span><span><span>yieldto</span></span><span><span><span>(</span><span>be_bored</span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>        <span>end</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>    <span>end</span></span></span><span>)</span></span></span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>coroutine</span><span>.</span><span><span>resume</span></span><span><span><span>(</span><span>be_bored</span><span>)</span></span></span>
</span></span></span><span><span><span><span>end</span></span></span>
</span></code></pre>
<p><strong>↓ You can run the 100% accurate Internet Simulator below ↓</strong>
</p>


<p>Now, unless you're already pretty familiar with coroutines (or for some
unearthly reason you decided to stop reading this and instead go carefully read
<a href="https://dl.acm.org/doi/pdf/10.1145/1462166.1462167">the paper I linked earlier</a>),
you might not know that "symmetric" and "asymmetric" coroutines are actually of
equivalent expressive power. Let's pretend that we don't have
<code>coroutine.yieldto</code> and transform the previous example a bit to make up for it.</p>
<pre data-lang="lua"><code data-lang="lua"><span><span><span>--</span> I'm still sorry...
</span></span><span><span><span><span>function</span> <span><span>browse_internet</span></span><span><span>(</span><span>)</span></span>
</span></span></span><span><span><span>    <span> Because we don't have proper `coroutine.yieldto`, we need some way of
</span></span></span></span><span><span><span>    <span> returning to the outer level and resuming the next coroutine. We can't
</span></span></span></span><span><span><span>    <span> provide this as a function because there's no way around the stack
</span></span></span></span><span><span><span>    <span> leak, but we can provide it as an outer "runner".
</span></span></span></span><span><span><span>    <span><span><span>function</span> <span><span>run_coroutines</span></span><span><span>(</span><span>co</span><span>,</span> <span>...</span><span>)</span></span>
</span></span></span></span></span><span><span><span><span><span>        </span></span></span></span></span><span><span><span><span><span>        </span></span></span></span></span><span><span><span><span><span>        </span></span></span></span></span><span><span><span><span><span>        </span></span></span></span></span><span><span><span><span><span>        <span>local</span> <span>_</span><span>,</span> <span>next</span> <span>=</span> <span>coroutine</span><span>.</span><span><span>resume</span></span><span><span><span>(</span><span>co</span><span>,</span> <span>...</span><span>)</span></span></span>
</span></span></span></span></span><span><span><span><span><span>        <span>if</span> <span>not</span> <span>next</span> <span><span>then</span>
</span></span></span></span></span></span><span><span><span><span><span><span>            <span>return</span>
</span></span></span></span></span></span><span><span><span><span><span><span>        <span>end</span></span>
</span></span></span></span></span><span><span><span><span><span>        <span>return</span> <span>run_coroutines</span><span><span><span>(</span><span>next</span><span>)</span></span></span>
</span></span></span></span></span><span><span><span><span><span>    <span>end</span></span></span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Afterwards, we change every call to `coroutine.yieldto` to
</span></span></span></span><span><span><span>    <span> `coroutine.yield`, and wrap the coroutines in our "runner".
</span></span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>local</span> <span>be_bored</span>
</span></span></span><span><span><span>    <span>local</span> <span>be_optimistic</span>
</span></span></span><span><span><span>    <span>local</span> <span>be_dooming</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>be_bored</span> <span>=</span> <span>coroutine</span><span>.</span><span><span>create</span></span><span><span><span>(</span><span><span><span>function</span><span><span>(</span><span>)</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        <span>while</span> <span>true</span> <span><span>do</span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>print</span><span><span><span>(</span><span><span>"</span>I'm bored, I think I'll mindlessly browse The Internet<span>"</span></span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>coroutine</span><span>.</span><span><span>yield</span></span><span><span><span>(</span><span>be_optimistic</span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>        <span>end</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>    <span>end</span></span></span><span>)</span></span></span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>be_optimistic</span> <span>=</span> <span>coroutine</span><span>.</span><span><span>create</span></span><span><span><span>(</span><span><span><span>function</span><span><span>(</span><span>)</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        <span>while</span> <span>true</span> <span><span>do</span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>print</span><span><span><span>(</span><span><span>"</span>Maybe The Internet won't be so bad this time<span>"</span></span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>coroutine</span><span>.</span><span><span>yield</span></span><span><span><span>(</span><span>be_dooming</span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>        <span>end</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>    <span>end</span></span></span><span>)</span></span></span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>be_dooming</span> <span>=</span> <span>coroutine</span><span>.</span><span><span>create</span></span><span><span><span>(</span><span><span><span>function</span><span><span>(</span><span>)</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        <span>while</span> <span>true</span> <span><span>do</span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>print</span><span><span><span>(</span><span><span>"</span>I think I need a break from The Internet<span>"</span></span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>            <span>coroutine</span><span>.</span><span><span>yield</span></span><span><span><span>(</span><span>be_bored</span><span>)</span></span></span>
</span></span></span></span></span></span></span></span><span><span><span><span><span><span><span><span>        <span>end</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>    <span>end</span></span></span><span>)</span></span></span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span>run_coroutines</span><span><span><span>(</span><span>be_bored</span><span>)</span></span></span>
</span></span></span><span><span><span><span>end</span></span></span>
</span></code></pre>
<p><strong>↓ After the above transform, our simulator is still 100% Accurate ↓</strong>
</p>


<p>So, the <code>coroutine.yieldto</code> function that <code>piccolo</code> provides doesn't <em>actually</em>
make Lua fundamentally any more powerful, instead it is more of a convenience.
So why bring this up? Well, besides it being a very <em>neat</em> function to be able
to provide, and <code>piccolo</code> being able to provide it in a way that <em>doesn't</em>
require any outside "runner", I wanted to bring attention to the <em>idea</em> of
transforming code like this.</p>
<p>It's no coincidence that <code>piccolo</code> has an easy time providing
<code>coroutine.yieldto</code>. The above transform takes normal control flow and turns
it into control flow via <em>return values</em>. This is very nearly the <em>exact same</em>
transform that has already been done by <code>piccolo</code>'s stackless design that I've
been talking about this whole time.</p>
<p>In fact, let's look at the actual implementation of <code>coroutine.yieldto</code> in the code for
the <code>coroutine</code> lib inside <code>piccolo</code>:</p>
<pre data-lang="rust"><code data-lang="rust"><span>coroutine<span>.</span><span>set</span><span><span>(</span>ctx<span>,</span> <span><span>"</span>yieldto<span>"</span></span><span>,</span> <span>Callback<span>::</span></span>from_fn<span><span>(</span><span>&amp;</span>ctx<span>,</span> <span><span><span>|</span></span></span><span><span><span>ctx</span><span>,</span> _<span>,</span> <span>mut</span> <span>stack</span><span>|</span></span> </span><span><span><span>{</span>
</span></span></span></span></span><span><span><span><span><span>    <span>let</span> thread<span>:</span> Thread <span>=</span> stack<span>.</span><span>from_front</span><span><span>(</span>ctx</span><span><span>)</span></span><span>?</span><span>;</span>
</span></span></span></span></span><span><span><span><span><span>    <span>Ok</span><span><span>(</span><span>CallbackReturn<span>::</span></span>Yield <span><span>{</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        to_thread<span>:</span> <span>Some</span><span><span>(</span>thread</span><span><span>)</span></span><span>,</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        then<span>:</span> <span>None</span><span>,</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>    </span><span><span>}</span></span></span><span><span>)</span></span>
</span></span></span></span></span><span><span><span><span><span></span><span><span>}</span></span></span></span><span><span>)</span></span></span><span><span>)</span></span><span>.</span><span>unwrap</span><span><span>(</span></span><span><span>)</span></span><span>;</span>
</span></code></pre>
<p>Ignoring some of the unimportant details, we see that the <code>'yieldto'</code> field is
set to a callback function, and that callback function takes a single argument
of a <code>Thread</code>. Then, it returns an enum value <code>CallbackReturn::Yield</code> and states
which thread to yield to (the normal <code>coroutine.yield</code> function simply sets
<code>to_thread</code> to <code>None</code> instead). This is <em>exactly</em> the same as the transform that
we've already done above, which shows why this is so simple for <code>piccolo</code> to
provide: <code>piccolo::Executor</code> <em>already works like this</em>.</p>
<h2 id="the-big-lie">The "Big Lie"</h2>
<p>So far I have talked a lot about <code>piccolo</code>'s <em>unique</em> design, and how it allows
<code>piccolo</code> to have powers that other Lua interpreters <em>can't have</em>. I have been
lying to you! The actual truth is rather complicated, and you need the context
of everything I've said so far to fully understand it.</p>
<p>The real truth is... PUC-Rio Lua can already sort of do about 70% of the same
things <code>piccolo</code> can do. In fact, <code>piccolo</code> is <strong>not</strong> uniquely designed at all,
it is the <em>natural conclusion</em> to the way PUC-Rio Lua already works.</p>
<p>Let's start by doing something that I think almost nobody who uses PUC-Rio Lua
or Luau or LuaJIT knows that they can do.<span><sup><a data-aside="aside-22">[22]</a></sup><span id="aside-22">LuaJIT is slightly more
complicated because you probably have to <em>disable the JIT</em> to make it work in
all cases.</span></span>
 We're going to implement tasklets using the plain Lua C API!</p>
<p>I don't have the energy to get normal PUC-Rio Lua 5.4 working in a browser with
Emscripten, so you won't be able to run these examples interactively, you'll
just have to trust me (or set up a C build environment with Lua 5.4 and try
them yourself). You'll also have to understand C and the PUC-Rio Lua C API to
fully understand these examples, but hopefully I can comment them enough to show
what's going on even if you don't.</p>
<pre data-lang="c"><code data-lang="c"><span><span><span>#include</span> <span><span>&lt;</span>assert.h<span>&gt;</span></span>
</span></span><span><span><span>#include</span> <span><span>&lt;</span>stdbool.h<span>&gt;</span></span>
</span></span><span>
</span><span><span><span>#include</span> <span><span>"</span>lauxlib.h<span>"</span></span>
</span></span><span><span><span>#include</span> <span><span>"</span>lua.h<span>"</span></span>
</span></span><span><span><span>#include</span> <span><span>"</span>lualib.h<span>"</span></span>
</span></span><span>
</span><span><span><span>//</span> We will set up a "hook" function for the Lua VM to periodically call.
</span></span><span><span><span>//</span>
</span></span><span><span><span>//</span> In this case, the "hook" function always *yields*, which will only work if
</span></span><span><span><span>//</span> the calling Lua thread is itself a coroutine (and not the main thread).
</span></span><span><span><span>//</span>
</span></span><span><span><span>//</span> We are sort of using the "hook" function to *externally insert* calls to
</span></span><span><span><span>//</span> `coroutine.yield` periodically in otherwise unmodified Lua.
</span></span><span><span>void</span> <span><span>yield_hook</span></span><span><span><span>(</span></span></span><span><span>lua_State<span>*</span> <span>L</span><span>,</span> lua_Debug<span>*</span> <span>_ar</span><span>)</span></span></span><span> </span><span><span><span>{</span></span></span><span><span>
</span></span></span><span><span><span>    <span><span>lua_yield</span><span><span>(</span></span></span><span><span>L<span>,</span> <span>0</span></span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span></span></span><span><span><span>}</span></span></span>
</span><span>
</span><span><span>int</span> <span><span>main</span></span><span><span><span>(</span></span></span><span><span><span>int</span> <span>_argc</span><span>,</span> <span>char</span><span>*</span><span>*</span> <span>_argv</span><span>)</span></span></span><span> </span><span><span><span>{</span></span></span><span><span>
</span></span></span><span><span><span>    <span> Open the main Lua state and all of the Lua stdlib.
</span></span></span></span><span><span><span>    lua_State<span>*</span> L <span>=</span> <span><span>luaL_newstate</span><span><span>(</span></span></span><span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>    <span><span>luaL_openlibs</span><span><span>(</span></span></span><span><span>L</span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Create a thread separate from the main one to use as our coroutine
</span></span></span></span><span><span><span>    <span> thread.
</span></span></span></span><span><span><span>    lua_State<span>*</span> co <span>=</span> <span><span>lua_newthread</span><span><span>(</span></span></span><span><span>L</span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Load *unmodified* Lua code, no manual calls to `coroutine.yield` are
</span></span></span></span><span><span><span>    <span> necessary here.
</span></span></span></span><span><span><span>    <span><span>assert</span><span><span>(</span></span></span><span><span>
</span></span></span></span></span><span><span><span><span><span>        <span><span>luaL_loadstring</span><span><span>(</span></span></span><span><span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            co<span>,</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>while true do<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>    print('hello')<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>end<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        </span></span><span><span><span>)</span></span></span>
</span></span></span></span></span><span><span><span><span><span>        <span>==</span> LUA_OK
</span></span></span></span></span><span><span><span><span><span>    </span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>    <span> Set our hook function on the coroutine thread, *forcing* the coroutine to
</span></span></span></span><span><span><span>    <span> yield whenever the hook is called.
</span></span></span></span><span><span><span>    <span>
</span></span></span></span><span><span><span>    <span> In this case, the hook will be called every 256 VM instructions.
</span></span></span></span><span><span><span>    <span><span>lua_sethook</span><span><span>(</span></span></span><span><span>co<span>,</span> yield_hook<span>,</span> LUA_MASKCOUNT<span>,</span> <span>256</span></span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Our main loop.
</span></span></span></span><span><span><span>    <span>
</span></span></span></span><span><span><span>    <span> Every time through the loop, we resume our coroutine. The hook function
</span></span></span></span><span><span><span>    <span> *externally* causes the called Lua code to periodically yield without
</span></span></span></span><span><span><span>    <span> having to modify our Lua source code to manually add `coroutine.yield`
</span></span></span></span><span><span><span>    <span> statements.
</span></span></span></span><span><span><span>    <span>
</span></span></span></span><span><span><span>    <span> When running this C code with my current version of Lua 5.4, I see 64
</span></span></span></span><span><span><span>    <span> "hello" lines for every 1 "there" line, showing that execution correctly
</span></span></span></span><span><span><span>    <span> periodically returns to C.
</span></span></span></span><span><span><span>    <span>while</span> <span><span>(</span><span>true</span><span>)</span></span> <span><span>{</span>
</span></span></span></span><span><span><span><span>        <span>int</span> nresults<span>;</span>
</span></span></span></span><span><span><span><span>        <span><span>assert</span><span><span>(</span></span></span><span><span><span><span>lua_resume</span><span><span>(</span></span></span><span><span>co<span>,</span> <span>NULL</span><span>,</span> <span>0</span><span>,</span> <span>&amp;</span>nresults</span></span><span><span><span>)</span></span></span> <span>==</span> LUA_YIELD</span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span></span><span><span><span><span>        <span><span>lua_pop</span><span><span>(</span></span></span><span><span>co<span>,</span> nresults</span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span></span><span><span><span><span>        <span><span>printf</span><span><span>(</span></span></span><span><span><span><span>"</span>there<span>\n</span><span>"</span></span></span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span></span><span><span><span><span>    <span>}</span></span>
</span></span></span><span><span><span></span></span><span><span><span>}</span></span></span>
</span></code></pre>
<p>The example above shows a fully working, if simplistic, Lua tasklet system.
In the same way that <code>piccolo</code>'s <code>Executor::step</code> function works "as though"
there are invisible periodic calls to <code>coroutine.yield</code> everywhere, calling
<code>lua_yield</code> from a <code>lua_Hook</code> function <em>also</em> (and much more literally) inserts
invisible periodic calls to <code>coroutine.yield</code>. This is more or less everything
required for a tasklet!</p>
<p>PUC-Rio Lua can do about 70% of what <code>piccolo</code> can do, right out of the box! The
<em>problem</em> is the <strong>last 30%</strong>. Let's modify the example above <em>very slightly</em>...</p>
<pre data-lang="c"><code data-lang="c"><span><span><span>#include</span> <span><span>&lt;</span>assert.h<span>&gt;</span></span>
</span></span><span><span><span>#include</span> <span><span>&lt;</span>stdbool.h<span>&gt;</span></span>
</span></span><span>
</span><span><span><span>#include</span> <span><span>"</span>lauxlib.h<span>"</span></span>
</span></span><span><span><span>#include</span> <span><span>"</span>lua.h<span>"</span></span>
</span></span><span><span><span>#include</span> <span><span>"</span>lualib.h<span>"</span></span>
</span></span><span>
</span><span><span><span>//</span> Same as last time, we effectively insert invisible periodic calls to
</span></span><span><span><span>//</span> `coroutine.yield`.
</span></span><span><span>void</span> <span><span>yield_hook</span></span><span><span><span>(</span></span></span><span><span>lua_State<span>*</span> <span>L</span><span>,</span> lua_Debug<span>*</span> <span>_ar</span><span>)</span></span></span><span> </span><span><span><span>{</span></span></span><span><span>
</span></span></span><span><span><span>    <span><span>lua_yield</span><span><span>(</span></span></span><span><span>L<span>,</span> <span>0</span></span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span></span></span><span><span><span>}</span></span></span>
</span><span>
</span><span><span>int</span> <span><span>main</span></span><span><span><span>(</span></span></span><span><span><span>int</span> <span>_argc</span><span>,</span> <span>char</span><span>*</span><span>*</span> <span>_argv</span><span>)</span></span></span><span> </span><span><span><span>{</span></span></span><span><span>
</span></span></span><span><span><span>    <span> Open the main Lua state and all of the Lua stdlib.
</span></span></span></span><span><span><span>    lua_State<span>*</span> L <span>=</span> <span><span>luaL_newstate</span><span><span>(</span></span></span><span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>    <span><span>luaL_openlibs</span><span><span>(</span></span></span><span><span>L</span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Create a thread separate from the main one to use as our coroutine
</span></span></span></span><span><span><span>    <span> thread.
</span></span></span></span><span><span><span>    lua_State<span>*</span> co <span>=</span> <span><span>lua_newthread</span><span><span>(</span></span></span><span><span>L</span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Still *unmodified* Lua code with no manual calls to `coroutine.yield`.
</span></span></span></span><span><span><span>    <span>
</span></span></span></span><span><span><span>    <span> We make one small change though, before calling `print('hello')`, we call
</span></span></span></span><span><span><span>    <span> `table.sort` to sort a Lua table. The callback isn't important here, but
</span></span></span></span><span><span><span>    <span> what's important is that `table.sort` is a C function which calls a Lua
</span></span></span></span><span><span><span>    <span> function (the comparator).
</span></span></span></span><span><span><span>    <span>
</span></span></span></span><span><span><span>    <span> We put a big for loop in the comparator function just to make sure the VM
</span></span></span></span><span><span><span>    <span> spends some actual time here, but no matter what, the same behavior will
</span></span></span></span><span><span><span>    <span> eventually occur if you use Lua -&gt; C -&gt; Lua callbacks at all.
</span></span></span></span><span><span><span>    <span><span>assert</span><span><span>(</span></span></span><span><span>
</span></span></span></span></span><span><span><span><span><span>        <span><span>luaL_loadstring</span><span><span>(</span></span></span><span><span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            co<span>,</span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>while true do<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>    table.sort({3, 2, 1}, function(a, b)<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>        for _ = 1,1000000 do end<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>        return a &lt; b<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>    end)<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>    print('hello')<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>            <span><span>"</span>end<span>\n</span><span>"</span></span>
</span></span></span></span></span></span></span><span><span><span><span><span><span><span>        </span></span><span><span><span>)</span></span></span>
</span></span></span></span></span><span><span><span><span><span>        <span>==</span> LUA_OK
</span></span></span></span></span><span><span><span><span><span>    </span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>    <span> Set our hook function just like last time to execute every 256 VM
</span></span></span></span><span><span><span>    <span> instructions.
</span></span></span></span><span><span><span>    <span><span>lua_sethook</span><span><span>(</span></span></span><span><span>co<span>,</span> yield_hook<span>,</span> LUA_MASKCOUNT<span>,</span> <span>256</span></span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    <span> Main loop, unmodified from the previous example.
</span></span></span></span><span><span><span>    <span>while</span> <span><span>(</span><span>true</span><span>)</span></span> <span><span>{</span>
</span></span></span></span><span><span><span><span>        <span>int</span> nresults<span>;</span>
</span></span></span></span><span><span><span><span>        <span><span>assert</span><span><span>(</span></span></span><span><span><span><span>lua_resume</span><span><span>(</span></span></span><span><span>co<span>,</span> <span>NULL</span><span>,</span> <span>0</span><span>,</span> <span>&amp;</span>nresults</span></span><span><span><span>)</span></span></span> <span>==</span> LUA_YIELD</span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span></span><span><span><span><span>        <span><span>lua_pop</span><span><span>(</span></span></span><span><span>co<span>,</span> nresults</span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span></span><span><span><span><span>        <span><span>printf</span><span><span>(</span></span></span><span><span><span><span>"</span>there<span>\n</span><span>"</span></span></span></span><span><span><span>)</span></span></span><span>;</span>
</span></span></span></span><span><span><span><span>    <span>}</span></span>
</span></span></span><span><span><span></span></span><span><span><span>}</span></span></span>
</span></code></pre>
<p>If you try and run this C code, it will immediately error on this <code>assert</code> in the main loop:</p>
<pre data-lang="c"><code data-lang="c"><span>        <span><span>assert</span><span><span>(</span></span></span><span><span><span><span>lua_resume</span><span><span>(</span></span></span><span><span>co<span>,</span> <span>NULL</span><span>,</span> <span>0</span><span>,</span> <span>&amp;</span>nresults</span></span><span><span><span>)</span></span></span> <span>==</span> LUA_YIELD</span><span><span>)</span></span></span><span>;</span>
</span></code></pre>
<p>The reason for this is that <code>lua_resume</code> is erroring and returns <code>LUA_ERRRUN</code>
instead of <code>LUA_YIELD</code>. This is happening because <code>lua_yield</code>, which is
being called from our "hook" function, <em>cannot be called from within most
C callbacks</em>. What is the C callback? It's our call to the stdlib function
<code>table.sort</code> within the body of the tasklet loop. At the time that the call to
<code>lua_yield</code> is called incorrectly, the C call stack looks something like this
(simplified):</p>
<p><code>main</code> -&gt; <code>lua_resume</code> -&gt; <code>luaV_execute</code> (the main VM loop) -&gt; <code>sort</code> (in
ltablib.c) -&gt; <code>lua_call</code> -&gt; <code>luaV_execute</code> (the main VM loop again, for the
comparator) -&gt; <code>yield_hook</code> -&gt; <code>lua_yield</code></p>
<p>PUC-Rio Lua uses the normal C stack for much of its internal state, and calls
to <code>lua_yield</code> are expressed as a C
<a href="https://en.cppreference.com/w/c/program/longjmp">longjmp</a>, jumping back up to
an upper C frame and popping any call frames in-between from the call stack.
So, certain operations are simply <em>disallowed</em> when the inner call to <code>longjmp</code>
would destroy essential information about the runtime state.</p>
<p>There IS a way around this problem, however. Ultimately, the problem is that
the call to <code>table.sort</code>, a C function, in turn calls a Lua function with the C
API function <code>lua_call</code>. Any Lua function called this way is <em>disallowed</em> from
calling <code>coroutine.yield</code> (or its C equivalent <code>lua_yield</code>). PUC-Rio's C API
provides a <em>special</em> version of <code>lua_call</code> to get around this:
<a href="https://www.lua.org/manual/5.4/manual.html#lua_callk">lua_callk</a>. You can read
in more detail about the entire situation in the section of the PUC-Rio Lua 5.4
manual called
<a href="https://www.lua.org/manual/5.4/manual.html#4.5">Handling Yields in C</a>.</p>
<p>This does work, and in this way, PUC-Rio Lua provides the ability to yield from
situations like this Lua -&gt; C -&gt; Lua sandwich. However, <code>table.sort</code> is not
written this way, and in fact none of the stdlib is written this way at all!
The reason for this is, frankly, that transforming C code to work this way
<em>is enormously difficult</em>. The C code in question must be able to handle a
<em><code>longjmp</code></em>, when the inner Lua code triggering a <code>longjmp</code> will <em>destroy</em>
(not even unwind!) the current C stack up to where it was called, and the only
way for the C code to resume is through the <code>lua_KFunction</code> and <code>lua_KContext</code>
passed to <code>lua_callk</code>. There are no <code>Drop</code> impls to rely on, no automatic memory
management, no coroutines, the C code must be transformed so that it relies
entirely on a type pointed to by a <code>lua_KContext</code> for its state, so that it can
be suspended at any time.<span><sup><a data-aside="aside-23">[23]</a></sup><span id="aside-23">This should sound familiar.</span></span>
</p>
<p>This is not the only problem, either. By repurposing normal Lua coroutine yields
like this to yield back to C, you <em>take away Lua coroutines from the usable part
of the Lua language</em>. If we were to try to use normal coroutines in our tasklet
system, the inner <code>lua_yield</code> from the hook function would just yield to the
nearest thing that has called <code>lua_resume</code>, which in this case would be the
<em>Lua thread</em> which called <code>coroutine.resume</code> and not the top-level C code. I
<strong>love</strong> coroutines,<span><sup><a data-aside="aside-24">[24]</a></sup><span id="aside-24">As much or more than I love REPLs!</span></span>
 and
Lua without coroutines is frankly no longer really Lua, but with enough effort,
I think you <em>could</em> get around this problem too! Remember the transform we did
before, where we made symmetric coroutines out of asymmetric ones? You can do
something similar with the normal Lua C API but wrapping <code>coroutine.yield</code> in
a special version that instead returned whether or not it is a <em>real</em> yield or
a synthetic one from the <code>lua_Hook</code> function. You would have to go further than
this to make it work, restructuring all of the other <code>coroutine</code> methods so that
which thread was waiting on the results of which other thread was kept in an
array rather than the C stack, so that the coroutine "tasklet" system continues
to work while providing a similar, inner system for "normal" Lua coroutines.</p>
<p>You could also do the work of re-implementing every single function in the
stdlib that calls back into Lua in such a way that it used <code>lua_callk</code> with a
continuation function instead of <code>lua_call</code>, too, so that every C function in
the stdlib became suspendable. For good measure, you could also periodically
yield long running callbacks even if they <em>didn't</em> call back into Lua, just to
make sure that execution always jumped back out to the outermost C code in a
bounded amount of time.</p>
<p>So lets summarize this list of theoretical changes we can make to PUC-Rio Lua to
make a <em>complete</em> tasklet system.<span><sup><a data-aside="aside-25">[25]</a></sup><span id="aside-25">The "30%" is obviously very
generous, in reality, the last 30% makes this "vanilla" tasklet system useless
in a huge number of cases. It's not that 30% of use cases are non-viable,
it's that 30% of the surface area of Lua no longer works, so <em>most</em> uses are
non-viable.</span></span>
</p>
<ol>
<li>Use <code>lua_Hook</code> functions to insert synthetic calls to <code>lua_yield</code> within all
Lua code.</li>
<li>Make <em>all</em> of the stdlib that calls Lua functions suspendable by using
<code>lua_callk</code> and continuations.</li>
<li>Reimplement the Lua <code>coroutine</code> library making it one level of abstraction
up from normal calls to <code>lua_yield</code>, so that normal Lua coroutines can still
work. We would need to implement <code>coroutine.resume</code> in a different way that
does not use the C stack. We can do a transform similar to implementing
"symmetric" coroutines over "asymmetric" ones here, where we implement
"Lua" coroutines over our lower level "synthetic" yielding. Lua calls to
<code>coroutine.yield</code> and <code>coroutine.resume</code> would now <em>both</em> be a yield to
the calling C code, and the yielded values would tell the outer C code what
to do next (whether to resume another coroutine or yield to whatever the
"upper" coroutine was). As a side effect, <code>coroutine.yieldto</code> becomes easy
to implement.</li>
<li>For good measure, keep track of some unit of time cost in all callbacks, and
insert calls to <code>lua_yieldk</code> in all long running callbacks so we know that
control will always return to the outer calling C code in a reasonable amount
of time.</li>
</ol>
<p>We have now reached, very roughly, the current design of <code>piccolo</code>.</p>
<h2 id="rust-coroutines-lua-coroutines-and-snarfing">Rust Coroutines, Lua Coroutines, and Snarfing</h2>
<p>In the previous section I laid out a rough explanation of how to transform
PUC-Rio Lua <em>as it exists today</em> and build a system similar to what <code>piccolo</code>
forces by design. However, I am not aware of <em>anyone</em> ever doing anything like
this on a grand scale.<span><sup><a data-aside="aside-26">[26]</a></sup><span id="aside-26">I <em>know</em> people do tasklet systems in PUC-Rio
Lua and Luau, but I think they limit the tasklet code to very <em>simple</em> Lua that
doesn't require completely rewriting the Lua stdlib.</span></span>
 The reason for
this, I think, is simple, and that is that it is just <em>monumentally hard</em> to
write C callbacks this way!</p>
<p>The <em>same problem</em> exists in <code>piccolo</code> though, which I alluded to near the
beginning of this post. In <code>piccolo</code>, long running callbacks are represented by
a trait called
<a href="https://github.com/kyren/piccolo/blob/973951add4ad02d4fe5c0b27079ce342464a80c2/src/callback.rs#L215">Sequence</a>
which allows them to be suspended. More precisely, it is not so much that they
are <em>suspended</em> as it is that their API must mirror the outer <code>Executor</code> API
in piccolo: they must be <em>polled to completion</em>. Now, the situation is <strong>not
nearly</strong> as bad here as trying to use <code>lua_callk</code> / <code>lua_pcallk</code> / <code>lua_yieldk</code>
in plain C, but fundamentally it can still be more than a <em>little</em> painful.</p>
<p>The <code>Sequence</code> trait shares a lot in common with the <code>Future</code> trait, in that
both represent an <em>operation that must be polled to completion</em>. Like I said
before when I was introducing the "stackless" design, this similarity is no
accident.</p>
<p>I used the slang word "snarf" casually near the beginning of this post without
really explaining it. As I understand it, <em>snarfing</em> is something from PLT
jargon where if you implement an inner programming language B in an outer
programming language A, features from language A can be very easily and
automatically incorporated into language B. The most common example I see here
is actually <em>garbage collection</em>, if you implement a runtime for a garbage
collected language within another garbage collected language, <em>and you're okay
with the GC semantics from the outer language being reflected in the inner
language</em>, then you can <em>snarf</em> garbage collection from the outer language.
Think of implementing Lua in something like Go, even though the specifics of the
GC semantics in Lua may not be expressible in Go,<span><sup><a data-aside="aside-27">[27]</a></sup><span id="aside-27">I don't actually
know whether Go can express all of the minutia of Lua weak / ephemeron tables
and finalization.</span></span>
 it would probably be worth it to just <em>snarf</em> garbage
collection from Go and use <em>plain Go pointers</em> as Lua references.</p>
<p><em>Snarfing</em> can also be simpler things like implementing the stdlib of the
inner language using the stdlib of the outer language, in PUC-Rio Lua, there
is actually a good deal of functionality snarfed from C, most of it bad (like
<a href="https://www.lua.org/manual/5.4/manual.html#pdf-os.setlocale">os.setlocale</a>).</p>
<p>With <em>all</em> of this context finally out of the way, I can say what I've wanted to
say almost from the beginning of this very long blog post: <em>The original design
I wanted with <code>piccolo</code> and <code>gc-arena</code> was for Lua to snarf coroutines from
Rust.</em> I'm going to talk about this in more detail in a future post because this
post is so long already, but <code>Sequence</code>'s similarity to <code>Future</code> is because <em>I
want to use Rust coroutines to implement <code>piccolo</code></em>.</p>
<p>Think about it... why is PUC-Rio Lua's C interpreter written the way it is?
Why do <code>lua_callk</code> and <code>lua_pcallk</code> and <code>lua_yieldk</code> exist at all... they exist
because <em>C does not have coroutines</em>. This entire post I have been dancing
around this issue without addressing it because I feared it wouldn't make
sense without a mountain of context, but the entire time I've been talking
about "reifing state" that would "normally be held inside the call stack" into
objects that can be "polled to completion"... that is the very <em>core</em> of what a
coroutine <em>is</em>.</p>
<p>The only real downside to <code>gc-arena</code> and <code>piccolo</code> is having to do this
transform <strong>manually</strong> rather than letting the Rust compiler do it. The pain of
using <code>gc-arena</code> and <code>piccolo</code> is THE SAME pain that existed before Rust Async
was stabilized, with Future combinator libraries having to fill the gap. In
fact, an older version of <code>gc-arena</code> tried to provide combinators like this to
try and fill the gap, but making it fit into <code>piccolo</code> in a generic way was just
too painful and the combinator library was dropped. <code>piccolo::Sequence</code> actually
comes from the remains of this combinator library.</p>
<p>And all of this exists <em>solely</em> because <em>I can't figure out how to make a Rust
coroutine implement <code>gc_arena::Collect</code></em>.<span><sup><a data-aside="aside-28">[28]</a></sup><span id="aside-28">If I sound agitated,
it's because I spent a large amount of my life force trying to make this work
somehow. It needs Rust compiler changes.</span></span>
 If I could figure this out,
all of the problems with <code>gc-arena</code> and <code>piccolo</code> could melt away, and the Rust
compiler could do the painful transformation into "stackless" interpreter design
largely <em>for us</em>. Even the term "stackless" is shared with <em>Rust coroutines</em>.</p>
<h2 id="zooming-out">Zooming Out</h2>
<p>I'm gonna spend a bit of time here zooming out some more. Hopefully I won't zoom
out so far that I stop even being anchored to reality.</p>
<p>I think Rust's really cool core idea is the same that is shared by all systems
programming languages: that they are meant to be the <em>last stop</em> in a line
of other choices. I honestly <em>don't</em> think every single bit of software needs
to be written in Rust or any systems programming language. To me, systems
programming languages are languages where if you need to make system A work
with system B, <em>no matter what those systems are</em>, you can use them. Rust and C
are languages that you're supposed to use when what you're making needs to <em>fit
almost anywhere</em>. They're supposed to be the languages with the fewest possible
<em>assumptions</em> about how the rest of the world works, becasue they're meant to
be a host or glue language to inner systems with <em>better</em> assumptions, which are
<em>more</em> fit to purpose.</p>
<p>I know that this perspective on systems programming languages is not universal,
and that the real world is actually quite resistent to putting things into neat
little boxes like this, but I think this perspective is at least a useful one.</p>
<p>As such, I always flinch a little when I see people trying to write systems in
Rust as though they're trying to figure out the <em>one</em> solution for something,
assuming that no other solution would EVER need to exist within the same
program, or even need to exist at all. I think one size fits all solutions to
problems are not where Rust's strength is. Global async reactors / executors,
whole-program garbage collectors,<span><sup><a data-aside="aside-29">[29]</a></sup><span id="aside-29">Anything with global variables,
really. Hating on global variables might sound kinda 90s, but that doesn't
make it wrong.</span></span>
 heck even whole program <em>allocators</em>,<span><sup><a data-aside="aside-30">[30]</a></sup><span id="aside-30">Maybe Zig has some good ideas here?</span></span>
 all of these things always make me
<em>some</em> amount of uncomfortable because I just think that.. systems programming
languages are meant for making BIG end products or libraries that last a long
time, where more than one of these kinds of systems might need to exist at once,
or you may need to take them apart and use them a la carte. It's not that I
think these are wrong to use or wrong to make, I just don't prefer to use those
kinds of solutions myself <em>if I can avoid them</em> because also honestly <em>the user
of my library knows better than me</em>. There's a tradeoff in programming between
flexibility and fitness for purpose, systems programming is the way it is
because it's supposed to be <em>ultimately flexible</em>, it's what you use when a more
friendly, more tailored tool isn't <em>flexible enough</em>. I don't like going against
that idea when writing code that I want to last for a long time.<span><sup><a data-aside="aside-31">[31]</a></sup><span id="aside-31">I also understand that compromises have to be made sometimes, and usability
matters, so I genuinely mean no offense to libraries that might choose different
priorities, but it might not be what I <em>personally</em> want.</span></span>
</p>
<hr>
<p>One of my favorite parts of pretty much every version of Lua is how painless
it is to have multiple copies of the interpreter. If you've ever run into
large garbage collector pauses in other languages, this rarely happens in Lua
not because its garbage collector is <em>just that good</em>, but because you aren't
forced to have just ONE of them in your program, you can have as many of them
as you need, each in isolation from each other! Lua is a language that actually
meshes very well with my vague ideas about the core idea of systems programming,
because PUC-Rio Lua was written to <em>fit almost anywhere</em>. It's actually amazing
how neatly it fits into C, how it is fine being the <em>bottom</em> of the hierarchy,
it's <em>just</em> a C library and you <em>just</em> call C functions. Two distant parts
of a program both use Lua? Different <em>versions</em> of Lua with different loaded
libraries? You can make it work! It doesn't read external files unless you tell
it to, it doesn't do anything unless you tell it to because it makes <em>very few
assumptions</em>. It's <em>your tool</em>, and it fits neatly into whatever program you
already have. I think this is why it has remained so popular for so many years.
<span><sup><a data-aside="aside-32">[32]</a></sup><span id="aside-32">And so popular to integrate into big, complex systems programming
projects like video games.</span></span>
</p>
<p>I want to make a version of Lua that feels for Rust like PUC-Rio feels for C,
but to go even further. I want to make a version of Lua that <em>fits anywhere</em> as
much as I possibly can make it. Untrusted input! Cancellation! I want to make
a version of Lua with the <em>fewest possible opinions</em> about how the rest of the
program is structured. I know <code>piccolo</code> is a little far from that in several
ways right now, but that's my ultimate goal. I think stackless interpreters
actually fit this idea of being as <em>unobtrusive</em> as possible, of <em>fitting
anywhere</em> better than classical language interpreters.</p>
<p>Garbage collection systems in general are very often at odds with this idea of
<em>fitting anywhere</em>. There can only be one
<a href="https://www.hboehm.info/gc/">boehm gc</a> in a C program, after all. It's
interesting to me that garbage collector systems as a library <em>for</em> C have to be
so much slower than garbage collectors written for other languages but written
<em>in</em> C. The problem is not that C can't write fast garbage collection systems,
the problem is that the C language <em>itself</em> has so few "global assumptions"
built into it. It's much easier to write a garbage collector for a language
that can annotate where GC pointers are on the language's call stack or in heap
allocated objects than one like C, where it is extremely difficult to have such
things.</p>
<hr>
<p>Progress in systems programming languages seems to happen when new abstractions
are invented that give new <em>fundamental powers</em> but do NOT introduce more
required assumptions. I think <em>coroutines</em> are one of these, and that all
systems programming languages should have a stackless coroutine system because
it is the sort of thing that can <em>fit into other systems</em> as much as possible. I
think there is also some kind of deep connection between higher level languages
whose compilers / interpreters do things like annotate where garbage collected
pointers are stored in the language's call stack or automatically insert garbage
collector <em>safe points</em>, and the idea of coroutines as a <em>general reification</em>
of the call stack itself, letting the <em>language</em> do this manipulation rather
than a specialized compiler.</p>
<p>I came up with this connection way back in early 2019, but if we could make
Rust coroutines implement <code>Collect</code>, then this makes yield / await into <em>an
abstraction of the garbage collector safe point</em>. When a <code>Future</code> or <code>Coroutine</code>
yields control to the caller, all of the (apparent) <em>stack</em> variables are
guaranteed to be stored inside the state of the running coroutine. This would
allow <code>gc-arena</code> to easily separate collection and mutation in normal, straight
line Rust code that is simply <em>annotated</em> with <code>await</code>s (or <code>yield</code>s) to mark
where garbage collection can safely take place in the same way that a higher
level language runtime inserts <em>safe points</em> to mark where garbage collection
can safely take place.<span><sup><a data-aside="aside-33">[33]</a></sup><span id="aside-33">I feel like I'm doing a math proof but I
can't really figure out a direct line between A and B but I <em>know</em> they're the
same, so I go from A and get as far as I can towards B, and I go from B and get
as far as I can towards A, then I <em>wave my arms really wildly up and down</em> so
everyone gets it.</span></span>
</p>
<p>I think Rust is <em>so close</em> to having some very interesting, novel powers with
its coroutines by simply being able to <em>combine</em> existing features together.
I can automatically serialize a custom struct with <code>#[derive(Serialize)]</code>, and
I can automatically transform a function body into a state machine, but
<em>what I cannot</em> do is <code>#[derive(Serialize)]</code> this state machine, nor can I
<code>#[derive(Collect)]</code> it. <em><strong>Why not??</strong></em></p>
<p>This deserves its own blog post, but I felt like I couldn't rightly close
out this post without at least mentioning it. In my next post I'm going to
explore this idea more fully and hopefully try and actually make it "work" by
<em>pretending</em> to be able to <code>#[derive(Collect)]</code> a coroutine. I think that Rust
might need more than <em>just</em> this feature to make this system workable, but if
it did work, it could represent a largely painless, general, <em>isolated</em> system
for tracing garbage collection in Rust. A garbage collection system that can
<em>fit anywhere</em>.</p>
<p>Bye!</p>


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Hacker Search – A semantic search engine for Hacker News (206 pts)]]></title>
            <link>https://hackersearch.net</link>
            <guid>40238509</guid>
            <pubDate>Thu, 02 May 2024 17:01:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hackersearch.net">https://hackersearch.net</a>, See on <a href="https://news.ycombinator.com/item?id=40238509">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Hacker Search is a semantic search engine built on top of the Hacker News dataset. Use it to find high signal takes on topics you care about.</p><form action="/search" method="get"></form><div><p>Not sure what to search for? Try one of these:</p><!-- --> <p><a href="https://hackersearch.net/search?q=git+good+practices&amp;period=all-time">git good practices</a></p><!-- --><p>-</p><!-- --> <p><a href="https://hackersearch.net/search?q=how+do+diffusion+models+work&amp;period=last-12-months">how do diffusion models work</a></p><!-- --><p>-</p><!-- --> <p><a href="https://hackersearch.net/search?q=things+to+do+in+japan&amp;period=all-time">things to do in japan</a></p><!-- --><p>-</p><!-- --> <p><a href="https://hackersearch.net/search?q=ycombinator+interview+prep&amp;period=all-time">ycombinator interview prep</a></p></div></div><p><a href="https://hackersearch.net/legal">Terms &amp; Privacy Policy</a> | This site is not affiliated with or sponsored by Hacker News or Y Combinator</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Second Boeing whistleblower dies after raising concerns about 737 MAX (181 pts)]]></title>
            <link>https://www.independent.co.uk/news/world/americas/boeing-whistleblower-dies-second-b2538563.html</link>
            <guid>40238175</guid>
            <pubDate>Thu, 02 May 2024 16:35:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.independent.co.uk/news/world/americas/boeing-whistleblower-dies-second-b2538563.html">https://www.independent.co.uk/news/world/americas/boeing-whistleblower-dies-second-b2538563.html</a>, See on <a href="https://news.ycombinator.com/item?id=40238175">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main"><div data-newsletter-key="receiveEveningHeadlinesUSNews"><p><img src="https://static.independent.co.uk/static-assets/images/newsletter/evening-headlines/evening-headlines.png" loading="lazy" alt="Evening Headlines"></p><div><p><h3 data-nosnippet="">The latest headlines from our reporters across the US sent straight to your inbox each weekday</h3><h3 data-nosnippet="">Your briefing on the latest headlines from across the US</h3></p></div></div><p>A second <a href="https://www.independent.co.uk/topic/boeing">Boeing </a><a href="https://www.independent.co.uk/topic/whistleblower">whistleblower</a> has died after a sudden illness.</p><p>Joshua Dean, a former quality auditor at <a href="https://www.independent.co.uk/topic/spirit">Spirit</a> AeroSystems, <a href="https://www.independent.co.uk/travel/boeing-whistleblower-safety-report-news-b2530377.html">went public with claims</a> that the company’s leadership ignored <a href="https://www.independent.co.uk/travel/news-and-advice/boeing-737-max-safety-aircraft-passengers-crash-b2530199.html">manufacturing defects</a> in Boeing’s 737 MAX. Spirit AeroSystems is a <a href="https://www.independent.co.uk/travel/news-and-advice/boeing-alaska-airlines-everything-b2491091.html">Boeing</a> supplier, <a rel="nofollow" target="_blank" href="https://www.seattletimes.com/business/whistleblower-josh-dean-of-boeing-supplier-spirit-aerosystems-has-died/"><em>The Seattle Times</em></a> reports. </p><p>Dean, 45, had an active lifestyle and was believed to be in good health prior to his “sudden” death on Tuesday, following the onset of a sudden, fast-moving <a href="https://www.independent.co.uk/topic/infection">infection</a>. He was stricken with Influenza B and MRSA, and developed pneumonia, according to <a rel="nofollow" target="_blank" href="https://fox59.com/news/national-world/boeing-supplier-whistleblower-joshua-dean-dead-at-45/"><em>Fox59</em></a>. </p><p>He spent two weeks in critical condition before he died on Tuesday. </p><p>“Our thoughts are with Josh Dean’s family. This sudden loss is stunning news here and for his loved ones,” Spirit spokesperson Joe Buccino said. </p><p>Dean’s death is the latest point on a the timeline of strange mishaps that have plagued Boeing for more than a year. </p><p>On 5 January, a door plug panel on a new Alaska Airlines’ Boeing 737 MAX 9 aircraft <a href="https://www.independent.co.uk/travel/americas/boeing-alaska-airline-faa-investigation-b2477359.html">tore off</a> while it was cruising at 16,000 feet.</p><p>The FAA subsequently grounded 171 of the company’s MAX 9 aircrafts for review. It has also prohibited the company from increasing production of the MAX series aircraft, and has ordered it to develop a comprehensive plan to address “systemic quality-control issues”.</p><p>The Department of Justice has launched a criminal investigation into the Alaska Airlines incident. The investigation will centre on whether Boeing complied with a 2021 settlement it agreed to after a pair of deadly crashes that were attributed to faults in its 737 MAX Maneuvering Characterists Augmentation System, <a rel="nofollow" target="_blank" href="https://www.forbes.com/sites/marisagarcia/2024/03/10/doj-opens-new-criminal-investigation-of-boeing-737-max-incident/?sh=2cbfe964a2b2"><em>Forbes</em></a> reports.</p><div><figure><figcaption>Joshua Dean, 45, was a whislteblower who raised concerns over a Boeing supplier, Spirit AeroSystems. He died of a sudden infection, making him the second aviation industry whistleblower to die in 2024<span> <!-- -->(<!-- -->Supplied<!-- -->)</span></figcaption></figure></div><p>The Alaska Airlines flight wasn’t just the impetus for a federal investigation, it also was a “watershed moment” that drove the Boeing CEO and two other top executives to resign.</p><p>On 25 Monday, Mr Calhoun said the <a href="https://www.independent.co.uk/news/alaska-airlines-ap-boeing-737-max-boeing-fbi-b2517382.html">Alaska Airlines flight 1282 incident</a> was a “watershed moment” for Boeing, and said he would resign at the end of 2024. He insisted that the company needed a more “transparent” approach going forward.</p><p>“We must continue to respond to this accident with humility and complete transparency. We also must inculcate a total commitment to safety and quality at every level of our company,” Mr Calhoun wrote.</p><p>Dean’s actions suggest he agreed that more transparency was needed in the industry; he was fired from Spirit Aerosystems in April 2023, and he complained later that his termination was in retaliation for raising issues with the company over aircraft safety. </p><p>He said that “serious and gross misconduct by senior quality management of the 737 production line” had taken place at Spirit, in a complaint to the Federal Aviation Administration. </p><div><figure><figcaption>Second Boeing Whistleblower Dies Following Sudden Illness</figcaption></figure></div><p>He is the second whistleblower to die this year after coming forward about safety issues in the aviation manufacturing industry. </p><p>Boeing whistleblower John Barnett, 62, was <a href="https://www.independent.co.uk/news/boeing-ap-pete-buttigieg-alaska-airlines-national-transportation-safety-board-b2511004.html">found dead in his truck</a> in a hotel parking lot in South Carolina in March. </p><p>Barnett spoke out about alleged safety problems at the <a href="https://www.independent.co.uk/travel/news-and-advice/boeing-latam-airlines-stock-price-b2510919.html">aircraft manufacturing giant </a>and had been giving evidence in a lawsuit against the company prior to his death.</p><p>He had voiced safety concerns about the airline’s manufacturing facilities and gave his initial testimony just days before he was found dead. His death appeared to be from a self-inflicted gunshot wound, the Charleston County coroner told <a rel="nofollow" target="_blank" href="https://www.bbc.com/news/business-68534703">BBC News</a>.</p><p>Barnett alleged that in 2019, Boeing intentionally used defective parts in its planes and warned that passengers on its 787 Dreamliner might face a lack of oxygen if a sudden decompression occurred.</p><p>At that time, Boeing refuted his assertions, stating that the company follows the strictest safety protocols.</p><p>According to <a rel="nofollow" target="_blank" href="https://www.washingtonpost.com/transportation/2024/03/09/justice-department-investigation-boeing-max-accident/"><em>The Washington Post</em></a>, the Department of Justice (DOJ) has been conducting interviews with witnesses, including the crew on the Alaska Air flight, as part of its investigation. </p><div><figure><figcaption>John Barnett was found dead in his truck in a hotel parking lot in South Carolina in March<span> <!-- -->(<!-- -->@Megatron_ron/Twitter<!-- -->)</span></figcaption></figure></div><p>Mr Barnett had been staying at a hotel while in town to provide a deposition in the case.</p><p>His attorney, Brian Knowles, told <a rel="nofollow" target="_blank" href="https://www.tmz.com/2024/03/12/boeing-whistleblower-attorney-john-barnett-not-suicidal-investigation-lawsuit/"><em>TMZ</em></a> that he had doubts about the circumstances of his death.</p><p>“Today is a tragic day,” Mr Knowles wrote in an email to <a rel="nofollow" target="_blank" href="https://www.corporatecrimereporter.com/news/200/boeing-whistleblower-found-dead-in-charleston-after-break-in-depositions/"><em>Corporate Crime Reporter</em></a>. “John had been back and forth for quite some time getting prepared. The defence examined him for their allowed seven hours under the rules on Thursday.”</p><p>Mr Knowles also represented Dean. He told <em>The Seattle Times</em> he did not want to speculate on the nature of his clients’ deaths, but stressed the importance of whistleblowers. </p><p>“Whistleblowers are needed. They bring to light wrongdoing and corruption in the interests of society. It takes a lot of courage to stand up,” the attorney said. “It’s a difficult set of circumstances. Our thoughts now are with John’s family and Josh’s family.”</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rust: Box Is a Unique Type (112 pts)]]></title>
            <link>https://blog.nilstrieb.dev/posts/box-is-a-unique-type/</link>
            <guid>40238170</guid>
            <pubDate>Thu, 02 May 2024 16:34:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.nilstrieb.dev/posts/box-is-a-unique-type/">https://blog.nilstrieb.dev/posts/box-is-a-unique-type/</a>, See on <a href="https://news.ycombinator.com/item?id=40238170">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>We have all used <code>Box&lt;T&gt;</code> before in our Rust code. It’s a glorious type, with great ergonomics
and flexibility. We can use it to put our values on the heap, but it can do even more
than that!</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>struct</span> <span>Fields</span> {
</span></span><span><span>    a: String,
</span></span><span><span>    b: String,
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>let</span> fields <span>=</span> Box::new(Fields { 
</span></span><span><span>    a: <span>"a"</span>.to_string(), 
</span></span><span><span>    b: <span>"b"</span>.to_string() 
</span></span><span><span>});
</span></span><span><span>
</span></span><span><span><span>let</span> a <span>=</span> fields.a;
</span></span><span><span><span>let</span> b <span>=</span> fields.b;
</span></span></code></pre></div><p>This kind of partial deref move is just one of the spectacular magic tricks box has up its sleeve,
and they exist for good reason: They are very useful. Sadly we have not yet found a way to generalize all
of these to user types as well. Too bad!</p><p>Anyways, this post is about one particularly subtle magic aspect of box. For this, we need to dive
deep into unsafe code, so let’s get our hazmat suits on and jump in!</p><h2 id="an-interesting-optimization">An interesting optimization<a href="#an-interesting-optimization" arialabel="Anchor">⌗</a></h2><p>We have this code here:</p><div><pre tabindex="0"><code data-lang="rust"><span><span><span>fn</span> <span>takes_box_and_ptr_to_it</span>(<span>mut</span> b: Box<span>&lt;</span><span>u8</span><span>&gt;</span>, ptr: <span>*</span><span>const</span> <span>u8</span>) {
</span></span><span><span>    <span>let</span> value <span>=</span> <span>unsafe</span> { <span>*</span>ptr };
</span></span><span><span>    <span>*</span>b <span>=</span> <span>5</span>;
</span></span><span><span>    <span>let</span> value2 <span>=</span> <span>unsafe</span> { <span>*</span>ptr };
</span></span><span><span>    assert_ne!(value, value2);
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>let</span> b <span>=</span> Box::new(<span>0</span>);
</span></span><span><span><span>let</span> ptr: <span>*</span><span>const</span> <span>u8</span> <span>=</span> <span>&amp;*</span>b;
</span></span><span><span>    
</span></span><span><span>takes_box_and_ptr_to_it(b, ptr);
</span></span></code></pre></div><p>There’s a function, <code>takes_box_and_ptr_to_it</code>, that takes a box and a pointer as parameters. Then,
it reads a value from the pointer, writes to the box, and reads a value again. It then asserts that
the two values aren’t equal. How can they not be equal? If our box and pointer point to the same
location in memory, writing to the box will cause the pointer to read the new value.</p><p>Now construct a box, get a pointer to it, and pass the two to the function. Run the program…</p><p>… and everything is fine. Let’s run it in release mode. This should work as well, since the optimizer
isn’t allowed to change observable behaviour, and an assert is very observable. Run the program…</p><pre tabindex="0"><code>thread 'main' panicked at 'assertion failed: `(left != right)`
  left: `0`,
 right: `0`', src/main.rs:5:5
</code></pre><p>Hmm. That’s not what I’ve told would happen. Is the compiler broken? Is this a miscompilation?
I’ve heard that those do sometimes happen, right?</p><p>Trusting our instincts that “it’s never a miscompilation until it is one”, we assume that LLVM behaved
well here. But what allows it to make this optimization? Taking a look at the generated LLVM-IR (by using
<code>--emit llvm-ir -O</code>, the <code>-O</code> is important since rustc only emits these attributes with optimizations on)
reveals the solution: (severely shortened to only show the relevant parts)</p><pre tabindex="0"><code data-lang="llvmir">define void @takes_box_and_ptr_to_it(i8* noalias %0, i8* %ptr) {
</code></pre><p>See the little attribute on the first parameter called <code>noalias</code>? That’s what’s doing the magic here.
<code>noalias</code> is an LLVM attribute on pointers that allows for various optimizations. If there are two pointers,
and at least one of them is <code>noalias</code>, there are some restrictions around the two. Approximately:</p><ul><li>If one of them writes, they must not point to the same value (alias each other)</li><li>If neither of them writes, they can alias just fine.
Therefore, we also apply <code>noalias</code> to <code>&amp;mut T</code> and <code>&amp;T</code> (if it doesn’t contain interior mutability through
<code>UnsafeCell&lt;T&gt;</code>), since they uphold these rules.</li></ul><p>For more info on <code>noalias</code>, see <a href="https://llvm.org/docs/LangRef.html#parameter-attributes">LLVMs LangRef</a>.</p><p>This might sound familiar to you if you’re a viewer of <a href="https://twitter.com/jonhoo">Jon Gjengset</a>’s content (which I can highly recommend). Jon has made an entire video about this before since his crate <code>left-right</code>
was affected by this (<a href="https://youtu.be/EY7Wi9fV5bk)">https://youtu.be/EY7Wi9fV5bk)</a>.</p><p>If you’re looking for <em>any</em> hint that using box emits <code>noalias</code>, you have to look no further than the documentation
for <a href="https://doc.rust-lang.org/nightly/std/boxed/index.html#considerations-for-unsafe-code"><code>std::boxed</code></a>. Well, the nightly or beta docs, because I only added this section very recently. For years, this behaviour was not really documented, and you had to
belong to the arcane circles of the select few who were aware of it. So lots of code was written thinking that box was “just an
RAII pointer” (a pointer that allocates the value in the constructor and deallocates it in the destructor on drop) for all
pointers are concerned.</p><h2 id="stacked-borrows-and-miri">Stacked Borrows and Miri<a href="#stacked-borrows-and-miri" arialabel="Anchor">⌗</a></h2><p>So, LLVM was completely correct in optimizing our code to make the assert fail. But what exactly gave it permission to do so?
Undefined Behaviour (UB for short). Undefined behaviour is at the root of many modern compiler optimizations. But what is undefined behaviour?
UB represents a contract between the program and the compiler. The compiler assumes that UB will not happen, and can therefore optimize based
on these assumptions. Examples of UB also include use-after-free, out of bounds reads or data races. If UB is executed, <em>anything</em> can happen,
including segmentation faults, silent memory corruption, leakage of private keys or exactly what you intended to happen.</p><p><a href="https://github.com/rust-lang/miri">Miri</a> is an interpreter for Rust code with the goal of finding undefined behaviour in Rust. I cannot recommend Miri
highly enough for all unsafe code you’re writing (sadly support for some IO functions and FFI is still lacking, and it’s still very slow).</p><p>So, let’s see whether our code contains UB. It has to, since otherwise the optimizer wouldn’t be allowed to change
observable behaviour (since the assert doesn’t fail in debug mode). <code>$ cargo miri run</code>…</p><pre tabindex="0"><code data-lang="rust,ignore">error: Undefined Behavior: attempting a read access using &lt;3314&gt; at alloc1722[0x0], but that tag does not exist in the borrow stack for this location
  --&gt; src/main.rs:2:26
   |
2  |     let value = unsafe { *ptr };
   |                          ^^^^
   |                          |
   |                          attempting a read access using &lt;3314&gt; at alloc1722[0x0], but that tag does not exist in the borrow stack for this location
   |                          this error occurs as part of an access at alloc1722[0x0..0x1]
   |
   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental
   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information
help: &lt;3314&gt; was created by a retag at offsets [0x0..0x1]
  --&gt; src/main.rs:10:26
   |
10 |     let ptr: *const u8 = &amp;*b;
   |                          ^^^
help: &lt;3314&gt; was later invalidated at offsets [0x0..0x1]
  --&gt; src/main.rs:12:29
   |
12 |     takes_box_and_ptr_to_it(b, ptr);
   |                             ^
   = note: backtrace:
   = note: inside `takes_box_and_ptr_to_it` at src/main.rs:2:26
note: inside `main` at src/main.rs:12:5
  --&gt; src/main.rs:12:5
   |
12 |     takes_box_and_ptr_to_it(b, ptr);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
</code></pre><p>This behaviour does indeed not look very defined at all. But what went wrong? There’s a lot of information here.</p><p>First of all, it says that we attempted a read access, and that this access failed because the tag does not exist in the
borrow stack of the byte that was accessed. This is something about stacked borrows, the experimental memory model for Rust
that is implemented in Miri. For an excellent introduction, see this part of the great book <a href="https://rust-unofficial.github.io/too-many-lists/fifth-stacked-borrows.html">Learning Rust With Entirely Too Many Linked Lists</a>.</p><p>In short: each pointer has a unique tag attached to it. Each byte in memory has its own ‘borrow stack’ of these tags,
and only the pointers that have their tag in the stack are allowed to access it. Tags can be pushed and popped from the stack through various operations, for example, borrowing.</p><p>In the code example above, we get a nice little hint where the tag was created. When we created a reference (that was then
coerced into a raw pointer) from our box, it got a new tag called <code>&lt;3314&gt;</code>. Then, when we moved the box into the function,
something happened: The tag was popped off the borrow stack and therefore invalidated. That’s because box invalidates all tags
when it’s moved. The tag was popped off the borrow stack and we tried to read with it anyways - undefined behaviour happened!</p><p>And that’s how our code wasn’t a miscompilation, but undefined behaviour. Quite surprising, isn’t it?</p><h2 id="noalias-nothanks">noalias, nothanks<a href="#noalias-nothanks" arialabel="Anchor">⌗</a></h2><p>Many people, myself included, don’t think that this is a good thing.</p><p>First of all, it introduces more UB that could have been defined behaviour instead. This is true for almost all UB, but usually,
there is something gained from the UB that justifies it. We will look at this later. But allowing such behaviour is fairly easy:
If box didn’t invalidate pointers on move and instead behaved like a normal raw pointer, the code above would be sound.</p><p>But more importantly, this is not behaviour generally expected by users. While it can be argued that box is like a <code>T</code>, but on
the heap, and therefore moving it should invalidate pointers, since moving <code>T</code> definitely has to invalidate pointers to it,
this comparison doesn’t make sense to me. While <code>Box&lt;T&gt;</code> usually behaves like a <code>T</code>, it’s just a pointer. Writers of unsafe
code <em>know</em> that box is just a pointer and will abuse that knowledge, accidentally causing UB with it. While this can be
mitigated with better docs and teaching, like how no one questions the uniqueness of <code>&amp;mut T</code> (maybe that’s also because that
one makes intuitive sense, “shared xor mutable” is a simple concept), I think it will always be a problem,
because in my opinion, box being unique and invalidating pointers on move is simply not intuitive.</p><p>When a box is moved, the pointer bytes change their location in memory. But the bytes the box points to stay the same. They don’t
move in memory. This is the fundamental missing intuition about the box behaviour.</p><p>There are also other reasons why the box behaviour is not desirable. Even people who know about the behaviour of box will want
to write code that goes directly against this behaviour at some point. But usually, fixing it is pretty simple: Storing a raw
pointer (or <code>NonNull&lt;T&gt;</code>) instead of a box, and using the constructor and drop to allocate and deallocate the backing box.
This is fairly inconvenient but totally acceptable. There are bigger problems though. There are crates like <code>owning_ref</code>
that want to expose a generic interface over any type. Users like to choose box, and sometimes <em>have</em> to choose box because of
other box-exclusive features it offers. Even worse is <code>string_cache</code>, which is extremely hard to fix.</p><p>Then last but not least, there’s the opinionated fact that <code>Box&lt;T&gt;</code> shall be implementable entirely in user code. While we are
many missing language features away from this being the case, the <code>noalias</code> case is also magic descended upon box itself, with no
user code ever having access to it.</p><p>There are several arguments in favour of box being unique and special cased here. To negate the last argument above, it can
be said that <code>Box&lt;T&gt;</code> <em>is</em> a very special type. It’s just like a <code>T</code>, but on the heap. Using this mental model, it’s very easy to
justify all the box magic and its unique behaviour. But in my opinion, this is not a useful mental model regarding unsafe code,
and I prefer the mental model of “reference that manages its own lifetime”, which doesn’t imply uniqueness.</p><p>But there are also crates on <a href="https://crates.io/">crates.io</a> like <a href="https://crates.io/crates/aliasable">aliasable</a> that already
provide an aliasable version of <code>Box&lt;T&gt;</code>, which is used by the self-referential type helper crate <a href="https://crates.io/crates/ouroboros">ouroboros</a>.
So if box stayed unique, people could also just pick up that crate as a dependency and use the aliasable box from there instead of
having to write their own. Interestingly, this crate also provides a <code>Vec&lt;T&gt;</code>, even though <code>Vec&lt;T&gt;</code> can currently be aliased in practice and
in the current version of stacked borrows just fine, although it’s also not clear whether we want to keep it like this, but I
don’t think this can reasonable be changed.</p><blockquote><p>One thing was just pointed out to me after releasing the post: Mutation usually goes through <code>&amp;mut T</code> anyways, even when the value
is stored as a <code>Box&lt;T&gt;</code>. Therefore, all the guarantees of uniqueness are already present when mutating boxes, making the uniqueness
of box even less important.</p></blockquote><h2 id="noalias-noslow">noalias, noslow<a href="#noalias-noslow" arialabel="Anchor">⌗</a></h2><p>There is one clear potential benefit from this box behaviour: ✨Optimizations✨. <code>noalias</code> doesn’t exist for fun, it’s something
that can bring clear performance wins (for <code>noalias</code> on <code>&amp;mut T</code>, those were measureable). So the only question remains:
<strong>How much performance does <code>noalias</code> on <code>Box&lt;T&gt;</code> give us now, and how many potential performance improvements could we get in the
future?</strong> For the latter, there is no simple answer. For the former, there is. <code>rustc</code> has <a href="https://github.com/rust-lang/rust/pull/99527"><em>no</em> performance improvements</a>
from being compiled with <code>noalias</code> on <code>Box&lt;T&gt;</code>, but this isn’t really representative since rustc mostly uses arenas instead of box internally.</p><p>I have also benchmarked a few crates from the ecosystem with and without noalias on box, and the <a href="https://gist.github.com/Nilstrieb/9a0751fb9fd1044a30ab55cef9a7d335">results</a>
were inconclusive. (At the time of writing, only regex-syntax, tokio, and syn have been benchmarked.) regex-syntax showed no changes. Tokio showed a few improvements without noalias
which is very weird, so maybe the benchmarks aren’t really good or something else was going on. And syn tended towards minor regressions without noalias, but the benchmarks had high
jitter so no real conclusion can be reached from this either, at least in my eyes, but I don’t have a lot of experience with benchmarks. Therefore, I would love for more people
to benchmark more crates, especially if you have more experience with benchmarks.</p><h2 id="a-way-forward">a way forward<a href="#a-way-forward" arialabel="Anchor">⌗</a></h2><p>Based on all of this, I do have a few solutions. First of all, I think that even if there might be some small performance regressions, they are not significant enough
to justify boxes uniqueness. Unsafe code wants to use box, and it is reasonable to do so. Therefore I propose to completely remove all uniqueness from <code>Box&lt;T&gt;</code> and treat it
just like a <code>*const T</code> for aliasing. This will make it more predictable for unsafe code and is a step forward towards less magic from <code>Box&lt;T&gt;</code>.</p><p>But the performance cost may be real, and especially the future optimization value can’t be certain. The current uniqueness guarantees of box
are very strong, and still giving code an option to obtain these seems useful. One possibility would be for code to use a
<code>&amp;'static mut T</code> that is unleaked for drop, but the semantics of this are still <a href="https://github.com/rust-lang/unsafe-code-guidelines/issues/316">unclear</a>.
If that is not possible, exposing <code>std::ptr::Unique</code> (with it getting boxes aliasing semantics) could be desirable. For this, all existing usages of <code>Unique</code>
inside the standard library would have to be removed. We could also offer a <code>std::boxed::UniqueBox</code> that keeps the current semantics, but this would also bring direct aliasing
decisions more towards safe code, which I am not a huge fan of. Ownership is enough already.</p><p>I guess what I am wishing for are some good and flexible raw pointer types. But that’s still in the stars…</p><p>For more information about this topic, see <a href="https://github.com/rust-lang/unsafe-code-guidelines/issues/326">https://github.com/rust-lang/unsafe-code-guidelines/issues/326</a></p><p><em>Thanks to the nice people on the Rust Community Discord for their feedback on the draft of this post!</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gene banks aren’t enough to save the world’s food (188 pts)]]></title>
            <link>https://longnow.org/ideas/to-save-it-eat-it/</link>
            <guid>40237947</guid>
            <pubDate>Thu, 02 May 2024 16:15:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://longnow.org/ideas/to-save-it-eat-it/">https://longnow.org/ideas/to-save-it-eat-it/</a>, See on <a href="https://news.ycombinator.com/item?id=40237947">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
      <section>
        <p>An early victim of Russia’s invasion of Ukraine was the genetic riches of one of the traditional breadbaskets of humanity. In the first months of the conflict, Russian shells hit the Plant Genetic Resources Bank in Kharkiv. Founded in 01908, the gene bank preserved the seeds of 160,000 varieties of crops and plant seeds from around the world, and was the repository for many unique cultivars of Ukrainian barley, peas, and wheat. Tens of thousands of samples, some of them centuries old, were reduced to ash.</p><p>“Under Hitler’s Germany, when the whole of Ukraine was under occupation, the Germans did not destroy this collection,” a lead researcher at the institute <a href="https://theins.ru/en/news/251319?ref=longnow.org">told</a> the online newspaper <em>The Insider</em>. “They knew their descendants might need it. After all, every country’s food security depends on such banks of genetic resources.”</p><p>A similar fate befell one of the world’s most important collections of wheat landraces, as varieties that have adapted to local conditions, often over thousands of years of cultivation, are known. Located in Aleppo, the International Center for Agricultural Research in the Dry Areas (ICARDA) kept tens of thousands of varieties of wheat and other food plants, from 128 countries, in cold storage. When the Syrian civil war began in 02011, staff set to work loading 20,000 precious samples of crop varieties, not duplicated in other gene banks, across the borders to Turkey and Lebanon.</p><p>“It was looted,” Ahmed Amri, the director of ICARDA, told me on a video call from the gene bank’s new location in Morocco. “The latest news is that it was completely destroyed.”</p><figure><img src="https://static.longnow.org/2024/01/-FAO-Tetyana-Brivko--1.png" alt="" loading="lazy" width="1262" height="707"><figcaption>Genetic samples from Ukraine's Plant Genetic Resources Bank. Photograph by Tetyana Brivko, <a href="https://www.fao.org/europe/news/detail/ukraine-s-national-seed-collection-relocates-to-a-secure-site/en?ref=longnow.org">Food and Agriculture Organization of the United Nations</a></figcaption></figure><p>Gene banks are a crucial resource for ensuring the world’s food security. They provide back-up specimens of the seeds of the plants, as well as the eggs and semen of the livestock, that nourish humanity. Like public lending libraries, they then distribute these genetic riches free of charge to just anybody who asks. There are 1,750 such institutions around the world, safeguarding everything from yeasts, to olive cultivars, to pig breeds. (My personal favorite is the <a href="https://sourdoughlibrary.puratos.com/en/?ref=longnow.org">Puratos Sourdough Library</a> in St-Vith, Belgium, which keeps more than a hundred sourdough starters from around the world, some of them over a century old, bubbling and alive with regular feedings.) But, like nuclear power plants, they are vulnerable to natural disaster, and — as in Ukraine and Syria — can become targets in times of war.</p><p>The “Backup of the Backups” is <a href="https://longnow.org/ideas/svalbard/">the Svalbard Global Seed Vault</a>, located on an island halfway between the Norwegian mainland and the North Pole. Svalbard stores seeds of <a href="https://www.seedvault.no/about/the-seeds/?ref=longnow.org">hundreds of thousands of crop varieties</a>, including 150,000 samples of wheat and rice, in a setting where the average winter lows hover around -4 degrees Fahrenheit. But Svalbard Island is also one of the most rapidly warming places in the world. In 02017, melting permafrost caused the vault’s entrance to flood, though fortunately there was no permanent damage to the collection.</p><figure><img src="https://static.longnow.org/2024/01/Svalbard_Global_Seed_Vault_-23273281972-.jpg" alt="" loading="lazy" width="2500" height="1667"><figcaption>The Svalbard Global Seed Vault. Photograph by <a href="https://www.flickr.com/people/23391210@N06?ref=longnow.org">Frode Ramon</a> (<a href="https://creativecommons.org/licenses/by/2.0/deed.en?ref=longnow.org">CC BY 2.0 DEED</a>)</figcaption></figure><p>Which means that keeping copies of the earth’s genetic riches on ice is, at best, cold comfort. Seeds need to be removed from storage and germinated on a regular basis to remain viable. But in our era of soil degradation, rapidly-evolving pests and pathogens, and a fast-changing climate, there is no guarantee that frozen germplasm will be able to thrive to feed future generations. That’s why we need to foster <em>living</em> diversity in fields and farms. The best we can do for endangered wildlife, from Bengal tigers to sperm whales, is to give them the space to live — in other words, to leave them alone. The best we can do for ancestral grains and forgotten livestock breeds, in contrast, is to cultivate them, and yes, to eat them.</p><p>The background to this is the global biodiversity crisis; the rate of species loss, which is hundreds of times faster than it has been in the last 10 million years, has led <a href="https://www.newyorker.com/magazine/2009/05/25/the-sixth-extinction?ref=longnow.org">some</a> to declare we are in the midst of a “sixth extinction.” But few are aware that agrobiodiversity — the range of plants and livestock that feed us — is also in rapid decline. Nearly a tenth of the world’s estimated 8,800 livestock breeds are already extinct. Every month, a half dozen more are lost forever. The same phenomenon afflicts traditional crop varieties. Since 01900, it is estimated that three-quarters of the genetic diversity once stored in farmers’ fields has been lost. The way we farm today, raising vast acreages of crops, many of them genetically modified or scientifically hybridized to maximize yield, leaves them vulnerable to such diseases as wheat rust and corn smut.</p><p>While researching my book <em>The Lost Supper</em>, I traveled to Puglia, the bootheel of Italy, where farmers have come to rely on a few varieties of olive to produce extra virgin oil. But now these trees, some of them over 2,000 years old, are succumbing to a bacterium, imported on ornamental coffee plants from Costa Rica, known as <em>Xylella fastidiosa</em>. Much of the region is now a spooky landscape of skeleton forests. The most promising cure comes from wild olive varieties found growing in farmers’ fields, which can be grafted onto trees, to save them from infection. I’ve been to the Olive World Germplasm Bank in Córdoba, Spain, and it is a crucial institution, run by dedicated scientists and technicians. But Puglia’s olive oil industry is being saved not by germplasm, but by the natural variety preserved in fields, orchards, and farms.</p><p>Diversity, simply put, is the key to resiliency. That’s true of the microorganisms in the soil beneath our feet, in the microbiome in our guts, and in the variety of foods we eat. In our 300,000 or so years of existence as a species, we have nourished ourselves on a minimum of 10,000 distinct plant species. Today, fewer than 150 are cultivated for consumption. The <a href="https://journals.asm.org/doi/10.1128/msystems.00031-18?ref=longnow.org">latest science</a> says that people who consume <a href="https://zoe.com/learn/30-plants-per-week?ref=longnow.org">at least thirty species of plants a week</a> in their diet — most of us get half that number or less — tend to be as disease-free as those who follow a completely vegan diet. Our monocultures, which rob us of the polyphenols, omega-3 fatty acids, and other micronutrients essential for good health, are <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2866137/?ref=longnow.org">making us sick</a>. The antidote is to pursue diversity in our diet, and support those food producers who work hard to keep less common varieties alive.</p><p>“In Canada and the United States, diversity is largely gone from the field,” says Colin Khoury, a director at the San Diego Botanic Garden who has published extensively on crop biodiversity. “When a farmer grows something, saves the seed, and plants in the next year, you have ongoing evolution. And that gives you the diversity you need for unforeseen issues in the future. The hubris of putting everything in a seed bank — basically freezing diversity — is that you believe you have everything you need for the present and the future.”</p><p>In my research, I’ve encountered many good examples of solutions to our diversity and sustainability crisis, most of them rooted in pre-industrial agricultural practices. In Europe and North America, for example, mixed farms practice an age-old form of what is now known as regenerative agriculture or permaculture: pigs, chickens, cattle and other breeds of heritage livestock provide the manure that boosts soil fertility and replaces synthetic fertilizers. An increasing number of farmers in the United States, Canada, and Britain are embracing “no-till” farming, a plough-free method which reduces the amount of synthetic fertilizers and water needed to raise crops, while preserving biodiversity in the field. In Central America, I saw the <em>milpas</em>, or cornfields, where ancient varieties are interplanted with squash and beans, infusing the soil with nitrogen. In Mexico City, <em>chinampas</em>, or “floating gardens,” a form of raised bed agriculture that used to feed millions in Aztec times, continue to allow for several harvests a year. Indigenous communities around the world are storehouses of such <a href="https://youtu.be/pxrFhbGWd3A?si=ClrH6_kXokaYjyIl&amp;ref=longnow.org">traditional ecological knowledge (TEK)</a>, from the controlled burns once used in the Americas to manage game and edible plant populations and limit the fuel for wildfires, to the ancient agroforestry methods that have shaped the Amazon basin. All provide startling amounts of calories on limited acreage, while encouraging, rather than detracting from, biodiversity.</p><figure><img src="https://static.longnow.org/2024/01/Chinampas.jpg" alt="" loading="lazy" width="1520" height="1067"><figcaption>The Aztec-originating <em>chinampas</em>, or "floating gardens." Photograph by Karl Weule, Leitfaden der Voelkerkunde, Leipzig 01912</figcaption></figure><p>There is a happy conclusion to the story of Kharkiv’s gene bank, one summed up in a proverb common among my own Ukrainian ancestors: “They tried to bury us. But they didn’t know we were seeds.” Late last spring, the parts of the collection untouched by the attack were moved to an undisclosed location in the western part of the country, as far as possible from Putin’s reach. This is an important win, but the true riches of Ukraine lie in the <em>chernozem</em>, the nation’s dark, humus-rich loam, where varieties of beets, barley, potatoes, rye, and bread wheat will continue to evolve — conflict permitting — in an ever-changing environment.</p><p>The same is true of every other food-producing region in the world. The soil beneath our feet is the ultimate source of agrobiodiversity, nutrition, and flavor. That soil is now being impoverished by the chemicals needed to bring monocultures to harvest. Don’t get me wrong: gene banks are an essential insurance policy for future food security. But the real way forward is to take the seeds and eggs out of the cold, and get them into the soil, the farms, and the pastures — and, in good time, onto our plates.</p><p>—</p><p><em>Taras Grescoe is the author of </em><a href="https://greystonebooks.com/products/the-lost-supper?ref=longnow.org">The Lost Supper: Searching for the Future of Food in the Flavors of the Past</a><em> (Greystone, 02023).</em></p>
      </section>

      <div>
        

        

          <h2> More from <a href="https://longnow.org/ideas/category/environment/">Environment</a> —</h2>

          

              </div>
    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Wild orangutan seen healing his wound with a plant (208 pts)]]></title>
            <link>https://www.bbc.co.uk/news/science-environment-68942123</link>
            <guid>40237855</guid>
            <pubDate>Thu, 02 May 2024 16:09:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.co.uk/news/science-environment-68942123">https://www.bbc.co.uk/news/science-environment-68942123</a>, See on <a href="https://news.ycombinator.com/item?id=40237855">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main id="main-content" data-testid="main-content"><article><header data-component="legacy-header-block"></header><div data-component="video-block"><figure><figcaption><span>Media caption, </span><p>Watch: How Rakus healed his own wound</p></figcaption></figure></div><div data-component="text-block"><p><b>A Sumatran orangutan in Indonesia has self-medicated using a paste made from plants to heal a large wound on his cheek, say scientists.</b></p></div><div data-component="text-block"><p>It is the first time a creature in the wild has been recorded treating an injury with a medicinal plant.</p></div><div data-component="text-block"><p>After researchers saw Rakus applying the plant poultice to his face, the wound closed up and healed in a month.</p></div><div data-component="text-block"><p>Scientists say the behaviour could come from a common ancestor shared by humans and great apes.</p></div><div data-component="text-block"><p>"They are our closest relatives and this again points towards the similarities we share with them. We are more similar than we are different," said biologist Dr Isabella Laumer at the Max Planck institute in Germany and lead author of the research.</p></div><div data-component="text-block"><p>A research team in the Gunung Leuser National Park, Indonesia spotted Rakus with a large wound on his cheek in June 2022.</p></div><div data-component="text-block"><p>They believe he was injured fighting with rival male orangutans because he made loud cries called "long calls" in the days before they saw the wound.</p></div><div data-component="text-block"><p>The team then saw Rakus chewing the stem and leaves of plant called Akar Kuning - an anti-inflammatory and anti-bacterial plant that is also used locally to treat malaria and diabetes.</p></div><div data-component="image-block"><figure><p><span><span></span></span><span role="text"><span>Image source, </span>Armas</span></p><figcaption><span>Image caption, </span><p>Scientists saw Rakus chewing a medicinal leaf into a paste</p></figcaption></figure></div><div data-component="text-block"><p>He repeatedly applied the liquid onto his cheek for seven minutes. Rakus then smeared the chewed leaves onto his wound until it was fully covered. He continued to feed on the plant for over 30 minutes.</p></div><div data-component="text-block"><p>The paste and leaves then appear to have done their magic - the researchers saw no sign of infection and the wound closed within five days.</p></div><div data-component="text-block"><p>After a month, Rakus was fully healed.</p></div><div data-component="image-block"><figure><p><span><span></span></span><span role="text"><span>Image source, </span>Safruddin</span></p><figcaption><span>Image caption, </span><p>After a month, the wound on Rakus's cheek was healed</p></figcaption></figure></div><div data-component="text-block"><p>The scientists concluded that Rakus knew he was applying medicine because orangutans very rarely eat this particular plant and because of the length of the treatment.</p></div><div data-component="text-block"><p>"He repeatedly applied the paste, and he later also applied more solid plant matter. The entire process lasted really a considerable amount of time - that's why we think that he intentionally applied it," explains Dr Laumer.  </p></div><div data-component="text-block"><p>The researchers also saw Rakus resting for much longer than usual - more than half of the day - suggesting he was trying to recuperate after the injury.</p></div><div data-component="text-block"><p>Scientists were already aware that great apes used medicine to try to heal themselves. </p></div><div data-component="text-block"><p>In the 1960s biologist Jane Goodall saw whole leaves in the faeces of chimpanzees, and others documented seeing great apes swallowing leaves with medicinal properties.</p></div><div data-component="text-block"><p>But they had never seen a wild animal applying a plant to a wound.</p></div><div data-component="text-block"><p>Dr Laumer says it is possible that it was the first time Rakus had done this type of treatment. </p></div><div data-component="text-block"><p>"It could be that he accidentally touched his wound with his finger that had the plant on it.  And then because the plant has quite potent pain relieving substances he might have felt immediate pain relief, which made him apply it again and again," she says. </p></div><div data-component="text-block"><p>Or he could have learned the method from watching other orangutans in his group.</p></div><div data-component="text-block"><p>The researchers will now be closely watching other orangutans to see if they can spot the same medical skills that Rakus showed.</p></div><div data-component="text-block"><p>"I think in the next few years we will discover even more behaviours and more abilities that are very human-like," she suggests. </p></div><div data-component="text-block"><p>The research is published in the scientific journal Scientific Reports.</p></div></article></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Online Cryptography Course by Dan Boneh (343 pts)]]></title>
            <link>https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/</link>
            <guid>40237745</guid>
            <pubDate>Thu, 02 May 2024 16:00:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/">https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/</a>, See on <a href="https://news.ycombinator.com/item?id=40237745">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="outer-wrapper">

<p><a href="https://crypto.stanford.edu/">
        <img src="https://crypto.stanford.edu/images/seclab-128.png" alt="Logo">
	</a>
</p>

<p>
<b>Instructor:</b> &nbsp; Dan Boneh, Stanford University
</p>

<p>
<b>Online cryptography course preview:</b>
This page contains all the lectures in the free cryptography
course.
To officially take the course, including homeworks, projects,
and final exam, please visit 
the <a href="https://www.coursera.org/learn/crypto">course page at Coursera</a>.
</p>




<p>
<b>Textbook:</b> The following is a free textbook for the course.
The book goes into more depth, including security proofs, and many exercises. 
</p>
<ul>

<li> 
<i><a href="http://toc.cryptobook.us/">
A Graduate Course in Applied Cryptography</a></i> 
by D. Boneh and V. Shoup &nbsp; (free)
</li>

</ul>


<h2> Course syllabus, videos, and slides </h2>



<p><span>Week 1</span>: 
  <span>Course overview and stream ciphers </span> 
  (chapters 2-3 in the <a href="http://toc.cryptobook.us/">textbook</a>)
</p>
<p>Slides for week 1:</p>


<p>What is cryptography?</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/lboqg/course-overview" target="_blank">
  <i></i> &nbsp; 
  Course overview 
  <span>(10 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/ubmLN/what-is-cryptography" target="_blank">
  <i></i> &nbsp; 
  What is cryptography 
  <span>(15 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/xAJaD/history-of-cryptography" target="_blank">
  <i></i> &nbsp; 
  History of cryptography 
  <span>(18 min.)</span>
  </a>
</li>

</ul>
<p>Crash course in discrete probability</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/qaEcL/discrete-probability-crash-course" target="_blank">
  <i></i> &nbsp; 
  Discrete probability (crash course) 
  <span>(18 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/JkDRg/discrete-probability-crash-course-cont" target="_blank">
  <i></i> &nbsp; 
  Discrete probability (crash course, continued) 
  <span>(13 min.)</span>
  </a>
</li>

</ul>
<p>Stream Ciphers 1: the one-time pad and stream ciphers</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/cbnX1/information-theoretic-security-and-the-one-time-pad" target="_blank">
  <i></i> &nbsp; 
  Information theoretic security and the one-time pad 
  <span>(18 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/5m8ay/stream-ciphers-and-pseudo-random-generators" target="_blank">
  <i></i> &nbsp; 
  Stream ciphers and pseudorandom generators 
  <span>(19 min.)</span>
  </a>
</li>

</ul>
<p>Stream Ciphers 2: attacks and common mistakes</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/euFJx/attacks-on-stream-ciphers-and-the-one-time-pad" target="_blank">
  <i></i> &nbsp; 
  Attacks on stream ciphers and the one-time pad 
  <span>(23 min.)</span>
  </a>
</li>

</ul>
<p>Stream Ciphers 3: real-world examples</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/mQAkP/real-world-stream-ciphers" target="_blank">
  <i></i> &nbsp; 
  Real-world stream ciphers 
  <span>(19 min.)</span>
  </a>
</li>

</ul>
<p>Stream Ciphers 4: what is a secure cipher?</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/De10M/prg-security-definitions" target="_blank">
  <i></i> &nbsp; 
  PRG security definition 
  <span>(24 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/q0h9g/semantic-security" target="_blank">
  <i></i> &nbsp; 
  Semantic security 
  <span>(15 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/VeLNT/stream-ciphers-are-semantically-secure-optional" target="_blank">
  <i></i> &nbsp; 
  Stream ciphers are semantically secure 
  <span>(10 min.)</span>
  </a>
</li>

</ul>
<p><span>Week 2</span>: 
  <span>Block ciphers </span> 
  (chapters 4-5 in the <a href="http://toc.cryptobook.us/">textbook</a>)
</p>
<p>Slides for week 2:</p>


<p>Block Ciphers 1: overview</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/t4JJr/what-are-block-ciphers" target="_blank">
  <i></i> &nbsp; 
  What are block ciphers 
  <span>(16 min.)</span>
  </a>
</li>

</ul>
<p>Block Ciphers 2: The Data Encryption Standard</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/TzBaf/the-data-encryption-standard" target="_blank">
  <i></i> &nbsp; 
  The Data Encryption Standard (DES) 
  <span>(21 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/fPA8S/exhaustive-search-attacks" target="_blank">
  <i></i> &nbsp; 
  Exhaustive search attacks 
  <span>(19 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/TtPa9/more-attacks-on-block-ciphers" target="_blank">
  <i></i> &nbsp; 
  More attacks on block ciphers 
  <span>(16 min.)</span>
  </a>
</li>

</ul>
<p>Block Ciphers 3: AES and other constructions</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/cHOMl/the-aes-block-cipher" target="_blank">
  <i></i> &nbsp; 
  The AES block cipher 
  <span>(13 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/X2wYF/block-ciphers-from-prgs" target="_blank">
  <i></i> &nbsp; 
  Block ciphers from PRGs 
  <span>(11 min.)</span>
  </a>
</li>

</ul>
<p>How to Use Block Ciphers 1: one-time key</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/9p25F/review-prps-and-prfs" target="_blank">
  <i></i> &nbsp; 
  Review: PRPs and PRFs 
  <span>(11 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/QZAHs/modes-of-operation-one-time-key" target="_blank">
  <i></i> &nbsp; 
  Modes of operation: one-time key 
  <span>(7 min.)</span>
  </a>
</li>

</ul>
<p>How to Use Block Ciphers 2: many-time key</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/1pnne/security-for-many-time-key-cpa-security" target="_blank">
  <i></i> &nbsp; 
  Security for many-time key (CPA security) 
  <span>(22 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/wlIX8/modes-of-operation-many-time-key-cbc" target="_blank">
  <i></i> &nbsp; 
  Modes of operation: many-time key (CBC) 
  <span>(16 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/5wL84/modes-of-operation-many-time-key-ctr" target="_blank">
  <i></i> &nbsp; 
  Modes of operation: many-time key (CTR) 
  <span>(9 min.)</span>
  </a>
</li>

</ul>
<p><span>Week 3</span>: 
  <span>Message integrity </span> 
  (chapters 6-8  in the <a href="http://toc.cryptobook.us/">textbook</a>)
</p>
<p>Slides for week 3:</p>
<p>
  Message integrity: &nbsp; 
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/05-integrity-v2-annotated.pdf">pdf</a> &nbsp;
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/05-integrity-v2-annotated.pptx">pptx</a>  <br>
  Collision resistant hashing: &nbsp; 
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/06-collision-resistance-v2-annotated.pdf">pdf</a> &nbsp;
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/06-collision-resistance-v2-annotated.pptx">pptx</a>  <br>
</p>

<p>Message Integrity 1: definitions</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/iVGR5/message-authentication-codes" target="_blank">
  <i></i> &nbsp; 
  Message authentication codes 
  <span>(15 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/bn1t0/macs-based-on-prfs" target="_blank">
  <i></i> &nbsp; 
  MACs based on PRFs 
  <span>(9 min.)</span>
  </a>
</li>

</ul>
<p>Message Integrity 2: constructions</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/QYT6i/cbc-mac-and-nmac" target="_blank">
  <i></i> &nbsp; 
  CBC-MAC and NMAC 
  <span>(19 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/vTbf0/mac-padding" target="_blank">
  <i></i> &nbsp; 
  MAC padding 
  <span>(8 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/u8xyE/pmac-and-the-carter-wegman-mac" target="_blank">
  <i></i> &nbsp; 
  PMAC and Carter-Wegman MAC 
  <span>(15 min.)</span>
  </a>
</li>

</ul>
<p>Collision Resistance 1: what is a collision resistant function?</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/LbrG3/introduction" target="_blank">
  <i></i> &nbsp; 
  Introduction 
  <span>(10 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/pyR4I/generic-birthday-attack" target="_blank">
  <i></i> &nbsp; 
  Generic birthday attack 
  <span>(14 min.)</span>
  </a>
</li>

</ul>
<p>Collision Resistance 2: constructions</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/Hfnu9/the-merkle-damgard-paradigm" target="_blank">
  <i></i> &nbsp; 
  The Merkle-Damgard paradigm 
  <span>(11 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/XZt5V/constructing-compression-functions" target="_blank">
  <i></i> &nbsp; 
  Constructing compression functions 
  <span>(8 min.)</span>
  </a>
</li>

</ul>
<p>HMAC: a MAC from a hash function</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/OjMrT/hmac" target="_blank">
  <i></i> &nbsp; 
  HMAC 
  <span>(7 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/FHGW1/timing-attacks-on-mac-verification" target="_blank">
  <i></i> &nbsp; 
  Timing attacks on MAC verification 
  <span>(8 min.)</span>
  </a>
</li>

</ul>
<p><span>Week 4</span>: 
  <span>Authenticated encryption </span> 
  (chapter 9  in the <a href="http://toc.cryptobook.us/">textbook</a>)
</p>
<p>Slides for week 4:</p>
<p>
  Authenticated encryption: &nbsp; 
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/07-authenc-v2-annotated.pdf">pdf</a> &nbsp;
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/07-authenc-v2-annotated.pptx">pptx</a>  <br>
  Odds and ends: &nbsp; 
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/08-odds-and-ends-v2-annotated.pdf">pdf</a> &nbsp;
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/08-odds-and-ends-v2-annotated.pptx">pptx</a>  <br>
</p>

<p>Authenticated Encryption 1: why is it so important?</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/SiCKv/active-attacks-on-cpa-secure-encryption" target="_blank">
  <i></i> &nbsp; 
  Active attacks on CPA-secure encryption 
  <span>(12 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/IawVh/definitions" target="_blank">
  <i></i> &nbsp; 
  Definitions 
  <span>(5 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/MKepS/chosen-ciphertext-attacks" target="_blank">
  <i></i> &nbsp; 
  Chosen ciphertext attacks 
  <span>(12 min.)</span>
  </a>
</li>

</ul>
<p>Authenticated Encryption 2: standard constructions</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/WvWMO/constructions-from-ciphers-and-macs" target="_blank">
  <i></i> &nbsp; 
  Constructions from ciphers and MACs 
  <span>(20 min.)</span>
  </a>
</li>

</ul>
<p>Authenticated Encryption 3: pitfalls</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/WZUsh/case-study-tls-1-2" target="_blank">
  <i></i> &nbsp; 
  Case study: TLS 1.2 
  <span>(17 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/8s23o/cbc-padding-attacks" target="_blank">
  <i></i> &nbsp; 
  CBC padding attacks 
  <span>(14 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/mtJS8/attacking-non-atomic-decryption" target="_blank">
  <i></i> &nbsp; 
  Attacking non-atomic decryption 
  <span>(9 min.)</span>
  </a>
</li>

</ul>
<p>Odds and Ends 1: how to derive keys</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/A1ETP/key-derivation" target="_blank">
  <i></i> &nbsp; 
  Key derivation 
  <span>(13 min.)</span>
  </a>
</li>

</ul>
<p>Odds and Ends 2: searching on encrypted data</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/8oHZd/deterministic-encryption" target="_blank">
  <i></i> &nbsp; 
  Deterministic encryption 
  <span>(14 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/hM7f2/deterministic-encryption-siv-and-wide-prp" target="_blank">
  <i></i> &nbsp; 
  Deterministic encryption: SIV and wide PRP 
  <span>(20 min.)</span>
  </a>
</li>

</ul>
<p>Odds and Ends 3: disk encryption and creditcard encryption</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/YpC3s/tweakable-encryption" target="_blank">
  <i></i> &nbsp; 
  Tweakable encryption 
  <span>(14 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/aFRSZ/format-preserving-encryption" target="_blank">
  <i></i> &nbsp; 
  Format preserving encryption 
  <span>(12 min.)</span>
  </a>
</li>

</ul>
<p><span>Week 5</span>: 
  <span>Basic key exchange </span> 
  (chapter 10 in the <a href="http://toc.cryptobook.us/">textbook</a>)
</p>
<p>Slides for week 5:</p>
<p>
  Basic key exchange: &nbsp; 
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/09-basic-key-exchange-annotated.pdf">pdf</a> &nbsp;
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/09-basic-key-exchange-annotated.pptx">pptx</a>  <br>
  Crash course in number theory: &nbsp; 
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/10-numth-annotated.pdf">pdf</a> &nbsp;
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/10-numth-annotated.pptx">pptx</a>  <br>
</p>

<p>Basic Key Exchange 1: problem statement</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/Ef7Gy/trusted-3rd-parties" target="_blank">
  <i></i> &nbsp; 
  Trusted 3rd parties 
  <span>(11 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/ryDLg/merkle-puzzles" target="_blank">
  <i></i> &nbsp; 
  Merkle puzzles 
  <span>(11 min.)</span>
  </a>
</li>

</ul>
<p>Basic Key Exchange 2: two solutions</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/yi9lT/the-diffie-hellman-protocol" target="_blank">
  <i></i> &nbsp; 
  The Diffie-Hellman protocol 
  <span>(19 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/HB4jI/public-key-encryption" target="_blank">
  <i></i> &nbsp; 
  Public-key encryption 
  <span>(10 min.)</span>
  </a>
</li>

</ul>
<p>Number Theory 1: modular arithmetic</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/2YWK8/notation" target="_blank">
  <i></i> &nbsp; 
  Notation 
  <span>(14 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/Z2Tso/fermat-and-euler" target="_blank">
  <i></i> &nbsp; 
  Fermat and Euler 
  <span>(18 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/fjRVO/modular-e-th-roots" target="_blank">
  <i></i> &nbsp; 
  Modular e'th roots 
  <span>(17 min.)</span>
  </a>
</li>

</ul>
<p>Number Theory 2: easy and hard problems</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/wxOal/arithmetic-algorithms" target="_blank">
  <i></i> &nbsp; 
  Arithmetic algorithms 
  <span>(12 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/EKdgY/intractable-problems" target="_blank">
  <i></i> &nbsp; 
  Intractable problems 
  <span>(18 min.)</span>
  </a>
</li>

</ul>
<p><span>Week 6</span>: 
  <span>Public-key encryption </span> 
  (chapters 11-12  in the <a href="http://toc.cryptobook.us/">textbook</a>)
</p>
<p>Slides for week 6:</p>


<p>Public Key Encryption from Trapdoor Permutations</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/qU4Cy/definitions-and-security" target="_blank">
  <i></i> &nbsp; 
  Definitions and security 
  <span>(15 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/nTRhL/constructions" target="_blank">
  <i></i> &nbsp; 
  Constructions 
  <span>(10 min.)</span>
  </a>
</li>

</ul>
<p>Public Key Encryption from Trapdoor Permutations: RSA</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/JrGlH/the-rsa-trapdoor-permutation" target="_blank">
  <i></i> &nbsp; 
  The RSA trapdoor permutation 
  <span>(17 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/JwjDq/pkcs-1" target="_blank">
  <i></i> &nbsp; 
  PKCS1 
  <span>(21 min.)</span>
  </a>
</li>

</ul>
<p>Public Key Encryption from Trapdoor Permutations: attacks</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/fyCKk/is-rsa-a-one-way-function" target="_blank">
  <i></i> &nbsp; 
  Is RSA a one-way function? 
  <span>(16 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/2tkqf/rsa-in-practice" target="_blank">
  <i></i> &nbsp; 
  RSA in practice 
  <span>(13 min.)</span>
  </a>
</li>

</ul>
<p>Public Key Encryption From Diffie-Hellman: ElGamal</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/ycSSO/the-elgamal-public-key-system" target="_blank">
  <i></i> &nbsp; 
  The ElGamal public-key system 
  <span>(19 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/2tbL6/elgamal-security" target="_blank">
  <i></i> &nbsp; 
  ElGamal security 
  <span>(13 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/1CIb5/elgamal-variants-with-better-security" target="_blank">
  <i></i> &nbsp; 
  ElGamal variants with better security 
  <span>(10 min.)</span>
  </a>
</li>

</ul>
<p>Public Key Encryption: summary</p>
<ul>
<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/ijaDI/a-unifying-theme" target="_blank">
  <i></i> &nbsp; 
  A unifying theme 
  <span>(11 min.)</span>
  </a>
</li>

<li> 
  <a href="https://www.coursera.org/learn/crypto/lecture/DRsxF/farewell-for-now" target="_blank">
  <i></i> &nbsp; 
  Farwell for now 
  <span>(5 min.)</span>
  </a>
</li>

</ul>
<p><span>Week 7</span>: 
  <span>Digital signatures</span> 
  (chapters 13-14 in the <a href="http://toc.cryptobook.us/">textbook</a>)
</p>
<p>Slides for week 7:</p>
<p>
  Digital signatures: &nbsp; 
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/13-sigs.pdf">pdf</a> &nbsp;
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/13-sigs.pptx">pptx</a>  <br>
  Hash-based signatures: &nbsp; 
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/14-special-sigs.pdf">pdf</a> &nbsp;
     <a href="https://crypto.stanford.edu/~dabo/courses/OnlineCrypto/slides/14-special-sigs.pptx">pptx</a>  <br>
</p>


</div></div>]]></description>
        </item>
    </channel>
</rss>