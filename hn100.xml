<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 30 Jun 2024 18:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Show HN: Drop-In SQS Replacement Based on SQLite (183 pts)]]></title>
            <link>https://github.com/poundifdef/SmoothMQ</link>
            <guid>40837610</guid>
            <pubDate>Sun, 30 Jun 2024 15:11:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/poundifdef/SmoothMQ">https://github.com/poundifdef/SmoothMQ</a>, See on <a href="https://news.ycombinator.com/item?id=40837610">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">SmoothMQ</h2><a id="user-content-smoothmq" aria-label="Permalink: SmoothMQ" href="#smoothmq"></a></p>
<p dir="auto">SmoothMQ is a drop-in replacement for SQS with a much smoother developer experience.
It has a functional UI, observability, tracing, message scheduling, and rate-limiting.
SmoothMQ lets you run a private SQS instance on any cloud.</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<p dir="auto">SmoothMQ deploys as a single go binary and can be used by any existing SQS client.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Running</h2><a id="user-content-running" aria-label="Permalink: Running" href="#running"></a></p>
<p dir="auto">This will run a UI on <code>:3000</code> and an SQS-compatible server on <code>:3001</code>.</p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Connecting</h2><a id="user-content-connecting" aria-label="Permalink: Connecting" href="#connecting"></a></p>
<p dir="auto">This works with any SQS client in any language.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Python</h3><a id="user-content-python" aria-label="Permalink: Python" href="#python"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="import boto3

# Simply change the endpoint_url
sqs = boto3.client(&quot;sqs&quot;, ..., endpoint_url=&quot;http://localhost:3001&quot;)
sqs.send_message(QueueUrl=&quot;...&quot;, MessageBody=&quot;hello world&quot;)"><pre><span>import</span> <span>boto3</span>

<span># Simply change the endpoint_url</span>
<span>sqs</span> <span>=</span> <span>boto3</span>.<span>client</span>(<span>"sqs"</span>, ..., <span>endpoint_url</span><span>=</span><span>"http://localhost:3001"</span>)
<span>sqs</span>.<span>send_message</span>(<span>QueueUrl</span><span>=</span><span>"..."</span>, <span>MessageBody</span><span>=</span><span>"hello world"</span>)</pre></div>
<p dir="auto">Celery works seamlessly:</p>
<div dir="auto" data-snippet-clipboard-copy-content="app = Celery(&quot;tasks&quot;, broker_url=&quot;sqs://...@localhost:3001&quot;)"><pre><span>app</span> <span>=</span> <span>Celery</span>(<span>"tasks"</span>, <span>broker_url</span><span>=</span><span>"sqs://...@localhost:3001"</span>)</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">UI</h2><a id="user-content-ui" aria-label="Permalink: UI" href="#ui"></a></p>
<p dir="auto">The UI lets you manage queues and search individual messages.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/poundifdef/SmoothMQ/blob/main/docs/queue.gif"><img src="https://github.com/poundifdef/SmoothMQ/raw/main/docs/queue.gif" alt="Dashboard UI" data-animated-image=""></a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Weekend projects: getting silly with C (178 pts)]]></title>
            <link>https://lcamtuf.substack.com/p/weekend-projects-getting-silly-with</link>
            <guid>40835274</guid>
            <pubDate>Sun, 30 Jun 2024 05:07:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lcamtuf.substack.com/p/weekend-projects-getting-silly-with">https://lcamtuf.substack.com/p/weekend-projects-getting-silly-with</a>, See on <a href="https://news.ycombinator.com/item?id=40835274">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>For all its warts, the C language is a marvelous thing. It is remarkably simple, yet somehow expressive enough to allow entire operating systems to be written with ease. Just as curiously, its terse, minimalistic syntax became </span><em>the</em><span> way to structure code — copied by nearly all of its mainstream successors, from Java to Go.</span></p><p><span>Among geeks, the syntax can also be credited for the emergence of code obfuscation as an art form. The </span><a href="https://www.ioccc.org/" rel="">IOCCC contest </a><span>is perhaps the best-known outlet for this craft; a typical IOCCC submission looks like this:</span></p><blockquote><pre><code>#define			      q [v+a]
#define			     c b[1]
#define			    O 1 q
#define			   o 0 q
#define			  r(v,a\
)v&lt;0&amp;&amp;(			 v*=-1,		a*=-1);
#define			p(v,m,	    s,w)*c==*#v?2 q\
&lt;m?(c++		       ,d=1,3	   q=0,5      q=m,main\
(a+3,b)		      ,o=o*s	 q,O=O*		 w q):0:
static		     d,v[99	];main		  (int a,
char**b		    ){d=7;     if(*c?!		  (p(+,3
,4 q+O*		   3,4)p(			   -,(o?3
:(O=1,6		  )),4 q			  -O*3,4)
p(*,4,3		 ,4)p(/				  ,5,4,3)
p((),d,		0+3,0+				 04)*c==
')'?2 q	       &lt;02?(c				++,0):0
:(o=012	      *o+*c-			      '0',c++
,O=1)):	     2 q?3-			   2:printf(
"%d/%d"	    "\n",o		       ,O))return
1;d=a,r    (o,d)r		     (O,d)3 q
=o&lt;O?(4	  q=o,O)		   :(4 q=O,
	 o);r(d,		 o)a+=3;O?
				 1:(O=1,2
				q=1);while
				(2 q=o%1 q)a++;v[d]/=O;d[
				v+1]/=O;return main(d,b);}</code></pre></blockquote><p>There’s plenty to admire about the winning IOCCC entries, but they’re usually not fun to study: they tend to rely on confusing preprocessor macros, nonsensical formatting, unhelpful variable names, and simple logic encoded as obtuse arithmetic expressions that need to be reverse-engineered back into normal code.</p><p><span>This is unfortunate; the C language can easily confound seasoned developers without being hard to read. To illustrate, consider the humble </span><em>switch (…)</em><span> statement:</span></p><blockquote><pre><code>  switch (i) {
    case 0: puts("i = 0"); break;
    case 1: puts("i = 1"); break;
    case 2: puts("i = 2"); break;
  }</code></pre></blockquote><p><span>There are very few C developers who realize that </span><em>switch (…) </em><span>is no different from </span><em>if (…)</em><span> or </span><em>for (…)</em><span> in that it doesn’t actually need curly brackets. This will compile just fine:</span></p><blockquote><pre><code>  switch (i) case 1: puts("i = 1");</code></pre></blockquote><p><span>Such </span><em>switch (…)</em><span> notation is unheard-of and never encountered in real life simply because it defeats the purpose: without angle brackets, you can only have one statement riding on the coattails. In other words, this will not work:</span></p><blockquote><pre><code><code>   switch (i)
     case 1: puts("i = 1");
     case 2: puts("i = 2"); ← ERROR: no longer in switch (...)</code></code></pre></blockquote><p>Oh well! </p><p><span>On a seemingly unrelated note, let’s ponder the actual mechanics of </span><em>switch (…)</em><span>: in essence, it’s a glorified </span><em>goto</em><span>. It jumps to the matching </span><em>case </em><span>label, but it doesn’t care about what’s going on in between the curly brackets; it’s a code block like any other:</span></p><blockquote><pre><code><code>  switch (i) {
    int a = 123;
    puts("This code is unreachable!");
    default: printf("a = %d\n", a);
  }</code></code></pre></blockquote><p><span>The above example should print the value of </span><em>a</em><span>, but it won’t be initialized to 123! If you don’t believe me, you can try it out </span><a href="https://godbolt.org/z/ezKrzaYqq" rel="">here</a><span>.</span></p><p><span>Just as unexpectedly, </span><em>case</em><span> labels don’t really need to appear top-level in their associated </span><em>switch (…)</em><span> block. In particular, this code works perfectly fine (</span><a href="https://godbolt.org/z/hcr41GecG" rel="">link</a><span>):</span></p><blockquote><pre><code><code>  switch (i) {
    if (0) case 0: puts("i = 0");
    if (0) case 1: puts("i = 1");
    if (0) case 2: puts("i = 2");
  }</code></code></pre></blockquote><p><span>Note that in this example, you don’t need </span><em>break</em><span> statements to avoid fallthrough; the code unconditionally jumps to the appropriate </span><em>case</em><span> label, skipping over the preceding </span><em>if (0</em><span>); but once the relevant </span><em>puts(…)</em><span> is executed, all subsequent calls are gated behind the remaining, perpetually-false </span><em>if (0)</em><span> conditionals.</span></p><p><span>But wait, there’s more! Recall that </span><em>if</em><span> can be chained with </span><em>else</em><span> — and that syntactically, the entire blob functions as a single top-level statement:</span></p><blockquote><pre><code><code>if (one_thing) do_one_thing; else do_another_thing;</code></code></pre></blockquote><p><span>So… without further ado, I present you the following curly-bracket-free monstrosity that combines all the quirks we discussed so far (</span><a href="https://godbolt.org/z/MqGb63x69" rel="">link</a><span>):</span></p><blockquote><pre><code><code>#include &lt;stdio.h&gt;

int main() {
 
  int i = 1;

  switch (i)

         if (0) case 0:        puts("i = 0");
    else if (0) case 1 ... 10: puts("i = 1 ... 10");
    else if (0) case 11:       puts("i = 11");
    else if (0) default:       puts("i = something else");

  return 0;

}</code></code></pre></blockquote><p><span>And who needs </span><em>switch (…)</em><span>, anyway? The &amp;&amp; operator is a longstanding GNU extension that lets you get an address of a label; you can then </span><em>goto</em><span> to that address. Equipped with this knowledge, you can make your own </span><em>switch (…)</em><span> —with blackjack, et cetera (</span><a href="https://godbolt.org/z/7Pvz1Mr6M" rel="">link</a><span>):</span></p><blockquote><pre><code><code>#include &lt;stdio.h&gt;

int main() {
 
  int i = 1;

  goto *(void*[]){ &amp;&amp;case_0, &amp;&amp;case_1, &amp;&amp;case_2 }[i];

  if (0) case_0: puts("i = 0");
  if (0) case_1: puts("i = 1");
  if (0) case_2: puts("i = 2");

  return 0;

}</code></code></pre></blockquote><p><span>Heck, here’s another fantastic use for  &amp;&amp;: why bother with </span><em>for (…)</em><span> if you can use labels to implement loops directly within variable declarations? Check this out (</span><a href="https://godbolt.org/z/Yzj36dEj4" rel="">link</a><span>):</span></p><blockquote><pre><code>#include &lt;stdio.h&gt;

int main() {

  /* Iterate from i = 0 to i = 5: */

  int i = (i = 0) &amp; ({_:0;}) | printf("i = %d\n", i) * 
          (++i &gt; 5) ?: ({goto *&amp;&amp;_;0;});

  return 0;

}</code></pre></blockquote><p>This last snippet is probably not UB-safe and is GCC-specific. But the point stands: you can write completely alien and befuddling code in C without making it unreadable.</p><p>If you liked this article, please subscribe! Unlike most other social media, Substack is not a walled garden and not an addictive doomscrolling experience. It’s just a way to stay in touch with the writers you like.</p><p><em><span>For a thematic catalog of posts on this site, </span><a href="https://lcamtuf.coredump.cx/offsite.shtml" rel="">click here</a><span>.</span></em></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenDNS Suspends Service in France Due to Canal+ Piracy Blocking Order (112 pts)]]></title>
            <link>https://torrentfreak.com/opendns-suspends-service-in-france-due-to-canal-piracy-blocking-order-240629/</link>
            <guid>40835117</guid>
            <pubDate>Sun, 30 Jun 2024 04:19:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://torrentfreak.com/opendns-suspends-service-in-france-due-to-canal-piracy-blocking-order-240629/">https://torrentfreak.com/opendns-suspends-service-in-france-due-to-canal-piracy-blocking-order-240629/</a>, See on <a href="https://news.ycombinator.com/item?id=40835117">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>

<span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" title="Go to TorrentFreak." href="https://torrentfreak.com/"><span property="name">Home</span></a><meta property="position" content="1"></span> &gt; <span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" title="Go to the Anti-Piracy category archives." href="https://torrentfreak.com/category/anti-piracy/"><span property="name">Anti-Piracy</span></a><meta property="position" content="2"></span> &gt; <span property="itemListElement" typeof="ListItem"><a property="item" typeof="WebPage" title="Go to the Site Blocking category archives." href="https://torrentfreak.com/category/anti-piracy/site-blocking/"><span property="name">Site Blocking</span></a><meta property="position" content="3"></span> &gt; <span></span>
</p>
<p>
<span> </span>
This month, a French court went along with a demand from Canal+ to tighten up previously obtained anti-piracy measures. The court ordered Google, Cloudflare, and Cisco to poison their DNS records to prevent these third-party services acting as workarounds for existing pirate site blockades. Cisco's response became evident on Friday when it withdrew its OpenDNS service from the entire country.
</p>
</div><div>
<p><a href="https://torrentfreak.com/images/football-block.png"><img loading="lazy" decoding="async" src="https://torrentfreak.com/images/football-block.png" alt="football block" width="290" height="286" srcset="https://torrentfreak.com/images/football-block.png 474w, https://torrentfreak.com/images/football-block-300x296.png 300w" sizes="(max-width: 290px) 100vw, 290px"></a>In 2023, broadcaster Canal+ went to court in France with the goal of obtaining an order requiring local ISPs to block over 100 pirate sports streaming sites. </p>
<p>The French court complied with the request; ISPs including Orange, SFR, OutreMer Télécom, Free, and Bouygues Télécom, were ordered to implement technical measures to prevent access to Footybite.co, Streamcheck.link, SportBay.sx, TVFutbol.info, and Catchystream.com, among dozens of others. </p>
<p>Since the ISPs have their own DNS resolvers for use by their own customers, these were configured to provide non-authentic responses to deny access to the sites in question. Somewhat inevitably, some of the ISPs’ users reconfigured their machines to use third-party DNS servers, included those provided by Cloudflare, Google, and Cisco.</p>
<h2>Canal+ Targets DNS Providers</h2>
<p>To prevent these workarounds, last year <a href="https://torrentfreak.com/dns-block-canal-sues-cloudflare-google-cisco-to-fight-piracy-231230/">Canal+ took legal action</a> against three popular public DNS providers – Cloudflare (1.1.1.1), Google (8.8.8.8), and Cisco (208.69.38.205) – demanding blocking measures similar to those already implemented by French ISPs under <a href="https://www.dalloz.fr/documentation/Document?id=CODE_CSPO_ARTI_L333-10&amp;scrll=CSPO010375&amp;FromId=CODES_SECS_CSPO_TALPHA">Article L333-10</a> of the French Sports Code.</p>
<p>The Paris judicial court responded this May by handing down two orders; one concerning Premier League matches and the other relating to matches played in the Champions League. The Court ordered Google, Cloudflare, and Cisco to implement measures to prevent French internet users from using their services to access around 117 pirate domains.</p>
<p>Google previously indicated it would comply and during the last 24 hours, OpenDNS complied too, although perhaps not in the manner Canal+ or the Court had anticipated.</p>
<h2>OpenDNS Suspends Entire Service to the Whole of France</h2>
<p>Reports of problems with the OpenDNS service seemed to begin on Friday, and it didn’t take long to discover the cause. The technical issues were isolated to France and apparently parts of Portugal too, with an explanation having appeared on the OpenDNS website, perhaps as early as Thursday evening.</p>
<p>“Effective June 28, 2024: Due to a court order in France issued under Article L.333-10 of the French Sport code and a court order in Portugal issued under Article 210-G(3) of the Portuguese Copyright Code, the OpenDNS service is not currently available to users in France and certain French territories and in Portugal. We apologize for the inconvenience,” the <a href="https://support.opendns.com/hc/en-us/articles/27951404269204-OpenDNS-Service-Not-Available-To-Users-In-France-and-Portugal">announcement</a> reads.</p>
<p><a href="https://torrentfreak.com/images/opendns.png"><img loading="lazy" decoding="async" src="https://torrentfreak.com/images/opendns.png" alt="opendns" width="670" height="380" srcset="https://torrentfreak.com/images/opendns.png 768w, https://torrentfreak.com/images/opendns-300x170.png 300w" sizes="(max-width: 670px) 100vw, 670px"></a></p>
<p>OpenDNS doesn’t appear to have elaborated on its decision at the time of writing, but it’s certainly possible that the operators of this technical information service strongly oppose being ordered to undermine its accuracy.</p>
<p>The demands of Canal+, with full support of courts in both France and Portugal, effectively require OpenDNS to lie in response to DNS inquiries. It’s not difficult to see why that would be a problem for the operators of entirely neutral internet infrastructure, not least because this order is almost guaranteed not to be the last of its kind.</p>
<p>It’s a bold move that some will undoubtedly criticize. For others, the OpenDNS decision represents the type of dramatic pushback required to draw attention to anti-piracy measures that are increasingly encroaching on the vital mechanisms underpinning the internet itself.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Chrome is adding `window.ai` – a Gemini Nano AI model right inside the browser (215 pts)]]></title>
            <link>https://twitter.com/rauchg/status/1806385778064564622</link>
            <guid>40834600</guid>
            <pubDate>Sun, 30 Jun 2024 01:56:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/rauchg/status/1806385778064564622">https://twitter.com/rauchg/status/1806385778064564622</a>, See on <a href="https://news.ycombinator.com/item?id=40834600">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Inside a $1 radar motion sensor (523 pts)]]></title>
            <link>https://10maurycy10.github.io/projects/motion_sensor_hacking/</link>
            <guid>40834349</guid>
            <pubDate>Sun, 30 Jun 2024 00:44:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://10maurycy10.github.io/projects/motion_sensor_hacking/">https://10maurycy10.github.io/projects/motion_sensor_hacking/</a>, See on <a href="https://news.ycombinator.com/item?id=40834349">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><p><time datetime="2024-06-28">Jun 28, 2024</time>
(<a href="https://10maurycy10.github.io/tags/electronics">Electronics</a>)
(<a href="https://10maurycy10.github.io/tags/wireless">Wireless communication and power</a>)</p><p>I recently got some cheap RCWL-0516 microwave motion sensors, mostly because I was wondering how China managed to make a radar for under a dollar:</p><p><a href="https://10maurycy10.github.io/projects/motion_sensor_hacking/boardrev.png"><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/board.png" alt="Photographs of the front and back of the circuit board"> Click for mirrored back view</a></p><p>Getting one working was quite easy, I just connected the <code>VIN</code> pin to 5 volts, <code>GND</code> to ground, and added a 1 uF decoupling capacitor on the <code>3V3</code> pin.
When someone moves within ~5 meters, the <code>OUT</code> pin goes up to 3 volts for 3 seconds.</p><p>So it works, but how?</p><p>First, I found a datasheet for the the large SOIC-16 chip.
It turns out the <code>BISS0001</code> is an <em>infrared</em> motion sensor chip? How does that work?</p><p>Generally, motion and speed sensing (doppler) radars work by sending out a continuous carrier and mixing the received signal with the transmitted carrier to create a low frequency IF signal.
If reflections are coming from a moving object, the received signal will slowly drift in and out of phase with the transmitted signal, creating a beat frequency at just a few hertz.
Becuase a motion sensor doesn’t care about the exact speed, all the chip has to do is look for millivolt-level changes: all the hard work is already done.</p><p>In my module, the IF signal enters the chip on pin 14, but the chip outputs an amplified copy on pin 16, which is much more oscilloscope friendly:<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup></p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/iftap.png" alt="The IF signal, on pin 16 of the BISS0001 chip, showing a strong oscillation in the middle"></p><p>In the middle of the trace I moved a laptop ~40 centimeters towards the sensor, but the sensor also picked up some slower level shifts on either side from when I reached over to stop the scope.
This trace is actually enough to figure out what the frequency the radar is using: While the laptop was moving, there were 8 peaks, meaning that the round trip path length changed by 8 wavelengths.
Eight wavelengths over a distance of 80 cm comes out to ~10 cm, not that far from the actual wavelength of 9.4 cm.</p><h2 id="so-wheres-all-the-magic">So where’s all the magic?</h2><p>The entire right side of the board is just the BISS001 acting as an amplifier, comparator and timer.
All of the RF stuff happens on the left side of the board using just a handful of components:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/front.png" alt="Photo of the front of the board"></p><p>At first glance, the whole thing is just a single transistor oscillator working at a frequency of 3.18 GHz:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/RF.png" alt="Rough schematic of the RF section"></p><p>The S shaped track on the emitter is a microwave resonator<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup> and antenna, which is driven by the BJT transistor with feedback from a capacitor formed by the resonator and a parallel copper track.
I suspect the ring structure at the back is just to prevent oscillation at other frequencies, many very similar sensors don’t have one, or just use a solid ground plane.
The oscillator is also quite unstable, and drifts by several MHz from hand capacitance and biasing drift, which is likely why the module is quite sensitive to power supply noise.</p><p>But it’s actually 2 oscillators in one, the microwave oscillation is pulsed at around 20 MHz, creating this waveform on the emitter:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/squench.png" alt="20 MHz oscillation visible on emitter">
My scope can’t see 3 GHz, but it’s there everywhere except on the downward slopped part of the waveform.</p><p>What’s happening is that as the oscillator runs, it changes the 66 pF capacitor, raising the emitter voltage until oscillator can’t run anymore.
At this point, the 220 ohm resistor discharges the capacitor, restarting the oscillation in just a few nanoseconds.</p><p>This pulsing allows it to work as a super-regenerative receiver.
Once the transistor’s gain rises above one, the oscillator doesn’t start immediately: It needs a tiny kick to get going.
Any signal in the resonator gets amplified again and again until it’s large enough to charge the capacitor and restart the cycle.
Because of the exponential increase in amplitude, even a tiny amount of RF will increase the pulse frequency, turning the oscillator into a sensitive receiver.
(This is why you never have to wait long for an oscillator to start, noise will quickly be amplified until it clips the transistor amplifier)</p><p>Well hang on, if it’s receiving while the oscillator starts, before it transmits, how is it able to see the phase change from moving objects?</p><p>With the off-time of around 15 nanoseconds, any returns from a static object more then 2.5 meters away will arrive during the oscillator’s start-up.
These static returns act as the radar’s local oscillator, the super-regenerative receiver detects the amplitude modulated signal from interference between static and moving returns.
In an indoors environment with plenty of reflections, there will always be some RF bouncing around to illuminate moving objects, no mater how close they are.</p><p>This sort of radar-by-wishful-thinking approach is probably why the sensor has very inconsistent performance;
Indoors it works very nicely, with up to 5 meters of range, but outdoors with no convenient static returns it often doesn’t work at all.</p><h2 id="a-bit-of-fun-an-s-band-transmitter">A bit of fun, an S-band transmitter:</h2><p>The first modification I tried was to remove the capacitor that causes the 20 MHz pulsing, which is actually two 33 pF capacitors in parallel:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/cw_tx.png" alt="Image showing which 2 capacitors to remove"></p><p>This turns the thing into a transmitter, applying a signal to just about anywhere in the oscillator will frequency modulate it, and the thing can be on/off keyed by cycling power.</p><p>The radar does still somewhat work without the pulsing and super-regenerative parts, except that the IF signals are much weaker, drastically reducing the sensitivity.
What’s happening here is that the the oscillator itself is acting as a mixer, down converting the received signal, but without any gain.</p><h2 id="bistatic-radar">Bistatic radar:</h2><p>Ok, so can we use this in a more conventional radar setup?
I tried placing another unmodified module acting as the receiver next to the transmitter, which resulted in a much more consistent return signal:</p><p><img src="https://10maurycy10.github.io/projects/motion_sensor_hacking/bistatic.png" alt=""></p><p>Signal from moving a laptop towards and away from the radar.</p><p>The strange amplitude variations are gone and the return from my relatively slow moving hand is much weaker, as expected from a doppler radar.
On the other hand, distant return signals are weaker because the receiver is constantly being blasted by RF from the transmitter.
It also functions worse as a motion sensor because it needs significant movement towards or away from it to trigger, unlike normally, where just about anything will trigger it.</p><p>On the other hand, it works quite nicely as a speed sensor by running an FFT or simply detecting zero crossings on the IF (on pin 14/16 of the chip).
The math for this is quite easy, just multiply the wavelength by the beat frequency and divide by 2 for the speed.
For example, the highest beat frequency in the scope trace was 15 Hz, so the speed was .7 m/s:</p><pre tabindex="0"><code>9.4 cm * 15 Hz / 2 = 70 cm/s = .7 m/s
</code></pre><p>If the two modules are separated by 1 to 2 meters or so, the outdoors performance is much better then with just a single module, with the best sensitivity in the area between the two modules.
The performance is still not exactly good, but it is a lot better then the otherwise non-existent outdoors performance.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Trilobites killed by volcanic ash (129 pts)]]></title>
            <link>https://www.bristol.ac.uk/news/2024/june/prehistoric-pompeii.html</link>
            <guid>40833645</guid>
            <pubDate>Sat, 29 Jun 2024 22:14:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bristol.ac.uk/news/2024/june/prehistoric-pompeii.html">https://www.bristol.ac.uk/news/2024/june/prehistoric-pompeii.html</a>, See on <a href="https://news.ycombinator.com/item?id=40833645">Hacker News</a></p>
<div id="readability-page-1" class="page"><p property="description">Some of the most perfectly preserved trilobite fossils ever found have revealed details of the extinct arthropod unknown until now. </p><div property="articleBody"><p>The new specimens, which were killed and fossilised quickly when volcanic ash smothered them underwater more than 500 million years ago, show details never before seen in any trilobite, despite the millions of fossils gathered and studied over the past two centuries.</p>
<p>The trilobites, which are from the Cambrian period, have been the subject of research by an international team of scientists, led by Professor Abderrazak El Albani, geologist based at University of Poitiers and originally from Morocco. This international team include co-authors Harry Berks and <a href="https://www.bristol.ac.uk/people/person/Philip-Donoghue-4fd2d6ef-3986-4566-97e4-7ae7db296525/">Philip Donoghue</a> from the <a href="https://www.bristol.ac.uk/">University of Bristol’s</a> <a href="https://www.bristol.ac.uk/earthsciences/">School of Earth Sciences</a>.</p>
<p>They discovered clustering of specialised leg pairs around the mouth giving a clearer picture of how trilobites fed.</p>
<p>Harry Berks explained: “The head and body appendages had an inward-facing battery of dense spines like those of horseshoe crabs, manipulating and tearing prey or scavenged carcasses as they were moved forwards to the mouth.</p>
<p>“The mouth, a narrow slit behind a fleshy lobe called a labrum, known in living arthropods, has never been so clearly seen in a trilobite before.”</p>
<p>The appendages at the edge of the mouth have curved bases like spoons and are so small that they went undetected in less perfectly preserved fossils.&nbsp;</p>
<p>It was widely thought that trilobites had three pairs of head appendages behind their long antennae but both Moroccan species show that there were four pairs.</p>
<p>The Moroccan trilobites date to the Cambrian Period, about 515 million years ago.&nbsp; The fossils are found in rock composed of volcanic ash, deposited on the shallow seafloor on which the trilobites lived.&nbsp; The trilobites, and even tiny ‘lamp shells’ (brachiopods) that attached to them via a delicate stalk in life, were killed by the hot, suffocating ash and were fossilised very quickly when the ash that encased them transformed to rock.&nbsp; The outer surface of the trilobites, all of their legs and the lamp shells hitching a ride on them were moulded as impressions in the volcanic rock, while the trilobites’ digestive tract was preserved after it filled with ash.</p>
<p>To see how these impressions in the rock looked just after the trilobites died, the team used a high-resolution X-ray micro-tomography (XRµCT).&nbsp; X-rays detect the difference in density between the rock in which a trilobite was moulded and the empty (air) space where the body was before it was obliterated. Co-author, Harry Berks, used computer modelling of X-ray slices through the fossils to study the anatomy of the entire body of the trilobites in 3-dimensions, freed from the surrounding rock. Harry said “The computer work is pain-staking but it’s definitely been worth it. These trilobites look so alive, it’s almost as though they could crawl out of the rock.”</p>
<p>The ‘Pompei’ trilobites are so remarkable because they are not flattened or deformed like many fossils and every leg is arranged as it was in life, with even small spines and sensory bristles along the joints of the legs preserved. “I’ve been studying trilobites for nearly 40 years, but I never felt like I was looking at live animals as much as I have with these ones”, said co-author Greg Edgecombe from the Natural History Museum, London.</p>
<p>The study sheds new light on the anatomy and biology of the long-vanished trilobites but also signals the enormous potential for volcanic ash deposited in shallow marine settings as a setting to search for exceptionally preserved fossils.&nbsp; Co-author Philip Donoghue said: “No one expects to find fossils in volcanic rocks but our study shows that volcanic ash deposits are definitely worth a look. Who knows what secrets remains to be discovered in these understudied rocks?”&nbsp;</p>
<p>Trilobites are a completely extinct kind of arthropod, the group of jointed-legged animals that includes more than a million species of insects, crabs, spiders, and centipedes alive today.&nbsp; They are one of the most abundant and diverse lifeforms in fossil deposits of the Palaeozoic Era, surviving from 521 million years ago to 250 million years ago.&nbsp; Palaeontologists have described more than 20,000 species of trilobites, ranging in body length from less than two millimetres to more than 90 centimetres.&nbsp; Most trilobite species are only known from their hard exoskeleton (like a lobster’s shell), but only about 30 species preserve a pair of antennae and/or pairs of two-branched legs under the head shield and each segment of the body.&nbsp;</p>
<p>The paper:</p>
<p>'Rapid volcanic ash entombment reveals the 3D anatomy of Cambrian trilobites' by El Albani A, Donoghue P.C.J, Berks, H.O et al in <em>Science</em>.&nbsp;</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Operational Wargame Series: The best game not in stores now (2021) (104 pts)]]></title>
            <link>https://nodicenoglory.com/2021/06/23/the-operational-wargame-series-the-best-game-not-in-stores-now/</link>
            <guid>40833327</guid>
            <pubDate>Sat, 29 Jun 2024 21:01:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nodicenoglory.com/2021/06/23/the-operational-wargame-series-the-best-game-not-in-stores-now/">https://nodicenoglory.com/2021/06/23/the-operational-wargame-series-the-best-game-not-in-stores-now/</a>, See on <a href="https://news.ycombinator.com/item?id=40833327">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<p><em>By Mitch Reed</em></p>
<p>I try not to mix my work on NDNG with my day job since despite them both having “wargame” in the title they are vastly different and done for very different reasons. Last summer I was asked by the USMC Warfighting Lab to help them playtest a game called <em>Assassin’s Mace</em> which is based on the <em>Operational Wargame Serie</em>s rules and is developed by the USMCWL. I was immediately impressed with the game system and felt that the hobby community would enjoy hearing about it.<span id="more-17707"></span> <strong>What Is the Operational Wargame Series?</strong></p>
<p><em>The Operational Wargame Series (OWS)</em> is a tabletop game that allows the players to simulate combat between 2025 and 2050. The game is focused on the operational level of warfare and ties in the effects of military capabilities across all domains. The game developed by the recently Retired Col Tim Barrick and a team of designers at the USMCWL really gets to the flavor of the difficulties and myriad of decisions a commander of an operational campaign has to make.</p>
<p>To me the beauty of the game is that Col Barrick, who is an avid hobby gamer, took some of the best mechanics from the hobby world and created a game that service members can play as a part of military education, concept development and joint campaign planning.</p>
<p><img decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/j.png" alt="" width="1139" height="224" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/j.png 1139w, https://nodicenoglory.com/wp-content/uploads/2021/04/j-400x79.png 400w, https://nodicenoglory.com/wp-content/uploads/2021/04/j-950x187.png 950w, https://nodicenoglory.com/wp-content/uploads/2021/04/j-150x29.png 150w, https://nodicenoglory.com/wp-content/uploads/2021/04/j-768x151.png 768w" sizes="(max-width: 1139px) 100vw, 1139px"></p>
<p>As of now, the game as two modules, the first is <em>Assassin’s Mace</em> which focuses on the INDO-PACOM theater and <em>Zapad,</em> the newer of the modules which covers the European theater. Hobby gamers will notice how OWS is a true “hex and counter” game that many in the hobby community would be familiar with.</p>
<p><strong>OWS Mechanics</strong></p>
<p>The game map which represents the overall theater is scaled to 200nm and the tactical map is scaled to 10nm per hex which enables a team to play a large fight and a smaller on that focuses on a small part of the theater such as the island of Taiwan as seen in <em>Assassin’s Mace</em>.<br>
<img decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/p.png" alt="" width="1231" height="791" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/p.png 1231w, https://nodicenoglory.com/wp-content/uploads/2021/04/p-400x257.png 400w, https://nodicenoglory.com/wp-content/uploads/2021/04/p-950x610.png 950w, https://nodicenoglory.com/wp-content/uploads/2021/04/p-150x96.png 150w, https://nodicenoglory.com/wp-content/uploads/2021/04/p-768x493.png 768w" sizes="(max-width: 1231px) 100vw, 1231px"></p>
<p>The counters, which are huge, can be used on either map and represent units such as naval ships, flying squadrons, SAM batteries and maneuver battalions/companies for the ground fight. The counters are more than just a marker that represents where a unit is on the map. The counters also function as a true unit info card which you can see it’s offensive and defensive capabilities and mark off unit status as it takes losses.</p>
<p><img decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/f.png" alt="" width="821" height="342" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/f.png 821w, https://nodicenoglory.com/wp-content/uploads/2021/04/f-400x167.png 400w, https://nodicenoglory.com/wp-content/uploads/2021/04/f-150x62.png 150w, https://nodicenoglory.com/wp-content/uploads/2021/04/f-768x320.png 768w" sizes="(max-width: 821px) 100vw, 821px"></p>
<p>The real core mechanic is how dice are used in the game. The dice act as an instant adjudicator and the system uses different sizes of dice that can be adjusted during game play. A high percentage attack would roll a d20, however if the unit is degraded it may roll a d16 or d12 depending on the status of the unit and the environment it is in.</p>
<p>The rolls also work the other direction where a player can have a unit support a low probability attack which uses a d4 and allow it to use a bigger die, such as a d6 or d8. The game calls these shifts in a roll as being “promoted” or “demoted”, however it also shows the player how by blending or sequencing certain capabilities can increase your probability of success.<br>
<strong><img loading="lazy" decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/c.png" alt="" width="831" height="756" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/c.png 831w, https://nodicenoglory.com/wp-content/uploads/2021/04/c-400x364.png 400w, https://nodicenoglory.com/wp-content/uploads/2021/04/c-150x136.png 150w, https://nodicenoglory.com/wp-content/uploads/2021/04/c-768x699.png 768w" sizes="(max-width: 831px) 100vw, 831px"></strong></p>
<p><strong>OWS Gameplay</strong></p>
<p>The game requires the players to plan out their turn which is usually done by an informal huddle, however is a very important part of the game. Once this is done the players of both sides move all of their units simultaneously and then move into the I/O-Cyber and the ISR portion of the turn which is where you see a lot of the “promotion” and “demotion” occur. After these steps, the combat is adjudicated with air going first, followed by naval and ground combat.<br>
<img loading="lazy" decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/i.png" alt="" width="817" height="357" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/i.png 817w, https://nodicenoglory.com/wp-content/uploads/2021/04/i-400x175.png 400w, https://nodicenoglory.com/wp-content/uploads/2021/04/i-150x66.png 150w, https://nodicenoglory.com/wp-content/uploads/2021/04/i-768x336.png 768w" sizes="(max-width: 817px) 100vw, 817px"></p>
<p>The 24-hour turn then ends with the regeneration phase where air units return to their bases, destroyed units can be possibly brought back in the game and things like logistics are adjusted. The turns do not take very long at all and teams of players can get in 2-3 turns in a normal work day.</p>
<p><strong>Military Application</strong></p>
<p>I was invited to the mega test of the OWS system in early April where the students of USMC War College played the game on five maps which represented the Indo-Pacific, European and the North American theaters with tactical maps for Taiwan and the Baltics. The class of about 30 students were split into two teams, with blue being the US and its allies and the Red being China and Russia.</p>
<p><img loading="lazy" decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/jgd.png" alt="" width="640" height="654" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/jgd.png 640w, https://nodicenoglory.com/wp-content/uploads/2021/04/jgd-391x400.png 391w, https://nodicenoglory.com/wp-content/uploads/2021/04/jgd-147x150.png 147w" sizes="(max-width: 640px) 100vw, 640px"></p>
<p>The students, which were at the O-5 and O-6 level from all the services and some allied/partner nations played the game for three full days and not only had a great time they also learned a lot.</p>
<p><img loading="lazy" decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6279-scaled.jpg" alt="" width="2560" height="1920" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6279-scaled.jpg 2560w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6279-400x300.jpg 400w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6279-950x713.jpg 950w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6279-150x113.jpg 150w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6279-768x576.jpg 768w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6279-1536x1152.jpg 1536w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6279-2048x1536.jpg 2048w" sizes="(max-width: 2560px) 100vw, 2560px"></p>
<p>During professional military education you learn a lot about joint concepts and the theory behind joint warfare. Unless you have been exposed to this in a previous military job some the students may not be able to “visualize” what the lessons are covering. What OWS does is take what is taught in those lessons and puts it all together in a way where the students put all the moving parts together and then enables them to grasp the all of the classroom concepts.</p>
<p><img loading="lazy" decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6282-scaled.jpg" alt="" width="2560" height="1920" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6282-scaled.jpg 2560w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6282-400x300.jpg 400w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6282-950x713.jpg 950w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6282-150x113.jpg 150w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6282-768x576.jpg 768w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6282-1536x1152.jpg 1536w, https://nodicenoglory.com/wp-content/uploads/2021/04/IMG_6282-2048x1536.jpg 2048w" sizes="(max-width: 2560px) 100vw, 2560px"></p>
<p>Another thing OWS does magnificently is to show the players how to blend different capabilities together to achieve their desired effects. When I play tested Zapad in March, we were able to work with the US Army wargamers to jointly roll back the enemy air defenses so we can get them close air support.</p>
<p>Another reason why OWS is a great system is that the rules are easy to learn but tough to master, more on this later.</p>
<p><strong>Hobby Application</strong></p>
<p>Sadly, the game is only available from the US Marine Corps Association and is only available for offices in the DoD who conduct wargaming, so unless this changes you will probably not get your hands on a copy. Which then leads to the next question, could this be a viable game for the hobby market? I feel it could be a big hit if the game goes commercial, which as of now there are no plans for.<br>
<img loading="lazy" decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/e.png" alt="" width="858" height="493" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/e.png 858w, https://nodicenoglory.com/wp-content/uploads/2021/04/e-400x230.png 400w, https://nodicenoglory.com/wp-content/uploads/2021/04/e-150x86.png 150w, https://nodicenoglory.com/wp-content/uploads/2021/04/e-768x441.png 768w" sizes="(max-width: 858px) 100vw, 858px"></p>
<p>The other question I bet you are thinking of is how would a hobby gamer do when playing the games in OWS system. For that I have to say “it depends”. In order to really understand the game, you need a real understanding of how joint warfare works and how different capabilities are used during a campaign. Even a military vet may not have the right amount of knowledge to play the game ‘well” and it would depend on their exposure of operational campaign planning or execution. Even with this said, I think OWS would be a good way to teach hobby gamers on how the joint force fights.</p>
<p><strong><img loading="lazy" decoding="async" src="https://nodicenoglory.com/wp-content/uploads/2021/04/h.png" alt="" width="1027" height="491" srcset="https://nodicenoglory.com/wp-content/uploads/2021/04/h.png 1027w, https://nodicenoglory.com/wp-content/uploads/2021/04/h-400x191.png 400w, https://nodicenoglory.com/wp-content/uploads/2021/04/h-950x454.png 950w, https://nodicenoglory.com/wp-content/uploads/2021/04/h-150x72.png 150w, https://nodicenoglory.com/wp-content/uploads/2021/04/h-768x367.png 768w" sizes="(max-width: 1027px) 100vw, 1027px"></strong></p>
<p><strong>Final Thoughts</strong><br>
I think the team at USMCWL really has developed a sound game that may change how we wargame across the DoD. I am looking at ways in which I can use this game system for my “day job”. I also would love to see this game available for the commercial side of wargaming, I think grogs would just love to play this game.</p>
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Overleaf: An open-source online real-time collaborative LaTeX editor (224 pts)]]></title>
            <link>https://github.com/overleaf/overleaf</link>
            <guid>40832930</guid>
            <pubDate>Sat, 29 Jun 2024 19:46:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/overleaf/overleaf">https://github.com/overleaf/overleaf</a>, See on <a href="https://news.ycombinator.com/item?id=40832930">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto"><h2 tabindex="-1" dir="auto">
  <br>
  <a href="https://www.overleaf.com/" rel="nofollow"><img src="https://github.com/overleaf/overleaf/raw/main/doc/logo.png" alt="Overleaf" width="300"></a>
</h2><a id="user-content-----" aria-label="Permalink: " href="#----"></a></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">An open-source online real-time collaborative LaTeX editor.</h4><a id="user-content-an-open-source-online-real-time-collaborative-latex-editor" aria-label="Permalink: An open-source online real-time collaborative LaTeX editor." href="#an-open-source-online-real-time-collaborative-latex-editor"></a></p>
<p dir="auto">
  <a href="https://github.com/overleaf/overleaf/wiki">Wiki</a> •
  <a href="https://www.overleaf.com/for/enterprises" rel="nofollow">Server Pro</a> •
  <a href="#contributing">Contributing</a> •
  <a href="https://mailchi.mp/overleaf.com/community-edition-and-server-pro" rel="nofollow">Mailing List</a> •
  <a href="#authors">Authors</a> •
  <a href="#license">License</a>
</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/overleaf/overleaf/blob/main/doc/screenshot.png"><img src="https://github.com/overleaf/overleaf/raw/main/doc/screenshot.png" alt="A screenshot of a project being edited in Overleaf Community Edition"></a></p>
<p dir="auto">
  Figure 1: A screenshot of a project being edited in Overleaf Community Edition.
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Community Edition</h2><a id="user-content-community-edition" aria-label="Permalink: Community Edition" href="#community-edition"></a></p>
<p dir="auto"><a href="https://www.overleaf.com/" rel="nofollow">Overleaf</a> is an open-source online real-time collaborative LaTeX editor. We run a hosted version at <a href="https://www.overleaf.com/" rel="nofollow">www.overleaf.com</a>, but you can also run your own local version, and contribute to the development of Overleaf.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Enterprise</h2><a id="user-content-enterprise" aria-label="Permalink: Enterprise" href="#enterprise"></a></p>
<p dir="auto">If you want help installing and maintaining Overleaf in your lab or workplace, we offer an officially supported version called <a href="https://www.overleaf.com/for/enterprises" rel="nofollow">Overleaf Server Pro</a>. It also includes more features for security (SSO with LDAP or SAML), administration and collaboration (e.g. tracked changes). <a href="https://www.overleaf.com/for/enterprises" rel="nofollow">Find out more!</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Keeping up to date</h2><a id="user-content-keeping-up-to-date" aria-label="Permalink: Keeping up to date" href="#keeping-up-to-date"></a></p>
<p dir="auto">Sign up to the <a href="https://mailchi.mp/overleaf.com/community-edition-and-server-pro" rel="nofollow">mailing list</a> to get updates on Overleaf releases and development.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">We have detailed installation instructions in the <a href="https://github.com/overleaf/toolkit/">Overleaf Toolkit</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Upgrading</h2><a id="user-content-upgrading" aria-label="Permalink: Upgrading" href="#upgrading"></a></p>
<p dir="auto">If you are upgrading from a previous version of Overleaf, please see the <a href="https://github.com/overleaf/overleaf/wiki#release-notes">Release Notes section on the Wiki</a> for all of the versions between your current version and the version you are upgrading to.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Overleaf Docker Image</h2><a id="user-content-overleaf-docker-image" aria-label="Permalink: Overleaf Docker Image" href="#overleaf-docker-image"></a></p>
<p dir="auto">This repo contains two dockerfiles, <a href="https://github.com/overleaf/overleaf/blob/main/server-ce/Dockerfile-base"><code>Dockerfile-base</code></a>, which builds the
<code>sharelatex/sharelatex-base</code> image, and <a href="https://github.com/overleaf/overleaf/blob/main/server-ce/Dockerfile"><code>Dockerfile</code></a> which builds the
<code>sharelatex/sharelatex</code> (or "community") image.</p>
<p dir="auto">The Base image generally contains the basic dependencies like <code>wget</code> and
<code>aspell</code>, plus <code>texlive</code>. We split this out because it's a pretty heavy set of
dependencies, and it's nice to not have to rebuild all of that every time.</p>
<p dir="auto">The <code>sharelatex/sharelatex</code> image extends the base image and adds the actual Overleaf code
and services.</p>
<p dir="auto">Use <code>make build-base</code> and <code>make build-community</code> from <code>server-ce/</code> to build these images.</p>
<p dir="auto">We use the <a href="https://github.com/phusion/baseimage-docker">Phusion base-image</a>
(which is extended by our <code>base</code> image) to provide us with a VM-like container
in which to run the Overleaf services. Baseimage uses the <code>runit</code> service
manager to manage services, and we add our init-scripts from the <code>server-ce/runit</code>
folder.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Please see the <a href="https://github.com/overleaf/overleaf/blob/main/CONTRIBUTING.md">CONTRIBUTING</a> file for information on contributing to the development of Overleaf.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Authors</h2><a id="user-content-authors" aria-label="Permalink: Authors" href="#authors"></a></p>
<p dir="auto"><a href="https://www.overleaf.com/about" rel="nofollow">The Overleaf Team</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">The code in this repository is released under the GNU AFFERO GENERAL PUBLIC LICENSE, version 3. A copy can be found in the <a href="https://github.com/overleaf/overleaf/blob/main/LICENSE"><code>LICENSE</code></a> file.</p>
<p dir="auto">Copyright (c) Overleaf, 2014-2024.</p>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>