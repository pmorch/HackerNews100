<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 11 May 2024 20:00:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Immersive Math (151 pts)]]></title>
            <link>http://immersivemath.com/ila/index.html</link>
            <guid>40329388</guid>
            <pubDate>Sat, 11 May 2024 17:16:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://immersivemath.com/ila/index.html">http://immersivemath.com/ila/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=40329388">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <h4><a href="http://immersivemath.com/ila/ch00_preface/preface.html">Preface</a></h4>
          <p>A few words about this book. </p>

          <h4><a href="http://immersivemath.com/ila/ch01_introduction/ch01.html">Chapter 1: Introduction</a></h4>

          <p>How to navigate, notation, and a recap of some math that we think you already know. </p>

          <h4><a href="http://immersivemath.com/ila/ch02_vectors/ch02.html">Chapter 2: Vectors</a></h4>
          <p>The concept of a vector is introduced, and we learn how to add and subtract vectors, and more. </p>

          <h4><a href="http://immersivemath.com/ila/ch03_dotproduct/ch03.html">Chapter 3: The Dot Product</a></h4>
          <p>A powerful tool that takes two vectors and produces a scalar.</p>

          <h4><a href="http://immersivemath.com/ila/ch04_vectorproduct/ch04.html">Chapter 4: The Vector Product</a></h4>
          <p>In three-dimensional spaces you can produce a vector from two other vectors using this tool.</p>

          <h4><a href="http://immersivemath.com/ila/ch05_gausselim/ch05.html">Chapter 5: Gaussian Elimination</a></h4>
          <p>A way to solve systems of linear equations.</p>
        </div><div>
          <h4><a href="http://immersivemath.com/ila/ch06_matrices/ch06.html">Chapter 6: The Matrix</a></h4>
          <p>Enter the matrix.</p>

          <h4><a href="http://immersivemath.com/ila/ch07_determinants/ch07.html">Chapter 7: Determinants</a></h4>
          <p>A fundamental property of square matrices.</p>

          <h4><a href="http://immersivemath.com/ila/ch08_rank/ch08.html">Chapter 8: Rank</a></h4>
          <p>Discover the behaviour of matrices.</p>

          <h4><a href="http://immersivemath.com/ila/ch09_linear_mappings/ch09.html">Chapter 9: Linear Mappings</a></h4>
          <p>Learn to harness the power of linearity...</p>

          <h4><a href="http://immersivemath.com/ila/ch10_eigen/ch10.html"> Chapter 10: Eigenvalues and Eigenvectors</a></h4>
          <p>This chapter has a value in itself.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PeaZip: Open-source file compression and encryption software (128 pts)]]></title>
            <link>https://peazip.github.io/</link>
            <guid>40327631</guid>
            <pubDate>Sat, 11 May 2024 12:19:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://peazip.github.io/">https://peazip.github.io/</a>, See on <a href="https://news.ycombinator.com/item?id=40327631">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <tbody>
          <tr>
            <td>
            <ul>
            </ul>
            <ul>
              <li>
                <p><a href="https://peazip.github.io/index.html#open_extract_rar_tar_zip_files">OPEN
SOURCE FILE COMPRESSION AND ENCRYPTION SOFTWARE</a></p>
              </li>
              <li>
                <p><a href="https://peazip.github.io/index.html#open_source_file_compression_and_encryption_software">PEAZIP
FREE ARCHIVER DOWNLOAD NOTES</a></p>
              </li>
            </ul>
            
            <a href="https://peazip.github.io/index.html#free_file_archiver_software" name="open_extract_rar_tar_zip_files"></a><br>
            <h2><a href="#free_file_archiver_software"><big><big><big>Open
Source file compression and
encryption
software</big></big></big></a></h2>
            <h3><big><span>What is
PeaZip
free
file archiver utility</span></big><br>
            </h3>
            <p>PeaZip is a free file
archiver
utility, similar to WinRar, WinZip, and 7-Zip (or File Roller, and Ark
on Linux), based on Open Source technologies of <a href="https://peazip.github.io/7zip-files-utility.html">7-Zip / p7zip archiver</a>, <a href="https://peazip.github.io/zstandard-compression-utility.html">Facebook Zstandard compressor</a>,
FreeArc, <a href="https://peazip.github.io/brotli-compression-utility.html">Google
Brotli compressor</a>, <a href="https://peazip.github.io/paq-files-compression-utility.html">PAQ
family of compressors</a>, <a href="https://peazip.github.io/pea-archiving-utility.html">PEA
(archiving and encryption) project</a>, and other Free Software file
compression tools.</p>
            <br>
            
            
            <p><big><span>What is different
in PeaZip?</span></big><br>
            </p>
            <p>The project started aiming to provide features often
overlooked in applications of the same type.<br>
            </p>
            <ul>
              <li><span>Be CLI-friendly</span>:
bridge the gap between GUI and
CLI applications to offer the best of the two worlds, blending the
archive manager into a <span>scripting
engine</span> to automate compression / archiving / backup /
extraction... <span></span>tasks.<br>
              </li>
            </ul>
            <p>From
"Console"
tab in archiving and extraction screens, the tasks defined in the GUI
can be exported as CLI scripts, i.e. for reuse, syntax learning or
inspection purpose, of for refining the tasks beyond the capabilities
of the GUI.</p>
            <ul>
              <li><span>Offer two factor
authentication</span> (password + keyfile)
for all formats supporting encryption, to increase security against
guessing and dictionary based attacks on weak passwords.</li>
            </ul>
            <ul>
              <li><span>Provide a GUI for
less commonly supported compression
formats</span> - which comes from very interesting research threads in
compression field, like the very powerful compressor zpaq or very
fast ones as brotli, and zstandard - and provide a platform-agnostic
GUI for 7z/p7zip on non-Windows systems.</li>
            </ul>
            <ul>
              <li><span>Provide multiple
file management features</span> each of
whom meeting the needs of different use cases, like verification of a
wide array of checksum and hash functions, find duplicates, <span>convert archives</span>, <span>search in
archives</span>, bookmarks, <span>tabbed
browsing</span>, etc.</li>
            </ul>
            <ul>
              <li><span>Deploy all the above
in a tool which is natively portable</span>, can
be used from removable devices or shared on a network / cloud, without
installation, and offers the same UX on all operating systems and
desktop
environments.</li>
            </ul>
            <br>
            <h2><a href="https://peazip.github.io/screenshots-peazip-1.html"><img src="https://peazip.github.io/peazip.png" alt="free file archiver utility" title="PeaZip free archiver utility"></a></h2>
            <p><span>PeaZip screenshot running on Windows in
light mode, default theme. </span><br>
            <span>Click the image to see
screenshots on different Operating Systems,
alternative themes and dark mode.<span></span></span><br>
            <span><span></span></span></p>
            <span><span></span></span> <h3><big><span>Main features of
PeaZip free archiver</span></big><br>
            </h3>
            <ul>
              <li><span>Open Source</span>,
released under LGPLv3 license which allows to easily integrate it in
any licensing environment</li>
            </ul>
            <ul>
              <li><span>Cross-platform</span>
and cross-architecture, <span>same full
featured GUI application on Linux, macOS, and Windows</span>, providing
full featured file manager and archive manager on all platforms, also <span>available as portable application</span></li>
            </ul>
            <ul>
              <li>Supports over 200 archive
formats<span>, ranging from very <span>powerful compressor</span>s like 7Z and
ZPAQ, to <span>extremely fast compressors</span>
like Brotli and Zstandard, with option to easily <span>convert archives</span></span></li>
            </ul>
            <ul>
              <li><span>Supports strong
encryption</span>, optionally <span>two
factor authentication</span> and <span>authenticated
encryption</span></li>
            </ul>
            <ul>
              <li>Can easily <span>export
tasks defined in the GUI as command line scripts</span></li>
            </ul>
            <br>
            <big><span>Safety of Open
Source
software</span></big><p>
            
PeaZip is Free Software, employing technologies from
state of art 7-Zip,
p7zip, Brotli, FreeArc, PAQ, PEA, Zstandard open source file
compression and archiving projects.</p><p>
            
This software is released under Open
Source GNU LGPLv3
copyleft license: the application is free for
any use (private and professional). </p><p>
            
All PeaZip packages are safe downloads, do not contain
advertising or harmful software, and are identified with
cryptographically secure SHA256 hash published on official download
site.</p>
            <big>Advantages of
Portable packages</big><p>
            
Portable packages, available for Linux, macOS, and
Windows
operating systems as alternative to installable packages, does not need
installation: simply extract and use the application for maximum ease
of deployment.</p><h4><big>PeaZip free archiver in
details</big></h4>
            <br>
Cross-platform (Linux, macOS, Windows), full-featured
but user-friendly
alternative to WinRar,
WinZip and similar general purpose archive manager applications, <a href="https://peazip.github.io/how-to-open-rar-tar-zip-files.html">open</a>
and <a href="https://peazip.github.io/how-to-extract-rar-zip-archives.html">extract</a>
200+ archive formats: 001, <a href="https://peazip.github.io/7z-file-format.html">7Z</a>, <a href="https://peazip.github.io/ace-files-utility.html">ACE</a> (*), <a href="https://peazip.github.io/arc-files-utility.html">ARC</a>, ARJ, <a href="https://peazip.github.io/brotli-compressed-file-format.html">BR</a>, <a href="https://peazip.github.io/bzip2-file.html">BZ2</a>, <a href="https://peazip.github.io/cab-files-utility.html">CAB</a>,
DMG, GZ, <a href="https://peazip.github.io/iso-utility.html">ISO</a>,
LHA, PAQ, <a href="https://peazip.github.io/pea-file-format.html">PEA</a>, <a href="https://peazip.github.io/what-is-rar-file.html">RAR</a> (**), <a href="https://peazip.github.io/tar-file-format.html">TAR</a>,
UDF, <a href="https://peazip.github.io/wim-files.html">WIM</a>, XZ, <a href="https://peazip.github.io/zip-file-format.html">ZIP</a>, <a href="https://peazip.github.io/zipx-file-format.html">ZIPX</a>,
            <a href="https://peazip.github.io/zst-compressed-file-format.html">ZST</a>. View
full <a href="https://peazip.github.io/peazip-free-archiver.html">list of supported archive
file formats</a>
for archiving / compression, and for extraction. <p>
            
As archive manager utility, PeaZip provides
fast,
high compression ratio multi-format archiving to 7Z, ARC, Brotli, BZ2,
GZ,
PEA,
TAR, WIM, Zstandard and ZIP archives (write supported formats), and
works as
opener
/ extractor tool
for
200+ archive types including ACE, ISO, RAR, ZIPX files, including
ability to manage encrypted archives for supported formats. </p><p>
            
This software deploys a powerful and complete file
manager for editing, viewing, browsing and searching archive files,
featuring a
wide set of data security functions: <a href="https://peazip.github.io/encrypt-files.html">strong
encryption</a> (AES, Twofish, Serpent),
encrypted password manager, optional two-factor authentication
(encryption / decryption with password and keyfile), <a href="https://peazip.github.io/secure-delete.html">secure
delete</a><span></span>, and <a href="https://peazip.github.io/verify-checksum-hash.html">file
hashing</a> tools, easily export tasks defined in the GUI to <a href="https://peazip.github.io/peazip-command-line.html">create command line scripts</a>.</p><p>
            
For more information about archive creation and
extraction performances
compared with other popular file archivers tools, read file compression
and decompression <a href="https://peazip.github.io/peazip-compression-benchmark.html">PeaZip
benchmarks</a>
page.</p><p>
            
(*) To use the application to open and extract <span>ACE </span>files
it
is needed to install WinACE's UNACE plugin from PLUGINS page, otherwise
the program will lack the (proprietary) component to read .ace format.<br>
(**) <a href="https://peazip.github.io/free-rar-create.html">RAR files creation</a> with PeaZip
is possible if WinRar
is installed on the system (autonomous support to rar compression is
not possible due to rar licensing limitations). Please note <span>RAR </span>and <span>RAR5 </span>format opening / extraction is
supported out of the box: an optional plugin based on official RarLab's
unrar code is provided as alternative .rar extraction engine on PLUGINS
page, if preferred by user over 7-Zip / p7zip's Open Source unrar
implementation.</p>
            <h3><big><big><big><a href="#free_file_archiver_software">PeaZip
free archiver download notes</a></big></big></big></h3>
            <big>Download repositories</big><p>
            
Official repositories of PeaZip are available on <a target="_blank" href="https://github.com/peazip/PeaZip/releases/">GitHub <img title="PeaZip on GitHub" alt="open source downloads" src="https://peazip.github.io/extract-zip/github.png"></a>,
and <a target="_blank" href="https://sourceforge.net/projects/peazip/">Sourceforge&nbsp;<img alt="open source software repository" title="PeaZip on SourceForge" src="https://peazip.github.io/extract-zip/sourceforge.png"></a></p><p>
            
Legacy releases can be downloaded from aforementioned
repositories; each
release contains
program's
packages for different supported operating systems, documentation, and
sources.</p><big><span>Change log and
release notes</span></big><p>
            
See complete <a href="https://peazip.github.io/changelog.html">change
log and release notes</a> for list of updates and new features of the
application, and for <span>SHA256 hash
values of each package </span> published in the current release.</p><big>TOS and Privacy</big><p>
            
PeaZip is Open Source software, released under GNU LGPLv3 license,
documentation is released under GNU FDL license.<br>
Neither PeaZip software, nor PeaZip's website collects user data.<br>
See complete <a href="https://peazip.github.io/peazip-tos-privacy.html">TOS and Privacy page</a>.
            </p><big>Verify integrity of
downloaded
packages</big><p>
            
PeaZip free archiver packages are currently not signed,
but SHA256 is a
cryptographically strong hash, and it is served here through a secure
TLS/SSL website, so it can be used for check integrity and autenticity
of
the packages you are downloading. Download pages of Win64 and Win32
installers also shows SHA256
hash value of each packages for increased security of users. </p><p>
            
Please note that websites as peazip.com, as well as some
Microsoft Store publisher listing alleged PeaZip packages, are in no
way involved in PeaZip project: it is not recommended to download
PeaZip from sources outside the aforementioned official project's
repositories, and it is absolutley not recommended to install PeaZip
packages not matching the officially published hash values.</p><ul>
            </ul>
            <p>Synopsis: All downloads page
of
PeaZip free archiver utility, freeware file compression and encryption
software. Download Open Source, cross platform file archiver software
for Linux, macOS, and Windows. Open, extract RAR TAR ZIP files and many
other
archive types,
200+ formats supported.</p>
            <p>Topics: PeaZip free archiver
all downloads, Linux, macOS, Windows, sources<br>
            </p>
            <div><p>PeaZip &gt; Free file
archiver utility, open, extract RAR TAR ZIP files | All downloads</p></div>
            <table>
              <tbody>
                <tr>
                  <td><small><span>RECOMMENDED PAGES</span> </small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/free-rar.html">FREE RAR UTILITY</a><br>
                  </small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/zip-files-utility.html">FREE ZIP FILES SOFTWARE</a><br>
                  </small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/tar-windows.html">EXTRACT TAR FILES</a></small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/extract-encrypted-files.html">OPEN ENCRYPTED ARCHIVES</a></small></td>
                </tr>
              </tbody>
            </table>
            <small><small><small>&nbsp;</small></small></small><br>
            <table>
              <tbody>
                <tr>
                  <td><small><a href="https://peazip.github.io/peazip-macos.html">MACOS ARCHIVE MANAGER</a><br>
                  </small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/peazip-linux.html">LINUX ARCHIVE MANAGER</a></small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/encrypt-files.html">FREE ENCRYPTION SOFTWARE</a></small></td>
                  <td><small><br>
                  </small></td>
                  <td><small><a href="https://peazip.github.io/peazip-portable.html">PORTABLE FILE ARCHIVER UTILITY</a></small></td>
                </tr>
              </tbody>
            </table>
            
            </td>
          </tr>
        </tbody>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why the CORDIC algorithm lives rent-free in my head (231 pts)]]></title>
            <link>https://github.com/francisrstokes/githublog/blob/main/2024/5/10/cordic.md</link>
            <guid>40326563</guid>
            <pubDate>Sat, 11 May 2024 07:18:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/francisrstokes/githublog/blob/main/2024/5/10/cordic.md">https://github.com/francisrstokes/githublog/blob/main/2024/5/10/cordic.md</a>, See on <a href="https://news.ycombinator.com/item?id=40326563">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Why the CORDIC algorithm lives rent-free in my head</h2><a id="user-content-why-the-cordic-algorithm-lives-rent-free-in-my-head" aria-label="Permalink: Why the CORDIC algorithm lives rent-free in my head" href="#why-the-cordic-algorithm-lives-rent-free-in-my-head"></a></p>
<p dir="auto"><em>This post is an adaptation of a <a href="https://twitter.com/fstokesman/status/1787949934123049021" rel="nofollow">twitter thread</a> I put together a few days ago.</em></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/cordic.gif"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/cordic.gif" data-animated-image=""></a></p>
<p dir="auto">CORDIC is an algorithm for computing trig functions like <code>sin</code>, <code>cos</code>, <code>tan</code> etc on low powered hardware, without an FPU (i.e. no floating point) or expensive lookup tables. In fact, it reduces these complex functions to simple additions and bit shifts.</p>
<p dir="auto">I'll cut right to the chase and tell you <em>why</em> I love this algorithm so much, and then we'll dive into the details of exactly how it works. Essentially, the actual operations of the algorithm are incredibly simple - just shifts and adds, as I mentioned before - but it does this by combining vector math, trigonometry, convergence proofs, and some clever computer science. To me, it's what people are talking about when they describe things of this nature as "elegant".</p>
<p dir="auto">Let's start with an obvious point: You don't need this if you're working on high powered hardware. This technique is applicable for embedded environments; especially less capable microcontrollers and FPGAs. Even then, it's possible that more capable hardware/peripherals will be available which would be "faster", though speed is not the only measure of usefulness.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Avoiding floating point</h2><a id="user-content-avoiding-floating-point" aria-label="Permalink: Avoiding floating point" href="#avoiding-floating-point"></a></p>
<p dir="auto"><em>(if you're already familiar with fixed-point, you can safely skip this section)</em></p>
<p dir="auto">You might be wondering how are we able to avoid floating point, when functions like <code>sin(x)</code> produce values between -1.0 and 1.0? Well, floating point is not the only way of representing rational numbers. In fact, before IEEE 754 became the popular standard that it is today, <em>fixed point</em> was used all the time (go and ask any gamedev who worked on stuff between 1980 and 2000ish and they'll tell you all about it).</p>
<p dir="auto">In fact, I got nerd-sniped into this whole CORDIC investigation after listening to <a href="https://twitter.com/MicroarchClub/status/1759606520713453630" rel="nofollow">Dan Mangum's fantastic Microarch Club podcast</a>, where Philip Freidin dropped the spicy hot-take that "Floating point is a crutch", and that using it might be a sign that you don't <em>really</em> understand the algorithm you're working on. Of course I should mention this was more in the context of custom ASICs rather than your run-of-the-mill webapp, but the quote really stuck with me.</p>
<p dir="auto">So how does fixed point work? Well you take an integer type like <code>int32_t</code>, and say the top 16 bits are the whole part of the number, and the bottom 16 bits are the fractional part. You could divide the number up differently (e.g. 10 bits for the whole part and 24 for the fractional), but we'll use 16/16 as an example here.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/fixed-whole-fractional.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/fixed-whole-fractional.png"></a></p>
<p dir="auto">That gives a range of around <code>-32768.99997</code> to <code>32767.99997</code>. We've <em>fixed</em> the radix point at the 16th bit, though again, we could have put it anywhere. Moving the point allows us to trade off for precision where it makes sense (i.e. more bits for whole numbers, or more bits for fractional representation).</p>
<p dir="auto">Something worth noting here is that the number is still an <code>int32_t</code> - we the programmers have assigned the extra meaning here (though this is also true of literally every data type in computing - there are only bits in the end!).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/fixed-point.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/fixed-point.png"></a></p>
<p dir="auto">How do we get a number into this format? Well, we've got 16 bits of fractional precision, so take a float like&nbsp;<code>42.01</code>, and scale it up by <code>(1 &lt;&lt; 16)</code>. That gives us <code>2753167</code> when cast into an <code>int32_t</code>. If we want to go from fixed point back to floating point, we just do the opposite. <code>2753167 / (1 &lt;&lt; 16)</code> gives us <code>~42.0099945</code>, which is very close to <code>42.01</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="#define SCALING_FACTOR (16)

static inline int32_t fixed_from_float(float a) {
  return (int32_t)(a * (float)(1 << SCALING_FACTOR));
}

static inline float fixed_to_float(int32_t a) {
  return (float)a / (float)(1 << SCALING_FACTOR);
}"><pre><span>#define</span> <span>SCALING_FACTOR</span> (16)

<span>static</span> <span>inline</span> <span>int32_t</span> <span>fixed_from_float</span>(<span>float</span> <span>a</span>) {
  <span>return</span> (<span>int32_t</span>)(<span>a</span> <span>*</span> (<span>float</span>)(<span>1</span> &lt;&lt; <span>SCALING_FACTOR</span>));
}

<span>static</span> <span>inline</span> <span>float</span> <span>fixed_to_float</span>(<span>int32_t</span> <span>a</span>) {
  <span>return</span> (<span>float</span>)<span>a</span> / (<span>float</span>)(<span>1</span> &lt;&lt; <span>SCALING_FACTOR</span>);
}</pre></div>
<p dir="auto">We could also forgo floating point altogether and encode a number like <code>1.5</code> manually. The whole part is just <code>1</code>, so we shift that up (<code>(1 &lt;&lt; 16)</code>), and the fractional part is the halfway point between <code>0x0000</code> and <code>0xffff</code>, so call it <code>0x7fff</code>. That gives us <code>98303</code> in decimal.</p>
<p dir="auto">Operations like addition and subtraction Just Work™ - assuming you're using the same scaling factor for whichever numbers you're operating on. It is possible to mix and match scaling factors, but it increases the complexity.</p>
<p dir="auto">Multiplication is only marginally trickier. Multiplying the two fixed point numbers together essentially scales everything up by scaling factor. This can be resolved by just shifting the result back down.</p>
<div dir="auto" data-snippet-clipboard-copy-content="static inline int32_t fixed_multiply(int32_t a, int32_t b) {
  return ((int64_t)a * (int64_t)b) >> SCALING_FACTOR;
}"><pre><span>static</span> <span>inline</span> <span>int32_t</span> <span>fixed_multiply</span>(<span>int32_t</span> <span>a</span>, <span>int32_t</span> <span>b</span>) {
  <span>return</span> ((<span>int64_t</span>)<span>a</span> <span>*</span> (<span>int64_t</span>)<span>b</span>) &gt;&gt; <span>SCALING_FACTOR</span>;
}</pre></div>
<p dir="auto">Division is basically the same story, except in reverse. There's a trick to squeeze out some extra precision by prescaling the dividend by the scaling factor, and then dividing by the divisor.</p>
<div dir="auto" data-snippet-clipboard-copy-content="static inline int32_t fixed_divide(int32_t a, int32_t b) {
  return ((int64_t)a << SCALING_FACTOR) / (int64_t)b;
}"><pre><span>static</span> <span>inline</span> <span>int32_t</span> <span>fixed_divide</span>(<span>int32_t</span> <span>a</span>, <span>int32_t</span> <span>b</span>) {
  <span>return</span> ((<span>int64_t</span>)<span>a</span> &lt;&lt; <span>SCALING_FACTOR</span>) / (<span>int64_t</span>)<span>b</span>;
}</pre></div>
<p dir="auto">OK we can do basic operations, but what if I need something more complex, like I don't know, a trig function? This is where CORDIC comes in.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">The CORDIC algorithm</h2><a id="user-content-the-cordic-algorithm" aria-label="Permalink: The CORDIC algorithm" href="#the-cordic-algorithm"></a></p>
<p dir="auto">CORDIC stands for "co-ordinate rotation digital computer", and was cooked up back in the mid 50s (though the general algorithm has been known to mathematicians for hundreds of years). The core idea is that we can rotate a vector around a unit circle by progressively smaller and smaller angles, and the vector components will end up being the sine and cosine of the angle we're interested in.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/cordic.gif"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/cordic.gif" data-animated-image=""></a></p>
<p dir="auto">It's sort of like a binary search:  You move towards the target angle by some large angle and check if you're ahead or behind, and then move by half that angle either clockwise or anticlockwise. This process repeats with smaller and smaller angles until the result converges.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/binary-search.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/binary-search.png"></a></p>
<p dir="auto">If you've worked with these kinds of operations before, you'll know that rotating a vector involves multiplying it with a matrix consisting of sines and cosines of the angle to be rotated to. That seems counter productive, since those are the functions we're trying to compute!</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\begin{bmatrix}
x' \\
y'
\end{bmatrix} = \begin{bmatrix}
\cos(\theta) &amp; -\sin(\theta) \\
\sin(\theta) &amp; \cos(\theta)
\end{bmatrix} \begin{bmatrix}
x \\
y
v\end{bmatrix}
$$</math-renderer></p>
<p dir="auto">We'll put that aside for a second, and get a big picture overview before solving this problem. Now, it's fairly obvious that rotating by say <code>22.75˚</code> is the same as rotating by <code>45˚</code> and then <code>-22.5˚</code> - i.e. we can break up a rotation into smaller parts, with both positive and negative components.</p>
<p dir="auto">Let's say that we have a maximum rotation of <code>90˚</code> (𝚷/2 radians), and we're trying to figure out <code>sin(0.7)</code> (about <code>40˚</code>). Starting with a vector <code>(1, 0)</code> and a target of <code>0.7</code> radians, we rotate <code>0.7853</code> rads (<code>45˚</code>) anti-clockwise.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/0r.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/0r.png"></a></p>
<p dir="auto">Target now becomes <code>0.7 - 0.7853 = -0.0853</code>. Since it's negative, we now rotate clockwise by 0.3926 rads (22.5˚). Target becomes -0.0853 + 0.3926 = 0.3073, which is positive, so the next rotation will be anti-clockwise by 0.1963 rads (11.25˚).</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/1r.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/1r.png"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/2r.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/2r.png"></a></p>
<p dir="auto">If we continue this process for a total of 16 iterations, the vector lines up almost perfectly with the original target angle. The <code>y</code> value of the vector is ~= <code>sin(a)</code>, while <code>x</code> ~= <code>cos(a)</code>! This is how CORDIC works; we rotate a vector around, and the state we keep is an approximation of various trigonometric functions.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/3r.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/3r.png"></a></p>
<p dir="auto">With some understanding in hand, we can return to the issue of, well, rotations actually requiring the functions we're trying to compute! We can use trigonometry to simplify the matrix.</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\cos(\theta) = \frac{1}{\sqrt{1 + tan^2(\theta)}}
$$</math-renderer></p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\sin(\theta) = \frac{\tan(\theta)}{\sqrt{1 + tan^2(\theta)}}
$$</math-renderer></p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\begin{bmatrix}
x' \\
y'
\end{bmatrix} = \cos(\theta)\begin{bmatrix}
1 &amp; -\tan(\theta) \\
\tan(\theta) &amp; 1
\end{bmatrix} \begin{bmatrix}
x \\
y
\end{bmatrix}
$$</math-renderer></p>
<p dir="auto">We have a few constants ones now, but we still have the <code>tan(a)</code>, plus the <code>cos(a)</code> out front. Let's ignore the <code>cos(a)</code> and focus on getting rid of <code>tan(a)</code>. As you saw when we ran through the algorithm, we're always rotating by a total of <code>~90˚</code>: First by <code>45˚</code>, then <code>22.5˚</code>, then <code>11.25˚</code>, and so on. Since we're doing this a fixed number of times, we can just precompute those values, and put them in a table. You might be thinking: <em>"You said there wouldn't be any tables!"</em>. Well, no. I said there wouldn't be any <em>expensive</em> tables. This table, in our case, will only contain 16 <code>uint32_t</code>s - a whopping 64 bytes! Even the most stripped down embedded projects can <em>usually</em> afford that. (In contrast, an <em>unoptimised</em> table for <code>sin(x)</code> that contains 4096 entries covering values from -1 to 1 would need 16KiB - and that's pretty poor precision!)</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\begin{bmatrix}
x' \\
y'
\end{bmatrix} = \cos(\theta)\begin{bmatrix}
1 &amp; -table[i] \\
table[i] &amp; 1
\end{bmatrix} \begin{bmatrix}
x \\
y
\end{bmatrix}
$$</math-renderer></p>
<p dir="auto">That means our rotation matrix now only contains constants! We do however still have that <code>cos(a)</code> term. In fact, every iteration brings it's own new <code>cos(a)</code> term. But because of algebra, we can simply multiply all those terms together and apply them at the end.</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
\cos(\theta_0) \cdot \cos(\theta_1) \cdot \cos(\theta_2) \cdot ... \cdot \cos(\theta_N)
$$</math-renderer></p>
<p dir="auto">Still, that's not great. But! No matter whether we take positive or negative steps, or the number of iterations, this multiplied out series of cosines actually converge to a constant value: <code>~0.6366</code>. All we need to do is to multiply out by this value after all iterations.</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
~0.6366 = \cos(\pm45˚) \cdot \cos(\pm22.5˚) \cdot \cos(\pm11.25˚) \cdot ... \cdot \cos(\pm\theta_N)
$$</math-renderer></p>
<p dir="auto">So that gives us only multiplications by constants over a number of iterations! Not bad. But didn't I say that CORDIC only used bit shifts and addition? For that, we need to go a little deeper into the rabbit hole.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Shifts and Adds</h2><a id="user-content-shifts-and-adds" aria-label="Permalink: Shifts and Adds" href="#shifts-and-adds"></a></p>
<p dir="auto">What the angles we plugged into <code>tan(a)</code> could instead be strategically chosen so that the result would always be an inverse power-of-2? This would be great, since multiplying or dividing by a power-of-2 is just a left or right shift for integers.</p>
<p dir="auto">Well, the <code>atan(x)</code> (arc-tangent or inverse tangent) function can do that for us. We can build a new 16-entry table, where each value is <code>atan(2**-i)</code>, for i=0 to 15. The actual rotation values for each iteration are now (<code>45˚</code>, <code>26.565˚</code>, <code>14.036˚</code>, <code>7.125˚</code>, etc).</p>
<p dir="auto">It doesn't actually half the angle each time, but as it turns out: using these angles, the process will <em>still</em> converge on the correct result! Now all those multiplications by <code>tan(a)</code> have become bit shifts by the iteration number.</p>
<p dir="auto">We still need to recompute our constant for the <code>cos(a)</code> terms. That now comes out to be around <code>0.60725</code>, which would be converted to the fixed point number <code>39796</code>.
And! It turns out there's a trick that means we don't even need to multiply by this value at the end. When we initialise the vector, we set <code>x</code> to this constant instead of 1.</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="a06b8c9a079b4f08cd9a0a931ce8bf23">$$
~0.60725 = \cos(\pm\arctan(2^{0})) \cdot \cos(\pm\arctan(2^{-1})) \cdot \cos(\pm\arctan(2^{-1})) \cdot ... \cdot \cos(\pm\arctan(2^{-N}))
$$</math-renderer></p>
<p dir="auto">So now the CORDIC algorithm looks like this:</p>
<p dir="auto">Precompute a table for <code>tan(a)</code>, where each entry is <code>atan(2**-i)</code>. These values are, of course, converted to fixed point, so: <code>atan(2**-i) * (1 &lt;&lt; 16)</code></p>
<p dir="auto">Then, when we want to compute a sine or a cosine, we take the angle (e.g. <code>0.9152</code>), convert it to fixed point: <code>0.9152 * (1 &lt;&lt; 16) = 59978</code></p>
<p dir="auto">Then setup initial parameters:</p>
<div data-snippet-clipboard-copy-content="x = 39796
y = 0
z = 59978"><pre><code>x = 39796
y = 0
z = 59978
</code></pre></div>
<p dir="auto">The <code>z</code> parameter here is not part of the vector, but rather tracks our target angle over time. The sign of this parameter determines if we rotate clockwise or anti-clockwise.</p>
<p dir="auto">With the parameters set up, each iteration looks like this (in pseudocode):</p>
<div dir="auto" data-snippet-clipboard-copy-content="if z >= 0:
    x_next = x - (y >> i)
    y_next = y + (x >> i)
    z -= table[i]
else:
    x_next = x + (y >> i)
    y_next = y - (x >> i)
    z += table[i]
x = x_next
y = y_next"><pre><span>if</span> <span>z</span> <span>&gt;=</span> <span>0</span>:
    <span>x_next</span> <span>=</span> <span>x</span> <span>-</span> (<span>y</span> <span>&gt;&gt;</span> <span>i</span>)
    <span>y_next</span> <span>=</span> <span>y</span> <span>+</span> (<span>x</span> <span>&gt;&gt;</span> <span>i</span>)
    <span>z</span> <span>-=</span> <span>table</span>[<span>i</span>]
<span>else</span>:
    <span>x_next</span> <span>=</span> <span>x</span> <span>+</span> (<span>y</span> <span>&gt;&gt;</span> <span>i</span>)
    <span>y_next</span> <span>=</span> <span>y</span> <span>-</span> (<span>x</span> <span>&gt;&gt;</span> <span>i</span>)
    <span>z</span> <span>+=</span> <span>table</span>[<span>i</span>]
<span>x</span> <span>=</span> <span>x_next</span>
<span>y</span> <span>=</span> <span>y_next</span></pre></div>
<p dir="auto">Now we can follow a few iterations through, and see the algorithm converge on the correct sine and cosine values. Values in parentheses are fixed point.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/0.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/0.png"></a></p>
<p dir="auto">During the first iteration, <code>z</code> was positive, so the vector is rotated anti-clockwise by <code>~0.785</code> rads. Note that the magnitude of the vector increased.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/1.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/1.png"></a></p>
<p dir="auto">In the second iteration, <code>z</code> was still positive, so again the vector is rotated anti-clockwise, by <code>~0.436</code> rads, though this time it overshot the mark. The magnitude of the vector is almost one now - that's the cos(a) product term starting to converge after we set the initial <code>x</code> value!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/2.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/2.png"></a></p>
<p dir="auto">On iteration 3, <code>z</code> was negative, so the vector is rotated clockwise by <code>~0.244</code> rads. It's clearly starting to creep up on that mark, and you can see that just a handful of iterations, we'd be able to get a fairly close approximation!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/3.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/3.png"></a></p>
<p dir="auto">On iteration 4, <code>z</code> was again negative, so clockwise rotation by <code>~0.124</code> rads. Now that the angular change is getting pretty small, and the vector is very close to the actual result, the rotations ping back and forth, getting closer and closer to the real value.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/4.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/4.png"></a></p>
<p dir="auto">Skipping forward to the last iteration, <code>y</code> now contains a very accurate approximation for <code>sin(0.9152)</code> - with an absolute deviation of just <code>0.00000956</code>. The cosine value (in <code>x</code>) deviation is slightly higher, at <code>0.0000434</code>, but still pretty good!</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/francisrstokes/githublog/blob/main/assets/cordic/16.png"><img src="https://github.com/francisrstokes/githublog/raw/main/assets/cordic/16.png"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Wrapping up</h2><a id="user-content-wrapping-up" aria-label="Permalink: Wrapping up" href="#wrapping-up"></a></p>
<p dir="auto">There is <em>a lot</em> more to CORDIC than this, which I may cover in a future post. For instance, I didn't mention the special considerations you have to make if the angle of interest is outside of the first or fourth quadrant of the unit circle. I also didn't talk about how, with a few modifications, CORDIC can be used to compute many other functions, including <code>tan</code>, <code>atan</code>, <code>asin</code>, <code>acos</code>, <code>sinh</code>, <code>cosh</code>, <code>tanh</code>, <code>sqrt</code>, <code>ln</code>, <code>e^x</code>. Related algorithms also exist, such as <a href="https://en.wikipedia.org/wiki/BKM_algorithm" rel="nofollow">BKM</a>, designed specifically for computing logs and exponentials.</p>
<p dir="auto">I'm planning on covering this in some detail on the <a href="https://www.youtube.com/@LowByteProductions?subscribe" rel="nofollow">Low Byte Productions YouTube channel</a>, so follow me there if this kind of thing is something you'd like to learn more about.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The derivative of a number (2014) (105 pts)]]></title>
            <link>https://rjlipton.com/2014/08/19/the-derivative-of-a-number/</link>
            <guid>40326305</guid>
            <pubDate>Sat, 11 May 2024 06:03:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rjlipton.com/2014/08/19/the-derivative-of-a-number/">https://rjlipton.com/2014/08/19/the-derivative-of-a-number/</a>, See on <a href="https://news.ycombinator.com/item?id=40326305">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
								<p><em> Are you kidding? </em></p>
<p><a href="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?ssl=1"><img decoding="async" data-attachment-id="11866" data-permalink="https://rjlipton.com/2014/08/19/the-derivative-of-a-number/unknown-101/" data-orig-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?fit=190%2C143&amp;ssl=1" data-orig-size="190,143" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Unknown" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?fit=190%2C143&amp;ssl=1" data-large-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?fit=190%2C143&amp;ssl=1" src="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/unknown2.jpeg?w=160&amp;ssl=1" alt="Unknown" data-recalc-dims="1"></a></p>
<p>Edward Barbeau is now a professor emeritus of mathematics at the University of Toronto. Over the years he has been working to increase the interest in mathematics in general, and enhancing education in particular. He has published several <a href="http://www.amazon.com/Mathematical-Fallacies-Flaws-Flimflam-Spectrum/dp/0883855291">books</a> that are targeted to help both students and teachers see the joys of mathematics: one is called <em>Power Play</em>; another <em>Fallacies, Flaws and Flimflam</em>; and another <em>After Math</em>.</p>
<p>Today I want to discuss his <a href="http://cms.math.ca/cmb/v4/cmb1961v04.0117-0122.pdf">definition</a> of the derivative of a number, yes a number.<br>
<span id="more-11864"></span></p>
<p>We all know the concept of a derivative of a function. It is one of the foundational concepts of calculus, and is usually defined by using limits. For the space of polynomials it can be viewed as a linear operator <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> so</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+D%28x%5E%7Bn%7D%29+%3D+nx%5E%7Bn-1%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle D(x^{n}) = nx^{n-1}. "></p>
<p>The derivative operator in general satisfies many properties; one is the product law:</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+D%28fg%29%3DfD%28g%29+%2B+gD%28f%29.+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle D(fg)=fD(g) + gD(f). "></p>
<p>This <a href="http://en.wikipedia.org/wiki/Product_rule">rule</a> is usually credited to Gottfried Leibniz. Somehow the great Issac Newton did not know this rule—at least that is what is claimed by some.</p>
<h2>Definition</h2>
<p>Barbeau defined the derivative of a natural number in 1961. Define <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> for a natural number by the following <a href="http://en.wikipedia.org/wiki/Arithmetic_derivative">rules</a>:</p>
<ol>
<li><img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28p%29%3D1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(p)=1}"> for all primes <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bp%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{p}">.</li>
<li><img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%281%29%3D0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(1)=0}">.</li>
<li><img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28kl%29%3DkD%28l%29%2BlD%28k%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(kl)=kD(l)+lD(k)}"> for all numbers <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bk%2Cl%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{k,l}">.</li>
</ol>
<p>Here is a picture from his <a href="http://cms.math.ca/cmb/v4/cmb1961v04.0117-0122.pdf">paper</a>:</p>
<p><a href="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?ssl=1"><img decoding="async" data-attachment-id="11869" data-permalink="https://rjlipton.com/2014/08/19/the-derivative-of-a-number/def/" data-orig-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?fit=1882%2C592&amp;ssl=1" data-orig-size="1882,592" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="def" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?fit=300%2C94&amp;ssl=1" data-large-file="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?fit=600%2C189&amp;ssl=1" src="https://i0.wp.com/rjlipton.com/wp-content/uploads/2014/08/def.png?w=400&amp;ssl=1" alt="def" data-recalc-dims="1"></a></p>
<p>This proves that he really did it a long time ago. Note the typewriter type face: no LaTeX back then. He proved the basic result that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> is well defined. This is not hard, is necessary to make the definition meaningful, but we will leave it unproved here. See his <a href="http://cms.math.ca/cmb/v4/cmb1961v04.0117-0122.pdf">paper</a> for details.</p>
<p>A simple consequence of the rules is that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28p%5E%7Bk%7D%29+%3D+kp%5E%7Bk-1%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(p^{k}) = kp^{k-1}}"> for <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bp%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{p}"> a prime. This follows by induction on <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bk%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{k}">. For <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bk%3D1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{k=1}"> it is rule (1). Suppose that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bk%3E1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{k>1}">:</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cbegin%7Barray%7D%7Brcl%7D+D%28p%5E%7Bk%7D%29+%26%3D%26+pD%28p%5E%7Bk-1%7D%29+%2B+D%28p%29p%5E%7Bk-1%7D+%5Ctextit%7B+by+the+product+rule%3B%7D+%5C%5C+%26%3D%26+p%28k-1%29p%5E%7Bk-2%7D+%2B+p%5E%7Bk-1%7D+%5Ctextit%7B+by+rule+%281%29+and+by+induction%3B%7D+%5C%5C+%26%3D%26+kp%5E%7Bk-1%7D.+%5Cend%7Barray%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle \begin{array}{rcl} D(p^{k}) &amp;=&amp; pD(p^{k-1}) + D(p)p^{k-1} \textit{ by the product rule;} \\ &amp;=&amp; p(k-1)p^{k-2} + p^{k-1} \textit{ by rule (1) and by induction;} \\ &amp;=&amp; kp^{k-1}. \end{array} "></p>
<p>Unfortunately this does not hold in general. Also <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> is not a linear operator: <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%285%29%3D1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(5)=1}"> and <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%283%29%2BD%282%29%3D2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(3)+D(2)=2}">. This double failure, the derivative of a power is not simple and the derivative is not linear in general, makes <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> difficult to use. One of the beauties of the usual derivative, even just for polynomials, is that it is a linear operator.</p>
<h2>Results</h2>
<p>The derivative notion of Barbeau is interesting, yet it does not seem to have been intensively studied. I am not sure why—it may be because it is a strange function—I am not sure.</p>
<p>There is hope. Recently there have been a number of papers on his notion. Perhaps researchers are finally starting to realize there may be gold hidden in the derivative of a number. We will see.</p>
<p>Most of the papers on <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> have been more about intrinsic properties of <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> rather than applications. A small point: most of the papers replace <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> by <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%27%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n'}">: so if you look at papers be prepared for this notation shift. I decided to follow the original paper’s notation.</p>
<p>The papers have results of three major kinds. One kind is the study of what are essentially differential equations. For example, what can we say about the solutions of</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+D%28D%28n%29%29+%3D+a%2C+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle D(D(n)) = a, "></p>
<p>where <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{a}"> is a constant? The others are growth or inequality results: how fast and how slow does <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> grow? For example, for <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n}"> not a prime,</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Csqrt%7Bn%7D+%5Cle+D%28n%29+%5Cle+n%5Clog%28n%29%2F2.+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle \sqrt{n} \le D(n) \le n\log(n)/2. "></p>
<p>A third natural class of questions is: can we extend <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> to more than just the natural numbers? It is easy to extend to integers, a bit harder to rationals, and not so easy beyond that.</p>
<p>Here are two interesting papers to look at:</p>
<ul>
<li><i>Investigations on the properties of the arithmetic derivative</i>, which is a <a href="http://arxiv.org/pdf/1108.4762v1.pdf">paper</a> by Niklas Dahl, Jonas Olsson, and Alexander Loiko.</li>
<li><i>How to Differentiate a Number</i>, which is a <a href="https://cs.uwaterloo.ca/journals/JIS/VOL6/Ufnarovski/ufnarovski.pdf">paper</a> by Victor Ufnarovski and Bo Åhlander.</li>
</ul>
<h2>An Application</h2>
<p>I tried to use <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> to prove something interesting. I think if we could use <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> to prove something not about <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> but about something that does not mention <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> at all, that would be exciting. Tools must be developed in mathematics, but the key test of their power is their ability to solve problems from other areas. One example: the power of complex analysis was manifest when it was used to prove deep theorems from number theory. Another example: the power of the theory of Turing machines was clear when it was used to yield an alternate proof of the Incompleteness Theorem.</p>
<p>The best I could do is use <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> to prove an ancient result: that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B%5Csqrt%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{\sqrt{2}}"> is not rational. Well I may be able to prove a bit more.</p>
<p>We note that from the product rule: <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28w%5E%7B2%7D%29+%3D+wD%28w%29+%2B+wD%28w%29+%3D+2wD%28w%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(w^{2}) = wD(w) + wD(w) = 2wD(w)}">, for any <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bw%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{w}">. Recall if <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bw%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{w}"> were prime this would be <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28w%5E%7B2%7D%29+%3D+2w%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(w^{2}) = 2w}">.</p>
<p>Now assume by way of contradiction that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B%5Csqrt%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{\sqrt{2}}"> is rational number. Then for some <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%2Cy%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x,y}"> positive numbers we have</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+x%5E%7B2%7D+%3D+2y%5E%7B2%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle x^{2} = 2y^{2}. "></p>
<p>As usual we can assume that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%2Cy%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x,y}"> are co-prime.</p>
<p>So let’s take derivatives of both sides of the equation—we have to use <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> sometime, might as well start with it.</p>
<blockquote><p>Note that it is valid to apply <img decoding="async" src="https://s0.wp.com/latex.php?latex=D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0&amp;c=20201002" alt="D"> to both sides of an equation, so long as one is careful to obey the rules. For example <img decoding="async" src="https://s0.wp.com/latex.php?latex=5%3D2%2B3+&amp;bg=e8e8e8&amp;fg=000000&amp;s=0&amp;c=20201002" alt="5=2+3 "> allows <img decoding="async" src="https://s0.wp.com/latex.php?latex=D%285%29+%3D+D%283%2B2%29%2C&amp;bg=e8e8e8&amp;fg=000000&amp;s=0&amp;c=20201002" alt="D(5) = D(3+2),"> but there is no additive rule to make the right-hand side become <img decoding="async" src="https://s0.wp.com/latex.php?latex=D%283%29%2BD%282%29%2C&amp;bg=e8e8e8&amp;fg=000000&amp;s=0&amp;c=20201002" alt="D(3)+D(2),"> which would make the equation false.</p></blockquote>
<p>The result of taking the derviative of both sides is:</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cbegin%7Barray%7D%7Brcl%7D+D%28x%5E%7B2%7D%29+%26%3D%26+D%282y%5E%7B2%7D%29+%5C%5C+2xD%28x%29+%26%3D%26+D%282%29y%5E%7B2%7D+%2B+2D%28y%5E%7B2%7D%29+%5C%5C+2xD%28x%29+%26%3D%26+y%5E%7B2%7D+%2B+2D%28y%5E%7B2%7D%29+%5C%5C+2xD%28x%29+%26%3D%26+y%5E%7B2%7D+%2B+4yD%28y%29.+%5Cend%7Barray%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle \begin{array}{rcl} D(x^{2}) &amp;=&amp; D(2y^{2}) \\ 2xD(x) &amp;=&amp; D(2)y^{2} + 2D(y^{2}) \\ 2xD(x) &amp;=&amp; y^{2} + 2D(y^{2}) \\ 2xD(x) &amp;=&amp; y^{2} + 4yD(y). \end{array} "></p>
<p>Now square both sides and substitute <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x^{2}}"> for <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B2y%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{2y^{2}}"> to get:</p>
<p><img decoding="async" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cbegin%7Barray%7D%7Brcl%7D+4+x%5E%7B2%7D+D%28x%29%5E%7B2%7D+%26%3D%26+y%5E%7B4%7D+%2B+8+y%5E%7B3%7D+D%28y%29+%2B+16+y%5E%7B2%7D+D%28y%29%5E%7B2%7D+%5C%5C+4+x%5E%7B2%7D+D%28x%29%5E%7B2%7D+%26%3D%26+y%5E%7B4%7D+%2B+4x%5E%7B2%7D+y+D%28y%29+%2B+8+x%5E%7B2%7D+D%28y%29%5E%7B2%7D+%5C%5C+x%5E%7B2%7D+%284D%28x%29%5E%7B2%7D+-+4yD%28y%29+-+8D%28y%29%5E%7B2%7D%29+%26%3D%26+y%5E%7B4%7D.+%5Cend%7Barray%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="\displaystyle \begin{array}{rcl} 4 x^{2} D(x)^{2} &amp;=&amp; y^{4} + 8 y^{3} D(y) + 16 y^{2} D(y)^{2} \\ 4 x^{2} D(x)^{2} &amp;=&amp; y^{4} + 4x^{2} y D(y) + 8 x^{2} D(y)^{2} \\ x^{2} (4D(x)^{2} - 4yD(y) - 8D(y)^{2}) &amp;=&amp; y^{4}. \end{array} "></p>
<p>This implies that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%5E2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x^2}"> divides <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7By%5E%7B4%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{y^{4}}">. This leads to a contradiction, since it implies that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%2Cy%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x,y}"> are not co-prime.&nbsp; Whether we also get that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x}"> divides <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7By%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{y^{2}}"> is possibly circular, but anyway this is enough.&nbsp; The point is that owing to <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%282%29+%3D+1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(2) = 1}">, the derivative removed the problematic factor of <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{2}">.</p>
<p>Note from the original equation, <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%7B2%7D%3D2y%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x^{2}=2y^{2}}"> we only get that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x}"> divides <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7B2y%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{2y^{2}}"> which is too weak to immediately get a contradiction. Admittedly ours is not the greatest proof, not better than the usual one especially owing to the squaring step, but it does use the derivative of an number.</p>
<p>One idea: I believe that this idea can be used to prove more that the usual fact that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%7B2%7D%3D2y%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{x^{2}=2y^{2}}"> has no nonzero solutions over the integers. I believe we can extend it to prove the same result in any ring where <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> can be defined, possibly modulo issues about lack of unique factorization. This handles the Gaussian integers, for example.</p>
<h2>Open Problems</h2>
<p>Can we use this strange function <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> to shed light on some open problem in number theory? Can we use it in complexity theory? A simple question is: what is the complexity of computing <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}">? If <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%3Dpq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n=pq}"> where <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bp%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{p}"> and <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{q}"> are primes, then <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%3DD%28pq%29%3Dp%2Bq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)=D(pq)=p+q}"> by the rules. But we know that <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%3Dpq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n=pq}"> and thus we have two equations in two unknowns and we can solve for <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bp%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{p}"> and <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bq%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{q}">. So in this case computing <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(n)}"> is equivalent to factoring <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{n}">. What happens in the general case? An obvious conjecture is that computing <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D}"> is equivalent to factoring.</p>
<p>[fixed error in proof that owed to typo <img decoding="async" src="https://s0.wp.com/latex.php?latex=%7BD%28y%5E2%29+%3D+y%5E2+D%28y%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" alt="{D(y^2) = y^2 D(y)}">, as <a href="http://atomic-temporary-6472207.wpcomstaging.com/2014/08/19/the-derivative-of-a-number/#comment-54945">noted</a> by user “Sniffnoy” and others, and changed some following text accordingly; further fix to that proof; fixed typo p^k to p^{k-1}]</p>

											</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Thread: Tech we can’t use or teach? (322 pts)]]></title>
            <link>https://overengineer.dev/blog/2024/05/10/thread/</link>
            <guid>40326269</guid>
            <pubDate>Sat, 11 May 2024 05:51:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://overengineer.dev/blog/2024/05/10/thread/">https://overengineer.dev/blog/2024/05/10/thread/</a>, See on <a href="https://news.ycombinator.com/item?id=40326269">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="content"> <h2>Thread - the tech we can't use or teach</h2> <section id="main_content">  <p> <span> <i role="img" aria-label="This item was published on:"></i> 2024-05-10 </span>  <span> <i role="img" aria-label="This item was tagged with:"></i> <a href="https://overengineer.dev/blog/tags/electronics/">electronics</a>, <a href="https://overengineer.dev/blog/tags/hacking/">hacking</a>, <a href="https://overengineer.dev/blog/tags/hardware/">hardware</a>, <a href="https://overengineer.dev/blog/tags/overengineering/">overengineering</a>, <a href="https://overengineer.dev/blog/tags/rant/">rant</a> </span> </p> <p>A lot of my projects don’t work out. That’s fine, failing is a very healthy way to learn. However, there are cases where the reasons behind failures are absolutely infuriating. So please, allow me a rant. I’ll spend a few words on how I got where I am. If you don’t care, feel free to skip to the large “Thread?” headline. I won’t judge<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup>.</p>
<p>In 2022, <a href="https://overengineer.dev/blog/2022/01/07/overengineering-coffee-bean-storage/">I published an article on how I created a severely over-engineered coffee bean storage and inventory-keeping solution</a>. Since then, many people reached out to me to say that they appreciate my post and took it as inspiration to start similar projects for different needs. I absolutely love that!</p>
<p>More recently, I’ve been actively working on two related projects. One is a sensor I’m not going to talk about yet, but another is a “version 2” of that coffee storage display. My primary motivation for version 2 of that display was to increase the battery runtime. The displays averaged 40 days on a charge when my article was published. That’s alright, but it could be better. I managed to get this up to 55 days with a few software tweaks, but I wanted to explore how to push this further.</p>
<p>So, I started learning about low-power electronics, leading me down a few complicated but fascinating rabbit holes. To start off, I purchased <a href="https://www.nordicsemi.com/Products/Development-hardware/Power-Profiler-Kit-2" rel="nofollow" target="_blank">a very nice power profiler from Nordic Semiconductors</a> and profiled my whole system. If you’re curios, <a href="https://overengineer.dev/__generated__/power-profile-screenshot.Q36a-FjR.png" target="_blank">this is how such a profile looks like</a>. Long story short: I re-wrote parts of the display firmware, identified some problematic components on the DevKit, and bypassed them. Ultimately, it became clear that one of the big factors is… WiFi.</p>
<p>You should know that while I love working on projects like this, I’m also inherently lazy. Using WiFi for such a project made sense to me, as I already have all the required infrastructure set up, and letting the display hardware talk to a service I run is super easy: just connecting to WiFi and sending a request to another device in the LAN. But sadly, WiFi is also really inefficient for a use-case like this. Even just establishing a connection can take a long time; it requires high transmission powers depending on where your access points are set up; it’s all less than ideal. So I explored alternatives, and as it turns out, there’s much to choose from! I didn’t want to build my own hardware<sup><a href="#user-content-fn-2" id="user-content-fnref-2" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup>, so I wanted to pick something with a good availability of DevKits and ready-to-use modules. Standards like <a href="https://en.wikipedia.org/wiki/LoRa" rel="nofollow" target="_blank">LoRa</a> and <a href="https://en.wikipedia.org/wiki/Zigbee" rel="nofollow" target="_blank">Zigbee</a> came to mind, of course.</p>
<p>As nice (and usually power-efficient) as those technologies are, there’s a huge downside compared to WiFi: I can’t just build the display module and use it - I also need to build “the other end”, a receiver/transmitter/hub or whatever, that acts as a connection point for the displays to exchange data with. That’s not only a whole other piece of hardware I have to run; it’s also another piece of software and firmware I have to write. And as I mentioned earlier, I am lazy. Luckily, there’s a really interesting alternative!</p>
<h2 id="thread">Thread?</h2>
<p>Despite its awful name<sup><a href="#user-content-fn-3" id="user-content-fnref-3" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup>, the Thread network stack is really cool. Thread uses the same physical layer as Zigbee, IEEE 802.15.4, and it’s also a meshed network. But two things made Thread stand out for me. Thread is based on top off 6LoWPAN, short for “IPv6 over Low-Power Wireless Personal Area Networks”, and that’s kinda cool. In short, this means that each of your devices gets one or more IPv6 addresses, the internal addressing is done via IPv6, and you just throw IP packets around in the network. Even cooler is that the Thread network connects to your regular home network via a bridge called “Border Router” - so your devices can use IPv6 to talk to your applications, and vice-versa.</p>
<p>Wait, a bridge? Didn’t I say I don’t want to run a bridge? Well, yes, but that’s another cool thing about Thread: you might already have a Thread Border Router running. For example, if you have an Apple HomePod or a Nest Hub, you already own a Thread Border Router. If you run Home Assistant, you can buy a dongle for ~40 euros and <a href="https://www.home-assistant.io/integrations/thread/" rel="nofollow" target="_blank">turn your Home Assistant node into a Thread Border Router</a>. It’s all <em>really</em> approachable. And if you use your existing Thread network, things get even more awesome! I did mention that Thread is a mesh network, and this feature is actively used and supported by a lot of commercial hardware. I have several <a href="https://www.evehome.com/en/eve-energy" rel="nofollow" target="_blank">Eve Energy</a> “smart plugs” in my home, and since they are always connected to power, they function as a Thread repeater<sup><a href="#user-content-fn-4" id="user-content-fnref-4" data-footnote-ref="" aria-describedby="footnote-label">4</a></sup>, expanding your network’s reach without you doing any work!</p>
<p>So all of that sounds pretty neat, huh? And it is! I got two Thread DevKits to explore more (if you’re curious, I got a <a href="https://www.nordicsemi.com/Products/Development-hardware/nRF52840-DK" rel="nofollow" target="_blank">nRF52840-DK</a> and a <a href="https://www.nordicsemi.com/Products/Development-hardware/nRF5340-DK" rel="nofollow" target="_blank">nRF5340-DK</a>, as well as a <a href="https://www.nordicsemi.com/Products/Development-hardware/nRF52840-Dongle" rel="nofollow" target="_blank">nRF52840-Dongle</a> for debugging<sup><a href="#user-content-fn-5" id="user-content-fnref-5" data-footnote-ref="" aria-describedby="footnote-label">5</a></sup>), and learned a lot. Within a reasonably short timeframe, I managed to hack my own border router into my Apple-based Thread network, I managed to use Wireshark to sniff on my Thread network, and I shoved my own Thread devices (based on the two DevKits) into the network, and confirmed that everything worked as I hoped it would. So, of course, I started roughly outlining a series of blog posts about all of this. Ultimately, my goal was to get other hobbyists into exploring Thread, switching away their projects from WiFi or Bluetooth, and making their projects a whole lot better.</p>
<p>And this is the point where this post turns into a rant.</p>
<h2 id="no-thread">No Thread.</h2>
<p>So far, I have only talked about the nice things around Thread. However, I also have to talk about the <em>ugly</em> parts: <a href="https://www.threadgroup.org/" rel="nofollow" target="_blank">The Thread Group</a>. While Thread builds on many free and open standards like IEEE 802.15.4, IPv6, and <a href="https://en.wikipedia.org/wiki/Constrained_Application_Protocol" rel="nofollow" target="_blank">CoAP</a>, Thread is very much neither free nor open. Quite the opposite, actually.</p>
<p>You can <em>request</em> the Thread Specification <a href="https://www.threadgroup.org/ThreadSpec" rel="nofollow" target="_blank">for free on their website</a>, and you will get it delivered to your inbox very quickly, but you’ll notice a few odd things. For once, there’s an “I agree to the End User License Agreement” checkbox on that page you ignored, but even more obvious: the specification PDF document is password-protected, DRM’ed, and heavily watermarked. To understand why, let’s look at that license agreement again. Partial quote, emphasis mine:</p>
<blockquote>
<p>Thread Group, Inc. […] hereby grants you a […] license […] to view, download, save, reproduce and use the Specification <strong>solely for your own internal purposes</strong> in accordance with the terms of this License Agreement. […] <strong>No right to implementation of the Specification is granted</strong> to you by this License Agreement. […] <strong>Membership in Thread Group is necessary to implement, practice, and ship Thread technology</strong> and Thread Group specifications. Failure to maintain active Thread Group membership while shipping Thread technology may result in legal action, including but not limited to licensing fees.</p>
</blockquote>
<p>Oh. So even though you can buy freely available DevKits, you aren’t actually allowed to … well, use them. Unless you’re a Thread Group member, of course. The least expensive membership level that will enable you to implement the Thread Group IP, <a href="https://www.threadgroup.org/thread-group" rel="nofollow" target="_blank">called “Implementer”</a>, is a cheap USD 7,500. Per year, that is. But hey, don’t worry, if you’re an “innovative IoT start-up company”, you can <a href="https://www.threadgroup.org/Innovation-Enabler-Award" rel="nofollow" target="_blank">apply to get a two-year membership for free</a>! But of course, you have to pay afterward, and this program isn’t even applicable to hobbyists.</p>
<p>This whole mess isn’t helped by <a href="https://openthread.io/" rel="nofollow" target="_blank">OpenThread, an open-source implementation of Thread</a>. The project <a href="https://github.com/openthread/openthread/blob/3bf281d32da7ccde2153c5c90076e327a488d38e/LICENSE" rel="nofollow" target="_blank">is licensed under a BSD 3-Clause license</a>, so it looks very open and friendly to use. However, their repo also includes a <a href="https://github.com/openthread/openthread/blob/3bf281d32da7ccde2153c5c90076e327a488d38e/NOTICE" rel="nofollow" target="_blank">fun little notice</a> highlighting that “members of the Thread Group may hold patents and other intellectual property rights”. And, in fact, the Thread Group website <a href="https://www.threadgroup.org/support#OpenThread" rel="nofollow" target="_blank">has a dedicated FAQ-section on OpenThread</a>, which is fairly clear:</p>
<blockquote>
<p>Q: What Would Prevent A Company From Shipping A Product Based On OpenThread Without Joining The Thread Group?</p>
<p>A: If developers choose not to join Thread Group and ship products using Thread technology, they are not conferred the IP rights required to practice and ship Thread technology, and may subject themselves to legal action, including but not limited to licensing fees.</p>
</blockquote>
<p>To summarize: if you’re a hobbyist without access to some serious throwaway money to join the Thread Group, there is no way to use Thread legally - the license does not include an exception for non-commercial uses. If you’re like me and want to write a series of blog posts about how Thread works, there’s also no legal way.</p>
<p>A commercial membership program for technology stacks like Thread isn’t new; it’s somewhat common in that space. Same with requiring certifications for your commercial products if you want to use a logo like the “Works with Thread” banner. And that’s fine with me. If you’re selling a commercial electronics product, you have to go through many certification processes anyway, so that seems fair. But having a blanket ban on implementations, even for non-commercial projects, is absolutely bonkers. This means that no hobbyist should ever get close to it, and that means that the next generation of electrical engineers and decision-makers don’t get to play around with the tech before they enter the industry. But of course, that doesn’t really matter to the Thread Group: <a href="https://www.threadgroup.org/thread-group#OurMembers" rel="nofollow" target="_blank">their members list</a> includes companies like Apple, Google, Amazon, Nordic, NXP, and Qualcomm - they can just <em>force</em> Thread into being successful by making sure it’s shipped in the most popular “home hubs”. So it’s just us that get screwed over.</p>
<p>Anyway, if you planned to look at Thread… well, don’t. You’re not allowed to use it.</p>
<p><em>I contacted the Thread Group’s support email address on 2024-04-19 to request clarification on non-commercial Thread use. I did receive an “I have forwarded your message” from a member immediately, but no further response arrived. On 2024-05-01, I contacted the Thread Group’s press contact, requesting a comment. As of publishing this post, the Thread Group has not responded.</em></p>

<section data-footnotes="">
<ol>
<li id="user-content-fn-1">
<p>Okay, maybe just a little bit. I mean, did you really expect a <em>short</em> post on <em>my</em> blog?! <a href="#user-content-fnref-1" data-footnote-backref="" aria-label="Back to reference 1">↩</a></p>
</li>
<li id="user-content-fn-2">
<p>Also motivated by the intention to blog about this. Building your own RF hardware is <em>hard</em>, but it’s also illegal for most of my audience unless they have the proper certifications. <a href="#user-content-fnref-2" data-footnote-backref="" aria-label="Back to reference 2">↩</a></p>
</li>
<li id="user-content-fn-3">
<p>No, seriously. Can we please not name new things using terms that are already widely used? I hate that I have to specify whether I’m talking about sewing, screwing, parallel computing, a social network from Meta, or a networking stack. Stop it. <a href="#user-content-fnref-3" data-footnote-backref="" aria-label="Back to reference 3">↩</a></p>
</li>
<li id="user-content-fn-4">
<p>If you feel the urge to email me to inform me that it’s not called “Repeater” but “Router”, please read the rest of this article first. This is not meant as a Thread introduction post; you will learn why. <a href="#user-content-fnref-4" data-footnote-backref="" aria-label="Back to reference 4">↩</a></p>
</li>
<li id="user-content-fn-5">
<p>Nordic Semiconductors isn’t sponsoring me, even though I already linked four of their products. I just really like their stuff. That said, hey, if you’re from Nordic and you want to sponsor me, … <a href="https://overengineer.dev/me/card/">reach out</a>! :p <a href="#user-content-fnref-5" data-footnote-backref="" aria-label="Back to reference 5">↩</a></p>
</li>
</ol>
</section>  </section> </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple finalizing deal with OpenAI to bring ChatGPT features to iOS 18 (114 pts)]]></title>
            <link>https://9to5mac.com/2024/05/10/ios-18-chatgpt-features-apple-openai/</link>
            <guid>40325876</guid>
            <pubDate>Sat, 11 May 2024 04:03:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://9to5mac.com/2024/05/10/ios-18-chatgpt-features-apple-openai/">https://9to5mac.com/2024/05/10/ios-18-chatgpt-features-apple-openai/</a>, See on <a href="https://news.ycombinator.com/item?id=40325876">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
					
<figure>
	<img width="1600" height="800" src="https://9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?quality=82&amp;strip=all&amp;w=1600" alt="OpenAI ChatGPT" srcset="https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?w=320&amp;quality=82&amp;strip=all&amp;ssl=1 320w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?w=640&amp;quality=82&amp;strip=all&amp;ssl=1 640w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?w=1024&amp;quality=82&amp;strip=all&amp;ssl=1 1024w, https://i0.wp.com/9to5mac.com/wp-content/uploads/sites/6/2023/05/chatgpt-ios-1.jpg?w=1500&amp;quality=82&amp;strip=all&amp;ssl=1 1500w" decoding="async" fetchpriority="high"></figure>

<p>Apple is finalizing an agreement with OpenAI to bring some of its technology to the iPhone this year, according to a new <a href="https://www.theinformation.com/articles/openai-develops-ai-voice-assistant-as-it-chases-google-apple?offer=rtsu-engagement-24&amp;utm_campaign=RTSU+-+OpenAI+AI+ass&amp;utm_content=4159&amp;utm_medium=email&amp;utm_source=cio&amp;utm_term=2797&amp;rc=x5svxc" target="_blank" rel="noreferrer noopener">report from <em>Bloomberg</em></a><em>.</em> With this deal, the report explains that Apple will be able to offer “a popular chatbot” powered by ChatGPT as part of its AI-focused features in iOS 18.</p>



<p>While Apple is also <a href="https://9to5google.com/2024/03/17/gemini-apple-iphone-talks/" target="_blank" rel="noreferrer noopener">still in talks with Google</a> about an AI partnership, tonight’s report says Apple has “closed in on an agreement with OpenAI.”</p>



<p>“An OpenAI accord would let Apple offer a popular chatbot as part of a flurry of new AI features that it’s planning to announce next month,” the report explains. More specific details about how these features and integrations might work remain unclear for now.</p>



<p>From Mark Gurman at <em>Bloomberg</em>:</p>



<blockquote>
<p>The two sides have been finalizing terms for a pact to use ChatGPT features in Apple’s iOS 18, the next iPhone operating system, said the people, who asked not to be identified because the situation is private. Apple also has held talks with Alphabet Inc.’s Google about licensing that company’s Gemini chatbot. Those discussions haven’t led to an agreement, but are ongoing.</p>
</blockquote>



<p>The report cautions that there’s still “no guarantee” that a deal between Apple and OpenAI “will be announced imminently.” </p>



<p>A report on Thursday emphasized that iOS 18’s AI features will be powered (in part) by Apple data centers with Apple Silicon processors. The majority of iOS 18’s AI features, however, will be <a href="https://9to5mac.com/2024/04/21/gurman-ios-18-ai-features-on-device/">powered entirely on-device</a>, allowing Apple to tout privacy and speed benefits.</p>



<p>Apple is slated to announce iOS 18 and its new AI features at WWDC, which kicks off with a special <a href="https://9to5mac.com/2024/03/26/wwdc-2024-official-date-confirmed/" target="_blank" rel="noreferrer noopener">event on June 10.</a></p>



<p>OpenAI is set to make its own, separate announcement during an event on Monday. <em>The Information</em> has <a href="https://www.theinformation.com/articles/openai-develops-ai-voice-assistant-as-it-chases-google-apple?offer=rtsu-engagement-24&amp;utm_campaign=RTSU+-+OpenAI+AI+ass&amp;utm_content=4159&amp;utm_medium=email&amp;utm_source=cio&amp;utm_term=2797&amp;rc=x5svxc">reported</a> that one feature in development at OpenAI is an AI voice assistant to compete with Siri and Google Assistant. </p>



<p><strong>Follow Chance</strong>:&nbsp;<a href="https://www.threads.net/@ChanceHMiller">Threads</a>,&nbsp;<a href="https://twitter.com/chancehmiller">Twitter</a>,&nbsp;<a href="https://www.instagram.com/chancehmiller/">Instagram</a>, and&nbsp;<a href="https://mastodon.social/@ChanceHMiller">Mastodon</a>.&nbsp;</p>
	<p>
		<a target="_blank" rel="nofollow" href="https://news.google.com/publications/CAAqBggKMLOFATDAGg?hl=en-US&amp;gl=US&amp;ceid=US:en">
			<em>Add 9to5Mac to your Google News feed.</em>&nbsp;
					</a>
	</p>
	<div><p><em>FTC: We use income earning auto affiliate links.</em> <a href="https://9to5mac.com/about/#affiliate">More.</a></p><p><a href="https://bit.ly/4b7b06Y"><img src="https://9to5mac.com/wp-content/uploads/sites/6/2024/05/2024.05-9to5mac-750x150-1.webp" alt="" width="750" height="150"></a></p></div>				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Most of Europe is glowing pink under the aurora (1367 pts)]]></title>
            <link>https://www.foto-webcam.eu/webcam/lucknerhaus/</link>
            <guid>40324179</guid>
            <pubDate>Fri, 10 May 2024 21:59:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.foto-webcam.eu/webcam/lucknerhaus/">https://www.foto-webcam.eu/webcam/lucknerhaus/</a>, See on <a href="https://news.ycombinator.com/item?id=40324179">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="fscontainer">
    <canvas id="fscanvas"></canvas>
    <div id="fsloadbg">
      <p><img src="https://www.foto-webcam.eu/webcam/include/loading-16.gif">
      Loading image...</p>
      
    </div>
    <p>Move mouse to scroll image<br>Click or press Esc to close window</p>
    
    
    
    <p><img src="https://www.foto-webcam.eu/webcam/include/fitscreen.png" width="80" height="45" title="Fit image to screen size (key F) - Mouse-wheel or keys +/- zoom the image - Key 0: original size"></p>
    
    
    
    
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[One Minute Park (185 pts)]]></title>
            <link>https://oneminutepark.tv/</link>
            <guid>40323785</guid>
            <pubDate>Fri, 10 May 2024 21:04:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://oneminutepark.tv/">https://oneminutepark.tv/</a>, See on <a href="https://news.ycombinator.com/item?id=40323785">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>one minute please ... the parks are loading</p><div id="instructions">
            <p><a id="close-instructions">close</a></p>
    
            <p><img src="https://oneminutepark.tv/images/hands.png" alt=""></p><p>One Minute Park allows you to visit parks from around the world for one minute each. These are just one minute videos, not webcams. Eventually the project will fill in all the minutes (1440) in a day. You can create your own One Minute Park to help achieve this goal.</p>

            <h2>How to make a One Minute Park</h2>

            <ol>
                <li>Walk around a park until you find a composition. Your scene should be filled with many layers of activity without any dominating elements.</li>
                <li>Record in landscape mode on your phone. Keep your shot as steady as you can but don't use a tripod. You could even hold your breath. Check the timecode indicator while filming to make your video exactly 60 seconds. Tap record, let it count up to 60, and tap again. No editing needed!</li>
                <li>Upload your One Minute Park to <a href="https://www.are.na/elliott-cost/one-minute-park">this Are.na channel</a>. Videos should be in .mp4 format. Please include the date, time, park, location in the block's title.</li>
            </ol>

            <h2>Support</h2>

            <p>One Minute Park is a project by <a href="http://elliott.computer/">Elliott Cost</a>. It is unfunded and a labor of love. Any support is greatly appreciated–thank you!</p>

            <p>
                <a href="https://elliott.computer/support">Donate</a> →<br>
                <a href="https://www.patreon.com/elliottcost">Subscribe to the patreon</a> →<br>
                <a href="mailto:email@elliott.computer">Sponsor this site</a> →<br>
                <a href="https://sites.elliott.computer/i-want-to-be-your-companys-resident-artist/">Hire me as a resident web artist for your company</a> →
            </p>

            </div></div>]]></description>
        </item>
    </channel>
</rss>