<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 26 Dec 2024 03:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Server-Sent Events (SSE) Are Underrated (157 pts)]]></title>
            <link>https://igorstechnoclub.com/server-sent-events-sse-are-underrated/</link>
            <guid>42511318</guid>
            <pubDate>Wed, 25 Dec 2024 21:35:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://igorstechnoclub.com/server-sent-events-sse-are-underrated/">https://igorstechnoclub.com/server-sent-events-sse-are-underrated/</a>, See on <a href="https://news.ycombinator.com/item?id=42511318">Hacker News</a></p>
Couldn't get https://igorstechnoclub.com/server-sent-events-sse-are-underrated/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Air missile accident emerges as probable cause of Azerbaijan E190tragedy (172 pts)]]></title>
            <link>https://www.euronews.com/2024/12/25/azerbaijani-passenger-plane-crashes-near-kazakh-city-of-aktau</link>
            <guid>42511267</guid>
            <pubDate>Wed, 25 Dec 2024 21:25:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.euronews.com/2024/12/25/azerbaijani-passenger-plane-crashes-near-kazakh-city-of-aktau">https://www.euronews.com/2024/12/25/azerbaijani-passenger-plane-crashes-near-kazakh-city-of-aktau</a>, See on <a href="https://news.ycombinator.com/item?id=42511267">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Portspoof: Emulate a valid service on all 65535 TCP ports (193 pts)]]></title>
            <link>https://github.com/drk1wi/portspoof</link>
            <guid>42509953</guid>
            <pubDate>Wed, 25 Dec 2024 17:44:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/drk1wi/portspoof">https://github.com/drk1wi/portspoof</a>, See on <a href="https://news.ycombinator.com/item?id=42509953">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Portspoof</h2><a id="user-content-portspoof" aria-label="Permalink: Portspoof" href="#portspoof"></a></p>
<p dir="auto">Portspoof software overview (<a href="https://drk1wi.github.io/portspoof/" rel="nofollow">https://drk1wi.github.io/portspoof/</a>)</p>
<p dir="auto">** Short description:**</p>
<p dir="auto">The Portspoof program primary goal is to enhance OS security through a set of following techniques:</p>
<ul dir="auto">
<li>
<p dir="auto">All 65535 TCP ports are always open</p>
<p dir="auto">Instead of informing an attacker that a particular port is in a CLOSED or FILTERED state Portspoof will return SYN+ACK for every port connection attempt/</p>
<p dir="auto">As a result it is impractical to use stealth (SYN, ACK, etc.) port scanning against your system, since all ports are always reported as OPEN:</p>
<div data-snippet-clipboard-copy-content=" **`nmap -p 1-20 127.0.0.1`**
 Starting Nmap 6.47 ( http://nmap.org )
 Nmap scan report for 127.0.0.1
 Host is up (0.0018s latency).
 PORT   STATE SERVICE
 1/tcp  open  tcpmux
 2/tcp  open  compressnet
 3/tcp  open  compressnet
 4/tcp  open  unknown
 5/tcp  open  unknown
 6/tcp  open  unknown
 7/tcp  open  echo
 8/tcp  open  unknown
 9/tcp  open  discard
 10/tcp open  unknown
 11/tcp open  systat
 12/tcp open  unknown
 13/tcp open  daytime
 14/tcp open  unknown
 15/tcp open  netstat
 16/tcp open  unknown
 17/tcp open  qotd
 18/tcp open  unknown
 19/tcp open  chargen
 20/tcp open  ftp-data"><pre><code> **`nmap -p 1-20 127.0.0.1`**
 Starting Nmap 6.47 ( http://nmap.org )
 Nmap scan report for 127.0.0.1
 Host is up (0.0018s latency).
 PORT   STATE SERVICE
 1/tcp  open  tcpmux
 2/tcp  open  compressnet
 3/tcp  open  compressnet
 4/tcp  open  unknown
 5/tcp  open  unknown
 6/tcp  open  unknown
 7/tcp  open  echo
 8/tcp  open  unknown
 9/tcp  open  discard
 10/tcp open  unknown
 11/tcp open  systat
 12/tcp open  unknown
 13/tcp open  daytime
 14/tcp open  unknown
 15/tcp open  netstat
 16/tcp open  unknown
 17/tcp open  qotd
 18/tcp open  unknown
 19/tcp open  chargen
 20/tcp open  ftp-data
</code></pre></div>
</li>
<li>
<p dir="auto">Every open TCP port emulates a service</p>
<p dir="auto">Portspoof has a huge database of dynamic service signatures, that will be used to generate fake banners and fool scanners.</p>
<p dir="auto">Scanning software usually tries to determine a service version that is running on an open port. Portspoof will respond to every service probe with a valid service signature, that is dynamically generated based on a service signature regular expression database.</p>
<p dir="auto">As a result an attacker will not be able to determine which port numbers your system is truly using:</p>
<div data-snippet-clipboard-copy-content=" **`nmap -F -sV 127.0.0.1`**
 Starting Nmap 6.47 ( http://nmap.org )
 Stats: 0:00:30 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan
 Nmap scan report for 127.0.0.1
 Host is up (0.21s latency).
 PORT      STATE SERVICE          VERSION
 7/tcp     open  http             Milestone XProtect video surveillance http interface (tu-ka)
 9/tcp     open  ntop-http        Ntop web interface 1ey (Q)
 13/tcp    open  ftp              VxWorks ftpd 6.a
 21/tcp    open  http             Grandstream VoIP phone http config 6193206
 22/tcp    open  http             Cherokee httpd X
 23/tcp    open  ftp              MacOS X Server ftpd (MacOS X Server 790751705)
 25/tcp    open  smtp?
 26/tcp    open  http             ZNC IRC bouncer http config 0.097 or later
 37/tcp    open  finger           NetBSD fingerd
 53/tcp    open  ftp              Rumpus ftpd
 79/tcp    open  http             Web e (Netscreen administrative web server)
 80/tcp    open  http             BitTornado tracker dgpX
 81/tcp    open  hosts2-ns?
 88/tcp    open  http             3Com OfficeConnect Firewall http config
 106/tcp   open  pop3pw?
 110/tcp   open  ipp              Virata-EmWeb nbF (HP Laserjet 4200 TN http config)
 111/tcp   open  imap             Dovecot imapd
 113/tcp   open  smtp             Xserve smtpd
 119/tcp   open  nntp?
 135/tcp   open  http             netTALK Duo http config
 139/tcp   open  http             Oversee Turing httpd kC (domain parking)
 143/tcp   open  crestron-control TiVo DVR Crestron control server
 144/tcp   open  http             Ares Galaxy P2P httpd 7942927
 179/tcp   open  http             WMI ViH (3Com 5500G-EI switch http config)
 199/tcp   open  smux?
 389/tcp   open  http-proxy       ziproxy http proxy
 427/tcp   open  vnc              (protocol 3)
 443/tcp   open  https?
 444/tcp   open  snpp?
 445/tcp   open  http             Pogoplug HBHTTP QpwKdZQ
 465/tcp   open  http             Gordian httpd 322410 (IQinVision IQeye3 webcam rtspd)
 513/tcp   open  login?
 514/tcp   open  finger           ffingerd
 515/tcp   open  pop3             Eudora Internet Mail Server X pop3d 4918451
 543/tcp   open  ftp              Dell Laser Printer z printer ftpd k
 544/tcp   open  ftp              Solaris ftpd
 548/tcp   open  http             Medusa httpd Elhmq (Sophos Anti-Virus Home http config)
 554/tcp   open  rtsp?
 587/tcp   open  http-proxy       Pound http proxy
 631/tcp   open  efi-webtools     EFI Fiery WebTools communication
 646/tcp   open  ldp?
 873/tcp   open  rsync?
 990/tcp   open  http             OpenWrt uHTTPd
 993/tcp   open  ftp              Konica Minolta bizhub printer ftpd
 995/tcp   open  pop3s?
 1025/tcp  open  sip-proxy        Comdasys SIP Server D
 1026/tcp  open  LSA-or-nterm?
 1027/tcp  open  IIS?
 1028/tcp  open  rfidquery        Mercury3 RFID Query protocol
 1029/tcp  open  smtp-proxy       ESET NOD32 anti-virus smtp proxy
 1110/tcp  open  http             qhttpd
 1433/tcp  open  http             ControlByWeb WebRelay-Quad http admin
 1720/tcp  open  H.323/Q.931?
 1723/tcp  open  pptp?
 1755/tcp  open  http             Siemens Simatic HMI MiniWeb httpd
 1900/tcp  open  tunnelvision     Tunnel Vision VPN info 69853
 2000/tcp  open  telnet           Patton SmartNode 4638 VoIP adapter telnetd
 2001/tcp  open  dc?
 2049/tcp  open  nfs?
 2121/tcp  open  http             Bosch Divar Security Systems http config
 2717/tcp  open  rtsp             Darwin Streaming Server 104621400
 3000/tcp  open  pop3             Solid pop3d
 3128/tcp  open  irc-proxy        muh irc proxy
 3306/tcp  open  ident            KVIrc fake identd
 3389/tcp  open  ms-wbt-server?
 3986/tcp  open  mapper-ws_ethd?
 4899/tcp  open  printer          QMC DeskLaser printer (Status o)
 5000/tcp  open  http             D-Link DSL-eTjM http config
 5009/tcp  open  airport-admin?
 5051/tcp  open  ssh              (protocol 325257)
 5060/tcp  open  http             apt-cache/apt-proxy httpd
 5101/tcp  open  ftp              OKI BVdqeC-ykAA VoIP adapter ftpd kHttKI
 5190/tcp  open  http             Conexant-EmWeb JqlM (Intertex IX68 WAP http config; SIPGT TyXT)
 5357/tcp  open  wsdapi?
 5432/tcp  open  postgresql?
 5631/tcp  open  irc              ircu ircd
 5666/tcp  open  litecoin-jsonrpc Litecoin JSON-RPC f_
 5800/tcp  open  smtp             Lotus Domino smtpd rT Beta y
 5900/tcp  open  ftp
 6000/tcp  open  http             httpd.js (Songbird WebRemote)
 6001/tcp  open  daap             mt-daapd DAAP TGeiZA
 6646/tcp  open  unknown
 7070/tcp  open  athinfod         Athena athinfod
 8000/tcp  open  amanda           Amanda backup system index server (broken: libsunmath.so.1 not found)
 8008/tcp  open  http?
 8009/tcp  open  ajp13?
 8080/tcp  open  http             D-Link DGL-4300 WAP http config
 8081/tcp  open  http             fec ysp (Funkwerk bintec R232B router; .h.K...z)
 8443/tcp  open  smtp
 8888/tcp  open  smtp             OpenVMS smtpd uwcDNI (OpenVMS RVqcGIr; Alpha)
 9100/tcp  open  jetdirect?
 9999/tcp  open  http             Embedded HTTPD 3BOzejtHW (Netgear MRd WAP http config; j)
 10000/tcp open  http             MikroTik router http config (RouterOS 0982808)
 32768/tcp open  filenet-tms?
 49152/tcp open  unknown
 49153/tcp open  http             ASSP Anti-Spam Proxy httpd XLgR(?)?
 49154/tcp open  http             Samsung AllShare httpd
 49155/tcp open  ftp              Synology DiskStation NAS ftpd
 49156/tcp open  aspi             ASPI server 837305
 49157/tcp open  sip              AVM FRITZ!Box |"><pre><code> **`nmap -F -sV 127.0.0.1`**
 Starting Nmap 6.47 ( http://nmap.org )
 Stats: 0:00:30 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan
 Nmap scan report for 127.0.0.1
 Host is up (0.21s latency).
 PORT      STATE SERVICE          VERSION
 7/tcp     open  http             Milestone XProtect video surveillance http interface (tu-ka)
 9/tcp     open  ntop-http        Ntop web interface 1ey (Q)
 13/tcp    open  ftp              VxWorks ftpd 6.a
 21/tcp    open  http             Grandstream VoIP phone http config 6193206
 22/tcp    open  http             Cherokee httpd X
 23/tcp    open  ftp              MacOS X Server ftpd (MacOS X Server 790751705)
 25/tcp    open  smtp?
 26/tcp    open  http             ZNC IRC bouncer http config 0.097 or later
 37/tcp    open  finger           NetBSD fingerd
 53/tcp    open  ftp              Rumpus ftpd
 79/tcp    open  http             Web e (Netscreen administrative web server)
 80/tcp    open  http             BitTornado tracker dgpX
 81/tcp    open  hosts2-ns?
 88/tcp    open  http             3Com OfficeConnect Firewall http config
 106/tcp   open  pop3pw?
 110/tcp   open  ipp              Virata-EmWeb nbF (HP Laserjet 4200 TN http config)
 111/tcp   open  imap             Dovecot imapd
 113/tcp   open  smtp             Xserve smtpd
 119/tcp   open  nntp?
 135/tcp   open  http             netTALK Duo http config
 139/tcp   open  http             Oversee Turing httpd kC (domain parking)
 143/tcp   open  crestron-control TiVo DVR Crestron control server
 144/tcp   open  http             Ares Galaxy P2P httpd 7942927
 179/tcp   open  http             WMI ViH (3Com 5500G-EI switch http config)
 199/tcp   open  smux?
 389/tcp   open  http-proxy       ziproxy http proxy
 427/tcp   open  vnc              (protocol 3)
 443/tcp   open  https?
 444/tcp   open  snpp?
 445/tcp   open  http             Pogoplug HBHTTP QpwKdZQ
 465/tcp   open  http             Gordian httpd 322410 (IQinVision IQeye3 webcam rtspd)
 513/tcp   open  login?
 514/tcp   open  finger           ffingerd
 515/tcp   open  pop3             Eudora Internet Mail Server X pop3d 4918451
 543/tcp   open  ftp              Dell Laser Printer z printer ftpd k
 544/tcp   open  ftp              Solaris ftpd
 548/tcp   open  http             Medusa httpd Elhmq (Sophos Anti-Virus Home http config)
 554/tcp   open  rtsp?
 587/tcp   open  http-proxy       Pound http proxy
 631/tcp   open  efi-webtools     EFI Fiery WebTools communication
 646/tcp   open  ldp?
 873/tcp   open  rsync?
 990/tcp   open  http             OpenWrt uHTTPd
 993/tcp   open  ftp              Konica Minolta bizhub printer ftpd
 995/tcp   open  pop3s?
 1025/tcp  open  sip-proxy        Comdasys SIP Server D
 1026/tcp  open  LSA-or-nterm?
 1027/tcp  open  IIS?
 1028/tcp  open  rfidquery        Mercury3 RFID Query protocol
 1029/tcp  open  smtp-proxy       ESET NOD32 anti-virus smtp proxy
 1110/tcp  open  http             qhttpd
 1433/tcp  open  http             ControlByWeb WebRelay-Quad http admin
 1720/tcp  open  H.323/Q.931?
 1723/tcp  open  pptp?
 1755/tcp  open  http             Siemens Simatic HMI MiniWeb httpd
 1900/tcp  open  tunnelvision     Tunnel Vision VPN info 69853
 2000/tcp  open  telnet           Patton SmartNode 4638 VoIP adapter telnetd
 2001/tcp  open  dc?
 2049/tcp  open  nfs?
 2121/tcp  open  http             Bosch Divar Security Systems http config
 2717/tcp  open  rtsp             Darwin Streaming Server 104621400
 3000/tcp  open  pop3             Solid pop3d
 3128/tcp  open  irc-proxy        muh irc proxy
 3306/tcp  open  ident            KVIrc fake identd
 3389/tcp  open  ms-wbt-server?
 3986/tcp  open  mapper-ws_ethd?
 4899/tcp  open  printer          QMC DeskLaser printer (Status o)
 5000/tcp  open  http             D-Link DSL-eTjM http config
 5009/tcp  open  airport-admin?
 5051/tcp  open  ssh              (protocol 325257)
 5060/tcp  open  http             apt-cache/apt-proxy httpd
 5101/tcp  open  ftp              OKI BVdqeC-ykAA VoIP adapter ftpd kHttKI
 5190/tcp  open  http             Conexant-EmWeb JqlM (Intertex IX68 WAP http config; SIPGT TyXT)
 5357/tcp  open  wsdapi?
 5432/tcp  open  postgresql?
 5631/tcp  open  irc              ircu ircd
 5666/tcp  open  litecoin-jsonrpc Litecoin JSON-RPC f_
 5800/tcp  open  smtp             Lotus Domino smtpd rT Beta y
 5900/tcp  open  ftp
 6000/tcp  open  http             httpd.js (Songbird WebRemote)
 6001/tcp  open  daap             mt-daapd DAAP TGeiZA
 6646/tcp  open  unknown
 7070/tcp  open  athinfod         Athena athinfod
 8000/tcp  open  amanda           Amanda backup system index server (broken: libsunmath.so.1 not found)
 8008/tcp  open  http?
 8009/tcp  open  ajp13?
 8080/tcp  open  http             D-Link DGL-4300 WAP http config
 8081/tcp  open  http             fec ysp (Funkwerk bintec R232B router; .h.K...z)
 8443/tcp  open  smtp
 8888/tcp  open  smtp             OpenVMS smtpd uwcDNI (OpenVMS RVqcGIr; Alpha)
 9100/tcp  open  jetdirect?
 9999/tcp  open  http             Embedded HTTPD 3BOzejtHW (Netgear MRd WAP http config; j)
 10000/tcp open  http             MikroTik router http config (RouterOS 0982808)
 32768/tcp open  filenet-tms?
 49152/tcp open  unknown
 49153/tcp open  http             ASSP Anti-Spam Proxy httpd XLgR(?)?
 49154/tcp open  http             Samsung AllShare httpd
 49155/tcp open  ftp              Synology DiskStation NAS ftpd
 49156/tcp open  aspi             ASPI server 837305
 49157/tcp open  sip              AVM FRITZ!Box |
</code></pre></div>
<p dir="auto">By using those two techniques together:</p>
<ul dir="auto">
<li>your attackers will have a tough time while trying to identify your real services.</li>
<li>the only way to determine if a service is emulated is through a protocol probe (imagine probing protocols for 65k open ports!).</li>
<li>it takes more than 8hours and 200MB of sent data in order to properly go through the reconessaince phase for your system ( nmap -sV -p - equivalent).</li>
</ul>
<p dir="auto">*** Art of Active (Offensive) Defense***</p>
<p dir="auto">Portspoof can be used as an 'Exploitation Framework Frontend', that turns your system into responsive and aggressive machine. In practice this usually means exploiting your attackers' tools and exploits...
<em>At the moment there are few example exploits in the configuration file (portspoof.conf)</em></p>
<p dir="auto">Portspoof is meant to be a lightweight, fast, portable and secure addition to any firewall system or security system.</p>
<p dir="auto">The general goal of the program is to make the reconessaince phase slow and bothersome for your attackers as much it is only possible.
This is quite a change to the standard 5s Nmap scan, that will give a full view of your systems running services.</p>
<p dir="auto">The most important features that this software has:</p>
<ul dir="auto">
<li>it will add some real pain to your attackers reconessaince phase.</li>
<li>it is a userland software and does not require root privileges !</li>
<li>it binds to just ONE tcp port per a running instance !</li>
<li>it is easily customizable through your iptables rules</li>
<li>marginal CPU and memory usage (multithreaded)</li>
<li>more than 9000 dynamic service signatures to feed your attackers scanning software !</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Author:</h2><a id="user-content-author" aria-label="Permalink: Author:" href="#author"></a></p>
<p dir="auto">Piotr Duszyński (<a href="https://twitter.com/drk1wi" rel="nofollow">@drk1wi</a>).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Commercial Usage</h2><a id="user-content-commercial-usage" aria-label="Permalink: Commercial Usage" href="#commercial-usage"></a></p>
<p dir="auto">Portspoof is licensed under <a href="https://github.com/drk1wi/portspoof/blob/master/COPYRIGHT.GPL">this License</a> .</p>
<p dir="auto">For commercial, legitimate applications, please contact the author for the appropriate licensing arrangements.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sherlock: Hunt down social media accounts by username across 400 social networks (193 pts)]]></title>
            <link>https://sherlockproject.xyz/</link>
            <guid>42509809</guid>
            <pubDate>Wed, 25 Dec 2024 17:14:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sherlockproject.xyz/">https://sherlockproject.xyz/</a>, See on <a href="https://news.ycombinator.com/item?id=42509809">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Hunt down social media accounts by username across <a href="https://sherlockproject.xyz/sites">400+ social networks</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: Resources for general purpose GPU development on Apple's M* chips? (110 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=42509730</link>
            <guid>42509730</guid>
            <pubDate>Wed, 25 Dec 2024 16:58:26 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=42509730">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="42509730">
      <td><span></span></td>      <td><center><a id="up_42509730" href="https://news.ycombinator.com/vote?id=42509730&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=42509730">Ask HN: Resources for general purpose GPU development on Apple's M* chips?</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_42509730">106 points</span> by <a href="https://news.ycombinator.com/user?id=thinking_banana">thinking_banana</a> <span title="2024-12-25T16:58:26 1735145906"><a href="https://news.ycombinator.com/item?id=42509730">9 hours ago</a></span> <span id="unv_42509730"></span> | <a href="https://news.ycombinator.com/hide?id=42509730&amp;goto=item%3Fid%3D42509730">hide</a> | <a href="https://hn.algolia.com/?query=Ask%20HN%3A%20Resources%20for%20general%20purpose%20GPU%20development%20on%20Apple%27s%20M%2A%20chips%3F&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=42509730&amp;auth=db67531b855a8537e6c960c8910a959d3e8a2988">favorite</a> | <a href="https://news.ycombinator.com/item?id=42509730">61&nbsp;comments</a>        </span>
              </td></tr>
    <tr><td></td></tr><tr><td colspan="2"></td><td><p>While Apple M* chips seems to have an incredible unified memory access, the available learning resources seem to be quite restricted and often convoluted. Has anyone been able to get past this barrier? 
I have some familiarity with general purpose software development with CUDA and C++. I want to figure how to work with/ use Apple's developer resources for general purpose programming.</p></td></tr>        <tr><td></td></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table><table>
            <tbody><tr id="42510610"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42510610" href="https://news.ycombinator.com/vote?id=42510610&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>If you're looking for a high level introduction to GPU development on Apple silicon I would recommend learning Metal. It's Apple's GPU acceleration language similar to CUDA for Nvidia hardware. I ported a set of puzzles for CUDA called GPU-Puzzles (a collection of exercises designed to teach GPU programming fundamentals)[1] to Metal [2]. I think it's a very accessible introduction to Metal and writing GPU kernels.</p><p>[1] <a href="https://github.com/srush/GPU-Puzzles">https://github.com/srush/GPU-Puzzles</a></p><p>[2] <a href="https://github.com/abeleinin/Metal-Puzzles">https://github.com/abeleinin/Metal-Puzzles</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42512256"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42512256" href="https://news.ycombinator.com/vote?id=42512256&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>Can anyone recommend a CUDA equivalent of (2)?  That’s a spectacular learning resource and I’d like to use a similar one to upskill for CUDA</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42512384"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42512384" href="https://news.ycombinator.com/vote?id=42512384&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>Isn’t the link right before it exactly what you’re asking for? Since 2 is a port of 1</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42510624"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42510624" href="https://news.ycombinator.com/vote?id=42510624&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>After a quick scan through the [2] link, I have added this to the list of things to look into in 2025</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42509851"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42509851" href="https://news.ycombinator.com/vote?id=42509851&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>You can help with the reverse engineering of Apple Silicon done by a dozen people worldwide, that is how we find out the GPU and NPU instructions[1-4]. There is over 43 trillion float operations per second to unlock at 8 terabit per second 'unified' memory bandwidth and 270 gigabits per second networking (less on the smaller chips)....</p><p>[1] <a href="https://github.com/AsahiLinux/gpu">https://github.com/AsahiLinux/gpu</a></p><p>[2] <a href="https://github.com/dougallj/applegpu">https://github.com/dougallj/applegpu</a></p><p>[3] <a href="https://github.com/antgroup-skyward/ANETools/tree/main/ANEDisassembler">https://github.com/antgroup-skyward/ANETools/tree/main/ANEDi...</a></p><p>[4] <a href="https://github.com/hollance/neural-engine">https://github.com/hollance/neural-engine</a></p><p>You can use a high level APIs like MLX, Metal or CoreML to  compute other things on the GPU and NPU.</p><p>Shadama [5] is an example programming language that translates (with Ometa) matrix calculations into WebGPU or WebGL APIs (I forget which). You can do exactly the same with the MLX, Metal or CoreML APIs and only pay around 3% overhead going through the translation stages.</p><p>[5] <a href="https://github.com/yoshikiohshima/Shadama">https://github.com/yoshikiohshima/Shadama</a></p><p>I estimate it will cost around $22K at my hourly rate to completely reverse engineer the latest A16 and M4 CPU (ARMV9), GPU and NPU instruction sets. I think I am halfway on the reverse engineering, the debugging part is the hardest problem. You would however not be able to sell software with it on the APP Store as Apple forbids undocumented API's or bare metal instructions.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42511729"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42511729" href="https://news.ycombinator.com/vote?id=42511729&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>any place you have your current progress written up on? Any methodology I could help contribute on? I've read each one of the four links you've given over the years and it seems vague with how far people have currently gotten and exact issues.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42511806"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42511806" href="https://news.ycombinator.com/vote?id=42511806&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>&gt;Any methodology I could help contribute on?</p><p>Several people have already contacted me today with this request. This is how I give out details and share current progress with you.</p><p>Yes, you can help, most people on HN could. It is not that difficult work and it is not just low level debugging, coding and FPGA hardware. It is also organizing and even simple sales, talking to funders. With patience, you could even get paid to help.</p><p>&gt;any place you have your current progress written up on?</p><p>Not any place in public, because of its value for zero-day exploits. This knowledge is worth millions.</p><p>I'm in the process of rewriting my three scientific papers on reverse engineering Apple Silicon low level instructions.</p><p>&gt;it seems vague with how far people have currently gotten and exact issues.</p><p>Yes, I'm afraid you're right, my apologies. It's very much detailed and technical stuff, some of it under patent and NDA, some even sensitive for winning economic wars and ongoing wars (you can guess those are exiting stories). It even plays a role in the $52.7 billion US,  €43 billion EU and $150 billion (unconfirmed) Chinese Chips Acts. Apple Silicon is the main reason TSMC opened a US factory [1], keeping its instruction set details secret is deemed important.</p><p>If you want more information, you should join our offline video discussions for more info. Maybe sometimes sign an NDA for the juicy bits.</p><p>[1] <a href="https://www.cnbc.com/2024/12/13/inside-tsmcs-new-chip-fab-where-apple-will-make-chips-in-the-us-.html" rel="nofollow">https://www.cnbc.com/2024/12/13/inside-tsmcs-new-chip-fab-wh...</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42512477"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42512477" href="https://news.ycombinator.com/vote?id=42512477&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>While understanding the GPU’s microarchitecture might be useful for exploits it’s definitely not worth “millions”.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42512494"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_42512494" href="https://news.ycombinator.com/vote?id=42512494&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>You are right. The zero-day exploits might be worth roughly a million each, but not the family tree of native GPU's, ANE, CPU instruction sets and microarchitecture on which they would be based.</p><p>My apology for writing unclearly, English is not my native language. I'm surprised it is yours.</p><p>Saving on energy, programming effort and purchase cost of a supercomputer in case of M4 instruction sets and microarchitecture knowledge would also save millions.</p></div></td></tr>
        </tbody></table></td></tr>
                              <tr id="42510313"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42510313" href="https://news.ycombinator.com/vote?id=42510313&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>It’s too bad they don’t make this easier on developers, Apple. Is there a reason I don’t see?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42510581"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42510581" href="https://news.ycombinator.com/vote?id=42510581&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>Apple wants total freedom to rework lower levels of the stack down to the hardware, without worrying about application compatibility, hence their answer will continue to be Metal.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42510671"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42510671" href="https://news.ycombinator.com/vote?id=42510671&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>I agree that it allows Apple to redefine Apple Silicon instruction sets without having do explain it to 3rd party software developers, but it is certainly not the main reason they hide the technical documentation of the chips.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42511451"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_42511451" href="https://news.ycombinator.com/vote?id=42511451&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>Why not?</p><p>Metal is the answer. Everything else is just implementation detail as GP said.</p><p>Apple doesn’t provide developer support to other OSes. The only OS they do anything for* is macOS. So to them there’s no point.</p><p>All they’d get is people relying on implementation details they shouldn’t, other companies stealing what they consider their trade secrets, or more surface area for patent trolls to scan.</p><p>* Someone on the Asahi team, I think Hector Martin, has commented before the Apple is doing things that clearly seem designed to allow others to make and securely boot other OSes on their Apple Silicon hardware. They clearly could be clamping it down far more but are choosing not to. However that’s exactly as far as the support appears to go.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42512686"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_42512686" href="https://news.ycombinator.com/vote?id=42512686&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>&gt; Metal is the answer. Everything else is just implementation detail as GP said.</p><p>If you don't want any developers to write software for your platform, keep doing this. Nvidia will take your ass to the bank and laugh the entire time your Mac-bound developers pay out the nose for SSH access to a DGX A100. Nvidia makes loads of money off supporting DirectX and OpenCL and CUDA, because they don't have silly "platform" obligations where they have to bet the farm on something that never takes off.</p><p>Look at MacOS, for example. Plenty of legacy software never <i>was</i> supported in Metal, it's "implementation detail" never manifested. It wasn't even really used in AI either until Apple upstreamed their own MPS hacks into Pytorch and people got BERT et. al. working, and even <i>that</i> was a pint-sized party trick that you could do on a Raspberry Pi. Apple themselves aren't even using their own servers for serious inference, because <i>you can't</i>. It's gotta be offloaded to a lower-latency platform.</p><p>It's not just that Metal as a platform has failed it's users, although it's certainly contributed to developers giving up on Mac hardware for serious compute. Apple's GPU design is stuck in iPhone mode and they refuse to change their approach with Apple Silicon desktop hardware. It was Apple's big bet on NPUs that hamstrung them, not an implementation detail, and if you don't believe me then wait and see. Xserve didn't tear down the 1U market, Asahi didn't upend Linux HPC, and Metal isn't going to upend AI compute any more than DirectX will. This is the same "Apple will get 'em next year" quote we always hear when they fuck up, and they never <i>actually</i> seem to learn.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42511460"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_42511460" href="https://news.ycombinator.com/vote?id=42511460&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>&gt; but it is certainly not the main reason they hide the technical documentation of the chips</p><p>What <i>is</i> the main reason?</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42511518"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_42511518" href="https://news.ycombinator.com/vote?id=42511518&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>&gt;What <i>is</i> the main reason?</p><p>I can't guess what is the main reason. There might not even be a main reason, as many groups of people at Apple and its shareholders decided this over the years.</p><p>(Also see my speculations below in this thread).</p><p>So not in any order of importance to Apple:</p><p>1) Create the same moat as NVIDIA has with CUDA.</p><p>2) Ability to re-define the microcode instruction set of all the dozens of different Apple Silicon chips now and in the future without having to worry about backwards compatibility. Each Apple Silicon chip simply recompiles code at runtime (similar to my adaptive compiler).</p><p>3) Zero hardware documentation needed, much cheaper PR and faster time to market, also making it harder to reverse engineer or repair.</p><p>4) Security. Security by obscurity</p><p>5) Keeping the walled garden up longer.</p><p>6) Frustrating reverse engineering of Apple software. You must realize Apple competes with their own third party developers. Apple can optimize code on the GPU and ANE, third party developers can not and are forbidden too by Apple.</p><p>7) Frustrating reverse engineering of Apple hardware.</p><p>8) It won't make Apple more sales if 3rd party developers can write faster and more energy efficient GPU and NPU software.</p><p>9) Legal and patent infringements considerations</p><p>10) Future compiler improvements</p><p>11 ) Trade secrets</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42511587"><td></td></tr>
                        <tr id="42511836"><td></td></tr>
                        <tr id="42510362"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42510362" href="https://news.ycombinator.com/vote?id=42510362&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>There certainly is a reason and indeed you don't see it because Apple downplays these things in their PR.</p><p>It might be the same reason that is behind NVDIA's CUDA moat. CUDA lock-in prevented competitors like AMD and Intel to convince programmers and their customers to switch away from CUDA. So there was no software ported to their competitive GPU's. So you get anti-trust lawsuits [1].</p><p>I think you should put yourself in Apples management mindset and then reason. I suspect they think they will not sell more iPhones or Macs if they let third party developers access the low level APIs and write faster software.</p><p>They might reason that if no one knows the instruction sets hackers will write less code to break security. Security by obscurity.</p><p>They certainly think that blocking competitors from reverse engineering the low power Apple Silicon and blocking them from using TSMC manufacturing capacity will keep them the most profitable company for another decade.</p><p>[1] <a href="https://news.ycombinator.com/item?id=40593576">https://news.ycombinator.com/item?id=40593576</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42510972"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42510972" href="https://news.ycombinator.com/vote?id=42510972&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>CUDA didn't prevent anything at least not in the way you believe.</p><p>Intel and AMD had no competitive offer, period. They still don't.</p><p>NVIDIA is simply offering an ecosystem that is battle tested and is ready out of the box. Look at the recent semianalysis test to see how not ready AMD is, who would be the only company to have a real shot at this. Their HW on paper is better or equal, yet their software ecosystem is nowhere ready.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42511565"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_42511565" href="https://news.ycombinator.com/vote?id=42511565&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>&gt; Look at the recent semianalysis test to see how not ready AMD is, who would be the only company to have a real shot at this. Their HW on paper is better or equal, yet their software ecosystem is nowhere ready.</p><p>Reading that was kind of odd. It seems like their conclusion was that on paper AMD should be significantly less expensive and significantly faster, whereas in practice they're significantly less expensive and slightly slower because of unoptimized software, which actually seems like it'd still be a pretty good deal. Especially if the problem <i>is</i> the software, because then the hardware could get better with a software update after you buy it.</p><p>They also spend a lot of time complaining about how much trouble it is to install the experimental releases with some improvements that aren't in the stable branch yet, but then the performance difference was only big in a few cases and in general the experimental version was only a couple of percent faster, which either way should end up in the stable release in the near future.</p><p>And they do a lot of benchmarks on interconnect bandwidth which, fair enough, Nvidia currently has some hardware advantage. But that also mainly matters to the small handful of companies doing training for huge frontier models and not to the far larger number of people doing inference or training smaller models.</p><p>It feels like they were more frustrated because they were using the hardware as the problems were being solved rather than after, even though the software is making progress and many of the issues have already been resolved or are about to be.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42510632"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42510632" href="https://news.ycombinator.com/vote?id=42510632&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>At this point, Apple is absolutely not afraid of an anti-trust lawsuit. To them, it is part of the cost of doing business</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42510659"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_42510659" href="https://news.ycombinator.com/vote?id=42510659&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>I concur, they are virtually untouchable in this respect. No one else will throw a trillion or more into developing lower power faster silicon.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                              <tr id="42510288"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42510288" href="https://news.ycombinator.com/vote?id=42510288&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>Where does the 270 gbit/s networking figure come from? Is it the aggregate bandwidth from the pcie slots on the mac pro, which could support nics at that speeds (and above according to my quick maths#), but there is not really any driver support for modern Intel or Mellanox/Nvidia NICs as far as I can tell.</p><p>My use case would be hooking up a device which spews out sensor data at 100 gbit/s over qsfp28 ethernet as directly to a GPU as possible. The new mac mini has the GPU power, but there's no way to get the data into it.</p><p># 2x Gen4x16 + 4x Gen3x8 = 2 * 31.508 GB/s + 4 * 7.877 GB/s ≈ 90 GB/s = 720 gbit/s</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42510403"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42510403" href="https://news.ycombinator.com/vote?id=42510403&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>&gt; Where does the 270 gbit/s networking figure come from? Is it the aggregate bandwidth from the pcie slots on the Mac pro</p><p>We both should restate and specify the calculation for each different Apple Silicon chip and the PCB/machine model it is wired onto.</p><p>The $599 M4 Mac mini base model networking (aggregated Wifi, USB-C, 10G Ethernet, Thunderbolt PCIe) is almost 270 Gbps. Your 720 Gbps is for a &gt;$8000 Mac Pro M2 Ultra but the number is to high because the 2x Gen4x16 is shared/oversubscribed with the other PCIe lanes for x8 PCIe slots, SSD and Thunderbolt. You need to measure/benchmark it, not read the marketing PR.</p><p>I estimate the $1400 M4 Pro Mac mini networking bandwidth by adding the external WiFi, 10 Gbps Ethernet, two USC-C ports (2 x 10 Gbps) and three Thunderbolt 4 ports (3 x 80/120 Gbps) but subtracting the PCIe 64 Gbps limit and not counting the internal SSD. Two $599 M4 Mac mini base models are faster and cheaper than one M4 Pro Mac mini.</p><p>The point of the precise actual measurements I did of the trillion opereations per second and the billion of bits per second networking/interconnect of the M4 Mac mini against all the other Apple silicon machines is to find which package (chip plus pcb plus case) has the best price/performance/watt balanced against them networked together. On januari 2025 you can build the cheapest fastest supercomputer in the world from just off the shelf M4 16Gb Mac mini base models with 10G Ethernet, Mikrotek 100G switches and a few FPGA's. It would outperform all Nvidia, Cerebras, Tenstorrent and datacenter clusters I know of, mainly because of the low power Apple Silicon.</p><p>Note that the M4 has only 1,2 Tips unified memory bandwidth and the M4 Pro has double that. The 8 Tops unified memory bandwidth is on the M1 and M2 Studio Ultra with 64/128/192GB DRAM. Without it you cant's reach 50 trillion operations per second. A Mac Studio has only around 190 Gbps external networking bandwidth but does not reach 43 trillion TOPS, as does the 720 Gbps of your Mac Pro estimate. By reverse engineering the instruction set you could squeeze a few percent extra performance out of this M4 cluster.</p><p>The 43 trillion TOPS of the M4 itself is an estimate. The ANE does 34 TOPS, the CPU less than 5 TOP depending on float type and we have no reliable benchmarks for the CPU floating point.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42510982"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42510982" href="https://news.ycombinator.com/vote?id=42510982&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>It's very weird to add together all kinds of very different networking solutions (WiFi, wired ethernet, TB) and talk about their aggregate potential bandwidth as a single number.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="42510457"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42510457" href="https://news.ycombinator.com/vote?id=42510457&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>The pcie configuration was taken from the mac pro and it's m2 ultra. <a href="https://www.apple.com/mac-pro/" rel="nofollow">https://www.apple.com/mac-pro/</a></p><p>I'd assume the mac mini has a less extensive pcie/tb subsystem.</p><p>No idea what people are doing with all those pcie slots except for nvme cards. I wonder how hard it would be to talk to a pcie fpga.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42510604"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_42510604" href="https://news.ycombinator.com/vote?id=42510604&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>You use SerDes high speed serial links (up to 224 Gbps in 2025) to communicate between chips. A PCIe lane is just a Serdes with a 30% packet protocol overhead that uses DMA to copy bytes between to SRAM or DRAM buffers.</p><p>You aggregate PCIe lanes (x16, x8, x4/Thunderbolt, x1).
You could also built mesh networks from SerDes but now instead of PCIe switches You would need SerDes switches or routers (Ethernet, NVlink, Infiniband).</p><p>You need those high speed links between chips for much more than SSD/NVME cards. Other NAS, Processors, Ethernet/internet, Camera, Wifi, Optics, DRAM, SRAM, power etc. For intercore communication (between processors or between chiplets), between networked PCB's, between DRAM chips (DDR5 is just another SerDes protocol), Flash Chips, camera chips, etc.
Any other chip at faster then 250 Mbps speeds.</p><p>I aggregate all the M4 Mac mini ports into a M4 cluster by mesh networking all its Serdes/PCIe with FPGAs into a very cheap low power supercomputer with exaflop performance. Cheaper than NVDIA. I'm sure Apple does the same in their data centers.</p><p>My talk [1] on Wafer Scale Integration and free space optics goes deeper into how and why SerDes and PCIe will be replaced by fiber optics and free space optics for power reasons. I'm sure several parallel 2 Ghz optic lambdas per fiber (but no SerDes!) will be the next step in Apple Silicon as well: the M4 power budget already is mostly in the off-chip SerDes/Thunderbolt networking links.</p><p>[1] <a href="https://vimeo.com/731037615" rel="nofollow">https://vimeo.com/731037615</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42510663"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_42510663" href="https://news.ycombinator.com/vote?id=42510663&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>&gt; I aggregate all the M4 Mac mini ports into a M4 cluster by mesh networking all its Serdes/PCIe with FPGAs into a very cheap low power supercomputer with exaflop performance. Cheaper than NVDIA. I'm sure Apple does the same in their data centers.</p><p>That sounds super interesting, do you happen to have some further information on that? Is it just a bunch of FPGAs issuing DMA TLPs?</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42511217"><td></td></tr>
                <tr id="42511307"><td></td></tr>
                  <tr id="42510996"><td><table>  <tbody><tr>    <td indent="6"><img src="https://news.ycombinator.com/s.gif" height="1" width="240"></td><td>
      <center><a id="up_42510996" href="https://news.ycombinator.com/vote?id=42510996&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>It is not the first time they built super computers from off the shelf Apple machines [1].</p><p>M4 supercomputers are cheaper and it also will be lower Capex and Apex for most datacenter hardware.</p><p>&gt;do you happen to have some further information on that?</p><p>Yes, the information is in my highly detailed custom documentation for the programmers and buyers of 'my' Apple Silicon super computer, Squeak and Ometa DSL programming languages and adaptive compiler. You can contact me for this highly technical report and several scientific papers (email in my profile).</p><p>Do you know of people who might buy a super computer based on better specifications? Or even just buyers who will go for 'the lowest Capex and the lowest Opex supercomputer in 2025-2027'?</p><p>Because the problem with HPC is that almost all funders and managers buy supercomputers with a safe brand name (Nvidia, AMD, Intel) at triple the cost and seldom from a super computer researcher as myself. But some do, if they understand why. I have been designing, selling, programming and operating super computers since 1984 (I was 20 years old then), this M4 Apple Silicon Cluster will be my ninth supercomputer. I prefer to build them from the ground up with our own chip and wafer scale integration designs but when an off-the-shelf chip is good enough I'll sell that instead. Price/Performance/Watt is what counts, ease of programming is a secondary consideration for what performance you achieve. Alan Kay argues you should rewrite your software from scratch [2] and do your own hardware [3] so that is what I've done sinds I learned from him.</p><p>&gt;Is it just a bunch of FPGAs issuing DMA TLPs?</p><p>No. The FPGA's are optional for when you want to flatten the inter-core (=inter-SRAM cache) networking with switches or routers to a shorter hop topology for the message passing like a Slim fly diameter two hop topology [4].</p><p>DMA (Direct Memory Access) TLPs (Transaction Layer Packets) are one of the worst ways of doing inter-core and inter-SRAM communication and on PCIe it has a huge 30% protocol overhead at triple the cost. Intel (and most other chip companies like NVIDIA, Altera, AMD/XILINX) can't design proper chips because they don't want to learn about software [2]. Apple Silicon is marginally better.</p><p>You should use pure message passing between any process, preferably in a programming language and a VM that uses pure message passing at the lowest level (Squeak, Erlang). Even better if you then map those software messages directly to message passing hardware as in my custom chips [3].</p><p>The reason to reverse Apple Silicon instructions for CPU, GPU and ANE are to be able to adapt my adaptive compiler to M4 chips but also to repurpose PCIe for low level message passing with much better performance and latency than DMA TLPs.</p><p>To conclude, if you want to get the cheapest Capex and Opex M4 Mac mini supercomputer you need to rewrite your supercomputing software in a high level language and message passing system like the parallel Squeak Smalltalk VM [3] with adaptive load balancing compilation. C, C++, Swift, MPI or CUDA would result in sub-optimal software performance and orders of magnitude more lines of code when optimal performance of parallel software is the goal.</p><p>[1] <a href="https://en.wikipedia.org/wiki/System_X_(supercomputer)" rel="nofollow">https://en.wikipedia.org/wiki/System_X_(supercomputer)</a></p><p>[2] <a href="https://www.youtube.com/watch?v=ubaX1Smg6pY" rel="nofollow">https://www.youtube.com/watch?v=ubaX1Smg6pY</a></p><p>[3] <a href="https://vimeo.com/731037615" rel="nofollow">https://vimeo.com/731037615</a></p><p>[4] <a href="https://www.youtube.com/watch?v=rLjMrIWHsxs" rel="nofollow">https://www.youtube.com/watch?v=rLjMrIWHsxs</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42512551"><td></td></tr>
                                                <tr id="42511582"><td></td></tr>
                <tr id="42511693"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42511693" href="https://news.ycombinator.com/vote?id=42511693&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>Yes, knowing the exact CPU and ANE assembly instructions (or the underlying microcode!!) allows for general purpose software to adaptively compile processes on all the core types, not just the CPU ones. Its won't always be faster, you get more cache misses (some cores don't have cache) and different DMA and thread scheduling, some registers can't fit the floats or large integers, etc etc.</p><p>But yes, it will be possible to use all 140 cores of the M2 Ultra or the 36 cores of the M4. There will be an M6 Extreme some day, maybe 500 cores?</p><p>Actually, the GPU and ANE cores themselves are built from teams of smaller cores, maybe a few dozens, hundreds or thousand in all, same as in most NVDIA chips.</p><p>&gt;A steal for $22k but I guess very niche for now...</p><p>A single iPhone or Mac app (a game, an LLM, pattern recognition, security app, VPN, de/encryption, video en/dec
coder) that can be sped up by 80%-200% can afford my faster assembly level API.</p><p>A whole series of hardware level zero-day exploits for iPhone and Mac would become possible, now that won't be very niche at all. It is worth millions to reverse Apple Silicon instruction sets.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42511777"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42511777" href="https://news.ycombinator.com/vote?id=42511777&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>What would a "llvm compilable" hello world look like that matches the libc GPU example for "AGX" (Apple Graphics)? It's not possible from MacOS, right? It'd have to be done from Linux?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="42511813"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_42511813" href="https://news.ycombinator.com/vote?id=42511813&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>No, I don't think it is impossible for MacOS. I might be missing a detail here, not sure. I have to think it over.</p><p>I have seen [1] you can patch ANECompilerService, so you can even speed up existing code, because Apple compiles your code just in time (at runtime) on each machine. We could do that for MacOS libc too.</p><p>[1] Some how-to hints in <a href="https://discussions.apple.com/thread/254758525?sortBy=rank" rel="nofollow">https://discussions.apple.com/thread/254758525?sortBy=rank</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42512685"><td></td></tr>
                                          <tr id="42509770"><td></td></tr>
            <tr id="42509957"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42509957" href="https://news.ycombinator.com/vote?id=42509957&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>It's hard to answer not knowing exactly what your aim is, or your experience level with CUDA and how easily the concepts you know will map to Metal, and what you find "restricted and convoluted" about the documentation.</p><p>&lt;Insert your favorite LLM&gt; helped me write some simple Metal-accelerated code by scaffolding the compute pipeline, which took most of the nuisance out of learning the API and let me focus on writing the kernel code.</p><p>Here's the code if it's helpful at all. <a href="https://github.com/rgov/thps-crack">https://github.com/rgov/thps-crack</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42510028"><td></td></tr>
                <tr id="42510454"><td></td></tr>
                        <tr id="42509875"><td></td></tr>
            <tr id="42511501"><td></td></tr>
            <tr id="42510143"><td></td></tr>
            <tr id="42509831"><td></td></tr>
                <tr id="42510332"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42510332" href="https://news.ycombinator.com/vote?id=42510332&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>With what the OP asked for, I don't think wgpu is the right choice. They want to push the limits of Apple Silicon, or do Apple platform specific work, so an abstraction layer like wgpu is going in the opposite direction in my opinion.</p><p>Metal, and Apple's docs are the place to start.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42512244"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42512244" href="https://news.ycombinator.com/vote?id=42512244&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>Indeed. I'm curious how much overhead there is in practice given the fact that the hardware wasn't designed to provide vulkan support. I honestly have no clue what to expect.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42509852"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42509852" href="https://news.ycombinator.com/vote?id=42509852&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>wgpu has its own Metal backend that most people use by default (not MoltenVK).</p><p>There is also a Vulkan backend if you want to run Vulkan through MoltenVK though.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42509864"><td></td></tr>
            <tr id="42509903"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42509903" href="https://news.ycombinator.com/vote?id=42509903&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>the metal backend does currently generate quite a lot of unnecessary command buffers, but in general performance seems solid.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="42509810"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42509810" href="https://news.ycombinator.com/vote?id=42509810&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div>
                  <p>Besides the official docs you can check out llama.cpp as an example that uses metal for accelerated inference on Apple silicon.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="42510728"><td></td></tr>
            <tr id="42510785"><td></td></tr>
                <tr id="42512573"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42512573" href="https://news.ycombinator.com/vote?id=42512573&amp;how=up&amp;goto=item%3Fid%3D42509730"></a></center>    </td><td><br><div><p>Sounds like you've never actually tried running those two APis across platforms?</p><p>if you want portable use WebGPU either via wgpu for rust or dawn for C++   They actually do run on Windows, Linux, Mac, iOS, and Android portably</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42512644"><td></td></tr>
                        <tr id="42509796"><td></td></tr>
            <tr id="42510223"><td></td></tr>
                <tr id="42512470"><td></td></tr>
            <tr id="42511232"><td></td></tr>
                <tr id="42511728"><td></td></tr>
                        </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Three-quarters of the land is drying out, 'redefining life on Earth' (134 pts)]]></title>
            <link>https://grist.org/international/three-quarters-of-the-worlds-land-is-drying-out-redefining-life-on-earth/</link>
            <guid>42509434</guid>
            <pubDate>Wed, 25 Dec 2024 16:09:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://grist.org/international/three-quarters-of-the-worlds-land-is-drying-out-redefining-life-on-earth/">https://grist.org/international/three-quarters-of-the-worlds-land-is-drying-out-redefining-life-on-earth/</a>, See on <a href="https://news.ycombinator.com/item?id=42509434">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
    
  
<p>As Earth grows warmer, its ground is becoming drier and saltier, with profound consequences for the planet’s 8 billion inhabitants — nearly a third of whom already live in places where water is increasingly scarce and the ability to raise crops and livestock is increasingly difficult.&nbsp;</p>



<p>Climate change is accelerating this trend. New research has found global warming has made 77 percent of the Earth’s land drier over the past three decades while rapidly increasing the proportion of excessively salty soils.&nbsp;</p>    




<p>Drylands, or arid areas where water is hard to come by, now make up more than 40 percent of the planet (excluding Antarctica), a likely permanent consequence of climate change, <a href="https://www.unccd.int/resources/reports/global-threat-drying-lands-regional-and-global-aridity-trends-and-future">according to a landmark report</a> by the United Nations Convention to Combat Desertification, or UNCCD. Another new analysis, by the Food and Agriculture Organization of the United Nations, or FAO, found that roughly <a href="https://openknowledge.fao.org/items/b17f6ad2-348b-41e7-8e4c-629fdc3c675c">10 percent of the world’s soils</a> are affected by excess salt, with another 2.5 billion acres at risk.</p>



<p>These interwoven trends threaten agricultural productivity, biodiversity, and ecosystem health while exacerbating food and water insecurity. Together, the two reports sound an urgent alarm: Unless the world curbs emissions, these shifts will continue, with grave implications.&nbsp;</p>



<p>“Without concerted efforts, billions face a future marked by hunger, displacement, and economic decline,” <a href="https://www.unccd.int/news-stories/press-releases/three-quarters-earths-land-became-permanently-drier-last-three-decades">said</a> Nichole Barger, an aridlands ecologist who works with the UNCCD.&nbsp;</p>



<p>Some 7.6 percent of the planet’s land was remade by climate change between 1990 and 2020, with most of the impacted areas shifting from humid landscapes to drylands — defined as an area where 90 percent of rainfall evaporates before reaching the ground. Together, they cover a geographic expanse larger than Canada, researchers found, and in 2020 were home to about 30 percent of the world’s population. That’s a jump of more than 7 percent in recent decades. Unless the world sharply limits emissions, that proportion could more than double by the end of the century. By that point, more than two-thirds of land worldwide, with the exception of Greenland and Antarctica, is expected to store less <a href="https://grist.org/food-and-agriculture/water-availability-farmers-crops-food-agriculture/">water</a>.</p>



<p>These changes are not limited to regions already considered dry, or expected to experience desertification. When modeling global high-emissions scenarios, the researchers found similar changes could occur in the Midwest, central Mexico, and the Mediterranean, to name three examples. The researchers have no expectation that this trend will reverse.&nbsp;</p>






<div>
  <article>
    <span>Read Next</span>
    <div>

      
      
                    
            <a href="https://grist.org/food-and-agriculture/wetlands-protection-restoration-farm-bill/">
        <figure>
          <img src="https://grist.org/wp-content/uploads/2024/12/GettyImages-1404380288-crop.jpg?quality=75&amp;strip=all" alt="Rows of corn and native grasses near wetlands" srcset="https://grist.org/wp-content/uploads/2024/12/GettyImages-1404380288-crop.jpg?quality=75&amp;strip=all 1600w, https://grist.org/wp-content/uploads/2024/12/GettyImages-1404380288-crop.jpg?resize=1200%2C675&amp;quality=75&amp;strip=all 1200w, https://grist.org/wp-content/uploads/2024/12/GettyImages-1404380288-crop.jpg?resize=330%2C186&amp;quality=75&amp;strip=all 330w, https://grist.org/wp-content/uploads/2024/12/GettyImages-1404380288-crop.jpg?resize=768%2C432&amp;quality=75&amp;strip=all 768w, https://grist.org/wp-content/uploads/2024/12/GettyImages-1404380288-crop.jpg?resize=1536%2C864&amp;quality=75&amp;strip=all 1536w, https://grist.org/wp-content/uploads/2024/12/GettyImages-1404380288-crop.jpg?resize=160%2C90&amp;quality=75&amp;strip=all 160w, https://grist.org/wp-content/uploads/2024/12/GettyImages-1404380288-crop.jpg?resize=150%2C84&amp;quality=75&amp;strip=all 150w" sizes="auto, (max-width: 1024px) 100vw, 1024px" height="900" width="1600" loading="lazy" decoding="async">
        </figure>
      </a>
            
    </div>
  </article>
</div>



<p>What Hannah Waterhouse, a soil and water scientist at the University of California, Santa Cruz, finds “important, and unnerving to emphasize” is that this expansion occurred under conditions that aren’t nearly as hot as what’s to come. That suggests the problem will only escalate and, as food and water grow more scarce, <a href="https://grist.org/food-and-agriculture/one-in-11-people-went-hungry-last-year-climate-change-is-a-big-reason-why/">usher in issues like widespread conflict</a>, she said.</p>



<p>“We can look to current geopolitical and ecological events that are playing out currently to understand what we can expect in the future,” Waterhouse said. “Think of what is occurring in Sudan right now, where climate change is exacerbating resource scarcity, which is interacting in governance and geopolitics in violent outcomes for civilians.”&nbsp;</p>



<p>Aridity is not to be confused with drought. Drought is best described as a sudden and startling, but temporary, water shortage often caused by low precipitation, high temperatures, little humidity, and unusual wind patterns. Arid regions, on the other hand, experience persistent, long-term climatic conditions in which evaporation exceeds rainfall, creating conditions in which it can be difficult to sustain life. It is much more subtle than a drought, but no less significant.</p>



<p>“Droughts end,” Ibrahim Thiaw, executive secretary of the UNCCD, <a href="https://time.com/7201214/three-quarters-of-the-earth-has-gotten-permanently-drier/">said in a statement</a>. “When an area’s climate becomes drier, however, the ability to return to previous conditions is lost. The drier climates now affecting vast lands across the globe will not return to how they were, and this change is redefining life on Earth.”</p>



<p>Expanding drylands are widely considered the biggest contributor to the degradation of Earth’s agricultural systems and difficulty producing enough food. Such conditions also have been linked to loss of gross domestic product, large-scale migration, and adverse health impacts and rising mortality. They intensify wildfires, sand storms, and dust storms while degrading ecosystems. They also promote erosion and the salinization of water and soil.</p>



<p>Climate change is already hampering food production, leaving <a href="https://grist.org/food-and-agriculture/one-in-11-people-went-hungry-last-year-climate-change-is-a-big-reason-why/">one in 11</a> people worldwide hungry last year, and the research suggests the problem will intensify, particularly in much of Africa, the Middle East, and South Asia. Under the business-as-usual emissions scenario, sub-Saharan Africa could lose as much as 22 percent of its current crop production capacity by 2050. The production of staple food crops grown in regions highly susceptible to aridity, such as soybeans, wheat, and rice, could plummet worldwide as well.&nbsp;</p>



<figure><div><p><img decoding="async" src="https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all" sizes="(max-width: 1024px) 100vw, 1024px" srcset="https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=1200 1200w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=330 330w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=768 768w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=1200 1200w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=1536 1536w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=160&amp;h=90&amp;crop=1 160w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=300&amp;h=300&amp;crop=1 300w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=400&amp;h=400&amp;crop=1 400w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=600&amp;h=600&amp;crop=1 600w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=640&amp;h=853&amp;crop=1 640w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=96&amp;h=96&amp;crop=1 96w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all&amp;w=150 150w, https://grist.org/wp-content/uploads/2024/12/GettyImages-2169410522_759946.jpg?quality=75&amp;strip=all 1024w" alt="" data-caption="A farmer stirs up clouds of dust while working in the fields in Saxony-Anhalt, Großkorbetha in September. " data-credit="Jan Woitas / Picture Alliance / Getty Images"></p><figcaption>A farmer stirs up clouds of dust while working in the fields in Saxony-Anhalt, Großkorbetha in September.  <cite>Jan Woitas / Picture Alliance / Getty Images</cite></figcaption></div></figure>



<p>Rapid expansion of the world’s drylands is “100 percent interconnected” with the coinciding surge in saltier soils, said Maria Konyushkova, a soil scientist at the Food and Agriculture Organization and lead author of the report the U.N. agency released December 11. The more arid an area is, the less freshwater is available. That requires farmers to rely upon brackish water, increasing soil salinity.</p>



<p>While water-soluble salt is a component of all soils, too much of it impairs plants’ water absorption, effectively stealing moisture from them and suppressing their growth. High salinity also changes soil structure, making it more prone to erosion. All of this diminishes soil fertility, and could lead to yield losses as high as 70 percent for crops like rice and beans in the countries most impacted, the researchers found. Roughly 10 percent of the world’s irrigated cropland, and a similar proportion of its rain-fed cropland, already has been impacted by this dire trend.</p>



<p>As it stands, 10 countries, including China, Russia, and the United States, account for 70 percent of the planet’s salt-affected soils. This costs the global agriculture sector at least $27 billion every year. If the world continues to warm at its current rate, <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4336437/#:~:text=All%20soils%20contain%20some%20water,strongly%20suppresses%20the%20plant%20growth.">past research</a> has estimated that more than 50 percent of the world’s cropland would be similarly impacted by 2050, exacerbating the declining yields that are already driving <a href="https://grist.org/food-and-agriculture/one-in-11-people-went-hungry-last-year-climate-change-is-a-big-reason-why/">rising hunger rates</a>.&nbsp;</p>



<p>Where to go from here was the central topic of UNCCD COP16 earlier this month, as representatives of nearly 200 nations gathered in Riyadh, Saudi Arabia, to discuss land degradation, desertification, and drought. “We depend on land for our survival,” U.N. Secretary-General António Guterres <a href="https://wmo.int/media/news/un-conference-stop-treating-land-dirt">said at the conference</a>. “Yet we treat it like dirt.”</p>



<p>Nature-based solutions like agroecology are among the slate of locally-deployed mitigation and adaptation tactics the two reports suggest, alongside improved crop and water management, technological solutions, and the development of water-efficient and salt-resistant varieties of crops.&nbsp;</p>



<p>Big-dollar investments are being touted as solutions, too. Previous UNCCD <a href="https://www.unccd.int/news-stories/stories/poor-land-use-costs-countries-9-percent-equivalent-their-gdp">reports</a> found that halting the planet’s rate of land degradation, which they suggest could lose the global economy $23 trillion by 2050, would cost roughly $4.6 trillion. The agency told negotiators at the summit that <a href="https://news.un.org/en/story/2024/12/1158196">at least $2.6 trillion</a> for restoration and resilience purposes is needed by 2030.&nbsp;</p>



<p>By the time the summit concluded, just over $12 billion had been pledged to tackle the issue across 80 vulnerable countries, while negotiators departed having failed to agree on a legally binding protocol for action.&nbsp;</p>



<p>Waterhouse has doubts about some proposals highlighted in the research she considers “top-down technocratic solutions.” The Great Green Wall, a multibillion-dollar initiative to plant trees to combat desertification in the Sahel region of Africa, is one example. The effort, launched in 2007, has <a href="https://www.sciencedirect.com/science/article/pii/S2590332224000393">drawn criticism</a> for exacerbating water scarcity and biodiversity loss.&nbsp;</p>



<p>Konyushkova considers the two reports an urgent call for governments worldwide to prioritize investing in resilience efforts to manage what is clearly becoming a crisis. “All the trends show that the freshwater resources will be depleting … but we have so many approaches to adapt,” she said. “We just need to start doing it right now, because it’s already here. Even if governments don’t always understand, it’s already here, and deteriorating.” </p>





  
  
  <hr>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: What skills do you want to develop or improve in 2025? (127 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=42509408</link>
            <guid>42509408</guid>
            <pubDate>Wed, 25 Dec 2024 16:04:33 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=42509408">Hacker News</a></p>
Couldn't get https://news.ycombinator.com/item?id=42509408: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[F*: A proof oriented general purpose programming language (167 pts)]]></title>
            <link>https://fstar-lang.org/</link>
            <guid>42508642</guid>
            <pubDate>Wed, 25 Dec 2024 13:16:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fstar-lang.org/">https://fstar-lang.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42508642">Hacker News</a></p>
Couldn't get https://fstar-lang.org/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Ruby 3.4.0 (324 pts)]]></title>
            <link>https://www.ruby-lang.org/en/news/2024/12/25/ruby-3-4-0-released/</link>
            <guid>42507312</guid>
            <pubDate>Wed, 25 Dec 2024 06:40:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ruby-lang.org/en/news/2024/12/25/ruby-3-4-0-released/">https://www.ruby-lang.org/en/news/2024/12/25/ruby-3-4-0-released/</a>, See on <a href="https://news.ycombinator.com/item?id=42507312">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-wrapper">
    <p>Posted by naruse on 25 Dec 2024</p>

    
<p>We are pleased to announce the release of Ruby 3.4.0. Ruby 3.4 adds <code>it</code> block parameter reference,
change Prism as default parser, adds Happy Eyeballs Version 2 support to socket library, improves YJIT,
adds Modular GC, and so on.</p>

<h2><code>it</code> is introduced</h2>

<p><code>it</code> is added to reference a block parameter with no variable name. [<a href="https://bugs.ruby-lang.org/issues/18980">Feature #18980</a>]</p>

<div><pre><code><span>ary</span> <span>=</span> <span>[</span><span>"foo"</span><span>,</span> <span>"bar"</span><span>,</span> <span>"baz"</span><span>]</span>

<span>p</span> <span>ary</span><span>.</span><span>map</span> <span>{</span> <span>it</span><span>.</span><span>upcase</span> <span>}</span> <span>#=&gt; ["FOO", "BAR", "BAZ"]</span>
</code></pre></div>

<p><code>it</code> very much behaves the same as <code>_1</code>. When the intention is to only use <code>_1</code> in a block, the potential for other numbered parameters such as <code>_2</code> to also appear imposes an extra cognitive load onto readers. So <code>it</code> was introduced as a handy alias. Use <code>it</code> in simple cases where <code>it</code> speaks for itself, such as in one-line blocks.</p>

<h2>Prism is now the default parser</h2>

<p>Switch the default parser from parse.y to Prism. [<a href="https://bugs.ruby-lang.org/issues/20564">Feature #20564</a>]</p>

<p>This is an internal improvement and there should be little change visible to the user. If you notice any compatibility issues, please report them to us.</p>

<p>To use the conventional parser, use the command-line argument <code>--parser=parse.y</code>.</p>

<h2>The socket library now features Happy Eyeballs Version 2 (RFC 8305)</h2>

<p>The socket library now features <a href="https://datatracker.ietf.org/doc/html/rfc8305">Happy Eyeballs Version 2 (RFC 8305)</a>, the latest standardized version of a widely adopted approach for better connectivity in many programming languages, in <code>TCPSocket.new</code> (<code>TCPSocket.open</code>) and <code>Socket.tcp</code>.
This improvement enables Ruby to provide efficient and reliable network connections, adapted to modern internet environments.</p>

<p>Until Ruby 3.3, these methods performed name resolution and connection attempts serially. With this algorithm, they now operate as follows:</p>

<ol>
  <li>Performs IPv6 and IPv4 name resolution concurrently</li>
  <li>Attempt connections to the resolved IP addresses, prioritizing IPv6, with parallel attempts staggered at 250ms intervals</li>
  <li>Return the first successful connection while canceling any others</li>
</ol>

<p>This ensures minimized connection delays, even if a specific protocol or IP address is delayed or unavailable.
This feature is enabled by default, so additional configuration is not required to use it. To disable it globally, set the environment variable <code>RUBY_TCP_NO_FAST_FALLBACK=1</code> or call <code>Socket.tcp_fast_fallback=false</code>. Or to disable it on a per-method basis, use the keyword argument <code>fast_fallback: false</code>.</p>

<h2>YJIT</h2>

<h3>TL;DR</h3>

<ul>
  <li>Better performance across most benchmarks on both x86-64 and arm64 platforms.</li>
  <li>Reduced memory usage through compressed metadata and a unified memory limit.</li>
  <li>Various bug fixes: YJIT is now more robust and thoroughly tested.</li>
</ul>

<h3>New features</h3>

<ul>
  <li>Command-line options
    <ul>
      <li><code>--yjit-mem-size</code> introduces a unified memory limit (default 128MiB) to track total YJIT memory usage,
providing a more intuitive alternative to the old <code>--yjit-exec-mem-size</code> option.</li>
      <li><code>--yjit-log</code> enables a compilation log to track what gets compiled.</li>
    </ul>
  </li>
  <li>Ruby API
    <ul>
      <li><code>RubyVM::YJIT.log</code> provides access to the tail of the compilation log at run-time.</li>
    </ul>
  </li>
  <li>YJIT stats
    <ul>
      <li><code>RubyVM::YJIT.runtime_stats</code> now always provides additional statistics on
 invalidation, inlining, and metadata encoding.</li>
    </ul>
  </li>
</ul>

<h3>New optimizations</h3>

<ul>
  <li>Compressed context reduces memory needed to store YJIT metadata</li>
  <li>Allocate registers for local variables and Ruby method arguments</li>
  <li>When YJIT is enabled, use more Core primitives written in Ruby:
    <ul>
      <li><code>Array#each</code>, <code>Array#select</code>, <code>Array#map</code> rewritten in Ruby for better performance [<a href="https://bugs.ruby-lang.org/issues/20182">Feature #20182</a>].</li>
    </ul>
  </li>
  <li>Ability to inline small/trivial methods such as:
    <ul>
      <li>Empty methods</li>
      <li>Methods returning a constant</li>
      <li>Methods returning <code>self</code></li>
      <li>Methods directly returning an argument</li>
    </ul>
  </li>
  <li>Specialized codegen for many more runtime methods</li>
  <li>Optimize <code>String#getbyte</code>, <code>String#setbyte</code> and other string methods</li>
  <li>Optimize bitwise operations to speed up low-level bit/byte manipulation</li>
  <li>Support shareable constants in multi-ractor mode</li>
  <li>Various other incremental optimizations</li>
</ul>

<h2>Modular GC</h2>

<ul>
  <li>
    <p>Alternative garbage collector (GC) implementations can be loaded dynamically
through the modular garbage collector feature. To enable this feature,
configure Ruby with <code>--with-modular-gc</code> at build time. GC libraries can be
loaded at runtime using the environment variable <code>RUBY_GC_LIBRARY</code>.
[<a href="https://bugs.ruby-lang.org/issues/20351">Feature #20351</a>]</p>
  </li>
  <li>
    <p>Ruby’s built-in garbage collector has been split into a separate file at
<code>gc/default/default.c</code> and interacts with Ruby using an API defined in
<code>gc/gc_impl.h</code>. The built-in garbage collector can now also be built as a
library using <code>make modular-gc MODULAR_GC=default</code> and enabled using the
environment variable <code>RUBY_GC_LIBRARY=default</code>. [<a href="https://bugs.ruby-lang.org/issues/20470">Feature #20470</a>]</p>
  </li>
  <li>
    <p>An experimental GC library is provided based on <a href="https://www.mmtk.io/">MMTk</a>.
This GC library can be built using <code>make modular-gc MODULAR_GC=mmtk</code> and
enabled using the environment variable <code>RUBY_GC_LIBRARY=mmtk</code>. This requires
the Rust toolchain on the build machine. [<a href="https://bugs.ruby-lang.org/issues/20860">Feature #20860</a>]</p>
  </li>
</ul>

<h2>Language changes</h2>

<ul>
  <li>
    <p>String literals in files without a <code>frozen_string_literal</code> comment now emit a deprecation warning
when they are mutated.
These warnings can be enabled with <code>-W:deprecated</code> or by setting <code>Warning[:deprecated] = true</code>.
To disable this change, you can run Ruby with the <code>--disable-frozen-string-literal</code>
command line argument. [<a href="https://bugs.ruby-lang.org/issues/20205">Feature #20205</a>]</p>
  </li>
  <li>
    <p>Keyword splatting <code>nil</code> when calling methods is now supported.
<code>**nil</code> is treated similarly to <code>**{}</code>, passing no keywords,
and not calling any conversion methods.  [<a href="https://bugs.ruby-lang.org/issues/20064">Bug #20064</a>]</p>
  </li>
  <li>
    <p>Block passing is no longer allowed in index.  [<a href="https://bugs.ruby-lang.org/issues/19918">Bug #19918</a>]</p>
  </li>
  <li>
    <p>Keyword arguments are no longer allowed in index.  [<a href="https://bugs.ruby-lang.org/issues/20218">Bug #20218</a>]</p>
  </li>
  <li>
    <p>The toplevel name <code>::Ruby</code> is reserved now, and the definition will be warned when <code>Warning[:deprecated]</code>.  [<a href="https://bugs.ruby-lang.org/issues/20884">Feature #20884</a>]</p>
  </li>
</ul>

<h2>Core classes updates</h2>

<p>Note: We’re only listing notable updates of Core class.</p>

<ul>
  <li>
    <p>Exception</p>

    <ul>
      <li><code>Exception#set_backtrace</code> now accepts an array of <code>Thread::Backtrace::Location</code>.
<code>Kernel#raise</code>, <code>Thread#raise</code> and <code>Fiber#raise</code> also accept this new format. [<a href="https://bugs.ruby-lang.org/issues/13557">Feature #13557</a>]</li>
    </ul>
  </li>
  <li>
    <p>GC</p>

    <ul>
      <li>
        <p><code>GC.config</code> added to allow setting configuration variables on the Garbage
Collector. [<a href="https://bugs.ruby-lang.org/issues/20443">Feature #20443</a>]</p>
      </li>
      <li>
        <p>GC configuration parameter <code>rgengc_allow_full_mark</code> introduced.  When <code>false</code>
GC will only mark young objects. Default is <code>true</code>.  [<a href="https://bugs.ruby-lang.org/issues/20443">Feature #20443</a>]</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Ractor</p>

    <ul>
      <li>
        <p><code>require</code> in Ractor is allowed. The requiring process will be run on
the main Ractor.
<code>Ractor._require(feature)</code> is added to run requiring process on the
main Ractor.
[<a href="https://bugs.ruby-lang.org/issues/20627">Feature #20627</a>]</p>
      </li>
      <li>
        <p><code>Ractor.main?</code> is added. [<a href="https://bugs.ruby-lang.org/issues/20627">Feature #20627</a>]</p>
      </li>
      <li>
        <p><code>Ractor.[]</code> and <code>Ractor.[]=</code> are added to access the ractor local storage
of the current Ractor. [<a href="https://bugs.ruby-lang.org/issues/20715">Feature #20715</a>]</p>
      </li>
      <li>
        <p><code>Ractor.store_if_absent(key){ init }</code> is added to initialize ractor local
variables in thread-safty. [<a href="https://bugs.ruby-lang.org/issues/20875">Feature #20875</a>]</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Range</p>

    <ul>
      <li><code>Range#size</code> now raises <code>TypeError</code> if the range is not iterable. [<a href="https://bugs.ruby-lang.org/issues/18984">Misc #18984</a>]</li>
    </ul>
  </li>
</ul>

<h2>Standard Library updates</h2>

<p>Note: We’re only listing notable updates of Standard librarires.</p>

<ul>
  <li>RubyGems
    <ul>
      <li>Add <code>--attestation</code> option to gem push. It enabled to store signature to <a href="https://www.ruby-lang.org/en/news/2024/12/25/ruby-3-4-0-released/sigstore.dev">sigstore.dev</a></li>
    </ul>
  </li>
  <li>Bundler
    <ul>
      <li>Add a <code>lockfile_checksums</code> configuration to include checksums in fresh lockfiles</li>
      <li>Add bundle lock <code>--add-checksums</code> to add checksums to an existing lockfile</li>
    </ul>
  </li>
  <li>
    <p>JSON</p>

    <ul>
      <li>Performance improvements of <code>JSON.parse</code> about 1.5 times faster than json-2.7.x.</li>
    </ul>
  </li>
  <li>
    <p>Tempfile</p>

    <ul>
      <li>The keyword argument <code>anonymous: true</code> is implemented for Tempfile.create.
<code>Tempfile.create(anonymous: true)</code> removes the created temporary file immediately.
So applications don’t need to remove the file.
[<a href="https://bugs.ruby-lang.org/issues/20497">Feature #20497</a>]</li>
    </ul>
  </li>
  <li>
    <p>win32/sspi.rb</p>

    <ul>
      <li>This library is now extracted from the Ruby repository to <a href="https://github.com/ruby/net-http-sspi">ruby/net-http-sspi</a>.
[<a href="https://bugs.ruby-lang.org/issues/20775">Feature #20775</a>]</li>
    </ul>
  </li>
</ul>

<h2>Compatibility issues</h2>

<p>Note: Excluding feature bug fixes.</p>

<ul>
  <li>Error messages and backtrace displays have been changed.
    <ul>
      <li>Use a single quote instead of a backtick as a opening quote. [<a href="https://bugs.ruby-lang.org/issues/16495">Feature #16495</a>]</li>
      <li>Display a class name before a method name (only when the class has a permanent name). [<a href="https://bugs.ruby-lang.org/issues/19117">Feature #19117</a>]</li>
      <li><code>Kernel#caller</code>, <code>Thread::Backtrace::Location</code>’s methods, etc. are also changed accordingly.</li>
    </ul>

    <div><pre><code>Old:
test.rb:1:in `foo': undefined method `time' for an instance of Integer
        from test.rb:2:in `&lt;main&gt;'

New:
test.rb:1:in 'Object#foo': undefined method 'time' for an instance of Integer
        from test.rb:2:in '&lt;main&gt;'
</code></pre></div>
  </li>
  <li>
    <p>Hash#inspect rendering have been changed. [[Bug #20433]]</p>

    <ul>
      <li>Symbol keys are displayed using the modern symbol key syntax: <code>"{user: 1}"</code></li>
      <li>Other keys now have spaces around <code>=&gt;</code>: <code>'{"user" =&gt; 1}'</code>, while previously they didn’t: <code>'{"user"=&gt;1}'</code></li>
    </ul>
  </li>
  <li>
    <p>Kernel#Float() now accepts a decimal string with decimal part omitted. [<a href="https://bugs.ruby-lang.org/issues/20705">Feature #20705</a>]</p>

    <div><pre><code><span>Float</span><span>(</span><span>"1."</span><span>)</span>    <span>#=&gt; 1.0 (previously, an ArgumentError was raised)</span>
<span>Float</span><span>(</span><span>"1.E-1"</span><span>)</span> <span>#=&gt; 0.1 (previously, an ArgumentError was raised)</span>
</code></pre></div>
  </li>
  <li>
    <p>String#to_f now accepts a decimal string with decimal part omitted. Note that the result changes when an exponent is specified. [<a href="https://bugs.ruby-lang.org/issues/20705">Feature #20705</a>]</p>

    <div><pre><code><span>"1."</span><span>.</span><span>to_f</span>    <span>#=&gt; 1.0</span>
<span>"1.E-1"</span><span>.</span><span>to_f</span> <span>#=&gt; 0.1 (previously, 1.0 was returned)</span>
</code></pre></div>
  </li>
  <li>Refinement#refined_class has been removed. [<a href="https://bugs.ruby-lang.org/issues/19714">Feature #19714</a>]</li>
</ul>

<h2>Standard library compatibility issues</h2>

<ul>
  <li>
    <p>DidYouMean</p>

    <ul>
      <li><code>DidYouMean::SPELL_CHECKERS[]=</code> and <code>DidYouMean::SPELL_CHECKERS.merge!</code> are removed.</li>
    </ul>
  </li>
  <li>
    <p>Net::HTTP</p>

    <ul>
      <li>Removed the following deprecated constants:
        <ul>
          <li><code>Net::HTTP::ProxyMod</code></li>
          <li><code>Net::NetPrivate::HTTPRequest</code></li>
          <li><code>Net::HTTPInformationCode</code></li>
          <li><code>Net::HTTPSuccessCode</code></li>
          <li><code>Net::HTTPRedirectionCode</code></li>
          <li><code>Net::HTTPRetriableCode</code></li>
          <li><code>Net::HTTPClientErrorCode</code></li>
          <li><code>Net::HTTPFatalErrorCode</code></li>
          <li><code>Net::HTTPServerErrorCode</code></li>
          <li><code>Net::HTTPResponseReceiver</code></li>
          <li><code>Net::HTTPResponceReceiver</code></li>
        </ul>

        <p>These constants were deprecated from 2012.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Timeout</p>

    <ul>
      <li>Reject negative values for Timeout.timeout. [<a href="https://bugs.ruby-lang.org/issues/20795">Bug #20795</a>]</li>
    </ul>
  </li>
  <li>
    <p>URI</p>

    <ul>
      <li>Switched default parser to RFC 3986 compliant from RFC 2396 compliant.
[<a href="https://bugs.ruby-lang.org/issues/19266">Bug #19266</a>]</li>
    </ul>
  </li>
</ul>

<h2>C API updates</h2>

<ul>
  <li><code>rb_newobj</code> and <code>rb_newobj_of</code> (and corresponding macros <code>RB_NEWOBJ</code>, <code>RB_NEWOBJ_OF</code>, <code>NEWOBJ</code>, <code>NEWOBJ_OF</code>) have been removed. [<a href="https://bugs.ruby-lang.org/issues/20265">Feature #20265</a>]</li>
  <li>Removed deprecated function <code>rb_gc_force_recycle</code>. [<a href="https://bugs.ruby-lang.org/issues/18290">Feature #18290</a>]</li>
</ul>

<h2>Miscellaneous changes</h2>

<ul>
  <li>
    <p>Passing a block to a method which doesn’t use the passed block will show
a warning on verbose mode (<code>-w</code>).
[<a href="https://bugs.ruby-lang.org/issues/15554">Feature #15554</a>]</p>
  </li>
  <li>
    <p>Redefining some core methods that are specially optimized by the interpeter
and JIT like <code>String.freeze</code> or <code>Integer#+</code> now emits a performance class
warning (<code>-W:performance</code> or <code>Warning[:performance] = true</code>).
[<a href="https://bugs.ruby-lang.org/issues/20429">Feature #20429</a>]</p>
  </li>
</ul>

<p>See <a href="https://github.com/ruby/ruby/blob/v3_4_0/NEWS.md">NEWS</a>
or <a href="https://github.com/ruby/ruby/compare/v3_3_0...v3_4_0">commit logs</a>
for more details.</p>

<p>With those changes, <a href="https://github.com/ruby/ruby/compare/v3_3_0...v3_4_0#file_bucket">4942 files changed, 202244 insertions(+), 255528 deletions(-)</a>
since Ruby 3.3.0!</p>

<p>Merry Christmas, Happy Holidays, and enjoy programming with Ruby 3.4!</p>

<h2>Download</h2>

<ul>
  <li>
    <p><a href="https://cache.ruby-lang.org/pub/ruby/3.4/ruby-3.4.0.tar.gz">https://cache.ruby-lang.org/pub/ruby/3.4/ruby-3.4.0.tar.gz</a></p>

    <div><pre><code>SIZE: 23153022
SHA1: 8ccb561848a7c460ae08e1a120a47c4a88a79335
SHA256: 068c8523442174bd3400e786f4a6952352c82b1b9f6210fd17fb4823086d3379
SHA512: bc70ecba27d1cdea00879f03487cad137a7d9ab2ad376cfb7a65780ad14da637fa3944eeeede2c04ab31eeafb970c64ccfeeb854c99c1093937ecc1165731562
</code></pre></div>
  </li>
  <li>
    <p><a href="https://cache.ruby-lang.org/pub/ruby/3.4/ruby-3.4.0.tar.xz">https://cache.ruby-lang.org/pub/ruby/3.4/ruby-3.4.0.tar.xz</a></p>

    <div><pre><code>SIZE: 17215572
SHA1: eb25447cc404e8d2e177c62550d0224ebd410e68
SHA256: 0081930db22121eb997207f56c0e22720d4f5d21264b5907693f516c32f233ca
SHA512: 776a2cf3e9ccc77c27500240f168aa3e996b0c7c1ee1ef5a7afc291a06c118444016fde38b5b139c0b800496b8eb1b5456562d833f0edc0658917164763b1af7
</code></pre></div>
  </li>
  <li>
    <p><a href="https://cache.ruby-lang.org/pub/ruby/3.4/ruby-3.4.0.zip">https://cache.ruby-lang.org/pub/ruby/3.4/ruby-3.4.0.zip</a></p>

    <div><pre><code>SIZE: 28310193
SHA1: 26254ca5d3decc28a4e5faec255995265e5270b5
SHA256: c120228038af04554f6363e716b0a32cbf53cf63c6adf9f2c22a24f43dc8b555
SHA512: 4d535ed10db76a6aa74f8a025df319deb28483a7a781c24045906ee7663f1cff9d9f9e71dbc993c9e050113a34b37c7fa2143c355a0a6e1e1029bf2c92213ecc
</code></pre></div>
  </li>
</ul>

<h2>What is Ruby</h2>

<p>Ruby was first developed by Matz (Yukihiro Matsumoto) in 1993,
and is now developed as Open Source. It runs on multiple platforms
and is used all over the world especially for web development.</p>


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[This open problem taught me what topology is [video] (368 pts)]]></title>
            <link>https://www.youtube.com/watch?v=IQqtsm-bBRU</link>
            <guid>42507185</guid>
            <pubDate>Wed, 25 Dec 2024 06:08:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=IQqtsm-bBRU">https://www.youtube.com/watch?v=IQqtsm-bBRU</a>, See on <a href="https://news.ycombinator.com/item?id=42507185">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I made a website to semantically search ArXiv papers (234 pts)]]></title>
            <link>https://papermatch.mitanshu.tech/</link>
            <guid>42507116</guid>
            <pubDate>Wed, 25 Dec 2024 05:44:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://papermatch.mitanshu.tech/">https://papermatch.mitanshu.tech/</a>, See on <a href="https://news.ycombinator.com/item?id=42507116">Hacker News</a></p>
Couldn't get https://papermatch.mitanshu.tech/: Error: Request failed with status code 403]]></description>
        </item>
    </channel>
</rss>