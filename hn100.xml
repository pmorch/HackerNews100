<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 22 Mar 2025 07:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[George Foreman, Boxer Turned Foreman Grill Infomercial Star, Dies at 76 (204 pts)]]></title>
            <link>https://variety.com/2025/tv/news/george-foreman-boxer-infomercial-star-dies-1236345523/</link>
            <guid>43442917</guid>
            <pubDate>Sat, 22 Mar 2025 02:56:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://variety.com/2025/tv/news/george-foreman-boxer-infomercial-star-dies-1236345523/">https://variety.com/2025/tv/news/george-foreman-boxer-infomercial-star-dies-1236345523/</a>, See on <a href="https://news.ycombinator.com/item?id=43442917">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>
	<a href="https://variety.com/t/george-foreman/" id="auto-tag_george-foreman" data-tag="george-foreman">George Foreman</a>, the charismatic boxer turned infomercial star who had a retail hit with his Foreman Grill product line, died Friday. He was 76.</p>



<p>
	The Texas-born Foreman became Heavyweight Champion of the World, and segued into a TV staple and pop culture icon. He was swept up in the swirl of decade-defining events surrounding Muhammad Ali as well as Joe Frazier and other high-wattage pugilists of the 1970s. In the 1990s, Foreman took advantage of the availablity of low-cost TV time to launch his Foreman Grill home grill product through a series of  infomercials that he hosted. </p>



<p>
	Foreman famously had a close call in the ring in 1977 that drove him to quit boxing and declare himself a born-again Christian. He became an ordained minister in 1978 and began preaching in his hometown of Houston. He shocked the sports world when he returned to boxing in 1987 and wound up reclaiming his Heavyweight Champion title in 1994. Foreman retired from the sweet science for good in 1997.

	</p>






<p>
	In addition to his business ventures, Foreman led Houston’s Church of the Lord Jesus Christ, where he preached four times a week.


</p><div data-pmc-adm-ad-id="1234758890">
			<h3>
			Popular on Variety		</h3>
	
		
	</div>




<p>
	In recent years, Foreman had been involved with numerous documentary projects about his life, boxing and the era of his greatest fame. He was also the subject of the 2023 biopic “Big George Foreman,” from director George Tillman Jr. Khris Davis played Foreman in the Mandalay Pictures drama that focused on his improbable return to the ring in the 1980s and ’90s.</p>



<p>
	Foreman’s family confirmed his death in an Instagram post on Friday.</p>



<figure><div>
<blockquote data-instgrm-captioned="" data-instgrm-permalink="https://www.instagram.com/p/DHe5UtIJ4IQ/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14"></blockquote>
</div></figure>



<p>
	Born Jan. 10, 1949, Foreman grew up in extreme poverity in the east Texas city of Marshall, about 40 miles west of Shreveport, La. He first gained national fame after winning an Olympic gold medal in boxing at the 1968 Summer Games in Mexico City.</p>



<p>
	“Foreman often bullied younger children and didn’t like getting up early for school. Foreman became a mugger and brawler on the hard streets of Houston’s Fifth Ward by age 15,” according to <a href="https://www.georgeforeman.com/pages/biography" rel="nofollow" target="_blank"><strong>Foreman’s official website.</strong></a></p>



<p>
	He was eventually steered into boxing through the Lone Star state’s Lyndon B. Johnson Job Corps program. Foreman gained stature in the late 1960s and ultimately secured the Heavyweight Championship in January 1973 by defeating Frazier with six knockouts in a bout held in Kingston, Jamaica. The event also had the distinction of being the first boxing broadcast to air on the then-fledgling pay TV service HBO.

	</p>




<p>
	The following year, Foreman faced a resurgent Ali in the event that received worldwide attention as the “Rumble in the Jungle,” held in what is now the Democratic Republic of Congo. Ali pummelled Foreman in the ring and dominated him on the PR front as well. Foreman went on to went his next five fights by knockout.</p>



<p>
	After his triumph of becoming the world’s oldest Heavyweight Champion, Foreman became a boldface name staple on TV, from daytime talk shows to “The Tonight Show” and “Late Night With David Letterman.” He was known for his folksy charm and for having a sprawling family of children and grandchildren. And his low-cost cooking device that allowed for easy indoor grilling — the George Foreman Lean Mean Grilling Machine — became a retail and direct response sales juggernaut starting in the early 1990s.</p>



<p>
	Foreman also starred in the short-lived 1993 ABC family comedy “George,” playing a retired boxer who runs an after-school program for troubled students. He hosted NBC’s “Saturday Night Live” in 1994.</p>



<p>
	Foreman had cameos and small roles in a host of TV shows and movies over the years, playing himself or a similar character, including “Night at the Museum: Battle of the Smithsonian,” “The Fighter,” “The Masked Singer,” “The Larry Sanders Show,” “Home Improvement” and “King of the Hill.”</p>
















</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Monster Cables picked the wrong guy to threaten (2008) (208 pts)]]></title>
            <link>https://www.oncontracts.com/monster-cables-picked-the-wrong-guy-to-threaten/</link>
            <guid>43442178</guid>
            <pubDate>Sat, 22 Mar 2025 00:30:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.oncontracts.com/monster-cables-picked-the-wrong-guy-to-threaten/">https://www.oncontracts.com/monster-cables-picked-the-wrong-guy-to-threaten/</a>, See on <a href="https://news.ycombinator.com/item?id=43442178">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody" id="post-113" itemscope="" itemtype="https://schema.org/BlogPosting"><p>Monster Cables, which makes extremely high-priced stereo cables, has apparently sent a <a href="http://www.audioholics.com/news/industry-news/monster-sues-blue-jeans-cable" target="_blank">cease-and-desist letter</a> to <a href="http://www.bluejeanscable.com/">Blue Jeans Cable</a>, alleging various kinds of infringement.  Bad move – the president of Blue Jeans Cable, Kurt Denke, is a former litigator who <a href="http://www.audioholics.com/news/industry-news/blue-jeans-strikes-back">responded pretty forcefully</a>:</p><blockquote><p><em>… Once I have received the above materials and explanations from you, I will undertake to analyze this information and let you know whether we are willing to accede to any of the demands made in your letter. <strong>If my analysis shows that there is any reasonable likelihood that we have infringed in any way any of Monster Cable’s intellectual property rights, we will of course take any and all action necessary to resolve the situation. </strong> If I do not hear from you within the next fourteen days, or if I do hear from you but do not receive </em><em>all of the information requested above, I will assume that you have abandoned these claims and closed your file.</em></p><p><em> As for your requests for information, or for action, directed to me: I would remind you that it is you, not I, who are making claims; and it is you, not I, who must substantiate those claims.  You have not done so.</em></p><p><em> I have seen Monster Cable take untenable IP positions in various different scenarios in the past, and am generally familiar with what seems to be Monster Cable’s </em><em>modus operandi in these matters.  I therefore think that it is important that, before closing, I make you aware of a few points.</em></p><p><em> After graduating from the University of Pennsylvania Law School in 1985, I spent nineteen years in litigation practice, with a focus upon federal litigation involving large damages and complex issues.  My first seven years were spent primarily on the defense side, where <strong>I developed an intense frustration with insurance carriers who would settle meritless claims for nuisance value when the better long-term view would have been to fight against vexatious litigation as a matter of principle.</strong> In plaintiffs’ practice, likewise, I was always a strong advocate of standing upon principle and taking cases all the way to judgment, even when substantial offers of settlement were on the table.  I am “uncompromising” in the most literal sense of the word.  If Monster Cable proceeds with litigation against me I will pursue the same merits-driven approach; I do not compromise with bullies and <strong>I would rather spend fifty thousand dollars on defense than give you a dollar of unmerited settlement funds.</strong> As for signing a licensing agreement for intellectual property which I have not infringed: that will not happen, under any circumstances, whether it makes economic sense or not.</em></p><p><em> I say this because my observation has been that Monster Cable typically operates in a hit-and-run fashion.  Your client threatens litigation, expecting the victim to panic and plead for mercy; and what follows is a quickie negotiation session that ends with payment and a licensing agreement.  Your client then uses this collection of licensing agreements to convince others under similar threat to accede to its demands.  Let me be clear about this: <strong>there are only two ways for you to get anything out of me.  You will either need to (1) convince me that I have infringed, or (2) obtain a final judgment to that effect from a court of competent jurisdiction. </strong>It may be that my inability to see the pragmatic value of settling frivolous claims is a deep character flaw, and I am sure a few of the insurance carriers for whom I have done work have seen it that way; but it is how I have done business for the last quarter-century and you are not going to change my mind.  If you sue me, the case will go to judgment, and I will hold the court’s attention upon the merits of your claims–or, to speak more precisely, the absence of merit from your claims–from start to finish. <strong>Not only am I unintimidated by litigation; I sometimes rather miss it.</strong></em></p></blockquote><p>(Emphasis added; hat tip: Jeff Nolan at <a href="http://jeffnolan.com/wp/2008/04/15/monster-cables-gets-soundly-beaten/#comment-258095">Venture Chronicles</a>.)</p><p>I can relate to Denke’s final comment quoted above ….  I wonder what the attendant publicity is doing for his sales.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[EFF Border Search Pocket Guide (107 pts)]]></title>
            <link>https://www.eff.org/document/eff-border-search-pocket-guide</link>
            <guid>43441895</guid>
            <pubDate>Fri, 21 Mar 2025 23:41:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eff.org/document/eff-border-search-pocket-guide">https://www.eff.org/document/eff-border-search-pocket-guide</a>, See on <a href="https://news.ycombinator.com/item?id=43441895">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>
            <h2>EFF Border Search Pocket Guide</h2>
    </p>
<div><div><p>This is a handy guide designed to be printed, folded, and carried in your pocket while traveling.</p></div>

<div><p><span><img alt="PDF icon" title="application/pdf" src="https://www.eff.org/modules/file/icons/application-pdf.png"> <a href="https://www.eff.org/files/2018/01/11/border-pocket-guide-2.pdf" type="application/pdf; length=799017">border-pocket-guide-2.pdf</a></span></p></div>
</div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[France rejects backdoor mandate (573 pts)]]></title>
            <link>https://www.eff.org/deeplinks/2025/03/win-encryption-france-rejects-backdoor-mandate</link>
            <guid>43440513</guid>
            <pubDate>Fri, 21 Mar 2025 20:35:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eff.org/deeplinks/2025/03/win-encryption-france-rejects-backdoor-mandate">https://www.eff.org/deeplinks/2025/03/win-encryption-france-rejects-backdoor-mandate</a>, See on <a href="https://news.ycombinator.com/item?id=43440513">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article role="article">
  
  
  <div><p><span>In a moment of clarity after initially moving forward a deeply flawed piece of legislation, the French National Assembly has done the right thing: it rejected a dangerous proposal that would have gutted end-to-end encryption in the name of fighting drug trafficking. Despite heavy pressure from the Interior Ministry, </span><a href="https://www.lemonde.fr/societe/article/2025/03/21/l-assemblee-vote-pour-le-maintien-de-la-confidentialite-des-messageries-cryptees-lors-d-une-nuit-agitee_6584121_3224.html"><span>lawmakers voted Thursday night</span></a><span> (article in French) to strike down a provision that would have forced messaging platforms like Signal and WhatsApp to allow hidden access to private conversations.</span></p>
<p><span>The vote is a victory for digital rights, for privacy and security, and for common sense.</span></p>
<p><span>The proposed law was a surveillance wishlist disguised as anti-drug legislation. Tucked into its text was a resurrection of the </span><a href="https://www.eff.org/deeplinks/2019/01/give-ghost-backdoor-another-name"><span>widely discredited "ghost” participant model</span></a><span>—a backdoor that pretends not to be one. Under this scheme, law enforcement could silently join encrypted chats, undermining the very idea of private communication. Security experts have </span><a href="https://www.justsecurity.org/64968/why-the-ghost-keys-solution-to-encryption-is-no-solution/"><span>condemned</span></a><span> the approach, </span><a href="https://www.internetsociety.org/resources/doc/2020/fact-sheet-ghost-proposals/"><span>warning</span></a><span> it would introduce systemic vulnerabilities, damage trust in secure communication platforms, and create tools ripe for abuse.</span></p>
<p><span>The French lawmakers who voted this provision down deserve credit. They listened—not only to </span><a href="https://www.laquadrature.net/en/warondrugslaw/"><span>French digital rights organizations</span></a><span> and technologists, but also to basic principles of cybersecurity and civil liberties. They understood that encryption protects everyone, not just activists and dissidents, but also journalists, medical professionals, abuse survivors, and ordinary citizens trying to live private lives in an increasingly surveilled world.</span></p>
<h3><b>A Global Signal</b></h3>
<p><span>France’s rejection of the backdoor provision should send a message to legislatures around the world: you don’t have to sacrifice fundamental rights in the name of public safety. Encryption is not the enemy of justice; it’s a tool that </span><a href="https://www.eff.org/deeplinks/2024/03/european-court-human-rights-confirms-undermining-encryption-violates-fundamental"><span>supports our fundamental human rights</span></a><span>, including the right to have a private conversation. It is a pillar of modern democracy and cybersecurity.</span></p>
<p><span>As governments in the U.S., U.K., Australia, and elsewhere </span><a href="https://www.eff.org/deeplinks/2024/12/defending-encryption-us-and-abroad"><span>continue to flirt with anti-encryption laws</span></a><span>, this decision should serve as a model—and a warning. Undermining encryption doesn’t make society safer. It makes everyone more vulnerable.</span></p>
<p><span>This victory was not inevitable. It came after sustained public pressure, expert input, and tireless advocacy from civil society. It shows that pushing back works. But for the foreseeable future, misguided lobbyists for police national security agencies will continue to push similar proposals—perhaps repackaged, or rushed through quieter legislative moments.</span></p>
<p><span>Supporters of privacy should celebrate this win today. Tomorrow, we will continue to keep watch. </span></p>

</div>

          </article>
    </div><div>
          <h2>Join EFF Lists</h2>
        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The little book about OS development (287 pts)]]></title>
            <link>https://littleosbook.github.io/</link>
            <guid>43440473</guid>
            <pubDate>Fri, 21 Mar 2025 20:30:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://littleosbook.github.io/">https://littleosbook.github.io/</a>, See on <a href="https://news.ycombinator.com/item?id=43440473">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="wrapper">
<div id="TOC">
<h2>Contents</h2>
<ul>
<li><a href="#introduction"><span>1</span> Introduction</a><ul>
<li><a href="#about-the-book"><span>1.1</span> About the Book</a></li>
<li><a href="#the-reader"><span>1.2</span> The Reader</a></li>
<li><a href="#credits-thanks-and-acknowledgements"><span>1.3</span> Credits, Thanks and Acknowledgements</a></li>
<li><a href="#contributors"><span>1.4</span> Contributors</a></li>
<li><a href="#changes-and-corrections"><span>1.5</span> Changes and Corrections</a></li>
<li><a href="#issues-and-where-to-get-help"><span>1.6</span> Issues and where to get help</a></li>
<li><a href="#license"><span>1.7</span> License</a></li>
</ul></li>
<li><a href="#first-steps"><span>2</span> First Steps</a><ul>
<li><a href="#tools"><span>2.1</span> Tools</a><ul>
<li><a href="#quick-setup"><span>2.1.1</span> Quick Setup</a></li>
<li><a href="#programming-languages"><span>2.1.2</span> Programming Languages</a></li>
<li><a href="#host-operating-system"><span>2.1.3</span> Host Operating System</a></li>
<li><a href="#build-system"><span>2.1.4</span> Build System</a></li>
<li><a href="#virtual-machine"><span>2.1.5</span> Virtual Machine</a></li>
</ul></li>
<li><a href="#booting"><span>2.2</span> Booting</a><ul>
<li><a href="#bios"><span>2.2.1</span> BIOS</a></li>
<li><a href="#the-bootloader"><span>2.2.2</span> The Bootloader</a></li>
<li><a href="#the-operating-system"><span>2.2.3</span> The Operating System</a></li>
</ul></li>
<li><a href="#hello-cafebabe"><span>2.3</span> Hello Cafebabe</a><ul>
<li><a href="#compiling-the-operating-system"><span>2.3.1</span> Compiling the Operating System</a></li>
<li><a href="#linking-the-kernel"><span>2.3.2</span> Linking the Kernel</a></li>
<li><a href="#obtaining-grub"><span>2.3.3</span> Obtaining GRUB</a></li>
<li><a href="#building-an-iso-image"><span>2.3.4</span> Building an ISO Image</a></li>
<li><a href="#running-bochs"><span>2.3.5</span> Running Bochs</a></li>
</ul></li>
<li><a href="#further-reading"><span>2.4</span> Further Reading</a></li>
</ul></li>
<li><a href="#getting-to-c"><span>3</span> Getting to C</a><ul>
<li><a href="#setting-up-a-stack"><span>3.1</span> Setting Up a Stack</a></li>
<li><a href="#calling-c-code-from-assembly"><span>3.2</span> Calling C Code From Assembly</a><ul>
<li><a href="#packing-structs"><span>3.2.1</span> Packing Structs</a></li>
</ul></li>
<li><a href="#compiling-c-code"><span>3.3</span> Compiling C Code</a></li>
<li><a href="#build-tools"><span>3.4</span> Build Tools</a></li>
<li><a href="#further-reading-1"><span>3.5</span> Further Reading</a></li>
</ul></li>
<li><a href="#output"><span>4</span> Output</a><ul>
<li><a href="#interacting-with-the-hardware"><span>4.1</span> Interacting with the Hardware</a></li>
<li><a href="#the-framebuffer"><span>4.2</span> The Framebuffer</a><ul>
<li><a href="#writing-text"><span>4.2.1</span> Writing Text</a></li>
<li><a href="#moving-the-cursor"><span>4.2.2</span> Moving the Cursor</a></li>
<li><a href="#the-driver"><span>4.2.3</span> The Driver</a></li>
</ul></li>
<li><a href="#the-serial-ports"><span>4.3</span> The Serial Ports</a><ul>
<li><a href="#configuring-the-serial-port"><span>4.3.1</span> Configuring the Serial Port</a></li>
<li><a href="#configuring-the-line"><span>4.3.2</span> Configuring the Line</a></li>
<li><a href="#configuring-the-buffers"><span>4.3.3</span> Configuring the Buffers</a></li>
<li><a href="#configuring-the-modem"><span>4.3.4</span> Configuring the Modem</a></li>
<li><a href="#writing-data-to-the-serial-port"><span>4.3.5</span> Writing Data to the Serial Port</a></li>
<li><a href="#configuring-bochs"><span>4.3.6</span> Configuring Bochs</a></li>
<li><a href="#the-driver-1"><span>4.3.7</span> The Driver</a></li>
</ul></li>
<li><a href="#further-reading-2"><span>4.4</span> Further Reading</a></li>
</ul></li>
<li><a href="#segmentation"><span>5</span> Segmentation</a><ul>
<li><a href="#accessing-memory"><span>5.1</span> Accessing Memory</a></li>
<li><a href="#the-global-descriptor-table-gdt"><span>5.2</span> The Global Descriptor Table (GDT)</a></li>
<li><a href="#loading-the-gdt"><span>5.3</span> Loading the GDT</a></li>
<li><a href="#further-reading-3"><span>5.4</span> Further Reading</a></li>
</ul></li>
<li><a href="#interrupts-and-input"><span>6</span> Interrupts and Input</a><ul>
<li><a href="#interrupts-handlers"><span>6.1</span> Interrupts Handlers</a></li>
<li><a href="#creating-an-entry-in-the-idt"><span>6.2</span> Creating an Entry in the IDT</a></li>
<li><a href="#handling-an-interrupt"><span>6.3</span> Handling an Interrupt</a></li>
<li><a href="#creating-a-generic-interrupt-handler"><span>6.4</span> Creating a Generic Interrupt Handler</a></li>
<li><a href="#loading-the-idt"><span>6.5</span> Loading the IDT</a></li>
<li><a href="#programmable-interrupt-controller-pic"><span>6.6</span> Programmable Interrupt Controller (PIC)</a></li>
<li><a href="#reading-input-from-the-keyboard"><span>6.7</span> Reading Input from the Keyboard</a></li>
<li><a href="#further-reading-4"><span>6.8</span> Further Reading</a></li>
</ul></li>
<li><a href="#the-road-to-user-mode"><span>7</span> The Road to User Mode</a><ul>
<li><a href="#loading-an-external-program"><span>7.1</span> Loading an External Program</a><ul>
<li><a href="#grub-modules"><span>7.1.1</span> GRUB Modules</a></li>
</ul></li>
<li><a href="#executing-a-program"><span>7.2</span> Executing a Program</a><ul>
<li><a href="#a-very-simple-program"><span>7.2.1</span> A Very Simple Program</a></li>
<li><a href="#compiling"><span>7.2.2</span> Compiling</a></li>
<li><a href="#finding-the-program-in-memory"><span>7.2.3</span> Finding the Program in Memory</a></li>
<li><a href="#jumping-to-the-code"><span>7.2.4</span> Jumping to the Code</a></li>
</ul></li>
<li><a href="#the-beginning-of-user-mode"><span>7.3</span> The Beginning of User Mode</a></li>
</ul></li>
<li><a href="#a-short-introduction-to-virtual-memory"><span>8</span> A Short Introduction to Virtual Memory</a><ul>
<li><a href="#virtual-memory-through-segmentation"><span>8.1</span> Virtual Memory Through Segmentation?</a></li>
<li><a href="#further-reading-5"><span>8.2</span> Further Reading</a></li>
</ul></li>
<li><a href="#paging"><span>9</span> Paging</a><ul>
<li><a href="#why-paging"><span>9.1</span> Why Paging?</a></li>
<li><a href="#paging-in-x86"><span>9.2</span> Paging in x86</a><ul>
<li><a href="#identity-paging"><span>9.2.1</span> Identity Paging</a></li>
<li><a href="#enabling-paging"><span>9.2.2</span> Enabling Paging</a></li>
<li><a href="#a-few-details"><span>9.2.3</span> A Few Details</a></li>
</ul></li>
<li><a href="#paging-and-the-kernel"><span>9.3</span> Paging and the Kernel</a><ul>
<li><a href="#reasons-to-not-identity-map-the-kernel"><span>9.3.1</span> Reasons to Not Identity Map the Kernel</a></li>
<li><a href="#the-virtual-address-for-the-kernel"><span>9.3.2</span> The Virtual Address for the Kernel</a></li>
<li><a href="#placing-the-kernel-at-0xc0000000"><span>9.3.3</span> Placing the Kernel at <code>0xC0000000</code></a></li>
<li><a href="#higher-half-linker-script"><span>9.3.4</span> Higher-half Linker Script</a></li>
<li><a href="#entering-the-higher-half"><span>9.3.5</span> Entering the Higher Half</a></li>
<li><a href="#running-in-the-higher-half"><span>9.3.6</span> Running in the Higher Half</a></li>
</ul></li>
<li><a href="#virtual-memory-through-paging"><span>9.4</span> Virtual Memory Through Paging</a></li>
<li><a href="#further-reading-6"><span>9.5</span> Further Reading</a></li>
</ul></li>
<li><a href="#page-frame-allocation"><span>10</span> Page Frame Allocation</a><ul>
<li><a href="#managing-available-memory"><span>10.1</span> Managing Available Memory</a><ul>
<li><a href="#how-much-memory-is-there"><span>10.1.1</span> How Much Memory is There?</a></li>
<li><a href="#managing-available-memory-1"><span>10.1.2</span> Managing Available Memory</a></li>
</ul></li>
<li><a href="#how-can-we-access-a-page-frame"><span>10.2</span> How Can We Access a Page Frame?</a></li>
<li><a href="#a-kernel-heap"><span>10.3</span> A Kernel Heap</a></li>
<li><a href="#further-reading-7"><span>10.4</span> Further reading</a></li>
</ul></li>
<li><a href="#user-mode"><span>11</span> User Mode</a><ul>
<li><a href="#segments-for-user-mode"><span>11.1</span> Segments for User Mode</a></li>
<li><a href="#setting-up-for-user-mode"><span>11.2</span> Setting Up For User Mode</a></li>
<li><a href="#entering-user-mode"><span>11.3</span> Entering User Mode</a></li>
<li><a href="#using-c-for-user-mode-programs"><span>11.4</span> Using C for User Mode Programs</a><ul>
<li><a href="#a-c-library"><span>11.4.1</span> A C Library</a></li>
</ul></li>
<li><a href="#further-reading-8"><span>11.5</span> Further Reading</a></li>
</ul></li>
<li><a href="#file-systems"><span>12</span> File Systems</a><ul>
<li><a href="#why-a-file-system"><span>12.1</span> Why a File System?</a></li>
<li><a href="#a-simple-read-only-file-system"><span>12.2</span> A Simple Read-Only File System</a></li>
<li><a href="#inodes-and-writable-file-systems"><span>12.3</span> Inodes and Writable File Systems</a></li>
<li><a href="#a-virtual-file-system"><span>12.4</span> A Virtual File System</a></li>
<li><a href="#further-reading-9"><span>12.5</span> Further Reading</a></li>
</ul></li>
<li><a href="#system-calls"><span>13</span> System Calls</a><ul>
<li><a href="#designing-system-calls"><span>13.1</span> Designing System Calls</a></li>
<li><a href="#implementing-system-calls"><span>13.2</span> Implementing System Calls</a></li>
<li><a href="#further-reading-10"><span>13.3</span> Further Reading</a></li>
</ul></li>
<li><a href="#multitasking"><span>14</span> Multitasking</a><ul>
<li><a href="#creating-new-processes"><span>14.1</span> Creating New Processes</a></li>
<li><a href="#cooperative-scheduling-with-yielding"><span>14.2</span> Cooperative Scheduling with Yielding</a></li>
<li><a href="#preemptive-scheduling-with-interrupts"><span>14.3</span> Preemptive Scheduling with Interrupts</a><ul>
<li><a href="#programmable-interval-timer"><span>14.3.1</span> Programmable Interval Timer</a></li>
<li><a href="#separate-kernel-stacks-for-processes"><span>14.3.2</span> Separate Kernel Stacks for Processes</a></li>
<li><a href="#difficulties-with-preemptive-scheduling"><span>14.3.3</span> Difficulties with Preemptive Scheduling</a></li>
</ul></li>
<li><a href="#further-reading-11"><span>14.4</span> Further Reading</a></li>
</ul></li>
</ul>
</div>
<h2 id="introduction"> Introduction</h2>
<p>This text is a practical guide to writing your own x86 operating system. It is designed to give enough help with the technical details while at the same time not reveal too much with samples and code excerpts. We’ve tried to collect parts of the vast (and often excellent) expanse of material and tutorials available, on the web and otherwise, and add our own insights into the problems we encountered and struggled with.</p>
<p>This book is not about the theory behind operating systems, or how any specific operating system (OS) works. For OS theory we recommend the book <em>Modern Operating Systems</em> by Andrew Tanenbaum <span>[1]</span>. Lists and details on current operating systems are available on the Internet.</p>
<p>The starting chapters are quite detailed and explicit, to quickly get you into coding. Later chapters give more of an outline of what is needed, as more and more of the implementation and design becomes up to the reader, who should now be more familiar with the world of kernel development. At the end of some chapters there are links for further reading, which might be interesting and give a deeper understanding of the topics covered.</p>
<p>In <a href="#first-steps">chapter 2</a> and <a href="#getting-to-c">3</a> we set up our development environment and boot up our OS kernel in a virtual machine, eventually starting to write code in C. We continue in <a href="#output">chapter 4</a> with writing to the screen and the serial port, and then we dive into segmentation in <a href="#segmentation">chapter 5</a> and interrupts and input in <a href="#interrupts-and-input">chapter 6</a>.</p>
<p>After this we have a quite functional but bare-bones OS kernel. In <a href="#the-road-to-user-mode">chapter 7</a> we start the road to user mode applications, with virtual memory through paging (<a href="#a-short-introduction-to-virtual-memory">chapter 8</a> and <a href="#paging">9</a>), memory allocation (<a href="#page-frame-allocation">chapter 10</a>), and finally running a user application in <a href="#user-mode">chapter 11</a>.</p>
<p>In the last three chapters we discuss the more advanced topics of file systems (<a href="#file-systems">chapter 12</a>), system calls (<a href="#system-calls">chapter 13</a>), and multitasking (<a href="#multitasking">chapter 14</a>).</p>

<p>The OS kernel and this book were produced as part of an advanced individual course at the Royal Institute of Technology <span>[2]</span>, Stockholm. The authors had previously taken courses in OS theory, but had only minor practical experience with OS kernel development. In order to get more insight and a deeper understanding of how the theory from the previous OS courses works out in practice, the authors decided to create a new course, which focused on the development of a small OS. Another goal of the course was writing a thorough tutorial on how to develop a small OS basically from scratch, and this short book is the result.</p>
<p>The x86 architecture is, and has been for a long time, one of the most common hardware architectures. It was not a difficult choice to use the x86 architecture as the target of the OS, with its large community, extensive reference material and mature emulators. The documentation and information surrounding the details of the hardware we had to work with was not always easy to find or understand, despite (or perhaps due to) the age of the architecture.</p>
<p>The OS was developed in about six weeks of full-time work. The implementation was done in many small steps, and after each step the OS was tested manually. By developing in this incremental and iterative way, it was often easier to find any bugs that were introduced, since only a small part of the code had changed since the last known good state of the code. We encourage the reader to work in a similar way.</p>
<p>During the six weeks of development, almost every single line of code was written by the authors together (this way of working is also called <em>pair-programming</em>). It is our belief that we managed to avoid a lot of bugs due to this style of development, but this is hard to prove scientifically.</p>
<h2 id="the-reader"> The Reader</h2>
<p>The reader of this book should be comfortable with UNIX/Linux, systems programming, the C language and computer systems in general (such as hexadecimal notation <span>[3]</span>). This book could be a way to get started learning those things, but it will be more difficult, and developing an operating system is already challenging on its own. Search engines and other tutorials are often helpful if you get stuck.</p>
<h2 id="credits-thanks-and-acknowledgements"> Credits, Thanks and Acknowledgements</h2>
<p>We’d like to thank the OSDev community <span>[4]</span> for their great wiki and helpful members, and James Malloy for his eminent kernel development tutorial <span>[5]</span>. We’d also like to thank our supervisor Torbjörn Granlund for his insightful questions and interesting discussions.</p>
<p>Most of the CSS formatting of the book is based on the work by Scott Chacon for the book Pro Git, <a href="http://progit.org/">http://progit.org/</a>.</p>
<h2 id="contributors"> Contributors</h2>
<p>We are very grateful for the patches that people send us. The following users have all contributed to this book:</p>
<ul>
<li><a href="https://github.com/alexschneider">alexschneider</a></li>
<li><a href="https://github.com/Avidanborisov">Avidanborisov</a></li>
<li><a href="https://github.com/nirs">nirs</a></li>
<li><a href="https://github.com/kedarmhaswade">kedarmhaswade</a></li>
<li><a href="https://github.com/vamanea">vamanea</a></li>
<li><a href="https://github.com/ansjob">ansjob</a></li>
</ul>
<h2 id="changes-and-corrections"> Changes and Corrections</h2>
<p>This book is hosted on Github - if you have any suggestions, comments or corrections, just fork the book, write your changes, and send us a pull request. We’ll happily incorporate anything that makes this book better.</p>
<h2 id="issues-and-where-to-get-help"> Issues and where to get help</h2>
<p>If you run into problems while reading the book, please check the issues on Github for help: <a href="https://github.com/littleosbook/littleosbook/issues">https://github.com/littleosbook/littleosbook/issues</a>.</p>
<h2 id="license"> License</h2>
<p>All content is under the Creative Commons Attribution Non Commercial Share Alike 3.0 license, <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/us/">http://creativecommons.org/licenses/by-nc-sa/3.0/us/</a>. The code samples are in the public domain - use them however you want. References to this book are always received with warmth.</p>
<h2 id="first-steps"> First Steps</h2>
<p>Developing an operating system (OS) is no easy task, and the question “How do I even begin to solve this problem?” is likely to come up several times during the course of the project for different problems. This chapter will help you set up your development environment and booting a very small (and primitive) operating system.</p>

<h3 id="quick-setup"> Quick Setup</h3>
<p>We (the authors) have used Ubuntu <span>[6]</span> as the operating system for doing OS development, running it both physically and virtually (using the virtual machine VirtualBox <span>[7]</span>). A quick way to get everything up and running is to use the same setup as we did, since we know that these tools work with the samples provided in this book.</p>
<p>Once Ubuntu is installed, either physical or virtual, the following packages should be installed using <code>apt-get</code>:</p>
<pre><code>    <span>sudo</span> apt-get install build-essential nasm genisoimage bochs bochs-sdl</code></pre>
<h3 id="programming-languages"> Programming Languages</h3>
<p>The operating system will be developed using the C programming language <span>[8]</span><span>[9]</span>, using GCC <span>[10]</span>. We use C because developing an OS requires a very precise control of the generated code and direct access to memory. Other languages that provide the same features can also be used, but this book will only cover C.</p>
<p>The code will make use of one type attribute that is specific for GCC:</p>
<pre><code>    __attribute__((packed))</code></pre>
<p>This attribute allows us to ensure that the compiler uses a memory layout for a <code>struct</code> exactly as we define it in the code. This is explained in more detail in the next chapter.</p>
<p>Due to this attribute, the example code might be hard to compile using a C compiler other than GCC.</p>
<p>For writing assembly code, we have chosen NASM <span>[11]</span> as the assembler, since we prefer NASM’s syntax over GNU Assembler.</p>
<p>Bash <span>[12]</span> will be used as the scripting language throughout the book.</p>
<h3 id="host-operating-system"> Host Operating System</h3>
<p>All the code examples assumes that the code is being compiled on a UNIX like operating system. All code examples have been successfully compiled using Ubuntu <span>[6]</span> versions 11.04 and 11.10.</p>
<h3 id="build-system"> Build System</h3>
<p>Make <span>[13]</span> has been used when constructing the Makefile examples.</p>
<h3 id="virtual-machine"> Virtual Machine</h3>
<p>When developing an OS it is very convenient to be able to run your code in a <em>virtual machine</em> instead of on a physical computer, since starting your OS in a virtual machine is much faster than getting your OS onto a physical medium and then running it on a physical machine. Bochs <span>[14]</span> is an emulator for the x86 (IA-32) platform which is well suited for OS development due to its debugging features. Other popular choices are QEMU <span>[15]</span> and VirtualBox <span>[7]</span>. This book uses Bochs.</p>
<p>By using a virtual machine we cannot ensure that our OS works on real, physical hardware. The environment simulated by the virtual machine is designed to be very similar to their physical counterparts, and the OS can be tested on one by just copying the executable to a CD and finding a suitable machine.</p>
<h2 id="booting"> Booting</h2>
<p>Booting an operating system consists of transferring control along a chain of small programs, each one more “powerful” than the previous one, where the operating system is the last “program”. See the following figure for an example of the boot process:</p>
<div>
<p><img src="https://littleosbook.github.io/images/boot_chain.png" alt="An example of the boot process. Each box is a program."></p><p>An example of the boot process. Each box is a program.</p>
</div>
<h3 id="bios"> BIOS</h3>
<p>When the PC is turned on, the computer will start a small program that adheres to the <em>Basic Input Output System</em> (BIOS) <span>[16]</span> standard. This program is usually stored on a read only memory chip on the motherboard of the PC. The original role of the BIOS program was to export some library functions for printing to the screen, reading keyboard input etc. Modern operating systems do not use the BIOS’ functions, they use drivers that interact directly with the hardware, bypassing the BIOS. Today, BIOS mainly runs some early diagnostics (power-on-self-test) and then transfers control to the bootloader.</p>
<h3 id="the-bootloader"> The Bootloader</h3>
<p>The BIOS program will transfer control of the PC to a program called a <em>bootloader</em>. The bootloader’s task is to transfer control to us, the operating system developers, and our code. However, due to some restrictions<a href="#fn1" id="fnref1"><sup>1</sup></a> of the hardware and because of backward compatibility, the bootloader is often split into two parts: the first part of the bootloader will transfer control to the second part, which finally gives control of the PC to the operating system.</p>
<p>Writing a bootloader involves writing a lot of low-level code that interacts with the BIOS. Therefore, an existing bootloader will be used: the GNU GRand Unified Bootloader (GRUB) <span>[17]</span>.</p>
<p>Using GRUB, the operating system can be built as an ordinary ELF <span>[18]</span> executable, which will be loaded by GRUB into the correct memory location. The compilation of the kernel requires that the code is laid out in memory in a specific way (how to compile the kernel will be discussed later in this chapter).</p>
<h3 id="the-operating-system"> The Operating System</h3>
<p>GRUB will transfer control to the operating system by jumping to a position in memory. Before the jump, GRUB will look for a magic number to ensure that it is actually jumping to an OS and not some random code. This magic number is part of the <em>multiboot specification</em> <span>[19]</span> which GRUB adheres to. Once GRUB has made the jump, the OS has full control of the computer.</p>
<h2 id="hello-cafebabe"> Hello Cafebabe</h2>
<p>This section will describe how to implement of the smallest possible OS that can be used together with GRUB. The only thing the OS will do is write <code>0xCAFEBABE</code> to the <code>eax</code> register (most people would probably not even call this an OS).</p>
<h3 id="compiling-the-operating-system"> Compiling the Operating System</h3>
<p>This part of the OS has to be written in assembly code, since C requires a stack, which isn’t available (the chapter <a href="#getting-to-c">“Getting to C”</a> describes how to set one up). Save the following code in a file called <code>loader.s</code>:</p>
<pre><code>    <span>global</span> loader                   <span>; the entry symbol for ELF</span>

    MAGIC_NUMBER <span>equ</span> <span>0x1BADB002</span>     <span>; define the magic number constant</span>
    FLAGS        <span>equ</span><span> 0x0            </span><span>; multiboot flags</span>
    CHECKSUM     <span>equ</span> -MAGIC_NUMBER  <span>; calculate the checksum</span>
                                    <span>; (magic number + checksum + flags should equal 0)</span>

    <span>section</span> .text:                  <span>; start of the text (code) section</span>
    <span>align</span> <span>4</span>                         <span>; the code must be 4 byte aligned</span>
        <span>dd</span> MAGIC_NUMBER             <span>; write the magic number to the machine code,</span>
        <span>dd</span> FLAGS                    <span>; the flags,</span>
        <span>dd</span> CHECKSUM                 <span>; and the checksum</span>

<span>    loader:</span>                         <span>; the loader label (defined as entry point in linker script)</span>
        <span>mov</span> <span>eax</span>, <span>0xCAFEBABE</span>         <span>; place the number 0xCAFEBABE in the register eax</span>
<span>    .loop:</span>
        <span>jmp</span> .<span>loop</span>                   <span>; loop forever</span></code></pre>
<p>The only thing this OS will do is write the very specific number <code>0xCAFEBABE</code> to the <code>eax</code> register. It is <em>very</em> unlikely that the number <code>0xCAFEBABE</code> would be in the <code>eax</code> register if the OS did <em>not</em> put it there.</p>
<p>The file <code>loader.s</code> can be compiled into a 32 bits ELF <span>[18]</span> object file with the following command:</p>
<pre><code>    <span>nasm</span> -f elf32 loader.s</code></pre>
<h3 id="linking-the-kernel"> Linking the Kernel</h3>
<p>The code must now be linked to produce an executable file, which requires some extra thought compared to when linking most programs. We want GRUB to load the kernel at a memory address larger than or equal to <code>0x00100000</code> (1 megabyte (MB)), because addresses lower than 1 MB are used by GRUB itself, BIOS and memory-mapped I/O. Therefore, the following linker script is needed (written for GNU LD <span>[20]</span>):</p>
<pre><code>ENTRY(loader)                /* the name of the entry label */

SECTIONS {
    . = 0x00100000;          /* the code should be loaded at 1 MB */

    .text ALIGN (0x1000) :   /* align at 4 KB */
    {
        *(.text)             /* all text sections from all files */
    }

    .rodata ALIGN (0x1000) : /* align at 4 KB */
    {
        *(.rodata*)          /* all read-only data sections from all files */
    }

    .data ALIGN (0x1000) :   /* align at 4 KB */
    {
        *(.data)             /* all data sections from all files */
    }

    .bss ALIGN (0x1000) :    /* align at 4 KB */
    {
        *(COMMON)            /* all COMMON sections from all files */
        *(.bss)              /* all bss sections from all files */
    }
}</code></pre>
<p>Save the linker script into a file called <code>link.ld</code>. The executable can now be linked with the following command:</p>
<pre><code>    <span>ld</span> -T link.ld -melf_i386 loader.o -o kernel.elf</code></pre>
<p>The final executable will be called <code>kernel.elf</code>.</p>
<h3 id="obtaining-grub"> Obtaining GRUB</h3>
<p>The GRUB version we will use is GRUB Legacy, since the OS ISO image can then be generated on systems using both GRUB Legacy and GRUB 2. More specifically, the GRUB Legacy <code>stage2_eltorito</code> bootloader will be used. This file can be built from GRUB 0.97 by downloading the source from <a href="ftp://alpha.gnu.org/gnu/grub/grub-0.97.tar.gz">ftp://alpha.gnu.org/gnu/grub/grub-0.97.tar.gz</a>. However, the <code>configure</code> script doesn’t work well with Ubuntu <span>[21]</span>, so the binary file can be downloaded from <a href="http://littleosbook.github.com/files/stage2_eltorito">http://littleosbook.github.com/files/stage2_eltorito</a>. Copy the file <code>stage2_eltorito</code> to the folder that already contains <code>loader.s</code> and <code>link.ld</code>.</p>
<h3 id="building-an-iso-image"> Building an ISO Image</h3>
<p>The executable must be placed on a media that can be loaded by a virtual or physical machine. In this book we will use ISO <span>[22]</span> image files as the media, but one can also use floppy images, depending on what the virtual or physical machine supports.</p>
<p>We will create the kernel ISO image with the program <code>genisoimage</code>. A folder must first be created that contains the files that will be on the ISO image. The following commands create the folder and copy the files to their correct places:</p>
<pre><code>    <span>mkdir</span> -p iso/boot/grub              <span># create the folder structure</span>
    <span>cp</span> stage2_eltorito iso/boot/grub/   <span># copy the bootloader</span>
    <span>cp</span> kernel.elf iso/boot/             <span># copy the kernel</span></code></pre>
<p>A configuration file <code>menu.lst</code> for GRUB must be created. This file tells GRUB where the kernel is located and configures some options:</p>
<pre><code>    default=0
    timeout=0

    title os
    kernel /boot/kernel.elf</code></pre>
<p>Place the file <code>menu.lst</code> in the folder <code>iso/boot/grub/</code>. The contents of the <code>iso</code> folder should now look like the following figure:</p>
<pre><code>    iso
    |-- boot
      |-- grub
      | |-- menu.lst
      | |-- stage2_eltorito
      |-- kernel.elf</code></pre>
<p>The ISO image can then be generated with the following command:</p>
<pre><code>    genisoimage -R                              \
                -b boot/grub/stage2_eltorito    \
                -no-emul-boot                   \
                -boot-load-size 4               \
                -A os                           \
                -input-charset utf8             \
                -quiet                          \
                -boot-info-table                \
                -o os.iso                       \
                iso</code></pre>
<p>For more information about the flags used in the command, see the manual for <code>genisoimage</code>.</p>
<p>The ISO image <code>os.iso</code> now contains the kernel executable, the GRUB bootloader and the configuration file.</p>
<h3 id="running-bochs"> Running Bochs</h3>
<p>Now we can run the OS in the Bochs emulator using the <code>os.iso</code> ISO image. Bochs needs a configuration file to start and an example of a simple configuration file is given below:</p>
<pre><code>    megs:            32
    display_library: sdl
    romimage:        file=/usr/share/bochs/BIOS-bochs-latest
    vgaromimage:     file=/usr/share/bochs/VGABIOS-lgpl-latest
    ata0-master:     type=cdrom, path=os.iso, status=inserted
    boot:            cdrom
    log:             bochslog.txt
    clock:           sync=realtime, time0=local
    cpu:             count=1, ips=1000000</code></pre>
<p>You might need to change the path to <code>romimage</code> and <code>vgaromimage</code> depending on how you installed Bochs. More information about the Bochs config file can be found at Boch’s website <span>[23]</span>.</p>
<p>If you saved the configuration in a file named <code>bochsrc.txt</code> then you can run Bochs with the following command:</p>
<pre><code>    bochs -f bochsrc.txt -q</code></pre>
<p>The flag <code>-f</code> tells Bochs to use the given configuration file and the flag <code>-q</code> tells Bochs to skip the interactive start menu. You should now see Bochs starting and displaying a console with some information from GRUB on it.</p>
<p>After quitting Bochs, display the log produced by Boch:</p>
<pre><code>    cat bochslog.txt</code></pre>
<p>You should now see the contents of the registers of the CPU simulated by Bochs somewhere in the output. If you find <code>RAX=00000000CAFEBABE</code> or <code>EAX=CAFEBABE</code> (depending on if you are running Bochs with or without 64 bit support) in the output then your OS has successfully booted!</p>
<h2 id="further-reading"> Further Reading</h2>
<ul>
<li>Gustavo Duertes has written an in-depth article about what actually happens when a x86 computer boots up, <a href="http://duartes.org/gustavo/blog/post/how-computers-boot-up">http://duartes.org/gustavo/blog/post/how-computers-boot-up</a></li>
<li>Gustavo continues to describe what the kernel does in the very early stages at <a href="http://duartes.org/gustavo/blog/post/kernel-boot-process">http://duartes.org/gustavo/blog/post/kernel-boot-process</a></li>
<li>The OSDev wiki also contains a nice article about booting an x86 computer: <a href="http://wiki.osdev.org/Boot_Sequence">http://wiki.osdev.org/Boot_Sequence</a></li>
</ul>
<h2 id="getting-to-c"> Getting to C</h2>
<p>This chapter will show you how to use C instead of assembly code as the programming language for the OS. Assembly is very good for interacting with the CPU and enables maximum control over every aspect of the code. However, at least for the authors, C is a much more convenient language to use. Therefore, we would like to use C as much as possible and use assembly code only where it make sense.</p>
<h2 id="setting-up-a-stack"> Setting Up a Stack</h2>
<p>One prerequisite for using C is a stack, since all non-trivial C programs use a stack. Setting up a stack is not harder than to make the <code>esp</code> register point to the end of an area of free memory (remember that the stack grows towards lower addresses on the x86) that is correctly aligned (alignment on 4 bytes is recommended from a performance perspective).</p>
<p>We could point <code>esp</code> to a random area in memory since, so far, the only thing in the memory is GRUB, BIOS, the OS kernel and some memory-mapped I/O. This is not a good idea - we don’t know how much memory is available or if the area <code>esp</code> would point to is used by something else. A better idea is to reserve a piece of uninitialized memory in the <code>bss</code> section in the ELF file of the kernel. It is better to use the <code>bss</code> section instead of the <code>data</code> section to reduce the size of the OS executable. Since GRUB understands ELF, GRUB will allocate any memory reserved in the <code>bss</code> section when loading the OS.</p>
<p>The NASM pseudo-instruction <code>resb</code> <span>[24]</span> can be used to declare uninitialized data:</p>
<pre><code>    KERNEL_STACK_SIZE <span>equ</span> <span>4096</span>                  <span>; size of stack in bytes</span>

    <span>section</span> .bss
    <span>align</span> <span>4</span>                                     <span>; align at 4 bytes</span>
<span>    kernel_stack:</span>                               <span>; label points to beginning of memory</span>
        <span>resb</span> KERNEL_STACK_SIZE                  <span>; reserve stack for the kernel</span></code></pre>
<p>There is no need to worry about the use of uninitialized memory for the stack, since it is not possible to read a stack location that has not been written (without manual pointer fiddling). A (correct) program can not pop an element from the stack without having pushed an element onto the stack first. Therefore, the memory locations of the stack will always be written to before they are being read.</p>
<p>The stack pointer is then set up by pointing <code>esp</code> to the end of the <code>kernel_stack</code> memory:</p>
<pre><code>    <span>mov</span> <span>esp</span>, kernel_stack + KERNEL_STACK_SIZE   <span>; point esp to the start of the</span>
                                                <span>; stack (end of memory area)</span></code></pre>
<h2 id="calling-c-code-from-assembly"> Calling C Code From Assembly</h2>
<p>The next step is to call a C function from assembly code. There are many different conventions for how to call C code from assembly code <span>[25]</span>. This book uses the <em>cdecl</em> calling convention, since that is the one used by GCC. The cdecl calling convention states that arguments to a function should be passed via the stack (on x86). The arguments of the function should be pushed on the stack in a right-to-left order, that is, you push the rightmost argument first. The return value of the function is placed in the <code>eax</code> register. The following code shows an example:</p>
<pre><code>    <span>/* The C function */</span>
    <span>int</span> sum_of_three(<span>int</span> arg1, <span>int</span> arg2, <span>int</span> arg3)
    {
        <span>return</span> arg1 + arg2 + arg3;
    }</code></pre>
<pre><code>    <span>; The assembly code</span>
    external sum_of_three   <span>; the function sum_of_three is defined elsewhere</span>

    <span>push</span> <span>dword</span> <span>3</span>            <span>; arg3</span>
    <span>push</span> <span>dword</span> <span>2</span>            <span>; arg2</span>
    <span>push</span> <span>dword</span> <span>1</span>            <span>; arg1</span>
    <span>call</span> sum_of_three       <span>; call the function, the result will be in eax</span></code></pre>
<h3 id="packing-structs"> Packing Structs</h3>
<p>In the rest of this book, you will often come across “configuration bytes” that are a collection of bits in a very specific order. Below follows an example with 32 bits:</p>
<pre><code>Bit:     | 31     24 | 23          8 | 7     0 |
Content: | index     | address       | config  |</code></pre>
<p>Instead of using an unsigned integer, <code>unsigned int</code>, for handling such configurations, it is much more convenient to use “packed structures”:</p>
<pre><code>    <span>struct</span> example {
        <span>unsigned</span> <span>char</span> config;   <span>/* bit 0 - 7   */</span>
        <span>unsigned</span> <span>short</span> address; <span>/* bit 8 - 23  */</span>
        <span>unsigned</span> <span>char</span> index;    <span>/* bit 24 - 31 */</span>
    };</code></pre>
<p>When using the <code>struct</code> in the previous example there is no guarantee that the size of the <code>struct</code> will be exactly 32 bits - the compiler can add some padding between elements for various reasons, for example to speed up element access or due to requirements set by the hardware and/or compiler. When using a <code>struct</code> to represent configuration bytes, it is very important that the compiler does <em>not</em> add any padding, because the <code>struct</code> will eventually be treated as a 32 bit unsigned integer by the hardware. The attribute <code>packed</code> can be used to force GCC to <em>not</em> add any padding:</p>
<pre><code>    <span>struct</span> example {
        <span>unsigned</span> <span>char</span> config;   <span>/* bit 0 - 7   */</span>
        <span>unsigned</span> <span>short</span> address; <span>/* bit 8 - 23  */</span>
        <span>unsigned</span> <span>char</span> index;    <span>/* bit 24 - 31 */</span>
    } __attribute__((packed));</code></pre>
<p>Note that <code>__attribute__((packed))</code> is not part of the C standard - it might not work with all C compilers.</p>
<h2 id="compiling-c-code"> Compiling C Code</h2>
<p>When compiling the C code for the OS, a lot of flags to GCC need to be used. This is because the C code should <em>not</em> assume the presence of a standard library, since there is no standard library available for our OS. For more information about the flags, see the GCC manual.</p>
<p>The flags used for compiling the C code are:</p>
<pre><code>    -m32 -nostdlib -nostdinc -fno-builtin -fno-stack-protector -nostartfiles
    -nodefaultlibs</code></pre>
<p>As always when writing C programs we recommend turning on all warnings and treat warnings as errors:</p>
<pre><code>    -Wall -Wextra -Werror</code></pre>
<p>You can now create a function <code>kmain</code> in a file called <code>kmain.c</code> that you call from <code>loader.s</code>. At this point, <code>kmain</code> probably won’t need any arguments (but in later chapters it will).</p>

<p>Now is also probably a good time to set up some build tools to make it easier to compile and test-run the OS. We recommend using <code>make</code> <span>[13]</span>, but there are plenty of other build systems available. A simple Makefile for the OS could look like the following example:</p>
<pre><code>    <span>OBJECTS </span><span>=</span><span> loader.o kmain.o</span>
    <span>CC </span><span>=</span><span> gcc</span>
    <span>CFLAGS </span><span>=</span><span> -m32 -nostdlib -nostdinc -fno-builtin -fno-stack-protector </span><span>\</span>
             <span>-</span><span>nostartfiles -nodefaultlibs -Wall -Wextra -Werror -c</span>
    <span>LDFLAGS </span><span>=</span><span> -T link.ld -melf_i386</span>
    <span>AS </span><span>=</span><span> nasm</span>
    <span>ASFLAGS </span><span>=</span><span> -f elf</span>

    all: kernel.elf

    kernel.elf: <span>$(</span><span>OBJECTS</span><span>)</span>
        ld <span>$(</span><span>LDFLAGS</span><span>)</span> <span>$(</span><span>OBJECTS</span><span>)</span> -o kernel.elf

    os.iso: kernel.elf
        cp kernel.elf iso/boot/kernel.elf
        genisoimage -R                              \
                    <span>-</span><span>b boot/grub/stage2_eltorito    </span><span>\</span>
                    <span>-</span><span>no-emul-boot                   </span><span>\</span>
                    <span>-</span><span>boot-load-size 4               </span><span>\</span>
                    <span>-</span><span>A os                           </span><span>\</span>
                    <span>-</span><span>input-charset utf8             </span><span>\</span>
                    <span>-</span><span>quiet                          </span><span>\</span>
                    <span>-</span><span>boot-info-table                </span><span>\</span>
                    <span>-</span><span>o os.iso                       </span><span>\</span>
                    iso

    run: os.iso
        bochs -f bochsrc.txt -q

    %.o: %.c
        <span>$(</span><span>CC</span><span>)</span> <span>$(</span><span>CFLAGS</span><span>)</span>  <span>$&lt;</span> -o <span>$@</span>

    %.o: %.s
        <span>$(</span><span>AS</span><span>)</span> <span>$(</span><span>ASFLAGS</span><span>)</span> <span>$&lt;</span> -o <span>$@</span>

    clean:
        rm -rf *.o kernel.elf os.iso</code></pre>
<p>The contents of your working directory should now look like the following figure:</p>
<pre><code>    .
    |-- bochsrc.txt
    |-- iso
    |   |-- boot
    |     |-- grub
    |       |-- menu.lst
    |       |-- stage2_eltorito
    |-- kmain.c
    |-- loader.s
    |-- Makefile</code></pre>
<p>You should now be able to start the OS with the simple command <code>make run</code>, which will compile the kernel and boot it up in Bochs (as defined in the Makefile above).</p>
<h2 id="further-reading-1"> Further Reading</h2>
<ul>
<li>Kernigan &amp; Richie’s book, <em>The C Programming Language, Second Edition</em>, <span>[8]</span> is great for learning about all the aspects of C.</li>
</ul>
<h2 id="output"> Output</h2>
<p>This chapter will present how to display text on the console as well as writing data to the serial port. Furthermore, we will create our first <em>driver</em>, that is, code that acts as a layer between the kernel and the hardware, providing a higher abstraction than communicating directly with the hardware. The first part of this chapter is about creating a driver for the <em>framebuffer</em> <span>[26]</span> to be able to display text on the console. The second part shows how to create a driver for the serial port. Bochs can store output from the serial port in a file, effectively creating a logging mechanism for the operating system.</p>
<h2 id="interacting-with-the-hardware"> Interacting with the Hardware</h2>
<p>There are usually two different ways to interact with the hardware, <em>memory-mapped I/O</em> and <em>I/O ports</em>.</p>
<p>If the hardware uses memory-mapped I/O then you can write to a specific memory address and the hardware will be updated with the new data. One example of this is the framebuffer, which will be discussed in more detail later. For example, if you write the value <code>0x410F</code> to address <code>0x000B8000</code>, you will see the letter A in white color on a black background (see the section on <a href="#the-framebuffer">the framebuffer</a> for more details).</p>
<p>If the hardware uses I/O ports then the assembly code instructions <code>out</code> and <code>in</code> must be used to communicate with the hardware. The instruction <code>out</code> takes two parameters: the address of the I/O port and the data to send. The instruction <code>in</code> takes a single parameter, the address of the I/O port, and returns data from the hardware. One can think of I/O ports as communicating with hardware the same way as you communicate with a server using sockets. The cursor (the blinking rectangle) of the framebuffer is one example of hardware controlled via I/O ports on a PC.</p>
<h2 id="the-framebuffer"> The Framebuffer</h2>
<p>The framebuffer is a hardware device that is capable of displaying a buffer of memory on the screen <span>[26]</span>. The framebuffer has 80 columns and 25 rows, and the row and column indices start at 0 (so rows are labelled 0 - 24).</p>
<h3 id="writing-text"> Writing Text</h3>
<p>Writing text to the console via the framebuffer is done with memory-mapped I/O. The starting address of the memory-mapped I/O for the framebuffer is <code>0x000B8000</code> <span>[27]</span>. The memory is divided into 16 bit cells, where the 16 bits determine both the character, the foreground color and the background color. The highest eight bits is the ASCII <span>[28]</span> value of the character, bit 7 - 4 the background and bit 3 - 0 the foreground, as can be seen in the following figure:</p>
<pre><code>Bit:     | 15 14 13 12 11 10 9 8 | 7 6 5 4 | 3 2 1 0 |
Content: | ASCII                 | FG      | BG      |</code></pre>
<p>The available colors are shown in the following table:</p>
<table>
<thead>
<tr>
<th>Color</th>
<th>Value</th>
<th>Color</th>
<th>Value</th>
<th>Color</th>
<th>Value</th>
<th>Color</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Black</td>
<td>0</td>
<td>Red</td>
<td>4</td>
<td>Dark grey</td>
<td>8</td>
<td>Light red</td>
<td>12</td>
</tr>
<tr>
<td>Blue</td>
<td>1</td>
<td>Magenta</td>
<td>5</td>
<td>Light blue</td>
<td>9</td>
<td>Light magenta</td>
<td>13</td>
</tr>
<tr>
<td>Green</td>
<td>2</td>
<td>Brown</td>
<td>6</td>
<td>Light green</td>
<td>10</td>
<td>Light brown</td>
<td>14</td>
</tr>
<tr>
<td>Cyan</td>
<td>3</td>
<td>Light grey</td>
<td>7</td>
<td>Light cyan</td>
<td>11</td>
<td>White</td>
<td>15</td>
</tr>
</tbody>
</table>
<p>The first cell corresponds to row zero, column zero on the console. Using an ASCII table, one can see that A corresponds to 65 or <code>0x41</code>. Therefore, to write the character A with a green foreground (2) and dark grey background (8) at place (0,0), the following assembly code instruction is used:</p>
<pre><code>    <span>mov</span> [<span>0x000B8000</span>]<span>, 0x4128</span></code></pre>
<p>The second cell then corresponds to row zero, column one and its address is therefore:</p>
<pre><code>    0x000B8000 + 16 = 0x000B8010</code></pre>
<p>Writing to the framebuffer can also be done in C by treating the address <code>0x000B8000</code> as a char pointer, <code>char *fb = (char *) 0x000B8000</code>. Then, writing A at place (0,0) with green foreground and dark grey background becomes:</p>
<pre><code>    fb[<span>0</span>] = <span>'A'</span><span>;</span>
    fb[<span>1</span>] = <span>0x28</span><span>;</span></code></pre>
<p>The following code shows how this can be wrapped into a function:</p>
<pre><code>    <span>/** fb_write_cell:</span>
<span>     *  Writes a character with the given foreground and background to position i</span>
<span>     *  in the framebuffer.</span>
<span>     *</span>
<span>     *  </span><span>@param</span><span> </span><span>i</span><span>  The location in the framebuffer</span>
<span>     *  </span><span>@param</span><span> </span><span>c</span><span>  The character</span>
<span>     *  </span><span>@param</span><span> </span><span>fg</span><span> The foreground color</span>
<span>     *  </span><span>@param</span><span> </span><span>bg</span><span> The background color</span>
<span>     */</span>
    <span>void</span> fb_write_cell(<span>unsigned</span> <span>int</span> i, <span>char</span> c, <span>unsigned</span> <span>char</span> fg, <span>unsigned</span> <span>char</span> bg)
    {
        fb[i] = c;
        fb[i + <span>1</span>] = ((fg &amp; <span>0x0F</span>) &lt;&lt; <span>4</span>) | (bg &amp; <span>0x0F</span>)
    }</code></pre>
<p>The function can then be used as follows:</p>
<pre><code>    <span>#define FB_GREEN     2</span>
    <span>#define FB_DARK_GREY 8</span>

    fb_write_cell(<span>0</span>, 'A', FB_GREEN, FB_DARK_GREY);</code></pre>
<h3 id="moving-the-cursor"> Moving the Cursor</h3>
<p>Moving the cursor of the framebuffer is done via two different I/O ports. The cursor’s position is determined with a 16 bits integer: 0 means row zero, column zero; 1 means row zero, column one; 80 means row one, column zero and so on. Since the position is 16 bits large, and the <code>out</code> assembly code instruction argument is 8 bits, the position must be sent in two turns, first 8 bits then the next 8 bits. The framebuffer has two I/O ports, one for accepting the data, and one for describing the data being received. Port <code>0x3D4</code> <span>[29]</span> is the port that describes the data and port <code>0x3D5</code> <span>[29]</span> is for the data itself.</p>
<p>To set the cursor at row one, column zero (position <code>80 = 0x0050</code>), one would use the following assembly code instructions:</p>
<pre><code>    <span>out</span> <span>0x3D4</span>, <span>14</span>      <span>; 14 tells the framebuffer to expect the highest 8 bits of the position</span>
    <span>out</span> <span>0x3D5, 0x00    </span><span>; sending the highest 8 bits of 0x0050</span>
    <span>out</span> <span>0x3D4</span>, <span>15</span>      <span>; 15 tells the framebuffer to expect the lowest 8 bits of the position</span>
    <span>out</span> <span>0x3D5, 0x50    </span><span>; sending the lowest 8 bits of 0x0050</span></code></pre>
<p>The <code>out</code> assembly code instruction can’t be executed directly in C. Therefore it is a good idea to wrap <code>out</code> in a function in assembly code which can be accessed from C via the cdecl calling standard <span>[25]</span>:</p>
<pre><code>    <span>global</span> outb             <span>; make the label outb visible outside this file</span>

    <span>; outb - send a byte to an I/O port</span>
    <span>; stack: [esp + 8] the data byte</span>
    <span>;        [esp + 4] the I/O port</span>
    <span>;        [esp    ] return address</span>
<span>    outb:</span>
        <span>mov</span> <span>al</span>, [<span>esp</span> + <span>8</span>]    <span>; move the data to be sent into the al register</span>
        <span>mov</span> <span>dx</span>, [<span>esp</span> + <span>4</span>]    <span>; move the address of the I/O port into the dx register</span>
        <span>out</span> <span>dx</span>, <span>al</span>           <span>; send the data to the I/O port</span>
        <span>ret</span>                  <span>; return to the calling function</span></code></pre>
<p>By storing this function in a file called <code>io.s</code> and also creating a header <code>io.h</code>, the <code>out</code> assembly code instruction can be conveniently accessed from C:</p>
<pre><code>    <span>#ifndef INCLUDE_IO_H</span>
    <span>#define INCLUDE_IO_H</span>

    <span>/** outb:</span>
<span>     *  Sends the given data to the given I/O port. Defined in io.s</span>
<span>     *</span>
<span>     *  </span><span>@param</span><span> </span><span>port</span><span> The I/O port to send the data to</span>
<span>     *  </span><span>@param</span><span> </span><span>data</span><span> The data to send to the I/O port</span>
<span>     */</span>
    <span>void</span> outb(<span>unsigned</span> <span>short</span> port, <span>unsigned</span> <span>char</span> data);

    <span>#endif </span><span>/* INCLUDE_IO_H */</span></code></pre>
<p>Moving the cursor can now be wrapped in a C function:</p>
<pre><code>    <span>#include "io.h"</span>

    <span>/* The I/O ports */</span>
    <span>#define FB_COMMAND_PORT         0x3D4</span>
    <span>#define FB_DATA_PORT            0x3D5</span>

    <span>/* The I/O port commands */</span>
    <span>#define FB_HIGH_BYTE_COMMAND    14</span>
    <span>#define FB_LOW_BYTE_COMMAND     15</span>

    <span>/** fb_move_cursor:</span>
<span>     *  Moves the cursor of the framebuffer to the given position</span>
<span>     *</span>
<span>     *  </span><span>@param</span><span> </span><span>pos</span><span> The new position of the cursor</span>
<span>     */</span>
    <span>void</span> fb_move_cursor(<span>unsigned</span> <span>short</span> pos)
    {
        outb(FB_COMMAND_PORT, FB_HIGH_BYTE_COMMAND);
        outb(FB_DATA_PORT,    ((pos &gt;&gt; <span>8</span>) &amp; <span>0x00FF</span>));
        outb(FB_COMMAND_PORT, FB_LOW_BYTE_COMMAND);
        outb(FB_DATA_PORT,    pos &amp; <span>0x00FF</span>);
    }</code></pre>
<h3 id="the-driver"> The Driver</h3>
<p>The driver should provide an interface that the rest of the code in the OS will use for interacting with the framebuffer. There is no right or wrong in what functionality the interface should provide, but a suggestion is to have a <code>write</code> function with the following declaration:</p>
<pre><code>    <span>int</span> write(<span>char</span> *buf, <span>unsigned</span> <span>int</span> len);</code></pre>
<p>The <code>write</code> function writes the contents of the buffer <code>buf</code> of length <code>len</code> to the screen. The <code>write</code> function should automatically advance the cursor after a character has been written and scroll the screen if necessary.</p>
<h2 id="the-serial-ports"> The Serial Ports</h2>
<p>The serial port <span>[30]</span> is an interface for communicating between hardware devices and although it is available on almost all motherboards, it is seldom exposed to the user in the form of a DE-9 connector nowadays. The serial port is easy to use, and, more importantly, it can be used as a logging utility in Bochs. If a computer has support for a serial port, then it usually has support for multiple serial ports, but we will only make use of one of the ports. This is because we will only use the serial ports for logging. Furthermore, we will only use the serial ports for output, not input. The serial ports are completely controlled via I/O ports.</p>
<h3 id="configuring-the-serial-port"> Configuring the Serial Port</h3>
<p>The first data that need to be sent to the serial port is configuration data. In order for two hardware devices to be able to talk to each other they must agree upon a couple of things. These things include:</p>
<ul>
<li>The speed used for sending data (bit or baud rate)</li>
<li>If any error checking should be used for the data (parity bit, stop bits)</li>
<li>The number of bits that represent a unit of data (data bits)</li>
</ul>
<h3 id="configuring-the-line"> Configuring the Line</h3>
<p>Configuring the line means to configure how data is being sent over the line. The serial port has an I/O port, the <em>line command port</em>, that is used for configuration.</p>
<p>First the speed for sending data will be set. The serial port has an internal clock that runs at 115200 Hz. Setting the speed means sending a divisor to the serial port, for example sending 2 results in a speed of <code>115200 / 2 = 57600</code> Hz.</p>
<p>The divisor is a 16 bit number but we can only send 8 bits at a time. We must therefore send an instruction telling the serial port to first expect the highest 8 bits, then the lowest 8 bits. This is done by sending <code>0x80</code> to the line command port. An example is shown below:</p>
<pre><code>    <span>#include "io.h" </span><span>/* io.h is implement in the section "Moving the cursor" */</span>

    <span>/* The I/O ports */</span>

    <span>/* All the I/O ports are calculated relative to the data port. This is because</span>
<span>     * all serial ports (COM1, COM2, COM3, COM4) have their ports in the same</span>
<span>     * order, but they start at different values.</span>
<span>     */</span>

    <span>#define SERIAL_COM1_BASE                0x3F8      </span><span>/* COM1 base port */</span>

    <span>#define SERIAL_DATA_PORT(base)          (base)</span>
    <span>#define SERIAL_FIFO_COMMAND_PORT(base)  (base + 2)</span>
    <span>#define SERIAL_LINE_COMMAND_PORT(base)  (base + 3)</span>
    <span>#define SERIAL_MODEM_COMMAND_PORT(base) (base + 4)</span>
    <span>#define SERIAL_LINE_STATUS_PORT(base)   (base + 5)</span>

    <span>/* The I/O port commands */</span>

    <span>/* SERIAL_LINE_ENABLE_DLAB:</span>
<span>     * Tells the serial port to expect first the highest 8 bits on the data port,</span>
<span>     * then the lowest 8 bits will follow</span>
<span>     */</span>
    <span>#define SERIAL_LINE_ENABLE_DLAB         0x80</span>

    <span>/** serial_configure_baud_rate:</span>
<span>     *  Sets the speed of the data being sent. The default speed of a serial</span>
<span>     *  port is 115200 bits/s. The argument is a divisor of that number, hence</span>
<span>     *  the resulting speed becomes (115200 / divisor) bits/s.</span>
<span>     *</span>
<span>     *  </span><span>@param</span><span> </span><span>com</span><span>      The COM port to configure</span>
<span>     *  </span><span>@param</span><span> </span><span>divisor</span><span>  The divisor</span>
<span>     */</span>
    <span>void</span> serial_configure_baud_rate(<span>unsigned</span> <span>short</span> com, <span>unsigned</span> <span>short</span> divisor)
    {
        outb(SERIAL_LINE_COMMAND_PORT(com),
             SERIAL_LINE_ENABLE_DLAB);
        outb(SERIAL_DATA_PORT(com),
             (divisor &gt;&gt; <span>8</span>) &amp; <span>0x00FF</span>);
        outb(SERIAL_DATA_PORT(com),
             divisor &amp; <span>0x00FF</span>);
    }</code></pre>
<p>The way that data should be sent must be configured. This is also done via the line command port by sending a byte. The layout of the 8 bits looks like the following:</p>
<pre><code>Bit:     | 7 | 6 | 5 4 3 | 2 | 1 0 |
Content: | d | b | prty  | s | dl  |</code></pre>
<p>A description for each name can be found in the table below (and in <span>[31]</span>):</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td>Enables (<code>d = 1</code>) or disables (<code>d = 0</code>) DLAB</td>
</tr>
<tr>
<td>b</td>
<td>If break control is enabled (<code>b = 1</code>) or disabled (<code>b = 0</code>)</td>
</tr>
<tr>
<td>prty</td>
<td>The number of parity bits to use</td>
</tr>
<tr>
<td>s</td>
<td>The number of stop bits to use (<code>s = 0</code> equals 1, <code>s = 1</code> equals 1.5 or 2)</td>
</tr>
<tr>
<td>dl</td>
<td>Describes the length of the data</td>
</tr>
</tbody>
</table>
<p>We will use the mostly standard value <code>0x03</code> <span>[31]</span>, meaning a length of 8 bits, no parity bit, one stop bit and break control disabled. This is sent to the line command port, as seen in the following example:</p>
<pre><code>    <span>/** serial_configure_line:</span>
<span>     *  Configures the line of the given serial port. The port is set to have a</span>
<span>     *  data length of 8 bits, no parity bits, one stop bit and break control</span>
<span>     *  disabled.</span>
<span>     *</span>
<span>     *  </span><span>@param</span><span> </span><span>com</span><span>  The serial port to configure</span>
<span>     */</span>
    <span>void</span> serial_configure_line(<span>unsigned</span> <span>short</span> com)
    {
        <span>/* Bit:     | 7 | 6 | 5 4 3 | 2 | 1 0 |</span>
<span>         * Content: | d | b | prty  | s | dl  |</span>
<span>         * Value:   | 0 | 0 | 0 0 0 | 0 | 1 1 | = 0x03</span>
<span>         */</span>
        outb(SERIAL_LINE_COMMAND_PORT(com), <span>0x03</span>);
    }</code></pre>
<p>The article on OSDev <span>[31]</span> has a more in-depth explanation of the values.</p>
<h3 id="configuring-the-buffers"> Configuring the Buffers</h3>
<p>When data is transmitted via the serial port it is placed in buffers, both when receiving and sending data. This way, if you send data to the serial port faster than it can send it over the wire, it will be buffered. However, if you send too much data too fast the buffer will be full and data will be lost. In other words, the buffers are FIFO queues. The FIFO queue configuration byte looks like the following figure:</p>
<pre><code>Bit:     | 7 6 | 5  | 4 | 3   | 2   | 1   | 0 |
Content: | lvl | bs | r | dma | clt | clr | e |</code></pre>
<p>A description for each name can be found in the table below:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>lvl</td>
<td>How many bytes should be stored in the FIFO buffers</td>
</tr>
<tr>
<td>bs</td>
<td>If the buffers should be 16 or 64 bytes large</td>
</tr>
<tr>
<td>r</td>
<td>Reserved for future use</td>
</tr>
<tr>
<td>dma</td>
<td>How the serial port data should be accessed</td>
</tr>
<tr>
<td>clt</td>
<td>Clear the transmission FIFO buffer</td>
</tr>
<tr>
<td>clr</td>
<td>Clear the receiver FIFO buffer</td>
</tr>
<tr>
<td>e</td>
<td>If the FIFO buffer should be enabled or not</td>
</tr>
</tbody>
</table>
<p>We use the value <code>0xC7 = 11000111</code> that:</p>
<ul>
<li>Enables FIFO</li>
<li>Clear both receiver and transmission FIFO queues</li>
<li>Use 14 bytes as size of queue</li>
</ul>
<p>The WikiBook on serial programming <span>[32]</span> explains the values in more depth.</p>
<h3 id="configuring-the-modem"> Configuring the Modem</h3>
<p>The modem control register is used for very simple hardware flow control via the Ready To Transmit (RTS) and Data Terminal Ready (DTR) pins. When configuring the serial port we want RTS and DTR to be 1, which means that we are ready to send data.</p>
<p>The modem configuration byte is shown in the following figure:</p>
<pre><code>Bit:     | 7 | 6 | 5  | 4  | 3   | 2   | 1   | 0   |
Content: | r | r | af | lb | ao2 | ao1 | rts | dtr |</code></pre>
<p>A description for each name can be found in the table below:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>Reserved</td>
</tr>
<tr>
<td>af</td>
<td>Autoflow control enabled</td>
</tr>
<tr>
<td>lb</td>
<td>Loopback mode (used for debugging serial ports)</td>
</tr>
<tr>
<td>ao2</td>
<td>Auxiliary output 2, used for receiving interrupts</td>
</tr>
<tr>
<td>ao1</td>
<td>Auxiliary output 1</td>
</tr>
<tr>
<td>rts</td>
<td>Ready To Transmit</td>
</tr>
<tr>
<td>dtr</td>
<td>Data Terminal Ready</td>
</tr>
</tbody>
</table>
<p>We don’t need to enable interrupts, because we won’t handle any received data. Therefore we use the configuration value <code>0x03 = 00000011</code> (RTS = 1 and DTS = 1).</p>
<h3 id="writing-data-to-the-serial-port"> Writing Data to the Serial Port</h3>
<p>Writing data to the serial port is done via the data I/O port. However, before writing, the transmit FIFO queue has to be empty (all previous writes must have finished). The transmit FIFO queue is empty if bit 5 of the line status I/O port is equal to one.</p>
<p>Reading the contents of an I/O port is done via the <code>in</code> assembly code instruction. There is no way to use the <code>in</code> assembly code instruction from C, therefore it has to be wrapped (the same way as the <code>out</code> assembly code instruction):</p>
<pre><code>    <span>global</span> inb

    <span>; inb - returns a byte from the given I/O port</span>
    <span>; stack: [esp + 4] The address of the I/O port</span>
    <span>;        [esp    ] The return address</span>
<span>    inb:</span>
        <span>mov</span> <span>dx</span>, [<span>esp</span> + <span>4</span>]       <span>; move the address of the I/O port to the dx register</span>
        <span>in</span>  <span>al</span>, <span>dx</span>              <span>; read a byte from the I/O port and store it in the al register</span>
        <span>ret</span>                     <span>; return the read byte</span></code></pre>
<pre><code>    <span>/* in file io.h */</span>

    <span>/** inb:</span>
<span>     *  Read a byte from an I/O port.</span>
<span>     *</span>
<span>     *  </span><span>@param</span><span>  </span><span>port</span><span> The address of the I/O port</span>
<span>     *  </span><span>@return</span><span>      The read byte</span>
<span>     */</span>
    <span>unsigned</span> <span>char</span> inb(<span>unsigned</span> <span>short</span> port);</code></pre>
<p>Checking if the transmit FIFO is empty can then be done from C:</p>
<pre><code>    <span>#include "io.h"</span>

    <span>/** serial_is_transmit_fifo_empty:</span>
<span>     *  Checks whether the transmit FIFO queue is empty or not for the given COM</span>
<span>     *  port.</span>
<span>     *</span>
<span>     *  </span><span>@param</span><span>  </span><span>com</span><span> The COM port</span>
<span>     *  </span><span>@return</span><span> 0 if the transmit FIFO queue is not empty</span>
<span>     *          1 if the transmit FIFO queue is empty</span>
<span>     */</span>
    <span>int</span> serial_is_transmit_fifo_empty(<span>unsigned</span> <span>int</span> com)
    {
        <span>/* 0x20 = 0010 0000 */</span>
        <span>return</span> inb(SERIAL_LINE_STATUS_PORT(com)) &amp; <span>0x20</span>;
    }</code></pre>
<p>Writing to a serial port means spinning as long as the transmit FIFO queue isn’t empty, and then writing the data to the data I/O port.</p>
<h3 id="configuring-bochs"> Configuring Bochs</h3>
<p>To save the output from the first serial serial port the Bochs configuration file <code>bochsrc.txt</code> must be updated. The <code>com1</code> configuration instructs Bochs how to handle first serial port:</p>
<pre><code>    com1: enabled=1, mode=file, dev=com1.out</code></pre>
<p>The output from serial port one will now be stored in the file <code>com1.out</code>.</p>
<h3 id="the-driver-1"> The Driver</h3>
<p>We recommend that you implement a <code>write</code> function for the serial port similar to the <code>write</code> function in the driver for the framebuffer. To avoid name clashes with the <code>write</code> function for the framebuffer it is a good idea to name the functions <code>fb_write</code> and <code>serial_write</code> to distinguish them.</p>
<p>We further recommend that you try to write a <code>printf</code>-like function, see section 7.3 in <span>[8]</span>. The <code>printf</code> function could take an additional argument to decide to which device to write the output (framebuffer or serial).</p>
<p>A final recommendation is that you create some way of distinguishing the severeness of the log messages, for example by prepending the messages with <code>DEBUG</code>, <code>INFO</code> or <code>ERROR</code>.</p>
<h2 id="further-reading-2"> Further Reading</h2>
<ul>
<li>The book “Serial programming” (available on WikiBooks) has a great section on programming the serial port, <a href="http://en.wikibooks.org/wiki/Serial_Programming/8250_UART_Programming#UART_Registers">http://en.wikibooks.org/wiki/Serial_Programming/8250_UART_Programming#UART_Registers</a></li>
<li>The OSDev wiki has a page with a lot of information about the serial ports, <a href="http://wiki.osdev.org/Serial_ports">http://wiki.osdev.org/Serial_ports</a></li>
</ul>
<h2 id="segmentation"> Segmentation</h2>
<p><em>Segmentation</em> in x86 means accessing the memory through segments. Segments are portions of the address space, possibly overlapping, specified by a base address and a limit. To address a byte in segmented memory you use a 48-bit <em>logical address</em>: 16 bits that specifies the segment and 32-bits that specifies what offset within that segment you want. The offset is added to the base address of the segment, and the resulting linear address is checked against the segment’s limit - see the figure below. If everything works out fine (including access-rights checks ignored for now) the result is a <em>linear address</em>. When paging is disabled, then the linear address space is mapped 1:1 onto the <em>physical address</em> space, and the physical memory can be accessed. (See the chapter <a href="#paging">“Paging”</a> for how to enable paging.)</p>
<div>
<p><img src="https://littleosbook.github.io/images/intel_3_5_logical_to_linear.png" alt="Translation of logical addresses to linear addresses."></p><p>Translation of logical addresses to linear addresses.</p>
</div>
<p>To enable segmentation you need to set up a table that describes each segment - a <em>segment descriptor table</em>. In x86, there are two types of descriptor tables: the <em>Global Descriptor Table</em> (GDT) and <em>Local Descriptor Tables</em> (LDT). An LDT is set up and managed by user-space processes, and all processes have their own LDT. LDTs can be used if a more complex segmentation model is desired - we won’t use it. The GDT is shared by everyone - it’s global.</p>
<p>As we discuss in the sections on virtual memory and paging, segmentation is rarely used more than in a minimal setup, similar to what we do below.</p>
<h2 id="accessing-memory"> Accessing Memory</h2>
<p>Most of the time when accessing memory there is no need to explicitly specify the segment to use. The processor has six 16-bit segment registers: <code>cs</code>, <code>ss</code>, <code>ds</code>, <code>es</code>, <code>gs</code> and <code>fs</code>. The register <code>cs</code> is the code segment register and specifies the segment to use when fetching instructions. The register <code>ss</code> is used whenever accessing the stack (through the stack pointer <code>esp</code>), and <code>ds</code> is used for other data accesses. The OS is free to use the registers <code>es</code>, <code>gs</code> and <code>fs</code> however it want.</p>
<p>Below is an example showing implicit use of the segment registers:</p>
<pre><code><span>    func:</span>
        <span>mov</span> <span>eax</span>, [<span>esp</span><span>+4</span>]
        <span>mov</span> <span>ebx</span>, [<span>eax</span>]
        <span>add</span> <span>ebx</span>, <span>8</span>
        <span>mov</span> [<span>eax</span>], <span>ebx</span>
        <span>ret</span></code></pre>
<p>The above example can be compared with the following one that makes explicit use of the segment registers:</p>
<pre><code><span>    func:</span>
        <span>mov</span> <span>eax</span>, [<span>ss</span>:<span>esp</span><span>+4</span>]
        <span>mov</span> <span>ebx</span>, [<span>ds</span>:<span>eax</span>]
        <span>add</span> <span>ebx</span>, <span>8</span>
        <span>mov</span> [<span>ds</span>:<span>eax</span>], <span>ebx</span>
        <span>ret</span></code></pre>
<p>You don’t need to use <code>ss</code> for storing the stack segment selector, or <code>ds</code> for the data segment selector. You could store the stack segment selector in <code>ds</code> and vice versa. However, in order to use the implicit style shown above, you must store the segment selectors in their indented registers.</p>
<p>Segment descriptors and their fields are described in figure 3-8 in the Intel manual <span>[33]</span>.</p>
<h2 id="the-global-descriptor-table-gdt"> The Global Descriptor Table (GDT)</h2>
<p>A GDT/LDT is an array of 8-byte segment descriptors. The first descriptor in the GDT is always a null descriptor and can never be used to access memory. At least two segment descriptors (plus the null descriptor) are needed for the GDT, because the descriptor contains more information than just the base and limit fields. The two most relevant fields for us are the <em>Type</em> field and the <em>Descriptor Privilege Level</em> (DPL) field.</p>
<p>Table 3-1 in chapter 3 of the Intel manual <span>[33]</span> specifies the values for the Type field. The table shows that the Type field can’t be both writable <em>and</em> executable at the same time. Therefore, two segments are needed: one segment for executing code to put in <code>cs</code> (Type is Execute-only or Execute-Read) and one segment for reading and writing data (Type is Read/Write) to put in the other segment registers.</p>
<p>The DPL specifies the <em>privilege levels</em> required to use the segment. x86 allows for four privilege levels (PL), 0 to 3, where PL0 is the most privileged. In most operating systems (eg. Linux and Windows), only PL0 and PL3 are used. However, some operating system, such as MINIX, make use of all levels. The kernel should be able to do anything, therefore it uses segments with DPL set to 0 (also called kernel mode). The current privilege level (CPL) is determined by the segment selector in <code>cs</code>.</p>
<p>The segments needed are described in the table below.</p>
<table>
<caption>The segment descriptors needed.</caption>
<thead>
<tr>
<th>Index</th>
<th>Offset</th>
<th>Name</th>
<th>Address range</th>
<th>Type</th>
<th>DPL</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td><code>0x00</code></td>
<td>null descriptor</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td><code>0x08</code></td>
<td>kernel code segment</td>
<td><code>0x00000000 - 0xFFFFFFFF</code></td>
<td>RX</td>
<td>PL0</td>
</tr>
<tr>
<td>2</td>
<td><code>0x10</code></td>
<td>kernel data segment</td>
<td><code>0x00000000 - 0xFFFFFFFF</code></td>
<td>RW</td>
<td>PL0</td>
</tr>
</tbody>
</table>
<p>Note that the segments overlap - they both encompass the entire linear address space. In our minimal setup we’ll only use segmentation to get privilege levels. See the Intel manual <span>[33]</span>, chapter 3, for details on the other descriptor fields.</p>
<h2 id="loading-the-gdt"> Loading the GDT</h2>
<p>Loading the GDT into the processor is done with the <code>lgdt</code> assembly code instruction, which takes the address of a struct that specifies the start and size of the GDT. It is easiest to encode this information using a <a href="#packing-structs">“packed struct”</a> as shown in the following example:</p>
<pre><code>    <span>struct</span> gdt {
        <span>unsigned</span> <span>int</span> address;
        <span>unsigned</span> <span>short</span> size;
    } __attribute__((packed));</code></pre>
<p>If the content of the <code>eax</code> register is the address to such a struct, then the GDT can be loaded with the assembly code shown below:</p>
<pre><code>    <span>lgdt</span> [<span>eax</span>]</code></pre>
<p>It might be easier if you make this instruction available from C, the same way as was done with the assembly code instructions <code>in</code> and <code>out</code>.</p>
<p>After the GDT has been loaded the segment registers needs to be loaded with their corresponding segment selectors. The content of a segment selector is described in the figure and table below:</p>
<pre><code>Bit:     | 15                                3 | 2  | 1 0 |
Content: | offset (index)                      | ti | rpl |</code></pre>
<table>
<caption>The layout of segment selectors.</caption>
<colgroup><col width="23%">
<col width="76%">
</colgroup><thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>rpl</td>
<td>Requested Privilege Level - we want to execute in PL0 for now.</td>
</tr>
<tr>
<td>ti</td>
<td>Table Indicator. 0 means that this specifies a GDT segment, 1 means an LDT Segment.</td>
</tr>
<tr>
<td>offset (index)</td>
<td>Offset within descriptor table.</td>
</tr>
</tbody>
</table>
<p>The offset of the segment selector is added to the start of the GDT to get the address of the segment descriptor: <code>0x08</code> for the first descriptor and <code>0x10</code> for the second, since each descriptor is 8 bytes. The Requested Privilege Level (RPL) should be <code>0</code> since the kernel of the OS should execute in privilege level 0.</p>
<p>Loading the segment selector registers is easy for the data registers - just copy the correct offsets to the registers:</p>
<pre><code>    <span>mov</span> <span>ds</span><span>, 0x10</span>
    <span>mov</span> <span>ss</span><span>, 0x10</span>
    <span>mov</span> <span>es</span><span>, 0x10</span>
    .
    .
    .</code></pre>
<p>To load <code>cs</code> we have to do a “far jump”:</p>
<pre><code>    <span>; code here uses the previous cs</span>
    <span>jmp</span> <span>0x08</span>:flush_cs   <span>; specify cs when jumping to flush_cs</span>

<span>    flush_cs:</span>
        <span>; now we've changed cs to 0x08</span></code></pre>
<p>A far jump is a jump where we explicitly specify the full 48-bit logical address: the segment selector to use and the absolute address to jump to. It will first set <code>cs</code> to <code>0x08</code> and then jump to <code>flush_cs</code> using its absolute address.</p>
<h2 id="further-reading-3"> Further Reading</h2>
<ul>
<li>Chapter 3 of the Intel manual <span>[33]</span> is filled with low-level and technical details about segmentation.</li>
<li>The OSDev wiki has a page about segmentation: <a href="http://wiki.osdev.org/Segmentation">http://wiki.osdev.org/Segmentation</a></li>
<li>The Wikipedia page on x86 segmentation might be worth looking into: <a href="http://en.wikipedia.org/wiki/X86_memory_segmentation">http://en.wikipedia.org/wiki/X86_memory_segmentation</a></li>
</ul>
<h2 id="interrupts-and-input"> Interrupts and Input</h2>
<p>Now that the OS can produce <em>output</em> it would be nice if it also could get some <em>input</em>. (The operating system must be able to handle <em>interrupts</em> in order to read information from the keyboard). An interrupt occurs when a hardware device, such as the keyboard, the serial port or the timer, signals the CPU that the state of the device has changed. The CPU itself can also send interrupts due to program errors, for example when a program references memory it doesn’t have access to, or when a program divides a number by zero. Finally, there are also <em>software intterupts</em>, which are interrupts that are caused by the <code>int</code> assembly code instruction, and they are often used for system calls.</p>
<h2 id="interrupts-handlers"> Interrupts Handlers</h2>
<p>Interrupts are handled via the <em>Interrupt Descriptor Table</em> (IDT). The IDT describes a handler for each interrupt. The interrupts are numbered (0 - 255) and the handler for interrupt <em>i</em> is defined at the <em>ith</em> position in the table. There are three different kinds of handlers for interrupts:</p>
<ul>
<li>Task handler</li>
<li>Interrupt handler</li>
<li>Trap handler</li>
</ul>
<p>The task handlers use functionality specific to the Intel version of x86, so they won’t be covered here (see the Intel manual <span>[33]</span>, chapter 6, for more info). The only difference between an interrupt handler and a trap handler is that the interrupt handler disables interrupts, which means you cannot get an interrupt while at the same time handling an interrupt. In this book, we will use trap handlers and disable interrupts manually when we need to.</p>
<h2 id="creating-an-entry-in-the-idt"> Creating an Entry in the IDT</h2>
<p>An entry in the IDT for an interrupt handler consists of 64 bits. The highest 32 bits are shown in the figure below:</p>
<pre><code>Bit:     | 31              16 | 15 | 14 13 | 12 | 11 | 10 9 8 | 7 6 5 | 4 3 2 1 0 |
Content: | offset high        | P  | DPL   | 0  | D  | 1  1 0 | 0 0 0 | reserved  |</code></pre>
<p>The lowest 32 bits are presented in the following figure:</p>
<pre><code>Bit:     | 31              16 | 15              0 |
Content: | segment selector   | offset low        |</code></pre>
<p>A description for each name can be found in the table below:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>offset high</td>
<td>The 16 highest bits of the 32 bit address in the segment.</td>
</tr>
<tr>
<td>offset low</td>
<td>The 16 lowest bits of the 32 bits address in the segment.</td>
</tr>
<tr>
<td>p</td>
<td>If the handler is present in memory or not (1 = present, 0 = not present).</td>
</tr>
<tr>
<td>DPL</td>
<td>Descriptor Privilige Level, the privilege level the handler can be called from (0, 1, 2, 3).</td>
</tr>
<tr>
<td>D</td>
<td>Size of gate, (1 = 32 bits, 0 = 16 bits).</td>
</tr>
<tr>
<td>segment selector</td>
<td>The offset in the GDT.</td>
</tr>
<tr>
<td>r</td>
<td>Reserved.</td>
</tr>
</tbody>
</table>
<p>The offset is a pointer to code (preferably an assembly code label). For example, to create an entry for a handler whose code starts at <code>0xDEADBEEF</code> and that runs in privilege level 0 (therefore using the same code segment selector as the kernel) the following two bytes would be used:</p>
<pre><code>    0xDEAD8E00
    0x0008BEEF</code></pre>
<p>If the IDT is represented as an <code>unsigned integer idt[512]</code> then to register the above example as an handler for interrupt 0 (divide-by-zero), the following code would be used:</p>
<pre><code>    idt[<span>0</span>] = <span>0xDEAD8E00</span>
    idt[<span>1</span>] = <span>0x0008BEEF</span></code></pre>
<p>As written in the chapter <a href="#getting-to-c">“Getting to C”</a>, we recommend that you instead of using bytes (or unsigned integers) use packed structures to make the code more readable.</p>
<h2 id="handling-an-interrupt"> Handling an Interrupt</h2>
<p>When an interrupt occurs the CPU will push some information about the interrupt onto the stack, then look up the appropriate interrupt hander in the IDT and jump to it. The stack at the time of the interrupt will look like the following:</p>
<pre><code>    [esp + 12] eflags
    [esp + 8]  cs
    [esp + 4]  eip
    [esp]      error code?</code></pre>
<p>The reason for the question mark behind error code is that not all interrupts create an <em>error code</em>. The specific CPU interrupts that put an error code on the stack are 8, 10, 11, 12, 13, 14 and 17. The error code can be used by the interrupt handler to get more information on what has happened. Also, note that the interrupt <em>number</em> is <em>not</em> pushed onto the stack. We can only determine what interrupt has occurred by knowing what code is executing - if the handler registered for interrupt 17 is executing, then interrupt 17 has occurred.</p>
<p>Once the interrupt handler is done, it uses the <code>iret</code> instruction to return. The instruction <code>iret</code> expects the stack to be the same as at the time of the interrupt (see the figure above). Therefore, any values pushed onto the stack by the interrupt handler must be popped. Before returning, <code>iret</code> restores <code>eflags</code> by popping the value from the stack and then finally jumps to <code>cs:eip</code> as specified by the values on the stack.</p>
<p>The interrupt handler has to be written in assembly code, since all registers that the interrupt handlers use must be preserved by pushing them onto the stack. This is because the code that was interrupted doesn’t know about the interrupt and will therefore expect that its registers stay the same. Writing all the logic of the interrupt handler in assembly code will be tiresome. Creating a handler in assembly code that saves the registers, calls a C function, restores the registers and finally executes <code>iret</code> is a good idea!</p>
<p>The C handler should get the state of the registers, the state of the stack and the number of the interrupt as arguments. The following definitions can for example be used:</p>
<pre><code>    <span>struct</span> cpu_state {
        <span>unsigned</span> <span>int</span> eax;
        <span>unsigned</span> <span>int</span> ebx;
        <span>unsigned</span> <span>int</span> ecx;
        .
        .
        .
        <span>unsigned</span> <span>int</span> esp;
    } __attribute__((packed));

    <span>struct</span> stack_state {
        <span>unsigned</span> <span>int</span> error_code;
        <span>unsigned</span> <span>int</span> eip;
        <span>unsigned</span> <span>int</span> cs;
        <span>unsigned</span> <span>int</span> eflags;
    } __attribute__((packed));

    <span>void</span> interrupt_handler(<span>struct</span> cpu_state cpu, <span>struct</span> stack_state stack, <span>unsigned</span> <span>int</span> interrupt);</code></pre>
<h2 id="creating-a-generic-interrupt-handler"> Creating a Generic Interrupt Handler</h2>
<p>Since the CPU does not push the interrupt number on the stack it is a little tricky to write a generic interrupt handler. This section will use macros to show how it can be done. Writing one version for each interrupt is tedious - it is better to use the macro functionality of NASM <span>[34]</span>. And since not all interrupts produce an error code the value 0 will be added as the “error code” for interrupts without an error code. The following code shows an example of how this can be done:</p>
<pre><code>    <span>%macro no_error_code_interrupt_handler %1</span>
    <span>global</span> interrupt_handler_<span>%1</span>
    interrupt_handler_<span>%1:</span>
        <span>push</span>    <span>dword</span> <span>0</span>                     <span>; push 0 as error code</span>
        <span>push</span>    <span>dword</span> <span>%1                    ; push the interrupt number</span>
        <span>jmp</span>     common_interrupt_handler    <span>; jump to the common handler</span>
    <span>%endmacro</span>

    <span>%macro error_code_interrupt_handler %1</span>
    <span>global</span> interrupt_handler_<span>%1</span>
    interrupt_handler_<span>%1:</span>
        <span>push</span>    <span>dword</span> <span>%1                    ; push the interrupt number</span>
        <span>jmp</span>     common_interrupt_handler    <span>; jump to the common handler</span>
    <span>%endmacro</span>

<span>    common_interrupt_handler:</span>               <span>; the common parts of the generic interrupt handler</span>
        <span>; save the registers</span>
        <span>push</span>    <span>eax</span>
        <span>push</span>    <span>ebx</span>
        .
        .
        .
        <span>push</span>    <span>ebp</span>

        <span>; call the C function</span>
        <span>call</span>    interrupt_handler

        <span>; restore the registers</span>
        <span>pop</span>     <span>ebp</span>
        .
        .
        .
        <span>pop</span>     <span>ebx</span>
        <span>pop</span>     <span>eax</span>

        <span>; restore the esp</span>
        <span>add</span>     <span>esp</span>, <span>8</span>

        <span>; return to the code that got interrupted</span>
        <span>iret</span>

    no_error_code_interrupt_handler <span>0</span>       <span>; create handler for interrupt 0</span>
    no_error_code_interrupt_handler <span>1</span>       <span>; create handler for interrupt 1</span>
    .
    .
    .
    error_code_handler              <span>7</span>       <span>; create handler for interrupt 7</span>
    .
    .
    .</code></pre>
<p>The <code>common_interrupt_handler</code> does the following:</p>
<ul>
<li>Push the registers on the stack.</li>
<li>Call the C function <code>interrupt_handler</code>.</li>
<li>Pop the registers from the stack.</li>
<li>Add 8 to <code>esp</code> (because of the error code and the interrupt number pushed earlier).</li>
<li>Execute <code>iret</code> to return to the interrupted code.</li>
</ul>
<p>Since the macros declare global labels the addresses of the interrupt handlers can be accessed from C or assembly code when creating the IDT.</p>
<h2 id="loading-the-idt"> Loading the IDT</h2>
<p>The IDT is loaded with the <code>lidt</code> assembly code instruction which takes the address of the first element in the table. It is easiest to wrap this instruction and use it from C:</p>
<pre><code>    <span>global</span>  load_idt

    <span>; load_idt - Loads the interrupt descriptor table (IDT).</span>
    <span>; stack: [esp + 4] the address of the first entry in the IDT</span>
    <span>;        [esp    ] the return address</span>
<span>    load_idt:</span>
        <span>mov</span>     <span>eax</span>, [<span>esp</span><span>+4</span>]    <span>; load the address of the IDT into register eax</span>
        <span>lidt</span>    <span>eax</span>             <span>; load the IDT</span>
        <span>ret</span>                     <span>; return to the calling function</span></code></pre>
<h2 id="programmable-interrupt-controller-pic"> Programmable Interrupt Controller (PIC)</h2>
<p>To start using hardware interrupts you must first configure the Programmable Interrupt Controller (PIC). The PIC makes it possible to map signals from the hardware to interrupts. The reasons for configuring the PIC are:</p>
<ul>
<li>Remap the interrupts. The PIC uses interrupts 0 - 15 for hardware interrupts by default, which conflicts with the CPU interrupts. Therefore the PIC interrupts must be remapped to another interval.</li>
<li>Select which interrupts to receive. You probably don’t want to receive interrupts from all devices since you don’t have code that handles these interrupts anyway.</li>
<li>Set up the correct mode for the PIC.</li>
</ul>
<p>In the beginning there was only one PIC (PIC 1) and eight interrupts. As more hardware were added, 8 interrupts were too few. The solution chosen was to chain on another PIC (PIC 2) on the first PIC (see interrupt 2 on PIC 1).</p>
<p>The hardware interrupts are shown in the table below:</p>
<table>
<thead>
<tr>
<th>PIC 1</th>
<th>Hardware</th>
<th>PIC 2</th>
<th>Hardware</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Timer</td>
<td>8</td>
<td>Real Time Clock</td>
</tr>
<tr>
<td>1</td>
<td>Keyboard</td>
<td>9</td>
<td>General I/O</td>
</tr>
<tr>
<td>2</td>
<td>PIC 2</td>
<td>10</td>
<td>General I/O</td>
</tr>
<tr>
<td>3</td>
<td>COM 2</td>
<td>11</td>
<td>General I/O</td>
</tr>
<tr>
<td>4</td>
<td>COM 1</td>
<td>12</td>
<td>General I/O</td>
</tr>
<tr>
<td>5</td>
<td>LPT 2</td>
<td>13</td>
<td>Coprocessor</td>
</tr>
<tr>
<td>6</td>
<td>Floppy disk</td>
<td>14</td>
<td>IDE Bus</td>
</tr>
<tr>
<td>7</td>
<td>LPT 1</td>
<td>15</td>
<td>IDE Bus</td>
</tr>
</tbody>
</table>
<p>A great tutorial for configuring the PIC can be found at the SigOPS website <span>[35]</span>. We won’t repeat that information here.</p>
<p>Every interrupt from the PIC has to be acknowledged - that is, sending a message to the PIC confirming that the interrupt has been handled. If this isn’t done the PIC won’t generate any more interrupts.</p>
<p>Acknowledging a PIC interrupt is done by sending the byte <code>0x20</code> to the PIC that raised the interrupt. Implementing a <code>pic_acknowledge</code> function can thus be done as follows:</p>
<pre><code>    <span>#include "io.h"</span>

    <span>#define PIC1_PORT_A 0x20</span>
    <span>#define PIC2_PORT_A 0xA0</span>

    <span>/* The PIC interrupts have been remapped */</span>
    <span>#define PIC1_START_INTERRUPT 0x20</span>
    <span>#define PIC2_START_INTERRUPT 0x28</span>
    <span>#define PIC2_END_INTERRUPT   PIC2_START_INTERRUPT + 7</span>

    <span>#define PIC_ACK     0x20</span>

    <span>/** pic_acknowledge:</span>
<span>     *  Acknowledges an interrupt from either PIC 1 or PIC 2.</span>
<span>     *</span>
<span>     *  </span><span>@param</span><span> </span><span>num</span><span> The number of the interrupt</span>
<span>     */</span>
    <span>void</span> pic_acknowledge(<span>unsigned</span> integer interrupt)
    {
        <span>if</span> (interrupt &lt; PIC1_START_INTERRUPT || interrupt &gt; PIC2_END_INTERRUPT) {
          <span>return</span>;
        }

        <span>if</span> (interrupt &lt; PIC2_START_INTERRUPT) {
          outb(PIC1_PORT_A, PIC_ACK);
        } <span>else</span> {
          outb(PIC2_PORT_A, PIC_ACK);
        }
    }</code></pre>
<h2 id="reading-input-from-the-keyboard"> Reading Input from the Keyboard</h2>
<p>The keyboard does not generate ASCII characters, it generates scan codes. A scan code represents a button - both presses and releases. The scan code representing the just pressed button can be read from the keyboard’s data I/O port which has address <code>0x60</code>. How this can be done is shown in the following example:</p>
<pre><code>    <span>#include "io.h"</span>

    <span>#define KBD_DATA_PORT   0x60</span>

    <span>/** read_scan_code:</span>
<span>     *  Reads a scan code from the keyboard</span>
<span>     *</span>
<span>     *  </span><span>@return</span><span> The scan code (NOT an ASCII character!)</span>
<span>     */</span>
    <span>unsigned</span> <span>char</span> read_scan_code(<span>void</span>)
    {
        <span>return</span> inb(KBD_DATA_PORT);
    }</code></pre>
<p>The next step is to write a function that translates a scan code to the corresponding ASCII character. If you want to map the scan codes to ASCII characters as is done on an American keyboard then Andries Brouwer has a great tutorial <span>[36]</span>.</p>
<p>Remember, since the keyboard interrupt is raised by the PIC, you must call <code>pic_acknowledge</code> at the end of the keyboard interrupt handler. Also, the keyboard will not send you any more interrupts until you read the scan code from the keyboard.</p>
<h2 id="further-reading-4"> Further Reading</h2>
<ul>
<li>The OSDev wiki has a great page on interrupts, <a href="http://wiki.osdev.org/Interrupts">http://wiki.osdev.org/Interrupts</a></li>
<li>Chapter 6 of Intel Manual 3a <span>[33]</span> describes everything there is to know about interrupts.</li>
</ul>
<h2 id="the-road-to-user-mode"> The Road to User Mode</h2>
<p>Now that the kernel boots, prints to screen and reads from keyboard - what do we do? Usually, a kernel is not supposed to do the application logic itself, but leave that for applications. The kernel creates the proper abstractions (for memory, files, devices) to make application development easier, performs tasks on behalf of applications (system calls) and <a href="#scheduling">schedules processes</a>.</p>
<p>User mode, in contrast with kernel mode, is the environment in which the user’s programs execute. This environment is less privileged than the kernel, and will prevent (badly written) user programs from messing with other programs or the kernel. Badly written kernels are free to mess up what they want.</p>
<p>There’s quite a way to go until the OS created in this book can execute programs in user mode, but this chapter will show how to easily execute a small program in kernel mode.</p>
<h2 id="loading-an-external-program"> Loading an External Program</h2>
<p>Where do we get the external program from? Somehow we need to load the code we want to execute into memory. More feature-complete operating systems usually have drivers and file systems that enable them to load the software from a CD-ROM drive, a hard disk or other persistent media.</p>
<p>Instead of creating all these drivers and file systems we will use a feature in GRUB called modules to load the program.</p>
<h3 id="grub-modules"> GRUB Modules</h3>
<p>GRUB can load arbitrary files into memory from the ISO image, and these files are usually referred to as <em>modules</em>. To make GRUB load a module, edit the file <code>iso/boot/grub/menu.lst</code> and add the following line at the end of the file:</p>
<pre><code>    module /modules/program</code></pre>
<p>Now create the folder <code>iso/modules</code>:</p>
<pre><code>    mkdir -p iso/modules</code></pre>
<p>The application <code>program</code> will be created later in this chapter.</p>
<p>The code that calls <code>kmain</code> must be updated to pass information to <code>kmain</code> about where it can find the modules. We also want to tell GRUB that it should align all the modules on page boundaries when loading them (see the chapter <a href="#paging">“Paging”</a> for details about page alignment).</p>
<p>To instruct GRUB how to load our modules, the “multiboot header” - the first bytes of the kernel - must be updated as follows:</p>
<pre><code>    <span>; in file `loader.s`</span>


    MAGIC_NUMBER    <span>equ</span> <span>0x1BADB002</span>      <span>; define the magic number constant</span>
    ALIGN_MODULES   <span>equ</span><span> 0x00000001      </span><span>; tell GRUB to align modules</span>

    <span>; calculate the checksum (all options + checksum should equal 0)</span>
    CHECKSUM        <span>equ</span> -(MAGIC_NUMBER + ALIGN_MODULES)

    <span>section</span> .text:                      <span>; start of the text (code) section</span>
    <span>align</span> <span>4</span>                             <span>; the code must be 4 byte aligned</span>
        <span>dd</span> MAGIC_NUMBER                 <span>; write the magic number</span>
        <span>dd</span> ALIGN_MODULES                <span>; write the align modules instruction</span>
        <span>dd</span> CHECKSUM                     <span>; write the checksum</span></code></pre>
<p>GRUB will also store a pointer to a <code>struct</code> in the register <code>ebx</code> that, among other things, describes at which addresses the modules are loaded. Therefore, you probably want to push <code>ebx</code> on the stack before calling <code>kmain</code> to make it an argument for <code>kmain</code>.</p>
<h2 id="executing-a-program"> Executing a Program</h2>
<h3 id="a-very-simple-program"> A Very Simple Program</h3>
<p>A program written at this stage can only perform a few actions. Therefore, a very short program that writes a value to a register suffices as a test program. Halting Bochs after a while and then check that register contains the correct number by looking in the Bochs log will verify that the program has run. This is an example of such a short program:</p>
<pre><code>    <span>; set eax to some distinguishable number, to read from the log afterwards</span>
    <span>mov</span> <span>eax</span>, <span>0xDEADBEEF</span>

    <span>; enter infinite loop, nothing more to do</span>
    <span>; $ means "beginning of line", ie. the same instruction</span>
    <span>jmp</span> <span>$</span></code></pre>
<h3 id="compiling"> Compiling</h3>
<p>Since our kernel cannot parse advanced executable formats we need to compile the code into a flat binary. NASM can do this with the flag <code>-f</code>:</p>
<pre><code>    nasm -f bin program.s -o program</code></pre>
<p>This is all we need. You must now move the file <code>program</code> to the folder <code>iso/modules</code>.</p>
<h3 id="finding-the-program-in-memory"> Finding the Program in Memory</h3>
<p>Before jumping to the program we must find where it resides in memory. Assuming that the contents of <code>ebx</code> is passed as an argument to <code>kmain</code>, we can do this entirely from C.</p>
<p>The pointer in <code>ebx</code> points to a <em>multiboot</em> structure <span>[19]</span>. Download the <code>multiboot.h</code> file from <a href="http://www.gnu.org/software/grub/manual/multiboot/html_node/multiboot.h.html">http://www.gnu.org/software/grub/manual/multiboot/html_node/multiboot.h.html</a>, which describes the structure.</p>
<p>The pointer passed to <code>kmain</code> in the <code>ebx</code> register can be cast to a <code>multiboot_info_t</code> pointer. The address of the first module is in the field <code>mods_addr</code>. The following code shows an example:</p>
<pre><code>    <span>int</span> kmain(<span>/* additional arguments */</span> <span>unsigned</span> <span>int</span> ebx)
    {
        multiboot_info_t *mbinfo = (multiboot_info_t *) ebx;
        <span>unsigned</span> <span>int</span> address_of_module = mbinfo-&gt;mods_addr;
    }</code></pre>
<p>However, before just blindly following the pointer, you should check that the module got loaded correctly by GRUB. This can be done by checking the <code>flags</code> field of the <code>multiboot_info_t</code> structure. You should also check the field <code>mods_count</code> to make sure it is exactly 1. For more details about the multiboot structure, see the multiboot documentation <span>[19]</span>.</p>
<h3 id="jumping-to-the-code"> Jumping to the Code</h3>
<p>The only thing left to do is to jump to the code loaded by GRUB. Since it is easier to parse the multiboot structure in C than assembly code, calling the code from C is more convenient (it can of course be done with <code>jmp</code> or <code>call</code> in assembly code as well). The C code could look like this:</p>
<pre><code>    <span>typedef</span> <span>void</span> (*call_module_t)(<span>void</span>);
    <span>/* ... */</span>
    call_module_t start_program = (call_module_t) address_of_module;
    start_program();
    <span>/* we'll never get here, unless the module code returns */</span></code></pre>
<p>If we start the kernel, wait until it has run and entered the infinite loop in the program, and then halt Bochs, we should see <code>0xDEADBEEF</code> in the register <code>eax</code> via the Bochs log. We have successfully started a program in our OS!</p>
<h2 id="the-beginning-of-user-mode"> The Beginning of User Mode</h2>
<p>The program we’ve written now runs at the same privilege level as the kernel - we’ve just entered it in a somewhat peculiar way. To enable applications to execute at a different privilege level we’ll need to, beside <a href="#segmentation"><em>segmentation</em></a>, do <a href="#paging"><em>paging</em></a> and <a href="#page-frame-allocation"><em>page frame allocation</em></a>.</p>
<p>It’s quite a lot of work and technical details to go through, but in a few chapters you’ll have working user mode programs.</p>
<h2 id="a-short-introduction-to-virtual-memory"> A Short Introduction to Virtual Memory</h2>
<p><em>Virtual memory</em> is an abstraction of physical memory. The purpose of virtual memory is generally to simplify application development and to let processes address more memory than what is actually physically present in the machine. We also don’t want applications messing with the kernel or other applications’ memory due to security.</p>
<p>In the x86 architecture, virtual memory can be accomplished in two ways: <em>segmentation</em> and <em>paging</em>. Paging is by far the most common and versatile technique, and we’ll implement it the next chapter. Some use of segmentation is still necessary to allow for code to execute under different privilege levels.</p>
<p>Managing memory is a big part of what an operating system does. <a href="#paging">Paging</a> and <a href="#page-frame-allocation">page frame allocation</a> deals with that.</p>
<p>Segmentation and paging is described in the <span>[33]</span>, chapter 3 and 4.</p>
<h2 id="virtual-memory-through-segmentation"> Virtual Memory Through Segmentation?</h2>
<p>You could skip paging entirely and just use segmentation for virtual memory. Each user mode process would get its own segment, with base address and limit properly set up. This way no process can see the memory of another process. A problem with this is that the physical memory for a process needs to be contiguous (or at least it is very convenient if it is). Either we need to know in advance how much memory the program will require (unlikely), or we can move the memory segments to places where they can grow when the limit is reached (expensive, causes fragmentation - can result in “out of memory” even though enough memory is available). Paging solves both these problems.</p>
<p>It is interesting to note that in x86_64 (the 64-bit version of the x86 architecture), segmentation is almost completely removed.</p>
<h2 id="further-reading-5"> Further Reading</h2>
<ul>
<li>LWN.net has an article on virtual memory: <a href="http://lwn.net/Articles/253361/">http://lwn.net/Articles/253361/</a></li>
<li>Gustavo Duarte has also written an article about virtual memory: <a href="http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation">http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation</a></li>
</ul>
<h2 id="paging"> Paging</h2>
<p>Segmentation translates a logical address into a linear address. <em>Paging</em> translates these linear addresses onto the physical address space, and determines access rights and how the memory should be cached.</p>
<h2 id="why-paging"> Why Paging?</h2>
<p>Paging is the most common technique used in x86 to enable virtual memory. Virtual memory through paging means that each process will get the impression that the available memory range is <code>0x00000000</code> - <code>0xFFFFFFFF</code> even though the actual size of the memory might be much less. It also means that when a process addresses a byte of memory it will use a virtual (linear) address instead of physical one. The code in the user process won’t notice any difference (except for execution delays). The linear address gets translated to a physical address by the MMU and the page table. If the virtual address isn’t mapped to a physical address, the CPU will raise a page fault interrupt.</p>
<p>Paging is optional, and some operating systems do not make use of it. But if we want to mark certain areas of memory accessible only to code running at a certain privilege level (to be able to have processes running at different privilege levels), paging is the neatest way to do it.</p>
<h2 id="paging-in-x86"> Paging in x86</h2>
<p>Paging in x86 (chapter 4 in the Intel manual <span>[33]</span>) consists of a <em>page directory</em> (PDT) that can contain references to 1024 <em>page tables</em> (PT), each of which can point to 1024 sections of physical memory called <em>page frames</em> (PF). Each page frame is 4096 byte large. In a virtual (linear) address, the highest 10 bits specifies the offset of a page directory entry (PDE) in the current PDT, the next 10 bits the offset of a page table entry (PTE) within the page table pointed to by that PDE. The lowest 12 bits in the address is the offset within the page frame to be addressed.</p>
<p>All page directories, page tables and page frames need to be aligned on 4096 byte addresses. This makes it possible to address a PDT, PT or PF with just the highest 20 bits of a 32 bit address, since the lowest 12 need to be zero.</p>
<p>The PDE and PTE structure is very similar to each other: 32 bits (4 bytes), where the highest 20 bits points to a PTE or PF, and the lowest 12 bits control access rights and other configurations. 4 bytes times 1024 equals 4096 bytes, so a page directory and page table both fit in a page frame themselves.</p>
<p>The translation of linear addresses to physical addresses is described in the figure below.</p>
<p>While pages are normally 4096 bytes, it is also possible to use 4 MB pages. A PDE then points directly to a 4 MB page frame, which needs to be aligned on a 4 MB address boundary. The address translation is almost the same as in the figure, with just the page table step removed. It is possible to mix 4 MB and 4 KB pages.</p>
<div>
<p><img src="https://littleosbook.github.io/images/intel_4_2_linear_address_translation.png" alt="Translating virtual addresses (linear addresses) to physical addresses."></p><p>Translating virtual addresses (linear addresses) to physical addresses.</p>
</div>
<p>The 20 bits pointing to the current PDT is stored in the register <code>cr3</code>. The lower 12 bits of <code>cr3</code> are used for configuration.</p>
<p>For more details on the paging structures, see chapter 4 in the Intel manual <span>[33]</span>. The most interesting bits are <em>U/S</em>, which determine what privilege levels can access this page (PL0 or PL3), and <em>R/W</em>, which makes the memory in the page read-write or read-only.</p>
<h3 id="identity-paging"> Identity Paging</h3>
<p>The simplest kind of paging is when we map each virtual address onto the same physical address, called <em>identity paging</em>. This can be done at compile time by creating a page directory where each entry points to its corresponding 4 MB frame. In NASM this can be done with macros and commands (<code>%rep</code>, <code>times</code> and <code>dd</code>). It can of course also be done at run-time by using ordinary assembly code instructions.</p>
<h3 id="enabling-paging"> Enabling Paging</h3>
<p>Paging is enabled by first writing the address of a page directory to <code>cr3</code> and then setting bit 31 (the PG “paging-enable” bit) of <code>cr0</code> to <code>1</code>. To use 4 MB pages, set the PSE bit (Page Size Extensions, bit 4) of <code>cr4</code>. The following assembly code shows an example:</p>
<pre><code>    <span>; eax has the address of the page directory</span>
    <span>mov</span> <span>cr3</span>, <span>eax</span>

    <span>mov</span> <span>ebx</span>, <span>cr4</span>        <span>; read current cr4</span>
    <span>or</span>  <span>ebx</span><span>, 0x00000010 </span><span>; set PSE</span>
    <span>mov</span> <span>cr4</span>, <span>ebx</span>        <span>; update cr4</span>

    <span>mov</span> <span>ebx</span>, <span>cr0</span>        <span>; read current cr0</span>
    <span>or</span>  <span>ebx</span><span>, 0x80000000 </span><span>; set PG</span>
    <span>mov</span> <span>cr0</span>, <span>ebx</span>        <span>; update cr0</span>

    <span>; now paging is enabled</span></code></pre>
<h3 id="a-few-details"> A Few Details</h3>
<p>It is important to note that all addresses within the page directory, page tables and in <code>cr3</code> need to be physical addresses to the structures, never virtual. This will be more relevant in later sections where we dynamically update the paging structures (see the chapter <a href="#user-mode">“User Mode”</a>).</p>
<p>An instruction that is useful when an updating a PDT or PT is <code>invlpg</code>. It invalidates the <em>Translation Lookaside Buffer</em> (TLB) entry for a virtual address. The TLB is a cache for translated addresses, mapping physical addresses corresponding to virtual addresses. This is only required when changing a PDE or PTE that was previously mapped to something else. If the PDE or PTE had previously been marked as not present (bit 0 was set to 0), executing <code>invlpg</code> is unnecessary. Changing the value of <code>cr3</code> will cause all entries in the TLB to be invalidated.</p>
<p>An example of invalidating a TLB entry is shown below:</p>
<pre><code>    <span>; invalidate any TLB references to virtual address 0</span>
    <span>invlpg</span> [<span>0</span>]</code></pre>
<h2 id="paging-and-the-kernel"> Paging and the Kernel</h2>
<p>This section will describe how paging affects the OS kernel. We encourage you to run your OS using identity paging before trying to implement a more advanced paging setup, since it can be hard to debug a malfunctioning page table that is set up via assembly code.</p>
<h3 id="reasons-to-not-identity-map-the-kernel"> Reasons to Not Identity Map the Kernel</h3>
<p>If the kernel is placed at the beginning of the virtual address space - that is, the virtual address space (<code>0x00000000</code>, <code>"size of kernel"</code>) maps to the location of the kernel in memory - there will be issues when linking the user mode process code. Normally, during linking, the linker assumes that the code will be loaded into the memory position <code>0x00000000</code>. Therefore, when resolving absolute references, <code>0x00000000</code> will be the base address for calculating the exact position. But if the kernel is mapped onto the virtual address space (<code>0x00000000</code>, <code>"size of kernel"</code>), the user mode process cannot be loaded at virtual address <code>0x00000000</code> - it must be placed somewhere else. Therefore, the assumption from the linker that the user mode process is loaded into memory at position <code>0x00000000</code> is wrong. This can be corrected by using a linker script which tells the linker to assume a different starting address, but that is a very cumbersome solution for the users of the operating system.</p>
<p>This also assumes that we want the kernel to be part of the user mode process’ address space. As we will see later, this is a nice feature, since during system calls we don’t have to change any paging structures to get access to the kernel’s code and data. The kernel pages will of course require privilege level 0 for access, to prevent a user process from reading or writing kernel memory.</p>
<h3 id="the-virtual-address-for-the-kernel"> The Virtual Address for the Kernel</h3>
<p>Preferably, the kernel should be placed at a very high virtual memory address, for example <code>0xC0000000</code> (3 GB). The user mode process is not likely to be 3 GB large, which is now the only way that it can conflict with the kernel. When the kernel uses virtual addresses at 3 GB and above it is called a <em>higher-half kernel</em>. <code>0xC0000000</code> is just an example, the kernel can be placed at any address higher than 0 to get the same benefits. Choosing the correct address depends on how much virtual memory should be available for the kernel (it is easiest if all memory above the kernel virtual address should belong to the kernel) and how much virtual memory should be available for the process.</p>
<p>If the user mode process is larger than 3 GB, some pages will need to be swapped out by the kernel. Swapping pages is not part of this book.</p>
<h3 id="placing-the-kernel-at-0xc0000000"> Placing the Kernel at <code>0xC0000000</code></h3>
<p>To start with, it is better to place the kernel at <code>0xC0100000</code> than <code>0xC0000000</code>, since this makes it possible to map (<code>0x00000000</code>, <code>0x00100000</code>) to (<code>0xC0000000</code>, <code>0xC0100000</code>). This way, the entire range (<code>0x00000000</code>, <code>"size of kernel"</code>) of memory is mapped to the range (<code>0xC0000000</code>, <code>0xC0000000  + "size of kernel"</code>).</p>
<p>Placing the kernel at <code>0xC0100000</code> isn’t hard, but it does require some thought. This is once again a linking problem. When the linker resolves all absolute references in the kernel, it will assume that our kernel is loaded at physical memory location <code>0x00100000</code>, not <code>0x00000000</code>, since relocation is used in the linker script (see the section <a href="#linking-the-kernel">“Linking the kernel”</a>). However, we want the jumps to be resolved using <code>0xC0100000</code> as base address, since otherwise a kernel jump will jump straight into the user mode process code (remember that the user mode process is loaded at virtual memory <code>0x00000000</code>).</p>
<p>However, we can’t simply tell the linker to assume that the kernel starts (is loaded) at <code>0xC01000000</code>, since we want it to be loaded at the physical address <code>0x00100000</code>. The reason for having the kernel loaded at 1 MB is because it can’t be loaded at <code>0x00000000</code>, since there is BIOS and GRUB code loaded below 1 MB. Furthermore, we cannot assume that we can load the kernel at <code>0xC0100000</code>, since the machine might not have 3 GB of physical memory.</p>
<p>This can be solved by using both relocation (<code>.=0xC0100000</code>) and the <code>AT</code> instruction in the linker script. Relocation specifies that non-relative memory-references should should use the relocation address as base in address calculations. <code>AT</code> specifies where the kernel should be loaded into memory. Relocation is done at link time by GNU ld <span>[37]</span>, the load address specified by <code>AT</code> is handled by GRUB when loading the kernel, and is part of the ELF format <span>[18]</span>.</p>
<h3 id="higher-half-linker-script"> Higher-half Linker Script</h3>
<p>We can modify the <a href="#linking-the-kernel">first linker script</a> to implement this:</p>
<pre><code>    ENTRY(loader)           /* the name of the entry symbol */

    . = 0xC0100000          /* the code should be relocated to 3GB + 1MB */

    /* align at 4 KB and load at 1 MB */
    .text ALIGN (0x1000) : AT(ADDR(.text)-0xC0000000)
    {
        *(.text)            /* all text sections from all files */
    }

    /* align at 4 KB and load at 1 MB + . */
    .rodata ALIGN (0x1000) : AT(ADDR(.text)-0xC0000000)
    {
        *(.rodata*)         /* all read-only data sections from all files */
    }

    /* align at 4 KB and load at 1 MB + . */
    .data ALIGN (0x1000) : AT(ADDR(.text)-0xC0000000)
    {
        *(.data)            /* all data sections from all files */
    }

    /* align at 4 KB and load at 1 MB + . */
    .bss ALIGN (0x1000) : AT(ADDR(.text)-0xC0000000)
    {
        *(COMMON)           /* all COMMON sections from all files */
        *(.bss)             /* all bss sections from all files */
    }</code></pre>
<h3 id="entering-the-higher-half"> Entering the Higher Half</h3>
<p>When GRUB jumps to the kernel code, there is no paging table. Therefore, all references to <code>0xC0100000 + X</code> won’t be mapped to the correct physical address, and will therefore cause a general protection exception (GPE) at the very best, otherwise (if the computer has more than 3 GB of memory) the computer will just crash.</p>
<p>Therefore, assembly code that doesn’t use relative jumps or relative memory addressing must be used to do the following:</p>
<ul>
<li>Set up a page table.</li>
<li>Add identity mapping for the first 4 MB of the virtual address space.</li>
<li>Add an entry for <code>0xC0100000</code> that maps to <code>0x0010000</code></li>
</ul>
<p>If we skip the identity mapping for the first 4 MB, the CPU would generate a page fault immediately after paging was enabled when trying to fetch the next instruction from memory. After the table has been created, an jump can be done to a label to make <code>eip</code> point to a virtual address in the higher half:</p>
<pre><code>    <span>; assembly code executing at around 0x00100000</span>
    <span>; enable paging for both actual location of kernel</span>
    <span>; and its higher-half virtual location</span>

    <span>lea</span> <span>ebx</span>, [higher_half] <span>; load the address of the label in ebx</span>
    <span>jmp</span> <span>ebx</span>                <span>; jump to the label</span>

<span>    higher_half:</span>
        <span>; code here executes in the higher half kernel</span>
        <span>; eip is larger than 0xC0000000</span>
        <span>; can continue kernel initialisation, calling C code, etc.</span></code></pre>
<p>The register <code>eip</code> will now point to a memory location somewhere right after <code>0xC0100000</code> - all the code can now execute as if it were located at <code>0xC0100000</code>, the higher-half. The entry mapping of the first 4 MB of virtual memory to the first 4 MB of physical memory can now be removed from the page table and its corresponding entry in the TLB invalidated with <code>invlpg [0]</code>.</p>
<h3 id="running-in-the-higher-half"> Running in the Higher Half</h3>
<p>There are a few more details we must deal with when using a higher-half kernel. We must be careful when using memory-mapped I/O that uses specific memory locations. For example, the frame buffer is located at <code>0x000B8000</code>, but since there is no entry in the page table for the address <code>0x000B8000</code> any longer, the address <code>0xC00B8000</code> must be used, since the virtual address <code>0xC0000000</code> maps to the physical address <code>0x00000000</code>.</p>
<p>Any explicit references to addresses within the multiboot structure needs to be changed to reflect the new virtual addresses as well.</p>
<p>Mapping 4 MB pages for the kernel is simple, but wastes memory (unless you have a really big kernel). Creating a higher-half kernel mapped in as 4 KB pages saves memory but is harder to set up. Memory for the page directory and one page table can be reserved in the <code>.data</code> section, but one needs to configure the mappings from virtual to physical addresses at run-time. The size of the kernel can be determined by exporting labels from the linker script <span>[37]</span>, which we’ll need to do later anyway when writing the page frame allocator (see the chapter <a href="#page-frame-allocation">“Page Frame Allocation</a>).</p>
<h2 id="virtual-memory-through-paging"> Virtual Memory Through Paging</h2>
<p>Paging enables two things that are good for virtual memory. First, it allows for fine-grained access control to memory. You can mark pages as read-only, read-write, only for PL0 etc. Second, it creates the illusion of contiguous memory. User mode processes, and the kernel, can access memory as if it were contiguous, and the contiguous memory can be extended without the need to move data around in memory. We can also allow the user mode programs access to all memory below 3 GB, but unless they actually use it, we don’t have to assign page frames to the pages. This allows processes to have code located near <code>0x00000000</code> and the stack at just below <code>0xC0000000</code>, and still not require more than two actual pages.</p>
<h2 id="further-reading-6"> Further Reading</h2>
<ul>
<li>Chapter 4 (and to some extent chapter 3) of the Intel manual <span>[33]</span> are your definitive sources for the details about paging.</li>
<li>Wikipedia has an article on paging: <a href="http://en.wikipedia.org/wiki/Paging">http://en.wikipedia.org/wiki/Paging</a></li>
<li>The OSDev wiki has a page on paging: <a href="http://wiki.osdev.org/Paging">http://wiki.osdev.org/Paging</a> and a tutorial for making a higher-half kernel: <a href="http://wiki.osdev.org/Higher_Half_bare_bones">http://wiki.osdev.org/Higher_Half_bare_bones</a></li>
<li>Gustavo Duarte’s article on how a kernel manages memory is well worth a read: <a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory</a></li>
<li>Details on the linker command language can be found at Steve Chamberlain’s website <span>[37]</span>.</li>
<li>More details on the ELF format can be found in this presentation: <a href="http://flint.cs.yale.edu/cs422/doc/ELF_Format.pdf">http://flint.cs.yale.edu/cs422/doc/ELF_Format.pdf</a></li>
</ul>
<h2 id="page-frame-allocation"> Page Frame Allocation</h2>
<p>When using virtual memory, how does the OS know which parts of memory are free to use? That is the role of the page frame allocator.</p>
<h2 id="managing-available-memory"> Managing Available Memory</h2>
<h3 id="how-much-memory-is-there"> How Much Memory is There?</h3>
<p>First we need to know how much memory is available on the computer the OS is running on. The easiest way to do this is to read it from the multiboot structure <span>[19]</span> passed to us by GRUB. GRUB collects the information we need about the memory - what is reserved, I/O mapped, read-only etc. We must also make sure that we don’t mark the part of memory used by the kernel as free (since GRUB doesn’t mark this memory as reserved). One way to know how much memory the kernel uses is to export labels at the beginning and the end of the kernel binary from the linker script:</p>
<pre><code>    ENTRY(loader)           /* the name of the entry symbol */

    . = 0xC0100000          /* the code should be relocated to 3 GB + 1 MB */

    /* these labels get exported to the code files */
    kernel_virtual_start = .;
    kernel_physical_start = . - 0xC0000000;

    /* align at 4 KB and load at 1 MB */
    .text ALIGN (0x1000) : AT(ADDR(.text)-0xC0000000)
    {
        *(.text)            /* all text sections from all files */
    }

    /* align at 4 KB and load at 1 MB + . */
    .rodata ALIGN (0x1000) : AT(ADDR(.rodata)-0xC0000000)
    {
        *(.rodata*)         /* all read-only data sections from all files */
    }

    /* align at 4 KB and load at 1 MB + . */
    .data ALIGN (0x1000) : AT(ADDR(.data)-0xC0000000)
    {
        *(.data)            /* all data sections from all files */
    }

    /* align at 4 KB and load at 1 MB + . */
    .bss ALIGN (0x1000) : AT(ADDR(.bss)-0xC0000000)
    {
        *(COMMON)           /* all COMMON sections from all files */
        *(.bss)             /* all bss sections from all files */
    }

    kernel_virtual_end = .;
    kernel_physical_end = . - 0xC0000000;</code></pre>
<p>These labels can directly be read from assembly code and pushed on the stack to make them available to C code:</p>
<pre><code>    <span>extern</span> kernel_virtual_start
    <span>extern</span> kernel_virtual_end
    <span>extern</span> kernel_physical_start
    <span>extern</span> kernel_physical_end

    <span>; ...</span>

    <span>push</span> kernel_physical_end
    <span>push</span> kernel_physical_start
    <span>push</span> kernel_virtual_end
    <span>push</span> kernel_virtual_start

    <span>call</span> kmain</code></pre>
<p>This way we get the labels as arguments to <code>kmain</code>. If you want to use C instead of assembly code, one way to do it is to declare the labels as functions and take the addresses of these functions:</p>
<pre><code>    <span>void</span> kernel_virtual_start(<span>void</span>);

    <span>/* ... */</span>

    <span>unsigned</span> <span>int</span> vaddr = (<span>unsigned</span> <span>int</span>) &amp;kernel_virtual_start;</code></pre>
<p>If you use GRUB modules you need to make sure the memory they use is marked as reserved as well.</p>
<p>Note that the available memory does not need to be contiguous. In the first 1 MB there are several I/O-mapped memory sections, as well as memory used by GRUB and the BIOS. Other parts of the memory might be similarly unavailable.</p>
<p>It’s convenient to divide the memory sections into complete page frames, as we can’t map part of pages into memory.</p>
<h3 id="managing-available-memory-1"> Managing Available Memory</h3>
<p>How do we know which page frames are in use? The page frame allocator needs to keep track of which are free and which aren’t. There are several ways to do this: bitmaps, linked lists, trees, the Buddy System (used by Linux) etc. For more information about the different algorithms see the article on OSDev <span>[38]</span>.</p>
<p>Bitmaps are quite easy to implement. One bit is used for each page frame and one (or more) page frames are dedicated to store the bitmap. (Note that this is just one way to do it, other designs might be better and/or more fun to implement.)</p>
<h2 id="how-can-we-access-a-page-frame"> How Can We Access a Page Frame?</h2>
<p>The page frame allocator returns the physical start address of the page frame. This page frame is not mapped in - no page table points to this page frame. How can we read and write data to the frame?</p>
<p>We need to map the page frame into virtual memory, by updating the PDT and/or PT used by the kernel. What if all available page tables are full? Then we can’t map the page frame into memory, because we’d need a new page table - which takes up an entire page frame - and to write to this page frame we’d need to map its page frame… Somehow this circular dependency must be broken.</p>
<p>One solution is to reserve a part of the first page table used by the kernel (or some other higher-half page table) for temporarily mapping page frames to make them accessible. If the kernel is mapped at <code>0xC0000000</code> (page directory entry with index 768), and 4 KB page frames are used, then the kernel has at least one page table. If we assume - or limit us to - a kernel of size at most 4 MB minus 4 KB we can dedicate the last entry (entry 1023) of this page table for temporary mappings. The virtual address of pages mapped in using the last entry of the kernel’s PT will be:</p>
<pre><code>    (768 &lt;&lt; 22) | (1023 &lt;&lt; 12) | 0x000 = 0xC03FF000</code></pre>
<p>After we’ve temporarily mapped the page frame we want to use as a page table, and set it up to map in our first page frame, we can add it to the paging directory, and remove the temporary mapping.</p>
<h2 id="a-kernel-heap"> A Kernel Heap</h2>
<p>So far we’ve only been able to work with fixed-size data, or directly with raw memory. Now that we have a page frame allocator we can implement <code>malloc</code> and <code>free</code> to use in the kernel.</p>
<p>Kernighan and Ritchie <span>[8]</span> have an example implementation in their book <span>[8]</span> that we can draw inspiration from. The only modification we need to do is to replace calls to <code>sbrk</code>/<code>brk</code> with calls to the page frame allocator when more memory is needed. We must also make sure to map the page frames returned by the page frame allocator to virtual addresses. A correct implementation should also return page frames to the page frame allocator on call to <code>free</code>, whenever sufficiently large blocks of memory are freed.</p>
<h2 id="further-reading-7"> Further reading</h2>
<ul>
<li>The OSDev wiki page on page frame allocation: <a href="http://wiki.osdev.org/Page_Frame_Allocation">http://wiki.osdev.org/Page_Frame_Allocation</a></li>
</ul>
<h2 id="user-mode"> User Mode</h2>
<p>User mode is now almost within our reach, there are just a few more steps required to get there. Although these steps might seem easy they way they are presented in this chapter, they can be tricky to implement, since there are a lot of places where small errors will cause bugs that are hard to find.</p>
<h2 id="segments-for-user-mode"> Segments for User Mode</h2>
<p>To enable user mode we need to add two more segments to the GDT. They are very similar to the kernel segments we added when we <a href="#the-global-descriptor-table-gdt">set up the GDT</a> in the <a href="#segmentation">chapter about segmentation</a>:</p>
<table>
<caption>The segment descriptors needed for user mode.</caption>
<thead>
<tr>
<th>Index</th>
<th>Offset</th>
<th>Name</th>
<th>Address range</th>
<th>Type</th>
<th>DPL</th>
</tr>
</thead>
<tbody>
<tr>
<td>3</td>
<td><code>0x18</code></td>
<td>user code segment</td>
<td><code>0x00000000 - 0xFFFFFFFF</code></td>
<td>RX</td>
<td>PL3</td>
</tr>
<tr>
<td>4</td>
<td><code>0x20</code></td>
<td>user data segment</td>
<td><code>0x00000000 - 0xFFFFFFFF</code></td>
<td>RW</td>
<td>PL3</td>
</tr>
</tbody>
</table>
<p>The difference is the DPL, which now allows code to execute in PL3. The segments can still be used to address the entire address space, just using these segments for user mode code will not protect the kernel. For that we need paging.</p>
<h2 id="setting-up-for-user-mode"> Setting Up For User Mode</h2>
<p>There are a few things every user mode process needs:</p>
<ul>
<li><p>Page frames for code, data and stack. At the moment it suffices to allocate one page frame for the stack and enough page frames to fit the program’s code. Don’t worry about setting up a stack that can be grow and shrink at this point in time, focus on getting a basic implementation work first.</p></li>
<li><p>The binary from the GRUB module has to be copied to the page frames used for the programs code.</p></li>
<li><p>A page directory and page tables are needed to map the page frames described above into memory. At least two page tables are needed, because the code and data should be mapped in at <code>0x00000000</code> and increasing, and the stack should start just below the kernel, at <code>0xBFFFFFFB</code>, growing towards lower addresses. The U/S flag has to be set to allow PL3 access.</p></li>
</ul>
<p>It might be convenient to store this information in a <code>struct</code> representing a process. This process <code>struct</code> can be dynamically allocated with the kernel’s <code>malloc</code> function.</p>
<h2 id="entering-user-mode"> Entering User Mode</h2>
<p>The only way to execute code with a lower privilege level than the current privilege level (CPL) is to execute an <code>iret</code> or <code>lret</code> instruction - interrupt return or long return, respectively.</p>
<p>To enter user mode we set up the stack as if the processor had raised an inter-privilege level interrupt. The stack should look like the following:</p>
<pre><code>    [esp + 16]  ss      ; the stack segment selector we want for user mode
    [esp + 12]  esp     ; the user mode stack pointer
    [esp +  8]  eflags  ; the control flags we want to use in user mode
    [esp +  4]  cs      ; the code segment selector
    [esp +  0]  eip     ; the instruction pointer of user mode code to execute</code></pre>
<p>See the Intel manual <span>[33]</span>, section 6.2.1, figure 6-4 for more information.</p>
<p>The instruction <code>iret</code> will then read these values from the stack and fill in the corresponding registers. Before we execute <code>iret</code> we need to change to the page directory we setup for the user mode process. It is important to remember that to continue executing kernel code after we’ve switched PDT, the kernel needs to be mapped in. One way to accomplish this is to have a separate PDT for the kernel, which maps all data at <code>0xC0000000</code> and above, and merge it with the user PDT (which only maps below <code>0xC0000000</code>) when performing the switch. Remember that physical address of the PDT has to be used when setting the register <code>cr3</code>.</p>
<p>The register <code>eflags</code> contains a set of different flags, specified in section 2.3 of the Intel manual <span>[33]</span>. Most important for us is the interrupt enable (IF) flag. The assembly code instruction <code>sti</code> can’t be used in privilege level 3 for enabling interrupts. If interrupts are disabled when entering user mode, then interrupts can’t enabled once user mode is entered. Setting the IF flag in the <code>eflags</code> entry on the stack will enable interrupts in user mode, since the assembly code instruction <code>iret</code> will set the register <code>eflags</code> to the corresponding value on the stack.</p>
<p>For now, we should have interrupts disabled, as it requires a little more work to get inter-privilege level interrupts to work properly (see the section <a href="#system-calls">“System calls”</a>).</p>
<p>The value <code>eip</code> on the stack should point to the entry point for the user code - <code>0x00000000</code> in our case. The value <code>esp</code> on the stack should be where the stack starts - <code>0xBFFFFFFB</code> (<code>0xC0000000 - 4</code>).</p>
<p>The values <code>cs</code> and <code>ss</code> on the stack should be the segment selectors for the user code and user data segments, respectively. As we saw in the <a href="#creating-and-loading-the-gdt">segmentation chapter</a>, the lowest two bits of a segment selector is the RPL - the Requested Privilege Level. When using <code>iret</code> to enter PL3, the RPL of <code>cs</code> and <code>ss</code> should be <code>0x3</code>. The following code shows an example:</p>
<pre><code>    USER_MODE_CODE_SEGMENT_SELECTOR <span>equ</span><span> 0x18</span>
    USER_MODE_DATA_SEGMENT_SELECTOR <span>equ</span><span> 0x20</span>
    <span>mov</span> <span>cs</span>, USER_MODE_CODE_SEGMENT_SELECTOR |<span> 0x3</span>
    <span>mov</span> <span>ss</span>, USER_MODE_DATA_SEGMENT_SELECTOR |<span> 0x3</span></code></pre>
<p>The register <code>ds</code>, and the other data segment registers, should be set to the same segment selector as <code>ss</code>. They can be set the ordinary way, with the <code>mov</code> assembly code instruction.</p>
<p>We are now ready to execute <code>iret</code>. If everything has been set up right, we should now have a kernel that can enter user mode.</p>
<h2 id="using-c-for-user-mode-programs"> Using C for User Mode Programs</h2>
<p>When C is used as the programming language for user mode programs, it is important to think about the structure of the file that will be the result of the compilation.</p>
<p>The reason we can use ELF <span>[18]</span> as the file format for for the kernel executable is because GRUB knows how to parse and interpret the ELF file format. If we implemented an ELF parser, we could compile the user mode programs into ELF binaries as well. We leave this as an exercise for the reader.</p>
<p>One thing we can do to make it easier to develop user mode programs is to allow the programs to be written in C, but compile them to flat binaries instead of ELF binaries. In C the layout of the generated code is more unpredictable and the entry point, <code>main</code>, might not be at offset 0 in the binary. One common way to work around this is to add a few assembly code lines placed at offset 0 which calls <code>main</code>:</p>
<pre><code>    <span>extern</span> main

    <span>section</span> .text
        <span>; push argv</span>
        <span>; push argc</span>
        <span>call</span> main
        <span>; main has returned, eax is return value</span>
        <span>jmp</span>  <span>$</span>    <span>; loop forever</span></code></pre>
<p>If this code is saved in a file called <code>start.s</code>, then the following code show an example of a linker script that places these instructions first in executable (remember that <code>start.s</code> gets compiled to <code>start.o</code>):</p>
<pre><code>    OUTPUT_FORMAT("binary")    /* output flat binary */

    SECTIONS
    {
        . = 0;                 /* relocate to address 0 */

        .text ALIGN(4):
        {
            start.o(.text)     /* include the .text section of start.o */
            *(.text)           /* include all other .text sections */
        }

        .data ALIGN(4):
        {
            *(.data)
        }

        .rodata ALIGN(4):
        {
            *(.rodata*)
        }
    }</code></pre>
<p><em>Note</em>: <code>*(.text)</code> will not include the <code>.text</code> section of <code>start.o</code> again.</p>
<p>With this script we can write programs in C or assembler (or any other language that compiles to object files linkable with <code>ld</code>), and it is easy to load and map for the kernel (<code>.rodata</code> will be mapped in as writeable, though).</p>
<p>When we compile user programs we want the following GCC flags:</p>
<pre><code>    -m32 -nostdlib -nostdinc -fno-builtin -fno-stack-protector -nostartfiles
    -nodefaultlibs</code></pre>
<p>For linking, the followings flags should be used:</p>
<pre><code>    -T link.ld -melf_i386  # emulate 32 bits ELF, the binary output is specified
                           # in the linker script</code></pre>
<p>The option <code>-T</code> instructs the linker to use the linker script <code>link.ld</code>.</p>
<h3 id="a-c-library"> A C Library</h3>
<p>It might now be interesting to start thinking about writing a small “standard library” for your programs. Some of the functionality requires <a href="#system-calls">system calls</a> to work, but some, such as the functions in <code>string.h</code>, does not.</p>
<h2 id="further-reading-8"> Further Reading</h2>
<ul>
<li>Gustavo Duarte has an article on privilege levels: <a href="http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection">http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection</a></li>
</ul>
<h2 id="file-systems"> File Systems</h2>
<p>We are not required to have file systems in our operating system, but it is a very usable abstraction, and it often plays a central part of many operating systems, especially UNIX-like operating systems. Before we start the process of supporting multiple processes and system calls we might want to consider implementing a simple file system.</p>
<h2 id="why-a-file-system"> Why a File System?</h2>
<p>How do we specify what programs to run in our OS? Which is the first program to run? How do programs output data or read input?</p>
<p>In UNIX-like systems, with their almost-everything-is-a-file convention, these problems are solved by the file system. (It might also be interesting to read a bit about the Plan 9 project, which takes this idea one step further.)</p>
<h2 id="a-simple-read-only-file-system"> A Simple Read-Only File System</h2>
<p>The simplest file system might be what we already have - one file, existing only in RAM, loaded by GRUB before the kernel starts. When the kernel and operating system grows this is probably too limiting.</p>
<p>A file system that is slightly more advanced than just the bits of one file is a file with metadata. The metadata can describe the type of the file, the size of the file and so on. A utility program can be created that runs at build time, adding this metadata to a file. This way, a “file system in a file” can be constructed by concatenating several files with metadata into one large file. The result of this technique is a read-only file system that resides in memory (once GRUB has loaded the file).</p>
<p>The program constructing the file system can traverse a directory on the host system and add all subdirectories and files as part of the target file system. Each object in the file system (directory or file) can consist of a header and a body, where the body of a file is the actual file and the body of a directory is a list of entries - names and “addresses” of other files and directories.</p>
<p>Each object in this file system will become contiguous, so they will be easy to read from memory for the kernel. All objects will also have a fixed size (except for the last one, which can grow), therefore it is difficult to add new files or modify existing ones.</p>
<h2 id="inodes-and-writable-file-systems"> Inodes and Writable File Systems</h2>
<p>When the need for a writable file system arises, then it is a good idea to look into the concept of an <em>inode</em>. See the section <a href="#further-reading-6">“Further Reading”</a> for recommended reading.</p>
<h2 id="a-virtual-file-system"> A Virtual File System</h2>
<p>What abstraction should be used for reading and writing to devices such as the screen and the keyboard?</p>
<p>A virtual file system (VFS) creates an abstraction on top of the concrete file systems. A VFS mainly supplies the path system and file hierarchy, it delegates operations on files to the underlying file systems. The original paper on VFS is succinct and well worth a read. See the section <a href="#further-reading-6">“Further Reading”</a> for a reference.</p>
<p>With a VFS we could mount a special file system on the path <code>/dev</code>. This file system would handle all devices such as keyboards and the console. However, one could also take the traditional UNIX approach, with major/minor device numbers and <code>mknod</code> to create special files for devices. Which approach you think is the most appropriate is up to you, there is no right or wrong when building abstraction layers (although some abstractions turn out way more useful than others).</p>
<h2 id="further-reading-9"> Further Reading</h2>
<ul>
<li>The ideas behind the Plan 9 operating systems is worth taking a look at: <a href="http://plan9.bell-labs.com/plan9/index.html">http://plan9.bell-labs.com/plan9/index.html</a></li>
<li>Wikipedia’s page on inodes: <a href="http://en.wikipedia.org/wiki/Inode">http://en.wikipedia.org/wiki/Inode</a> and the inode pointer structure: <a href="http://en.wikipedia.org/wiki/Inode_pointer_structure">http://en.wikipedia.org/wiki/Inode_pointer_structure</a>.</li>
<li>The original paper on the concept of vnodes and a virtual file system is quite interesting: <a href="http://www.arl.wustl.edu/~fredk/Courses/cs523/fall01/Papers/kleiman86vnodes.pdf">http://www.arl.wustl.edu/~fredk/Courses/cs523/fall01/Papers/kleiman86vnodes.pdf</a></li>
<li>Poul-Henning Kamp discusses the idea of a special file system for <code>/dev</code> in <a href="http://static.usenix.org/publications/library/proceedings/bsdcon02/full_papers/kamp/kamp_html/index.html">http://static.usenix.org/publications/library/proceedings/bsdcon02/full_papers/kamp/kamp_html/index.html</a></li>
</ul>
<h2 id="system-calls"> System Calls</h2>
<p><em>System calls</em> is the way user-mode applications interact with the kernel - to ask for resources, request operations to be performed, etc. The system call API is the part of the kernel that is most exposed to the users, therefore its design requires some thought.</p>
<h2 id="designing-system-calls"> Designing System Calls</h2>
<p>It is up to us, the kernel developers, to design the system calls that application developers can use. We can draw inspiration from the POSIX standards or, if they seem like too much work, just look at the ones for Linux, and pick and choose. See the section <a href="#further-reading-7">“Further Reading”</a> at the end of the chapter for references.</p>
<h2 id="implementing-system-calls"> Implementing System Calls</h2>
<p>System calls are traditionally invoked with software interrupts. The user applications put the appropriate values in registers or on the stack and then initiates a pre-defined interrupt which transfers execution to the kernel. The interrupt number used is dependent on the kernel, Linux uses the number <code>0x80</code> to identify that an interrupt is intended as a system call.</p>
<p>When system calls are executed, the current privilege level is typically changed from PL3 to PL0 (if the application is running in user mode). To allow this, the DPL of the entry in the IDT for the system call interrupt needs to allow PL3 access.</p>
<p>Whenever inter-privilege level interrupts occur, the processor pushes a few important registers onto the stack - the same ones we used to enter user mode <a href="#user-mode">before</a>, see figure 6-4, section 6.12.1, in the Intel manual <span>[33]</span>. What stack is used? The same section in <span>[33]</span> specifies that if an interrupt leads to code executing at a numerically lower privilege level, a stack switch occurs. The new values for the registers <code>ss</code> and <code>esp</code> is loaded from the current Task State Segment (TSS). The TSS structure is specified in figure 7-2, section 7.2.1 of the Intel manual <span>[33]</span>.</p>
<p>To enable system calls we need to setup a TSS before entering user mode. Setting it up can be done in C by setting the <code>ss0</code> and <code>esp0</code> fields of a “packed struct” that represents a TSS. Before loading the “packed struct” into the processor, a TSS descriptor has to be added to the GDT. The structure of the TSS descriptor is described in section 7.2.2 in <span>[33]</span>.</p>
<p>You specify the current TSS segment selector by loading it into the <code>tr</code> register with the <code>ltr</code> assembly code instruction. If the TSS segment descriptor has index 5, and thus offset <code>5 * 8 = 40 = 0x28</code>, this is the value that should be loaded into the register <code>tr</code>.</p>
<p>When we entered user mode before in the chapter <a href="#entering-user-mode">“Entering User Mode”</a> we disabled interrupts when executing in PL3. Since system calls are implemented using interrupts, interrupts must be enabled in user mode. Setting the IF flag bit in the <code>eflags</code> value on the stack will make <code>iret</code> enable interrupts (since the <code>eflags</code> value on the stack will be loaded into the <code>eflags</code> register by the assembly code instruction <code>iret</code>).</p>
<h2 id="further-reading-10"> Further Reading</h2>
<ul>
<li>The Wikipedia page on POSIX, with links to the specifications: <a href="http://en.wikipedia.org/wiki/POSIX">http://en.wikipedia.org/wiki/POSIX</a></li>
<li>A list of system calls used in Linux: <a href="http://bluemaster.iu.hio.no/edu/dark/lin-asm/syscalls.html">http://bluemaster.iu.hio.no/edu/dark/lin-asm/syscalls.html</a></li>
<li>The Wikipedia page on system calls: <a href="http://en.wikipedia.org/wiki/System_call">http://en.wikipedia.org/wiki/System_call</a></li>
<li>The Intel manual <span>[33]</span> sections on interrupts (chapter 6) and TSS (chapter 7) are where you get all the details you need.</li>
</ul>
<h2 id="multitasking"> Multitasking</h2>
<p>How do you make multiple processes appear to run at the same time? Today, this question has two answers:</p>
<ul>
<li>With the availability of multi-core processors, or on system with multiple processors, two processes can actually run at the same time by running two processes on different cores or processors.</li>
<li>Fake it. That is, switch rapidly (faster than a human can notice) between the processes. At any given moment there is only one process executing, but the rapid switching gives the impression that they are running “at the same time”.</li>
</ul>
<p>Since the operating system created in this book does not support multi-core processors or multiple processors the only option is to fake it. The part of the operating system responsible for rapidly switching between the processes is called the <em>scheduling algorithm</em>.</p>
<h2 id="creating-new-processes"> Creating New Processes</h2>
<p>Creating new processes is usually done with two different system calls: <code>fork</code> and <code>exec</code>. <code>fork</code> creates an exact copy of the currently running process, while <code>exec</code> replaces the current process with one that is specified by a path to the location of a program in the file system. Of these two we recommend that you start implementing <code>exec</code>, since this system call will do almost exactly the same steps as described in the section <a href="#setting-up-for-user-mode">“Setting up for user mode”</a> in the chapter <a href="#user-mode">“User Mode”</a>.</p>
<h2 id="cooperative-scheduling-with-yielding"> Cooperative Scheduling with Yielding</h2>
<p>The easiest way to achieve rapid switching between processes is if the processes themselves are responsible for the switching. The processes run for a while and then tell the OS (via a system call) that it can now switch to another process. Giving up the control of CPU to another process is called <em>yielding</em> and when the processes themselves are responsible for the scheduling it’s called <em>cooperative scheduling</em>, since all the processes must cooperate with each other.</p>
<p>When a process yields the process’ entire state must be saved (all the registers), preferably on the kernel heap in a structure that represents a process. When changing to a new process all the registers must be restored from the saved values.</p>
<p>Scheduling can be implemented by keeping a list of which processes are running. The system call <code>yield</code> should then run the next process in the list and put the current one last (other schemes are possible, but this is a simple one).</p>
<p>The transfer of control to the new process is done via the <code>iret</code> assembly code instruction in exactly the same way as explained in the section <a href="#entering-user-mode">“Entering user mode”</a> in the chapter <a href="#user-mode">“User Mode”</a>.</p>
<p>We <strong>strongly</strong> recommend that you start to implement support for multiple processes by implementing cooperative scheduling. We further recommend that you have a working solution for both <code>exec</code>, <code>fork</code> and <code>yield</code> before implementing preemptive scheduling. Since cooperative scheduling is deterministic, it is much easier to debug than preemptive scheduling.</p>
<h2 id="preemptive-scheduling-with-interrupts"> Preemptive Scheduling with Interrupts</h2>
<p>Instead of letting the processes themselves manage when to change to another process the OS can switch processes automatically after a short period of time. The OS can set up the <em>programmable interval timer</em> (PIT) to raise an interrupt after a short period of time, for example 20 ms. In the interrupt handler for the PIT interrupt the OS will change the running process to a new one. This way the processes themselves don’t need to worry about scheduling. This kind of scheduling is called <em>preemptive scheduling</em>.</p>
<h3 id="programmable-interval-timer"> Programmable Interval Timer</h3>
<p>To be able to do preemptive scheduling the PIT must first be configured to raise interrupts every <em>x</em> milliseconds, where <em>x</em> should be configurable.</p>
<p>The configuration of the PIT is very similar to the configuration of other hardware devices: a byte is sent to an I/O port. The command port of the PIT is <code>0x43</code>. To read about all the configuration options, see the article about the PIT on OSDev <span>[39]</span>. We use the following options:</p>
<ul>
<li>Raise interrupts (use channel 0)</li>
<li>Send the divider as low byte then high byte (see next section for an explanation)</li>
<li>Use a square wave</li>
<li>Use binary mode</li>
</ul>
<p>This results in the configuration byte <code>00110110</code>.</p>
<p>Setting the interval for how often interrupts are to be raised is done via a <em>divider</em>, the same way as for the serial port. Instead of sending the PIT a value (e.g.&nbsp;in milliseconds) that says how often an interrupt should be raised you send the divider. The PIT operates at 1193182 Hz as default. Sending the divider 10 results in the PIT running at <code>1193182 / 10 = 119318</code> Hz. The divider can only be 16 bits, so it is only possible to configure the timer’s frequency between 1193182 Hz and <code>1193182 / 65535 = 18.2</code> Hz. We recommend that you create a function that takes an interval in milliseconds and converts it to the correct divider.</p>
<p>The divider is sent to the channel 0 data I/O port of the PIT, but since only one byte can be sent at at a time, the lowest 8 bits of the divider has to sent first, then the highest 8 bits of the divider can be sent. The channel 0 data I/O port is located at <code>0x40</code>. Again, see the article on OSDev <span>[39]</span> for more details.</p>
<h3 id="separate-kernel-stacks-for-processes"> Separate Kernel Stacks for Processes</h3>
<p>If all processes uses the same kernel stack (the stack exposed by the TSS) there will be trouble if a process is interrupted while still in kernel mode. The process that is being switched to will now use the same kernel stack and will overwrite what the previous process have written on the stack (remember that TSS data structure points to the <em>beginning</em> of the stack).</p>
<p>To solve this problem every process should have it’s own kernel stack, the same way that each process have their own user mode stack. When switching process the TSS must be updated to point to the new process’ kernel stack.</p>
<h3 id="difficulties-with-preemptive-scheduling"> Difficulties with Preemptive Scheduling</h3>
<p>When using preemptive scheduling one problem arises that doesn’t exist with cooperative scheduling. With cooperative scheduling every time a process yields, it must be in user mode (privilege level 3), since yield is a system call. With preemptive scheduling, the processes can be interrupted in either user mode or kernel mode (privilege level 0), since the process itself does not control when it gets interrupted.</p>
<p>Interrupting a process in kernel mode is a little bit different than interrupting a process in user mode, due to the way the CPU sets up the stack at interrupts. If a privilege level change occurred (the process was interrupted in user mode) the CPU will push the value of the process <code>ss</code> and <code>esp</code> register on the stack. If <em>no</em> privilege level change occurs (the process was interrupted in kernel mode) the CPU won’t push the <code>esp</code> register on the stack. Furthermore, if there was no privilege level change, the CPU won’t change stack to the one defined it the TSS.</p>
<p>This problem is solved by calculating what the value of <code>esp</code> was <em>before</em> the interrupt. Since you know that the CPU pushes 3 things on the stack when no privilege change happens and you know how much you have pushed on the stack, you can calculate what the value of <code>esp</code> was at the time of the interrupt. This is possible since the CPU won’t change stacks if there is no privilege level change, so the content of <code>esp</code> will be the same as at the time of the interrupt.</p>
<p>To further complicate things, one must think of how to handle case when switching to a new process that should be running in kernel mode. Since <code>iret</code> is being used without a privilege level change the CPU won’t update the value of <code>esp</code> with the one placed on the stack - you must update <code>esp</code> yourself.</p>
<h2 id="further-reading-11"> Further Reading</h2>
<ul>
<li>For more information about different scheduling algorithms, see <a href="http://wiki.osdev.org/Scheduling_Algorithms">http://wiki.osdev.org/Scheduling_Algorithms</a></li>
</ul>
<div>
<h2> References</h2>
<p>[1] Andrew Tanenbaum, 2007. <em>Modern operating systems, 3rd edition</em>. Prentice Hall, Inc.,</p>
<p>[2] <em>The royal institute of technology</em>, <a href="http://www.kth.se/">http://www.kth.se</a>,</p>
<p>[3] Wikipedia, <em>Hexadecimal</em>, <a href="http://en.wikipedia.org/wiki/Hexadecimal">http://en.wikipedia.org/wiki/Hexadecimal</a>,</p>
<p>[4] OSDev, <em>OSDev</em>, <a href="http://wiki.osdev.org/Main_Page">http://wiki.osdev.org/Main_Page</a>,</p>
<p>[5] James Molloy, <em>James m’s kernel development tutorial</em>, <a href="http://www.jamesmolloy.co.uk/tutorial_html/">http://www.jamesmolloy.co.uk/tutorial_html/</a>,</p>
<p>[6] Canonical Ltd, <em>Ubuntu</em>, <a href="http://www.ubuntu.com/">http://www.ubuntu.com/</a>,</p>
<p>[7] Oracle, <em>Oracle vM virtualBox</em>, <a href="http://www.virtualbox.org/">http://www.virtualbox.org/</a>,</p>
<p>[8] Dennis M. Ritchie Brian W. Kernighan, 1988. <em>The c programming language, second edition</em>. Prentice Hall, Inc.,</p>
<p>[9] Wikipedia, <em>C (programming language)</em>, <a href="http://en.wikipedia.org/wiki/C_(programming_language)">http://en.wikipedia.org/wiki/C_(programming_language)</a>,</p>
<p>[10] Free Software Foundation, <em>GCC, the gNU compiler collection</em>, <a href="http://gcc.gnu.org/">http://gcc.gnu.org/</a>,</p>
<p>[11] NASM, <em>NASM: The netwide assembler</em>, <a href="http://www.nasm.us/">http://www.nasm.us/</a>,</p>
<p>[12] Wikipedia, <em>Bash</em>, <a href="http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29">http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29</a>,</p>
<p>[13] Free Software Foundation, <em>GNU make</em>, <a href="http://www.gnu.org/software/make/">http://www.gnu.org/software/make/</a>,</p>
<p>[14] Volker Ruppert, <em>bochs: The open souce iA-32 emulation project</em>, <a href="http://bochs.sourceforge.net/">http://bochs.sourceforge.net/</a>,</p>
<p>[15] QEMU, <em>QEMU</em>, <a href="http://wiki.qemu.org/Main_Page">http://wiki.qemu.org/Main_Page</a>,</p>
<p>[16] Wikipedia, <em>BIOS</em>, <a href="https://en.wikipedia.org/wiki/BIOS">https://en.wikipedia.org/wiki/BIOS</a>,</p>
<p>[17] Free Software Foundation, <em>GNU gRUB</em>, <a href="http://www.gnu.org/software/grub/">http://www.gnu.org/software/grub/</a>,</p>
<p>[18] Wikipedia, <em>Executable and linkable format</em>, <a href="http://en.wikipedia.org/wiki/Executable_and_Linkable_Format">http://en.wikipedia.org/wiki/Executable_and_Linkable_Format</a>,</p>
<p>[19] Free Software Foundation, <em>Multiboot specification version 0.6.96</em>, <a href="http://www.gnu.org/software/%20%20%20%20%20%20%20%20%20%20%20grub/manual/multiboot/multiboot.html">http://www.gnu.org/software/
           grub/manual/multiboot/multiboot.html</a>,</p>
<p>[20] GNU, <em>GNU binutils</em>, <a href="http://www.gnu.org/software/binutils/">http://www.gnu.org/software/binutils/</a>,</p>
<p>[21] Lars Nodeen, <em>Bug #426419: configure: error: GRUB requires a working absolute objcopy</em>, <a href="https://bugs.launchpad.net/ubuntu/+source/grub/+bug/426419">https://bugs.launchpad.net/ubuntu/+source/grub/+bug/426419</a>,</p>
<p>[22] Wikipedia, <em>ISO image</em>, <a href="http://en.wikipedia.org/wiki/ISO_image">http://en.wikipedia.org/wiki/ISO_image</a>,</p>
<p>[23] Bochs, <em>bochsrc</em>, <a href="http://bochs.sourceforge.net/doc/docbook/user/bochsrc.html">http://bochs.sourceforge.net/doc/docbook/user/bochsrc.html</a>,</p>
<p>[24] NASM, <em>RESB and friends: Declaring uninitialized data</em>, <a href="http://www.nasm.us/doc/nasmdoc3.htm">http://www.nasm.us/doc/nasmdoc3.htm</a>,</p>
<p>[25] Wikipedia, <em>x86 calling conventions</em>, <a href="http://en.wikipedia.org/wiki/X86_calling_conventions">http://en.wikipedia.org/wiki/X86_calling_conventions</a>,</p>
<p>[26] Wikipedia, <em>Framebuffer</em>, <a href="http://en.wikipedia.org/wiki/Framebuffer">http://en.wikipedia.org/wiki/Framebuffer</a>,</p>
<p>[27] Wikipedia, <em>VGA-compatible text mode</em>, <a href="http://en.wikipedia.org/wiki/VGA-compatible_text_mode">http://en.wikipedia.org/wiki/VGA-compatible_text_mode</a>,</p>
<p>[28] Wikipedia, <em>ASCII</em>, <a href="https://en.wikipedia.org/wiki/Ascii">https://en.wikipedia.org/wiki/Ascii</a>,</p>
<p>[29] OSDev, <em>VGA hardware</em>, <a href="http://wiki.osdev.org/VGA_Hardware">http://wiki.osdev.org/VGA_Hardware</a>,</p>
<p>[30] Wikipedia, <em>Serial port</em>, <a href="http://en.wikipedia.org/wiki/Serial_port">http://en.wikipedia.org/wiki/Serial_port</a>,</p>
<p>[31] OSDev, <em>Serial ports</em>, <a href="http://wiki.osdev.org/Serial_ports">http://wiki.osdev.org/Serial_ports</a>,</p>
<p>[32] WikiBooks, <em>Serial programming/8250 uART programming</em>, <a href="http://en.wikibooks.org/wiki/Serial_Programming/%20%20%20%20%20%208250_UART_Programming">http://en.wikibooks.org/wiki/Serial_Programming/
      8250_UART_Programming</a>,</p>
<p>[33] Intel, <em>Intel 64 and iA-32 architectures software developer’s manual vol. 3A</em>, <a href="http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html/">http://www.intel.com/content/
www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html/</a>,</p>
<p>[34] NASM, <em>Multi-line macros</em>, <a href="http://www.nasm.us/doc/nasmdoc4.html#section-4.3">http://www.nasm.us/doc/nasmdoc4.html#section-4.3</a>,</p>
<p>[35] SIGOPS, <em>i386 interrupt handling</em>, <a href="http://www.acm.uiuc.edu/sigops/roll_your_own/i386/irq.html">http://www.acm.uiuc.edu/sigops/roll_your_own/i386/irq.html</a>,</p>
<p>[36] Andries Brouwer, <em>Keyboard scancodes</em>, <a href="http://www.win.tue.nl/">http://www.win.tue.nl/</a>,</p>
<p>[37] Steve Chamberlain, <em>Using ld, the gNU linker</em>, <a href="http://www.math.utah.edu/docs/info/ld_toc.html">http://www.math.utah.edu/docs/info/ld_toc.html</a>,</p>
<p>[38] OSDev, <em>Page frame allocation</em>, <a href="http://wiki.osdev.org/Page_Frame_Allocation">http://wiki.osdev.org/Page_Frame_Allocation</a>,</p>
<p>[39] OSDev, <em>Programmable interval timer</em>, <a href="http://wiki.osdev.org/Programmable_Interval_Timer">http://wiki.osdev.org/Programmable_Interval_Timer</a>,</p>
</div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pen and Paper Exercises in Machine Learning (2022) (285 pts)]]></title>
            <link>https://arxiv.org/abs/2206.13446</link>
            <guid>43440267</guid>
            <pubDate>Fri, 21 Mar 2025 20:07:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2206.13446">https://arxiv.org/abs/2206.13446</a>, See on <a href="https://news.ycombinator.com/item?id=43440267">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2206.13446">View PDF</a></p><blockquote>
            <span>Abstract:</span>This is a collection of (mostly) pen-and-paper exercises in machine learning. The exercises are on the following topics: linear algebra, optimisation, directed graphical models, undirected graphical models, expressive power of graphical models, factor graphs and message passing, inference for hidden Markov models, model-based learning (including ICA and unnormalised models), sampling and Monte-Carlo integration, and variational inference.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Michael Gutmann [<a href="https://arxiv.org/show-email/abaa720a/2206.13446" rel="nofollow">view email</a>]      <br>    <strong>[v1]</strong>
        Mon, 27 Jun 2022 16:53:18 UTC (1,679 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I want a good parallel computer (126 pts)]]></title>
            <link>https://raphlinus.github.io/gpu/2025/03/21/good-parallel-computer.html</link>
            <guid>43440174</guid>
            <pubDate>Fri, 21 Mar 2025 19:55:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://raphlinus.github.io/gpu/2025/03/21/good-parallel-computer.html">https://raphlinus.github.io/gpu/2025/03/21/good-parallel-computer.html</a>, See on <a href="https://news.ycombinator.com/item?id=43440174">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <p>The GPU in your computer is about 10 to 100 times more powerful than the CPU, depending on workload. For real-time graphics rendering and machine learning, you are enjoying that power, and doing those workloads on a CPU is not viable. Why aren’t we exploiting that power for other workloads? What prevents a GPU from being a more general purpose computer?</p>

<p>I believe there are two main things holding it back. One is an impoverished execution model, which makes certain tasks difficult or impossible to do efficiently; GPUs excel at big blocks of data with predictable shape, such as dense matrix multiplication, but struggle when the workload is dynamic. Second, our languages and tools are inadequate. Programming a parallel computer is just a lot harder.</p>

<p>Modern GPUs are also extremely complex, and getting more so rapidly. New features such as mesh shaders and work graphs are two steps forward one step back; for each new capability there is a basic task that isn’t fully supported.</p>

<p>I believe a simpler, more powerful parallel computer is possible, and that there are signs in the historical record. In a slightly alternate universe, we would have those computers now, and be doing the work of designing algorithms and writing programs to run well on them, for a very broad range of tasks.</p>

<p>Last April, I gave a <a href="https://www.youtube.com/watch?v=c52ziyKOArc">colloquium</a> (video) at the UCSC CSE program with the same title. This blog is a companion to that.</p>

<h2 id="memory-efficiency-of-sophisticated-gpu-programs">Memory efficiency of sophisticated GPU programs</h2>

<p>I’ve been working on Vello, an advanced 2D vector graphics renderer, for many years. The CPU uploads a scene description in a simplified binary SVG-like format, then the compute shaders take care of the rest, producing a 2D rendered image at the end. The compute shaders <a href="https://arxiv.org/abs/2205.11659">parse</a> tree structures, do advanced computational geometry for <a href="https://linebender.org/gpu-stroke-expansion-paper/">stroke expansion</a>, and sorting-like algorithms for binning. Internally, it’s essentially a simple compiler, producing a separate optimized byte-code like program for each 16x16 pixel tile, then interpreting those programs. What it cannot do, a problem I am increasingly frustrated by, is run in bounded memory. Each stage produces intermediate data structures, and the number and size of these structures depends on the input in an unpredictable way. For example, changing a single transform in the encoded scene can result in profoundly different rendering plans.</p>

<p>The problem is that the buffers for the intermediate results need to be allocated (under CPU control) before kicking off the pipeline. There are a number of imperfect potential solutions. We could estimate memory requirements on the CPU before starting a render, but that’s expensive and may not be precise, resulting either in failure or waste. We could try a render, detect failure, and retry if buffers were exceeded, but doing readback from GPU to CPU is a big performance problem, and creates a significant architectural burden on other engines we’d interface with.</p>

<p>The details of the specific problem are interesting but beyond the scope of this blog post. The interested reader is directed to the <a href="https://docs.google.com/document/d/1gEqf7ehTzd89Djf_VpkL0B_Fb15e0w5fuv_UzyacAPU/edit?usp=sharing">Potato</a> design document, which explores the question of how far you can get doing scheduling on CPU, respecting bounded GPU resources, while using the GPU for actual pixel wrangling. It also touches on several more recent extensions to the standard GPU execution model, all of which are complex and non-portable, and none of which quite seem to solve the problem.</p>

<p>Fundamentally, it shouldn’t be necessary to allocate large buffers to store intermediate results. Since they will be consumed by downstream stages, it’s far more efficient to put them in queues, sized large enough to keep enough items in flight to exploit available parallelism. Many GPU operations internally work as queues (the standard vertex shader / fragment shader / rasterop pipeline being the classic example), so it’s a question of exposing that underlying functionality to applications. The <a href="https://dl.acm.org/doi/10.1145/1477926.1477930">GRAMPS</a> paper from 2009 suggests this direction, as did the <a href="https://graphics.stanford.edu/papers/brookgpu/brookgpu.pdf">Brook</a> project, a predecessor to CUDA.</p>

<p>There are a lot of potential solutions to running Vello-like algorithms in bounded memory; most have a fatal flaw on hardware today. It’s interesting to speculate about changes that would unlock the capability. It’s worth emphasizing, I’m not feeling held back by the amount of parallelism I can exploit, as my approach of breaking the problem into variants of prefix sum easily scales to hundreds of thousands of threads. Rather, it’s the inability to organize the overall as stages operating in parallel, connected through queues tuned to use only the amount of buffer memory needed to keep everything smoothly, as opposed to the compute shader execution model of large dispatches separated by pipeline barriers.</p>

<h2 id="parallel-computers-of-the-past">Parallel computers of the past</h2>

<p>The lack of a good parallel computer today is especially frustrating because there were some promising designs in the past, which failed to catch on for various complex reasons, leaving us with overly complex and limited GPUs, and extremely limited, though efficient, AI accelerators.</p>

<h3 id="connection-machine">Connection Machine</h3>

<p>I’m listing this not because it’s a particularly promising design, but because it expressed the dream of a good parallel computer in the clearest way. The first Connection Machine shipped in 1985, and contained up to 64k processors, connected in a hypercube network. The number of individual threads is large even by today’s standards, though each individual processor was extremely underpowered.</p>

<p>Perhaps more than anything else, the CM spurred tremendous research into parallel algorithms. The pioneering work by Blelloch on <a href="https://www.cs.cmu.edu/~guyb/papers/Ble93.pdf">prefix sum</a> was largely done on the Connection Machine, and I find early paper on <a href="https://www.cs.umd.edu/class/fall2019/cmsc714/readings/Blelloch-sorting.pdf">sorting on CM-2</a> to be quite fascinating.</p>

<p><img src="https://raphlinus.github.io/assets/teco_connection_machine.jpg" alt="Photo of Connection Machine 1 computer, with lots of flashing red LEDs"> <br>
<a href="https://www.flickr.com/photos/teco_kit/24095266110/">Connection Machine 1 (1985) at KIT / Informatics / TECO</a> • by KIT TECO • CC0</p>

<h3 id="cell">Cell</h3>

<p>Another important pioneering parallel computer was Cell, which shipped as part of the PlayStation 3 in 2006. That device shipped in fairly good volume (about 87.4 million units), and had fascinating applications including <a href="https://en.wikipedia.org/wiki/PlayStation_3_cluster">high performance computing</a>, but was a dead end; the Playstation 4 switched to a fairly vanilla Radeon GPU.</p>

<p>Probably one of the biggest challenges in the Cell was the programming model. In the version shipped on the PS3, there were 8 parallel cores, each with 256kB of static RAM, and each with 128 bit wide vector SIMD. The programmer had to manually copy data into local SRAM, where a kernel would then do some computation. There was little or no support for high level programming; thus people wanting to target this platform had to painstakingly architect and implement parallel algorithms.</p>

<p>All that said, the Cell basically met my requirements for a “good parallel computer.” The individual cores could run effectively arbitrary programs, and there was a global job queue.</p>

<p>The Cell had approximately 200 GFLOPS of total throughput, which was impressive at the time, but pales in comparison to modern GPUs or even a modern CPU (Intel i9-13900K is approximately 850 GFLOPS, with a medium-high end Ryzen 7 is 3379 GFLOPS).</p>

<h3 id="larrabee">Larrabee</h3>

<p>Perhaps the most poignant road not taken in the history of GPU design is Larrabee. The <a href="https://web.archive.org/web/20210307230536/https://software.intel.com/sites/default/files/m/9/4/9/larrabee_manycore.pdf">2008 SIGGRAPH paper</a> makes a compelling case, but ultimately the project failed. It’s hard to say why exactly, but I think it’s possible it was just poor execution on Intel’s part, and with more persistence and a couple of iterations to improve the shortcomings in the original version, it might well have succeeded. At heart, Larrabee is a standard x86 computer with wide (512 bit) SIMD units and just a bit of special hardware to optimize graphics tasks. Most graphics functions are implemented in software. If it had succeeded, it would very easily fulfill my wishes; work creation and queuing is done in software and can be entirely dynamic at a fine level of granularity.</p>

<p>Bits of Larrabee live on. The upcoming AVX10 instruction set is an evolution of Larrabee’s AVX-512, and supports 32 lanes of f16 operations. In fact, Tom Forsyth, one of its creators, argues that <a href="https://tomforsyth1000.github.io/blog.wiki.html#%5B%5BWhy%20didn%27t%20Larrabee%20fail%3F%5D%5D">Larrabee did not indeed fail</a> but that its legacy is a success. Another valuable facet of legacy is ISPC, and Matt Pharr’s blog on <a href="https://pharr.org/matt/blog/2018/04/18/ispc-origins">The story of ispc</a> sheds light on the Larrabee project.</p>

<p>Likely one of the problems of Larrabee was power consumption, which has emerged as one of the limiting factors in parallel computer performance. The fully coherent (total store order) memory hierarchy, while making software easier, also added to the cost of the system, and since then we’ve gained a lot of knowledge in how to write performant software in weaker memory models.</p>

<p>Another aspect that definitely held Larrabee back was the software, which is always challenging, especially for innovative directions. The drivers didn’t expose the special capabilities of the highly programmable hardware, and performance on traditional triangle-based 3D graphics scenes was underwhelming. Even so, it did quite well on CAD workloads involving lots of antialiased lines, driven by a standard OpenGL interface.</p>

<h2 id="the-changing-workload">The changing workload</h2>

<p>Even within games, compute is becoming a much larger fraction of the total workload (for AI, it’s everything). Analysis of <a href="https://chipsandcheese.com/2023/10/15/starfield-on-the-rx-6900-xt-rx-7600-and-rtx-2060-mobile/">Starfield</a> by Chips and Cheese shows that about half the time is in compute. The <a href="https://advances.realtimerendering.com/s2021/Karis_Nanite_SIGGRAPH_Advances_2021_final.pdf">Nanite</a> renderer also uses compute even for rasterization of small triangles, as hardware is only more efficient for triangles above a certain size. As games do more image filtering, global illumination, and primitives such as Gaussian splatting, the trend will almost certainly continue.</p>

<p>In 2009, Tim Sweeney gave a thought-provoking talk entitled <a href="https://web.archive.org/web/20090823200347/http://graphics.cs.williams.edu/archive/SweeneyHPG2009/TimHPG2009.pdf">The end of the GPU roadmap</a>, in which he proposed that the concept of GPU would go away entirely, replaced by a highly parallel general purpose computer. That has not come to pass, though there has been some movement in that direction: the Larrabee project (as described above), the groundbreaking <a href="https://research.nvidia.com/publication/2011-08_high-performance-software-rasterization-gpus">cudaraster</a> paper from 2011 implemented the traditional 3D rasterization pipeline entirely in compute, and found (simplifying quite a bit) that it was about 2x slower than using fixed function hardware, and more recent academic GPU designs based on grids of RISC-V cores. It’s worth noting, a more recent <a href="https://tellusim.com/compute-raster/">update from Tellusim</a> suggests that cudaraster-like rendering in compute can be close to parity on modern hardware.</p>

<p>An excellent 2017 presentation, <a href="https://openproblems.realtimerendering.com/s2017/index.html">Future Directions for Compute-for-Graphics</a> by Andrew Lauritzen, highlighted many of the challenges of incorporating advanced compute techniques into graphics pipelines. There’s been some progress since then, but it speaks to many of the same problems I’m raising in this blog post. Also see <a href="http://www.joshbarczak.com/blog/?p=1317">comments by Josh Barczak</a>, which also links the <a href="https://dl.acm.org/doi/10.1145/1477926.1477930">GRAMPS</a> work and discusses issues with language support.</p>

<h2 id="paths-forward">Paths forward</h2>

<p>I can see a few ways to get from the current state to a good parallel computer. Each basically picks a starting point that might have been on the right track but got derailed.</p>

<h3 id="big-grid-of-cores-cell-reborn">Big grid of cores: Cell reborn</h3>

<p>The original promise of the Cell still has some appeal. A modern high end CPU chip has north of 100 billion transistors, while a reasonably competent RISC CPU can be made with orders of magnitude fewer. Why not place hundreds or even thousands of cores on a chip? For maximum throughput, put a vector (SIMD) unit on each core. Indeed, there are at least two AI accelerator chips based on this idea: <a href="https://www.esperanto.ai/wp-content/uploads/2022/05/Dave-IEEE-Micro.pdf">Esperanto</a> and Tenstorrent. I’m particularly interested in the latter because its <a href="https://github.com/tenstorrent-metal/tt-metal/">software stack</a> is open source.</p>

<p>That said, there are most definitely challenges. A CPU by itself isn’t enough, it also needs high bandwidth local memory and communications with other cores. One reason the Cell was so hard to program is that the local memory was small and needed to be managed explicitly - your program needed to do explicit transfers through the network to get data in and out. The trend in CPU (and GPU) design is to virtualize everything, so that there’s an abstraction of a big pool of memory that all the cores share. You’ll still want to make your algorithm cache-aware for performance, but if not, the program will still run. It’s <em>possible</em> a sufficiently smart compiler can adapt a high-level description of the problem to the actual hardware (and this is the approach taken by Tenstorrent’s <a href="https://tenstorrent.com/en/software/tt-buda">TT-Buda</a> stack, specialized to AI workloads). In analogy to exploiting instruction-level parallelism through VLIW, the Itanium stands as a cautionary tale.</p>

<p>From my read of the Tenstorrent docs, the matrix unit is limited to just matrix multiplication and a few supporting operations such as transpose, so it’s not clear it would be a significant speedup for complex algorithms as needed in 2D rendering. But I think it’s worth exploring, to see how far it can be pushed, and perhaps whether practical extensions to the matrix unit to support permutations and so on would unlock more algorithms.</p>

<p>Most of the “big grid of cores” designs are targeted toward AI acceleration, and for good reason: it is hungry for raw throughput with low power costs, so alternatives to traditional CPU approaches are appealing. See the <a href="https://www.youtube.com/watch?v=w3xNLj6nRgs">New Silicon for Supercomputers</a> talk by Ian Cutress for a great survey of the field.</p>

<h3 id="running-vulkan-commands-from-gpu-side">Running Vulkan commands from GPU-side</h3>

<p>A relatively small delta to existing GPUs would be the ability to dispatch work from a controller mounted on the GPU and sharing address space with the shaders. In its most general form, users would be able to run threads on this controller that could run the full graphics API (for example, Vulkan). The programming model could be similar to now, just that the thread submitting work is running close to the compute units and therefore has dramatically lower latency.</p>

<p>In their earliest form, GPU’s were not distributed systems, they were co-processors, tightly coupled to the host CPU’s instruction stream. These days, work is issued to the GPU by the equivalent of async remote procedure calls, with end-to-end latency often as high as 100µs. This proposal essentially calls for a return to less of a distributed system model, where work can efficiently be issued on a much finer grain and with much more responsiveness to the data. For dynamic work creation, latency is the most important blocker.</p>

<p>Note that GPU APIs are slowly inventing a more complex, more limited version of this anyway. While it’s not possible to run the Vulkan API directly from a shader, with a recent Vulkan extension (<a href="https://registry.khronos.org/vulkan/specs/latest/man/html/VK_EXT_device_generated_commands.html">VK_EXT_device_generated_commands</a>) it is possible to encode some commands into a command buffer from a shader. Metal has this capability as well (see <a href="https://github.com/gpuweb/gpuweb/issues/431">gpuweb#431</a> for more details about portability). It’s worth noting that the ability to run indirect commands to recursively generate more work is one of the missing functions; it seems that the designers did not take Hofstadter to heart.</p>

<p>It is interesting to contemplate actually running Vulkan API directly from a shader. Since the Vulkan API is expressed in terms of C, one of the requirements is the ability to run C. This is being done on an experimental basis (see the <a href="https://shady-gang.github.io/vcc/">vcc</a> project), but is not yet practical. Of course, CUDA <em>can</em> run C. CUDA 12.4 also has support for <a href="https://developer.nvidia.com/blog/dynamic-control-flow-in-cuda-graphs-with-conditional-nodes/">conditional nodes</a>, and as of 12.0 it had support for <a href="https://developer.nvidia.com/blog/enabling-dynamic-control-flow-in-cuda-graphs-with-device-graph-launch/">device graph launch</a>, which reduces latency considerably.</p>

<h3 id="work-graphs">Work graphs</h3>

<p><a href="https://devblogs.microsoft.com/directx/d3d12-work-graphs/">Work graphs</a> are a recent new extension to the GPU execution model. Briefly, the program is structured as a graph of nodes (kernel programs) and edges (queues) all running in parallel. As a node generates output, filling its output queues, the GPU dispatches kernels (at workgroup granularity) to process those outputs further. To a large extent, this is a modern reinvention of the <a href="https://dl.acm.org/doi/10.1145/1477926.1477930">GRAMPS</a> idea.</p>

<p>While exciting, and very likely useful for an increasing range of graphics tasks, work graphs also have serious limitations; I researched whether I could use them for the existing Vello design and found three major problems. First, they cannot easily express joins, where progress of a node is dependent on synchronized input from two different queues. Vello uses joins extensively, for example one kernel to compute a bounding box of a draw object (aggregating multiple path segments), and another to process the geometry within that bounding box. Second, there is no ordering guarantee between the elements pushed into a queue, and 2D graphics ultimately does require ordering (the whiskers of the tiger must be drawn over the tiger’s face). Third, work graphs don’t support variable-size elements.</p>

<p>The lack of an ordering guarantee is particularly frustrating, because the traditional 3D pipeline <em>does</em> maintain ordering, among other reasons, to prevent Z-fighting artifacts (for a fascinating discussion of how GPU hardware preserves the blend order guarantee, see <a href="https://fgiesen.wordpress.com/2011/07/12/a-trip-through-the-graphics-pipeline-2011-part-9/">A trip through the Graphics Pipeline part 9</a>). It is not possible to faithfully emulate the traditional vertex/fragment pipeline using the new capability. Obviously, maintaining ordering guarantees in parallel systems is expensive, but ideally there is a way to opt in when needed, or at least couple work graphs with another mechanism (some form of sorting, which is possible to implement efficiently on GPUs) to re-establish ordering as needed. Thus, I see work graphs as two steps forward, one step back.</p>

<h3 id="cpu-convergent-evolution">CPU convergent evolution</h3>

<p>In theory, when running highly parallel workloads, a traditional multi-core CPU design is doing the same thing as a GPU, and if fully optimized for efficiency, should be competitive. That, arguably, is the design brief for Larrabee, and also motivation for more recent academic work like <a href="https://vortex.cc.gatech.edu/">Vortex</a>. Probably the biggest challenge is power efficiency. As a general trend, CPU designs are diverging into those optimizing single-core performance (performance cores) and those optimizing power efficiency (efficiency cores), with cores of both types commonly present on the same chip. As E-cores become more prevalent, algorithms designed to exploit parallelism at scale may start winning, incentivizing provision of even larger numbers of increasingly efficient cores, even if underpowered for single-threaded tasks.</p>

<p>An advantage of this approach is that it doesn’t change the execution model, so existing languages and tools can still be used. Unfortunately, most existing languages are poor at expressing and exploiting parallelism at both the SIMD and thread level – shaders have a more limited execution model but at least it’s clear how to execute them in parallel efficiently. And for thread-level parallelism, avoiding performance loss from context switches is challenging. Hopefully, newer languages such as <a href="https://en.wikipedia.org/wiki/Mojo_(programming_language)">Mojo</a> will help, and potentially can be adapted to GPU-like execution models as well.</p>

<p>I’m skeptical this approach will actually become competitive with GPUs and AI accelerators, as there is just a huge gap in throughput per watt compared with GPUs – about an order of magnitude. Also, GPUs and AI accelerators won’t be standing still either.</p>

<h3 id="maybe-the-hardware-is-already-there">Maybe the hardware is already there?</h3>

<p>It’s possible that there is hardware currently shipping that meets my criteria for a good parallel computer, but its potential is held back by software. GPUs generally have a “command processor” onboard, which, in cooperation with the host-side driver, breaks down the rendering and compute commands into chunks to be run by the actual execution units. Invariably, this command processor is hidden and cannot run user code. Opening that up could be quite interesting. A taste of that is in Hans-Kristian Arntzen’s notes on implementing work graphs in open source drivers: <a href="https://github.com/HansKristian-Work/vkd3d-proton/blob/workgraphs/docs/workgraphs.md">Workgraphs in vkd3d-proton</a>.</p>

<p>GPU designs vary in how much is baked into the hardware and how much is done by a command processor. Programmability is a good way to make things more flexible. The main limiting factor is the secrecy around such designs. Even in GPUs with open source drivers, the firmware (which is what runs on the command processor) is very locked down. Of course, a related challenge is security; opening up the command processor to user code increases the vulnerability surface area considerably. But from a research perspective, it should be interesting to explore what’s possible aside from security concerns.</p>

<p>Another interesting direction is the rise of “Accelerated Processing Units” which integrate GPUs and powerful CPUs in the same address space. Conceptually, these are similar to integrated graphics chips, but those rarely have enough performance to be interesting. From what I’ve seen, running existing APIs on such hardware (Vulkan for compute shaders, or one of the modern variants of OpenCL) would not have significant latency advantages for synchronizing work back to the CPU, due to context switching overhead. It’s possible a high priority or dedicated thread might quickly process items placed in a queue by GPU-side tasks. The key idea is queues running at full throughput, rather than async remote procedure calls with potentially huge latency.</p>

<h2 id="complexity">Complexity</h2>

<p>Taking a step back, one of the main features of the GPU ecosystem is a dizzying level of complexity. There’s the core parallel computer, then lots of special function hardware (and the scope of this is increasing, especially with newer features such as ray tracing), then big clunky mechanisms to get work scheduled and run. Those start with the basic compute shader dispatch mechanism (a 3D grid of x, y, z dimensions, 16 bits each), and then augment that with various <a href="https://developer.nvidia.com/blog/new-vulkan-device-generated-commands/">indirect command encoding</a> extensions.</p>

<p><a href="https://devblogs.microsoft.com/directx/d3d12-work-graphs/">Work graphs</a> also fit into the category of complexifying the execution model to work around the limitations of the primitive 3D grid. I was initially excited about their prospect, but when I took a closer look, I found they were inadequate for expressing any of the producer/consumer relationships in Vello.</p>

<p>There’s a lot of accidental complexity as well. There are multiple competing APIs, each with subtly different semantics, which makes it especially hard to write code once and have it just work.</p>

<p>CUDA is adding lots of new features, some of which improve autonomy as I’ve been wanting, and there is a tendency for graphics APIs to adopt features from CUDA. However, there’s also a lot of divergence between these ecosystems (work graphs can’t be readily adapted to CUDA, and it’s very unlikely graphics shaders will get independent thread scheduling any time soon).</p>

<p>The complexity of the GPU ecosystem has many downstream effects. Drivers and shader compilers are buggy and <a href="https://chromium.googlesource.com/chromium/src/+/main/docs/security/research/graphics/webgpu_technical_report.md">insecure</a>, and there is probably no path to really fixing that. Core APIs tend to be very limited in functionality and performance, so there’s a dazzling array of extensions that need to be detected at runtime, and the most appropriate permutation selected. This in turn makes it far more likely to run into bugs that appear only with specific combinations of features, or on particular hardware.</p>

<p>All this is in fairly stark contrast to the CPU world. A modern CPU is also dazzlingly complex, with billions of transistors, but it is rooted in a much simpler computational model. From a programmer perspective, writing code for a 25 billion transistor Apple M3 isn’t that different from, say, a Cortex M0, which can be made with about 48,000 transistors. Similarly, a low performance RISC-V implementation is a reasonable student project. Obviously the M3 is doing a lot more with branch prediction, superscalar issue, memory hierarchies, op fusion, and other performance tricks, but it’s recognizably doing the same thing as a vastly smaller and simpler chip.</p>

<p>In the past, there were economic pressures towards replacing special-purpose circuitry with general purpose compute performance, but those incentives are shifting. Basically, if you’re optimizing for number of transistors, then somewhat less efficient general purpose compute can be kept busy almost all the time, while special purpose hardware is only justified if there is high enough utilization in the workload. However, as Dennard scaling has ended and we’re more constrained by power than transistor count, special purpose hardware starts winning more; it can simply be powered down if it isn’t used by the workload. The days of a purely RISC computational model are probably over. What I’d <em>like</em> to see replacing it is an agile core (likely RISC-V) serving as the control function for a bunch of special-purpose accelerator extensions. That certainly is the model of the <a href="https://vortex.cc.gatech.edu/">Vortex</a> project among others.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In his talk shortly before retirement, Nvidia GPU architect Erik Lindholm <a href="https://ubc.ca.panopto.com/Panopto/Pages/Viewer.aspx?id=880a1d92-30d7-4683-80e7-b1e000f501d3">said</a> (in the context of work creation and queuing systems), “my career has been about making things more flexible, more programmable. It’s not finished yet. There’s one more step that I feel that needs to be done, and I’ve been pursuing this at Nvidia Research for many years.” I agree, and my own work would benefit greatly. Now that he has retired, it is not clear who will take up the mantle. It may be Nvidia disrupting their previous product line with a new approach as they have in the past. It may be an upstart AI accelerator making a huge grid of low power processors with vector units, that just happens to be programmable. It might be CPU efficiency cores evolving to become so efficient they compete with GPUs.</p>

<p>Or it might not happen at all. On the current trajectory, GPUs will squeeze out incremental improvements on existing graphics workloads at the cost of increasing complexity, and AI accelerators will focus on improving the throughput of slop generation to the exclusion of everything else.</p>

<p>In any case, there is an opportunity for intellectually curious people to explore the alternate universe in which the good parallel computer exists; architectures can be simulated on FPGA like Vortex, and algorithms can be prototyped on multicore wide-SIMD CPUs. We can also start to think about what a proper programming language for such a machine might look like, as frustrating as it is to not have real hardware to run it on.</p>

<p>Progress on a good parallel computer would help my own little sliver of work, trying to make a fully parallel 2D renderer with modest resource requirements. I’ve got to imagine it would in addition help AI efforts, potentially unlocking sparse techniques that can’t run on existing hardware. I also think there’s a golden era of algorithms that <em>can</em> be parallel but aren’t a win on current GPUs, waiting to be developed.</p>


  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[New USPTO Memo Makes Fighting Patent Trolls Even Harder (251 pts)]]></title>
            <link>https://www.eff.org/deeplinks/2025/03/new-uspto-memo-makes-fighting-patent-trolls-even-harder</link>
            <guid>43439610</guid>
            <pubDate>Fri, 21 Mar 2025 18:55:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eff.org/deeplinks/2025/03/new-uspto-memo-makes-fighting-patent-trolls-even-harder">https://www.eff.org/deeplinks/2025/03/new-uspto-memo-makes-fighting-patent-trolls-even-harder</a>, See on <a href="https://news.ycombinator.com/item?id=43439610">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article role="article">
  
  
  <div><p>The U.S. Patent and Trademark Office (USPTO) just made a move that will protect bad patents at the expense of everyone else. In a <a href="https://www.uspto.gov/about-us/news-updates/uspto-rescinds-memorandum-addressing-discretionary-denial-procedures">memo released February 28</a>, the USPTO further restricted access to inter partes review, or IPR—the process Congress created to let the public challenge invalid patents without having to wage million-dollar court battles.</p>
<p>If left unchecked, this decision will shield bad patents from scrutiny, embolden patent trolls, and make it even easier for hedge funds and large corporations to weaponize weak patents against small businesses and developers.</p>
<h3><strong>IPR Exists Because the Patent Office Makes Mistakes</strong></h3>
<p>The USPTO grants <a href="https://ipo.org/wp-content/uploads/2025/01/2024-Top-300-Patent-Owners-List.pdf">over 300,000 patents a year</a>, but many of them <a href="https://ipwatchdog.com/2021/01/07/alice-in-2020-slashing-software-patents-and-searching-for-functional-language-at-the-federal-circuit-part-i/id=128802/">should not have been issued</a> in the first place. Patent examiners spend, on average, around <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=261400">20 hours per patent</a>, often missing key prior art or granting patents that are overly broad or vague. That’s how bogus patents on basic ideas—like <a href="https://www.eff.org/deeplinks/2015/04/effs-podcasting-patent-win-highlights-disturbing-trend">podcasting</a>, <a href="https://arstechnica.com/tech-policy/2013/01/how-newegg-crushed-the-shopping-cart-patent-and-saved-online-retail/">online shopping carts</a>, or <a href="https://arstechnica.com/tech-policy/2013/06/a-patent-on-watching-ads-online-no-problem-says-top-patent-court/">watching ads online</a>—have ended up in court.</p>
<p>Congress created IPR in 2012 to fix this problem. IPR allows anyone to challenge a patent’s validity based on prior art, and it’s done before specialized judges at the USPTO, where experts can re-evaluate whether a patent was properly granted. It’s faster, cheaper, and often fairer than fighting it out in federal court.</p>
<h3><strong>The USPTO is Blocking Patent Challenges—Again</strong></h3>
<p>Instead of defending IPR, the USPTO is working to sabotage it. The February 28 memo reinstates a rule that allows for widespread use of “discretionary denials.” That’s when the Patent Trial and Appeal Board (PTAB) refuses to hear an IPR case for procedural reasons—even if the patent is likely invalid.&nbsp;</p>
<p>The February 28 memo reinstates widespread use of the <a href="https://www.uspto.gov/sites/default/files/documents/IPR2020-00019,%20Apple%20v.%20Fintiv,%20Paper%2011%20(3.20.20).pdf"><i>Apple v. Fintiv</i> rule</a>, under which the USPTO often rejected IPR petitions whenever there’s an ongoing district court case about the same patent. This is backwards. If anything, an active lawsuit is proof that a patent’s validity needs to be reviewed—not an excuse to dodge the issue.</p>
<p>In 2022, former USPTO Director Kathi Vidal issued a <a href="https://www.uspto.gov/sites/default/files/documents/interim_proc_discretionary_denials_aia_parallel_district_court_litigation_memo_20220621_.pdf">memo</a> making clear that the PTAB should hear patent challenges when “a petition presents compelling evidence of unpatentability,” even if there is parallel court litigation.&nbsp;</p>
<p>That 2022 guidance essentially saved the IPR system. Once PTAB judges were told to consider all petitions that showed “compelling evidence,” the procedural denials <a href="https://www.unifiedpatents.com/insights/2022/10/27/q3-ptab-discretionary-denial-report-use-of-fintiv-drops-to-near-zero">dropped to almost nothing</a>. This February 28 memo signals that the USPTO will once again use discretionary denials to sharply limit access to IPR<span>—effectively making patent challenges harder across the board.&nbsp;&nbsp;</span></p>
<h3><b>Discretionary Denials Let Patent Trolls Rig the System</b></h3>
<p><span>The top beneficiary of this decision will be patent trolls, shell companies formed expressly for the purpose of filing patent lawsuits. Often patent trolls seek to extract a quick settlement before a patent can be challenged. With IPR becoming increasingly unavailable, that will be easier than ever.&nbsp;</span></p>
<p><span>Patent owners know that discretionary denials will block IPRs if they file a lawsuit first. That’s why trolls flock to specific courts, like the </span><a href="https://www2.law.temple.edu/10q/how-the-west-became-the-east-the-patent-litigation-explosion-in-the-western-district-of-texas/"><span>Western District of Texas</span></a><span>, where judges move cases quickly and rarely rule against patent owners.</span></p>
<p><span>By filing lawsuits in these troll-friendly courts, patent owners can game the system—forcing companies to pay up rather than risk millions in litigation costs.</span></p>
<p><span>The recent USPTO memo makes this problem even worse. Instead of stopping the abuse of discretionary denials, the USPTO is doubling down—undermining one of the most effective ways businesses, developers, and consumers can fight back against bad patents.</span></p>
<h3><b>Congress Created IPR to Protect the Public—Not Just Patent Owners</b></h3>
<p><span>The USPTO doesn’t get to rewrite the law. Congress passed IPR to ensure that weak patents don’t become weapons for extortionary lawsuits. By reinforcing discretionary denials with minimal restrictions, and, as a result, blocking access to IPRs, the USPTO is directly undermining what Congress intended.</span></p>
<p><span>Leaders at the USPTO should immediately revoke the February 28 memo. If they refuse, as </span><a href="https://www.eff.org/deeplinks/2020/07/when-us-patent-office-wont-do-its-job-congress-should-step"><span>we pointed out the last time IPR denials spiraled out of control</span></a><span>, it’s time for Congress to step in and fix this. They must ensure that IPR remains a fast, affordable way to challenge bad patents—not just a tool for the largest corporations. Patent quality matters—because when bad patents stand, we all pay the price.</span></p>

</div>

          </article>
    </div><div>
          <h2>Join EFF Lists</h2>
        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: A terminal emulator in pure PHP (142 pts)]]></title>
            <link>https://github.com/soloterm/screen</link>
            <guid>43438797</guid>
            <pubDate>Fri, 21 Mar 2025 17:43:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/soloterm/screen">https://github.com/soloterm/screen</a>, See on <a href="https://news.ycombinator.com/item?id=43438797">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Solo Screen</h2><a id="user-content-solo-screen" aria-label="Permalink: Solo Screen" href="#solo-screen"></a></p>
<p dir="auto">Screen is a terminal renderer written in pure PHP. It powers <a href="https://github.com/soloterm/solo">Solo for Laravel</a> and
can be used to build rich text-based user interfaces in any PHP application.</p>
<div dir="auto"><p dir="auto">Note</p><p dir="auto">Screen is a library intended to be integrated into PHP applications. It is not a standalone terminal application.</p>
</div>
<p dir="auto"><h2 tabindex="-1" dir="auto">About terminal renderers</h2><a id="user-content-about-terminal-renderers" aria-label="Permalink: About terminal renderers" href="#about-terminal-renderers"></a></p>
<p dir="auto">A terminal renderer processes text and ANSI escape sequences to create a virtual representation of terminal output.
Unlike a full terminal emulator, Screen focuses specifically on correctly interpreting and rendering text content with
formatting rather than handling input, interactive sessions, or process management.</p>
<p dir="auto">Terminal renderers interpret escape sequences to:</p>
<ul dir="auto">
<li>Track cursor position</li>
<li>Apply text colors and styles (bold, underline, etc.)</li>
<li>Manage screen content</li>
<li>Handle special character sets</li>
<li>Generate a final rendered output</li>
</ul>
<p dir="auto">Screen implements this functionality in pure PHP, allowing developers to build terminal user interfaces without relying
on external dependencies or native code.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why this exists</h2><a id="user-content-why-this-exists" aria-label="Permalink: Why this exists" href="#why-this-exists"></a></p>
<p dir="auto">Screen was originally created to solve a specific problem in <a href="https://github.com/soloterm/solo">Solo for Laravel</a>.</p>
<p dir="auto">Solo provides a TUI (Text User Interface) that runs multiple processes simultaneously in separate panels, similar to
tmux. However, when these processes output ANSI escape codes for cursor movement and screen manipulation, they could
potentially "break out" of their visual containers and interfere with other parts of the interface.</p>
<p dir="auto">To solve this problem, Screen creates a virtual terminal buffer where:</p>
<ol dir="auto">
<li>All ANSI operations (cursor movements, color changes, screen clears) are safely interpreted within an isolated
environment</li>
<li>The final rendered state is captured after all operations are processed</li>
<li>Only the final visual output is displayed to the user's terminal</li>
</ol>
<p dir="auto">This approach provides complete control over how terminal output is rendered, ensuring that complex ANSI operations stay
contained within their designated areas. While initially built for Solo, Screen has evolved into a standalone library
that can be used in any PHP application requiring terminal rendering.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li><strong>Pure PHP Implementation</strong>: Only one dependency (<a href="https://github.com/soloterm/grapheme">Grapheme</a>, another Solo
library)</li>
<li><strong>Comprehensive ANSI Support</strong>: Handles cursor positioning, text styling, and screen manipulation</li>
<li><strong>Unicode/Multibyte Support</strong>: Properly handles UTF-8 characters including emojis and wide characters</li>
<li><strong>Buffer Management</strong>: Maintains separate buffers for text content and styling</li>
<li><strong>Character Width Handling</strong>: Correctly calculates display width for CJK and other double-width characters</li>
<li><strong>Scrolling</strong>: Support for vertical scrolling with proper content management</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Install via Composer:</p>
<div dir="auto" data-snippet-clipboard-copy-content="composer require soloterm/screen"><pre>composer require soloterm/screen</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Requirements</h2><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>PHP 8.1 or higher</li>
<li>mbstring extension</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Basic usage</h2><a id="user-content-basic-usage" aria-label="Permalink: Basic usage" href="#basic-usage"></a></p>
<p dir="auto">Here's a simple example of using Screen:</p>
<div dir="auto" data-snippet-clipboard-copy-content="use SoloTerm\Screen\Screen;

// Create a screen with dimensions (columns, rows)
$screen = new Screen(80, 24);

// Write text and ANSI escape sequences
$screen->write(&quot;Hello, \e[1;32mWorld!\e[0m&quot;);

// Move cursor and add more text
$screen->write(&quot;\e[5;10HPositioned text&quot;);

// Get the rendered content
echo $screen->output();"><pre><span>use</span> <span>SoloTerm</span>\<span>Screen</span>\<span>Screen</span>;

<span>// Create a screen with dimensions (columns, rows)</span>
<span><span>$</span>screen</span> = <span>new</span> <span>Screen</span>(<span>80</span>, <span>24</span>);

<span>// Write text and ANSI escape sequences</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"<span>Hello, </span>\e<span>[1;32mWorld!</span>\e<span>[0m</span>"</span>);

<span>// Move cursor and add more text</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[5;10HPositioned text</span>"</span>);

<span>// Get the rendered content</span>
<span>echo</span> <span><span>$</span>screen</span>-&gt;<span>output</span>();</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Core concepts</h2><a id="user-content-core-concepts" aria-label="Permalink: Core concepts" href="#core-concepts"></a></p>
<p dir="auto">Screen operates with several key components:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Screen</h3><a id="user-content-screen" aria-label="Permalink: Screen" href="#screen"></a></p>
<p dir="auto">The main class that coordinates all functionality. It takes care of cursor positioning, content writing, and rendering
the final output.</p>
<div dir="auto" data-snippet-clipboard-copy-content="$screen = new Screen(80, 24); // width, height
$screen->write(&quot;Text and ANSI codes&quot;);"><pre><span><span>$</span>screen</span> = <span>new</span> <span>Screen</span>(<span>80</span>, <span>24</span>); <span>// width, height</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"<span>Text and ANSI codes</span>"</span>);</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Buffers</h3><a id="user-content-buffers" aria-label="Permalink: Buffers" href="#buffers"></a></p>
<p dir="auto">Screen uses multiple buffer types to track content and styling:</p>
<ul dir="auto">
<li><strong>PrintableBuffer</strong>: Stores visible characters and handles width calculations</li>
<li><strong>AnsiBuffer</strong>: Tracks styling information (colors, bold, underline, etc.)</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">ANSI processing</h3><a id="user-content-ansi-processing" aria-label="Permalink: ANSI processing" href="#ansi-processing"></a></p>
<p dir="auto">Screen correctly interprets ANSI escape sequences for:</p>
<ul dir="auto">
<li>Cursor movement (up, down, left, right, absolute positioning)</li>
<li>Text styling (colors, bold, italic, underline)</li>
<li>Screen clearing and line manipulation</li>
<li>Scrolling</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Advanced features</h2><a id="user-content-advanced-features" aria-label="Permalink: Advanced features" href="#advanced-features"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Cursor positioning</h3><a id="user-content-cursor-positioning" aria-label="Permalink: Cursor positioning" href="#cursor-positioning"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="// Move cursor to position (row 5, column 10)
$screen->write(&quot;\e[5;10H&quot;);

// Move cursor up 3 lines
$screen->write(&quot;\e[3A&quot;);

// Save and restore cursor position
$screen->write(&quot;\e7&quot;); // Save
$screen->write(&quot;More text&quot;);
$screen->write(&quot;\e8&quot;); // Restore"><pre><span>// Move cursor to position (row 5, column 10)</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[5;10H</span>"</span>);

<span>// Move cursor up 3 lines</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[3A</span>"</span>);

<span>// Save and restore cursor position</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>7</span>"</span>); <span>// Save</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"<span>More text</span>"</span>);
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>8</span>"</span>); <span>// Restore</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Text styling</h3><a id="user-content-text-styling" aria-label="Permalink: Text styling" href="#text-styling"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="// Bold red text
$screen->write(&quot;\e[1;31mImportant message\e[0m&quot;);

// Background colors
$screen->write(&quot;\e[44mBlue background\e[0m&quot;);

// 256-color support
$screen->write(&quot;\e[38;5;208mOrange text\e[0m&quot;);

// RGB colors
$screen->write(&quot;\e[38;2;255;100;0mCustom color\e[0m&quot;);"><pre><span>// Bold red text</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[1;31mImportant message</span>\e<span>[0m</span>"</span>);

<span>// Background colors</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[44mBlue background</span>\e<span>[0m</span>"</span>);

<span>// 256-color support</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[38;5;208mOrange text</span>\e<span>[0m</span>"</span>);

<span>// RGB colors</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[38;2;255;100;0mCustom color</span>\e<span>[0m</span>"</span>);</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Screen manipulation</h3><a id="user-content-screen-manipulation" aria-label="Permalink: Screen manipulation" href="#screen-manipulation"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="// Clear screen
$screen->write(&quot;\e[2J&quot;);

// Clear from cursor to end of line
$screen->write(&quot;\e[0K&quot;);

// Insert lines
$screen->write(&quot;\e[2L&quot;);

// Scroll up
$screen->write(&quot;\e[2S&quot;);"><pre><span>// Clear screen</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[2J</span>"</span>);

<span>// Clear from cursor to end of line</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[0K</span>"</span>);

<span>// Insert lines</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[2L</span>"</span>);

<span>// Scroll up</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[2S</span>"</span>);</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Custom integrations</h2><a id="user-content-custom-integrations" aria-label="Permalink: Custom integrations" href="#custom-integrations"></a></p>
<p dir="auto">You can respond to terminal queries by setting a callback:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$screen->respondToQueriesVia(function($response) {
    // Process response (like cursor position)
    echo $response;
});"><pre><span><span>$</span>screen</span>-&gt;<span>respondToQueriesVia</span>(<span>function</span>(<span><span>$</span>response</span>) {
    <span>// Process response (like cursor position)</span>
    <span>echo</span> <span><span>$</span>response</span>;
});</pre></div>
<div dir="auto"><p dir="auto">Note</p><p dir="auto">This is still a work in progress. We need some more tests / use cases here.</p>
</div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Example: building a simple UI</h2><a id="user-content-example-building-a-simple-ui" aria-label="Permalink: Example: building a simple UI" href="#example-building-a-simple-ui"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="use SoloTerm\Screen\Screen;

$screen = new Screen(80, 24);

// Draw a border
$screen->write(&quot;┌&quot; . str_repeat(&quot;─&quot;, 78) . &quot;┐\n&quot;);
for ($i = 0; $i < 22; $i++) {
    $screen->write(&quot;│&quot; . str_repeat(&quot; &quot;, 78) . &quot;│\n&quot;);
}
$screen->write(&quot;└&quot; . str_repeat(&quot;─&quot;, 78) . &quot;┘&quot;);

// Add a title
$screen->write(&quot;\e[1;30H\e[1;36mMy Application\e[0m&quot;);

// Add some content
$screen->write(&quot;\e[5;5HWelcome to the application!&quot;);
$screen->write(&quot;\e[7;5HPress 'q' to quit.&quot;);

// Render
echo $screen->output();"><pre><span>use</span> <span>SoloTerm</span>\<span>Screen</span>\<span>Screen</span>;

<span><span>$</span>screen</span> = <span>new</span> <span>Screen</span>(<span>80</span>, <span>24</span>);

<span>// Draw a border</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"<span>┌</span>"</span> . <span>str_repeat</span>(<span>"<span>─</span>"</span>, <span>78</span>) . <span>"<span>┐</span>\n"</span>);
<span>for</span> (<span><span>$</span>i</span> = <span>0</span>; <span><span>$</span>i</span> &lt; <span>22</span>; <span><span>$</span>i</span>++) {
    <span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"<span>│</span>"</span> . <span>str_repeat</span>(<span>"<span> </span>"</span>, <span>78</span>) . <span>"<span>│</span>\n"</span>);
}
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"<span>└</span>"</span> . <span>str_repeat</span>(<span>"<span>─</span>"</span>, <span>78</span>) . <span>"<span>┘</span>"</span>);

<span>// Add a title</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[1;30H</span>\e<span>[1;36mMy Application</span>\e<span>[0m</span>"</span>);

<span>// Add some content</span>
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[5;5HWelcome to the application!</span>"</span>);
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\e<span>[7;5HPress 'q' to quit.</span>"</span>);

<span>// Render</span>
<span>echo</span> <span><span>$</span>screen</span>-&gt;<span>output</span>();</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Handling unicode and wide characters</h2><a id="user-content-handling-unicode-and-wide-characters" aria-label="Permalink: Handling unicode and wide characters" href="#handling-unicode-and-wide-characters"></a></p>
<p dir="auto">Screen properly handles Unicode characters including emoji and CJK characters that take up multiple columns:</p>
<div dir="auto" data-snippet-clipboard-copy-content="$screen->write(&quot;Regular text: Hello&quot;);
$screen->write(&quot;\nWide characters: 你好世界&quot;);
$screen->write(&quot;\nEmoji: 🚀 👨‍👩‍👧‍👦 🌍&quot;);"><pre><span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"<span>Regular text: Hello</span>"</span>);
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\n<span>Wide characters: 你好世界</span>"</span>);
<span><span>$</span>screen</span>-&gt;<span>write</span>(<span>"\n<span>Emoji: 🚀 👨‍👩‍👧‍👦 🌍</span>"</span>);</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Testing</h2><a id="user-content-testing" aria-label="Permalink: Testing" href="#testing"></a></p>
<p dir="auto">Screen includes a comprehensive testing suite that features a unique visual comparison system:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Visual testing</h3><a id="user-content-visual-testing" aria-label="Permalink: Visual testing" href="#visual-testing"></a></p>
<p dir="auto">Screen employs an innovative screenshot-based testing approach (see <code>ComparesVisually</code> trait) that validates the visual
output:</p>
<ol dir="auto">
<li>The test renders content in a real terminal (iTerm)</li>
<li>It captures a screenshot of the terminal output</li>
<li>It runs the same content through the Screen renderer</li>
<li>It captures a screenshot of the rendered output</li>
<li>It compares the screenshots pixel-by-pixel to ensure accuracy</li>
</ol>
<p dir="auto">This testing strategy ensures that Screen's rendering accurately matches real terminal behavior, especially for complex
scenarios involving:</p>
<ul dir="auto">
<li>Multi-byte characters</li>
<li>Complex ANSI formatting</li>
<li>Cursor movements</li>
<li>Scrolling behavior</li>
<li>Line wrapping</li>
</ul>
<p dir="auto">For environments without screenshot capabilities, tests can fall back to fixture-based comparison, making the test suite
versatile for CI/CD pipelines.</p>
<p dir="auto">To enable screenshots for all tests, use the following command:</p>
<div dir="auto" data-snippet-clipboard-copy-content="ENABLE_SCREENSHOT_TESTING=1 composer test"><pre>ENABLE_SCREENSHOT_TESTING=1 composer <span>test</span></pre></div>
<p dir="auto">To enable screenshots for only the tests that don't already have fixtures, use the following command:</p>
<div dir="auto" data-snippet-clipboard-copy-content="ENABLE_SCREENSHOT_TESTING=2 composer test"><pre>ENABLE_SCREENSHOT_TESTING=2 composer <span>test</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Contributions are welcome! Please feel free to submit a pull request.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">The MIT License (MIT).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Support</h2><a id="user-content-support" aria-label="Permalink: Support" href="#support"></a></p>
<p dir="auto">This is free! If you want to support me:</p>
<ul dir="auto">
<li>Sponsor my open source work: <a href="https://aaronfrancis.com/backstage" rel="nofollow">aaronfrancis.com/backstage</a></li>
<li>Check out my courses:
<ul dir="auto">
<li><a href="https://masteringpostgres.com/" rel="nofollow">Mastering Postgres</a></li>
<li><a href="https://highperformancesqlite.com/" rel="nofollow">High Performance SQLite</a></li>
<li><a href="https://screencasting.com/" rel="nofollow">Screencasting</a></li>
</ul>
</li>
<li>Help spread the word about things I make</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Credits</h2><a id="user-content-credits" aria-label="Permalink: Credits" href="#credits"></a></p>
<p dir="auto">Solo Screen was developed by Aaron Francis. If you like it, please let me know!</p>
<ul dir="auto">
<li>Twitter: <a href="https://twitter.com/aarondfrancis" rel="nofollow">https://twitter.com/aarondfrancis</a></li>
<li>Website: <a href="https://aaronfrancis.com/" rel="nofollow">https://aaronfrancis.com</a></li>
<li>YouTube: <a href="https://youtube.com/@aarondfrancis" rel="nofollow">https://youtube.com/@aarondfrancis</a></li>
<li>GitHub: <a href="https://github.com/aarondfrancis">https://github.com/aarondfrancis</a></li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bigscreen Beyond 2 (115 pts)]]></title>
            <link>https://www.bigscreenvr.com/</link>
            <guid>43438206</guid>
            <pubDate>Fri, 21 Mar 2025 17:03:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bigscreenvr.com/">https://www.bigscreenvr.com/</a>, See on <a href="https://news.ycombinator.com/item?id=43438206">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[IronRDP: a Rust implementation of Microsoft's RDP protocol (416 pts)]]></title>
            <link>https://github.com/Devolutions/IronRDP</link>
            <guid>43436894</guid>
            <pubDate>Fri, 21 Mar 2025 15:35:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Devolutions/IronRDP">https://github.com/Devolutions/IronRDP</a>, See on <a href="https://news.ycombinator.com/item?id=43436894">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">IronRDP</h2><a id="user-content-ironrdp" aria-label="Permalink: IronRDP" href="#ironrdp"></a></p>
<p dir="auto"><a href="https://docs.rs/ironrdp/" rel="nofollow"><img src="https://camo.githubusercontent.com/bf6dabe8f34d8f91722faf37bda98b112c92e3dc5d27ca7bf2f96ece38858cee/68747470733a2f2f646f63732e72732f69726f6e7264702f62616467652e737667" alt="" data-canonical-src="https://docs.rs/ironrdp/badge.svg"></a> <a href="https://crates.io/crates/ironrdp" rel="nofollow"><img src="https://camo.githubusercontent.com/e333fcfc798a9cef1d5f611a66b4c6acff46783333d3aa5065431353a014f5f3/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f69726f6e726470" alt="" data-canonical-src="https://img.shields.io/crates/v/ironrdp"></a></p>
<p dir="auto">A collection of Rust crates providing an implementation of the Microsoft Remote Desktop Protocol, with a focus on security.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Demonstration</h2><a id="user-content-demonstration" aria-label="Permalink: Demonstration" href="#demonstration"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description ironrdp-tauri-client-hackaton-result.mp4">ironrdp-tauri-client-hackaton-result.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/3809077/202049929-76f42471-aeb0-41da-9118-0dc6ea491bd2.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDI1ODIxMDEsIm5iZiI6MTc0MjU4MTgwMSwicGF0aCI6Ii8zODA5MDc3LzIwMjA0OTkyOS03NmY0MjQ3MS1hZWIwLTQxZGEtOTExOC0wZGM2ZWE0OTFiZDIubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDMyMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAzMjFUMTgzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NTVlOGUwZjQ5OGI5YWJiZjA0NTc5YmRhYmM1NTk5OGE0ZjA2NjJmMjc4ZjU4NWM4ZDRmYTRmMGRhNWMxNzhkZiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.u_8hgiOI0uMaZURyCYU9ydGfb4AiZy-mpLCxTS7eq-U" data-canonical-src="https://private-user-images.githubusercontent.com/3809077/202049929-76f42471-aeb0-41da-9118-0dc6ea491bd2.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDI1ODIxMDEsIm5iZiI6MTc0MjU4MTgwMSwicGF0aCI6Ii8zODA5MDc3LzIwMjA0OTkyOS03NmY0MjQ3MS1hZWIwLTQxZGEtOTExOC0wZGM2ZWE0OTFiZDIubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDMyMSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAzMjFUMTgzMDAxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NTVlOGUwZjQ5OGI5YWJiZjA0NTc5YmRhYmM1NTk5OGE0ZjA2NjJmMjc4ZjU4NWM4ZDRmYTRmMGRhNWMxNzhkZiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.u_8hgiOI0uMaZURyCYU9ydGfb4AiZy-mpLCxTS7eq-U" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">Video Codec Support</h2><a id="user-content-video-codec-support" aria-label="Permalink: Video Codec Support" href="#video-codec-support"></a></p>
<p dir="auto">Supported codecs:</p>
<ul dir="auto">
<li>Uncompressed raw bitmap</li>
<li>Interleaved Run-Length Encoding (RLE) Bitmap Codec</li>
<li>RDP 6.0 Bitmap Compression</li>
<li>Microsoft RemoteFX (RFX)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Examples</h2><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://github.com/Devolutions/IronRDP/tree/master/crates/ironrdp-client"><code>ironrdp-client</code></a></h3><a id="user-content-ironrdp-client" aria-label="Permalink: ironrdp-client" href="#ironrdp-client"></a></p>
<p dir="auto">A full-fledged RDP client based on IronRDP crates suite, and implemented using non-blocking, asynchronous I/O.</p>
<div dir="auto" data-snippet-clipboard-copy-content="cargo run --bin ironrdp-client -- <HOSTNAME> --username <USERNAME> --password <PASSWORD>"><pre>cargo run --bin ironrdp-client -- <span>&lt;</span>HOSTNAME<span>&gt;</span> --username <span>&lt;</span>USERNAME<span>&gt;</span> --password <span>&lt;</span>PASSWORD<span>&gt;</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://github.com/Devolutions/IronRDP/blob/master/crates/ironrdp/examples/screenshot.rs"><code>screenshot</code></a></h3><a id="user-content-screenshot" aria-label="Permalink: screenshot" href="#screenshot"></a></p>
<p dir="auto">Example of utilizing IronRDP in a blocking, synchronous fashion.</p>
<p dir="auto">This example showcases the use of IronRDP in a blocking manner. It
demonstrates how to create a basic RDP client with just a few hundred lines
of code by leveraging the IronRDP crates suite.</p>
<p dir="auto">In this basic client implementation, the client establishes a connection
with the destination server, decodes incoming graphics updates, and saves the
resulting output as a BMP image file on the disk.</p>
<div dir="auto" data-snippet-clipboard-copy-content="cargo run --example=screenshot -- --host <HOSTNAME> --username <USERNAME> --password <PASSWORD> --output out.bmp"><pre>cargo run --example=screenshot -- --host <span>&lt;</span>HOSTNAME<span>&gt;</span> --username <span>&lt;</span>USERNAME<span>&gt;</span> --password <span>&lt;</span>PASSWORD<span>&gt;</span> --output out.bmp</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">How to enable RemoteFX on server</h3><a id="user-content-how-to-enable-remotefx-on-server" aria-label="Permalink: How to enable RemoteFX on server" href="#how-to-enable-remotefx-on-server"></a></p>
<p dir="auto">Run the following PowerShell commands, and reboot.</p>
<div dir="auto" data-snippet-clipboard-copy-content="Set-ItemProperty -Path 'HKLM:\Software\Policies\Microsoft\Windows NT\Terminal Services' -Name 'ColorDepth' -Type DWORD -Value 5
Set-ItemProperty -Path 'HKLM:\Software\Policies\Microsoft\Windows NT\Terminal Services' -Name 'fEnableVirtualizedGraphics' -Type DWORD -Value 1"><pre><span>Set-ItemProperty</span> <span>-</span>Path <span><span>'</span>HKLM:\Software\Policies\Microsoft\Windows NT\Terminal Services<span>'</span></span> <span>-</span>Name <span><span>'</span>ColorDepth<span>'</span></span> <span>-</span>Type DWORD <span>-</span>Value <span>5</span>
<span>Set-ItemProperty</span> <span>-</span>Path <span><span>'</span>HKLM:\Software\Policies\Microsoft\Windows NT\Terminal Services<span>'</span></span> <span>-</span>Name <span><span>'</span>fEnableVirtualizedGraphics<span>'</span></span> <span>-</span>Type DWORD <span>-</span>Value <span>1</span></pre></div>
<p dir="auto">Alternatively, you may change a few group policies using <code>gpedit.msc</code>:</p>
<ol dir="auto">
<li>
<p dir="auto">Run <code>gpedit.msc</code>.</p>
</li>
<li>
<p dir="auto">Enable <code>Computer Configuration/Administrative Templates/Windows Components/Remote Desktop Services/Remote Desktop Session Host/Remote Session Environment/RemoteFX for Windows Server 2008 R2/Configure RemoteFX</code></p>
</li>
<li>
<p dir="auto">Enable <code>Computer Configuration/Administrative Templates/Windows Components/Remote Desktop Services/Remote Desktop Session Host/Remote Session Environment/Enable RemoteFX encoding for RemoteFX clients designed for Windows Server 2008 R2 SP1</code></p>
</li>
<li>
<p dir="auto">Enable <code>Computer Configuration/Administrative Templates/Windows Components/Remote Desktop Services/Remote Desktop Session Host/Remote Session Environment/Limit maximum color depth</code></p>
</li>
<li>
<p dir="auto">Reboot.</p>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Architecture</h2><a id="user-content-architecture" aria-label="Permalink: Architecture" href="#architecture"></a></p>
<p dir="auto">See the <a href="https://github.com/Devolutions/IronRDP/blob/master/ARCHITECTURE.md">ARCHITECTURE.md</a> document.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting help</h2><a id="user-content-getting-help" aria-label="Permalink: Getting help" href="#getting-help"></a></p>
<ul dir="auto">
<li>Report bugs in the <a href="https://github.com/Devolutions/IronRDP/issues">issue tracker</a></li>
<li>Discuss the project on the <a href="https://matrix.to/#/#IronRDP:matrix.org" rel="nofollow">matrix room</a></li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Road Not Taken Is Guaranteed Minimum Income (104 pts)]]></title>
            <link>https://blog.codinghorror.com/the-road-not-taken-is-guaranteed-minimum-income/</link>
            <guid>43436454</guid>
            <pubDate>Fri, 21 Mar 2025 14:54:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.codinghorror.com/the-road-not-taken-is-guaranteed-minimum-income/">https://blog.codinghorror.com/the-road-not-taken-is-guaranteed-minimum-income/</a>, See on <a href="https://news.ycombinator.com/item?id=43436454">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
                <p><em>The following is drawn from a speech I delivered today at </em><a href="https://cooper.edu/about/great-hall/history" rel="noreferrer"><em>Cooper Union's Great Hall</em></a><em> in New York City, where I joined Lieutenant Colonel </em><a href="https://en.wikipedia.org/wiki/Alexander_Vindman" rel="noreferrer"><em>Alexander Vindman</em></a><em> to discuss the future of the American Dream:</em></p><figure><iframe width="200" height="113" src="https://www.youtube.com/embed/ouwlIHkXCw4?start=2635&amp;feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" title="Rebuilding The American Dream : A Path Forward"></iframe><figcaption><p><i><em>This shared address, </em></i><a href="https://cooper.edu/events-and-exhibitions/events/rebuilding-american-dream-path-forward" rel="noreferrer"><i><em>Rebuilding the American Dream: A Path Forward</em></i></a><i><em>, outlines both immediate actions and a long-term plan to give every American a fair chance at achieving the dream that was promised when our nation was founded.</em></i></p></figcaption></figure><p>What is the American Dream?</p><p>In 1931, at the height of the Great Depression, James Truslow Adams <a href="https://en.wikipedia.org/wiki/American_Dream" rel="noreferrer">first defined</a> the American Dream as</p><blockquote>“[...] a land in which life should be better and richer and fuller for everyone, with opportunity for each according to ability or achievement. [...] not a dream of motor cars and high wages merely, but a dream of social order in which [everyone] shall be able to attain to the fullest stature of which they are innately capable, and be recognized by others for what they are, regardless of the fortuitous circumstances of birth or position”</blockquote><p>I wanted to know what these words meant to us today. I needed to know what parts of the American Dream we all still had in common. I had to make some sense of what was happening to our country. I’ve been writing on my blog since 2004, and on November 7th, I started writing the most difficult piece I have ever written. </p><p>I asked so many Americans to tell me what the American Dream personally meant to them, and I wrote it all down.</p><p>Later in November, I attended a theater performance of The Outsiders at my son’s public high school - an adaptation of <a href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/The_Outsiders_(novel)&amp;sa=D&amp;source=docs&amp;ust=1742507328643679&amp;usg=AOvVaw2GgwTbUV3qWhPvsHuYFgy7" rel="noreferrer">the 1967 novel by S.E. Hinton</a>. All I really knew was the famous “stay gold” line from the 1983 movie. But as I sat there in the audience among my neighbors, watching the complete story acted out in front of me by these teenagers, I slowly realized what "stay gold" meant: <em>sharing the American Dream.</em></p><figure><img src="https://blog.codinghorror.com/content/images/2025/03/IMG_7003.jpg" alt="" loading="lazy" width="2000" height="2894" srcset="https://blog.codinghorror.com/content/images/size/w600/2025/03/IMG_7003.jpg 600w, https://blog.codinghorror.com/content/images/size/w1000/2025/03/IMG_7003.jpg 1000w, https://blog.codinghorror.com/content/images/size/w1600/2025/03/IMG_7003.jpg 1600w, https://blog.codinghorror.com/content/images/size/w2400/2025/03/IMG_7003.jpg 2400w" sizes="(min-width: 720px) 720px"></figure><p>We cannot merely attain the Dream. The dream is incomplete until we share it with our fellow Americans. That act of sharing is the final realization of everything the dream stands for.</p><p>Thanks to S.E. Hinton, I finally had a name for my essay, <a href="https://blog.codinghorror.com/stay-gold-america/" rel="noreferrer">“Stay Gold, America.”</a> I published it on January 7th, with a <strong>Pledge to Share the American Dream</strong>.</p><p>In the first part of the Pledge, the short term, our family made eight 1 million dollar donations to the following nonprofit groups: <a href="https://teamrubiconusa.org/" rel="noreferrer">Team Rubicon</a>, <a href="https://childrenshungerfund.org/" rel="noreferrer">Children’s Hunger Fund</a>, <a href="https://pen.org/">PEN America</a>, <a href="https://www.thetrevorproject.org/" rel="noreferrer">The Trevor Project</a>, <a href="https://www.naacpldf.org/" rel="noreferrer">NAACP Legal Defense and Educational Fund</a>, <a href="https://www.firstgenerationinvestors.com/" rel="noreferrer">First Generation Investors</a>, <a href="https://www.globalrefuge.org/" rel="noreferrer">Global Refuge</a>, and <a href="https://www.plannedparenthood.org/" rel="noreferrer">Planned Parenthood</a>. </p><p>Beyond that, we made many additional one million dollar donations to reinforce our technical infrastructure in America – <a href="https://www.wikipedia.org/" rel="noreferrer">Wikipedia</a>, <a href="https://archive.org/" rel="noreferrer">The Internet Archive</a>, <a href="https://commoncrawl.org/" rel="noreferrer">The Common Crawl Foundation</a>, <a href="https://letsencrypt.org/" rel="noreferrer">Let’s Encrypt</a>, pioneering independent internet journalism, and several other crucial open source software infrastructure projects that power much of the world today.</p><p>I encourage every American to <a href="https://www.charitynavigator.org/" rel="noreferrer">contribute soon</a>, however you can, to organizations you feel are effectively helping those most currently in need.</p><p>But short term fixes are not enough.</p><p>The <strong>Pledge To Share The American Dream</strong> requires a much more ambitious second act – deeper, long term changes that will take decades. Over the next five years, my family pledges half our remaining wealth to plant a seed toward foundational long term efforts ensuring that all Americans continue to have the same fair access to the American Dream.</p><p>Let me tell you about my own path to the American Dream. It was rocky. My parents were born into deep poverty in Mercer County, West Virginia, and Beaufort County, North Carolina. Our family eventually clawed our way to the bottom of the middle class in Virginia. </p><p>I won’t dwell on it, but every family has their own problems. We did not remain middle class for long. But through all this, my parents got the most important thing right: they loved me openly and unconditionally. That is everything. It’s the only reason I am standing here in front of you today.</p><p>With my family’s support, I managed to achieve a solid public education in Chesterfield County, Virginia, and had the incredible privilege of an affordable state education at the <a href="https://www.virginia.edu/aboutuva/" rel="noreferrer">University of Virginia</a>. This is a college uniquely rooted in the beliefs of one of the most prominent Founding Fathers, Thomas Jefferson. He was a living paradox. A man of profound ideals and yet flawed – trapped in the values of his time and place. </p><p>Still, he wrote “Life, liberty, and the pursuit of happiness” at the top of the Declaration of Independence. These words were, and still are, revolutionary. They define our fundamental shared American values, although we have not always lived up to them. The American Dream isn’t about us succeeding, alone, by ourselves, but about connecting with each other and succeeding together as Americans.</p><p>I’ve been concerned about wealth concentration in America ever since I watched a <a href="https://www.youtube.com/watch?v=QPKKQnijnsM" rel="noreferrer">2012 video by politizane</a> illustrating just how extreme wealth concentration already was. </p><figure><iframe width="200" height="113" src="https://www.youtube.com/embed/QPKKQnijnsM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" title="Wealth Inequality in America"></iframe></figure><p>I had no idea how close we were to the American Gilded Age from the late 1800s. This period was given a name in the 1920s by historians referencing Mark Twain’s 1873 novel, <a href="https://en.wikipedia.org/wiki/The_Gilded_Age:_A_Tale_of_Today" rel="noreferrer">The Gilded Age, A Tale of Today</a>. </p><figure><img src="https://blog.codinghorror.com/content/images/2025/03/image-151.png" alt="" loading="lazy" width="1200" height="800" srcset="https://blog.codinghorror.com/content/images/size/w600/2025/03/image-151.png 600w, https://blog.codinghorror.com/content/images/size/w1000/2025/03/image-151.png 1000w, https://blog.codinghorror.com/content/images/2025/03/image-151.png 1200w" sizes="(min-width: 720px) 720px"></figure><p>During this time, labor strikes often turned violent, with the <a href="https://en.wikipedia.org/wiki/Homestead_strike" rel="noreferrer">Homestead Strike of 1892</a> resulting in deadly confrontations between workers and Pinkerton guards hired by factory owners. Rapid industrialization created hazardous working conditions in factories, mines, and railroads, where thousands died due to insufficient safety regulations and employers who prioritized profit over worker welfare.</p><p>In January 2025, while I was still writing <a href="https://blog.codinghorror.com/stay-gold-america/" rel="noreferrer">“Stay Gold, America”</a>, we entered the period of greatest wealth concentration in the entirety of American history. As of 2021, the <a href="https://usafacts.org/articles/how-this-chart-explains-americans-wealth-across-income-levels/" rel="noreferrer">top 1% of households controlled 32% of all wealth</a>, while the bottom 50% only have 2.6%. It's difficult to find more recent data, but wealth concentration has only intensified in the last four years.</p><p>We can no longer say “Gilded Age”.</p><p>We must now say “The First Gilded Age”.</p><p>Today, in our <em>second</em> Gilded Age, more and more people find their path to the American Dream blocked. When Americans face unaffordable education, lack of accessible healthcare, or lack affordable housing, they aren't just disadvantaged – they're trapped, often burdened by massive debt. They have no stable foundation to build their lives. They watch desperately, working as hard as they can, while life simply passes them by, without even the freedom to choose their own lives.</p><p>They don't have time to build a career. They don't have time to learn, to improve. They don't get to start a business. They can’t choose where their kids will grow up, or whether to have children at all, because they can’t afford to. Here in the land of opportunity, the pursuit of happiness has become an endless task for too many. </p><figure><img src="https://blog.codinghorror.com/content/images/2025/03/image-152.png" alt="" loading="lazy" width="1178" height="1141" srcset="https://blog.codinghorror.com/content/images/size/w600/2025/03/image-152.png 600w, https://blog.codinghorror.com/content/images/size/w1000/2025/03/image-152.png 1000w, https://blog.codinghorror.com/content/images/2025/03/image-152.png 1178w" sizes="(min-width: 720px) 720px"></figure><p>We are denying people any real chance of achieving the dream that we promised them – that we promised the entire world – when we founded this nation. It is such a profound betrayal of everything we ever dreamed about. Without a stable foundation to build a life on, our fellow Americans cannot even <em>pursue</em> the American Dream, much less achieve it.</p><p>I ask you this: as an American, what is the purpose of a dream left unshared with so many for so long? What’s happening to our dream? Are we really willing to let go of our values so easily? We’re Americans. We fight for our values, the values embodied in our dream, the ones we founded this country on. </p><p>Why aren’t we sharing the American Dream? </p><p>Why aren’t we giving everyone a fair chance at Life, Liberty, and the Pursuit of Happiness by providing them the fundamentals they need to get there?</p><p>The Dream worked for me, decades ago, and I deeply believe that the American Dream can still work for everyone – if we ensure every American has the same fair chance we did. The American Dream was never about a few people being extraordinarily wealthy. It’s about everyone having an equal chance to succeed and pursue their dreams – their own happiness. It belongs to them. I think we owe them at least that. I think we owe <em>ourselves</em> at least that.</p><p>What can we do about this? There are no easy answers. I can’t even pretend to have the answer, because there isn’t any one answer to give. Nothing worth doing is ever that simple. But I can tell you this: all the studies and all the data I’ve looked at have strongly pointed to one foundational thing we can do here in America over the next five years.</p><p>Natalie Foster, co-founder of the <a href="https://economicsecurityproject.org/" rel="noreferrer">Economic Security Project</a>, makes a powerful case for the idea that, with all this concentrated wealth, we can offer a <strong>Guaranteed Minimum Income</strong> in the poorest areas of this country – the areas of most need, where money goes the farthest – to unlock vast amounts of untapped American potential. </p><figure><a href="https://www.amazon.com/dp/1620978466/"><img src="https://blog.codinghorror.com/content/images/2025/03/the-guarantee-book-natalie-foster-1.jpg" alt="" loading="lazy" width="467" height="700"></a></figure><p>This isn’t a new idea. We’ve been doing this a while now in different forms, but we never called it Guaranteed Minimum Income.</p><p>In <strong>1797</strong>, Thomas Paine proposed a retirement pension funded by estate taxes. It didn’t go anywhere, but it planted a seed. Much later we implemented the Social Security Act in <strong>1935</strong> . The economic chaos of the Great Depression coupled with the inability of private philanthropy to provide economic security inspired Franklin Roosevelt’s New Deal government programs. The most popular and effective program to emerge from this era was Social Security, providing a guaranteed income for retirees. Before Social Security, <em>half</em> of seniors lived in poverty. Today only 10% of seniors live in poverty.</p><p>In his <strong>1967</strong> book <a href="https://en.wikipedia.org/wiki/Where_Do_We_Go_from_Here:_Chaos_or_Community%3F" rel="noreferrer">Where Do We Go From Here: Chaos or Community</a>, Martin Luther King Jr made the moral case for a form of UBI, Universal Basic Income. King believed that economic insecurity was at the root of all inequality. He stated that a guaranteed income — direct cash disbursements — was the simplest and best way to fight poverty.</p><figure><img src="https://blog.codinghorror.com/content/images/2025/03/image-147.png" alt="" loading="lazy" width="1920" height="1401" srcset="https://blog.codinghorror.com/content/images/size/w600/2025/03/image-147.png 600w, https://blog.codinghorror.com/content/images/size/w1000/2025/03/image-147.png 1000w, https://blog.codinghorror.com/content/images/size/w1600/2025/03/image-147.png 1600w, https://blog.codinghorror.com/content/images/2025/03/image-147.png 1920w" sizes="(min-width: 720px) 720px"></figure><p>In <strong>1972</strong>, Congress established the Supplemental Security Income (SSI) program, providing direct cash assistance to low-income elderly, blind, and disabled individuals with little or no income. This cash can be used for food, housing, and medical expenses, the essentials for financial stability. As of January, 2025, over 7.3 million people receive SSI benefits.</p><p>In 1975, Congress passed the Tax Reduction Act, establishing the Earned Income Tax Credit. This tax credit benefits working-class parents with children, encouraging work by increasing the income of low-income workers. In 2023, it lifted about 6.4 million people out of poverty, including 3.4 million children. <a href="https://www2.census.gov/library/publications/2024/demo/p60-283.pdf" rel="noreferrer">According to the Census Bureau</a>, it is the second most effective anti-poverty tool after Social Security.</p><p>In 2019, directly inspired by King, mayor <a href="https://en.wikipedia.org/wiki/Michael_Tubbs" rel="noreferrer">Michael Tubbs</a> – at age 26, one of the youngest mayors in American history – launched the $3 million <a href="https://www.stocktondemonstration.org/" rel="noreferrer">Stockton Economic Empowerment Demonstration</a>. It provided 125 residents with $500 per month in unconditional cash payments for two years. The program found that recipients experienced improved financial stability, increased full-time employment, and enhanced well-being.</p><figure><img src="https://blog.codinghorror.com/content/images/2025/03/image-150.png" alt="" loading="lazy" width="1200" height="800" srcset="https://blog.codinghorror.com/content/images/size/w600/2025/03/image-150.png 600w, https://blog.codinghorror.com/content/images/size/w1000/2025/03/image-150.png 1000w, https://blog.codinghorror.com/content/images/2025/03/image-150.png 1200w" sizes="(min-width: 720px) 720px"><figcaption><span>Michael Tubbs, Former Mayor of Stockton</span></figcaption></figure><p>In my “Stay Gold, America” blog post, I referenced the Robert Frost "Stay Gold" poem and S.E. Hinton's famous famous novel The Outsiders, urging us to retain our youthful ideals as we grow older. Ideals embodied in the American Dream.</p><p>Which brings us to another Robert Frost poem, the <a href="https://www.poetryfoundation.org/poems/44272/the-road-not-taken" rel="noreferrer">Road Not Taken</a>. Our proposal to ensure access to the American Dream is to follow the path less travelled by:  <strong>Guaranteed Minimum Income. </strong>GMI is a simpler, more practical, more scalable plan to directly address the root of economic insecurity with minimum bureaucracy.</p><p>We are partnering with GiveDirectly, who oversaw <a href="https://www.givedirectly.org/united-states/" rel="noreferrer">the most GMI studies</a> in the United States, and OpenResearch, who just completed the <a href="https://www.openresearchlab.org/studies/unconditional-cash-study/study" rel="noreferrer">largest, most detailed GMI study</a> ever conducted in this country in 2023. We are working together to launch a new Guaranteed Minimum Income initiative in rural American communities.</p><p>Network effects within communities explain why equality of opportunity is so effective, and why a shared American Dream is the most powerful dream of all. The potential of the American Dream becomes vastly greater as more people have access to it, <strong>because they share it</strong>.</p><figure><img src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXfd8X08RPpuTlf2hnkYH_SF9VY0by5uu7P6q5ANdin5beZlN-_hNxVOEcU2KhLkjS7_IIi4F01zcx_0ReiSLLwZALqMRHfFjcvGVHbVdoo--o_LBqrzN3LzAqhhMe-95CgGZ3_KNw?key=oivBMdfm9lVOB8R5dWgCy3LV" alt="" loading="lazy" width="624" height="351"><figcaption><span>Source: GiveDirectly</span></figcaption></figure><p>They share it with their families, their friends, and their neighbors. The groundbreaking, massive <a href="https://www.openresearchlab.org/studies/unconditional-cash-study/documentation" rel="noreferrer">2023 OpenResearch UBI study data</a> showed that when you give money to the poorest among us, they consistently go <em>out</em> <em>of their way</em> to share that money with others in desperate need.</p><p>The power of opportunity is not in what it can do for one person, but how it connects and strengthens bonds between people. When you empower a couple, you allow them to build a family. When you empower families, you allow them to build a community. When you guarantee fundamentals, you're providing a foundation for those connections to grow and thrive. This is the incredible power and value of community. That is what we are investing in – each other.</p><p>A system where there are no guarantees creates conflict. It creates inequality. A massive concentration of wealth in so few hands weakens connections between us and prevents new ones. America began as a place of connection. Millions of us came together to build this nation, not individually, but together. Equality is connection, and connection is more valuable than any product any company will ever sell you.</p><p>You may ask, why focus on rural communities? There are consistently higher poverty rates in rural counties, with fewer job opportunities, lower wages, and worse access to healthcare and education. It’s not a new problem, either — places like Appalachia, the Mississippi Delta, and American Indian reservations have been stuck in poverty for decades, with some counties like Oglala Lakota, SD (55.8%) and McDowell, WV (37.6%) hitting extreme levels. Meanwhile, urban counties rarely see numbers that high. The data from the US Census and USDA Economic Research Service make it clear: if you’re poor in America, being rural makes it even harder to escape.</p><p>Rural areas offer smaller populations, which is helpful because we need to start small with lots of tightly controlled studies that we can carefully scale and improve on for larger areas. We hope to build a large body of scientific data showing that GMI really does improve the lives, and the communities, of our fellow Americans.</p><figure><img src="https://blog.codinghorror.com/content/images/2025/03/image-149.png" alt="" loading="lazy" width="1600" height="1067" srcset="https://blog.codinghorror.com/content/images/size/w600/2025/03/image-149.png 600w, https://blog.codinghorror.com/content/images/size/w1000/2025/03/image-149.png 1000w, https://blog.codinghorror.com/content/images/2025/03/image-149.png 1600w" sizes="(min-width: 720px) 720px"></figure><h3 id="the-initial-plan-is-to-target-a-few-counties-that-i-have-a-personal-connection-to-and-are-still-currently-in-poverty-decades-later">The initial plan is to target a few counties that I have a personal connection to, and are still currently in poverty, decades later:</h3><ul><li>My father was born in <a href="https://en.wikipedia.org/wiki/Mercer_County,_West_Virginia" rel="noreferrer">Mercer County</a>, West Virginia, where the collapse of coal mining left good people struggling to survive. Their living and their way of life is now all but gone, and good jobs are hard to find.</li><li>My mother’s birthplace, <a href="https://en.wikipedia.org/wiki/Beaufort_County,_North_Carolina" rel="noreferrer">Beaufort County</a>, North Carolina, has been hit just as hard, with farming and factory jobs disappearing and families left wondering what’s next.</li><li>Our third county is yet to be decided, but will be a community also facing the same systemic, generational obstacles to economic stability and achieving the American Dream.</li></ul><p>We will work with existing local groups to coordinate GMI studies where community members choose to enroll. We will conduct outreach and and provide mentorship to these opt-in study participants. It will be teamwork between Americans.</p><p>We hope Veterans will play a crucial role in our effort. We plan to work with local communities and veteran-serving organizations to engage veterans to support and execute our GMI programs – the same veterans who served our country with distinction, returning home with exceptional leadership skills and a deep commitment to their communities. Their involvement ensures these programs reflect core American values of self-reliance and community service to fellow Americans. </p><p>We'll also partner with established community organizations — churches, civic groups, community colleges, local businesses. These partnerships help integrate our GMI studies with existing support systems, rather than creating new ones.</p><p>GiveDirectly and OpenResearch will build on their existing body of work, gathering extensive data from these refined studies. We'll measure employment, entrepreneurship, education, health, and community engagement. We'll conduct regular interviews with participants to understand their experience. How is this working for you? How can we make it better? You tell us. How can we make it better together?</p><p>Economic security isn't only about individual well-being – it's the bedrock of democracy. When people aren't constantly worried about feeding themselves, feeding their family, having decent healthcare, having a place to live… we have given them room to breathe. We have given them freedom. The freedom to raise their children, the freedom to start businesses, the freedom to choose where they work, the freedom to volunteer... the freedom to <em>vote</em>.</p><p>This isn’t about ideology or government. It’s about us, as Americans, working together to invest in our future – possibly the greatest unlocking of human potential in our entire history. I do not say these things lightly. I’ve seen it work. I’ve looked at all the existing study data. A little bit of money is incredibly transformational for people in poverty – the people who need it the most – the people who cannot live up to their potential because they’re so busy simply trying to survive. Imagine what they could do if we gave them just a little breathing room.</p><p>GMI is a long term investment in the future of what America should be, the way we wrote it down in the Declaration of Independence, perhaps incompletely – but our democracy was always meant to be malleable, to change, to adapt, and improve.</p><figure><img src="https://blog.codinghorror.com/content/images/2025/03/image-148.png" alt="" loading="lazy" width="1200" height="800" srcset="https://blog.codinghorror.com/content/images/size/w600/2025/03/image-148.png 600w, https://blog.codinghorror.com/content/images/size/w1000/2025/03/image-148.png 1000w, https://blog.codinghorror.com/content/images/2025/03/image-148.png 1200w" sizes="(min-width: 720px) 720px"></figure><p>I’d like to conclude by mentioning Aaron Swartz. He was a precocious teenage programmer much like myself. Aaron helped develop RSS web feeds, co-founded Reddit, and worked with Creative Commons to create flexible copyright licenses for the common good. He used technology to make information universally accessible to everyone.</p><p>Aaron created a system to download public domain court documents from PACER, a government database that charged fees for accessing what he believed should be freely available public information. A few years later, while visiting MIT under their open campus policy and as a research fellow at Harvard, he used MIT's network to download millions of academic articles from JSTOR, another fee-charging online academic journal repository, intending to make this knowledge freely accessible. Since taxpayers had funded much of this research, why shouldn’t that knowledge be freely available to everyone?</p><p>What Aaron saw as an act of academic freedom and information equality, authorities viewed as a crime—he was arrested in January 2011 and charged with multiple felonies for what many considered to be nothing more than accessing knowledge that should have been freely available to the public in the first place.</p><p>Despite JSTOR declining to pursue charges and MIT eventually calling for leniency, federal prosecutors aggressively pursued felony charges against Aaron with up to 35 years in prison. Facing overwhelming legal pressure and the prospect of being labeled a felon, Aaron took his own life at 26. This sparked widespread criticism of prosecutorial overreach and prompted discussions about open access to information. Deservedly so. Eight days later, in this very hall, there was a standing room only memorial service praising Aaron for his commitment to the public good.</p><p>Aaron pursued what was right for we, the people. He chose to build the public good despite knowing there would be risks. He chose to be an activist. I think we should all choose to be activists, to be brave, to stand up for our defining American principles. </p><h2 id="there-are-two-things-i-ask-of-you-today">There are two things I ask of you today.</h2><ul><li>Visit <a href="https://www.givedirectly.org/rural-us/">https://www.givedirectly.org/rural-us</a> where we'll be documenting our journey and findings from the initial three GMI rural county studies. Let’s find out together how guaranteed minimum income can transform American lives.</li><li>Talk about Guaranteed Minimum Income in your communities. Meet with your state and local officials. Share the existing study data. Share outcomes. Ask them about conducting GMI studies like ours in your area. We tell ourselves stories about why some people succeed and others don't. Challenge those stories. Economic security is not <em>charity</em>. It is an <em>investment</em> in vast untapped American potential in the poorest areas of this country.</li></ul><p>My family is committing 50 million dollars to this endeavor, but imagine if we had even more to share. Imagine how much more we could do, if we build this together, starting today. Decades from now, people will look back and wonder why it took us so long to share our dream of a better, richer, and fuller life with our fellow Americans.</p><p>I hope you join us on this grand experiment to share our American Dream. I believe everyone deserves a fair chance at what was promised when we founded this nation: Life, Liberty, and the pursuit of The American Dream.</p><h2 id="further-reading">Further Reading</h2><h3 id="historical-works"><strong>Historical Works</strong></h3><ul><li><strong>Martin Luther King Jr.</strong> – <em>Where Do We Go From Here: Chaos or Community?</em> (1967)</li><li><strong>Thomas Paine</strong> – <a href="https://thomaspaine.org/works/major-works/agrarian-justice.html" rel="noreferrer"><em>Agrarian Justice</em></a> (1797)</li><li><strong>Mark Twain &amp; Charles Dudley Warner</strong> – <em>The Gilded Age: A Tale of Today</em> (1873)</li></ul><h3 id="modern-books-on-economic-justice-and-basic-income"><strong>Modern Books on Economic Justice and Basic Income</strong></h3><ul><li><strong>Rutger Bregman</strong> – <em>Utopia for Realists: How We Can Build the Ideal World</em> (2014)</li><li><strong>Annie Lowrey</strong> – <em>Give People Money: How a Universal Basic Income Would End Poverty, Revolutionize Work, and Remake the World</em> (2018)</li><li><strong>Andrew Yang</strong> – <em>The War on Normal People: The Truth About America’s Disappearing Jobs and Why Universal Basic Income Is Our Future</em> (2018)</li><li><strong>Guy Standing</strong> – <em>Basic Income: And How We Can Make It Happen</em> (2017)</li><li><strong>Samuel Moyn</strong> – <em>Not Enough: Human Rights in an Unequal World</em> (2018)</li></ul><h3 id="wealth-inequality-and-labor-history"><strong>Wealth Inequality and Labor History</strong></h3><ul><li><strong>Joseph E. Stiglitz</strong> – <em>The Price of Inequality: How Today's Divided Society Endangers Our Future</em> (2012)</li><li><strong>Matthew Desmond</strong> – <em>Poverty, by America</em> (2023)</li><li><strong>Barbara Ehrenreich</strong> – <em>Nickel and Dimed: On (Not) Getting By in America</em> (2001)</li><li><strong>Thomas Piketty</strong> – <em>Capital in the Twenty-First Century</em> (2013)</li><li><strong>Jason Hickel</strong> – <em>The Divide: A Brief Guide to Global Inequality and Its Solutions</em> (2017)</li></ul><h3 id="guaranteed-minimum-income-economic-studies"><strong>Guaranteed Minimum Income &amp; Economic Studies</strong></h3><ul><li><strong>Natalie Foster</strong> – <em>The Guarantee: Inside the Fight for America's Next Economy</em> (2024)</li><li><strong>Michael Tubbs</strong> – <em>The Deeper the Roots: A Memoir of Hope and Home</em> (2021)</li></ul><figure><a href="https://longnow.org/ideas/upsetting-setup-creating-california-all/"><div><p>Michael Tubbs</p><p>Upsetting the Setup: Creating a California for All</p><p><img src="https://blog.codinghorror.com/content/images/icon/favicon-1.png" alt=""><span>Long Now</span><span>The Long Now Foundation</span></p></div><p><img src="https://blog.codinghorror.com/content/images/thumbnail/salt-020220720-tubbs-story-1280x800.png" alt="" onerror="this.style.display = 'none'"></p></a></figure>
            </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Congestion Pricing Is a Policy Miracle (167 pts)]]></title>
            <link>https://bettercities.substack.com/p/congestion-pricing-is-a-policy-miracle</link>
            <guid>43436315</guid>
            <pubDate>Fri, 21 Mar 2025 14:44:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bettercities.substack.com/p/congestion-pricing-is-a-policy-miracle">https://bettercities.substack.com/p/congestion-pricing-is-a-policy-miracle</a>, See on <a href="https://news.ycombinator.com/item?id=43436315">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>On January 5th 2025, Congestion Pricing went into effect in New York City. It was a long and winding road (as I detailed </span><a href="https://bettercities.substack.com/p/congestion-pricing-chronicles" rel="">here</a><span> last summer), but Governor Hochul finally made the right decision and allowed the policy to go into effect (albeit at a $9 price point vs. the initial $15). While I was a bit concerned at first that this lower price would reduce the effectiveness of the congestion relief zone, it has still been a resounding success over the past two months. </span></p><p><span>Despite this, Trump has issued an order demanding the MTA shut down the program tomorrow, March 21st. </span><a href="https://nyc.streetsblog.org/2025/02/19/king-trump-kills-congestion-pricing-can-he-really-do-this-not-legally" rel="">Thankfully, Trump’s legal authority here is questionable at best </a><span>and the MTA is making the decision to keep the program running absent any court order forcing their hand. </span></p><p>With so much debate over the impacts of congestion pricing, let’s take a look at the hard data and see exactly what’s happening:</p><p>First and foremost, congestion pricing has been stunningly effective at reducing traffic in Manhattan and the bridges/tunnels entering the city. </p><p><span>In the first month of congestion pricing, the MTA reported </span><strong><a href="https://www.mta.info/press-release/new-congestion-relief-zone-data-captures-magnitude-of-faster-commutes-drivers-and-bus" rel="">over 1 million fewer vehicle entries</a></strong><span> into the toll zone than would be expected without the program​, driving the significant traffic reduction seen above. It’s also worth noting that the above chart shows reduction in </span><em>travel times</em><span> rather than congestion—in many cases, </span><em>congestion</em><span> has completely disappeared, and the new travel times represent a congestion-free trip. </span><a href="https://nyc.streetsblog.org/2025/01/13/its-working-initial-data-show-congestion-pricing-has-stemmed-the-tide-of-years-of-increasing-traffic" rel="">This reduction reverses a years-long trend of rising traffic into Manhattan​</a><span> - congestion pricing took a worsening gridlock problem and solved a significant portion of it </span><em>overnight. </em><span>Additionally, while there were fears that congestion pricing would just re-route traffic to other boroughs, the data from the first months of congestion pricing suggests that </span><strong><a href="https://nyc.streetsblog.org/2025/03/19/gridlock-sam-trucks-arent-rerouting-into-the-bronx-or-staten-island-to-avoid-congestion-pricing" rel="">traffic has not increased elsewhere in the city.</a></strong></p><p>Transit ridership has seen a notable spike since the implementation of congestion pricing as travelers into Manhattan are switching from driving to transit.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png" width="1125" height="565" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:565,&quot;width&quot;:1125,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:45774,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://bettercities.substack.com/i/158255958?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1ad53081-bdc5-446b-ae02-3c45287cb7ec_1125x565.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The MTA as a whole is averaging 448K more public transit riders per day this year. To put this into perspective, the second-highest ridership subway in the US is the DC Metro, which a</span><a href="https://www.wmata.com/initiatives/ridership-portal/Metrorail-Ridership-Summary.cfm" rel="">veraged 304K riders per day in January</a><span> this year. The MTA ridership growth since congestion pricing went into effect is almost 50% larger than the </span><em>total</em><span> ridership of America’s next-largest subway system. </span></p><p>Unsurprisingly, bus ridership has seen the greatest relative growth, likely due to the fact that it most immediately benefits from congestion pricing thanks to faster travel times. </p><p><span>As you can see in the above chart, median trip times are down significantly, meaning that buses can go faster.  However, the most interesting aspect of the above chart is the “P90” savings: P90 is the 90th percentile trip (basically the bus rides from hell that get caught in horrible traffic). These trip times are down even more drastically, reflecting the increased reliability of bus rides and shaving off the long tail of major delays. And it’s not just the MTA - buses in </span><a href="https://www.nytimes.com/2025/01/26/nyregion/nyc-congestion-pricing-results.html" rel="">New Jersey are seeing significantly faster travel times, here’s quote from the CEO of Boxcar, a private bus company in New Jersey. </a></p><blockquote><p><em>“There’s been no need for subtle data analysis,” said Joe Colangelo, 39, Boxcar’s founder and chief executive, who has heard from customers who say they can’t believe how fast their rides are. “The buses are just flying.”</em></p><p><em>Boxcar has already added six more trips a week to and from Manhattan in response to a surge in ridership and is considering adding more, Mr. Colangelo said.</em></p></blockquote><p><span>One of the loudest criticisms of congestion pricing is that it “forces people to take the unsafe subway.”  Putting aside the fact that the </span><a href="https://usa.streetsblog.org/2014/12/19/heres-how-much-safer-transit-is-compared-to-driving" rel="">subway is already far safer than driving</a><span>, increased transit ridership has driven down subway crime as more “eyes on the train” reduce the appeal of crime and make the system more safe. In January of 2025, </span><a href="https://www.amny.com/nyc-transit/nyc-subway-crime-plummets-ridership-jumps-2025/" rel="">subway crimes were down 37% vs. 2024. </a><span> This is on an absolute basis, and when adjusting for ridership, the rate of crime went from one crime per 397K riders to one crime per 672K riders. To put that number into perspective, if someone rode the train twice per day, every day, for the next fifty years, that’s ~36,500 rides, and that rider would have only a ~5% chance of ever being a victim of a crime over the course of their lifetime. The risk of being a crime victim on the subway was already slim, but it’s exceedingly so now that congestion pricing has raised ridership and made the trains safer.  On top of that, congestion pricing will likely be used to help fund improved fare gates that will further increase safety in the system. </span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png" width="744" height="408" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:408,&quot;width&quot;:744,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:638415,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://bettercities.substack.com/i/158255958?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8db5e3a4-cb5c-4401-96ce-2b3728d12d44_744x408.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Source: Report of the Blue Ribbon Panel on MTA Fare and Toll Evasion</figcaption></figure></div><p><span>But it’s not just the trains that are safer. The streets are much safer as well - congestion pricing has been extremely effective at discouraging reckless motorists from driving into Manhattan, as car crashes and associated </span><a href="https://nyc.streetsblog.org/2025/01/23/congestion-relief-zone-is-also-a-crash-relief-zone-data" rel="">injuries have fell more than 50% in January 2025 vs. 2024</a><span>. Given the scale of </span><a href="https://bettercities.substack.com/p/the-uniquely-american-epidemic-of" rel="">America’s traffic violence epidemic</a><span>, congestion pricing is an extremely effective way to make progress at cut down on the &lt;40,000 traffic deaths we face annually. Additionally, </span><a href="https://www.thecity.nyc/2025/03/11/traffic-noise-complaints-drop-congestion-pricing/" rel="">honking complaints have decreased by 69% in the congestion relief zone</a><span>, marking a significant improvement in quality of life. This reduction will also greatly benefit public health, as noise pollution—primarily from cars—is one of the (not-so) silent killers in big cities, </span><a href="https://bettercities.substack.com/p/we-need-to-do-something-about-noise" rel="">a topic I have previously written about here</a><span>.</span></p><p><span>Another one of the loudest complaints about congestion pricing is that it would hurt businesses. Even though only </span><a href="https://x.com/sam_d_1995/status/1875769265976156532" rel="">11% of commuters to the congestion relief zone drive in the first place</a><span>, some people were worried that fewer visitors would come to Manhattan, hurting the economy. </span></p><p><span>Unsurprisingly, this has not been the case. Rather, we have seen the </span><em>opposite</em><span> - there’s been increased foot traffic, retail sales, restaurant reservations, and Broadway attendance since congestion pricing went into effect. </span><a href="https://x.com/sam_d_1995/status/1897291200459366787/photo/1" rel="">Here are some specific stats compiled by the MTA at a recent board meeting comparing Jan/Feb of 2025 vs. the same weeks of 2024</a><span>:</span></p><ul><li><p><span>Broadway attendance is up </span><strong>21%</strong><span> </span></p></li><li><p><span>Restaurant reservations are up </span><strong>7%</strong></p></li><li><p><span>Pedestrian traffic is up by </span><strong>4%</strong></p></li><li><p><span>Retail sales are up </span><strong>$900M </strong><span>and retail occupancy is up </span><strong>.5%</strong><span> </span></p></li><li><p><span>Commercial leasing is up </span><strong>61%</strong></p></li></ul><p><span>Additionally, a recent study found that congestion pricing will boost </span><a href="https://www.bloomberg.com/news/articles/2025-03-11/nyc-toll-projected-to-boost-economy-by-as-much-as-1-3-billion" rel="">NYC’s economy by up to $1.3 billion</a><span> and that </span><a href="https://reinventalbany.org/2024/07/mta-funded-jobs-at-risk-in-every-tri-state-congressional-district-from-hochul-cancellation-of-congestion-pricing/" rel="">scrapping congestion pricing would cost the state 100k jobs. </a></p><p><span>Unsurprisingly, congestion pricing is getting significantly more popular, with a recent poll showing that </span><a href="https://www.cbsnews.com/newyork/news/new-york-city-congestion-pricing-morning-consult-poll/" rel="">60% of New Yorkers oppose Trump’s attempt to scrap the program.</a><span> Nonetheless, Trump has ordered his DOT Secretary, former reality TV star Sean Duffy to scrap the program, </span><a href="https://www.the-independent.com/news/world/americas/us-politics/trump-long-live-the-king-twitter-b2701329.html" rel="">declaring himself a king in the process</a><span>. While congestion pricing has traditionally been supported by center-right economists (</span><a href="https://georgewbush-whitehouse.archives.gov/infocus/transportation/index.html" rel="">the Bush administration strongly supported congestion pricing</a><span>), Trump is an avatar of the modern Republican party’s hostility towards cities and urban living in general. </span></p><p><span>Thankfully, Trump’s legal argument attempt to scrap congestion pricing is riddled with factual errors (including </span><a href="https://x.com/sam_d_1995/status/1892284187308081498" rel="">misspelling the full name of the MTA</a><span>), and it looks like his </span><a href="https://www.nytimes.com/2025/02/19/nyregion/trump-congestion-pricing.html" rel="">legal case to overrule a state program is quite weak.</a><span> Accordingly, the MTA has said they will continue to run the congestion pricing program, despite Trump’s declaration, and a new lawsuit landed with </span><a href="https://finance.yahoo.com/news/york-congestion-pricing-plan-faces-184149195.html" rel="">Judge Liman who has ruled in favor of congestion pricing before.</a><span> Despite Trump’s bluster, I am optimistic that congestion pricing will remain in effect, continue working, and become even more popular as more and more residents experience its benefits, which is exactly what happened in </span><a href="https://nyc.streetsblog.org/2017/11/28/congestion-pricing-was-unpopular-in-stockholm-until-people-saw-it-in-action" rel="">Stockholm</a><span>.</span></p><p><span>The last thing that I think is important to note is that congestion pricing is a policy unicorn - </span><strong>it accomplishes a key goal (reducing congestion) </strong><em><strong>and </strong></em><strong>raises money</strong><span>.</span><strong> </strong><span>This is in contrast with highway widenings which are the opposite: they cost money (often billions of dollars) </span><em><span>and </span><a href="https://yaleclimateconnections.org/2024/10/why-widening-highways-doesnt-reduce-traffic-congestion/#:~:text=We%20rearrange%20our%20travel%20patterns,after%20the%20highway%20is%20widened." rel="">fail to accomplish the goal of reducing traffic due to induced demand</a><span>. </span></em><span>New York’s approach of congestion pricing and funding transit is a stark contrast from New Jersey’s approach of spending billions on </span><a href="https://turnpiketrap.org/" rel="">unsuccessful highway widenings</a><span> (and </span><a href="https://www.nj.gov/governor/news/news/562025/approved/20250127b.shtml" rel="">suing New York to stop congestion pricing</a><span>). It has been extremely upsetting to see </span><a href="https://www.nj.gov/governor/news/news/562025/approved/20250219b.shtml" rel="">Gov. Phil Murphy praise Trump for his decision</a><span>, and New Jersey deserves a better governor with a serious transportation plan. On that note, </span><a href="https://stevenfulop.com/policies/" rel="">I’d recommend supporting </a><strong><a href="https://stevenfulop.com/policies/" rel="">Steve Fulop</a></strong><a href="https://stevenfulop.com/policies/" rel=""> in the upcoming New Jersey governor primary</a><span>, who has far and away the best transportation plan for New Jersey. Additionally, other cities across the country, from Chicago to Los Angeles should be examining congestion pricing as a 1-2 punch to reduce traffic and improve transportation rather than continuing a flawed, expensive strategy of highway widenings that are doomed to fail. </span></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Torch Lens Maker – Differentiable Geometric Optics in PyTorch (155 pts)]]></title>
            <link>https://victorpoughon.github.io/torchlensmaker/</link>
            <guid>43435438</guid>
            <pubDate>Fri, 21 Mar 2025 13:29:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://victorpoughon.github.io/torchlensmaker/">https://victorpoughon.github.io/torchlensmaker/</a>, See on <a href="https://news.ycombinator.com/item?id=43435438">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-v-39a288b8=""><!--[--><!--]--><main data-v-39a288b8=""><div data-v-39a288b8=""><p><img alt="GitHub commit activity" src="https://img.shields.io/github/commit-activity/m/victorpoughon/torchlensmaker?label=commits&amp;color=blue" data-v-d8a5f41e=""><img alt="Python Version from PEP 621 TOML" src="https://img.shields.io/python/required-version-toml?tomlFilePath=https%3A%2F%2Fraw.githubusercontent.com%2Fvictorpoughon%2Ftorchlensmaker%2Frefs%2Fheads%2Fmain%2Fpyproject.toml&amp;logo=python&amp;logoColor=yellow&amp;color=yellowgreen" data-v-d8a5f41e=""><img alt="GitHub License" src="https://img.shields.io/github/license/victorpoughon/torchlensmaker?color=gold" data-v-d8a5f41e=""><img alt="PyPI - Version" src="https://img.shields.io/pypi/v/torchlensmaker" data-v-d8a5f41e=""><img alt="PyTorch powered" src="https://img.shields.io/badge/PyTorch-powered-red?logo=PyTorch" data-v-d8a5f41e=""></p><p>Welcome to <strong>Torch Lens Maker</strong>, an open-source Python library for differentiable geometric optics based on <a href="https://pytorch.org/" target="_blank" rel="noreferrer">PyTorch</a>. Currently a very experimental project, the goal is to be able to design complex real-world optical systems (lenses, mirrors, etc.) using modern computer code and state-of-the art numerical optimization.</p><div><p><span>python</span></p><pre tabindex="0"><code><span><span>import</span><span> torchlensmaker </span><span>as</span><span> tlm</span></span>
<span></span>
<span><span>optics </span><span>=</span><span> tlm.Sequential(</span></span>
<span><span>    tlm.ObjectAtInfinity(</span><span>beam_diameter</span><span>=</span><span>10</span><span>, </span><span>angular_size</span><span>=</span><span>20</span><span>),</span></span>
<span><span>    tlm.Gap(</span><span>15</span><span>),</span></span>
<span><span>    tlm.RefractiveSurface(tlm.Sphere(</span><span>diameter</span><span>=</span><span>25</span><span>, </span><span>R</span><span>=-</span><span>45.0</span><span>), </span><span>material</span><span>=</span><span>"BK7-nd"</span><span>),</span></span>
<span><span>    tlm.Gap(</span><span>3</span><span>),</span></span>
<span><span>    tlm.RefractiveSurface(tlm.Sphere(</span><span>diameter</span><span>=</span><span>25</span><span>, </span><span>R</span><span>=</span><span>tlm.parameter(</span><span>-</span><span>20</span><span>)), </span><span>material</span><span>=</span><span>"air"</span><span>),</span></span>
<span><span>    tlm.Gap(</span><span>100</span><span>),</span></span>
<span><span>    tlm.ImagePlane(</span><span>50</span><span>),</span></span>
<span><span>)</span></span>
<span></span>
<span><span>tlm.optimize(optics, tlm.optim.Adam(optics.parameters(), </span><span>lr</span><span>=</span><span>5e-4</span><span>), {</span><span>"base"</span><span>: </span><span>10</span><span>, </span><span>"object"</span><span>: </span><span>5</span><span>}, </span><span>100</span><span>)</span></span>
<span></span>
<span><span>tlm.show2d(optics, </span><span>title</span><span>=</span><span>"Landscape Lens"</span><span>)</span></span></code></pre></div><p>The core of the project is <em>differentiable geometric optics</em>: 3D collision detection and the laws of optics implemented in <a href="https://pytorch.org/" target="_blank" rel="noreferrer">PyTorch</a>. PyTorch provides world-class automatic differentiation, and access to state-of-the-art numerical optimization algorithms with GPU support.</p><p>The key idea is that there is a strong analogy to be made between layers of a neural network, and optical elements in a so-called <em>sequential</em> optical system. If we have a compound optical system made of a series of lenses, mirrors, etc., we can treat each optical element as the layer of a neural network. The data flowing through this network are not images, sounds, or text, but rays of light. Each layer affects light rays depending on its internal parameters (surface shape, refractive material...) and following the very much non‑linear Snell's law. Inference, or the forward model, is the optical simulation where given some input light, we compute the system's output light. Training, or optimization, is finding the best shapes for lenses to focus light where we want&nbsp;it.</p><table tabindex="0"><thead><tr><th></th><th><strong>Neural Network</strong></th><th><strong>Optical system</strong></th></tr></thead><tbody><tr><td><strong>Data</strong></td><td>Images, Text, Audio</td><td>Light rays</td></tr><tr><td><strong>Layers</strong></td><td>Conv2d, Linear, ReLU</td><td>Refraction, Reflection, Gap</td></tr><tr><td><strong>Loss Function</strong></td><td>Prediction error to labeled examples</td><td>Focusing error in the image plane</td></tr></tbody></table><p>The magic is that we can pretty much use <code>torch.nn</code> and <code>nn.Module</code> directly, stacking lenses and mirrors as if they were <code>Conv2d</code> and <code>ReLU</code>. Then, pass the whole thing through a standard PyTorch <code>optimize()</code> to find the optimal values for parametric surfaces, and designing lenses is surprisingly like training a neural network! Once this is implemented, you get 'for free' the massive power of modern open-source machine learning tooling: automatic differentiation, optimization algorithms, composability, GPU training, distributed training, and more.</p><p>On top of that, after having tried software like <a href="https://build123d.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">build123</a> and <a href="https://openscad.org/" target="_blank" rel="noreferrer">OpenSCAD</a>, I strongly believe that writing code is a very powerful way to design mechanical 3D systems and this project is an exploration of that, but for optical systems.</p><div><p>Experimental project!</p><p>This project is in its very early stages, I've got a <a href="https://victorpoughon.github.io/torchlensmaker/roadmap">very long roadmap</a> planned and I'm <a href="https://victorpoughon.github.io/torchlensmaker/about#funding">looking for funding</a> to be able to keep working on it full time! If you can, please consider donating, sponsoring or even hiring me! 😊💚</p><p>Also, the API <strong>will</strong> change without warning. A stable release is still very far in the future.</p></div></div></main><!--[--><!--]--></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Legged Locomotion Meets Skateboarding (123 pts)]]></title>
            <link>https://umich-curly.github.io/DHAL/</link>
            <guid>43434910</guid>
            <pubDate>Fri, 21 Mar 2025 12:38:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://umich-curly.github.io/DHAL/">https://umich-curly.github.io/DHAL/</a>, See on <a href="https://news.ycombinator.com/item?id=43434910">Hacker News</a></p>
<div id="readability-page-1" class="page">
  <div>
        
        <h2>
          Legged Locomotion Meets Skateboarding
        </h2>
        <p><span>
          <a href="https://66lau.github.io/">Hang Liu</a>&nbsp;&nbsp;
          <a href="https://x.com/sangliteng">Sangli Teng</a>&nbsp;&nbsp;
          <a href="https://www.wzhanglab.site/members/">Ben Liu</a>&nbsp;&nbsp;
          <a href="https://www.sustech.edu.cn/en/faculties/zhangwei-2.html">Wei Zhang</a>&nbsp;&nbsp;
          <a href="https://robotics.umich.edu/people/faculty/maani-ghaffari/">Maani Ghaffari</a>&nbsp;&nbsp;
        </span></p><h2>
          University of Michigan, Ann Arbor
        </h2>
        <h2>
          Southern University of Science and Technology
        </h2>
      </div>

<div>
        <h2>Teaser Video</h2>
          
        </div>

<!-- <section class="section">
  <div class="container" style="width: 50%">
    <h2 class="title is-2" style="text-align: center;">Audio Overview <span style="font-size: 0.8em;">(generated using <a href="https://notebooklm.google.com/">NotebookLM</a>)</span></h2>
    <div class="columns is-centered">
      <div class="content has-text-justified scroll-element">
          <div class="audio-container">
            <audio controls>
                <source src="./resources/anycar.wav" type="audio/wav">
            </audio>
        </div>
      </div>
    </div>
  </div>
</section> -->




<section>
  <h2>Abstract</h2>
  <p>
      This paper introduces Discrete-time Hybrid Automata Learning (DHAL), a framework using on-policy Reinforcement Learning to identify and execute mode-switching without trajectory segmentation or event function learning. Hybrid dynamical systems, which include continuous flow and discrete mode switching, can model robotics tasks like legged robot locomotion. Model-based methods depend on predefined gaits, while model-free approaches lack explicit mode-switching knowledge. Current methods identify discrete modes via segmentation before regressing continuous flow, but learning high-dimensional complex rigid body dynamics without trajectory labels or segmentation is a challenging open problem. Our approach incorporates a beta policy distribution and a multi-critic architecture to model contact-guided motions, exemplified by a challenging quadrupedal robot skateboard task. We validate our method through simulations and real-world tests, demonstrating robust performance in hybrid dynamical systems.
    </p>
</section>



<section>
  <h2>Skateboard Park</h2>
  
</section>


<section>
  <h2>Wild</h2>
  
</section>


<section>
  <h2>Indoor</h2>
  
</section>


<section>
  <h2>Learning Hybrid Automata</h2>

  <p>
      We use different LED lights to indicate transitions between dynamic modes in the automata. 
      Similar to segmentation techniques in computer vision, the learned hybrid modes can help us analyze motion patterns more systematically, 
      improve interpretability in decision-making, and refine control strategies for enhanced adaptability. 
    </p>  

  
</section>


<section>
  <h2>Failure Case</h2>
  </section>

<section>
  <h2>Acknowledgements</h2>
  <p>
      We appreciate the valuable discussions, hardware guidance and constructive feedback from <a href="https://silvery107.github.io/">Yulun Zhuang</a> and <a href="https://chengeeee.github.io/">Yi Cheng</a>. We also extend our gratitude to <a href="https://linqi-ye.github.io/">Linqi Ye</a> for the initial brainstorming and insightful suggestions, which were inspired by the invaluable time I spent at SHU.
  </p>
</section>





<!-- <section class="section" id="BibTeX">
  <div class="container content">
    <h2 class="titile">BibTeX</h2>
    <pre><code>@misc{xiao2024anycaranywherelearninguniversal,
      title={Discrete-Time Hybrid Automata Learning: Legged Locomotion Meets Skateboarding}, 
      author={Wenli Xiao and Haoru Xue and Tony Tao and Dvij Kalaria and John M. Dolan and Guanya Shi},
      year={2024},
      eprint={2409.15783},
      archivePrefix={arXiv},
      primaryClass={cs.RO},
      url={https://arxiv.org/abs/2409.15783}, 
}</code></pre>
  </div>
</section> -->






</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Wheel Reinventor’s Principles (2024) (197 pts)]]></title>
            <link>https://tobloef.com/blog/wheel-reinventors-principles/</link>
            <guid>43434730</guid>
            <pubDate>Fri, 21 Mar 2025 12:16:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tobloef.com/blog/wheel-reinventors-principles/">https://tobloef.com/blog/wheel-reinventors-principles/</a>, See on <a href="https://news.ycombinator.com/item?id=43434730">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>   <nav data-astro-cid-4dqtj3le="">   <a id="theme-switcher" data-astro-cid-dz5h74bc="">Switch to dark mode</a>   </nav>  <p data-astro-cid-4dqtj3le="">Why and how I sometimes write stuff from scratch.</p> <h2 id="why-reinvent"><a href="#why-reinvent">Why reinvent?</a></h2>
<p>The Wheel Reinventor enjoys reinventing wheels. A lot of wheels have been invented before, some are even very popular. So why does the Wheel Reinventor make new ones?</p>
<ul>
<li><strong>Learning:</strong> By reinventing the wheel, the Wheel Reinventor learns much. Not only about how to create new wheels, but also about how existing wheels work.</li>
<li><strong>Specificity:</strong> No one wheel fits all. When creating their own wheel, the Wheel Reinventor can tailor it for their exact use case, whether that’s a wheelbarrow or a monster truck.</li>
<li><strong>Innovation:</strong> Although popular, some existing wheels are quite bad. While reinventing, the Wheel Reinventor has the opportunity to explore new possibilities in a way that existing solutions cannot.</li>
<li><strong>Enjoyment:</strong> Wheel reinvention does, in truth, not need much of a reason. It can simply be out of love of the craft and the satisfaction of work well done.</li>
</ul>
<h2 id="challenges"><a href="#challenges">Challenges</a></h2>
<p>The Wheel Reinventor must however be careful. Reinventing wheels can be time-consuming and the end product may be inferior to existing solutions. The Wheel Reinventor also tends to fall into infinite rabbit holes. To create a wheel, must they also create the hammer that they need? Must they fell a tree for the hammer’s handle? If the Wheel Reinventor begins by planting a forest, they will not be building vehicles any time soon.</p>
<p>The Wheel Reinventor must therefore first and foremost be deliberate. They must consider whether it is appropriate for a given wheel to be reinvented, especially when accountable to others. They must also consider the scope of what is being reinvented (and crucially, what is not), as to not get needlessly sidetracked.</p>
<p>Likewise, the Wheel Reinventor must be honest with themself. They must keep in mind why they’re reinventing a particular wheel and not lose sight of that. A wheel reinvented for learning looks different than a wheel reinvented for innovation.</p>
<h2 id="development-principles"><a href="#development-principles">Development Principles</a></h2>
<p>(While not strictly tied to the principles above, I have found the points below to help me foster a healthy mindset when doing wheel reinvention projects.)</p>
<ul>
<li>Minimize third-party dependencies. Master the platform’s built-ins and accumulate your own toolbox over time.</li>
<li>Embrace the strengths of DIY. Create what <em>you</em> need and little more. Be wary of abstractions made for fabricated use cases.</li>
<li>Avoid magic where possible. Try to stay close to the metal, preferring simple tools and not losing touch with the underlying technology.</li>
<li>Share your work. Open-source your code where possible. Write about your approach and let others learn from your experiences.</li>
</ul>
<p>Thank you for reading. Good luck with the wheels.</p> <p data-astro-cid-4dqtj3le="">
Published on: July 9th 2024 </p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Imagine telling 2010 devs that in 2025, collapsing a div would require $8/ month (160 pts)]]></title>
            <link>https://old.reddit.com/r/webdev/comments/1jged6g/imagine_telling_2010_devs_that_in_2025_collapsing/</link>
            <guid>43434466</guid>
            <pubDate>Fri, 21 Mar 2025 11:42:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://old.reddit.com/r/webdev/comments/1jged6g/imagine_telling_2010_devs_that_in_2025_collapsing/">https://old.reddit.com/r/webdev/comments/1jged6g/imagine_telling_2010_devs_that_in_2025_collapsing/</a>, See on <a href="https://news.ycombinator.com/item?id=43434466">Hacker News</a></p>
Couldn't get https://old.reddit.com/r/webdev/comments/1jged6g/imagine_telling_2010_devs_that_in_2025_collapsing/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Notetime: Minimalistic notes where everything is timestamped (179 pts)]]></title>
            <link>https://www.notetimeapp.com</link>
            <guid>43434152</guid>
            <pubDate>Fri, 21 Mar 2025 10:58:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.notetimeapp.com">https://www.notetimeapp.com</a>, See on <a href="https://news.ycombinator.com/item?id=43434152">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Career Development: What It Means to Be a Manager, Director, or VP (2015) (444 pts)]]></title>
            <link>https://kellblog.com/2015/03/08/career-development-what-it-really-means-to-be-a-manager-director-or-vp/</link>
            <guid>43434093</guid>
            <pubDate>Fri, 21 Mar 2025 10:49:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kellblog.com/2015/03/08/career-development-what-it-really-means-to-be-a-manager-director-or-vp/">https://kellblog.com/2015/03/08/career-development-what-it-really-means-to-be-a-manager-director-or-vp/</a>, See on <a href="https://news.ycombinator.com/item?id=43434093">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p>It’s no secret that I’m not a fan of big-company HR practices.&nbsp; I’m more of the <a href="http://www.amazon.com/First-Break-All-Rules-Differently-ebook/dp/B00HL2S4LW">First Break all the Rules</a> type.&nbsp; Despite my general skepticism of many standard practices, we still do annual performance reviews at my company, though I’m thinking seriously of dropping them.&nbsp; (See <a href="http://www.amazon.com/Get-Rid-Performance-Review-Managing/dp/B004X8WB48">Get Rid of the Performance Review</a>.)</p>
<p>Another practice I’m not hugely fond of is “leveling” — the creation of a set of granular levels to classify jobs across the organization.&nbsp; Leveling typically results in something that looks like this:</p>
<p><a href="https://i0.wp.com/kellblog.com/wp-content/uploads/2015/03/level.png?ssl=1"><img data-recalc-dims="1" fetchpriority="high" decoding="async" src="https://i0.wp.com/kellblog.com/wp-content/uploads/2015/03/level.png?resize=500%2C114&amp;ssl=1" alt="level" width="500" height="114"></a></p>
<p>While I am a huge fan of compensation benchmarking (i.e., figuring out what someone is worth in the market before they do by getting another job), I think classical leveling has a number of problems:</p>
<ul>
<li>It’s futile to level across functions. Yes, you might discover that a Senior FPA Analyst II earns the same as a Product Marketing Director I, but why does that matter?&nbsp; It’s a coincidence.&nbsp; It’s like saying with $3.65 I can buy either a grande non-fat latte or a head of organic lettuce.&nbsp; What matters is the fair price of each of those goods in the market — not they that happen to have the same price.&nbsp; So I object to the whole notion of levels across the organization. &nbsp;It’s not canonical; it’s coincidence.</li>
</ul>
<ul>
<li>Most leveling systems are too granular, with the levels separated by arbitrary characterizations. It’s makework.&nbsp; It’s fake science.&nbsp; It’s bureaucratic and encourages a non-thinking “climb the ladder” approach to career development.&nbsp; (“Hey, let’s develop you to go from somewhat-independent to rather-independent this year.”)</li>
</ul>
<ul>
<li>It conflates career development and salary negotiation. It encourages a mindset of saying, “what must I do to make L10” when you want to say, “I want a $10K raise.”&nbsp; I can’t tell you the number of times people have asked me for “development” or “leveling” conversations where I get excited and start talking about learning, skills gaps, and such and it’s clear all they wanted to talk about was salary.&nbsp; Disappointing.</li>
</ul>
<p>That said, I do believe there are three meaningful levels in management and it’s important to understand the differences among them.&nbsp; I can’t tell you the number of times someone has sincerely asked me, “what does it take to be a director?” or, “how can I develop myself into a VP?”</p>
<p>It’s a hard question.&nbsp; You can turn to the leveling system for an answer, but it’s not in there.&nbsp; For years, in fact, I’ve struggled to find what I consider to be a good answer to the question.</p>
<p>I’m not talking about Senior VP vs. Executive VP or Director vs. Senior Director.&nbsp; I view such adjectives as window dressing or <a href="https://www.englishclub.com/ref/esl/Idioms/E/earn_your_stripes_162.htm">stripes</a>:&nbsp; important recognition along the way, but nothing that fundamentally changes one’s level.</p>
<p>I’m not talking about how many people you manage.&nbsp; In call centers, a director might manage 500 people.&nbsp; In startups, a VP might manage zero.</p>
<p>I am talking about one of three levels at which people operate:&nbsp; manager, director, and vice president.&nbsp; Here are my definitions:</p>
<ul>
<li><strong>Managers are paid to drive results with some support</strong>. They have experience in the function, can take responsibility, but are still learning the job and will have questions and need support.&nbsp; They can execute the tactical plan for a project but typically can’t make it.</li>
</ul>
<ul>
<li><strong>Directors are paid to drive results with little or no supervision</strong> (“set and forget”). Directors know how to do the job.&nbsp; They can make a project’s tactical plan in their sleep.&nbsp; They can work across the organization to get it done.&nbsp; I love strong directors.&nbsp; They get shit done.</li>
</ul>
<ul>
<li><strong>VPs are paid to make the plan</strong>. Say you run marketing.&nbsp; Your job is to understand the company’s business situation, make a plan to address it, build consensus to get approval of that plan, and then go execute it.</li>
</ul>
<p>The biggest single development issue I’ve seen over the years is that many VPs still think like directors. [1]</p>
<p>Say the plan didn’t work.&nbsp;&nbsp; “But, we executed the plan we agreed to,” they might say, hoping to play a get-out-of-jail-free card with the CEO (which is about to boomerang).</p>
<p>Of course, the VP got approval to execute the plan. &nbsp;Otherwise, you’d be having a different conversation, one about termination for insubordination.</p>
<p>But the plan didn’t work.&nbsp; Because directors are primarily execution engines, they can successfully play this card.&nbsp; Fair enough.&nbsp; Good directors challenge their plans to make them better.&nbsp; But they can still play the approval&nbsp;card successfully because their primary duty is to execute the plan, not make it.</p>
<p>VP’s, however, cannot play the approval card. &nbsp;The VP’s job is to get the right answer. &nbsp;They are the functional expert.&nbsp; No one on the team knows their function better than they do.&nbsp; And even if someone did, they are still playing the VP of function role and it’s their job – and no one else’s — to get the right answer.</p>
<p>Now, you might be thinking, “glad I don’t work for Dave” right now — he’s putting failure of a plan to which he and the team agreed on the back of the VP.&nbsp; And I am.</p>
<p>But it’s the same standard to which the CEO is held.&nbsp; If the CEO makes a plan, gets it approved by the board, and executes it well but it doesn’t work, they cannot tell the board “but, but, it’s the plan we agreed to.”&nbsp; Most CEOs wouldn’t even dream of saying that.&nbsp; It’s because CEOs understand they are held accountable not for effort or activity, but results.</p>
<p>Part of truly operating at the VP level is to internalize this fact.&nbsp; You are accountable for results.&nbsp; Make a plan that you believe in.&nbsp; Because if the plan doesn’t work, you can’t hide behind approval.&nbsp; Your job was to make a plan that worked.&nbsp; If the risk of dying on a hill is inevitable, you may as well die on your own hill, and not someone else’s.</p>
<p>Paraphrasing the ancient <a href="https://www.youtube.com/watch?v=OHug0AIhVoQ">Fram oil filter commercial</a>, I call this “you can fire me now or fire me later” principle.&nbsp; An executive should never sign up for a plan they don’t believe in.&nbsp; They should risk being fired now for refusing to sign up for the plan (e.g., challenging assumptions, delivering bad news) as opposed to halfheartedly executing a plan they don’t believe in and almost certainly getting fired for its failure later. &nbsp;The former is a far better way to go than the latter.</p>
<p>This is important not only because it prepares the VP to one day become a&nbsp; CEO, but also because it empowers the VP in making their plan.&nbsp; If this my plan, if I am to be judged on its success or failure, if I am not able to use approval as a get-out-of-jail-free card, then is it the right plan?</p>
<p>That’s the thinking I want to stimulate. &nbsp;That’s how great VPs think.</p>
<p># # #</p>
<p><strong>Footnotes</strong>:</p>
<p>[1] Since big companies throw around the VP title pretty casually, this post is arguing that many of those VPs are actually directors in thinking and accountability. &nbsp;This may be one reason why big company VPs have trouble adapting to the e-staff of startups.</p>

							</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Boston Dynamics shows off another major leap in humanoid mobility (101 pts)]]></title>
            <link>https://newatlas.com/ai-humanoids/boston-dynamics-atlas-athletic/</link>
            <guid>43434040</guid>
            <pubDate>Fri, 21 Mar 2025 10:43:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newatlas.com/ai-humanoids/boston-dynamics-atlas-athletic/">https://newatlas.com/ai-humanoids/boston-dynamics-atlas-athletic/</a>, See on <a href="https://news.ycombinator.com/item?id=43434040">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Chinese humanoids are starting to move with extraordinary grace and agility, but Boston Dynamics is the OG in this field, and fresh video of its swivel-jointed Atlas robot running, cartwheeling and breakdancing shows it's still at the bleeding edge. </p><p>Before we get going, let's acknowledge the elephant in the room here: companies like Tesla, Figure, Sanctuary, Agility and many others couldn't care less if their robots can do backflips or cartwheels, or how smooth and human-like their movements are. These companies are focused on putting robots to work as quickly as possible, so they're much more interested in how well they can pick things up, do something with them and put them where they belong.  </p><p>This is <a href="https://newatlas.com/robotics/figures-humanoid-robots-household-chores-2025-helix-ai-brett-adcock/" data-cms-ai="0">nowhere near as much fun to watch</a>, but it's these kinds of boring, practical use cases that actually threaten to <a href="https://newatlas.com/technology/post-labor-economics-shapiro/" data-cms-ai="0">radically change the world as we know it</a> – not feats of athleticism.</p><p>On the other hand, watching these incredible AI-driven machines emerge from their wobbly toddler phase into smooth, confident navigators of the human world... It's mind-blowing stuff. And as compelling as it is to watch humans master movement through dance and gymnastics, it's incredible to see how quickly these robots are picking things up.</p><p>Chinese company <a href="https://newatlas.com/tag/unitree/" data-cms-ai="0">Unitree</a> has been doing some incredible work lately with its <a href="https://newatlas.com/robotics/unitree-g1-humanoid-agent/" data-cms-ai="0">short, lightweight G1 humanoid</a>. You may remember this little fella from its <a href="https://newatlas.com/robotics/unitree-g1-humanoid-robot-mass-production/" data-cms-ai="0">remarkable US$16,000 starting price tag</a>, or from recent footage in which it <a href="https://newatlas.com/robotics/unitree-bipedal-robot-dance-h1/" data-cms-ai="0">danced alongside humans</a>, or from its predecessor, the H1, which was the <a href="https://newatlas.com/robotics/unitree-h1-backflip/" data-cms-ai="0">first humanoid in its class to perform a backflip using electric motors</a> instead of hydraulics.</p><p>Here's the latest, though: the G1 is now capable of doing side flips:</p><div data-video-disable-history="" data-align-center="">
    
        <p><ps-youtubeplayer data-video-player="" data-player-id="fb0d1c6d77df547dcb273deb4fcd5c130" data-video-id="29xLWhqME2Q" data-video-title="World's First Side-Flipping Humanoid Robot: Unitree G1">

    <iframe id="YouTubeVideoPlayer-fb0d1c6d77df547dcb273deb4fcd5c130" role="application" title="YouTube embedded video player" allowfullscreen="" loading="lazy" src="https://www.youtube.com/embed/29xLWhqME2Q?enablejsapi=1"></iframe>
</ps-youtubeplayer>
</p>
    
    
        <p>World's First Side-Flipping Humanoid Robot: Unitree G1</p>
    
</div><p>It's also one of the first humanoids we've seen that walks with a bit of swagger instead of looking like it's soiled itself. And as shown in the video below, it can also jog thanks to a recent "agile upgrade."</p><div data-video-disable-history="" data-align-center="">
    
        <p><ps-youtubeplayer data-video-player="" data-player-id="f212b10739f584ce98692492fbdd17115" data-video-id="CIkdq7Zf4Zw" data-video-title="Unitree G1 Bionic: Agile Upgrade">

    <iframe id="YouTubeVideoPlayer-f212b10739f584ce98692492fbdd17115" role="application" title="YouTube embedded video player" allowfullscreen="" loading="lazy" src="https://www.youtube.com/embed/CIkdq7Zf4Zw?enablejsapi=1"></iframe>
</ps-youtubeplayer>
</p>
    
    
        <p>Unitree G1 Bionic: Agile Upgrade</p>
    
</div><p>It's impressive stuff, but lest we forget who's been at the forefront of humanoid research for more than a decade, Boston Dynamics has just released new footage of its stunning Atlas robot taking natural-looking motion to yet another level. Check it out:</p><div data-video-disable-history="" data-align-center="">
    
        <p><ps-youtubeplayer data-video-player="" data-player-id="f286d256814b842b2af14a72194da9757" data-video-id="I44_zbEwz_w" data-video-title="Walk, Run, Crawl, RL Fun | Boston Dynamics | Atlas">

    <iframe id="YouTubeVideoPlayer-f286d256814b842b2af14a72194da9757" role="application" title="YouTube embedded video player" allowfullscreen="" loading="lazy" src="https://www.youtube.com/embed/I44_zbEwz_w?enablejsapi=1"></iframe>
</ps-youtubeplayer>
</p>
    
    
        <p>Walk, Run, Crawl, RL Fun | Boston Dynamics | Atlas</p>
    
</div><p>Now let's get this out of the way: that's not crawling, buddy. But look at that walk! A little stiff-armed, maybe, but it really does look like it's walking rather than taking a bunch of steps.</p><p>Look at the way it initiates a run, leaning forward to launch and pulling its torso back to decelerate. The sheer sure-footedness on display here is something the Boston team must be very proud of. </p><p>The rolls and tumbles are starting to look less forced, too, and it's very cool to see how Atlas uses its freely swiveling hips to turn a handstand into a roundoff, and stand up with its head on backwards. This, of course, is one of the most fascinating things about Atlas; it's got 360-degree swiveling capability at the hips, waist, arm and neck, so it doesn't have to turn around all at once.</p><div data-align-center="">
                
                    <figure>
    
    
    
    


<p><img alt="The running motion is by far the smoothest and most natural we've seen" width="1078" height="661" data-image-size="articleImage" loading="lazy" data-srcset="https://assets.newatlas.com/dims4/default/53fb240/2147483647/strip/true/crop/1078x661+0+0/resize/440x270!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png 440w,https://assets.newatlas.com/dims4/default/6d27ac8/2147483647/strip/true/crop/1078x661+0+0/resize/800x491!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png 800w,https://assets.newatlas.com/dims4/default/16ee826/2147483647/strip/true/crop/1078x661+0+0/resize/1200x736!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png 1200w,https://assets.newatlas.com/dims4/default/7e9b664/2147483647/strip/true/crop/1078x661+0+0/resize/1920x1177!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png 1920w" data-src="https://assets.newatlas.com/dims4/default/a19933a/2147483647/strip/true/crop/1078x661+0+0/resize/1078x661!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png" sizes="(min-width: 1240px) 800px, (min-width: 1024px) 95vw, 100vw" srcset="https://assets.newatlas.com/dims4/default/53fb240/2147483647/strip/true/crop/1078x661+0+0/resize/440x270!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png 440w,https://assets.newatlas.com/dims4/default/6d27ac8/2147483647/strip/true/crop/1078x661+0+0/resize/800x491!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png 800w,https://assets.newatlas.com/dims4/default/16ee826/2147483647/strip/true/crop/1078x661+0+0/resize/1200x736!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png 1200w,https://assets.newatlas.com/dims4/default/7e9b664/2147483647/strip/true/crop/1078x661+0+0/resize/1920x1177!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png 1920w" src="https://assets.newatlas.com/dims4/default/a19933a/2147483647/strip/true/crop/1078x661+0+0/resize/1078x661!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F70%2Fd7%2Fd691fd214428b27ccf93b6f52a88%2Fscreenshot-2025-03-20-at-3-36-36-pm.png">
</p>



    
    

    
        <div><figcaption itemprop="caption">The running motion is by far the smoothest and most natural we've seen</figcaption><p>Boston Dynamics</p></div>
    
</figure>

                
            </div><p>The breakdancing move and the cartwheel are the icing on the cake here, and they are indeed pretty crazy to watch. But it's the confidence with which the AI is learning to drive these bodies in the world that fascinates me. </p><p>As humans learn to walk, run and move in the world, we start anticipating little elements of balance, planning ahead on the fly in a dynamic and changing situation. That's what we're watching the AIs learn to master here.</p><p>The current explosion in humanoid robotics is still at a very early stage. But watching Atlas and its contemporaries do with the physical world what GPT and other language models are doing with the world of information – this is sci-fi come to life. Atlas is already moving much more smoothly than <a href="https://www.youtube.com/watch?v=psidz_-s00c" target="_blank" data-cms-ai="0">Kryten</a>.</p><p>These things will be confined to factories for the most part as they begin entering the workforce en masse, but it's looking clearer than ever that humans and androids will be interacting regularly in daily life sooner than most of us ever imagined. </p><p>Source: <a href="https://www.youtube.com/watch?v=I44_zbEwz_w" target="_blank" data-cms-ai="0">Boston Dynamics</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The FBI Seized This Woman's Life Savings–Without Telling Her Why (237 pts)]]></title>
            <link>https://reason.com/2025/03/20/the-fbi-seized-this-womans-life-savings-without-telling-her-why/</link>
            <guid>43433694</guid>
            <pubDate>Fri, 21 Mar 2025 09:50:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://reason.com/2025/03/20/the-fbi-seized-this-womans-life-savings-without-telling-her-why/">https://reason.com/2025/03/20/the-fbi-seized-this-womans-life-savings-without-telling-her-why/</a>, See on <a href="https://news.ycombinator.com/item?id=43433694">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							<p><span>Almost four years ago to the day, the FBI entered U.S. Private Vaults (USPV), a storage business in Beverly Hills, and raided the safe-deposit boxes there, pocketing tens of millions of dollars in cash, valuables, and personal items. Among those owners was Linda Martin, from whom agents took $40,200—her life savings—despite that she had not been charged with a crime.</span></p> <p><span>Those charges would never come. Although USPV itself was ultimately indicted in federal court, the government had no case against unknowing customers like Martin, in a scheme that attorneys have </span><a href="https://reason.com/2021/08/04/prosecutors-tried-to-seize-57k-from-a-safe-deposit-box-because-its-owner-sold-bongs-without-a-permit/"><span>compared</span></a><span> to seizing property from individual apartment units because the tenants' landlord was suspected of criminal wrongdoing. At USPV, the agency confiscated over $100 million in valuables from a slew of such people via civil forfeiture, the legal process that allows the government to take people's property without having to prove its owners committed any crime.</span></p> <p><span>The FBI was found to have exceeded the terms of its warrant and to have <a href="https://reason.com/2024/01/23/appeals-court-fbis-safe-deposit-box-seizures-violated-fourth-amendment/">violated the Fourth Amendment</a>. But it still refused to give back Martin's life savings. She had opted not to store it in a bank account, she says, because she was saving it for a house and did not want to be tempted to spend it. Her bank, meanwhile, did not have a safe-deposit box available, prompting her to turn to USPV.</span></p> <p><span>About two years post-seizure, the bureau returned Martin's money—shortly after she filed a nationwide class-action lawsuit. But while the bureau may have hoped that would persuade her to drop it, she has continued with her suit, which was back in court last week and seeks a ruling that will prevent the FBI from proceeding with others as it did with her.</span></p> <p><span>At the core of her argument is the notice the federal government sent alerting her to the fact that agents had seized her property. The problem: It didn't give her a reason.</span></p> <p><span>Martin's claim, her </span><a href="https://ij.org/wp-content/uploads/2023/03/CADC-15-Brief-of-Appellant.pdf"><span>appellant brief</span></a><span> notes, "is that when the FBI attempts to forfeit someone's property, due process requires that it say why, citing </span><i><span>specific facts and laws</span></i><span>." Instead, the notice she received listed hundreds of possible federal crimes that would justify a seizure, though it didn't provide Martin's supposed connection to those offenses. "By sending notices that initiate and, often, consummate property's forfeiture—all without ever saying what exactly the FBI thinks justifies the forfeiture," her brief says, "the FBI deprives owners of crucial information they need to protect their rights."</span></p> <p><span>Those notices, which Martin alleges violate the Fifth Amendment, are standard practice for the bureau. And they have already drawn the ire of a federal judge, who in 2021 <a href="https://reason.com/2021/06/24/judge-orders-fbi-to-halt-forfeiture-of-cash-jewelry-from-safe-deposit-boxes/">ordered</a> the agency to halt its forfeiture from hundreds of USPV safe-deposit boxes because the "anemic" notices provided "no factual basis for the seizure."</span></p> <p><span>That ruling, however, applied only to those USPV plaintiffs. Martin would like to see it apply nationwide. "Without specific notice, property owners can't understand what this is all about, and therefore can't do any investigation or get meaningful advice from attorneys," says Robert Frommer, an attorney with the Institute for Justice, which is representing Martin. "Owners must decide whether to fight against the federal government, default, or plead for mercy, all without knowing why the FBI is doing this to them. It's therefore little surprise that 93% of federal forfeitures never get to a court, meaning the FBI gets to keep the money without ever telling </span><i><span>anyone</span></i><span> why they should be allowed to." The hearing last week was on a jurisdictional issue and has yet to be evaluated on the merits.</span></p> <p><span>From the outset, the USPV raid was defined by illegal activity—on the part of federal law enforcement. The warrant, which agents <a href="https://reason.com/2022/08/19/fbi-misled-judge-in-obtaining-warrant-to-seize-hundreds-of-safe-deposit-boxes/">misled a judge</a> to obtain, explicitly <a href="https://www.documentcloud.org/documents/20700649-21-notice-of-motion-and-motion-for-return-of-property-pursuant-to-fed-r-crim-p-41g/#document/p10">forbade</a> them from engaging in a "criminal search or seizure" of the content of the safe-deposit boxes; they violated that condition (and the Constitution) and did it anyway. Agents seized a litany of valuables, from cash to <a href="https://reason.com/2021/06/11/fbi-raid-safety-deposit-boxes-los-angeles-jennifer-paul-snitko-85-million-civil-forfeiture/">personal items</a>—a baptismal certificate, a marriage certificate, a birth certificate—to gold coins. (In the latter case, the FBI could not find 63 of those coins, belonging to Don Mellein, worth over $100,000. Oops!)</span></p> <p><span>But Martin's suit raises another issue, which strikes at the root: If the government cannot articulate why agents are taking someone's life savings, then perhaps they shouldn't be taking it.</span></p>						</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Germany tightens travel advice to US after three citizens detained (176 pts)]]></title>
            <link>https://www.euronews.com/my-europe/2025/03/19/germany-tightens-travel-advice-to-us-after-three-citizens-detained</link>
            <guid>43433071</guid>
            <pubDate>Fri, 21 Mar 2025 08:23:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.euronews.com/my-europe/2025/03/19/germany-tightens-travel-advice-to-us-after-three-citizens-detained">https://www.euronews.com/my-europe/2025/03/19/germany-tightens-travel-advice-to-us-after-three-citizens-detained</a>, See on <a href="https://news.ycombinator.com/item?id=43433071">Hacker News</a></p>
<div id="readability-page-1" class="page"><div p�el��="" ���="" �m���f�="%h4z" mzfȎl9="" fvc="">(�!�Ƚ���)���va�6���/A�H�E�/���Oi�����]$&lt;���eU,��gU��g��Wu���gE&amp;I��?�W��t��x�hn�Yg��A]���M��-A�����@��)(݈$I!S�N�;����M�v��Mʉ]��I�c7�oR�l�ٱ�c���g�60�@ZbF���sd^2b�����FT���yY�ʬM��Ǝ}�f�ա$v2�l7Vĥ	��K�C5�r��
�K~�aR�_������-�Y*["�����ܬω��-tƕ��=�$��XwLԺ���(���i6d��wЖ8��I+��=���dp��O���J}8|:��Yx�B8�:���)K���S�^�A�� Ɛ��;4�OA�����s-q|
�P��_�wh��$�#bP�����?y���Z�-8�]�����̀�ʌ�P����]�`���S����:����8����"=��Ӄ{��
$��G�������ާ�=�}�'d�A#� �"�Vs{�b~�Imν��A^�p�h��?���s�?��U�Iv@9ۓ�k��8r�KP�+!��b8�ơ�C[5�%)��:�SJ%����+Z�&lt;\p��0�H���9���U�!Ј8���w��jD+����%s�a��;k{�
I�q b�Ϊ��y٫P�[w��?��~�~�߭�� x�gM��b��Ĉx6Qdo�@m���8��Ͳ��:!)m���_F4���̟���ܰ��
,H�S�|#(~�Zâ�?E���?
�b?�iz�����vgVxz���g�FI���]��|[[�4��B�_Dgͷ���yc������uG=εi��(O�^���s�߾BSP�2j	�=��e� �_/I^�B��nzh�%o	I-��*A9��ܬ�H�ۣ�R�&amp;���#�R���{Ő�	��=e	��Mq��p�~C?(&gt;u�QCn�B����1��-B�
WQl���W��j���ae���#NJR�L7A������3!3U��Nt�2�~��6�
%�ZDs�_�������@'J[`��	=2���i��kr+zA�X��g�AX�q�
��itjT 	1Ɩ���E�:��̋�A��Jb�Ca�q��ά.֋
�&gt;�)j��';�U�Б'c��PZM!S-���8�����T�\�F+Q��$0	P��G�i�ٮ~��'�6�(t�qt�'_��<c���̥��j�axᴱ��4&q���m ~�Ł="" (��zr_�t#e�rn��fa-�Ʋ�br*ob����,cay�b���"t4�-="" yg�(\g���xp^��d�p1:p��="" ,(="" v4����n�u{�d&��2�ؾo�bwqzr�:�bnpe6���������-e��)pv$���v�1r&�8�="" r�y�6rxp+��l��z�dm؊="" �="Z��V'XEDe0���L��Q4�u#�DE�a���9TD" #�9p�u�="" r="" 8�f���$6kt�p����эxd�֍�hɂpp�(�$,���(�z�="" ޒ8��="" �z="" a�p����a��ڒ����5vl���="" �g�="" �e="" ���="" ��y���*b�j�'�=":I">��x?���Q��/���q \h붶Z�hCPQ�2ʠ�
/A���|�S�@(x�4'���c�wf���ѳ6��uFpؐ����@ax�K�����#V+|1�y�Y''��ݢ#��9��G�Έa 
�ĩ�=m�CgPk��v�H�	�Q��v���,H%)	ebLK~#kE�pa^F�oR[w4��`�aZrp�ր�	�`{Mk/�H�&lt;���X��� �M3�0��{�l���V�C��p�]7$J,��k�%��JF78-���'^t����"�"؊�#*���N�ְ�){��ґ�u��7��M�G��~�#�J
EЌ��Xr�֐R3*N]�K�LX�����������*X�I���LF���Ѿ%:8v耔c�l!WeQQU?J4=�Tї�T-Æс���~V�R�q�8�ipx��ܑE�b����3y�=�������8��ho�){f����Z����haٳ�j)�	�B�*j!�PRBQa�VO��h�	e�|�W���t�3ؠ�+A��Km�RD=KCJ��Ɛ��c�%HlO��v�R��#Z�H��G�ܞ�s��XGR$�=�FNp���Z2GV�t"��P������-)�l'IfF4C6Ga-$���bK���W-�9�����?����G#��eP�R�8S��l��g�0�7N�8�JyC84�6�h6��'�["C��ר���C�H�t�G�3��#<o�� ��2�r������!rp���i��xr�="" ��="" �����:�,h�n�4�as�i��8�z�mi;__<z��ѥ��%(�x���dٽӆֽt�Ȧ�}���!j�pou���t;a��x�a�dm�c���="" -�gy*zk��8���1rٗ%xypt�x��ronfil-4r�j��0h��pz�����p��x�="" @7��.\]�="" ��fe3�="" �r��_߻dyr="" �����'6���t]1�����l�z�5*�ro��ar���(��h,��6u�s��h+}�4�gxa���klj�{zr�7_׊�7p�7mp�&��u��ho���fh����b="" �vgm��zg��p����="" �!�bw��!�_k���ں)$�e�~$���@�{�'��x�ݡ="�=�le��/5���y�[��(�k���b�4�m�����x<΅��" )�;,��h��ą2��="" ��)<�r��꙱�콡����="">��׵
���m�8��e�8L�5߸K�_�%�G��tGՍ�4��O��3Yr�5������	�	��k�VT����6D�_��
[�e���kϪzĖֲ�k���;���͒� ����d�����1�X2�]����1;l3P-��P#B�xzD����������`_+���V�����n��~m����o�4E���Z�}k�h9:4������P��$���E��9�����]q�=I�˒&amp;��&gt;�u��%�r�Q�~�L���<uw�l���վr;��gb ���^�ya��~-�[�a5��%s#�~�_�e���bw��w�eʴ`!h����o|�h��="" �m��Ũ�fg}��_7��<o���qzƞΙ;="" ׅ��%xz="" ɠ���ny30����q�7fkwÿn,o��8�="" ����d���3�����ʑ��?]t�y坢�a6<�:�j�b�mc��b���th7g1�eh�&�x��&+������n�s�^��="" �k3j����h�$y��y"�"����.��="" f��="" .���t�i���(,��%3���������瑄�0�{��{��,~1*������%%�q<�f笝�a�5x���<���m��y}��(�y0��u����ԟ,nt�з_Вdx�ˤ��%;�jj;h�pux���c��ǋ�8�t�="" !�b�="" <����n�]g����r�ā�w�ã�:cgw�c��ϳ0~��.="+" ���c�="" �h���f|y="" )n��;�="" ����(g%�~0g����="dàsY������|�˄�9��ҲXΈ" �="" ��la�o�v�!y�,fs�!="" &���d)����="" �xp�jnh̳p�����j��ٹ���ɏ�tb��k���~�u��y�:�(8b4v-��gn�{�p4���wv�~l�གྷ�e="" �fi84%?�����e�4��h�&="" ?zy��"�y����do�~�="" x�&y2��*�_b�$�="">�g���;�'5Z�nd.��.CR��t������,�(ƟL�ZEG[�y͡�������;�h䀮��n$éi�&lt;h��.�^U-J;�6��(;���MVޫ�mKf�ʀ����\��Z���A�cӠ��LPpm9����L�Y�L�d�����Vu�)�Ȇg(īT�q�j-�N�� �I�=�F��w��9Ko�"vÛt�(�e�
_zVa�:x�J��m"*�$��ۭ���١=��N���Ȩ�Ѝ�K�,�k�T�z?���5�Ef��ԭ�	P�I�����hV�Y�)CT	@
.fP���vZǦ�p��'=��"��u�k'��#�O��}��?��=L��\�G@�zSS�iV&amp;�.�j�8Ia�i&gt;<z�ءzσ��� ��k�:$nd��q����o��6�s�v��tdm)��}&v��pe*e轀��="��&amp;6s��j�Bu���If4i�M����" 7m����:��b"k��h�r�l���?�q��u��d��.��j���(e��f?�zrx��r7|tt�n�="" *j~�v���i3��)r����fp�dv5�o="" �z�����kf��;�����;̠s&�prfߣ��\����a͒�|�ic+�b���ȵ�="">kҬ!i~
�L�؛r�O�h�=�&amp;�c�����EUԜb�2�"��պﵚ��&lt;��	�$��8æ��&amp;�¤2e#��+
�U�U��G�q�&gt;������q�E	����Y�60�jT\��f��@�"m�j��kD�� ��@���`�����R��-��5%K�S���,���a~����b�����J��u�~�f'B�8�p��?~N�"􏜈�����y��ZB����g|�p���m
�0~�0��&gt;J�S�� �(β�'�&amp;b����N��N2�|�㪢�cS�U�b�.�˫��n@�#r���䛄�;|��v��-��|�w���R̝IXWqJQ�ǔ�y�G���*���R���k��U�^�i	�����2�G�7��jn	;Y�����-C��T��r	���k�%���	�L��7ߞ2K��7�Pi&gt;!����f��f3�w �f�ϱw�uCi�i�SBqS�&lt;�X��#����F(��t�
���8jX�&gt;Le'pgoJQ��ĵIt��=1���m�fG̵i|1Y�?��x��Z�����a?|����p��4��g&lt;�+�nQ�B��;�E����UE��捱{	��q���A�v^wh\E�<h� �oa��p�j�gwq�#uk��}��="" �����cv��t��u="" *k;��x�p�w�(:�iy��="�P3&quot;Wtĵ:X8��6��[z�K���7������r����?W�������?����E_|w�<��6�����ê�f����~ss�~�=��������n�-;3\���n������I�YX=">�����7�]������b�qK�������v�]o��� D�~�.�U�}�����m��"�}��z�⿯��y��i��6M���ÿV���q���]_�?&gt;z�g?�S��6Ӓ{ޣ��tF��a�c����o���C6ξ�v=+�c��&gt;&amp;i�03*'z��pjȔp^q�3����&amp;�A��Y��,����	�Y���a\�qč�����f�V�b���9�i�/u�&lt;�"Z-��n�wq6@�z��~��K��W�3���7o�(j��7`K[&gt;���ͼ)�v-�0�z�o^��h�_�J�z���Xo��#��
�xh�|gN�@��#4(Y-t����	g&amp;0&lt;�ٌ9g���#�יW����|��nk#�J��BJ!�'�]$����s�
�x&gt;5<sƄ7��Όo�qg���c��!�>&lt;�n4����?�����jt�Pc�vg�"�Zz�dzr0�!K�g0|��'�XYpztdA���N���&gt;�(��t������ϩ��SlF*���]v��̻+(�&amp;,n�
/}��qG#��e��?mD��ŨF�9��ĸ=��}������U^g^�[�����݇f`�G����Ői�XK�R� ��Z7I����&amp;�@���x:���e�}*�ёIp��a�1yp������V<iuxt���9 �j="" %3��cr{��_���3d�u'�x��l�������[��2+�����?��e��q�zio����4'9�[��������="">�_�����~}�p������
���i����f���[X�����j
��+�]��6�}�������v
7w�O������ea��=��7/j��S��cz͇A�������YA�%?m�h�poB�h�{�	��μFkW�����HO�g5K|渑7�;�
P7K��90�Uvg^�a� \�~*��4���E���#��Wi��� :��.`-��$Jy���xL��kn��|�b!h�	��
�G���VG�^g��-YwOǞ�X�6Qܟ�����Q?h�f�:��EnFt(��_4�6ֲ�:�2
�;C���%�/���L�LI�k�DЄD$!J�&amp;%1|x����k�2
�z����3lQw��1��&gt;�R��tE�E��"�4�8O�,|t+�F.HՔI!4�ȃ����{�_'9)0v��7|�b�F�b�m�
GhF�^
�Г
��n�|m��@c�cXt4���-�/͠&amp;��K׵ÙB��0�soݡ)�n�����WQe&gt;*v3?,
��U��ڐ�i/I��XI3�	�T?Ur�F�3�ZX��n��C;
KQ�����C�-������}�
�@%��
�[&gt;����@o�G�L���*Uޘ)54�.�8��Ѡ����]=���䠮���ڄz[*�A8�����*"��z�"�Z�ʠ�Vu/#����]��]��a�pSc��v���\�^��̂@��}X.��E��ā��+���~ #�	31h���w��+��36��֊vJsV�խPrf���@ج_C}��μV�
�NA�xN#����u=��]q�fDo%ۘ�s��7����/+d�
l�XyY�,��xu+��VR�#̤��w�H�u�-�s��`O�ϭ�Jr��%0s��e��;]�Ӎ{p9o�m���hbT[�
���6K���4�6n��a�_�;�\�W�ps;�f���M"��gċ�pw���-�I�/\�%v�f����U�Һ�W�w�`�J������`����q6@P/n��v�_wsA�&gt;;0D7BC=��μ��~��Z�5j�w��-��&lt;��}ߥ��a^@:�K���$Y���ŃA�}NUJ��&gt;�Ybp-0��p}�fر��A�ߖ���a�[<p �="" �5e�����e���ͼx���2�-�|j��4~a��\��gbב�d�gk������"��*�9nu�0�~�04�.van���Ӑ�<tl�t�v$y%="" ��%w����j�tc������Ѻ�qs�6��Ԙ0q3@n�&��'_?!�l'��pu�^�i="" ���j�y="">ߒ�$�3Ð���}��`|a(y+�_$$�xE7J�J�p����\k�ЉA�X��9<q�ej�n)�mqfb %b��n�n�?�~g�a��r[��="">����
��n���}�/��zD�h��a 1Pd%D���yQ����Pkw}�~z�߾,�7$���bҶ��1;l��w�_�'���X����l�p�n�aR`�M��
U��-Eǝ��n��������8�4{��!�c$4L�Ow��Nm��006��\��I��H�V-�K�;�8��Z����h~&amp;�c���X�~8�=�&amp;o�SW�?�$����ZMy+z�$�1~�o�uB��j��!�r񭦒�����#Ȗ3��C	"v5��2e��z�~�B���i���e�aw�����ܭc��b%�y� ��\��X��Wh�&gt;��K�4zֿp	��ߟ���� qJ�B�~\V۷f����X�:���������י'���GE�D�I�E�)o�	�Q���[~��CL�ˋ�X}�x����DR�s'��&lt;�p�����{�y���'yo�M�)�É����5���FzKO�Ԍ7v|�{Ρ�i�`�Ȕ��Y�+�-�,�"+��u�*þy�{K�GμZpo)�"���MFx��y⍖�������$�-��ވ ��י�}~V���H3?
��O3O���G4N�a�䁥cn�����'j'&gt;g|f
�Cu��w��0zb=ZG��n�-�C�Mf����^�h�Rc�t(�٭��&lt;��=Fdv�x-��a�D&lt;:(��u1ޣ��9a5*gn@rј֮jm
zC3<aҲ���x�nmx�y� ��+t�6�rr�+tt��="" ���+�aq���z�-v$������p="" �,�x�^�v����s��x�!5�^5���3g��8Х="">�Y����E���H�#�1�՜��\�C�W��j_�\&amp;Q1�}�*�����l��ճ��������?ʖ���)z�$s�E�.N�+E��
`B�A[⽀�%�ma��tp*F����aJ��H'pN�т�ttb�C��ϣ�����%�j1K	Uo�dX��t�Dӛ����ÿ�~�4/�D�z7
m��M��t�{P~X������
h��8*X]\�M!�����W�2�;e���� 
_g'o�m��NޜtQs�l�{�;�V|4pC�\$_3ӒY�UV�CĦq�ox�Ko���y��A���"?�2��S"\CУ荆�W.��{�VP�V
����\I� rH���3�Z��׃!�[p�(|-9�B��/�E�Z
��0XvBr�*E��z,��G_H�@�N�3�z=~��3hA�	�ZP�L�ʃd$�X�?ym�Z���
�M���7��ݷg��!V�&gt;�e5�X��xZ ]�zV����7�[�k58�4FU�'���HU^������n�t���'l�Vַ���ps���<o���b'7�܈v�����[p�-���q�x�*p��ji|ja���v�a<�-�!˾nm{�i\�=�u6�ap1q�;qڻ��b ϸ-�$�ugi+�"h���n$�1胃�ȕӚ)�_�3��z���������g��z�¯�m��="" ͻ�����0f����j(m�y4l4dq)��="" n��`�u�h�="" ��v�c0w{="" z�5���fƇ\֯��82�7l�ǿi��hfʟ�="" )��՜��w-�w�!��<�q!�)��ur�j��b�8j:���0*�,g���p��@���v��p��dc(-��w������l(�������wrf�ntmcm��^��um[��.p�="" :�i="" �d�w�:���k1��yq�w���`e�7�s��(����!r�g���sa�h��r�d\iu)�.)��^="" e.f�+��-���%�^�����`n�j�������o&�%�ta����8��]azv����="S�t�i\Xcړ4���I">�(�l�g�x{a�F~�^}�5���?�}`�UnOm��I!!�P6�����Cߤ���.� lnM}6��40�Ǭ�xq
ꮷ[}�F��y��h�^rw��HK�*5�0����J[�Uw�V��]���B�l񶇩�#�����_΃�RP���qX͖���y�� 
���p�H���v,S���]��,�Wz��
]:ۑ#��O�.d��PB������}C��f�kyRAa���$���r��2ocߵ����k#���h`m�rP)�l$_����c����͆��ŵ�B�{��x7��]~z�M�.!�2N�?�N���
���S&amp;���z��f��ݻ�m?��zUH�wy�G��u=���}��$�}&gt;}'7Y&amp;?�;ؖ����y��%?���B�r@�"g��L.2뵾�O��E�%��ӏZ��������X\Ӵ�q��&lt;߲dٲ�f.��5i
�dt�ipҁ��hZ��|~�t��`p����g��+���:�b�O]sh���t_je�C[E���,f@\O�7{g!^� $e(����q�h��N�t��y_WӉ�x�����񼓶V�/�ු���[�$��*f귇���87w�j/8�g8[�Ḽ��iHS?�kU�ur�&amp;����s?J#l�t.�*S&gt;@�8��	��
t6MΗ�,�܀���&gt;u�˭�6�Et�k&amp;�8��Laj�o!��	�5�e�/Y���h@��%�\�ʝ���
Q0� (l����a�����}��mm���FWD���W��h�	;$�qL���v���������&amp;�R�xf�
�M�aw�dߐ�LO�&amp;S�^�qt�a��6J��UQ}^�.��Wҧ���h����/+
����["DXu���!bw�̤~�c��{�������+
����c"����HS��&amp;��WR�z|t�(=��7�ʠ�4����6R���+�����&gt;�?�v|(4n��GNQ*�&gt;<l9�o�p���l8=��i��?����y�������8�҈[[[�'b�n9l�8hn�s�:r����t������sf׿l��%��r8b�և�- zln�[��,����a�"�g+="" ����i[�2�+�?ɛ="" p�������{n�����c�4��ld�l�<lqc��i��c�mӣ�m�m�"n�����p�f��(!�ї�-="" �l䋞���="" u<)֌����_�������@�x{.���i}����7{.֛6u�g�v�c��p-����_����_?�������_�#:�h�v��vn���z��="" �m����|��������i�������}��~ؕ�ܑ�k�y�����������f��e�v*~����z]n��������ɗo;��lfhe�t_����&���8�s�~]�qfr��k��a~�v�*;="">^wñS�F�h�v�n�v�n���ތ���M����e�����S��D&amp;���S��Y���E��d��L6��Lc��1]h�G�|����pQ&amp;�'��g����HO��h���{Ҩ����i��at�9_1r&amp;k�&amp;����#��&gt;/U1�v���9�y_���'�H�Wd��"�L���\��S�	_�AӁ��r҈&lt;���Y$�Y�,�`�ɓ��0l���`����O-pW���T7��-]f��Ѭ��4ש���cJ��V�`4%�M�q)L��T���&amp;q.A�b��Ġ���-0Fg�� )�2E�WZ�H��&amp;!L�L��Z���j�GY$Ŵ�Z�\Y�Vf�eL]�y�&lt;��|V˒�0�7cW�-�h�~�&gt;��̜V똏��o�4�F���CU��.��"���-4^�X���j$�!��d0T�i�ʡ3D,ZR�g��v�B�=.�v�x�}Rh�r�Iɭld#�"&amp;�.̆�5^��Uu����%����U4J�ĞKP}��q��Y���h��PԤLR�Ɂ�`�' �1D�ֲv@��E[9dk��-L��Qk9�E���h(D�]�1�ǆo��G���i�	V[O�"z&gt;!1y Bg����g�dr%yek�d��m��wb&amp;e�W�2��(�VD������P�����
B�46��P�&gt;[@�n�f��S�lk�ST6K���!
���Ґ�KZ�fꖡ��!�yW��}���#�-:T1��c�p���D�}0+��[�J��G��{ ����G��
@Y���F2$���* �JE�V�R�`���i��r�18T�jީ��L`1y�4{���GR�{��ڃE���D��j�lt�}���P1jm��T�D:�F����P"t���	�qV��	�V�}0��:���%���P�4Q�8��(����jy�B˯F{�7q���T�h��R&gt;8��	"r��@�V���^���o%����2р��qE
���u�o坊`А�%KK��`�M�&amp;�am��
k����8(1��-�S��2E����h���4��X2�}�G.jbQ�]�Ģ�`|�Ģs1Ft�b0�Cd}r�8��II'�Q@C��:�n2�ꕾ�R8��zt�j
����Z�Š�ÂW���h��5�U��B ����5��:*�F�g �l��&gt;Ϟ��Ǯ�hM\��o�9���n}&lt;�F;�"BK|�걫��:O+�t���
�"S�9�j�
�SDѺ�v���U'�P+��FK`0z�Erx�ç�,��n�P���l?����Û�`�J��ԋR_aMdI:n
��|�I�@��퇃���b�b-H��k#
I�шiB;���&amp;�M�-Ɓ"s�ֺ��ƨ�i�ͷ����1鲙n�Jw�mz�VL�M��`�l�_�R�y~Q@jIh�Ub�:QF�$A��4(���󘴴�A���Dn�&amp;7s1
's�����Zc��T�c9
-ȁ�.�"�
 �?�zN�lA��{.�(`#�PSٹ��p�Y��2m/Kl���)�����
�jw�bgi�a��Q�ƨ-�E2�V��2�vFR@�$�ʂR[jg����7�����&lt;8�FK2���@��F4���t��u���]?����p�]��p���p&gt;���N���|�!���Es�B�aO�\(`l\���?!���u��fS?ڙ����)M��Ύi�gj%�4;eʫ&lt;0��_teJ��2��A\6;��rF!��jv�d4�d7�`?��-S=*d��y�M��B�tĮ�z�IhJ9�G��u��Q�w��MXԚQ�b�ǡFa�T5��Bf��8��2(�@�n���EN�9�J$�h@��t�f�WY}Y5�s�w
�����h��K�ž��9`
\������E�� ��:��-X�/ȭ�i�f)9jѶD�o�!��KgI��W=�V��m��T��[�h����8��F�̩A�l״�O,)㴕�(6���+��_)����x���i�]S����*0ks�^�9*�P�4�ۤ�k��B��-�/9�6]:�u��u�蹴�4���1
�t��0��e��Y�t�Z��m'�r���pǒĢ�&gt;��F������1m���N_u�L�`��ʺ���g�x��ޔ��@-`(7��I�~���ւ|0�u��t8��_��M͢�Y��~H�Z^Rr@�F,jjB�̄EJ
(8�8��^�7}�,�2�W
�[]i�y2ZG�k�=#i�o*3n=�a����k��/��A���\Op�����+�)��*�S|��R2�&amp;3��x�.�� Q�n��Y$�_�&lt;�#��yt��ޖ�i� Gs�j{�ސiv�,�}�Q
v��q��h���xM�X�q��ėkkɣ��Ë��t;��#���H�M�vnJ���Ej�_o��V\,�e&gt;�AC2�%�hb\��)=S�������N����v�72�Qɍj�Q�bnj�TX�y����+��z����9L58$~up�'��rA�x8����R��]�z���/r�M���D��LB3w��x�;��J��MWi��M]���t	������*wn����nڗ��r�!89�]�R�8�[Ȥ�0�GZ ���͵}�Y�z����B5⬹42,67zÇf�2�a��n�%Ls�k&lt;�LM0���ĒB�02��U���bF�5��t�&amp;����t�������O������ؓUZr�zDǏ�Ⱥ~rS3	F�lR9{6;�@e��{j}�ʶ��5�`�q	:9���c�_�4����@D]������[���Ȯ�Kr1W����U-S�.�ǅ_��%ξ��S�~�D�]�K��o���h�oJ�3x�5&amp;Y�qHE�c�BZ�Gu��枭�&gt;B;��"����c�[�P���d:�
 Az���_ڱ���;����B���By3|A�E@Ѿi�5&amp;aV���`��{�]�ʢ�j�k��7�;0
�ľV�k�an��
<l��@��v��i�q�fl�>�������^���&lt;
$_��7܅����ɚ3ߤ,~���u�x�Cƙ��(xȞa˺��k�Ԗ�u�=�^pF#�\�z��������̑:�:�g߂7]~�p��.QEY�'?cI��,����qΓ��ӺI�w�0Hp�9�~�!$,����㡬G:��t��C�W����+Lu�$�l�G�PpmP�Ѹ�)�����a2�.��&gt;��^G��k����ūx8(����5\�;�~�
�f�:Y�r�!����Ǻfy�������ӂԖ��[��g�r�9������i���ǾVa�'�.�&amp;%�t��b�:I���f�Y;rTd���'f������͉,���(ـk��,RȌ��;j0SwX���?9���-���l�ʿK��*���55f,I��W,� ��0��4� �1�(��e!ae]h�� �{�,,tP7Ec�=JT��+�����I]�=��F��/B����~����5PN$�FJA즰୓�x���u�|��IEG�؍���5X����g�V�|�$_�ѐo6M���g�,\�=`��uЀ����z�7�6|���'�p�����=A-�?N�ۆy��Cf�d�C[p=?׼!�m�8��8c�c�A�N��{	�9�z��k%�)�v��c�a�I�9���Z�u)�p�gP�Z��?.qPTa�3�	#�����
'Iք!Q�)Kyh��c,�R$?�<rh�e]�ǀ�p�s.u�0� ����s�<��p-���y�^="" �ԓ��v��_�g��="" �z�v="" 9�n��У��@�w����p���]��������w[(�e��u���d,�k8ޡet_�d��x�u�m�8]�㡮;-1w����5\��gp�c�v�Əӕ+��8��vt�ca���5es"6�="��Ն7��ϗ�g��H{Ɣ^�$�Y�|֣��@ڳ�o�*�:H�ԯ6����X[���U���)���;�x">�����(*��T5�O
ۛ9�1�k���|l��ޏU�uL��_B��m6��G��YS���w���\�H��ʴٱ۵(t4a��)�K�2iYw�Buɛ_rb���]*I8�Ѩ��D.#�o[h��Y3�#i�,&amp;�f,u4'��C�fE������6&amp;�g�-nS��*�&gt;!��YTf���e�Ĥ&gt;P��.��@fp7��&gt;Я^��&lt;�v��H�g����k�55D�o64{)5%<y�h�n�,����r�m ot;�e="" &�l�|="" ki�;b�������l2n�����2�="" wdr�m="" ?t3�n{4�j�.h����8x��]*ix��٘��{z������mg)��f="" �f�*6be��ș��g#�*�ڵ���̣�ux��s�)h��zm�k��j�Сdkj����f뫳�r.r�<!6��.i2�&g0��nj�zͰ�1�pzzsq���%�d{���="" �%�g�*3ʊ�srz�lz.��ٚ]�n\����'�����.�*�\_2��os="" �yi�vd�t="" �kky�t��]v�#%���h�Οn�.��p5c�[�e72y��nfj��h�yykcs�rj�w�ds'�ol��-s�jd�'�8�o�f��km�镓o1y�����="" ��}<���ar�v�'h�dfs�9mcf����j�h\u,%�Ӯh�"��v�n����9hx�mr��w�ug��f��x�����]dul�w";="" ����a�`�#��*a�s��w�thx��="��ѡ�(M��V��s���" v="" a�j��v.u�ũe��+�]!�,��]�����a1�Ĝ�xl���ad�\�Ԅ-��g��۰�h�&�="" 3�="�&quot;#�5bd�Zj!蟸�{" ؒ�8�a��p~%��^�s����;j�<f&�4z����l9aeق�@�="" ��rŶ�t"-p6�*��ys&�e����u�:}wz��*="" ����^某o\="" �7�d"td��(�3�ݔ&����ej03�i*="" 8|@kbu�zy#ap�5nc?�;���.�2�<�hbw��a�Ц2���6���'`r_="" q{�g="" �h���5����="" �zn͵�n�f��'z��cᷮ"a�Ջ���qhnֱ����n�n���<�\="">�0b��sje|���
��1����]1�'6��s�qh�&lt;^	�0D���D�#�Jݎ2.;����"a�*��/�	E\^K�|u�v%Z�NA��w\���,��J�$V8C�.�3P}����h�a�+:�Α�~l����|K���ݖp����`T(j��kagء�^ش��&gt;��h��k˧r�����9!^��w�W��R�گ����#�wzk`&gt;m	WD�Q��ZY֞pYD�U&gt;�j����MJ�9�]��_V%�	�HɈЋ$r1^�ᤘ/A	If�9J�
��O5�:`�oӳ�����o�f����u�	�����
���k&lt;� AZ1l�O.FQy)AH	���9~D��3�
V��%��+�Z�JM ?�R��Y�VhR�}rW.Q��~�Z+[=��*���_"S�*a��DЩ�3��Zy#����[[-��n�)���ҖwZ6V݄-��,a�
' n��Ҏ,k������h1���׎,\o��o�#x��p	U'�j�(�n��z�����s�G	M�V���]�%�T��\9�� 0D奄�W'�r�=)��!f[(����{Rp����b���
�3�J�� �K�?@�n��N]�j�[4�RȖ�O��~w*:����ˍ�Q��÷I�3d��W��-z��Yjt�!*/%��;���34`���6��R����G�Ǘ�m�?j�����=
}'п��#��^�I��w��	�&gt;v{�{�ʽϵ��˥,N�"�9�&gt;t��	���
�{��j����N�%r4vb9M���9��&lt;��@2�⛩| a��GϏ�=֍���G.L��c�8x�]�$�P��m�uaM��0~�1^y'Ar哖���	�n����R�y埚�^Fͨ�x%�ÖA��w�l�}���ݫB�W躼���ۡ�d�v��:a�����Ѩ���0ض���:9RI3��Ág�N�Ab��C�	�Z����V��/C�ɩv&amp;��!���L�a�r��/���v�@�bj6�&lt;�<u$��w \ne�*�}�w�-�\��zin�q���|�#�4�_埀�_��="">��b�X"��̼�����
XMj��\h�H���̋(��Ers&gt;�k�~k�bi�����|���YhB�q9�l	b������X�+�,��d�Fk�Pqv���d�F���@��
UF	���Y���a�8q�_;�����p/����ʕ�E\^k�,ÊU���MJ|d΁#��$��K�m�/��˻䡐D����-K����qxf��%U��%�Ĥ���d����bO��=y%L�$U�a��pcd�.����Z�~�ܯ bG^��`�X�t� 	+�V��\�0�U:PRg䎨�C|�+�J���ˌ�A�l�K�2�;u���@�hU�_RiNF1�{�&lt;L��%H�?U+.�hE�&amp;@qy-A�@k������qy-B�\DlIc�{��u��J��xbh��ST3lZ7ګ+�5�i}y����7S�@3[�d%�R�ZC;/�_������[L��K$���v"SL�It[�O��3�	$�B�R�(�U��Q+o$��'��0U��=�������b&gt;�ç��6�E���'9�j���Z�f��k�nPe��߆��cɆ��։q�	=P��-���n�{}����3JHn�В�tM��Qy)Al�"�Z��\�e	&gt;5�O�HP&gt;�w�������a��zێ�I#��N1��l���@�#:QS0~w��Gtd�Sw	���ƌ�W��e���������ɺ�P�o�;��73��"d�i	��F}5;�ã�r���qn���~��Z�M�ε���RJ;@�VB����@���8l���)�F�Pd��
FQ�����	�7+����^���M0��.m�Zo��˘�A���v5yD�Ƞ�=�	��+��a̫}-�~VU�`uOp���eBhe�]�m����A�q
�~�jfwF_Y�j�&amp;p�C�V_�9:��ލ6���Uf&amp;����a�a�k�Ŭ�E}i�(u��̜��
Xz		Zq ��(#ɱ*A��4X��3`�.��H&gt;F\L��V�9��@��!����QU�g6�B�s�HГYh~��مx�����
a8�#d���Tt�B1MARV�z�D��x��nBXV���=�L�j3k(��c��n�JX����/D�f��t���wc�t���^�_�[{���b��a������8P�9O�t@��l�m`ᑪ�H;�M��!���©�Q�ܸ��(oE��/nIʍ�T.��4�[w��\l�7���I����ӫؓ'�ø�='�㉐��WaF��lH��ѵv9������[�[o����{M�T����̐SO�)~�������?�թ��e��fy�p�l�Ǜ+�����s�EJ��n�v�G����Qj ����ڐ�li�
�0�I�瘒�nDR��$��u0:B$;�Z�ׁn�UF	����w��⾳�6/�;�Ty/D[��K6d��l�Z�^X
��n�3�3�J��M���&amp;¯d*�Q1.�(=h��},\e�P!��
��\�p%1�-�!�~U;Q[!�,�R�&lt;���F��܏�}f���&lt;��l;4���m�e�P)r���JDR��q��Lw�Ju����@���E���~��Kw��!�+��2�q�W�k1�*��Yؘ�b�D�kf�$6$��Y��1]wAJ��p('v(F@\V;�~v��g���x��֍C9���޿�y2�����敿L$	!!*d���:��Ģ&amp;����N n	�Ea���^	2b����n�ą!EG�$�����y�PN����B�t���W�h�����*�_�4��R�	��J�+����Շj�O����M6�n���O���2G�S��_��i~,�k]�V8��
'��Mp��+�����v@�����h�i��ě��@��	����k��G����r�k���;̋y%P�e�.H���=����~�zW����`��W\�@�;V�t�fߓ�!�z4}(���U��L��j������J,QG��XH�2����&lt;ᨕ7"aaFTc�'�%-�$��N�Sy%��+I���0hͨߡZ%LȦ��*��F��egz^�L���M�L������h3��=W"��k�8&lt;[TJ�Y7���-h]�l�z�(`ʿ&amp;,�^�=����M`�p��N���+,�4
]
b��0�5����AgΗL~�cFdaxN!��U(�a-�=�H����4#on�v�|R/�|�G��oѹ&gt;��/�'6j1&gt;��{��N�Y޼F&gt;�;�)�˳��(���b|�����l���w��Ā����w0����]�2u�Wm.������&gt;��&lt;�vK���9������yM�����G�6�1�����(fW��!��挖�:��`�����Y�0٫1��Ȅj4k�����'I��Y��|1��兙��td���P�0���X�Nf9*H���I�5�q=�&gt;j
ssFKܼe�8��,��D��M�_?�u�ִ��2D����%N�n:���Z_�\i���S�ݩ
��Y�)Aq�jl�WKl�̊�Z��rj�B�M	2@G��;�(�.͖�EƐ��$Υ7��@&gt;�}?�&gt;��e�ϋ8�IR�F6�2CҺ��_���us�H�&lt;�YR	ysټ(�4�|E�^�8������?�l����d�GQ(�2L�O&lt;�R?��F+��c;��k\��$L�E��|c;x^����v�A1s��2�v��v�("E�{�����[��D����"{3*bظx��z�B-��tݹ7��_k)���.,�4�YdP�Q��[]�����&gt;��<y�� �y�h��ͤ̐({\.98f0�8nk2="" j;�4�t�s߀#���r��yιl�z�6�}ț�+��sy��ae4،�`���4x�rc.9��z��n3�osa���y.�="" s�h#pu����4�b&��ƻ�u����n��6m��i{="���z����h�m@��It��m����X�6�,�gV�����+%��O�~a,C�]`!�.(�a�������,���u��[i�&amp;" {.c�y}�s���}+4fsq�i�����p��%]�$"kf��6��n7�lz[���q�}�="�Nm" m�e'弗��a5b�d�j:�7)`���?�~q����j1m�Ϩbu<�c�="" ���)h�%��.a:���n��z���:�ji�9w��cة%1�\��������s�="" �$&�-^qx�e����3j�rkb���bzf��؆�����&a���="s%�">��Z��W!��"����:75vpQK㠹B��,� =NQK�Ѳ�B�*-s\�/,��8h�lK1J˜�YH���x�(�S�J���i�P+���-*j�|���G��V�u_����o�[����ŏp��h�"搷����1�Q����|�=��s��=��isD�&amp;��@� �҇��5)B'vb��0��0
��h��"�5Q:��T��&lt;&lt;�6�OzUR����d���ǍBdFb�U�1����L���ͤZ;v��L��E 6�jaq��dpggBp����VV��$A
�g�����N��h�#5V/3��#8�㰩�����'[�}�v# :C}��!#;���&gt;=sW4XДY0J�8d��kD&amp;p��mFƄ�f���[Q�y���64ŕ~JΟ�od�+��f���єU©U�2u����
��	nF��n.��nE�gFv(��ɧ�l�F�5ݣܡMST�b|jԺ&amp;�.�I��S
���i7��6�)n�Ծ�[
�&amp;�4t/Nl=Ƕ=,�=h&lt;�t��K�&gt;aR�H�BR�-#��ʑc����N���\Cc5�_�rC1[`�����ڥ���{�e��v�׈���௑P&gt;��r}�3�1��M	.�@�,8lJqlŰؔ�k�Ǧo�&amp;�b�F�eSB4��[g��l��=`��ޯ��XyX�3ßY;�l��C[�1i��t�N�(�õu[�ja&lt;�X�{�Wz��6:��Gn��A�ͼW��F.4cc���Ɏ�&amp;R��b+�����~��&amp;O�Սa��C۰~�Ev�?����i��Ǡ� S�$"C����4��ϴ3ؓ6~5�hLnx&lt;7�o이���"�����o2g�N�o�����k�^�x`;�Y��f�&amp;�A��ܨ�)��K����^�x���ހ	G
$]���0���p�
����-��c�
���a����co���8�^�+�}��	/N��=��,9��O0Z��Qn�2��I�qh�j��cRL�
SE��1��E�^�
C��i�`�����8�k��B+���J*��S�b��غC� ���e~�9Z[2G��z�9گ����*g��I��n3��]��ϔ����$J9&amp;�o:�֊�ϱ��]�嘆<w��6��ϱu�a�t�lk[�5��m$vf�6�4 ���v7�i{�k@�p�y������s����@��4���n��="" ��r="" �8\:&ɔ���k5a��eo��utzu";r��b<Ř�`��)��.c�5�!#w="">A��Ǒ�?�a��t#��ؙR)�;� X;4i��)k�◖ ĵa\*	�^���h;�k��Ȥ��˼'����a9r��\�[�ea~�yI8�@a�d}}k�҉�r����w�լ����c}�w�JUC�G�úĦ�_
1�*�£Ҧ+�ᑲ�n�'��\�S�Rⱷ�4���qm��c��X�n(y�s�.9��7�A�iUs���.�y&amp;K(�X+�R��O�'{�K�vj��S�5m��#/�іIGq�N|�y� F,�k����Af_�Ԙ��,���(��\�R������n)�`���Q&amp;������g�R@{��u1�=٪hr�i�3h��{,ͨtOf����2�w���2�:Z8h�
*[ߓ���&gt;��͟ |
�Z}�w3�]��&gt;�]B� ;T�?P�I���%���p����0���싒@A�������z8��|P���8����������Z��N��Gr�����Jv���x��MM8i{�&gt;9�4��W��;^+F�&gt;���OnAS��9d{?%^������7�#�#�[�����l��m�&amp;��Vm�4D��VO�G���"���&lt;2�i���a�%�ҟw�D�'=�BH;+����5�哪5���/��P� �HɌB@V��LR@V�6��Y����U超 ��=n��}$���vq���&amp;�@V�d���kѵ�0�Y9����g������8��R���oM!$��� �~Y$��_�o�vm�_�8�NC-�FE�)���`S{TM�]P�����)�%��e��3�^7,�⫋�U�f�%��3!��a�\k��m�&amp;�p�H�h���9k���؞!���s��X.���u���8�K�;P�ev���l�o��]#�\��h�1����@�r��'�̤}9l1�nc�\f��r�Ǯ�b.sP�sL�݇%$s�OQ�1O�	�\82���Q�����P�T�`O�d~c�O��K:���5��(t��P�/������2��#*X��t�UT;lM��@���Lm�jm�1wC�у���M����J��ȷTN~]#��ū.?��ǟ�����8���Y�(�}��ҡ�#8t��HB�th������ah%^��n�=�.IA��84����+�(Y;&amp;Q܋-�,H��A0��څ'��1n�(𢩿0�K
�25���s�����Z���wY"���k���7��n��aZ*o�����zOC�8�'�~�"7s��_"5����&gt;ڍ�����?�FS����5okd=�x��w�+4:�3vC~�`ofF��Ae�A�Y���ū�돟�ݽ~��ç��d�#����D_'(ԭ���+��Ɗ,/�X����9��xy�@����X�5lq�'|,�����-�N��l�v��K�?��?��nn����n���+�I1���|��\��dy#�$~VoJ��J�t��J��Џߥ;�w���
�
B-W; 3q!G0a(5w��_���L�m��� ��fy��p�.���;��*�'3O3�y�뻼�G�miV8X�qk���n8�g�K'�����zS�qP2��P�VCݚЦ���7x����7)`7O��i��q� �u���O��y��:��L��|P��[,��t� ѳ�R�c�A/�
ꏅ����9�#
�p�Q�BJ���q�����4%5��\=c�#�k��S����
�p�����e�8�
2��/�	�c�Ñ5i����#�ݸ��x5�܋:���p�Z^ݞ��X�<jb<#a�Ñ�c��o������i�%�z3w�0̢qk��+�g����͙�\2~��k���i�s#��d�h���l�h�c�g��g�;t��������<��n���m sn�h���k���̰����٣v����8�ԝ�u�1&v68?y���w��k�u䜁#mmx9�wcu�<�mԐsd:��v8�x�t�="" ��k�4��c��Б$mƵ�sd�mxt��mq^�="" �xgr�="" b������o��6�㲌;1�="" ��(jlh%�4-m�="">]�YL��&amp;g�z}H���)�d�ן�����J�j����t,�&gt;�;�K�����SS�æ�c�ez#C��t��ld%PBo��H�s���;X ����p݂=�?f�#�M����z�Lj�m��5��I�5(�N��K"4̺Uo3z"�.e�%��Ȩ��Y��&lt;�K�"B��6tV�ҁ��0�;��յ�M@�U@��	�E����ū�F���
d��a�#x�Є��&gt;��E��A�#����~Ȁ�J�
�ߩ������?}��V
-IH�#��A�`g�X)#�O�e�3�)
���U�c����b`���*���%Ph|t.�C�]g����Cu��|P�-e=�\A��������=��ǩ�u���)z͟<xf�'���|��� �����f!�p���="" ="">ڷB&lt;{	!u ��T�9j�y��ϔ�B�FE��ǘ�܀����Y۠�O���v�����$.�4��ܲ���eʇe'P�m����6�޲�ӻ)ĥ�_�qE�(àUV�޼���n��΍�*�P��t�w�����+4u*j�N�d��O�,��ߠLo������..\��3|��ɧK^|q=�SJF����!��V����^���"M9�I&gt;3K"�i�O�$���BHR}�䆊Gf��%�Gy��)����o�ƶ/GH\L�}�-~(�������p���/�#��ˮs�	�oW^@���2T밅T�w�5������&lt;����O�4���9Ku�B��\�xV�d�/���z&lt;�T�{����e.`s�w��T���&amp;�.�xM��:�ک8#��b�՗�4hxq�e�4P�h`�&amp;f�Ϋ��x��[1�gъ�:���
�U��=C��;n��x�waޡ��	����+nZ��#������r`�0��M�?V,�
ƀ3bN)����"J�K�Up$/Ő�2�ŋ[����.z�O�y���a۵N�P�Fkyc\[�18&lt;�Ha���}K)k��mTJ��`W�ޘ%Y�q'~���X^�CG�&gt;�KKҨ�:jt�ÞdцF�݆�r0�T�hH��A?0�ޏ����~�&lt;e:��5��g�
�qo&lt;����JD�-�h/$�][Rv��跉�&amp;�,U��$�?�6�fD�Sz���VXKy[inO"J�;n X�C0_&gt;�WJ���yƉn%kqң���Y'�+�K���f�)���m���e�N�z��ԱdS6+�E�.}���v���m=���y\O吡IS��!_A��hmR��[��_޾��#��M�
&gt;��I�psO����1�ɏ_��'6��8j�S9���G9!X�fq�CI+Cy=�Ce�Y&amp;�=ZD0�v`�UE��숡���ǣ$�Z�=+��Kbg�\t˩��_c��jG�[
&amp;1bkq�_;�h?�
D���]���=���P�&amp;�V�[��Q�(�`G�&amp;��+ J�b��mE[޶ڻ��L��BDd����%9K��
8T̆���d�]j �4��7��W1�m�Q�Hڲ�R������oF�C��h�I���]?6Ć�M-$`�)R�%�+ ��u`�����,š��!�H�zuv+�u���!��%��H����%3P\2�2:K�h�%R���ي	��d�0G`2��xf�
يH��x:m�6o����$�]��X��T%�gZ�u$��8�TO�M�HiDy�!�-�($��\	cJoN����Fd2;w��aW+���
��0�[#(��Tx��A	k9���0��l�8��	�,b{�s�?�dL�ˌåC�,��s�U����(S�A�9�)͘e"#p?�tc�$�ޙYH�mI͆�կN�CT�	�$_�̎`�˘���x��x&gt;������u#��?�׳��S�Cx�a�Cx�G?��A�Cx]�y/�7��w+_S??:��Ԟ���ӕV�hF�]���e�/_��y������~���qG���F�!�.I8f�R
�tL���a�P�=��"X��a���	�8���b"LoP�&gt;Q@�d��:ξ���#T�+�����)�.�0�Ԁ�i@����2G_�/ܑ������/b��� FǮCu21,�Efk-/�ґL{��&amp;)�vZ֭�!l�5]�-��dƜe��gɍ$�Š=�_���M�A�:a��eI�,�V��E�J���,������x���p[��aW�P�1�+�s
�Ԟ�G�~�B:����|:�K���ʏy����1hj\�����ZRAv��y�w�
��j��;�`�e��3���%�-ٔ���8"�m�`��5��L��Z�X*B�T^���d�n��/A.г˦��-`-�P�	���g�BF �̫��%Ν)�^6��K<p����׋��d�e'�sȗ��r- ���u�dj��âf+�9l-��ڗ����[xr�w����aa�qa���������n4��w�qҌ۹f�r���w���&�rj~�x��<�)i)�����c)_\~!]ۑ����tl3�f�="��">�,F#�s���&lt;k�z0�\��4�4ay����c�M��۾�d�=D(�_~Ĝ��ćTO��|)���j����jv��2�CM��?�qy��;���P���P��WV%G��i���9�?�2-��&amp;��V,yHa�*�$	TBp�&lt;��r��Ӳnm
b�8��ndq�R��P[��ۇ�A[�/��C�"�uK,GC�P���D,@~��H�eY�&amp;\Bĳ�ء�8������| ��-((�,�26iB�#���@�m_�b�QR�&lt;07yH9`�w�+}r |m��{��6
����Ξ`�W�j`:qnת_{,^#`��6l�8�a���%�qG��goZ\�����f���m�z�;ƹeQ�wf#8��OW9�|�Z��~R�;��͓SĞlh�'СDc38�D��[��7��.�N�/�h�Fj�C6�"6��J����R�\���{@��j;�n�B	���j��[�_�H��y��(Q�&lt;`�rǀ�T���|gχ[a�9�錆�'8��{�Hđ�T�F��0�Z������#Z���Ӡ�I�/�zE��Zo/0
�ϭ?��O_Jg�[���H����[�mh��m���@b�,���0	�gH�Ӆ%�����P_;Yb��j�`S]����s�+�U����	�\���h���L(A�9 �+9�^�%��v�%�	��6-�߇�0A�t.G'zd4�G�%������3�t&amp;-BJ��z�
\y��MN�4?�g����;t�#_5G^pM��0n;�C����kk�C�_f-�s�vho�� �u��P,����ݹҀO�C�����ѱG�=e��'
��h^Rz�	6G��]�v�Vis��(e~����N����&lt;�J(�˽a����_ֹ��ӈn�b�σ #��5�\x�M�\X�9�$��ԣfl�jJP���d����ї�n�����+�����*2�a�,�*gEr�UV�UA��7J����y�y�P(�K?ȱ#~A����N]��	��I�����4bj��� ���ɖ�ˑI�%�2?���˙���g��̄a�_vt&lt;�"��[�)J����|8q��k
_I�V�&amp;�a|48Ȋ��њ� ��!|uqҗ�:'N-�Ag)G#G�x�%����,��Ҡ�F+��d�t��!�4��,�5��.��+���Xx�XTHQ���7|C7��
/�i�?�	����+�]�a*\�2U��ś���j�]����OL�o�6�Ƌ�Yo/YȿrE���mU�����ob��g,���=k�#{����J��{�h�)3]&gt;T�e��U�i���#(�%�cR��w�,��XܪӴܴ-q��J��K픷W��_8ՀN%̵0�`�.�
Ƭ��j*=ڱ�qU��&lt;?�̀)3Y���V�s � u+0�V�2��:yP����}��q���cqi�W5�5G0�.�C����Y���5��mi6z^MWa�z]��cVF4a�A#7s&lt;�iȐ2�¥
��P�TU�'悇Y��
V������O��+W�nDe��=���"~l��Aus�,�D�1�F4�eN���7Ş8U-&amp;$f��[
� �N��Y�5����Sj\�Æ�&lt;�&gt;���/� �m�	z�_�ƈ�v#��Jz�)1Ft���X�ɯ�1�&gt;Q�B2�@J��}�*����X0ΐQV@��~$?�K�$k�Чy���170��dz�|nȒ~}xx�^&lt;�n��K(b�=�[�W

�̶\�
��6_wfӮ-&lt;���;|���.���Y�^��ϖ�m�����:�3��l�O��U��q�w�p[ �&gt;�B�_p��F��w�U	$,w�4��J�4��93�*�6Eo"�od�����
KB_Uq햭`�+onE�PC�i�'�(ߛ����QQ�Mb\%1Din�/9k&lt;@�1���&gt;���@ɦ����J�m�{w�s��6�;�3�q��"~{�DI���M�xUn=޺�շ�Q���.h�����ɚ�Rpc!��c�$Z$�"
�S0��CE��<hyqȒ��,����_�ihes�̨v��wy3&q�e���gl��a��wm���0;�8����s�b85�\���x���n.itschb���o$�;�`vh��?��ǻ���f�ʆm�![�m��--�.�9��q�ˆ<g}r�?]��?. �3�rnlt؋�c�kn�ÖՓ�6&k�<(�h6�="" ٴ�2�����y�7n="" ;��c�-@a���˫t�-a�g�k?`�]ݑ��[Ԁ���3l-��@(����d��`="" ��="" տ�4��="" ky�nvk�u��0�[qyo+<�|���(�����(��t��f_͢�="" ,\�"="" ��h|*��q�*��yĊ&���="" ql�b�ty="" �)d_���d��`�������ikp�j$="" h���&����j�zlx�<���ݜf�ºq&��fۛ="" ��}y�h~p��c<��p��bc��fƆ�����a(�����="" �z�o��~Γ����1��?����|ya��qzk���q����qrrbՊ��|�f�"huŦ��j�$�*c�"��~͊0�y��sp�x,oi�="" .t`�*m}��c%��e�ʿ,�����bi��&j��c�l�;-k�e����'��3��,��������e��="" �8f��:t�;d�l�\e�="" ֙�m%="" vvz[d����x1ۉ�y�]="">��2�����QX��&amp;,�̟�0,�����hѠ;���|&lt;&gt;U�yB��NY�d��qU�()���0
3�T+b^o�)D_�-�|�D(��)AY�{]�ܮ<bn�s,|i��vbp�m��(!��?�}�����fo��z����� ~�ax]a*�����,i]s��u�����}��о{sa�88�9�a="" ~dȜp��b�������`i="" �x�`��="">�n0ux=bZ�)��TS'��;%	��|y�&gt;�O���L�a?�1QU�\� ��~9եX���,�h��O�u�1˃(fI�笪���AT�ȃ$**�Ty�Y'$�/A�9P� ���≒��,�1�Mu�'0�(��QN��7��*;��,�)�T�!���x���@'���`#��k����e��T���d�XmD��\��6�ehٵ0[�n��aN�-G*md��I�kDȪ;
���
�bt��^��t��$�D_�\�:PL�7���2sYiR	�Vx8U,�M��Y��7�:�S��4�J�ďs�Y_p�&amp;�u� �H�Ӌ����b��R����=T�!�rp�5�YDy�^���s%OWX+��`�(�(�/k�� !W&gt;�m�Q�;n'���I��H��E�������%��}�)`�JlUg3v0��ܮ��I�Ιn��13K9=�F���~9C4�����5�\f�M8�S]��h�:���`x���R�������-tp4-@��ac#	�mY!Vv(���AV�d�)2�m���k�����S[!�6������Z��٭�X�!঵�K�1M(��IÐ�A��_q�����G��;d��E�W��ODs��2S���rou+�;�6&gt;�5�.jY����퐻z/�]��o�y�Ӿ�ɞ���Q�vw�u@Ȑ�Wk�����n��ˠ��#&amp;Xh�r�y���:�􊸦+M�&lt;�&amp;��'���e)�5�s�`��O�,9-ߔ)��	�H26NO�;U=��]�Mr�吝�C@汣��e�cL�&lt;
q��rfJ6]t�&gt;_u���#�|T��i*ʏm�J~ԍ�ڲ�J6��7�V�s?�1�N�Q&gt;�g���ߥN�|W?�t2 �[M�
g��-�ka
B���_M���J���Ta���}�O&amp;rJy�W��*foS��.��C��c��6s��
Q��}y(cN�����}Q�ϗ���߷KYFI����E@��|��	8�b;[t��[�Te�ּ�R�/���Dӂ�I��(D��_�+p��G�勌�uCa���:7��Q���|�M"���:�ҹc����4N|}E	j�P�A���&amp;�lm��9֍�����H��{V`�Z�p��Ů�}ԫ��I�k%7����[��v7��f�Y��⵹H�~\ �.E�֦��^��2�aih�ܿ4s���,�ML��l���m���9&gt;R��h�����W7�����zj��򝱹+��ٸ��-��1C���Wg<hf�a3z#��ew��������٫z�轗�0*+q) ��c�����j�ޯ�?��*���f��z�vj˿�v�f���d�d�f,7i��="" e�="" l,n�^�e�t="">Pmdǿ� ��c�^�
��E+ �K�[��SeD{P27�	c�k������-lj3k�c��h�z�V~��a#�ڰ7u��ُ�Uh�Xs.*B�&amp;��W˵ƹ�r���~יiS��&amp;

.����}��ΗC�8f��
��t�'�s���[e�	��=$Ibq`�Yd���2�HCf �t�c/|:���e����??�A<k8�n���u�dm:?�b��, �8�j'���0xҹrwgѭ���="" �r�ͥ�#��ґr��q�xz2�vwnu�h���<="" {g�~��wt*b����8�z��rsb�="">�C�6����o`�g�K���)��o��w�P2�1B�	��B�G&lt;�2�C*c�e
"�3������"l���,�YFp�{��i�ۭ�TOJ?��Iy��IjY�������^F��L_t饮�öٴ^�R�������x�$������D��2��г�{D�3�Q�M5���Z$7�aq�'���Ft;*���@��Q]�քa�K���Qo8�P1G�=�hCR��aJ�@
F`��P��acc���a�H���\��KX� ����P;#N}Z��@������-�}1�-L��]z�Z�!]o�2\���|��㼚-�pH�ز�
��7�����G��HJ������2U(wY�g�0�`�#'tG��d�`��ml���?��.@6�I���(�p쏓o&amp;;� �8�+�+����$v��rz���O,^lX�am5�\�|��h�F�{hDꚍ�`�贞�?E,&gt;��po�F�$R��?���ζ���wH�|̾5:V՟]L����/�OtS�����6�z:��}�q�Fy4�::�&gt;�\�Ui�C���&gt;���کe��g���ƞ�dƐ�#�a2��#D�
oa�&lt;�r�cD��qn�
�A)wn���cD5�mf���`�o,�0�a��͆��\��b{�ϏD\RXI���!����c���]v��.��{)
�����Գ�� ��\j]����|�� ��g�DI�h�qu�k�z�k�?�BvU�X�CU҇W	cK�(A�1b�N�r�x�)�1�b�z�bz(�Y�JQ�.�V܅xt:�,�hW�b�:F�K��
�O���A,��Y!5�-���~կT��ИT�qN�̭�dc&amp;����bQR�0�١I�{����B��U��_�D�!�,����?X�;�ł�f���
-���ca��L4ritڛ��9;`���~�?�?��բh�M�&gt;Ƴ�#�
&amp;A!��#�)�O'4J
�JN_#u'���p�3
�91
?.͜q��b��)m����۴˫��csN����B�+6�R��Ӑ��dyJ7��uA���W�C����=f}���|�g�̡l��\��ӡ]\</k8�n���u�dm:?�b��,></hf�a3z#��ew��������٫z�轗�0*+q)></bn�s,|i��vbp�m��(!��?�}�����fo��z�����></hyqȒ��,����_�ihes�̨v��wy3&q�e���gl��a��wm���0;�8����s�b85�\���x���n.itschb���o$�;�`vh��?��ǻ���f�ʆm�![�m��--�.�9��q�ˆ<g}r�?]��?.></p����׋��d�e'�sȗ��r-></xf�'���|���></jb<#a�Ñ�c��o������i�%�z3w�0̢qk��+�g����͙�\2~��k���i�s#��d�h���l�h�c�g��g�;t��������<��n���m></w��6��ϱu�a�t�lk[�5��m$vf�6�4></y��></u$��w></y�h�n�,����r�m></rh�e]�ǀ�p�s.u�0�></l��@��v��i�q�fl�></l9�o�p���l8=��i��?����y�������8�҈[[[�'b�n9l�8hn�s�:r����t������sf׿l��%��r8b�և�-></o���b'7�܈v�����[p�-���q�x�*p��ji|ja���v�a<�-�!˾nm{�i\�=�u6�ap1q�;qڻ��b></aҲ���x�nmx�y�></q�ej�n)�mqfb></p></iuxt���9></sƄ7��Όo�qg���c��!�></h�></z�ءzσ���></uw�l���վr;��gb></o��></c���̥��j�axᴱ��4&q���m></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Calibre 8.0 Release (275 pts)]]></title>
            <link>https://calibre-ebook.com/whats-new</link>
            <guid>43432890</guid>
            <pubDate>Fri, 21 Mar 2025 07:56:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://calibre-ebook.com/whats-new">https://calibre-ebook.com/whats-new</a>, See on <a href="https://news.ycombinator.com/item?id=43432890">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-wrapper" tabindex="-1">
            



<p><a href="https://calibre-ebook.com/new-in/seventeen" title="What's new in calibre 8.0">See what's new in calibre 8.0</a></p>

<ul>
    <li><a href="#" title="List of changes in each calibre release">Changelog</a></li>
    <li><a href="#" title="Major new features in recent releases">Major new features</a></li>
</ul>

<div>

    <div id="release-pane">
        
        <div>
            <h2>Release: 8.0.1 [21 Mar, 2025]</h2>
<h3>New features</h3><ul>
<li><span>Much improved Kobo support</span>
<p>calibre can now natively edit, view and convert KEPUB format files used by the Kobo. It also automatically converts EPUB to KEPUB when sending books to Kobo devices (can be configured by right clicking the kobo icon in calibre).</p>
</li>
<li><span>Connect to folder: Allow connecting a specific device</span>
<p>calibre can now connect to a folder and treat it as though it is a USBMS based device. This is useful particularly on Chromebooks where USB devices appear as folders rather than actual devices.</p>
</li>
<li><span>When completing names for fields that contain hierarchical data in prefix mode match prefixes after every period</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2099780" target="_blank">2099780</a></p>
</li>
<li><span>ToC editor: Allow moving of multiple selected items in the Table of Contents</span>
</li>
<li><span>macOS: The calibre application icons in the dock are now displayed in a white frame to follow Apple's current recommended icon style</span>
</li>
<li><span>Kobo driver: Add support for new firmware on Tolino devices</span>
</li>
<li><span>Book details: Add option in to suppress author search links</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Fix a regression that broke tabbing to edit cells in the book list when some columns have been hidden or re-ordered</span>
</li>
<li><span>Catalog generation: Allow using templates that access the database for notes</span>
</li>
<li><span>Fix a bug when renaming authors to a name with commas in it</span>
</li>
<li><span>Full text search: Also index text in ZIP and RAR archives as these can be viewed by the calibre viewer</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2100891" target="_blank">2100891</a></p>
</li>
<li><span>E-book viewer: Fix Table of Contents current entry tracking not working for some books</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2099678" target="_blank">2099678</a></p>
</li>
<li><span>When reading metadata from HTML also recognize name="subject" meta tags as calibre tags</span>
</li>
<li><span>E-book viewer: Fix viewer not closing on the interrupt signal</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2099777" target="_blank">2099777</a></p>
</li>
<li><span>Edit book: Download external resources: Fix incorrect filename if the server returns a generic Content-Type header</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2099754" target="_blank">2099754</a></p>
</li>
<li><span>Metadata download: Publisher/series transform rules: Fix values with commas in them not working</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2098620" target="_blank">2098620</a></p>
</li>
<li><span>Version 8.0.1 fixes a failure to start on systems where the user had previously installed the KoboTouchExtended plugin and disabled the builtin KoboTouch driver</span>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Linux Weekly News</li>
<li>Spectator</li>
<li>Economist</li>
<li>Granta</li>
<li>Hindu</li>
<li>1843</li>
<li>Barrons</li>
<li>Frontline</li>
<li>Zaobao</li>
<li>Strange Horizons</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.26 [14 Feb, 2025]</h2>
<h3>New features</h3><ul>
<li><span>Allow specifying web search links that are used when clicking on item names in the Book details panel for custom columns via Preferences-&gt;Add your own columns</span>
</li>
<li><span>Content server: When clicking on author names in the book details page perform the same action as clicking it in the calibre program's Book details panel</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Fix a regression in 7.17 that caused various minor problems with editing metadata directly in the book list</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2097677" target="_blank">2097677</a></p>
</li>
<li><span>Fix a regression in the previous release that broke conversion using Heuristics and TXT input documents</span>
</li>
<li><span>E-book viewer: Fix header/footer text size too small when using multiple monitors and the primary monitors DPI is much less than secondary monitor DPI</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2097563" target="_blank">2097563</a></p>
</li>
<li><span>Fix series mapping rules in the metadata preferences not working</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2097947" target="_blank">2097947</a></p>
</li>
<li><span>Fix setting custom icon for category doesn't work</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2098133" target="_blank">2098133</a></p>
</li>
<li><span>Kobo driver: Fix a regression that broke working with very old Kobo devices</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2092732" target="_blank">2092732</a></p>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Science Journals</li>
<li>Barrons</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.25 [07 Feb, 2025]</h2>
<h3>New features</h3><ul>
<li><span>Allow setting custom icons for items in the Tag browser by right clicking on them and choosing "Manage icon for this value"</span>
</li>
<li><span>Kindle driver: Allow import of KFX files from 2024 Kindles that use the MTP protocol</span>
</li>
<li><span>A new tweak in Preferences-&gt;Tweaks to control the East Asian language used when transliterating to English</span>
</li>
<li><span>Add an option to adjust the size of the link and note icons in Book details under Preferences-&gt;Look &amp; feel-&gt;Book details</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Nook driver: Fix the Glowlight 4 not working on Windows</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2068527" target="_blank">2068527</a></p>
</li>
<li><span>MTP driver: Fix Internal storage and SD card being swapped on some devices that have buggy firmware that assigns the SD card a lower id than the internal storage</span>
</li>
<li><span>Template dialog: Respect the tweak for title/series when editing save to disk and send to device templates</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2096841" target="_blank">2096841</a></p>
</li>
<li><span>Content server: Fix icons for individual formats not being shown in the Tag browser</span>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Alternatives Economiques by Kabonix</li>
<li>Zerodeux by Kabonix</li>
<li>Afrique XXI by Kabonix</li>
<li>Orient XXI by Kabonix</li>
<li>Contretemps by Kabonix</li>
<li>Faz.net by Anonymous</li>
<li>Moview Web and Football League World by SpicyPoison</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>spektrum.de</li>
<li>Economist</li>
<li>Arret sur images</li>
<li>Le Canard Enchaine</li>
<li>Foreign Affairs</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.24 [10 Jan, 2025]</h2>
<h3>New features</h3><ul>
<li><span>Allow creating rules to transform series names in the Bulk metadata editor and Preferences-&gt;Metadata download</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2091268" target="_blank">2091268</a></p>
</li>
<li><span>Conversion: Automatically set the page progression direction for books that do not have it set and have their primary language either Arabic or Hebrew</span>
</li>
<li><span>Content server: Book details view: Make calibre://show-book and calibre://view-book URLs in the comments work</span>
</li>
<li><span>Edit book: Spell check: Add a button to export the currently displayed list of words as a CSV file</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2092496" target="_blank">2092496</a></p>
</li>
<li><span>Add from ISBN: Add a checkbox to automatically convert obsolete ISBN 10 to ISBN 13</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2092483" target="_blank">2092483</a></p>
</li>
<li><span>Save single format to disk: Allow choosing the book cover as the format to save</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2092395" target="_blank">2092395</a></p>
</li>
<li><span>Option to show a button to access all available actions from the status bar in Preferences-&gt;Look &amp; feel-&gt;Main interface</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Read aloud: Fix no audio produced when text contains &lt;3 and using the Windows legacy speech engine</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2092948" target="_blank">2092948</a></p>
</li>
<li><span>Fix Tabbing while editing cells in the book list not always working</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2092643" target="_blank">2092643</a></p>
</li>
<li><span>Windows build: Also sign the portable launcher exes</span>
</li>
<li><span>Fix viewing books via the Cover browser not working when in device view</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2092630" target="_blank">2092630</a></p>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>LWN Weekly</li>
<li>Outlook India</li>
<li>Livemint</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.23 [20 Dec, 2024]</h2>
<h3>New features</h3><ul>
<li><span>🎄 Happy holidays to everyone!</span>
</li>
<li><span>Content server: Allow managing the data files associated with a book by clicking the three dots in the top right corner of the book's page and choosing "Manage data files"</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2091646" target="_blank">2091646</a></p>
</li>
<li><span>Edit metadata dialog: Allow right clicking on the cover to view it in a popup window at larger size</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2091216" target="_blank">2091216</a></p>
</li>
<li><span>Add an option to expand the Tag browser tree to show the item that was current when the library was closed</span>
</li>
<li><span>Add import and export stored template to Preferences / template functions</span>
</li>
<li><span>Various Quality-of-Life improvements to the dialog used to edit columns with fixed sets of values</span>
</li>
<li><span>Resolve doi.org links when pasting identifiers</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2091152" target="_blank">2091152</a></p>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Viewer: Fix some HTMLZ files not opening on some systems</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2091451" target="_blank">2091451</a></p>
</li>
<li><span>Amazon metadata plugin: Update for changed markup for some books on amazon search results page</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2091542" target="_blank">2091542</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Le Canard Enchaine by Kabonix</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Economist</li>
<li>Irish Times</li>
<li>Popular Science</li>
<li>ACM Queue</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.22 [29 Nov, 2024]</h2>
<h3>New features</h3><ul>
<li><span>E-book viewer: Read Aloud: Add an option to control the position of the popup control bar. It can now be placed along the top or bottom edges so as to overlap less with text.</span>
</li>
<li><span>System tray menu: Add action to restart calibre</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2087754" target="_blank">2087754</a></p>
</li>
<li><span>Tolino driver: Support new firmware</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Windows: Enable popup OS notifications even when system tray icon is disabled to match behavior on other platforms. Notifications can be disabled via Preferences-&gt;Look &amp; feel-&gt;Disable notifications on job completion</span>
</li>
<li><span>Fix a regression that caused incorrect English transliteration of Japanese text even when the UI language is set to Japanese</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2087850" target="_blank">2087850</a></p>
</li>
<li><span>macOS: Dark mode: Fix a regression that caused the scrollbar to no longer be transient</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2088153" target="_blank">2088153</a></p>
</li>
<li><span>DOCX Input: When some text has multiple footnotes insert a space between the consecutive foot note numbers so that they are distinct</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2089433" target="_blank">2089433</a></p>
</li>
<li><span>DOCX Input: Fix ToC nesting not working if the styles for the ToC levels do not use integer margins</span>
</li>
<li><span>E-book viewer: Fix spurious chapter transition after configuring Read aloud</span>
</li>
<li><span>PDF Input: Fix reflow of lines in files with little text not working</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2089436" target="_blank">2089436</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Economist News by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Economist</li>
<li>Indian Express</li>
<li>Economist World Ahead</li>
<li>Frontline</li>
<li>Infobae</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.21 [08 Nov, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Edit book: A new tool to create an audio overlay in EPUB files for all text using the Read aloud facility</span>
<p>This allows readers of the book to listen to it with sentence tracking, even if they do not have a functioning text-to-speech system in the reading software. You can even assign different voices to different parts of the text for a more immersive experience. The tool is available from the Tools menu in the book editor.</p>
</li>
<li><span>Dark mode: make scrollbar more visible with higher contrast and rounded corners</span>
</li>
<li><span>E-book viewer: In flow mode when scrolling across internal file boundaries using the mouse wheel/touchpad have a short half second pause to ease the transition. Can be controlled via the Scrolling section of the Viewer preferences.</span>
</li>
<li><span>ebook-meta.exe: Add an option to disallow rendered cover of first page for EPUB</span>
</li>
<li><span>Book details: Add an action to download the cover to the context menu when right clicking the cover</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2082075" target="_blank">2082075</a></p>
</li>
<li><span>Read aloud: Add a restore defaults button to the configuration dialog</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2086609" target="_blank">2086609</a></p>
</li>
<li><span>Auto adding: Allow excluding arbitrary file types not just known book file types</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2086478" target="_blank">2086478</a></p>
</li>
<li><span>Edit metadata dialog: Add an action to open the book's folder to the context menu of the formats list</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2083583" target="_blank">2083583</a></p>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Read aloud: Fix only first 32000 characters per chapter being read</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2086571" target="_blank">2086571</a></p>
</li>
<li><span>Content server: Read aloud: Fix clicking on a word to skip reading aloud to that word causing word highlighting to stop working</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2086661" target="_blank">2086661</a></p>
</li>
<li><span>Linux: Handle speech dispatcher with dummy output module and no voices more gracefully</span>
</li>
<li><span>When renaming authors fix empty author folder not being removed if it contained file explorer metadata but was otherwise empty</span>
</li>
<li><span>Edit metadata dialog: Fix keyboard shortcuts to edit prev/next raising an error when trying to go beyond the first/last book</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2086193" target="_blank">2086193</a></p>
</li>
<li><span>Linux: ToC Editor: Fix a regression in 7.17 that broke using the Create new entry button</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2085576" target="_blank">2085576</a></p>
</li>
<li><span>Content server: Fix changing the language of a book not working for non-English user interface language and for books that have no existing language</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2085005" target="_blank">2085005</a></p>
</li>
<li><span>Linux: Read aloud with Piper: Fix audio not playing on some Linux systems</span>
</li>
<li><span>Notes browser: When searching books search over all currently selected categories not just the last selected one</span>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Unz Review and Sonar21 by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Substack</li>
<li>Live Mint</li>
<li>NYPost</li>
<li>Ars Technica</li>
<li>Indian Express</li>
<li>Reuters</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.20 [18 Oct, 2024]</h2>
<h3>New features</h3><ul>
<li><span>PDF Input: Automatic header/footer detection and removal</span>
<p>A new, dedicated PDF Input engine for calibre that implements automatic detection of headers and footers based on document analysis. The new engine is the default to go back to using the old engine, select it in the PDF Input section of the Conversion dialog.</p>
</li>
<li><span>Read Aloud: Allow configuring an extra pause at the end of every sentence when using the Piper TTS engine</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2083058" target="_blank">2083058</a></p>
</li>
<li><span>PDF Output: Add _WIDTH_PIXELS_ and _HEIGHT_PIXELS_ variables to know the width and height of the header/footer area in templates</span>
</li>
<li><span>Windows: Use calibre's bundled SSL certificates instead of the system certificate store by default</span>
<p>Can be turned off via CALIBRE_USE_SYSTEM_CERTIFICATES=1 env var</p>
</li>
<li><span>Trim image tool: Add a control to adjust aspect ratio</span>
</li>
<li><span>Kobo driver: Add support for the new firmware used by the Tolino Shine 5</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Fix a regression in previous release that broke copying of book to another library if the books author does not exist in the destination database</span>
</li>
<li><span>Read aloud: Piper backend: Fix not working with voices whose names have non-ASCII characters on Windows.</span>
</li>
<li><span>Content server: Fix book with non-ASCII filenames not downloading in the Kindle browser when using the /mobile view</span>
</li>
<li><span>Content server: Fix embedding the server HTML inside a third party iframe causing an error</span>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>NYT Magazine by unkn0wn</li>
<li>RedaktionsNetzwerk Deutschland by epubli</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>The Wire</li>
<li>Nikkei Asia Magazine</li>
<li>Swarajya</li>
<li>Mainichi</li>
<li>Nautilus</li>
<li>National Geographic</li>
<li>Science Journal</li>
<li>Times Literary Supplement</li>
<li>Saechsische Zeitung</li>
<li>India Today</li>
<li>Scientific American</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.19 [27 Sep, 2024]</h2>
<h3>New features</h3><ul>
<li><span>E-book viewer: Halve the time taken to open large EPUB format books for the first time</span>
<p>A four hundred thousand word EPUB book now opens in under a second on typical hardware.</p>
</li>
<li><span>PDF new engine: Improve header/footer detection</span>
</li>
<li><span>For column icons and grid view emblems, support icons for both light and dark themes</span>
</li>
<li><span>News downloads: Mark links to locally available articles with a middle-dot</span>
</li>
<li><span>When saving a layout also save the main window geometry</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2079784" target="_blank">2079784</a></p>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Windows: Read Aloud: Fix an occasional crash when stopping read aloud when using the legacy windows TTS engine</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2080705" target="_blank">2080705</a></p>
</li>
<li><span>Windows: Read Aloud: Fix clicking in text to change what is being read causing tracking of currently read word to fail when using the legacy Windows TTS engine</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2080705" target="_blank">2080705</a></p>
</li>
<li><span>Read aloud: Fix reading large numeric words causing text synchronization to fail when using some legacy TTS engines</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2080708" target="_blank">2080708</a></p>
</li>
<li><span>EPUB3 metadata: Fix setting series number to zero not working</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2080701" target="_blank">2080701</a></p>
</li>
<li><span>Comic Input: Handle comics whose internal files have control codes in their filenames</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2081982" target="_blank">2081982</a></p>
</li>
<li><span>E-book viewer: Fix a regression that broke searching in Japanese books that use &lt;ruby&gt; text</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2071348" target="_blank">2071348</a></p>
</li>
<li><span>E-book viewer: Fix a regression in the previous release that broke Read aloud for selected text</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2080655" target="_blank">2080655</a></p>
</li>
<li><span>Amazon metadata plugin: Workaround for downloads failing because Google discontinued its webcache</span>
</li>
<li><span>Cover grid: Suppress the 2px border Qt draws for the list view</span>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>NYT News based on feeds by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>NY Times</li>
<li>NYT Book Review</li>
<li>Courrier International</li>
<li>Le Monde</li>
<li>TLS Magazine</li>
<li>Scientific American</li>
<li>Engadget</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.18 [13 Sep, 2024]</h2>
<h3>New features</h3><ul>
<li><span>E-book viewer: Read aloud: A new Text-to-Speech engine (Piper) that uses a neural network for realistic sounding voices</span>
<p>To use it access the viewer controls and click the Read aloud button or press 'Ctrl+S'. The neural network is run locally, no cloud services are used. Using the OS Text-to-Speech engine is still possible by clicking the configure button on the Read aloud control bar. Note that the new engine highlights the currently read sentence rather than word.</p>
</li>
<li><span>New experimental engine to convert PDF files with support for automatic header/footer removal</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2076346" target="_blank">2076346</a></p>
<p>Turn it on via the PDF input section of the conversion dialog.</p>
</li>
<li><span>Content server: Viewer: Read Aloud: Implement word-by-word tracking when reading aloud if the browser and OS used support it, for example, Chromium on Windows, Firefox on Android and Safari on macOS</span>
</li>
<li><span>Image popup: Add a context menu with an option to reset the current zoom</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2080315" target="_blank">2080315</a></p>
</li>
<li><span>Edit metadata dialog: Show the number of data files on the data files button</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Fix a regression in the previous release that broke using Tab key to move around the book list while editing cells</span>
</li>
<li><span>E-book viewer: Fix scrollbar position not updating during continuous scroll</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2077801" target="_blank">2077801</a></p>
</li>
<li><span>E-book viewer: Fix a harmless error when the book contains page list references whose targets do not exist</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2077871" target="_blank">2077871</a></p>
</li>
<li><span>Linux binary build: Fix missing libdeflate dependency</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2077794" target="_blank">2077794</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Muy Interesante México by unkn0wn</li>
<li>Salzburger Nachrichten by İlker Melik Sıtkı</li>
<li>Computer Weekly by İlker Melik Sıtkı</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Revista Muy Interesante</li>
<li>Ars Technica</li>
<li>South China Morning Post</li>
<li>Times Literary Supplement</li>
<li>Hackernews</li>
<li>Star Gazetesi</li>
<li>Hurriyet</li>
<li>Gorafi</li>
<li>Times Online</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.17 [23 Aug, 2024]</h2>
<h3>New features</h3><ul>
<li><span>E-book viewer: Support for jumping to and displaying paper edition page numbers</span>
<p>If an e-book contains embedded information about the pages from the paper edition of the book, the calibre E-book viewer can now jump to a page number via the Go to button in the viewer controls. You can also optionally have the current paper edition page number displayed in the header/footer by adding "Pages from paper edition" to either the header or footer in the viewer settings.</p>
</li>
<li><span>Edit book: When text is selected allow changing the indentation of all lines in the selection by pressing Tab to increase one level or Shift+Tab to decrease one level</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2076251" target="_blank">2076251</a></p>
</li>
<li><span>Allow a plugboard to change the series_index as well as the series name.</span>
</li>
<li><span>News download: News recipes can now optionally use browser engines based on either Qt or Chromium network stacks instead of mechanize</span>
</li>
<li><span>Email delivery: When sending emails to Kindles do not convert filenames to English letters as Amazon appears to have finally fixed their email servers to handle non-English filenames</span>
</li>
<li><span>Quickview: Add a tooltip displaying the full cell contents</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2075565" target="_blank">2075565</a></p>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Update the version of the Qt toolkit bundled with calibre to the latest available, fixing some crashes on macOS related to accessibility tools</span>
</li>
<li><span>Edit book: Fix searching marking incorrect text in the presence of non-BMP unicode characters</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2075970" target="_blank">2075970</a></p>
</li>
<li><span>Conversion: Do not embed a second copy of a font when using the option to embed font family if the font is already embedded in the book</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2074002" target="_blank">2074002</a></p>
</li>
<li><span>calibredb list: Fix a regression in the previous release that required setting --template-header to empty to use the list command</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2076515" target="_blank">2076515</a></p>
</li>
<li><span>Tolino driver: Fix books from the Tolino cloud not being listed</span>
</li>
<li><span>Windows: Book details panel: Fix selection not visible when using the system default theme</span>
</li>
<li><span>Hide the Virtual library tab bar in device view as it is non-functional</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2073441" target="_blank">2073441</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>GaGadget by bugmen00t</li>
<li>Süddeutsche Zeitung Magazin by unkn0wn</li>
<li>Science Journal by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Jot Down</li>
<li>Various Russian and Ukranian news sources</li>
<li>Nautilus Magazine</li>
<li>Süddeutsche Zeitung</li>
<li>The India Forum</li>
<li>WSJ</li>
<li>National Geographic</li>
<li>Washington Post</li>
<li>Mediapart</li>
<li>Bloomberg</li>
<li>Nautilus</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.16 [31 Jul, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Add a driver for the new 2024 Tolino devices. They use a modified version of the Kobo firmware, so they are detected as Kobo devices.</span>
</li>
<li><span>Various news recipes now have the ability to download past issues, accessible via the Advanced tab in the Schedule news dialog</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>ONLY if you use the calibre Content server, you should update calibre as soon as possible</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2075128" target="_blank">2075128</a></p>
<p>If you do not know what the Content server is, you do not use it, and these do not apply to you. If you have set a password to access the Content server that you have not shared with anyone, these do not affect you. A remote code execution bug in the Content server introduced in calibre version 6.9.0 (released on 2022-11-25) means that anyone with access to the server also has access to the rest of the computer the server is running on. If you are using a password to protect access to the server only people that know the password can gain access via the bug. Thanks to STAR Labs (<a href="https://starlabs.sg/">https://starlabs.sg</a>) for finding these vulnerabilities.</p>
</li>
<li><span>Content server: Fix path traversal vulnerability</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2075125" target="_blank">2075125</a></p>
<p>A bug in a feature introduced in calibre version 6.16.0 (released 2023-04-20) means anyone with access to the server can also read non calibre related files on the computer running the server.</p>
</li>
<li><span>Content server: Fix SQL injection vulnerability</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2075131" target="_blank">2075131</a></p>
<p>A bug in a feature introduced in calibre version 6.10.0 (released 2022-12-16) means anyone with access to the server can also read non-calibre SQLITE database files on the computer running the server.</p>
</li>
<li><span>Content server: Fix an XSS vulnerability in one endpoint</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2075130" target="_blank">2075130</a></p>
<p>Only relevant if you embed the calibre server within a larger server, it means attackers who can convince users to click on a specially crafted link, can run JavaScript code with the same origin as the larger server calibre is embedded in.</p>
</li>
<li><span>Content server: Fix an error when opening the downloaded books page directly via a link and using a custom book list template</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2073972" target="_blank">2073972</a></p>
</li>
<li><span>macOS: Fix opening multiple books from Finder with the editor only opening one of the books</span>
</li>
<li><span>Fix the legacy LRF format viewer not starting</span>
</li>
<li><span>Fix mouse wheel not transitioning from undefined date to current date in date entry controls</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2074147" target="_blank">2074147</a></p>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Harvard Business Review</li>
<li>Live Mint</li>
<li>Business Standard</li>
<li>Pagina12</li>
<li>Bloomberg</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.15 [19 Jul, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Fetch news: Allow individual news sources to specify source specific options such as downloading of past editions</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Windows: MTP driver: Fix a regression in the previous release that caused an error with some devices</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2073323" target="_blank">2073323</a></p>
</li>
<li><span>Icon theme creation dialog: Fix various issues when creating an icon theme with many icons that have light/dark variants</span>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>WSJ News by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Bloomberg</li>
<li>Eenadu</li>
<li>Mediapart</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.14 [12 Jul, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Book details: When dropping files add an option to add them to the book as data files</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2072442" target="_blank">2072442</a></p>
</li>
<li><span>Edit book: A new action to toggle line wrapping mode in all code editors. Can be assigned via Preferences-&gt;Keyboard shortcuts-&gt;Global actions or added to the toolbar via Preferences-&gt;Toolbars-&gt;Book wide actions</span>
</li>
<li><span>Kobo driver: Add an option to force the SeriesID for all books in a series to have the same value</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Fix a regression in the previous release that broke merging of books when the confirmation for the merge was disabled</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2071458" target="_blank">2071458</a></p>
</li>
<li><span>E-book viewer: Allow some header and footer items such as progress to overflow instead of being truncated</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2072412" target="_blank">2072412</a></p>
</li>
<li><span>HTMLZ output: Make renaming of image files happen in filename order</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2072405" target="_blank">2072405</a></p>
</li>
<li><span>MTP driver: Fix infinite loop when connecting to some devices with more 65K objects in their filesystem</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2072384" target="_blank">2072384</a></p>
</li>
<li><span>Fix shortcut editing widget when Qt is using a theme that inserts accelerators into push button labels automatically</span>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Ancient Egypt Magazine, Minerva Magazine, Military History Magazine and World Archaeology Magazine by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Instapaper</li>
<li>MIT Tech Review</li>
<li>Guardian</li>
<li>Liberation</li>
<li>The Times and Sunday Times</li>
<li>Bloomberg Businessweek</li>
<li>Times Literary Supplement</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.13 [28 Jun, 2024]</h2>
<h3>New features</h3><ul>
<li><span>When merging books add an option to store discarded or replaced covers as an alternate cover in the data folder of the target book</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2071033" target="_blank">2071033</a></p>
</li>
<li><span>Generate CSV catalog: Add a button to sort the fields by the order in which they appear in the book list</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2068070" target="_blank">2068070</a></p>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>MTP driver: Preserve cover aspect ratio for thumbnail generation</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2067755" target="_blank">2067755</a></p>
</li>
<li><span>Fix identifiers not always being merged correctly when merging books</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2071044" target="_blank">2071044</a></p>
</li>
<li><span>DOCX Input: Fix extra left padding when converting lists</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2069541" target="_blank">2069541</a></p>
</li>
<li><span>Amazon metadata download: Get title and comments for audiobook pages</span>
</li>
<li><span>Amazon metadata: When filtering search engine results by title ignore words of the title that are purely punctuation</span>
</li>
<li><span>When matching books on a device to book in the library assume a match if the title and any one author match, don't require all authors to match</span>
</li>
<li><span>Update Google Images cover download plugin for website changes</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2069553" target="_blank">2069553</a></p>
</li>
<li><span>When adding new books if the timestamp is specified as undefined use the current timestamp</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2069494" target="_blank">2069494</a></p>
</li>
<li><span>Content server: Fix systemd pre-activated socket not working</span>
</li>
<li><span>Content server: Fix no KFX download link in OPDS acquisition feeds</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2071390" target="_blank">2071390</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Times Literary Supplement by unkn0wn</li>
<li>Wall Street Journal Magazine by unkn0wn</li>
<li>Various Valnet Publishing Group recipes by Spicy Poison</li>
<li>VOX, The Good E-reder and The e-book Reader by SpicyPoison</li>
<li>Gates Notes, Greatist, Halthline and United Nations by SpicyPoison</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Harpers</li>
<li>Wall Street Journal</li>
<li>Liberation</li>
<li>How to Geek</li>
<li>Make Use Of</li>
<li>TechCrunch</li>
<li>LifeHacker</li>
<li>India Today</li>
<li>1843</li>
<li>Reuters</li>
<li>The Week India</li>
<li>Slate</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.12 [30 May, 2024]</h2>
<h3>New features</h3><ul>
<li><span>E-book polishing: Add option to download external resources (images/stylesheets/etc.)</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2067167" target="_blank">2067167</a></p>
</li>
<li><span>Conversion: Add an option under Structure detection to automatically fill in blank alt attributes for images that have alt text in the image file metadata</span>
</li>
<li><span>Content server: Use the book title as the filename for downloaded highlights</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2067437" target="_blank">2067437</a></p>
</li>
<li><span>Review downloaded metadata dialog: Add a "Previous" button to go back to the last reviewed book</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Content server viewer: Fix the bottom of the text being cut off on mobile browsers when not in full screen mode. Unfortunately, this means the viewer now requires a browser no more than two years old.</span>
</li>
<li><span>Kindle driver: Increase the size of the cover thumbnails sent to the Scribe</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2067168" target="_blank">2067168</a></p>
</li>
<li><span>Kindle output: Fix cover images that contain EXIF data without a rotation not displaying on the Kindle lockscreen</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/1943495" target="_blank">1943495</a></p>
</li>
<li><span>E-book viewer: Fix ruby tags not excluded when searching for text</span>
</li>
<li><span>Content server viewer: Fix a regression in the previous release that broke searching</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2067128" target="_blank">2067128</a></p>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Economist Espresso</li>
<li>Slate</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.11 [24 May, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Kindle driver: Add support for sending cover thumbnails to the Kindle Scribe</span>
</li>
<li><span>A new options under Preferences-&gt;Look &amp; feel to draw covers with rounded corners</span>
</li>
<li><span>Bulk metadata edit: Add a new tab where you can create rules to transform tags/authors/publishers for the selected books</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2064674" target="_blank">2064674</a></p>
</li>
<li><span>Tag browser context menu for Formats now has Open with menu items</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2065544" target="_blank">2065544</a></p>
</li>
<li><span>E-book viewer: When hovering over the top/bottom margin show a button indicating that a click will open the viewer controls. Can be configured via The Headers and footers section of the viewer Preferences.</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2064665" target="_blank">2064665</a></p>
</li>
<li><span>Spell check dialog: Also show count of currently displayed words</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>E-book viewer: Fix searching not ignoring ruby text</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2065249" target="_blank">2065249</a></p>
</li>
<li><span>Edit book: Save the state of the current book when opening a new book via File-&gt;Open book</span>
</li>
<li><span>Edit book: Fix importing a list of words into a user dictionary not working</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2064887" target="_blank">2064887</a></p>
</li>
<li><span>EPUB3 metadata: Do not fail to read metadata in the presence on invalid calibre user metadata in the OPF file with empty keys</span>
</li>
<li><span>Get books: Fix rules to map tags on adding books not being applied to books downloaded via Get books</span>
</li>
<li><span>Spellcheck dialog: Move the checkbox to hide correctly spelled words with the rest of the checkboxes that filter the word list</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2064792" target="_blank">2064792</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Collider, Comic Book Archive, Make Use Of, MoviewWeb and ScreenRant by Spicy Poison</li>
<li>Lex Fridman Podcast by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Slate</li>
<li>Wall Street Journal</li>
<li>London Review of Books</li>
<li>Economist</li>
<li>Bloomberg</li>
<li>Business Week</li>
<li>The World Ahead</li>
<li>National Geographic</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.10 [03 May, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Export of calibre data: Ensure individual part files in the exported data are no larger than one gigabyte even if the library contains individual files larger than that size.</span>
<p>Note that this means that exports created by calibre from this version on will not be importable by earlier versions. However, exports from earlier versions should still be importable.</p>
</li>
<li><span>Edit book: Spell check: Add options to exclude words in ALL CAPS or with numbers or in camelCase/snake_case from the list of words</span>
</li>
<li><span>Allow easily inverting the current search via the right click menu on the search box</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Kobo driver: Fix database unsupported error with newest firmware</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2064546" target="_blank">2064546</a></p>
</li>
<li><span>DOCX Input: Fix text elements containing only whitespace being incorrectly ignored</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2063301" target="_blank">2063301</a></p>
</li>
<li><span>Bulk metadata dialog: Do not fail when setting covers from ebook files and some of the files have invalid covers</span>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Economist</li>
<li>The Week</li>
<li>Caravan Magazine</li>
<li>Financial Times</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.9 [19 Apr, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Kobo driver: Add support for the new color Kobo devices</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2060886" target="_blank">2060886</a></p>
</li>
<li><span>Edit book: Add a setting to control cursor width under Preferences-&gt;Editor settings</span>
</li>
<li><span>Edit book: Regex-function mode: Show a confirmation popup when closing the function editor when there are unsaved changes</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Fix undocked Quickview dialog not being restored at startup</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2060314" target="_blank">2060314</a></p>
</li>
<li><span>Windows: Fix an issue where closing a maximized calibre window to the system tray and then reconnecting with remote desktop would cause a blank calibre window to be displayed</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2044118" target="_blank">2044118</a></p>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>El Correo</li>
<li>Eenadu</li>
<li>ORFonline</li>
<li>NatGeo</li>
<li>Harpers Magazine</li>
<li>New Yorker</li>
<li>Business Today</li>
<li>The Week</li>
<li>Asahi Shimbun</li>
<li>Outlook Magazine</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.8 [05 Apr, 2024]</h2>
<h3>New features</h3><ul>
<li><span>E-book viewer: Highlight panel: Allow filtering the shown highlights by type of highlight</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2057929" target="_blank">2057929</a></p>
</li>
<li><span>Conversion: Add support for the CSS text-transform property when subsetting embedded fonts</span>
</li>
<li><span>E-book viewer: Allow displaying the view mode paged/flow in the header/footer</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2060079" target="_blank">2060079</a></p>
</li>
<li><span>Book details popup window: Allow dropping of files to add formats/set the cover just as for the book details panel</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2059162" target="_blank">2059162</a></p>
</li>
<li><span>Book details: Context menu: Add a menu action to remove the associated link</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2058814" target="_blank">2058814</a></p>
</li>
<li><span>DOCX Input: Add role=doc-noteref for links to footnotes/endnotes so that they popup in more e-book readers</span>
</li>
<li><span>Add a "Mark all selected books" to the Mark action.</span>
</li>
<li><span>Add "Hide Empty Categories" to tag browser configuration menu</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2059169" target="_blank">2059169</a></p>
</li>
<li><span>Supernote: Support for new device firmware</span>
</li>
<li><span>Sort by tool:  Add an action to re-apply the current sort</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Grid view cover cache: Fix covers not loading when cache entries are stale</span>
</li>
<li><span>Conversion: Do not change viewport relative font sizes used for SVG text elements</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2058798" target="_blank">2058798</a></p>
</li>
<li><span>Conversion: Fix &lt;style&gt; tags inside &lt;svg&gt; tags not being processed</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2058798" target="_blank">2058798</a></p>
</li>
<li><span>Get books: Update Kobo store plugin for website changes</span>
</li>
<li><span>EPUB Input: Use a translated name for the cover page</span>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Bergfreunde Blog by VoHe</li>
<li>Live Law and Politico.eu by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Caravan</li>
<li>Global Times</li>
<li>New York Review of Books</li>
<li>Himal Southasian</li>
<li>The Week</li>
<li>CBC Canada</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.7 [14 Mar, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Trim image: Allow specifying the size of the trim rectangle using numbers</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2056116" target="_blank">2056116</a></p>
</li>
<li><span>Full text search: Allow pressing Ctrl+S to select the current book in the calibre book list</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2056664" target="_blank">2056664</a></p>
</li>
<li><span>Speed up scrolling through the book list book-by-book by only redrawing the book details panel when scrolling pauses</span>
</li>
<li><span>Add a tweak under Preferences-&gt;Tweaks to set the first day of the week in popup calendars used to input dates</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>CHM Input: Handle CHM files with no HHC Table of Contents</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2056470" target="_blank">2056470</a></p>
</li>
<li><span>E-book viewer: Fix a few settings such as pages per screen and header/footers not being saved in profiles</span>
</li>
<li><span>Full text search: Ignore text inside &lt;ruby&gt; tags when indexing books</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2056614" target="_blank">2056614</a></p>
</li>
<li><span>DOCX Output: Preserve spaces around soft hyphens</span>
</li>
<li><span>Book details popup: Copy the original cover image to the clipboard even when the image is rescaled to fit into view</span>
</li>
<li><span>Fix changing disabled colors in the UI color palette overriding non-disabled colors</span>
</li>
<li><span>Content server: Fix deletion of viewer profiles not working</span>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>LiveMint</li>
<li>Bloomberg</li>
<li>National Geographic</li>
<li>MIT Technology Review</li>
<li>NY Review of Books</li>
<li>Scientific American</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.6 [01 Mar, 2024]</h2>
<h3>New features</h3><ul>
<li><span>E-book viewer: Allow saving current settings in "profiles" that can be quickly and easily swapped between</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/1979022" target="_blank">1979022</a></p>
<p>To create a profile or switch to a previously saved profile access "Profiles" from the viewer controls or press the `Alt+P` shortcut.</p>
</li>
<li><span>Edit book: Add a shortcut `Ctrl+M` to merge selected files</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2053144" target="_blank">2053144</a></p>
</li>
<li><span>Get books: Add support for Amazon Mexico</span>
</li>
<li><span>A new toolbar button to show all available actions in sub menus. Can be added via `Preferences-&gt;Toolbars &amp; menus`</span>
</li>
<li><span>Edit book: Allow selecting multiple books to edit at once, opening all selected books in separate editor instances</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Cover grid: Fix dragging the mouse while holding shift to extend the selection not working well</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2054617" target="_blank">2054617</a></p>
</li>
<li><span>E-book viewer: Fix doing a multi-page selections sometimes causing the start of the selection to move backwards</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2054934" target="_blank">2054934</a></p>
</li>
<li><span>Edit book: Live CSS: Fix regression causing incorrect colors in calibre 7</span>
</li>
<li><span>Windows: Fix a regression in calibre 7 that caused images in long text columns to not be displayed in the tooltip for the column</span>
</li>
<li><span>Fix disabled items in menus having blurry text</span>
</li>
<li><span>Content server: Fix a regression in the previous release that caused an error when doing a search/sort on some browsers</span>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>The Week UK by unkn0wn</li>
<li>Andhrajyothy by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>New Yorker</li>
<li>Moneycontrol</li>
<li>Swarajya Mag</li>
<li>nautil.us</li>
<li>Pro Physik</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.5.1 [09 Feb, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Allow fine tuning the colors used in the calibre interface via Preference-&gt;Look &amp; feel-&gt;Main interface-&gt;User interface colors</span>
<p>Note that calibre no longer follows system colors on Linux in light mode (the only place where it used to follow system colors). However, there is a convenient button in the manage colors dialog to import the system colors.</p>
</li>
<li><span>Full text search window: Add actions to the context menu to open the book at the clicked on result. Also allow using the view book shortcut to open the currently selected search result</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2052462" target="_blank">2052462</a></p>
</li>
<li><span>When showing the Full text search dialog, pre populate the search box with the contents of the main calibre search box if the main search box contains a simple search</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2052460" target="_blank">2052460</a></p>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Windows: Fix a regression in 7.0 that caused images referring to files on the disk within comments columns to not display in some circumstances</span>
</li>
<li><span>E-book viewer: Fix clock showing hour as zero instead of 12 between 12 and 1 am/pm</span>
</li>
<li><span>Edit book: When wrapping selected text in a tag, preserve the selection after wrapping</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2050100" target="_blank">2050100</a></p>
</li>
<li><span>Content server: Fix a periodic spurious error message when reading books in offline mode</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2050075" target="_blank">2050075</a></p>
</li>
<li><span>Fix a regression in 7.0 caused by a regression in Qt that would result in calibre hanging rarely when using the cover browser view</span>
</li>
<li><span>Fix custom template functions not useable in save to disk templates</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2049992" target="_blank">2049992</a></p>
</li>
<li><span>Fix a regression in 7.2 that caused the popup used for editing fields in the book list to be mis-positioned on very wide monitors</span>
</li>
<li><span>Version 7.5.1 fixes a bug in 7.5.0 where calibre would not start up using dark colors when the system was in dark mode on some windows installs and another bug that could cause errors when using cover grid mode with covers stored in CMYK colorspace</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2052766" target="_blank">2052766</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>ugeskriftet by morusn</li>
<li>Martin Fowler and Gitbug Blogs by Lucas Lois</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>El Diplo</li>
<li>Science News</li>
<li>Barrons</li>
<li>Financial Times</li>
<li>Business Today</li>
<li>Le Monde</li>
<li>Scientific American</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.4 [19 Jan, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Add support for the Supernote A6X2</span>
</li>
<li><span>Narrow layout: Place the cover browser above the book list when the window has a narrow aspect ratio. Can be controlled via Preferences-&gt;Look &amp; feel-&gt;Cover browser</span>
</li>
<li><span>Category notes browser: Add a button to search for books in the currently selected category</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2046825" target="_blank">2046825</a></p>
</li>
<li><span>Keyboard shortcut to toggle main window layout (Alt+Shift+L)</span>
</li>
<li><span>Add the possibility to assign keyboard shortcuts to the tag browser sort functions</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Fix a regression in the previous release that caused the cover browser to not close when it is used as a separate window</span>
</li>
<li><span>Fix a regression in the previous release that caused comments in the Book details panel to be rendered below rather than at the side of the other information</span>
</li>
<li><span>Edit book: Fix highlighting of special character not changed immediately after it is edited, only after a subsequent action</span>
</li>
<li><span>Move Preferences to the left in the default toolbar, making it less likely to be hidden behind an expander button on small screens</span>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>LiveMint</li>
<li>Foreign Policy</li>
<li>New Scientist</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.3 [05 Jan, 2024]</h2>
<h3>New features</h3><ul>
<li><span>Tag browser: Allow displaying buttons next to items that have notes or links for easy access. To enable these use Preferences-&gt;Look &amp; feel-&gt;Tag browser</span>
</li>
<li><span>Font subsetting: Preserve all OpenType layout features. This makes the subset font files larger but ensures there is no visual degradation when using the subsetted font files in different contexts.</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>macOS: Fix main calibre window not remembering its size on restart</span>
</li>
<li><span>Edit book: Fix the "Show changes" window moving down by a few pixels every time it is opened</span>
</li>
<li><span>Amazon metadata download: Fixes for various changes to amazon website markup</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2047257" target="_blank">2047257</a></p>
</li>
<li><span>E-book viewer: When looking up words via Google in Europe pre-approve the GDPR consent cookie</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2047181" target="_blank">2047181</a></p>
</li>
<li><span>Windows: Content server: Fix regression in previous release that broke testing for local connections</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2046673" target="_blank">2046673</a></p>
</li>
<li><span>Windows: Fix a regression that caused selections in the Book details panel to be invisible</span>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Hindustan Times Print Edition by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Foreign Policy</li>
<li>Business Standard</li>
<li>Il Post</li>
<li>Indian Express</li>
<li>Washington Post</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.2 [15 Dec, 2023]</h2>
<h3>New features</h3><ul>
<li><span>Content server: Also listen for all incoming IPv6 connections by default, not just IPv4</span>
</li>
<li><span>Book details: Allow deleting notes from the right click menu easily</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Windows: Edit book: Fix a crash when using the check book tool with a book that contains malformed markup, in calibre 7</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2045133" target="_blank">2045133</a></p>
</li>
<li><span>Windows: Improve flickering at startup due to a Qt regression in calibre 7</span>
</li>
<li><span>Windows: Fix moving the main window causing popup/floating windows to be resized in calibre 7 due to yet another Qt regression</span>
</li>
<li><span>Fix detection of existing books on the Tolino Vision 6</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2044659" target="_blank">2044659</a></p>
</li>
<li><span>Linux: Fix external applications not being launched under Wayland in calibre 7 because of a bug in Qt</span>
</li>
<li><span>Linux: Fix network requests failing under Fedora in calibre 7</span>
</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Reuters</li>
<li>Scientific American</li>
<li>New Yorker</li>
<li>Times of India</li>
<li>infzm</li>
<li>singtaohk</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.1 [23 Nov, 2023]</h2>
<h3>New features</h3><ul>
<li><span>Notes editor: When pasting HTML with images offer to download remote images in the pasted content</span>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Fix regression in 7.0 that broke restore of db from backups</span>
</li>
<li><span>Content server: Fix newly added books on homepage not restricted to the books the logged in user is allowed to access</span>
</li>
<li><span>When starting in system tray do not flash the main window briefly</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2044118" target="_blank">2044118</a></p>
</li>
<li><span>Notes editor: Fix spurious error message when saving a note that contains pasted HTML that refers to an image</span>
</li>
<li><span>Fix a regression that caused the unknown/unset date to incorrectly be displayed/edited as a date in the year AD 101 in some timezones</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2043998" target="_blank">2043998</a></p>
</li>
<li><span>Comments editor: Fix data file links not working</span>
</li>
<li><span>Linux installer: Check that the user has libxcb-cursor.so.0 installed. If not quit early with an error message asking them to install it</span>
</li>
<li><span>LRF Output: Fix a regression in 7.0 that broke conversion to LRF</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2044408" target="_blank">2044408</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>The World Ahead by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Substack</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 7.0 [17 Nov, 2023]</h2>
<h3>New features</h3><ul>
<li><span>For details on the major changes in calibre between 7.0 and 6.0, see <a href="https://calibre-ebook.com/new-in/sixteen">https://calibre-ebook.com/new-in/sixteen</a></span>
</li>
<li><span>The ability to add notes to any author, tag, series, etc. in calibre with links and images</span>
</li>
<li><span>E-book viewer: Add support for HTML image maps</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2040487" target="_blank">2040487</a></p>
</li>
<li><span>Content server home page: Show the three most recently added books in the default library</span>
</li>
<li><span>Content server: Add button to return to book details page at top level of controls</span>
</li>
<li><span>Content server: Book details: Open links in comments fields in the same window rather than a new window</span>
</li>
<li><span>Add a "Show items in selected books" choice to Manage tags and Manage authors</span>
</li>
<li><span>Show the previously used language, if any, second in the language selection drop down</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2042804" target="_blank">2042804</a></p>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Metadata download: Fix downloads from Google not working in Europe because of the GDPR</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2043415" target="_blank">2043415</a></p>
</li>
<li><span>Fix editing dates with days sometimes off by one day</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2042815" target="_blank">2042815</a></p>
</li>
<li><span>Edit book: Fix highlighting for special characters not visible when the cursor is on the line with the special character</span>
</li>
<li><span>Fix embedding metadata showing infinite error dialogs on windows if a file is locked by another program</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2043248" target="_blank">2043248</a></p>
</li>
<li><span>PDF Output: Fix an error when trying to set header or footer with an input document that has invalid content after the main body</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2040074" target="_blank">2040074</a></p>
</li>
<li><span>E-book viewer: Read aloud: Fix clicking on empty spaces causing read aloud to restart from beginning of chapter</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2042791" target="_blank">2042791</a></p>
</li>
<li><span>Book details: Fix Manage authors via context menu not working</span>
</li>
<li><span>E-book viewer: Showing chrome should close an active footnote popup first and only show chrome if the user repeats the action</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2041848" target="_blank">2041848</a></p>
</li>
<li><span>Fix very slow metadata updates on some PDF files</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2041745" target="_blank">2041745</a></p>
</li>
<li><span>Catalogs: Do not erase any tags the user adds to a catalog book entry when the catalog is re-generated</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/1262875" target="_blank">1262875</a></p>
</li>
<li><span>Linux installer: Fix downloading of signatures for older versions</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2042748" target="_blank">2042748</a></p>
</li>
<li><span>Fix editing non-active Virtual library changes sort of book list</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2041357" target="_blank">2041357</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Bookforum, Kirkus Reviews and Poetry Magazine by ping</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Financial Times</li>
<li>National Geographic</li>
<li>Hamilton Spectator</li>
<li>Times of India</li>
<li>MIT Tech Review</li>
<li>Bloomberg</li>
<li>Washington Post</li>
<li>Project Syndicate</li>
<li>Cumhuriyet</li>
<li>Foreign Affairs</li>
<li>Harvard Business Review</li>
<li>Wall Street Journal</li>
</ul>
        </div>
        
        <div>
            <h2>Release: 6.29 [20 Oct, 2023]</h2>
<h3>New features</h3><ul>
<li><span>E-book viewer: Add a command line flag --new-instance to force the viewer to open a new window even if the option to always use a single viewer window is set</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2038760" target="_blank">2038760</a></p>
</li>
<li><span>E-book viewer: Image popup: Add a checkbox to remember the last used zoom level</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2038862" target="_blank">2038862</a></p>
</li>
</ul>
<h3>Bug fixes</h3><ul>
<li><span>Annotations browser: Fix exporting highlights in markdown not including all chapter titles for books with only a single highlight per chapter or a multi level ToC</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2039336" target="_blank">2039336</a></p>
</li>
<li><span>E-book viewer: Fix a regression that could cause the viewer to enter an infinite loop when displaying the result of a search that has only one match that is not found</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2038747" target="_blank">2038747</a></p>
</li>
<li><span>E-book viewer: Fix the occasional search result being marked as not found even though it is found</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2038747" target="_blank">2038747</a></p>
</li>
<li><span>TXTZ Output plugin: Only keep images if the text format is one that can reference images</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2039474" target="_blank">2039474</a></p>
</li>
<li><span>TXTZ Output: Fix cover not being properly identified in the generated TXTZ metadata</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2038848" target="_blank">2038848</a></p>
</li>
<li><span>FB2 Input: Fix the "Annotations" section not showing up in the Table of Contents</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2038575" target="_blank">2038575</a></p>
</li>
<li><span>Linux: Content server: Do not call listen on pre-activated sockets</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2039395" target="_blank">2039395</a></p>
</li>
<li><span>Fix sort order of similarly-named hierarchical categories</span>
</li>
<li><span>Fix a regression that broke reading of covers from HTMLZ and TXTZ files</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/2038778" target="_blank">2038778</a></p>
</li>
</ul>
<h3>New news sources</h3>
<ul>
<li>Project Syndicate, Scroll.in and Newslaundry by unkn0wn</li>
</ul>
<h3>Improved news sources</h3>
<ul>
<li>Wall Street Journal</li>
<li>Scientific American</li>
<li>1843</li>
<li>Financial Times</li>
<li>Spectator Magazine</li>
<li>El Diplo</li>
<li>Wasshington Post</li>
<li>national Geographic</li>
</ul>
        </div>
        
    </div>

    <div>
        <ul>
<li><span>Much improved Kobo support [8.0.1]</span>
<p>calibre can now natively edit, view and convert KEPUB format files used by the Kobo. It also automatically converts EPUB to KEPUB when sending books to Kobo devices (can be configured by right clicking the kobo icon in calibre).</p>
</li>
<li><span>Connect to folder: Allow connecting a specific device [8.0.1]</span>
<p>calibre can now connect to a folder and treat it as though it is a USBMS based device. This is useful particularly on Chromebooks where USB devices appear as folders rather than actual devices.</p>
</li>
<li><span>Edit book: A new tool to create an audio overlay in EPUB files for all text using the Read aloud facility [7.21]</span>
<p>This allows readers of the book to listen to it with sentence tracking, even if they do not have a functioning text-to-speech system in the reading software. You can even assign different voices to different parts of the text for a more immersive experience. The tool is available from the Tools menu in the book editor.</p>
</li>
<li><span>PDF Input: Automatic header/footer detection and removal [7.20]</span>
<p>A new, dedicated PDF Input engine for calibre that implements automatic detection of headers and footers based on document analysis. The new engine is the default to go back to using the old engine, select it in the PDF Input section of the Conversion dialog.</p>
</li>
<li><span>E-book viewer: Halve the time taken to open large EPUB format books for the first time [7.19]</span>
<p>A four hundred thousand word EPUB book now opens in under a second on typical hardware.</p>
</li>
<li><span>E-book viewer: Read aloud: A new Text-to-Speech engine (Piper) that uses a neural network for realistic sounding voices [7.18]</span>
<p>To use it access the viewer controls and click the Read aloud button or press 'Ctrl+S'. The neural network is run locally, no cloud services are used. Using the OS Text-to-Speech engine is still possible by clicking the configure button on the Read aloud control bar. Note that the new engine highlights the currently read sentence rather than word.</p>
</li>
<li><span>E-book viewer: Support for jumping to and displaying paper edition page numbers [7.17]</span>
<p>If an e-book contains embedded information about the pages from the paper edition of the book, the calibre E-book viewer can now jump to a page number via the Go to button in the viewer controls. You can also optionally have the current paper edition page number displayed in the header/footer by adding "Pages from paper edition" to either the header or footer in the viewer settings.</p>
</li>
<li><span>E-book viewer: Allow saving current settings in "profiles" that can be quickly and easily swapped between [7.6]</span>
<p>Closes tickets: <a href="https://bugs.launchpad.net/calibre/+bug/1979022" target="_blank">1979022</a></p>
<p>To create a profile or switch to a previously saved profile access "Profiles" from the viewer controls or press the `Alt+P` shortcut.</p>
</li>
<li><span>For details on the major changes in calibre between 7.0 and 6.0, see <a href="https://calibre-ebook.com/new-in/sixteen">https://calibre-ebook.com/new-in/sixteen</a> [7.0]</span>
</li>
<li><span>The ability to add notes to any author, tag, series, etc. in calibre with links and images [7.0]</span>
</li>
</ul>
    </div>

</div>
<p id="full-list">The full list of changes to calibre is available <a href="https://github.com/kovidgoyal/calibre/commits/master">here</a>.</p>

        </div></div>]]></description>
        </item>
    </channel>
</rss>