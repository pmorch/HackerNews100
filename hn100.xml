<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 05 Oct 2025 03:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[$912 energy independence without red tape (130 pts)]]></title>
            <link>https://sunboxlabs.com/</link>
            <guid>45476820</guid>
            <pubDate>Sat, 04 Oct 2025 21:22:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sunboxlabs.com/">https://sunboxlabs.com/</a>, See on <a href="https://news.ycombinator.com/item?id=45476820">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <p>Cables / Tender:</p>

<ul>
  <li><a href="https://amzn.to/43NkcuJ">https://amzn.to/43NkcuJ</a> - $14.79</li>
  <li><a href="https://amzn.to/4cwxY8Y">https://amzn.to/4cwxY8Y</a> - $30.42</li>
  <li><a href="https://amzn.to/4cuS3fx">https://amzn.to/4cuS3fx</a> - $13.00</li>
  <li><a href="https://amzn.to/43u3ikz">https://amzn.to/43u3ikz</a> x2 - $17.00</li>
  <li><a href="https://amzn.to/43u3r7B">https://amzn.to/43u3r7B</a> - $12.99</li>
  <li><a href="https://amzn.to/43y5Qhx">https://amzn.to/43y5Qhx</a> - $8.89</li>
  <li><strong>Total</strong>: $114.09</li>
</ul>

<p><strong>=&gt; $912 total</strong></p>

<p>Remote tracking (optional):</p>

<ul>
  <li><a href="https://amzn.to/3Vs3COI">https://amzn.to/3Vs3COI</a> - $7.99</li>
  <li><a href="https://amzn.to/3TPaXGI">https://amzn.to/3TPaXGI</a> - $23.92</li>
  <li><a href="https://amzn.to/4a6UMdI">https://amzn.to/4a6UMdI</a> - $6.99</li>
  <li><a href="https://solar-assistant.io/">https://solar-assistant.io</a> - $55.83</li>
  <li><strong>Total</strong> (additional): $94.73</li>
</ul>

<h3 id="how-to-guide">How to guide</h3>

<p>Coming soon, for now refer to Will Prowse’s wiring guide on his very-similar <a href="https://www.mobile-solarpower.com/mobile-48v-system.html">48V 3000W off-grid solar system</a> which I followed and works great for me!</p>

<h3 id="financial-payback--embodied-energy">Financial Payback &amp; Embodied Energy</h3>

<div><pre><code>Financial payback period for 3000W
System cost : $1,124 on Amazon in 2024 (now $912)
Yearly energy creation: 365d * 4.26hsun/d * 1.280kW = 2,000kWh/y (but more like 1,000kWh/year after losses)
Yearly value creation: 1,000kWh/y * $0.55/kWh in SF = $550/y energy created
100W system payback period: $1,124 / $550 = 2 years until payback
</code></pre></div>

<h3 id="how-green-is-it">How green is it:</h3>

<p>Production footprint PV (<a href="https://sustainability.stackexchange.com/questions/8317/what-is-the-typical-embodied-energy-of-a-solar-photovoltaic-panel">source</a>):
<code>2,900kWhee/kW * 1.28kW = 3,712kWh embodied energy</code></p>

<p>Production footprint LiFePo4 battery (<a href="https://ris.utwente.nl/ws/portalfiles/portal/189571307/10.1016_j.procir.2019.01.099.pdf">source</a>):
<code>106kWhee/kWh * 2.4kWh = 254kWh embodied energy</code></p>

<p>Annual energy production system: 1100kWh/y
<code>Payback period: 3966kWh / 1100kWh/y = 3.5 year footprint payback</code></p>

<h3 id="faq">FAQ</h3>

<p>What’s the catch? Seems to good to be true? Well, this thing sits between your devices and the wall. So you need to neatly run extension cables from every room in the house to the “sun box”, and then run one cable from the box to the panels, and another to the wall (optional, just so it can fall back to pulling power from the wall). Photos of this are coming soon.</p>

<p>Will it ever push power back into the wall? Nope! It’ll only ever draw from the wall in the event that both the sun is down and the battery is dead (so your fridge won’t go off overnight for example).</p>

<p>Is this legal? Yes, see above. No difference to plugging your fridge into your wall, as far as the utility is concerned.</p>

    </div><section>
  <h2>Want some help?</h2>
  <p>Set up a call with us and we can plan your system!</p>
  <a href="mailto:hello@sunboxlabs.com">Email Us</a>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The UK is still trying to backdoor encryption for Apple users (280 pts)]]></title>
            <link>https://www.eff.org/deeplinks/2025/10/uk-still-trying-backdoor-encryption-apple-users</link>
            <guid>45476273</guid>
            <pubDate>Sat, 04 Oct 2025 20:07:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eff.org/deeplinks/2025/10/uk-still-trying-backdoor-encryption-apple-users">https://www.eff.org/deeplinks/2025/10/uk-still-trying-backdoor-encryption-apple-users</a>, See on <a href="https://news.ycombinator.com/item?id=45476273">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <div>
            <article role="article">
  
  
  <div><p><span>The </span><a href="https://www.ft.com/content/d101fd62-14f9-4f51-beff-ea41e8794265?accessToken=zwAGQBl4pP6YkdPRAf1iFPlPUdO-_-pB6HlCZQ.MEYCIQDqJlwcbpQ4rrKlgeSJtbcTgqpW4uTX3yGMCHf2gdS0fQIhAMtU15LHqeHwAXTZ3wWJLDzI72kjsauSKc8OEDpim1Gx&amp;sharetype=gift&amp;token=3767767d-fe68-4911-a97e-c067715e061e"><span>Financial Times reports that</span></a><span> the U.K. is once again demanding that Apple create a backdoor into its encrypted backup services. The only change </span><a href="https://www.eff.org/deeplinks/2025/02/uks-demands-apple-break-encryption-emergency-us-all"><span>since the last time</span></a><span> they demanded this is that the order is allegedly limited to only apply to British users. That doesn’t make it any better.</span></p>
<p><span>The demand uses a power called a “Technical Capability Notice” (TCN) in the U.K.’s Investigatory Powers Act. </span><a href="https://www.eff.org/deeplinks/2016/02/investigatory-powers-bill-and-apple"><span>At the time of its signing</span></a><span> we noted this law would likely be used to demand Apple spy on its users. <br></span></p>
<p><span>After the U.K. government first issued the TCN in January, </span><a href="https://www.eff.org/deeplinks/2025/02/cornered-uks-demand-encryption-backdoor-apple-turns-its-strongest-security-setting"><span>Apple was forced</span></a><span> to either create a backdoor or block its </span><a href="https://ssd.eff.org/module/how-encrypt-your-iphone"><span>Advanced Data Protection</span></a><span> feature—which turns on end-to-end encryption for iCloud—for all U.K. users. The company decided to remove the feature in the U.K. instead of creating the backdoor.</span></p>
<p><span>The initial order from January targeted the data of </span><i><span>all</span></i><span> Apple users. In August, the </span><a href="https://www.reuters.com/sustainability/boards-policy-regulation/us-spy-chief-gabbard-says-uk-agreed-drop-backdoor-mandate-apple-2025-08-19/"><span>US claimed the U.K. withdrew the demand</span></a><span>, but Apple did not re-enable Advanced Data Protection. The new order provides insight into why: the U.K. was just rewriting it to only apply to British users. <br></span></p>
<p><span>This is still an unsettling overreach that makes U.K. users less safe and less free. As we’ve said</span><a href="https://www.eff.org/deeplinks/2015/04/clipper-chips-birthday-looking-back-22-years-key-escrow-failures"> <span>time</span></a><span> and</span><a href="https://www.eff.org/deeplinks/2019/11/why-adding-client-side-scanning-breaks-end-end-encryption"> <span>time again</span></a><span>,</span><a href="https://www.eff.org/deeplinks/2024/10/salt-typhoon-hack-shows-theres-no-security-backdoor-thats-only-good-guys"> <span>any backdoor built for the government</span></a><span> puts everyone at greater risk of hacking, identity theft, and fraud. It sets a dangerous precedent to demand similar data from other companies, and provides a runway for other authoritarian governments to issue comparable orders. The news of continued server-side access to users' data comes just days after the UK government announced an </span><a href="https://www.openrightsgroup.org/press-releases/id-cards-uk-risks-sleeping-walking-into-pre-crime-state/"><span>intrusive mandatory digital ID scheme</span></a><span>, framed as a measure against illegal migration.</span></p>
<p><span>A tribunal hearing was initially set to </span><a href="https://www.bbc.com/news/articles/c740r0m4mzjo"><span>take place in January 2026</span></a><span>, though it’s currently unclear if that will proceed or if the new order changes the legal process. Apple must continue to refuse these types of backdoors. Breaking end-to-end encryption for one country breaks it for everyone. These repeated attempts to weaken encryption violates</span><a href="https://www.eff.org/deeplinks/2024/03/european-court-human-rights-confirms-undermining-encryption-violates-fundamental"> <span>fundamental human rights</span></a><span> and destroys our right to private spaces.</span></p>

</div>

          </article>
    </div>
<div>
          <h2>Related Issues</h2>
            </div>

<div>
          <h2>Join EFF Lists</h2>
        
    </div>
<div>
          <h2>Related Updates</h2>
        <div>
        
  <div>
    <article role="article">
      <header>
                    <h3><a href="https://www.eff.org/deeplinks/2025/09/what-whatsapps-advanced-chat-privacy-really-does" rel="bookmark">What WhatsApp’s “Advanced Chat Privacy” Really Does</a></h3>
            
    </header>
  
  
  <div><p>In April, WhatsApp launched its “Advanced Chat Privacy” feature, which, once enabled, disables using certain AI features in chats and prevents conversations from being exported. Since its launch, an inaccurate viral post has been ping-ponging around social networks, creating confusion around what exactly it does.</p></div>

          </article>
  </div>
  <div>
    <article role="article">
      <header>
                    <h3><a href="https://www.eff.org/deeplinks/2025/07/radio-hobbyists-rejoice-good-news-lora-mesh" rel="bookmark">Radio Hobbyists, Rejoice! Good News for LoRa &amp; Mesh</a></h3>
            
    </header>
  
  
  <div><p>A set of radio devices and technologies are opening the doorway to new and revolutionary forms of communication. These have the potential to break down the over-reliance on traditional network hierarchies, and present collaborative alternatives where resistance to censorship, control and surveillance are baked into the network topography itself.</p></div>

          </article>
  </div>
  <div>
    <article role="article">
      <header>
                    <h3><a href="https://www.eff.org/deeplinks/2025/06/how-cops-can-get-your-private-online-data" rel="bookmark">How Cops Can Get Your Private Online Data</a></h3>
            
    </header>
  
  
  <div><p>Can the cops get your online data? In short, yes. There are a variety of US federal and state laws which give law enforcement powers to obtain information that you provided to online services. But, there are steps you as a user and/or as a service provider can take to...</p></div>

          </article>
  </div>
  
  <div>
    <article role="article">
      <header>
                    <h3><a href="https://www.eff.org/deeplinks/2025/06/podcast-episode-securing-journalism-data-greedy-internet" rel="bookmark">Podcast Episode: Securing Journalism on the ‘Data-Greedy’ Internet</a></h3>
            
    </header>
  
  
  <div><p>Public-interest journalism speaks truth to power, so protecting press freedom is part of protecting democracy. But what does it take to digitally secure journalists’ work in an environment where critics, hackers, oppressive regimes, and others seem to have the free press in their crosshairs? <i><a href="https://open.spotify.com/show/4UAplFpPDqE4hWlwsjplgt" target="_blank" rel="noopener noreferrer"></a> <a></a></i>...</p></div>

          </article>
  </div>
  
  
  <div>
    <article role="article">
      <header>
                    <h3><a href="https://www.eff.org/deeplinks/2025/05/back-it-back-it-let-us-begin-explain-encrypted-chat-backups" rel="bookmark">How Signal, WhatsApp, Apple, and Google Handle Encrypted Chat Backups</a></h3>
            
    </header>
  
  
  <div><p>Encrypted chat apps like Signal and WhatsApp are one of the best ways to keep your digital conversations as private as possible. But if you’re not careful with how those conversations are backed up, you can accidentally undermine your privacy. When a conversation is properly encrypted end-to-end, it means that...</p></div>

          </article>
  </div>
  
    </div>    </div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Blog Feeds (111 pts)]]></title>
            <link>https://blogfeeds.net</link>
            <guid>45475808</guid>
            <pubDate>Sat, 04 Oct 2025 19:08:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blogfeeds.net">https://blogfeeds.net</a>, See on <a href="https://news.ycombinator.com/item?id=45475808">Hacker News</a></p>
Couldn't get https://blogfeeds.net: Error: getaddrinfo ENOTFOUND blogfeeds.net]]></description>
        </item>
        <item>
            <title><![CDATA[ProofOfThought: LLM-based reasoning using Z3 theorem proving (206 pts)]]></title>
            <link>https://github.com/DebarghaG/proofofthought</link>
            <guid>45475529</guid>
            <pubDate>Sat, 04 Oct 2025 18:34:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/DebarghaG/proofofthought">https://github.com/DebarghaG/proofofthought</a>, See on <a href="https://news.ycombinator.com/item?id=45475529">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">ProofOfThought</h2><a id="user-content-proofofthought" aria-label="Permalink: ProofOfThought" href="#proofofthought"></a></p>
<p dir="auto">LLM-based reasoning using Z3 theorem proving.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick Start</h2><a id="user-content-quick-start" aria-label="Permalink: Quick Start" href="#quick-start"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="from openai import OpenAI
from z3dsl.reasoning import ProofOfThought

client = OpenAI(api_key=&quot;...&quot;)
pot = ProofOfThought(llm_client=client)

result = pot.query(&quot;Would Nancy Pelosi publicly denounce abortion?&quot;)
print(result.answer)  # False"><pre><span>from</span> <span>openai</span> <span>import</span> <span>OpenAI</span>
<span>from</span> <span>z3dsl</span>.<span>reasoning</span> <span>import</span> <span>ProofOfThought</span>

<span>client</span> <span>=</span> <span>OpenAI</span>(<span>api_key</span><span>=</span><span>"..."</span>)
<span>pot</span> <span>=</span> <span>ProofOfThought</span>(<span>llm_client</span><span>=</span><span>client</span>)

<span>result</span> <span>=</span> <span>pot</span>.<span>query</span>(<span>"Would Nancy Pelosi publicly denounce abortion?"</span>)
<span>print</span>(<span>result</span>.<span>answer</span>)  <span># False</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Batch Evaluation</h2><a id="user-content-batch-evaluation" aria-label="Permalink: Batch Evaluation" href="#batch-evaluation"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="from z3dsl.reasoning import EvaluationPipeline

evaluator = EvaluationPipeline(pot, output_dir=&quot;results/&quot;)
result = evaluator.evaluate(
    dataset=&quot;strategyqa_train.json&quot;,
    max_samples=10
)
print(f&quot;Accuracy: {result.metrics.accuracy:.2%}&quot;)"><pre><span>from</span> <span>z3dsl</span>.<span>reasoning</span> <span>import</span> <span>EvaluationPipeline</span>

<span>evaluator</span> <span>=</span> <span>EvaluationPipeline</span>(<span>pot</span>, <span>output_dir</span><span>=</span><span>"results/"</span>)
<span>result</span> <span>=</span> <span>evaluator</span>.<span>evaluate</span>(
    <span>dataset</span><span>=</span><span>"strategyqa_train.json"</span>,
    <span>max_samples</span><span>=</span><span>10</span>
)
<span>print</span>(<span>f"Accuracy: <span><span>{</span><span>result</span>.<span>metrics</span>.<span>accuracy</span>:.2%<span>}</span></span>"</span>)</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="pip install z3-solver openai scikit-learn numpy"><pre>pip install z3-solver openai scikit-learn numpy</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Architecture</h2><a id="user-content-architecture" aria-label="Permalink: Architecture" href="#architecture"></a></p>
<p dir="auto">The system has two layers:</p>
<ol dir="auto">
<li><strong>High-level API</strong> (<code>z3dsl.reasoning</code>) - Simple Python interface for reasoning tasks</li>
<li><strong>Low-level DSL</strong> (<code>z3dsl</code>) - JSON-based Z3 theorem prover interface</li>
</ol>
<p dir="auto">Most users should use the high-level API.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Examples</h2><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto">See <code>examples/</code> directory for complete examples including Azure OpenAI support.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Privacy Harm Is Harm (105 pts)]]></title>
            <link>https://www.eff.org/deeplinks/2025/10/privacy-harm-harm</link>
            <guid>45474441</guid>
            <pubDate>Sat, 04 Oct 2025 16:19:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eff.org/deeplinks/2025/10/privacy-harm-harm">https://www.eff.org/deeplinks/2025/10/privacy-harm-harm</a>, See on <a href="https://news.ycombinator.com/item?id=45474441">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article role="article">
  
  
  <div><p>Every day, corporations track our movements through license plate scanners, building detailed profiles of where we go, when we go there, and who we visit. When they do this to us in violation of data privacy laws, we’ve suffered a real harm—period. We shouldn’t need to prove we’ve suffered additional damage, such as physical injury or monetary loss, to have our day in court.</p>
<p>That's why EFF is proud to join an <a href="https://www.eff.org/document/2025-09-25-mata-v-dnr-amicus-br-aclu-eff-etc">amicus brief</a> in <a href="https://www.techspot.com/news/102042-texas-company-violated-privacy-millions-california-drivers-claims.html"><em>Mata v. Digital Recognition Network</em></a>, a lawsuit by drivers against a corporation that allegedly violated a California <a href="https://leginfo.legislature.ca.gov/faces/codes_displayText.xhtml?lawCode=CIV&amp;division=3.&amp;title=1.81.23.&amp;part=4.&amp;chapter=&amp;article=">statute</a> that regulates Automatic License Plate Readers (<a href="https://sls.eff.org/technologies/automated-license-plate-readers-alprs">ALPRs</a>). The state trial court erroneously dismissed the case, by misinterpreting this data privacy law to require proof of extra harm beyond privacy harm. The brief was written by the <a href="https://www.aclunc.org/home">ACLU of Northern California</a>, Stanford’s <a href="https://law.stanford.edu/juelsgaard-intellectual-property-and-innovation-clinic/">Juelsgaard Clinic</a>, and UC Law SF’s <a href="https://www.uclawsf.edu/center-for-constitutional-democracy/">Center for Constitutional Democracy</a>.</p>
<p>The amicus brief explains:</p>
<blockquote><p>This case implicates critical questions about whether a California privacy law, enacted to protect people from harmful surveillance, is not just words on paper, but can be an effective tool for people to protect their rights and safety.</p>
<p>California’s Constitution and laws empower people to challenge harmful surveillance at its inception without waiting for its repercussions to manifest through additional harms. A foundation for these protections is article I, section 1, which grants Californians an inalienable right to privacy.</p>
<p>People in the state have long used this constitutional right to challenge the privacy-invading collection of information by private and governmental parties, not only harms that are financial, mental, or physical. Indeed, widely understood notions of privacy harm, as well as references to harm in the California Code, also demonstrate that term’s expansive meaning.</p>
</blockquote>
<h4>What’s At Stake</h4>
<p>The defendant, Digital Recognition Network, also known as <a href="https://drndata.com/">DRN Data</a>, is a subsidiary of Motorola Solutions that provides access to a massive searchable database of ALPR data collected by private contractors. Its customers include law enforcement agencies and private companies, such as insurers, lenders, and repossession firms. DRN is the sister company to the infamous surveillance vendor <a href="https://drndata.com/blog/vigilant-solutions-bolsters-commercial-lpr-database-agreement-plate-locate/">Vigilant Solutions</a> (now Motorola Solutions), and together they have <a href="https://www.sfgate.com/bayarea/article/ICE-to-see-car-locations-through-Bay-Area-12529140.php">provided data to ICE</a> through a contract with <a href="https://www.aclunc.org/docs/DOCS_031319.pdf">Thomson Reuters</a>.</p>
<p>The consequences of weak privacy protections are already playing out across the country. This year alone, authorities in multiple states have used license plate readers to hunt for <a href="https://www.eff.org/deeplinks/2025/05/she-got-abortion-so-texas-cop-used-83000-cameras-track-her-down">people seeking reproductive healthcare</a>. Police officers have used these systems to <a href="https://local12.com/news/nation-world/police-chief-gets-caught-using-license-plate-cameras-to-track-his-ex-girlfriend-228-times-arrests-charges-probation-flock-safety-follow-stalk-new-boyfriend-broke-up-out-of-town-misuse">stalk romantic partners</a> and <a href="https://www.404media.co/california-cops-investigate-immigration-protest-with-ai-camera-system/">monitor political activists</a>. ICE has tapped into these networks to <a href="https://www.404media.co/ice-taps-into-nationwide-ai-enabled-camera-network-data-shows/">track down immigrants</a> and their families for deportation.</p>
<h4>Strong Privacy Laws</h4>
<p>This case could determine whether privacy laws have real teeth or are just words on paper. If corporations can collect your personal information with impunity—knowing that unless you can prove bodily injury or economic loss, you can’t fight back—then privacy laws lose value.</p>
<p>We need <a href="https://www.eff.org/wp/privacy-first-better-way-address-online-harms">strong data privacy laws</a>. We need a <a href="https://www.eff.org/deeplinks/2019/01/you-should-have-right-sue-companies-violate-your-privacy">private right of action</a> so when a company violates our data privacy rights, we can sue them. We need a broad definition of “harm,” so we can sue over our lost privacy rights, without having to prove collateral injury. EFF wages this battle when <a href="https://www.eff.org/deeplinks/2022/07/americans-deserve-more-current-american-data-privacy-protection-act">writing privacy laws</a>, when <a href="https://www.eff.org/deeplinks/2019/01/victory-illinois-supreme-court-protects-biometric-privacy">interpreting those laws</a>, and when asserting “standing” in <a href="https://www.eff.org/deeplinks/2025/04/our-privacy-act-lawsuit-against-doge-and-opm-why-judge-let-it-move-forward">federal</a> and <a href="https://www.eff.org/deeplinks/2022/12/california-courts-must-protect-data-privacy">state</a> courts.</p>
<p>The fight for privacy isn’t just about legal technicalities. It’s about preserving your right to move through the world without being constantly tracked, catalogued, and profiled by corporations looking to profit from your personal information.</p>
<p>You can read the amicus brief <a href="https://www.eff.org/document/2025-09-25-mata-v-dnr-amicus-br-aclu-eff-etc">here</a>.</p>

</div>

          </article>
    </div><div>
          <h2>Join EFF Lists</h2>
        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Comparison of Ada and Rust, Using Solutions to the Advent of Code (210 pts)]]></title>
            <link>https://github.com/johnperry-math/AoC2023/blob/master/More_Detailed_Comparison.md</link>
            <guid>45473861</guid>
            <pubDate>Sat, 04 Oct 2025 15:10:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/johnperry-math/AoC2023/blob/master/More_Detailed_Comparison.md">https://github.com/johnperry-math/AoC2023/blob/master/More_Detailed_Comparison.md</a>, See on <a href="https://news.ycombinator.com/item?id=45473861">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      

      <div>
        <div>
            <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_platform_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>
          GitHub Copilot

        </p><p>

        Write better code with AI
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_spark&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_spark_link_platform_navbar&quot;}" href="https://github.com/features/spark">
      
      <div>
        <p>
          GitHub Spark

            <span>
              New
            </span>
        </p><p>

        Build and deploy intelligent apps
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_models&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_models_link_platform_navbar&quot;}" href="https://github.com/features/models">
      
      <div>
        <p>
          GitHub Models

            <span>
              New
            </span>
        </p><p>

        Manage and compare prompts
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_advanced_security&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_advanced_security_link_platform_navbar&quot;}" href="https://github.com/security/advanced-security">
      
      <div>
        <p>
          GitHub Advanced Security

        </p><p>

        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_platform_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>
          Actions

        </p><p>

        Automate any workflow
      </p></div>

    
</a></li>

                  </ul>
                </div>
            <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_platform_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>
          Codespaces

        </p><p>

        Instant dev environments
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_platform_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>
          Issues

        </p><p>

        Plan and track work
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_platform_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>
          Code Review

        </p><p>

        Manage code changes
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_platform_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>
          Discussions

        </p><p>

        Collaborate outside of code
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_platform_navbar&quot;}" href="https://github.com/features/code-search">
      
      <div>
        <p>
          Code Search

        </p><p>

        Find more, search less
      </p></div>

    
</a></li>

                  </ul>
                </div>
            
        </div>

          <p>
            <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;view_all_features&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;view_all_features_link_platform_navbar&quot;}" href="https://github.com/features">
              View all features
              
</a>          </p>
      </div>
</li>


                <li>
      

      
</li>


                <li>
      

      <div>

                      <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                      <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;events_amp_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;events_amp_webinars_link_resources_navbar&quot;}" href="https://github.com/resources/events">
      Events &amp; Webinars

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ebooks_amp_whitepapers&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ebooks_amp_whitepapers_link_resources_navbar&quot;}" href="https://github.com/resources/whitepapers">
      Ebooks &amp; Whitepapers

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://github.com/partners">
      Partners

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                  </ul>
                </div>
</li>


                <li>
      

      <div>
                <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>
          GitHub Sponsors

        </p><p>

        Fund open source developers
      </p></div>

    
</a></li>

                  </ul>
                </div>
                <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>
          The ReadME Project

        </p><p>

        GitHub community articles
      </p></div>

    
</a></li>

                  </ul>
                </div>
                
            </div>
</li>


                <li>
      

      <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>
          Enterprise platform

        </p><p>

        AI-powered developer platform
      </p></div>

    
</a></li>

                  </ul>
                </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;platform&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;platform_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:johnperry-math/AoC2023" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="9mcg9mG2h3XGezkv4TG9RaK55dfvs4FdEqLyvepe3dlmIG2jkkiUVFPxlRcekZpRDb94p__IcsJ5TtCb549Wgw" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="johnperry-math/AoC2023" data-current-org="" data-current-owner="johnperry-math" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>


            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=johnperry-math%2FAoC2023" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/johnperry-math/AoC2023/blob/master/More_Detailed_Comparison.md&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="eb9594398ab6b853e6036b7b7771ad681cec367e715da013d0e06b191b7707c8" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a></p><p>
    <react-partial-anchor>
      <tool-tip id="tooltip-10a18724-2adc-47b6-9586-1fa17fe529b1" for="icon-button-4561da8c-2de3-4f30-8c21-bd5bcc42867a" popover="manual" data-direction="s" data-type="label" data-view-component="true">Appearance settings</tool-tip>

      <template data-target="react-partial-anchor.template">
        <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.2ceb2571848317ce36f7.module.css">
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/appearance-settings.6c63a6de228d6520804d.module.css">

<react-partial partial-name="appearance-settings" data-ssr="false" data-attempted-ssr="false" data-react-profiling="false">
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>


      </template>
    </react-partial-anchor>
  </p>

          </div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How I influence tech company politics as a staff software engineer (279 pts)]]></title>
            <link>https://www.seangoedecke.com/how-to-influence-politics/</link>
            <guid>45473852</guid>
            <pubDate>Sat, 04 Oct 2025 15:09:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.seangoedecke.com/how-to-influence-politics/">https://www.seangoedecke.com/how-to-influence-politics/</a>, See on <a href="https://news.ycombinator.com/item?id=45473852">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header></header><section><p>Many software engineers are fatalistic about company politics. They believe that it’s pointless to get involved, because<sup id="fnref-1"><a href="#fn-1">1</a></sup>:</p>
<ul>
<li>Technical decisions are often made for <a href="https://news.ycombinator.com/item?id=45441068">completely selfish reasons</a> that cannot be influenced by a well-meaning engineer</li>
<li>Powerful stakeholders are typically <a href="https://news.ycombinator.com/item?id=45442587">so stupid and dysfunctional</a> that it’s effectively impossible for you to identify their needs and deliver solutions to them</li>
<li>The political game being played depends on private information that software engineers do not have, so any attempt to get involved will result in just blundering around</li>
<li>Managers and executives spend most of their time playing politics, while engineers spend most of their time doing engineering, so engineers are at a serious political disadvantage before they even start</li>
</ul>
<p>The general idea here is that <strong>software engineers are simply not equipped to play the game at the same level as real political operators</strong>. This is true! It would be a terrible mistake for a software engineer to think that you ought to start scheming and plotting like you’re in <em>Game of Thrones</em>. Your schemes will be immediately uncovered and repurposed to your disadvantage and other people’s gain. Scheming takes practice and power, and neither of those things are available to software engineers.</p>
<p>It is simply a fact that software engineers are tools in the political game being played at large companies, not players in their own right. However, there are many ways to get involved in politics without scheming.</p>
<p>The easiest way is to <strong>actively work to make a high-profile project successful</strong>. This is more or less what you ought to be doing anyway, just as part of your ordinary job. If your company is heavily investing in some new project - these days, likely an AI project - using your engineering skill to make it successful<sup id="fnref-2"><a href="#fn-2">2</a></sup> is a politically advantageous move for whatever VP or executive is spearheading that project. In return, you’ll get the rewards that executives can give at tech companies: bonuses, help with promotions, and positions on future high-profile projects. I wrote about this almost a year ago in <a href="https://www.seangoedecke.com/ratchet-effects"><em>Ratchet effects determine engineer reputation at large companies</em></a>.</p>
<p>A slightly harder way (but one that gives you more control) is to <strong>make your pet idea available for an existing political campaign</strong>. Suppose you’ve wanted for a while to pull out some existing functionality into its own service. There are two ways to make that happen.</p>
<p>The hard way is to expend your own political capital: drum up support, let your manager know how important it is to you, and slowly wear doubters down until you can get the project formally approved. The easy way is to <strong>allow some executive to spend their (much greater) political capital on your project</strong>. You wait until there’s a company-wide mandate for some goal that aligns with your project (say, a push for reliability, which often happens in the wake of a high-profile incident). Then you suggest to your manager that your project might be a good fit for this. If you’ve gauged it correctly, your org will get behind your project. Not only that, but it’ll increase your political capital instead of you having to spend it.</p>
<p>Organizational interest comes in waves. When it’s reliability time, VPs are desperate to be <em>doing something</em>. They want to come up with plausible-sounding reliability projects that they can fund, because they need to go to their bosses and point at what they’re doing for reliability, but they don’t have the skillset to do it on their own. They’re typically happy to fund anything that the engineering team suggests. On the other hand, when the organization’s attention is focused somewhere else - say, on a big new product ship - the last thing they want is for engineers to spend their time on an internal reliability-focused refactor that’s invisible to customers.</p>
<p>So if you want to get something technical done in a tech company, <strong>you ought to wait for the appropriate wave</strong>. It’s a good idea to prepare multiple technical programs of work, all along different lines. Strong engineers will do some of this kind of thing as an automatic process, simply by noticing things in the normal line of work. For instance, you might have rough plans:</p>
<ul>
<li>to migrate the billing code to stored-data-updated-by-webhooks instead of cached API calls</li>
<li>to rip out the ancient hand-rolled build pipeline and replace it with Vite</li>
<li>to rewrite a crufty high-volume Python service in Golang</li>
<li>to replace the slow CMS frontend that backs your public documentation with a fast static site</li>
</ul>
<p>When executives are concerned about billing, you can offer the billing refactor as a reliability improvement. When they’re concerned about developer experience, you can suggest replacing the build pipeline. When customers are complaining about performance, you can point to the Golang rewrite as a good option. When the CEO checks the state of the public documentation and is embarrassed, you can make the case for rebuilding it as a static site. <strong>The important thing is to have a detailed, effective program of work ready to go for whatever the flavor of the month is.</strong></p>
<p>Some program of work will be funded whether you do this or not. However, if you don’t do this, you have no control over what that program is. In my experience, <strong>this is where companies make their worst technical decisions</strong>: when the political need to do <em>something</em> collides with a lack of any good ideas. When there are no good ideas, a bad idea will do, in a pinch. But nobody prefers this outcome. It’s bad for the executives, who then have to sell a disappointing technical outcome as if it were a success<sup id="fnref-4"><a href="#fn-4">4</a></sup>, and it’s bad for the engineers, who have to spend their time and effort building the wrong idea.</p>
<p>If you’re a very senior engineer, the VPs (or whoever) will quietly blame you for this. They’ll be right to! <strong>Having the right idea handy at the right time is your responsibility.</strong></p>
<p>You can view all this in two different ways. Cynically, you can read this as a suggestion to make yourself a convenient tool for the sociopaths who run your company to use in their endless internecine power struggles. Optimistically, you can read this as a suggestion to let executives set the overall priorities for the company - that’s their job, after all - and to tailor your own technical plans to fit<sup id="fnref-3"><a href="#fn-3">3</a></sup>. Either way, you’ll achieve more of your technical goals if you push the right plan at the right time.</p>
</section><p>If you liked this post, consider <a href="https://buttondown.com/seangoedecke" target="_blank">subscribing</a> to email updates about my new posts, or <a href="https://news.ycombinator.com/submitlink?u=https://www.seangoedecke.com/how-to-influence-politics/&amp;t=How%20I%20influence%20tech%20company%20politics%20as%20a%20staff%20software%20engineer" target="_blank">sharing it on Hacker News</a>.</p><p>October 4, 2025<!-- -->&nbsp;│ Tags: <a href="https://www.seangoedecke.com/tags/good%20engineers/">good engineers</a>, <a href="https://www.seangoedecke.com/tags/tech%20companies/">tech companies</a></p><hr></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Self-hosting email like it's 1984 (194 pts)]]></title>
            <link>https://maxadamski.com/blog/2025/10/email.html</link>
            <guid>45473730</guid>
            <pubDate>Sat, 04 Oct 2025 14:53:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://maxadamski.com/blog/2025/10/email.html">https://maxadamski.com/blog/2025/10/email.html</a>, See on <a href="https://news.ycombinator.com/item?id=45473730">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<h2>Introduction</h2>

<p>
Self-hosting an email server is useful for automating tasks like mailing lists, newsletters, or email verification APIs.
</p>

<p>
The elephant in the room is real-world deliverability. <b>With self-hosting you risk not receiving mail or someone missing your mail.</b> I accept this for my personal projects, but you may not. Keep this in mind.
</p>

<p>
For me the selling point of self-hosting is that it’s practically free. If you’re already self-hosting a website, installing some extra packages on your server and just a bit of your time is all that’s required. Mail takes very little storage and the software is light, so you’re unlikely to significantly change energy consumption or disk usage.
</p>

<p>
For the longest time, I perceived self-hosting email as too difficult, but after doing it for one of my projects, I can say it’s not much harder or more time-consuming than configuring some email SaaS.
</p>

<p>
I changed my goals a bit to make the setup easier though. Self-hosting a multi-user webmail looks heavy and is more involved than I was willing to get into, so I just skipped it. That way, I didn’t have to bother with user accounts, databases, or the web at all, and the task became easy.
</p>

<p>
With my config, manually sending and receiving email is possible if you SSH to your mail server and use the minimal sendmail or mailx commands, or Mutt if you like TUI. The setup is enough for me now, but I could expand it in the future, and multi-user webmail isn’t off the table anyway. Maybe I’ll even write a simple webmail package myself!
</p>


<h2>Setting up Postfix</h2>

<p>
You just need to open port 25, and install and configure <a href="https://www.postfix.org/">Postfix</a> and <a href="http://www.opendkim.org/">OpenDKIM</a> on your machine. Postfix is a complete SMTP server, and is enough for basic mail alone, but in practice you also need OpenDKIM to get your mail delivered to popular services like Gmail.
</p>

<p>
Here's my Postfix config to show how easy it is. I left the master.cf file as it was, because I’m always submitting email locally. Notice there's no mention of POP3 or IMAP. I didn't set them up, because I didn't need them.
</p>

<p>
The default alias and header check config files are practically self-explanatory (just open them and read the comments!).
</p>

<details>
<summary>/etc/postfix/main.cf</summary>
<pre>compatibility_level = 3.8
mail_owner = postfix

myhostname = mx.idx.cy
myorigin = idx.cy
mydestination = localhost, idx.cy, maxadamski.com, localchat.cc
inet_interfaces = all
inet_protocols = ipv4

# Addresses
alias_maps = hash:/etc/postfix/aliases
alias_database = $alias_maps
recipient_delimiter = +

# I'm the only user on my machine, so I send from whichever address I want.
#smtpd_sender_login_maps = hash:/etc/postfix/sender_login_maps
#smtpd_sender_restrictions = reject_authenticated_sender_login_mismatch

# spam
#in_flow_delay = 1s
header_checks = regexp:/etc/postfix/header_checks
setgid_group = postdrop

# TLS (strict)
smtpd_tls_cert_file = /etc/ssl/tls/mx.idx.cy.crt
smtpd_tls_key_file = /etc/ssl/tls/mx.idx.cy.key
smtpd_tls_security_level = encrypt
smtpd_tls_mandatory_protocols = !SSLv2, !SSLv3, !TLSv1, !TLSv1.1
smtpd_tls_protocols = !SSLv2, !SSLv3, !TLSv1, !TLSv1.1
smtp_tls_security_level = encrypt
smtp_tls_mandatory_protocols = !SSLv2, !SSLv3, !TLSv1, !TLSv1.1
smtp_tls_protocols = !SSLv2, !SSLv3, !TLSv1, !TLSv1.1

# DKIM
smtpd_milters = inet:localhost:8891
non_smtpd_milters = inet:localhost:8891
milter_default_action = accept
</pre>
</details>

<h2>TLS</h2>

<p>
You will also need an SSL certificate for encryption in transit. I hate getting and renewing SSL certificates, because the tools are bulky and automation is yet another moving part in your system (I used the lego package, with the manual DNS challenge for simplicity, but I’m not too happy about it). I won’t give you a tutorial on getting SSL certificates, but note that you don’t have to get and renew a certificate for each of your custom domains!
</p>

<p>
You just need one SSL certificate for your machine to encrypt data in transit to other SMTP servers. If you create an A record mx.example.com pointing to your email machine’s IP address, then grab a free certificate for mx.example.com from Let’s Encrypt. Then point to it in the Postfix configuration, and you’ve got transport encryption! In short, only the MX hostname needs a cert for STARTTLS to be used for encryption.
</p>

<p>
Why no certificates for your actual email domains like example.com? Because the email domain has little to do with transport encryption. TLS only secures the connection between servers. You can still set whatever you want in the From header.
</p>

<h2>DKIM, SPF, and DMARC</h2>

<p>
You should prove that your emails actually come from your domain to make your mail trustworthy and deliver to Gmail and co. That’s what DKIM is for, and fortunately it’s a one-time deal per email domain. First you generate a key pair for each domain with OpenDKIM, and then you publish the public key in a TXT record in DNS. The keys don’t expire automatically, but it’s best practice to rotate them periodically. My config uses a naming scheme that allows smooth rotation, but it doesn’t complicate things if you skip it.
</p>

<p>
There are two more TXT records that you need to publish in DNS: the SPF and DMARC records. You say which hosts are allowed to send mail from your email domain, and give instructions to other email servers about what to do with mail that fails DKIM checks. In my case I told others to reject mail that can’t be verified as coming from my domains, and send reports to my postmaster address.
</p>

<p>
Take a look at my OpenDKIM config to understand how things come together.
</p>

<details>
<summary>/etc/opendkim.conf</summary>
<pre>UserID             opendkim:opendkim
Socket             inet:8891@localhost
KeyTable           refile:/etc/opendkim/KeyTable
SigningTable       refile:/etc/opendkim/SigningTable
ExternalIgnoreList refile:/etc/opendkim/TrustedHosts
InternalHosts      refile:/etc/opendkim/TrustedHosts

Canonicalization   relaxed/relaxed
ReportAddress      postmaster@idx.cy
SendReports        no

LogWhy             yes
Syslog             yes
SyslogSuccess      no
</pre>
</details>

<details>
<summary>/etc/opendkim/KeyTable</summary>
<pre>key1._domainkey.idx.cy         idx.cy:key1:/etc/opendkim/keys/idx.cy/key1.private
key1._domainkey.maxadamski.com maxadamski.com:key1:/etc/opendkim/keys/maxadamski.com/key1.private
key1._domainkey.localchat.cc   localchat.cc:key1:/etc/opendkim/keys/localchat.cc/key1.private
</pre>
</details>

<details>
<summary>/etc/opendkim/SigningTable</summary>
<pre>*@idx.cy         key1._domainkey.idx.cy
*@maxadamski.com key1._domainkey.maxadamski.com
*@localchat.cc   key1._domainkey.localchat.cc
</pre>
</details>

<details>
<summary>/etc/opendkim/TrustedHosts</summary>
<pre>127.0.0.1
localhost
</pre>
</details>

<p>
I generate DKIM keys with the following command:
</p>

<pre>opendkim-genkey -D /etc/opendkim/keys/example.com -d example.com -s key1
</pre>

<p>
And for each email domain I have the following records in DNS:
</p>

<div>
<table>
  <thead>
    <tr><th>Type</th><th>Name</th><th>Value</th></tr>
  </thead>
  <tbody>
    <tr><td>MX</td><td>example.com</td><td>mx.idx.cy</td></tr>
    <tr><td>TXT</td><td>example.com</td><td>v=spf1 mx a -all</td></tr>
    <tr><td>TXT</td><td>key1._domainkey</td><td>v=DKIM1; k=rsa; s=email; p=&lt;public-key&gt;</td></tr>
    <tr><td>TXT</td><td>_dmarc</td><td>v=DMARC1; p=reject; rua=mailto:postmaster@idx.cy</td></tr>
  </tbody>
</table>
</div>

<h2>Reverse DNS</h2>

<p>
One more thing about email trust. I've read that reverse DNS (PTR record) will boost the reputation of your email server. The thing is that your ISP has to set it up, and I suspect my ISP to reply with a polite "no", so I didn't do it yet. As you'll see in the next section, my email gets delivered to Gmail just fine. GMX and outlook.com also didn't mark my mail as spam. I also managed to sign up to reddit.com using my idx.cy email (I received the verification code without delay).
</p>

<p>
However, if you want wide deliverability, PTR isn't optional.
</p>

<h2>Testing with Gmail</h2>

<p>To try it out, let's send a test mail to Gmail with the sendmail command:</p>

<pre>sendmail -vt &lt; test.mail</pre>

<details>
<summary>test.mail</summary>
<pre>Content-Type: text/html
From: max@idx.cy
To: myaddress@gmail.com
Subject: DKIM test
Test message from idx.cy!
</pre>
</details>

<p>I got the mail instantly and Gmail confirmed TLS encryption.</p>

<img src="https://maxadamski.com/blog/2025/10/test-mail-1.png">

<p>Click "Show original" in Gmail to see the raw mail. There's lots of text in the headers, so let's just focus on passing SPF, DKIM, and DMARC :)</p>

<img src="https://maxadamski.com/blog/2025/10/test-mail-2.png">

<p>You'll also get a mail with a report because of the <tt>-v</tt> option. I receive mail with Heirloom Mail like this:</p>

<pre>You have new mail in /var/mail/max
fool ~ | mailx
Heirloom Mail version 12.5 7/5/10.  Type ? for help.
"/var/mail/max": 1 message 1 new
&gt;N  1 Mail Delivery System  Sat Oct  4 15:40  74/2437  "Mail Delivery Status Report"
</pre>

<p>I use the <tt>p</tt> command to print the mail.</p>

<details>
<summary>&amp; p</summary>
<pre>Message  1:
From MAILER-DAEMON  Sat Oct  4 15:40:50 2025
X-Original-To: max@idx.cy
Delivered-To: max@idx.cy
Date: Sat,  4 Oct 2025 15:40:50 +0200 (CEST)
From: Mail Delivery System &lt;MAILER-DAEMON@idx.cy&gt;
Subject: Mail Delivery Status Report
To: max@idx.cy
Auto-Submitted: auto-replied
Content-Type: multipart/report; report-type=delivery-status;
	boundary="3C311BFF8D.1759585250/mx.idx.cy"
Status: R

Part 1:
Content-Description: Notification
Content-Type: text/plain; charset=utf-8

This is the mail system at host mx.idx.cy.

Enclosed is the mail delivery report that you requested.

                   The mail system

&lt;myaddress@gmail.com&gt;: delivery via
    gmail-smtp-in.l.google.com[X.X.X.X]:25: 250 2.0.0 OK  1759585250
    4fb4d7f45d1cf-6393b6ba951si3187039a12.40 - gsmtp
</pre>
</details>

<p>Great, everything is working! And I'm feeling the spirit of the 80s thanks to mailx :)</p>

<p>
If something isn't working for you, please double-check your DNS records, and triple-check that TLS certificates are readable by the Postfix user, and that DKIM keys are readable by the OpenDKIM user. Postfix and OpenDKIM logs will also be useful. The OpenDKIM config file is especially unforgiving of typos, so watch out for small mistakes!
</p>

<h2>Next steps</h2>

<p>
In my next post on email, I'll show you how to use Python to build useful email applications. Thanks for reading!
</p>

<p>
Btw, if you notice anything about my config (or just want to share some thoughts) just email me at <a href="mailto:max@idx.cy">max@idx.cy</a> :)
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Flock's gunshot detection microphones will start listening for human voices (295 pts)]]></title>
            <link>https://www.eff.org/deeplinks/2025/10/flocks-gunshot-detection-microphones-will-start-listening-human-voices</link>
            <guid>45473698</guid>
            <pubDate>Sat, 04 Oct 2025 14:49:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eff.org/deeplinks/2025/10/flocks-gunshot-detection-microphones-will-start-listening-human-voices">https://www.eff.org/deeplinks/2025/10/flocks-gunshot-detection-microphones-will-start-listening-human-voices</a>, See on <a href="https://news.ycombinator.com/item?id=45473698">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article role="article">
  
  
  <div><p><span>Flock Safety, the police technology company most notable for their extensive network of </span><a href="https://sls.eff.org/technologies/automated-license-plate-readers-alprs"><span>automated license plate readers</span></a><span> spread throughout the United States, is rolling out a new and troubling product that may create headaches for the cities that adopt it: detection of “human distress” via audio. As part of their suite of technologies, Flock has been pushing </span><a href="https://www.flocksafety.com/webinar/introducing-raven"><span>Raven</span></a><span>, their version of </span><a href="https://sls.eff.org/technologies/gunshot-detection"><span>acoustic gunshot detection</span></a><span>. These devices capture sounds in public places and use machine learning to try to identify gunshots and then alert police—but EFF has </span><a href="https://www.eff.org/deeplinks/2021/07/its-time-police-stop-using-shotspotter"><span>long warned</span></a><span> that they are also high powered microphones parked above densely-populated city streets. Cities now have one more reason to follow the lead of </span><a href="https://www.kvue.com/article/news/local/austin-license-plate-readers-ends-privacy-concerns/269-4dc64690-c6c0-4ace-a009-fd8a13f69113"><span>many other municipalities</span></a><span> and cancel their Flock contracts, before this new feature causes civil liberties harms to residents and headaches for cities.&nbsp;</span></p>
<p><span>In marketing materials, Flock has been touting new features to their Raven product—including the ability of the device to alert police based on sounds, including “distress.” The </span><a href="https://www.flocksafety.com/distress-early-access"><span>online ad</span></a><span> for the product, which allows cities to apply for early access to the technology, shows the image of police getting an alert for “screaming.”&nbsp;</span></p>
<p><span>It’s unclear how this technology works. For acoustic gunshot detection, generally the microphones are looking for sounds that would signify gunshots (though in practice they often mistake car backfires or fireworks for gunshots). Flock needs to come forward now with an explanation of exactly how their new technology functions. It is unclear how these devices will interact with state “</span><a href="https://www.mwl-law.com/wp-content/uploads/2018/02/RECORDING-CONVERSATIONS-CHART.pdf"><span>eavesdropping</span></a><span>” laws that limit listening to or recording the private conversations that often take place in public.&nbsp;</span></p>
<p><span>Flock is no stranger to causing legal challenges for the cities and states that adopt their products. In Illinois, Flock was </span><a href="https://www.25newsnow.com/2025/08/28/hundreds-police-departments-use-camera-company-accused-breaking-state-law/"><span>accused of violating state law</span></a><span> by allowing Immigration and Customs Enforcement (ICE), a federal agency, access to license plate reader data taken within the state. That’s not all. In 2023, a North Carolina judge halted the installation of Flock cameras statewide for </span><a href="https://www.govtech.com/public-safety/north-carolina-judge-halts-alpr-deployment-over-licensing"><span>operating in the state without a license</span></a><span>. When the city of Evanston, Illinois recently canceled its contract with Flock, it ordered the company to take down their license plate readers–only for Flock to </span><a href="https://evanstonroundtable.com/2025/09/25/city-covers-up-flock-cameras-while-waiting-for-removal/"><span>mysteriously reinstall</span></a><span> them a few days later. This city has now sent Flock a cease and desist order and in the meantime, has put </span><a href="https://evanstonroundtable.com/2025/09/25/city-covers-up-flock-cameras-while-waiting-for-removal/"><span>black tape over the cameras</span></a><span>. For some, the technology isn’t worth its mounting downsides. As one </span><a href="https://derekeder.com/blog/why-i-voted-to-cancel-flock"><span>Illinois village trustee wrote </span></a><span>while explaining his vote to cancel the city’s contract with Flock, “According to our own Civilian Police Oversight Commission, over 99% of Flock alerts do not result in any police action.”</span></p>
<p><br><span>Gunshot detection technology is dangerous enough as it is—police showing up to alerts they think are gunfire only to find children playing with fireworks is a recipe for innocent people to get hurt. This isn’t hypothetical: in Chicago a </span><a href="https://www.eff.org/deeplinks/2024/03/responding-shotspotter-police-shoot-child-lighting-fireworks"><span>child really was shot at by police</span></a><span> who thought they were responding to a shooting thanks to a ShotSpotter alert. Introducing a new feature that allows these pre-installed Raven microphones all over cities to begin listening for human voices in distress is likely to open up a whole new can of unforeseen legal, civil liberties, and even bodily safety consequences. </span></p>

</div>

          </article>
    </div><div>
          <h2>Join EFF Lists</h2>
        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Circular Financing: Does Nvidia's $110B Bet Echo the Telecom Bubble? (215 pts)]]></title>
            <link>https://tomtunguz.com/nvidia_nortel_vendor_financing_comparison/</link>
            <guid>45473033</guid>
            <pubDate>Sat, 04 Oct 2025 13:06:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tomtunguz.com/nvidia_nortel_vendor_financing_comparison/">https://tomtunguz.com/nvidia_nortel_vendor_financing_comparison/</a>, See on <a href="https://news.ycombinator.com/item?id=45473033">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
            

            <div>
                <p>When Nvidia announced a $100 billion investment commitment to OpenAI<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup> in September 2025 , analysts immediately drew comparisons to the telecom bubble. The concern : is this vendor financing , where a supplier lends money to customers so they can buy the supplier’s products , a harbinger of another spectacular collapse?</p>
<p>American tech companies will spend <strong>$300-400 billion</strong> on AI infrastructure in 2025<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup><sup>,</sup><sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup> , exceeding any prior single-year corporate infrastructure investment in nominal dollars.<sup id="fnref1:3"><a href="#fn:3" role="doc-noteref">3</a></sup> David Cahn estimates the revenue gap has grown to <strong>$600 billion</strong><sup id="fnref:4"><a href="#fn:4" role="doc-noteref">4</a></sup>.</p>
<p>I analyzed the numbers. The similarities are striking , but the differences matter.</p>
<h2 id="the-lucent-playbook">The Lucent Playbook</h2>
<p><a href="https://res.cloudinary.com/dzawgnnlr/image/upload/q_auto,f_auto/pt1apmgovtkb2aegncym" target="_blank"><img src="https://res.cloudinary.com/dzawgnnlr/image/upload/w_1512,h_850,c_fill,g_auto,q_auto,f_auto/pt1apmgovtkb2aegncym" alt="Lucent vs Nvidia Revenue Comparison 1996-2024" width="756" height="425" loading="lazy"></a></p>
<!--[if mso | IE]>
  </v:textbox>
</v:rect>
<![endif]-->
<p><em>Lucent’s revenue peaked at $37.92B in 1999 , crashed 69% to $11.80B by 2002 , never recovered. Merged with Alcatel in 2006.</em></p>
<p>In 1999 , Lucent Technologies reached $37.92 billion in revenue at the peak of the dot-com bubble. <sup id="fnref:5"><a href="#fn:5" role="doc-noteref">5</a></sup> Lucent was the #1 North American telecommunications equipment manufacturer with 157,000 employees &amp; dominated markets alongside Nortel Networks (combined 53% optical transport market share). <sup id="fnref:6"><a href="#fn:6" role="doc-noteref">6</a></sup> Behind the scenes , equipment makers extended billions in vendor financing to telecom customers. Lucent committed <strong>$8.1B</strong><sup id="fnref:7"><a href="#fn:7" role="doc-noteref">7</a></sup> , Nortel extended $3.1B with $1.4B outstanding , &amp; Cisco promised $2.4B in customer loans.<sup id="fnref:8"><a href="#fn:8" role="doc-noteref">8</a></sup></p>
<p>The strategy seemed brilliant : lend money to cash-strapped telecom companies so they could buy your equipment. Everyone wins—until the merry-go-round stops.</p>
<p>When the bubble burst :</p>
<ul>
<li>47 Competitive Local Exchange Carriers (CLECs) bankrupted 2000-2003 , including Covad , Focal Communications , McLeod , Northpoint , Winstar <sup id="fnref:9"><a href="#fn:9" role="doc-noteref">9</a></sup><sup>,</sup><sup id="fnref:10"><a href="#fn:10" role="doc-noteref">10</a></sup>
<ul>
<li>Why they failed : $60B overbuild 1996-2001 , market saturation from identical business models , sudden funding collapse (Jan 2001 : billions available , Apr 2001 : zero)<sup id="fnref:11"><a href="#fn:11" role="doc-noteref">11</a></sup></li>
</ul>
</li>
<li>33-80% of vendor loan portfolios went uncollected as customers failed &amp; equipment became worthless<sup id="fnref:12"><a href="#fn:12" role="doc-noteref">12</a></sup></li>
<li>Fiber networks were using less than 0.002% of available capacity , with potential for 60,000x speed increases. <sup id="fnref:13"><a href="#fn:13" role="doc-noteref">13</a></sup> It was just too early.</li>
</ul>
<h2 id="nvidias-playbook">Nvidia’s Playbook</h2>
<p>Fast forward to 2025. Nvidia’s vendor financing strategy totals <strong>$110 billion in direct investments</strong> plus another <strong>$15+ billion in GPU-backed debt</strong>. The largest commitment is $100B to OpenAI (September 2025)<sup id="fnref1:1"><a href="#fn:1" role="doc-noteref">1</a></sup><sup>,</sup><sup id="fnref:14"><a href="#fn:14" role="doc-noteref">14</a></sup> , structured as 10 tranches of $10B each tied to infrastructure deployment milestones. The first $10B was valued at a $500B OpenAI valuation , with subsequent tranches priced at prevailing valuations. Payment comes via lease arrangements , not upfront GPU purchases. OpenAI CFO Sarah Friar confirmed : “Most of the money will go back to Nvidia”<sup id="fnref1:14"><a href="#fn:14" role="doc-noteref">14</a></sup></p>
<p>Beyond OpenAI , Nvidia holds a $3B stake in CoreWeave<sup id="fnref:15"><a href="#fn:15" role="doc-noteref">15</a></sup> , a company that has spent $7.5B on Nvidia GPUs , &amp; $3.7B in other AI startup investments<sup id="fnref:16"><a href="#fn:16" role="doc-noteref">16</a></sup> through NVentures.</p>
<p>The GPU-backed debt market adds another layer. CoreWeave alone carries $10.45B in debt using GPUs as collateral<sup id="fnref:17"><a href="#fn:17" role="doc-noteref">17</a></sup>. An additional $10B+ in GPU-backed debt has emerged for “Neoclouds” including Lambda Labs ($500M GPU-backed loan)<sup id="fnref:18"><a href="#fn:18" role="doc-noteref">18</a></sup><sup>,</sup><sup id="fnref:19"><a href="#fn:19" role="doc-noteref">19</a></sup>.</p>
<p>Lucent in 1999-2000 had vendor financing commitments of $8.1B (20% of $41.4B revenue). Nvidia’s direct investments total 85% of annual revenue ($110B against $130B). Nvidia’s exposure is 4x larger relative to revenue than Lucent’s official outstanding loans , though Lucent’s off-balance-sheet guarantees masked the true exposure.</p>
<h2 id="the-numbers-side-by-side-2024-dollars">The Numbers Side-by-Side (2024 Dollars)</h2>
<table>
<thead>
<tr>
<th>Metric</th>
<th>Lucent (FY2000, inflation-adj.)</th>
<th>Nvidia (2025)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vendor financing</td>
<td>$15B</td>
<td>$110B</td>
</tr>
<tr>
<td>Operating cash flow</td>
<td>$304M<sup id="fnref:20"><a href="#fn:20" role="doc-noteref">20</a></sup></td>
<td>$15.4B (Q2 FY26)</td>
</tr>
<tr>
<td>Revenue</td>
<td>$34B</td>
<td>$130B</td>
</tr>
<tr>
<td>Top 2 Customers represent</td>
<td>23%<sup id="fnref:21"><a href="#fn:21" role="doc-noteref">21</a></sup></td>
<td>39%</td>
</tr>
</tbody>
</table>
<h2 id="the-reasons-to-be-wary">The Reasons to be Wary</h2>
<h3 id="1-the-ai-customer-base-is-more-concentrated">1. The AI Customer Base is More Concentrated</h3>
<p>Lucent’s top 2 customers—AT&amp;T at 10% &amp; Verizon at 13%—accounted for 23% of revenue in FY2000.<sup id="fnref1:21"><a href="#fn:21" role="doc-noteref">21</a></sup> The Regional Bell Operating Companies , or RBOCs , the seven “Baby Bells” created from AT&amp;T’s 1984 breakup , were also major customers. Nvidia has 39% of revenue from just 2 customers &amp; 46% from 4 customers , nearly double Lucent’s concentration. 88% of Nvidia’s revenue comes from data centers.</p>
<h3 id="2-gpu-backed-debt-is-new">2. GPU-Backed Debt Is New</h3>
<p>The new $10B+ GPU-backed debt market is built on the assumption that GPUs will hold their value over 4-6 years. GPU-backed loans carry ~14% interest rates<sup id="fnref:22"><a href="#fn:22" role="doc-noteref">22</a></sup> , triple investment-grade corporate debt.<sup id="fnref:23"><a href="#fn:23" role="doc-noteref">23</a></sup></p>
<p>How Depreciation Schedules Changed :</p>
<table>
<thead>
<tr>
<th>Company</th>
<th>Pre-2020</th>
<th>2020-2021</th>
<th>2022-2023</th>
<th>2024-2025</th>
<th>Change</th>
</tr>
</thead>
<tbody>
<tr>
<td>Amazon<sup id="fnref:24"><a href="#fn:24" role="doc-noteref">24</a></sup></td>
<td>3 years</td>
<td>4 years (2020) → 5 years (2021)</td>
<td>5 years</td>
<td>6 years (2024) → 5 years (2025)</td>
<td>First reversal</td>
</tr>
<tr>
<td>Microsoft<sup id="fnref:25"><a href="#fn:25" role="doc-noteref">25</a></sup></td>
<td>~3 years</td>
<td>4 years</td>
<td>6 years</td>
<td>6 years</td>
<td>+100%</td>
</tr>
<tr>
<td>Google<sup id="fnref:26"><a href="#fn:26" role="doc-noteref">26</a></sup></td>
<td>~3 years</td>
<td>4 years</td>
<td>6 years</td>
<td>6 years</td>
<td>+100%</td>
</tr>
<tr>
<td>Meta<sup id="fnref:27"><a href="#fn:27" role="doc-noteref">27</a></sup></td>
<td>~3 years</td>
<td>4 years</td>
<td>4.5 years → 5 years</td>
<td>5.5 years</td>
<td>+83%</td>
</tr>
<tr>
<td>CoreWeave<sup id="fnref:28"><a href="#fn:28" role="doc-noteref">28</a></sup></td>
<td>N/A</td>
<td>N/A</td>
<td>4 years → 6 years (Jan 2023)</td>
<td>6 years</td>
<td>+50% (GPUs)</td>
</tr>
<tr>
<td>Nebius<sup id="fnref:29"><a href="#fn:29" role="doc-noteref">29</a></sup></td>
<td>N/A</td>
<td>N/A</td>
<td>4 years</td>
<td>4 years</td>
<td>Industry standard</td>
</tr>
</tbody>
</table>
<p>Amazon’s 2025 reversal (6 → 5 years) is the first major pullback.</p>
<p>CPUs historically have 5-10 years of useful life , while GPUs in AI datacenters last 1-3 years in practice , despite 6-year accounting assumptions.<sup id="fnref:30"><a href="#fn:30" role="doc-noteref">30</a></sup><sup>,</sup><sup id="fnref:31"><a href="#fn:31" role="doc-noteref">31</a></sup> Evidence from Google architects shows GPUs at 60-70% utilization survive 1-2 years , with 3 years maximum.<sup id="fnref1:31"><a href="#fn:31" role="doc-noteref">31</a></sup> Meta’s Llama 3 training experienced 9% annual GPU failure rates , suggesting 27% failure over 3 years.<sup id="fnref2:31"><a href="#fn:31" role="doc-noteref">31</a></sup></p>
<p>Cerno Capital raises the question : “Are these policies a reflection of genuine economic &amp; technological realities? Or are these policies a lever by which hyperscalers are enhancing the optics of their investment programs amid rising investor concerns?”<sup id="fnref:32"><a href="#fn:32" role="doc-noteref">32</a></sup></p>
<h3 id="4-the-use-of-spvs">4. The Use of SPVs</h3>
<p>Tech companies use Special Purpose Vehicles (SPVs) to finance AI datacenter construction. A hyperscaler like Meta partners with a private equity firm like Apollo , contributing capital to a separate legal entity that builds &amp; owns the datacenter.</p>
<p>As investor Paul Kedrosky explains : “I have a stake in it as Meta. Some giant private debt provider has a stake in it. The datacenter is under my control. But I don’t own it, so you don’t get to roll it back into my balance sheet.”<sup id="fnref1:2"><a href="#fn:2" role="doc-noteref">2</a></sup>*</p>
<p><strong>The Structure</strong></p>
<ol>
<li><strong>Entity Creation</strong> : Hyperscaler &amp; PE firm form separate legal entity (SPV)</li>
<li><strong>Capital Structure</strong> : Typically 10-30% equity, 70-90% debt from private credit markets</li>
<li><strong>Lease Agreement</strong> : SPV leases capacity back to hyperscaler</li>
<li><strong>Balance Sheet Treatment</strong> : SPV debt doesn’t appear on hyperscaler’s balance sheet</li>
</ol>
<p>The hyperscaler maintains operational control through long-term lease agreements. Because it doesn’t directly own the SPV , the debt remains off its balance sheet under current accounting standards.</p>
<p>The appeal is straightforward. “I don’t want the credit rating agencies to look at what I’m spending. I don’t want investors to roll it up into my income statement.”<sup id="fnref2:2"><a href="#fn:2" role="doc-noteref">2</a></sup>*</p>
<p><strong>Market Scale</strong></p>
<p>American tech companies are projected to spend $300-400 billion on AI infrastructure in 2025. Hyperscaler capital expenditures have reached approximately 50% of operating income<sup id="fnref3:2"><a href="#fn:2" role="doc-noteref">2</a></sup>, levels historically associated with government infrastructure buildouts rather than technology companies.</p>
<p><strong>Where the Risk Sits</strong></p>
<p>Datacenter assets now represent 10-22% of major REIT portfolios<sup id="fnref4:2"><a href="#fn:2" role="doc-noteref">2</a></sup> , up from near zero two years ago. The thin equity layer (10-30%) means if datacenter utilization falls short of projections or if GPUs depreciate faster than projected , equity holders face losses before debt holders experience impairment.</p>
<p><em>*Quotes lightly edited for clarity &amp; brevity</em></p>
<h3 id="5-custom-silicon-threat">5. Custom Silicon Threat</h3>
<p>Hyperscalers are building their own AI accelerators to reduce Nvidia dependence. Microsoft aims to use “mainly Microsoft silicon” , specifically Maia accelerators , in datacenters.<sup id="fnref:33"><a href="#fn:33" role="doc-noteref">33</a></sup> Google deploys <a href="https://cloud.google.com/tpu">TPUs</a> , Amazon builds <a href="https://aws.amazon.com/ai/machine-learning/trainium/">Trainium</a> &amp; <a href="https://aws.amazon.com/ai/machine-learning/inferentia/">Inferentia</a> chips , &amp; Meta develops <a href="https://ai.meta.com/blog/next-generation-meta-training-inference-accelerator-AI-MTIA/">MTIA</a> processors. If customers shift to in-house silicon , CoreWeave’s GPU collateral value &amp; Nvidia’s vendor financing become exposure to customers building competitive alternatives.</p>
<h2 id="nvidia-isnt-lucent--2025-isnt-2000">Nvidia Isn’t Lucent &amp; 2025 Isn’t 2000</h2>
<ul>
<li><strong>Accounting</strong> : Lucent manipulated $1.148B in revenue , SEC charged 10 executives with fraud<sup id="fnref1:5"><a href="#fn:5" role="doc-noteref">5</a></sup> ; Nvidia shows no evidence of manipulation , audited by PwC , Aa3 rated<sup id="fnref:34"><a href="#fn:34" role="doc-noteref">34</a></sup></li>
<li><strong>Cash flow</strong> : Lucent lent $8.1B while cash flow lagged profitability &amp; receivables exploded $5.4B (1998-1999)<sup id="fnref1:20"><a href="#fn:20" role="doc-noteref">20</a></sup> ; Nvidia lends with $50B+ annual operating cash flow &amp; $46.2B net cash<sup id="fnref:35"><a href="#fn:35" role="doc-noteref">35</a></sup></li>
<li><strong>Credit rating</strong> : Lucent downgraded to A3 (December 2000)<sup id="fnref:36"><a href="#fn:36" role="doc-noteref">36</a></sup> ; Nvidia upgraded to Aa3 (March 2024)<sup id="fnref1:34"><a href="#fn:34" role="doc-noteref">34</a></sup></li>
<li><strong>Customer base</strong> : Lucent’s customers were leveraged CLECs burning capital ; Nvidia’s top 4 customers generated $451B in operating cash flow in 2024 (Microsoft $119B , Alphabet $125B , Amazon $116B , Meta $91.3B)<sup id="fnref:37"><a href="#fn:37" role="doc-noteref">37</a></sup></li>
<li><strong>Capacity</strong> : Fiber networks used &lt;0.002% of capacity in 2000<sup id="fnref1:13"><a href="#fn:13" role="doc-noteref">13</a></sup> ; Microsoft &amp; AWS report AI capacity constraints in 2025<sup id="fnref:38"><a href="#fn:38" role="doc-noteref">38</a></sup><sup>,</sup><sup id="fnref:39"><a href="#fn:39" role="doc-noteref">39</a></sup></li>
</ul>
<h2 id="what-im-watching">What I’m Watching</h2>
<p>Is AI demand real (like cloud computing) or speculative (like dot-com fiber)?</p>
<p>Here’s what I’m watching :</p>
<ol>
<li><strong>GPU utilization rates</strong> : Are data centers actually using the chips or just stockpiling?</li>
<li><strong>OpenAI’s monetization</strong> : Can they generate enough revenue to justify the buildout?</li>
<li><strong>Debt defaults</strong> : Any cracks in the $15B GPU-backed debt market?</li>
<li><strong>AR trends</strong> : AR improved from 68% (FY24) to 30% (Q2 FY26) , but still watch for deterioration</li>
<li><strong>Customer adds</strong> : Are new customers emerging , or is Nvidia dependent on the same 2-4 hyperscalers?</li>
<li><strong>Custom silicon threat</strong> : Microsoft developing Maia accelerators , aiming to use “mainly Microsoft silicon in the data center.”<sup id="fnref1:33"><a href="#fn:33" role="doc-noteref">33</a></sup> If hyperscalers shift to in-house chips , Nvidia’s vendor financing becomes exposure to customers building competitive alternatives.</li>
<li><strong>Vendor consolidation</strong> : Many companies are in a period of experimentation trying 2-3 competing vendors. Those experimental budgets may thin with time , reducing overall spend.</li>
</ol>
<p>AI is already broadly deployed—40% of US employees used AI at work by September 2025 , double the 20% rate in 2023.<sup id="fnref:40"><a href="#fn:40" role="doc-noteref">40</a></sup> Questions persist about effectiveness : the oft cited MIT study found 95% of AI pilots failed to deliver measurable P&amp;L impact , primarily due to poor integration rather than technical failures.<sup id="fnref:41"><a href="#fn:41" role="doc-noteref">41</a></sup></p>
<p>Yet the pace of improvement is tremendous. Labor market data shows wages rising twice as fast in AI-exposed industries , &amp; workers using AI boost performance up to 40%.<sup id="fnref1:40"><a href="#fn:40" role="doc-noteref">40</a></sup> Many of Nvidia’s customers are profitable &amp; sophisticated hyperscalers—Microsoft , Google , Amazon , Meta—generating $451B in operating cash flow in 2024 , with tremendous pull from their own enterprise customers demanding AI. OpenAI is not profitable , reporting a $4.7B loss in H1 2025 on $4.3B revenue , though nearly half the loss is stock-based compensation.<sup id="fnref:42"><a href="#fn:42" role="doc-noteref">42</a></sup></p>
<p>Unlike the telecom bubble , where demand was speculative &amp; customers burned cash , this merry-go-round has paying riders.</p>
<hr>
<h2 id="coda--lucents-accounting-fraud">Coda : Lucent’s Accounting Fraud</h2>
<p>Behind the vendor financing disaster was systematic accounting fraud. The SEC charged Lucent with manipulating $1.148 billion in revenue &amp; $470 million in pre-tax income during fiscal year 2000. <sup id="fnref2:5"><a href="#fn:5" role="doc-noteref">5</a></sup> The fraud involved multiple schemes :</p>
<p>Channel Stuffing : Lucent sent $452 million in equipment to distributors but counted it as revenue before the distributors sold to end customers.<sup id="fnref3:5"><a href="#fn:5" role="doc-noteref">5</a></sup> This created phantom sales.</p>
<p>Side Agreements : Lucent executives entered secret agreements with distributors granting them return rights &amp; privileges beyond their distribution contracts , making it improper to recognize revenue.<sup id="fnref4:5"><a href="#fn:5" role="doc-noteref">5</a></sup> These side deals were hidden from auditors.</p>
<p>Reserve Manipulation : Lucent improperly established &amp; maintained excess reserves to smooth earnings , violating GAAP.<sup id="fnref5:5"><a href="#fn:5" role="doc-noteref">5</a></sup></p>
<p>The SEC charged 10 Lucent executives with securities fraud.<sup id="fnref6:5"><a href="#fn:5" role="doc-noteref">5</a></sup> The company paid a $25 million fine—the largest ever for failing to cooperate with an SEC investigation.<sup id="fnref7:5"><a href="#fn:5" role="doc-noteref">5</a></sup> The accounting manipulation masked deteriorating fundamentals until too late.</p>
<p>The WinStar Collapse : Lucent committed $2 billion in vendor financing to WinStar Communications , a CLEC. When WinStar struggled , Lucent refused a final $90 million loan extension. WinStar filed bankruptcy. Lucent wrote off $700 million in bad debts.<sup id="fnref:43"><a href="#fn:43" role="doc-noteref">43</a></sup> This pattern repeated across customer defaults : Lucent made provisions for bad debts of $2.2 billion (2001) &amp; $1.3 billion (2002)—a total of $3.5 billion in customer loan losses.<sup id="fnref1:43"><a href="#fn:43" role="doc-noteref">43</a></sup></p>
<hr>
<h2 id="references">References</h2>


            </div>
            
            
        </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How functional programming shaped and twisted front end development (119 pts)]]></title>
            <link>https://alfy.blog/2025/10/04/how-functional-programming-shaped-modern-frontend.html</link>
            <guid>45473019</guid>
            <pubDate>Sat, 04 Oct 2025 13:04:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://alfy.blog/2025/10/04/how-functional-programming-shaped-modern-frontend.html">https://alfy.blog/2025/10/04/how-functional-programming-shaped-modern-frontend.html</a>, See on <a href="https://news.ycombinator.com/item?id=45473019">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>A friend called me last week. Someone who’d built web applications back for a long time before moving exclusively to backend and infra work. He’d just opened a modern React codebase for the first time in over a decade.</p>

<p>“What the hell is this?” he asked. “What are all these generated class names? Did we just… cancel the cascade? Who made the web work this way?”</p>

<p>I laughed, but his confusion cut deeper than he realized. He remembered a web where CSS cascaded naturally, where the DOM was something you worked <em>with</em>, where the browser handled routing, forms, and events without twenty abstractions in between. To him, our modern frontend stack looked like we’d declared war on the platform itself.</p>

<p>He asked me to explain how we got here. That conversation became this essay.</p>

<p><strong>A disclaimer before we begin</strong>: This is one perspective, shaped by having lived through the first browser war. I applied <code>pngfix.js</code> to make 24-bit PNGs work in IE6. I debugged hasLayout bugs at 2 AM. I wrote JavaScript when you couldn’t trust <code>addEventListener</code> to work the same way across browsers. I watched jQuery become necessary, then indispensable, then legacy. I might be wrong about some of this. My perspective is biased for sure, but it also comes with the memory that the web didn’t need constant reinvention to be useful.</p>

<h2 id="introduction">Introduction</h2>

<p>There’s a strange irony at the heart of modern web development. The web was born from documents, hyperlinks, and a cascading stylesheet language. It was always messy, mutable, and gloriously side-effectful. Yet over the past decade, our most influential frontend tools have been shaped by engineers chasing functional programming purity: immutability, determinism, and the elimination of side effects.</p>

<p>This pursuit gave us powerful abstractions. React taught us to think in components. Redux made state changes traceable. TypeScript brought compile-time safety to a dynamic language. But it also led us down a strange path. A one where we fought against the platform instead of embracing it. We rebuilt the browser’s native capabilities in JavaScript, added layers of indirection to “protect” ourselves from the DOM, and convinced ourselves that the web’s inherent messiness was a problem to solve rather than a feature to understand.</p>

<p>The question isn’t whether functional programming principles have value. They do. The question is whether applying them dogmatically to the web (a platform designed around mutability, global scope, and user-driven chaos) made our work better, or just more complex.</p>

<h2 id="the-nature-of-the-web">The Nature of the Web</h2>

<p>To understand why functional programming ideals clash with web development, we need to acknowledge what the web actually is.</p>

<p><strong>The web is fundamentally side-effectful.</strong> CSS cascades globally by design. Styles defined in one place affect elements everywhere, creating emergent patterns through specificity and inheritance. The DOM is a giant mutable tree that browsers optimize obsessively; changing it directly is fast and predictable. User interactions arrive asynchronously and unpredictably: clicks, scrolls, form submissions, network requests, resize events. There’s no pure function that captures “user intent.”</p>

<p><strong>This messiness is not accidental.</strong> It’s how the web scales across billions of devices, remains backwards-compatible across decades, and allows disparate systems to interoperate. The browser is an open platform with escape hatches everywhere. You can style anything, hook into any event, manipulate any node. That flexibility and that refusal to enforce rigid abstractions is the web’s superpower.</p>

<p>When we approach the web with functional programming instincts, we see this flexibility as chaos. We see globals as dangerous. We see mutation as unpredictable. We see side effects as bugs waiting to happen. And so we build walls.</p>

<h2 id="enter-functional-programming-ideals">Enter Functional Programming Ideals</h2>

<p>Functional programming revolves around a few core principles: functions should be pure (same inputs → same outputs, no side effects), data should be immutable, and state changes should be explicit and traceable. These ideas produce code that’s easier to reason about, test, and parallelize, in the right context of course.</p>

<p>These principles had been creeping into JavaScript long before React. Underscore.js (2009) brought map, reduce, and filter to the masses. Lodash and Ramda followed with deeper FP toolkits including currying, composition and immutability helpers. The ideas were in the air: avoid mutation, compose small functions, treat data transformations as pipelines.</p>

<p>React itself started with class components and <code>setState</code>, hardly pure FP. But the conceptual foundation was there: treat UI as a function of state, make rendering deterministic, isolate side effects. Then came Elm, a purely functional language created by Evan Czaplicki that codified the “Model-View-Update” architecture. When Dan Abramov created Redux, he explicitly cited Elm as inspiration. Redux’s reducers are directly modeled on Elm’s update functions: <code>(state, action) =&gt; newState</code>.</p>

<p>Redux formalized what had been emerging patterns. Combined with React Hooks (which replaced stateful classes with functional composition), the ecosystem shifted decisively toward FP. Immutability became non-negotiable. Pure components became the ideal. Side effects were corralled into <code>useEffect</code>. Through this convergence (library patterns, Elm’s rigor, and React’s evolution) Haskell-derived ideas about purity became mainstream JavaScript practice.</p>

<p>In the early 2010s, as JavaScript applications grew more complex, developers looked to FP for salvation. jQuery spaghetti had become unmaintainable. Backbone’s two-way binding caused cascading updates (ironically, Backbone’s documentation explicitly advised against two-way binding saying “it doesn’t tend to be terribly useful in your real-world app” yet many developers implemented it through plugins). The community wanted discipline, and FP offered it: treat your UI as a pure function of state. Make data flow in one direction. Eliminate shared mutable state.</p>

<p>React’s arrival in 2013 crystallized these ideals. It promised a world where <code>UI = f(state)</code>: give it data, get back a component tree, re-render when data changes. No manual DOM manipulation. No implicit side effects. Just pure, predictable transformations.</p>

<p>This was seductive. And in many ways, it worked. But it also set us on a path toward rebuilding the web in JavaScript’s image, rather than JavaScript in the web’s image.</p>

<h2 id="how-fp-purism-shaped-modern-frontend">How FP Purism Shaped Modern Frontend</h2>

<h3 id="css-in-js-the-war-on-global-scope">CSS-in-JS: The War on Global Scope</h3>

<p>CSS was designed to be global. Styles cascade, inherit, and compose across boundaries. This enables tiny stylesheets to control huge documents, and lets teams share design systems across applications. But to functional programmers, global scope is dangerous. It creates implicit dependencies and unpredictable outcomes.</p>

<p>Enter CSS-in-JS: styled-components, Emotion, JSS. The promise was component isolation. Styles scoped to components, no cascading surprises, no naming collisions. Styles become <em>data</em>, passed through JavaScript, predictably bound to elements.</p>

<p>But this came at a cost. CSS-in-JS libraries generate styles at runtime, injecting them into <code>&lt;style&gt;</code> tags as components mount. This adds JavaScript execution to the critical rendering path. Server-side rendering becomes complicated. You need to extract styles during the render, serialize them, and rehydrate them on the client. Debugging involves runtime-generated class names like <code>.css-1xbq8d9</code>. And you lose the cascade; the very feature that made CSS powerful in the first place.</p>

<p>Worse, you’ve moved a browser-optimized declarative language into JavaScript, a single-threaded runtime. The browser can parse and apply CSS in parallel, off the main thread. Your styled-components bundle? That’s main-thread work, blocking interactivity.</p>

<p>The web had a solution. It’s called a stylesheet. But it wasn’t <em>pure</em> enough.</p>

<p>The industry eventually recognized these problems and pivoted to Tailwind CSS. Instead of runtime CSS generation, use utility classes. Instead of styled-components, compose classes in JSX. This was better, at least it’s compile-time, not runtime. No more blocking the main thread to inject styles. No more hydration complexity.</p>

<p>But Tailwind still fights the cascade. Instead of writing <code>.button { padding: 1rem; }</code> once and letting it cascade to all buttons, you write <code>class="px-4 py-2 bg-blue-500"</code> on every single button element. You’ve traded runtime overhead for a different set of problems: class soup in your markup, massive HTML payloads, and losing the cascade’s ability to make sweeping design changes in one place.</p>

<p>And here’s where it gets truly revealing: when Tailwind added support for nested selectors using <code>&amp;</code> (a feature that would let developers write more cascade-like styles), parts of the community revolted. David Khourshid (creator of XState) <a href="https://x.com/DavidKPiano/status/1969054758318051432">shared examples</a> of using nested selectors in Tailwind, and the backlash was immediate. Developers argued this defeated the purpose of Tailwind, that it brought back the “problems” of traditional CSS, that it violated the utility-first philosophy.</p>

<p>Think about what this means. The platform has cascade. CSS-in-JS tried to eliminate it and failed. Tailwind tried to work around it with utilities. And when Tailwind cautiously reintroduced a cascade-like feature, developers who were trained by years of anti-cascade ideology rejected it. We’ve spent so long teaching people that the cascade is dangerous that even when their own tools try to reintroduce platform capabilities, they don’t want them.</p>

<p>We’re not just ignorant of the platform anymore. We’re ideologically opposed to it.</p>

<h3 id="synthetic-events-abstracting-away-the-platform">Synthetic Events: Abstracting Away the Platform</h3>

<p>React introduced synthetic events to normalize browser inconsistencies and integrate events into its rendering lifecycle. Instead of attaching listeners directly to DOM nodes, React uses event delegation. It listens at the root, then routes events to handlers through its own system.</p>

<p>This feels elegant from a functional perspective. Events become data flowing through your component tree. You don’t touch the DOM directly. Everything stays inside React’s controlled universe.</p>

<p>But native browser events already work. They bubble, they capture, they’re well-specified. The browser has spent decades optimizing event dispatch. By wrapping them in a synthetic layer, React adds indirection: memory overhead for event objects, translation logic for every interaction, and debugging friction when something behaves differently than the native API.</p>

<p>Worse, it trains developers to avoid the platform. Developers learn React’s event system, not the web’s. When they need to work with third-party libraries or custom elements, they hit impedance mismatches. <code>addEventListener</code> becomes a foreign API in their own codebase.</p>

<p>Again: the web had this. The browser’s event system is fast, flexible, and well-understood. But it wasn’t <em>controlled</em> enough for the FP ideal of a closed system.</p>

<h3 id="client-side-rendering-and-hydration-reinventing-the-browser">Client-Side Rendering and Hydration: Reinventing the Browser</h3>

<p>The logical extreme of “UI as a pure function of state” is client-side rendering: the server sends an empty HTML shell, JavaScript boots up, and the app renders entirely in the browser. From a functional perspective, this is clean. Your app is a deterministic function that takes initial state and produces a DOM tree.</p>

<p>From a web perspective, it’s a disaster. The browser sits idle while JavaScript parses, executes, and manually constructs the DOM. Users see blank screens. Screen readers get empty documents. Search engines see nothing. Progressive rendering which is one of the browser’s most powerful features, goes unused.</p>

<p>The industry noticed. Server-side rendering came back. But because the mental model was still “JavaScript owns the DOM,” we got <em>hydration</em>: the server renders HTML, the client renders the same tree in JavaScript, then React walks both and attaches event handlers. During hydration, the page is visible but inert. Clicks do nothing, forms don’t submit.</p>

<p>This is architecturally absurd. The browser already rendered the page. It already knows how to handle clicks. But because the framework wants to own all interactions through its synthetic event system, it must re-create the entire component tree in JavaScript before anything works.</p>

<p>The absurdity extends beyond the client. Infrastructure teams watch in confusion as every user makes <em>double the number of requests</em>: the server renders the page and fetches data, then the client boots up and fetches the exact same data again to reconstruct the component tree for hydration. Why? Because the framework can’t trust the HTML it just generated. It needs to rebuild its internal representation of the UI in JavaScript to attach event handlers and manage state.</p>

<p>This isn’t just wasteful, it’s expensive. Database queries run twice. API calls run twice. Cache layers get hit twice. CDN costs double. And for what? So the framework can maintain its pure functional model where all state lives in JavaScript. The browser had the data. The HTML had the data. But that data wasn’t in the right <em>shape</em>. It wasn’t a JavaScript object tree, so we throw it away and fetch it again.</p>

<p>Hydration is what happens when you treat the web like a blank canvas instead of a platform with capabilities. The web gave us streaming HTML, progressive enhancement, and instant interactivity. We replaced it with JSON, JavaScript bundles, duplicate network requests, and “please wait while we reconstruct reality.”</p>

<h3 id="the-modal-problem-teaching-malpractice-as-best-practice">The Modal Problem: Teaching Malpractice as Best Practice</h3>

<p>Consider the humble modal dialog. The web has <code>&lt;dialog&gt;</code>, a native element with built-in functionality: it manages focus trapping, handles Escape key dismissal, provides a backdrop, controls scroll-locking on the body, and integrates with the accessibility tree. It exists in the DOM but remains hidden until opened. No JavaScript mounting required. It’s fast, accessible, and battle-tested by browser vendors.</p>

<p>Now observe what gets taught in tutorials, bootcamps, and popular React courses: build a modal with <code>&lt;div&gt;</code> elements. Conditionally render it when <code>isOpen</code> is true. Manually attach a click-outside handler. Write an effect to listen for the Escape key. Add another effect for focus trapping. Implement your own scroll-lock logic. Remember to add ARIA attributes. Oh, and make sure to clean up those event listeners, or you’ll have memory leaks.</p>

<p>You’ve just written 100+ lines of JavaScript to poorly recreate what the browser gives you for free. Worse, you’ve trained developers to <em>not even look</em> for native solutions. The platform becomes invisible. When someone asks “how do I build a modal?”, the answer is “install a library” or “here’s my custom hook,” never “use <code>&lt;dialog&gt;</code>.”</p>

<p>The teaching is the problem. When influential tutorial authors and bootcamp curricula skip native APIs in favor of React patterns, they’re not just showing an alternative approach. They’re actively teaching malpractice. A generation of developers learns to build inaccessible <code>&lt;div&gt;</code> soup because that’s what fits the framework’s reactivity model, never knowing the platform already solved these problems.</p>

<p>And it’s not just bootcamps. Even the most popular component libraries make the same choice: shadcn/ui builds its Dialog component on Radix UI primitives, which use <code>&lt;div role="dialog"&gt;</code> instead of the native <code>&lt;dialog&gt;</code> element. There are open GitHub issues requesting native <code>&lt;dialog&gt;</code> support, but the implicit message is clear: it’s easier to reimplement the browser than to work with it.</p>

<h3 id="when-frameworks-cant-keep-up-with-the-platform">When Frameworks Can’t Keep Up with the Platform</h3>

<p>The problem runs deeper than ignorance or inertia. The frameworks themselves increasingly struggle to work with the platform’s evolution. Not because the platform features are bad, but because the framework’s architectural assumptions can’t accommodate them.</p>

<p>Consider why component libraries like Radix UI choose <code>&lt;div role="dialog"&gt;</code> over <code>&lt;dialog&gt;</code>. The native <code>&lt;dialog&gt;</code> element manages its own state: it knows when it’s open, it handles its own visibility, it controls focus internally. But React’s reactivity model expects all state to live in JavaScript, flowing unidirectionally into the DOM. When a native element manages its own state, React’s mental model breaks down. Keeping <code>isOpen</code> in your React state synchronized with the <code>&lt;dialog&gt;</code> element’s actual open/closed state becomes a nightmare of refs, effects, and imperative calls. Precisely what React was supposed to eliminate.</p>

<p>Rather than adapt their patterns to work with stateful native elements, library authors reimplement the entire behavior in a way that fits the framework. It’s architecturally easier to build a fake dialog in JavaScript than to integrate with the platform’s real one.</p>

<p>But the conflict extends beyond architectural preferences. Even when the platform adds features that developers desperately want, frameworks can’t always use them.</p>

<p>Accordions? The web has <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code>. Tooltips? There’s <code>title</code> attribute and the emerging <code>popover</code> API. Date pickers? <code>&lt;input type="date"&gt;</code>. Custom dropdowns? The web now supports styling <code>&lt;select&gt;</code> elements with <code>appearance: base-select</code> and <code>::picker(select)</code> pseudo-elements. You can even put <code>&lt;span&gt;</code> elements with images inside <code>&lt;option&gt;</code> elements now. It eliminates the need for the countless JavaScript select libraries that exist solely because designers wanted custom styling.</p>

<p>Frameworks encourage conditional rendering and component state, so these elements don’t get rendered until JavaScript decides they should exist. The mental model is “UI appears when state changes,” not “UI exists, state controls visibility.” Even when the platform adds the exact features developers have been rebuilding in JavaScript for years, the ecosystem momentum means most developers never learn these features exist.</p>

<p>And here’s the truly absurd part: even when developers <em>do</em> know about these new platform features, the frameworks themselves can’t handle them. <a href="https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Customizable_select">MDN’s documentation</a> for customizable <code>&lt;select&gt;</code> elements includes this warning: “<strong>Some JavaScript frameworks block these features; in others, they cause hydration failures when Server-Side Rendering (SSR) is enabled.</strong>” The platform evolved. The HTML parser now allows richer content inside <code>&lt;option&gt;</code> elements. But React’s JSX parser and hydration system weren’t designed for this. They expect <code>&lt;option&gt;</code> to only contain text. Updating the framework to accommodate the platform’s evolution takes time, coordination, and breaking changes that teams are reluctant to make.</p>

<p>The web platform added features that eliminate entire categories of JavaScript libraries, but the dominant frameworks can’t use those features without causing hydration errors. The stack that was supposed to make development easier now lags behind the platform it’s built on.</p>

<h3 id="routing-and-forms-javascript-all-the-way-down">Routing and Forms: JavaScript All the Way Down</h3>

<p>The browser has native routing: <code>&lt;a&gt;</code> tags, the History API, forward/back buttons. It has native forms: <code>&lt;form&gt;</code> elements, validation attributes, submit events. These work without JavaScript. They’re accessible by default. They’re fast.</p>

<p>Modern frameworks threw them out. React Router, Next.js’s router, Vue Router; they intercept link clicks, prevent browser navigation, and handle routing in JavaScript. Why? Because client-side routing feels like a pure state transition: URL changes, state updates, component re-renders. No page reload. No “lost” JavaScript state.</p>

<p>But you’ve now made navigation depend on JavaScript. Ctrl+click to open in a new tab? Broken, unless you carefully re-implement it. Right-click to copy link? The URL might not match what’s rendered. Accessibility tools that rely on standard navigation patterns? Confused.</p>

<p>Forms got the same treatment. Instead of letting the browser handle submission, validation, and accessibility, frameworks encourage JavaScript-controlled forms. Formik, React Hook Form, uncontrolled vs. controlled inputs; entire libraries exist to manage what <code>&lt;form&gt;</code> already does. The browser can validate <code>&lt;input type="email"&gt;</code> instantly, with no JavaScript. But that’s not <em>reactive</em> enough, so we rebuild validation in JavaScript, ship it to the client, and hope we got the logic right.</p>

<p>The web had these primitives. We rejected them because they didn’t fit our FP-inspired mental model of “state flows through JavaScript.”</p>

<h2 id="what-we-lost-in-the-process">What We Lost in the Process</h2>

<p>Progressive enhancement used to be a best practice: start with working HTML, layer on CSS for style, add JavaScript for interactivity. The page works at every level. Now, we start with JavaScript and work backwards, trying to squeeze HTML out of our component trees and hoping hydration doesn’t break.</p>

<p>We lost built-in accessibility. Native HTML elements have roles, labels, and keyboard support by default. Custom JavaScript widgets require <code>aria-*</code> attributes, focus management, and keyboard handlers. All easy to forget or misconfigure.</p>

<p>We lost performance. The browser’s streaming parser can render HTML as it arrives. Modern frameworks send JavaScript, parse JavaScript, execute JavaScript, then finally render. That’s slower. The browser can cache CSS and HTML aggressively. JavaScript bundles invalidate on every deploy.</p>

<p>We lost simplicity. <code>&lt;a href="/about"&gt;</code> is eight characters. A client-side router is a dependency, a config file, and a mental model. <code>&lt;form action="/submit" method="POST"&gt;</code> is self-documenting. A controlled form with validation is dozens of lines of state management.</p>

<p>And we lost alignment with the platform. The browser vendors spend millions optimizing HTML parsing, CSS rendering, and event dispatch. We spend thousands of developer-hours rebuilding those features in JavaScript, slower.</p>

<h2 id="why-this-happened">Why This Happened</h2>

<p>This isn’t a story of incompetence. Smart people built these tools for real reasons.</p>

<p>By the early 2010s, JavaScript applications had become unmaintainable. jQuery spaghetti sprawled across codebases. Two-way data binding caused cascading updates that were impossible to debug. Teams needed discipline, and functional programming offered it: pure components, immutable state, unidirectional data flow. For complex, stateful applications (like dashboards with hundreds of interactive components, real-time collaboration tools, data visualization platforms) React’s model was genuinely better than manually wiring up event handlers and tracking mutations.</p>

<p>The FP purists weren’t wrong that unpredictable mutation causes bugs. They were wrong that the solution was avoiding the platform’s mutation-friendly APIs instead of learning to use them well. But in the chaos of 2013, that distinction didn’t matter. React worked. It scaled. And Facebook was using it in production.</p>

<p>Then came the hype cycle. React dominated the conversation. Every conference had React talks. Every tutorial assumed React as the starting point. CSS-in-JS became “modern.” Client-side rendering became the default. When big companies like Facebook, Airbnb, Netflix and others adopted these patterns, they became industry standards. Bootcamps taught React exclusively. Job postings required React experience. The narrative solidified: this is how you build for the web now.</p>

<p>The ecosystem became self-reinforcing through its own momentum. Once React dominated hiring pipelines and Stack Overflow answers, alternatives faced an uphill battle. Teams that had already invested in React by training developers, building component libraries, establishing patterns are now facing enormous switching costs. New developers learned React because that’s what jobs required. Jobs required React because that’s what developers knew. The cycle fed itself, independent of whether React was the best tool for any particular job.</p>

<p>This is where we lost the plot. Somewhere in the transition from “React solves complex application problems” to “React is how you build websites,” we stopped asking whether the problems we were solving actually needed these solutions. I’ve watched developers build personal blogs with Next.js. Sites that are 95% static content with maybe a contact form, because that’s what they learned in bootcamp. I’ve seen companies choose React for marketing sites with zero interactivity, not because it’s appropriate, but because they can’t hire developers who know anything else.</p>

<p>The tool designed for complex, stateful applications became the default for everything, including problems the web solved in 1995 with HTML and CSS. A generation of developers never learned that most websites don’t need a framework at all. The question stopped being “does this problem need React?” and became “which React pattern should I use?” The platform’s native capabilities like progressive rendering, semantic HTML, the cascade, instant navigation are now considered “old-fashioned.” Reinventing them in JavaScript became “best practices.”</p>

<p>We chased functional purity on a platform that was never designed for it. And we built complexity to paper over the mismatch.</p>

<h2 id="the-way-forward">The Way Forward</h2>

<p>The good news: we’re learning. The industry is rediscovering the platform.</p>

<p>HTMX embraces HTML as the medium of exchange. Server sends HTML, browser renders it, no hydration needed. Qwik resumable architecture avoids hydration entirely, serializing only what’s needed. Astro defaults to server-rendered HTML with minimal JavaScript. Remix and SvelteKit lean into web standards: forms that work without JS, progressive enhancement, leveraging the browser’s cache.</p>

<p>These tools acknowledge what the web is: a document-based platform with powerful native capabilities. Instead of fighting it, they work with it.</p>

<p>This doesn’t mean abandoning components or reactivity. It means recognizing that <code>UI = f(state)</code> is a useful model <em>inside</em> your framework, not a justification to rebuild the entire browser stack. It means using CSS for styling, native events for interactions, and HTML for structure and then reaching for JavaScript when you need interactivity beyond what the platform provides.</p>

<p>The best frameworks of the next decade will be the ones that feel like the web, not in spite of it.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In chasing functional purity, we built a frontend stack that is more complex, more fragile, and less aligned with the platform it runs on. We recreated CSS in JavaScript, events in synthetic wrappers, rendering in hydration layers, and routing in client-side state machines. We did this because we wanted predictability, control, and clean abstractions.</p>

<p>But the web was never meant to be pure. It’s a sprawling, messy, miraculous platform built on decades of emergent behavior, pragmatic compromises, and radical openness. Its mutability isn’t a bug. It’s the reason a document written in 1995 still renders in 2025. Its global scope isn’t dangerous. It’s what lets billions of pages share a design language.</p>

<p>Maybe the web didn’t need to be purified. Maybe it just needed to be understood.</p>

<p>I want to thank my friend <a href="https://x.com/HO_BA">Ihab Khattab</a> for reviewing this piece and providing invaluable feedback.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google removes ICE-spotting app following Apple's ICEBlock crackdown (139 pts)]]></title>
            <link>https://www.theverge.com/news/791533/google-apple-ice-tracking-app-store-red-dot-iceblock</link>
            <guid>45472799</guid>
            <pubDate>Sat, 04 Oct 2025 12:23:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theverge.com/news/791533/google-apple-ice-tracking-app-store-red-dot-iceblock">https://www.theverge.com/news/791533/google-apple-ice-tracking-app-store-red-dot-iceblock</a>, See on <a href="https://news.ycombinator.com/item?id=45472799">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><a href="https://www.theverge.com/authors/emma-roth"><img alt="Emma Roth" data-chromatic="ignore" loading="lazy" width="36" height="36" decoding="async" data-nimg="1" srcset="https://platform.theverge.com/wp-content/uploads/sites/2/chorus/author_profile_images/195810/EMMA_ROTH.0.jpg?quality=90&amp;strip=all&amp;crop=0%2C0%2C100%2C100&amp;w=48 1x, https://platform.theverge.com/wp-content/uploads/sites/2/chorus/author_profile_images/195810/EMMA_ROTH.0.jpg?quality=90&amp;strip=all&amp;crop=0%2C0%2C100%2C100&amp;w=96 2x" src="https://platform.theverge.com/wp-content/uploads/sites/2/chorus/author_profile_images/195810/EMMA_ROTH.0.jpg?quality=90&amp;strip=all&amp;crop=0%2C0%2C100%2C100&amp;w=96"></a></p><div><p><span aria-expanded="false" aria-haspopup="true" role="button" tabindex="0"><span id="follow-author-standard_article_details-dmcyOmF1dGhvclByb2ZpbGU6MTE2"><span><span><svg width="9" height="9" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg" aria-label="Follow"><path d="M5 0H4V4H0V5H4V9H5V5H9V4H5V0Z"></path></svg></span></span><span>Emma Roth</span></span></span></p> <p><span>is a news writer who covers the streaming wars, consumer tech, crypto, social media, and much more. Previously, she was a writer and editor at MUO.</span></p></div></div><div id="zephr-anchor"><p>Just one day after <a href="https://www.theverge.com/news/696584/iceblock-tracking-app-white-house-criticism">Apple took down the iOS App Store listing for ICEBlock</a>, Google has confirmed to <a href="https://www.404media.co/google-calls-ice-agents-a-vulnerable-group-removes-ice-spotting-app-red-dot/"><em>404 Media</em></a> that it has removed a similar app, Red Dot, from the Google Play Store. The company also reportedly said it “removed apps that share the location of what it describes as a vulnerable group after a recent violent act against them connected to this sort of app.”</p><p>On Thursday, Apple removed ICEBlock and similar apps, including Red Dot, after facing pressure from the Department of Justice. Attorney General Pam Bondi <a href="https://www.foxbusiness.com/politics/apple-takes-down-ice-tracking-app-after-pressure-from-ag-bondi">said to Fox News</a> on Thursday that “ICEBlock is designed to put ICE agents at risk just for doing their jobs, and violence against law enforcement is an intolerable red line that cannot be crossed.” In response to the move, ICEBlock developer <a href="https://www.404media.co/iceblock-owner-after-apple-removes-app-we-are-determined-to-fight-this/">Joshua Aaron said in a statement to <em>404 Media</em></a> that the app is “protected speech,” adding that Apple is “capitulating to an authoritarian regime.”</p><p>Both ICEBlock and Red Dot allow users to anonymously report sightings of ICE agents and view nearby reports. <a href="https://www.red-dot.app/">Red Dot’s website says</a> the app combines user reporting with “verified reports from multiple trusted sources” to monitor ICE activity.</p><p>Google told <em>404 Media</em> that it didn’t receive any warning from the DOJ, but that it “bans apps with a high risk of abuse” and has a requirement for content moderation apps with user-generated content.“ICEBlock was never available on Google Play, but we removed similar apps for violations of our policies,” Google told <em>404 Media</em>.<em> The Verge</em> reached out to Google with a request for comment but didn’t immediately hear back.</p><div><p><span><strong>Follow topics and authors</strong> from this story to see more like this in your personalized homepage feed and to receive email updates.</span></p><ul><li id="follow-author-article_footer-dmcyOmF1dGhvclByb2ZpbGU6MTE2"><span aria-expanded="false" aria-haspopup="true" role="button" tabindex="0"><span><span><svg width="9" height="9" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg" aria-label="Follow"><path d="M5 0H4V4H0V5H4V9H5V5H9V4H5V0Z"></path></svg></span><span>Emma Roth</span></span></span></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Thunderscan: A clever device transforms a printer into a scanner (2004) (144 pts)]]></title>
            <link>https://www.folklore.org/Thunderscan.html</link>
            <guid>45472765</guid>
            <pubDate>Sat, 04 Oct 2025 12:16:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.folklore.org/Thunderscan.html">https://www.folklore.org/Thunderscan.html</a>, See on <a href="https://news.ycombinator.com/item?id=45472765">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>The first project that I worked on for Apple after starting in August 1979 was writing low level software for the Silentype printer <span>(see <a href="https://www.folklore.org/What_Hath_Woz_Wrought.html"><span>What Hath Woz Wrought</span></a>)</span>, a cute, inexpensive thermal printer for the Apple II, that was based on technology licensed from a local company named Trendcom.  In typical Apple fashion, we improved on Trendcom's design by replacing their relatively expensive controller board with a much simpler one that relied on the microprocessor in the Apple II to do most of the dirty work.</p><p>

The only other engineer working on the project was Victor Bull, who was the hardware designer and also the project leader.  Vic was smart, taciturn and easy to work with, and I learned a lot from him about how thermal printers worked, as well as how things worked at Apple.  We finished the project quickly, and the Silentype shipped in November 1979, less than four months after I began working on it.</p><p>

In May 1984, during my leave of absence from Apple <span>(see <a href="https://www.folklore.org/Leave_Of_Absence.html"><span>Leave Of Absence</span></a>)</span>, I received a phone call from Victor Bull, who I hadn't heard from in a couple of years.  He had left Apple more than a year ago to work with his friend Tom Petrie at a tiny company based in Orinda named Thunderware, that sold a single product called Thunderclock, an inexpensive calendar/clock card for the Apple II.  Victor said that he thought that I might be interested in writing software for an exciting, clever new product that Thunderware was developing for the Macintosh, which he refused to describe over the phone. He invited me to come visit them to check it out.</p><p>

In early June, I drove up to Thunderware's office in Orinda, which was about an hour's drive from my house in Palo Alto.  After I arrived at their modest headquarters, Vic introduced me to his partner, Tom Petrie, and I signed a non-disclosure agreement before they ushered me into a back room to see their demo.</p><p>

The most popular printer for both the Apple II and the Macintosh was the ImageWriter, a $500 dot-matrix printer capable of rendering bitmapped graphics, that was designed and manufactured by Japanese company named C.Itoh Electronics and marketed by Apple.  Virtually every Macintosh owner purchased an ImageWriter, since it was the only printer that was supported by Apple.  Tom's demo consisted of an ImageWriter printer hooked up to an Apple II, that at first glance appeared to be busily printing away.  But when I looked closer, I noticed that instead of blank paper, there was a glossy photograph of a cat threaded through the printer's platen, and the printer's black plastic ribbon cartridge was missing, replaced by a makeshift contraption containing an optical sensing device that trailed an umbilical cord back to the Apple II.</p><p>

Their potential new product, Thunderscan, was a low cost way to temporarily turn an ImageWriter printer into a high resolution scanner, by replacing the ribbon cartridge with an optical sensor and writing some clever software.  Since the resolution was determined by the precision of the printer's stepper motors, which had to be very accurate in order to print detailed graphics, Thunderscan, priced at under $200, had better resolution than flat bed scanners costing more than ten times as much.  I loved the cleverness of the ingenious concept, and the Woz-like elegance of saving money and adding flexibility by doing everything in software, but there were also a few problems.</p><p>

The biggest problem was that Thunderscan could only capture one scan line's worth of data on each pass of the print head, which made it nine times slower than regular printing, since the print head could deposit nine dots at a time.  This made for frustratingly slow scanning, often taking over an hour to scan a full page at the highest resolution.  Thunderscan was never going to win any races.</p><p>

Another apparent problem was the disappointingly low quality of the image being captured and displayed by Tom Petrie's Apple II application. Tom and Vic said their scanner was capable of capturing up to 32 different levels of light intensity, but both the Apple II (in hi-res mode) and the Macintosh only had one bit per pixel to display, so the software had to simulate gray scales using patterns of black and white dots.  It looked like Tom was using a simple threshold algorithm to do the rendering, which threw away most of the gray scale information and made the resulting image look unacceptably blotchy.  It was hard to tell if the quality promised by Tom and Vic was there or not.</p><p>

Tom and Vic proposed to hire me to write Macintosh software for Thunderscan.  I knew that a low cost scanner would be a great product for the image hungry Macintosh, but only if it had sufficient quality, and I wasn't sure about that. I told them that I'd think it over during the next few days, and, as I did, I became more excited about the potential of Thunderscan for the Macintosh, realizing that the slow speed wouldn't be that much of an impediment if the quality and resolution was good enough.  The low image quality in Tom's prototype was probably caused more by the Apple II software than by anything inherent in the scanner.  The Macintosh was almost ten times faster than the Apple II, so it should be able to sample the incoming data better to obtain more horizontal resolution.  Plus, I knew a much better algorithm for gray scale rendering that would be fun to try out in practice.</p><p>

My friend and colleague Bill Atkinson was a talented photographer, and one of his hobbies was playing around with digitized pictures, periodically experimenting to find the best algorithms for rendering them.  Bill loved to explain his current work to whoever would listen to him, so I learned a lot about rendering gray scale images over the years simply by being around him.  Bill had progressed over the years from using an "ordered dither" algorithm, where varying threshold values are specified in a sliding matrix, to his current favorite, which was a modified version of what was known as the "Floyd-Steinberg" algorithm, where an error term is maintained and distributed proportionally to neighboring pixels.</p><p>

I called Thunderware and told them I was interested in working on Macintosh software for Thunderscan, in exchange for a per-unit royalty.   I drove back up to Orinda, where Tom and Vic gave me lots of documentation about the scanner, and the sample code that Tom had written for the Apple II.  For the next couple of months, I drove up to Orinda once a week, usually on Thursday, to meet with Tom and Vic show them my progress, prioritize development issues and discussion various complications as they arose. We would also discuss business terms, but we didn't sign a formal contract until the software was almost finished, when we settled on a royalty of $7.50 per unit.</p><p>

Tom and Vic had already encountered and surmounted a number of tough problems just to get scanning going at all.  For example, the ImageWriter printer was not really designed to be stepped one scanline at a time, and if you tried that the paper would bunch up against the platen, causing distortion.  Tom and Vic solved the problem by commanding the printer to move three steps up and then two steps back, instead of a single step up, which held the paper snugly against the platen as required.   There were also various techniques for sensing the beginning and end of the scan line, and some timings that were determined by tedious experimentation for how long it took the printer to respond to a command.</p><p>

<a href="https://www.folklore.org/images/Macintosh/tscanapp.jpg"><img src="https://www.folklore.org/images/Macintosh/tscanapp_t.jpg"></a>It took a week or so to get basic scanning working on the Macintosh, and then a few more days to render the gray scale data with Bill's modified Floyd-Steinberg dithering.  After shaking out a variety of problems, mostly involving synchronization between the printer and the software, I was surprised and impressed by the consistent high quality of the results.  I went through a brief, elated phase of scanning every image in sight that would fit through the printer, just to see how it would turn out.</p><p>

One important design decision that I made early on was to keep the gray scale data around, to allow more flexible image processing.  Thunderscan documents were five bits per pixel, before the Macintosh generally supported gray scale, and the user could manipulate the contrast and brightness of selected areas of the image, dodging and burning to reveal detail in the captured image.  This also paid off in later versions when we implemented gray scale printing for Postscript printers.</p><p>

My favorite feature that I came up with for Thunderscan had to do with two dimensional scrolling.  Thunderscan documents could be quite large, so you could only show a portion of them in the image area of the window.  You could scroll the image by dragging with a MacPaint-style "hand" scrolling tool, but you had to drag an awful lot to get to the extremes of a large image.  I decided to add what I called "inertial" scrolling, where you gave the image a push and it kept scrolling at a variable speed in the direction of the push, after the mouse button was released.  I had to add some hysteresis to keep the image from moving accidentally, and make various other tweaks, but soon I had it working and it felt great to be able to zip around  large images by pushing them.</p><p>

The hardest feature to perfect was bidirectional scanning.  At first, Thunderscan only scanned from left to right, but it wasted time to return the scannner to the left after every scan line.  We could almost double the speed if we scanned in both directions, but it was hard to get the adjacent scan lines that were scanned in opposite directions to line up properly.   Ultimately, we made bidirectional scanning an optional feature, if you wanted to trade a little quality for greater speed.</p><p>

I finished the software in November 1984, after taking a short break to work on something else <span>(see <a href="https://www.folklore.org/Switcher.html"><span>Switcher</span></a>)</span>.  Thunderscan shipped in December 1984, and did well from the very beginning, with sales gradually rising from around 1,000 units/month to over 7,500 units/month at its peak in 1987.    For a while, it was both the least expensive and highest quality scanning alternative for the Macintosh, although I'm sure it frustrated a lot of users by being too slow.  I did three major revisions of the software over the next few years, improving the scan quality and adding features like gray scale printing and eventually gray scale display for the Macintosh II.</p><p>

Eventually, the flat bed scanners caught up to Thunderscan, and then surpassed it, in both cost, quality and convenience.   Over its lifetime, Thunderscan sold approximately 100,000 units and improved countless documents by providing users with an inexpensive way to capture high resolution graphics with their Macintoshes.
  </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Buchstabenmuseum Berlin is closing (160 pts)]]></title>
            <link>https://www.buchstabenmuseum.de/en/</link>
            <guid>45472678</guid>
            <pubDate>Sat, 04 Oct 2025 11:58:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.buchstabenmuseum.de/en/">https://www.buchstabenmuseum.de/en/</a>, See on <a href="https://news.ycombinator.com/item?id=45472678">Hacker News</a></p>
<div id="readability-page-1" class="page">
		<a href="#content">Skip to content</a>

		
		
	<div id="boxed-wrapper">
			
			
				
			<header>
				<div>
							<nav aria-label="Main Menu"><ul id="menu-main_menu_en"><li id="menu-item-210" data-item-id="210"><a href="https://www.buchstabenmuseum.de/en/visit/"><span>VISIT</span></a></li><li id="menu-item-208" data-item-id="208"><a href="https://www.buchstabenmuseum.de/en/program/"><span>PROGRAM</span></a></li><li id="menu-item-207" data-item-id="207"><a href="https://www.buchstabenmuseum.de/en/collection/"><span>COLLECTION</span></a></li><li id="menu-item-209" data-item-id="209"><a href="https://www.buchstabenmuseum.de/en/support/"><span>SUPPORT</span></a></li><li id="menu-item-829" data-item-id="829"><a href="https://www.buchstabenmuseum.de/en/press/"><span>PRESS</span></a></li><li id="menu-item-803" data-item-id="803"><a href="https://www.buchstabenmuseum.de/en/contact/"><span>CONTACT</span></a></li><li id="menu-item-211-de" data-classes="lang-item" data-item-id="211-de"><a href="https://www.buchstabenmuseum.de/" hreflang="de-DE" lang="de-DE"><span>DE</span></a></li></ul></nav><nav aria-label="Main Menu Sticky"><ul id="menu-main_menu_en-1"><li data-item-id="210"><a href="https://www.buchstabenmuseum.de/en/visit/"><span>VISIT</span></a></li><li data-item-id="208"><a href="https://www.buchstabenmuseum.de/en/program/"><span>PROGRAM</span></a></li><li data-item-id="207"><a href="https://www.buchstabenmuseum.de/en/collection/"><span>COLLECTION</span></a></li><li data-item-id="209"><a href="https://www.buchstabenmuseum.de/en/support/"><span>SUPPORT</span></a></li><li data-item-id="829"><a href="https://www.buchstabenmuseum.de/en/press/"><span>PRESS</span></a></li><li data-item-id="803"><a href="https://www.buchstabenmuseum.de/en/contact/"><span>CONTACT</span></a></li><li data-classes="lang-item" data-item-id="211-de"><a href="https://www.buchstabenmuseum.de/" hreflang="de-DE" lang="de-DE"><span>DE</span></a></li></ul></nav><div><ul id="menu-main_menu_en-2"><li data-item-id="210"><a href="https://www.buchstabenmuseum.de/en/visit/"><span>VISIT</span></a></li><li data-item-id="208"><a href="https://www.buchstabenmuseum.de/en/program/"><span>PROGRAM</span></a></li><li data-item-id="207"><a href="https://www.buchstabenmuseum.de/en/collection/"><span>COLLECTION</span></a></li><li data-item-id="209"><a href="https://www.buchstabenmuseum.de/en/support/"><span>SUPPORT</span></a></li><li data-item-id="829"><a href="https://www.buchstabenmuseum.de/en/press/"><span>PRESS</span></a></li><li data-item-id="803"><a href="https://www.buchstabenmuseum.de/en/contact/"><span>CONTACT</span></a></li><li data-classes="lang-item" data-item-id="211-de"><a href="https://www.buchstabenmuseum.de/" hreflang="de-DE" lang="de-DE"><span>DE</span></a></li></ul></div>	

<nav aria-label="Main Menu Mobile"></nav>

	<nav aria-label="Main Menu Mobile Sticky"></nav>
					</div>
				
			</header>
							
				
		
				
				
			
			
						<main id="main">
				<div id="content">
			<span>Buchstabenmuseum</span><span><span><a href="https://www.buchstabenmuseum.de/en/author/barbara/" title="Posts by barbara" rel="author">barbara</a></span></span><span>2025-07-18T16:32:18+02:00</span>
			
			<div>
				<div><div><h2></h2><h3 data-fontsize="20" data-lineheight="30px"><strong>After 20 Years:</strong></h3></div><span><img width="940" height="616" title="250703_INSTA_We are closing_web" src="https://www.buchstabenmuseum.de/wp-content/uploads/2025/07/250703_INSTA_We-are-closing_web-1-1024x671.jpg" srcset="https://www.buchstabenmuseum.de/wp-content/uploads/2025/07/250703_INSTA_We-are-closing_web-1-200x131.jpg 200w, https://www.buchstabenmuseum.de/wp-content/uploads/2025/07/250703_INSTA_We-are-closing_web-1-400x262.jpg 400w, https://www.buchstabenmuseum.de/wp-content/uploads/2025/07/250703_INSTA_We-are-closing_web-1-600x393.jpg 600w, https://www.buchstabenmuseum.de/wp-content/uploads/2025/07/250703_INSTA_We-are-closing_web-1-800x524.jpg 800w, https://www.buchstabenmuseum.de/wp-content/uploads/2025/07/250703_INSTA_We-are-closing_web-1-1200x786.jpg 1200w" sizes="(max-width: 800px) 100vw, 1200px"></span><div><h3>The Buchstabenmuseum Berlin is closing!</h3>
<p>Until 5 October 2025, you can visit our museum every Thursday to Sunday from 1 to 5 pm.<br>
A visit outside opening hours is possible with a guided tour.<br>
<a href="mailto:visit@buchstabenmuseum.de">visit@buchstabenmuseum.de</a></p>
<p>We are still looking for long-term storage for our collection.<br>
For this we need support:<br>
<a href="https://secure.betterplace.org/de/donate/platform/projects/118807-rettung-gebauter-schriftzuege">&gt;&gt; betterplace</a></p>
<h4>We look forward to your visit!</h4>
<p>______________________________</p>
</div></div><div><div><h2></h2><h3 data-fontsize="20" data-lineheight="30px"><strong>20 Years of the Buchstabenmuseum!</strong></h3></div><span><img width="940" height="616" title="250605_BM_20J_web" src="https://www.buchstabenmuseum.de/wp-content/uploads/2025/06/250605_BM_20J_web-1-1024x671.jpg" srcset="https://www.buchstabenmuseum.de/wp-content/uploads/2025/06/250605_BM_20J_web-1-200x131.jpg 200w, https://www.buchstabenmuseum.de/wp-content/uploads/2025/06/250605_BM_20J_web-1-400x262.jpg 400w, https://www.buchstabenmuseum.de/wp-content/uploads/2025/06/250605_BM_20J_web-1-600x393.jpg 600w, https://www.buchstabenmuseum.de/wp-content/uploads/2025/06/250605_BM_20J_web-1-800x524.jpg 800w, https://www.buchstabenmuseum.de/wp-content/uploads/2025/06/250605_BM_20J_web-1-1200x786.jpg 1200w" sizes="(max-width: 800px) 100vw, 1200px"></span><div><h4>On Sat 14 June 2025 from 3 to 9 pm we want to celebrate our birthday and toast with you!<br>
You and all your friends and family are cordially invited.</h4>
<p>20 years is a very long time to look back on.<br>
That’s why we’ve put together a colourful brochure that we’ll be presenting on Saturday.</p>
<p>In addition, Sabrina Hauck (student at TU Berlin / architect at gkks) will give a talk on the use,<br>
vacancy and potential of Berlin’s S-Bahn arches at 18:00.</p>
</div></div><div><div><h2></h2><h3><strong>FINAL SALE – FROM DEPARTMENT STORES’ TO MUSEUM</strong></h3>
<p><span>Extended Term until Autumn 2025!</span></p>
<p><strong>AN EXHIBITION OF FORMER DEPARTMENT STORES FROM 1980 TO TODAY</strong></p></div><div><p>Horten, Quelle, Hertie, Kaufhof and Karstadt – corporate names that are disappearing from German city centres. Galeria Karstadt Kaufhof is currently struggling with closure in instalments. With the creeping loss of the corporations, the distinctive lettering of the department stores’ chains is also being lost.<br>
“FINAL SALE” tells the typographic and urban-historical stories of the letters and shows the former significance of the department stores and department stores with their architecture.<br>
We invite you to discover the typographic department stores’ icons and to buy selected items in the exhibition: “Final Sale – from department stores’ to museum” in the Buchstabenmuseum in the Stadtbahnbögen in the Hansaviertel.</p>
</div></div><div><div><span><img width="320" height="230" alt="illustration buchstabenmuseum" title="bm-illu_en" src="https://www.buchstabenmuseum.de/wp-content/uploads/2017/10/bm-illu_en.png" srcset="https://www.buchstabenmuseum.de/wp-content/uploads/2017/10/bm-illu_en-200x144.png 200w, https://www.buchstabenmuseum.de/wp-content/uploads/2017/10/bm-illu_en.png 320w" sizes="(max-width: 800px) 100vw, 320px"></span></div><div><h2></h2><h2>THE BUCHSTABENMUSEUM</h2></div><div><p><strong>Preservation and documentation of letters</strong><br>
The Buchstabenmuseum is the first museum in the world to collect letterforms from public spaces and display them as part of urban history. We preserve and document three-dimensional letters and signage, and their history, as well as providing information about their origins and construction. Our collection has captured the imagination of visitors from all around the world for over 10 years. Hundreds of letters have been saved from being battered by the elements or ending up on the scrap heap. A selection of what we offer can be found under »&nbsp;<span><a href="https://www.buchstabenmuseum.de/en/collection/">COLLECTION</a></span></p>
</div></div><div><span><img width="1600" height="900" alt="Buchstabenmuseum" title="BM_MAP_Bogen-424" src="https://www.buchstabenmuseum.de/wp-content/uploads/2020/06/BM_MAP_Bogen-424.jpg" srcset="https://www.buchstabenmuseum.de/wp-content/uploads/2020/06/BM_MAP_Bogen-424-200x113.jpg 200w, https://www.buchstabenmuseum.de/wp-content/uploads/2020/06/BM_MAP_Bogen-424-400x225.jpg 400w, https://www.buchstabenmuseum.de/wp-content/uploads/2020/06/BM_MAP_Bogen-424-600x338.jpg 600w, https://www.buchstabenmuseum.de/wp-content/uploads/2020/06/BM_MAP_Bogen-424-800x450.jpg 800w, https://www.buchstabenmuseum.de/wp-content/uploads/2020/06/BM_MAP_Bogen-424-1200x675.jpg 1200w, https://www.buchstabenmuseum.de/wp-content/uploads/2020/06/BM_MAP_Bogen-424.jpg 1600w" sizes="(max-width: 800px) 100vw, 1200px"></span></div><div><h2>COLLECTION</h2></div><div><h2></h2><h2><span>SPECIALS</span></h2></div><div><div><div><span><img width="460" height="305" title="buchstaben_en" src="https://www.buchstabenmuseum.de/wp-content/uploads/2017/10/buchstaben_en.gif"></span></div><div><p><strong>The Buchstabenmuseum font:</strong><br>
Selected objects from the museum have been made into a unique font (OTF) by LucasFonts. We’ve made it available for you to download free here:</p>
</div></div><div><div><span><img width="533" height="331" title="Teaser_BM_Studio_2_©_Sebastian_Weiss" src="https://www.buchstabenmuseum.de/wp-content/uploads/2020/07/Teaser_BM_Studio_2_%C2%A9_Sebastian_Weiss-1.jpg" srcset="https://www.buchstabenmuseum.de/wp-content/uploads/2020/07/Teaser_BM_Studio_2_%C2%A9_Sebastian_Weiss-1-200x124.jpg 200w, https://www.buchstabenmuseum.de/wp-content/uploads/2020/07/Teaser_BM_Studio_2_%C2%A9_Sebastian_Weiss-1-400x248.jpg 400w, https://www.buchstabenmuseum.de/wp-content/uploads/2020/07/Teaser_BM_Studio_2_%C2%A9_Sebastian_Weiss-1.jpg 533w" sizes="(max-width: 800px) 100vw, 533px"></span></div><div><p><strong>You nead an A, Æ or Å?<br>
</strong>We have them all, we know them all and we can help you with your event or building signage. In the last 10 years we have supported many stages, parties or facades. Ask our BM-Studio Team!</p>
</div></div></div><div><div><span><img width="320" height="360" alt="illustration buchstabenmuseum" title="bm-unterstuetzen_en" src="https://www.buchstabenmuseum.de/wp-content/uploads/2017/10/bm-unterstuetzen_en.png" srcset="https://www.buchstabenmuseum.de/wp-content/uploads/2017/10/bm-unterstuetzen_en-200x225.png 200w, https://www.buchstabenmuseum.de/wp-content/uploads/2017/10/bm-unterstuetzen_en.png 320w" sizes="(max-width: 800px) 100vw, 320px"></span></div><div><h2></h2><h2>SUPPORT</h2></div><div><p>The&nbsp;Buchstabenmuseum has a new location!<br>
For our new exhibition we need urgently your help.</p>
</div></div><div><div><h2><p>— BECOME A MEMBER —</p></h2></div><div><span><img width="940" height="624" alt="illustration buchstabenmuseum" title="BM_Servus_©_Djamila_Grossman" src="https://www.buchstabenmuseum.de/wp-content/uploads/2021/03/BM_Servus_%C2%A9_Djamila_Grossman-1-1024x680.png" srcset="https://www.buchstabenmuseum.de/wp-content/uploads/2021/03/BM_Servus_%C2%A9_Djamila_Grossman-1-200x133.png 200w, https://www.buchstabenmuseum.de/wp-content/uploads/2021/03/BM_Servus_%C2%A9_Djamila_Grossman-1-400x265.png 400w, https://www.buchstabenmuseum.de/wp-content/uploads/2021/03/BM_Servus_%C2%A9_Djamila_Grossman-1-600x398.png 600w, https://www.buchstabenmuseum.de/wp-content/uploads/2021/03/BM_Servus_%C2%A9_Djamila_Grossman-1-800x531.png 800w, https://www.buchstabenmuseum.de/wp-content/uploads/2021/03/BM_Servus_%C2%A9_Djamila_Grossman-1-1200x796.png 1200w, https://www.buchstabenmuseum.de/wp-content/uploads/2021/03/BM_Servus_%C2%A9_Djamila_Grossman-1.png 1213w" sizes="(max-width: 800px) 100vw, 1200px"></span></div><div><p>Become a member of the club and actively support our museum.<br>
We are always in need of help with the rescue of historic lettering, looking after our international guests or even with the classic work of the association.<br>
Just write to us!<br>
<a href="mailto:bindabei@buchstabenmuseum.de">bindabei@buchstabenmuseum.de</a></p>
</div></div>
							</div>
																													</div>  <!-- fusion-row -->
				</main>  <!-- #main -->
				
				
								
					
		 <!-- fusion-footer -->

		
					

												</div> <!-- #boxed-wrapper -->
		
		
		
		<a></a>

		

			
		

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scientists are discovering a powerful new way to prevent cancer (143 pts)]]></title>
            <link>https://www.economist.com/science-and-technology/2025/09/02/scientists-are-discovering-a-powerful-new-way-to-prevent-cancer</link>
            <guid>45472614</guid>
            <pubDate>Sat, 04 Oct 2025 11:44:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.economist.com/science-and-technology/2025/09/02/scientists-are-discovering-a-powerful-new-way-to-prevent-cancer">https://www.economist.com/science-and-technology/2025/09/02/scientists-are-discovering-a-powerful-new-way-to-prevent-cancer</a>, See on <a href="https://news.ycombinator.com/item?id=45472614">Hacker News</a></p>
Couldn't get https://www.economist.com/science-and-technology/2025/09/02/scientists-are-discovering-a-powerful-new-way-to-prevent-cancer: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Paged Out Issue #7 [pdf] (236 pts)]]></title>
            <link>https://pagedout.institute/download/PagedOut_007.pdf</link>
            <guid>45472319</guid>
            <pubDate>Sat, 04 Oct 2025 10:38:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pagedout.institute/download/PagedOut_007.pdf">https://pagedout.institute/download/PagedOut_007.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=45472319">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Alibaba cloud FPGA: the $200 Kintex UltraScale+ (243 pts)]]></title>
            <link>https://essenceia.github.io/projects/alibaba_cloud_fpga/</link>
            <guid>45471136</guid>
            <pubDate>Sat, 04 Oct 2025 06:49:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://essenceia.github.io/projects/alibaba_cloud_fpga/">https://essenceia.github.io/projects/alibaba_cloud_fpga/</a>, See on <a href="https://news.ycombinator.com/item?id=45471136">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2>Introduction<span><a href="#introduction" aria-label="Anchor">#</a></span></h2><p>I was recently in the market for a new FPGA to start building my upcoming projects on.</p><p>Due to the scale of my upcoming projects a Xilinx series 7 UltraScale+ FPGA of the Virtex family would be perfect,
but a Kintex series FPGA will be sufficient for early prototyping.
Due to not wanting to part ways with the eye watering amounts of money that is
required for an Vivado enterprise edition license
my choice was effectively narrowed to the FPGA chips available under the WebPack version of Vivado.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/xilinx_doc.png" alt="Xilinx supported boards per vivado edition"><figcaption>Xilinx supported boards per Vivado edition</figcaption></figure><p>Unsurprisingly Xilinx are well aware of how top of the range the Virtex series are,
and doesn’t offer any Virtex UltraScale+ chips with the webpack license.
That said, they do offer support for two very respectable Kintex UltraScale+ FPGA models, the <code>XCKU3P</code> and the <code>XCKU5P</code>.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/fpga_kintex.png" alt="Xiling product guide, overview for the Kintex UltraScale+ series"><figcaption>Xiling product guide, overview for the Kintex UltraScale+ series</figcaption></figure><p>These two chips are far from being small hobbyist toys, with the smaller <code>XCUK3P</code> already boasting +162K LUTs and
16 GTY transceivers, capable, depending on the physical constraints imposed by the chip packaging of
operating at up to 32.75Gb/s.</p><p>Now that the chip selection has been narrowed down I set out to look for a dev board.</p><p>My requirements for the board where that it featured :</p><ul><li>at least 2 SFP+ or 1 QSFP connector</li><li>a JTAG interface</li><li>a PCIe interface at least x8 wide</li></ul><p>As to where to get the board from, my options where :</p><ol><li>Design the board myself</li><li>Get the AXKU5 or AXKU3 from Alinx</li><li>See what I could unearth on the second hand market</li></ol><p>Although option <code>1</code> could have been very interesting, designing a
dev board with both a high speed PCIe and ethernet interface was not the goal of
today’s project.</p><p>As for option <code>2</code>,
Alinx is newer vendor that is still building up its credibility in the west,
their technical documentation is a bit sparse, but the feedback seems to be positive with no major issues being reported.
Most importantly, Alinx provided very fairly priced development boards
in the 900 to 1050 dollar range ( +150$ for the HPC FMC SFP+ extension board ).
Although these are not cheap by any metric, compared to the competitions
price point, they are the best value.</p><p>Option <code>2</code> was coming up ahead until I stumbled upon this ebay listing :</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/ebay.png" alt="Ebay listing for a decommissioned Alibaba Cloud accelerator FPGA"><figcaption>Ebay listing for a decommissioned Alibaba Cloud accelerator FPGA</figcaption></figure><p>For 200$ this board featured a <code>XCKU3P-FFVB676</code>, 2 SPF+ connector and a x8 PCIe interface.
On the flip side it came with no documentation whatsoever, no guaranty it worked, and the
faint promise in the listing that there was a JTAG interface.
A sane person would likely have dismissed this as an interesting internet oddity, a remanence
of what happens when a generation of accelerator cards gets phased out in favor of the next,
or maybe just an expensive paperweight.</p><p>But I like a challenge, and the appeal of unlocking the 200$ Kintex UltraScale+ development board
was too great to ignore.</p><p>As such, I aim for this article to become the documentation paving the way to though this mirage.</p><h2>The debugger challenge<span><a href="#the-debugger-challenge" aria-label="Anchor">#</a></span></h2><p>Xilinx’s UG908 Programming and Debugging User Guide (Appendix D) specifies their blessed JTAG probe ecosystem for FPGA configuration and debug. Rather than dropping $100+ on yet another proprietary dongle that’ll collect dust after the project ends, I’m exploring alternatives.
The obvious tradeoff: abandoning Xilinx’s toolchain means losing ILA integration. However, the ILA fundamentally just captures samples and streams them via JTAG USER registers, there’s nothing preventing us from building our own logic analyzer with equivalent functionality and a custom host interface.</p><p>Enter OpenOCD. While primarily targeting ARM/RISC-V SoCs, it maintains an impressive database of supported probe hardware and provides granular control over JTAG operations. More importantly, it natively supports SVF (Serial Vector Format), a vendor-neutral bitstream format that Vivado can export.</p><p>The documentation landscape is admittedly sparse for anything beyond 7-series FPGAs, and the most recent OpenOCD documentation I could unearth was focused on Zynq ARM core debugging rather than fabric configuration. But the fundamentals remain sound: JTAG is JTAG, SVF is standardized, and the boundary scan architecture hasn’t fundamentally changed.</p><p>The approach should be straightforward: generate SVF from Vivado, feed it through OpenOCD with a commodity JTAG adapter, and validate the configuration. Worst case, we’ll need to patch some adapter-specific quirks or boundary scan chain register addresses.
Time to find out if this theory holds up in practice.</p><h2>The plan<span><a href="#the-plan" aria-label="Anchor">#</a></span></h2><p>So, to resume, the current plan is to buy a second hand hardware accelerator of eBay at a too good to be true price, and try to configure it
with an unofficial probe using open source software without any clear official support.<br>The answer to the obvious question you are thinking if you, like me, have been around the block a few times is: many things.</p><p>As such, we need a plan for approaching this.
The goal of this plan is to outline incremental steps that will build upon themselves with the end goal of being able to use this as a dev board.</p><h3>1 - Confirming the board works<span><a href="#1---confirming-the-board-works" aria-label="Anchor">#</a></span></h3><p>First order of business will be to confirm the board is showing signs of working as intended.</p><p>There is a high probability that the flash wasn’t wiped before this board was sold off, as such the previous bitstream should
still be in the flash.
Given this board was used as an accelerator, we should be able to use that to confirm the board is working by either checking if
the board is presenting itself as a PCIe endpoint or if the SFP’s are sending the ethernet PHY idle sequence.</p><h3>2 - Connecting a debugger to it<span><a href="#2---connecting-a-debugger-to-it" aria-label="Anchor">#</a></span></h3><p>The next step is going to be to try and connect the debugger.
The eBay listing advertised there is a JTAG interface, but the picture is grainy enough that where that JTAG is and what pins are
available is unclear.</p><p>Additionally, we have no indication of what devices are daisy chained together onto the JTAG scan chain.
This is an essential question for flashing over JTAG, so it will need to be figured out.</p><p>At this point, it would also be strategic to try and do some more probing into the FPGA via JTAG.
Xilinx FPGAs
exposes a handful of useful system registers accessible over JTAG. The most well known of these interfaces is the
SYSMON, which allows us, among other things, to get real time temperature and voltage reading from inside the chip.
Although openOCD doesn’t have SYSMON support out of the box it would be worth while to build it, to :</p><ol><li>Familiarise myself with openOCD scripting, this might come in handy when building my ILA replacement down the line</li><li>Having an easy side channel to monitor FPGA operating parameters</li><li>Make a contribution to openOCD as it have support for the interfacing with XADC but not SYSMON</li></ol><h3>3 - Figuring out the Pinout<span><a href="#3---figuring-out-the-pinout" aria-label="Anchor">#</a></span></h3><p>The hardest part will be figuring out the FPGA’s pinout and my clock sources.
The questions that need answering are :</p><ul><li>what external clocks sources do I have, what are there frequencies and which pins are they connected to</li><li>which transceivers are the SFPs connected to</li><li>which transceivers is the PCIe connected to</li></ul><h3>4 - Writing a bitstream<span><a href="#4---writing-a-bitstream" aria-label="Anchor">#</a></span></h3><p>For now I will be focusing on writing a temporary configurations over JTAG to the CCLs and not re-writing the flash.</p><p>That plan is to trying writing either the bitstream directly though openOCD’s <code>virtex2</code> + <code>pld</code> drivers, or by replaying the
SVF generated by Vivado.</p><p>Since I believe a low iteration time is paramount to project velocity and getting big things done, I also want automatize
all of the Vivado flow from taking the rtl to the SVF generation.</p><p>Simple enough ?</p><h2>Liveness test<span><a href="#liveness-test" aria-label="Anchor">#</a></span></h2><p>A few days later my prize arrived via express mail.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/fpga.jpg" alt="fpga"><figcaption>My prized Kintex UltraScale+ FPGA board also known as the decommissioned Alibaba cloud accelerator. Jammed transceiver now safely removed.</figcaption></figure><p>Unexpectedly it even came with a free 25G SFP28 Huawei transceiver rated for a 300m distance and a single 1m long OS2 fiber patch cable.
This was likely not intentional as the transceiver was jammed in the SFP cage, but it was still very generous of them to include the fiber patch cable.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/free_stuff.jpg" alt="Additional SFP28-25G-1310nm-300m-SM Huawei transceiver, and 1m long OS2 patch cable"><figcaption>Free additional SFP28-25G-1310nm-300m-SM Huawei transceiver, and 1m long OS2 patch cable</figcaption></figure><p>The board also came with a travel case and half of a PCIe to USB adapter and a 12V power supply that one could use to power the board as a standalone device. Although this standalone configuration will not be of any use to me, for those looking to develop just networking interfaces without any PCIe interface, this could come in handy.</p><p>Overall the board looked a little worn, but both the transceiver cages and PCIe connectors didn’t look to be damaged.</p><h3>Standalone configuration<span><a href="#standalone-configuration" aria-label="Anchor">#</a></span></h3><p>Before real testing could start I first did a small power-up test using the PCIe to USB adapter that the seller provided.
I was able to do a quick check using the LEDs and the FPGAs dissipated heat that the board seemed to be powering up at a surface level (pun intended).</p><h3>PCIe interface<span><a href="#pcie-interface" aria-label="Anchor">#</a></span></h3><p><span><span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentcolor" d="M506.3 417 293 53c-16.33-28-57.54-28-73.98.0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6c32.76.0 53.26-35 36.96-63zM232 168c0-13.25 10.75-24 24-24s24 10.8 24 24v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zm24 248c-17.36.0-31.44-14.08-31.44-31.44s14.07-31.44 31.44-31.44 31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z"></path></svg>
</span></span><span>As a reminder, this next section relies on the flash not having been wiped and still containing the previous user’s design.</span></p><p>Since I didn’t want to directly plug mystery hardware into my prized build server, I decided to use a Raspberry Pi 5 as
my sacrificial test device and got myself an external PCIe adapter.</p><p>It just so happened that the latest Raspberry Pi version, the Pi 5, now features an external PCIe Gen 2.0 x1 interface.
Though our FPGA can handle up to a PCIe Gen 3.0 and the board had a x8 wide interface,
since PCIe standard is backwards compatible and the number of lanes on the interface can be downgraded,
plugging our FPGA with this Raspberry Pi will work.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/pi.jpg" alt="FPGA board connected to the Raspberry Pi 5 via the PCIe to PCIe x1 adapter"><figcaption>FPGA board connected to the Raspberry Pi 5 via the PCIe to PCIe x1 adapter</figcaption></figure><p>After both the Raspberry and the FPGA were booted, I SSHed into my rpi and
started looking for the PCIe enumeration sequence logged from the Linux
PCIe core subsystem.</p><p><code>dmesg</code> log :</p><pre tabindex="0"><code>[    0.388790] pci 0000:00:00.0: [14e4:2712] type 01 class 0x060400
[    0.388817] pci 0000:00:00.0: PME# supported from D0 D3hot
[    0.389752] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.495733] brcm-pcie 1000110000.pcie: link up, 5.0 GT/s PCIe x1 (!SSC)
[    0.495759] pci 0000:01:00.0: [dabc:1017] type 00 class 0x020000
</code></pre><h4>Background information<span><a href="#background-information" aria-label="Anchor">#</a></span></h4><p>Since most people might not be intimately as familiar with PCIe terminology, allow me to
quickly document what is going on here.</p><p><code>0000:00:00.0</code>: is the identifier of a specific PCIe device connected through the PCIe network
to the kernel, it read as <code>domain</code>:<code>bus</code>:<code>device</code>.<code>function</code>.</p><p><code>[14e4:2712]</code>: is the device’s <code>[vendor id:device id]</code>, these vendor id identifiers are
assigned by the PCI standard body to hardware vendors. Vendors are then free to define there
own vendor id’s.</p><p>The full list of official vendor id’s and released device id can be found : <a href="https://admin.pci-ids.ucw.cz/read/PC/14e4" target="_blank">https://admin.pci-ids.ucw.cz/read/PC/14e4</a> or in
the linux kernel code : <a href="https://github.com/torvalds/linux/blob/7aac71907bdea16e2754a782b9d9155449a9d49d/include/linux/pci_ids.h#L160-L3256" target="_blank">https://github.com/torvalds/linux/blob/7aac71907bdea16e2754a782b9d9155449a9d49d/include/linux/pci_ids.h#L160-L3256</a></p><p><code>type 01</code>: PCIe has two types of devices, bridges allowing the connection of multiple downstream devices to an
upstream device, and endpoints are the leafs.
Bridges are of type <code>01</code> and endpoints of type <code>00</code>.</p><p><code>class 0x60400</code>: is the PCIe device class, it categorizes the kind of function the device performs. It
uses the following format <code>0x[Base Class (8 bits)][Sub Class (8 bits)][Programming Interface (8 bits)]</code>,
( note : the sub class field might be unused ).</p><p>A list of class and sub class identifiers can be found: <a href="https://admin.pci-ids.ucw.cz/read/PD" target="_blank">https://admin.pci-ids.ucw.cz/read/PD</a> or again in the linux codebase : <a href="https://github.com/torvalds/linux/blob/7aac71907bdea16e2754a782b9d9155449a9d49d/include/linux/pci_ids.h#L15-L158" target="_blank">https://github.com/torvalds/linux/blob/7aac71907bdea16e2754a782b9d9155449a9d49d/include/linux/pci_ids.h#L15-L158</a></p><h4>Dmesg log<span><a href="#dmesg-log" aria-label="Anchor">#</a></span></h4><p>The two most interesting lines of the <code>dmesg</code> log are :</p><pre tabindex="0"><code>[    0.388790] pci 0000:00:00.0: [14e4:2712] type 01 class 0x060400
[    0.495759] pci 0000:01:00.0: [dabc:1017] type 00 class 0x020000
</code></pre><p>Firstly the PCIe subsystem logs that at <code>0000:00:00.0</code> it has discovered a Broadcom BCM2712 PCIe Bridge ( vendor id <code>14e4</code>, device id <code>0x2712</code> ).This bridge (type <code>01</code>) class <code>0x0604xx</code> tells us it is a PCI-to-PCI bridge, meaning it is essentially creating additional PCIe lanes downstream for endpoint devices or additional bridges.</p><p>The subsystem then discovers a second device at <code>0000:01:00.0</code>, this is an endpoint (type <code>00</code>), and class <code>0x02000</code> tells us it is an ethernet networking equipment.<br>Of note <code>dabc</code> doesn’t correspond to a known vendor id.
When designing a PCIe interface in hardware these
are parameters we can configured. Additionally, among the different ways Linux uses to identify which driver to load for a PCIe device
the vendor id and device id can be used for matching. Supposing we are implementing custom logic, in order to prevent any bug where the wrong driver
might be loaded, it is best to use a separate vendor id.
This also helps identify your custom accelerator at a glance and use it to load your custom driver.</p><p>As such, it is not surprising to see an unknown vendor id appear for
an FPGA, this with the class as an ethernet networking device is a strong hint this is our board.</p><h4>Full PCIe device status<span><a href="#full-pcie-device-status" aria-label="Anchor">#</a></span></h4><p>Dmesg logs have already given us a good indication that our FPGA board and its PCIe interface was working but to confirm with certainty that the device with vendor id <code>dabc</code> is our FPGA we now turn to <code>lspci</code>.
<code>lspci -vvv</code> is the most verbose output and gives us a full overview of the detected PCIe devices capabilities and current configurations.</p><p>Broadcom bridge:</p><pre tabindex="0"><code>0000:00:00.0 PCI bridge: Broadcom Inc. and subsidiaries BCM2712 PCIe Bridge (rev 21) (prog-if 00 [Normal decode])
        Control: I/O- Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx-
        Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- &lt;MAbort- &gt;SERR- &lt;PERR- INTx-
        Latency: 0
        Interrupt: pin A routed to IRQ 38
        Bus: primary=00, secondary=01, subordinate=01, sec-latency=0
        Memory behind bridge: [disabled] [32-bit]
        Prefetchable memory behind bridge: 1800000000-182fffffff [size=768M] [32-bit]
        Secondary status: 66MHz- FastB2B- ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- &lt;MAbort- &lt;SERR- &lt;PERR-
        BridgeCtl: Parity- SERR- NoISA- VGA- VGA16- MAbort- &gt;Reset- FastB2B-
                PriDiscTmr- SecDiscTmr- DiscTmrStat- DiscTmrSERREn-
        Capabilities: [48] Power Management version 3
                Flags: PMEClk- DSI- D1- D2- AuxCurrent=0mA PME(D0+,D1-,D2-,D3hot+,D3cold-)
                Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=1 PME-
        Capabilities: [ac] Express (v2) Root Port (Slot-), MSI 00
                DevCap: MaxPayload 512 bytes, PhantFunc 0
                        ExtTag- RBE+
                DevCtl: CorrErr- NonFatalErr- FatalErr- UnsupReq-
                        RlxdOrd+ ExtTag- PhantFunc- AuxPwr+ NoSnoop+
                        MaxPayload 512 bytes, MaxReadReq 512 bytes
                DevSta: CorrErr- NonFatalErr- FatalErr- UnsupReq- AuxPwr- TransPend-
                LnkCap: Port #0, Speed 5GT/s, Width x1, ASPM L0s L1, Exit Latency L0s &lt;2us, L1 &lt;4us
                        ClockPM+ Surprise- LLActRep- BwNot+ ASPMOptComp+
                LnkCtl: ASPM Disabled; RCB 64 bytes, Disabled- CommClk-
                        ExtSynch- ClockPM- AutWidDis- BWInt- AutBWInt-
                LnkSta: Speed 5GT/s, Width x1
                        TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt+
                RootCap: CRSVisible+
                RootCtl: ErrCorrectable- ErrNon-Fatal- ErrFatal- PMEIntEna+ CRSVisible+
                RootSta: PME ReqID 0000, PMEStatus- PMEPending-
                DevCap2: Completion Timeout: Range ABCD, TimeoutDis+ NROPrPrP- LTR+
                         10BitTagComp- 10BitTagReq- OBFF Via WAKE#, ExtFmt- EETLPPrefix-
                         EmergencyPowerReduction Not Supported, EmergencyPowerReductionInit-
                         FRS- LN System CLS Not Supported, TPHComp- ExtTPHComp- ARIFwd+
                         AtomicOpsCap: Routing- 32bit- 64bit- 128bitCAS-
                DevCtl2: Completion Timeout: 50us to 50ms, TimeoutDis- LTR- 10BitTagReq- OBFF Disabled, ARIFwd-
                         AtomicOpsCtl: ReqEn- EgressBlck-
                LnkCap2: Supported Link Speeds: 2.5-5GT/s, Crosslink- Retimer- 2Retimers- DRS+
                LnkCtl2: Target Link Speed: 5GT/s, EnterCompliance- SpeedDis-
                         Transmit Margin: Normal Operating Range, EnterModifiedCompliance- ComplianceSOS-
                         Compliance Preset/De-emphasis: -6dB de-emphasis, 0dB preshoot
                LnkSta2: Current De-emphasis Level: -6dB, EqualizationComplete- EqualizationPhase1-
                         EqualizationPhase2- EqualizationPhase3- LinkEqualizationRequest-
                         Retimer- 2Retimers- CrosslinkRes: unsupported, DRS-
                         DownstreamComp: Link Up - Present
        Capabilities: [100 v1] Advanced Error Reporting
                UESta:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
                UEMsk:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
                UESvrt: DLP+ SDES+ TLP- FCP+ CmpltTO- CmpltAbrt- UnxCmplt- RxOF+ MalfTLP+ ECRC- UnsupReq- ACSViol-
                CESta:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr-
                CEMsk:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr+
                AERCap: First Error Pointer: 00, ECRCGenCap+ ECRCGenEn- ECRCChkCap+ ECRCChkEn-
                        MultHdrRecCap- MultHdrRecEn- TLPPfxPres- HdrLogCap-
                HeaderLog: 00000000 00000000 00000000 00000000
                RootCmd: CERptEn+ NFERptEn+ FERptEn+
                RootSta: CERcvd- MultCERcvd- UERcvd- MultUERcvd-
                         FirstFatal- NonFatalMsg- FatalMsg- IntMsg 0
                ErrorSrc: ERR_COR: 0000 ERR_FATAL/NONFATAL: 0000
        Capabilities: [160 v1] Virtual Channel
                Caps:   LPEVC=0 RefClk=100ns PATEntryBits=1
                Arb:    Fixed- WRR32- WRR64- WRR128-
                Ctrl:   ArbSelect=Fixed
                Status: InProgress-
                VC0:    Caps:   PATOffset=00 MaxTimeSlots=1 RejSnoopTrans-
                        Arb:    Fixed- WRR32- WRR64- WRR128- TWRR128- WRR256-
                        Ctrl:   Enable+ ID=0 ArbSelect=Fixed TC/VC=ff
                        Status: NegoPending- InProgress-
        Capabilities: [180 v1] Vendor Specific Information: ID=0000 Rev=0 Len=028 &lt;?&gt;
        Capabilities: [240 v1] L1 PM Substates
                L1SubCap: PCI-PM_L1.2+ PCI-PM_L1.1+ ASPM_L1.2+ ASPM_L1.1+ L1_PM_Substates+
                          PortCommonModeRestoreTime=8us PortTPowerOnTime=10us
                L1SubCtl1: PCI-PM_L1.2- PCI-PM_L1.1- ASPM_L1.2- ASPM_L1.1-
                           T_CommonMode=1us LTR1.2_Threshold=0ns
                L1SubCtl2: T_PwrOn=10us
        Capabilities: [300 v1] Secondary PCI Express
                LnkCtl3: LnkEquIntrruptEn- PerformEqu-
                LaneErrStat: 0
        Kernel driver in use: pcieport
</code></pre><p>FPGA board:</p><pre tabindex="0"><code>0000:01:00.0 Ethernet controller: Device dabc:1017
        Subsystem: Red Hat, Inc. Device a001
        Control: I/O- Mem- BusMaster- SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx-
        Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- &lt;MAbort- &gt;SERR- &lt;PERR- INTx-
        Region 0: Memory at 1820000000 (64-bit, prefetchable) [disabled] [size=2K]
        Region 2: Memory at 1800000000 (64-bit, prefetchable) [disabled] [size=512M]
        Capabilities: [40] Power Management version 3
                Flags: PMEClk- DSI- D1- D2- AuxCurrent=0mA PME(D0-,D1-,D2-,D3hot-,D3cold-)
                Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=0 PME-
        Capabilities: [70] Express (v2) Endpoint, MSI 00
                DevCap: MaxPayload 1024 bytes, PhantFunc 0, Latency L0s &lt;64ns, L1 &lt;1us
                        ExtTag+ AttnBtn- AttnInd- PwrInd- RBE+ FLReset- SlotPowerLimit 0W
                DevCtl: CorrErr+ NonFatalErr+ FatalErr+ UnsupReq+
                        RlxdOrd+ ExtTag+ PhantFunc- AuxPwr- NoSnoop+
                        MaxPayload 512 bytes, MaxReadReq 512 bytes
                DevSta: CorrErr- NonFatalErr- FatalErr- UnsupReq- AuxPwr- TransPend-
                LnkCap: Port #0, Speed 8GT/s, Width x8, ASPM not supported
                        ClockPM- Surprise- LLActRep- BwNot- ASPMOptComp+
                LnkCtl: ASPM Disabled; RCB 64 bytes, Disabled- CommClk-
                        ExtSynch- ClockPM- AutWidDis- BWInt- AutBWInt-
                LnkSta: Speed 5GT/s (downgraded), Width x1 (downgraded)
                        TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-
                DevCap2: Completion Timeout: Range BC, TimeoutDis+ NROPrPrP- LTR-
                         10BitTagComp- 10BitTagReq- OBFF Not Supported, ExtFmt- EETLPPrefix-
                         EmergencyPowerReduction Not Supported, EmergencyPowerReductionInit-
                         FRS- TPHComp- ExtTPHComp-
                         AtomicOpsCap: 32bit- 64bit- 128bitCAS-
                DevCtl2: Completion Timeout: 50us to 50ms, TimeoutDis- LTR- 10BitTagReq- OBFF Disabled,
                         AtomicOpsCtl: ReqEn-
                LnkCap2: Supported Link Speeds: 2.5-8GT/s, Crosslink- Retimer- 2Retimers- DRS-
                LnkCtl2: Target Link Speed: 8GT/s, EnterCompliance- SpeedDis-
                         Transmit Margin: Normal Operating Range, EnterModifiedCompliance- ComplianceSOS-
                         Compliance Preset/De-emphasis: -6dB de-emphasis, 0dB preshoot
                LnkSta2: Current De-emphasis Level: -6dB, EqualizationComplete- EqualizationPhase1-
                         EqualizationPhase2- EqualizationPhase3- LinkEqualizationRequest-
                         Retimer- 2Retimers- CrosslinkRes: unsupported
        Capabilities: [100 v1] Advanced Error Reporting
                UESta:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
                UEMsk:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
                UESvrt: DLP+ SDES+ TLP- FCP+ CmpltTO- CmpltAbrt- UnxCmplt- RxOF+ MalfTLP+ ECRC- UnsupReq- ACSViol-
                CESta:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr-
                CEMsk:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr+
                AERCap: First Error Pointer: 00, ECRCGenCap- ECRCGenEn- ECRCChkCap- ECRCChkEn-
                        MultHdrRecCap- MultHdrRecEn- TLPPfxPres- HdrLogCap-
                HeaderLog: 00000000 00000000 00000000 00000000
        Capabilities: [1c0 v1] Secondary PCI Express
                LnkCtl3: LnkEquIntrruptEn- PerformEqu-
                LaneErrStat: 0
</code></pre><p>For our board, the following lines are particularly interesting:</p><pre tabindex="0"><code>                LnkCap: Port #0, Speed 8GT/s, Width x8, ASPM not supported
                        ClockPM- Surprise- LLActRep- BwNot- ASPMOptComp+
                LnkCtl: ASPM Disabled; RCB 64 bytes, Disabled- CommClk-
                        ExtSynch- ClockPM- AutWidDis- BWInt- AutBWInt-
                LnkSta: Speed 5GT/s (downgraded), Width x1 (downgraded)0x060400
</code></pre><p>The <code>LnkCap</code> tells us about the full capabilities of this PCIe device, here we can see that
the current design supports PCIe Gen 3.0 x8.
The <code>LnkSta</code> tells us the current configuration, here we have been downgraded to PCIe Gen 2.0 at 5GT/s with a width of only x1.</p><p>During startup of when a new PCIe device is plugged, PCIe performs a link speed and width negotiation
where it tries to reach the highest supported stable configuration for the current system.
In our current system, though our FPGA is capable of 8GT/s, as it is located downstream of the
Broadcom bridge with a maximum link capacity of Gen 2.0 ( 5GT/s ), the FPGA has been downgraded to 5GT/s.</p><p>As for the width of x1, that is expected since the Broadcom bridge is also only x1 wide, and our board’s other
7 PCIe lanes are literally hanging over the side.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/pcie_air.jpg" alt="7 PCIe lanes left unconnected and hanging over the air"><figcaption>7 PCIe lanes left unconnected and hanging over the air</figcaption></figure><p>Thus, we can finally confirm that this is our board and that the PCIe interface is working.
We can now proceed to establishing the JTAG connection.</p><h2>JTAG interface<span><a href="#jtag-interface" aria-label="Anchor">#</a></span></h2><p>Xilinx FPGAs can be configured by writing a bitstream to their internal CMOS Configuration Latches (CCL).
CCL is SRAM memory and volatile, thus the configuration is re-done on every power cycle.
For devices in the field this bitstream would be read from an external SPI memory during initialization,
or written from an external device, such as an embedded controller. But for development purposes overwriting the contents of the CCLs over JTAG is acceptable.</p><p>This configuration is done by shifting in the entire FPGA bitstream into the device’s configuration logic over the JTAG bus.</p><h3>FPGA board JTAG interface<span><a href="#fpga-board-jtag-interface" aria-label="Anchor">#</a></span></h3><p>As promised by the original eBay listing the board did come with an accessible JTAG interface, and gloriously enough, this time there
wasn’t even the need for any additional soldering.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/pcb_jtag.jpg" alt="View of the JTAG interface on the PCB"><figcaption>View of the JTAG interface on the PCB</figcaption></figure><p>In addition to a power reference, and ground, conformely to the Xilinx JTAG interface it featured the four mandatory signals comprising the JTAG TAP :</p><ul><li><strong>TCK</strong> Test Clock</li><li><strong>TMS</strong> Test Mode Select</li><li><strong>TDI</strong> Test Data Input</li><li><strong>TDO</strong> Test Data Output</li></ul><p>Of note, the JTAG interface can also come with an independent reset signal.
But since Xilinx JTAG interfaces do not have this independent reset signal, we be using the JTAG FSM reset state
for our reset signal.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/board_jtag_intf.svg" alt="very nice documentation of the board JTAG pinout"><figcaption>6 pin board JTAG interface</figcaption></figure><p>This interface layout doesn’t follow a standard layout so I cannot just plug in one of my debug probes, it requires some re-wiring.</p><h3>Segger JLINK :heart:<span><a href="#segger-jlink-heart" aria-label="Anchor">#</a></span></h3><p>I do not own an AMD approved JTAG programmer.</p><p>Traditionally speaking, the Segger JLink is used for debugging embedded CPUs let them be standalone or in a
Zynq, and not for configuring FPGAs.</p><p>That said, all we need to do is use JTAG to shift in a bitstream to the CCLs, so
technically speaking any programmable device with 4 sufficiently fast GPIOs can be used as a JTAG programmer.
Additionally, the JLink is well supported by OpenOCD, the JLink’s libraries are open source, and I happened to own one.</p><p><span><span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentcolor" d="M256 0C114.6.0.0 114.6.0 256s114.6 256 256 256 256-114.6 256-256S397.4.0 256 0zm0 128c17.67.0 32 14.33 32 32 0 17.67-14.33 32-32 32s-32-14.3-32-32 14.3-32 32-32zm40 256h-80c-13.2.0-24-10.7-24-24s10.75-24 24-24h16v-64h-8c-13.25.0-24-10.75-24-24s10.8-24 24-24h32c13.25.0 24 10.75 24 24v88h16c13.25.0 24 10.75 24 24s-10.7 24-24 24z"></path></svg>
</span></span><span>Note : I could also have used a USB Blaster, which considering it is literally an Altera tool would have made it hilarious.</span></p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/segger_jlink_conn.svg" alt="very nice 20 pin segger JLink pinout interface documentation"><figcaption>20 pin segger JLink pinout</figcaption></figure><h4>Wiring<span><a href="#wiring" aria-label="Anchor">#</a></span></h4><p>Rewiring :</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/jtag_wiring.svg" alt="very nice JTAG wiring diagram to connect JLink jtag probe to fpga board"><figcaption>Wiring diagram to connect JLink JTAG probe to the board.</figcaption></figure><p>JTAG is a parallel protocol where <code>TDI</code> and <code>TMS</code> will be captured according to <code>TCK</code>.
Because of this, good JTAG PCB trace length matching is advised in order to minimize skew.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/jtag_timing.png" alt="Timing Waveform for JTAG Signals (From Target Device Perspective)"><figcaption>Timing Waveform for JTAG Signals (From Target Device Perspective); source : <a href="https://www.intel.com/content/www/us/en/docs/programmable/683719/current/jtag-timing-constraints-and-waveforms.html" target="_blank">https://www.intel.com/content/www/us/en/docs/programmable/683719/current/jtag-timing-constraints-and-waveforms.html</a></figcaption></figure><p>Ideally a custom connector with length matched traces to work as an interface between the JLink’s
probe and a board specific connector would be used.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/con.jpg" alt="Far from length matched JTAG connections"><figcaption>Far from length matched JTAG connections</figcaption></figure><p>Yet, here we are shoving breadboard wires between our debugger and the board.
Since OpenOCD allows us to easily control the debugger clock speed, we can increase the skew tolerance by slowing down the TCK clock signal. As such
there is no immediate need for a custom connector but we will not be able to reach the maximum JTAG speeds.</p><p><span><span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentcolor" d="M506.3 417 293 53c-16.33-28-57.54-28-73.98.0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6c32.76.0 53.26-35 36.96-63zM232 168c0-13.25 10.75-24 24-24s24 10.8 24 24v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zm24 248c-17.36.0-31.44-14.08-31.44-31.44s14.07-31.44 31.44-31.44 31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z"></path></svg>
</span></span><span>If no clock speed is specified OpenOCD sets the clock speed at 100MHz.
This is too high in our case.
As such, latter in the article, I will be setting the JTAG clock down to 1MHz for probing and reset, programming will be done at 10MHz.<br>No issues were encountered at these speeds.</span></p><h3>OpenOCD<span><a href="#openocd" aria-label="Anchor">#</a></span></h3><p>OpenOCD is a free and open source on-chip debugger software that aims to be compatible with as many
probes, boards and chips as possible.</p><p>Since OpenOCD has support for the standard SVF file format, my plan for my flashing flow will be to use
Vivado to generate the SVF and have OpenOCD flash it.
Now, some of you might be starting to notice that I am diverging quite far from the well lit path of officially
supported tools. Not only am I using a not officially supported debug probe, but I am also using some
obscure open source software with questionable support for interfacing with Xilinx UltraScale+ FPGAs.
You might be wondering, given that the officially supported tools can already prove themselves to be a headache to get working properly,
why am I seemingly making my life even harder?</p><p>The reason is quite simple: when things inevitably start going wrong, as they will,
having an entirely open toolchain, allows me to have more visibility
as to what is going on and the ability to fix it.
I cannot delve into a black box.</p><h4>Building OpenOCD<span><a href="#building-openocd" aria-label="Anchor">#</a></span></h4><p>By default the version of OpenOCD that I got on my server via the official packet manager was outdated and missing features
I will need.</p><p>Also, since saving the ability to modify OpenOCD’s source code could come in handy, I decided to re-build it from source.</p><p>Thus, in the following logs, I will be running OpenOCD version <code>0.12.0+dev-02170-gfcff4b712</code>.</p><p>Note : I have also re-build the JLink libs from source.</p><h3>Determining the scan chain<span><a href="#determining-the-scan-chain" aria-label="Anchor">#</a></span></h3><p>Since I do not have the schematics for the board I do not know how many devices are daisy-chainned on the board JTAG bus.
Also, I want to confirm if the FPGA on the ebay listing is actually the one on the board.
In JTAG, each chained device exposes an accessible <code>IDCODE</code> register used to identify the manufacturer, device type, and revision number.</p><p>When setting up the JTAG server, we typically define the scan chain by specifying the expected <code>IDCODE</code> for each TAP and the corresponding instruction register length, so that instructions can be correctly aligned and routed to the intended device.
Given this is an undocumented board off Ebay, I do not know what the chain looks like.
Fortunately, OpenOCD has an autoprobing functionality, to do a blind interrogation in an <strong>attempt</strong> to discover
the available devices.</p><p>Thus, my first order of business was doing this autoprobing.</p><p>In OpenOCD the autoprobing is done when the configuration does not specify any taps.</p><div><pre tabindex="0"><code data-lang="tcl"><span><span>source <span>[</span>find interface<span>/</span>jlink.cfg<span>]</span>
</span></span><span><span>transport select jtag
</span></span><span><span>
</span></span><span><span><span>set</span> SPEED <span>1</span>
</span></span><span><span>jtag_rclk $SPEED
</span></span><span><span>adapter speed $SPEED
</span></span><span><span>
</span></span><span><span>reset_config none
</span></span></code></pre></div><p>The blind interrogation successfully discovered a single device on the chain with an <code>IDCODE</code> of <code>0x04a63093</code>.</p><pre tabindex="0"><code>gp@workhorse:~/tools/openocd_jlink_test/autoprob$ openocd
Open On-Chip Debugger 0.12.0+dev-02170-gfcff4b712 (2025-09-04-21:02)
Licensed under GNU GPL v2
For bug reports, read
	http://openocd.org/doc/doxygen/bugs.html
none separate
Info : Listening on port 6666 for tcl connections
Info : Listening on port 4444 for telnet connections
Info : J-Link V10 compiled Jan 30 2023 11:28:07
Info : Hardware version: 10.10
Info : VTarget = 1.812 V
Info : clock speed 1 kHz
Warn : There are no enabled taps.  AUTO PROBING MIGHT NOT WORK!!
Info : JTAG tap: auto0.tap tap/device found: 0x04a63093 (mfg: 0x049 (Xilinx), part: 0x4a63, ver: 0x0)
Warn : AUTO auto0.tap - use "jtag newtap auto0 tap -irlen 2 -expected-id 0x04a63093"
Error: IR capture error at bit 2, saw 0x3ffffffffffffff5 not 0x...3
Warn : Bypassing JTAG setup events due to errors
Warn : gdb services need one or more targets defined
</code></pre><p>Comparing against the <code>UltraScale Architecture Configuration User Guide (UG570)</code> we see that this <code>IDCODE</code> matches up
precisely with the expected value for the <code>KU3P</code>.</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/idcode.png" alt="JTAG and IDCODE for UltraScale Architecture-based FPGAs"><figcaption>JTAG and IDCODE for UltraScale Architecture-based FPGAs</figcaption></figure><p>By default OpenOCD assumes a JTAG IR length of 2 bits, while our FPGA has an IR length of 6 bits.
This is the cause behind the IR capture error encountered during autoprobing. By updating the script with an IR length of 6 bits we can re-detect the FPGA with no errors.</p><div><pre tabindex="0"><code data-lang="tcl"><span><span>source <span>[</span>find interface<span>/</span>jlink.cfg<span>]</span>
</span></span><span><span>transport select jtag
</span></span><span><span>
</span></span><span><span><span>set</span> SPEED <span>1</span>
</span></span><span><span>jtag_rclk $SPEED
</span></span><span><span>adapter speed $SPEED
</span></span><span><span>
</span></span><span><span>reset_config none
</span></span><span><span>
</span></span><span><span>jtag newtap auto_detect tap <span>-</span>irlen <span>6</span>
</span></span></code></pre></div><p>Output :</p><pre tabindex="0"><code>gp@workhorse:~/tools/openocd_jlink_test/autoprob$ openocd
Open On-Chip Debugger 0.12.0+dev-02170-gfcff4b712 (2025-09-04-21:02)
Licensed under GNU GPL v2
For bug reports, read
	http://openocd.org/doc/doxygen/bugs.html
Info : Listening on port 6666 for tcl connections
Info : Listening on port 4444 for telnet connections
Info : J-Link V10 compiled Jan 30 2023 11:28:07
Info : Hardware version: 10.10
Info : VTarget = 1.812 V
Info : clock speed 1 kHz
Info : JTAG tap: auto_detect.tap tap/device found: 0x04a63093 (mfg: 0x049 (Xilinx), part: 0x4a63, ver: 0x0)
Warn : gdb services need one or more targets defined
</code></pre><p>Based on the probing, this is the JTAG scan chain for our board :</p><figure><img src="https://essenceia.github.io/projects/alibaba_cloud_fpga/scan_chain.svg" alt="JTAG scan chain for the alibaba cloud FPGA"><figcaption>JTAG scan chain for the alibaba cloud FPGA</figcaption></figure><h3>System Monitor Registers<span><a href="#system-monitor-registers" aria-label="Anchor">#</a></span></h3><p>Previous generations of Xilinx FPGA had a system called the XADC that, among other features,
allowed you to acquire chip temperature and voltage readings. The newer UltraScale and UltraScale+
family have deprecated this XADC module in favor of the SYSMON (and SYSMON4) which allows you to also
get these temperature readings, just better.</p><p>Unfortunately, openOCD didn’t have support for reading the SYSMON over JTAG out of the box, so I will be adding it.</p><p><span><span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentcolor" d="M256 0C114.6.0.0 114.6.0 256s114.6 256 256 256 256-114.6 256-256S397.4.0 256 0zm0 128c17.67.0 32 14.33 32 32 0 17.67-14.33 32-32 32s-32-14.3-32-32 14.3-32 32-32zm40 256h-80c-13.2.0-24-10.7-24-24s10.75-24 24-24h16v-64h-8c-13.25.0-24-10.75-24-24s10.8-24 24-24h32c13.25.0 24 10.75 24 24v88h16c13.25.0 24 10.75 24 24s-10.7 24-24 24z"></path></svg>
</span></span><span><p>To be more precise, the Kintex UltraScale+ has a SYSMON4 and not a SYSMON.
For full context, there are 3 flavors of SYSMON:</p><ul><li><code>SYSMON1</code> used in the Kintex and Virtex UltraScale series</li><li><code>SYSMON4</code> used in the Kintex, Virtex and in the Zynq programmable logic for the UltraScale+ series</li><li><code>SYSMON</code> used in the Zynq in the processing system of the UltraScale+ series.<br>Yes, you read that correctly the Zynq of the UltraScale+ series features not one, but at least two unique SYSMON instances.</li></ul><p>For the purpose of this article, all these instances are similar enough that I will be using the terms SYSMON4 and SYSMON interchangeably.</p></span></p><p>In order for the JTAG to interact with the SYSMON, we first need to write the <code>SYSMON_DRP</code> command to the
JTAG Instruction Register (IR).
Based on the documentation, we see that this command has a value of <code>0x37</code>, which funnily enough,
is the same command code as the XADC, solidifying the SYSMON as the XADC’s descendant.</p><p>The SYSMON offers a lot more additional functionalities than just being used to read voltage and temperature,
but for today’s use case we will not be using any of that. Rather, we will focus only on reading a
subset of the SYSMON status registers.</p><p>These status registers are located at addresses <code>(00h-3Fh, 80h-BFh)</code>,
and contain the measurement results of the analog-to-digital conversions, the flag registers,
and the calibration coefficients. We can select which address we wish to read by writing the
address to the Data Register (DR) over JTAG and the data will be read out of <code>TDO</code>.</p><div><pre tabindex="0"><code data-lang="tcl"><span><span><span># SPDX-License-Identifier: GPL-2.0-or-later
</span></span></span><span><span><span>
</span></span></span><span><span><span># Xilinx SYSMON4 support
</span></span></span><span><span><span>#</span>
</span></span><span><span><span># Based on UG580, used for UltraScale+ Xilinx FPGA
</span></span></span><span><span><span># This code implements access through the JTAG TAP.
</span></span></span><span><span><span>#</span>
</span></span><span><span><span># build a 32 bit DRP command for the SYSMON DRP
</span></span></span><span><span><span></span><span>proc</span> sysmon_cmd <span>{</span>cmd addr data<span>}</span> <span>{</span>
</span></span><span><span>	<span>array</span> set cmds <span>{</span>
</span></span><span><span>		NOP <span>0x00</span>
</span></span><span><span>		READ <span>0x01</span>
</span></span><span><span>		WRITE <span>0x02</span>
</span></span><span><span>	<span>}</span>
</span></span><span><span>	<span>return</span> <span>[expr</span> <span>{(</span>$cmds<span>(</span>$cmd<span>)</span> <span>&lt;&lt;</span> 26<span>)</span> <span>|</span> <span>(</span>$addr <span>&lt;&lt;</span> 16<span>)</span> <span>|</span> <span>(</span>$data <span>&lt;&lt;</span> 0<span>)}]</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span># Status register addresses
</span></span></span><span><span><span># Some addresses (status registers 0-3) have special function when written to.
</span></span></span><span><span><span></span><span>proc</span> SYSMON <span>{</span>key<span>}</span> <span>{</span>
</span></span><span><span>	<span>array</span> set addrs <span>{</span>
</span></span><span><span>		TEMP <span>0x00</span>
</span></span><span><span>		VCCINT <span>0x01</span>
</span></span><span><span>		VCCAUX <span>0x02</span>
</span></span><span><span>		VPVN <span>0x03</span>
</span></span><span><span>		VREFP <span>0x04</span>
</span></span><span><span>		VREFN <span>0x05</span>
</span></span><span><span>		VCCBRAM <span>0x06</span>
</span></span><span><span>		SUPAOFFS <span>0x08</span>
</span></span><span><span>		ADCAOFFS <span>0x09</span>
</span></span><span><span>		ADCAGAIN <span>0x0a</span>
</span></span><span><span>		VCCPINTLP <span>0x0d</span>
</span></span><span><span>		VCCPINTFP <span>0x0e</span>
</span></span><span><span>		VCCPAUX <span>0x0f</span>
</span></span><span><span>		VAUX0 <span>0x10</span>
</span></span><span><span>		VAUX1 <span>0x11</span>
</span></span><span><span>		VAUX2 <span>0x12</span>
</span></span><span><span>		VAUX3 <span>0x13</span>
</span></span><span><span>		VAUX4 <span>0x14</span>
</span></span><span><span>		VAUX5 <span>0x15</span>
</span></span><span><span>		VAUX6 <span>0x16</span>
</span></span><span><span>		VAUX7 <span>0x17</span>
</span></span><span><span>		VAUX8 <span>0x18</span>
</span></span><span><span>		VAUX9 <span>0x19</span>
</span></span><span><span>		VAUX10 <span>0x1a</span>
</span></span><span><span>		VAUX11 <span>0x1b</span>
</span></span><span><span>		VAUX12 <span>0x1c</span>
</span></span><span><span>		VAUX13 <span>0x1d</span>
</span></span><span><span>		VAUX14 <span>0x1e</span>
</span></span><span><span>		VAUX15 <span>0x1f</span>
</span></span><span><span>		MAXTEMP <span>0x20</span>
</span></span><span><span>		MAXVCC <span>0x21</span>
</span></span><span><span>		MAXVCCAUX <span>0x22</span>
</span></span><span><span>	<span>}</span>
</span></span><span><span>	<span>return</span> $addrs<span>(</span>$key<span>)</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span># transfer
</span></span></span><span><span><span></span><span>proc</span> sysmon_xfer <span>{</span>tap cmd addr data<span>}</span> <span>{</span>
</span></span><span><span>	<span>set</span> ret <span>[</span>drscan $tap <span>32</span> <span>[</span>sysmon_cmd $cmd $addr $data<span>]]</span>
</span></span><span><span>	runtest <span>10</span>
</span></span><span><span>	<span>return</span> <span>[expr</span> <span>"0x$ret"</span><span>]</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span># sysmon register write
</span></span></span><span><span><span></span><span>proc</span> sysmon_write <span>{</span>tap addr data<span>}</span> <span>{</span>
</span></span><span><span>	sysmon_xfer $tap WRITE $addr $data
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span># sysmon register read, non-pipelined
</span></span></span><span><span><span></span><span>proc</span> sysmon_read <span>{</span>tap addr<span>}</span> <span>{</span>
</span></span><span><span>	sysmon_xfer $tap READ $addr <span>0</span>
</span></span><span><span>	<span>return</span> <span>[</span>sysmon_xfer $tap NOP <span>0</span> <span>0</span><span>]</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span>
</span></span><span><span><span># Select the sysmon DR, SYSMON_DRP has the same binary code value as the XADC
</span></span></span><span><span><span></span><span>proc</span> sysmon_select <span>{</span>tap<span>}</span> <span>{</span>
</span></span><span><span>	<span>set</span> SYSMON_IR <span>0x37</span>
</span></span><span><span>	irscan $tap $SYSMON_IR
</span></span><span><span>	runtest <span>10</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span># convert 16 bit temperature measurement to Celsius
</span></span></span><span><span><span></span><span>proc</span> sysmon_temp_internal <span>{</span>code<span>}</span> <span>{</span>
</span></span><span><span>	<span>return</span> <span>[expr</span> <span>{</span>$code <span>*</span> 509.314<span>/</span><span>(</span>1 <span>&lt;&lt;</span> <span>16</span><span>)</span> <span>-</span> <span>280.23</span><span>}]</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span># convert 16 bit supply voltage measurments to Volt
</span></span></span><span><span><span></span><span>proc</span> sysmon_sup <span>{</span>code<span>}</span> <span>{</span>
</span></span><span><span>	<span>return</span> <span>[expr</span> <span>{</span>$code <span>*</span> 3.<span>/</span><span>(</span>1 <span>&lt;&lt;</span> <span>16</span><span>)}]</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span># measure all internal voltages
</span></span></span><span><span><span></span><span>proc</span> sysmon_report <span>{</span>tap<span>}</span> <span>{</span>
</span></span><span><span>	puts <span>"Sysmon status report :"</span>
</span></span><span><span>	sysmon_select $tap
</span></span><span><span>	<span>foreach</span> ch <span>[</span>list TEMP MAXTEMP<span>]</span> <span>{</span>
</span></span><span><span>		echo <span>"$ch [format %.2f [sysmon_temp_internal [sysmon_read $tap [SYSMON $ch]]]] C"</span>
</span></span><span><span>	<span>}</span>
</span></span><span><span>	<span>foreach</span> ch <span>[</span>list VCCINT MAXVCC VCCAUX MAXVCCAUX<span>]</span> <span>{</span>
</span></span><span><span>		echo <span>"$ch [format %.3f [sysmon_sup [sysmon_read $tap [SYSMON $ch]]]] V"</span>	
</span></span><span><span>	<span>}</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>I added a report that reads the current chip temperature, internal and external
voltages as well as the maximum values for these recorded since FPGA power cycle, to my flashing script output:</p><pre tabindex="0"><code>gp@workhorse:~/tools/openocd_jlink_test$ openocd
Open On-Chip Debugger 0.12.0+dev-02170-gfcff4b712 (2025-09-04-20:02)
Licensed under GNU GPL v2
For bug reports, read
	http://openocd.org/doc/doxygen/bugs.html
set chipname XCKU3P
Read temperature sysmon 4
Info : J-Link V10 compiled Jan 30 2023 11:28:07
Info : Hardware version: 10.10
Info : VTarget = 1.819 V
Info : clock speed 1 kHz
Info : JTAG tap: XCKU3P.tap tap/device found: 0x04a63093 (mfg: 0x049 (Xilinx), part: 0x4a63, ver: 0x0)
Warn : gdb services need one or more targets defined
--------------------
Sysmon status report :
TEMP 31.12 C
MAXTEMP 34.62 C
VCCINT 0.852 V
MAXVCC 0.855 V
VCCAUX 1.805 V
MAXVCCAUX 1.807 V
</code></pre><h2>Pinout<span><a href="#pinout" aria-label="Anchor">#</a></span></h2><p>To my indescribable joy I happened to stumble onto this gold mine, in which we get the board pinout.
This most likely fell off a truck: <a href="https://blog.csdn.net/qq_37650251/article/details/145716953" target="_blank">https://blog.csdn.net/qq_37650251/article/details/145716953</a></p><p>So far this pinout looks correct.</p><table><thead><tr><th>Pin Index</th><th>Name</th><th>IO Standard</th><th>Location</th><th>Bank</th></tr></thead><tbody><tr><td>0</td><td>diff_100mhz_clk_p</td><td>LVDS</td><td>E18</td><td>BANK67</td></tr><tr><td>1</td><td>diff_100mhz_clk_n</td><td>LVDS</td><td>D18</td><td>BANK67</td></tr><tr><td>2</td><td>sfp_mgt_clk_p</td><td>LVDS</td><td>K7</td><td>BANK227</td></tr><tr><td>3</td><td>sfp_mgt_clk_n</td><td>LVDS</td><td>K6</td><td>BANK227</td></tr><tr><td>4</td><td>sfp_1_txn</td><td>-</td><td>B6</td><td>BANK227</td></tr><tr><td>5</td><td>sfp_1_txp</td><td>-</td><td>B7</td><td>BANK227</td></tr><tr><td>6</td><td>sfp_1_rxn</td><td>-</td><td>A3</td><td>BANK227</td></tr><tr><td>7</td><td>sfp_1_rxp</td><td>-</td><td>A4</td><td>BANK227</td></tr><tr><td>8</td><td>sfp_2_txn</td><td>-</td><td>D6</td><td>BANK227</td></tr><tr><td>9</td><td>sfp_2_txp</td><td>-</td><td>D7</td><td>BANK227</td></tr><tr><td>10</td><td>sfp_2_rxn</td><td>-</td><td>B1</td><td>BANK227</td></tr><tr><td>11</td><td>sfp_2_rxp</td><td>-</td><td>B2</td><td>BANK227</td></tr><tr><td>12</td><td>SFP_1_MOD_DEF_0</td><td>LVCMOS18</td><td>D14</td><td>BANK87</td></tr><tr><td>13</td><td>SFP_1_TX_FAULT</td><td>LVCMOS18</td><td>B14</td><td>BANK87</td></tr><tr><td>14</td><td>SFP_1_LOS</td><td>LVCMOS18</td><td>D13</td><td>BANK87</td></tr><tr><td>15</td><td>SFP_1_LED</td><td>LVCMOS18</td><td>B12</td><td>BANK87</td></tr><tr><td>16</td><td>SFP_2_MOD_DEF_0</td><td>LVCMOS18</td><td>E11</td><td>BANK86</td></tr><tr><td>17</td><td>SFP_2_TX_FAULT</td><td>LVCMOS18</td><td>F9</td><td>BANK86</td></tr><tr><td>18</td><td>SFP_2_LOS</td><td>LVCMOS18</td><td>E10</td><td>BANK86</td></tr><tr><td>19</td><td>SFP_2_LED</td><td>LVCMOS18</td><td>C12</td><td>BANK87</td></tr><tr><td>20</td><td>IIC_SDA_SFP_1</td><td>LVCMOS18</td><td>C14</td><td>BANK87</td></tr><tr><td>21</td><td>IIC_SCL_SFP_1</td><td>LVCMOS18</td><td>C13</td><td>BANK87</td></tr><tr><td>22</td><td>IIC_SDA_SFP_2</td><td>LVCMOS18</td><td>D11</td><td>BANK86</td></tr><tr><td>23</td><td>IIC_SCL_SFP_2</td><td>LVCMOS18</td><td>D10</td><td>BANK86</td></tr><tr><td>24</td><td>IIC_SDA_EEPROM_0</td><td>LVCMOS18</td><td>G10</td><td>BANK86</td></tr><tr><td>25</td><td>IIC_SCL_EEPROM_0</td><td>LVCMOS18</td><td>G9</td><td>BANK86</td></tr><tr><td>26</td><td>IIC_SDA_EEPROM_1</td><td>LVCMOS18</td><td>J15</td><td>BANK87</td></tr><tr><td>27</td><td>IIC_SCL_EEPROM_1</td><td>LVCMOS18</td><td>J14</td><td>BANK87</td></tr><tr><td>28</td><td>GPIO_LED_R</td><td>LVCMOS18</td><td>A13</td><td>BANK87</td></tr><tr><td>29</td><td>GPIO_LED_G</td><td>LVCMOS18</td><td>A12</td><td>BANK87</td></tr><tr><td>30</td><td>GPIO_LED_H</td><td>LVCMOS18</td><td>B9</td><td>BANK86</td></tr><tr><td>31</td><td>GPIO_LED_1</td><td>LVCMOS18</td><td>B11</td><td>BANK86</td></tr><tr><td>32</td><td>GPIO_LED_2</td><td>LVCMOS18</td><td>C11</td><td>BANK86</td></tr><tr><td>33</td><td>GPIO_LED_3</td><td>LVCMOS18</td><td>A10</td><td>BANK86</td></tr><tr><td>34</td><td>GPIO_LED_4</td><td>LVCMOS18</td><td>B10</td><td>BANK86</td></tr><tr><td>35</td><td>pcie_mgt_clkn</td><td>-</td><td>T6</td><td>BANK225</td></tr><tr><td>36</td><td>pcie_mgt_clkp</td><td>-</td><td>T7</td><td>BANK225</td></tr><tr><td>37</td><td>pcie_tx0_n</td><td>-</td><td>R4</td><td>BANK225</td></tr><tr><td>38</td><td>pcie_tx1_n</td><td>-</td><td>U4</td><td>BANK225</td></tr><tr><td>39</td><td>pcie_tx2_n</td><td>-</td><td>W4</td><td>BANK225</td></tr><tr><td>40</td><td>pcie_tx3_n</td><td>-</td><td>AA4</td><td>BANK225</td></tr><tr><td>41</td><td>pcie_tx4_n</td><td>-</td><td>AC4</td><td>BANK224</td></tr><tr><td>42</td><td>pcie_tx5_n</td><td>-</td><td>AD6</td><td>BANK224</td></tr><tr><td>43</td><td>pcie_tx6_n</td><td>-</td><td>AE8</td><td>BANK224</td></tr><tr><td>44</td><td>pcie_tx7_n</td><td>-</td><td>AF6</td><td>BANK224</td></tr><tr><td>45</td><td>pcie_rx0_n</td><td>-</td><td>P1</td><td>BANK225</td></tr><tr><td>46</td><td>pcie_rx1_n</td><td>-</td><td>T1</td><td>BANK225</td></tr><tr><td>47</td><td>pcie_rx2_n</td><td>-</td><td>V1</td><td>BANK225</td></tr><tr><td>48</td><td>pcie_rx3_n</td><td>-</td><td>Y1</td><td>BANK225</td></tr><tr><td>49</td><td>pcie_rx4_n</td><td>-</td><td>AB1</td><td>BANK224</td></tr><tr><td>50</td><td>pcie_rx5_n</td><td>-</td><td>AD1</td><td>BANK224</td></tr><tr><td>51</td><td>pcie_rx6_n</td><td>-</td><td>AE3</td><td>BANK224</td></tr><tr><td>52</td><td>pcie_rx7_n</td><td>-</td><td>AF1</td><td>BANK224</td></tr><tr><td>53</td><td>pcie_tx0_p</td><td>-</td><td>R5</td><td>BANK225</td></tr><tr><td>54</td><td>pcie_tx1_p</td><td>-</td><td>U5</td><td>BANK225</td></tr><tr><td>55</td><td>pcie_tx2_p</td><td>-</td><td>W5</td><td>BANK225</td></tr><tr><td>56</td><td>pcie_tx3_p</td><td>-</td><td>AA5</td><td>BANK225</td></tr><tr><td>57</td><td>pcie_tx4_p</td><td>-</td><td>AC5</td><td>BANK224</td></tr><tr><td>58</td><td>pcie_tx5_p</td><td>-</td><td>AD7</td><td>BANK224</td></tr><tr><td>59</td><td>pcie_tx6_p</td><td>-</td><td>AE9</td><td>BANK224</td></tr><tr><td>60</td><td>pcie_tx7_p</td><td>-</td><td>AF7</td><td>BANK224</td></tr><tr><td>61</td><td>pcie_rx0_p</td><td>-</td><td>P2</td><td>BANK225</td></tr><tr><td>62</td><td>pcie_rx1_p</td><td>-</td><td>T2</td><td>BANK225</td></tr><tr><td>63</td><td>pcie_rx2_p</td><td>-</td><td>V2</td><td>BANK225</td></tr><tr><td>64</td><td>pcie_rx3_p</td><td>-</td><td>Y2</td><td>BANK225</td></tr><tr><td>65</td><td>pcie_rx4_p</td><td>-</td><td>AB2</td><td>BANK224</td></tr><tr><td>66</td><td>pcie_rx5_p</td><td>-</td><td>AD2</td><td>BANK224</td></tr><tr><td>67</td><td>pcie_rx6_p</td><td>-</td><td>AE4</td><td>BANK224</td></tr><tr><td>68</td><td>pcie_rx7_p</td><td>-</td><td>AF2</td><td>BANK224</td></tr><tr><td>69</td><td>pcie_perstn_rst</td><td>LVCMOS18</td><td>A9</td><td>BANK86</td></tr></tbody></table><h3>Global clock<span><a href="#global-clock" aria-label="Anchor">#</a></span></h3><p>On high end FPGAs like the UltraScale+ family, high-speed global clocks are typically driven from external sources
using differential pairs for better signal integrity.</p><p>According to the pinout we have two such differential pairs.</p><p>First I must determine the nature of these external reference clocks to see how I can use them to drive my clocks.</p><p>These differential pairs are provided over the following pins:</p><ul><li>100MHz : {E18, D18}</li><li>156.25MHz : {K7, K6}</li></ul><p>Judging by the naming and the frequencies, the 156.25MHz clock is likely my SFP reference clock,
and the 100MHz can be used as my global clock.</p><p>We can confirm by querying the pin properties.</p><p><strong>K6</strong> properties :</p><div><pre tabindex="0"><code data-lang="tcl"><span><span>Vivado<span>%</span> report_property <span>[</span>get_package_pins K6<span>]</span>
</span></span><span><span>Property                Type    Read-only  Value
</span></span><span><span>BANK                    string  true       <span>227</span>
</span></span><span><span>BUFIO_2_REGION          string  true       TR
</span></span><span><span>CLASS                   string  true       package_pin
</span></span><span><span>DIFF_PAIR_PIN           string  true       K7
</span></span><span><span>IS_BONDED               bool    true       <span>1</span>
</span></span><span><span>IS_DIFFERENTIAL         bool    true       <span>1</span>
</span></span><span><span>IS_GENERAL_PURPOSE      bool    true       <span>0</span>
</span></span><span><span>IS_GLOBAL_CLK           bool    true       <span>0</span>
</span></span><span><span>IS_LOW_CAP              bool    true       <span>0</span>
</span></span><span><span>IS_MASTER               bool    true       <span>0</span>
</span></span><span><span>IS_VREF                 bool    true       <span>0</span>
</span></span><span><span>IS_VRN                  bool    true       <span>0</span>
</span></span><span><span>IS_VRP                  bool    true       <span>0</span>
</span></span><span><span>MAX_DELAY               int     true       <span>38764</span>
</span></span><span><span>MIN_DELAY               int     true       <span>38378</span>
</span></span><span><span>NAME                    string  true       K6
</span></span><span><span>PIN_FUNC                enum    true       MGTREFCLK0N_227
</span></span><span><span>PIN_FUNC_COUNT          int     true       <span>1</span>
</span></span><span><span>PKGPIN_BYTEGROUP_INDEX  int     true       <span>0</span>
</span></span><span><span>PKGPIN_NIBBLE_INDEX     int     true       <span>0</span>
</span></span></code></pre></div><p><strong>E18</strong> properties :</p><div><pre tabindex="0"><code data-lang="tcl"><span><span>Vivado<span>%</span> report_property <span>[</span>get_package_pins E18<span>]</span>
</span></span><span><span>Property                Type    Read-only  Value
</span></span><span><span>BANK                    string  true       <span>67</span>
</span></span><span><span>BUFIO_2_REGION          string  true       TL
</span></span><span><span>CLASS                   string  true       package_pin
</span></span><span><span>DIFF_PAIR_PIN           string  true       D18
</span></span><span><span>IS_BONDED               bool    true       <span>1</span>
</span></span><span><span>IS_DIFFERENTIAL         bool    true       <span>1</span>
</span></span><span><span>IS_GENERAL_PURPOSE      bool    true       <span>1</span>
</span></span><span><span>IS_GLOBAL_CLK           bool    true       <span>1</span>
</span></span><span><span>IS_LOW_CAP              bool    true       <span>0</span>
</span></span><span><span>IS_MASTER               bool    true       <span>1</span>
</span></span><span><span>IS_VREF                 bool    true       <span>0</span>
</span></span><span><span>IS_VRN                  bool    true       <span>0</span>
</span></span><span><span>IS_VRP                  bool    true       <span>0</span>
</span></span><span><span>MAX_DELAY               int     true       <span>87126</span>
</span></span><span><span>MIN_DELAY               int     true       <span>86259</span>
</span></span><span><span>NAME                    string  true       E18
</span></span><span><span>PIN_FUNC                enum    true       IO_L11P_T1U_N8_GC_67
</span></span><span><span>PIN_FUNC_COUNT          int     true       <span>2</span>
</span></span><span><span>PKGPIN_BYTEGROUP_INDEX  int     true       <span>8</span>
</span></span><span><span>PKGPIN_NIBBLE_INDEX     int     true       <span>2</span>
</span></span></code></pre></div><p>This tells us:</p><ul><li>The differential pairings are correct: {K6, K7}, {E18, D18}</li><li>We can easily use the 100MHz as a source to drive our global clocking network</li><li>The 156.25MHz clock is to be used as the reference clock for our GTY transceivers and lands on bank 227 as indicated by the <code>PIN_FUNC</code> property <code>MGTREFCLK0N_227</code></li><li>We cannot directly use the 156.25MHz clock to drive our global clock network</li></ul><p>With all this we have sufficient information to write a constraint file (<code>xdc</code>) for this board.</p><h2>Test design<span><a href="#test-design" aria-label="Anchor">#</a></span></h2><p>Further sections will be using the following design files.</p><p><code>top.v</code>:</p><div><pre tabindex="0"><code data-lang="sv"><span><span><span>module</span> top (
</span></span><span><span>    <span>input</span> <span>wire</span> Clk_100mhz_p_i, 
</span></span><span><span>    <span>input</span> <span>wire</span> Clk_100mhz_n_i,
</span></span><span><span>
</span></span><span><span>    <span>output</span> <span>wire</span> [<span>3</span><span>:</span><span>0</span>] Led_o 
</span></span><span><span>);
</span></span><span><span>    <span>wire</span>        clk_ibuf;
</span></span><span><span>    <span>reg</span>  [<span>28</span><span>:</span><span>0</span>] ctr_q; 
</span></span><span><span>    <span>reg</span>         unused_ctr_q;
</span></span><span><span>
</span></span><span><span>
</span></span><span><span>    IBUFDS #(
</span></span><span><span>        .DIFF_TERM(<span>"TRUE"</span>),
</span></span><span><span>        .IOSTANDARD(<span>"LVDS"</span>)
</span></span><span><span>    ) m_ibufds (
</span></span><span><span>        .I(Clk_100mhz_p_i),
</span></span><span><span>        .IB(Clk_100mhz_n_i),
</span></span><span><span>        .O(clk_ibuf)
</span></span><span><span>    );
</span></span><span><span>
</span></span><span><span>    BUFG m_bufg (
</span></span><span><span>        .I(clk_ibuf),
</span></span><span><span>        .O(clk)
</span></span><span><span>    );
</span></span><span><span>
</span></span><span><span>    <span>always</span> @(<span>posedge</span> clk)
</span></span><span><span>        { unused_ctr_q, ctr_q } <span>&lt;=</span> ctr_q <span>+</span> <span>29</span><span>'b1</span>;    
</span></span><span><span>    
</span></span><span><span>    <span>assign</span> Led_o <span>=</span> ctr_q[<span>28</span><span>:</span><span>25</span>];
</span></span><span><span><span>endmodule</span>
</span></span></code></pre></div><p><code>alibaba_cloud.xdc</code> :</p><div><pre tabindex="0"><code data-lang="tcl"><span><span><span># Global clock signal 
</span></span></span><span><span><span></span>set_property <span>-</span>dict <span>{</span>LOC E18 IOSTANDARD LVDS<span>}</span> <span>[</span>get_ports Clk_100mhz_p_i<span>]</span>
</span></span><span><span>set_property <span>-</span>dict <span>{</span>LOC D18 IOSTANDARD LVDS<span>}</span> <span>[</span>get_ports Clk_100mhz_n_i<span>]</span>
</span></span><span><span>create_clock <span>-</span>period <span>10</span> <span>-</span>name clk_100mhz <span>[</span>get_ports Clk_100mhz_p_i<span>]</span>
</span></span><span><span>
</span></span><span><span><span># LEDS
</span></span></span><span><span><span></span>set_property <span>-</span>dict <span>{</span>LOC B11 IOSTANDARD LVCMOS18<span>}</span> <span>[</span>get_ports <span>{</span> Led_o<span>[</span>0<span>]}]</span>
</span></span><span><span>set_property <span>-</span>dict <span>{</span>LOC C11 IOSTANDARD LVCMOS18<span>}</span> <span>[</span>get_ports <span>{</span> Led_o<span>[</span>1<span>]}]</span>
</span></span><span><span>set_property <span>-</span>dict <span>{</span>LOC A10 IOSTANDARD LVCMOS18<span>}</span> <span>[</span>get_ports <span>{</span> Led_o<span>[</span>2<span>]}]</span>
</span></span><span><span>set_property <span>-</span>dict <span>{</span>LOC B10 IOSTANDARD LVCMOS18<span>}</span> <span>[</span>get_ports <span>{</span> Led_o<span>[</span>3<span>]}]</span>
</span></span></code></pre></div><h2>Writing the bitstream<span><a href="#writing-the-bitstream" aria-label="Anchor">#</a></span></h2><p>My personal belief is that one of the most important contributors to design quality is iteration cost.
The lower your iteration cost, the higher your design quality is going to be.</p><p>As such I will invest the small upfront cost to have the workflow be as streamlined as efficiently feasible.</p><p>Thus, my workflow evolved into doing practically everything over
the command line interfaces and only interacting with the tools, Vivado in this case, through tcl scripts.</p><h3>Vivado flow<span><a href="#vivado-flow" aria-label="Anchor">#</a></span></h3><p>The goal of this flow is to, given a few verilog design and constraint files produce a SVF file. Our steps are :</p><ol><li>creat the Vivado project <code>setup.tcl</code></li><li>run the implementation <code>build.tcl</code></li><li>generate the bitstream and the SVF <code>gen.tcl</code></li></ol><p>I will be using <code>make</code> to kick off and manage the dependencies between the different steps, though I recognise this isn’t a widespread practice for hardware projects. <code>make</code> is a highly flexible, reliable and powerful tool and I believe its ability to tie together any type of workflow makes it a prime tool for this use case.</p><p>We will be invoking Vivado in batch mode, this allows us to provide a tcl script alongside script arguments, the
format is as following :</p><div><pre tabindex="0"><code data-lang="bash"><span><span>vivado -mode batch &lt;path to tcl script&gt; -tclargs &lt;script args&gt;
</span></span></code></pre></div><p>Though this allows us to easily break down our flow into incremental stages, invoking a single script in batch mode has the
drawback of restarting Vivado and needing to re-load the project or the project checkpoint on each invocation.</p><p>As the project size grows so will the project load time, so segmenting the
flow into a large number of independent scripts comes at an increasing cost.</p><p><code>Makefile</code> :</p><div><pre tabindex="0"><code data-lang="makefile"><span><span>SHELL <span>:=</span> /bin/bash
</span></span><span><span>
</span></span><span><span>VIVADO_PRJ_DIR<span>=</span>prj
</span></span><span><span>VIVADO_PRJ_NAME<span>=</span><span>$(</span>VIVADO_PRJ_DIR<span>)</span>
</span></span><span><span>VIVADO_PRJ_PATH<span>=</span><span>$(</span>VIVADO_PRJ_DIR<span>)</span>/<span>$(</span>VIVADO_PRJ_NAME<span>)</span>.xpr
</span></span><span><span>VIVADO_CHECKPOINT_PATH<span>=</span><span>$(</span>VIVADO_PRJ_DIR<span>)</span>/<span>$(</span>VIVADO_PRJ_NAME<span>)</span>_checkpoint.dcp
</span></span><span><span>
</span></span><span><span>VIVADO_CMD<span>=</span>vivado -mode batch -source
</span></span><span><span>
</span></span><span><span>SRC_PATH<span>=</span>src
</span></span><span><span>OUT_DIR<span>=</span>out
</span></span><span><span>
</span></span><span><span>
</span></span><span><span><span>all</span><span>:</span> setup build gen
</span></span><span><span>
</span></span><span><span><span>$(VIVADO_PRJ_PATH)</span><span>:</span>  
</span></span><span><span>    mkdir -p <span>$(</span>VIVADO_PRJ_DIR<span>)</span>
</span></span><span><span>    <span>$(</span>VIVADO_CMD<span>)</span> setup.tcl -tclargs <span>$(</span>VIVADO_PRJ_DIR<span>)</span> <span>$(</span>VIVADO_PRJ_NAME<span>)</span>
</span></span><span><span>
</span></span><span><span><span>setup</span><span>:</span> <span>$(</span>VIVADO_PRJ_PATH<span>)</span> 
</span></span><span><span>
</span></span><span><span><span>$(VIVADO_CHECKPOINT_PATH)</span><span>:</span> <span>$(</span>VIVADO_PRJ_PATH<span>)</span> <span>$(</span>wildcard <span>$(</span>SRC_PATH<span>)</span>/*.xdc<span>)</span> <span>$(</span>wildcard <span>$(</span>SRC_PATH<span>)</span>/*.v<span>)</span>
</span></span><span><span>    <span>$(</span>VIVADO_CMD<span>)</span> build.tcl -tclargs <span>$(</span>VIVADO_PRJ_PATH<span>)</span> <span>$(</span>SRC_PATH<span>)</span> <span>$(</span>VIVADO_CHECKPOINT_PATH<span>)</span>
</span></span><span><span>
</span></span><span><span><span>build</span><span>:</span> <span>$(</span>VIVADO_CHECKPOINT_PATH<span>)</span>
</span></span><span><span>
</span></span><span><span><span>$(OUT_DIR)/$(VIVADO_PRJ_NAME).svf</span><span>:</span> <span>$(</span>VIVADO_CHECKPOINT_PATH<span>)</span> 
</span></span><span><span>    mkdir -p <span>$(</span>OUT_DIR<span>)</span>
</span></span><span><span>    <span>$(</span>VIVADO_CMD<span>)</span> gen.tcl -tclargs <span>$(</span>VIVADO_CHECKPOINT_PATH<span>)</span> <span>$(</span>OUT_DIR<span>)</span>
</span></span><span><span>
</span></span><span><span><span>gen</span><span>:</span> <span>$(</span>OUT_DIR<span>)</span>/<span>$(</span>VIVADO_PRJ_NAME<span>)</span>.svf
</span></span><span><span>
</span></span><span><span><span>flash</span><span>:</span> <span>$(</span>OUT_DIR<span>)</span>/<span>$(</span>VIVADO_PRJ_NAME<span>)</span>.svf
</span></span><span><span>    openocd	
</span></span><span><span>
</span></span><span><span><span>clean</span><span>:</span> 
</span></span><span><span>    rm -rf <span>$(</span>VIVADO_PRJ_DIR<span>)</span>
</span></span><span><span>    rm -rf <span>$(</span>OUT_DIR<span>)</span>
</span></span><span><span>    rm -f vivado*<span>{</span>log,jou<span>}</span>
</span></span><span><span>    rm -f webtalk*<span>{</span>log,jou<span>}</span>
</span></span><span><span>    rm -f usage_statistics_webtalk*<span>{</span>html,xml<span>}</span>
</span></span></code></pre></div><p><code>setup.tcl</code> :</p><div><pre tabindex="0"><code data-lang="tcl"><span><span><span>set</span> project_dir <span>[</span>lindex $argv <span>0</span><span>]</span>
</span></span><span><span><span>set</span> project_name <span>[</span>lindex $argv <span>1</span><span>]</span>
</span></span><span><span>
</span></span><span><span>puts <span>"Creating project $project_name at path [pwd]/$project_dir"</span>
</span></span><span><span>create_project <span>-</span>part xcku3p-ffvb676-2-e <span>-</span>force $project_name $project_dir
</span></span><span><span>
</span></span><span><span>close_project
</span></span><span><span>exit <span>0</span>
</span></span></code></pre></div><p><code>build.tcl</code> :</p><div><pre tabindex="0"><code data-lang="tcl"><span><span><span>set</span> project_path <span>[</span>lindex $argv <span>0</span><span>]</span>
</span></span><span><span><span>set</span> src_path <span>[</span>lindex $argv <span>1</span><span>]</span>
</span></span><span><span><span>set</span> checkpoint_path <span>[</span>lindex $argv <span>2</span><span>]</span>
</span></span><span><span>puts <span>"Implementation script called with project path $project_path and src path $src_path, generating checkpoint at $checkpoint_path"</span>
</span></span><span><span>
</span></span><span><span>open_project $project_path 
</span></span><span><span>
</span></span><span><span><span>#</span> load src
</span></span><span><span>read_verilog <span>[</span>glob <span>-</span>directory $src_path <span>*</span>.v<span>]</span>
</span></span><span><span>read_xdc <span>[</span>glob <span>-</span>directory $src_path <span>*</span>.xdc<span>]</span>
</span></span><span><span>
</span></span><span><span>
</span></span><span><span><span># synth
</span></span></span><span><span><span></span>synth_design <span>-</span>top top
</span></span><span><span>
</span></span><span><span><span># implement
</span></span></span><span><span><span></span>opt_design
</span></span><span><span>place_design
</span></span><span><span>route_design
</span></span><span><span>phys_opt_design
</span></span><span><span>
</span></span><span><span>write_checkpoint $checkpoint_path <span>-</span>force 
</span></span><span><span>close_project
</span></span><span><span>exit <span>0</span>
</span></span></code></pre></div><h4>Generating the SVF file<span><a href="#generating-the-svf-file" aria-label="Anchor">#</a></span></h4><p>The SVF for Serial Vector Format is a human readable, vendor agnostic specification used to specify JTAG bus operations.</p><p>Example SVF file, test program:</p><pre tabindex="0"><code data-lang="svf">! Initialize UUT
STATE RESET;
! End IR scans in DRPAUSE
ENDIR DRPAUSE;
! End DR scans in DRPAUSE
ENDDR DRPAUSE;
! 24 bit IR header
HIR 24 TDI (FFFFFF);
! 3 bit DR header
HDR 3 TDI (7);
! 16 bit IR trailer
TIR 16 TDI (FFFF);
! 2 bit DR trailer
TDR 2 TDI (3);
! 8 bit IR scan, load BIST opcode
SIR 8 TDI (41) TDO (81) MASK (FF);
! 16 bit DR scan, load BIST seed
SDR 16 TDI (ABCD);
! RUNBIST for 95 TCK Clocks
RUNTEST 95 TCK ENDSTATE IRPAUSE;
! 16 bit DR scan, check BIST status
SDR 16 TDI (0000) TDO(1234) MASK(FFFF);
! Enter Test-Logic-Reset
STATE RESET;
! End Test Program
</code></pre><p>Vivado can generate a hardware aware SVF file containing the configuration sequence for an FPGA board, allowing us to write a bitstream.</p><p>Given the SVF file literally contains the bitstream written in clear hexademical, in the file, our first step is to generate
our design’s bitstream.</p><p>Vivado proper isn’t the software that generates the SVF file, this task is done by the hardware manager which
handles all of the configuration.</p><p>We can launch a new instance <code>open_hw_manager</code> and connect to it <code>connect_hw_server</code>.
Since JTAG is a daisy chained bus, and given the SVF file is just a standardised way of specifying
JTAG bus operations, in order to generate a correct JTAG configuration sequence, we must inform the hardware manger
of our scan chain.</p><p>During our earlier probing of the scan chain, we have established that our FPGA is the only device on the chain.
We inform the hardware manager of this by creating a new device configuration ( the term “device” refers to the “board”
here ) and add our fpga to the chain using the <code>create_hw_device -part &lt;device name&gt;</code>.When we have multiple
devices we should register them following the order in which they appear on the chain.</p><p>Finally to generate the SVF file, we must select the device we wish to program with <code>program_hw_device &lt;hw_device&gt;</code>,
then write out the SVF to the file using <code>write_hw_svf &lt;path to svf file&gt;</code>.</p><p><code>gen.tcl</code>:</p><div><pre tabindex="0"><code data-lang="tcl"><span><span><span>set</span> checkpoint_path <span>[</span>lindex $argv <span>0</span><span>]</span>
</span></span><span><span><span>set</span> out_dir <span>[</span>lindex $argv <span>1</span><span>]</span>
</span></span><span><span>puts <span>"SVF generation script called with checkpoint path $checkpoint_path, generating to $out_dir"</span>
</span></span><span><span>
</span></span><span><span>open_checkpoint $checkpoint_path
</span></span><span><span>
</span></span><span><span><span># defines
</span></span></span><span><span><span></span><span>set</span> hw_target <span>"alibaba_board_svf_target"</span>
</span></span><span><span><span>set</span> fpga_device <span>"xcku3p"</span>
</span></span><span><span><span>set</span> bin_path <span>"$out_dir/[current_project]"</span>
</span></span><span><span>
</span></span><span><span>write_bitstream <span>"$bin_path.bit"</span> <span>-</span>force
</span></span><span><span>
</span></span><span><span>open_hw_manager
</span></span><span><span>
</span></span><span><span><span># connect to hw server with default config
</span></span></span><span><span><span></span>connect_hw_server
</span></span><span><span>puts <span>"connected to hw server at [current_hw_server]"</span>
</span></span><span><span>
</span></span><span><span>create_hw_target $hw_target
</span></span><span><span>puts <span>"current hw target [current_hw_target]"</span>
</span></span><span><span>
</span></span><span><span>open_hw_target
</span></span><span><span>
</span></span><span><span><span># single device on scan chain
</span></span></span><span><span><span></span>create_hw_device <span>-</span>part $fpga_device
</span></span><span><span>puts <span>"scan chain : [get_hw_devices]"</span>
</span></span><span><span>
</span></span><span><span>set_property PROGRAM.FILE <span>"$bin_path.bit"</span> <span>[</span>get_hw_device<span>]</span>
</span></span><span><span>
</span></span><span><span><span>#select device to program
</span></span></span><span><span><span></span>program_hw_device <span>[</span>get_hw_device<span>]</span>
</span></span><span><span>
</span></span><span><span><span># generate svf file
</span></span></span><span><span><span></span>write_hw_svf <span>-</span>force <span>"$bin_path.svf"</span>
</span></span><span><span>
</span></span><span><span>close_hw_manager
</span></span><span><span>exit <span>0</span>
</span></span></code></pre></div><h3>Configuring the FPGA using OpenOCD<span><a href="#configuring-the-fpga-using-openocd" aria-label="Anchor">#</a></span></h3><p>Although not widespread openOCD has a very nice <code>svf</code> execution command :</p><blockquote><div><h4>18.1 SVF: Serial Vector Format<span><a href="#181-svf-serial-vector-format" aria-label="Anchor">#</a></span></h4><p>The Serial Vector Format, better known as SVF, is a way to represent JTAG test patterns
in text files. In a debug session using JTAG for its transport protocol, OpenOCD supports
running such test files.</p><pre tabindex="0"><code>[Command]svf filename [-tap tapname] [[-]quiet] [[-]nil] [[-]progress]
[[-]ignore_error]
</code></pre><p>This issues a JTAG reset (Test-Logic-Reset) and then runs the SVF script from
filename.
Arguments can be specified in any order; the optional dash doesn’t affect their se-
mantics.</p><p><strong>Command options</strong>:</p><ul><li><code>-tap</code> tapname ignore IR and DR headers and footers specified by the SVF file
with HIR, TIR, HDR and TDR commands; instead, calculate them automatically
according to the current JTAG chain configuration, targeting tapname;</li><li><code>[-]quiet</code> do not log every command before execution;</li><li><code>[-]nil</code> “dry run”, i.e., do not perform any operations on the real interface;</li><li><code>[-]progress</code> enable progress indication;</li><li><code>[-]ignore</code>_error continue execution despite TDO check errors.</li></ul></div></blockquote><p>We invoke it in our openOCD script using the <code>-progress</code> option for additional logging.</p><p><code>openocd</code> :</p><div><pre tabindex="0"><code data-lang="tcl"><span><span><span>set</span> svf_path <span>"out/project_prj_checkpoint.svf"</span>
</span></span><span><span>
</span></span><span><span>source <span>[</span>find interface<span>/</span>jlink.cfg<span>]</span>
</span></span><span><span>transport select jtag
</span></span><span><span>
</span></span><span><span><span>set</span> SPEED <span>1</span>
</span></span><span><span>jtag_rclk $SPEED
</span></span><span><span>adapter speed $SPEED 
</span></span><span><span>reset_config none
</span></span><span><span>
</span></span><span><span><span># jlink config
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>set</span> CHIPNAME XCKU3P
</span></span><span><span><span>set</span> CHIP $CHIPNAME
</span></span><span><span>puts <span>"set chipname "</span>$CHIP
</span></span><span><span>
</span></span><span><span>source <span>[</span>find ..<span>/</span>openocd<span>/</span>tcl<span>/</span>cpld<span>/</span>xilinx-xcu.cfg<span>]</span>
</span></span><span><span>
</span></span><span><span>source <span>[</span>find ..<span>/</span>openocd<span>/</span>tcl<span>/</span>fpga<span>/</span>xilinx-sysmon.cfg<span>]</span>
</span></span><span><span>
</span></span><span><span>init 
</span></span><span><span>
</span></span><span><span>puts <span>"--------------------"</span>
</span></span><span><span>
</span></span><span><span>sysmon_report $CHIP.tap
</span></span><span><span>
</span></span><span><span>puts <span>"--------------------"</span>
</span></span><span><span>
</span></span><span><span><span># program
</span></span></span><span><span><span></span><span>if</span> <span>{</span><span>!</span><span>[</span>file exists $svf_path<span>]}</span> <span>{</span>
</span></span><span><span>    puts <span>"Svf path not found : $svf_path"</span>
</span></span><span><span>    exit
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span>svf $svf_path <span>-</span>progress 
</span></span><span><span> 
</span></span><span><span>exit 
</span></span></code></pre></div><p>Flashing sequence log :</p><pre tabindex="0"><code>gp@workhorse:~/tools/openocd_jlink_test$ openocd
Open On-Chip Debugger 0.12.0+dev-02170-gfcff4b712 (2025-09-04-21:02)
Licensed under GNU GPL v2
For bug reports, read
	http://openocd.org/doc/doxygen/bugs.html
set chipname XCKU3P
Read temperature sysmon 4
Info : J-Link V10 compiled Jan 30 2023 11:28:07
Info : Hardware version: 10.10
Info : VTarget = 1.812 V
Info : clock speed 1 kHz
Info : JTAG tap: XCKU3P.tap tap/device found: 0x04a63093 (mfg: 0x049 (Xilinx), part: 0x4a63, ver: 0x0)
Warn : gdb services need one or more targets defined
--------------------
Sysmon status report :
TEMP 50.46 C
MAXTEMP 52.79 C
VCCINT 0.846 V
MAXVCC 0.860 V
VCCAUX 1.799 V
MAXVCCAUX 1.809 V
--------------------
svf processing file: "out/project_prj_checkpoint.svf"
  0%  TRST OFF;
  0%  ENDIR IDLE;
  0%  ENDDR IDLE;
  0%  STATE RESET;
  0%  STATE IDLE;
  0%  FREQUENCY 1.00E+07 HZ;
adapter speed: 10000 kHz
  0%  HIR 0 ;
  0%  TIR 0 ;
  0%  HDR 0 ;
  0%  TDR 0 ;
  0%  SIR 6 TDI (09) ;
  0%  SDR 32 TDI (00000000) TDO (04a63093) MASK (0fffffff) ;
  0%  STATE RESET;
  0%  STATE IDLE;
  0%  SIR 6 TDI (0b) ;
  0%  SIR 6 TDI (14) ;
  0%  RUNTEST 0.100000 SEC;
  0%  RUNTEST 10000 TCK;
  0%  SIR 6 TDI (14) TDO (11) MASK (31) ;
  0%  SIR 6 TDI (05) ;
 95%  ffffffffffff) ;
 95%  SIR 6 TDI (09) TDO (31) MASK (11) ;
 95%  STATE RESET;
 95%  RUNTEST 5 TCK;
 95%  SIR 6 TDI (05) ;
 95%  SDR 160 TDI (0000000400000004800700140000000466aa9955) ;
 95%  SIR 6 TDI (04) ;
 95%  SDR 32 TDI (00000000) TDO (3f5e0d40) MASK (08000000) ;
 95%  STATE RESET;
 95%  RUNTEST 5 TCK;
Info : Listening on port 6666 for tcl connections
Info : Listening on port 4444 for telnet connections
</code></pre><p>Resulting in a successfully configured our FPGA.</p><h2>Conclusion<span><a href="#conclusion" aria-label="Anchor">#</a></span></h2><p>For <strong>$200</strong> we got a fully working decommissioned Alibaba Cloud accelerator featuring a Kintex UltraScale+
FPGA with an easily accessible debugging/programming interface and enough pinout information to define
our own constraint files.</p><p>We also have a fully automated Vivado workflow to implement our designs and the ability to write the bitstream,
and interface with the FPGA’s internal JTAG accessible registers using an open source programming tool without
the need for an official Xilinx programmer.</p><p>In the end, this project delivered an at least 5x cost savings over commercial boards (compared to the lowest cost $900-1050 Alinx alternatives),
making this perhaps the most cost effective entry point for a Kintex UltraScale+ board.</p><h2>External ressources<span><a href="#external-ressources" aria-label="Anchor">#</a></span></h2><p>Xilinx Vivado Supported Devices : <a href="https://docs.amd.com/r/en-US/ug973-vivado-release-notes-install-license/Supported-Devices" target="_blank">https://docs.amd.com/r/en-US/ug973-vivado-release-notes-install-license/Supported-Devices</a></p><p>Official Xilinx dev board : <a href="https://www.amd.com/en/products/adaptive-socs-and-fpgas/evaluation-boards/ek-u1-kcu116-g.html" target="_blank">https://www.amd.com/en/products/adaptive-socs-and-fpgas/evaluation-boards/ek-u1-kcu116-g.html</a></p><p>Alinx Kintex UltraScale+ dev boards : <a href="https://www.en.alinx.com/Product/FPGA-Development-Boards/Kintex-UltraScale-plus.html" target="_blank">https://www.en.alinx.com/Product/FPGA-Development-Boards/Kintex-UltraScale-plus.html</a></p><p>UltraScale Architecture Configuration User Guide (UG570) : <a href="https://docs.amd.com/r/en-US/ug570-ultrascale-configuration/Device-Resources-and-Configuration-Bitstream-Lengths?section=gyn1703168518425__table_vyh_4hs_szb" target="_blank">https://docs.amd.com/r/en-US/ug570-ultrascale-configuration/Device-Resources-and-Configuration-Bitstream-Lengths?section=gyn1703168518425__table_vyh_4hs_szb</a></p><p>UltraScale Architecture System Monitor User Guide (UG580): <a href="https://docs.amd.com/v/u/en-US/ug580-ultrascale-sysmon" target="_blank">https://docs.amd.com/v/u/en-US/ug580-ultrascale-sysmon</a></p><p>Vivado Design Suite Tcl Command Reference Guide (UG835): <a href="https://docs.amd.com/r/en-US/ug835-vivado-tcl-commands/Tcl-Initialization-Scripts" target="_blank">https://docs.amd.com/r/en-US/ug835-vivado-tcl-commands/Tcl-Initialization-Scripts</a></p><p>PCI vendor/device ID database: <a href="https://admin.pci-ids.ucw.cz/read/PC/14e4" target="_blank">https://admin.pci-ids.ucw.cz/read/PC/14e4</a></p><p>PCI device classes: <a href="https://admin.pci-ids.ucw.cz/read/PD" target="_blank">https://admin.pci-ids.ucw.cz/read/PD</a></p><p>Linux kernel PCI IDs: <a href="https://github.com/torvalds/linux/blob/7aac71907bdea16e2754a782b9d9155449a9d49d/include/linux/pci_ids.h#L160-L3256" target="_blank">https://github.com/torvalds/linux/blob/7aac71907bdea16e2754a782b9d9155449a9d49d/include/linux/pci_ids.h#L160-L3256</a></p><p>Linux kernel PCI classes: <a href="https://github.com/torvalds/linux/blob/7aac71907bdea16e2754a782b9d9155449a9d49d/include/linux/pci_ids.h#L15-L158" target="_blank">https://github.com/torvalds/linux/blob/7aac71907bdea16e2754a782b9d9155449a9d49d/include/linux/pci_ids.h#L15-L158</a></p><p>Truck-kun pinout: <a href="https://blog.csdn.net/qq_37650251/article/details/145716953" target="_blank">https://blog.csdn.net/qq_37650251/article/details/145716953</a></p><p>Ebay listing: <a href="https://www.ebay.com/itm/167626831054?_trksid=p4375194.c101800.m5481" target="_blank">https://www.ebay.com/itm/167626831054?_trksid=p4375194.c101800.m5481</a></p><p>OpenOCD documentation: <a href="https://openocd.org/doc-release/pdf/openocd.pdf" target="_blank">https://openocd.org/doc-release/pdf/openocd.pdf</a></p></div></div>]]></description>
        </item>
    </channel>
</rss>