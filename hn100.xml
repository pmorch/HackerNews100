<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 21 Nov 2024 07:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Electrobun: Cross-platform desktop applications written in TypeScript (111 pts)]]></title>
            <link>https://electrobun.dev/</link>
            <guid>42199486</guid>
            <pubDate>Wed, 20 Nov 2024 23:58:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://electrobun.dev/">https://electrobun.dev/</a>, See on <a href="https://news.ycombinator.com/item?id=42199486">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="__docusaurus_skipToContent_fallback"><main><div><div><p>Electrobun aims to be a complete solution-in-a-box for building, updating, and shipping ultra fast, tiny, and cross-platform desktop applications written in Typescript.</p><p><img src="https://electrobun.dev/img/electrobun-logo-256.png"></p><p>Under the hood it uses bun to execute the main process and to bundle webview typescript, and has native bindings written in zig.</p></div><hr><h2>Install Electrobun v0.0.13</h2><p><span>$</span><span>bun install electrobun</span></p><hr><div><div><h3>Typescript</h3><p>Write typescript for the main process and webviews without having to think about it. One language, no hassle.</p></div><div><h3>Fast</h3><p>Security and Performance with isolation between the main and webview processes and fast, typed, easy to implement RPC between them.</p></div><div><h3>Tiny</h3><p>Small self-extracting app bundles ~12MB and tiny app updates as small as 4KB. Ship often while saving bandwidth costs.</p></div><div><h3>Batteries</h3><p>Everything you need in one tightly integrated workflow to start writing code in 5 minutes and distribute in 10.</p></div></div></div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Weight-loss drug found to shrink heart muscle in mice, human cells (209 pts)]]></title>
            <link>https://www.ualberta.ca/en/folio/2024/11/weight-loss-drug-found-to-shrink-heart-muscle.html</link>
            <guid>42199447</guid>
            <pubDate>Wed, 20 Nov 2024 23:53:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ualberta.ca/en/folio/2024/11/weight-loss-drug-found-to-shrink-heart-muscle.html">https://www.ualberta.ca/en/folio/2024/11/weight-loss-drug-found-to-shrink-heart-muscle.html</a>, See on <a href="https://news.ycombinator.com/item?id=42199447">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                <p>Trendy weight-loss drugs making headlines for shrinking waistlines may also be shrinking the human heart and other muscles, according to a <a href="https://www.sciencedirect.com/science/article/pii/S2452302X24002869">new University of Alberta study</a> whose authors say should serve as a “cautionary tale” about possible long-term health effects of these drugs.</p>
<p>“If people have been prescribed these drugs, then the benefits should likely far exceed the risks,” says <a href="https://apps.ualberta.ca/directory/person/jrbdyck">Jason Dyck</a>, lead author on the study, pediatrics professor in the <a href="https://www.ualberta.ca/medicine/index.html">Faculty of Medicine &amp; Dentistry</a> and a member of the <a href="https://www.wchri.org/">Women and Children’s Health Research Institute</a>.</p>
<p>“However, the growing number of people who may be taking these drugs who do not meet the eligibility criteria and who are not at risk have a different risk-reward calculation that they should be made aware of.”</p>
<p>Dyck and his team set out to study why a reported side-effect of the leading weight-loss drug Ozempic is the loss of skeletal muscle.</p>
<p>Ozempic, known medically as semaglutide, was originally designed to help adult patients with type 2 diabetes control their blood sugar. However, this drug — and a host of others in this class of medication — are also being touted for their effectiveness as an anti-obesity medication.</p>
<p>Using mice for the study, the researchers found that heart muscle also decreased in both obese and lean mice. The systemic effect observed in mice was then confirmed in cultured human heart cells.</p>
<p>Dyck, who is the <a href="https://www.chairs-chaires.gc.ca/home-accueil-eng.aspx">Canada Research Chair</a> in Molecular Medicine and heads up the <a href="http://www.cvrc.med.ualberta.ca/Home/index.html">Cardiovascular Research Centre</a>, says his team did not observe any detrimental functional effects in hearts of mice with smaller hearts and thus would not expect any overt health effects in humans. But he adds that there may be more impact over the long term, or some forms of cardiac stress may have a detrimental effect that wasn’t observed at rest.</p>
<p>“Given the growing number of people taking this drug who have no cardiovascular disease or who are not classified as obese, we suggest that cardiac structure and function be carefully evaluated in previous and ongoing clinical studies.”</p>
<p>Dyck’s study comes on the heels of a <a href="https://www.thelancet.com/journals/landia/article/PIIS2213-8587(24)00272-9/abstract">commentary published in the November issue of <em>The Lancet</em></a> by an international team of researchers from the U of A, McMaster and Louisiana State University who examined emerging research showing that up to 40 per cent of the weight lost by people using weight-loss drugs is actually muscle.</p>
<p><a href="https://apps.ualberta.ca/directory/person/cprado">Carla Prado</a>, a nutrition researcher in the <a href="https://www.ualberta.ca/en/agriculture-life-environment-sciences/index.html">Faculty of Agricultural, Life &amp; Environmental Sciences</a> and lead author on the commentary, explains this rate of muscle decline is significantly higher than what is typically observed with calorie-reduced diets or normal aging and could lead to a host of long-term health issues — including decreased immunity, increased risk of infections and poor wound healing.</p>
<p>“Muscle does much more than just help us move or lift things. It is a powerful organ that keeps us healthy in a number of ways,” she says.</p>
<p>For example, muscle stores important building blocks — amino acids — that the body uses when we’re sick, stressed or injured to repair itself and stay strong. It also plays a huge role in managing blood sugar, which helps prevent diabetes.</p>
<p>As well, Prado notes muscle releases special molecules called myokines that signal other parts of the body to help fight infections and support our immune system.</p>
<p>“That’s why preserving muscle is so important, especially during weight-loss treatments — it’s not just about staying strong, but about keeping our whole body resilient and healthy.”</p>
<p>In the commentary, the authors suggest that muscle loss due to weight reduction may also exacerbate conditions like sarcopenic obesity — characterized by a combination of high body fat and low skeletal muscle mass — which contributes to poorer health outcomes, including cardiovascular disease and higher mortality rates.</p>
<p>Though the short-term effects of muscle loss on physical strength and function remain unclear, the commentary calls for future research to explore how reductions in muscle mass might improve muscle mass and composition.&nbsp;</p>
<p>To keep muscle strong while losing weight, Prado says it is essential to focus on two main things: nutrition and exercise. Proper nutrition means getting enough high-quality protein, essential vitamins and minerals, and other “muscle-building” nutrients. Sometimes, this can include protein supplements to make sure the body has what it needs.</p>
<p>“Exercise is just as important — specifically resistance training like lifting weights or using resistance bands,” said Prado, who was recently named Canada Research Chair in Integrative Nutrition, Body Composition and Energy Metabolism.</p>
<p>“This type of exercise helps keep muscle from breaking down during weight loss and maintains strength.”</p>
<p>She adds that for anyone using weight loss medications, it’s best to follow a balanced program that includes both enough protein and resistance training.</p>
<p>“This can help people lose fat while minimizing muscle loss, which helps them get the full health benefits of treatment and stay strong.”</p>
<p>Prado, who is a member of the <a href="https://www.ualberta.ca/en/cancer-institute/index.html">Cancer Research Institute of Northern Alberta</a>, the <a href="https://www.wchri.org/">Women and Children’s Health Research Institute</a>, the <a href="https://www.ualberta.ca/en/alberta-diabetes/index.html">Alberta Diabetes Institute</a>, the <a href="https://www.ualberta.ca/en/alberta-transplant-institute/index.html">Alberta Transplant Institute</a> and the <a href="https://smartinstitute.ca/">Institute of Sensory Motor Rehabilitative Technology</a>, is collaborating with Dyck to explore the mechanisms and impact of various forms of muscle wasting in relation to this class of medication.</p>
                            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Z-Library Helps Students to Overcome Academic Poverty, Study Finds (259 pts)]]></title>
            <link>https://torrentfreak.com/z-library-helps-students-to-overcome-academic-poverty-study-finds-241120/</link>
            <guid>42199301</guid>
            <pubDate>Wed, 20 Nov 2024 23:36:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://torrentfreak.com/z-library-helps-students-to-overcome-academic-poverty-study-finds-241120/">https://torrentfreak.com/z-library-helps-students-to-overcome-academic-poverty-study-finds-241120/</a>, See on <a href="https://news.ycombinator.com/item?id=42199301">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p><img loading="lazy" decoding="async" src="https://torrentfreak.com/images/zlibr.jpg" alt="zlibrary" width="300" height="147" srcset="https://torrentfreak.com/images/zlibr.jpg 700w, https://torrentfreak.com/images/zlibr-18x9.jpg 18w" sizes="(max-width: 300px) 100vw, 300px"><a href="https://en.wikipedia.org/wiki/Z-Library">Z-Library</a> is one of the largest shadow libraries on the Internet, hosting millions of books and academic articles that can be downloaded for free. </p>
<p>The site defied all odds over the past two years. It continued to operate despite a full-fledged criminal prosecution by the United States, which resulted in the <a href="https://torrentfreak.com/u-s-indicts-two-russians-for-running-the-z-library-piracy-ring221117/">arrest of two alleged operators</a> in Argentina. </p>
<p>These two Russian defendants are <a href="https://torrentfreak.com/alleged-z-library-operators-ask-court-to-dismiss-criminal-piracy-indictment-230713/">wanted by the United States</a> and earlier this year a judge approved their extradition. However, according to the most recent information we have, the defendants escaped house arrest and <a href="https://torrentfreak.com/z-library-admins-escape-house-arrest-after-judge-approves-u-s-extradition-240708/">vanished into thin air</a>.</p>
<p>The roles of the two Russians remain unclear, but they were not vital to the site’s survival. Z-Library continued to expand its reach despite their legal troubles. </p>
<h2>Z-Library Motivations Research</h2>
<p>Z-Library users don’t seem to be hindered by the criminal prosecution either, as they continue to support and use the site. For many, Z-Library is simply a convenient portal to download free books. For others, however, it’s a vital resource to further an academic career. </p>
<p>A recent study published in the Journal of University Teaching &amp; Learning Practice sheds light on the latter. It looks at the ‘piracy’ motivations of Redditors and students in higher education, specifically when it comes to Z-Library. </p>
<center><em>The paper</em></center><br><center><picture loading="lazy" decoding="async">
<source type="image/webp" srcset="https://torrentfreak.com/images/zlibpaper.jpg.webp 1082w, https://torrentfreak.com/images/zlibpaper-300x129.jpg.webp 300w" sizes="(max-width: 600px) 100vw, 600px">
<img loading="lazy" decoding="async" src="https://torrentfreak.com/images/zlibpaper.jpg" alt="zlib" width="600" height="259" srcset="https://torrentfreak.com/images/zlibpaper.jpg 1082w, https://torrentfreak.com/images/zlibpaper-300x129.jpg 300w, https://torrentfreak.com/images/zlibpaper-600x259.jpg 600w, https://torrentfreak.com/images/zlibpaper-150x65.jpg 150w" sizes="(max-width: 600px) 100vw, 600px">
</picture>
</center>
<p>The paper, published by Dr. Michael Day of the University of Greenwich, labels the use of Z-Library as ‘Academic Cybercrime’. The findings, however, suggest that students are more likely to draw comparisons with “Robin Hood”.</p>
<p>The research looks at the motivations of two groups; Reddit users and Chinese postgraduate students. Despite the vast differences between these groups, their views on Z-Library are quite similar. </p>
<h2>Redditors’ Responses</h2>
<p>The 134 Reddit responses were sampled from the Zlibrary subreddit, which is obviously biased in favor of the site. However, the reasoning goes well beyond a simple “I want free stuff” arguments.</p>
<p>Many commenters highlighted that they were drawn to the site out of poverty, for example, or they highlighted that Z-Library was an essential tool to fulfill their academic goals. </p>
<p>“Living in a 3rd world country, 1 book would cost like 50%- 80% already of my daily wage,” one Redditor wrote. </p>
<p>The idea that Z-Library is a ‘necessary evil’ was also highlighted by other commenters. This includes a student who can barely make ends meet, and a homeless person, who has neither the money nor the space for physical books.</p>
<center><em>Some responses</em></center><br><center></center><center><picture loading="lazy" decoding="async">
<source type="image/webp" srcset="https://torrentfreak.com/images/reddit-comments-1.jpg.webp 970w, https://torrentfreak.com/images/reddit-comments-1-300x198.jpg.webp 300w" sizes="(max-width: 600px) 100vw, 600px">
<img loading="lazy" decoding="async" src="https://torrentfreak.com/images/reddit-comments-1.jpg" alt="reddit comments" width="600" height="396" srcset="https://torrentfreak.com/images/reddit-comments-1.jpg 970w, https://torrentfreak.com/images/reddit-comments-1-300x198.jpg 300w, https://torrentfreak.com/images/reddit-comments-1-600x396.jpg 600w, https://torrentfreak.com/images/reddit-comments-1-150x99.jpg 150w" sizes="(max-width: 600px) 100vw, 600px">
</picture>
</center>
<p>The lack of free access to all study materials, including academic journal subscriptions at university libraries, was also a key motivator. Paired with the notion that journal publishers make billions of dollars, without compensating authors, justification is found for ‘pirate’ alternatives. </p>
<p>“They make massive profits. So stealing from them doesn’t hurt the authors nor reviewers, just the rich greedy publishers who make millions just to design a cover and click ‘publish’,” one Redditor wrote. </p>
<h2>Chinese Students</h2>
<p>The second part of the study is conducted in a more structured format among 103 postgraduate students in China. This group joined a seminar where Z-Library and the crackdown were discussed. In addition, the students participated in follow-up focus group discussions, while also completing a survey. </p>
<p>Despite not all being users of the shadow library, 41% of the students agreed that the site’s (temporary) shutdown affected their ability to study and find resources for degree learning.</p>
<p>In general, the students have a favorable view toward Z-Library and similar sites, and 71% admit that they have used a shadow library in the past. In line with China’s socialist values, the overwhelming majority of the students agreed that access to knowledge should be free for everyone. </p>
<p>While the students are aware of copyright law, they believe that the need to access knowledge outweighs rightsholders’ concerns. This is also reflected in the following responses, among others. </p>
<blockquote><p><sup>– Z-Library, or a similar website, is helpful to students living in poverty (82% agree).<br>
– Academic textbooks are too expensive, so I can’t afford to buy them as a student (67% agree).<br>
– I have limited access to English medium academic books in my country (63% agree)<br>
– I prefer to download books without restrictions, like [paywalls etc.], as it is difficult (77% agree).</sup></p></blockquote>
<p>All in all, Z-Library and other shadow libraries are seen as a viable option for expensive or inaccessible books, despite potential copyright concerns. </p>
<h2>Robin Hood Mentality</h2>
<p>This research sheds an intriguing light on key motivations to use shadow libraries. However, the small sample sizes, selection bias, and specific characteristics of the groups, means that these findings should be interpreted with caution. </p>
<p>Dr. Michael Day, nonetheless, notes that the responses show clear signs of a Robin Hood mentality. Z-Library users evade the publishers’ ‘tax’ on knowledge by downloading works for free. </p>
<p>Overall, the paper suggests that universities and publishers may want to reconsider the status quo and consider making more content freely accessible, taking a page from Z-Library. </p>
<p>“There is need for universities to re-consider the digital divides faced by socioeconomically and digitally disadvantaged students, alongside publishers, who must rethink their approach by making open access research more commonplace and thus pro-human,” the author concludes.  </p>
<p>The paper provides a good example, as it is published under a Creative Commons license and is <a href="https://doi.org/10.53761/90p10x2">freely accessible to all</a>. </p>
<p><em>—</em></p><p><em>Day, M.J. (2024). Digital Piracy in Higher Education: Exploring Social Media Users and Chinese Postgraduate Students Motivations for Supporting ‘Academic Cybercrime’ by Shelving ebooks  from  Z-Library.  Journal  of  University  Teaching  and  Learning  Practice. </em></p>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Europe's Internet resilience mitigates impact of submarine cable cuts (113 pts)]]></title>
            <link>https://blog.cloudflare.com/resilient-internet-connectivity-baltic-cable-cuts/</link>
            <guid>42198635</guid>
            <pubDate>Wed, 20 Nov 2024 22:10:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.cloudflare.com/resilient-internet-connectivity-baltic-cable-cuts/">https://blog.cloudflare.com/resilient-internet-connectivity-baltic-cable-cuts/</a>, See on <a href="https://news.ycombinator.com/item?id=42198635">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post"><article><p>2024-11-20</p><section><p>6 min read</p><img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3dWoOcmImje5kF6Q7mXg8N/131884a8cd009a8c225d5aa3d64f4b97/BLOG-2626_1.png" alt=""><div><p>When cable cuts occur, whether submarine or terrestrial, they often result in observable disruptions to Internet connectivity, knocking a network, city, or country offline. This is especially true when there is insufficient resilience or alternative paths — that is, when a cable is effectively a single point of failure. Associated observations of traffic loss resulting from these disruptions are frequently covered by Cloudflare Radar in social media and blog posts. However, two recent cable cuts that occurred in the Baltic Sea resulted in little-to-no observable impact to the affected countries, as we discuss below, in large part because of the significant redundancy and resilience of Internet infrastructure in Europe.</p>
          <p>
            <h2 id="bcs-east-west-interlink">BCS East-West Interlink</h2>
            
          </p>
          
          <p>
            <h3 id="traffic-volume-indicators">Traffic volume indicators</h3>
            
          </p>
        <p>On Sunday, November 17 2024, the <a href="https://www.submarinecablemap.com/submarine-cable/bcs-east-west-interlink"><u>BCS East-West Interlink submarine cable</u></a> connecting Sventoji, Lithuania and Katthammarsvik, Sweden was <a href="https://www.datacenterdynamics.com/en/news/lithuania-sweden-subsea-cable-cut-was-10m-from-severed-finnish-german-cable/"><u>reportedly damaged</u></a> around 10:00 local (Lithuania) time (08:00 UTC). A <a href="https://www.datacenterdynamics.com/en/news/lithuania-sweden-subsea-cable-cut-was-10m-from-severed-finnish-german-cable/"><u>Data Center Dynamics article about the cable cut</u></a> quotes the CTO of Telia Lietuva, the telecommunications provider that operates the cable, and notes “<i>The Lithuanian cable carried about a third of the nation's Internet capacity, but capacity was carried via other routes.</i>”</p><p>As the Cloudflare Radar graphs below show, there was no apparent impact to traffic volumes in either country at the time that the cables were damaged. The NetFlows graphs represent the number of bytes that Cloudflare sends to users and clients in response to their requests.</p>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7xDllSeyPtet5ovpXI3GMH/6bc5680bbd8219f417e891102c4ffb0e/BLOG-2626_2.png" alt="BLOG-2626 2" width="1600" height="1072" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2RE0V8M2CFPt1uxsOjhSBz/dc5c261808c021fc9ff0ab65963fce0b/BLOG-2626_3.png" alt="BLOG-2626 3" width="1600" height="1072" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6wjHy79iHDqcuzknxcK14o/a4526787c3fdde54a6627b16717aaec0/BLOG-2626_4.png" alt="BLOG-2626 4" width="1600" height="1072" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2zPi0GZ54gGDjCMyivhH0C/f6e50728ae7dc110fd15edc40f43b694/BLOG-2626_5.png" alt="BLOG-2626 5" width="1600" height="1072" loading="lazy">
          </figure>
          <p>
            <h3 id="internet-quality">Internet quality</h3>
            
          </p>
        <p>Internet quality metrics for both countries show changes in measured bandwidth and latency throughout the day on Sunday, but with no sudden anomalous shifts visible around the time of the cable cut. (The loss of connectivity associated with a cable cut potentially manifests itself as an increase in latency and concurrent decrease in bandwidth due to loss of capacity.) The latency graph for Sweden does show an increase in latency, but it began before the cable cut occurred, is similar to a pattern visible several hours earlier, and is matched by an increase in measured bandwidth, so it is unlikely to be related to the cable cut event.</p>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3aXlBjU08WKKT0OSnWBsIP/eb32b937d1729160dec83204bba06e91/BLOG-2626_6.png" alt="BLOG-2626 6" width="1600" height="900" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5eeR8OlwA5CHROGkqKn1KJ/e372a25ad2a93aaa38339f360f3a7b0e/BLOG-2626_7.png" alt="BLOG-2626 7" width="1600" height="900" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6wGJFP5K0LkEjw8DXbQ45z/516cf3b04ac5c5f2f82398be508fe4b0/BLOG-2626_8.png" alt="BLOG-2626 8" width="1600" height="900" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2ZLyXG9lCsfazoMm1b6c4z/1af296913ff00da991c04d1422bd49fd/BLOG-2626_9.png" alt="BLOG-2626 9" width="1600" height="900" loading="lazy">
          </figure>
          <p>
            <h3 id="visibility-in-bgp-events-announced-ip-address-space-unaffected">Visibility in BGP events, announced IP address space unaffected</h3>
            
          </p>
        <p><a href="https://developers.cloudflare.com/radar/glossary/#bgp-announcements"><u>BGP announcements</u></a> are a way for network providers to communicate routing information to other networks, and announcement activity observed on Telia Lietuva’s <a href="https://www.cloudflare.com/learning/network-layer/what-is-an-autonomous-system/"><u>autonomous systems</u></a> around the time of the cable cut may be related to the re-routing referenced in the article. No change in announced IP address space was visible for any of these autonomous systems, suggesting no loss of connectivity as the capacity was re-routed.</p>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7dWHQYn0cJ3PdivPgI2sDI/696207021bf5e75d061040c33505923a/BLOG-2626_10.png" alt="BLOG-2626 10" width="1600" height="900" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5QPU28IyaW3QPCqaIzTZec/19b3ed7675d23441c9493c2313134a41/BLOG-2626_11.png" alt="BLOG-2626 11" width="1600" height="900" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4zSx3b14HwaBIFX5qc59bq/4f8e2b4951498a2edcae846068927350/BLOG-2626_12.png" alt="BLOG-2626 12" width="1600" height="900" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1P04AQZbfZOTisBPutbLZa/5e6520bfd1782976538c98914134fe94/BLOG-2626_13.png" alt="BLOG-2626 13" width="1600" height="900" loading="lazy">
          </figure><p>Telegeography’s <a href="http://submarinecablemap.com/"><u>submarinecablemap.com</u></a> illustrates, at least in part, the resilience in connectivity enjoyed by these two countries. In addition to the damaged cable, it shows that <a href="https://www.submarinecablemap.com/country/lithuania"><u>Lithuania</u></a> is <a href="https://www.submarinecablemap.com/submarine-cable/bcs-east"><u>connected to neighboring Latvia</u></a> as well as <a href="https://www.submarinecablemap.com/submarine-cable/nordbalt"><u>to the Swedish mainland</u></a>. Over 20 submarine cables land in <a href="https://www.submarinecablemap.com/country/sweden"><u>Sweden</u></a>, connecting it to multiple countries across Europe. In addition to the submarine resilience, network providers in both countries can take advantage of terrestrial fiber connections to neighboring countries, such as those illustrated in a <a href="https://www.arelion.com/our-network"><u>European network map from Arelion</u></a> (formerly Telia), which is only one of the large European backbone providers.</p>
          <p>
            <h2 id="c-lion1">C-Lion1</h2>
            
          </p>
          
          <p>
            <h3 id="traffic-volume-indicators">Traffic volume indicators</h3>
            
          </p>
        <p>Less than a day later, the <a href="https://www.submarinecablemap.com/submarine-cable/c-lion1"><u>C-Lion1 submarine cable</u></a>, which connects Helsinki, Finland and Rostock Germany was <a href="https://www.datacenterdynamics.com/en/news/helsinki-rostock-subsea-cable-between-finland-and-germany-severed/"><u>reportedly damaged</u></a> during the early morning hours of Monday, November 18. Cinia, the telecommunications company that owns the cable, <a href="https://www.theguardian.com/world/2024/nov/19/baltic-sea-cables-damage-sabotage-german-minister"><u>said</u></a> that the cable stopped working at about 02:00 UTC.&nbsp;</p><p>In this situation as well, as the Cloudflare Radar graphs below show, there was no apparent impact to traffic volumes in either country at the time that the cables were damaged. The Finland graphs, week-on-week, show fewer bytes transferred and fewer HTTP requests, but that difference is present before the cable cut at 02:00 UTC. However, the trend of the current line does not change after the cable cut, so the two events would appear unrelated.&nbsp;</p>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4OQtSFBgBzdmnzWz8AdM7Z/3a66cec98698bf6d506d93fc13fe4c74/BLOG-2626_14.png" alt="BLOG-2626 14" width="1600" height="1072" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4gqxHsD3ykjWGWhATVU8iw/f74916e1faf186efef94e6dc29bbca58/BLOG-2626_15.png" alt="BLOG-2626 15" width="1600" height="1072" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4gh5eLQZNabsz9XnOSgtU1/fb6d0770c62ce016d73c1a3c47ae99f1/BLOG-2626_16.png" alt="BLOG-2626 16" width="1600" height="1072" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6FIKh8U2nxHkxMdXho6HsI/9e349d0767df5d34d3b8274710c2cb0b/BLOG-2626_17.png" alt="BLOG-2626 17" width="1600" height="1072" loading="lazy">
          </figure>
          <p>
            <h3 id="internet-quality">Internet quality</h3>
            
          </p>
        <p>By looking at volume-related metrics, alone, Internet connectivity would appear to be unaffected by the cable cut.</p><p>If, however, we change perspective and look at Internet quality, a brief yet interesting change is visible for Finland around the reported time of the cable damage, though it isn’t clear whether it is related in any way. Just after midnight, median measured bandwidth, previously consistent around 50 Mbps begins to grow, peaking just over 200 Mbps around 03:00 UTC. Around that same time, measured median latency also begins to drop, falling from around 30 ms to a low of 13 ms, also around 03:00 UTC. Median bandwidth returned to normal levels around 06:00 UTC, while latency took about two hours longer to return to normal levels.&nbsp; These observed&nbsp; improvements in bandwidth and latency could have been due to traffic being re-routed to along paths with better connectivity to measurement endpoints, but because the shifts began before the cable damage occurred, and recovered shortly thereafter, that is unlikely to be the root cause.</p><p>In Germany, a brief minor increase in median bandwidth peaked around 02:45 UTC, while no notable changes were observed in latency.</p>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/94V0coi6oFBdUMX1SVyl7/44738b06af2e51b4e436c84dbe6a1a79/BLOG-2626_18.png" alt="BLOG-2626 18" width="1600" height="900" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/Bqy5uQ76FwmmOX92Co4cE/96190329454e264966119a0f9a4533ff/BLOG-2626_19.png" alt="BLOG-2626 19" width="1600" height="900" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1BJCVdjJMILFubi4SW8HR6/7b97343910ab70cc1a4cad3d3565a727/BLOG-2626_20.png" alt="BLOG-2626 20" width="1600" height="900" loading="lazy">
          </figure>
          <figure>
          <img src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3lf5GR9ElhjpW0wYzPieNI/c02a588af54ac36521f901307d9f62f7/BLOG-2626_21.png" alt="BLOG-2626 21" width="1600" height="900" loading="lazy">
          </figure>
          <p>
            <h3 id="bgp-business-as-usual">BGP business as usual</h3>
            
          </p>
        <p>From a routing perspective, there was no notable BGP announcement activity observed for top autonomous systems in either Finland or Germany around 02:00 on November 18, and total announced IP address space aggregated at a country level also demonstrated no change.</p><p>Telegeography’s <a href="http://submarinecablemap.com/"><u>submarinecablemap.com</u></a> shows that both Finland and Germany also have significant redundancy and resilience from a submarine cable perspective, with over 10 cables landing in <a href="https://www.submarinecablemap.com/country/finland"><u>Finland</u></a>, and nearly 10 landing in <a href="https://www.submarinecablemap.com/country/germany"><u>Germany</u></a>, including <a href="https://www.submarinecablemap.com/submarine-cable/atlantic-crossing-1-ac-1"><u>Atlantic Crossing-1 (AC-1)</u></a>, which connects to the United States over two distinct paths. Terrestrial fiber maps from <a href="https://www.arelion.com/our-network"><u>Arelion</u></a> and <a href="https://map.eunetworks.com/?_ga=2.220121625.1822578510.1543942339-1757484894.1536310774"><u>eunetworks</u></a> (as just two examples) show multiple redundant fiber routes within both countries, as well as cross-border routes to other neighboring countries, enabling more resilient Internet connectivity.</p>
          <p>
            <h2 id="conclusion">Conclusion</h2>
            
          </p>
          <p>As we have discussed in multiple prior blog posts (<a href="https://blog.cloudflare.com/not-one-not-two-but-three-undersea-cables-cut-in-jersey"><u>Jersey, 2016</u></a>; <a href="https://blog.cloudflare.com/aae-1-smw5-cable-cuts"><u>AAE-1/SMW5, 2022</u></a>; <a href="https://blog-cloudflare-com.webpkgcache.com/doc/-/s/blog.cloudflare.com/undersea-cable-failures-cause-internet-disruptions-across-africa-march-14-2024"><u>WACS/MainOne/SAT3/ACE, 2024</u></a>; <a href="https://blog.cloudflare.com/east-african-internet-connectivity-again-impacted-by-submarine-cable-cuts/"><u>EASSy/Seacom, 2024</u></a>), cable cuts often cause significant disruptions to Internet connectivity, in many cases because they represent a concentrated point of vulnerability, whether for an individual network provider, city/state, or country. These disruptions are often quite lengthy as well, due to the time needed to marshal repair resources, identify the location of the damage, etc. Although it is not always feasible due to financial or geographic constraints, building redundant and resilient network architecture, at multiple levels, is a best practice. This includes the sending traffic over multiple physical cables (both submarine and terrestrial), connecting to multiple peer and upstream network providers, and even avoiding single points of failure in core Internet resources like DNS servers.</p><p>The Cloudflare Radar team continually monitors the status of Internet connectivity in countries/regions around the world, and we share our observations on the <a href="https://radar.cloudflare.com/outage-center"><u>Cloudflare Radar Outage Center</u></a>, via social media, and in posts on <a href="https://blog.cloudflare.com/tag/cloudflare-radar/"><u>blog.cloudflare.com</u></a>. Follow us on social media at <a href="https://twitter.com/CloudflareRadar"><u>@CloudflareRadar</u></a> (X), <a href="https://noc.social/@cloudflareradar"><u>https://noc.social/@cloudflareradar</u></a> (Mastodon), and <a href="https://bsky.app/profile/radar.cloudflare.com"><u>radar.cloudflare.com</u></a> (Bluesky), or contact us via email.</p></div></section><div><p>Cloudflare's connectivity cloud protects <a target="_blank" href="https://www.cloudflare.com/network-services/" rel="noreferrer">entire corporate networks</a>, helps customers build <a target="_blank" href="https://workers.cloudflare.com/" rel="noreferrer">Internet-scale applications efficiently</a>, accelerates any <a target="_blank" href="https://www.cloudflare.com/performance/accelerate-internet-applications/" rel="noreferrer">website or Internet application</a>, <a target="_blank" href="https://www.cloudflare.com/ddos/" rel="noreferrer">wards off DDoS attacks</a>, keeps <a target="_blank" href="https://www.cloudflare.com/application-security/" rel="noreferrer">hackers at bay</a>, and can help you on <a target="_blank" href="https://www.cloudflare.com/products/zero-trust/" rel="noreferrer">your journey to Zero Trust</a>.</p><p>Visit <a target="_blank" href="https://one.one.one.one/" rel="noreferrer">1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.</p><p>To learn more about our mission to help build a better Internet, <a target="_blank" href="https://www.cloudflare.com/learning/what-is-cloudflare/" rel="noreferrer">start here</a>. If you're looking for a new career direction, check out <a target="_blank" href="https://www.cloudflare.com/careers" rel="noreferrer">our open positions</a>.</p></div><a href="https://blog.cloudflare.com/tag/cloudflare-radar">Cloudflare Radar</a><a href="https://blog.cloudflare.com/tag/internet-traffic">Internet Traffic</a><a href="https://blog.cloudflare.com/tag/traffic">Traffic</a><a href="https://blog.cloudflare.com/tag/outage">Outage</a></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google stops letting sites like Forbes rule search for "Best CBD Gummies" (206 pts)]]></title>
            <link>https://arstechnica.com/gadgets/2024/11/google-cracks-down-on-parasite-seo-punishing-established-publishers/</link>
            <guid>42198115</guid>
            <pubDate>Wed, 20 Nov 2024 21:07:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/gadgets/2024/11/google-cracks-down-on-parasite-seo-punishing-established-publishers/">https://arstechnica.com/gadgets/2024/11/google-cracks-down-on-parasite-seo-punishing-established-publishers/</a>, See on <a href="https://news.ycombinator.com/item?id=42198115">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          
          
<p>Under the strength of Forbes' long-existing and well-linked site, Forbes Marketplace/Advisor has dominated the search term "best cbd gummies" for "an eternity," <a href="https://x.com/lilyraynyc/status/1859262396130336911">according to SEO analyst Lily Ray</a>. Forbes has similarly dominated "best pet insurance," and long came up as the second result for "how to get rid of roaches," as <a href="https://larslofgren.com/forbes-marketplace/">detailed in a blog post by Lars Lofgren</a>. If people click on this high-ranking result, and then click on a link to buy a product or request a roach removal consultation, Forbes typically gets a cut.</p>
<p>Forbes Marketplace had seemingly also provided SEO-minded review services to CNN and USA Today, as <a href="https://larslofgren.com/cnn-usa-today-forbes-marketplace/">detailed by Lofgren</a>. Lofgren's term for this business, "Parasite SEO," took hold in corners critical of the trend. Ars has contacted Forbes for comment and will update this post with response.</p>
<h2>“The unfair, exploitative nature” of “parasite SEO”</h2>
<p>Google writes that it had reviewed "situations where there might be varying degrees of first-party involvement" (most publishers' review sites indicate some kind of oversight or editorial standards linked to the primary site). But however arranged, "no amount of first-party involvement alters the fundamental third-party nature of the content or the unfair, exploitative nature of attempting to take advantage of the host sites' ranking signals."</p>
<p>As such, using third-party content in such a way as to take advantage of a high search quality ranking, outside the site's primary focus, is considered spam. That delivers a major hit to a site's Google ranking, and the impact is already being felt.</p>
<p>The SEO reordering does not affect more established kinds of third-party content, like wire service reports, syndication, or well-marked sponsored content, as detailed in Google's spam policy <a href="https://developers.google.com/search/docs/essentials/spam-policies#site-reputation">section about site reputation abuse</a>. As seen on the <a href="https://www.reddit.com/r/SEO">SEO subreddit</a>, and on social media, Google has given sites running afoul of its updated policy a "<a href="https://support.google.com/webmasters/answer/9044175?hl=en-NA">Manual Action</a>" rather than relying only on its algorithm to catch the often opaque arrangements.</p>


          
                  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[With Core One, Prusa's Open Source Hardware Dream Dies (101 pts)]]></title>
            <link>https://hackaday.com/2024/11/20/with-core-one-prusas-open-source-hardware-dream-quietly-dies/</link>
            <guid>42197845</guid>
            <pubDate>Wed, 20 Nov 2024 20:35:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hackaday.com/2024/11/20/with-core-one-prusas-open-source-hardware-dream-quietly-dies/">https://hackaday.com/2024/11/20/with-core-one-prusas-open-source-hardware-dream-quietly-dies/</a>, See on <a href="https://news.ycombinator.com/item?id=42197845">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
        <p>Yesterday, Prusa Research officially unveiled their next printer, the Core ONE. Going over the features and capabilities of this new machine, it’s clear that Prusa has kept a close eye on the rapidly changing desktop 3D printer market and designed a machine to better position themselves within a field of increasingly capable machines from other manufacturers.</p>
<p>While some saw the incremental upgrades of the i3 MK4 as being too conservative, the Core ONE ticks all the boxes of what today’s consumer is looking for — namely high-speed CoreXY movement with a fully enclosed chamber — while still offering the build quality, upgradability, and support that the company has built its reputation on. Put simply it’s one of the most exciting products they’ve introduced in a long time, and exactly the kind of machine that many Prusa fans have been waiting for.</p>
<p>Unfortunately, there’s one feature that’s ominously absent from the <a href="https://blog.prusa3d.com/introducing-prusa-core-one-fully-enclosed-corexy-3d-printer-with-active-temperature-control_105477/" target="_blank">Core ONE announcement post</a>. It’s easy to overlook, and indeed, most consumers probably won’t even know it’s missing. But for those of us who are concerned with such matters, it’s an unspoken confirmation that an era has finally come to an end.</p>
<p>With the Core ONE, Prusa Research is no longer in the business of making open source 3D printer hardware, but that doesn’t mean that the printer isn’t hackable. It’s complicated, so read on.</p>

<h2>Death by a Thousand Cuts</h2>
<p>To say that Prusa Research pivoting away from the open source hardware (OSHW) principles that guided the company, and indeed the 3D printing community, through its early years is a disappointment would be quite an understatement. It’s a crushing blow. One which critics will use to call into question the viability of building a sustainable business model around OSHW. But it’s also not hard to see how we got to this point.</p>
<figure id="attachment_734932" aria-describedby="caption-attachment-734932"><a href="https://hackaday.com/wp-content/uploads/2024/11/coreone_xl.jpg"><img decoding="async" data-attachment-id="734932" data-permalink="https://hackaday.com/2024/11/20/with-core-one-prusas-open-source-hardware-dream-quietly-dies/coreone_xl/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_xl.jpg" data-orig-size="484,606" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="coreone_xl" data-image-description="" data-image-caption="<p>Prusa XL</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_xl.jpg?w=319" data-large-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_xl.jpg?w=484" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/11/coreone_xl.jpg?w=319" alt="" width="319" height="400" srcset="https://hackaday.com/wp-content/uploads/2024/11/coreone_xl.jpg 484w, https://hackaday.com/wp-content/uploads/2024/11/coreone_xl.jpg?resize=200,250 200w, https://hackaday.com/wp-content/uploads/2024/11/coreone_xl.jpg?resize=319,400 319w" sizes="(max-width: 319px) 100vw, 319px"></a><figcaption id="caption-attachment-734932">Prusa XL</figcaption></figure>
<p>The first warning sign came back in 2021, <a href="https://blog.prusa3d.com/original-prusa-xl-first-look_58312/" target="_blank">with the announcement of the Prusa XL</a>. With this new high-end printer, the company seemed uncharacteristically hesitant to open things up, which frankly wasn’t entirely unreasonable. The pricing of the XL put it closer into the professional market than a traditional hobbyist machine, and there were some new features like tool changing and a&nbsp; segmented heated bed that were unique enough that they’d want to keep the details under wraps until the machine at least got a foothold in the market. So if Prusa wanted to play this one a little closer to the chest, so be it.</p>
<p>But things took a concerning turn last year with the <a href="https://blog.prusa3d.com/announcing-original-prusa-mk4_76585/" target="_blank">release of the i3 MK4</a>. Although Prusa still called the printer open source in their marketing, the reality was a bit more complicated. While at least some of the printer’s technical information was made available, especially the elements that were inherited from the earlier i3 models, there were several rather large omissions.</p>
<p>Printable parts were available only as STLs, there were no design files released for the printer’s control board, and the Nextruder (which was introduced with the XL) remained all but completely proprietary. Many argued that the MK4 didn’t meet the standards that Prusa had set with their previous printers, and that continuing to call it open source was misleading.</p>
<p>If it wasn’t already obvious that Prusa’s commitment to open source was beginning to waiver, <a href="https://blog.prusa3d.com/the-state-of-open-source-in-3d-printing-in-2023_76659/" target="_blank">Josef’s post on the Prusa Blog</a> made his position abundantly clear. Framed as a call for discussion, the post outlined his feelings on the open source community and what he perceived as the failures of common licenses such as the GPL. While he said that the company still intended to make their machines open, the writing was clearly on the wall.</p>
<h2>A New Chapter for Prusa</h2>
<p>To be clear, the Core ONE is of critical strategic importance to Prusa. The company needed a revamped machine to combat increased competition from Chinese printer manufacturers, and while it’s not being marketed as a replacement for the i3 MK4, it’s not hard to see the direction the market is moving in. The i3 is a workhorse, and won’t be going away anytime soon, but the chances that it will see a MK5 at this point seem exceptionally slim.</p>
<figure id="attachment_734937" aria-describedby="caption-attachment-734937"><a href="https://hackaday.com/wp-content/uploads/2024/11/coreone_nextruder.jpg"><img decoding="async" data-attachment-id="734937" data-permalink="https://hackaday.com/2024/11/20/with-core-one-prusas-open-source-hardware-dream-quietly-dies/coreone_nextruder/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_nextruder.jpg" data-orig-size="800,754" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="coreone_nextruder" data-image-description="" data-image-caption="<p>Prusa will give you STLs for the Nextruder, but that’s about it.</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_nextruder.jpg?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_nextruder.jpg?w=663" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/11/coreone_nextruder.jpg?w=663" alt="" width="388" height="365" srcset="https://hackaday.com/wp-content/uploads/2024/11/coreone_nextruder.jpg 800w, https://hackaday.com/wp-content/uploads/2024/11/coreone_nextruder.jpg?resize=250,236 250w, https://hackaday.com/wp-content/uploads/2024/11/coreone_nextruder.jpg?resize=400,377 400w, https://hackaday.com/wp-content/uploads/2024/11/coreone_nextruder.jpg?resize=663,625 663w" sizes="(max-width: 388px) 100vw, 388px"></a><figcaption id="caption-attachment-734937">Prusa will give you STLs for the Nextruder, but that’s about it.</figcaption></figure>
<p>But the Core ONE also represents a mostly clean slate design, one that shares relatively little with the i3. This frees Prusa from any obligation, perceived or otherwise, to continue releasing the printer’s design files. Indeed, the term “open source” only appears once in the announcement post for the printer — and that’s when referring to the firmware and slicer code, which are.</p>
<p>Although we don’t have documentation or an assembly guide for the Core ONE or the MK4S-&gt;Core upgrade kits yet, it looks as if very little of Prusa’s remaining open source hardware has been brought forward.</p>
<p>Potentially the Core ONE is using some variation of the <a href="https://github.com/prusa3d/Heatbed_MK52_magnetic" target="_blank">CC BY-SA 4.0 licensed MK52 magnetic heated bed</a>, but beyond that, we already know that Prusa is still keeping the design files for major components such as the Nextruder and xBuddy 32-bit control board under wraps for the time being.</p>
<h2>Not Open, But Hackable</h2>
<p>So we know that Prusa isn’t advertising the Core ONE design as open source hardware, and that only limited technical data has been released for the few components and subsystems that it inherits from the XL and MK4S. But what does that actually mean for users like us?</p>
<p>That’s where things get a little tricky. While Prusa’s newer printers certainly do not meet the literal requirements of OSHW, they’re still remarkably transparent in a world of proprietary black boxes. We might not get the design files for the printed parts in these new machines, but you’ll get STLs that you can run off if you need a replacement. We can also be fairly sure that Prusa will continue their tradition of releasing wiring schematics for the Core ONE as they’ve done with <a href="https://www.prusa3d.com/page/open-source-at-prusa-research_236812/" target="_blank">essentially all of their previous printers</a>, which is more than we can say for the vast majority of consumer products.</p>
<p>While the lack of design files for these new Prusa printers is unfortunate on a philosophical level, it’s hard to argue that they’re any less repairable, upgradable, or hackable than their predecessors. In fact, Prusa’s actually made at least one improvement in that department — announcing that <a href="https://hackaday.com/2019/12/16/prusa-dares-you-to-break-their-latest-printer/">breaking off the control board’s “Appendix” security device</a> and installing a new firmware will no longer void the printer’s warranty.</p>
<figure id="attachment_734936" aria-describedby="caption-attachment-734936"><a href="https://hackaday.com/wp-content/uploads/2024/11/coreone_open_lg.png"><img loading="lazy" decoding="async" data-attachment-id="734936" data-permalink="https://hackaday.com/2024/11/20/with-core-one-prusas-open-source-hardware-dream-quietly-dies/coreone_open_lg/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_open_lg.png" data-orig-size="800,354" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="coreone_open_lg" data-image-description="" data-image-caption="<p>An increasingly inaccurate message on the Prusa website.</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_open_lg.png?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_open_lg.png?w=800" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/11/coreone_open_lg.png?w=800" alt="" width="800" height="354" srcset="https://hackaday.com/wp-content/uploads/2024/11/coreone_open_lg.png 800w, https://hackaday.com/wp-content/uploads/2024/11/coreone_open_lg.png?resize=250,111 250w, https://hackaday.com/wp-content/uploads/2024/11/coreone_open_lg.png?resize=400,177 400w" sizes="auto, (max-width: 800px) 100vw, 800px"></a><figcaption id="caption-attachment-734936">An increasingly inaccurate message on the <a href="https://www.prusa3d.com/page/about-us_77/" target="_blank">Prusa website</a>.</figcaption></figure>
<p>We should also consider that even Prusa’s earlier printers have not always been as open as the company would perhaps like us to believe. Sure, for the Prusa Mini you could hop on <a href="https://github.com/prusa3d/Buddy-board-MINI-PCB" target="_blank">GitHub and grab the KiCad files for its mainboard</a>, and the design files for the i3 up until the MK3 are available as <a href="https://github.com/prusa3d/Original-Prusa-i3" target="_blank">GPLv2 licensed OpenSCAD code.</a> But the company has never actually provided a complete Bill of Materials for their printers, and <a href="https://github.com/prusa3d/Prusa-Firmware-Buddy/issues/1440" target="_blank">even after years of requests from the community</a>, they have still yet to release the source code for their bootloader as they consider it a separate project from the main GPL-licensed firmware.</p>
<p>Prusa has always used a somewhat piecemeal method of releasing the source and design files for their products. But it’s worked for them up to this point. The bottom line is, makers and hackers will still have plenty to work with, even if things aren’t quite as open as we’d prefer.</p>
<h2>Becoming Your Own Enemy</h2>
<p>On a personal note, I find myself conflicted. I’d argue that the <a href="https://hackaday.com/2018/10/22/a-close-look-at-the-prusa-i3-mk3/">i3 MK3 is one of the best purchases I’ve ever made</a>, and there’s no doubt in my mind that the “Prusa Experience” — support, reliability, upgradability — is worth spending the extra money on. I’m also confident that the Core ONE is precisely the kind of machine Prusa needed to remain competitive in today’s market.</p>
<figure id="attachment_734930" aria-describedby="caption-attachment-734930"><a href="https://hackaday.com/wp-content/uploads/2024/11/coreone_bambu.jpg"><img loading="lazy" decoding="async" data-attachment-id="734930" data-permalink="https://hackaday.com/2024/11/20/with-core-one-prusas-open-source-hardware-dream-quietly-dies/coreone_bambu/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_bambu.jpg" data-orig-size="532,1010" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="coreone_bambu" data-image-description="" data-image-caption="<p>Who’s copying who?</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_bambu.jpg?w=211" data-large-file="https://hackaday.com/wp-content/uploads/2024/11/coreone_bambu.jpg?w=329" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/11/coreone_bambu.jpg?w=211" alt="" width="240" height="455" srcset="https://hackaday.com/wp-content/uploads/2024/11/coreone_bambu.jpg 532w, https://hackaday.com/wp-content/uploads/2024/11/coreone_bambu.jpg?resize=132,250 132w, https://hackaday.com/wp-content/uploads/2024/11/coreone_bambu.jpg?resize=211,400 211w, https://hackaday.com/wp-content/uploads/2024/11/coreone_bambu.jpg?resize=329,625 329w" sizes="auto, (max-width: 240px) 100vw, 240px"></a><figcaption id="caption-attachment-734930">Who’s copying who?</figcaption></figure>
<p>At the same time, there were issues that I was willing to overlook because the company was producing open source hardware. When a shipping date slipped, or a firmware update introduced a new issue, I let it slide because it was for the greater good. But now that they’re no longer calling their printers open source, I can’t help but feel some of that goodwill evaporating — and I’m probably not the only one having similar thoughts.</p>
<p>Ultimately, the part that bothers me the most about this change in Prusa’s approach is that it all seems predicated on a bogeyman that I’m not convinced actually exists. The company line is that releasing the source for their printers allows competitors to churn out cheap clones of their hardware — but where are they?</p>
<p>Let’s be honest, Bambu didn’t need to copy any of Prusa’s hardware to take their lunch money. You can only protect your edge in the market if you’re ahead of the game to begin with, and if anything, Prusa is currently playing catch-up to the rest of the industry that has moved on to faster designs. The only thing Prusa produces that their competitors are actually able to take advantage of is their slicer, but that’s another story entirely. (And of course, <a href="https://github.com/prusa3d/PrusaSlicer" target="_blank">it <em>is</em> still open source,</a> and widely forked.)</p>
<p>So will the Prusa Core ONE be a good printer? Almost certainly. Will I buy one? Very likely. But part of me will always be disappointed that the guy with the open source hardware logo tattoo took his ball and went home as soon as the game starting getting tough.</p>
	            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AlphaQubit: AI to identify errors in Quantum Computers (107 pts)]]></title>
            <link>https://blog.google/technology/google-deepmind/alphaqubit-quantum-error-correction/</link>
            <guid>42196841</guid>
            <pubDate>Wed, 20 Nov 2024 18:37:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.google/technology/google-deepmind/alphaqubit-quantum-error-correction/">https://blog.google/technology/google-deepmind/alphaqubit-quantum-error-correction/</a>, See on <a href="https://news.ycombinator.com/item?id=42196841">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>

    
    





    

    
      

<div data-analytics-module="{
    &quot;module_name&quot;: &quot;Hero Menu&quot;,
    &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
  }">
      <div>
          
            <p>Nov 20, 2024</p>
          
          
            <p data-reading-time-render="">[[read-time]] min read</p>
          
        </div>
      
        <p>
          Our new AI system accurately identifies errors inside quantum computers, helping to make this new technology more reliable.
        </p>
      
    </div>

    

    
      







<div>
    <figure>
      <div>
  <p><img srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Hero_Image_-_2096_x_1182.width-600.format-webp.webp 600w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Hero_Image_-_2096_x_1182.width-1200.format-webp.webp 1200w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Hero_Image_-_2096_x_1182.width-1600.format-webp.webp 1600w" sizes="(max-width: 599px) 100vw, (max-width: 1023px) 600px, 1024px" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Hero_Image_-_2096_x_1182.width-1200.format-webp.webp" fetchpriority="high" alt="Illustration of a qubit as a pink sphere with X, Y, Z axis planes, surrounded by blue qubits on a dark background">
  </p>
</div>

      
    </figure>
  </div>


    

    
    <div data-reading-time="true" data-component="uni-article-body">

            
              


<google-read-aloud-player data-analytics-module="{
        &quot;event&quot;: &quot;module_impression&quot;,
        &quot;module_name&quot;: &quot;ai_audio&quot;,
        &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
    }" data-date-modified="2024-11-20T21:11:00.789987+00:00" data-progress-bar-style="half-wave" data-api-key="AIzaSyBLT6VkYe-x7sWLZI2Ep26-fNkBKgND-Ac" data-article-style="style9" data-tracking-ids="G-HGNBTNCHCQ,G-6NKTLKV14N" data-voice-list="en.ioh-pngnat:Cyan,en.usb-pngnat:Lime" data-layout-style="style1" data-highlight-mode="word-over-paragraph" data-highlight-text-color="#000000" data-highlight-word-background="#8AB4F8" data-highlight-paragraph-background="#D2E3FC" data-background="linear-gradient(180deg, #F1F3F4 0%, #F8F9FA 100%)" data-foreground-color="#202124" data-font="600 16px Google Sans, sans-serif" data-box-shadow="0px 1px 3px 1px rgba(60, 64, 67, 0.15)">
</google-read-aloud-player>




            

            
            
<!--article text-->

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
         }"><p data-block-key="99qp2">Quantum computers have the potential to revolutionize drug discovery, material design and fundamental physics — that is, if we can get them to work reliably.</p><p data-block-key="ecqih">Certain problems, which would take a conventional computer billions of years to solve, would take a quantum computer just hours. However, these new processors are more prone to noise than conventional ones. If we want to make quantum computers more reliable, especially at scale, we need to accurately identify and correct these errors.</p><p data-block-key="fvfj6">In a <a href="https://www.nature.com/articles/s41586-024-08148-8">paper published today in Nature</a>, we introduce AlphaQubit, an AI-based decoder that identifies quantum computing errors with state-of-the-art accuracy. This collaborative work brought together Google DeepMind’s machine learning knowledge and Google Quantum AI’s error correction expertise to accelerate progress on building a reliable quantum computer.</p><p data-block-key="becp9">Accurately identifying errors is a critical step towards making quantum computers capable of performing long computations at scale, opening the doors to scientific breakthroughs and many new areas of discovery.</p></div>
  

  
    

<section data-analytics-module="{
  &quot;module_name&quot;: &quot;Related Content Tout&quot;,
  &quot;section_header&quot;: &quot;What is quantum computing?&quot;
}">
  <a href="https://blog.google/inside-google/googlers/ask-techspert-what-quantum-computing/" data-ga4-analytics-cta-click="{
  &quot;event&quot;: &quot;cta_click&quot;,
  &quot;link_text&quot;: &quot;See more&quot;
}" data-ga4-analytics-lead-click="{
  &quot;event&quot;: &quot;article_lead_click&quot;,
  &quot;link_text&quot;: &quot;Ask a Techspert: What is quantum computing?&quot;,
  &quot;link_type&quot;: &quot;internal&quot;,
  &quot;article_name&quot;: &quot;Ask a Techspert: What is quantum computing?&quot;,
  &quot;author_name&quot; : &quot;Peter Schottenfels&quot;,
  &quot;page_name&quot;: &quot;ask-techspert-what-quantum-computing&quot;,
  &quot;position&quot;: &quot;1 of 1&quot;,
  &quot;click_location&quot;: &quot;undefined&quot;,
  &quot;primary_tag&quot;: &quot;Series - Ask a Techspert&quot;,
  &quot;secondary_tags&quot;: &quot;Inside Google (DEPRECATED),Googlers&quot;,
  &quot;publish_date&quot;: &quot;2019-03-04|18:00&quot;,
  &quot;hero_media&quot;: &quot;image&quot;,
  &quot;days_since_published&quot;: &quot;2088&quot;,
  &quot;content_category&quot;: &quot;Announcement&quot;,
  &quot;word_count&quot;: &quot;1233&quot;,
  &quot;has_audio&quot;: &quot;no&quot;,
  &quot;has_video&quot;: &quot;yes&quot;,
  &quot;has_image&quot;: &quot;yes&quot;,
  &quot;has_carousel&quot;: &quot;no&quot;
}">
    <p>Related Article</p>
    <div>
      
        
    <figure>
        <picture>
            


    

    
        <source media="(max-resolution: 1.5dppx)" sizes="300px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Bristlecone_mounted_with_Marissa_.width-300.format-webp.webp 300w">
    
        <source media="(min-resolution: 1.5dppx)" sizes="600px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Bristlecone_mounted_with_Marissa_.width-600.format-webp.webp 600w">
    

    <img src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Bristlecone_mounted_with_Marissa_.width-600.format-webp.webp" alt="Article's hero media" sizes=" 300px,  600px" srcset="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Bristlecone_mounted_with_Marissa_.width-300.format-webp.webp 300w, https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Bristlecone_mounted_with_Marissa_.width-600.format-webp.webp 600w" data-target="image" loading="lazy">
    


        </picture>
    </figure>


      
      <div>
        <p>Related Article</p>
        <p>What is quantum computing?</p>
        <p>Learn more in our Ask a Techspert series.</p>
        
      </div>
    </div>
  </a>
</section>

  

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
         }"><h2 data-block-key="92crg">Correcting quantum computing errors</h2><p data-block-key="1c0kl">Quantum computers harness the unique properties of matter at the smallest scales, such as superposition and entanglement, to solve certain types of complex problems in far fewer steps than classical computers. The technology relies on qubits, or quantum bits, which can sift through vast sets of possibilities using quantum interference to find an answer.</p><p data-block-key="3pg5d">The natural quantum state of a qubit is fragile and can be disrupted by various factors: microscopic defects in hardware, heat, vibration, electromagnetic interference and even cosmic rays (which are everywhere).</p><p data-block-key="akva1">Quantum error correction offers a way forward by using redundancy: grouping multiple qubits into a single logical qubit, and regularly performing consistency checks on it. The decoder preserves quantum information by using these consistency checks to identify errors in the logical qubit, so they can be corrected.</p></div>
  

  
    







  
      <div data-analytics-module="{
          &quot;module_name&quot;: &quot;Inline Images&quot;,
          &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
        }">
  

  <p>

      
      
        
          <video tabindex="0" autoplay="" loop="" muted="" playsinline="" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/original_videos/Figure_1_animation.mp4" type="video/mp4" title="Diagram of a logical qubit's state checked over time, with data passed to a neural network to predict quantum errors" alt="AlphaQubit Figure 1">
            Video format not supported
          </video>
        
      
    
    </p>
    
      <figcaption><p data-block-key="pzsm7">Here, we illustrate how nine physical qubits (small gray circles) in a qubit grid of side length 3 (code distance) form a logical qubit. At each step, 8 more qubits perform consistency checks (square and semicircle areas, blue and magenta when failing and gray otherwise) at each time step which inform the neural network decoder (AlphaQubit). At the end of the experiment, AlphaQubit determines what errors occurred.</p></figcaption>
    
  
    </div>
  



  

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
         }"><h2 data-block-key="3rgy9">Creating a neural-network contender for decoding</h2><p data-block-key="673ot">AlphaQubit is a neural-network based decoder drawing on <a href="https://research.google/blog/transformer-a-novel-neural-network-architecture-for-language-understanding/">Transformers</a>, a deep learning architecture developed at Google that underpins many of today’s large language models. Using the consistency checks as an input, its task is to correctly predict whether the logical qubit — when measured at the end of the experiment — has flipped from how it was prepared.</p><p data-block-key="fi530">We began by training our model to decode the data from a set of 49 qubits inside a <a href="https://research.google/blog/suppressing-quantum-errors-by-scaling-a-surface-code-logical-qubit/">Sycamore quantum processor</a>, the central computational unit of the quantum computer. To teach AlphaQubit the general decoding problem, we used a quantum simulator to generate hundreds of millions of examples across a variety of settings and error levels. Then we finetuned AlphaQubit for a specific decoding task by giving it thousands of experimental samples from a particular Sycamore processor.</p><p data-block-key="53vlb">When tested on new Sycamore data, AlphaQubit set a new standard for accuracy when compared with the previous leading decoders. In the largest Sycamore experiments, AlphaQubit makes 6% fewer errors than tensor network methods, <a href="https://www.nature.com/articles/s41586-022-05434-1">which are highly accurate but impractically slow</a>. AlphaQubit also makes 30% fewer errors than <a href="https://arxiv.org/abs/1310.0863">correlated matching</a>, an accurate decoder that is fast enough to scale.</p></div>
  

  
    







  
      <div data-analytics-module="{
          &quot;module_name&quot;: &quot;Inline Images&quot;,
          &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
        }">
  

  <p><img alt="Line chart comparing accuracy of three quantum decoders over distance, with AlphaQubit showing highest accuracy throughout" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/original_images/Figure_2.gif">
        
      
    
    </p>
    
      <figcaption><p data-block-key="vpf49">Decoding accuracies for small and large Sycamore experiments (distance 3 = 17 physical qubits, and distance 5 = 49 physical qubits). AlphaQubit is more accurate than the tensor network (TN, a method that is not expected to scale at large experiments) and correlated matching (an accurate decoder with the speed to scale).</p></figcaption>
    
  
    </div>
  



  

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
         }"><h2 data-block-key="5p9y9">Scaling AlphaQubit for future systems</h2><p data-block-key="d6okk">We expect quantum computers to advance beyond what’s available today. To see how AlphaQubit would adapt to larger devices with lower error levels, we trained it using data from simulated quantum systems of up to 241 qubits, as this exceeded what was available on the Sycamore platform.</p><p data-block-key="5gic8">Again, AlphaQubit outperformed leading algorithmic decoders, suggesting it will also work on mid-sized quantum devices in the future.</p></div>
  

  
    







  
      <div data-analytics-module="{
          &quot;module_name&quot;: &quot;Inline Images&quot;,
          &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
        }">
  

  <p><img alt="Line chart showing accuracy of two decoders improving with distance, to virtually 100% at higher scales, with AlphaQubit best" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/original_images/Figure_3.gif">
        
      
    
    </p>
    
      <figcaption><p data-block-key="mkf3p">Decoding accuracies for different scaling/simulated experiments, from distance 3 (17 qubits) to distance 11 (241 qubits). The Tensor Network decoder does not appear in this graph, as it is too slow to run at large distances. The accuracy of the other two decoders increases when increasing distance (that is, when using more physical qubits). At each distance, AlphaQubit is more accurate than correlated matching.</p></figcaption>
    
  
    </div>
  



  

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
         }"><p data-block-key="5p9y9">Our system also demonstrated advanced features like the ability to accept and report confidence levels on inputs and outputs. These information-rich interfaces can help further improve the performance of the quantum processor.</p><p data-block-key="62p4l">And when we trained AlphaQubit on samples that included up to 25 rounds of error correction, it maintained good performance on simulated experiments of up to 100,000 rounds, showing its ability to generalize to scenarios beyond its training data.</p></div>
  

  
    <div data-component="uni-article-paragraph" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;AlphaQubit tackles one of quantum computing’s biggest challenges&quot;
         }"><h2 data-block-key="5p9y9">Moving towards practical quantum computing</h2><p data-block-key="8gbsc">AlphaQubit represents a major milestone in using machine learning for quantum error correction. But we still face significant challenges involving speed and scalability.</p><p data-block-key="c32ii">For example, each consistency check in a fast superconducting quantum processor is measured a million times every second. While AlphaQubit is great at accurately identifying errors, it’s still too slow to correct errors in a superconducting processor in real time. As quantum computing grows toward the potentially millions of qubits needed for commercially relevant applications, we’ll also need to find more data-efficient ways of training AI-based decoders.</p><p data-block-key="cm2bt">Our teams are combining pioneering advances in machine learning and quantum error correction to overcome these challenges — and pave the way for reliable quantum computers that can tackle some of the world’s most complex problems.</p><p data-block-key="b7c28"><a href="https://www.nature.com/articles/s41586-024-08148-8"><i>Read our paper in Nature</i></a><i>.</i></p></div>
  


            
            

            
              




            
          </div>
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SQL, Homomorphisms and Constraint Satisfaction Problems (126 pts)]]></title>
            <link>https://www.philipzucker.com/sql_graph_csp/</link>
            <guid>42195994</guid>
            <pubDate>Wed, 20 Nov 2024 17:07:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.philipzucker.com/sql_graph_csp/">https://www.philipzucker.com/sql_graph_csp/</a>, See on <a href="https://news.ycombinator.com/item?id=42195994">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <p>Database queries are a pretty surprisingly powerful tool that can solve seemingly intractable problems.</p>

<p>It is a fun coding challenge to do things in SQL. I’ve seen people solve sudokus or do <a href="https://github.com/mitchellh/advent-2021-sql">advent of code</a>, or you can build a datalog on SQL with a little metaprogramming (maybe even fully internally). It is also possible to build a <a href="https://github.com/awto/chr2sql">CHR (constraint handling rules) system on SQL</a> or a graph rewriting system on SQL. Here I talk about how one can use SQL queries to do graph instruction matching <a href="https://www.philipzucker.com/imatch-datalog/">https://www.philipzucker.com/imatch-datalog/</a> .</p>

<p>SQL is a feature rich language, it is not surprising that you can do these things from that perspective, using this and that odd feature. But even the simple idealized “SELECT FROM WHERE” core of SQL has a lot of power.</p>

<p>From a logical perspective, this core is basically conjunctive queries <a href="https://en.wikipedia.org/wiki/Conjunctive_query#Relationship_to_other_query_languages">https://en.wikipedia.org/wiki/Conjunctive_query#Relationship_to_other_query_languages</a> . Each table is a logical predicate, each variable is bound to a row of a column. The SELECT fields are bits that aren’t being existentially bound and therefore hidden, aka free variables.</p>

<p>$\exists y. edge(x,y) \land path(y,z)$ is the predicate form of the query <code>SELECT edge.a, path.b from edge, path WHERE edge.b = path.a</code>. There is a little bit of rearrangement from the entry centric view of predicates to the row centric view of SQL. I am not aware of a way to easily give a name to a particular entry in sql. I used this correspondence to describe how to either build a datalog engine on sql, or hand compile your datalog rules to sql <a href="https://www.philipzucker.com/tiny-sqlite-datalog/">https://www.philipzucker.com/tiny-sqlite-datalog/</a> .</p>

<h2 id="sql-loops-and-csp">SQL, Loops, and CSP</h2>

<p>From a more imperative perspective, SELECT-FROM-WHERE statements are basically for loops. SQL is an odd language in that the FROM comes after the SELECT. This puts a row variables binding site after their usage points. Maybe this isn’t <em>that</em> crazy considering set comprehension <code>{x for x in A if x &gt; 0}</code> is quite similar.</p>

<table>
  <tbody>
    <tr>
      <td>SQL</td>
      <td>Python</td>
    </tr>
    <tr>
      <td><code>FROM mytable as row_a</code></td>
      <td><code>for row_a in mytable:</code></td>
    </tr>
    <tr>
      <td><code>WHERE row_a.col1 = rowa.col2</code></td>
      <td><code>if row_a.col1 == row_a.col2:</code></td>
    </tr>
    <tr>
      <td><code>SELECT row_a.col1, row_a.col2</code></td>
      <td><code>yield row_a.col1, row_a.col2</code></td>
    </tr>
  </tbody>
</table>

<p>A thing SQL engines do is that they rearrange and optimize these loops and refactor them into joins and other things. Python for loops however execute just like you say it (slowly).</p>

<p>Search problems over finite spaces can be solved by brute force loops. Enumerate all possibilities and take the ones that work.</p>

<p>So in this manner SQL is a constraint solver.</p>

<p>An example constraint satisfaction puzzle is the send more money puzzle <a href="https://en.wikipedia.org/wiki/Verbal_arithmetic">https://en.wikipedia.org/wiki/Verbal_arithmetic</a> in which we need to find digits <code>S,E,N,D,M,O,R,Y</code> such that <code>SEND + MORE = MONEY</code>.
A pure python version of the send more money puzzle with simplistic pruning is</p>

<div><pre><code><span>def</span> <span>solve_send_money</span><span>():</span>
    <span>for</span> <span>s</span> <span>in</span> <span>range</span><span>(</span><span>1</span><span>,</span> <span>10</span><span>):</span>  <span># S must be non-zero
</span>        <span>for</span> <span>e</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
            <span>if</span> <span>e</span> <span>==</span> <span>s</span><span>:</span>
                <span>continue</span>
            <span>for</span> <span>n</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                <span>if</span> <span>n</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>):</span>
                    <span>continue</span>
                <span>for</span> <span>d</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                    <span>if</span> <span>d</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>):</span>
                        <span>continue</span>
                    <span>for</span> <span>m</span> <span>in</span> <span>range</span><span>(</span><span>1</span><span>,</span> <span>10</span><span>):</span>  <span># M must be non-zero
</span>                        <span>if</span> <span>m</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>,</span> <span>d</span><span>):</span>
                            <span>continue</span>
                        <span>for</span> <span>o</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                            <span>if</span> <span>o</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>,</span> <span>d</span><span>,</span> <span>m</span><span>):</span>
                                <span>continue</span>
                            <span>for</span> <span>r</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                                <span>if</span> <span>r</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>,</span> <span>d</span><span>,</span> <span>m</span><span>,</span> <span>o</span><span>):</span>
                                    <span>continue</span>
                                <span>for</span> <span>y</span> <span>in</span> <span>range</span><span>(</span><span>10</span><span>):</span>
                                    <span>if</span> <span>y</span> <span>in</span> <span>(</span><span>s</span><span>,</span> <span>e</span><span>,</span> <span>n</span><span>,</span> <span>d</span><span>,</span> <span>m</span><span>,</span> <span>o</span><span>,</span> <span>r</span><span>):</span>
                                        <span>continue</span>
                                    <span># Convert SEND, MORE, and MONEY to integers
</span>                                    <span>send</span> <span>=</span> <span>1000</span> <span>*</span> <span>s</span> <span>+</span> <span>100</span> <span>*</span> <span>e</span> <span>+</span> <span>10</span> <span>*</span> <span>n</span> <span>+</span> <span>d</span>
                                    <span>more</span> <span>=</span> <span>1000</span> <span>*</span> <span>m</span> <span>+</span> <span>100</span> <span>*</span> <span>o</span> <span>+</span> <span>10</span> <span>*</span> <span>r</span> <span>+</span> <span>e</span>
                                    <span>money</span> <span>=</span> <span>10000</span> <span>*</span> <span>m</span> <span>+</span> <span>1000</span> <span>*</span> <span>o</span> <span>+</span> <span>100</span> <span>*</span> <span>n</span> <span>+</span> <span>10</span> <span>*</span> <span>e</span> <span>+</span> <span>y</span>
                                    
                                    <span>if</span> <span>send</span> <span>+</span> <span>more</span> <span>==</span> <span>money</span><span>:</span>
                                        <span>return</span> <span>(</span><span>s</span><span>,</span><span>e</span><span>,</span><span>n</span><span>,</span><span>d</span><span>,</span><span>m</span><span>,</span><span>o</span><span>,</span><span>r</span><span>,</span><span>e</span><span>,</span><span>m</span><span>,</span><span>o</span><span>,</span><span>n</span><span>,</span><span>e</span><span>,</span><span>y</span><span>),</span> <span>send</span><span>,</span> <span>more</span><span>,</span> <span>money</span>

</code></pre></div>

<div><pre><code><span>%%</span><span>timeit</span> 
<span>solve_send_money</span><span>()</span>
</code></pre></div>

<div><pre><code>762 ms ± 35 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre></div>

<h4 id="sql-send-more-money">SQL Send More Money</h4>

<p>We can write the same thing in SQL and execute using duckdb or sqlite. Duckdb is a bit faster and is faster than the pure python version.</p>

<div><pre><code><span>import</span> <span>sqlite3</span>
<span>import</span> <span>duckdb</span>
<span>query</span> <span>=</span> <span>"""
WITH RECURSIVE digits(digit) AS (
    SELECT 0
    UNION ALL
    SELECT digit + 1
    FROM digits
    WHERE digit &lt; 9
)
SELECT s.digit AS S, e.digit AS E, n.digit AS N, d.digit AS D,
       m.digit AS M, o.digit AS O, r.digit AS R, y.digit AS Y
FROM digits s, digits e, digits n, digits d, digits m, digits o, digits r, digits y
WHERE s.digit &lt;&gt; e.digit AND s.digit &lt;&gt; n.digit AND s.digit &lt;&gt; d.digit AND s.digit &lt;&gt; m.digit AND
      s.digit &lt;&gt; o.digit AND s.digit &lt;&gt; r.digit AND s.digit &lt;&gt; y.digit AND
      e.digit &lt;&gt; n.digit AND e.digit &lt;&gt; d.digit AND e.digit &lt;&gt; m.digit AND
      e.digit &lt;&gt; o.digit AND e.digit &lt;&gt; r.digit AND e.digit &lt;&gt; y.digit AND
      n.digit &lt;&gt; d.digit AND n.digit &lt;&gt; m.digit AND n.digit &lt;&gt; o.digit AND
      n.digit &lt;&gt; r.digit AND n.digit &lt;&gt; y.digit AND
      d.digit &lt;&gt; m.digit AND d.digit &lt;&gt; o.digit AND d.digit &lt;&gt; r.digit AND
      d.digit &lt;&gt; y.digit AND
      m.digit &lt;&gt; o.digit AND m.digit &lt;&gt; r.digit AND m.digit &lt;&gt; y.digit AND
      o.digit &lt;&gt; r.digit AND o.digit &lt;&gt; y.digit AND
      r.digit &lt;&gt; y.digit AND
      s.digit &lt;&gt; 0 AND m.digit &lt;&gt; 0 AND
      (1000 * s.digit + 100 * e.digit + 10 * n.digit + d.digit) +
      (1000 * m.digit + 100 * o.digit + 10 * r.digit + e.digit) =
      (10000 * m.digit + 1000 * o.digit + 100 * n.digit + 10 * e.digit + y.digit);
"""</span>
<span>conn</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>
<span>conn</span><span>.</span><span>execute</span><span>(</span><span>query</span><span>).</span><span>fetchall</span><span>()</span>

</code></pre></div>

<div><pre><code>[(9, 5, 6, 7, 1, 0, 8, 2)]
</code></pre></div>

<div><pre><code><span>%%</span><span>timeit</span>
<span>conn</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>
<span>conn</span><span>.</span><span>execute</span><span>(</span><span>query</span><span>).</span><span>fetchone</span><span>()</span>
</code></pre></div>

<div><pre><code>969 ms ± 74.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre></div>

<div><pre><code><span>%%</span><span>timeit</span>
<span>conn</span> <span>=</span> <span>duckdb</span><span>.</span><span>connect</span><span>()</span> <span># not really a noticeable part of benchmark
</span><span>conn</span><span>.</span><span>execute</span><span>(</span><span>query</span><span>).</span><span>fetchone</span><span>()</span>
</code></pre></div>

<div><pre><code>240 ms ± 16.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre></div>

<h4 id="bonus-c-send-more-money">Bonus: C Send More Money</h4>

<p>This does raise the question of comparing to a C version. Quite a bit faster indeed.</p>

<div><pre><code><span>%%</span><span>file</span> <span>/</span><span>tmp</span><span>/</span><span>money</span><span>.</span><span>c</span>
<span>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
</span><span>int</span> <span>main</span><span>()</span> <span>{</span>
    <span>clock_t</span> <span>start_time</span> <span>=</span> <span>clock</span><span>();</span>
    <span>//</span><span>int</span> <span>niter</span> <span>=</span> <span>0</span><span>;</span> <span>Adding</span> <span>this</span> <span>slows</span> <span>clang</span> <span>down</span> <span>quite</span> <span>a</span> <span>bit</span>
    <span>for</span> <span>(</span><span>int</span> <span>s</span> <span>=</span> <span>1</span><span>;</span> <span>s</span> <span>&lt;</span> <span>10</span><span>;</span> <span>s</span><span>++</span><span>)</span> <span>{</span> <span>//</span> <span>S</span> <span>must</span> <span>be</span> <span>non</span><span>-</span><span>zero</span>
        <span>for</span> <span>(</span><span>int</span> <span>e</span> <span>=</span> <span>0</span><span>;</span> <span>e</span> <span>&lt;</span> <span>10</span><span>;</span> <span>e</span><span>++</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span><span>e</span> <span>==</span> <span>s</span><span>)</span> <span>continue</span><span>;</span>
            <span>for</span> <span>(</span><span>int</span> <span>n</span> <span>=</span> <span>0</span><span>;</span> <span>n</span> <span>&lt;</span> <span>10</span><span>;</span> <span>n</span><span>++</span><span>)</span> <span>{</span>
                <span>if</span> <span>(</span><span>n</span> <span>==</span> <span>s</span> <span>||</span> <span>n</span> <span>==</span> <span>e</span><span>)</span> <span>continue</span><span>;</span>
                <span>for</span> <span>(</span><span>int</span> <span>d</span> <span>=</span> <span>0</span><span>;</span> <span>d</span> <span>&lt;</span> <span>10</span><span>;</span> <span>d</span><span>++</span><span>)</span> <span>{</span>
                    <span>if</span> <span>(</span><span>d</span> <span>==</span> <span>s</span> <span>||</span> <span>d</span> <span>==</span> <span>e</span> <span>||</span> <span>d</span> <span>==</span> <span>n</span><span>)</span> <span>continue</span><span>;</span>
                    <span>for</span> <span>(</span><span>int</span> <span>m</span> <span>=</span> <span>1</span><span>;</span> <span>m</span> <span>&lt;</span> <span>10</span><span>;</span> <span>m</span><span>++</span><span>)</span> <span>{</span> <span>//</span> <span>M</span> <span>must</span> <span>be</span> <span>non</span><span>-</span><span>zero</span>
                        <span>if</span> <span>(</span><span>m</span> <span>==</span> <span>s</span> <span>||</span> <span>m</span> <span>==</span> <span>e</span> <span>||</span> <span>m</span> <span>==</span> <span>n</span> <span>||</span> <span>m</span> <span>==</span> <span>d</span><span>)</span> <span>continue</span><span>;</span>
                        <span>for</span> <span>(</span><span>int</span> <span>o</span> <span>=</span> <span>0</span><span>;</span> <span>o</span> <span>&lt;</span> <span>10</span><span>;</span> <span>o</span><span>++</span><span>)</span> <span>{</span>
                            <span>if</span> <span>(</span><span>o</span> <span>==</span> <span>s</span> <span>||</span> <span>o</span> <span>==</span> <span>e</span> <span>||</span> <span>o</span> <span>==</span> <span>n</span> <span>||</span> <span>o</span> <span>==</span> <span>d</span> <span>||</span> <span>o</span> <span>==</span> <span>m</span><span>)</span> <span>continue</span><span>;</span>
                            <span>for</span> <span>(</span><span>int</span> <span>r</span> <span>=</span> <span>0</span><span>;</span> <span>r</span> <span>&lt;</span> <span>10</span><span>;</span> <span>r</span><span>++</span><span>)</span> <span>{</span>
                                <span>if</span> <span>(</span><span>r</span> <span>==</span> <span>s</span> <span>||</span> <span>r</span> <span>==</span> <span>e</span> <span>||</span> <span>r</span> <span>==</span> <span>n</span> <span>||</span> <span>r</span> <span>==</span> <span>d</span> <span>||</span> <span>r</span> <span>==</span> <span>m</span> <span>||</span> <span>r</span> <span>==</span> <span>o</span><span>)</span> <span>continue</span><span>;</span>
                                <span>for</span> <span>(</span><span>int</span> <span>y</span> <span>=</span> <span>0</span><span>;</span> <span>y</span> <span>&lt;</span> <span>10</span><span>;</span> <span>y</span><span>++</span><span>)</span> <span>{</span>
                                    <span>if</span> <span>(</span><span>y</span> <span>==</span> <span>s</span> <span>||</span> <span>y</span> <span>==</span> <span>e</span> <span>||</span> <span>y</span> <span>==</span> <span>n</span> <span>||</span> <span>y</span> <span>==</span> <span>d</span> <span>||</span> <span>y</span> <span>==</span> <span>m</span> <span>||</span> <span>y</span> <span>==</span> <span>o</span> <span>||</span> <span>y</span> <span>==</span> <span>r</span><span>)</span> <span>continue</span><span>;</span>

                                    <span>//</span> <span>Calculate</span> <span>SEND</span><span>,</span> <span>MORE</span><span>,</span> <span>and</span> <span>MONEY</span>
                                    <span>int</span> <span>send</span> <span>=</span> <span>1000</span> <span>*</span> <span>s</span> <span>+</span> <span>100</span> <span>*</span> <span>e</span> <span>+</span> <span>10</span> <span>*</span> <span>n</span> <span>+</span> <span>d</span><span>;</span>
                                    <span>int</span> <span>more</span> <span>=</span> <span>1000</span> <span>*</span> <span>m</span> <span>+</span> <span>100</span> <span>*</span> <span>o</span> <span>+</span> <span>10</span> <span>*</span> <span>r</span> <span>+</span> <span>e</span><span>;</span>
                                    <span>int</span> <span>money</span> <span>=</span> <span>10000</span> <span>*</span> <span>m</span> <span>+</span> <span>1000</span> <span>*</span> <span>o</span> <span>+</span> <span>100</span> <span>*</span> <span>n</span> <span>+</span> <span>10</span> <span>*</span> <span>e</span> <span>+</span> <span>y</span><span>;</span>
                                    <span>//</span><span>niter</span><span>++</span><span>;</span>

                                    <span>if</span> <span>(</span><span>send</span> <span>+</span> <span>more</span> <span>==</span> <span>money</span><span>)</span> <span>{</span>
                                        <span>clock_t</span> <span>end_time</span> <span>=</span> <span>clock</span><span>();</span>
                                        <span>double</span> <span>time_taken</span> <span>=</span> <span>((</span><span>double</span><span>)(</span><span>end_time</span> <span>-</span> <span>start_time</span><span>))</span> <span>/</span> <span>CLOCKS_PER_SEC</span><span>;</span>
                                        <span>printf</span><span>(</span><span>"Time taken by loops: %.6f seconds</span><span>\n</span><span>"</span><span>,</span> <span>time_taken</span><span>);</span>
                                        <span>printf</span><span>(</span><span>"SEND = %d, MORE = %d, MONEY = %d</span><span>\n</span><span>"</span><span>,</span> <span>send</span><span>,</span> <span>more</span><span>,</span> <span>money</span><span>);</span>
                                        <span>//</span><span>printf</span><span>(</span><span>"Tests: %d</span><span>\n</span><span>"</span><span>,</span> <span>niter</span><span>);</span>
                                        <span>return</span> <span>0</span><span>;</span>
                                    <span>}</span>
                                <span>}</span>
                            <span>}</span>
                        <span>}</span>
                    <span>}</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
    <span>return</span> <span>1</span><span>;</span>
<span>}</span>
</code></pre></div>



<div><pre><code><span>!</span> <span>clang</span> <span>-</span><span>O3</span> <span>-</span><span>march</span><span>=</span><span>native</span> <span>-</span><span>o</span> <span>/</span><span>tmp</span><span>/</span><span>money</span> <span>/</span><span>tmp</span><span>/</span><span>money</span><span>.</span><span>c</span> <span>&amp;&amp;</span> <span>/</span><span>tmp</span><span>/</span><span>money</span>
</code></pre></div>

<div><pre><code>Time taken by loops: 0.003991 seconds
SEND = 9567, MORE = 1085, MONEY = 10652
</code></pre></div>

<div><pre><code><span>!</span> <span>gcc</span> <span>-</span><span>O3</span> <span>-</span><span>march</span><span>=</span><span>native</span> <span>-</span><span>o</span> <span>/</span><span>tmp</span><span>/</span><span>money</span> <span>/</span><span>tmp</span><span>/</span><span>money</span><span>.</span><span>c</span> <span>&amp;&amp;</span> <span>/</span><span>tmp</span><span>/</span><span>money</span>
</code></pre></div>

<div><pre><code>Time taken by loops: 0.019185 seconds
SEND = 9567, MORE = 1085, MONEY = 10652
</code></pre></div>

<p>Hmm. My system clang vs gcc is another 5x? That’s kind of surprising. I have a new clang (20) and an old gcc 11.4. Maybe that’s enough. The thing also that it may be rearranging the loops? If I try to add a counter, clang slows down to about gcc. Very interesting.</p>

<h2 id="relation-and-graph-homomorphisms">Relation and Graph Homomorphisms</h2>

<p>There is another perspective on what SQL is doing. It is finding a mapping (a <a href="https://en.wikipedia.org/wiki/Homomorphism">homomorphism</a>) between the query and the database.</p>

<p>We have intuition about databases that comes from typically thinking about small queries (&lt; 100 tables referenced in FROM statements) and big databases (millions, billions or more of rows).</p>

<p>The running time of naive nested loops is exponential in the number of loops. Considered as a function of the size the of query, database queries are quite computationally expensive.</p>

<p><a href="https://en.wikipedia.org/wiki/Graph_homomorphism">Graph homomorphisms</a> are a particular familiar case of a homomorphism. Graphs can be easily mapped into database tables as an edge table with two columns.</p>

<p>I have heard that I should be scared of <a href="https://en.wikipedia.org/wiki/Subgraph_isomorphism_problem">subgraph matching</a> or <a href="https://en.wikipedia.org/wiki/Graph_isomorphism">graph isomorphism</a> because they are NP ish. But in many common cases, the size of the patterns is pretty small, and the size of the database is pretty big. So the problem is not that hard.</p>

<p>Here for example I can turn a networkx graph into a sqlite table</p>

<div><pre><code><span>import</span> <span>sqlite3</span>
<span>import</span> <span>networkx</span> <span>as</span> <span>nx</span>
<span>def</span> <span>db_of_graph</span><span>(</span><span>conn</span><span>,</span> <span>G</span><span>):</span>
    <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO nodes VALUES (?)"</span><span>,</span> <span>map</span><span>(</span><span>lambda</span> <span>v</span> <span>:</span> <span>(</span><span>v</span><span>,),</span>  <span>G</span><span>.</span><span>nodes</span><span>))</span>
    <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO edges VALUES (?, ?)"</span><span>,</span> <span>G</span><span>.</span><span>edges</span><span>)</span>
    <span>if</span> <span>not</span> <span>G</span><span>.</span><span>is_directed</span><span>():</span>
        <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO edges VALUES (?, ?)"</span><span>,</span> <span>[(</span><span>j</span><span>,</span><span>i</span><span>)</span> <span>for</span> <span>i</span><span>,</span><span>j</span> <span>in</span> <span>G</span><span>.</span><span>edges</span><span>])</span>
</code></pre></div>

<p>And conversely export the edge table back out into a networkx graph.</p>

<div><pre><code><span>def</span> <span>graph_of_db</span><span>(</span><span>con</span><span>):</span>
    <span>G</span> <span>=</span> <span>nx</span><span>.</span><span>DiGraph</span><span>()</span>
    <span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM nodes"</span><span>)</span>
    <span>G</span><span>.</span><span>add_nodes_from</span><span>(</span><span>map</span><span>(</span><span>lambda</span> <span>x</span><span>:</span> <span>x</span><span>[</span><span>0</span><span>],</span> <span>res</span><span>.</span><span>fetchall</span><span>()))</span>
    <span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM edges"</span><span>)</span>
    <span>G</span><span>.</span><span>add_edges_from</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
    <span>return</span> <span>G</span>
</code></pre></div>

<p>The form of these simple <code>FROM-SELECT-WHERE</code> queries (conjuctive queries) is remarkably similar to a database itself, but with symbolic entries. Each FROM would become a row in this symbolic database. We can for example convert a graph also into a query that will find the image of the graph in the database. The solutions to this query are graph homomorphisms. When codegenning SQL I find maintaining separate <code>select</code> <code>from</code> <code>where</code> lists to be a useful thing.</p>

<div><pre><code><span>def</span> <span>query_of_graph</span><span>(</span><span>G</span><span>,</span><span>unique</span><span>=</span><span>False</span><span>):</span>
    <span>"""Unique will give subgraph isomorphism"""</span>
    <span>selects</span> <span>=</span> <span>[]</span>
    <span>froms</span> <span>=</span> <span>[]</span>
    <span>wheres</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>node</span> <span>in</span> <span>G</span><span>:</span>
        <span>froms</span> <span>+=</span> <span>[</span><span>f</span><span>"nodes AS v</span><span>{</span><span>node</span><span>}</span><span>"</span><span>]</span>
        <span>selects</span> <span>+=</span> <span>[</span><span>f</span><span>"v</span><span>{</span><span>node</span><span>}</span><span>.v AS v</span><span>{</span><span>node</span><span>}</span><span>"</span><span>]</span>
    <span>for</span> <span>i</span><span>,</span> <span>(</span><span>a</span><span>,</span><span>b</span><span>)</span> <span>in</span> <span>enumerate</span><span>(</span><span>G</span><span>.</span><span>edges</span><span>):</span>
        <span>froms</span> <span>+=</span> <span>[</span><span>f</span><span>"edges as e</span><span>{</span><span>i</span><span>}</span><span>"</span><span>]</span>
        <span>wheres</span> <span>+=</span> <span>[</span><span>f</span><span>"e</span><span>{</span><span>i</span><span>}</span><span>.src = v</span><span>{</span><span>a</span><span>}</span><span>.v"</span>  <span>,</span> <span>f</span><span>"e</span><span>{</span><span>i</span><span>}</span><span>.dst = v</span><span>{</span><span>b</span><span>}</span><span>.v"</span><span>]</span>
    <span>if</span> <span>unique</span><span>:</span>
        <span>for</span> <span>node</span> <span>in</span> <span>G</span><span>:</span>
            <span>for</span> <span>node2</span> <span>in</span> <span>G</span><span>:</span>
                <span>if</span> <span>node</span> <span>!=</span> <span>node2</span><span>:</span>
                    <span>wheres</span> <span>+=</span> <span>[</span><span>f</span><span>"v</span><span>{</span><span>node</span><span>}</span><span> != v</span><span>{</span><span>node2</span><span>}</span><span>"</span><span>]</span>
    <span>sql</span> <span>=</span> <span>"SELECT "</span> <span>+</span> <span>", "</span><span>.</span><span>join</span><span>(</span><span>selects</span><span>)</span> <span>+</span> \
          <span>"</span><span>\n</span><span>FROM "</span> <span>+</span>  <span>", "</span><span>.</span><span>join</span><span>(</span><span>froms</span><span>)</span> <span>+</span> \
          <span>"</span><span>\n</span><span>WHERE "</span> <span>+</span> <span>" AND "</span><span>.</span><span>join</span><span>(</span><span>wheres</span><span>)</span>
    <span>return</span> <span>sql</span>
<span>def</span> <span>clear_db</span><span>(</span><span>con</span><span>):</span>
    <span>con</span><span>.</span><span>execute</span><span>(</span><span>"DELETE FROM nodes"</span><span>)</span>
    <span>con</span><span>.</span><span>execute</span><span>(</span><span>"DELETE FROM edges"</span><span>)</span>
<span>con</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"CREATE TABLE nodes(v)"</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"CREATE TABLE edges(src,dst)"</span><span>)</span>
</code></pre></div>

<div><pre><code>&lt;sqlite3.Cursor at 0x7b99507714c0&gt;
</code></pre></div>

<h4 id="some-examples">Some Examples</h4>

<p>We can make a graph and insert the appropriate edge table into the database.</p>

<div><pre><code><span>G</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>7</span><span>,</span> <span>create_using</span><span>=</span><span>nx</span><span>.</span><span>DiGraph</span><span>)</span>
<span>nx</span><span>.</span><span>draw</span><span>(</span><span>G</span><span>,</span> <span>with_labels</span><span>=</span><span>True</span><span>)</span>
</code></pre></div>

<p><img src="https://www.philipzucker.com/pynb/2024-11-18-sql_graph_csp_files/2024-11-18-sql_graph_csp_19_0.png" alt="png"></p>

<div><pre><code><span>db_of_graph</span><span>(</span><span>con</span><span>,</span> <span>G</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * from edges"</span><span>).</span><span>fetchall</span><span>()</span>
</code></pre></div>

<div><pre><code>[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]
</code></pre></div>

<p>We can seek out the smaller pattern graph from the larger graph</p>

<div><pre><code><span>lhs</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>3</span><span>,</span> <span>create_using</span><span>=</span><span>nx</span><span>.</span><span>DiGraph</span><span>)</span>
<span>nx</span><span>.</span><span>draw</span><span>(</span><span>lhs</span><span>,</span> <span>with_labels</span><span>=</span><span>True</span><span>)</span>
</code></pre></div>

<p><img src="https://www.philipzucker.com/pynb/2024-11-18-sql_graph_csp_files/2024-11-18-sql_graph_csp_22_0.png" alt="png"></p>

<div><pre><code><span>print</span><span>(</span><span>query_of_graph</span><span>(</span><span>lhs</span><span>))</span>
</code></pre></div>

<div><pre><code>SELECT v0.v AS v0, v1.v AS v1, v2.v AS v2
FROM nodes AS v0, nodes AS v1, nodes AS v2, edges as e0, edges as e1
WHERE e0.src = v0.v AND e0.dst = v1.v AND e1.src = v1.v AND e1.dst = v2.v
</code></pre></div>

<div><pre><code><span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>lhs</span><span>)).</span><span>fetchall</span><span>()</span>
</code></pre></div>

<div><pre><code>[(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]
</code></pre></div>

<h4 id="automorphisms">Automorphisms</h4>

<p>We can also find all homomorphisms of the graph into itself, of which there is only one for the directed graph.</p>

<div><pre><code><span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>)).</span><span>fetchall</span><span>()</span>
</code></pre></div>



<p>For the undirected graph, there are more homomorphisms.</p>

<div><pre><code><span>clear_db</span><span>(</span><span>con</span><span>)</span>
<span>G</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>4</span><span>)</span> <span># undirected
</span><span>db_of_graph</span><span>(</span><span>con</span><span>,</span> <span>G</span><span>)</span>
<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>))</span>
<span>res</span><span>.</span><span>fetchall</span><span>()</span>

</code></pre></div>

<div><pre><code>[(1, 0, 1, 0),
 (1, 0, 1, 2),
 (0, 1, 0, 1),
 (0, 1, 2, 1),
 (0, 1, 2, 3),
 (2, 1, 0, 1),
 (2, 1, 2, 1),
 (2, 1, 2, 3),
 (1, 2, 1, 0),
 (1, 2, 1, 2),
 (1, 2, 3, 2),
 (3, 2, 1, 0),
 (3, 2, 1, 2),
 (3, 2, 3, 2),
 (2, 3, 2, 1),
 (2, 3, 2, 3)]
</code></pre></div>

<p>A homomorphism into yourself is not an isomorphism. You need a uniqueness constraint also for that, which can easily be expressed in SQL. The undirected path graph has 2 automorphisms, the identity and the reversal.</p>

<div><pre><code><span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>,</span><span>unique</span><span>=</span><span>True</span><span>))</span>
<span>res</span><span>.</span><span>fetchall</span><span>()</span>
</code></pre></div>

<div><pre><code>[(0, 1, 2, 3), (3, 2, 1, 0)]
</code></pre></div>

<h4 id="graph-coloring">Graph Coloring</h4>

<p>We can also implement a coloring as an homomorphism into the fully connected graph, representing the colors and allowed edges between colors.</p>

<div><pre><code><span>clear_db</span><span>(</span><span>con</span><span>)</span>
<span>colors</span> <span>=</span> <span>nx</span><span>.</span><span>complete_graph</span><span>(</span><span>2</span><span>)</span> <span># a two coloring graph
</span><span>db_of_graph</span><span>(</span><span>con</span><span>,</span><span>colors</span><span>)</span>
<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM edges"</span><span>)</span>
<span>res</span> <span>=</span> <span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
</code></pre></div>



<div><pre><code><span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>))</span> <span># two dimer colorings
</span><span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
</code></pre></div>

<div><pre><code>[(1, 0, 1, 0), (0, 1, 0, 1)]
</code></pre></div>

<h2 id="bits-and-bobbles">Bits and Bobbles</h2>

<p>Try it out on colab: <a href="https://colab.research.google.com/github/philzook58/philzook58.github.io/blob/master/pynb/2024-11-18-sql_graph_csp.ipynb">https://colab.research.google.com/github/philzook58/philzook58.github.io/blob/master/pynb/2024-11-18-sql_graph_csp.ipynb</a></p>

<p>Hacker news comments. <a href="https://news.ycombinator.com/item?id=42195994">https://news.ycombinator.com/item?id=42195994</a>
<code>babel_</code> points out that clang vs gcc is due to autovectorization <a href="https://godbolt.org/z/xfdxGvMYP">https://godbolt.org/z/xfdxGvMYP</a></p>

<p><a href="https://dl.acm.org/doi/pdf/10.1145/335168.335209">https://dl.acm.org/doi/pdf/10.1145/335168.335209</a> Constraint Satisfaction and Database Theory: a Tutorial Moshe Y. Vardi</p>

<p><a href="https://users.soe.ucsc.edu/~kolaitis/talks/csp-oxford.pdf">https://users.soe.ucsc.edu/~kolaitis/talks/csp-oxford.pdf</a>  Constraint Satisfaction and Logic Phokion G. Kolaitis</p>

<p><a href="https://berkeley-cs294-248.github.io/">https://berkeley-cs294-248.github.io/</a>  CS294-248: Topics in Database Theory</p>

<p>Alice book <a href="http://webdam.inria.fr/Alice/">http://webdam.inria.fr/Alice/</a> Foundations of Databases. I know there is some discussion of query containment involvinf something like a “symbolic” database corresponding to a query.</p>

<p>Have you tried rubbing a database on it? <a href="https://www.hytradboi.com/">https://www.hytradboi.com/</a> Databases used for sometimes unusual purposes</p>

<p><a href="https://www.youtube.com/watch?v=mykR7mP5Zdk&amp;t=269s&amp;ab_channel=SimonsInstitute">https://www.youtube.com/watch?v=mykR7mP5Zdk&amp;t=269s&amp;ab_channel=SimonsInstitute</a>  Logic and Databases Phokion Kolaitis</p>

<p><a href="https://dl.acm.org/doi/10.1145/3018882.3018893">https://dl.acm.org/doi/10.1145/3018882.3018893</a> Language-integrated query with ordering, grouping and outer joins  <a href="https://okmij.org/ftp/meta-programming/index.html#SQUR">https://okmij.org/ftp/meta-programming/index.html#SQUR</a><br>
It is also noted that moanadic comprehension can do sql stuf <a href="https://ncatlab.org/nlab/files/WadlerMonads.pdf">https://ncatlab.org/nlab/files/WadlerMonads.pdf</a> <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/monad_comprehensions.html">https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/monad_comprehensions.html</a> <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/generalised_list_comprehensions.html#generalised-list-comprehensions">https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/generalised_list_comprehensions.html#generalised-list-comprehensions</a> <a href="https://dl.acm.org/doi/10.1145/2034675.2034678">https://dl.acm.org/doi/10.1145/2034675.2034678</a>
LINQ is a whole thing</p>

<p>Note newtorkx has its own homomorphism and ismorphisms functionality. Going to SQl may or may not be more efficient. <a href="https://networkx.org/documentation/stable/reference/algorithms/isomorphism.html">https://networkx.org/documentation/stable/reference/algorithms/isomorphism.html</a> <a href="https://networkx.org/documentation/stable/reference/algorithms/isomorphism.vf2.html#graph-matcher">https://networkx.org/documentation/stable/reference/algorithms/isomorphism.vf2.html#graph-matcher</a> Everything has bindings to sqlite though. Pretty convenient and flexible.
<a href="https://pallini.di.uniroma1.it/">https://pallini.di.uniroma1.it/</a> nauty and traces are high performance isomorphism / automorphism/ canonization solvers</p>

<p>Query containment. Since you can make a sql query to find homomorphisms, you can check query containment as a sql query itself. Isn’t that fun?</p>

<p>The symbolic database as a herbrand model.</p>

<p>Gra</p>

<p>I’ve never seriously used a graph database, but I kind of can’t see the appeal for this reason. I find pretty often modelling domains as graphs to not actually map that well because I want a notion of ordering.</p>

<p>I really had this one rotting in my draft backlog for a long time. Good to just dump stuff out.</p>

<h2 id="sql-model-check">SQL model check</h2>

<p>SQL is a model checker for first order logic. SQL + something like NOT and EXISTS statements can express any first order logic statement.</p>

<p>Model checking has a connotation of being about temporal logic, or software system checking. But the term itself is talking about literally checking a model satisfies a formula <code>M |= t</code>. Model checking is a general concept that can be applied to any logic with a notion of smenantics.</p>

<p>Model checking is also kind of saying there is a kind of homomorphism between the syntax and semantics.</p>

<p>This is also a confusion that we have in talking about the “complexity” of a logic. The ocmplexity depends on which question we are asking. Are me asking satisfiability or model checking? Satisfiiability is also aasking about the <code>M |= t</code> models question, but it is of the form <code>formula -&gt; option model</code> rather than the form <code>model -&gt; formula -&gt; bool</code>. The moding of the question is different.</p>

<p>When people talk about SAT being NP, they are talking about the satisfiability problem.
When they talk about existential second order logic being NP, they are talking about the model checking problem <a href="https://en.wikipedia.org/wiki/Fagin%27s_theorem">https://en.wikipedia.org/wiki/Fagin%27s_theorem</a> <a href="https://en.wikipedia.org/wiki/Descriptive_complexity_theory">https://en.wikipedia.org/wiki/Descriptive_complexity_theory</a></p>

<p>When people talk about datalog being PSPACE co</p>

<p>Tree decomposition for dynamic programming</p>

<h2 id="sql-query-plans">Sql query plans</h2>

<p>sqlite query plan is basically the same loops <a href="https://www.sqlite.org/eqp.html">https://www.sqlite.org/eqp.html</a> <a href="https://www.sqlite.org/queryplanner-ng.html">https://www.sqlite.org/queryplanner-ng.html</a></p>

<div><pre><code><span>import</span> <span>sqlite3</span>
<span>import</span> <span>duckdb</span>
<span>query</span> <span>=</span> <span>"""
EXPLAIN QUERY PLAN WITH RECURSIVE digits(digit) AS (
    SELECT 0
    UNION ALL
    SELECT digit + 1
    FROM digits
    WHERE digit &lt; 9
)
SELECT s.digit AS S, e.digit AS E, n.digit AS N, d.digit AS D,
       m.digit AS M, o.digit AS O, r.digit AS R, y.digit AS Y
FROM digits s, digits e, digits n, digits d, digits m, digits o, digits r, digits y
WHERE s.digit &lt;&gt; e.digit AND s.digit &lt;&gt; n.digit AND s.digit &lt;&gt; d.digit AND s.digit &lt;&gt; m.digit AND
      s.digit &lt;&gt; o.digit AND s.digit &lt;&gt; r.digit AND s.digit &lt;&gt; y.digit AND
      e.digit &lt;&gt; n.digit AND e.digit &lt;&gt; d.digit AND e.digit &lt;&gt; m.digit AND
      e.digit &lt;&gt; o.digit AND e.digit &lt;&gt; r.digit AND e.digit &lt;&gt; y.digit AND
      n.digit &lt;&gt; d.digit AND n.digit &lt;&gt; m.digit AND n.digit &lt;&gt; o.digit AND
      n.digit &lt;&gt; r.digit AND n.digit &lt;&gt; y.digit AND
      d.digit &lt;&gt; m.digit AND d.digit &lt;&gt; o.digit AND d.digit &lt;&gt; r.digit AND
      d.digit &lt;&gt; y.digit AND
      m.digit &lt;&gt; o.digit AND m.digit &lt;&gt; r.digit AND m.digit &lt;&gt; y.digit AND
      o.digit &lt;&gt; r.digit AND o.digit &lt;&gt; y.digit AND
      r.digit &lt;&gt; y.digit AND
      s.digit &lt;&gt; 0 AND m.digit &lt;&gt; 0 AND
      (1000 * s.digit + 100 * e.digit + 10 * n.digit + d.digit) +
      (1000 * m.digit + 100 * o.digit + 10 * r.digit + e.digit) =
      (10000 * m.digit + 1000 * o.digit + 100 * n.digit + 10 * e.digit + y.digit);
"""</span>
<span>conn</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>
<span>conn</span><span>.</span><span>execute</span><span>(</span><span>query</span><span>).</span><span>fetchall</span><span>()</span>

</code></pre></div>

<div><pre><code>[(3, 0, 0, 'MATERIALIZE digits'),
 (7, 3, 0, 'SETUP'),
 (8, 7, 0, 'SCAN CONSTANT ROW'),
 (21, 3, 0, 'RECURSIVE STEP'),
 (22, 21, 0, 'SCAN digits'),
 (46, 0, 0, 'SCAN s'),
 (50, 0, 0, 'SCAN m'),
 (57, 0, 0, 'SCAN o'),
 (65, 0, 0, 'SCAN n'),
 (76, 0, 0, 'SCAN e'),
 (90, 0, 0, 'SCAN d'),
 (107, 0, 0, 'SCAN r'),
 (127, 0, 0, 'SCAN y')]
</code></pre></div>

<p>Using</p>

<p><code>WITH digits(digit) AS (
    VALUES (0), (1), (2), (3), (4), (5), (6), (7), (8), (9)
)</code> with duckdb was if anything slower that using with recursive.</p>
<h2 id="csp">CSP</h2>

<p>SQL queries are enumerating homomorphisms between the query and the database. This perspective puts the query and the database on smilar footing, which feels odd.</p>

<p>As a subcase of this capability, if the database is holding an edge table and attributes, then a query is a graph homomorphism solver.
If we dymmetrically place two graphs into the database and in a query, we can enumerate isomoprhisms. Isn’t that fun?</p>

<p>Another perspective is that the query is a formula, and the database is a model of the formula.</p>

<p>We are used to small queries and large databases, but this is not a definition</p>

<p>A perspective on what a constraint satisfaction problem is is that is is a homomorphism problem.
For example, graph coloring is a homomorphism from a graph to a complete graph of colors (with no self edges).</p>

<p>Constraint satisfaction is an assignment to variables values frm their domain subject to constraints. The particular connectivty of a problem can be represented by a hypergraph. The target structure represents the domains the variables can take on, and the constraint hyperedges map to a relation representing the constraint.
A class of CSP problems is allowing the connecvtivity graph to vary, while keeping the target (the types of constraints fixed). Is this a useful characterization? Eh. It’s interesting that it ties into other mathemtical topicas.</p>

<p>The naive solution of a constraint satsifaction problem is to just make a big sequence of loops, pruning / breaking with checks that constraint are satisifed. We want to push the checks as high as possible.
This a a very static perspective.
More dynammically, we want to pick the variable ordering inside the choice branches. This is more of a backtracking feel. We do proppagation to disallow subchoices</p>

<p>A problem that is easy to embed into database queries is graph homomomorphism. Queries and databases feel very different, but they are more symettric than you might think.</p>

<p>In typical usage, queries are small and databases are large.
A graph coloring problem can be mdelled as fnding a graph homomorphism into a complete graph. This flips the intuition on it’s head with a large query and small database. Examples like these are better served probably by a constraint satisfaction solver or SAT style techniques.</p>

<p>The middle ground of roughly equal graphs is a graph isomorphism problem. Custom solvers like nauty exist for this case too.</p>

<div><pre><code><span>import</span> <span>sqlite3</span>
<span>import</span> <span>networkx</span> <span>as</span> <span>nx</span>
<span>def</span> <span>db_of_graph</span><span>(</span><span>conn</span><span>,</span> <span>G</span><span>):</span>
    <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO nodes VALUES (?)"</span><span>,</span> <span>map</span><span>(</span><span>lambda</span> <span>v</span> <span>:</span> <span>(</span><span>v</span><span>,),</span>  <span>G</span><span>.</span><span>nodes</span><span>))</span>
    <span>con</span><span>.</span><span>executemany</span><span>(</span><span>"INSERT INTO edges VALUES (?, ?)"</span><span>,</span> <span>G</span><span>.</span><span>edges</span><span>)</span>
<span>def</span> <span>graph_of_db</span><span>(</span><span>con</span><span>):</span>
    <span>G</span> <span>=</span> <span>nx</span><span>.</span><span>DiGraph</span><span>()</span>
    <span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM nodes"</span><span>)</span>
    <span>G</span><span>.</span><span>add_nodes_from</span><span>(</span><span>map</span><span>(</span><span>lambda</span> <span>x</span><span>:</span> <span>x</span><span>[</span><span>0</span><span>],</span> <span>res</span><span>.</span><span>fetchall</span><span>()))</span>
    <span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM edges"</span><span>)</span>
    <span>G</span><span>.</span><span>add_edges_from</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
    <span>return</span> <span>G</span>
<span>def</span> <span>query_of_graph</span><span>(</span><span>G</span><span>):</span>
    <span>selects</span> <span>=</span> <span>[]</span>
    <span>froms</span> <span>=</span> <span>[]</span>
    <span>wheres</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>node</span> <span>in</span> <span>G</span><span>:</span>
        <span>froms</span> <span>+=</span> <span>[</span><span>f</span><span>"nodes AS v</span><span>{</span><span>node</span><span>}</span><span>"</span><span>]</span>
        <span>selects</span> <span>+=</span> <span>[</span><span>f</span><span>"v</span><span>{</span><span>node</span><span>}</span><span>.v AS v</span><span>{</span><span>node</span><span>}</span><span>"</span><span>]</span>
    <span>for</span> <span>i</span><span>,</span> <span>(</span><span>a</span><span>,</span><span>b</span><span>)</span> <span>in</span> <span>enumerate</span><span>(</span><span>G</span><span>.</span><span>edges</span><span>):</span>
        <span>froms</span> <span>+=</span> <span>[</span><span>f</span><span>"edges as e</span><span>{</span><span>i</span><span>}</span><span>"</span><span>]</span>
        <span>wheres</span> <span>+=</span> <span>[</span><span>f</span><span>"e</span><span>{</span><span>i</span><span>}</span><span>.src = v</span><span>{</span><span>a</span><span>}</span><span>.v"</span>  <span>,</span> <span>f</span><span>"e</span><span>{</span><span>i</span><span>}</span><span>.dst = v</span><span>{</span><span>b</span><span>}</span><span>.v"</span><span>]</span>
    <span>sql</span> <span>=</span> <span>"SELECT "</span> <span>+</span> <span>", "</span><span>.</span><span>join</span><span>(</span><span>selects</span><span>)</span> <span>+</span> \
          <span>"</span><span>\n</span><span>FROM "</span> <span>+</span>  <span>", "</span><span>.</span><span>join</span><span>(</span><span>froms</span><span>)</span> <span>+</span> \
          <span>"</span><span>\n</span><span>WHERE "</span> <span>+</span> <span>" AND "</span><span>.</span><span>join</span><span>(</span><span>wheres</span><span>)</span>
    <span>return</span> <span>sql</span>
<span>G</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>7</span><span>,</span> <span>create_using</span><span>=</span><span>nx</span><span>.</span><span>DiGraph</span><span>)</span>
<span>lhs</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>3</span><span>,</span> <span>create_using</span><span>=</span><span>nx</span><span>.</span><span>DiGraph</span><span>)</span>
<span>con</span> <span>=</span> <span>sqlite3</span><span>.</span><span>connect</span><span>(</span><span>":memory:"</span><span>)</span>

<span>con</span><span>.</span><span>execute</span><span>(</span><span>"CREATE TABLE nodes(v)"</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"CREATE TABLE edges(src,dst)"</span><span>)</span>
<span>db_of_graph</span><span>(</span><span>con</span><span>,</span> <span>G</span><span>)</span>
<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>lhs</span><span>))</span>
<span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
<span># Result: [(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]
</span>
<span>print</span><span>(</span><span>graph_of_db</span><span>(</span><span>con</span><span>))</span>
<span>"DELETE FROM nodes WHERE nodes.v = ?"</span>
<span>"DELETE FROM edges where edges.src = ? OR edges.dst = ?"</span>

<span>con</span><span>.</span><span>execute</span><span>(</span><span>"DELETE FROM nodes"</span><span>)</span>
<span>con</span><span>.</span><span>execute</span><span>(</span><span>"DELETE FROM edges"</span><span>)</span>
<span>colors</span> <span>=</span> <span>nx</span><span>.</span><span>complete_graph</span><span>(</span><span>2</span><span>)</span> <span># a two coloring
</span><span>db_of_graph</span><span>(</span><span>con</span><span>,</span><span>colors</span><span>)</span>
<span># symmetrize. Maybe db_of_graph should do this. if not isinstanc(G,nx.DiGraph)
</span><span>con</span><span>.</span><span>execute</span><span>(</span><span>"INSERT INTO edges SELECT edges.dst, edges.src FROM edges"</span><span>)</span>

<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>"SELECT * FROM edges"</span><span>)</span>
<span>res</span> <span>=</span> <span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
<span>res</span> <span>=</span> <span>con</span><span>.</span><span>execute</span><span>(</span><span>query_of_graph</span><span>(</span><span>G</span><span>))</span>
<span>print</span><span>(</span><span>res</span><span>.</span><span>fetchall</span><span>())</span>
<span># [(1, 0, 1, 0, 1, 0, 1), (0, 1, 0, 1, 0, 1, 0)]
</span></code></pre></div>

<p>Graph coloring can be solved through dynamic programming. If we cut up a graph, we only need to know if it can be colored with particular choices at interfaces. Choosing interfaces like this is a graph partitioning problem, but also is a tree decomposition.</p>

<p>One of the things that I found appealing about category theory is that it presents a design methodology to convert things that look graph-like like string diagrams into term-like expresssions of combinators.</p>

<p>Hmm. python-metis is not a thing anymore? Just pip install metis, it works with networkx anyway</p>

<div><pre><code><span>import</span> <span>metis</span>

<span>import</span> <span>networkx</span> <span>as</span> <span>nx</span>
<span>G</span> <span>=</span> <span>nx</span><span>.</span><span>path_graph</span><span>(</span><span>7</span><span>)</span>
<span>edgecuts</span><span>,</span> <span>parts</span> <span>=</span> <span>metis</span><span>.</span><span>part_graph</span><span>(</span><span>G</span><span>,</span><span>3</span><span>)</span>
<span>print</span><span>(</span><span>edgecuts</span><span>,</span> <span>parts</span><span>)</span>

<span>print</span><span>(</span><span>nx</span><span>.</span><span>community</span><span>.</span><span>kernighan_lin_bisection</span><span>(</span><span>G</span><span>))</span> <span># anneal a cut by node swapping
</span><span>print</span><span>(</span><span>list</span><span>(</span><span>nx</span><span>.</span><span>community</span><span>.</span><span>girvan_newman</span><span>(</span><span>G</span><span>)))</span> <span># remove edges from graph
</span></code></pre></div>

<p>Recursively partition to build query plan (?)</p>

<p>You can build a query plan using these graph partitioners
but also query planners can be used to find partitions / tree decompositions.</p>

<p>There are also custom solvers for this.</p>

<p>graph datastructure</p>

<p><code>[(v1,v2)]</code></p>

<div><pre><code>Node(outs,ins)
= [(outs,ins)]
out, inner , in

</code></pre></div>

<p>dynamic tree decomposition
hyprgraph data structure</p>

  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Undergraduates with family income below $200k will be tuition-free at MIT (503 pts)]]></title>
            <link>https://news.mit.edu/2024/mit-tuition-undergraduates-family-income-1120</link>
            <guid>42195895</guid>
            <pubDate>Wed, 20 Nov 2024 16:59:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.mit.edu/2024/mit-tuition-undergraduates-family-income-1120">https://news.mit.edu/2024/mit-tuition-undergraduates-family-income-1120</a>, See on <a href="https://news.ycombinator.com/item?id=42195895">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
          

            <p>Undergraduates with family income below $200,000 can expect to attend MIT tuition-free starting next fall, thanks to newly expanded financial aid. Eighty percent of American households meet this income threshold.</p><p>And&nbsp;for&nbsp;the 50 percent of American families with income below $100,000, parents can expect to pay nothing at all toward the&nbsp;full cost of their&nbsp;students’ MIT education,&nbsp;which includes tuition as well as housing, dining, fees, and an allowance for books and personal expenses.</p><p>This $100,000 threshold is up from $75,000 this year, while next year’s $200,000 threshold for tuition-free attendance will increase from its current level of $140,000.</p><p>These new steps to enhance MIT’s affordability for students and families are the latest in a long history of efforts by the Institute to free up more resources to make an MIT education as affordable and accessible as possible. Toward that end, MIT has earmarked $167.3 million in need-based financial aid this year for undergraduate students — up some 70 percent from a decade ago.</p><p>“MIT’s distinctive model of education — intense, demanding, and rooted in science and engineering — has profound practical value to our students and to society,” MIT President Sally Kornbluth says. “As the&nbsp;<em>Wall Street Journal&nbsp;</em>recently reported, MIT is better at improving the financial futures of its graduates than any other U.S. college, and&nbsp;<a href="https://www.timeshighereducation.com/student/best-universities/best-universities-graduate-jobs-global-university-employability-ranking" title="https://www.timeshighereducation.com/student/best-universities/best-universities-graduate-jobs-global-university-employability-ranking">the Institute also ranks number one in the world for the employability of its graduates</a>.”&nbsp;</p><p>“The cost of college is a real concern for families across the board,” Kornbluth adds, “and we’re determined to make this transformative educational&nbsp;experience available to the most talented students, whatever their financial circumstances.&nbsp;So, to every student out there who dreams of coming to MIT: Don’t let concerns about cost stand in your way.”</p><p>MIT is&nbsp;<a href="https://sfs.mit.edu/undergraduate-students/the-cost-of-attendance/making-mit-affordable/" title="https://sfs.mit.edu/undergraduate-students/the-cost-of-attendance/making-mit-affordable/">one of only nine colleges</a>&nbsp;in the US that does&nbsp;<em>not</em>&nbsp;consider applicants’ ability to pay as part of its admissions process and that meets the full demonstrated financial need&nbsp;⁠for all undergraduates.&nbsp;MIT does not expect students on aid to take loans, and,&nbsp;unlike many other institutions, MIT does&nbsp;<em>not</em>&nbsp;provide an admissions advantage to the children of alumni or donors. Indeed, 18 percent of current MIT undergraduates are first-generation college students.</p><p>“We believe MIT should be the preeminent destination for the most talented students in the country interested in an education centered on science and technology, and accessible to the best students regardless of their financial circumstances,” says Stu Schmill, MIT’s dean of admissions and student financial services.</p><p>“With the need-based financial aid we provide today, our education is much more affordable now than at any point in the past,” adds Schmill, who graduated from MIT in 1986, “even though the ‘sticker price’ of MIT is higher now than it was when I was an undergraduate.”</p><p>Last year, the median annual cost paid by an MIT undergraduate receiving financial aid was $12,938⁠, allowing 87 percent of students in the Class of 2024 to graduate debt-free. Those who did borrow graduated with median debt of $14,844. At the same time, graduates benefit from the&nbsp;<a href="https://sfs.mit.edu/undergraduate-students/the-cost-of-attendance/return-on-investment/">lifelong&nbsp;value</a> of an MIT degree, with an average starting salary of $126,438 for graduates entering industry, according to MIT’s most recent survey of its graduating students.</p><p>MIT’s endowment — made up of generous gifts made by individual alumni and friends — allows the Institute to provide this level of financial aid, both now and into the future.</p><p>“Today’s announcement is a powerful expression of how much our graduates value their MIT experience,” Kornbluth says, “because our ability to provide financial aid of this scope depends on decades of individual donations to our endowment, from generations of MIT alumni and&nbsp;other&nbsp;friends.&nbsp;In effect, our endowment is an inter-generational gift from past MIT students&nbsp;to the students of today and tomorrow.”</p><p><strong>What MIT families can expect in 2025</strong></p><p>As noted earlier: Starting next fall, for families with income below $100,000, with typical assets, parents can expect to pay nothing for the full cost of attendance, which includes&nbsp;tuition, housing, dining, fees, and allowances for books and personal expenses.</p><p>For families with income from $100,000 to $200,000, with typical assets, parents can expect to pay on a sliding scale from $0 up to a maximum of around $23,970, which is this year’s total cost for MIT housing, dining, fees, and allowances for books and personal expenses.</p><p>Put another way, next year all MIT families with income below $200,000 can expect to contribute well below $27,146, which is the annual average cost for in-state students to attend and live on campus at public universities in the US, according to the&nbsp;<a href="https://educationdata.org/average-cost-of-college#average-total-cost-of-college">Education Data Initiative</a>. And even among families with income above $200,000, many still receive need-based financial aid from MIT, based on their unique financial circumstances. Families can use MIT’s online&nbsp;<a href="https://sfs.mit.edu/undergraduate-students/the-cost-of-attendance/estimate-your-cost/">calculators</a> to estimate the cost of attendance for their specific family.</p><p>This past summer, MIT’s faculty-led Committee on Undergraduate Admissions and Financial Aid was publicly charged by President Kornbluth with undertaking a review of the Institute’s&nbsp;admissions and financial aid policies, to ensure that MIT remains as fully accessible as possible to all students, regardless of their financial circumstances. The steps announced today are the first of these recommendations to be reviewed and adopted.</p>        

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[La Basilica Di San Pietro (131 pts)]]></title>
            <link>https://unlocked.microsoft.com/vatican/</link>
            <guid>42194587</guid>
            <pubDate>Wed, 20 Nov 2024 15:15:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://unlocked.microsoft.com/vatican/">https://unlocked.microsoft.com/vatican/</a>, See on <a href="https://news.ycombinator.com/item?id=42194587">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        


        <!-- Video for checking low power mode. -->
        

        <main id="site-main" tabindex="-1">
            <!-- Switch theme back to the page theme. -->
            

<!-- Start : La Basilica di San Pietro -->
<div id="post-6848">
    
    <div id="block_a82c80c9829cab79891071a035dd5f0a">
                            <p>
                    Making cultural heritage&nbsp;more accessible with AI&nbsp;                </p>
                        
                    </div>









<div id="block_673e62afa30bd">
    

<div id="block_673e62afa2900">
    <p>Photogrammetry, AI, and digital preservation combine to create a digital twin of St. Peter’s Basilica with thousands of images, allowing visitors to explore it in detail from anywhere in the world.</p>
<p>Located in Vatican City, St. Peter’s Basilica is over 400 years old, and is one of the most well-known churches in the world revered for its breathtaking Renaissance and Baroque architecture. Famous architects like Michelangelo and Bernini contributed to the design of the church, which took over 100 years to complete.</p>
<p>Today, <a href="https://virtual.basilicasanpietro.va/" target="_blank" rel="noopener"><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>La Basilica </span></span></span><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>d</span></span></span><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>i San Pietro</span></span></span></a><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>—</span></span>a collaboration between the Vatican, Iconem, and Microsoft—gives everyone full access to Vatican City’s most iconic church via AI-enabled immersive exhibits and an interactive website.</p>
</div>









<div id="block_673e62afa2ef2">
    <h2>Making history</h2>
<p>Taking photos of every detail of a massive historic cathedral and piecing them all together sounds daunting, especially in less than a month, but with AI, it’s possible. Iconem, a leader in digital preservation based in Paris, uses advanced photogrammetry and AI to create 3D replicas of the world’s most famous historic landmarks and archaeologial sites.</p>
<p>Andrea Louis, software engineer and Technical Project Manager at Iconem, found the <span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>La Basilica </span></span></span><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>d</span></span></span><span><span lang="EN-US" xml:lang="EN-US" data-contrast="auto"><span>i San Pietro</span></span></span> experience stimulating due to its size and complexity, and the many spiritual, artistic, and historical layers involved. Being inside St. Peter’s Basilica gave her and the Iconem team intimate knowledge of the church, which allowed them to develop new ways to bring visitors inside the space.</p>
</div>


</div>









<div id="block_673e62afa7468">
    











<div id="block_598c3703aa7dcec4cc717744e5534f76">
        <blockquote>It’s like an investigation of the 2,000-year history through one unique monument.</blockquote>
                    <div>
                                    <p>Yves Ubelmann</p>
                                                    <p>Founder and CEO of Iconem</p>
                            </div>
                    </div>









<p>To make the <a href="https://virtual.basilicasanpietro.va/" target="_blank" rel="noopener">3D version of St. Peter’s Basilica</a>, the Iconem team took over 400,000 high-resolution images using advanced photogrammetry techniques. They spent three weeks scanning the Basilica using various devices including drones, cameras, and lasers, and Azure processed&nbsp;the massive volume of images collected. This data was&nbsp;securely backed up and stored in Azure&nbsp;Cloud, making it accessible to partners.&nbsp;Iconem then created an ultra-precise 3D model, or a digital twin of the Basilica. AI-generated imagery taken from Iconem’s photogrammetry data enhanced visualization of both the interior and exterior of the Basilica, allowing visitors to explore every intricate detail from anywhere in the world.</p>


</div>









    









<div id="block_673e62afad035">
    

<div id="block_673e62afac80f">
    <h2>Bringing it to life with AI</h2>
<p>Microsoft provided the AI tech needed to process and analyze Iconem’s vast amount of photogrammetry data used to create the <a href="https://virtual.basilicasanpietro.va/" target="_blank" rel="noopener">digital twin of St. Peter’s Basilica</a>. Microsoft’s AI for Good Lab contributed advanced tools that refined the digital twin with millimeter-level accuracy, and used AI to help detect and map structural vulnerabilities like cracks and missing mosaic tiles. The Vatican oversaw the collaboration, ensuring the preservation of the Basilica as a cultural, spiritual, and historically significant site for years to come.</p>
</div>









<div id="block_673e62afaca88">
    <h2>An experience of a lifetime</h2>
<p>In November 2024, ahead of the the 2025 Holy Year Jubilee, both the public exhibition and digital platforms of St. Peter’s Basilica will be available for everyone to see and experience in the Pétros enì exhibit. The Holy Year Jubilee occurs every 25 years as a year of grace and pilgrimage in the Roman Catholic church. During this time, Catholics are encouraged to take a pilgrimage to Rome where they can participate in ceremonies, religious events, and focus on spiritual renewal. “Pilgrims of Hope” is the theme of the 2025 Holy Year Jubilee.</p>
<p>The Pétros enì exhibit will give the 35 million pilgrims in Rome an immersive, in-person experience of a lifetime, and it will also help more than a billion Catholics unable to make the trip feel like they’re in the moment.</p>
</div>












</div>









<div id="block_b4db1ad64661c694e62737353435c2fd">
        <blockquote><span data-teams="true"><span dir="ltr">This project ultimately allows us to rediscover what is fully human and connects everyone.</span></span></blockquote>
                    <div>
                                    <p>Cardinal Mauro Gambetti</p>
                                                    <p>Archpriest of St. Peter’s Basilica </p>
                            </div>
                    </div>






</div>
<!-- End : La Basilica di San Pietro -->


    </main>

    

    
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pipe Viewer – A Unix Utility You Should Know About (159 pts)]]></title>
            <link>https://catonmat.net/unix-utilities-pipe-viewer</link>
            <guid>42194540</guid>
            <pubDate>Wed, 20 Nov 2024 15:09:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://catonmat.net/unix-utilities-pipe-viewer">https://catonmat.net/unix-utilities-pipe-viewer</a>, See on <a href="https://news.ycombinator.com/item?id=42194540">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                
    <p><img src="https://catonmat.net/wp-content/uploads/2009/02/unix-utilities.jpg" alt="Unix Utilities">Hi all! I'm starting a new article series here. This one is going to be about Unix utilities that you should know about. The articles will discuss one Unix program at a time. I'll try to write a good introduction to the tool and give as many examples as I can think of.</p>
<p>The first post in this series is going to be about a not so well known but super powerful Unix program called <strong>Pipe Viewer</strong> or <strong>pv</strong> for short. Pipe viewer is a terminal-based tool for monitoring the progress of data through a pipeline. It can be inserted into any normal pipeline between two processes to give a visual indication of how quickly the data is passing through, how long it has taken, how near to completion it is, and an estimate of how long it will be until completion. </p>
<p>Pipe viewer is written by <a href="http://www.ivarch.com/">Andrew Wood</a>, an experienced Unix sysadmin. The homepage of pv utility is here: <a href="http://www.ivarch.com/programs/pv.shtml">pv utility</a>.</p>
<p>If you feel like you are interested in this stuff, I suggest that you subscribe to <a href="http://feeds.feedburner.com/catonmat">my rss feed</a> to receive my future posts automatically.</p>
<h2>How to use pv?</h2>
<p>Let's start with some really easy examples and progress to more complicated ones.</p>
<p>Suppose that you have a file <code>access.log</code> that is a tens of gigabytes in size and contains web logs. You want to compress it into a smaller file, let's say a gunzip archive (.gz). The obvious way to do it is:</p>
<pre>$ gzip -c access.log &gt; access.log.gz
</pre>
<p>As the file is so huge (tens of gigabytes), you have no idea how long to wait. Will it finish soon? Or will it take another 30 mins?</p>
<p>By using <code>pv</code> you can precisely time how long it will take:</p>
<pre>$ pv access.log | gzip &gt; access.log.gz
&lt;strong&gt;611MB 0:00:11 [58.3MB/s] [=&gt;      ] 15% ETA 0:00:59&lt;/strong&gt;
</pre>
<p>Pipe viewer acts as <code>cat</code> here, except it also adds a progress bar. We can see that gzip processed 611MB of data in 11 seconds. It has processed 15% of all data and it will take 59 more seconds to finish. So no coffee break.</p>
<p>You can stick several <code>pv</code> processes in your pipeline. For example, you can time how fast the data is being read from the disk with one <code>pv</code> and how much data has been gzipped via a second <code>pv</code>:</p>
<pre html="">$ pv -cN source access.log | gzip | pv -cN gzip &gt; access.log.gz
&lt;strong&gt;source:  760MB 0:00:15 [37.4MB/s] [=&gt;     ] 19% ETA 0:01:02
  gzip: 34.5MB 0:00:15 [1.74MB/s] [  &lt;=&gt;  ]&lt;/strong&gt;
</pre>
<p>Here we have specified the <code>-N</code> parameter to <code>pv</code> to create a named stream. The <code>-c</code> parameter makes sure the output is not garbaged by one pv process writing over the other.</p>
<p>This example shows that the <code>access.log</code> file is being read at the speed of 37.4MB/s but gzip is writing data at only 1.74MB/s. We can immediately calculate the compression rate. It's 37.4/1.74 = 21x!</p>
<p>Notice how <code>gzip</code> doesn't include how much data is left or how fast it will finish. It's because the <code>pv</code> process after <code>gzip</code> has no idea how much data <code>gzip</code> will produce (it's just outputting compressed data from input stream). The first pv process, however, knows how much data is left, because it's reading it from a known file.</p>
<p>Another similar example is be to pack the whole directory of files into a compressed tarball:</p>
<pre>$ tar -czf - . | pv &gt; out.tgz
&lt;strong&gt; 117MB 0:00:55 [2.7MB/s] [&gt;         ]&lt;/strong&gt;
</pre>
<p>In this example, <code>pv</code> only shows the output rate of the <code>tar -czf</code> command. It has no information about how bit the directory is or how long the <code>tar</code> process will run or how much data is left. We need to provide the total size of data we are tarring to pv. It can be done this way:</p>
<pre html="">$ tar -cf - . | pv -s $(du -sb . | awk '{print $1}') | gzip &gt; out.tgz
&lt;strong&gt; 253MB 0:00:05 [46.7MB/s] [&gt;     ]  1% ETA 0:04:49&lt;/strong&gt;
</pre>
<p>What happens here is we tell tar to recursively (default mode) create (<code>-c</code> argument) an archive of all files in current dir (<code>.</code> argument) and output the data to stdout <code>-f - argument</code>. Next, we specify the size <code>-s</code> argument to pv of all files in current dir and all its subdirectories. The <code>du -sb . | awk '{print $1}'</code> command returns number of bytes in current dir and it's fed as the <code>-s</code> parameter to pv. Next, we gzip the content and output the result to <code>out.tgz</code> file. This way <code>pv</code> knows how much data is still left to be processed and shows us that it will take another 4 mins 49 secs to finish. So you can take a quick coffee break.</p>
<p>Another interesting example is copying large amounts of data over the network via the <code>nc</code> (netcat) utility that I will write about some other time.</p>
<p>(Update: Just wrote about it: <a href="https://catonmat.net/unix-utilities-netcat">Netcat – A Unix Utility You Should Know About</a>.)</p>
<p>Suppose you have two computers A and B. You want to transfer a directory from A to B very quickly. The fastest way to do it is to use <code>tar</code> and <code>nc</code>, and time the operation with <code>pv</code>.</p>
<p>On computer A with IP address 192.168.1.100 run this command:</p>
<pre>$ tar -cf - /path/to/dir | pv | nc -l -p 6666 -q 5
</pre>
<p>On computer B run this command:</p>
<pre>$ nc 192.168.1.100 6666 | pv | tar -xf -
</pre>
<p>That's it! All the files in <code>/path/to/dir</code> on computer A will get transferred to computer B, and you'll be able to see how fast the operation is going.</p>
<p>This will show how fast the data is being transferred but it won't show how much data is left. If you want this information, then you have to do the <code>pv -s $(...)</code> trick from the previous example and add it to <code>pv</code> on computer A.</p>
<p>Here's another fun example. It shows how fast the computer reads from <code>/dev/zero</code>:</p>
<pre>$ pv /dev/zero &gt; /dev/null
 157GB 0:00:38 [4.17GB/s]
</pre>
<p>That's it. I hope you enjoyed this post and learned something new. I love explaining things and teaching!  </p>
<h2>How to install pv?</h2>
<p>If you're on Debian or Debian based system such as Ubuntu do the following:</p>
<pre>$ sudo aptitude install pv
</pre>
<p>If you're on Fedora or Fedora based system such as CentOS do:</p>
<pre>$ sudo yum install pv
</pre>
<p>If you're on Mint, do:</p>
<pre>$ sudo apt-get install pv
</pre>
<p>If you're on Slackware, go to <a href="http://www.ivarch.com/programs/pv.shtml">pv homepage</a>, download the pv-version.tar.gz archive and do:</p>
<pre>$ tar -zxf pv-version.tar.gz
$ cd pv-version
$ ./configure &amp;&amp; sudo make install
</pre>
<p>If you're a Mac user:</p>
<pre>$ sudo port install pv
</pre>
<p>If you're OpenSolaris user:</p>
<pre>$ pfexec pkg install pv
</pre>
<p>If you're a Windows user on Cygwin:</p>
<pre>$ ./configure
$ export DESTDIR=/cygdrive/c/cygwin
$ make
$ make install
</pre>
<p>The manual of the utility can be found here <a href="http://www.ivarch.com/programs/quickref/pv.shtml">man pv</a>.</p>
<p>Have fun measuring your pipes with pv and until next time!</p>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How good are American roads? (184 pts)]]></title>
            <link>https://www.construction-physics.com/p/how-good-are-american-roads</link>
            <guid>42194327</guid>
            <pubDate>Wed, 20 Nov 2024 14:45:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.construction-physics.com/p/how-good-are-american-roads">https://www.construction-physics.com/p/how-good-are-american-roads</a>, See on <a href="https://news.ycombinator.com/item?id=42194327">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><span>We’re in an era where US infrastructure is getting a lot of attention. We need a lot of </span><a href="https://www.amazon.com/Electrify-Optimists-Playbook-Energy-Future/dp/0262046237" rel="">energy infrastructure for decarbonization</a><span>, and to enable the </span><a href="https://www.construction-physics.com/p/how-to-build-an-ai-data-center" rel="">AI data center buildout</a><span>. There’s lots of interest in building </span><a href="https://www.smartcitiesdive.com/news/us-high-speed-rail-outlook-california-brightline-amtrak/731370/" rel="">high-speed rail</a><span>, mass transit infrastructure, </span><a href="https://unchartedterritories.tomaspueyo.com/p/does-desalination-promise-a-future" rel="">desalination plants</a><span> in arid regions, and </span><a href="https://www.construction-physics.com/p/do-us-ports-need-more-automation" rel="">better ports</a><span>.</span></p><p><span>One facet of infrastructure that doesn’t get all that much attention is roads, despite the fact that they’re crucial transportation infrastructure, and probably the infrastructure that Americans interact with most directly and consistently. The US has the largest road network in the world, about 4.3 million miles of road, and Americans </span><a href="https://frontiergroup.org/resources/fact-file-americans-drive-most/" rel="">drive much more</a><span> than residents in most other countries. Good-quality roads are important for a functioning economy, and rough roads </span><a href="https://www.nber.org/system/files/working_papers/w31981/w31981.pdf" rel="">inflict costs</a><span> in the form of reduced vehicle speeds.</span></p><p>How good is American road infrastructure? How does it compare with roads built in other countries?</p><p>Overall, the quality of US interstates is very high, while the quality of roads in major cities is quite poor. And while there’s some anecdotal evidence that US roads are worse than European roads, I wasn’t able to find much international road quality data to compare. The limited data I found points to the US not being a huge outlier in road quality. But more data is needed to compare accurately.</p><p><span>The most common metric for measuring road quality is the </span><a href="https://en.wikipedia.org/wiki/International_roughness_index" rel="">International Roughness Index</a><span> (IRI). The IRI measures how much a car moves vertically as it travels over a given distance, and is typically given in units like “inches per mile” or “millimeters per meter.” Lower IRI is better: the rougher the road, the more the car bounces up and down, and the higher the IRI. As we’ll see, standards for road quality vary from country to country, but a “good” IRI is generally in the neighborhood of 95 inches per mile / 1.5 millimeters per meter or less.</span></p><p><span>Data on US road quality is provided by the Bureau of Transportation Statistics and the Federal Highway Administration (FHWA) at the </span><a href="https://www.bts.gov/content/condition-us-roadways-functional-system" rel="">national</a><span>, </span><a href="https://www.bts.gov/road-condition" rel="">state</a><span>, and </span><a href="https://www.fhwa.dot.gov/policyinformation/statistics/2022/hm73.cfm" rel="">city level</a><span>. It’s not 100% clear to me what’s included in this data, or what the selection criteria is. It definitely includes essentially all of the Interstate System, as well as other major highways that make up the </span><a href="https://en.wikipedia.org/wiki/National_Highway_System_(United_States)" rel="">National Highway System</a><span>. But the National Highway System has on the order of </span><a href="https://en.wikipedia.org/wiki/National_Highway_System_(United_States)" rel="">160,000 miles</a><span>, while there is quality data for around 800,000 miles worth of road. Presumably the other 640,000 miles are other important roads outside of the highway system. Regardless, the roads we have quality data for are only a fraction (around 19%) of the US’s total road network.</span></p><p>To start, let’s look at overall road quality, broken down by whether they’re interstate highways or not, and whether they’re urban or rural roads.</p><p><span>Note: The FHWA uses slightly different category breakdowns in different places. Some places it uses </span><a href="https://www.fhwa.dot.gov/policyinformation/pubs/hf/pl11028/chapter7.cfm" rel="">three categories</a><span>, some places </span><a href="https://www.fhwa.dot.gov/policyinformation/statistics/2022/hm73.cfm" rel="">it uses five</a><span>, and some places it uses </span><a href="https://www.bts.gov/content/condition-us-roadways-functional-system" rel="">a different five</a><span>. I’ve used the categories given in the national level statistics. These are consistent with the three-level categorization used elsewhere, with an additional “very good” and “very poor” labels I’ve assigned to &lt; 60 and &gt; 220 IRI. Note that state DOTs might use their own, slightly different quality categories.</span></p><p><span>US interstates are fairly good quality, with more than 80% of mileage good or very good, and only a tiny fraction of mileage (around 3%) poor or very poor. Non-interstate roads are, unsurprisingly, less good, with only around 40% of measured mileage good or better, and 20% poor or worse. Interestingly, in all cases urban roads are worse quality than rural roads, presumably because they see higher traffic than rural roads. More than a third of non-interstate urban roads are poor quality or worse. And remember, this data is just a fraction of total US road mileage (which includes more than a million miles of </span><a href="https://en.wikipedia.org/wiki/List_of_countries_by_road_network_size" rel="">unpaved roads</a><span>). Presumably average quality of the total non-interstate road network is even worse.</span></p><p>We can also see how road quality has changed over time. Over the last 30 years, interstate quality has been steadily improving, while non-interstate has been fairly flat.</p><p>We can also look at a state-by-state breakdown. For interstates, there’s not a huge amount of variation: only four states have less than 60% of their roads good quality or better, and almost every state has less than 10% of its interstate mileage poor quality or worse.</p><p><span>With non-interstates, we see more variation. Broadly, highly rural states tend to have higher quality roads than more urbanized states, though there’s a decent amount of variation. California, which is reasonably rural, nevertheless comes in third from the bottom. Interestingly, I expected cold places to have lower road quality in general due to things like </span><a href="https://orf.od.nih.gov/TechnicalResources/Documents/Technical%20Bulletins/19TB/The%20Freeze-Thaw%20Cycle%20in%20Concrete%20and%20Brick%20Assemblies%20January%202019-Technical%20Bulletin_508.pdf" rel="">freeze-thaw cycles</a><span> and the impact of </span><a href="https://en.wikipedia.org/wiki/Salt_Belt" rel="">road salting</a><span>, but there doesn’t seem to be much correlation. Plenty of cold places (North Dakota, Wyoming, Minnesota) have good-quality roads, while plenty of warm places (Louisiana, New Mexico, California) have poor-quality roads.</span></p><p><span>We can also look at the road quality of individual cities. Below is road quality (non-interstate) for the 19 largest metro areas in the US.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-1-151890432" target="_self" rel="">1</a></span></p><p>While urban roads are poor in general, there’s a large amount of variation. Cities like Atlanta and Minneapolis have less than 10% of their roads are poor quality or worse, while more than 60% of the roads in San Francisco and Los Angeles are poor. But in general, most major cities aren’t doing great: in 13 of the 19 largest US cities, more than 1/3rd of the roads are poor quality. And here again we see that cold climate doesn’t seem to have much impact on road quality, with cold places like Minneapolis and New York near the top, while warm cities like Los Angeles, San Diego and Dallas are near the bottom.</p><p>So US interstates seem high-quality, while urban roads are often quite poor. How does this compare to other countries?</p><p><span>It’s unfortunately not easy to tell. The US ranks very highly in the international </span><a href="https://worldpopulationreview.com/country-rankings/road-quality-by-country" rel="">Roads Quality Index</a><span> (11th in the world, as of 2019), but this is based on a survey of the perceptions of business leaders about road quality, not actual road data. A </span><a href="https://www.imf.org/-/media/Files/Publications/WP/2022/English/wpiea2022095-print-pdf.ashx" rel="">2022 IMF study</a><span> of various countries’ road quality ranked the US best in the world, but it relied on estimated travel speeds between major cities using Google Maps data, not actual road roughness. While the IRI is commonly used by countries around the world to measure road quality, I had a very hard time finding any international datasets comparable to FHWA data.</span></p><p><span>But I was able to scrape together a few. </span><a href="https://www.orr.gov.uk/sites/default/files/2023-10/trl-report-on-benchmarking-the-condition-of-highway-networks.pdf" rel="">This 2023 report</a><span> from the UK compares highway quality in England, Wales, Scotland, and the Netherlands, and provides a high-level summary of IRI data.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-2-151890432" target="_self" rel="">2</a></span><span> </span><a href="https://open.canada.ca/data/en/dataset/01dfc06c-6ef0-4fd0-a010-8ba20e3c9d10" rel="">This Canadian website</a><span> gives IRI data up to 2021 for the provincial highways in Ontario. </span><a href="https://www.tii.ie/media/n45jg5jx/tii-national-roads-network-indicators-2017.pdf" rel="">This presentation</a><span> gives some summary IRI statistics for Ireland’s national roads as of 2017, and </span><a href="https://www.instituteofasphalt.org/requirements/papers/61_2.pdf" rel="">this one</a><span> gives some IRI data for Irish regional roads as of 2018.</span></p><p>Because these countries use somewhat different roughness categories, I graphed each of these, along with US interstate and non-interstate roads, using a cumulative distribution function, which gradually adds the fraction of roads at different IRI levels. The farther the curve is to the left, the larger the fraction of roads at a lower IRI, and the higher quality the road network.</p><p><span>For most of the international sources, the data is for the national or provincial highway network, major roads which (as far as I can tell) are roughly equivalent to the US National Highway System. The exception is the Irish regional road data, which I believe are a lower tier of road.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-3-151890432" target="_self" rel="">3</a></span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png" width="1456" height="1099" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1099,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3db68aee-b358-485c-94ba-3476e7585040_1600x1208.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>We see that US interstates compare very well; as good or better than the national road networks in every other country for which there’s data. US non-interstates do less well: about 90% of Dutch national roads are “good” by US standards, for instance, whereas only around 40% of US non-interstates are. Nevertheless, the US doesn’t seem to be a huge outlier: its roads seem to be roughly as good as British national roads, for instance. I’m also assuming that the US data includes a lot of lower-importance/quality roads beyond the national system that drag its average down. My guess is that if you restricted US data to just the National Highway System roads, average quality would jump significantly.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-4-151890432" target="_self" rel="">4</a></span></p><p><span>On the other hand, while Ireland has reasonably good motorways (interstate equivalents) and “engineered pavements” (whatever that means), it appears to have poor regional and legacy roads, to the point where I’d be sure there was an error in the data if I hadn’t already heard that Ireland has unusually poor roads.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-5-151890432" target="_self" rel="">5</a></span></p><p><span>Unfortunately, this doesn’t include data from many countries we might be interested in, like the Nordics, Germany, France, or Spain (anecdotally, I’ve heard that Spain has exceptionally good roads). And it's only measuring a very small portion of each country’s road network: the Netherlands data, for instance, is based on about 7,000 kilometers of national highway network, a tiny fraction of the </span><a href="https://en.wikipedia.org/wiki/Roads_in_the_Netherlands" rel="">139,000 kilometers</a><span> of roads in the country.&nbsp;</span></p><p><span>Is there anything else we can look at that might prove illuminating? One thing we can do is compare the quality standards of different countries: how smooth does a road have to be to meet different quality thresholds? </span><a href="https://www.tandfonline.com/doi/abs/10.1080/14680629.2016.1197144" rel="">This 2016 paper compares International Roughness Index specifications around the world</a><span>. </span><a href="https://open.alberta.ca/dataset/1bd6fde8-b313-4183-a3a4-602acc87ff59/resource/7d22a447-8e0f-41e2-ba6f-b91a7afd95cc/download/6351771-2000-international-roughness-index-uses-comparison-iri-other-jurisdictions.pdf" rel="">This report from 2000</a><span> gives a few more, though unfortunately they’re quite old. Most countries have five different quality levels. For ease of comparison, we’ll use the same “very good," “good," “acceptable," “poor," and “very poor” descriptors that we used for US roads. We can compare these to quality thresholds in the US.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-6-151890432" href="https://www.construction-physics.com/p/how-good-are-american-roads#footnote-6-151890432" target="_self" rel="">6</a></span><span>&nbsp;</span></p><p>Looking at this, we see that the US generally has fairly strict quality standards compared to other countries. The US for instance, has a higher threshold for what counts as “good” than any other country listed, and only Holland has a higher bar for what counts as “very good.”</p><p><span>There’s also slivers of information that can be found elsewhere. </span><a href="https://www.europarl.europa.eu/RegData/etudes/STUD/2014/529059/IPOL_STU(2014)529059_EN.pdf" rel="">This 2014 EU report</a><span> states that as of 2011, on average both national and local roads in Spain were “deficient” (though it doesn’t give an IRI rating). </span><a href="https://www.concreteconstruction.net/how-to/construction/u-s-tour-of-european-concrete-highways_o" rel="">This article from 1992</a><span> discusses several US road experts and government representatives touring France, Austria, Germany, the Netherlands, and Belgium to examine their roadways. They found that European roads were much higher quality, noting that “the serious deterioration that exists on US highways and streets was virtually never seen in Europe,” likely because damage was repaired much sooner. It’s of course hard to weigh a report from more than 30 years ago too heavily, but the 2023 UK report mentioned above also notes that Dutch highways, which were of higher quality than UK highways, were resurfaced much more frequently. (I tried to find data on road maintenance schedules for various countries and came up short.)</span></p><p><a href="https://time.com/archive/6720166/why-america-has-so-many-potholes/" rel="">A Time article from 2001</a><span> claims that European roads are superior to US ones because, in addition to more frequent maintenance, European countries build roads more durably:</span></p><blockquote><p><em>European highways actually carry more traffic and considerably heavier truck weights than US roads, yet they are smoother and far sturdier. European highways are designed by their builders to last 40 years; the projected life of American roads is half as long.</em></p></blockquote><p><span>As far as I can tell, the most common way to build a road more durably is to use concrete construction. Most roads in the US are built using one or more layers of asphalt concrete (a mixture of aggregate and </span><a href="https://en.wikipedia.org/wiki/Bitumen" rel="">bitumen</a><span> as a binder) over a layer of coarse aggregate like gravel. But you can also make pavement out of conventional Portland cement concrete, complete with steel reinforcing. Concrete pavement will generally have a longer lifespan than asphalt pavement, at the expense of </span><a href="https://www.eupave.eu/wp-content/uploads/BP64-Guide-to-Concrete-Road-Pavements-BRITPAVE.pdf" rel="">greater upfront cost</a><span>:</span></p><blockquote><p><em>The maximum service life of an asphalt service course is 20 years…compared with 30 to 50 years for concrete road surfaces. Indeed, subject to cost parameters a concrete road can be designed for however long it is required.</em></p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png" width="618" height="219.65060240963857" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:413,&quot;width&quot;:1162,&quot;resizeWidth&quot;:618,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4efb383e-abc4-4814-9824-7293efca91cb_1162x413.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><span>Cross section of a continuously reinforced concrete pavement, via </span><a href="https://www.fhwa.dot.gov/pavement/concrete/pubs/hif16026.pdf" rel="">FHWA</a><span>.</span></figcaption></figure></div><p><a href="https://www.fhwa.dot.gov/policyinformation/statistics/2020/hm12.cfm" rel="">Most US roads</a><span> are indeed made of asphalt rather than concrete, but so are most European roads, it seems. </span><a href="https://www.tno.nl/en/sustainable/infrastructure/asphalt/" rel="">80% of Dutch roads</a><span> are made of multi-layered asphalt pavements, </span><a href="https://iea.blob.core.windows.net/assets/imports/events/202/TransportMat_Session3_Matschei_08032018.pdf" rel="">this presentation</a><span> on the German highway network states that only 30% of Germany highways are made of concrete, and </span><a href="https://horizoneuropencpportal.eu/sites/default/files/2024-06/eapa-recommendations-for-road-authorities-to-optimise-paving-sustainability-health-safety-and-quality-through-the-use-of-warm-mix-asphalt-2024.pdf" rel="">this report</a><span> claims that more than 90% of European roads are surfaced with asphalt (though this is made somewhat more complicated by the fact that you can have a concrete road with a thin asphalt surface).</span></p><p><span>It’s also possible that European roads use the same basic construction methods, but are built more robustly. In 1993, the Michigan DOT </span><a href="https://www.bridgemi.com/business-watch/why-are-germanys-roads-better-or-are-they" rel="">experimented</a><span> by rebuilding a concrete road using two methods: one section was built using its standard construction methods, and another was built using more robust German specifications. The German section had two layers of concrete instead of one, a gravel base course instead of sand, and tighter joint spacing. However, after 20 years of service, the German section was actually performing slightly worse than the one built to Michigan standards, despite costing twice as much to build.</span></p><p>To sum up, US interstates seem high quality, and as good as comparable roads in Europe. Non-interstates are lower quality, particularly within major urban areas, but a lack of data makes it hard to do much international comparison. The limited data we have suggests that US roads are perhaps not a huge outlier in quality. It also seems likely that many European roads are maintained better than US roads and resurfaced more frequently, and that European roads are designed more robustly (though perhaps not in a way that results in better service life).</p><p>Overall, my main takeaway is that roads in major US cities are often shockingly bad, particularly in California, and that much more data is needed on road quality in other countries. If you know of good international road quality datasets (ideally IRI), please let me know!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GNU Artanis 1.0.0 Released (133 pts)]]></title>
            <link>https://artanis.dev/blog/1.0.0-release.html</link>
            <guid>42194315</guid>
            <pubDate>Wed, 20 Nov 2024 14:44:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://artanis.dev/blog/1.0.0-release.html">https://artanis.dev/blog/1.0.0-release.html</a>, See on <a href="https://news.ycombinator.com/item?id=42194315">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="text-org29e9361">
<p>
GNU Artanis was born in 2013, and it's a web application framework written in Guile Scheme. It's designed to be simple and easy to use, and it's suitable for small to medium web applications. It's licensed under GPLv3+ and LGPLv3.
</p>

<p>
In the beginning, Artanis was largely inspired by Ruby on Rails to generate the scaffold code as possible. And the URL remapping API was inspired by Sinatra, another web framework of Ruby. That's why it's named "Artanis", since it's the revserse of "Sinatra".
</p>

<p>
But as time goes by, Artanis has its own features and design.
</p>

<p>
The first convention of Artanis is "Scheme only", we don't intend to write C code for extension as possible, unless it's really necessary. So far, we still don't have any C code in Artanis. The contributors may provide extension in C, but the Artanis core is still pure Scheme. That's because GNU Guile provides great features to interact with C libraries, which is the original reason why Guile exists.
</p>

<p>
The default server core of Artanis is named "Ragnarok", which is high performance asynchronous non-blocking server design based on co-routine. Notably, the co-routine is implemented in pure Scheme feature called Delimited Continuation.
</p>

<p>
GNU Artanis is both the official project of GNU operating system, and <a href="https://hardenedlinux.org/">HardenedLinux community</a>.
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What is the origin of the lake tank image that has become a meme? (2021) (530 pts)]]></title>
            <link>https://history.stackexchange.com/questions/57033/what-is-the-origin-of-the-lake-tank-image-that-has-become-a-meme</link>
            <guid>42193771</guid>
            <pubDate>Wed, 20 Nov 2024 13:30:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://history.stackexchange.com/questions/57033/what-is-the-origin-of-the-lake-tank-image-that-has-become-a-meme">https://history.stackexchange.com/questions/57033/what-is-the-origin-of-the-lake-tank-image-that-has-become-a-meme</a>, See on <a href="https://news.ycombinator.com/item?id=42193771">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="text">
<p><em><strong>It's a Panzer IVD of the 31st Panzer Regiment assigned to the 5th Panzer Div. commanded by Lt. Heinz Zobel lost on May 13th, 1940. The "lake" is the Meuse River. The man is a German pioneer.</strong></em></p>
<p><a href="https://i.sstatic.net/D5iQh.png" rel="noreferrer"><img src="https://i.sstatic.net/D5iQh.png" alt="enter image description here"></a></p>
<p>All credit to finding the Panzer of the Lake goes to <a href="https://www.youtube.com/watch?v=RO58B6LcTfM&amp;list=WL&amp;index=24" rel="noreferrer">ConeOfArc for coordinating the search</a>, and miller786 and their team for finding the Panzer. Full sources and details are in <a href="https://docs.google.com/document/d/14L7qfAXdZ3ekIKKCCneXc5PK3NxJrdhOxBi3Jyrd5Eo/edit#" rel="noreferrer">Panzer Of The Lake - Meuse River Theory</a></p>
<h2>The Panzer and the "Lake"</h2>
<p>The photo was taken about <a href="https://goo.gl/maps/BNsJQnmFcXTUYxju9" rel="noreferrer">coordinates 50.29092467073664, 4.893099128823844</a> near modern Wallonia, Belgium on the Meuse River. The tank was not recovered until much later in 1941. The man is an unnamed German pioneer likely at the time of recovery.</p>
<p><a href="https://i.sstatic.net/HQD9v.png" rel="noreferrer"><img src="https://i.sstatic.net/HQD9v.png" alt="enter image description here"></a></p>
<p><em>Comparison of an alternative original photo and the most recent image available of the location (July 2020, Google Street View)</em></p>
<p><a href="https://i.sstatic.net/dA3g6.png" rel="noreferrer"><img src="https://i.sstatic.net/dA3g6.png" alt="enter image description here"></a></p>
<p>On May 12th, 1940 the 31st Panzer Regiment, assigned to the 5th Panzer Division, attempted to capture a bridge over the Meuse River at Yvoir. The bridge was demolished by 1st Lieutenant De Wispelaere of the Belgian Engineers.</p>
<blockquote>
<p>Werner Advance Detachment (under Oberst Paul Hermann Werner, commander, 31st Panzer Regiment), which belonged to the 5th Panzer Division, under Rommel’s command... Werner received a message from close support air reconnaissance in the afternoon that the bridge at Yvoir (seven kilometers north of Dinant) was still intact. He (Werner) immediately ordered Leutnant [Heinz] Zobel’s armored assault team of two armored scout cars and one Panzer platoon to head to the bridge at top speed... Belgian engineers under the command of 1st Lieutenant de Wispelaere had prepared the bridge for demolition while a platoon of Ardennes Light Infantry and elements of a French infantry battalion screened the bridge... Although the last soldiers had already passed the bridge, de Wispelaere delayed the demolition because civilian refugees were still approaching... two German armored scout cars charged toward the bridge while the following three Panzers opened fire. De Wispelaere immediately pushed the electrical ignition, but there was no explosion... Wispelaere now left his shelter and worked the manual ignition device. Trying to get back to his bunker, he was hit by a burst from a German machine gun and fell to the ground, mortally wounded. At the same time, the explosive charge went off. After the gigantic smoke cloud had drifted away, only the remnants of the pillars could be seen.</p>
</blockquote>
<p><a href="https://i.sstatic.net/dMmU6.png" rel="noreferrer"><img src="https://i.sstatic.net/dMmU6.png" alt="enter image description here"></a></p>
<p>A few kilometers south at Houx, the Germans used a portion of a pontoon bridge (Bruckengerat B) rated to carry 16 tons to ferry their 25 ton tanks across.</p>
<blockquote>
<p>By noon on May 13, Pioniere completed an eight-ton ferry and crossed twenty anti-tank guns to the west bank, however to maintain the tempo of his divisions advance, he needed armor and motorized units across the river. Rommel personally ordered the ferry converted to a heavier sixteen-ton variant to facilitate the crossing of the light Panzers and armored cars. Simultaneously, the Pioniere began construction on a bridge capable of crossing the division’s heavier Panzers and motorized units.</p>
</blockquote>
<p><em>Major Erich Schnee in “The German Pionier: Case Study of the Combat Engineer’s Employment During Sustained Ground Combat”</em></p>
<p><a href="https://i.sstatic.net/LdmBC.jpg" rel="noreferrer"><img src="https://i.sstatic.net/LdmBC.jpg" alt="enter image description here"></a></p>
<p>On the evening of the 13th, Lt. Zobel's tank is crossing. Approaching the shore, the ferry lifts, the load shifts, and the tank falls into the river.</p>
<p><a href="https://i.sstatic.net/f7YbE.png" rel="noreferrer"><img src="https://i.sstatic.net/f7YbE.png" alt="enter image description here"></a></p>
<blockquote>
<p>The panzer IV of Lieutenant Zabel [sic] of the 31. Panzer Regiment of the 5. Panzer-Division, on May 13, 1940, in Houx, as good as underwater except for the vehicle commander’s cupola. Close to the west bank, at the pontoon crossing site and later site of 5. Panzer Division bridge, a 16 tonne ferry (Bruckengerat B) gave way to the approaching shoreline, likely due to the rotating movement of the panzer, which turned right when disembarking (the only possible direction to quickly leave the Meuse’s shore due to the wall created by the rail line). The tank would be fished out in 1941 during the reconstruction of the bridge.</p>
</blockquote>
<p><a href="https://i.sstatic.net/UagYm.png" rel="noreferrer"><img src="https://i.sstatic.net/UagYm.png" alt="enter image description here"></a></p>
<h2>The Man</h2>
<p>Sometime later the photograph was taken of a German pioneer infantryman looking at the tank. Later the tank was recovered and its ultimate fate is unknown.</p>
<blockquote>
<p>Available evidence suggests the soldier in the photo is a Pioneer/Tank recovery crew, holding a Kar98k and wearing an EM/NCO'S Drill &amp; Work uniform, more commonly known as “Drillich”.</p>
<p>His role is proven by the presence of pontoon ferries on the Meuse river, used by the 5th Panzer Division. That is also proven by his uniform, which, as evidence suggests, was used during work to prevent damage to their standard woolen uniform.</p>
</blockquote>
<p><a href="https://i.sstatic.net/PEzl0.png" rel="noreferrer"><img src="https://i.sstatic.net/PEzl0.png" alt="enter image description here"></a></p>
<p><em>German pioneers prepare Panzer IIs for ferry crossing</em></p>
<p><a href="https://i.sstatic.net/lud8R.png" rel="noreferrer"><img src="https://i.sstatic.net/lud8R.png" alt="enter image description here"></a></p>
<p><em>An early version of the Drillich</em></p>
<hr>
<h2>My own speculation and research prior to the discovery.</h2>
<p>While I can't identify the photo, I can narrow down the tank. I believe it is a Panzer IV D.</p>
<p>It has the <a href="https://en.wikipedia.org/wiki/7.5_cm_KwK_37" rel="noreferrer">short barrelled 7.5 cm KwK 37</a> narrowing it down to a Panzer IV Ausf. A through F1 or a <a href="https://www.worldwarphotos.info/gallery/germany/tanks-2-3/panzer3n/" rel="noreferrer">Panzer III N</a>.</p>
<p>Both had very similar turrets, but the Panzer III N has a wider gun mantlet, a more angular shroud, and lacked (or covered) the distinctive angular view ports (I believe they're view ports) on either side of the turret face.</p>
<p><a href="https://i.sstatic.net/gt6vR.jpg" rel="noreferrer"><img src="https://i.sstatic.net/gt6vR.jpg" alt="Panzer III N in Italy 1944"></a></p>
<p><em>Panzer III N in Italy 1944</em>. <a href="https://www.worldwarphotos.info/gallery/germany/tanks-2-3/panzer3n/panzer-iii-ausf-n-italy-1944/" rel="noreferrer">source</a></p>
<p>This leaves the Panzer IV. The distinctive cupola was added in model B. The external gun mantlet was added in model D.</p>
<p><a href="https://i.sstatic.net/BOimo.jpg" rel="noreferrer"><img src="https://i.sstatic.net/BOimo.jpg" alt="Panzer IV model C"></a></p>
<p><em>Panzer IV model C lacking the external gun mantlet</em>. <a href="https://www.worldwarphotos.info/gallery/germany/tanks-2-3/panzer-iv/panzer-iv-65pzrg-2/" rel="noreferrer">source</a>.</p>
<p><a href="https://i.sstatic.net/tiIK4.jpg" rel="noreferrer"><img src="https://i.sstatic.net/tiIK4.jpg" alt="Panzer IV model D in France 1940"></a></p>
<p><em>Panzer IV model D in France 1940 with the external gun mantlet and periscope</em>. <a href="https://www.worldwarphotos.info/wp-content/gallery/germany/tanks/panzer-iv/Frankreich_Panzer_IV.jpg" rel="noreferrer">source</a></p>
<p><a href="https://i.sstatic.net/zmbVR.jpg" rel="noreferrer"><img src="https://i.sstatic.net/zmbVR.jpg" alt="Panzer IV D drawings"></a></p>
<p>Note the front half of the turret top is smooth. There is a protrusion to the front left of the cupola (I believe it's a periscope sight) and another circular opening to the front right. Finally, note the large ventilation hatch just in front of the cupola.</p>
<p>Model E would eliminate the ventilation hatch and replace it with a fan. The periscope was replaced with a hatch for signal flags.</p>
<p><a href="https://i.sstatic.net/MycMf.jpg" rel="noreferrer"><img src="https://i.sstatic.net/MycMf.jpg" alt="Panzer IV model E"></a></p>
<p><em>Panzer IV model E lacking the periscope and ventilation hatch</em>. <a href="https://www.worldwarphotos.info/gallery/germany/tanks-2-3/panzer-iv/panzer-iv-31-2/" rel="noreferrer">source</a>.</p>
<p>Panzer IV model D entered mass production in October 1939 which means it would be too late for Poland, but could have seen service in France, Norway, or the Soviet Union.</p>
<hr>
<p>As for the soldier...</p>
<p>The rifle has a turned down bolt handle, a bayonet lug (missing from late rifles), a distinctive disassembly disc on the side of the stock (also missing from late rifles), no front site hood (indicative of an early rifle), and you can just about make out extra detail in the nose cap (also early). This is likely an early <a href="https://en.wikipedia.org/wiki/Karabiner_98k" rel="noreferrer">Karabiner 98k</a> which is missing its cleaning rod. See <a href="https://www.youtube.com/watch?v=knPDsJyCpjI" rel="noreferrer">Forgotten Weapons: Evolution of the Karabiner 98k, From Prewar to Kriegsmodell</a>.</p>
<hr>
<p><em><strong>UPDATE</strong></em></p>
<p><a href="https://www.youtube.com/channel/UC1_oUtCGIqUMbIyRPeJsSyw" rel="noreferrer">ConeOfArc</a> posted a video <a href="https://www.youtube.com/watch?v=HaRO_dTqO1E&amp;list=WL" rel="noreferrer"><em>The Search for Panzer of the Lake</em></a>.</p>
<p>He broke down what he could identify about the solder, probably German.</p>
<ul>
<li>German winter style lower.</li>
<li>German wool tunic.</li>
<li>M34 Army Standard cap.</li>
<li>Kar98 rifle missing the cleaning rod.</li>
</ul>
<p>For the tank he confirms it's a Panzer IV D using similar criteria I used and he found <a href="https://i.sstatic.net/cmPAz.jpg" rel="noreferrer">two additional photos of what appear to be the same tank</a> claiming to be from the Western front in 1940.</p>
<p><a href="https://i.sstatic.net/43hSO.jpg" rel="noreferrer"><img src="https://i.sstatic.net/43hSO.jpg" alt="enter image description here"></a></p>
<p><a href="https://i.sstatic.net/Tcmqv.jpg" rel="noreferrer"><img src="https://i.sstatic.net/Tcmqv.jpg" alt="enter image description here"></a></p>
<p>He then found a <a href="https://hitriy-plan.livejournal.com/441311.html" rel="noreferrer">Russian source</a> claiming it was found in Romania at the onset of Barbarossa in 1941.</p>
<p>Unfortunately that's all for now. ConeOfArc has put a bounty of $100 US for definitive proof of the tank's location. More detail can be had on ConeOfArc's Discord.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bluesky is ushering in a pick-your-own algorithm era of social media (184 pts)]]></title>
            <link>https://www.newscientist.com/article/2456782-bluesky-is-ushering-in-a-pick-your-own-algorithm-era-of-social-media/</link>
            <guid>42193549</guid>
            <pubDate>Wed, 20 Nov 2024 12:59:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newscientist.com/article/2456782-bluesky-is-ushering-in-a-pick-your-own-algorithm-era-of-social-media/">https://www.newscientist.com/article/2456782-bluesky-is-ushering-in-a-pick-your-own-algorithm-era-of-social-media/</a>, See on <a href="https://news.ycombinator.com/item?id=42193549">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-barrier="None">
                    <figure><p><img width="1350" height="900" alt="" src="https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg" data-src="https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg" sizes="(min-width: 1288px) 837px, (min-width: 1024px) calc(57.5vw + 55px), (min-width: 415px) calc(100vw - 40px), calc(70vw + 74px)" srcset="https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=300 300w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=400 400w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=500 500w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=600 600w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=700 700w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=800 800w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=837 837w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=900 900w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1003 1003w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1100 1100w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1200 1200w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1300 1300w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1400 1400w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1500 1500w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1600 1600w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1674 1674w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1700 1700w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1800 1800w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=1900 1900w, https://images.newscientist.com/wp-content/uploads/2024/11/19095228/SEI_230062624.jpg?width=2006 2006w" loading="eager" fetchpriority="high" data-image-context="Article" data-image-id="2456783" data-caption="Bluesky sign-ups continue to grow" data-credit="Anna Barclay/Getty Images"></p><figcaption><div><p>Bluesky sign-ups continue to grow</p><p>Anna Barclay/Getty Images</p></div></figcaption></figure>
<p>As a technology reporter, I like to think I’m an early adopter. I<a href="https://www.newscientist.com/article/2372273-what-is-going-on-with-twitter-and-should-i-move-to-bluesky-instead/"> first signed up to the social network Bluesky around 18 months ago</a>, when the platform saw a small surge in users disaffected by Elon Musk’s approach to <a href="https://www.newscientist.com/article/2383886-why-is-twitter-becoming-x-and-should-you-move-to-threads-or-bluesky/">what was then still called Twitter</a>.</p>
<p>It didn’t stick. Like many, I found the lure of Twitter too strong, and let my Bluesky account wither, but in recent weeks I have returned – and I am not alone. With Musk continuing to transform his social platform, now called X, at the same time as taking a role in US president-elect Donald Trump’s upcoming government, the Xodus has begun. Bluesky has gained <a href="https://bsky.app/profile/rose.bsky.team/post/3lb6w3q3tsu2d">12 million users in two months</a>, and has just surpassed 20 million users. This time I intend on sticking around – and I think others will, too.</p>
    
<p>In large part, that’s because I want a social media experience without being bombarded by hate speech, gore and pornographic videos – all of which users of X have complained about in recent months. But I’m also big on Bluesky because I think it signals a shift in how social media works on a more fundamental level.</p>
<span></span><p>Social media algorithms – the computer code that decides what each user is shown – have long been a point of contentious debate. Fears of disappearing down “rabbit holes” of radicalisation, or being trapped in “<a href="https://www.newscientist.com/article/2128426-has-the-social-media-political-bubble-theory-just-been-popped/">echo chambers</a>” of consensual, sometimes conspiratorial, viewpoints, have dominated scientific literature.</p>
<p>The use of algorithms to filter information has become the norm because chronologically presenting information from followers creates a confusing morass for the average user to process. Sorting and filtering what is important – or likely to keep users engaged – has become key to the success of platforms like Facebook, X and Instagram.</p>
<p>But control of these algorithms also gives you a big say in what people read. One of the bugbears many users have with X is its “For you” algorithm, which under Musk has seen commentary by and about him seemingly shoved into users’ timelines, even if they don’t directly follow him.</p>
<p>Bluesky’s approach isn’t to ditch algorithms – instead, it has more than the average social network. In a <a href="https://bsky.social/about/blog/3-30-2023-algorithmic-choice">2023 blog post</a>, Jay Graber, Bluesky’s CEO, outlined the ethos of the platform. Bluesky promotes a “marketplace of algorithms”, she wrote, instead of a single “master algorithm”.</p>
    
<p>In practice, this means that users can see posts by people they follow on the app, the standard view Bluesky defaults to. But they can equally opt to see <a href="https://bsky.app/profile/did:plc:z72i7hdynmk6r22z27h6tvur/feed/with-friends">what’s popular with friends</a>, an algorithmically-dictated selection of posts that your peers enjoy. There are <a href="https://bsky.app/profile/did:plc:jfhpnnst6flqway4eaeqzj2a/feed/for-science">feeds specifically for scientists</a>, curated by those working in the field, or ones <a href="https://bsky.app/profile/did:plc:w4xbfzo7kqfes5zb7r6qv3rw/feed/blacksky">to promote Black voices</a>, which are often thinned out by algorithmic filtering. One feed even specifically <a href="https://bsky.app/profile/did:plc:vpkhqolt662uhesyj6nxm7ys/feed/infreq">promotes “quiet posters”</a> – users who post infrequently, and whose views would otherwise be drowned out by those who share every opinion with their followers.</p>
<p>This menu of options allows Bluesky to serve two purposes, bridging the past era of social media and the future one. The platform has the potential, once it reaches a critical mass of users, to act as the “de facto public town square”, as <a href="https://x.com/elonmusk/status/1507777261654605828?lang=en">Musk dubbed Twitter</a> before he purchased it. Bluesky arguably is the only remaining such square, given X has shifted to exclude many mainstream voices, and competitors like Threads choose to shy away from promoting politics and current affairs.</p>
<p>But Bluesky also allows you to tailor the app to your needs – not only through feeds, but other elements like starter packs of recommended users to quickly get involved in individual niches, or blocking tools to quieten unruly voices.</p>
<p>There are still hitches, undoubtedly. Finding the right feed for you can be tricky, while creating your own is even more complicated, requiring third-party tools. But the ability to get the full view of public conversation, then to drill down into smaller debates within clusters and communities of that broad swathe of society, is exciting. It’s a model of a new social media where users, not big companies or enigmatic individuals, are in charge of what they see. And if Bluesky continues to add users, it could become the norm. So come and join me – I’m <a href="https://bsky.app/profile/stokel.bsky.social">@stokel.bsky.social</a>.</p>
<p><em>Chris Stokel-Walker is a freelance technology journalist</em></p>

                    <section><p>Topics:</p></section>                </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How Google spent 15 years creating a culture of concealment (151 pts)]]></title>
            <link>https://www.nytimes.com/2024/11/20/technology/google-antitrust-employee-messages.html</link>
            <guid>42192972</guid>
            <pubDate>Wed, 20 Nov 2024 11:45:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/11/20/technology/google-antitrust-employee-messages.html">https://www.nytimes.com/2024/11/20/technology/google-antitrust-employee-messages.html</a>, See on <a href="https://news.ycombinator.com/item?id=42192972">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/11/20/technology/google-antitrust-employee-messages.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Why don't you move abroad? (184 pts)]]></title>
            <link>https://orkohunter.net/blog/why-dont-you-move-abroad/</link>
            <guid>42191805</guid>
            <pubDate>Wed, 20 Nov 2024 08:23:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://orkohunter.net/blog/why-dont-you-move-abroad/">https://orkohunter.net/blog/why-dont-you-move-abroad/</a>, See on <a href="https://news.ycombinator.com/item?id=42191805">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img src="https://orkohunter.net/blog/why-dont-you-move-abroad/header.png" alt=""></p>
<div>
<ul>
<li><a href="#the-iit-dream">The IIT Dream</a></li>
<li><a href="#college-and-open-source">College and Open Source</a></li>
<li><a href="#twitter--san-francisco">Twitter @ San Francisco</a></li>
<li><a href="#the-emotional-turmoil-in-san-francisco">The Emotional Turmoil in San Francisco</a></li>
<li><a href="#college-placements-and-first-job">College placements and first job</a></li>
<li><a href="#life-in-tokyo">Life in Tokyo</a></li>
<li><a href="#life-in-stockholm-and-covid">Life in Stockholm and Covid</a></li>
<li><a href="#you-know-you-can-come-back-right"><em>“You know you can come back right?”</em></a></li>
<li><a href="#back-home">Back home</a></li>
<li><a href="#so-why-dont-you-move-abroad-now">So, why don’t you move abroad now?</a></li>
<li><a href="#my-vision-for-india">My vision for India</a></li>
</ul>
</div>
<p>I just wrapped up a tech conference here this week in Salt Lake City. I was one of the speakers. It was a special moment for me. Strangely enough, the very first time I came to US, it was also as a speaker at a conference.</p>
<p><em>“Did you just say you are a speaker at this thing?”</em>, asked the US Visa officer, before stamping a B1/B2 on my Passport for ten years.</p>
<p>I was 18 back then. The confusion made sense.</p>
<p>A decade has gone by. I got married, switched multiple jobs, wrote a lot of code, lived in three different continents, spoke at many conferences and made a lot of friends for life. I am now back living in India.</p>
<p><em>“Dude, so when are you moving to the US?”,</em> I frequently get asked by friends, colleagues and my well-wishers.</p>
<p><em>“I’m not”.</em></p>
<p>My answer falls flat on most people. It’s as if, I’ve just said, <em>“I do not want more money and success.”</em></p>
<p>In this blog post I want to add more colors to my answer. Hope some of you relate with this, especially if you are someone like me considering your decision of moving abroad or moving back.</p>
<p>But first, let me take you back to my teens when life was much simpler and Physics was my most favorite thing in life.</p>
<h2 id="the-iit-dream"><a href="#the-iit-dream" aria-label="the iit dream permalink"></a>The IIT Dream</h2>
<p>Just like many Indians of my generation, I spent my childhood in a single bedroom rented house. Every evening, my brother and I would sit in front of an oil lamp and study, mostly maths and science. In the mornings, our <em>dada ji</em> would teach us English and Hindi grammar. It was a household where two things were most valued - Education and Love.</p>
<p>Education, because that seemed like the only way to escape generational poverty and not having to worry about, if there are enough candlesticks to last the week or not.</p>
<p>And, Love because <em>familia is everything</em>.</p>
<p>Millions of students in India prepare to get into IITs every year. With the proper amount of luck and improper amount of childhood sacrifices, I made it into IIT Kharagpur. And that changed everything.</p>
<p>During the admission to engineering colleges, more than two thirds of students want to study Computer Science. This is want increases the chances of landing a job and what everyone seems to be doing. In my hostel room in Kota where I studied for 2 years of IIT prep, I had a note stuck on my wall which listed all the opening and closing ranks of all Computer Science branches in the 7 major IITs. When I saw the results and my rank, it was nowhere close to those CS cutoff ranks and I teared up as if I had failed.</p>
<p>And just like that, 99.99% of Indian students start their education journey by the system telling them that they are not worth it and they don’t even get to decide what they study.</p>
<p>While I couldn’t get into the Computer Science department, I knew what I wanted to study. My father has been a software engineer since the 90s and my brother is an absolute rockstar with computers. We didn’t have cartoons in TV back in our childhood but had our hands on keyboard ever since I could possibly remember.</p>
<p>So, I was ready to join IIT and say <em>“Fuck you,”</em> to the education system, “<em>I’m going to be the best programmer the world has ever seen.”</em></p>
<h2 id="college-and-open-source"><a href="#college-and-open-source" aria-label="college and open source permalink"></a>College and Open Source</h2>
<p>I was nowhere close to being the best programmer. I failed to implement a linked list in C in my first year. It was not going well. However, at the same time, I created my first Python package <a href="https://github.com/morse-talk/morse-talk">morse-talk</a> and published on pypi.org. It was immediately used by a professor somewhere in Europe who forked it and made a lot of contributions.</p>
<p>My goal of being the “best programmer” shifted to "create value for others by writing code". That summer, only 4 students were selected in the <a href="https://en.wikipedia.org/wiki/Google_Summer_of_Code">Google Summer of Code</a> from my college. I was one of them, the only freshman. Two years of GSoC paid more than enough to cover my five years of college tuition fees. I found both value and meaning by doing Open Source.</p>
<p>Very quickly, people started referring me with my <a href="https://github.com/orkohunter">GitHub handle</a> OrkoHunter. I, among few of my good friends, established <a href="https://kossiitkgp.org/">Kharagpur Open Source Society</a> to spread the culture of Open Source in campus. Though secretly, it was to give hope to the students who were defeated by the education system and told <em>“You can’t study Computer Science, because you didn’t know Carbon has a radioactive isotope.”</em> In the first few years, we exclusively hired only non-CS students out of spite.</p>
<h2 id="twitter--san-francisco"><a href="#twitter--san-francisco" aria-label="twitter  san francisco permalink"></a>Twitter @ San Francisco</h2>
<p>I was having a blast with the altruism that came with organizing Open Source workshops for students, helping them write their first useful Python application and making their first Pull Request. In 2017, we organized our first ever Open Source conference in college. We had about a thousand attendees, two days of talks, tutorials and lots of fun. We had full flown AV setup, speakers and attendees coming from multiple cities. We had a large budget too. I was leading it, being one of the three co-chairs of the conference. We were living the dream!</p>
<p>One night during the summit, I received an email from a recruiter at Twitter - <em>“Hey Himanshu, We saw your GitHub profile. Would you like to join us for an internship at Twitter San Francisco office in the Open Source team?”</em>. I was so busy with the conference that I forgot to respond for 24 hours. She reached back - <em>“Himanshu, are you interested?”</em></p>
<p>Landing a foreign internship in college is one of those 0.1% things - it’s extremely rare. You need to practice a lot of leetcode, have excellent referrals and be a sports programmer ready to traverse a binary tree. I have never written a Binary Tree traversal in life.</p>
<p>My interviews were all around the projects I had open sourced by then. One being the most popular Python library for Graph Theory, the other being a package used to study X-ray data from black holes. I was working on much more important things. Learning how to traverse a Binary Tree for me was a waste of time - that’s how I saw it back then. I knew I will most likely never use it. Though I used to be maniacal about writing reusable code and ReactJS!</p>
<p>I applied for the J1 visa (short term work visa) and made my way to San Francisco. That summer in SF was probably the coldest summer I had ever. The internship paid extremely well and taught a lot of things about corporate Open Source. I worked upon setting up the <a href="https://opensource.twitter.dev/">opensource.twitter.dev</a> - something which still runs and publishes weekly reports of Twitter’s flagship open source projects. I’m pretty sure Elon Musk has seen the website.</p>
<p>Career-wise, it was the best thing that could have happened to me. My manager from Twitter moved to Spotify later on who told me about the Backstage Open Source project, which led me to Harness leading the product built on top of Backstage. As Steve Jobs once said, <em>“you will only be able to connect the dots looking backwards.”</em></p>
<h2 id="the-emotional-turmoil-in-san-francisco"><a href="#the-emotional-turmoil-in-san-francisco" aria-label="the emotional turmoil in san francisco permalink"></a>The Emotional Turmoil in San Francisco</h2>
<p>Despite the thrilling career advancements that summer, I often wept myself to sleep at nights. The timezone difference between India and US west coast is about 12 hours. Which means, when you wake up, your family and friends are about to go to bed. And when you come back from office, your family has just woken up. Couple of hours is all you get to connect with anyone back home.</p>
<p>Okay, here’s the thing, I had lived alone before. For the IIT prep, I was in Kota for 2 years locked in my room and studying, visited home only two times during Diwalis. My college was in a remote village and far from home as well. But I had never felt that lonely, being on the other side of the world than home.</p>
<p>I am also not an introvert when it comes to talking to strangers. I was leading two student groups in college and fortunately made a lot of friends. It was easy for me to approach seniors, batch mates and juniors in college to build relationships. However, making friends in US was a completely different ballgame.</p>
<p>Money and Status was on everyone’s mind. All they talked about was Visas, dating, getting paid more and playing a different kind of game that I wanted to play. Not many <em>truly</em> wanted to be a software engineer or cared about Software. While I found few who did and made a real attempt to know each other - the friendships I found in the US were very shallow. Back home, we called them acquaintances.</p>
<p>It all felt … like an unlivable place for commoners like me. Homelessness was at its peak. I am the guy, who likes to walk slow on the streets without a destination. But I was told on day one Twitter orientation to <em>“Walk fast”</em>. Drugged homeless people approached me, one guy tried to hit me while waiting to cross the street. I once went out to get some groceries and when making a turn, I saw a person holding a gun, hiding at the turn, waiting for someone. I had never seen a gun in my life till that point. It made me think - <em>“If I’m caught accidentally in a gun fight here, no amount of legal justice or candle marches would make my parents happy”.</em></p>
<p>Don’t get me wrong, I have a huge respect for San Francisco and the Bay Area. For me, it still is one of the most beautiful places on earth. Being an engineer as well as follower of Ram Dass and Timothy Leary, I thank the west for what it has given to world. One of the first Open Source license BSD, came from Berkley. The computer I am using to write this on, came from the valley. Silicon Valley is an absolutely historic place for a techie like me. I actually felt quiet emotional walking on the Haight-Ashbury street. The words “Turn On, Tune In and Drop out” echoed in my ears.</p>
<p>Despite the respect for the place and culture, I found myself struggling to become one with it. After spending 4 months there, I still had one year of college left. On my final day in US, I ate my last bagel sandwich in a cafe in Mission district and boarded my flight back to Kolkata. After 24 hours of flight and three hours of cab drive, I reached my hostel. One of my dear friends was waiting for me downstairs at 2AM. We hugged and I knew, I had arrived <em>home</em>.</p>
<h2 id="college-placements-and-first-job"><a href="#college-placements-and-first-job" aria-label="college placements and first job permalink"></a>College placements and first job</h2>
<p>Being an Indian student, it is almost impossible to get your first job in the US. Very rarely companies take the chance of picking you to go through H1B lottery, employers go for a safer choice. My manager at Twitter tried to get me a job, but after months of struggle, he gave up, and I had no job offer.</p>
<p>All IITs and most colleges have a “placement season” where companies fly in on campus and hire as many students as they can within a short period of time. It’s a flea market. Thousands of students show up in collared white shirts, blue pants and polished black shoes with resumes in their hands. Day 1 placement makes you a rockstar among your friends. If you are not placed by Day 10, you are essentially a loser.</p>
<p>Students get no choice of where they want to work at. If you pass their series of coding tests, panel discussions and what not - you are given one offer (if you are blessed then maybe 2-3 offers) and have to make the decision in an hour. No negotiation on what you will be doing, at what location or at what compensation.</p>
<p>The rebel in me found the system to be dehumanizing, especially for the Top 1% students of the country. As a result, I told myself that I will find a job elsewhere where I will have some idea on what I’ll be working upon and with whom. I did not sign up for campus placements.</p>
<p>A friend of mine connected me with an employer in Tokyo. The product was Mercari US and the team was pretty diverse. It paid well and many of my friends were already going to Tokyo that year. I interviewed with the CTO, VP of Product and Engineering and my Engineering Manager, and I was in! Again, without traversing a binary tree. The job paid extremely well for a new grad like me. I was set to join them after I graduate. As they say, <em>when it rains, it pours</em>.</p>
<h2 id="life-in-tokyo"><a href="#life-in-tokyo" aria-label="life in tokyo permalink"></a>Life in Tokyo</h2>
<p>I was very excited to go to Japan. I found the country to be extremely calm and connected with the roots of human consciousness. It was people, people were hardworking but respectful of each other. Great customer service, free of crime and welcoming. Everyone was somehow aware. Everyone respected elderly and valued wisdom.</p>
<p>Japan and India only has a timezone difference of about 4 hours. There was plenty of time in the day for me to connect back to family and friends. I made friends there as well, actually a lot of them. I was sharing my apartment with a very good friend of mine from college. Life was amazing!</p>
<p>Work was great too. I distinctly remember my manager saying - <em>“You don’t seem like a fresher”</em>. All because I have been writing real code for 5 years at that point and not traversing binary trees. I knew what a 12 factor app was and how to write effective Database queries that scales up to tens of thousands of daily active users.</p>
<p>One fine day, I was talking to my ex-manager back from Twitter, who had just moved to Spotify. He told me about <a href="https://github.com/backstage/backstage">Backstage Open Source</a>. It was released just a few days ago, on March 14, 2020. I have always dreamt about writing Open Source software while getting paid for it. He said, <em>“Himanshu, just so you know, I would love to work with you again in a heartbeat, if I could.”</em></p>
<p>Over the weekend, I got two pull requests merged in the project. It had 50 GitHub stars back then and a few contributors. It is currently at about 30K stars with 1500+ contributors. Interviews happened with Spotify and I knew every single one of my interviewers. In one of those, we forgot to introduce ourselves as we have been talking back and forth on Discord on the same day. I made my way in. Spotify flew me Premium Economy to Stockholm, the land of Opeth and Zlatan Ibrahimovic. That’s all I knew about Sweden.</p>
<h2 id="life-in-stockholm-and-covid"><a href="#life-in-stockholm-and-covid" aria-label="life in stockholm and covid permalink"></a>Life in Stockholm and Covid</h2>
<p>My first summer in Stockholm was my best summer ever. The bar was already high by that point, but I absolutely enjoyed biking every weekend to play football, walking around the rivers, parks and nearby jungles. Stockholm is an interesting landscape, within 5 mins you can reach downtown, a river, a historic place or a cave - it’s all nearby, everything is.</p>
<p>Europe values work-life balance like no one else. I still believe if anyone wants to have fun in life and doesn't want to work too hard, get a job in Europe.</p>
<p>But back then, Covid was at its peak. It didn’t affect my life in Sweden who was one of the few countries to not implement ban on anything. However, I didn’t get to see enough of Europe or attended enough concerts as I had hoped for. I only got to travel in my last year, and it was already too late - the dark winters in Stockholm had taken a hit on me.</p>
<p>Two and half years passed by. I experienced the peak of my career. Got to be known as “The Backstage Guy” in the Open Source community. I saw the team grew from 10 to 50 and onboarded many engineers, many of them were far more skilled and experienced than me. I had learned a lot at Spotify and is one of the best companies to be working for as an engineer.</p>
<p>The timezone difference was not that different either. Again 4 hours and I was able to connect with my family and friends. I found some good friends back there as well. However, during that time, my grandmother passed away. This was the first time I had experienced death in my family. Someone I knew was no more in this world. I was not able to go back in time and mourn with family. Though I was not extremely attached to my grandma, it made me think - <em>what if I had lost someone else, someone far closer to me?</em> It was also the time when I became a lot closer to my lovely childhood friend, who is now my wife. After many years, it made no sense to me to live far from her.</p>
<p>In all the European and work life glory, something was not working out.</p>
<h2 id="you-know-you-can-come-back-right"><a href="#you-know-you-can-come-back-right" aria-label="you know you can come back right permalink"></a><em>“You know you can come back right?”</em></h2>
<p>One fine day, I was sitting in my living room. I had gained about 25 KGs of additional weight in the past year. It was three in the afternoon and the sun had already set. I was on a video call with my dad. We were talking about a few things, one of them being Russia’s invasion on Ukraine. He was quiet worried about the situations in Europe. I said Sweden had no bone in this fight so don’t worry about it. But then after the conversation, he was about to hang up, as mom had called for the evening tea. Just then, something hit me and I froze. <em>I was alone in this apartment, middle of nowhere. Why was I not there with them, having that cup of tea?</em></p>
<p>I broke. Tears streamed down my face and I had no words. What could I have said? That I am an incapable, grown man who can’t even live on his own? Someone who can’t move on from family? At that moment, I just wanted to hug my father, but I couldn’t.</p>
<p>He kept asking - <em>What happened? Why are you crying? Are you not well?</em></p>
<p>Silence. I had no words to explain what I was feeling. It was definitely the <em>Chai</em>, now that I think about it. Us Indians, huh.</p>
<p>After few minutes, he said something that unlocked a door in my perception that I had never opened. He said, <em>“You know you can always come back right? No one is forcing you to live there. You can have an amazing life back in India too.”</em></p>
<p>To be honest, I didn’t know this. I really did not know this! All I knew, was that you are supposed to move abroad when you grow up. Moving abroad is synonymous with being successful, filling up your bank account. It takes your career to the moon and gives you the highest level of status possible among your peers. I thought that was the only, most respectful way.</p>
<p>The very next day, I wrote an email to my General Manager that I am moving to India. Spotify didn’t permit engineers to work from India, so I knew this was not going to work out. But at that moment, I just wanted to go back home and hug my father - and no job or salary was going to stop me from doing that.</p>
<p>Fortunately, Spotify valued the work I was doing with Backstage and exceptionally permitted me to work from India. I was their first R&amp;D hire here.</p>
<h2 id="back-home"><a href="#back-home" aria-label="back home permalink"></a>Back home</h2>
<p>Once I had made the decision to move, I decided to update my friends about it. I put up a WhatsApp status and also made a post on LinkedIn. <a href="https://www.linkedin.com/feed/update/urn:li:activity:6944645250938241024/">My post went viral</a> with 5 million views, 28,000 reactions and 900 comments.</p>
<p>My decision to move back was shocking to many. Many of my friends who lived abroad related to the challenges of loneliness and cultural shock with me. It was also post-Covid era, where many realized remote work is possible and being in the same location all the time is not needed. Startups were blooming, many of them hiring engineering exclusively in India. There was a mass reverse-brain drain happening in that moment, it still is happening, and I am very excited about it!</p>
<p>I moved back home, starting living in Mumbai with my wife and family. I now get to spend time with my parents without having to plan my days and think about my international travels. Back then, any travel would be 2-4 weeks and there was no room to catchup with an old friend in a different city. I had missed so many reunions, marriages and family events. I now attend them all.</p>
<p>My mental health has now fully recovered. My physical health is coming along, long way to go still.</p>
<p>I work remotely at Harness as a Product Manager, the best job I could be doing right now. I fly to Bangalore every quarter to meet my team in person and spend a lot of time with my colleagues in the US over Zoom. I like working late, my most productive hours are 6-10PM. In childhood, this was the time after school where I would sit to study without any distractions. In college, this was the time after classes for club meetups, project discussions or just writing code. Even at work, my most important meetings happen in the evening. Some see it as a cost of living in India, for me this works just fine. Maybe things will change after having kids.</p>
<h2 id="so-why-dont-you-move-abroad-now"><a href="#so-why-dont-you-move-abroad-now" aria-label="so why dont you move abroad now permalink"></a>So, why don’t you move abroad now?</h2>
<p>I think people should live where they are the happiest. Happiness sparks creativity and is responsible for overall success. Yes, moving to US increases my chances of professional career success, I’ll get to be in proximity with people who have ideas and money to make the ideas come alive. But for me, it comes with significant emotional damage. For some people out there, this is a sacrifice worth making. This was a lot true 20 years ago. The internet age has changed everything. It is now possible to balance career, wealth and happiness while living in India as a techie.</p>
<p><em>“Why don’t you move to the US with your wife? You’ll have family and friends around.”</em></p>
<p>Let me put it in a way which doesn’t offend people - very few of my friends in the US are my real friends. My best friends in US are all planning to move back. My other friends are stuck in the whirlwind of H1Bs and Green Card applications and coping up with their emotional challenges. I wish the best for all of them, but I do not enjoy that lifestyle - it reeks of captivity and not freedom.</p>
<p><em>“If you plan to start your own company, shouldn’t you move out of India?”</em></p>
<p>Yes I do intend to create a company in the future. And yes, most likely the customers are going to be in the west. However, I have seen enough companies with India based founders that I have full confidence I do not have to move personally to make the company successful. I’ll travel frequently and stay up late - which I already do in some sense. We live in a global internet-enabled world.</p>
<p>It’s also not that easy. Visas make it extremely hard for Indians to start a company in the US. The whole process makes me want to puke. The Government and popular opinion seems to be heading in an opposite direction. The dehumanizing experience is similar to my take on campus placements in college above.</p>
<p><em>“Why don’t you move temporarily for a few years?”</em></p>
<p>Maybe for 3 months, yes. Moving for 2 years is a slippery slope of accepting the emotional damage which I will cause to myself and my wife. The drug called monthly salary will keep adding band-aids to the damage and it will again be too late before I realize the repercussions.</p>
<p><em>“If you don’t move, it will affect your career.”</em></p>
<p>For me, success is both the professional success and emotional wellbeing. I am willing to sacrifice some of my professional success for the other. We all have one life.</p>
<h2 id="my-vision-for-india"><a href="#my-vision-for-india" aria-label="my vision for india permalink"></a>My vision for India</h2>
<p>As Richard Feynman says - <em>you are not nameless to yourself, your family and the surrounding ones.</em> When I was 17 in college, my first meaning of life came from doing Open Source and helping others realize that they have much more in them - much more than what the system and society says about them. I uplifted many and showed alternate ways to do well in life. At least, for a few dozen people. A path which did not include Grades and meaningless competitive code grinding.</p>
<p>I think 21st century is a fantastic time to be in a developing nation like India, especially among the tech-enabled hard-working Indians that I know of. I have a lot of hope for my generation. I plan to write more on this in a separate post, when I find time.</p>
<p>Hope you enjoyed reading through this. If at any point, I have hurt your sentiments, I would like to apologize. This is me expressing my own personal views on this very controversial and emotional topic. I still advise people to choose what’s best for them, moving abroad is a great option for many who do not carry emotional baggage like me. We all have one life, and we all should do what’s best for us and our loved ones. Peace.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Foursquare Open Source Places: A new foundational dataset (148 pts)]]></title>
            <link>https://simonwillison.net/2024/Nov/20/foursquare-open-source-places/</link>
            <guid>42191781</guid>
            <pubDate>Wed, 20 Nov 2024 08:19:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2024/Nov/20/foursquare-open-source-places/">https://simonwillison.net/2024/Nov/20/foursquare-open-source-places/</a>, See on <a href="https://news.ycombinator.com/item?id=42191781">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>



<p><strong><a href="https://location.foursquare.com/resources/blog/products/foursquare-open-source-places-a-new-foundational-dataset-for-the-geospatial-community/">Foursquare Open Source Places: A new foundational dataset for the geospatial community</a></strong> (<a href="https://waxy.org/2024/11/foursquare-open-sources-its-places-database/" title="Andy Baio">via</a>) I did not expect this!</p>
<blockquote>
<p>[...] we are announcing today the general availability of a foundational open data set, Foursquare Open Source Places ("FSQ OS Places"). This base layer of 100mm+ global places of interest ("POI") includes 22 core attributes (see schema <a href="https://docs.foursquare.com/data-products/docs/places-os-data-schema">here</a>) that will be updated monthly and available for commercial use under the Apache 2.0 license framework.</p>
</blockquote>
<p>The data is available <a href="https://docs.foursquare.com/data-products/docs/access-fsq-os-places">as Parquet files</a> hosted on Amazon S3.</p>
<p>Here's how to list the available files:</p>
<pre><code>aws s3 ls s3://fsq-os-places-us-east-1/release/dt=2024-11-19/places/parquet/
</code></pre>
<p>I got back <code>places-00000.snappy.parquet</code> through <code>places-00024.snappy.parquet</code>, each file around 455MB for a total of 10.6GB of data.</p>
<p>I ran <code>duckdb</code> and then used DuckDB's ability to remotely query Parquet on S3 to explore the data a bit more without downloading it to my laptop first:</p>
<pre><code>select count(*) from 's3://fsq-os-places-us-east-1/release/dt=2024-11-19/places/parquet/places-00000.snappy.parquet';
</code></pre>
<p>This got back 4,180,424 - that number is similar for each file, suggesting around 104,000,000 records total.</p>
<p>The I ran this query to retrieve 1,000 places from that first file as newline-delimited JSON:</p>
<pre><code>copy (
    select * from 's3://fsq-os-places-us-east-1/release/dt=2024-11-19/places/parquet/places-00000.snappy.parquet'
    limit 1000
) to '/tmp/places.json';
</code></pre>
<p>Here's <a href="https://gist.github.com/simonw/53ad57ad42c7efe75e2028d975907180">that places.json file</a>, and here it is <a href="https://lite.datasette.io/?json=https://gist.github.com/simonw/53ad57ad42c7efe75e2028d975907180#/data/raw">imported into Datasette Lite</a>.</p>
<p>Finally, I got ChatGPT Code Interpreter to <a href="https://chatgpt.com/share/673d7b92-0b4c-8006-a442-c5e6c2713d9c">convert that file to GeoJSON</a> and pasted the result <a href="https://gist.github.com/simonw/1e2a170b7368932ebd3922cb5d234924">into this Gist</a>, giving me a map of those thousand places (because Gists automatically render GeoJSON):</p>
<p><img alt="A map of the world with 1000 markers on it. A marker in Columbia shows a dialog for Raisbeck, Bogota Dv, Cra 47 A 114 05 Second Floor" src="https://static.simonwillison.net/static/2024/places-geojson.jpg"></p>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AAA – Analytical Anti-Aliasing (504 pts)]]></title>
            <link>https://blog.frost.kiwi/analytical-anti-aliasing/</link>
            <guid>42191709</guid>
            <pubDate>Wed, 20 Nov 2024 08:03:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.frost.kiwi/analytical-anti-aliasing/">https://blog.frost.kiwi/analytical-anti-aliasing/</a>, See on <a href="https://news.ycombinator.com/item?id=42191709">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Today’s journey is <a href="https://en.wikipedia.org/wiki/Spatial_anti-aliasing">Anti-Aliasing</a> and the destination is <strong>Analytical Anti-Aliasing</strong>. Getting rid of rasterization <a href="https://en.wikipedia.org/wiki/Jaggies">jaggies</a> is an art-form with decades upon decades of maths, creative techniques and non-stop innovation. With so many years of research and development, there are many flavors.</p><p>From the simple but resource intensive <a href="https://en.wikipedia.org/wiki/Supersampling"><strong>SSAA</strong></a>, over theory dense <a href="https://www.iryoku.com/smaa/"><strong>SMAA</strong></a>, to using machine learning with <a href="https://en.wikipedia.org/wiki/Deep_learning_anti-aliasing"><strong>DLAA</strong></a>. Same goal - <strong><em>vastly</em></strong> different approaches. We’ll take a look at how they work, before introducing a new way to look a the problem - the ✨<em><strong>analytical</strong></em>🌟 way. The perfect Anti-Aliasing exists and is simpler than you think.</p><blockquote><p>Having <a href="https://mirrorball.frost.kiwi/">implemented</a> it multiple times over the years, I'll also share some juicy secrets I have never read anywhere before.</p><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><h2 id="the-setup" tabindex="-1">The Setup <a href="#the-setup">#</a></h2><p>To understand the Anti-Aliasing algorithms, we will implement them along the way! Following <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL">WebGL canvases</a> draw a moving circle. Anti-Aliasing <em>cannot</em> be fully understood with just images, movement is <em>essential</em>. The red box has 4x zoom. Rendering is done at <a href="https://en.wikipedia.org/wiki/1:1_pixel_mapping">native</a> resolution of your device, important to judge sharpness.</p><blockquote><p>Please pixel-peep to judge sharpness and aliasing closely. Resolution of your screen too high to see aliasing? Lower the resolution with the following buttons, which will <a href="https://tanalin.com/en/articles/integer-scaling/">integer-scale</a> the rendering.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><div><p> <label for="native">Native<p>Resolution</p></label></p><p> <label for="half">½<p>Resolution</p></label></p><p> <label for="quarter">¼<p>Resolution</p></label></p><p> <label for="eight">⅛<p>Resolution</p></label></p></div><canvas id="canvasSimple" width="100%" height="400px"></canvas><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/simple.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/simple.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle.vs">circle.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>attribute</span> <span>vec3</span> col<span>;</span>

<span>/* The coordinates that will be used to for our drawing operations */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* Color for the fragment shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>

<span>/* Aspect ratio */</span>
<span>uniform</span> <span>float</span> aspect_ratio<span>;</span>
<span>/* Position offset for the animation */</span>
<span>uniform</span> <span>vec2</span> offset<span>;</span>
<span>/* Size of the Unit Quad */</span>
<span>uniform</span> <span>float</span> size<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* Assign the verticies to be used as the distance field for drawing. This
	   will be linearly interpolated before going to the fragment shader */</span>
	uv <span>=</span> vtx<span>;</span>
	<span>/* Sending some nice color to the fragment shader */</span>
	color <span>=</span> col<span>;</span>

	<span>vec2</span> vertex <span>=</span> vtx<span>;</span>
	<span>/* correct for aspect ratio  */</span>
	vertex<span>.</span>x <span>*=</span> aspect_ratio<span>;</span>
	<span>/* Shrink the Quad and thus the "canvas", that the circle is drawn on */</span>
	vertex <span>*=</span> size<span>;</span>
	<span>/* Make the circle move in a circle, heh :] */</span>
	vertex <span>+=</span> offset<span>;</span>

	<span>/* Vertex Output */</span>
	gl_Position <span>=</span> <span>vec4</span><span>(</span>vertex<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle.fs">circle.fs</a></summary><pre><code><span>precision</span> <span>mediump</span> <span>float</span><span>;</span>
<span>/* uv coordinates from the vertex shader */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* color from the vertex shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span>/* Clamped and scaled uv.y added to color simply to make the bottom of the
	   circle white, so the contrast is high and you can see strong aliasing */</span>
	<span>vec3</span> finalColor <span>=</span> color <span>+</span> <span>clamp</span><span>(</span> <span>-</span> uv<span>.</span>y <span>*</span> <span>0.4</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>

	<span>/* Discard fragments outside radius 1 from the center */</span>
	<span>if</span> <span>(</span><span>length</span><span>(</span>uv<span>)</span> <span>&lt;</span> <span>1.0</span><span>)</span>
		gl_FragColor <span>=</span> <span>vec4</span><span>(</span>finalColor<span>,</span> <span>1.0</span><span>)</span><span>;</span>
	<span>else</span>
		<span>discard</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleSimple.js">circleSimple.js</a></summary><pre><code><span>function</span> <span>setupSimple</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> simpleColorFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName<span>,</span> showQuadOpt</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> circleDrawFramebuffer<span>,</span> frameTexture<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> showQuad <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span><span>,</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Show Quad instead of circle choise */</span>
	<span>const</span> showQuadOption <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>showQuadOpt<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	showQuadOption<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"false"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			showQuad <span>=</span> <span>(</span>event<span>.</span>target<span>.</span>value <span>===</span> <span>"true"</span><span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* SimpleColor Shader */</span>
	<span>const</span> simpleColorShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> simpleColorFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationSimple <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>simpleColorShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircleSimple <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>simpleColorShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircleSimple <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>simpleColorShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>
	gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>if</span> <span>(</span>showQuad<span>)</span> <span>{</span>
			gl<span>.</span><span>useProgram</span><span>(</span>simpleColorShd<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationSimple<span>,</span> aspect_ratio<span>)</span><span>;</span>
			gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircleSimple<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircleSimple<span>,</span> circleSize<span>)</span><span>;</span>
			gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p>Let’s start out simple. Using <a href="https://en.wikipedia.org/wiki/OpenGL_Shading_Language">GLSL</a> Shaders we tell the GPU of your device to draw a circle in the most simple and naive way possible, as seen in <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circle.fs">circle.fs</a> above: If the <a href="https://docs.gl/sl4/length"><code>length()</code></a> from the middle point is bigger than 1.0, we <a href="https://www.khronos.org/opengl/wiki/Fragment_Shader#Special_operations"><code>discard</code></a> the pixel.</p><p>The circle is blocky, especially at smaller resolutions. More painfully, there is strong “pixel crawling”, an artifact that’s very obvious when there is any kind of movement. As the circle moves, rows of pixels pop in and out of existence and the stair steps of the pixelation move along the side of the circle like beads of different speeds.</p><blockquote><p>The low ¼ and ⅛ resolutions aren't just there for extreme pixel-peeping, but also to represent small elements or ones at large distance in 3D.</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>At lower resolutions these artifacts come together to destroy the circular form. The combination of slow movement and low resolution causes one side’s pixels to come into existence, before the other side’s pixels disappear, causing a wobble. Axis-alignment with the pixel grid causes “plateaus” of pixels at every 90° and 45° position.</p><h3 id="technical-breakdown" tabindex="-1">Technical breakdown <a href="#technical-breakdown">#</a></h3><blockquote><p>Understanding the GPU code is not necessary to follow this article, but will help to grasp whats happening when we get to the analytical bits.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><p>4 vertices making up a quad are sent to the GPU in the vertex shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circle.vs">circle.vs</a>, where they are received as <code>attribute vec2 vtx</code>. The coordinates are of a “unit quad”, meaning the coordinates look like the following image. With <a href="https://www.copetti.org/writings/consoles/sega-saturn/#segas-offering">one famous exception</a>, all GPUs use triangles, so the quad is actually made up of two triangles.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/unit.svg" alt="Schematic make-up of the unit quad"><figcaption>Schematic make-up of the unit quad</figcaption></figure><p>The vertices <a href="https://blog.frost.kiwi/analytical-anti-aliasing/utility.js">here</a> are given to the fragment shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circle.fs">circle.fs</a> via <code>varying vec2 uv</code>. The fragment shader is called per <a href="https://www.khronos.org/opengl/wiki/Fragment">fragment</a> (here fragments are pixel-sized) and the <a href="http://learnwebgl.brown37.net/12_shader_language/glsl_data_types.html#storage-qualifiers"><code>varying</code></a> is interpolated linearly with <a href="https://en.wikipedia.org/wiki/Texture_mapping#Affine_texture_mapping">perspective corrected</a>, <a href="https://en.wikipedia.org/wiki/Barycentric_coordinate_system">barycentric coordinates</a>, giving us a <code>uv</code> coordinate per pixel from <code>-1</code> to <code>+1</code> with zero at the center.</p><p>By performing the check <code>if (length(uv) &lt; 1.0)</code> we draw our color for fragments inside the circle and reject fragments outside of it. What we are doing is known as “Alpha testing”. Without diving too deeply and just to hint at what’s to come, what we have created with <code>length(uv)</code> is the <a href="https://en.wikipedia.org/wiki/Signed_distance_function#Applications">signed distance field</a> of a point.</p><blockquote><p>Just to clarify, the circle isn't "drawn with geometry", which would have finite resolution of the shape, depending on how many vertices we use. It's "drawn by the shader".</p><img src="https://blog.frost.kiwi/assets/kiwis/speak.svg"></blockquote><h2 id="ssaa" tabindex="-1">SSAA <a href="#ssaa">#</a></h2><p>SSAA stands for <a href="https://en.wikipedia.org/wiki/Supersampling">Super Sampling Anti-Aliasing</a>. Render it bigger, downsample to be smaller. The idea is as old as 3D rendering itself. In fact, the first movies with CGI all relied on this with the most naive of implementations. One example is the 1986 movie “<a href="https://en.wikipedia.org/wiki/Flight_of_the_Navigator">Flight of the Navigator</a>”, as covered by <a href="https://www.youtube.com/@CaptainDisillusion">Captain Disillusion</a> in the video below.</p><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/flight_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/flight.mp4" type="video/mp4"></video><figcaption>SSAA as used in "Flight of the Navigator" (1986)<br>Excerpt from <a href="https://www.youtube.com/watch?v=tyixMpuGEL8">"Flight of the Navigator | VFXcool"</a><br>YouTube Video by <a href="https://www.youtube.com/@CaptainDisillusion">Captain Disillusion</a></figcaption></figure><blockquote><p>1986 did it, so can we. Implemented in mere seconds. <b>Easy</b>, right?</p><img src="https://blog.frost.kiwi/assets/kiwis/ice.svg"></blockquote><div><p> <label for="nativeSSAA">Native<p>Resolution</p></label></p><p> <label for="halfSSAA">½<p>Resolution</p></label></p><p> <label for="quarterSSAA">¼<p>Resolution</p></label></p><p> <label for="eightSSAA">⅛<p>Resolution</p></label></p></div><canvas id="canvasSSAA" width="100%" height="400px"></canvas><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/ssaa.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/ssaa.png" alt="image"></p></details><details><summary>SSAA buffer Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/post.fs">post.fs</a></summary><pre><code><span>precision</span> <span>mediump</span> <span>float</span><span>;</span>

<span>uniform</span> <span>sampler2D</span> u_texture<span>;</span>
<span>varying</span> <span>vec2</span> texCoord<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
	gl_FragColor <span>=</span> <span>texture2D</span><span>(</span>u_texture<span>,</span> texCoord<span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleSSAA.js">circleSSAA.js</a></summary><pre><code><span>function</span> <span>setupSSAA</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> frameTexture<span>,</span> circleDrawFramebuffer<span>,</span> frameTextureLinear<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span><span>,</span>
			<span>premultipliedAlpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Setup Possibilities */</span>
	<span>let</span> renderbuffer <span>=</span> <span>null</span><span>;</span>
	<span>let</span> resolveFramebuffer <span>=</span> <span>null</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Post Shader */</span>
	<span>const</span> postShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		resolveFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>

		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTextureLinear <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> <span>(</span>canvas<span>.</span>width <span>/</span> resDiv<span>)</span> <span>*</span> <span>2</span><span>,</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span> <span>*</span> <span>2</span><span>,</span> frameTextureLinear<span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTextureLinear<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>(</span>canvas<span>.</span>width <span>/</span> resDiv<span>)</span> <span>*</span> <span>2</span><span>,</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span> <span>*</span> <span>2</span><span>)</span><span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>postShd<span>)</span><span>;</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>

		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTextureLinear<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteRenderbuffer</span><span>(</span>renderbuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p><a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleSSAA.js">circleSSAA.js</a> draws at twice the resolution to a texture, which fragment shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/post.fs">post.fs</a> reads from at standard resolution with <a href="https://docs.gl/es2/glTexParameter">GL_LINEAR</a> to perform SSAA. So we have <em>four</em> input pixels for every <em>one</em> output pixel we draw to the screen. But it’s somewhat strange: There is definitely Anti-Aliasing happening, but less than expected.</p><blockquote><p>There should be 4 steps of transparency, but we only get two!</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>Especially at lower resolutions, we can see the circle <em>does</em> actually have 4 steps of transparency, but mainly at the 45° “diagonals” of the circle. A circle has of course no sides, but at the axis-aligned “bottom” there are only 2 steps of transparency: Fully Opaque and 50% transparent, the 25% and 75% transparency steps are missing.</p><h3 id="conceptually-simple%2C-actually-hard" tabindex="-1">Conceptually simple, actually hard <a href="#conceptually-simple%2C-actually-hard">#</a></h3><p>We aren’t sampling against the circle shape at twice the resolution, we are sampling against the quantized result of the circle shape. Twice the resolution, but discrete pixels nonetheless. The combination of pixelation and sample placement doesn’t hold enough information where we need it the most: at the axis-aligned “flat parts”.</p><blockquote><p>Four times the memory <b>and</b> four times the calculation requirement, but only a half-assed result.</p><img src="https://blog.frost.kiwi/assets/kiwis/facepalm.svg"></blockquote><p>Implementing SSAA properly is a minute craft. Here we are drawing to a 2x resolution texture and down-sampling it with linear interpolation. So actually, this implementation needs 5x the amount of VRAM. A proper implementation samples the scene multiple times and combines the result without an intermediary buffer.</p><blockquote><p>With our implementation, we can't even do more than 2xSSAA with one texture read, as linear interpolation happens <a href="https://stackoverflow.com/questions/53896032/">only with 2x2 samples</a>.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><p>To combat axis-alignment artifacts like with our circle above, we need to place our SSAA samples better. There are <a href="https://en.wikipedia.org/wiki/Supersampling#Supersampling_patterns">multiple ways to do so</a>, all with pros and cons. To implement SSAA properly, we need deep integration with the rendering pipeline. For 3D primitives, this happens below API or engine, in the realm of vendors and drivers.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/sample-patterns.svg" alt="SAA sample patterns"><figcaption>SSAA sample patterns. <a href="https://en.wikipedia.org/wiki/Supersampling#Supersampling_patterns">Source</a></figcaption></figure><p>In fact, some of the best implementations were <a href="https://web.archive.org/web/20180716171211/https://naturalviolence.webs.com/sgssaa.htm">discovered by vendors on accident</a>, like <a href="https://www.youtube.com/watch?v=ntlYwrbUlWo">SGSSAA</a>. There are also ways in which SSAA can make your scene look <em>worse</em>. Depending on implementation, SSAA messes with <a href="https://en.wikipedia.org/wiki/Mipmap">mip-map</a> calculations. As a result the mip-map lod-bias may need adjustment, as explained in the <a href="https://web.archive.org/web/20180716171211/https://naturalviolence.webs.com/sgssaa.htm">article above</a>.</p><blockquote><p>WebXR UI package <a href="https://github.com/felixmariotto/three-mesh-ui">three-mesh-ui</a>, a package mature enough to be <a href="https://developers.meta.com/horizon/blog/project-flowerbed-a-webxr-case-study/">used by Meta</a>, uses shader-based rotated grid super sampling to achieve sharp text rendering in VR, <a href="https://github.com/felixmariotto/three-mesh-ui/blob/b9c19e542e5234bc964a44c1e7aa4eeb16676757/build/three-mesh-ui.module.js#L2964">as seen in the code</a>.</p><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><h2 id="msaa" tabindex="-1">MSAA <a href="#msaa">#</a></h2><p><a href="https://en.wikipedia.org/wiki/Multisample_anti-aliasing">MSAA</a> is super sampling, but only at the silhouette of models, overlapping geometry, and texture edges if “<a href="https://bgolus.medium.com/anti-aliased-alpha-test-the-esoteric-alpha-to-coverage-8b177335ae4f">Alpha to Coverage</a>” is enabled. MSAA is implemented by the graphics card in-hardware by the graphics vendors and what is supported depends on hardware. In the select box below you can choose different MSAA levels for our circle.</p><p><a href="https://opengl.gpuinfo.org/displaycapability.php?name=GL_MAX_SAMPLES">There is up to MSAA x64</a>, but what is available is implementation defined. WebGL 1 has no support, which is why the next canvas initializes a <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext">WebGL 2</a> context. In WebGL, NVIDIA limits MSAA to 8x on Windows, even if more is supported, whilst on Linux no such limit is in place. On smartphones you will only get exactly 4x, as discussed below.</p><div><p> <label for="nativeMSAA">Native<p>Resolution</p></label></p><p> <label for="halfMSAA">½<p>Resolution</p></label></p><p> <label for="quarterMSAA">¼<p>Resolution</p></label></p><p> <label for="eightMSAA">⅛<p>Resolution</p></label></p></div><canvas id="canvasMSAA" width="100%" height="400px"></canvas><div><p> <label for="1pxMSAA"><p>edge smoothing</p></label></p><p> <label for="sqrt2pxMSAA"><p>edge smoothing</p></label></p></div><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/msaa.png">MSAA 4x Screenshot</a>, in case WebGL 2 doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/msaa.png" alt="image"></p></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleMSAA.js">circleMSAA.js</a></summary><pre><code><span>function</span> <span>setupMSAA</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> circleSimpleFragSrc<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName<span>,</span> radioSmoothSize</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> frameTexture<span>,</span> circleDrawFramebuffer<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>let</span> pixelSmoothSize <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl2'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span><span>,</span>
			<span>premultipliedAlpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Setup Possibilities */</span>
	<span>let</span> samples <span>=</span> <span>1</span><span>;</span>
	<span>let</span> renderbuffer <span>=</span> <span>null</span><span>;</span>
	<span>let</span> resolveFramebuffer <span>=</span> <span>null</span><span>;</span>

	<span>const</span> maxSamples <span>=</span> gl<span>.</span><span>getParameter</span><span>(</span>gl<span>.</span><span>MAX_SAMPLES</span><span>)</span><span>;</span>

	<span>/* Enable the options in the MSAA dropdown based on maxSamples */</span>
	<span>const</span> msaaSelect <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>"MSAA"</span><span>)</span><span>;</span>
	<span>for</span> <span>(</span><span>let</span> option <span>of</span> msaaSelect<span>.</span>options<span>)</span> <span>{</span>
		<span>if</span> <span>(</span><span>parseInt</span><span>(</span>option<span>.</span>value<span>)</span> <span>&lt;=</span> maxSamples<span>)</span> <span>{</span>
			option<span>.</span>disabled <span>=</span> <span>false</span><span>;</span>
		<span>}</span>
	<span>}</span>
	samples <span>=</span> <span>parseInt</span><span>(</span>msaaSelect<span>.</span>value<span>)</span><span>;</span>

	<span>/* Event listener for select dropdown */</span>
	msaaSelect<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		<span>/* Get new MSAA level and reset-init buffers */</span>
		samples <span>=</span> <span>parseInt</span><span>(</span>msaaSelect<span>.</span>value<span>)</span><span>;</span>
		<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Smooth Size */</span>
	<span>const</span> radiosSmooth <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioSmoothSize<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radiosSmooth<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			pixelSmoothSize <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> pixelSizeCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"pixelSize"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>
	<span>const</span> circleShd_step <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleSimpleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation_step <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd_step<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle_step <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd_step<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle_step <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd_step<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Post Shader */</span>
	<span>const</span> postShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		gl<span>.</span><span>deleteRenderbuffer</span><span>(</span>renderbuffer<span>)</span><span>;</span>
		renderbuffer <span>=</span> gl<span>.</span><span>createRenderbuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindRenderbuffer</span><span>(</span>gl<span>.</span><span>RENDERBUFFER</span><span>,</span> renderbuffer<span>)</span><span>;</span>
		<span>const</span> errorMessageElement <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'sampleErrorMessage'</span><span>)</span><span>;</span>
		<span>/* Here we need two branches because of implementation specific
		   shenanigans. Mobile chips will always force any call to 
		   renderbufferStorageMultisample() to be 4x MSAA, so to have a noAA
		   comparison, we split the Framebuffer setup */</span>
		<span>if</span> <span>(</span>samples <span>!=</span> <span>1</span><span>)</span> <span>{</span>
			gl<span>.</span><span>renderbufferStorageMultisample</span><span>(</span>gl<span>.</span><span>RENDERBUFFER</span><span>,</span> samples<span>,</span> gl<span>.</span><span>RGBA8</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
			gl<span>.</span><span>framebufferRenderbuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>RENDERBUFFER</span><span>,</span> renderbuffer<span>)</span><span>;</span>

			<span>const</span> actualSamples <span>=</span> gl<span>.</span><span>getRenderbufferParameter</span><span>(</span>
				gl<span>.</span><span>RENDERBUFFER</span><span>,</span>
				gl<span>.</span><span>RENDERBUFFER_SAMPLES</span>
			<span>)</span><span>;</span>
			<span>if</span> <span>(</span>samples <span>!==</span> actualSamples<span>)</span> <span>{</span>
				errorMessageElement<span>.</span>style<span>.</span>display <span>=</span> <span>'block'</span><span>;</span>
				errorMessageElement<span>.</span>textContent <span>=</span> <span><span>`</span><span>⚠️ You chose MSAAx</span><span><span>${</span>samples<span>}</span></span><span>, but the graphics driver forced it to MSAAx</span><span><span>${</span>actualSamples<span>}</span></span><span>. You are probably on a mobile GPU, where this behavior is expected.</span><span>`</span></span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				errorMessageElement<span>.</span>style<span>.</span>display <span>=</span> <span>'none'</span><span>;</span>
			<span>}</span>
		<span>}</span> <span>else</span> <span>{</span>
			errorMessageElement<span>.</span>style<span>.</span>display <span>=</span> <span>'none'</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		resolveFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>DRAW_FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>DRAW_FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		gl<span>.</span><span>disable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>
		gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>SAMPLE_ALPHA_TO_COVERAGE</span><span>)</span><span>;</span>
		<span>/* Setup PostProcess Framebuffer */</span>
		<span>if</span> <span>(</span>samples <span>==</span> <span>1</span><span>)</span>
			gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>
		<span>else</span>
			gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span>samples <span>==</span> <span>1</span><span>)</span>
			gl<span>.</span><span>useProgram</span><span>(</span>circleShd_step<span>)</span><span>;</span>
		<span>else</span>
			gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		<span>if</span> <span>(</span>samples <span>==</span> <span>1</span><span>)</span> <span>{</span>
			<span>/* Here we need two branches because of implementation specific
   			   shenanigans. Mobile chips will always force any call to 
   			   renderbufferStorageMultisample() to be 4x MSAA, so to have a noAA
   			   comparison, we split the demo across two shaders */</span>
			gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle_step<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation_step<span>,</span> aspect_ratio<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle_step<span>,</span> circleSize<span>)</span><span>;</span>
		<span>}</span>
		<span>else</span> <span>{</span>
			gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
			gl<span>.</span><span>uniform1f</span><span>(</span>pixelSizeCircle<span>,</span> <span>(</span><span>2.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span> <span>*</span> pixelSmoothSize<span>)</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>disable</span><span>(</span>gl<span>.</span><span>SAMPLE_ALPHA_TO_COVERAGE</span><span>)</span><span>;</span>
		gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		<span>if</span> <span>(</span>samples <span>!==</span> <span>1</span><span>)</span> <span>{</span>
			gl<span>.</span><span>useProgram</span><span>(</span>postShd<span>)</span><span>;</span>
			gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>

			<span>/* Resolve the MSAA framebuffer to a regular texture */</span>
			gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>READ_FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
			gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>DRAW_FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>
			gl<span>.</span><span>blitFramebuffer</span><span>(</span>
				<span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>,</span>
				<span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>,</span>
				gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>,</span> gl<span>.</span><span>LINEAR</span>
			<span>)</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteRenderbuffer</span><span>(</span>renderbuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><blockquote><p>What is edge smoothing and how does MSAA even know what to sample against? For now we skip the shader code and implementation. First let's take a look at MSAA's pros and cons in general.</p><img src="https://blog.frost.kiwi/assets/kiwis/speak.svg"></blockquote><h3 id="implementation-specific-headaches" tabindex="-1">Implementation specific headaches <a href="#implementation-specific-headaches">#</a></h3><p>We rely on hardware to do the Anti-Aliasing, which obviously leads to the problem that user hardware may not support what we need. The sampling patterns MSAA uses may also do things we don’t expect. Depending on what your hardware does, you may see the circle’s edge transparency steps appearing “in the wrong order”.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/outoforder.png" alt="Sample pattern and circle shape clash: pixels are seemingly 'checkerboxed'"><figcaption>Sample pattern and circle shape clash: pixels are seemingly "checkerboxed"</figcaption></figure><p>When MSAA became required with <a href="https://en.wikipedia.org/wiki/OpenGL#OpenGL_3.0">OpenGL 3</a> &amp; <a href="https://en.wikipedia.org/wiki/DirectX#DirectX_10">DirectX 10</a> era of hardware, support was especially hit &amp; miss. Even latest <a href="https://en.wikipedia.org/wiki/Intel_GMA#GMA_4500">Intel GMA</a> iGPUs expose the OpenGL extension <a href="https://registry.khronos.org/OpenGL/extensions/EXT/EXT_framebuffer_multisample.txt"><code>EXT_framebuffer_multisample</code></a>, but don’t in-fact support MSAA, <a href="https://community.khronos.org/t/yet-another-intel-multisample-thread/69614/2">which led to confusion</a>. But also in more recent smartphones, support just <a href="https://issues.chromium.org/issues/40114751">wasn’t that clear-cut</a>.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/iOSroundedMSAA.png" alt="iOS 2xMSAA, created by rounding transparency of 4xMSAA"><figcaption>Double edges - iOS 2xMSAA, created by iOS rounding transparency of 4xMSAA</figcaption></figure><p>Mobile chips support <em>exactly</em> MSAAx4 and things are weird. Android will let you pick 2x, but the driver will force 4x anyways. iPhones &amp; iPads do something rather stupid: Choosing 2x will make it 4x, but transparency will be rounded to nearest 50% multiple, leading to double edges in our example. There is hardware specific reason:</p><h3 id="performance-cost%3A-(maybe)-zero" tabindex="-1">Performance cost: (maybe) Zero <a href="#performance-cost%3A-(maybe)-zero">#</a></h3><p>Looking at modern video games, one might believe that MSAA is of the past. It usually brings a hefty performance penalty after all. Surprisingly, it’s still the king under certain circumstances and in very specific situations, even performance free.</p><blockquote><p>As a gamer, this goes against instinct...</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/MSAA-PerformanceFree_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/MSAA-PerformanceFree.mp4" type="video/mp4"></video><figcaption>Video: MSAA 4x is performance free in certain contexts<br>Excerpt from <a href="https://gdcvault.com/play/1024538">"Developing High Performance Games for Different Mobile VR Platforms"</a><br>GDC 2017 talk by <a href="https://www.linkedin.com/in/rahulprasad2/">Rahul Prasad</a></figcaption></figure><blockquote><p><a href="https://www.linkedin.com/in/rahulprasad2/">Rahul Prasad:</a> Use MSAA […] It’s actually not as expensive on mobile as it is on desktop, it’s one of the nice things you get on mobile. […] On some (mobile) GPUs 4x (MSAA) is free, so use it when you have it.</p></blockquote><p>As explained by <a href="https://www.linkedin.com/in/rahulprasad2/">Rahul Prasad</a> in the above talk, in VR 4xMSAA is a must and may come free on certain mobile GPUs. The specific reason would derail the blog post, but in case you want to go down that particular rabbit hole, here is Epic Games’ <a href="https://www.linkedin.com/in/niklas-smedberg-a96466/">Niklas Smedberg</a> giving a run-down.</p><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/tile-based-gpus_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/tile-based-gpus.mp4" type="video/mp4"></video><figcaption>Video: Tiled based rendering GPU architecture<br>Excerpt from <a href="https://gdcvault.com/play/1020756">"Next-Generation AAA Mobile Rendering"</a><br>GDC 2014 talk by <a href="https://www.linkedin.com/in/niklas-smedberg-a96466/">Niklas Smedberg</a> and <a href="https://twitter.com/NOTimothyLottes">Timothy Lottes</a></figcaption></figure><p>In short, this is possible under the condition of <a href="https://gamedevelopment.tutsplus.com/forward-rendering-vs-deferred-rendering--gamedev-12342a">forward rendering</a> with geometry that is not too dense and the GPU having <a href="https://developer.arm.com/documentation/102662/0100/Tile-based-GPUs">tiled-based rendering architecture</a>, which allows the GPU to perform MSAA calculations without heavy memory access and thus <a href="https://blog.frost.kiwi/WebGL-LUTS-made-simple/#performance-cost%3A-zero">latency hiding</a> the cost of the calculation. Here’s <a href="https://github.com/KhronosGroup/Vulkan-Samples/tree/main/samples/performance/msaa#color-resolve">deep dive</a>, if you are interested.</p><h3 id="a-complex-toolbox" tabindex="-1">A complex toolbox <a href="#a-complex-toolbox">#</a></h3><p>MSAA <a href="https://docs.gl/gl3/glGetMultisample">gives you access</a> to the samples, making <a href="https://therealmjp.github.io/posts/msaa-resolve-filters/">custom MSAA filtering curves</a> a possibility. It also allows you to <a href="https://bgolus.medium.com/rendering-a-sphere-on-a-quad-13c92025570c">merge both standard mesh-based and signed-distance-field rendering</a> via <a href="https://bgolus.medium.com/anti-aliased-alpha-test-the-esoteric-alpha-to-coverage-8b177335ae4f">alpha to coverage</a>. This complex features set made possible the most out-of-the-box thinking I ever witnessed in graphics programming:</p><p><a href="https://en.wikipedia.org/wiki/Assassin%27s_Creed_Unity">Assassin’s Creed Unity</a> used MSAA to render at half resolution and reconstruct only some buffers to full-res from MSAA samples, as described on page 48 of the talk “<a href="https://advances.realtimerendering.com/s2015/aaltonenhaar_siggraph2015_combined_final_footer_220dpi.pdf">GPU-Driven Rendering Pipelines</a>” by <a href="https://www.linkedin.com/in/ulrich-haar-730407218">Ulrich Haar</a> and <a href="https://x.com/SebAaltonen">Sebastian Aaltonen</a>. Kinda like <a href="https://developer.nvidia.com/vrworks/graphics/variablerateshading">variable rate shading</a>, but implemented with duct-tape and without vendor support.</p><blockquote><p>The brain-melting lengths to which graphics programmers go to utilize hardware acceleration to the last drop has me sometimes in awe.</p><img src="https://blog.frost.kiwi/assets/kiwis/surprised.svg"></blockquote><h2 id="post-process-anti-aliasing" tabindex="-1">Post-Process Anti-Aliasing <a href="#post-process-anti-aliasing">#</a></h2><p>In 2009 a <a href="https://web.archive.org/web/20141205052029/http://visual-computing.intel-research.net/publications/papers/2009/mlaa/mlaa.pdf">paper</a> by <a href="https://research.nvidia.com/person/alexander-reshetov">Alexander Reshetov</a> struck the graphics programming world like a ton of bricks: take the blocky, aliased result of the rendered image, find edges and classify the pixels into tetris-like shapes with per-shape filtering rules and remove the blocky edge. Anti-Aliasing based on the <a href="https://en.wikipedia.org/wiki/Mathematical_morphology">morphology</a> of pixels - <a href="https://www.iryoku.com/mlaa/">MLAA</a> was born.</p><p>Computationally cheap, easy to implement. Later it was refined with more emphasis on removing sub-pixel artifacts to become <a href="https://www.iryoku.com/smaa/">SMAA</a>. It became a fan favorite, with <a href="https://mrhaandi.blogspot.com/p/injectsmaa.html?m=1">an injector being developed early on</a> to put SMAA into games that didn’t support it. Some considered these too blurry, the saying “vaseline on the screen” was coined.</p><blockquote><p>It was the future, a sign of things to come. No more shaky hardware support. Like <a href="https://en.wikipedia.org/wiki/Fixed-function">Fixed-Function pipelines</a> died in favor of programmable shaders Anti-Aliasing too became "shader based".</p><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><h3 id="fxaa" tabindex="-1">FXAA <a href="#fxaa">#</a></h3><p>We’ll take a close look at an algorithm that was inspired by MLAA, developed by <a href="https://x.com/NOTimothyLottes">Timothy Lottes</a>. “Fast approximate anti-aliasing”, <a href="https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf">FXAA</a>. In fact, when it came into wide circulation, it received some incredible press. <a href="https://www.realtimerendering.com/blog/fxaa-rules-ok/">Among others</a>, <a href="https://blog.codinghorror.com/about-me/">Jeff Atwood</a> pulled neither bold fonts nor punches in his <a href="https://blog.codinghorror.com/fast-approximate-anti-aliasing-fxaa/">2011 blog post</a>, later <a href="http://kotaku.com/5866780/">republished by Kotaku</a>.</p><blockquote><p><a href="https://blog.codinghorror.com/about-me/"><strong>Jeff Atwood</strong></a>: The FXAA method is so good, in fact, it makes all other forms of full-screen anti-aliasing pretty much obsolete overnight. <strong>If you have an FXAA option in your game, you should enable it immediately</strong> and ignore any other AA options.</p></blockquote><p>Let’s see what the hype was about. The final version publicly released was FXAA 3.11 on <a href="https://web.archive.org/web/20120121124756/http://timothylottes.blogspot.com/2011/08/fxaa-311-bug-fixes-for-360.html">August 12th 2011</a> and the following demos are based on this. First, let’s take a look at our circle with FXAA doing the Anti-Aliasing at default settings.</p><div><p> <label for="nativeFXAA">Native<p>Resolution</p></label></p><p> <label for="halfFXAA">½<p>Resolution</p></label></p><p> <label for="quarterFXAA">¼<p>Resolution</p></label></p><p> <label for="eightFXAA">⅛<p>Resolution</p></label></p></div><canvas id="canvasFXAA" width="100%" height="400px"></canvas><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/fxaa.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/fxaa.png" alt="image"></p></details><details><summary>WebGL FXAA Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/post-FXAA.fs">post-FXAA.fs</a></summary><pre><code><span>precision</span> <span>mediump</span> <span>float</span><span>;</span>

<span>uniform</span> <span>sampler2D</span> u_texture<span>;</span>
<span>varying</span> <span>vec2</span> texCoord<span>;</span>

<span>uniform</span> <span>vec2</span> RcpFrame<span>;</span>

<span>/* FXAA 3.11 code, after passing through the preprocessor with settings:
    - FXAA PC QUALITY
	  - FXAA_PC 1
	- Default QUALITY
	  - FXAA_QUALITY_PRESET 12
	- Optimizations disabled for WebGL 1
	  - FXAA_GLSL_120 1
	  - FXAA_FAST_PIXEL_OFFSET 0
	  - Further optimizations possible with WebGL 2 or by enabling extension
	    GL_EXT_shader_texture_lod
	- GREEN_AS_LUMA is disabled
	  - FXAA_GREEN_AS_LUMA 0
	  - Input must be RGBL
*/</span>

<span>float</span> <span>FxaaLuma</span><span>(</span><span>vec4</span> rgba<span>)</span> <span>{</span> <span>return</span> rgba<span>.</span>w<span>;</span> <span>}</span>
<span>vec4</span> <span>FxaaPixelShader</span><span>(</span>
	<span>vec2</span> pos<span>,</span>
	<span>sampler2D</span> tex<span>,</span>
	<span>vec2</span> fxaaQualityRcpFrame<span>,</span>
	<span>float</span> fxaaQualitySubpix<span>,</span>
	<span>float</span> fxaaQualityEdgeThreshold<span>,</span>
	<span>float</span> fxaaQualityEdgeThresholdMin<span>)</span>
<span>{</span>
	<span>vec2</span> posM<span>;</span>
	posM<span>.</span>x <span>=</span> pos<span>.</span>x<span>;</span>
	posM<span>.</span>y <span>=</span> pos<span>.</span>y<span>;</span>
	<span>vec4</span> rgbyM <span>=</span> <span>texture2D</span><span>(</span>tex<span>,</span> posM<span>)</span><span>;</span>

	<span>float</span> lumaS <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>1</span><span>,</span> <span>0</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>0</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>0</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>

	<span>float</span> maxSM <span>=</span> <span>max</span><span>(</span>lumaS<span>,</span> rgbyM<span>.</span>w<span>)</span><span>;</span>
	<span>float</span> minSM <span>=</span> <span>min</span><span>(</span>lumaS<span>,</span> rgbyM<span>.</span>w<span>)</span><span>;</span>
	<span>float</span> maxESM <span>=</span> <span>max</span><span>(</span>lumaE<span>,</span> maxSM<span>)</span><span>;</span>
	<span>float</span> minESM <span>=</span> <span>min</span><span>(</span>lumaE<span>,</span> minSM<span>)</span><span>;</span>
	<span>float</span> maxWN <span>=</span> <span>max</span><span>(</span>lumaN<span>,</span> lumaW<span>)</span><span>;</span>
	<span>float</span> minWN <span>=</span> <span>min</span><span>(</span>lumaN<span>,</span> lumaW<span>)</span><span>;</span>
	<span>float</span> rangeMax <span>=</span> <span>max</span><span>(</span>maxWN<span>,</span> maxESM<span>)</span><span>;</span>
	<span>float</span> rangeMin <span>=</span> <span>min</span><span>(</span>minWN<span>,</span> minESM<span>)</span><span>;</span>
	<span>float</span> rangeMaxScaled <span>=</span> rangeMax <span>*</span> fxaaQualityEdgeThreshold<span>;</span>
	<span>float</span> range <span>=</span> rangeMax <span>-</span> rangeMin<span>;</span>
	<span>float</span> rangeMaxClamped <span>=</span> <span>max</span><span>(</span>fxaaQualityEdgeThresholdMin<span>,</span> rangeMaxScaled<span>)</span><span>;</span>
	<span>bool</span> earlyExit <span>=</span> range <span>&lt;</span> rangeMaxClamped<span>;</span>

	<span>if</span> <span>(</span>earlyExit<span>)</span>
		<span>return</span> rgbyM<span>;</span>

	<span>float</span> lumaNW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaSE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaNE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> lumaSW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>

	<span>float</span> lumaNS <span>=</span> lumaN <span>+</span> lumaS<span>;</span>
	<span>float</span> lumaWE <span>=</span> lumaW <span>+</span> lumaE<span>;</span>
	<span>float</span> subpixRcpRange <span>=</span> <span>1.0</span> <span>/</span> range<span>;</span>
	<span>float</span> subpixNSWE <span>=</span> lumaNS <span>+</span> lumaWE<span>;</span>
	<span>float</span> edgeHorz1 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> rgbyM<span>.</span>w<span>)</span> <span>+</span> lumaNS<span>;</span>
	<span>float</span> edgeVert1 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> rgbyM<span>.</span>w<span>)</span> <span>+</span> lumaWE<span>;</span>

	<span>float</span> lumaNESE <span>=</span> lumaNE <span>+</span> lumaSE<span>;</span>
	<span>float</span> lumaNWNE <span>=</span> lumaNW <span>+</span> lumaNE<span>;</span>
	<span>float</span> edgeHorz2 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaE<span>)</span> <span>+</span> lumaNESE<span>;</span>
	<span>float</span> edgeVert2 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaN<span>)</span> <span>+</span> lumaNWNE<span>;</span>

	<span>float</span> lumaNWSW <span>=</span> lumaNW <span>+</span> lumaSW<span>;</span>
	<span>float</span> lumaSWSE <span>=</span> lumaSW <span>+</span> lumaSE<span>;</span>
	<span>float</span> edgeHorz4 <span>=</span> <span>(</span><span>abs</span><span>(</span>edgeHorz1<span>)</span> <span>*</span> <span>2.0</span><span>)</span> <span>+</span> <span>abs</span><span>(</span>edgeHorz2<span>)</span><span>;</span>
	<span>float</span> edgeVert4 <span>=</span> <span>(</span><span>abs</span><span>(</span>edgeVert1<span>)</span> <span>*</span> <span>2.0</span><span>)</span> <span>+</span> <span>abs</span><span>(</span>edgeVert2<span>)</span><span>;</span>
	<span>float</span> edgeHorz3 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaW<span>)</span> <span>+</span> lumaNWSW<span>;</span>
	<span>float</span> edgeVert3 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaS<span>)</span> <span>+</span> lumaSWSE<span>;</span>
	<span>float</span> edgeHorz <span>=</span> <span>abs</span><span>(</span>edgeHorz3<span>)</span> <span>+</span> edgeHorz4<span>;</span>
	<span>float</span> edgeVert <span>=</span> <span>abs</span><span>(</span>edgeVert3<span>)</span> <span>+</span> edgeVert4<span>;</span>

	<span>float</span> subpixNWSWNESE <span>=</span> lumaNWSW <span>+</span> lumaNESE<span>;</span>
	<span>float</span> lengthSign <span>=</span> fxaaQualityRcpFrame<span>.</span>x<span>;</span>
	<span>bool</span> horzSpan <span>=</span> edgeHorz <span>&gt;=</span> edgeVert<span>;</span>
	<span>float</span> subpixA <span>=</span> subpixNSWE <span>*</span> <span>2.0</span> <span>+</span> subpixNWSWNESE<span>;</span>

	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		lumaN <span>=</span> lumaW<span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		lumaS <span>=</span> lumaE<span>;</span>
	<span>if</span> <span>(</span>horzSpan<span>)</span>
		lengthSign <span>=</span> fxaaQualityRcpFrame<span>.</span>y<span>;</span>
	<span>float</span> subpixB <span>=</span> <span>(</span>subpixA <span>*</span> <span>(</span><span>1.0</span> <span>/</span> <span>12.0</span><span>)</span><span>)</span> <span>-</span> rgbyM<span>.</span>w<span>;</span>

	<span>float</span> gradientN <span>=</span> lumaN <span>-</span> rgbyM<span>.</span>w<span>;</span>
	<span>float</span> gradientS <span>=</span> lumaS <span>-</span> rgbyM<span>.</span>w<span>;</span>
	<span>float</span> lumaNN <span>=</span> lumaN <span>+</span> rgbyM<span>.</span>w<span>;</span>
	<span>float</span> lumaSS <span>=</span> lumaS <span>+</span> rgbyM<span>.</span>w<span>;</span>
	<span>bool</span> pairN <span>=</span> <span>abs</span><span>(</span>gradientN<span>)</span> <span>&gt;=</span> <span>abs</span><span>(</span>gradientS<span>)</span><span>;</span>
	<span>float</span> gradient <span>=</span> <span>max</span><span>(</span><span>abs</span><span>(</span>gradientN<span>)</span><span>,</span> <span>abs</span><span>(</span>gradientS<span>)</span><span>)</span><span>;</span>
	<span>if</span> <span>(</span>pairN<span>)</span>
		lengthSign <span>=</span> <span>-</span>lengthSign<span>;</span>
	<span>float</span> subpixC <span>=</span> <span>clamp</span><span>(</span><span>abs</span><span>(</span>subpixB<span>)</span> <span>*</span> subpixRcpRange<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>

	<span>vec2</span> posB<span>;</span>
	posB<span>.</span>x <span>=</span> posM<span>.</span>x<span>;</span>
	posB<span>.</span>y <span>=</span> posM<span>.</span>y<span>;</span>
	<span>vec2</span> offNP<span>;</span>
	offNP<span>.</span>x <span>=</span> <span>(</span><span>!</span>horzSpan<span>)</span> <span>?</span> <span>0.0</span> <span>:</span> fxaaQualityRcpFrame<span>.</span>x<span>;</span>
	offNP<span>.</span>y <span>=</span> <span>(</span>horzSpan<span>)</span> <span>?</span> <span>0.0</span> <span>:</span> fxaaQualityRcpFrame<span>.</span>y<span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		posB<span>.</span>x <span>+=</span> lengthSign <span>*</span> <span>0.5</span><span>;</span>
	<span>if</span> <span>(</span>horzSpan<span>)</span>
		posB<span>.</span>y <span>+=</span> lengthSign <span>*</span> <span>0.5</span><span>;</span>

	<span>vec2</span> posN<span>;</span>
	posN<span>.</span>x <span>=</span> posB<span>.</span>x <span>-</span> offNP<span>.</span>x <span>*</span> <span>1.0</span><span>;</span>
	posN<span>.</span>y <span>=</span> posB<span>.</span>y <span>-</span> offNP<span>.</span>y <span>*</span> <span>1.0</span><span>;</span>
	<span>vec2</span> posP<span>;</span>
	posP<span>.</span>x <span>=</span> posB<span>.</span>x <span>+</span> offNP<span>.</span>x <span>*</span> <span>1.0</span><span>;</span>
	posP<span>.</span>y <span>=</span> posB<span>.</span>y <span>+</span> offNP<span>.</span>y <span>*</span> <span>1.0</span><span>;</span>
	<span>float</span> subpixD <span>=</span> <span>(</span><span>(</span><span>-</span><span>2.0</span><span>)</span> <span>*</span> subpixC<span>)</span> <span>+</span> <span>3.0</span><span>;</span>
	<span>float</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>)</span><span>)</span><span>;</span>
	<span>float</span> subpixE <span>=</span> subpixC <span>*</span> subpixC<span>;</span>
	<span>float</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>)</span><span>)</span><span>;</span>

	<span>if</span> <span>(</span><span>!</span>pairN<span>)</span>
		lumaNN <span>=</span> lumaSS<span>;</span>
	<span>float</span> gradientScaled <span>=</span> gradient <span>*</span> <span>1.0</span> <span>/</span> <span>4.0</span><span>;</span>
	<span>float</span> lumaMM <span>=</span> rgbyM<span>.</span>w <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
	<span>float</span> subpixF <span>=</span> subpixD <span>*</span> subpixE<span>;</span>
	<span>bool</span> lumaMLTZero <span>=</span> lumaMM <span>&lt;</span> <span>0.0</span><span>;</span>

	lumaEndN <span>-=</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
	lumaEndP <span>-=</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
	<span>bool</span> doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
	<span>bool</span> doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
	<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
		posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> <span>1.5</span><span>;</span>
	<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
		posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> <span>1.5</span><span>;</span>
	<span>bool</span> doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
	<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
		posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> <span>1.5</span><span>;</span>
	<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
		posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> <span>1.5</span><span>;</span>

	<span>if</span> <span>(</span>doneNP<span>)</span>
	<span>{</span>
		<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
			lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
			lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
			lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
			lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
		doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
		doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
			posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> <span>2.0</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
			posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> <span>2.0</span><span>;</span>
		doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
			posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> <span>2.0</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
			posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> <span>2.0</span><span>;</span>

		<span>if</span> <span>(</span>doneNP<span>)</span>
		<span>{</span>
			<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
				lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
				lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
				lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
				lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
			doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
			doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
				posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> <span>4.0</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
				posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> <span>4.0</span><span>;</span>
			doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
				posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> <span>4.0</span><span>;</span>
			<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
				posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> <span>4.0</span><span>;</span>

			<span>if</span> <span>(</span>doneNP<span>)</span>
			<span>{</span>
				<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
					lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
					lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
					lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
					lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
				doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
				doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
					posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> <span>12.0</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneN<span>)</span>
					posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> <span>12.0</span><span>;</span>
				doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
					posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> <span>12.0</span><span>;</span>
				<span>if</span> <span>(</span><span>!</span>doneP<span>)</span>
					posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> <span>12.0</span><span>;</span>
			<span>}</span>
		<span>}</span>
	<span>}</span>

	<span>float</span> dstN <span>=</span> posM<span>.</span>x <span>-</span> posN<span>.</span>x<span>;</span>
	<span>float</span> dstP <span>=</span> posP<span>.</span>x <span>-</span> posM<span>.</span>x<span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		dstN <span>=</span> posM<span>.</span>y <span>-</span> posN<span>.</span>y<span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		dstP <span>=</span> posP<span>.</span>y <span>-</span> posM<span>.</span>y<span>;</span>

	<span>bool</span> goodSpanN <span>=</span> <span>(</span>lumaEndN <span>&lt;</span> <span>0.0</span><span>)</span> <span>!=</span> lumaMLTZero<span>;</span>
	<span>float</span> spanLength <span>=</span> <span>(</span>dstP <span>+</span> dstN<span>)</span><span>;</span>
	<span>bool</span> goodSpanP <span>=</span> <span>(</span>lumaEndP <span>&lt;</span> <span>0.0</span><span>)</span> <span>!=</span> lumaMLTZero<span>;</span>
	<span>float</span> spanLengthRcp <span>=</span> <span>1.0</span> <span>/</span> spanLength<span>;</span>

	<span>bool</span> directionN <span>=</span> dstN <span>&lt;</span> dstP<span>;</span>
	<span>float</span> dst <span>=</span> <span>min</span><span>(</span>dstN<span>,</span> dstP<span>)</span><span>;</span>
	<span>bool</span> goodSpan <span>=</span> directionN <span>?</span> goodSpanN <span>:</span> goodSpanP<span>;</span>
	<span>float</span> subpixG <span>=</span> subpixF <span>*</span> subpixF<span>;</span>
	<span>float</span> pixelOffset <span>=</span> <span>(</span>dst <span>*</span> <span>(</span><span>-</span>spanLengthRcp<span>)</span><span>)</span> <span>+</span> <span>0.5</span><span>;</span>
	<span>float</span> subpixH <span>=</span> subpixG <span>*</span> fxaaQualitySubpix<span>;</span>

	<span>float</span> pixelOffsetGood <span>=</span> goodSpan <span>?</span> pixelOffset <span>:</span> <span>0.0</span><span>;</span>
	<span>float</span> pixelOffsetSubpix <span>=</span> <span>max</span><span>(</span>pixelOffsetGood<span>,</span> subpixH<span>)</span><span>;</span>
	<span>if</span> <span>(</span><span>!</span>horzSpan<span>)</span>
		posM<span>.</span>x <span>+=</span> pixelOffsetSubpix <span>*</span> lengthSign<span>;</span>
	<span>if</span> <span>(</span>horzSpan<span>)</span>
		posM<span>.</span>y <span>+=</span> pixelOffsetSubpix <span>*</span> lengthSign<span>;</span>

	<span>return</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM<span>)</span><span>.</span>xyz<span>,</span> rgbyM<span>.</span>w<span>)</span><span>;</span>
<span>}</span>


<span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
	gl_FragColor <span>=</span> <span>FxaaPixelShader</span><span>(</span>
		texCoord<span>,</span> u_texture<span>,</span> RcpFrame<span>,</span> <span>0.75</span><span>,</span> <span>0.166</span><span>,</span> <span>0.0833</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleFXAA.js">circleFXAA.js</a></summary><pre><code><span>function</span> <span>setupFXAA</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> frameTexture<span>,</span> circleDrawFramebuffer<span>,</span> frameTextureLinear<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span><span>,</span>
			<span>premultipliedAlpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Setup Possibilities */</span>
	<span>let</span> samples <span>=</span> <span>1</span><span>;</span>
	<span>let</span> renderbuffer <span>=</span> <span>null</span><span>;</span>
	<span>let</span> resolveFramebuffer <span>=</span> <span>null</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Post Shader */</span>
	<span>const</span> postShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> postVtxSrc<span>,</span> postFragSrc<span>)</span><span>;</span>
	<span>const</span> rcpFrameLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>postShd<span>,</span> <span>"RcpFrame"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		resolveFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>

		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTextureLinear <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTextureLinear<span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTextureLinear<span>,</span> <span>0</span><span>)</span><span>;</span>

		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>postShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>rcpFrameLocation<span>,</span> <span>1.0</span> <span>/</span> <span>(</span>canvas<span>.</span>width <span>/</span> resDiv<span>)</span><span>,</span> <span>1.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span><span>;</span>
		gl<span>.</span><span>disable</span><span>(</span>gl<span>.</span><span>SAMPLE_ALPHA_TO_COVERAGE</span><span>)</span><span>;</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>

		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTextureLinear<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> resolveFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>


		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteRenderbuffer</span><span>(</span>renderbuffer<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>resolveFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p>A bit of a weird result. It looks good if the circle wouldn’t move. Perfectly smooth edges. But the circle distorts as it moves. The axis-aligned top and bottom especially have a little nub that appears and disappears. And switching to lower resolutions, the circle even loses its round shape, <a href="https://www.youtube.com/watch?v=x8TO-nrUtSI">wobbling like Play Station 1 graphics</a>.</p><p>Per-pixel, FXAA considers only the 3x3 neighborhood, so it can’t possibly know that this area is part of a big shape. But it also doesn’t just “blur edges”, as often said. As explained in the <a href="https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf">official whitepaper</a>, it finds the edge’s direction and shifts the pixel’s coordinates to let the performance free linear interpolation do the blending.</p><p>For our demo here, wrong tool for the job. Really, we didn’t do FXAA justice with our example. FXAA was created for another use case and has many settings and presets. It was created to anti-alias more complex scenes. Let’s give it a fair shot!</p><h4 id="fxaa-full-demo" tabindex="-1">FXAA full demo <a href="#fxaa-full-demo">#</a></h4><p>A scene from my favorite piece of software in existence: <a href="https://store.steampowered.com/app/244630/NEOTOKYO/">NeoTokyo°</a>. I created a bright area light in an NT° map and moved a bench to create an area of strong aliasing. The following demo uses the aliased output from <a href="https://store.steampowered.com/app/244630/NEOTOKYO/">NeoTokyo°</a>, calculates the required luminance channel and applies FXAA. All FXAA presets and settings at your finger tips.</p><blockquote><p>This has fixed resolution and will only be at you device's native resolution, if your device has no dpi scaling and the browser is at 100% zoom.</p><img src="https://blog.frost.kiwi/assets/kiwis/speak.svg"></blockquote><p><span><label> Enable FXAA</label> </span><span><label> Enable Red Box</label> </span><span><label> Play / Pause</label></span></p><table><tbody><tr><td colspan="4"><div><p><span><label> Show Luma</label> </span><span><label> Green as Luma</label></span></p></div></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>FXAA_QUALITY_PRESET</code></td></tr><tr><td><code>FXAA_QUALITY_PRESET</code></td><td colspan="2"></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>fxaaQualitySubpix</code></td></tr><tr><td><code>fxaaQualitySubpix</code></td><td></td><td><output id="fxaaQualitySubpixValue">0.75</output></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>fxaaQualityEdgeThreshold</code></td></tr><tr><td><code>fxaaQualityEdgeThreshold</code></td><td></td><td><output id="fxaaQualityEdgeThresholdValue">0.166</output></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>fxaaQualityEdgeThresholdMin</code></td></tr><tr><td><code>fxaaQualityEdgeThresholdMin</code></td><td></td><td><output id="fxaaQualityEdgeThresholdMinValue">0.0833</output></td><td></td></tr><tr><td colspan="4"></td></tr></tbody></table><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/fxaainteractive.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/fxaainteractive.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/FXAA-interactive.vs">FXAA-interactive.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* FXAA expects flipped, DirectX style UV coordinates */</span>
	uv <span>=</span> vtx <span>*</span> <span>vec2</span><span>(</span><span>0.5</span><span>,</span> <span>-</span><span>0.5</span><span>)</span> <span>+</span> <span>0.5</span><span>;</span>
	gl_Position <span>=</span> <span>vec4</span><span>(</span>vtx<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/FXAA-interactive.fs">FXAA-interactive.fs</a></summary><pre><code><span>precision</span> <span>highp</span> <span>float</span><span>;</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>

<span>uniform</span> <span>sampler2D</span> texture<span>;</span>
<span>uniform</span> <span>vec2</span> RcpFrame<span>;</span>
<span>uniform</span> <span>float</span> u_fxaaQualitySubpix<span>;</span>
<span>uniform</span> <span>float</span> u_fxaaQualityEdgeThreshold<span>;</span>
<span>uniform</span> <span>float</span> u_fxaaQualityEdgeThresholdMin<span>;</span>

<span>/*============================================================================
                           FXAA QUALITY - PRESETS
============================================================================*/</span>
<span>/*============================================================================
                     FXAA QUALITY - MEDIUM DITHER PRESETS
============================================================================*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>10</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>3</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>3.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>11</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>4</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>3.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>12</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>13</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>6</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>14</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>7</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>15</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>8</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>12.0</span></span></span>
<span><span>#</span><span>endif</span></span>

<span>/*============================================================================
                     FXAA QUALITY - LOW DITHER PRESETS
============================================================================*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>20</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>3</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>21</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>4</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>22</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>23</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>6</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>24</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>7</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>3.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>25</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>8</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>26</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>9</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>27</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>10</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P9</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>28</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>11</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P9</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P10</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>29</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>12</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P9</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P10</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P11</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>

<span>/*============================================================================
                     FXAA QUALITY - EXTREME QUALITY
============================================================================*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PRESET <span>==</span> <span>39</span><span>)</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_PS</span> <span><span>12</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P0</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P1</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P2</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P3</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P4</span> <span><span>1.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P5</span> <span><span>1.5</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P6</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P7</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P8</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P9</span> <span><span>2.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P10</span> <span><span>4.0</span></span></span>
    <span><span>#</span><span>define</span> <span>FXAA_QUALITY_P11</span> <span><span>8.0</span></span></span>
<span><span>#</span><span>endif</span></span>


<span>/*============================================================================
                   GREEN AS LUMA OPTION SUPPORT FUNCTION
============================================================================*/</span>
<span><span>#</span><span>if</span> <span><span>(</span>FXAA_GREEN_AS_LUMA <span>==</span> <span>0</span><span>)</span></span></span>
    <span>float</span> <span>FxaaLuma</span><span>(</span><span>vec4</span> rgba<span>)</span> <span>{</span> <span>return</span> rgba<span>.</span>w<span>;</span> <span>}</span>
<span><span>#</span><span>else</span></span>
    <span>float</span> <span>FxaaLuma</span><span>(</span><span>vec4</span> rgba<span>)</span> <span>{</span> <span>return</span> rgba<span>.</span>y<span>;</span> <span>}</span>
<span><span>#</span><span>endif</span>    </span>

<span>/*============================================================================
                             FXAA3 QUALITY - PC
============================================================================*/</span>
<span>vec4</span> <span>FxaaPixelShader</span><span>(</span>
    <span>//</span>
    <span>// Use noperspective interpolation here (turn off perspective interpolation).</span>
    <span>// {xy} = center of pixel</span>
    <span>vec2</span> pos<span>,</span>
    <span>//</span>
    <span>// Input color texture.</span>
    <span>// {rgb_} = color in linear or perceptual color space</span>
    <span>// if (FXAA_GREEN_AS_LUMA == 0)</span>
    <span>//     {__a} = luma in perceptual color space (not linear)</span>
    <span>sampler2D</span> tex<span>,</span>
    <span>//</span>
    <span>// Only used on FXAA Quality.</span>
    <span>// This must be from a constant/uniform.</span>
    <span>// {x_} = 1.0/screenWidthInPixels</span>
    <span>// {_y} = 1.0/screenHeightInPixels</span>
    <span>vec2</span> fxaaQualityRcpFrame<span>,</span>
    <span>//</span>
    <span>// Only used on FXAA Quality.</span>
    <span>// This used to be the FXAA_QUALITY_SUBPIX define.</span>
    <span>// It is here now to allow easier tuning.</span>
    <span>// Choose the amount of sub-pixel aliasing removal.</span>
    <span>// This can effect sharpness.</span>
    <span>//   1.00 - upper limit (softer)</span>
    <span>//   0.75 - default amount of filtering</span>
    <span>//   0.50 - lower limit (sharper, less sub-pixel aliasing removal)</span>
    <span>//   0.25 - almost off</span>
    <span>//   0.00 - completely off</span>
    <span>float</span> fxaaQualitySubpix<span>,</span>
    <span>//</span>
    <span>// Only used on FXAA Quality.</span>
    <span>// This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.</span>
    <span>// It is here now to allow easier tuning.</span>
    <span>// The minimum amount of local contrast required to apply algorithm.</span>
    <span>//   0.333 - too little (faster)</span>
    <span>//   0.250 - low quality</span>
    <span>//   0.166 - default</span>
    <span>//   0.125 - high quality </span>
    <span>//   0.063 - overkill (slower)</span>
    <span>float</span> fxaaQualityEdgeThreshold<span>,</span>
    <span>//</span>
    <span>// Only used on FXAA Quality.</span>
    <span>// This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.</span>
    <span>// It is here now to allow easier tuning.</span>
    <span>// Trims the algorithm from processing darks.</span>
    <span>//   0.0833 - upper limit (default, the start of visible unfiltered edges)</span>
    <span>//   0.0625 - high quality (faster)</span>
    <span>//   0.0312 - visible limit (slower)</span>
    <span>// Special notes when using FXAA_GREEN_AS_LUMA,</span>
    <span>//   Likely want to set this to zero.</span>
    <span>//   As colors that are mostly not-green</span>
    <span>//   will appear very dark in the green channel!</span>
    <span>//   Tune by looking at mostly non-green content,</span>
    <span>//   then start at zero and increase until aliasing is a problem.</span>
    <span>float</span> fxaaQualityEdgeThresholdMin
<span>)</span> <span>{</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>vec2</span> posM<span>;</span>
    posM<span>.</span>x <span>=</span> pos<span>.</span>x<span>;</span>
    posM<span>.</span>y <span>=</span> pos<span>.</span>y<span>;</span>
    <span>vec4</span> rgbyM <span>=</span> <span>texture2D</span><span>(</span>tex<span>,</span> posM<span>)</span><span>;</span>
    <span><span>#</span><span>if</span> <span><span>(</span>FXAA_GREEN_AS_LUMA <span>==</span> <span>0</span><span>)</span></span></span>
        <span><span>#</span><span>define</span> <span>lumaM</span> <span>rgbyM<span>.</span>w</span></span>
    <span><span>#</span><span>else</span></span>
        <span><span>#</span><span>define</span> <span>lumaM</span> <span>rgbyM<span>.</span>y</span></span>
    <span><span>#</span><span>endif</span></span>
    <span>float</span> lumaS <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>0</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>1</span><span>,</span> <span>0</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>0</span><span>,</span><span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>0</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> maxSM <span>=</span> <span>max</span><span>(</span>lumaS<span>,</span> lumaM<span>)</span><span>;</span>
    <span>float</span> minSM <span>=</span> <span>min</span><span>(</span>lumaS<span>,</span> lumaM<span>)</span><span>;</span>
    <span>float</span> maxESM <span>=</span> <span>max</span><span>(</span>lumaE<span>,</span> maxSM<span>)</span><span>;</span>
    <span>float</span> minESM <span>=</span> <span>min</span><span>(</span>lumaE<span>,</span> minSM<span>)</span><span>;</span>
    <span>float</span> maxWN <span>=</span> <span>max</span><span>(</span>lumaN<span>,</span> lumaW<span>)</span><span>;</span>
    <span>float</span> minWN <span>=</span> <span>min</span><span>(</span>lumaN<span>,</span> lumaW<span>)</span><span>;</span>
    <span>float</span> rangeMax <span>=</span> <span>max</span><span>(</span>maxWN<span>,</span> maxESM<span>)</span><span>;</span>
    <span>float</span> rangeMin <span>=</span> <span>min</span><span>(</span>minWN<span>,</span> minESM<span>)</span><span>;</span>
    <span>float</span> rangeMaxScaled <span>=</span> rangeMax <span>*</span> fxaaQualityEdgeThreshold<span>;</span>
    <span>float</span> range <span>=</span> rangeMax <span>-</span> rangeMin<span>;</span>
    <span>float</span> rangeMaxClamped <span>=</span> <span>max</span><span>(</span>fxaaQualityEdgeThresholdMin<span>,</span> rangeMaxScaled<span>)</span><span>;</span>
    <span>bool</span> earlyExit <span>=</span> range <span>&lt;</span> rangeMaxClamped<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>if</span><span>(</span>earlyExit<span>)</span>
        <span>return</span> rgbyM<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> lumaNW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span><span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaSE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaNE <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span> <span>1</span><span>,</span><span>-</span><span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>float</span> lumaSW <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM <span>+</span> <span>(</span><span>vec2</span><span>(</span><span>ivec2</span><span>(</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span> <span>*</span> fxaaQualityRcpFrame<span>.</span>xy<span>)</span><span>)</span><span>)</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> lumaNS <span>=</span> lumaN <span>+</span> lumaS<span>;</span>
    <span>float</span> lumaWE <span>=</span> lumaW <span>+</span> lumaE<span>;</span>
    <span>float</span> subpixRcpRange <span>=</span> <span>1.0</span><span>/</span>range<span>;</span>
    <span>float</span> subpixNSWE <span>=</span> lumaNS <span>+</span> lumaWE<span>;</span>
    <span>float</span> edgeHorz1 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaM<span>)</span> <span>+</span> lumaNS<span>;</span>
    <span>float</span> edgeVert1 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaM<span>)</span> <span>+</span> lumaWE<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> lumaNESE <span>=</span> lumaNE <span>+</span> lumaSE<span>;</span>
    <span>float</span> lumaNWNE <span>=</span> lumaNW <span>+</span> lumaNE<span>;</span>
    <span>float</span> edgeHorz2 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaE<span>)</span> <span>+</span> lumaNESE<span>;</span>
    <span>float</span> edgeVert2 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaN<span>)</span> <span>+</span> lumaNWNE<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> lumaNWSW <span>=</span> lumaNW <span>+</span> lumaSW<span>;</span>
    <span>float</span> lumaSWSE <span>=</span> lumaSW <span>+</span> lumaSE<span>;</span>
    <span>float</span> edgeHorz4 <span>=</span> <span>(</span><span>abs</span><span>(</span>edgeHorz1<span>)</span> <span>*</span> <span>2.0</span><span>)</span> <span>+</span> <span>abs</span><span>(</span>edgeHorz2<span>)</span><span>;</span>
    <span>float</span> edgeVert4 <span>=</span> <span>(</span><span>abs</span><span>(</span>edgeVert1<span>)</span> <span>*</span> <span>2.0</span><span>)</span> <span>+</span> <span>abs</span><span>(</span>edgeVert2<span>)</span><span>;</span>
    <span>float</span> edgeHorz3 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaW<span>)</span> <span>+</span> lumaNWSW<span>;</span>
    <span>float</span> edgeVert3 <span>=</span> <span>(</span><span>-</span><span>2.0</span> <span>*</span> lumaS<span>)</span> <span>+</span> lumaSWSE<span>;</span>
    <span>float</span> edgeHorz <span>=</span> <span>abs</span><span>(</span>edgeHorz3<span>)</span> <span>+</span> edgeHorz4<span>;</span>
    <span>float</span> edgeVert <span>=</span> <span>abs</span><span>(</span>edgeVert3<span>)</span> <span>+</span> edgeVert4<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> subpixNWSWNESE <span>=</span> lumaNWSW <span>+</span> lumaNESE<span>;</span>
    <span>float</span> lengthSign <span>=</span> fxaaQualityRcpFrame<span>.</span>x<span>;</span>
    <span>bool</span> horzSpan <span>=</span> edgeHorz <span>&gt;=</span> edgeVert<span>;</span>
    <span>float</span> subpixA <span>=</span> subpixNSWE <span>*</span> <span>2.0</span> <span>+</span> subpixNWSWNESE<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> lumaN <span>=</span> lumaW<span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> lumaS <span>=</span> lumaE<span>;</span>
    <span>if</span><span>(</span>horzSpan<span>)</span> lengthSign <span>=</span> fxaaQualityRcpFrame<span>.</span>y<span>;</span>
    <span>float</span> subpixB <span>=</span> <span>(</span>subpixA <span>*</span> <span>(</span><span>1.0</span><span>/</span><span>12.0</span><span>)</span><span>)</span> <span>-</span> lumaM<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> gradientN <span>=</span> lumaN <span>-</span> lumaM<span>;</span>
    <span>float</span> gradientS <span>=</span> lumaS <span>-</span> lumaM<span>;</span>
    <span>float</span> lumaNN <span>=</span> lumaN <span>+</span> lumaM<span>;</span>
    <span>float</span> lumaSS <span>=</span> lumaS <span>+</span> lumaM<span>;</span>
    <span>bool</span> pairN <span>=</span> <span>abs</span><span>(</span>gradientN<span>)</span> <span>&gt;=</span> <span>abs</span><span>(</span>gradientS<span>)</span><span>;</span>
    <span>float</span> gradient <span>=</span> <span>max</span><span>(</span><span>abs</span><span>(</span>gradientN<span>)</span><span>,</span> <span>abs</span><span>(</span>gradientS<span>)</span><span>)</span><span>;</span>
    <span>if</span><span>(</span>pairN<span>)</span> lengthSign <span>=</span> <span>-</span>lengthSign<span>;</span>
    <span>float</span> subpixC <span>=</span> <span>clamp</span><span>(</span><span>abs</span><span>(</span>subpixB<span>)</span> <span>*</span> subpixRcpRange<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>vec2</span> posB<span>;</span>
    posB<span>.</span>x <span>=</span> posM<span>.</span>x<span>;</span>
    posB<span>.</span>y <span>=</span> posM<span>.</span>y<span>;</span>
    <span>vec2</span> offNP<span>;</span>
    offNP<span>.</span>x <span>=</span> <span>(</span><span>!</span>horzSpan<span>)</span> <span>?</span> <span>0.0</span> <span>:</span> fxaaQualityRcpFrame<span>.</span>x<span>;</span>
    offNP<span>.</span>y <span>=</span> <span>(</span> horzSpan<span>)</span> <span>?</span> <span>0.0</span> <span>:</span> fxaaQualityRcpFrame<span>.</span>y<span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> posB<span>.</span>x <span>+=</span> lengthSign <span>*</span> <span>0.5</span><span>;</span>
    <span>if</span><span>(</span> horzSpan<span>)</span> posB<span>.</span>y <span>+=</span> lengthSign <span>*</span> <span>0.5</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>vec2</span> posN<span>;</span>
    posN<span>.</span>x <span>=</span> posB<span>.</span>x <span>-</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P0<span>;</span>
    posN<span>.</span>y <span>=</span> posB<span>.</span>y <span>-</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P0<span>;</span>
    <span>vec2</span> posP<span>;</span>
    posP<span>.</span>x <span>=</span> posB<span>.</span>x <span>+</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P0<span>;</span>
    posP<span>.</span>y <span>=</span> posB<span>.</span>y <span>+</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P0<span>;</span>
    <span>float</span> subpixD <span>=</span> <span>(</span><span>(</span><span>-</span><span>2.0</span><span>)</span><span>*</span>subpixC<span>)</span> <span>+</span> <span>3.0</span><span>;</span>
    <span>float</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>)</span><span>)</span><span>;</span>
    <span>float</span> subpixE <span>=</span> subpixC <span>*</span> subpixC<span>;</span>
    <span>float</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>)</span><span>)</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>if</span><span>(</span><span>!</span>pairN<span>)</span> lumaNN <span>=</span> lumaSS<span>;</span>
    <span>float</span> gradientScaled <span>=</span> gradient <span>*</span> <span>1.0</span><span>/</span><span>4.0</span><span>;</span>
    <span>float</span> lumaMM <span>=</span> lumaM <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
    <span>float</span> subpixF <span>=</span> subpixD <span>*</span> subpixE<span>;</span>
    <span>bool</span> lumaMLTZero <span>=</span> lumaMM <span>&lt;</span> <span>0.0</span><span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    lumaEndN <span>-=</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
    lumaEndP <span>-=</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
    <span>bool</span> doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
    <span>bool</span> doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P1<span>;</span>
    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P1<span>;</span>
    <span>bool</span> doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P1<span>;</span>
    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P1<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
        doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
        doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P2<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P2<span>;</span>
        doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P2<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P2<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
        <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>3</span><span>)</span></span></span>
        <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
            doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
            doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P3<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P3<span>;</span>
            doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P3<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P3<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
            <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>4</span><span>)</span></span></span>
            <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P4<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P4<span>;</span>
                doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P4<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P4<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>5</span><span>)</span></span></span>
                <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                    doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                    doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P5<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P5<span>;</span>
                    doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P5<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P5<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                    <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>6</span><span>)</span></span></span>
                    <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                        doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                        doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P6<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P6<span>;</span>
                        doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P6<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P6<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                        <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>7</span><span>)</span></span></span>
                        <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                            doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                            doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P7<span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P7<span>;</span>
                            doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P7<span>;</span>
                            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P7<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>8</span><span>)</span></span></span>
    <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
        doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
        doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P8<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P8<span>;</span>
        doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P8<span>;</span>
        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P8<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
        <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>9</span><span>)</span></span></span>
        <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
            doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
            doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P9<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P9<span>;</span>
            doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P9<span>;</span>
            <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P9<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
            <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>10</span><span>)</span></span></span>
            <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P10<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P10<span>;</span>
                doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P10<span>;</span>
                <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P10<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>11</span><span>)</span></span></span>
                <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                    doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                    doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P11<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P11<span>;</span>
                    doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P11<span>;</span>
                    <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P11<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                    <span><span>#</span><span>if</span> <span><span>(</span>FXAA_QUALITY_PS <span>&gt;</span> <span>12</span><span>)</span></span></span>
                    <span>if</span><span>(</span>doneNP<span>)</span> <span>{</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posN<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> <span>FxaaLuma</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posP<span>.</span>xy<span>)</span><span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> lumaEndN <span>=</span> lumaEndN <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> lumaEndP <span>=</span> lumaEndP <span>-</span> lumaNN <span>*</span> <span>0.5</span><span>;</span>
                        doneN <span>=</span> <span>abs</span><span>(</span>lumaEndN<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                        doneP <span>=</span> <span>abs</span><span>(</span>lumaEndP<span>)</span> <span>&gt;=</span> gradientScaled<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>x <span>-=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P12<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneN<span>)</span> posN<span>.</span>y <span>-=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P12<span>;</span>
                        doneNP <span>=</span> <span>(</span><span>!</span>doneN<span>)</span> <span>||</span> <span>(</span><span>!</span>doneP<span>)</span><span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>x <span>+=</span> offNP<span>.</span>x <span>*</span> FXAA_QUALITY_P12<span>;</span>
                        <span>if</span><span>(</span><span>!</span>doneP<span>)</span> posP<span>.</span>y <span>+=</span> offNP<span>.</span>y <span>*</span> FXAA_QUALITY_P12<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
                    <span>}</span>
                    <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
                <span>}</span>
                <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
            <span>}</span>
            <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
        <span>}</span>
        <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>}</span>
    <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
                        <span>}</span>
                        <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
                    <span>}</span>
                    <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
                <span>}</span>
                <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
            <span>}</span>
            <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
        <span>}</span>
        <span><span>#</span><span>endif</span></span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>}</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> dstN <span>=</span> posM<span>.</span>x <span>-</span> posN<span>.</span>x<span>;</span>
    <span>float</span> dstP <span>=</span> posP<span>.</span>x <span>-</span> posM<span>.</span>x<span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> dstN <span>=</span> posM<span>.</span>y <span>-</span> posN<span>.</span>y<span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> dstP <span>=</span> posP<span>.</span>y <span>-</span> posM<span>.</span>y<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>bool</span> goodSpanN <span>=</span> <span>(</span>lumaEndN <span>&lt;</span> <span>0.0</span><span>)</span> <span>!=</span> lumaMLTZero<span>;</span>
    <span>float</span> spanLength <span>=</span> <span>(</span>dstP <span>+</span> dstN<span>)</span><span>;</span>
    <span>bool</span> goodSpanP <span>=</span> <span>(</span>lumaEndP <span>&lt;</span> <span>0.0</span><span>)</span> <span>!=</span> lumaMLTZero<span>;</span>
    <span>float</span> spanLengthRcp <span>=</span> <span>1.0</span><span>/</span>spanLength<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>bool</span> directionN <span>=</span> dstN <span>&lt;</span> dstP<span>;</span>
    <span>float</span> dst <span>=</span> <span>min</span><span>(</span>dstN<span>,</span> dstP<span>)</span><span>;</span>
    <span>bool</span> goodSpan <span>=</span> directionN <span>?</span> goodSpanN <span>:</span> goodSpanP<span>;</span>
    <span>float</span> subpixG <span>=</span> subpixF <span>*</span> subpixF<span>;</span>
    <span>float</span> pixelOffset <span>=</span> <span>(</span>dst <span>*</span> <span>(</span><span>-</span>spanLengthRcp<span>)</span><span>)</span> <span>+</span> <span>0.5</span><span>;</span>
    <span>float</span> subpixH <span>=</span> subpixG <span>*</span> fxaaQualitySubpix<span>;</span>
<span>/*--------------------------------------------------------------------------*/</span>
    <span>float</span> pixelOffsetGood <span>=</span> goodSpan <span>?</span> pixelOffset <span>:</span> <span>0.0</span><span>;</span>
    <span>float</span> pixelOffsetSubpix <span>=</span> <span>max</span><span>(</span>pixelOffsetGood<span>,</span> subpixH<span>)</span><span>;</span>
    <span>if</span><span>(</span><span>!</span>horzSpan<span>)</span> posM<span>.</span>x <span>+=</span> pixelOffsetSubpix <span>*</span> lengthSign<span>;</span>
    <span>if</span><span>(</span> horzSpan<span>)</span> posM<span>.</span>y <span>+=</span> pixelOffsetSubpix <span>*</span> lengthSign<span>;</span>
    <span>return</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>tex<span>,</span> posM<span>)</span><span>.</span>xyz<span>,</span> lumaM<span>)</span><span>;</span>
<span>}</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span><span>#</span><span>if</span> <span><span>(</span>FXAA_LUMA<span>)</span></span></span>
		<span><span>#</span><span>if</span> <span><span>(</span>FXAA_GREEN_AS_LUMA<span>)</span></span></span>
				gl_FragColor <span>=</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>texture<span>,</span> uv<span>)</span><span>.</span>ggg<span>,</span> <span>1.0</span><span>)</span><span>;</span>
			<span><span>#</span><span>else</span>		</span>
				gl_FragColor <span>=</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>texture<span>,</span> uv<span>)</span><span>.</span>aaa<span>,</span> <span>1.0</span><span>)</span><span>;</span>
		<span><span>#</span><span>endif</span></span>
	<span><span>#</span><span>elif</span> <span><span>(</span>FXAA_ENABLE<span>)</span></span></span>
		gl_FragColor <span>=</span> <span>FxaaPixelShader</span><span>(</span>
			uv<span>,</span> texture<span>,</span> RcpFrame<span>,</span> u_fxaaQualitySubpix<span>,</span> u_fxaaQualityEdgeThreshold<span>,</span> u_fxaaQualityEdgeThresholdMin<span>)</span><span>;</span>
	<span><span>#</span><span>else</span></span>
		gl_FragColor <span>=</span> <span>vec4</span><span>(</span><span>texture2D</span><span>(</span>texture<span>,</span> uv<span>)</span><span>.</span>rgb<span>,</span> <span>1.0</span><span>)</span><span>;</span>
	<span><span>#</span><span>endif</span></span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/FXAA-interactive.js">FXAA-interactive.js</a></summary><pre><code><span>"use strict"</span><span>;</span>
<span>async</span> <span>function</span> <span>loadFrame</span><span>(</span><span>gl<span>,</span> path</span><span>)</span> <span>{</span>
	<span>const</span> response <span>=</span> <span>await</span> <span>fetch</span><span>(</span>path<span>)</span><span>;</span>
	<span>const</span> blob <span>=</span> <span>await</span> response<span>.</span><span>blob</span><span>(</span><span>)</span><span>;</span>
	<span>const</span> bitmap <span>=</span> <span>await</span> <span>createImageBitmap</span><span>(</span>blob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span> <span>}</span><span>)</span><span>;</span>

	<span>const</span> target <span>=</span> gl<span>.</span><span>createTexture</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> target<span>)</span><span>;</span>

	gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_MIN_FILTER</span><span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
	gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_MAG_FILTER</span><span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
	gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_WRAP_S</span><span>,</span> gl<span>.</span><span>CLAMP_TO_EDGE</span><span>)</span><span>;</span>
	gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_WRAP_T</span><span>,</span> gl<span>.</span><span>CLAMP_TO_EDGE</span><span>)</span><span>;</span>

	gl<span>.</span><span>texImage2D</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> <span>0</span><span>,</span> gl<span>.</span><span>RGB</span><span>,</span> gl<span>.</span><span>RGB</span><span>,</span> gl<span>.</span><span>UNSIGNED_BYTE</span><span>,</span> bitmap<span>)</span><span>;</span>

	bitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span>
	<span>return</span> target<span>;</span>
<span>}</span>

<span>async</span> <span>function</span> <span>loadAllFrames</span><span>(</span><span>gl<span>,</span> start<span>,</span> end</span><span>)</span> <span>{</span>
	<span>const</span> framePromises <span>=</span> <span>[</span><span>]</span><span>;</span>
	<span>const</span> totalFrames <span>=</span> end <span>-</span> start <span>+</span> <span>1</span><span>;</span>
	<span>let</span> loadedFrames <span>=</span> <span>0</span><span>;</span>

	<span>const</span> loadingOverlay <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'loading-overlay'</span><span>)</span><span>;</span>

	loadingOverlay<span>.</span>style<span>.</span>display <span>=</span> <span>'flex'</span><span>;</span>
	<span>function</span> <span>updateLoadingProgress</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> percentage <span>=</span> Math<span>.</span><span>floor</span><span>(</span><span>(</span>loadedFrames <span>/</span> totalFrames<span>)</span> <span>*</span> <span>100</span><span>)</span><span>;</span>
		loadingOverlay<span>.</span>innerHTML <span>=</span> <span><span>`</span><span>Loading... </span><span><span>${</span>percentage<span>}</span></span><span>%</span><span>`</span></span><span>;</span>
		<span>if</span> <span>(</span>loadedFrames <span>===</span> totalFrames<span>)</span>
			loadingOverlay<span>.</span>style<span>.</span>display <span>=</span> <span>'none'</span><span>;</span>
	<span>}</span>

	<span>for</span> <span>(</span><span>let</span> i <span>=</span> start<span>;</span> i <span>&lt;=</span> end<span>;</span> i<span>++</span><span>)</span> <span>{</span>
		<span>const</span> path <span>=</span> <span><span>`</span><span>frames/</span><span><span>${</span>i<span>}</span></span><span>.png</span><span>`</span></span><span>;</span>
		<span>const</span> framePromise <span>=</span> <span>loadFrame</span><span>(</span>gl<span>,</span> path<span>)</span><span>.</span><span>then</span><span>(</span><span>texture</span> <span>=&gt;</span> <span>{</span>
			loadedFrames<span>++</span><span>;</span>
			<span>updateLoadingProgress</span><span>(</span><span>)</span><span>;</span>
			<span>return</span> texture<span>;</span>
		<span>}</span><span>)</span><span>;</span>
		framePromises<span>.</span><span>push</span><span>(</span>framePromise<span>)</span><span>;</span>
	<span>}</span>

	<span>const</span> textures <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span>framePromises<span>)</span><span>;</span>
	<span>return</span> textures<span>;</span>
<span>}</span>

<span>function</span> <span>setupFXAAInteractive</span><span>(</span><span>canvasId<span>,</span> simpleVtxSrc<span>,</span> simpleFragSrc<span>,</span> vertexLumaSrc<span>,</span> lumaFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>false</span><span>,</span>
			<span>premultipliedAlpha</span><span>:</span> <span>false</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>let</span> lumaBuffer<span>,</span> lumaTexture<span>,</span> blitBuffer<span>,</span> blitTexture<span>;</span>
	<span>let</span> enableFXAA <span>=</span> <span>true</span><span>;</span>
	<span>let</span> enableRed <span>=</span> <span>true</span><span>;</span>
	<span>let</span> showLuma <span>=</span> <span>false</span><span>;</span>
	<span>let</span> greenLuma <span>=</span> <span>false</span><span>;</span>
	<span>let</span> pause <span>=</span> <span>false</span><span>;</span>
	<span>let</span> fxaaQualityPreset <span>=</span> <span>12</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Passthrough Shader */</span>
	<span>let</span> fxaaShd<span>;</span>
	<span>let</span> rcpFrameLocation<span>;</span>
	<span>let</span> fxaaQualitySubpixLocation<span>;</span>
	<span>let</span> fxaaQualityEdgeThresholdLocation<span>;</span>
	<span>let</span> fxaaQualityEdgeThresholdMinLocation<span>;</span>

	<span>function</span> <span>updateFXAAShader</span><span>(</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>fxaaShd<span>)</span> <span>{</span>
			gl<span>.</span><span>deleteProgram</span><span>(</span>fxaaShd<span>)</span><span>;</span>
		<span>}</span>

		<span>const</span> prefix <span>=</span> <span><span>`</span><span>
        #define FXAA_QUALITY_PRESET </span><span><span>${</span>fxaaQualityPreset<span>}</span></span><span>
        #define FXAA_GREEN_AS_LUMA </span><span><span>${</span>greenLuma <span>?</span> <span>1</span> <span>:</span> <span>0</span><span>}</span></span><span>
        #define FXAA_ENABLE </span><span><span>${</span>enableFXAA <span>?</span> <span>1</span> <span>:</span> <span>0</span><span>}</span></span><span>
        #define FXAA_LUMA </span><span><span>${</span>showLuma <span>?</span> <span>1</span> <span>:</span> <span>0</span><span>}</span></span><span>
	    </span><span>`</span></span><span>;</span>

		fxaaShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleVtxSrc<span>,</span> simpleFragSrc<span>,</span> prefix<span>)</span><span>;</span>

		rcpFrameLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>fxaaShd<span>,</span> <span>"RcpFrame"</span><span>)</span><span>;</span>
		fxaaQualitySubpixLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>fxaaShd<span>,</span> <span>"u_fxaaQualitySubpix"</span><span>)</span><span>;</span>
		fxaaQualityEdgeThresholdLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>fxaaShd<span>,</span> <span>"u_fxaaQualityEdgeThreshold"</span><span>)</span><span>;</span>
		fxaaQualityEdgeThresholdMinLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>fxaaShd<span>,</span> <span>"u_fxaaQualityEdgeThresholdMin"</span><span>)</span><span>;</span>
	<span>}</span>

	<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> lumaShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> vertexLumaSrc<span>,</span> lumaFragSrc<span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>/* Load frames */</span>
	<span>let</span> framesLoaded <span>=</span> <span>false</span><span>;</span>
	<span>let</span> textures <span>=</span> <span>[</span><span>]</span><span>;</span>

	<span>/* Vertex Buffer of a simple Quad with some colors */</span>
	<span>const</span> unitQuad <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>-</span><span>1.0</span><span>,</span> <span>1.0</span><span>,</span>
		<span>1.0</span><span>,</span> <span>1.0</span><span>,</span>
		<span>1.0</span><span>,</span> <span>-</span><span>1.0</span><span>,</span>
		<span>-</span><span>1.0</span><span>,</span> <span>-</span><span>1.0</span><span>,</span>
	<span>]</span><span>)</span><span>;</span>

	<span>const</span> trackedCoords <span>=</span> <span>[</span>
		<span>[</span><span>357.250</span><span>,</span> <span>206.375</span><span>]</span><span>,</span>
		<span>[</span><span>356.602</span><span>,</span> <span>207.301</span><span>]</span><span>,</span>
		<span>[</span><span>356.309</span><span>,</span> <span>207.559</span><span>]</span><span>,</span>
		<span>[</span><span>354.832</span><span>,</span> <span>208.711</span><span>]</span><span>,</span>
		<span>[</span><span>353.121</span><span>,</span> <span>209.863</span><span>]</span><span>,</span>
		<span>[</span><span>350.578</span><span>,</span> <span>211.102</span><span>]</span><span>,</span>
		<span>[</span><span>347.594</span><span>,</span> <span>212.336</span><span>]</span><span>,</span>
		<span>[</span><span>343.457</span><span>,</span> <span>214.652</span><span>]</span><span>,</span>
		<span>[</span><span>338.086</span><span>,</span> <span>216.977</span><span>]</span><span>,</span>
		<span>[</span><span>332.803</span><span>,</span> <span>219.934</span><span>]</span><span>,</span>
		<span>[</span><span>327.791</span><span>,</span> <span>222.625</span><span>]</span><span>,</span>
		<span>[</span><span>324.259</span><span>,</span> <span>224.398</span><span>]</span><span>,</span>
		<span>[</span><span>319.233</span><span>,</span> <span>227.902</span><span>]</span><span>,</span>
		<span>[</span><span>315.627</span><span>,</span> <span>231.492</span><span>]</span><span>,</span>
		<span>[</span><span>315.381</span><span>,</span> <span>233.305</span><span>]</span><span>,</span>
		<span>[</span><span>314.672</span><span>,</span> <span>234.145</span><span>]</span><span>,</span>
		<span>[</span><span>314.616</span><span>,</span> <span>235.363</span><span>]</span><span>,</span>
		<span>[</span><span>315.028</span><span>,</span> <span>236.508</span><span>]</span><span>,</span>
		<span>[</span><span>316.072</span><span>,</span> <span>237.676</span><span>]</span><span>,</span>
		<span>[</span><span>317.366</span><span>,</span> <span>238.301</span><span>]</span><span>,</span>
		<span>[</span><span>317.657</span><span>,</span> <span>239.703</span><span>]</span><span>,</span>
		<span>[</span><span>319.354</span><span>,</span> <span>240.016</span><span>]</span><span>,</span>
		<span>[</span><span>320.018</span><span>,</span> <span>241.277</span><span>]</span><span>,</span>
		<span>[</span><span>321.091</span><span>,</span> <span>241.785</span><span>]</span><span>,</span>
		<span>[</span><span>321.726</span><span>,</span> <span>241.777</span><span>]</span><span>,</span>
		<span>[</span><span>321.824</span><span>,</span> <span>242.117</span><span>]</span><span>,</span>
		<span>[</span><span>322.334</span><span>,</span> <span>242.109</span><span>]</span><span>,</span>
		<span>[</span><span>322.082</span><span>,</span> <span>242.965</span><span>]</span><span>,</span>
		<span>[</span><span>322.100</span><span>,</span> <span>242.965</span><span>]</span>
	<span>]</span><span>;</span>

	<span>function</span> <span>applyTrackingData</span><span>(</span><span>index<span>,</span> location</span><span>)</span> <span>{</span>
		<span>const</span> x <span>=</span> <span>(</span>trackedCoords<span>[</span>index<span>]</span><span>[</span><span>0</span><span>]</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>2</span> <span>-</span> <span>1</span><span>;</span>
		<span>const</span> y <span>=</span> <span>1</span> <span>-</span> <span>(</span>trackedCoords<span>[</span>index<span>]</span><span>[</span><span>1</span><span>]</span> <span>/</span> canvas<span>.</span>height<span>)</span> <span>*</span> <span>2</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>location<span>,</span> x<span>,</span> y<span>)</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>setupBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>lumaBuffer<span>)</span><span>;</span>
		lumaBuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> lumaBuffer<span>)</span><span>;</span>

		lumaTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>,</span> lumaTexture<span>,</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> lumaTexture<span>,</span> <span>0</span><span>)</span><span>;</span>

		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>blitBuffer<span>)</span><span>;</span>
		blitBuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> blitBuffer<span>)</span><span>;</span>

		blitTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>,</span> blitTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> blitTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
	<span>}</span>

	<span>const</span> fxaaCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'fxaaCheck'</span><span>)</span><span>;</span>
	fxaaCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		enableFXAA <span>=</span> fxaaCheckbox<span>.</span>checked<span>;</span>
		<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>
	<span>const</span> redCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'redCheck'</span><span>)</span><span>;</span>
	redCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		enableRed <span>=</span> redCheckbox<span>.</span>checked<span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>
	<span>const</span> pauseCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'pauseCheck'</span><span>)</span><span>;</span>
	pauseCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		pause <span>=</span> <span>!</span>pauseCheckbox<span>.</span>checked<span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>
	<span>const</span> lumaCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'lumaCheck'</span><span>)</span><span>;</span>
	lumaCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		showLuma <span>=</span> lumaCheckbox<span>.</span>checked<span>;</span>
		<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>
	<span>const</span> greenCheckbox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'greenCheck'</span><span>)</span><span>;</span>
	greenCheckbox<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
		greenLuma <span>=</span> greenCheckbox<span>.</span>checked<span>;</span>
		<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* FXAA Parameters */</span>
	<span>const</span> fxaaQualityPresetSelect <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'FXAA_QUALITY_PRESET'</span><span>)</span><span>;</span>
	fxaaQualityPresetSelect<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		fxaaQualityPreset <span>=</span> <span>parseInt</span><span>(</span>fxaaQualityPresetSelect<span>.</span>value<span>)</span><span>;</span>
		<span>updateFXAAShader</span><span>(</span><span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>let</span> fxaaQualitySubpix <span>=</span> <span>0.75</span><span>;</span>
	<span>let</span> fxaaQualityEdgeThreshold <span>=</span> <span>0.166</span><span>;</span>
	<span>let</span> fxaaQualityEdgeThresholdMin <span>=</span> <span>0.0833</span><span>;</span>

	<span>const</span> fxaaQualitySubpixRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'fxaaQualitySubpixRange'</span><span>)</span><span>;</span>
	<span>const</span> fxaaQualityEdgeThresholdRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'fxaaQualityEdgeThresholdRange'</span><span>)</span><span>;</span>
	<span>const</span> fxaaQualityEdgeThresholdMinRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'fxaaQualityEdgeThresholdMinRange'</span><span>)</span><span>;</span>

	fxaaQualitySubpixRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		fxaaQualitySubpix <span>=</span> <span>parseFloat</span><span>(</span>fxaaQualitySubpixRange<span>.</span>value<span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	fxaaQualityEdgeThresholdRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		fxaaQualityEdgeThreshold <span>=</span> <span>parseFloat</span><span>(</span>fxaaQualityEdgeThresholdRange<span>.</span>value<span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	fxaaQualityEdgeThresholdMinRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		fxaaQualityEdgeThresholdMin <span>=</span> <span>parseFloat</span><span>(</span>fxaaQualityEdgeThresholdMinRange<span>.</span>value<span>)</span><span>;</span>
		<span>redraw</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>

	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	canvas<span>.</span>width <span>=</span> <span>684</span><span>;</span>
	canvas<span>.</span>height <span>=</span> <span>480</span><span>;</span>

	gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>684</span><span>,</span> <span>480</span><span>)</span><span>;</span>

	<span>const</span> fps <span>=</span> <span>30</span><span>;</span>
	<span>const</span> frameDuration <span>=</span> <span>1000</span> <span>/</span> fps<span>;</span>
	<span>const</span> waitBetweenFramesMs <span>=</span> <span>1000</span><span>;</span>
	<span>let</span> frameIndex <span>=</span> <span>0</span><span>;</span>
	<span>let</span> lastFrameTime <span>=</span> <span>0</span><span>;</span>
	<span>let</span> forward <span>=</span> <span>true</span><span>;</span>
	<span>let</span> delayActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span><span>!</span>isRendering <span>||</span> redrawActive <span>||</span> <span>!</span>framesLoaded<span>)</span>
			<span>return</span><span>;</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> lumaBuffer<span>)</span><span>;</span>
		gl<span>.</span><span>disable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> textures<span>[</span>frameIndex<span>]</span><span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>lumaShd<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw To Screen */</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> blitBuffer<span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> lumaTexture<span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>fxaaShd<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		
		<span>/* FXAA Arguments */</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>rcpFrameLocation<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>fxaaQualitySubpixLocation<span>,</span> fxaaQualitySubpix<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>fxaaQualityEdgeThresholdLocation<span>,</span> fxaaQualityEdgeThreshold<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>fxaaQualityEdgeThresholdMinLocation<span>,</span> fxaaQualityEdgeThresholdMin<span>)</span><span>;</span>

		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> blitTexture<span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		<span>applyTrackingData</span><span>(</span>frameIndex<span>,</span> offsetLocationPost<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> canvas<span>.</span>width <span>/</span> canvas<span>.</span>height <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>)</span><span>;</span>
		<span>applyTrackingData</span><span>(</span>frameIndex<span>,</span> offsetLocationRed<span>)</span><span>;</span>
		<span>if</span> <span>(</span>enableRed<span>)</span>
			gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span>enableRed<span>)</span>
			gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>const</span> elapsed <span>=</span> time <span>-</span> lastFrameTime<span>;</span>
			<span>if</span> <span>(</span>elapsed <span>&gt;=</span> frameDuration<span>)</span> <span>{</span>
				lastFrameTime <span>=</span> time <span>-</span> <span>(</span>elapsed <span>%</span> frameDuration<span>)</span><span>;</span>
				<span>redraw</span><span>(</span><span>)</span><span>;</span>

				<span>if</span> <span>(</span>forward<span>)</span> <span>{</span>
					<span>if</span> <span>(</span><span>!</span>pause<span>)</span>
						frameIndex<span>++</span><span>;</span>
					<span>if</span> <span>(</span>frameIndex <span>==</span> <span>29</span><span>)</span> <span>{</span>
						frameIndex <span>=</span> <span>28</span><span>;</span>
						forward <span>=</span> <span>false</span><span>;</span>

						<span>if</span> <span>(</span><span>!</span>delayActive<span>)</span> <span>{</span>
							delayActive <span>=</span> <span>true</span><span>;</span>
							<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
								delayActive <span>=</span> <span>false</span><span>;</span>
								<span>if</span> <span>(</span>isRendering<span>)</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
							<span>}</span><span>,</span> waitBetweenFramesMs<span>)</span><span>;</span>
							<span>return</span><span>;</span>
						<span>}</span>
					<span>}</span>
				<span>}</span> <span>else</span> <span>{</span>
					<span>if</span><span>(</span><span>!</span>pause<span>)</span>
						frameIndex<span>--</span><span>;</span>
					<span>if</span> <span>(</span>frameIndex <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>
						forward <span>=</span> <span>true</span><span>;</span>
						frameIndex <span>=</span> <span>0</span><span>;</span>

						<span>if</span> <span>(</span><span>!</span>delayActive<span>)</span> <span>{</span>
							delayActive <span>=</span> <span>true</span><span>;</span>
							<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
								delayActive <span>=</span> <span>false</span><span>;</span>
								<span>if</span> <span>(</span>isRendering<span>)</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
							<span>}</span><span>,</span> waitBetweenFramesMs<span>)</span><span>;</span>
							<span>return</span><span>;</span>
						<span>}</span>
					<span>}</span>
				<span>}</span>
			<span>}</span>

			<span>if</span> <span>(</span><span>!</span>delayActive<span>)</span> <span>{</span>
				<span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
			<span>}</span>
		<span>}</span>
	<span>}</span>

	<span>async</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		<span>for</span> <span>(</span><span>const</span> entry <span>of</span> entries<span>)</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>{</span>
					<span>/* Start rendering, when canvas visible */</span>
					isRendering <span>=</span> <span>true</span><span>;</span>

					<span>/* Load all frames and await the result */</span>
					textures <span>=</span> <span>await</span> <span>loadAllFrames</span><span>(</span>gl<span>,</span> <span>0</span><span>,</span> <span>28</span><span>)</span><span>;</span>
					<span>setupBuffers</span><span>(</span><span>)</span><span>;</span>
					framesLoaded <span>=</span> <span>true</span><span>;</span>

					<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
				<span>}</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>/* Stop another redraw being called */</span>
				isRendering <span>=</span> <span>false</span><span>;</span>
				<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
					<span>/* Spin on draw calls being processed. To simplify sync.
					   In reality, this code block is never reached, but just
					   in case, we have this here. */</span>
				<span>}</span>
				<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
				gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>
				<span>/* Delete the textures to free up memory */</span>
				<span>if</span> <span>(</span>framesLoaded<span>)</span> <span>{</span>
					textures<span>.</span><span>forEach</span><span>(</span><span>texture</span> <span>=&gt;</span> <span>{</span>
						gl<span>.</span><span>deleteTexture</span><span>(</span>texture<span>)</span><span>;</span>
					<span>}</span><span>)</span><span>;</span>
					gl<span>.</span><span>deleteTexture</span><span>(</span>lumaTexture<span>)</span><span>;</span>
					gl<span>.</span><span>deleteFramebuffer</span><span>(</span>lumaBuffer<span>)</span><span>;</span>
					gl<span>.</span><span>deleteTexture</span><span>(</span>blitTexture<span>)</span><span>;</span>
					gl<span>.</span><span>deleteFramebuffer</span><span>(</span>blitBuffer<span>)</span><span>;</span>
					textures <span>=</span> <span>[</span><span>]</span><span>;</span>
					framesLoaded <span>=</span> <span>false</span><span>;</span>
				<span>}</span>
			<span>}</span>
		<span>}</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p>Just looking at the <a href="https://github.com/FrostKiwi/treasurechest/blob/main/posts/analytical-anti-aliasing/FXAA-3.11.glsl">full FXAA 3.11 source</a>, you can see the passion in every line. Portable <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L611">across OpenGL and DirectX</a>, a <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L716">PC version</a>, a <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L1341">XBOX 360</a> version, two finely optimized <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L1437">PS3 version</a> fighting for every GPU cycle, <a href="https://github.com/FrostKiwi/treasurechest/blob/e7f29c27c034b02a1af18e162c1b779d999ccbd4/posts/analytical-anti-aliasing/FXAA-3.11.glsl#L1450">including shader disassambly</a>. Such level of professionalism and dedication, shared with the world in plain text.</p><blockquote><p>The sharing and openness is why I'm in love with graphics programming.</p><img src="https://blog.frost.kiwi/assets/kiwis/love.svg"></blockquote><p>It may be performance cheap, but only if you already have post-processing in place or do <a href="https://en.wikipedia.org/wiki/Deferred_shading">deferred shading</a>. Especially in mobile graphics, memory access is expensive, so saving the framebuffer to perform post processing is not always a given. If you need to setup render-to-texture in order to have FXAA, then the “F” in FXAA evaporates.</p><p>In this article we won’t jump into modern <a href="https://sugulee.wordpress.com/2021/06/21/temporal-anti-aliasingtaa-tutorial/">temporal anti-aliasing</a>, but before FXAA was even developed, <a href="https://x.com/NOTimothyLottes/status/1756732098402992584">TAA was already experimented</a> with. In fact, FXAA was supposed to <a href="https://web.archive.org/web/20120120082725/http://timothylottes.blogspot.com/2011/12/fxaa-40-stills-and-features.html">get a new version 4</a> and <a href="https://web.archive.org/web/20120120070945/http://timothylottes.blogspot.com/2011/12/big-fxaa-update-soon.html">incorporate temporal anti aliasing</a> in addition <a href="https://web.archive.org/web/20120120072820/http://timothylottes.blogspot.com/2011/12/fxaa-40-will-have-new-spatial-only.html">to the standard spatial one</a>, but instead it evolved further and rebranded into <a href="https://web.archive.org/web/20210116205348/https://www.nvidia.com/en-gb/geforce/technologies/txaa/technology/">TXAA</a>.</p><h2 id="analytical-anti-aliasing" tabindex="-1">Analytical Anti Aliasing <a href="#analytical-anti-aliasing">#</a></h2><p>Now we get to the good stuff. Analytical Anti-Aliasing approaches the problem backwards - it knows the shape you need and draws the pixel already Anti-Aliased to the screen. Whilst drawing the 2D or 3D shape you need, it fades the shape’s border by exactly one pixel.</p><div><p> <label for="nativeAnalytical">Native<p>Resolution</p></label></p><p> <label for="halfAnalytical">½<p>Resolution</p></label></p><p> <label for="quarterAnalytical">¼<p>Resolution</p></label></p><p> <label for="eightAnalytical">⅛<p>Resolution</p></label></p></div><div><p> <label for="1pxAAA"><p>edge smoothing</p></label></p><p> <label for="sqrt2pxAAA"><p>edge smoothing</p></label></p></div><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/analytical.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/analytical.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.vs">circle-analytical.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>attribute</span> <span>vec3</span> col<span>;</span>

<span>/* The coordinates that will be used to for our drawing operations */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* Color for the fragment shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>/* Fragment shader needs to know the pixel size and since we mess with the quad
   to expand it by 1 pixel to not change the final pixel size, we need to give
   the fragment shader the corrected pixel size */</span>
<span>varying</span> <span>float</span> pixelSizeAdjusted<span>;</span>

<span>/* Aspect ratio */</span>
<span>uniform</span> <span>float</span> aspect_ratio<span>;</span>
<span>/* Position offset for the animation */</span>
<span>uniform</span> <span>vec2</span> offset<span>;</span>
<span>/* Size of the Unit Quad */</span>
<span>uniform</span> <span>float</span> size<span>;</span>
<span>/* Pixel size in regards to the Quad */</span>
<span>uniform</span> <span>float</span> pixelSize<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* Assign the verticies to be used as the distance field for drawing. This
	   will be linearly interpolated before going to the fragment shader */</span>
	uv <span>=</span> vtx<span>;</span>
	<span>/* Sending some nice color to the fragment shader */</span>
	color <span>=</span> col<span>;</span>

	<span>vec2</span> vertex <span>=</span> vtx<span>;</span>
	<span>/* correct for aspect ratio  */</span>
	vertex<span>.</span>x <span>*=</span> aspect_ratio<span>;</span>
	<span>/* Grow the Quad and thus the "canvas", that the circle is drawn on. The
	   pixelSize is added for two reasons: 0.5px to get the original circle size
	   again, as the AAA fading is set to fade the edge on the circle inside,
	   preventing hard edges due to unrasterized pixels. And another 0.5px is
	   to correct the "breathing room" added in the fragment shader,
	   specifically for the MSAA sampling case, as hardware specific issues
	   around MSAA sampling may or may not result in transparent pixels
	   disappearing too soon. */</span>
	vertex <span>*=</span> size <span>+</span> pixelSize<span>;</span>
	<span>/* Calculate the true pixel size, after we messed with the quad's size */</span>
	pixelSizeAdjusted <span>=</span> pixelSize <span>/</span> <span>(</span>size <span>+</span> pixelSize<span>)</span><span>;</span>
	<span>/* Make the circle move in a circle, heh :] */</span>
	vertex <span>+=</span> offset<span>;</span>

	<span>/* Vertex Output */</span>
	gl_Position <span>=</span> <span>vec4</span><span>(</span>vertex<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.fs">circle-analytical.fs</a></summary><pre><code><span>precision</span> <span>mediump</span> <span>float</span><span>;</span>
<span>/* uv coordinates from the vertex shader */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* color from the vertex shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>/* pixel size from the vertex shader, corrected for influence of size changes */</span>
<span>varying</span> <span>float</span> pixelSizeAdjusted<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span>/* Our signed distance field of a point */</span>
	<span>float</span> dist <span>=</span> <span>length</span><span>(</span>uv<span>)</span><span>;</span>

	<span>/* We add half a pixel of breathing room. This is only required for the MSAA
	   case. Depending on Hardware implementation, rasterization, MSAA sample
	   count and placement, one row pixels may or may not disappear too soon,
	   when the circle's edge is right up against the unit quad's border */</span>
	dist <span>+=</span> pixelSizeAdjusted <span>*</span> <span>0.5</span><span>;</span>
	
	<span>/* Fade out the pixels near the edge of the circle with exactly the size of
	   one pixel, so we get pixel perfect Anti-Aliasing. */</span>
	<span>float</span> alpha <span>=</span> <span>(</span><span>1.0</span> <span>-</span> dist<span>)</span> <span>/</span> pixelSizeAdjusted<span>;</span>

	<span>/* Clamped and scaled uv.y added to color simply to make the bottom of the
	   circle white, so the contrast is high and you can see strong aliasing */</span>
    gl_FragColor <span>=</span> <span>vec4</span><span>(</span>color <span>+</span> <span>clamp</span><span>(</span> <span>-</span> uv<span>.</span>y <span>*</span> <span>0.4</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>,</span> alpha<span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleAnalytical.js">circleAnalytical.js</a></summary><pre><code><span>function</span> <span>setupAnalytical</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName<span>,</span> radioSmoothSize</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> circleDrawFramebuffer<span>,</span> frameTexture<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>let</span> pixelSmoothSize <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Smooth Size */</span>
	<span>const</span> radiosSmooth <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioSmoothSize<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radiosSmooth<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			pixelSmoothSize <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> pixelSizeCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"pixelSize"</span><span>)</span><span>;</span>
	<span>const</span> sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelSizeCircle<span>,</span> <span>(</span><span>2.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span> <span>*</span> pixelSmoothSize<span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><p>Always smooth without artifacts and you can adjust the amount of filtering. Preserves shape even at low resolutions. No extra buffers or extra hardware requirements.</p><blockquote><p>Even runs on basic WebGL 1.0 or OpenGLES 2.0, without any extensions.</p><img src="https://blog.frost.kiwi/assets/kiwis/party.svg"></blockquote><p>With the above buttons, you can set the smoothing to be equal to one pixel. This gives a sharp result, but comes with the caveat that axis-aligned 90° sides may still be perseved as “flat” in specific combinations of screen resolution, size and circle position.</p><p>Filtering based on the diagonal pixel size of <code>√2 px = 1.4142...</code>, ensures the “tip” of the circle in axis-aligned pixel rows and columns is always non-opaque. This removes the perception of flatness, but makes it shape ever so slightly more blurry.</p><blockquote><p>Or in other words: as soon as the border has an opaque pixel, there is already a transparent pixel "in front" of it.</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>This style of Anti-Aliasing is <a href="http://www.numb3r23.net/2015/08/17/using-fwidth-for-distance-based-anti-aliasing/">usually implemented</a> with 3 ingredients:</p><ul><li>Enabled <a href="https://gamedev.stackexchange.com/a/130933">Screen Space Derivative</a> extension or having a modern graphics context</li><li>Pixel-size calculated via <a href="https://docs.gl/sl4/length"><code>length</code></a>+<a href="https://docs.gl/sl4/dFdx"><code>dFdx</code></a>+<a href="https://docs.gl/sl4/dFdy"><code>dFdy</code></a> or approximated with <a href="https://docs.gl/sl4/fwidth"><code>fwidth</code></a></li><li>Blending with <a href="https://en.wikipedia.org/wiki/Smoothstep"><code>smoothstep</code></a></li></ul><p>But if you look at the code box above, you will find <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.fs">circle-analytical.fs</a> having <strong>none</strong> of those. And this is the secret sauce we will look at. Before we dive into the implementation, let’s clear the elephants in the room…</p><h3 id="what-even-is-%E2%80%9Canalytical%E2%80%9D%3F" tabindex="-1">What even <em>is</em> “Analytical”? <a href="#what-even-is-%E2%80%9Canalytical%E2%80%9D%3F">#</a></h3><p>In graphics programming, <em>Analytical</em> refers to effects created by knowing the make-up of the intended shape beforehand and performing calculations against the rigid mathematical definition of said shape. This term is used <strong><em>very</em></strong> loosely across computer graphics, similar to super sampling referring to multiple things, depending on context.</p><blockquote><p>A picture is worth a thousand words...</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/lastOfUs.jpg" alt="Character soft-shadow from stretched spheres in The Last Of Us."><figcaption>Character soft-shadow from stretched spheres in The Last Of Us.<br><a href="http://miciwan.com/SIGGRAPH2013/Lighting%20Technology%20of%20The%20Last%20Of%20Us.pdf">Lighting Technology of "The Last Of Us"</a>, Siggraph 2013 talk by <a href="http://miciwan.com/">Michał Iwanicki</a></figcaption></figure><p>Very soft soft-shadows which include <a href="http://wscg.zcu.cz/WSCG2012/short/B37-full.pdf">contact-hardening</a>, implemented by algorithms like <a href="https://developer.download.nvidia.com/shaderlibrary/docs/shadow_PCSS.pdf">percentage-closer soft shadows</a> are very computationally intense and require both high resolution shadow maps and/or very aggressive filtering to not produce shimmering during movement.</p><p>This is why <a href="https://en.wikipedia.org/wiki/Naughty_Dog">Naughty Dog</a>’s <a href="https://en.wikipedia.org/wiki/The_Last_of_Us">The Last of Us</a> relied on getting soft-shadows on the main character by calculating the shadow from a rigidly defined formula of a stretched sphere, multiple of which were arranged in the shape of the main character, shown in red. An improved implementation with shader code can be seen in this <a href="https://www.shadertoy.com/view/3stcD4">Shadertoy demo</a> by <a href="https://www.shadertoy.com/user/romainguy">romainguy</a>, with the more modern <a href="https://en.wikipedia.org/wiki/Capsule_(geometry)">capsule</a>, as opposed a stretched sphere.</p><p>This is now an integral part of modern game engines, <a href="http://dev.epicgames.com/documentation/en-us/unreal-engine/capsule-shadows-overview-in-unreal-engine">like Unreal</a>. As opposed to <a href="https://learnopengl.com/Advanced-Lighting/Shadows/Shadow-Mapping">standard shadow mapping</a>, we don’t render the scene from the perspective of the light with finite resolution. We evaluate the shadow <em>per-pixel</em> against the mathematical equation of the stretched sphere or capsule. This makes capsule shadows <strong><em>analytical</em></strong>.</p><blockquote><p>A video is worth a thousand words, 30 times a second.</p><img src="https://blog.frost.kiwi/assets/kiwis/laugh.svg"></blockquote><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/capsule-lastofus_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/capsule-lastofus.mp4" type="video/mp4"></video><figcaption>Capsule representation of characters in The Last of Us Part II<br><a href="https://www.youtube.com/watch?v=1J6aAHLCbWg">YouTube Video</a> by <a href="https://www.youtube.com/@MaxLebled_ALT">"Max Lebled's 2nd channel"</a></figcaption></figure><p>Staying with the Last of Us, <a href="https://en.wikipedia.org/wiki/The_Last_of_Us_Part_II">The Last of Us Part II</a> uses the same logic for blurry real-time reflections of the main character, where <a href="https://lettier.github.io/3d-game-shaders-for-beginners/screen-space-reflection.html">Screen Space Reflections</a> aren’t defined. Other options like <a href="https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@8.2/manual/Ray-Traced-Reflections.html">raytracing against the scene</a>, or using a <a href="https://www.adriancourreges.com/blog/2015/11/02/gta-v-graphics-study/#environment-cubemap">real-time cubemap</a> like in <a href="https://en.wikipedia.org/wiki/Grand_Theft_Auto_V">GTA V</a> are either noisy and low resolution or high resolution, but low performance.</p><p>Here the reflection calculation is part of the material shader, rendering against the rigidly defined mathematical shape of the capsule <em>per-pixel</em>, multiple of which are arranged in the shape of the main character. This makes capsule reflections <strong><em>analytical</em></strong>.</p><blockquote><p>An online demo with is worth at least a million...<br>...yeah the joke is getting old.</p><img src="https://blog.frost.kiwi/assets/kiwis/facepalm.svg"></blockquote><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/analytical.png" alt=""><figcaption><a href="https://www.shadertoy.com/view/4djSDy">Shadertoy demo</a> for Analytical Ambient Occlusion by <a href="https://iquilezles.org/">Inigo Quilez</a></figcaption></figure><p><a href="https://learnopengl.com/Advanced-Lighting/SSAO">Ambient Occlusion</a> is essential in modern rendering, bringing contact shadows and approximating global illumination. Another topic as deep as the ocean, with so many implementations. Usually implemented by some form of “raytrace a bunch of rays and blur the result”.</p><p>In this <a href="https://www.shadertoy.com/view/4djSDy">Shadertoy demo</a>, the floor is evaluated <em>per-pixel</em> against the rigidly defined mathematical description of the sphere to get a soft, non-noisy, non-flickering occlusion contribution from the hovering ball. This implementation is <strong><em>analytical</em></strong>. Not just spheres, there are <a href="https://research.nvidia.com/sites/default/files/pubs/2010-06_Ambient-Occlusion-Volumes/McGuire10AOV.pdf">analytical approaches</a> also for complex geometry.</p><p>By extension, Unreal Engine has distance field approaches for <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/distance-field-soft-shadows-in-unreal-engine">Soft Shadows</a> and <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/using-distance-field-ambient-occlusion-in-unreal-engine">Ambient Occlusion</a>, though one may argue, that this type of signed distance field rendering doesn’t fit the description of <em>analytical</em>, considering the distance field is precalculated into a 3D texture.</p><h3 id="implementation" tabindex="-1">Implementation <a href="#implementation">#</a></h3><p>Let’s dive into the sauce. We work with <a href="https://www.youtube.com/watch?v=62-pRVZuS5c">signed distance fields</a>, where for every point that we sample, we know the distance to the desired shape. This information may be baked into a texture as done for <a href="https://github.com/Chlumsky/msdf-atlas-gen">SDF text rendering</a> or maybe be derived <em>per-pixel</em> from a mathematical formula for simpler shapes like <a href="https://iquilezles.org/articles/distfunctions2d/">bezier curves or hearts</a>.</p><p>Based on that distance we fade out the border of the shape. If we fade by the size of one pixel, we get perfectly smooth edges, without any strange side effects. The secret sauce is in the implementation and <a href="https://www.youtube.com/watch?v=bRL8v6--bW4">under the sauce</a> is where the magic is. <em>How</em> does the shader know the size of pixel? <em>How</em> do we blend based on distance?</p><blockquote><p>This approach gives motion-stable pixel-perfection, but doesn't work with traditional rasterization. The <b>full</b> shape requires a signed distance field.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><div><p> <label for="nativeCompare">Native<p>Resolution</p></label></p><p> <label for="halfCompare">½<p>Resolution</p></label></p><p> <label for="quarterCompare">¼<p>Resolution</p></label></p><p> <label for="eightCompare">⅛<p>Resolution</p></label></p></div><table><tbody><tr><td colspan="4"><code>Pixel&nbsp;size&nbsp;method</code></td></tr><tr><td><code>Pixel&nbsp;size&nbsp;method</code></td><td colspan="2"></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>Blend&nbsp;method</code></td></tr><tr><td><code>Blend&nbsp;method</code></td><td colspan="2"></td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>Smoothing</code></td></tr><tr><td><code>Smoothing</code></td><td></td><td><output id="SmoothingPxValue">1.0</output>px</td><td></td></tr><tr><td colspan="4"></td></tr><tr><td colspan="4"><code>Radius&nbsp;adjust&nbsp;</code></td></tr><tr><td><code>Radius&nbsp;adjust&nbsp;</code></td><td></td><td><output id="ShrinkAmountValue">0.0</output>px</td><td></td></tr><tr><td colspan="4"></td></tr></tbody></table><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/analytical.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/analytical.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.vs">circle-analytical.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>attribute</span> <span>vec3</span> col<span>;</span>

<span>/* The coordinates that will be used to for our drawing operations */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* Color for the fragment shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>/* Fragment shader needs to know the pixel size and since we mess with the quad
   to expand it by 1 pixel to not change the final pixel size, we need to give
   the fragment shader the corrected pixel size */</span>
<span>varying</span> <span>float</span> pixelSizeAdjusted<span>;</span>

<span>/* Aspect ratio */</span>
<span>uniform</span> <span>float</span> aspect_ratio<span>;</span>
<span>/* Position offset for the animation */</span>
<span>uniform</span> <span>vec2</span> offset<span>;</span>
<span>/* Size of the Unit Quad */</span>
<span>uniform</span> <span>float</span> size<span>;</span>
<span>/* Pixel size in regards to the Quad */</span>
<span>uniform</span> <span>float</span> pixelSize<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* Assign the verticies to be used as the distance field for drawing. This
	   will be linearly interpolated before going to the fragment shader */</span>
	uv <span>=</span> vtx<span>;</span>
	<span>/* Sending some nice color to the fragment shader */</span>
	color <span>=</span> col<span>;</span>

	<span>vec2</span> vertex <span>=</span> vtx<span>;</span>
	<span>/* correct for aspect ratio  */</span>
	vertex<span>.</span>x <span>*=</span> aspect_ratio<span>;</span>
	<span>/* Grow the Quad and thus the "canvas", that the circle is drawn on. The
	   pixelSize is added for two reasons: 0.5px to get the original circle size
	   again, as the AAA fading is set to fade the edge on the circle inside,
	   preventing hard edges due to unrasterized pixels. And another 0.5px is
	   to correct the "breathing room" added in the fragment shader,
	   specifically for the MSAA sampling case, as hardware specific issues
	   around MSAA sampling may or may not result in transparent pixels
	   disappearing too soon. */</span>
	vertex <span>*=</span> size <span>+</span> pixelSize<span>;</span>
	<span>/* Calculate the true pixel size, after we messed with the quad's size */</span>
	pixelSizeAdjusted <span>=</span> pixelSize <span>/</span> <span>(</span>size <span>+</span> pixelSize<span>)</span><span>;</span>
	<span>/* Make the circle move in a circle, heh :] */</span>
	vertex <span>+=</span> offset<span>;</span>

	<span>/* Vertex Output */</span>
	gl_Position <span>=</span> <span>vec4</span><span>(</span>vertex<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analyticalCompare.fs">circle-analyticalCompare.fs</a></summary><pre><code><span><span>#</span><span>if</span> <span><span>defined</span><span>(</span>FWIDTH<span>)</span> <span>||</span> <span>defined</span><span>(</span>DFD<span>)</span></span></span>
	<span><span>#</span><span>extension</span> <span>GL_OES_standard_derivatives <span>:</span> enable</span></span>
<span><span>#</span><span>endif</span></span>

<span>precision</span> <span>mediump</span> <span>float</span><span>;</span>
<span>/* uv coordinates from the vertex shader */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>/* color from the vertex shader */</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>/* pixel size from the vertex shader, corrected for resizing */</span>
<span>varying</span> <span>float</span> pixelSizeAdjusted<span>;</span>
<span>/* How many pixels to shrink */</span>
<span>uniform</span> <span>float</span> shrinkAmount<span>;</span>
<span>/* How many pixels to smooth */</span>
<span>uniform</span> <span>float</span> smoothingAmount<span>;</span>

<span>/* Step function with Linear Interpolation, instead of Hermite Interpolation */</span>
<span>float</span> <span>linearstep</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>return</span> <span>clamp</span><span>(</span><span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span>

<span>/* Step function with Linear Interpolation, but no clamping */</span>
<span>float</span> <span>linearstepNoclamp</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>return</span> <span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>;</span>
<span>}</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span>/* The basic signed distance field of a point */</span>
	<span>float</span> dist <span>=</span> <span>length</span><span>(</span>uv<span>)</span><span>;</span>
	
	<span>/* Pixel size method */</span>
	<span><span>#</span><span>if</span> <span><span>defined</span><span>(</span>SIMPLE<span>)</span></span></span>
	    <span>float</span> pixelSize <span>=</span> pixelSizeAdjusted<span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>DFD<span>)</span></span></span>
	    <span>float</span> pixelSize <span>=</span> <span>length</span><span>(</span><span>vec2</span><span>(</span><span>dFdx</span><span>(</span>dist<span>)</span><span>,</span> <span>dFdy</span><span>(</span>dist<span>)</span><span>)</span><span>)</span><span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>FWIDTH<span>)</span></span></span>
	    <span>float</span> pixelSize <span>=</span> <span>fwidth</span><span>(</span>dist<span>)</span><span>;</span>
	<span><span>#</span><span>endif</span></span>

	<span>/* Radius Adjust */</span>
	dist <span>+=</span> pixelSize <span>*</span> shrinkAmount<span>;</span>

	<span>/* Blend method */</span>	
	<span><span>#</span><span>if</span> <span><span>defined</span><span>(</span>DIVISION<span>)</span></span></span>
	    <span>float</span> alpha <span>=</span> <span>(</span><span>1.0</span> <span>-</span> dist<span>)</span> <span>/</span> <span>(</span>pixelSize <span>*</span> smoothingAmount<span>)</span><span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>SMOOTHSTEP<span>)</span></span></span>
	    <span>float</span> alpha <span>=</span> <span>smoothstep</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>LINSTEP<span>)</span></span></span>
	    <span>float</span> alpha <span>=</span> <span>linearstep</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span>
	<span><span>#</span><span>elif</span> <span><span>defined</span><span>(</span>LINSTEP_NO_CLAMP<span>)</span></span></span>
	    <span>float</span> alpha <span>=</span> <span>linearstepNoclamp</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span>
	<span><span>#</span><span>endif</span></span>

	<span>/* Clamped and scaled uv.y added to color simply to make the bottom of the
	   circle white, so the contrast is high and you can see strong aliasing */</span>
    gl_FragColor <span>=</span> <span>vec4</span><span>(</span>color <span>+</span> <span>clamp</span><span>(</span> <span>-</span> uv<span>.</span>y <span>*</span> <span>0.4</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>,</span> alpha<span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleAnalyticalComparison.js">circleAnalyticalComparison.js</a></summary><pre><code><span>function</span> <span>setupAnalyticalComparison</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>,</span> radioName</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> circleDrawFramebuffer<span>,</span> frameTexture<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>let</span> shrinkAmount <span>=</span> <span>1</span><span>;</span>
	<span>let</span> smoothingAmount <span>=</span> <span>1</span><span>;</span>
	<span>let</span> pixelSizeMethod <span>=</span> <span>"SIMPLE"</span><span>;</span>
	<span>let</span> blendMethod <span>=</span> <span>"DIVISION"</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>let</span> DerivativesExtension <span>=</span> gl<span>.</span><span>getExtension</span><span>(</span><span>'OES_standard_derivatives'</span><span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>const</span> pixelSizeMethodSwitch <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'pixelSizeMethod'</span><span>)</span><span>;</span>
	pixelSizeMethodSwitch<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		pixelSizeMethod <span>=</span> pixelSizeMethodSwitch<span>.</span>value<span>;</span>
		<span>updateShader</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>const</span> blendMethodSwitch <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'BLENDMETHOD'</span><span>)</span><span>;</span>
	blendMethodSwitch<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		blendMethod <span>=</span> blendMethodSwitch<span>.</span>value<span>;</span>
		<span>updateShader</span><span>(</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>const</span> SmoothingPxRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'SmoothingPxRange'</span><span>)</span><span>;</span>
	<span>const</span> ShrinkAmountRange <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'ShrinkAmountRange'</span><span>)</span><span>;</span>

	SmoothingPxRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		smoothingAmount <span>=</span> SmoothingPxRange<span>.</span>value<span>;</span>
	<span>}</span><span>)</span><span>;</span>
	ShrinkAmountRange<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
		shrinkAmount <span>=</span> <span>-</span>ShrinkAmountRange<span>.</span>value<span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>let</span> circleShd<span>;</span>
	<span>let</span> aspect_ratioLocation<span>;</span>
	<span>let</span> offsetLocationCircle<span>;</span>
	<span>let</span> shrinkAmountLocation<span>;</span>
	<span>let</span> smoothingAmountLocation<span>;</span>
	<span>let</span> pixelSizeCircle<span>;</span>
	<span>let</span> sizeLocationCircle<span>;</span>

	<span>function</span> <span>updateShader</span><span>(</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>circleShd<span>)</span> <span>{</span>
			gl<span>.</span><span>deleteProgram</span><span>(</span>circleShd<span>)</span><span>;</span>
		<span>}</span>

		<span>const</span> prefix <span>=</span> <span><span>`</span><span>
        #define </span><span><span>${</span>pixelSizeMethod<span>}</span></span><span>
        #define </span><span><span>${</span>blendMethod<span>}</span></span><span>
	    </span><span>`</span></span><span>;</span>

		circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> prefix<span>)</span><span>;</span>

		aspect_ratioLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
		offsetLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
		shrinkAmountLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"shrinkAmount"</span><span>)</span><span>;</span>
		smoothingAmountLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"smoothingAmount"</span><span>)</span><span>;</span>
		pixelSizeCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"pixelSize"</span><span>)</span><span>;</span>
		sizeLocationCircle <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"size"</span><span>)</span><span>;</span>
	<span>}</span>
	<span>updateShader</span><span>(</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>/* Simple Red Box */</span>
	<span>const</span> redShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> redVtxSrc<span>,</span> redFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>
	<span>const</span> aspect_ratioLocationRed <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"aspect_ratio"</span><span>)</span><span>;</span>
	<span>const</span> thicknessLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"thickness"</span><span>)</span><span>;</span>
	<span>const</span> pixelsizeLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>redShd<span>,</span> <span>"pixelsize"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>const</span> circleOffsetAnim <span>=</span> <span>new</span> <span>Float32Array</span><span>(</span><span>[</span>
		<span>0.0</span><span>,</span> <span>0.0</span>
	<span>]</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelSizeCircle<span>,</span> <span>(</span><span>2.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocation<span>,</span> aspect_ratio<span>)</span><span>;</span>
		<span>var</span> radius <span>=</span> <span>0.1</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		circleOffsetAnim<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		circleOffsetAnim<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationCircle<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>sizeLocationCircle<span>,</span> circleSize<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>shrinkAmountLocation<span>,</span> shrinkAmount<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>smoothingAmountLocation<span>,</span> smoothingAmount<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Scaled image in the bottom left */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationPost<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>redShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>aspect_ratioLocationRed<span>,</span> <span>(</span><span>1.0</span> <span>/</span> aspect_ratio<span>)</span> <span>-</span> <span>1.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.2</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>(</span><span>1.0</span> <span>/</span> canvas<span>.</span>width<span>)</span> <span>*</span> <span>50</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.25</span><span>,</span> <span>0.25</span><span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2fv</span><span>(</span>offsetLocationRed<span>,</span> circleOffsetAnim<span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		gl<span>.</span><span>uniform1f</span><span>(</span>thicknessLocation<span>,</span> <span>0.1</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform1f</span><span>(</span>pixelsizeLocation<span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocationRed<span>,</span> <span>0.5</span><span>,</span> <span>0.5</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationRed<span>,</span> <span>-</span><span>0.75</span><span>,</span> <span>-</span><span>0.75</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> <span>1.0</span> <span>/</span> <span>(</span>width <span>/</span> height<span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span>
</code></pre></details></blockquote><h4 id="how-big-is-a-pixel%3F" tabindex="-1">How big is a pixel? <a href="#how-big-is-a-pixel%3F">#</a></h4><p>Specifically, by how much do we fade the border? If we hardcode a static value, eg. fade at 95% of the circle’s radius, we may get a pleasing result for that circle size at that screen resolution, but too much smoothing when the circle is bigger or closer to the camera and aliasing if the circle becomes small.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/fade.png" alt="Too much edge fading relative to this circle size"><figcaption>Too much edge fading relative to this circle size</figcaption></figure><p>We need to know the size of a pixel. This is in part what <a href="https://gamedev.stackexchange.com/a/130933">Screen Space derivatives</a> were created for. Shader functions like <a href="https://docs.gl/sl4/dFdx"><code>dFdx</code></a>, <a href="https://docs.gl/sl4/dFdy"><code>dFdy</code></a> and <a href="https://docs.gl/sl4/fwidth"><code>fwidth</code></a> allow you to get the size of a screen pixel relative to some vector. In the above <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analyticalCompare.fs">circle-analyticalCompare.fs</a> we determine by how much the distance changes via two methods:</p><pre><code>pixelSize <span>=</span> <span>fwidth</span><span>(</span>dist<span>)</span><span>;</span>
<span>/* or */</span>
pixelSize <span>=</span> <span>length</span><span>(</span><span>vec2</span><span>(</span><span>dFdx</span><span>(</span>dist<span>)</span><span>,</span> <span>dFdy</span><span>(</span>dist<span>)</span><span>)</span><span>)</span><span>;</span></code></pre><p>Relying on Screen Space derivatives has the benefit, that we get the pixel size delivered to us by the graphics pipeline. It properly respects any transformations we might throw at it, including 3D perspective.</p><p>The down side is that it is not supported by the WebGL 1 standard and has to be pulled in via the extension <code>GL_OES_standard_derivatives</code> or requires the jump to WebGL 2.</p><blockquote><p>Luckily I have never witnessed any device that supported WebGL 1, but not the Screen Space derivatives. Even the GMA based <a href="https://www.youtube.com/watch?v=Fs4GjDiOie8">Thinkpad X200 &amp; T500</a> I hardware modded do.</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><h5>Possibly painful</h5><p>Generally, there are some nasty pitfalls when using Screen Space derivatives: how the calculation happens is up to the implementation. This led to the split into <code>dFdxFine()</code> and <code>dFdxCoarse()</code> in later OpenGL revisions. The default case can be set via <a href="https://docs.gl/gl4/glHint"><code>GL_FRAGMENT_SHADER_DERIVATIVE_HINT</code></a>, but the standard hates you:</p><blockquote><p><a href="https://docs.gl/sl4/dFdx"><strong>OpenGL Docs</strong></a>: The implementation <em><strong>may</strong></em> choose which calculation to perform based upon factors such as performance or the value of the API <code>GL_FRAGMENT_SHADER_DERIVATIVE_HINT</code> hint.</p></blockquote><blockquote><p>Why do we have standards again? As a graphics programmer, anything with <code>hint</code> has me traumatized.</p><img src="https://blog.frost.kiwi/assets/kiwis/tired.svg"></blockquote><p>Luckily, neither case concerns us, as the difference doesn’t show itself in the context of Anti-Aliasing. Performance technically <a href="https://docs.gl/sl4/dFdx"><code>dFdx</code></a> and <a href="https://docs.gl/sl4/dFdy"><code>dFdy</code></a> are free (or rather, their cost is already part of the rendering pipeline), though the pixel size calculation using <code>length()</code> or <code>fwidth()</code> is not. It is performed <em>per-pixel</em>.</p><h5><a href="https://docs.gl/sl4/dFdx"><code>dFdx</code></a> + <a href="https://docs.gl/sl4/dFdy"><code>dFdy</code></a> + <a href="https://docs.gl/sl4/length"><code>length()</code></a> vs <a href="https://docs.gl/sl4/fwidth"><code>fwidth()</code></a></h5><p>This is why there exist two ways of doing this: getting the <code>length()</code> of the vector that <code>dFdx</code> and <code>dFdy</code> make up, a step involving the historically performance expensive <code>sqrt()</code> function or using <code>fwidth()</code>, which is the approximation <code>abs(dFdx()) + abs(dFdy())</code> of the above.</p><blockquote><p>It depends on context, but on semi-modern hardware a call to <code>length()</code> should be performance trivial though, even per-pixel.</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><p>To showcase the difference, the above <code>Radius adjust</code> slider works off of the <code>Pixel size method</code> and adjusts the SDF distance. If you go with <code>fwidth()</code> and a strong radius shrink, you’ll see something weird.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/rhobus.png" alt="Rhombous warping at small shape sizes due to use of fwidth()"><figcaption>Rhombous warping at small shape sizes due to use of <code>fwidth()</code></figcaption></figure><p>The diagonals shrink more than they should, as the approximation using addition scales too much diagonally. We’ll talk about professional implementations further below in a moment, but using <code>fwidth()</code> for AAA is what Unity extension “<a href="https://acegikmo.com/shapes/docs/#anti-aliasing">Shapes</a>” by <a href="https://twitter.com/FreyaHolmer/">Freya Holmér</a> calls “<a href="https://acegikmo.com/shapes/docs#anti-aliasing">Fast Local Anti-Aliasing</a>” with the following text:</p><blockquote><p>Fast LAA has a slight bias in the diagonal directions, making circular shapes appear ever so slightly rhombous and have a slightly sharper curvature in the orthogonal directions, especially when small. Sometimes the edges in the diagonals are slightly fuzzy as well.</p></blockquote><p>This effects our fading, which will fade more on diagonals. Luckily, we fade by the amount of one pixel and thus the difference is really only visible when flicking between the methods. What to choose depends on what you care more about: Performance or Accuracy? But what if I told you can have your cake and eat it too…</p><h5>DIY</h5><p>…Calculate it yourself! For the 2D case, this is trivial and easily abstracted away. We know the size our context is rendering at and how big our quad is that we draw on. Calculating the size of the pixel is thus done per-object, not per-pixel. This is what happens in the above <a href="https://blog.frost.kiwi/analytical-anti-aliasing/circleAnalyticalComparison.js">circleAnalyticalComparison.js</a>.</p><pre><code><span>/* Calculate pixel size based on height.
   Simple case: Assumes Square pixels and a square quad. */</span>
gl<span>.</span><span>uniform1f</span><span>(</span>pixelSizeCircle<span>,</span> <span>(</span><span>2.0</span> <span>/</span> <span>(</span>canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>)</span><span>)</span><span>;</span></code></pre><blockquote><p>No WebGL 2, no extensions, works on ancient hardware.</p><img src="https://blog.frost.kiwi/assets/kiwis/party.svg"></blockquote><p>The results are identical to the <code>dFdx</code> + <code>dFdy</code> + <code>length()</code> case, with the benefit of fully skipping the per-pixel calculation. This does become more involved, once the quad is stretched and performance-painful when perspective is involved.</p><h4 id="how-do-we-blend%3F" tabindex="-1">How do we blend? <a href="#how-do-we-blend%3F">#</a></h4><p>Ok, now we have the amount we want to blend by. The next step is to perform the adjustment of opacity. If we are doing 2D, then Alpha blending is the way to go. Straight forward, will never betray you.</p><p>Another option is using MSAA + <a href="https://bgolus.medium.com/anti-aliased-alpha-test-the-esoteric-alpha-to-coverage-8b177335ae4f">Alpha to Coverage</a>, as is done in the MSAA demo above. There are pit falls with the latter, as discussed previously and more headaches to follow below. The reason you would need this is for depth-buffer writes for <a href="https://bgolus.medium.com/rendering-a-sphere-on-a-quad-13c92025570c">correct blending in 3D scenes</a>.</p><blockquote><p>For the MSAA and AAA demos above, merely an API level switch. In both cases, the shaders are 100% <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/circle-analytical.fs">identical</a>!</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><p>Still the alpha itself has to be faded based on distance. Here is where a “step” function comes in. We can input a start, an end point and the function will fade between them. <a href="http://www.numb3r23.net/2015/08/17/using-fwidth-for-distance-based-anti-aliasing/">Usually</a>, this is where the graphics programmer’s favorite <code>smoothstep()</code> comes in and where this blog post’s hot take begins:</p><h5>Don’t use <a href="https://en.wikipedia.org/wiki/Smoothstep"><code>smoothstep()</code></a></h5><p>Its use is <a href="http://www.numb3r23.net/2015/08/17/using-fwidth-for-distance-based-anti-aliasing/">often associated</a> with implementing anti-aliasing in <code>GLSL</code>, but its use doesn’t make sense in this context. It performs a <a href="https://en.wikipedia.org/wiki/Smoothstep">hermite interpolation</a>, but we<br>are dealing with a function applied across 2 pixels or just inside 1. There is no curve to be witnessed here.</p><blockquote><p>To be precise, both sampling and blending witness the smoothstep curve in the sub-pixel make-up of the edge, but the difference is tiny and can be corrected using an adjusted smoothing amount.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/smoothstep.svg" alt="Smoothstep and linear comparison"><figcaption>Smoothstep and linear comparison</figcaption></figure><p>Even though the slight performance difference doesn’t particularly matter on modern graphics cards, wasting cycles on performing the hermite interpolation doesn’t make sense to me. Let’s DIY it! The implementation of <a href="https://en.wikipedia.org/wiki/Smoothstep"><code>smoothstep()</code></a> is up to the vendor, but for the <code>float</code> case it’s essentially just :</p><pre><code><span>float</span> <span>smoothstep</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>float</span> t <span>=</span> <span>clamp</span><span>(</span><span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
	<span>return</span> t <span>*</span> t <span>*</span> <span>(</span><span>3.0</span> <span>-</span> <span>2.0</span> <span>*</span> t<span>)</span><span>;</span>
<span>}</span>
<span>.</span><span>.</span><span>.</span>
<span>float</span> alpha <span>=</span> <span>smoothstep</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span></code></pre><p>We can rip out the hermite interpolation and stick to the simple linear one. If you flick between the two in the above demo, you’ll see only a slight change, with pixel sized smoothing. At pixel size, the difference can easily be counter acted with an adjustment to the smoothing factor if you like one method over the other.</p><pre><code><span>/* Step function with Linear Interpolation
   instead of the Hermite Interpolation */</span>
<span>float</span> <span>linearstep</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>return</span> <span>clamp</span><span>(</span><span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>}</span>
<span>.</span><span>.</span><span>.</span>
<span>float</span> alpha <span>=</span> <span>linearstep</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span></code></pre><p>But why even clamp? Alpha values below 0.0 or above 1.0 will be taken care of by the rendering pipeline during the blending step and thus no clamping is required. It <em>is</em> required when having multiple shapes on one quad, something I’ll go into below. But in the one shape per quad case, we can delete it.</p><pre><code><span>/* Step function with Linear Interpolation, but no clamping */</span>
<span>float</span> <span>linearstepNoclamp</span><span>(</span><span>float</span> edge0<span>,</span> <span>float</span> edge1<span>,</span> <span>float</span> x<span>)</span> <span>{</span>
    <span>return</span> <span>(</span>x <span>-</span> edge0<span>)</span> <span>/</span> <span>(</span>edge1 <span>-</span> edge0<span>)</span><span>;</span>
<span>}</span>
<span>.</span><span>.</span><span>.</span>
<span>float</span> alpha <span>=</span> <span>linearstepNoclamp</span><span>(</span><span>1.0</span><span>,</span> <span>1.0</span> <span>-</span> pixelSize <span>*</span> smoothingAmount<span>,</span> dist<span>)</span><span>;</span></code></pre><p>But wait a moment… When doing Anti-Aliasing we wish to affect the border of the shape, specifically distance 1.0, so most of this function cancels out! In fact, we <strong>don’t</strong> need a step function. The blending can be performed by a simple division.</p><pre><code><span>float</span> alpha <span>=</span> <span>(</span><span>1.0</span> <span>-</span> dist<span>)</span> <span>/</span> <span>(</span>pixelSize <span>*</span> smoothingAmount<span>)</span><span>;</span></code></pre><p>I have been using this simplified term in different places for years. Performance wise, the most expensive thing still remains: the per-pixel division. Modern cards should also have no issues optimizing the hermite interpolation’s multiplication and addition down to a few <a href="https://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation#Fused_multiply%E2%80%93add">Fused Multiply-Add</a> instructions. Still, I prefer the simplicity.</p><h5>What’s with the shrinking?</h5><p>There is an ellusive implementation interaction with MSAA and the rasterizer. <em>Only</em> when using this with MSAA + Alpha to Coverage (regardless of sample count), there will be exactly one side of the quad with a missing 0.5 pixels, on <strong>some</strong> hardware. This is why there is this weird 0.5 px breathing room being added.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/hardEdgeBug.png" alt="Hard edge bug with MSAA on select hardware"><figcaption>Hard edge bug with MSAA on select hardware</figcaption></figure><p>Our circle is drawn to the very edge of the quad, which works, but only as long the graphics card doesn’t surprise us with edge cases. Specifically modern NVIDIA cards seems to eat one side of the quad too soon, though I have never seen this occur with alpha blending. To combat this, we give our SDF 0.5px of breathing room:</p><pre><code><span>/* We add half a pixel of breathing room. This is only required for the MSAA
   case. Depending on Hardware implementation, rasterization, MSAA sample
   count and placement, one row pixels may or may not disappear too soon,
   when the circle's edge is right up against the unit quad's border */</span>
dist <span>+=</span> pixelSizeAdjusted <span>*</span> <span>0.5</span><span>;</span></code></pre><blockquote><p>An edge case.</p><img src="https://blog.frost.kiwi/assets/kiwis/laugh.svg"></blockquote><h5>Drawing multiple?</h5><p>You can draw multiple shapes in one Quad and both will be Anti-Aliased, though blending will start to get more involved. In that case both shapes will need to be evaluated per-pixel and their results will need to be clamped, weighted and summed, otherwise there won’t be Anti-Aliasing when they intersect.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/multiple.jpg" alt="Aliasing free blending of multiple circle visualizations from mirrorball.frost.kiwi"><figcaption>Aliasing free blending of multiple visualizations<br>From <a href="https://mirrorball.frost.kiwi/">🔮 Mathematical Magic Mirrorball</a></figcaption></figure><p>Here is what blending looks like in my WebApp <a href="https://mirrorball.frost.kiwi/">🔮 Mathematical Magic Mirrorball</a>, a WebApp which pulls 360° panoramic projections from photos, videos and live-streams of mirror balls. There I have multiple visualizations and color overlays explaining resolution distribution of the projection. <a href="https://github.com/FrostKiwi/Mirrorball/blob/main/src/shd/crop.fs#L35">The code</a> to keep all this anti-aliased is:</p><pre><code><span>float</span> factorGreen <span>=</span> area_toggle <span>*</span> <span>clamp</span><span>(</span><span>(</span>area_f <span>-</span> lenCircle<span>)</span> <span>*</span> pxsize_rcp<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
<span>float</span> factorRed <span>=</span> area_toggle <span>*</span> <span>clamp</span><span>(</span><span>(</span>lenCircle <span>-</span> area_b<span>)</span> <span>*</span> pxsize_rcp<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span> <span>*</span> smoothedAlpha<span>;</span>
<span>float</span> factorBlack <span>=</span> mask_toggle <span>*</span> <span>(</span><span>1.0</span> <span>-</span> smoothedAlpha<span>)</span><span>;</span>

<span>vec3</span> finalColor <span>=</span> baseColor <span>*</span> <span>(</span><span>1.0</span> <span>-</span> factorGreen <span>-</span> factorRed <span>-</span> factorBlack<span>)</span> <span>+</span>
                  greenColor <span>*</span> factorGreen <span>+</span>
                  redColor <span>*</span> factorRed <span>+</span>
                  blackColor <span>*</span> factorBlack<span>;</span></code></pre><p>All this additional stuff … why not draw color overlays in an additional pass? The cost of drawing across that area again is an order of magnitude higher than just coloring the output in the shape we need as we go. Tinting in an Anti-Aliased fashion in one draw-call is the cleanest way to do this I think.</p><h3 id="3d" tabindex="-1">3D <a href="#3d">#</a></h3><p>Everything we talked about extends to the 3D case as well. We won’t dig <a href="https://iquilezles.org/articles/distfunctions/">into 3D shapes themselves</a> and will stick to a 2D rounded square in 3D perspective with a moving camera. I use this a lot when graphics programming to create a scene with a “ground floor” where my objects live on.</p><div><p> <label for="native3D">Native<p>Resolution</p></label></p><p> <label for="half3D">½<p>Resolution</p></label></p><p> <label for="quarter3D">¼<p>Resolution</p></label></p><p> <label for="eight3D">⅛<p>Resolution</p></label></p></div><div><p> <label for="showCirclelabel3D">Draw Rounded Square</label></p><p> <label for="showQuadlabel3D">Show Quad</label></p></div><blockquote><details><summary><a href="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/3d.png">Screenshot</a>, in case WebGL doesn't work</summary><p><img src="https://blog.frost.kiwi/analytical-anti-aliasing/screenshots/3d.png" alt="image"></p></details><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/3DAnalytical.vs">3DAnalytical.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span>
<span>attribute</span> <span>vec2</span> vtx<span>;</span>
<span>attribute</span> <span>vec3</span> col<span>;</span>
<span>/* The coordinates that will be used to for our drawing operations */</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>varying</span> <span>vec3</span> color<span>;</span>
<span>uniform</span> <span>mat4</span> perspective<span>;</span>

<span>void</span> <span>main</span><span>(</span><span>)</span>
<span>{</span>
	<span>/* Assign the verticies to be used as the distance field for drawing. This
	   will be linearly interpolated before going to the fragment shader */</span>
	uv <span>=</span> vtx<span>;</span>
	<span>/* Some nice color */</span>
	color <span>=</span> col<span>;</span>

	<span>/* Make Circle smaller and correct aspect ratio */</span>
    <span>vec4</span> pos <span>=</span> <span>vec4</span><span>(</span>vtx<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span>
    gl_Position <span>=</span> perspective <span>*</span> pos<span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwi/analytical-anti-aliasing/shader/3DAnalytical.fs">3DAnalytical.fs</a></summary><pre><code><span><span>#</span><span>extension</span> <span>GL_OES_standard_derivatives <span>:</span> enable</span></span>
<span>precision</span> <span>mediump</span> <span>float</span><span>;</span>
<span>varying</span> <span>vec2</span> uv<span>;</span>
<span>varying</span> <span>vec3</span> color<span>;</span>

<span>float</span> <span>roundedBoxSDF</span><span>(</span><span>vec2</span> uv<span>,</span> <span>float</span> Size<span>,</span> <span>float</span> Radius<span>)</span>
<span>{</span>
    <span>return</span> <span>length</span><span>(</span><span>max</span><span>(</span><span>abs</span><span>(</span>uv<span>)</span> <span>-</span> Size <span>+</span> Radius<span>,</span> <span>0.0</span><span>)</span><span>)</span> <span>-</span> Radius<span>;</span>
<span>}</span>

<span>void</span> <span>main</span><span>(</span><span>void</span><span>)</span>
<span>{</span>
	<span>/* Pixel Size, but missing Perspective correction */</span>
	<span>//float pixelsize = length(vec2(dFdx(uv.x), dFdy(uv.y)));</span>
	<span>float</span> dist <span>=</span> <span>roundedBoxSDF</span><span>(</span>uv<span>,</span> <span>1.0</span><span>,</span> <span>0.4</span><span>)</span><span>;</span>

	<span>/* Fade out near the edge of the circle */</span>
	<span>float</span> pixelSize <span>=</span> <span>length</span><span>(</span><span>vec2</span><span>(</span><span>dFdx</span><span>(</span>dist<span>)</span><span>,</span> <span>dFdy</span><span>(</span>dist<span>)</span><span>)</span><span>)</span><span>;</span>
	<span>float</span> alpha <span>=</span> <span>-</span>dist <span>/</span> <span>(</span>pixelSize <span>*</span> <span>1.4142135623730950488016887242097</span><span>)</span><span>;</span>

	<span>/* Clamped and scaled uv.y added to color simply to make the bottom of the
	   circle white, so the contrast is high and you can see strong aliasing */</span>
    gl_FragColor <span>=</span> <span>vec4</span><span>(</span>color <span>+</span> <span>clamp</span><span>(</span> <span>-</span> uv<span>.</span>y <span>*</span> <span>0.4</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>,</span> alpha<span>)</span><span>;</span>
<span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwi/analytical-anti-aliasing/3DAnalytical.js">3DAnalytical.js</a></summary><pre><code><span>function</span> <span>setup3D</span><span>(</span><span>canvasId<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>,</span> simpleColorFragSrc<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>,</span> radioName<span>,</span> showQuadOpt</span><span>)</span> <span>{</span>
	<span>/* Init */</span>
	<span>const</span> canvas <span>=</span> document<span>.</span><span>getElementById</span><span>(</span>canvasId<span>)</span><span>;</span>
	<span>let</span> circleDrawFramebuffer<span>,</span> frameTexture<span>;</span>
	<span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>let</span> showQuad <span>=</span> <span>false</span><span>;</span>
	<span>let</span> resDiv <span>=</span> <span>1</span><span>;</span>
	<span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span>
		<span>{</span>
			<span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span>
			<span>antialias</span><span>:</span> <span>false</span><span>,</span>
			<span>alpha</span><span>:</span> <span>true</span>
		<span>}</span>
	<span>)</span><span>;</span>

	<span>let</span> DerivativesExtension <span>=</span> gl<span>.</span><span>getExtension</span><span>(</span><span>'OES_standard_derivatives'</span><span>)</span><span>;</span>

	<span>/* Render Resolution */</span>
	<span>const</span> radios <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>radioName<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	radios<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"1"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			resDiv <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Show Quad instead of circle choise */</span>
	<span>const</span> showQuadOption <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span><span>`</span><span>input[name="</span><span><span>${</span>showQuadOpt<span>}</span></span><span>"]</span><span>`</span></span><span>)</span><span>;</span>
	showQuadOption<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span>
		<span>/* Force set to 1 to fix a reload bug in Firefox Android */</span>
		<span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"false"</span><span>)</span>
			radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span>
		radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span>
			showQuad <span>=</span> <span>(</span>event<span>.</span>target<span>.</span>value <span>===</span> <span>"true"</span><span>)</span><span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span><span>)</span><span>;</span>

	<span>/* Shaders */</span>
	<span>/* Circle Shader */</span>
	<span>const</span> circleShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> circleFragSrc<span>)</span><span>;</span>
	<span>const</span> viewProjectionLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>circleShd<span>,</span> <span>"perspective"</span><span>)</span><span>;</span>

	<span>/* SimpleColor Shader */</span>
	<span>const</span> simpleColorShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleVtxSrc<span>,</span> simpleColorFragSrc<span>)</span><span>;</span>
	<span>const</span> viewProjectionLocationSimple <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>simpleColorShd<span>,</span> <span>"perspective"</span><span>)</span><span>;</span>

	<span>/* Blit Shader */</span>
	<span>const</span> blitShd <span>=</span> <span>compileAndLinkShader</span><span>(</span>gl<span>,</span> blitVtxSrc<span>,</span> blitFragSrc<span>)</span><span>;</span>
	<span>const</span> transformLocation <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"transform"</span><span>)</span><span>;</span>
	<span>const</span> offsetLocationPost <span>=</span> gl<span>.</span><span>getUniformLocation</span><span>(</span>blitShd<span>,</span> <span>"offset"</span><span>)</span><span>;</span>

	<span>const</span> vertex_buffer <span>=</span> gl<span>.</span><span>createBuffer</span><span>(</span><span>)</span><span>;</span>
	gl<span>.</span><span>bindBuffer</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> vertex_buffer<span>)</span><span>;</span>
	gl<span>.</span><span>bufferData</span><span>(</span>gl<span>.</span><span>ARRAY_BUFFER</span><span>,</span> unitQuad<span>,</span> gl<span>.</span><span>STATIC_DRAW</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>vertexAttribPointer</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>,</span> gl<span>.</span><span>FLOAT</span><span>,</span> <span>false</span><span>,</span> <span>5</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>,</span> <span>2</span> <span>*</span> Float32Array<span>.</span><span>BYTES_PER_ELEMENT</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>0</span><span>)</span><span>;</span>
	gl<span>.</span><span>enableVertexAttribArray</span><span>(</span><span>1</span><span>)</span><span>;</span>

	<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>

	<span>let</span> aspect_ratio <span>=</span> <span>0</span><span>;</span>
	<span>let</span> last_time <span>=</span> <span>0</span><span>;</span>
	<span>let</span> redrawActive <span>=</span> <span>false</span><span>;</span>

	<span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		circleDrawFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>

		frameTexture <span>=</span> <span>setupTexture</span><span>(</span>gl<span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> frameTexture<span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span>
		gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> frameTexture<span>,</span> <span>0</span><span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>true</span><span>;</span>
	<span>}</span>

	<span>let</span> viewMatrix <span>=</span> Mat4<span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>
	<span>let</span> projectionMatrix <span>=</span> Mat4<span>.</span><span>create</span><span>(</span><span>)</span><span>;</span>

	<span>let</span> eye <span>=</span> <span>[</span><span>1.5</span><span>,</span> <span>1.5</span><span>,</span> <span>1.5</span><span>]</span><span>;</span>
	<span>let</span> target <span>=</span> <span>[</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>]</span><span>;</span>
	<span>let</span> up <span>=</span> <span>[</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>1</span><span>]</span><span>;</span>

	gl<span>.</span><span>enable</span><span>(</span>gl<span>.</span><span>BLEND</span><span>)</span><span>;</span>

	<span>function</span> <span>redraw</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		redrawActive <span>=</span> <span>true</span><span>;</span>
		<span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>{</span>
			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
		last_time <span>=</span> time<span>;</span>

		<span>const</span> radius <span>=</span> <span>5</span> <span>+</span> <span>4</span> <span>*</span> Math<span>.</span><span>sin</span><span>(</span>time <span>/</span> <span>2000</span><span>)</span><span>;</span>
		<span>var</span> speed <span>=</span> <span>(</span>time <span>/</span> <span>5000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span>
		eye<span>[</span><span>0</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span> <span>+</span> <span>0.1</span><span>;</span>
		eye<span>[</span><span>1</span><span>]</span> <span>=</span> radius <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>;</span>

		Mat4<span>.</span><span>lookAt</span><span>(</span>viewMatrix<span>,</span> eye<span>,</span> target<span>,</span> up<span>)</span><span>;</span>

		<span>let</span> fov <span>=</span> <span>75</span> <span>*</span> Math<span>.</span><span>PI</span> <span>/</span> <span>180</span><span>;</span>
		Mat4<span>.</span><span>perspectiveNO</span><span>(</span>projectionMatrix<span>,</span> fov<span>,</span> aspect_ratio<span>,</span> <span>1</span><span>,</span> <span>Infinity</span><span>)</span><span>;</span>

		Mat4<span>.</span><span>multiply</span><span>(</span>projectionMatrix<span>,</span> projectionMatrix<span>,</span> viewMatrix<span>)</span><span>;</span>

		<span>/* Setup PostProcess Framebuffer */</span>
		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>SRC_ALPHA</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> circleDrawFramebuffer<span>)</span><span>;</span>
		gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>circleShd<span>)</span><span>;</span>
		gl<span>.</span><span>uniformMatrix4fv</span><span>(</span>viewProjectionLocation<span>,</span> <span>false</span><span>,</span> projectionMatrix<span>)</span><span>;</span>

		<span>/* Draw Circle Animation */</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>if</span><span>(</span>showQuad<span>)</span><span>{</span>
			gl<span>.</span><span>useProgram</span><span>(</span>simpleColorShd<span>)</span><span>;</span>
			gl<span>.</span><span>uniformMatrix4fv</span><span>(</span>viewProjectionLocationSimple<span>,</span> <span>false</span><span>,</span> projectionMatrix<span>)</span><span>;</span>
			gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>
		<span>}</span>

		gl<span>.</span><span>viewport</span><span>(</span><span>0</span><span>,</span> <span>0</span><span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span>

		gl<span>.</span><span>blendFunc</span><span>(</span>gl<span>.</span><span>ONE</span><span>,</span> gl<span>.</span><span>ONE_MINUS_SRC_ALPHA</span><span>)</span><span>;</span>
		gl<span>.</span><span>useProgram</span><span>(</span>blitShd<span>)</span><span>;</span>
		gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span>

		<span>/* Simple Passthrough */</span>
		gl<span>.</span><span>uniform4f</span><span>(</span>transformLocation<span>,</span> <span>1.0</span><span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>uniform2f</span><span>(</span>offsetLocationPost<span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span>
		gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>0</span><span>,</span> <span>4</span><span>)</span><span>;</span>

		<span>/* Draw Red box for viewport illustration */</span>
		redrawActive <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>let</span> isRendering <span>=</span> <span>false</span><span>;</span>
	<span>let</span> animationFrameId<span>;</span>

	<span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
		<span>const</span> dipRect <span>=</span> canvas<span>.</span><span>getBoundingClientRect</span><span>(</span><span>)</span><span>;</span>
		<span>const</span> width <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>right<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>left<span>)</span><span>;</span>
		<span>const</span> height <span>=</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>bottom<span>)</span> <span>-</span> Math<span>.</span><span>round</span><span>(</span>devicePixelRatio <span>*</span> dipRect<span>.</span>top<span>)</span><span>;</span>

		<span>if</span> <span>(</span>canvas<span>.</span>width <span>!==</span> width <span>||</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span>
			canvas<span>.</span>width <span>=</span> width<span>;</span>
			canvas<span>.</span>height <span>=</span> height<span>;</span>

			<span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span>
			aspect_ratio <span>=</span> width <span>/</span> height<span>;</span>
			<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>startRendering</span><span>(</span><span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> onResize<span>,</span> <span>true</span><span>)</span><span>;</span>
	<span>onResize</span><span>(</span><span>)</span><span>;</span>

	<span>function</span> <span>renderLoop</span><span>(</span><span>time</span><span>)</span> <span>{</span>
		<span>if</span> <span>(</span>isRendering<span>)</span> <span>{</span>
			<span>redraw</span><span>(</span>time<span>)</span><span>;</span>
			animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span>
		<span>}</span>
	<span>}</span>

	<span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Start rendering, when canvas visible */</span>
		isRendering <span>=</span> <span>true</span><span>;</span>
		<span>renderLoop</span><span>(</span>last_time<span>)</span><span>;</span>
	<span>}</span>
	<span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span>
		<span>/* Stop another redraw being called */</span>
		isRendering <span>=</span> <span>false</span><span>;</span>
		<span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span>
		<span>while</span> <span>(</span>redrawActive<span>)</span> <span>{</span>
			<span>/* Spin on draw calls being processed. To simplify sync.
			   In reality this code is block is never reached, but just
			   in case, we have this here. */</span>
		<span>}</span>
		<span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span>
		gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span>

		<span>/* Delete the important buffer to free up memory */</span>
		gl<span>.</span><span>deleteTexture</span><span>(</span>frameTexture<span>)</span><span>;</span>
		gl<span>.</span><span>deleteFramebuffer</span><span>(</span>circleDrawFramebuffer<span>)</span><span>;</span>
		buffersInitialized <span>=</span> <span>false</span><span>;</span>
	<span>}</span>

	<span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span>
		entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span>
			<span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span>
				<span>if</span> <span>(</span><span>!</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span> <span>else</span> <span>{</span>
				<span>stopRendering</span><span>(</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span><span>)</span><span>;</span>
	<span>}</span>

	<span>/* Only render when the canvas is actually on screen */</span>
	<span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span>
	observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span>
<span>}</span></code></pre></details></blockquote><p>With the 3D camera and resulting perspective matrix multiplication, we use the reliable screen space derivatives again to get the pixel size. But in reality, <a href="https://web.archive.org/web/20150521050627/https://www.opengl.org/wiki/Compute_eye_space_from_window_space">we can still do without</a>! This would require us to multiply of the inverse perspective matrix with the fragment coordinates <em><strong>per pixel</strong></em>. Performance-painful, yet possible.</p><h3 id="unmentioned-challenges" tabindex="-1">Unmentioned challenges <a href="#unmentioned-challenges">#</a></h3><p>There is something I have not explained yet, a persistent misunderstanding I held until <a href="https://stannum.io/">Yakov Galka</a> explained <a href="https://stackoverflow.com/questions/73903568">the deetz to me on stackoverflow</a>. Depending on how we setup the blending math, to perform the smoothing we may remove pixel alpha on the inside of the shape, add it to the outside or center it.</p><p>Adding or subtracting would mess with the shape every so slightly, especially at small sizes or under strong perspective. So centering is the way to go. Unfortunately, centering the fade on the border can put the edge outside our quad and lead to hard edges or clipping.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/cut.png" alt="Clipping of the border"><figcaption>Clipping of the border. (Overdone for emphasis)</figcaption></figure><p>In 3D this is especially painful, as there is no amount of safety margin that would solve this, with the camera at oblique angles. Nvidia introduced the vendor specific extension <a href="https://registry.khronos.org/OpenGL/extensions/NV/NV_conservative_raster_dilate.txt"><code>NV_conservative_raster_dilate</code></a> to always give you an extra pixel at the border. Unfortunately it’s not available in WebGL and specific to NVIDIA hardware.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/missing_raster_by_yakov-galka.png" alt="Border pixels not rasterized due to fading overshooting the quad"><figcaption>Border pixels not rasterized due to fading overshooting the quad<br>Source: <a href="https://stackoverflow.com/questions/73903568">Explanation</a> on Stack overflow by <a href="https://stannum.io/">Yakov Galka</a></figcaption></figure><p>So we are forced to shrink the border in all cases. This leads to smooth edges even under strong perspective, but technically influences the shape. This is absolutely <em>not</em> visible in isolation, but may lead to mismatches or unexpected behavior, as even perspective has now an influence on the shape.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/inside_raster_by_yakov-galka.png" alt="Border pixels rasterized with shrunken border"><figcaption>Border pixels rasterized with shrunken border<br>Source: <a href="https://stackoverflow.com/questions/73903568">Explanation</a> on Stack overflow by <a href="https://stannum.io/">Yakov Galka</a></figcaption></figure><p>For the 2D case, we could implement a kind of <a href="https://registry.khronos.org/OpenGL/extensions/NV/NV_conservative_raster_dilate.txt"><code>NV_conservative_raster_dilate</code></a> ourselves, by growing the quad in the vertex shader by one pixel and shrink the signed distance field by one pixel in the fragment shader. And this <em>is</em> exactly what’s happening in the 2D demos on this page!</p><blockquote><p>This is really pedantic and just here for correctness. In most cases, you don't need to be so precise.</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>That is the reason the red box always lines up with the border, at all resolution switches and with all 2D demos on this page. Specifically in the vertex shader, the line responsible for this is:</p><pre><code><span>/* Grow the Quad and thus the "canvas", that the circle is drawn on. The
   pixelSize is added for two reasons: 0.5px to get the original circle size
   again, as the AAA fading is set to fade the edge on the circle inside,
   preventing hard edges due to unrasterized pixels. And another 0.5px is
   to correct the "breathing room" added in the fragment shader,
   specifically for the MSAA sampling case, as hardware specific issues
   around MSAA sampling may or may not result in transparent pixels
   disappearing too soon. */</span>
vertex <span>*=</span> size <span>+</span> pixelSize<span>;</span></code></pre><blockquote><p>Not messing up gamma and multiplied vs premultiplied alpha are important for all forms of AA, but are very context dependant. This blog post is about AAA specifically, thus we ignore these.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><h2 id="what-are-the-big-boys-doing%3F" tabindex="-1">What are the big boys doing? <a href="#what-are-the-big-boys-doing%3F">#</a></h2><p>This rendering approach has found its way into many professional products. Let’s finish by looking at some of them.</p><h3 id="%E2%80%9Cshapes%E2%80%9D-for-unity" tabindex="-1"><a href="https://acegikmo.com/shapes">“Shapes”</a> for Unity <a href="#%E2%80%9Cshapes%E2%80%9D-for-unity">#</a></h3><p>Feature-wise the most complete implementation of this approach is in Unity extension <a href="https://acegikmo.com/shapes">Shapes</a> by <a href="https://twitter.com/FreyaHolmer/">Freya Holmér</a>. There the SDFs are either anti-aliased by MSAA or are blended like in this blog post, though it’s referred to as “<a href="https://acegikmo.com/shapes/docs/#anti-aliasing">Fast Local Anti-Aliasing</a>” for the <code>fwidth()</code> case and “<a href="https://acegikmo.com/shapes/docs/#anti-aliasing">Corrected Local Anti-Aliasing</a>” for the <code>length()</code> case.</p><figure><video controls="" height="540" poster="https://blog.frost.kiwi/analytical-anti-aliasing/vid/shapes_thumb.jpg" width="960"><source src="https://blog.frost.kiwi/analytical-anti-aliasing/vid/shapes.mp4" type="video/mp4"></video><figcaption>Trailer for <a href="https://acegikmo.com/shapes">"Shapes"</a> by <a href="https://twitter.com/FreyaHolmer/">Freya Holmér</a></figcaption></figure><p>With motion-blur, <a href="https://acegikmo.com/shapes/docs/#shapes-feature-table">shape-respecting color gradients</a> and lines <a href="https://acegikmo.com/shapes/docs/#anti-aliasing">below 1px being opacity faded</a> to prevent further aliasing, this is signed-distance field rendering and AAA by extension, implemented to its logical conclusion.</p><h3 id="valve-software%E2%80%99s-implementation" tabindex="-1"><a href="https://www.valvesoftware.com/">Valve Software</a>’s implementation <a href="#valve-software%E2%80%99s-implementation">#</a></h3><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/tf2hud.png" alt="Hud elements in Team Fortress 2"><figcaption>Hud elements in <a href="https://www.teamfortress.com/">Team Fortress 2</a></figcaption></figure><p>Valve introduced extensive use of signed distance field rendering to the <a href="https://en.wikipedia.org/wiki/Source_(game_engine)">Source engine</a> during the development of the <a href="https://en.wikipedia.org/wiki/The_Orange_Box">Orange Box</a>. Most prominently in <a href="https://www.teamfortress.com/">Team Fortress 2</a>, where it was used to create smooth yet sharp UI elements on the HUD. It even received its own <a href="https://wiki.teamfortress.com/wiki/Developer_commentary">Developer Commentary</a> entry.</p><blockquote><p><strong>Alden Kroll:</strong> Two-dimensional HUD elements present a particular art problem, because they have to look good and sharp no matter what resolution the user is running their game at. Given today’s availability of high resolution wide-screen displays, this can require a lot of texture memory and a lot of work anticipating different display resolutions. The problem for Team Fortress 2 was even more daunting because of our desire to include a lot of smooth curved elements in our HUD. We developed a new shader system for drawing ‘line art’ images. The system allows us to create images at a fixed resolution that produced smooth silhouettes even when scaled up to a very high resolution. This shader system also handles outlining and drop-shadows, and can be applied in the 3D space to world elements such as signs.</p></blockquote><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/valve.png" alt="64x64 Texture: Alpha blended, Alpha Tested and SDF rendering"><figcaption>64x64 Texture: Alpha blended, Alpha Tested and SDF rendering<br>Paper: <a href="https://steamcdn-a.akamaihd.net/apps/valve/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf">Improved Alpha-Tested Magnification for Vector Textures and Special Effect</a></figcaption></figure><p>They also released <a href="https://steamcdn-a.akamaihd.net/apps/valve/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf">a paper</a> describing the specific implementation, including a showcase for use in the 3D game world, though I have never seen it used in the game world itself in Valve titles. Added as a mere footnote to the paper, was a way to improve rendering with sharp corners…</p><h3 id="the-future-of-all-things-font%3F" tabindex="-1">The future of all things font? <a href="#the-future-of-all-things-font%3F">#</a></h3><p>If you save a signed distance field into a texture and sample it with linear interpolation, you will get perfectly sharp characters at any size, but the limited resolution will result in clipped or rounded corners, depending on implementation math.</p><p>Picking up on that foot note and bringing the technique to its logical conclusion was the most thorough and well composed Master Thesis I ever read: “<a href="https://github.com/Chlumsky/msdfgen/files/3050967/thesis.pdf">Shape Decomposition for Multi-channel Distance Fields</a>” by <a href="https://github.com/Chlumsky">Viktor Chlumský</a>, which included code for the <a href="https://github.com/Chlumsky/msdfgen">font-file to SDF conversion</a> and a full <a href="https://github.com/Chlumsky/msdf-atlas-gen?tab=readme-ov-file">font atlas generator</a>.</p><p>Basically, use RGB and a median term to get perfectly sharp text at any size, including an Alpha channel with the classical SDF for effects like glows and drop shadows, all done on the GPU with no run-time baking or intense processing. If you dig around in video games, you will find SDF based font rendering from time to time!</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/msdf.png" alt="Multi-Channel SDF demo from msdf-atlas-gen"><figcaption>Multi-Channel SDF demo from <a href="https://github.com/Chlumsky/msdf-atlas-gen?tab=readme-ov-file">msdf-atlas-gen</a></figcaption></figure><p>From experience I can tell you, that there are more implementation headaches. Chinese, Japanese, Korean characters require bigger textures to resolve their minute details. Bigger textures means you’ll often minimize during rendering, but minimizing may introduce artifacts on its own…</p><p>But considering the current state of browser font baking + rendering and the <em>pure insanity</em> of edge-cases covered, including <a href="https://faultlore.com/blah/text-hates-you/">synthetic fallbacks for missing italic or bold variants</a> and baking 4 variants with 0.25px offsets to account for minute sampling issues, I think SDF text rendering has not been given enough serious consideration.</p><blockquote><p>"<a href="https://faultlore.com/blah/text-hates-you/">Text rendering hates you</a>" is a recommended read if you want to see how crushingly complex this topic gets.</p><img src="https://blog.frost.kiwi/assets/kiwis/tired.svg"></blockquote><p>You may be wondering, if we can get the <a href="https://www.shadertoy.com/view/MlKcDD">analytical solution for a bezier curve</a>, why bake into textures instead? We may know the solution for <strong>one</strong> segment, but to get the full shape we need to sum up all the contributions from all segments. This works, but performance tanks hard, as we solve <em>every</em> bezier curve segment <strong>per pixel</strong>.</p><h2 id="clarity-should-not-be-a-luxury" tabindex="-1">Clarity should not be a luxury <a href="#clarity-should-not-be-a-luxury">#</a></h2><p>Modern video games often use TAA in combination with dynamic resolution scaling, a concoction guaranteed to result in blurriness. These AA algorithms come with post-process sharpening built-in to combat this, as is done in <a href="https://gpuopen.com/fidelityfx-cas/">FSR</a> or <a href="https://docs.unity3d.com/Packages/com.unity.postprocessing@3.4/manual/Anti-aliasing.html#temporal-anti-aliasing">TAA</a>. Fixing blurring by sharpening, I find this a bit of graphics programming sin.</p><figure><img src="https://blog.frost.kiwi/analytical-anti-aliasing/img/warframetaa.png" alt="TAA Sharpening in Warframe"><figcaption>TAA Sharpening in <a href="https://www.warframe.com/">Warframe</a></figcaption></figure><p>Whole communities rally around fixing this, like the reddit communities “<a href="https://www.reddit.com/r/MotionClarity/">r/MotionClarity</a>” or the lovingly titled “<a href="https://www.reddit.com/r/FuckTAA">r/FuckTAA</a>”, all with the understanding, that Anti-Aliasing should not come at the cost of clarity. FXAA creator Timothy Lottes mentioned, that this is <a href="https://x.com/NOTimothyLottes/status/1756733156877578611">solvable to some degree with adjustments to filtering</a>, though even the most modern titles suffer from this.</p><p>What we have not talked about are the newer machine learning approaches as done for instance with NVIDIA’s <a href="https://en.wikipedia.org/wiki/Deep_learning_anti-aliasing"><strong>DLAA</strong></a>, as that is really outside the scope of this post. Suffice to say Timothy Lottes is <a href="https://x.com/NOTimothyLottes/status/1756746848402800785">not a fan</a>. As for AAA, it’s lovely being able to draw smooth yet sharp, motion-stable shapes of any size at native resolutions.</p><blockquote><p>Please feel free to use these techniques in your projects.</p><img src="https://blog.frost.kiwi/assets/kiwis/love.svg"></blockquote></div></div>]]></description>
        </item>
    </channel>
</rss>