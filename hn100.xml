<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 17 May 2024 19:00:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Bend: a high-level language that runs on GPUs (via HVM2) (202 pts)]]></title>
            <link>https://github.com/HigherOrderCO/Bend</link>
            <guid>40390287</guid>
            <pubDate>Fri, 17 May 2024 14:23:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/HigherOrderCO/Bend">https://github.com/HigherOrderCO/Bend</a>, See on <a href="https://news.ycombinator.com/item?id=40390287">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Bend</h2><a id="user-content-bend" aria-label="Permalink: Bend" href="#bend"></a></p>
<p dir="auto">Bend is a massively parallel, high-level programming language.</p>
<p dir="auto">Unlike low-level alternatives like CUDA and Metal, Bend has the feeling and
features of expressive languages like Python and Haskell, including fast object
allocations, higher-order functions with full closure support, unrestricted
recursion, even continuations. Yet, it runs on massively parallel hardware like
GPUs, with near-linear speedup based on core count, and zero explicit parallel
annotations: no thread spawning, no locks, mutexes, atomics. Bend is powered by
the <a href="https://github.com/HigherOrderCO/hvm">HVM2</a> runtime.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">A Quick Demo</h2><a id="user-content-a-quick-demo" aria-label="Permalink: A Quick Demo" href="#a-quick-demo"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/VictorTaelin/media/blob/main/bend_live_demo.gif?raw=true"><img src="https://github.com/VictorTaelin/media/raw/main/bend_live_demo.gif?raw=true" alt="Bend live demo" data-animated-image=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Using Bend</h2><a id="user-content-using-bend" aria-label="Permalink: Using Bend" href="#using-bend"></a></p>
<blockquote>
<p dir="auto">Currently not working on Windows, please use <a href="https://learn.microsoft.com/en-us/windows/wsl/install" rel="nofollow">WSL2</a> as a workaround.</p>
</blockquote>
<p dir="auto">First, install <a href="https://www.oreilly.com/library/view/rust-programming-by/9781788390637/e07dc768-de29-482e-804b-0274b4bef418.xhtml" rel="nofollow">Rust nightly</a>. Then, install both HVM2 and Bend with:</p>
<div dir="auto" data-snippet-clipboard-copy-content="cargo +nightly install hvm
cargo +nightly install bend-lang"><pre>cargo +nightly install hvm
cargo +nightly install bend-lang</pre></div>
<p dir="auto">Finally, write some Bend file, and run it with one of these commands:</p>
<div dir="auto" data-snippet-clipboard-copy-content="bend run    <file.hvm> # uses the Rust interpreter (sequential)
bend run-c  <file.hvm> # uses the C interpreter (parallel)
bend run-cu <file.hvm> # uses the CUDA interpreter (massively parallel)"><pre>bend run    <span>&lt;</span>file.hvm<span>&gt;</span> <span><span>#</span> uses the Rust interpreter (sequential)</span>
bend run-c  <span>&lt;</span>file.hvm<span>&gt;</span> <span><span>#</span> uses the C interpreter (parallel)</span>
bend run-cu <span>&lt;</span>file.hvm<span>&gt;</span> <span><span>#</span> uses the CUDA interpreter (massively parallel)</span></pre></div>
<p dir="auto">You can also compile <code>Bend</code> to standalone C/CUDA files with <code>gen-c</code> and
<code>gen-cu</code>, for maximum performance. But keep in mind our code gen is still on its
infancy, and is nowhere as mature as SOTA compilers like GCC and GHC.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Parallel Programming in Bend</h2><a id="user-content-parallel-programming-in-bend" aria-label="Permalink: Parallel Programming in Bend" href="#parallel-programming-in-bend"></a></p>
<p dir="auto">To write parallel programs in Bend, all you have to do is... <strong>nothing</strong>. Other
than not making it <em>inherently sequential</em>! For example, the expression:</p>

<p dir="auto">Can <strong>not</strong> run in parallel, because <code>+4</code> depends on <code>+3</code> which
depends on <code>(1+2)</code>. But the following expression:</p>

<p dir="auto">Can run in parallel, because <code>(1+2)</code> and <code>(3+4)</code> are independent; and it <em>will</em>,
per Bend's fundamental pledge:</p>
<blockquote>
<p dir="auto">Everything that <strong>can</strong> run in parallel, <strong>will</strong> run in parallel.</p>
</blockquote>
<p dir="auto">For a more complete example, consider:</p>
<div dir="auto" data-snippet-clipboard-copy-content="def sum(depth, x):
  switch depth:
    case 0:
      return x
    case _:
      fst = sum(depth-1, x*2+0) # adds the fst half
      snd = sum(depth-1, x*2+1) # adds the snd half
      return fst + snd
    
def main:
  return sum(30, 0)"><pre><span>def</span> <span>sum</span>(<span>depth</span>, <span>x</span>):
  <span>switch</span> <span>depth</span>:
    <span>case</span> <span>0</span>:
      <span>return</span> <span>x</span>
    <span>case</span> <span>_</span>:
      <span>fst</span> <span>=</span> <span>sum</span>(<span>depth</span><span>-</span><span>1</span>, <span>x</span><span>*</span><span>2</span><span>+</span><span>0</span>) <span># adds the fst half</span>
      <span>snd</span> <span>=</span> <span>sum</span>(<span>depth</span><span>-</span><span>1</span>, <span>x</span><span>*</span><span>2</span><span>+</span><span>1</span>) <span># adds the snd half</span>
      <span>return</span> <span>fst</span> <span>+</span> <span>snd</span>
    
<span>def</span> <span>main</span>:
  <span>return</span> <span>sum</span>(<span>30</span>, <span>0</span>)</pre></div>
<p dir="auto">This code adds all numbers from 0 up to (but not including) 2^30. But, instead
of a loop, we use a recursive divide-and-conquer approach. Since this approach
is <em>inherently parallel</em>, Bend will run it multi-threaded. Some benchmarks:</p>
<ul dir="auto">
<li>
<p dir="auto">CPU, Apple M3 Max, 1 thread: <strong>3.5 minutes</strong></p>
</li>
<li>
<p dir="auto">CPU, Apple M3 Max, 16 threads: <strong>10.26 seconds</strong></p>
</li>
<li>
<p dir="auto">GPU, NVIDIA RTX 4090, 32k threads: <strong>1.88 seconds</strong></p>
</li>
</ul>
<p dir="auto">That's a <strong>111x speedup</strong> by doing nothing. No thread spawning, no explicit
management of locks, mutexes. We just asked bend to run our program on RTX, and
it did. Simple as that. (Note that, for now, Bend only supports 24-bit machine
ints (<code>u24</code>), thus, results are always <code>mod 2^24</code>. We plan to 64-bit numbers on
the upcoming weeks.)</p>
<p dir="auto">Bend isn't limited to a specific paradigm, like tensors or matrices. Any
concurrent system, from shaders to Erlang-like actor models can be emulated on
Bend. For example, to render images in real time, we could simply allocate an
immutable tree on each frame:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# given a shader, returns a square image
def render(depth, shader):
  bend d = 0, i = 0:
    when d < depth:
      color = (fork(d+1, i*2+0), fork(d+1, i*2+1))
    else:
      width = depth / 2
      color = demo_shader(i % width, i / width)
  return color

# given a position, returns a color
# for this demo, it just busy loops
def demo_shader(x, y):
  bend i = 0:
    when i < 5000:
      color = fork(i + 1)
    else:
      color = 0x000001
  return color

# renders a 256x256 image using demo_shader
def main:
  return render(16, demo_shader)"><pre><span># given a shader, returns a square image</span>
<span>def</span> <span>render</span>(<span>depth</span>, <span>shader</span>):
  <span>bend</span> <span>d</span> <span>=</span> <span>0</span>, <span>i</span> <span>=</span> <span>0</span>:
    <span>when</span> <span>d</span> <span>&lt;</span> <span>depth</span>:
      <span>color</span> <span>=</span> (<span>fork</span>(<span>d</span><span>+</span><span>1</span>, <span>i</span><span>*</span><span>2</span><span>+</span><span>0</span>), <span>fork</span>(<span>d</span><span>+</span><span>1</span>, <span>i</span><span>*</span><span>2</span><span>+</span><span>1</span>))
    <span>else</span>:
      <span>width</span> <span>=</span> <span>depth</span> <span>/</span> <span>2</span>
      <span>color</span> <span>=</span> <span>demo_shader</span>(<span>i</span> <span>%</span> <span>width</span>, <span>i</span> <span>/</span> <span>width</span>)
  <span>return</span> <span>color</span>

<span># given a position, returns a color</span>
<span># for this demo, it just busy loops</span>
<span>def</span> <span>demo_shader</span>(<span>x</span>, <span>y</span>):
  <span>bend</span> <span>i</span> <span>=</span> <span>0</span>:
    <span>when</span> <span>i</span> <span>&lt;</span> <span>5000</span>:
      <span>color</span> <span>=</span> <span>fork</span>(<span>i</span> <span>+</span> <span>1</span>)
    <span>else</span>:
      <span>color</span> <span>=</span> <span>0x000001</span>
  <span>return</span> <span>color</span>

<span># renders a 256x256 image using demo_shader</span>
<span>def</span> <span>main</span>:
  <span>return</span> <span>render</span>(<span>16</span>, <span>demo_shader</span>)</pre></div>
<p dir="auto">And it would actually work. Even involved algorithms, such as a <a href="https://github.com/HigherOrderCO/Bend/blob/main/examples/bitonic_sort.bend">Bitonic Sort
using tree rotations</a>, parallelize well on Bend.
Long-distance communication is performed by <em>global beta-reduction</em> (as per the
<a href="https://github.com/VictorTaelin/Interaction-Calculus">Interaction Calculus</a>),
and synchronized correctly and efficiently by
<a href="https://github.com/HigherOrderCO/HVM">HVM2</a>'s <em>atomic linker</em>.</p>
<ul dir="auto">
<li>
<p dir="auto">To jump straight into action, check Bend's <a href="https://github.com/HigherOrderCO/bend/blob/main/GUIDE.md">GUIDE.md</a>.</p>
</li>
<li>
<p dir="auto">For an extensive list of features, check <a href="https://github.com/HigherOrderCO/bend/blob/main/FEATURES.md">FEATURES.md</a>.</p>
</li>
<li>
<p dir="auto">To understand the tech behind Bend, check HVM2's <a href="https://paper.higherorderco.com/" rel="nofollow">paper</a>.</p>
</li>
<li>
<p dir="auto">Bend is developed by <a href="https://higherorderco.com/" rel="nofollow">HigherOrderCO.com</a> - join our <a href="https://discord.higherorderco.com/" rel="nofollow">Discord</a>!</p>
</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Beekeeper furious over destruction of $2M honey crop (149 pts)]]></title>
            <link>https://www.rnz.co.nz/news/business/516930/beekeeper-steven-brown-furious-over-destruction-of-2m-honey-crop</link>
            <guid>40389548</guid>
            <pubDate>Fri, 17 May 2024 13:18:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.rnz.co.nz/news/business/516930/beekeeper-steven-brown-furious-over-destruction-of-2m-honey-crop">https://www.rnz.co.nz/news/business/516930/beekeeper-steven-brown-furious-over-destruction-of-2m-honey-crop</a>, See on <a href="https://news.ycombinator.com/item?id=40389548">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
<div itemscope="" itemtype="http://schema.org/ImageObject">
<p><img loading="lazy" src="https://media.rnztools.nz/rnz/image/upload/s--wi-55uaW--/ar_16:10,c_fill,f_auto,g_auto,q_auto,w_1050/v1715797082/4KQ3RU0_bees4_jpg" width="1050" height="550" alt="Beekeeper Steven Brown - Springbank Honey hives destroyed cos of American Foulbrood"></p><p>
<span itemprop="caption">Honey producer Steven Brown watches boxes of honey burn. </span>
<span>Photo: <span itemprop="copyrightHolder">Facebook / Steven Brown</span></span>
</p>
</div>
<p>Beekeepers say New Zealand needs a new approach to a hive-destroying disease that is leaving those affected out of pocket, uncompensated and devastated.</p>
<p>Honey producer Springbank Honey of North Canterbury was ordered to burn more than 10,000 of its beehives and beekeeping equipment after American Foulbrood (AFB) was identified through spore testing.</p>
<p>AFB is a bacterial disease spread by spores that could be viable for up to 40 years. It is considered one of the <a href="https://www.rnz.co.nz/news/country/483881/increase-in-disease-for-beehives-concerning-as-more-than-3000-destroyed-in-one-year">most widespread and destructive honey bee brood diseases</a> in the world.</p>
<p>The family-owned honey business, operating near Rangiora in North Canterbury, runs 3000 organic beehives and processes honey too.</p>
<p>Co-owner Steven Brown said burning thousands of beehives over Mother's Day weekend had left the family "devastated".</p>
<p>"By next year, when we don't have boxes for our honey crop, we're probably going to be losing over $5-6 million," Brown said.</p>
<p>"The loss of the boxes is one thing, but without the boxes for the hives we won't have a honey crop."</p>


<p>Brown said it would cost around $2 million to replace it all, made more difficult by the fact that there was no compensation or insurance available for beekeepers.</p>
<p>Burning the hives was more painful when other countries used tools like vaccines, antibiotics and sterilisation - measures prohibited in New Zealand and in some export markets.</p>
<p>"Most farmers vaccinate their cows for diseases every single year, but it's illegal to vaccinate the hive," Brown said.</p>
<p>"I don't understand why we have our heads in the sand and live like it's 200 years ago without these amazing abilities of giving a vaccine and stopping disease; instead we burn things."</p>
<div itemscope="" itemtype="http://schema.org/ImageObject">
<p><img loading="lazy" src="https://media.rnztools.nz/rnz/image/upload/s--uMzaQteX--/ar_16:10,c_fill,f_auto,g_auto,q_auto,w_1050/v1715797082/4KQ3RU0_bees1_jpg" width="1050" height="1312" alt="Beekeeper Steven Brown's hives"></p><p>
<span itemprop="caption"> </span>
<span>Photo: <span itemprop="copyrightHolder">Facebook / Steven Brown</span></span>
</p>
</div>
<p>The order to destroy the hives by fire came from the levy-run management agency that enforces the national pest management plan rules, including auditing beekeepers, monitoring for the disease and eliminating it.</p>
<p>Brown said the new government needed to "shut down immediately" the outdated pest management plan and the agency.</p>
<p>"The plan was supposed to reduce AFB by 5 percent per year, they haven't complied with that. It's gone rampant throughout New Zealand," he said.</p>
<p>"I want the Biosecurity Act changed, but the one we're operating under, the pest management plan, the [Biosecurity] Minister needs to stop that immediately."</p>
<div itemscope="" itemtype="http://schema.org/ImageObject">
<p><img loading="lazy" src="https://media.rnztools.nz/rnz/image/upload/s--HipuqcWp--/ar_16:10,c_fill,f_auto,g_auto,q_auto,w_1050/v1715797082/4KQ3RU0_bees2_jpg" width="1050" height="1312" alt="Beekeeper Steven Brown's hives"></p><p>
<span itemprop="caption">More boxes are added to the bonfire. </span>
<span>Photo: <span itemprop="copyrightHolder">Facebook / Steven Brown</span></span>
</p>
</div>
<h3>Agency aims for support</h3>
<p>But the management agency's general manager, Niha Long said it aimed to support beekeepers impacted by the disease.</p>
<p>She acknowledged how "upsetting" it would be for social media users to view the burning beehives - but burning was the only method at hand.</p>
<p>"The only way to destroy the spores is through burning, so we cannot use antibiotics unlike other countries in the world due to market access," Long said.</p>
<p>She said the agency was not there to make beekeepers' operations harder.</p>
<p>"We acknowledge that it is a significant impact on the beekeeper, but we're not here - contrary to popular belief - to make a beekeeper's life difficult," she said.</p>
<p>"We're here to work with the beekeeper and that is the nature of the relationship we've attempted to have with this beekeeper [Springbank Honey].</p>
<p>"AFB will happen if you're a beekeeper, at some point in your journey, and getting AFB is not the problem - what can be a problem for us is the beekeepers's action or inaction after you've found it."</p>
<div itemscope="" itemtype="http://schema.org/ImageObject">
<p><img loading="lazy" src="https://media.rnztools.nz/rnz/image/upload/s--IjU0-JU6--/ar_16:10,c_fill,f_auto,g_auto,q_auto,w_1050/v1715797083/4KQ3RU0_bees3_jpg" width="1050" height="1312" alt="Springbank Honey hives destroyed - due to American Foulbrood . Beekeeper Steven Brown"></p><p>
<span itemprop="caption"> </span>
<span>Photo: <span itemprop="copyrightHolder">Facebook / Steven Brown</span></span>
</p>
</div>
<p>She said the law and the pest management plan put legal obligations on its registered, levy-paying beekeepers.</p>
<p>"It dictates each beekeeper's responsibility for eliminating AFB, so I'd like to emphasise that that is each beekeeper's responsibility through a set of legal obligations."</p>
<p>Long said fewer than eight percent of the country's 8000 beekeepers were currently affected - and there were 2900 reports of AFB made in the past year to May, down 15 percent on the 3449 reports the year before.</p>


<h3>NZ 'pretty much alone'</h3>
<p>NZ Beekeeping Incorporated president Jane Lorimer said New Zealand was "pretty much alone" in the response to burn hives and equipment on positive spore tests.</p>
<p>But she said beekeepers generally still followed the rules.</p>
<p>"Beekeepers have to notify and then destroy hives within seven days after finding the disease - and most beekeepers, including Steve, usually comply with that regulation.</p>
<p>"We're going to seek some clarification around the Biosecurity Act and the Pest Management plan and how the two legal aspects integrate."</p>
<p>It was seeking clarification around how the Biosecurity Act and the pest management plans' legal aspects integrated.</p>
<p>She said the government review into the legislation was an opportunity to improve transparency for the sector.</p>
<p>"We hope that the Minister will take into consideration our suggestions [in the review] and make changes accordingly. Part of that is an appeal process as well, there's nothing within the order in council about appealing what's happening when a beekeeper's asked to destroy equipment they've found spores in.</p>
<p>"This isn't the first case where beekeepers had been told to destroy beekeeping equipment that they'd found spores in."</p>
<p>Lorimer said it was <a href="https://www.rnz.co.nz/news/country/509715/beekeepers-deliver-stinging-response-to-apiculture-nz-plan">a difficult time for the industry</a>, and the number of commercial beehives had halved in the past two years.</p>



    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Toon3D: Seeing Cartoons from a New Perspective (256 pts)]]></title>
            <link>https://toon3d.studio/</link>
            <guid>40389445</guid>
            <pubDate>Fri, 17 May 2024 13:04:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://toon3d.studio/">https://toon3d.studio/</a>, See on <a href="https://news.ycombinator.com/item?id=40389445">Hacker News</a></p>
<div id="readability-page-1" class="page">

  


  <div>
            
            

            <p><span>* Equal contribution,</span>
              <span><sup>1</sup><a href="https://www.teton.ai/">Teton.ai</a>,</span>
              <span><sup>2</sup>UC Berkeley</span>
            </p>

            
          </div>

  <div>
        <h2>
          <b>TLDR</b><br><i>Humans can perceive 3D world from images that aren't 3D consistent, but why can't
            machines?</i><br>COLMAP cannot reconstruct non-geometric hand-drawn images even with perfect
          correspondences!<br><span>Toon3D</span> can recover camera poses and dense geometry
          with piecewise-rigid deformable optimization.<br>
        </h2>
        <p><img src="https://toon3d.studio/static/images/teaser.png">
      </p></div>


  <div>
          <p>
            <!-- We run <span class="my-method-name">Toon3D</span> on 12 popular cartoon scenes. -->
            <!-- We
            align backprojected monocular depth predictions with a piecewise-rigid deformation at 3D keypoints. We refine
            the aligned
            point clouds with Gaussian optimization. These scenes have sparse viewpoints as input,
            ranging from only 4 to as many as 12 hand-drawn images. Press the button to move the cameras between two
            viewpoints! -->
            Hand-drawn scenes are not 3D consistent, so we create <span>Toon3D</span> to recover
            camera poses and dense geometry! We do this with a piecewise-rigid deformation optimization at hand-labeled
            keypoints and using monocular depth as a prior. Now we can interpolate novel views never before seen! Press
            the button to move the cameras between two
            viewpoints! <i>Note that we reconstruct the scenes with more than two hand-drawn images, but this demo shows
              a smooth transition between just two of the inputs views.</i>
          </p>
          </div>
  


  <div>
          <h2>Abstract</h2>
          <p>
              We propose <span>Toon3D</span>. In this work, we recover the underlying 3D
              structure of non-geometrically consistent scenes. We focus our analysis on hand-drawn images from cartoons
              and anime. Many cartoons are created by artists without a 3D rendering engine, which means that any new
              image of a scene is hand-drawn. The hand-drawn images are usually faithful representations of the world,
              but only in a qualitative sense, since it is difficult for humans to draw multiple perspectives of an
              object or scene 3D consistently. Nevertheless, people can easily perceive 3D scenes from inconsistent
              inputs! In this work, we correct for 2D drawing inconsistencies to recover a plausible 3D structure such
              that the newly warped drawings are consistent with each other. Our pipeline consists of a user-friendly
              annotation tool, camera pose estimation, and image deformation to recover a dense structure. Our method
              warps images to obey a perspective camera model, enabling our aligned results to be plugged into
              novel-view synthesis reconstruction methods to experience cartoons from viewpoints never drawn before.
            </p>
        </div>

  <div>
      <!-- Abstract. -->
      <div>
          <h2>Cartoon Reconstruction</h2>
          <p>
              (Left) We first recover camera poses and aligned point clouds. (Right) Then we initialize Gaussians from
              our dense point
              cloud and optimize Gaussian Splatting with the recovered
              cameras. Our method has depth regularization and is built on <a href="https://docs.nerf.studio/">Nerfstudio</a>. Here we show fly-through renders of our scenes.
          </p>
          <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
            <source src="https://toon3d.studio/static/assets/bobs-burgers-side-by-side.mp4" type="video/mp4">
          </video>
        </div>
      <div>
        <div>
          <p>Here is the gallery of all our scenes. Can you guess which is which? Click to reveal names.</p>
          </div>
        <div id="results-carousel">
          <p>
            <h4>Bob's Burgers
            </h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/bobs-burgers.mp4" type="video/mp4">
            </video>
            <h4>Family Guy</h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/family-guy-house.mp4" type="video/mp4">
            </video>
          </p>
          <p>
            <h4>SpongeBob
              SquarePants</h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/krusty-krab.mp4" type="video/mp4">
            </video>
            <br>
            <h4>Rick and Morty
            </h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/smith-residence.mp4" type="video/mp4">
            </video>
          </p>
          <p>
            <h4>Simpsons</h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/simpsons-house.mp4" type="video/mp4">
            </video>
            <br>
            <h4>Spirited Away
            </h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/spirited-away.mp4" type="video/mp4">
            </video>
          </p>
          <p>
            <h4>Futurama</h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/planet-express.mp4" type="video/mp4">
            </video>
            <br>
            <h4>Family Guy</h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/family-guy-dining.mp4" type="video/mp4">
            </video>
          </p>
          <p>
            <h4>Avatar</h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/avatar-house.mp4" type="video/mp4">
            </video>
            <br>
            <h4>BoJack Horseman
            </h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/bojack-room.mp4" type="video/mp4">
            </video>
          </p>
          <p>
            <h4>Magic School Bus
            </h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/magic-school-bus.mp4" type="video/mp4">
            </video>
            <br>
            <h4>Scooby-Doo</h4>
            <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
              <source src="https://toon3d.studio/static/assets/mystery-machine.mp4" type="video/mp4">
            </video>
          </p>
        </div>
      </div>
    </div>

  <div>
      <div>
          <h2>Method</h2>
          <p>
              We first predict the depth of each image with <a href="https://github.com/prs-eth/Marigold">Marigold</a>
              and obtain candidate transient masks with <a href="https://segment-anything.com/">SAM</a>. We then label
              images with the <span>Toon3D
                Labeler</span> to obtain correspondences and mark transient regions. We optimize camera poses and warp
              images to obtain calibrated, perspective cameras. Finally, we can initialize Gaussians with the aligned
              dense point cloud and run refinement.
            </p>
        </div>
      <div>
        <div>
          <h4>Overview</h4>
          <div>
            <p><img src="https://toon3d.studio/static/images/method.png">
            </p>
          </div>
        </div>
        <div>
          <h4>Toon3D Labeler</h4>
          
        </div>
      </div>
      <p>Here you can see the two major steps of our method. The sparse alignment video shows rough camera parameter
          estimation. The dense alignment video shows various layers used in the method (e.g., cameras, sparse
          correspondences, warping meshes, etc.) and how they align in 3D.</p>
      <!-- Columns container -->
      <div>
        <div>
          <h4>Sparse Alignment</h4>
          
        </div>
        <div>
          <h4>Dense Alignment</h4>
          
        </div>
      </div>
    </div>


  <div>
          <h2>Explore Inside Rick and Morty's House</h2>
          <p>We reconstruct inside the Rick and Morty house by labeling between walls and ceilings to connect the
              rooms. In the first video, we show the point cloud &amp; cameras and our custom labeling interface. In the
              second video, you can scrub the slider to
              see a walkthrough inside the house! The closest camera's image is shown in the bottom right corner.</p>
          <!-- Columns container -->
          
        </div>

  <div>
      <div>
          <h2>Point Clouds and Cameras</h2>
          <p>
              Here we show point clouds and recovered cameras for the 12 cartoon scenes in the <span>Toon3D Dataset</span>. Click the icons to explore our scenes!
            </p>
        </div>
      <div>

            <p>
              Click a scene icon to start!
            </p>

            
            

            

            

          </div>
    </div>


  <div>
          <h2>Sparse-View Reconstruction</h2>
          <p>
              We can reconstruct scenes from few images and with large
              viewpoint changes. Where COLMAP may fail, we can intervene with the <span>Toon3D
                Labeler</span> to obtain human-labeled correspondences. Here we show a
              fly-through rendering for two rooms ("Living room" and "Bedroom 2") of <a href="https://www.airbnb.com/rooms/833261990707199349">this Airbnb listing</a>.
            </p>
        </div>

  <div>
      <div>
          <h2>Visualizing Inconsistencies</h2>
          <p>
              Cartoons are hand-drawn so we need to warp the images to be 3D consistent. The first item is a video that
              shows the warp taking place during alignment optimization.
              The next two items are images which show the original and warped drawings, as well as the overlap between
              the two. Blurry
              regions indicate where a lot of warp occured.
            </p>
        </div>
      <div id="blender-carousel">
            <p>
              <h4>Video</h4>
              <video poster="" autoplay="" controls="" muted="" loop="" playsinline="" height="100%">
                <source src="https://toon3d.studio/static/assets/visualizing-inconsistencies-3.mp4" type="video/mp4">
              </video>
            </p>
            <div>
              <h4>Image</h4>
              <p><img src="https://toon3d.studio/static/assets/visualizing-inconsistencies-1.png">
            </p></div>
            <div>
              <h4>Image</h4>
              <p><img src="https://toon3d.studio/static/assets/visualizing-inconsistencies-2.png">
            </p></div>
          </div>
    </div>

  <!-- Multi-View Consistent Inpainting. -->
  <div>
          <h2>Reconstructing Paintings</h2>
          <p>
              We can reconstruct paintings with <span>Toon3D</span> even though the paintings are
              hand-drawn. We predict the depth of each image, then align and warp point clouds. Finally we use Gaussian
              refinement to create the video shown below.
            </p>
        </div>
  <!--/ Multi-View Consistent Inpainting. -->



  <div id="BibTeX">
      <h2>BibTeX</h2>
      <p>Please consider citing our work if you find it useful.</p>
      <pre><code>@inproceedings{weber2023toon3d,
  title = {Toon3D: Seeing Cartoons from a New Perspective},
  author = {Ethan Weber* and Riley Peterlinz* and Rohan Mathur and
    Frederik Warburg and Alexei A. Efros and Angjoo Kanazawa},
  booktitle = {arXiv},
  year = {2024},
}
</code></pre>
    </div>

  <div>
          <!-- <h2 class="title is-3">Acknowledgements</h2> -->

          <p>
              We would like to thank Qianqian Wang, Justin Kerr, Brent Yi, David McAllister, Matthew Tancik, Evonne Ng,
              Anjali Thakrar, Christian Foley,
              Abhishek Kar, Georgios Pavlakos, the Nerfstudio team, and the KAIR lab for discussions, feedback, and
              technical support. We also thank Ian Mitchell and Roland Jose for helping to label points.
            </p>
        </div>


  



</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Non-Euclidean Doom: what happens to a game when pi is not 3.14159 (2022) [video] (233 pts)]]></title>
            <link>https://media.ccc.de/v/mch2022-236-non-euclidean-doom-what-happens-to-a-game-when-pi-is-not-3-14159-</link>
            <guid>40389267</guid>
            <pubDate>Fri, 17 May 2024 12:43:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://media.ccc.de/v/mch2022-236-non-euclidean-doom-what-happens-to-a-game-when-pi-is-not-3-14159-">https://media.ccc.de/v/mch2022-236-non-euclidean-doom-what-happens-to-a-game-when-pi-is-not-3-14159-</a>, See on <a href="https://news.ycombinator.com/item?id=40389267">Hacker News</a></p>
<div id="readability-page-1" class="page">

<div>
<ol>
<li>
<a href="https://media.ccc.de/b">
browse
</a>
</li>
<li>
<span></span>
<a href="https://media.ccc.de/b/conferences">
conferences
</a>
</li>
<li>
<span></span>
<a href="https://media.ccc.de/b/conferences/camp-NL">
camp-NL
</a>
</li>
<li>
<span></span>
<a href="https://media.ccc.de/b/conferences/camp-NL/mch2022">
mch2022
</a>
</li>
<li>
<span></span>
event
</li>
</ol>
</div>

<div>

<p>
<span></span>
<a href="https://media.ccc.de/search?p=Luke+Gotszling">Luke Gotszling</a>

</p>

<p><a href="https://media.ccc.de/c/MCH2022/MCH2022%20Curated%20content" rel="tag">MCH2022 Curated content</a>
Playlists:
<a href="https://media.ccc.de/v/mch2022-236-non-euclidean-doom-what-happens-to-a-game-when-pi-is-not-3-14159-/playlist">'MCH2022' videos starting here</a>
/
<a data-method="get" href="https://media.ccc.de/v/mch2022-236-non-euclidean-doom-what-happens-to-a-game-when-pi-is-not-3-14159-/audio">audio</a></p>
<!-- %h3 About -->
<p>We all know that the value of pi is a constant with a particular immutable value. Anyone who has done any graphical programming also knows that visual rendering relies not just on pi but trigonometry more broadly as well as other mathematical techniques. If we look into the source code of the first person shooter Doom we find that the value of pi used in the game is wrong. In this talk I will explore what happens when we subtly and not so subtly break math in the source.</p>

<p>Doom is a well known classic first person shooter game with source code released under the GPL in 1999. In this talk I will begin by exploring what happens to the game when we make the value of pi even more wrong. What about when we change other trigonometric functions and constants to incorrect values? How will our familiar understanding and ability to traverse this virtual world change when we do this. Are there any interesting gaming possibilities with non-Euclidean geometries? A brief segway will cover some optimization tricks made to enable the game to run well on hardware available at the time. At the end I will provide a link to other games and public source code repositories that also use an incorrect value of pi. Pointers will also be provided to allow the audience to compile their own incorrect math version of the game.</p>

<h3>Download</h3>
<div>
<p>
<h4>Audio</h4>
</p>

</div>
<!-- %h3 Embed/Share -->

<h3>Tags</h3>

</div>





</div>]]></description>
        </item>
        <item>
            <title><![CDATA[DNA confirms there IS a big cat roaming the British countryside (143 pts)]]></title>
            <link>https://www.discoverwildlife.com/animal-facts/mammals/big-cat-british-countryside</link>
            <guid>40387889</guid>
            <pubDate>Fri, 17 May 2024 09:08:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.discoverwildlife.com/animal-facts/mammals/big-cat-british-countryside">https://www.discoverwildlife.com/animal-facts/mammals/big-cat-british-countryside</a>, See on <a href="https://news.ycombinator.com/item?id=40387889">Hacker News</a></p>
<div id="readability-page-1" class="page"><div type="content-body" ngh="33"><storefront-content-body _nghost-purplestorefront-c1960323246="" ngh="32"><article _ngcontent-purplestorefront-c1960323246="" id="sprylab_purple_content"><div _ngcontent-purplestorefront-c1960323246=""><p><strong>The DNA of a big cat in the&nbsp;<em>Panthera</em>&nbsp;genus&nbsp;–&nbsp;probably a leopard&nbsp;–&nbsp;has been identified from a swab taken from a dead sheep in the Lake District.</strong></p>



<p>This is the first time that big cat DNA has been found on a carcass in the UK. The analysis was carried out at a&nbsp;<a href="https://warwick.ac.uk/fac/sci/lifesci/research/archaeobotany/ecological_forensics/cats/">laboratory</a>&nbsp;at the University of Warwick run by Prof Robin Allaby.&nbsp;</p>



<p>Allaby told BBC Wildlife that it was very hard to lift DNA from swabs taken from carcasses but there was no doubt in this case.&nbsp;“It makes me a convert [to the existence of non-native big cats in the UK],”&nbsp;Allaby said.&nbsp;“Until now, I have remained open-minded, I think that’s my job as a scientist.”</p>



<ul>
<li><a href="https://www.discoverwildlife.com/animal-facts/mammals/which-big-cat-has-the-strongest-bite">Which big cat has the strongest bite?</a></li>
</ul>



<p>Allaby has previously identified a bit of a claw that was sent to him from someone who wished to remain anonymous from the north of England as also belong to a cat in the Panthera genus.</p>



<p>Allaby started up the testing service 12 years ago when a&nbsp;<a href="https://www.discoverwildlife.com/animal-facts/mammals/roe-deer-facts">roe deer</a> <a href="https://www.discoverwildlife.com/animal-facts/mammals/roe-deer-facts">carcass</a>&nbsp;that had been scavenged was discovered in a small valley near Stroud in Gloucestershire.&nbsp;“All we found on that one was<a href="https://www.countryfile.com/wildlife/mammals/fox-guide-behaviour-mating-diet-identification"> fox</a> [DNA], which are a really underestimated predator,”&nbsp;Allaby said.</p>



<p>In the most recent case, the <a href="https://www.countryfile.com/wildlife/mammals/native-british-sheep-breeds-and-how-to-recognise-them">sheep</a> carcass was discovered by Cumbrian resident Sharon Larkin-Snowden in an undisclosed upland location. Larkin-Snowden told Rick Minter’s&nbsp;<a href="https://bigcatconversations.com/ep110-panthera-cumbria-dna-developments/">Big Cat Conversations</a>&nbsp;podcast that she chanced across the dead sheep one morning in October last year.&nbsp;</p>



<p>Larkin-Snowden said the carcass was fresh and that she had disturbed whatever had been feeding on, which she then saw running towards a stone wall before disappearing over it.</p>



<p>“I assumed at first it was a <a href="https://www.countryfile.com/animals/pets/the-life-of-a-border-collie-photographer-amy-bateman">sheepdog</a>, but then I did a double take and realised it was a black cat,”&nbsp;she said.&nbsp;“It was big&nbsp;–&nbsp;the size of a German shepherd dog.”</p>



<p>Rick Minter, who has received more than 1,000 reports of people’s encounters with <a href="https://www.discoverwildlife.com/animal-facts/mammals/facts-about-big-cats">big cats</a>, said the animal was most likely to have been a<a href="https://www.discoverwildlife.com/animal-facts/mammals/leopard-facts"> leopard.</a></p>



<ul>
<li><a href="https://www.discoverwildlife.com/animal-facts/mammals/what-is-a-black-panther">What is a black panther?</a></li>
</ul>



<p>Of the five species in the&nbsp;<em>Panthera</em>&nbsp;genus&nbsp;–&nbsp;<a href="https://www.discoverwildlife.com/animal-facts/mammals/facts-about-lions">lion</a>, leopard, <a href="https://www.discoverwildlife.com/animal-facts/mammals/facts-about-tigers">tiger</a>, <a href="https://www.discoverwildlife.com/animal-facts/mammals/facts-about-jaguars">jaguar </a>and <a href="https://www.discoverwildlife.com/animal-facts/mammals/facts-about-snow-leopards">snow leopard</a>&nbsp;–&nbsp;the only other cat that has a similar melanistic form is the jaguar, and they don’t appear to be in the British countryside, he added.</p>



<p>This news follows the 2022&nbsp;<a href="https://www.discoverwildlife.com/news/new-dna-evidence-confirms-presence-of-big-cats-in-the-uk">discovery of strands of black animal hair on a barbwire fence in Gloucestershire apparently belonging to a big cat</a></p>
</div></article><!----></storefront-content-body><!----><!----></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to read C type declarations (2003) (110 pts)]]></title>
            <link>http://www.unixwiz.net/techtips/reading-cdecl.html</link>
            <guid>40387812</guid>
            <pubDate>Fri, 17 May 2024 08:57:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.unixwiz.net/techtips/reading-cdecl.html">http://www.unixwiz.net/techtips/reading-cdecl.html</a>, See on <a href="https://news.ycombinator.com/item?id=40387812">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="pagecontent">

<p>
Even relatively new C programmers have no trouble reading simple
C declarations such as
</p>

<pre><span>int      foo[5];     </span>// <i>foo is an array of 5 ints</i>
<span>char    *foo;        </span>// <i>foo is a pointer to char</i>
<span>double   foo();      </span>// <i>foo is a function returning a double</i>
</pre>

<p>
but as the declarations get a bit more involved, it's more difficult
to know exactly what you're looking at.
</p>

<pre><span>char *(*(**foo[][8])())[]; </span>// <i>huh ?????</i>
</pre>

<p>
It turns out that the rules for reading an arbitrarily-complex C variable
declaration are easily learned by even beginning programmers (though how
to actually <i>use</i> the variable so declared may be well out of reach).
</p>

<p>
This Tech Tip shows how to do it.
</p>

<h2 id="types">Basic and Derived Types</h2>

<p>
In addition to one variable name, a declaration is composed of one
"basic type" and zero or more "derived types", and it's crucial to
understand the distinction between them.
</p>

<p>
The complete list of basic types is:
</p>

<blockquote>
<table>
<tbody><tr>	<td> • <span>char</span>
	</td><td> • <span>signed char</span>
	</td><td> • <span>unsigned char</span>
	</td><td> &nbsp;	</td></tr>
<tr>	<td> • <span>short</span>
	</td><td> • <span>unsigned short</span>
	</td><td> &nbsp;
	</td><td> &nbsp;	</td></tr>
<tr>	<td> • <span>int</span>
	</td><td> • <span>unsigned int</span>
	</td><td> &nbsp;
	</td><td> &nbsp;	</td></tr>
<tr>	<td> • <span>long</span>
	</td><td> • <span>unsigned long</span>
	</td><td> &nbsp;
	</td><td> &nbsp;	</td></tr>
<tr>	<td> • <span>float</span>
	</td><td> • <span>double</span>
	</td><td> • <span>void</span>
	</td><td> &nbsp;	</td></tr>
<tr>	<td> • <span>struct <i>tag</i></span>&nbsp;&nbsp;&nbsp;
	</td><td> • <span>union <i>tag</i></span>&nbsp;&nbsp;&nbsp;
	</td><td> • <span>enum <i>tag</i></span>&nbsp;&nbsp;&nbsp;
	</td><td> &nbsp;	</td></tr>

<tr>	<td> • <span>long long</span>
	</td><td> • <span>unsigned long long&nbsp;</span>
	</td><td> • <span>long double</span>
	</td><td> &nbsp; &nbsp; <i>ANSI/ISO C only</i>			</td></tr>
</tbody></table>
</blockquote>

<p>
A declaration can have exactly <b>one</b> basic type, and it's always on
the far left of the expression.
</p>

<p>
The "basic types" are augmented with "derived types", and C has
three of them:
</p>

<dl>
<dt>
<b>* &nbsp; pointer to...</b>
</dt>
<dd>This is denoted by the familiar <b>*</b> character, and it should be
self evident that a pointer always has to point <b><i>to</i></b> something.
</dd>

<dt>
<b>[] &nbsp; array of...</b>
</dt>
<dd>"Array of" can be undimensioned -- <b>[]</b> -- or dimensioned -- <b>[10]</b> --
but the sizes don't really play significantly into reading a declaration.
We typically include the size in the description. It should be clear
that arrays have to be "arrays <b><i>of</i></b>" something.
</dd>

<dt>
<b>() &nbsp; function returning...</b>
</dt>
<dd>
This is usually denoted by a pair of parentheses together - <b>()</b> -
though it's also possible to find a prototype parameter list inside.
Parameters lists (if present) don't really play into reading a
declaration, and we typically ignore them. We'll note that parens
used to represent "function returning" are different than those
used for grouping: grouping parens <i>surround</i> the variable name,
while "function returning" parens are always on the right.
</dd>

<dd>
Functions are meaningless unless they <i>return</i> something (and we
accommodate the <b>void</b> type by waving the hand and pretend that
it's "returning" void).
</dd>

</dl>

<p>
A derived type <i>always</i> modifies something that follows, whether it be
the basic type or another derived type, and to make a declaration read
properly one must always include the preposition ("to", "of", "returning").
Saying "pointer" instead of "pointer to" will make your declarations fall
apart.
</p>

<p>
It's possible that a type expression may have no derived types (e.g.,
<span><b>"int i"</b></span> describes "i is an int"), or it can have
many. Interpreting the derived types is usually the sticking point when
reading a complex declaration, but this is resolved with operator
precedence in the next section.
</p>

<h2>Operator Precedence</h2>

<p>
Almost every C programmer is familiar with the operator precedence
tables, which give rules that say (for instance) multiply and divide
have higher precedence than ("are preformed before") addition or subtraction,
and parentheses can be used to alter the grouping.
This seems natural for "normal" expressions, but the same rules do
indeed apply to declarations - they are <i>type</i> expressions rather
than <i>computational</i> ones.
</p>

<p>
The "array of" <b>[]</b> and "function returning" <b>()</b> type operators
have higher precedence than "pointer to" <b>*</b>, and this leads to some
fairly straightforward rules for decoding.
</p>

<p>
<i>Always</i> start with the variable name:
</p>

<blockquote>
<b>foo is</b> ...
</blockquote>

<p>
and <i>always</i> end with the basic type:
</p>

<blockquote>
foo is ... <b>int</b>
</blockquote>

<p>
The "filling in the middle" part is usually the trickier part, but it
can be summarize with this rule:
</p>

<blockquote>
"go right when you can, go left when you must"
</blockquote>

<p>
Working your way out from the variable name, honor the precedence rules
and consume derived-type tokens to the right as far as possible without
bumping into a grouping parenthesis. Then go left to the matching paren.
</p>

<h2>A simple example</h2>

<p>
We'll start with a simple example:
</p>

<pre><span>long **foo[7];</span>
</pre>

<p>
We'll approach this systematically, focusing on just one or two small
part as we develop the description in English. As we do it, we'll
show the focus of our attention in <span>red</span>,
and <strike>strike out</strike> the parts we've finished with.
</p>

<dl>
<dt>
<span>long</span> **<span>foo</span> [7];
</dt>
<dd>
Start with the variable name and end with the basic type:
</dd>
<dd>
<span>foo is</span> ... <span>long</span>
</dd>

<dt>
<span>long</span> ** <span>foo</span><span>[7]</span>;
</dt>

<dd>At this point, the variable name is touching two derived types:
"array of 7" and "pointer to", and the rule is to go right when you can,
so in this case we consume the "array of 7"
</dd>

<dd>
<span>foo is</span>
<span>array of 7</span>
...
<span>long</span>
</dd>

<dt>
<span>long</span> *<span>*</span> <span>foo[7]</span>;
</dt>
<dd>Now we've gone as far right as possible, so the innermost part
is only touching the "pointer to" - consume it.
</dd>

<dd>
<span>foo is</span>
<span>array of 7</span>
<span>pointer to</span>
...
<span>long</span>
</dd>

<dt>
<span>long</span>
<span>*</span>
<span>*foo[7]</span>;
</dt>
<dd>
The innermost part is now only touching a "pointer to", so consume it also.
</dd>

<dd>
<span>foo is</span>
<span>array of 7</span>
<span>pointer to</span>
<span>pointer to</span>
<span>long</span>
</dd>
</dl>

<p>
This completes the declaration!
</p>

<h2>A hairy example</h2>

<p>
To really test our skills, we'll try a very complex declaration that very
well may never appear in real life (indeed: we're hard-pressed to think
of how this could actually be used). But it shows that the rules scale
to very complex declarations.
</p>

<dl>
<dt>
<span>char</span> *(*(**<span>foo</span> [][8])())[];
</dt>
<dd>
All declaration start out this way: "variable name is .... basictype"
</dd>
<dd>
<span>foo is</span> ... <span>char</span>
</dd>

<dt>
<span>char</span> *(*(**<span>foo</span><span>[]</span> [8])())[];
</dt>
<dd>
The innermost part touches "array of" and "pointer to" - go right.
</dd>
<dd>
<span>foo is</span>
<span>array of </span>
...
<span>char</span>
</dd>

<dt>
<span>char</span> *(*(**<span>foo[]</span><span>[8]</span>)())[];
</dt>
<dd>
It's common in a declaration to alternate right and left, but this is not the
rule: the rule is to go as far right as we can, and here we find that the innermost
part still touches "array of" and "pointer to". Again, go right.
</dd>
<dd>
<span>foo is</span>
<span>array of </span>
<span>array of 8</span>
...
<span>char</span>
</dd>

<dt>
<span>char</span> *(*(*<span>*</span> <span>foo[][8]</span>)())[];
</dt>
<dd>
Now we've hit parenthesis used for grouping, and this halts our march to the right.
So we have to backtrack to collect all the parts to the left (but only as far as
the paren). This consumes the "pointer to":
</dd>

<dd>
<span>foo is</span>
<span>array of</span>
<span>array of 8</span>
<span>pointer to</span>
...
<span>char</span>
</dd>

<dt>
<span>char</span> *(*(<span>*</span> <span>*foo[][8]</span>)())[];
</dt>
<dd>
Again we are backtracking to the left, so we consume the next "pointer to":
</dd>

<dd>
<span>foo is</span>
<span>array of</span>
<span>array of 8</span>
<span>pointer to</span>
<span>pointer to</span>
...
<span>char</span>
</dd>

<dt>
<span>char</span> *(*<span>(**foo[][8])</span><span>()</span>)[];
</dt>
<dd>
After consuming the "pointer to" in the previous step, this finished off the
entire parenthesized subexpression, so we "consume" the parens too. This
leaves the innermost part touching "function returning" on the right, and
"pointer to" on the left - go right:
</dd>

<dd>
<span>foo is</span>
<span>array of</span>
<span>array of 8</span>
<span>pointer to</span>
<span>pointer to</span>
<span>function returning</span>
...
<span>char</span>
</dd>

<dt>
<span>char</span> *(<span>*</span> <span>(**foo[][8])()</span> )[];
</dt>
<dd>
Again we hit grouping parenthesis, so backtrack to the left:
</dd>

<dd>
<span>foo is</span>
<span>array of</span>
<span>array of 8</span>
<span>pointer to</span>
<span>pointer to</span>
<span>function returning</span>
<span>pointer to</span>
...
<span>char</span>
</dd>

<dt>
<span>char</span> * <span>(*(**foo[][8])())</span><span>[]</span>;
</dt>
<dd>
Consuming the grouping parentheses, we then find that the innermost part is
touching "array of" on the right, and "pointer to" on the left. Go right:
</dd>

<dd>
<span>foo is</span>
<span>array of</span>
<span>array of 8</span>
<span>pointer to</span>
<span>pointer to</span>
<span>function returning</span>
<span>pointer to</span>
<span>array of</span>
...
<span>char</span>
</dd>

<dt>
<span>char</span> <span>*</span> <span>(*(**foo[][8])())[]</span>;
</dt>
<dd>
Finally we're left with only "pointer to" on the left: consume it to
finish the declaration.
</dd>

<dd>
<span>foo is</span>
<span>array of</span>
<span>array of 8</span>
<span>pointer to</span>
<span>pointer to</span>
<span>function returning</span>
<span>pointer to</span>
<span>array of</span>
<span>pointer to</span>
<span>char</span>
</dd>
</dl>


<p>
We have no idea how this variable is useful, but at least we can
describe the type correctly.
</p>

<p>
Note that example won't compile unless it's <u>initialized</u> to provide the dimension of the innermost array,
though none of this changes the fact that nobody would ever <i>actually</i> use this for anything:
</p>

<pre>
// explicit initialization
char *(*(**foo[][8])())[] <b>= { 0 };</b>

// implicit init from function call

<b>void myfunction(</b>char *(*(**foo[][8])())[]<b>)</b>
{
	...
}
</pre>

<h2>Abstract Declarators</h2>

<p>
The C standard describes an "abstract declarator", which is used when a
type needs to be described but not associated with a variable name. These
occur in two places -- casts, and as arguments to <b>sizeof</b> -- and they
can look intimidating:
</p>

<blockquote>
<span>int (*(*)())()</span>
</blockquote>

<p>
To the obvious question of "where does one start?", the answer is
"find where the variable name would go, then treat it like a normal
declaration".  There is only one place where a variable name could
possibly go, and locating it is actually straightforward. Using the
syntax rules, we know that:
</p>

<ul>
<li>to the right of all the "pointer to" derived type tokens
</li><li>to the left of all "array of" derived type tokens
</li><li>to the left of all "function returning" derived type tokens
</li><li>inside all the grouping parentheses
</li></ul>

<p>
Looking at the example, we see that the rightmost "pointer to" sets
one boundary, and the leftmost "function returning" sets another one:
</p>

<blockquote>
<span>
<span>int (*(*</span><span> • ) • </span><span>())()</span>
</span>
</blockquote>

<p>
The red • indicators show the only two places that could possibly hold
the variable name, but the leftmost one is the only one that fits the
"inside the grouping parens" rule. This gives us our declaration as:
</p>

<blockquote>
<span>int (*(*foo)())()</span>
</blockquote>

<p>
which our "normal" rules describe as:
</p>

<blockquote>
<b>foo is a pointer to function returning pointer to function returning int</b>
</blockquote>

<h2>Semantic restrictions/notes</h2>

<p>
Not all combinations of derived types are allowed, and it's possible
to create a declaration that perfectly follows the syntax rules but is
nevertheless not legal in C (e.g., <i>syntactically</i> valid but
<i>semantically</i> invalid). We'll touch on them here.
</p>

<dl>
<dt>Can't have arrays of functions
</dt>
<dd>Use "array of pointer to function returning..." instead.
</dd>

<dt>Functions can't return functions
</dt>
<dd>Use "function returning pointer to function returning..." instead.
</dd>

<dt>Functions can't return arrays
</dt>
<dd>Use "function returning pointer to array of..." instead.
</dd>

<dt>In arrays, only the leftmost [] can be undimensioned
</dt>
<dd>C supports multi-dimensional arrays (e.g.,
<span><b>char foo[1][2][3][4]</b></span>), though in practice
this often suggests poor data structuring. Nevertheless, when there
is more than one array dimension, only the leftmost one is allowed to
be empty.
<span><b>char foo[]</b></span> and
<span><b>char foo[][5]</b></span> are legal, but
<span><b>char foo[5][]</b></span>
is not.
</dd>

<dt>"void" type is restricted
</dt>
<dd>
Since <b>void</b> is a special pseudo-type, a variable with this basic type is
only legal with a final derived type of "pointer to" or "function returning".
It's not legal to have "array of void" or to declare a variable of just
type "void" without any derived types.
</dd>

<dd>
<pre><b>void *foo;</b>            // legal
<b>void foo();</b>           // legal
<b>void foo;</b>             // not legal
<b>void foo[];</b>           // not legal
</pre>
</dd>

</dl>

<h2>Adding calling-convention types </h2>

<p>
On the Windows platform, it's common to decorate a function declaration
with an indication of its <i>calling convention</i>. These tell the compiler
which mechanism should be used to call the function in question, and the
method used to call the function <em>must</em> be the same one which the
function expects. They look like:
</p>

<pre>extern int <b>__cdecl</b> main(int argc, char **argv);

extern BOOL <b>__stdcall</b> DrvQueryDriverInfo(DWORD dwMode, PVOID pBuffer,
                              DWORD cbBuf, PDWORD pcbNeeded);
</pre>

<p>
These decorations are very common in Win32 development, and are
straightforward enough to understand. More information can be found
in <a href="http://www.unixwiz.net/techtips/win32-callconv.html">Unixwiz.net
Tech Tip: Using Win32 calling conventions</a>
</p>

<p>
Where it gets somewhat more tricky is when the calling convention
must be incorporated into a pointer (including via a typedef), because
the tag doesn't seem to fit into the normal scheme of things. These
are often used (for instance) when dealing with the <b>LoadLibrary()</b>
and <b>GetProcAddress()</b> API calls to call a function from a freshly-loaded
DLL.
</p>

<p>
We commonly see this with typedefs:
</p>

<pre>typedef BOOL (<b>__stdcall</b> *PFNDRVQUERYDRIVERINFO)(
    DWORD   dwMode,
    PVOID   pBuffer,
    DWORD   cbBuf,
    PDWORD  pcbNeeded
    );

...

/* get the function address from the DLL */
pfnDrvQueryDriverInfo = (PFNDRVRQUERYDRIVERINFO)
	GetProcAddress(hDll, "DrvQueryDriverInfo")
</pre>

<p>
The calling convention is an attribute of the <i>function</i>,
not the <i>pointer</i>, so in the usual reading puts it after
the pointer but inside the grouping parenthesis:
</p>

<blockquote>
BOOL (<b>__stdcall</b> *foo)(...);
</blockquote>

<p>
is read as:
</p>

<blockquote>
foo is a pointer <br>
to a __stdcall function <br>
returning BOOL.
</blockquote>

<!--
<h1>"const" and "volatile"</h1>

These type qualifiers add a complication because they can apply to
either the basic type or the derived type.

<ul>
<li>If the qualifier is directly before or directly after the basic type,
it modifies the basic type, so these two are identical:

<pre class="codeblock">
int const ...;
const int ...;
</pre>

<li>
These qualifiers are otherwise consumed and read where they are found.
</ul>
-->



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Welcome to the Parallel Future of Computation (123 pts)]]></title>
            <link>https://hvm-page.pages.dev</link>
            <guid>40387394</guid>
            <pubDate>Fri, 17 May 2024 07:37:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hvm-page.pages.dev">https://hvm-page.pages.dev</a>, See on <a href="https://news.ycombinator.com/item?id=40387394">Hacker News</a></p>
<div id="readability-page-1" class="page"><section><main><section id="hero"><div><p><h2>WELCOME TO <br>THE PARALLEL <br>FUTURE OF COMPUTATION</h2></p></div><img alt="Logo" fetchpriority="high" width="400" height="400" decoding="async" data-nimg="1" srcset="https://hvm-page.pages.dev/_next/image?url=%2Flogo.gif&amp;w=640&amp;q=75 1x, https://hvm-page.pages.dev/_next/image?url=%2Flogo.gif&amp;w=828&amp;q=75 2x" src="https://hvm-page.pages.dev/_next/image?url=%2Flogo.gif&amp;w=828&amp;q=75"></section><section><div><p><span>BEND</span></p><h2 id="parallel-programming-language">A PARALLEL LANGUAGE</h2><p>With <b>Bend</b> you can write parallel code for multi-core CPUs/GPUs without being a C/CUDA expert with 10 years of experience. It feels just like Python!</p><p>No need to deal with the complexity of concurrent programming: locks, mutexes, atomics... <b>any</b> work that can be done in parallel<!-- --> <b>will </b>be done in parallel.</p></div><div><p><img alt="Example program - Simple parallel sum" fetchpriority="high" width="908" height="511" decoding="async" data-nimg="1" src="https://hvm-page.pages.dev/bend-card-image.svg"></p></div></section><section><div><p><span>HVM</span></p><h2>A PARALLEL RUNTIME</h2><p>In 1997, Yves Lafont devised a concurrent computation model,<b> Interaction Combinators</b>, which surpasses Turing Machines and the λ-Calculus in fundamental aspects.<!-- --> <a target="_blank" href="https://www.sciencedirect.com/science/article/pii/S0890540197926432">[1]</a></p><p>Based on that model, we built <b>HVM</b>: a compiler and evaluator for high-level languages that automatically achieves near-ideal speedup, up to 1000+ threads.<!-- --> <a target="_blank" href="https://paper.higherorderco.com/">[2]</a></p><p><b>Bend</b> is made from scratch to harness its power!</p></div><div><p><img alt="Comparison chart between processors" fetchpriority="high" width="908" height="511" decoding="async" data-nimg="1" src="https://hvm-page.pages.dev/performance-card-image.svg"></p><p><span><div><p><span>Comparison Chart</span><span>Tree Radix Sort, 1 million branches</span></p></div></span></p></div></section><section><h2>HOW IS<br> IT POSSIBLE?</h2><p><video muted="" loop="" controls=""><source src="https://hvm-page.pages.dev/HVM-explanation.mp4" type="video/mp4">Your browser does not support the video tag.</video></p></section><section><span>HVM | Bend | Kind</span><h2>OUR PROJECTS</h2></section><div><h2>BE A PART <br>OF THE PARALLEL <br>FUTURE OF COMPUTERS</h2><p><a href="https://discord.higherorderco.com/"><img alt="X Icon" loading="lazy" width="37" height="34" decoding="async" data-nimg="1" src="https://hvm-page.pages.dev/discord-icon.svg"></a><a href="https://hvm-page.pages.dev/cdn-cgi/l/email-protection#2645494852474552664e4f414e4354495442435445490845494b"><img alt="Email Icon" loading="lazy" width="37" height="34" decoding="async" data-nimg="1" src="https://hvm-page.pages.dev/mail.svg"></a></p></div></main></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ADSL works over wet string (2017) (142 pts)]]></title>
            <link>https://www.revk.uk/2017/12/its-official-adsl-works-over-wet-string.html</link>
            <guid>40387318</guid>
            <pubDate>Fri, 17 May 2024 07:24:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.revk.uk/2017/12/its-official-adsl-works-over-wet-string.html">https://www.revk.uk/2017/12/its-official-adsl-works-over-wet-string.html</a>, See on <a href="https://news.ycombinator.com/item?id=40387318">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-5029701509758256719" itemprop="description articleBody"><p>
Broadband services are a wonderful innovation of our time, using multiple frequency&nbsp;<i>bands</i>&nbsp;(hence the name) to carry signals over wires (usually copper, sometimes aluminium). One of the key aspects of the technology is its ability to adapt to the length and characteristics of the <i>line</i>&nbsp;on which it is deployed.</p><p>

We have seen faults on broadband circuits that manifest as the system adapting to much lower speeds, this is a key factor as a service can work, but unusually slowly, over very bad lines.</p><p>

It has always been said that ADSL will work over a bit of wet string.</p><p>

Well one of our techies (<a href="http://www.aa.net.uk/">www.aa.net.uk</a>) took it upon himself to try it today at the office, and well done.</p><p>

He got some proper string, and made it wet...</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiYcBN70mIYdRYigskEuV8PDE0yPRs7zbyzDkzGun0h-y4fopOv6C3J3wpbluSvkfJD3HicV2NgH7LwAa4ROvo8m3wzA2uIhIthODnRtTbaotQl-2Ul17FeGaS-BgW_Pm90WDzAekueXfn8/s1600/DQziME8WsAAT8ZP.jpg-large.jpeg" imageanchor="1"><img data-original-height="1600" data-original-width="1600" height="400" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiYcBN70mIYdRYigskEuV8PDE0yPRs7zbyzDkzGun0h-y4fopOv6C3J3wpbluSvkfJD3HicV2NgH7LwAa4ROvo8m3wzA2uIhIthODnRtTbaotQl-2Ul17FeGaS-BgW_Pm90WDzAekueXfn8/s400/DQziME8WsAAT8ZP.jpg-large.jpeg" width="398"></a></p>
<p>
It turns out he needed salty water to get anywhere.</p><p>

A 2m length...</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhzfxiXpSYRB2FnNaoG__p1X5ksR9YZZCgLjqO0fRSh1Mzbj8_eKyCWgWXSs6wq62qT6m5KqMztxpvDgfabiV3m2nCutk9alzjrCHZBwbl-DbaPbOzv5GGzY6jb0UOQXeDlAfCqGIiglzmL/s1600/DQ3XL2hXcAAhodq.jpg-large.jpeg" imageanchor="1"><img data-original-height="1600" data-original-width="900" height="400" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhzfxiXpSYRB2FnNaoG__p1X5ksR9YZZCgLjqO0fRSh1Mzbj8_eKyCWgWXSs6wq62qT6m5KqMztxpvDgfabiV3m2nCutk9alzjrCHZBwbl-DbaPbOzv5GGzY6jb0UOQXeDlAfCqGIiglzmL/s400/DQ3XL2hXcAAhodq.jpg-large.jpeg" width="225"></a><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg_gPzLHD7Pd0gXBoMSPzHBfgyr-uvdRDZW9MOGNImhV52TQ__qhq8SSZ2jejJMAS-n6wRr8eTskizEgMe2kZs6wu6JRzengVCeKOD_fxt3nQQceEkihdfyGneVDGDx3u_0mopFy9RzJQkH/s1600/DQ3MsLnWsAAmJs7.jpg-large.jpeg" imageanchor="1"><img data-original-height="1600" data-original-width="900" height="400" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg_gPzLHD7Pd0gXBoMSPzHBfgyr-uvdRDZW9MOGNImhV52TQ__qhq8SSZ2jejJMAS-n6wRr8eTskizEgMe2kZs6wu6JRzengVCeKOD_fxt3nQQceEkihdfyGneVDGDx3u_0mopFy9RzJQkH/s400/DQ3MsLnWsAAmJs7.jpg-large.jpeg" width="225"></a></p>
<p>
And the result - it works!!! Not even that slow (3½Mb/s down) though slow uplink. Don't dare touch the string though...</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjBR2f_22FYsSlVy42w7VznpfqOFsNM0_028eo23bUhJFDubCwDAMTQaSow9vM3z64MNJtysx8hF1PvcDBaPEPR04o7hdwifiCJfzc7qgWih-xC_7U55JZED8LFSMdfZN4NDjNfct155RPw/s1600/DQ3NL95XUAAabAq.jpg-large.jpeg" imageanchor="1"><img data-original-height="900" data-original-width="1600" height="225" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjBR2f_22FYsSlVy42w7VznpfqOFsNM0_028eo23bUhJFDubCwDAMTQaSow9vM3z64MNJtysx8hF1PvcDBaPEPR04o7hdwifiCJfzc7qgWih-xC_7U55JZED8LFSMdfZN4NDjNfct155RPw/s400/DQ3NL95XUAAabAq.jpg-large.jpeg" width="400"></a></p>
<p>
So, there you go, ADSL over 2m of literal "wet string". Well done all for testing this. It shows the importance of handling faults that seem to just be "low speed".</p><p>

As a bonus, fit tin cans to both ends and you get voice as well as broadband on the same wet string!
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Urban renewal left the U.S. too scared to build (126 pts)]]></title>
            <link>https://darrellowens.substack.com/p/how-urban-renewal-ruined-everything</link>
            <guid>40385710</guid>
            <pubDate>Fri, 17 May 2024 02:21:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://darrellowens.substack.com/p/how-urban-renewal-ruined-everything">https://darrellowens.substack.com/p/how-urban-renewal-ruined-everything</a>, See on <a href="https://news.ycombinator.com/item?id=40385710">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>“America can’t build anything,” my co-worker, a talented data scientist from China, remarked as we rode a BART train through a suburb of Oakland. She was humored by the contrast of ultra-modern subways and dense apartments in Chengdu with the 1960s stucco houses and the Apollo 11-era BART metro system of the Bay Area. The mayor of San Francisco had a similar thought on </span><a href="https://sfstandard.com/2024/04/16/san-francisco-london-breed-china-shenzhen-yimby/" rel="">her recent trip to China</a><span>, marveling at the infrastructure built within a few years. We hear it a million times in American media: our infrastructure sucks. It takes too long to build a single home in most cities and $1.7 million to build a bathroom in San Francisco. Four stations on a mere six-mile VTA-led BART extension through mostly suburban San Jose will cost as much as $12 billion, more than double the annual war budget of Iran.</span></p><p>The culprit is many factors, but much of them originate with urban renewal — the aggressive bulldozing and re-development programs that peaked in the 1950s and 1960s. Ramped up by the Eisenhower Administration, aggressive public policy used infrastructure like freeways and property development to bulldoze low-income areas. The impacts persist to this day: the destruction of Black middle-class urban neighborhoods, vacant lots in once-thriving districts, the erasure of historic districts, the masses of jumbled freeways, and the mass migration of people out of cities.</p><p>Most stated urban renewal goals were total failures. Intending to revitalize business in the city core, most redevelopment projects were failures at attracting and sustaining private investment in cities, with a few exceptions. Intending to remove their Black population, urban renewal depressed property values and kept these neighborhoods majority Black, though depopulated and poorer. Urban renewal did convince most Americans that the government was incapable of delivering public projects. It had successfully frightened minorities that the government would usurp their lands and target them. It had convinced the white middle class that government programs were mostly tax-wasting, destructive projects and fueled the tax revolt of the 1970s.</p><p>The backlash to how urban renewal was conducted primarily blamed its top-down approach to urban planning. Federal and state bureaucrats from neighborhoods far away from areas they lived made radical decisions about people’s neighborhoods without their input. Post-urban renewal, major planning and consulting decisions were given to private, tax-exempt companies a.k.a. not-for-profits. By the 1980s and 1990s, a cottage industry of inner-city nonprofits acting as community middlemen emerged to do that job. Private companies had already been contracted as consultants and contractors for public development during urban renewal. Now, major planning aspects of public development are directly influenced by private organizations, which aren’t inherently democratic. Rather than building up cost-effective public capacity, public funds go to private companies to manage decisions and outreach.</p><p>Accompanying this change was the ballooning of public process and veto points, often in the name of “bottom-up” planning. In my opinion, the accurate takeaway from urban renewal was not that the government lacked checks and balances in public development, as is often told. Many affluent and middle-class neighborhoods were spared from bulldozers with very little resistance. Ugly freeways sprawled throughout Oakland yet ceased at the Berkeley border because Berkeley’s local government listened to its wealthier homeowners and vetoed the city’s freeway project. Oakland City Council did not care about its mostly poorer populace and invited freeways in with comparatively less fuss.</p><p>Urban renewal wasn’t as top-down as people say. The routing of freeways and public project placements were often determined by municipalities and states, not federal officials, and they chose targets like minority neighborhoods. Rather than recognizing that representation in government gave way to the destruction of neighborhoods, a myth has emerged that there weren’t enough meetings. These urban renewal projects were deliberated on for years or enshrined in local master plans decades prior— always without the explicit participation or solicitation of poor communities.</p><p><span>Today, publicly funded projects have an excessive number of meetings where very little if anything is accomplished in defense of the project, yet every meeting presents an opportunity to veto the project. Nor have equitable outcomes been achieved. Though not called “urban renewal” anymore, freeway construction and widening projects </span><a href="https://www.planetizen.com/news/2023/07/124895-new-highways-are-still-tearing-communities-apart" rel="">continue to ravage</a><span> disproportionately ethnic minority and lower-income neighborhoods in 2024.</span></p><p><span>The public outreach process tends to </span><a href="https://www.dropbox.com/s/k4kzph3ynal3xai/ZoningParticipation_Perspectives_Final.pdf?e=1&amp;dl=0" rel="">heavily benefit older, retired, wealthier and home-owning resident</a><span>s that can go to city hall regularly. Holding more meetings doesn’t increase equitable outcomes, rather it gives that constituency more chances to veto a project. Working people and parents with under-aged kids often can’t spend time at city hall, waiting for hours before commenting on projects that may benefit or harm them. Excessive hearings significantly increase the cost of all projects because salaries must be paid to officials and consultants for every minor adjustment, both in the government and private sector.</span></p><p>Another failed attempt at reform was environmental law. The biggest mistake that early environmental advocacy made in the 1970s was suggesting that simply being opposed to development was environmentally friendly. Today, modern climate science understands that’s incorrect, but our laws treat carbon-reduction projects as equivalent to any net-carbon increase project. Bus lanes that would take cars off the road go through extremely costly and years-long environmental review. Same for infill housing or green energy projects, which can cost hundreds of thousands in review and permitting alone.</p><p>Environmental law often also fails to distinguish between existing uses predating these laws and new uses meant to combat them. The most glaring example would be California High-Speed Rail, which would provide tremendous carbon-reduction benefits on a crowded highway and air corridor. Yet because of the California Environmental Quality Act and the federal National Environmental Policy Act, high speed rail has been delayed by decades of litigation, obstruction and study. Yet the existing West Coast crowded airline corridor, suburban sprawl, and highways built before these laws came into effect cannot have the laws used against them. Even though their emissions grew beyond their initial projections and high-speed rail would reduce them.</p><p><span>Our entire approach to land-use is both insanely slow and produces carbon-intensive outcomes through status quoism, all thanks to urban renewal’s trauma. In Vienna, Austria their public housing developments are influenced and customized by local community boards, but they can not prohibit housing. Unlike the U.S. where zoning dictates what you can do with your property, zoning in Japan dictates what you </span><em>can’t </em><span>do with property. Infrastructure can be delivered quicker there, as land use focuses on regulating against harm rather than micro-managing all possible uses. The latter leads to cities like Half Moon Bay, California, </span><a href="https://www.mercurynews.com/2024/05/15/half-moon-bay-planning-commission-reluctantly-oks-senior-farmworker-housing-with-conditions/" rel="">dictating and downsize housing </a><span>for low income farm workers who recently suffered a mass shooting, because the concerns of neighbors supersede the welfare of the public at large.</span></p><p>As frustrating as it is to wait 30 years for California High-Speed rail to finish, it's the punishment we pay for never truly atoning for the harm urban renewal did, and precisely how it did it. We live in a fantasy world where all government projects and development done efficiently come at the material cost of communities, rather than the truth which is that urban renewal was meant to destroy, not improve neighborhoods. It’s hard to envision a future where we’ll have good infrastructure in the United States.</p><p><span>For all the gags and bewilderment of American media in the late 2000s made about “Chinese Ghost Cities”, most of those cities are now well occupied. The Chinese government correctly predicted population growth and built cities ahead of time, although not in the most efficient manner. The United States ignored our bustling population needs because we can’t plan or build cities anymore, and within 10 years we went from a housing bubble to a housing shortage where rent is the </span><a href="https://www.nytimes.com/2024/04/10/business/housing-rent-inflation-cpi.html" rel="">primary cause of national inflation</a><span>. U.S. cities barely plan for the future anymore and don’t have any extravagant ideas about how they’ll need to grow. </span></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[100 Exercises to Learn Rust (637 pts)]]></title>
            <link>https://rust-exercises.com/</link>
            <guid>40385536</guid>
            <pubDate>Fri, 17 May 2024 01:53:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rust-exercises.com/">https://rust-exercises.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40385536">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page-wrapper">

            <div id="content" class="page">
                    <main>
                        <h2 id="welcome"><a href="#welcome">Welcome</a></h2>
<p>Welcome to <strong>"100 Exercises To Learn Rust"</strong>!</p>
<p>This course will teach you Rust's core concepts, one exercise at a time.<br>
You'll learn about Rust's syntax, its type system, its standard library, and its ecosystem.</p>
<p>We don't assume any prior knowledge of Rust, but we assume you know at least
another programming language.<br>
We also don't assume any prior knowledge of systems programming or memory management. Those
topics will be covered in the course.</p>
<p>In other words, we'll be starting from scratch!<br>
You'll build up your Rust knowledge in small, manageable steps.
By the end of the course, you will have solved ~100 exercises, enough to
feel comfortable working on small to medium-sized Rust projects.</p>
<h2 id="methodology"><a href="#methodology">Methodology</a></h2>
<p>This course is based on the "learn by doing" principle.<br>
It has been designed to be interactive and hands-on.</p>
<p><a href="https://mainmatter.com/rust-consulting/">Mainmatter</a> developed this course
to be delivered in a classroom setting, over 4 days: each attendee advances
through the lessons at their own pace, with an experienced instructor providing
guidance, answering questions and diving deeper into the topics as needed.<br>
If you're interested in attending one of our training sessions, or if you'd like to
bring this course to your company, please <a href="https://mainmatter.com/contact/">get in touch</a>.</p>
<p>You can also follow the course on your own, but we recommend you find a friend or
a mentor to help you along the way should you get stuck. You can
also find solutions to all exercises in the
<a href="https://github.com/mainmatter/100-exercises-to-learn-rust/tree/solutions"><code>solutions</code> branch of the GitHub repository</a>.</p>
<h2 id="structure"><a href="#structure">Structure</a></h2>
<p>On the left side of the screen, you can see that the course is divided into sections.
Each section introduces a new concept or feature of the Rust language.<br>
To verify your understanding, each section is paired with an exercise that you need to solve.</p>
<p>You can find the exercises in the
<a href="https://github.com/mainmatter/100-exercises-to-learn-rust">companion GitHub repository</a>.<br>
Before starting the course, make sure to clone the repository to your local machine:</p>
<pre><code># If you have an SSH key set up with GitHub
git clone git@github.com:mainmatter/100-exercises-to-learn-rust.git
# Otherwise, use the HTTPS URL:
#
#   git clone https://github.com/mainmatter/100-exercises-to-learn-rust.git
</code></pre>
<p>We also recommend you work on a branch, so you can easily track your progress and pull
in updates from the main repository, if needed:</p>
<pre><code>cd 100-exercises-to-learn-rust
git checkout -b my-solutions
</code></pre>
<p>All exercises are located in the <code>exercises</code> folder.
Each exercise is structured as a Rust package.
The package contains the exercise itself, instructions on what to do (in <code>src/lib.rs</code>), and a test suite to
automatically verify your solution.</p>
<h3 id="wr-the-workshop-runner"><a href="#wr-the-workshop-runner"><code>wr</code>, the workshop runner</a></h3>
<p>To verify your solutions, we've provided a tool that will guide you through the course.
It is the <code>wr</code> CLI (short for "workshop runner").
Install it with:</p>
<pre><code>cargo install --locked workshop-runner
</code></pre>
<p>In a new terminal, navigate back to the top-level folder of the repository.
Run the <code>wr</code> command to start the course:</p>
<pre><code>wr
</code></pre>
<p><code>wr</code> will verify the solution to the current exercise.<br>
Don't move on to the next section until you've solved the exercise for the current one.</p>
<blockquote>
<p>We recommend committing your solutions to Git as you progress through the course,
so you can easily track your progress and "restart" from a known point if needed.</p>
</blockquote>
<p>Enjoy the course!</p>
<h2 id="references"><a href="#references">References</a></h2>
<ul>
<li>The exercise for this section is located in <code>exercises/01_intro/00_welcome</code></li>
</ul>

<p>This course was written by <a href="https://www.lpalmieri.com/">Luca Palmieri</a>, Principal Engineering
Consultant at <a href="https://mainmatter.com/rust-consulting/">Mainmatter</a>.<br>
Luca has been working with Rust since 2018, initially at TrueLayer and then at AWS.<br>
Luca is the author of <a href="https://zero2prod.com/">"Zero to Production in Rust"</a>,
the go-to resource for learning how to build backend applications in Rust.<br>
He is also the author and maintainer of a variety of open-source Rust projects, including
<a href="https://github.com/LukeMathWalker/cargo-chef"><code>cargo-chef</code></a>,
<a href="https://pavex.dev/">Pavex</a> and <a href="https://github.com/LukeMathWalker/wiremock-rs"><code>wiremock</code></a>.</p>

                    </main>

                    <nav aria-label="Page navigation">
                        <!-- Mobile navigation buttons -->

                            <a aria-keyshortcuts="Right" aria-label="Next chapter" href="https://rust-exercises.com/01_intro/01_syntax" rel="next prefetch" title="Next chapter">
                                <i></i>
                            </a>

                        
                    </nav>
                </div>

            <nav aria-label="Page navigation">

                    <a aria-keyshortcuts="Right" aria-label="Next chapter" href="https://rust-exercises.com/01_intro/01_syntax" rel="next prefetch" title="Next chapter">
                        <i></i>
                    </a>
            </nav>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A transport protocol's view of Starlink (156 pts)]]></title>
            <link>https://www.potaroo.net/ispcol/2024-05/starlink-tcp.html</link>
            <guid>40384959</guid>
            <pubDate>Fri, 17 May 2024 00:17:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp.html">https://www.potaroo.net/ispcol/2024-05/starlink-tcp.html</a>, See on <a href="https://news.ycombinator.com/item?id=40384959">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="wrapper">
<table>
<tbody><tr>
<td colspan="2">

<p><span face="Arial,Helvetica,Geneva,Swiss,SunSans-Regular">
<i>A column on things Internet</i></span></p>
</td>
</tr>
<tr>
<td></td>
<td>
<div><p>
Other Formats:
</p><!-- InstanceBeginEditable name="pdffile" -->
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp.pdf"><img src="https://www.potaroo.net/images/pdf.png" width="18" height="18" alt="PDF"></a></p><!-- InstanceEndEditable -->
&nbsp;
<!-- InstanceBeginEditable name="txtfile" -->
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp.txt"><img src="https://www.potaroo.net/images/txt.png" width="18" height="18" alt="TXT"></a></p><!-- InstanceEndEditable -->
&nbsp;

</div>
</td>
</tr>
<tr>
<td colspan="2">
<hr>
<br>
</td>
</tr>
</tbody></table>
<p><span color="#CC6633" size="+2" face="Verdana,Times,Times New Roman">
<b>
<!-- InstanceBeginEditable name="title" -->A Transport Protocol’s View of Starlink<!-- InstanceEndEditable -->
</b>
</span>
<br>
<span color="#666666" face="Verdana,Times,Times New Roman">
<!-- InstanceBeginEditable name="month-year" -->May 2024<!-- InstanceEndEditable -->
</span>
</p>

<!-- InstanceBeginEditable name="bodytext" -->
<p>Digital communications systems always represent a collection of design trade-offs. Maximising one characteristic of a system may impair others, and various communications services may chose to optimise different performance parameters based on the intersection these design decisions with the physical characteristics of the communications medium. In this article I’ll look at the Starlink service [1], and how TCP, the workhorse transport protocol of the Internet, interacts with the characteristics of the Starlink service.</p>
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig1.png"><img src="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig1.png" width="40%"></a><br>Figure 1 – Orbiting Bodies from Newton’s Principia Mathematica</p>
<p>To start, its useful to recall a small item of Newtonian physics from 1687 [2]. On the surface of the earth if you fire a projectile horizontally it will fall back to earth due to the combination of the effects of the friction from the earth’s atmosphere and the earth’s gravitational force. However, assuming that the earth has no friction-inducing atmosphere, then if you fire this projectile horizontally fast enough it will not return to the earth, but head into space. If you are high enough to clear various mountains that may be in the way, there is, however, a critical velocity where the projectile will be captured by the earth’s gravity and neither fall to ground nor head out into space (Figure 1).</p>
<p>This orbital velocity at the surface of the earth is some 40,320 km/sec. The orbital velocity decreases with altitude, and at an altitude of 35,786 km above the surface of the earth the orbital velocity of the projectile relative to a point on the surface of the spinning earth is 0 km/sec. This is the altitude of a geosynchronous equatorial orbit, where the orbiting object appears to sit at a fixed location in the sky.</p>
<h3>Geosynchronous Services</h3>
<p>Geosynchronous satellites were the favoured approach for the first wave of satellite-based communications services. Each satellite could “cover” an entire hemisphere. If the satellite was on the equatorial plane, then it was at a fixed location in the sky with respect to the earth, allowing the use of large antenna. These antennas were able to operate at a low signal to noise ratio, allowing the signal modulation to use an encoding with a high density of discrete phase amplitude points, which lifted the capacity of the service.</p>
<p>All this must be offset against the less favourable aspects of a geosynchronous service. Consideration of crosstalk interference between adjacent satellites in geosynchronous orbits using the same radio frequencies resulted in international agreements that require a 2° spacing for geosynchronous satellites that use the same frequency, so this orbital slot is a limited resource that is limited to just 180 spacecraft if they all use K band (18 – 27Ghz) radio systems. At any point on the earth there is an upper bound to the signal capacity that can be received (and sent) using geosynchronous services.</p>
<p>Depending on whether the observer is on the equator directly beneath the satellite, or further away from this point, a geosynchronous orbit satellite is between 35,760 and 42,664 km away, so a signal round trip time to the geosynchronous satellite and back will between 238ms and 284ms in terms of signal propagation time. In IP terms, that’s a round trip time of between 477 and 569ms and to this needs to be added the signal encoding and decoding times. In addition, there is a delay for the signal to be passed between the terrestrial end points and the satellite earth stations. In practice, a round trip time of around two thirds of a second (660ms) for Internet paths that include a geosynchronous satellite service is a common experience.</p>
<p>This extended latency means that the endpoints need to use large buffers to hold a copy of all the unacknowledged data, as is required by the TCP protocol. TCP is a feedback-governed governed protocol, using ACK pacing. The longer the round time the greater the lag in feedback, and the slower the response from end points to congestion or to available capacity. The congestion considerations lead to the common use of large buffers in the systems driving the satellite circuits which can further exacerbate congestion-induced instability. In geosynchronous service contexts, individual TCP sessions are more prone to instability and experience longer recovery times following low events as compared to their terrestrial counterparts, when such counterparts exist [3].</p>
<h3>Low Earth Orbit Systems</h3>
<p>A potential response to the drawbacks of geosynchronous satellites is to bring the satellite closer to earth. This approach has several benefits. The earth’s spinning iron core generates a magnetic field, which traps energetic charged solar particles and redirects them through what is called the “Van Allen Belt”, thus deflecting solar radiation. Not only does this allow the earth to retain its atmosphere, but it also protects the electronics of orbiting satellites that use an orbital altitude below 2,000 km or so from the worst effects of solar radiation (such as the recent solar storms). It’s also far cheaper to launch satellites into a low earth orbit, and these days SpaceX is able to do so using re-usable rocket boosters.</p>
<p>The reduced distance between the earth and the orbiting satellite reduces the latency in sending a signal to the satellite and back which can improve the efficiency of the end-to-end packet transport protocols that include such satellite circuits.</p>
<p>This group of orbital altitudes, from some 160km to 2,000km, are collectively termed <i>Low Earth Orbit</i> (or LEOs) [4]. The objective here is to keep the satellite’s orbit high enough to prevent it slowing down by grazing the upper parts of the earth’s ionosphere, but not so high that it loses the radiation protection afforded by the Inner Van Allen belt [5]. At a height of 550km, the minimum signal propagation delay to reach the satellite and back from the surface of the earth is just 3.7ms.</p>
<p>But all of this comes with some different issues. At a height of 550km an orbiting satellite can only be seen by a small part of the earth. If the minimum effective elevation to establish communication is 25 degrees of elevation above the horizon, then the satellite’s footprint is a circle with a radius of 940km, or a circle of area 2M km2. (Lower angles of elevation are possible but the longer the path segment through the earth’s atmosphere decreases the signal to noise ratio, compromising the available signal capacity as well as increasing the total path delay.) To provide continuous service to any point on the earth’s surface (510.1M km2) the minimum number of orbiting satellites is 500. This use of a constellation of satellites implies that a LEO satellite-based service is not a simple case of sending a signal to a fixed point in the sky and having that single satellite mirror that signal down to some other earth location. A continuous LEO satellite service needs to hop across a continual sequence of satellites as they pass overhead and switch the virtual circuit path across to successive satellites as they come into view of both the end user and the user’s designated earth station.</p>
<p>At the altitude of 550 km, an orbiting satellite is moving with a relative speed of 27,000 km/hour relative to a point on the earth’s surface and passes across the sky from horizon to horizon in under 5 minutes. This has some implications for the design of the radio component of the service. If the satellite constellation is large enough, then the satellites are close enough to each other that there is no need to use larger dish antennae that require some mechanised steering arrangement that tracks individual satellites in their path across the sky, but this itself it not without its downside. An individual signal carrier might be initially acquired as a weak signal (in relative terms), increases in strength as the satellite’s radio transponder and the earth antenna move into alignment, and weakens again as the satellite moves on. Starlink’s antennae use a phased array arrangement using a grid of smaller antennae on a planar surface. This allows the antenna to be electronically steered by altering the phase difference between each of the antennae in the grid. Even so, this is a relatively coarse arrangement, so the signal quality is not consistent. This implies a constantly varying Signal to Noise Ratio (SNR) as the phased array antenna tracks each satellite during its overhead path.</p>
<p>It appears that Starlink services use dynamic channel rate control as a response to this constantly varying SNR. The transmitter constantly adjusts the modulation and coding scheme to match the current SNR, as described in the IEEE 802.11ac standard. The modulation of this signal uses adaptive phase amplitude modulation, and as the SNR improves the modulator can use a larger number of discrete code points in this phase amplitude space, thus increasing the effective capacity of the service while using a constant frequency carrier signal. What this implies is that the satellite service is attempting to operate at peak carriage efficiency, and to achieve this the transmitter constantly adapts its signal modulation to take advantage of the instantaneous SNR from the satellite system. To the upper layer protocol drivers, the transmission service appears to have a constantly varying channel capacity and latency. </p>
<p>The Starlink satellite’s Ku-band downlink has a total of 8 <i>channels</i> using frequency division multiplexing. Each channel has an analogue bandwidth of 240Mhz. Each channel is broken into <i>frames</i>, which is subdivided using time division multiplexing into 302 intervals, each of 4.4µs, which together with a frame guard interval makes each frame 1,333µs, or 750 frames per second. Each frame contains a header that contains satellite, channel and modulation information [6]. The implication is that there is a contention delay of up to 1.3ms assuming that each active user is assigned at least one interval per frame.</p>
<p>This leaves us with four major contributory factors for variability of the capacity of the Starlink service, namely:</p><ul>
<li>the variance in signal modulation capability, which is a direct outcome of the varying SNR of the signal,</li><li>the variance in the satellite path latency due to the relative motion of the satellite and the earth antennae,</li><li>the need to perform satellite switching on a regular basis, and</li><li>the variability induced by sharing the common satellite transmission medium with other users, which results in slot contention.</li></ul>
<p>One way to see how these variability factors impacts on the service characteristics is to use a capacity measurement tool to measure the service capacity on a regular basis. The results of such a capacity measurement test in a Starlink service are shown in Figure 2. Here the test is a SpeedTest measurement test [7], performed on a 4-hourly basis for the period August 2023 through March 2024. The service appears to have a median value of around 120Mbps of download capacity, with individual measurements reading as high as 370Mbps and as low as 10Mbps, and 15Mbps of upload capacity, with variance of between 5Mbps to 50Mbps.</p>
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig2.png"><img src="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig2.png" width="80%"></a><br>Figure 2 – Starlink Performance</p>
<p>In Internet terms <i>ping</i> [8] is a very old tool, but at the same time it’s still a very useful tool, which probably explains its longevity. Figure 3 is a plot of a continuous (flood) ping across a Starlink connection from the customer side terminal to the first IP end point behind the Starlink earth station for a 380 second interval. (A “flooding” ping sends a new ping packet each time a packet is received from the remote end).</p>
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig3.png"><img src="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig3.png" width="80%"></a><br>Figure 3 – Starlink Ping Profile</p>
<p>The first major characteristic that is visible in this ping data is that the minimum latency changes regularly every 15 seconds. It appears that this change correlates to the Starlink user’s terminal being assigned to a different satellite. That implies that the user equipment “tracks” each satellite for a 15 second interval, which corresponds to a tracking angle of 11 degrees of arc.</p>
<p>The second characteristic is that loss events are seen to occur at times of switchover between satellites, as well as occurring less frequently as a result of either obstruction, signal quality or congestion.</p> 
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig4.png"><img src="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig4.png" width="80%"></a><br>Figure 4 – Starlink Ping Profile showing satellite handover</p>
<p>The third is that there is a major increase in latency at the point when the user is assigned to a different spacecraft. The worst case in this data set is a shift from 30ms to 80ms.</p>
<p>Finally, within each 15s satellite tracking interval the latency variation is relatively high. The average variation of jitter between successive RTT intervals is 6.7ms. The latency spikes at handover impose an additional 30ms to 50ms indicating the presence of deep buffers in the system to accommodate the transient issues associated with satellite handover. To illustrate this link behaviour the ping data set has been filterred to remove the effects of the satellite assignment at second 283 and second 298.  (Figure 5).</p>
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig5.png"><img src="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig5.png" width="80%"></a><br>Figure 5 – Starlink Ping Profile showing latency variance</p>
<p>The overall packet loss rate, when measuring using 1-second paced pings over an extended period is a little over 1% as a long-term average loss rate.</p>
<h3>TCP Protocol Performance</h3>
<p>TCP [9] is an instance of a sliding window positive acknowledgement protocol. The sender maintains a local copy of all data that has been passed into the local system’s IP layer and will only discard that local copy of sent data when it has received a positive acknowledgement from the receiver.</p>
<p>Variants to TCP are based on the variations in the sender’s control of the rate of passing data into the network and variations in the response to data loss. The classic version of TCP is one that uses a linear inflation of the sending window size while there is no loss, and halves this window in response to packet loss. This is the RENO TCP control algorithm. Its use in today’s Internet has been largely supplanted by the CUBIC TCP control algorithm [10] which uses a varying window inflation rate that attempts to stabilise the sending rate at a level just below the build-up of network queues (which ultimately leads to packet loss). </p>
<p>In general terms there is a small set of common assumptions about the characteristics of the network path for such TCP control algorithms:
</p><li>There is a <i>stable</i> maximal capacity of the path, where the term stability describes a situation where the available path capacity is relatively constant across a number of RTT intervals.</li><li>The amount of <i>jitter</i> (variation in end-to-end delay) is low in proportion to the RTT.</li><li>&gt;The average <i>packet loss rate</i> is low. In the case of congestion-based loss TCP control algorithms packet loss is generally interpreted by the algorithm as a sign that the network’s buffers have filled, and loss is an indication of buffer overflow.
<p>Obviously, as we’ve noted, the first two conditions do not necessarily hold for end-to-end paths that include a Starlink component. The loss profile is also different. There is the potential for congestion-induced packet loss, as is the case in any non-synchronous packet switched medium, but there is an additional loss component that can occur during satellite handover, and a further loss component that can be caused by other impairments imposed upon the radio signal.</p>
<p>TCP typically tends to react to such environments by using conservative choices.</p>
<p>The RTT estimate is a smoothed average value of RTT measurements, to which is added the mean deviation of individual measurements from this average. For Starlink, with its relatively high level of individual variance in RTT measurements this means that the TCP sender may operate with a RTT estimate that is higher than the minimum RTT, which may result in a sending rate that is lower than the available end-to-end capacity of the system.</p>
<p>The occurrence of non-congestion-based packet loss can also detract from TCP performance. Conventionally, loss will cause the sender to quickly reduce its sending window, on the basis that if this loss is caused by network buffer overflow, then the sender needs to allow these buffers to drain, and then it will resume sending as a lower rate, which should restore coherency of the feedback control loop.</p>
<p>How does this work in practice?</p>
<p>Figure 6 shows a detailed view of a TCP cubic session over a Starlink circuit. The initial 2 seconds shows the <i>slow start</i> TCP sending rate inflation behaviour, where the sending window doubles in size for each RTT interval, reaching a peak of 240Mbps in 2 seconds. The sender then switches to a mode of rapid reduction of the sending window in the next second, dropping its sending rate to 50Mbps within one second. At this point the CUBIC <i>congestion avoidance</i> phase appears to kick in, and the sending rate increases to 70Mbps over the ensuing 5 seconds. There is a single loss event which cases the sending rate to drop in second 8 back to 40Mbps. The remainder of the trace shows this same behaviour of slow sending rate inflation and intermittent rate reductions which is typical of CUBIC.</p>
<p>This CUBIC session managed an average transfer rate of some 45Mbps, which is well below the peak notional circuit capacity of some 250Mps, as indicated by SpeedTest.</p>
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig6.png"><img src="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig6.png" width="80%"></a><br>Figure 6 – TCP CUBIC over Starlink</p>
<p>Starlink is a shared medium, and the performance of the system in local times of light use (off peak) is significantly different to performance in peak times. Figure 7 shows CUBIC performance profile during an off-peak time.</p>
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig7.png"><img src="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig7.png" width="80%"></a><br>Figure 7 – TCP CUBIC over Starlink – Off-Peak</p>
<p>The difference between the achievable throughput between peak and off-peak is quite significant, with the off-peak performance reaching a throughput level some 3 – 4 times greater than the peak load performance. The slow-start phase increases the throughput to some 200Mbps within the first second. The flow then oscillated for a second, then started a more stable congestion avoidance behaviour by second 4. The cubic window inflation behaviour is visible up to second 12 and then the flow oscillates around some 200Mbps of throughput for the remainder of the session.</p>
<p>Is the difference between these two profiles in Figures 6 and 7 a result of active flow management by Starlink equipment, or the result of the way in which CUBIC reaches a flow equilibrium with other concurrent flows?</p>
<p>We can attempt to answer this question by using a different TCP control protocol which has a completely different response to contention with other concurrent flows.</p>
<p>The Bottleneck Bandwidth and Round-trip propagation time (BBR) protocol [11] is a TCP congestion control algorithm developed at Google a decade or so ago. BBR attempts to position the TCP flow at the onset of network queue formation, rather than oscillating between full and empty queue states (as is the case in most loss-based TCP congestion control algorithms).</p> 
<p>Briefly, BBR makes an initial estimate of the delay-bandwidth product of the network path, and then drives the sender to send at this rate for 6 successive RTT intervals. It performs repair for dropped packets without adjusting its sending rate. The 7th RTT interval sees the sending rate increase by 25% and the end-to-end delay is carefully measured in this interval. The final RTT interval in the cycle sees the sending rate drop by 25% from the original rate, intended to drain any network queues that may have formed in the previous RTT interval. If the end-to-end delay increased in the sending rate inflated interval the original sending rate is maintained. If the increased sending window did not impact the end-to-end delay, then this indicates that the network path has further capacity and the delay-bandwidth estimate is increased for the next 8-RTT cycle. (There have been a couple of subsequent revisions to the BBR protocol, but in this case, I’m using the original (v1) version of BBR.)</p>
<p>The results of a Starlink performance test using BBR is shown in Figure 8.</p>
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig8.png"><img src="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig8.png" width="80%"></a><br>Figure 8 – TCP BBR over Starlink</p>
<p>In this case BBR has made an initial estimate of some 250Mbps for the path bandwidth. This was estimate appears to have been revised at second 14 to some 350Mbps, and then dropped to some 200Mbps some 15 seconds later for the final 10 seconds of this test. It is likely that these changes are the result of BBR responding to satellite handover in Starlink, and the variance in latency was interpreted by BBR as a sign of queue formation, or the absence of queue of queue formation, which was used to alter BBR’s bandwidth delay estimate for the link.</p>
<p>The same BBR test was performed in an off-peak time, which a very similar outcome (Figure 9).</p>
<p><a href="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig9.png"><img src="https://www.potaroo.net/ispcol/2024-05/starlink-tcp-fig9.png" width="80%"></a><br>Figure 9 – TCP BBR over Starlink – Off-Peak</p>
<p>If BBR is sensitive to changes in latency, and latency is so variable in Starlink, then why does BBR perform so well as compared to CUBIC?</p>
<p>I suspect that here BBR is not taking a single latency measurement, but measuring the round-trip time for all packets that are sent in this 7th RTT interval once the sender has increased its sending rate to the burst rate and uses the minimum RTT value as the ‘loaded’ RTT value to determine whether to perform a send rate adjustment. As long as the minimum RTT levels are consistent, and, as shown in Figure 3, these minimum values appear to be consistent across each 15 second scheduling interval, then BBR will assume that its sending rate is not causing network queue formation and will maintain its sending rate.</p>
<h3>Protocol Tuning for Starlink</h3>
<p>Starlink provides a somewhat unique data link service. It has a very high jitter rate, a packet drop rate of around 1%-2% that is unrelated to network congestion, and a latency profile that jumps on a regular basis every 15 seconds. From the perspective if the TCP protocol, Starlink represents an unusually hostile link environment, and older variants of TCP, such as Reno TCP, that react quickly to packet loss and recover slowly, can perform very poorly when used across Starlink connections.</p>
<p>Could you tune a variant of TCP to optimise its performance over a path that includes a Starlink component?</p>
<p>A promising approach would appear to start with a variant of BBR. The reason for the choice of BBR is its ability to maintain its sending rate in the face of individual packet loss events. If one were to optimise BBR for Starlink then it can be noted that Starlink performs a satellite handover at regular 15 second intervals, and if the regular sending rate inflation in BBR occurs at the same time as scheduled satellite handover, the BBR sender could defer its rate inflation, maintaining its current sending rate across the scheduled handover time.</p>
<p>The issue with BBR is that, for version 1 of this protocol, it is quite aggressive in claiming network resources, which can starve other non BBR TCP concurrent sessions of capacity. One possible response is to use the same 15-second satellite handover timer with version 3 of the BBR protocol, which is intended to be less aggressive when working with concurrent data flows.</p>
<p>In theory it would be possible to adjust CUBIC in a similar manner, performing a lost packet repair using Selective Acknowledgement (SACK) [11] if the packet loss occurred at the time of a scheduled satellite handover. While CUBIC is a fairer protocol with respect to sharing the path capacity with other concurrent TCP sessions, it tends to react conservatively when faced with high jitter paths (as is the case when the end-to-end path includes a Starlink component). Even with some sensitivity to scheduled satellite handovers CUBIC is still prone to reduced efficiency in the use of network resources.</p>
<p>A somewhat different approach could utilise Explicit Congestion Notification (ECN) [12]. The advantage of such an approach is that it allows the TCP session to differentiate the case where a high sending rate it causes the formation of network queues (congestion), while a transient event, such as satellite handover, causes packet loss without network queue formation. ECN can permit a flow control behaviour that is very much like BBR.</p> 
<h3>Conclusions</h3>
<p>While earlier TCP control protocols, such as Reno, have been observed to perform poorly on Starlink connections, more recent TCP counterparts, such as CUBIC, perform more efficiently. The major TCP feature that makes these protocols viable in Starlink contexts is the use of Selective Acknowledgement [11], that allows the TCP control algorithm to distinguish between isolated packet loss and loss-inducing levels of network congestion.</p>
<p>TCP control protocols that attempt to detect the onset of network queue formation can do so using end-to-end techniques by detecting changes in end-to-end latency during intermittent periods of burst, such as BBR. These protocols need to operate with a careful implementation of their sensitivity to latency, as the highly unstable short-term latency seen on Starlink connections, coupled with the 15-second coarse level latency shifts have the potential to confuse the queue onset detection algorithm.</p>
<p>It would be interesting to observe the behaviour of an ECN-aware TCP protocol behaviour if ECN were to enabled on Starlink routing devices. ECN has the potential to provide a clear signal to the endpoints about the onset of network-level queue formation, as distinct from latency variation.</p>

<h3>References</h3>
<p><table>
<tbody><tr><td>[1]</td><td>Starlink<br>
<a href="https://www.starlink.com/">https://www.starlink.com</a></td></tr>
<tr><td>[2]<br>&nbsp;</td><td>Isaac Newton, Philosophiæ Naturalis Principia Mathematica, July 1687.<br>
<a href="https://www.google.com.au/books/edition/Newton_s_Principia/KaAIAAAAIAAJ?hl=en">https://www.google.com.au/books/edition/Newton_s_Principia/KaAIAAAAIAAJ?hl=en</a></td></tr>
<tr><td>[3]<br>&nbsp;</td><td>Allman, M., Glover, D., and L. Sanchez, "Enhancing TCP Over Satellite Channels using Standard Mechanisms", BCP 28, RFC 2488, DOI 10.17487/RFC2488, January 1999<br>.
<a href="https://www.rfc-editor.org/info/rfc2488">https://www.rfc-editor.org/info/rfc2488</a></td></tr>
<tr><td>[4]<br>&nbsp;</td><td>Wikipedia, Low Earth Orbit.<br>
<a href="https://en.wikipedia.org/wiki/Low_Earth_orbit">https://en.wikipedia.org/wiki/Low_Earth_orbit</a></td></tr>
<tr><td>[5]<br>&nbsp;</td><td>Wikipedia, Van Allen radiation belt.<br> 
<a href="https://en.wikipedia.org/wiki/Van_Allen_radiation_belt">https://en.wikipedia.org/wiki/Van_Allen_radiation_belt</a></td></tr>
<tr><td>[6]<br>&nbsp;</td><td>Speedtest<br> 
<a href="https://www.speedtest.net/">https://www.speedtest.net</a></td></tr>
<tr><td>[7]<br>&nbsp;</td><td>Ping<br>
<a href="https://en.wikipedia.org/wiki/Ping_(networking_utility)">https://en.wikipedia.org/wiki/Ping_(networking_utility)</a></td></tr>
<tr><td>[8]<br>&nbsp;</td><td>Postel, J., "Transmission Control Protocol", RFC 793, DOI 10.17487/RFC0793, September 1981,<br>
<a href="https://www.rfc-editor.org/info/rfc793">https://www.rfc-editor.org/info/rfc793</a></td></tr>
<tr><td>[9]<br>&nbsp;</td><td>Ha, S., Rhee, I., and Xu,L., "CUBIC: a new TCP-friendly high-speed TCP variant." ACM SIGOPS Operating Systems Review 42.5 (2008): 64-74.</td></tr>
<tr><td>[10]<br>&nbsp;</td><td>Cardwell, N., Cheng, Y., Gunn, C., Yeganeh, S.,  and Jacobson, V., "BBR: Congestion-based Congestion Control", ACM Queue, vol. 14, no. 5, 2016.</td></tr>
<tr><td>[11]<br>&nbsp;</td><td>Floyd, S., Mahdavi, J., Mathis, M., and M. Podolsky, "An Extension to the Selective Acknowledgement (SACK) Option for TCP", RFC 2883, DOI 10.17487/RFC2883, July 2000.<br>
<a href="https://www.rfc-editor.org/info/rfc2883">https://www.rfc-editor.org/info/rfc2883</a></td></tr>
<tr><td>[12]<br>&nbsp;</td><td>Ramakrishnan, K., Floyd, S., and D. Black, "The Addition of Explicit Congestion Notification (ECN) to IP", RFC 3168, DOI 10.17487/RFC3168, September 2001<br>
<a href="https://www.rfc-editor.org/info/rfc3168">https://www.rfc-editor.org/info/rfc3168</a></td></tr>
</tbody></table></p>

<!-- InstanceEndEditable -->
<p><img src="https://www.potaroo.net/images/border.png" width="600" height="10"></p>
<h3>Disclaimer</h3>
<!-- InstanceBeginEditable name="disclaimer" -->
<p>The above views do not necessarily represent the views of the Asia Pacific Network Information Centre.</p>
<!-- InstanceEndEditable -->
<p><img src="https://www.potaroo.net/images/border.png" width="600" height="10"></p>

<!-- InstanceBeginEditable name="bio" -->
<p>
&nbsp;
GEOFF HUSTON AM, M.Sc., is the Chief Scientist at APNIC, the Regional Internet Registry serving the Asia Pacific region.
</p>
<p><a href="https://www.potaroo.net/">www.potaroo.net</a><br>
<!-- InstanceEndEditable -->
</p>


</li></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Visualizing algorithms for rate limiting (313 pts)]]></title>
            <link>https://smudge.ai/blog/ratelimit-algorithms</link>
            <guid>40384421</guid>
            <pubDate>Thu, 16 May 2024 23:07:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://smudge.ai/blog/ratelimit-algorithms">https://smudge.ai/blog/ratelimit-algorithms</a>, See on <a href="https://news.ycombinator.com/item?id=40384421">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main><div><h2 id="visualizing-algorithms-for-rate-limiting">Visualizing algorithms for rate limiting</h2><p><time>May 15, 2024</time></p><h2 id="why-rate-limit">Why rate limit?</h2><p>Imagine a Twitch chat with many active participants and just one spammer. Without rate limiting, the sole spammer can easily dominate the entire conversation. With rate limiting, each user has a fair chance to participate.</p><astro-island client="only" component-export="RatelimitChatDemo" component-url="/_astro/_RatelimitChatDemo.tadYQS-W.js" opts="{&quot;name&quot;:&quot;RatelimitChatDemo&quot;,&quot;value&quot;:&quot;solid-js&quot;}" props="{}" renderer-url="/_astro/client._0k3YFAT.js" ssr="" uid="7Oez3"></astro-island><p>A rate limiter lets you control the rate of traffic that your service processes by blocking requests that exceed a set limit during a period of time. This is useful beyond just throttling spam in a chat. For instance, rate limiting a login form can deter brute force attacks while still allowing a small burst of incorrect guesses.</p><p>API endpoints are also frequently rate-limited to prevent any single user from monopolizing resources. Imagine that you want users to only be able to hit an expensive endpoint 100 times per minute. You could track hits with a counter that resets every minute. Any request after the 100th within that minute gets blocked. This is one of the simplest rate-limiting algorithms, called a <strong>fixed window limiter</strong>, and is a common way to control traffic to a service.</p><p>But it’s not always that simple.</p><p>When does each one-minute window begin and end? If I begin a burst of requests near the end of a window, can I exceed the limit? Is a window’s capacity restored one request at a time, or all at once?</p><p>In this post, we’ll explore the three most common algorithms to answer each of these questions.</p><ol><li><a href="#fixed-windows">Fixed windows</a></li><li><a href="#sliding-windows">Sliding windows</a></li><li><a href="#token-buckets">Token buckets</a></li></ol><h2 id="fixed-windows">Fixed windows</h2><p>A set number of requests can be made within a predefined time window. Requests increment a counter that’s reset to zero at the start of each window.</p><div><p><em>Allow 6 requests per day (24-hour windows)</em></p><astro-island client="only" component-export="FixedLimitVisualization" component-url="/_astro/_RatelimitVisualization.DcnAx07u.js" opts="{&quot;name&quot;:&quot;FixedLimitVisualization&quot;,&quot;value&quot;:&quot;solid-js&quot;}" props="{&quot;hideUi&quot;:[0,false],&quot;showMidnight&quot;:[0,true],&quot;limit&quot;:[0,6]}" renderer-url="/_astro/client._0k3YFAT.js" ssr="" uid="Z1V8y0p"></astro-island></div><blockquote>Each green dot&nbsp;&nbsp;represents an allowed request while&nbsp;&nbsp;is a request blocked by the rate limiter. You can add more requests with the <kbd>Hit</kbd> button, which pauses the automatic stream.</blockquote><ul><li>Pros<ul><li>Simple to implement and understand</li><li>Predictable for users</li></ul></li><li>Cons<ul><li>Allows bursts up to 2x the <code>limit</code> when requests begin near the end of a window</li></ul></li><li>Real-world example<ul><li>GitHub’s API uses a fixed window rate limiter with <code>limit = 5000</code>, <code>windowDuration = 1h</code>, and <code>windowStart</code> set to the start of each wall clock hour, allowing users 5,000 requests per hour.</li></ul></li></ul><details><summary><strong>A brief tangent on 24-hour fixed windows</strong></summary><div><p>There is a subtle issue with the 24-hour limiter above. Its windows reset every day at midnight—but midnight according to <em>what time zone</em>? A standard fixed window might reset its counter according to your server’s midnight or a standard timezone offset such as UTC. A user in a different timezone who just ran out of requests might retry just after midnight and be surprised if the limit hasn’t been lifted—since to them, it is a new calendar day.</p><p>For these applications, you need to offset your window starts according to the user’s time zone, which has some potential for abuse as users can manually adjust their timezone once they’ve run out of requests to gain up to 1 full window of additional requests. Worse yet, users traveling West to East might incorrectly have more requests limited while those traveling East to West might incorrectly have more requests allowed as they effectively extend their day. If a rate limit resets based on local midnight and a user moves to an earlier time zone, they encounter earlier local midnights. This can effectively allow them to reset their request count sooner by being in a new “day” earlier than expected, thus potentially increasing their total allowable requests within a 24-hour period as measured by real time. Yikes. And we still haven’t dealt with DST.</p><p>This use case is already a bit of a tangent, so for now I’ll leave it at this: handling time zones correctly, accounting for users relocating as well as daylight savings, is difficult to get right—so if you’re considering going down that painful path, I’ll just <a href="https://stackoverflow.com/questions/2532729/daylight-saving-time-and-time-zone-best-practices/3269325#3269325">point</a> <a href="https://www.creativedeletion.com/2015/01/28/falsehoods-programmers-date-time-zones.html">you</a> <a href="https://www.youtube.com/watch?v=-5wpm-gesOY">to</a> <a href="https://2ality.com/2021/06/temporal-api.html#time-zones-vs.-time-offsets">these</a> <a href="https://tech.bluesmoon.info/2013/08/dont-guess-at-timezones-in-javascript.html">resources</a> instead. If you can sidestep this problem by using any other approach at all, you should!</p></div></details><h4 id="fixed-window-with-user-defined-start">Fixed window with user-defined start</h4><p>Instead of fixing the start times to a set interval, each window can be created at the time of the user’s first request within that window.</p><p>With this approach, it’s especially important to show users the time remaining until the next window once they’re limited since there’s no set time that aligns each window.</p><h2 id="sliding-windows">Sliding windows</h2><p>Instead of refreshing the capacity all at once, sliding windows refill one request at a time.</p><astro-island client="only" component-export="SlidingWindowVisualization" component-url="/_astro/_RatelimitVisualization.DcnAx07u.js" opts="{&quot;name&quot;:&quot;SlidingWindowVisualization&quot;,&quot;value&quot;:&quot;solid-js&quot;}" props="{&quot;limit&quot;:[0,6]}" renderer-url="/_astro/client._0k3YFAT.js" ssr="" uid="oY7AT"></astro-island><ul><li>Pros<ul><li>Smooths the distribution of request traffic</li><li>Well-suited for high loads</li></ul></li><li>Cons<ul><li>Less predictable for users than fixed windows</li><li>Storing timestamps for each request is resource-intensive</li></ul></li></ul><p>Because sliding windows tend to be most useful in high-traffic scenarios, the fact that the naive algorithm is resource-intensive is counterproductive. Shouldn’t a high-traffic rate limiter use an efficient algorithm? For this reason, most real-world sliding window rate limiters, such as those provided by <a href="https://upstash.com/docs/oss/sdks/ts/ratelimit/algorithms#sliding-window">Upstash</a> or <a href="https://www.cloudflare.com/application-services/products/rate-limiting/">Cloudflare</a>, use an approximation, often called a floating window. Using this approximation, we have all the same pros but can remove the “resource-intensive” point from the cons. Here’s how it works:</p><ol><li>Count the number of allowed requests in the previous fixed window.</li><li>Count the number of allowed requests in the current fixed window.</li><li>Weight the previous window’s allowed requests proportional to that window’s overlap with a floating window ending at the current time.</li><li>Add the weighted requests from (3) to the unweighted requests from (2).</li></ol><p>In other words, this is the computation:</p><div><figure><pre data-language="plaintext"><code><div><p><span>approximation = (prevWindowCount * prevWindowWeight) + currentWindowCount</span></p></div></code></pre></figure></div><br><astro-island client="only" component-export="FloatingWindowVisualization" component-url="/_astro/_RatelimitVisualization.DcnAx07u.js" opts="{&quot;name&quot;:&quot;FloatingWindowVisualization&quot;,&quot;value&quot;:&quot;solid-js&quot;}" props="{&quot;limit&quot;:[0,6]}" renderer-url="/_astro/client._0k3YFAT.js" ssr="" uid="Z2eHe2V"></astro-island><p>In practice, this approximation limits requests at roughly the same proportion but is far more efficient than tracking all the requests’ timestamps. See for yourself how it compares:</p><astro-island client="only" component-export="DualSlidingWindowVisualization" component-url="/_astro/_RatelimitVisualization.DcnAx07u.js" opts="{&quot;name&quot;:&quot;DualSlidingWindowVisualization&quot;,&quot;value&quot;:&quot;solid-js&quot;}" props="{&quot;limit&quot;:[0,6]}" renderer-url="/_astro/client._0k3YFAT.js" ssr="" uid="Z1U79DG"></astro-island><ul><li>Real-world example<ul><li>Cloudflare’s configurable rate limiter uses an <a href="https://blog.cloudflare.com/counting-things-a-lot-of-different-things">approximated sliding window</a>.</li></ul></li></ul><h2 id="token-buckets">Token buckets</h2><p>Instead of thinking in terms of windows with durations, picture a bucket that fills up with “tokens” at a constant rate. Each request withdraws one token from this bucket, and when the bucket is empty the next request will be blocked. This <em>token bucket</em> approach has some useful properties.</p><ol><li>The capacity of the bucket is the maximum number of requests that a burst can support (not counting tokens that are replenished mid-burst).</li><li>The refill interval represents the long-term average allowed request interval.</li></ol><p>Having distinct burst and average capacities without the need for multiple rate limiters is one of the main benefits to this algorithm.</p><astro-island client="only" component-export="PausedTokenBucketVisualization" component-url="/_astro/_RatelimitVisualization.DcnAx07u.js" opts="{&quot;name&quot;:&quot;PausedTokenBucketVisualization&quot;,&quot;value&quot;:&quot;solid-js&quot;}" props="{}" renderer-url="/_astro/client._0k3YFAT.js" ssr="" uid="oL4to"></astro-island><ul><li><p>Pros</p><ul><li>Allows bursts of high traffic, but enforces a long-term average rate of requests</li><li>More flexible for users, allowing for traffic spikes within an acceptable range</li></ul></li><li><p>Cons</p><ul><li>More difficult to convey limits and refill times to users than with fixed windows</li></ul></li><li><p>Real-world examples</p><ul><li>Stripe <a href="https://stripe.com/blog/rate-limiters">uses a token bucket</a> in which each user gets a bucket with <code>limit = 500</code>, <code>refillInterval = 0.01s</code>, allowing for sustained activity of 100 requests per second, but bursts of up to 500 requests. (<a href="https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d">Implementation details</a>.)</li><li>OpenAI’s free tier for GPT-3.5 is limited to 200 <a href="https://platform.openai.com/docs/guides/rate-limits">requests per day</a> using a token bucket with <code>limit = 200</code> and <code>refillInterval = 86400s / 200</code>, replenishing the bucket such that at the end of a day (86,400 seconds) an empty bucket will be 100% filled. They refill the bucket one token at a time.</li></ul><p>The Twitch chat demo above is rate-limited using a token bucket with a bucket size of 3, allowing bursts of up to 3 requests, and a refill interval of 4 seconds, which creates a long-term average allowed rate of 1 message every 4 seconds.</p><p>Thanks to their flexibility, token buckets can also mimic the properties of some of the other algorithms. For example, set the <code>refillRate</code> equal to the <code>limit</code> and you have an equivalent to a fixed window rate limiter with a user-defined start.</p><astro-island client="only" component-export="TokenBucketFixedWindowComparison" component-url="/_astro/_RatelimitVisualization.DcnAx07u.js" opts="{&quot;name&quot;:&quot;TokenBucketFixedWindowComparison&quot;,&quot;value&quot;:&quot;solid-js&quot;}" props="{}" renderer-url="/_astro/client._0k3YFAT.js" ssr="" uid="Zkq4VK"></astro-island></li></ul><h2 id="other-considerations">Other considerations</h2><p>If you decide to add rate limiting to your application or endpoint, in addition to selecting an appropriate algorithm there are a few other things you should keep in mind.</p><ul><li><strong>Create a persisted store for the rate limiter.</strong> If you ever intend to horizontally scale your server (or even just restart it) your rate limiter data store can’t be in-memory. A popular option is to save rate limiting data to a key-value store like Redis, which has built-in functions for expiring keys, on a separate machine from your application. You can, however, use an ephemeral in-memory cache to block requests without hitting Redis while the limiter is hot.</li><li><strong>Fail open.</strong> If your server’s connection to the persisted store fails, make sure to allow all requests rather than blocking access to your service altogether.</li><li><strong>Optionally throttle bursts.</strong> Throttling can be used in combination with rate limiting to reduce the impact of burst traffic.</li><li><strong>Choose sensible keys.</strong> In general, rate limiting is done on a per-user level. For most apps, this means keying on the user ID. For APIs, key on an API key. To rate limit unauthenticated users, the options aren’t great, but popular methods include using the request’s IP address, a device fingerprint, a unique installation ID, or just a shared limiter.</li><li><strong>Surface useful rate limiting errors.</strong> Let users know how long they have to wait for their next request. For APIs, use the 429 HTTP status code when a request is blocked and include the relevant <code>x-ratelimit-*</code> response headers. <a href="https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api?apiVersion=2022-11-28#checking-the-status-of-your-rate-limit">GitHub</a> has good examples of the headers for their fixed-window limiter and <a href="https://platform.openai.com/docs/guides/rate-limits/rate-limits-in-headers">OpenAI</a> has some for their token-bucket limiter.</li></ul><h2 id="wrapping-up">Wrapping up</h2><ul><li>If you need a simple rate limiter or predictable window start times, use a <a href="#fixed-windows">fixed window</a>.</li><li>If you need traffic smoothing for a high volume of requests, consider using an <a href="#sliding-windows">approximated sliding window</a>.</li><li>If you need to support bursts of traffic while enforcing a lower average long-term rate for requests, use a <a href="#token-buckets">token bucket</a>.</li></ul><hr><h2 id="playground">Playground</h2><astro-island client="only" component-export="Playground" component-url="/_astro/_RatelimitVisualization.DcnAx07u.js" opts="{&quot;name&quot;:&quot;Playground&quot;,&quot;value&quot;:&quot;solid-js&quot;}" props="{}" renderer-url="/_astro/client._0k3YFAT.js" ssr="" uid="gojb2"></astro-island><hr><p><em>This post was inspired by the amazing load balancing visualizations at <a href="https://samwho.dev/load-balancing/">samwho.dev</a>. Also, a huge thank you to <a href="https://github.com/onsclom">@onsclom</a> for pairing with me on the canvas visualizations. Lastly, shoutout to Upstash for their <a href="https://upstash.com/docs/oss/sdks/ts/ratelimit/costs">docs</a> and implementation <a href="https://github.com/upstash/ratelimit/blob/main/src/lua-scripts/single.ts">scripts</a>, which served as an excellent reference for each algorithm.</em></p><p><em>There’s a discussion about this post on <a href="https://news.ycombinator.com/item?id=40384421">Hacker News</a> as well.</em></p><p><em>Feel free to send corrections, ideas, and feedback my way at <a href="mailto:feedback@smudge.ai">feedback@smudge.ai</a>!</em></p><hr><blockquote>This post is the second in a <a href="https://smudge.ai/blog">series</a> where I document some of the things I’ve learned while building smudge.ai. If you’re new here, <a href="https://smudge.ai/">smudge.ai</a> is a Chrome extension that lets you save custom ChatGPT commands into your right-click menu. It’s a (mostly) solo project and an extension I rely on almost every day. If you think it could be a useful tool for you, too, then you can always try smudge.ai for free with no account using the rate-limited free tier, which happens to have been implemented as a fixed window with a user-defined start. Cheers!</blockquote></div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Forged Apple Employee Badge (886 pts)]]></title>
            <link>https://cabel.com/2024/05/16/the-forged-apple-employee-badge/</link>
            <guid>40384013</guid>
            <pubDate>Thu, 16 May 2024 22:19:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/">https://cabel.com/2024/05/16/the-forged-apple-employee-badge/</a>, See on <a href="https://news.ycombinator.com/item?id=40384013">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Here’s a quick and cautionary tale.</p>



<p>This eBay auction, spotted by <a href="https://social.pixels.pizza/@pixel/112389259975924778">Eric Vitiello</a>, immediately caught my eye:</p>



<figure><img decoding="async" width="612" height="1024" data-attachment-id="4180" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/screenshot/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?fit=1179%2C1972&amp;ssl=1" data-orig-size="1179,1972" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;Screenshot&quot;,&quot;created_timestamp&quot;:&quot;1714907364&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;Screenshot&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="Screenshot" data-image-description="" data-image-caption="<p>Screenshot</p>
" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?fit=179%2C300&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?fit=612%2C1024&amp;ssl=1" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?resize=612%2C1024&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?resize=612%2C1024&amp;ssl=1 612w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?resize=179%2C300&amp;ssl=1 179w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?resize=90%2C150&amp;ssl=1 90w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?resize=768%2C1285&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?resize=918%2C1536&amp;ssl=1 918w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1317.jpeg?w=1179&amp;ssl=1 1179w" sizes="(max-width: 612px) 100vw, 612px" data-recalc-dims="1"></figure>



<p>Wow. <strong>Someone was selling Apple Employee #10’s employee badge?!</strong> What an incredible piece of Apple history! Sure, it’s not Steve Jobs’ badge (despite the auction title), but there are only so many of these in the world —&nbsp;especially from one of the first ten employees.</p>



<p>I persistently pored through the provided pictures.</p>



<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/cabel.com\/2024\/05\/16\/the-forged-apple-employee-badge\/&quot;}">
<figure><img decoding="async" width="1024" height="838" data-attachment-id="4193" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-1/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?fit=1600%2C1310&amp;ssl=1" data-orig-size="1600,1310" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-1" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?fit=300%2C246&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?fit=1024%2C838&amp;ssl=1" data-id="4193" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?resize=1024%2C838&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?resize=1024%2C838&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?resize=300%2C246&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?resize=150%2C123&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?resize=768%2C629&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?resize=1536%2C1258&amp;ssl=1 1536w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?resize=1200%2C983&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-1.jpg?w=1600&amp;ssl=1 1600w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<figure><img loading="lazy" decoding="async" width="1024" height="771" data-attachment-id="4194" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-2-2/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?fit=1239%2C933&amp;ssl=1" data-orig-size="1239,933" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-2" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?fit=300%2C226&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?fit=1024%2C771&amp;ssl=1" data-id="4194" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?resize=1024%2C771&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?resize=1024%2C771&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?resize=300%2C226&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?resize=150%2C113&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?resize=768%2C578&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?resize=1200%2C904&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-2.png?w=1239&amp;ssl=1 1239w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<figure><img loading="lazy" decoding="async" width="1024" height="768" data-attachment-id="4192" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-3/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?fit=1600%2C1200&amp;ssl=1" data-orig-size="1600,1200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-3" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?fit=300%2C225&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?fit=1024%2C768&amp;ssl=1" data-id="4192" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=1024%2C768&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=150%2C113&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=1536%2C1152&amp;ssl=1 1536w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=1200%2C900&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=800%2C600&amp;ssl=1 800w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=600%2C450&amp;ssl=1 600w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-3.jpg?w=1600&amp;ssl=1 1600w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<figure><img loading="lazy" decoding="async" width="1024" height="768" data-attachment-id="4191" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-4/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?fit=1599%2C1200&amp;ssl=1" data-orig-size="1599,1200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-4" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?fit=300%2C225&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?fit=1024%2C768&amp;ssl=1" data-id="4191" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=1024%2C768&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=150%2C113&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=1536%2C1153&amp;ssl=1 1536w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=1200%2C901&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=800%2C600&amp;ssl=1 800w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=600%2C450&amp;ssl=1 600w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-4.jpg?w=1599&amp;ssl=1 1599w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<figure><img loading="lazy" decoding="async" width="1024" height="768" data-attachment-id="4183" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-7/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?fit=1600%2C1200&amp;ssl=1" data-orig-size="1600,1200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-7" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?fit=300%2C225&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?fit=1024%2C768&amp;ssl=1" data-id="4183" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=1024%2C768&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=150%2C113&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=1536%2C1152&amp;ssl=1 1536w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=1200%2C900&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=800%2C600&amp;ssl=1 800w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=600%2C450&amp;ssl=1 600w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-7.jpg?w=1600&amp;ssl=1 1600w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<figure><img loading="lazy" decoding="async" width="1024" height="768" data-attachment-id="4188" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-10/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?fit=1600%2C1200&amp;ssl=1" data-orig-size="1600,1200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-10" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?fit=300%2C225&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?fit=1024%2C768&amp;ssl=1" data-id="4188" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=1024%2C768&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=150%2C113&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=1536%2C1152&amp;ssl=1 1536w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=1200%2C900&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=800%2C600&amp;ssl=1 800w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=600%2C450&amp;ssl=1 600w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-10.jpg?w=1600&amp;ssl=1 1600w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>
</figure>



<p>At first, it looked good. The plastic was scuffed with age, the tape on the map was yellowed, the logo was correct, Sherry Livingston really was Employee #10.</p>



<p>But, that map — it felt a little off. (“Tennis courts?”) And I couldn’t stop looking at the “typewritten” part…</p>



<figure><img loading="lazy" decoding="async" width="494" height="241" data-attachment-id="4198" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/image-13/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image.png?fit=494%2C241&amp;ssl=1" data-orig-size="494,241" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image.png?fit=300%2C146&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image.png?fit=494%2C241&amp;ssl=1" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image.png?resize=494%2C241&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image.png?w=494&amp;ssl=1 494w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image.png?resize=300%2C146&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image.png?resize=150%2C73&amp;ssl=1 150w" sizes="(max-width: 494px) 100vw, 494px" data-recalc-dims="1"></figure>



<p>This badge would’ve been (obviously!) made before desktop publishing. A badge template would’ve been printed by a local printing company, then fed into a typewriter to type the individual employee details. <strong>And that typed text is way, way cleaner than any typewriter I’ve seen.</strong></p>



<p>And just as I was beginning to 🧐, along came Chris:</p>



<center></center>



<blockquote>
<p>“That’s…&nbsp;fake. Both of them.” </p>
</blockquote>



<p>Oh snap. <strong>It’s really fake?</strong></p>



<p>What does this Chris guy know, anyway? Well, he’s <a href="https://en.wikipedia.org/wiki/Chris_Espinosa">Chris Espinosa.</a> Who just so happens to be <strong>Apple Employee #8.</strong></p>



<p><em>(Trivia: <a href="https://electricpig.co.uk/2011/02/24/apples-longest-serving-employee-not-steve-jobs/">he joined the company when he was 14… and still works there!</a>)</em></p>



<p>And we know <em>exactly</em> what Chris’ badge looked like:</p>



<figure><img loading="lazy" decoding="async" width="644" height="465" data-attachment-id="4243" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/image-1-4/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image-1.png?fit=644%2C465&amp;ssl=1" data-orig-size="644,465" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image-1" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image-1.png?fit=300%2C217&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image-1.png?fit=644%2C465&amp;ssl=1" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image-1.png?resize=644%2C465&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image-1.png?w=644&amp;ssl=1 644w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image-1.png?resize=300%2C217&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/image-1.png?resize=150%2C108&amp;ssl=1 150w" sizes="(max-width: 644px) 100vw, 644px" data-recalc-dims="1"></figure>



<p>I asked Chris <em>(who I truly admire!)</em> for more thoughts:</p>



<center></center>



<p>So, yeah. <strong>One of the most qualified people on planet earth to say this is a fake, is saying this is a fake.</strong></p>



<p>I had no choice at this point. <strong>I simply had to meddle.</strong></p>



<figure><img loading="lazy" decoding="async" width="908" height="1024" data-attachment-id="4236" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/img_1465/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1465.png?fit=1179%2C1329&amp;ssl=1" data-orig-size="1179,1329" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="IMG_1465" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1465.png?fit=266%2C300&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1465.png?fit=908%2C1024&amp;ssl=1" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1465.png?resize=908%2C1024&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1465.png?resize=908%2C1024&amp;ssl=1 908w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1465.png?resize=266%2C300&amp;ssl=1 266w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1465.png?resize=133%2C150&amp;ssl=1 133w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1465.png?resize=768%2C866&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1465.png?w=1179&amp;ssl=1 1179w" sizes="(max-width: 908px) 100vw, 908px" data-recalc-dims="1"></figure>



<p>From…&nbsp;the German Red Cross?! How specific!</p>



<p>It seems like the German Red Cross runs a kind of second hand/charity shop, so ok, sure. But why would the German Red Cross have the employee badge for Apple Employee #10?</p>



<figure><img loading="lazy" decoding="async" width="1024" height="630" data-attachment-id="4237" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/img_1466/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1466.png?fit=1179%2C725&amp;ssl=1" data-orig-size="1179,725" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="IMG_1466" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1466.png?fit=300%2C184&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1466.png?fit=1024%2C630&amp;ssl=1" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1466.png?resize=1024%2C630&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1466.png?resize=1024%2C630&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1466.png?resize=300%2C184&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1466.png?resize=150%2C92&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1466.png?resize=768%2C472&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1466.png?w=1179&amp;ssl=1 1179w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<p>I couldn’t wait. The seller sent the Red “Croos” proof just a few hours later. (Enough time to… create it?)</p>



<figure data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;https:\/\/cabel.com\/2024\/05\/16\/the-forged-apple-employee-badge\/&quot;}">
<figure><img loading="lazy" decoding="async" width="1024" height="768" data-attachment-id="4216" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-13/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?fit=1600%2C1200&amp;ssl=1" data-orig-size="1600,1200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-13" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?fit=300%2C225&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?fit=1024%2C768&amp;ssl=1" data-id="4216" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=1024%2C768&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=150%2C113&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=1536%2C1152&amp;ssl=1 1536w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=1200%2C900&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=800%2C600&amp;ssl=1 800w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=600%2C450&amp;ssl=1 600w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-13.jpg?w=1600&amp;ssl=1 1600w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<figure><img loading="lazy" decoding="async" width="1024" height="768" data-attachment-id="4217" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-14/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?fit=1600%2C1200&amp;ssl=1" data-orig-size="1600,1200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-14" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?fit=300%2C225&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?fit=1024%2C768&amp;ssl=1" data-id="4217" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=1024%2C768&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=150%2C113&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=1536%2C1152&amp;ssl=1 1536w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=1200%2C900&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=800%2C600&amp;ssl=1 800w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=600%2C450&amp;ssl=1 600w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-14.jpg?w=1600&amp;ssl=1 1600w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<figure><img loading="lazy" decoding="async" width="1024" height="768" data-attachment-id="4218" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-15/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?fit=1600%2C1200&amp;ssl=1" data-orig-size="1600,1200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-15" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?fit=300%2C225&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?fit=1024%2C768&amp;ssl=1" data-id="4218" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=1024%2C768&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=150%2C113&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=1536%2C1152&amp;ssl=1 1536w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=1200%2C900&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=800%2C600&amp;ssl=1 800w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=600%2C450&amp;ssl=1 600w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-15.jpg?w=1600&amp;ssl=1 1600w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<figure><img loading="lazy" decoding="async" width="1024" height="768" data-attachment-id="4219" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/s-l1600-16/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?fit=1600%2C1200&amp;ssl=1" data-orig-size="1600,1200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="s-l1600-16" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?fit=300%2C225&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?fit=1024%2C768&amp;ssl=1" data-id="4219" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=1024%2C768&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=1024%2C768&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=300%2C225&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=150%2C113&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=768%2C576&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=1536%2C1152&amp;ssl=1 1536w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=1200%2C900&amp;ssl=1 1200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=800%2C600&amp;ssl=1 800w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=600%2C450&amp;ssl=1 600w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=400%2C300&amp;ssl=1 400w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?resize=200%2C150&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/s-l1600-16.jpg?w=1600&amp;ssl=1 1600w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>
</figure>



<p>At first blush, again, this provenance looks pretty good, right? A German purchase receipt, dated 2001, for the item pictured. The right logo. A nice emboss. Seems plausible.</p>



<p>But, again again, I had a weird feeling — this series of photos was trying <em>too hard.</em> That binder labelled “BILLS 200[0]—2010”, conveniently flipped upside down for casual authenticity? Why would you put that in these photos unless you were trying a bit too hard to make your case? It felt like a set dresser trying to stage a movie scene.</p>



<p>The seller added:</p>



<blockquote>
<p>As you can see, the invoice is expressed in the old German currency, the German mark, before the entry of the EURO in the years following.</p>
</blockquote>



<p>No way. A regular human wouldn’t point this out. Someone proud of a detail they thought of in their forgery <em>would</em> point this out. This little detail would’ve been <em>far</em> more effective for me to discover on my own. </p>



<p>It was time to totally close the case. <strong>It was time to engage the internet.</strong></p>



<p>The Mastodon response from Germans was swift and brutal.</p>



<center></center>



<center></center>



<center></center>



<p>There was no doubt. <strong>This “proof” was yet another forgery.</strong></p>



<p><strong>I told the seller this.</strong> And then, weirdly, for the amount of effort put into this, they made a very dumb error:</p>



<figure><img loading="lazy" decoding="async" width="1024" height="1018" data-attachment-id="4235" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/img_1549-1/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?fit=1143%2C1136&amp;ssl=1" data-orig-size="1143,1136" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="IMG_1549-1" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?fit=300%2C298&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?fit=1024%2C1018&amp;ssl=1" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?resize=1024%2C1018&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?resize=1024%2C1018&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?resize=300%2C298&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?resize=768%2C763&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?resize=200%2C200&amp;ssl=1 200w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1549-1.png?w=1143&amp;ssl=1 1143w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<p>Wait… what?!?</p>



<figure><img loading="lazy" decoding="async" width="929" height="655" data-attachment-id="4232" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/img_1550-2/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1550.png?fit=929%2C655&amp;ssl=1" data-orig-size="929,655" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="IMG_1550" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1550.png?fit=300%2C212&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1550.png?fit=929%2C655&amp;ssl=1" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1550.png?resize=929%2C655&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1550.png?w=929&amp;ssl=1 929w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1550.png?resize=300%2C212&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1550.png?resize=150%2C106&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/IMG_1550.png?resize=768%2C541&amp;ssl=1 768w" sizes="(max-width: 929px) 100vw, 929px" data-recalc-dims="1"></figure>



<p>I never received a reply.</p>



<p><strong>Case closed<em>!?</em></strong></p>



<p>There’s just one small, sad problem…</p>



<figure><img loading="lazy" decoding="async" width="1024" height="658" data-attachment-id="4239" data-permalink="https://cabel.com/2024/05/16/the-forged-apple-employee-badge/untitled-1/" data-orig-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/Untitled-1.png?fit=1179%2C758&amp;ssl=1" data-orig-size="1179,758" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Untitled-1" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/Untitled-1.png?fit=300%2C193&amp;ssl=1" data-large-file="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/Untitled-1.png?fit=1024%2C658&amp;ssl=1" src="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/Untitled-1.png?resize=1024%2C658&amp;ssl=1" alt="" srcset="https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/Untitled-1.png?resize=1024%2C658&amp;ssl=1 1024w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/Untitled-1.png?resize=300%2C193&amp;ssl=1 300w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/Untitled-1.png?resize=150%2C96&amp;ssl=1 150w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/Untitled-1.png?resize=768%2C494&amp;ssl=1 768w, https://i0.wp.com/cabel.com/wp-content/uploads/2024/05/Untitled-1.png?w=1179&amp;ssl=1 1179w" sizes="(max-width: 1000px) 100vw, 1000px" data-recalc-dims="1"></figure>



<p><strong>…yes, the item sold before I could finish this post.</strong> So, my sincere apologies to whoever out there just spent $946.00 on a total (but interesting!) work of fiction.</p>



<p>Here are the key takeaways from our meeting today:</p>



<ul>
<li>Beware of fraudulent pieces of Apple history</li>



<li>Don’t buy anything from this particular seller</li>



<li>When in doubt, Engage The Internet®</li>
</ul>



<p>Best,<br>Cabel</p>



<p>PS: I hope you’re having a nice week</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Slack AI Training with Customer Data (680 pts)]]></title>
            <link>https://slack.com/trust/data-management/privacy-principles?nojsmode=1</link>
            <guid>40383978</guid>
            <pubDate>Thu, 16 May 2024 22:16:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://slack.com/trust/data-management/privacy-principles?nojsmode=1">https://slack.com/trust/data-management/privacy-principles?nojsmode=1</a>, See on <a href="https://news.ycombinator.com/item?id=40383978">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Our mission is to build a product that makes work life simpler, more pleasant and more productive. Our guiding principle as we build this product is that the privacy and security of Customer Data is sacrosanct, as detailed in our <a href="https://slack.com/trust/privacy/privacy-policy">Privacy Policy</a>, <a href="https://slack.com/trust/security">Security Documentation</a> and <a href="https://www.salesforce.com/content/dam/web/en_us/www/documents/legal/misc/slack-security-privacy-and-architecture.pdf">SPARC</a> and the <a href="https://slack.com/main-services-agreement">Slack Terms</a>.</p><p>Machine Learning (ML) and Artificial Intelligence (AI) are useful tools that we use in limited ways to enhance our product mission. To develop AI/ML models, our systems analyze Customer Data (e.g. messages, content, and files) submitted to Slack as well as Other Information (including usage information) as defined in our <a href="https://slack.com/trust/privacy/privacy-policy">Privacy Policy</a> and in your customer agreement. To ensure the privacy and security of Customer Data in this particular context, we have a few guiding principles:</p><ul><li><strong>Data will not leak across workspaces. </strong> For any model that will be used broadly across all of our customers, we do not build or train these models in such a way that they could learn, memorize, or be able to reproduce some part of Customer Data. </li><li><strong>We have technical controls in place to prevent access. </strong>When developing AI/ML models or otherwise analyzing Customer Data, Slack can’t access the underlying content. We have various technical measures preventing this from occurring. Please read our <a href="https://a.slack-edge.com/964df/marketing/downloads/security/Security_White_Paper_2020.pdf">Security White Paper</a> for more info on these controls that protect the confidentiality and security of Customer Data.</li><li><strong>We offer Customers a choice around these practices. </strong> If you want to exclude your Customer Data from helping train Slack global models, you can opt out. If you opt out, Customer Data on your workspace will only be used to improve the experience on your own workspace and you will still enjoy all of the benefits of our globally trained AI/ML models without contributing to the underlying models. </li></ul><p><strong>Contact us to opt out. </strong> If you want to exclude your Customer Data from Slack global models, you can opt out. To opt out, please have your Org or Workspace Owners or Primary Owner contact our Customer Experience team at feedback@slack.com with your Workspace/Org URL and the subject line “Slack Global model opt-out request.” We will process your request and respond once the opt out has been completed. </p><h2>Customer Data and Other Information</h2><h4>How Slack may use Customer Data (e.g. messages, content, files) and Other Information to update our services</h4><p> Working from the above principles, here are a few examples of improvements and privacy protective techniques that our product and analytics teams may use to develop, update and improve Slack: </p><ul><li><strong>Channel Recommendations: </strong>We may use insights to recommend that a user joins a new public channel in their company. We make these suggestions based on channel membership, activity, and topic overlaps. Our model learns from previous suggestions and whether or not a user joins the channel we recommend. We protect privacy while doing so by separating our model from Customer Data. We use external models (not trained on Slack messages) to evaluate topic similarity, outputting numerical scores. Our global model only makes recommendations based on these numerical scores and non-Customer Data. For more technical details, please visit our Engineering Blog to <a href="https://slack.engineering/recommend-api/">learn more</a>.</li><li><strong>Search Results: </strong>Our search machine learning models help users find what they're seeking by identifying the right results for a particular query. We do this based on historical search results and previous engagements without learning from the underlying text of the search query, result, or proxy. Simply put, our model can't reconstruct the search query or result. Instead, it learns from team-specific, contextual information like the number of times a message has been clicked in a search or an overlap in the number of words in the query and recommended message.</li><li><strong>Autocomplete: </strong>Slack might make suggestions to complete search queries or other text– for example autocompleting the phrase "Customer Support" after a user types the first several letters of this phrase. These suggestions are local and sourced from common public message phrases in the user’s workspace. Our algorithm that picks from potential suggestions is trained globally on previously suggested and accepted completions. We protect data privacy by using rules to score the similarity between the typed text and suggestion in various ways, including only using the numerical scores and counts of past interactions in the algorithm.</li><li><strong>Emoji Suggestion: </strong>Slack might suggest emoji reactions to messages using the content and sentiment of the message, the historic usage of the emoji, and the frequency of use of the emoji on the team in various contexts. For instance, if 🎉 is a common reaction to celebratory messages in a particular channel, we will suggest users react to new, similarly positive messages with 🎉. To do this while protecting Customer Data, we might use an etrnal model (not trained on Slack messages) to classify the sentiment of the message. Our model would then suggest an emoji only considering the frequency with which a particular emoji has been associated with messages of that sentiment in that workspace.</li></ul><p>These types of thoughtful personalizations and improvements are only possible if we study and understand how our users interact with Slack.</p><p>Slack takes privacy seriously and our confidentiality obligations described in our customer agreements and <a href="https://slack.com/trust/privacy/privacy-policy">Privacy Policy</a> apply in each of these scenarios. Customers own their own Customer Data. Slack aggregates and disassociates Customer Data such that Slack’s use of Customer Data to update the Services will never identify any of our customers or individuals as the source of any of these improvements to any third party, other than to Slack’s affiliates or sub-processors.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Improvements to Data Analysis in ChatGPT (192 pts)]]></title>
            <link>https://openai.com/index/improvements-to-data-analysis-in-chatgpt/</link>
            <guid>40383886</guid>
            <pubDate>Thu, 16 May 2024 22:06:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://openai.com/index/improvements-to-data-analysis-in-chatgpt/">https://openai.com/index/improvements-to-data-analysis-in-chatgpt/</a>, See on <a href="https://news.ycombinator.com/item?id=40383886">Hacker News</a></p>
Couldn't get https://openai.com/index/improvements-to-data-analysis-in-chatgpt/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Deutsche Bahn introduces "MetaWindow" (294 pts)]]></title>
            <link>https://www.railtarget.eu/technologies-and-infrastructure/deutsche-bahn-introduces-metawindow-a-gamechanger-in-noise-reduction-for-railways-8449.html</link>
            <guid>40383263</guid>
            <pubDate>Thu, 16 May 2024 21:14:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.railtarget.eu/technologies-and-infrastructure/deutsche-bahn-introduces-metawindow-a-gamechanger-in-noise-reduction-for-railways-8449.html">https://www.railtarget.eu/technologies-and-infrastructure/deutsche-bahn-introduces-metawindow-a-gamechanger-in-noise-reduction-for-railways-8449.html</a>, See on <a href="https://news.ycombinator.com/item?id=40383263">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="cphTELO_pnlMainTop">
			<div id="article">

					<div>
						<p><img src="https://www.railtarget.eu/images/theme/20240516110358_20250515_Huber_Laermschutzwand_PI-data_2.jpg" alt="Deutsche Bahn Introduces &amp;quote;MetaWindow&amp;quote;: A Game-Changer in Noise Reduction for Railways" width="730" height="455"></p><p><span>photo:</span> Dominic Dupont / DB AG / Public domain<span>/</span>Berthold Huber</p>
					</div><!-- .clk-image -->
				<!-- .tools -->
				<p>Deutsche Bahn has unveiled a pioneering advancement in noise control technology with the introduction of the MetaWindow, a transparent noise barrier boasting unparalleled sound-absorbing capabilities.</p>
					<div>
		<h2>Read more</h2>
		<div>
				<p><a href="https://www.railtarget.eu/technologies-and-infrastructure/derailing-stability-the-escalation-of-russian-railway-sabotage-in-europe-amidst-war-8421.html"><img src="https://www.railtarget.eu/images/theme/thumbs/t1-20240513142102_Screenshot-2024-05-13-142042.png" alt="Derailing Stability: The Escalation of Russian Railway Sabotage in Europe Amidst War" width="240" height="150"></a>
				</p><!-- .related-article-image -->
				<!--.related-article-text-->
			</div><!--.related-article-cont-->
	</div><!--.related-articles-->

<p>Developed in collaboration with Italian start-up <a href="https://phononic-vibes.com/about-us/">Phononic Vibes</a>, the MetaWindow was recently <a href="https://www.deutschebahn.com/de/presse/pressestart_zentrales_uebersicht/Mehr-Durchblick-weniger-Laerm-DB-entwickelt-innovative-transparente-Schallschutzwaende-12861336">showcased </a>at the Greentech Festival in Berlin. This new system <strong>integrates meta technology</strong>, which utilizes a&nbsp;unique geometric design to <strong>enhance acoustic efficiency far beyond traditional noise barriers</strong>. The first real-world application of this innovative technology is set to commence on the S4 railway construction in Hamburg later this year.</p>
<p><img src="https://www.deutschebahn.com/resource/blob/12861956/c92dcd9aa42d0777b9335d2454d8f0ee/20250515__PI_Infrastruktur_MetaWindow_1A-data.jpg" alt="Source: DB AG / Public domain"></p>
<p><strong>Berthold Huber</strong>, a&nbsp;DB Board Member for Infrastructure, emphasized the dual benefits of the MetaWindow. <em>"To achieve our climate protection targets, we need to get more traffic on the rails and expand and extend the network,"</em> emphasized <strong>Huber</strong>. <em>"But we can only gain the necessary acceptance from residents if rail transport becomes quieter. This is precisely where the innovative MetaWindow comes in. With the transparent noise barrier, local authorities no longer have to choose between appearance and functionality."</em></p>
	<div>
		<h2>Read more</h2>
		<div>
				<p><a href="https://www.railtarget.eu/technologies-and-infrastructure/budimex-launches-new-tram-line-in-warsaw-8434.html"><img src="https://www.railtarget.eu/images/theme/thumbs/t1-20240515101257_tramwaj_do_wilanowa_7_2.jpg" alt="Budimex Launches New Tram Line in Warsaw" width="240" height="150"></a>
				</p><!-- .related-article-image -->
				<!--.related-article-text-->
			</div><!--.related-article-cont-->
	</div><!--.related-articles-->

<p>The barrier achieves <strong>noise insulation levels ranging from 34 to 37 decibels</strong> while maintaining up to 72 percent transparency, a&nbsp;stark improvement over existing solutions that often sacrifice effectiveness for visual openness. The MetaWindow is specifically designed for sensitive areas where strict noise reduction regulations apply, such as <strong>urban settings, tourist spots, residential zones, and protected landscapes</strong>. Its design minimizes visual disruptions, aligning better with the environment and reducing public grievances often associated with the construction of conventional noise barriers.</p>
<p><img src="https://www.deutschebahn.com/resource/blob/12861966/300e32c60b5d848b3044f2344eec3b30/20250515__PI_Infrastruktur_MetaWindow_1A-1--data.jpg" alt="Source: DB AG / Public domain"></p>
<p>Although the MetaWindow comes at a&nbsp;higher material cost, the overall financial implications are mitigated by the potential for <strong>faster planning approvals and reduced objection rates from communities</strong>, ultimately speeding up project completions.</p>
	<div>
		<h2>Read more</h2>
		<div>
				<p><a href="https://www.railtarget.eu/interviews-and-events/highspeed-lines-are-not-just-transit-lines-to-the-main-airport-but-will-connect-the-largest-centres-of-the-silesian-agglomeration-in-the-czech-republic-and-poland-says-the-new-head-of-the-supervisory-board-of-cpk-sa-8446.html"><img src="https://www.railtarget.eu/images/theme/thumbs/t1-20240509160909_Zbigniew-Szafranski.jpeg" alt="“High-Speed Lines Are Not Just Transit Lines to the Main Airport, but Will Connect the…" width="240" height="150"></a>
				</p><!-- .related-article-image -->
				<!--.related-article-text-->
			</div><!--.related-article-cont-->
	</div><!--.related-articles-->

				
				

<!-- .bottom-article-banner -->
				<!-- .tools -->
				
		</div><!-- #article.panel -->

				<h2><span>Tags</span></h2>
			<!-- #kws-tags -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Winamp has announced that it is "opening up" its source code (312 pts)]]></title>
            <link>https://about.winamp.com/press/article/winamp-open-source-code</link>
            <guid>40383029</guid>
            <pubDate>Thu, 16 May 2024 20:56:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://about.winamp.com/press/article/winamp-open-source-code">https://about.winamp.com/press/article/winamp-open-source-code</a>, See on <a href="https://news.ycombinator.com/item?id=40383029">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main" data-framer-hydrate-v2="{&quot;routeId&quot;:&quot;VDX2nASSG&quot;,&quot;localeId&quot;:&quot;default&quot;,&quot;pathVariables&quot;:{&quot;HfrajEMLp&quot;:&quot;winamp-open-source-code&quot;},&quot;breakpoints&quot;:[{&quot;hash&quot;:&quot;ryuln6&quot;,&quot;mediaQuery&quot;:&quot;(min-width: 1920px)&quot;},{&quot;hash&quot;:&quot;1x7nbvm&quot;,&quot;mediaQuery&quot;:&quot;(min-width: 1400px) and (max-width: 1919px)&quot;},{&quot;hash&quot;:&quot;16kw5ex&quot;,&quot;mediaQuery&quot;:&quot;(min-width: 810px) and (max-width: 1399px)&quot;},{&quot;hash&quot;:&quot;1hubp3w&quot;,&quot;mediaQuery&quot;:&quot;(max-width: 809px)&quot;}]}" data-framer-ssr-released-at="2024-05-13T14:44:26.722Z" data-framer-page-optimized-at="2024-05-16T14:48:27.654Z"><div data-framer-appear-id="15y0frg"><div data-framer-name="Content" name="Content"><div data-framer-name="Title and Date" name="Title and Date"><p data-styles-preset="qF5JrIgnU">Winamp</p><p data-styles-preset="qF5JrIgnU"> • </p><p data-styles-preset="qF5JrIgnU">Dec 16, 1</p><p data-styles-preset="qF5JrIgnU"> • </p><p data-styles-preset="qF5JrIgnU">Press Release </p></div><div data-framer-name="Article" name="Article"><div data-framer-name="Paragraph" name="Paragraph"><p data-framer-component-type="RichTextContainer"><h3 data-styles-preset="xr3vWz0ss">Winamp has announced that it is opening up its source code to enable collaborative development of its legendary player for Windows.</h3></p></div><div data-framer-component-type="RichTextContainer" data-framer-name="Paragraph" name="Paragraph"><p>Winamp has announced that on 24 September 2024, the application's source code will be open to developers worldwide.</p><p>Winamp will open up its code for the player used on Windows, enabling the entire community to participate in its development. This is an invitation to global collaboration, where developers worldwide can contribute their expertise, ideas, and passion to help this iconic software evolve.</p><p>Winamp has become much more than just a music player. It embodies a unique digital culture, aesthetic, and user experience. With this initiative to open the source code, Winamp is taking the next step in its history, allowing its users to contribute directly to improving the product.</p><p>&nbsp;"This is a decision that will delight millions of users around the world. Our focus will be on new mobile players and other platforms. We will be releasing a new mobile player at the beginning of July. Still, we don't want to forget the tens of millions of users who use the software on Windows and will benefit from thousands of developers' experience and creativity. Winamp will remain the owner of the software and will decide on the innovations made in the official version," explains Alexandre Saboundjian, CEO of Winamp.</p><p>Interested developers can now make themselves known at the following address: <a href="https://about.winamp.com/free-llama" target="_blank">about.winamp.com/free-llama</a></p></div></div></div><div data-framer-name="Newsletter" name="Newsletter"><p data-styles-preset="gv5vSpTcx">Subscribe to our newsletter</p><p data-styles-preset="qF5JrIgnU">Get the best content for creators delivered to your inbox every week.</p></div></div><div data-framer-appear-id="1idqgev"><div data-framer-name="Content" name="Content"><div data-framer-name="Title and Date" name="Title and Date"><p data-styles-preset="qF5JrIgnU">Winamp</p><p data-styles-preset="qF5JrIgnU"> • </p><p data-styles-preset="qF5JrIgnU">Dec 16, 1</p><p data-styles-preset="qF5JrIgnU"> • </p><p data-styles-preset="qF5JrIgnU">Press Release </p></div><div data-framer-name="Article" name="Article"><div data-framer-name="Paragraph" name="Paragraph"><p data-framer-component-type="RichTextContainer"><h3 data-styles-preset="xr3vWz0ss">Winamp has announced that it is opening up its source code to enable collaborative development of its legendary player for Windows.</h3></p></div><div data-framer-component-type="RichTextContainer" data-framer-name="Paragraph" name="Paragraph"><p>Winamp has announced that on 24 September 2024, the application's source code will be open to developers worldwide.</p><p>Winamp will open up its code for the player used on Windows, enabling the entire community to participate in its development. This is an invitation to global collaboration, where developers worldwide can contribute their expertise, ideas, and passion to help this iconic software evolve.</p><p>Winamp has become much more than just a music player. It embodies a unique digital culture, aesthetic, and user experience. With this initiative to open the source code, Winamp is taking the next step in its history, allowing its users to contribute directly to improving the product.</p><p>&nbsp;"This is a decision that will delight millions of users around the world. Our focus will be on new mobile players and other platforms. We will be releasing a new mobile player at the beginning of July. Still, we don't want to forget the tens of millions of users who use the software on Windows and will benefit from thousands of developers' experience and creativity. Winamp will remain the owner of the software and will decide on the innovations made in the official version," explains Alexandre Saboundjian, CEO of Winamp.</p><p>Interested developers can now make themselves known at the following address: <a href="https://about.winamp.com/free-llama" target="_blank">about.winamp.com/free-llama</a></p></div></div></div><div data-framer-name="Newsletter" name="Newsletter"><p data-styles-preset="gv5vSpTcx">Subscribe to our newsletter</p><p data-styles-preset="qF5JrIgnU">Get the best content for creators delivered to your inbox every week.</p></div></div><div data-framer-appear-id="vz7m03"><div data-framer-name="Content" name="Content"><div data-framer-name="Title and Date" name="Title and Date"><p data-styles-preset="qF5JrIgnU">Winamp</p><p data-styles-preset="qF5JrIgnU"> • </p><p data-styles-preset="qF5JrIgnU">Dec 16, 1</p><p data-styles-preset="qF5JrIgnU"> • </p><p data-styles-preset="qF5JrIgnU">Press Release </p></div><div data-framer-name="Article" name="Article"><div data-framer-name="Paragraph" name="Paragraph"><p data-framer-component-type="RichTextContainer"><h3 data-styles-preset="xr3vWz0ss">Winamp has announced that it is opening up its source code to enable collaborative development of its legendary player for Windows.</h3></p></div><div data-framer-component-type="RichTextContainer" data-framer-name="Paragraph" name="Paragraph"><p>Winamp has announced that on 24 September 2024, the application's source code will be open to developers worldwide.</p><p>Winamp will open up its code for the player used on Windows, enabling the entire community to participate in its development. This is an invitation to global collaboration, where developers worldwide can contribute their expertise, ideas, and passion to help this iconic software evolve.</p><p>Winamp has become much more than just a music player. It embodies a unique digital culture, aesthetic, and user experience. With this initiative to open the source code, Winamp is taking the next step in its history, allowing its users to contribute directly to improving the product.</p><p>&nbsp;"This is a decision that will delight millions of users around the world. Our focus will be on new mobile players and other platforms. We will be releasing a new mobile player at the beginning of July. Still, we don't want to forget the tens of millions of users who use the software on Windows and will benefit from thousands of developers' experience and creativity. Winamp will remain the owner of the software and will decide on the innovations made in the official version," explains Alexandre Saboundjian, CEO of Winamp.</p><p>Interested developers can now make themselves known at the following address: <a href="https://about.winamp.com/free-llama" target="_blank">about.winamp.com/free-llama</a></p></div></div></div><div data-framer-name="Newsletter" name="Newsletter"><p data-styles-preset="gv5vSpTcx">Subscribe to our newsletter</p><p data-styles-preset="qF5JrIgnU">Get the best content for creators delivered to your inbox every week.</p></div></div><div data-framer-appear-id="52oygv"><div data-framer-name="Content" name="Content"><div data-framer-name="Title and Date" name="Title and Date"><p data-styles-preset="qF5JrIgnU">Winamp</p><p data-styles-preset="qF5JrIgnU"> • </p><p data-styles-preset="qF5JrIgnU">Dec 16, 1</p><p data-styles-preset="qF5JrIgnU"> • </p><p data-styles-preset="qF5JrIgnU">Press Release </p></div><div data-framer-name="Article" name="Article"><div data-framer-name="Paragraph" name="Paragraph"><p data-framer-component-type="RichTextContainer"><h3 data-styles-preset="xr3vWz0ss">Winamp has announced that it is opening up its source code to enable collaborative development of its legendary player for Windows.</h3></p></div><div data-framer-component-type="RichTextContainer" data-framer-name="Paragraph" name="Paragraph"><p>Winamp has announced that on 24 September 2024, the application's source code will be open to developers worldwide.</p><p>Winamp will open up its code for the player used on Windows, enabling the entire community to participate in its development. This is an invitation to global collaboration, where developers worldwide can contribute their expertise, ideas, and passion to help this iconic software evolve.</p><p>Winamp has become much more than just a music player. It embodies a unique digital culture, aesthetic, and user experience. With this initiative to open the source code, Winamp is taking the next step in its history, allowing its users to contribute directly to improving the product.</p><p>&nbsp;"This is a decision that will delight millions of users around the world. Our focus will be on new mobile players and other platforms. We will be releasing a new mobile player at the beginning of July. Still, we don't want to forget the tens of millions of users who use the software on Windows and will benefit from thousands of developers' experience and creativity. Winamp will remain the owner of the software and will decide on the innovations made in the official version," explains Alexandre Saboundjian, CEO of Winamp.</p><p>Interested developers can now make themselves known at the following address: <a href="https://about.winamp.com/free-llama" target="_blank">about.winamp.com/free-llama</a></p></div></div></div><div data-framer-name="Newsletter" name="Newsletter"><p data-styles-preset="gv5vSpTcx">Subscribe to our newsletter</p><p data-styles-preset="qF5JrIgnU">Get the best content for creators delivered to your inbox every week.</p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tesla's self-driving tech ditched by 98 percent of customers that tried it (116 pts)]]></title>
            <link>https://www.the-express.com/finance/business/137709/tesla-self-driving-elon-musk-china</link>
            <guid>40382615</guid>
            <pubDate>Thu, 16 May 2024 20:14:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.the-express.com/finance/business/137709/tesla-self-driving-elon-musk-china">https://www.the-express.com/finance/business/137709/tesla-self-driving-elon-musk-china</a>, See on <a href="https://news.ycombinator.com/item?id=40382615">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontainer"> <header><h2> <a id="express-logo" href="https://www.the-express.com/" data-link-tracking="Header|MainLogo|Image|Express"> <span>Express. Home of the Daily and Sunday Express.</span> <picture> <source media="(max-width:980px)" srcset="https://cdn-images.the-express.com/img/logo/dr/logo_tablet.png"> <source media="(min-width:981px)" srcset="https://cdn-images.the-express.com/img/logo/dr/logo.png"> <img src="https://cdn-images.the-express.com/img/logo/dr/logo.png" id="logo-image" alt="logo" title="Daily Express US - Latest US News, Sport &amp; Entertainment " width="300" height="63"> </picture> </a></h2> <nav><ul><li> <a href="https://www.the-express.com/">HOME</a></li><li> <a href="https://www.the-express.com/news" data-link-tracking="Header|SectionLabel|Text|News"> News </a></li><li> <a href="https://www.the-express.com/sport" data-link-tracking="Header|SectionLabel|Text|Sports"> Sports </a></li><li> <a href="https://www.the-express.com/entertainment" data-link-tracking="Header|SectionLabel|Text|Entertainment"> Entertainment </a></li><li> <a href="https://www.the-express.com/opinion/comment" data-link-tracking="Header|SectionLabel|Text|Opinion"> Opinion </a></li><li> <a href="https://www.the-express.com/finance" data-link-tracking="Header|SectionLabel|Text|Finance"> Finance </a></li><li> <a href="https://www.the-express.com/travel" data-link-tracking="Header|SectionLabel|Text|Travel"> Travel </a></li><li> <a href="https://www.the-express.com/tech" data-link-tracking="Header|SectionLabel|Text|Tech"> Tech </a></li><li> <a href="https://www.the-express.com/lifestyle" data-link-tracking="Header|SectionLabel|Text|Life &amp; Style"> Life &amp; Style </a></li></ul><ul><li> <a href="https://www.the-express.com/finance/personal-finance" data-link-tracking="Header|DropDown|Text|Personal Finance"> Personal Finance </a></li><li> <a href="https://www.the-express.com/finance/business" data-link-tracking="Header|DropDown|Text|Business"> Business </a></li></ul><ul id="sub-navigation-more"></ul> </nav> </header><div id="singleArticle" data-story="137709" role="main"> <article data-io-article-url="https://www.the-express.com/finance/business/137709/tesla-self-driving-elon-musk-china"> <header><h3>Data comprised of 3,500 Tesla drivers showed the vast majority did not want to keep the technology after their trial.</h3><div><p><time datetime="2024-05-16T12:36:00Z"> <span>08:36 ET, Thu, May 16, 2024</span> </time> <time datetime="2024-05-16T12:40:52Z"> | UPDATED: <span>08:40 ET, Thu, May 16, 2024</span> </time></p></div> </header><div data-type="article-body"><div><p><picture><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Tesla-is-promoting-its-self-driving-technology-189940.avif?r=1715863251959" media="screen and (min-width:10000px)"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Tesla-is-promoting-its-self-driving-technology-189940.webp?r=1715863251959" media="screen and (min-width:10000px)"><source type="image/jpeg" srcset="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Tesla-is-promoting-its-self-driving-technology-189940.jpg?r=1715863251959" media="screen and (min-width:10000px)"><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/674x400/secondary/Tesla-is-promoting-its-self-driving-technology-189940.avif?r=1715863251959" media="screen and (min-width:9000px)"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/674x400/secondary/Tesla-is-promoting-its-self-driving-technology-189940.webp?r=1715863251959" media="screen and (min-width:9000px)"><source type="image/jpeg" srcset="https://cdn-images.the-express.com/img/dynamic/26/674x400/secondary/Tesla-is-promoting-its-self-driving-technology-189940.jpg?r=1715863251959" media="screen and (min-width:9000px)"><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/940x/secondary/Tesla-is-promoting-its-self-driving-technology-189940.avif?r=1715863251959" media="screen and (min-width:1200px)"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/940x/secondary/Tesla-is-promoting-its-self-driving-technology-189940.webp?r=1715863251959" media="screen and (min-width:1200px)"><source type="image/jpeg" srcset="https://cdn-images.the-express.com/img/dynamic/26/940x/secondary/Tesla-is-promoting-its-self-driving-technology-189940.jpg?r=1715863251959" media="screen and (min-width:1200px)"><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/590x/secondary/Tesla-is-promoting-its-self-driving-technology-189940.avif?r=1715863251959" media="screen"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/590x/secondary/Tesla-is-promoting-its-self-driving-technology-189940.webp?r=1715863251959" media="screen"><img src="https://cdn-images.the-express.com/img/dynamic/26/590x/secondary/Tesla-is-promoting-its-self-driving-technology-189940.jpg?r=1715863251959" data-img="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Tesla-is-promoting-its-self-driving-technology-189940.jpg?r=1715863251959" alt="Tesla is promoting its self-driving technology" title="Tesla is promoting its self-driving technology" width="590" height="350"></picture></p><p><span>Tesla is promoting its self-driving technology <span>(Image: Getty)</span><span data-img="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Tesla-is-promoting-its-self-driving-technology-189940.jpg?r=1715863251959"></span></span></p></div><div><p>A staggering 98 percent of Tesla owners decide not to keep using their self-driving technology after their trial period, data shows.</p><p><a data-link-tracking="InArticle|Link" rel="nofollow" href="https://www.the-express.com/latest/tesla" target="_blank">Tesla</a> charges customers $8,000 for the full self-driving technology, which has divided opinion since being unveiled by the company.</p><p>Statistics from YipitData found that only two percent of new Tesla owners continue using the technology after the trial period.</p><ul><li><strong><a data-link-tracking="InArticle|Link" rel="nofollow" href="https://www.the-express.com/lifestyle/cars/136924/tesla-drivers-wet-towel-increases-charging-speed" target="_blank">Tesla drivers are saving time charging with an ‘amazing’ wet towel tip&nbsp;</a></strong></li><li><strong><a data-link-tracking="InArticle|Link" rel="nofollow" href="https://www.the-express.com/finance/business/137435/cybertruck-owners-mocked-vehicle-faults-tesla-elon-musk" target="_blank">Cybertruck owners mocked as vehicle issues mount up</a></strong></li></ul><p>The data was gathered from a sample size of just under 3,500 owners - small compared to the 1.8 million Tesla drivers in North America.</p><p>CEO Elon Musk has placed great emphasis on self-driving technology as a feature that will set his cars apart from other competition around the globe.</p></div><div><p><picture><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.avif?r=1715863252031" media="screen and (min-width:10000px)"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.webp?r=1715863252031" media="screen and (min-width:10000px)"><source type="image/jpeg" srcset="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.jpg?r=1715863252031" media="screen and (min-width:10000px)"><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/674x400/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.avif?r=1715863252031" media="screen and (min-width:9000px)"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/674x400/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.webp?r=1715863252031" media="screen and (min-width:9000px)"><source type="image/jpeg" srcset="https://cdn-images.the-express.com/img/dynamic/26/674x400/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.jpg?r=1715863252031" media="screen and (min-width:9000px)"><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/940x/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.avif?r=1715863252031" media="screen and (min-width:1200px)"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/940x/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.webp?r=1715863252031" media="screen and (min-width:1200px)"><source type="image/jpeg" srcset="https://cdn-images.the-express.com/img/dynamic/26/940x/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.jpg?r=1715863252031" media="screen and (min-width:1200px)"><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/590x/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.avif?r=1715863252031" media="screen"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/590x/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.webp?r=1715863252031" media="screen"><img src="https://cdn-images.the-express.com/img/dynamic/26/590x/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.jpg?r=1715863252031" data-img="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.jpg?r=1715863252031" alt="Musk went to China to secure a deal on his FSD tech" title="Musk went to China to secure a deal on his FSD tech" width="590" height="350" loading="lazy"></picture></p><p><span>Musk went to China to secure a deal on his FSD tech <span>(Image: Getty)</span><span data-img="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Musk-went-to-China-to-secure-a-deal-on-his-FSD-tech-189941.jpg?r=1715863252031"></span></span></p></div><div><p>Tesla has struggled in recent months due to increased competition from China.</p><p>Chinese company BYD <a data-link-tracking="InArticle|Link" rel="nofollow" href="https://www.the-express.com/lifestyle/cars/132577/elon-musk-tesla-chinese-electric-vehicle-rival" target="_blank">passed Tesla as the world's biggest producer of electric vehicles in late 2023</a>.</p><p>Musk has even previously warned that Tesla will be "demolished" by Chinese competitors if trade restrictions in the US are not imposed.</p><p>The Tesla CEO recently traveled to China to meet with Premier Li Qiang.</p><p>While there, Musk secured a breakthrough deal that could allow Tesla to roll out its self-driving technology.</p><p>However, another Chinese rival has emerged.</p><p>Electric car company Nio unveiled a new, cheaper model called Onvo, costing $4,000 less than Tesla's Model Y.</p><p><strong><a data-link-tracking="InArticle|Link" rel="nofollow" href="https://www.the-express.com/news/us-news/137585/Tesla-Model-3-horror-crash-deaths">Tesla Model 3 horror crash leaves three dead and Los Angeles building in ruins<br></a><a data-link-tracking="InArticle|Link" rel="nofollow" href="https://www.the-express.com/finance/business/137435/cybertruck-owners-mocked-vehicle-faults-tesla-elon-musk">Cybertruck owners mocked as vehicle issues mount up<br></a><a data-link-tracking="InArticle|Link" rel="nofollow" href="https://www.the-express.com/lifestyle/cars/136924/tesla-drivers-wet-towel-increases-charging-speed">Tesla drivers are saving time charging with an ‘amazing’ wet towel tip</a></strong></p></div><div><p><picture><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Nio-has-unveiled-its-own-electric-car-189942.avif?r=1715863252103" media="screen and (min-width:10000px)"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Nio-has-unveiled-its-own-electric-car-189942.webp?r=1715863252103" media="screen and (min-width:10000px)"><source type="image/jpeg" srcset="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Nio-has-unveiled-its-own-electric-car-189942.jpg?r=1715863252103" media="screen and (min-width:10000px)"><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/674x400/secondary/Nio-has-unveiled-its-own-electric-car-189942.avif?r=1715863252103" media="screen and (min-width:9000px)"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/674x400/secondary/Nio-has-unveiled-its-own-electric-car-189942.webp?r=1715863252103" media="screen and (min-width:9000px)"><source type="image/jpeg" srcset="https://cdn-images.the-express.com/img/dynamic/26/674x400/secondary/Nio-has-unveiled-its-own-electric-car-189942.jpg?r=1715863252103" media="screen and (min-width:9000px)"><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/940x/secondary/Nio-has-unveiled-its-own-electric-car-189942.avif?r=1715863252103" media="screen and (min-width:1200px)"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/940x/secondary/Nio-has-unveiled-its-own-electric-car-189942.webp?r=1715863252103" media="screen and (min-width:1200px)"><source type="image/jpeg" srcset="https://cdn-images.the-express.com/img/dynamic/26/940x/secondary/Nio-has-unveiled-its-own-electric-car-189942.jpg?r=1715863252103" media="screen and (min-width:1200px)"><source type="image/avif" srcset="https://cdn-images.the-express.com/img/dynamic/26/590x/secondary/Nio-has-unveiled-its-own-electric-car-189942.avif?r=1715863252103" media="screen"><source type="image/webp" srcset="https://cdn-images.the-express.com/img/dynamic/26/590x/secondary/Nio-has-unveiled-its-own-electric-car-189942.webp?r=1715863252103" media="screen"><img src="https://cdn-images.the-express.com/img/dynamic/26/590x/secondary/Nio-has-unveiled-its-own-electric-car-189942.jpg?r=1715863252103" data-img="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Nio-has-unveiled-its-own-electric-car-189942.jpg?r=1715863252103" alt="Nio has unveiled its own electric car" title="Nio has unveiled its own electric car" width="590" height="350" loading="lazy"></picture></p><p><span>Nio has unveiled its own electric car <span>(Image: Getty)</span><span data-img="https://cdn-images.the-express.com/img/dynamic/26/1200x712/secondary/Nio-has-unveiled-its-own-electric-car-189942.jpg?r=1715863252103"></span></span></p></div><div><p>Nio CEO William Li did not confirm when the car will go on the market.</p><p>Onvo aims to set a “new standard” for the family car, Alan Ai, president of the Nio sub-brand, said at Wednesday’s launch event, as translated by CNBC.</p><p>Li added: "RAV4 and Model Y were the benchmark for family cars in their time.</p><p>"With technologies evolving and people’s understanding in smart EVs deepening, today it’s time for us to redefine the new standards for family cars."</p></div><div> <header><h3>Related articles</h3> </header><ul><li> <var></var> <a data-link-tracking="InArticle|Rec|RelatedArticles|index1|textOnly" href="https://www.the-express.com/news/us-news/137357/youtuber-finger-tesla-cybertruck-frunk-trunk-car" data-long-headline="YouTuber 'breaks his own finger' after trying 'carrot test' on Tesla Cybertruck" data-short-headline="YouTuber 'breaks his own finger' after trying 'carrot test' on Tesla Cybertruck" onclick="ExpressApp.GoogleAnalytics.TrackEvent('Related Articles - text link', '/news/us-news/137357/youtuber-finger-tesla-cybertruck-frunk-trunk-car')"> YouTuber 'breaks his own finger' after trying 'carrot test' on Tesla Cybertruck </a></li><li> <var></var> <a data-link-tracking="InArticle|Rec|RelatedArticles|index1|textOnly" href="https://www.the-express.com/finance/business/137435/cybertruck-owners-mocked-vehicle-faults-tesla-elon-musk" data-long-headline="'Clueless f****ng idiots!' Cybertruck owners mocked as vehicle issues mount up" data-short-headline="Cybertruck owners mocked as vehicle issues mount up" onclick="ExpressApp.GoogleAnalytics.TrackEvent('Related Articles - text link', '/finance/business/137435/cybertruck-owners-mocked-vehicle-faults-tesla-elon-musk')"> Cybertruck owners mocked as vehicle issues mount up </a></li><li> <var></var> <a data-link-tracking="InArticle|Rec|RelatedArticles|index1|textOnly" href="https://www.the-express.com/news/us-news/137585/Tesla-Model-3-horror-crash-deaths" data-long-headline="Tesla Model 3 horror crash leaves three people dead and Los Angeles building in ruins " data-short-headline="Tesla Model 3 horror crash leaves three dead and Los Angeles building in ruins " onclick="ExpressApp.GoogleAnalytics.TrackEvent('Related Articles - text link', '/news/us-news/137585/Tesla-Model-3-horror-crash-deaths')"> Tesla Model 3 horror crash leaves three dead and Los Angeles building in ruins </a></li><li> <var></var> <a data-link-tracking="InArticle|Rec|RelatedArticles|index1|textOnly" href="https://www.the-express.com/lifestyle/cars/137606/tesla-full-self-driving-sales-elon-musk" data-long-headline="Elon Musk red-faced amid trouble for Tesla as new figures expose ‘sales ploy flop’" data-short-headline="Elon Musk red-faced as new Tesla figures expose ‘sales ploy flop'" onclick="ExpressApp.GoogleAnalytics.TrackEvent('Related Articles - text link', '/lifestyle/cars/137606/tesla-full-self-driving-sales-elon-musk')"> Elon Musk red-faced as new Tesla figures expose ‘sales ploy flop' </a></li><li> <var></var> <a data-link-tracking="InArticle|Rec|RelatedArticles|index1|textOnly" href="https://www.the-express.com/news/us-news/137627/tesla-cybertruck-executive-renjie-zhu-leaves-company-elon-musk-layoffs" data-long-headline="Tesla executive mysteriously leaves company amid rounds of massive layoffs" data-short-headline="Tesla executive mysteriously leaves company following massive layoffs" onclick="ExpressApp.GoogleAnalytics.TrackEvent('Related Articles - text link', '/news/us-news/137627/tesla-cybertruck-executive-renjie-zhu-leaves-company-elon-musk-layoffs')"> Tesla executive mysteriously leaves company following massive layoffs </a></li></ul></div></div> </article></div>  <div>  <nav> </nav><div><p><span>IPSO Regulated</span> Copyright ©2024 Express Newspapers. "Daily Express" is a registered trademark. All rights reserved.</p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Germany's Sovereign Tech Fund Now Supporting FFmpeg (190 pts)]]></title>
            <link>https://www.phoronix.com/news/Germany-STF-For-FFmpeg</link>
            <guid>40382568</guid>
            <pubDate>Thu, 16 May 2024 20:09:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/news/Germany-STF-For-FFmpeg">https://www.phoronix.com/news/Germany-STF-For-FFmpeg</a>, See on <a href="https://news.ycombinator.com/item?id=40382568">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="MULTIMEDIA" src="https://www.phoronix.com/assets/categories/multimedia.webp" width="100" height="100"></p><p>
Following Germany's <a href="https://www.phoronix.com/search/Sovereign+Tech+Fund">Sovereign Tech Fund</a> providing significant funding for GNOME, Rust Coreutils, PHP, a systemd bug bounty, and numerous other free software projects, the FFmpeg multimedia library is the latest beneficiary to this funding from the Germany government.
</p><p>
The Sovereign Tech Fund <a href="https://www.sovereigntechfund.de/tech/ffmpeg">notes</a> that the FFmpeg project is receiving €157,580.00 for 2024 and 2025.
</p><p><img src="https://www.phoronix.net/image.php?id=2022&amp;image=ffmpeg" alt="FFmpeg logo"></p>
<p>An announcement on the <a href="https://ffmpeg.org/index.html#stf24">FFmpeg.org</a> project site notes:
</p><blockquote>"The FFmpeg community is excited to announce that Germany's Sovereign Tech Fund has become its first governmental sponsor. Their support will help sustain the [maintenance] of the FFmpeg project, a critical open-source software multimedia component essential to bringing audio and video to billions around the world everyday."</blockquote>
<p>Exciting news and great continuing to see the significant investments across many open-source projects being made by the Sovereign Tech Fund.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A long list of (advanced) JavaScript questions, and their explanations (136 pts)]]></title>
            <link>https://github.com/lydiahallie/javascript-questions</link>
            <guid>40382550</guid>
            <pubDate>Thu, 16 May 2024 20:07:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/lydiahallie/javascript-questions">https://github.com/lydiahallie/javascript-questions</a>, See on <a href="https://news.ycombinator.com/item?id=40382550">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto">
  <p><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a2f3d1f8c1d2871f1a0cbffa116f1098dd316021c0ec3101ac033f133d21e8e8/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f3334342f6a6176617363726970742e706e67"><img height="60" src="https://camo.githubusercontent.com/a2f3d1f8c1d2871f1a0cbffa116f1098dd316021c0ec3101ac033f133d21e8e8/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f3334342f6a6176617363726970742e706e67" data-canonical-src="https://img.icons8.com/color/344/javascript.png"></a></p><p dir="auto"><h2 tabindex="-1" dir="auto">JavaScript Questions</h2><a id="user-content-javascript-questions" aria-label="Permalink: JavaScript Questions" href="#javascript-questions"></a></p>
</div>
<div dir="auto"><p dir="auto">Note</p><p dir="auto">This repo was created in 2019 and the questions provided here are therefore based on the JavaScript syntax and behavior at that time. Since JavaScript is a constantly evolving language, there are newer language features that are not covered by the questions here.</p>
</div>
<hr>
<p dir="auto">
From basic to advanced: test how well you know JavaScript, refresh your knowledge a bit or prepare for your coding interview! 💪 🚀 I update this repo regularly with new questions. I added the answers in the **collapsed sections** below the questions, simply click on them to expand it. It's just for fun, good luck! ❤️</p>
<p dir="auto">Feel free to reach out to me! 😊</p>
<p dir="auto">
  <a href="https://www.instagram.com/theavocoder" rel="nofollow">Instagram</a> || <a href="https://www.twitter.com/lydiahallie" rel="nofollow">Twitter</a> || <a href="https://www.linkedin.com/in/lydia-hallie" rel="nofollow">LinkedIn</a> || <a href="https://www.lydiahallie.io/" rel="nofollow">Blog</a>
</p>
<table>
<thead>
<tr>
<th>Feel free to use them in a project! 😃 I would <em>really</em> appreciate a reference to this repo, I create the questions and explanations (yes I'm sad lol) and the community helps me so much to maintain and improve it! 💪🏼 Thank you and have fun!</th>
</tr>
</thead>
</table>
<details><summary><strong> See 20 Available Translations 🇸🇦🇪🇬🇧🇦🇩🇪🇪🇸🇫🇷🇮🇩🇯🇵🇰🇷🇳🇱🇧🇷🇷🇺🇹🇭🇹🇷🇺🇦🇻🇳🇨🇳🇹🇼🇽🇰</strong></summary>
<ul dir="auto">
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/ar-AR/README_AR.md">🇸🇦 العربية</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/ar-EG/README_ar-EG.md">🇪🇬 اللغة العامية</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/bs-BS/README-bs_BS.md">🇧🇦 Bosanski</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/de-DE/README.md">🇩🇪 Deutsch</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/es-ES/README-ES.md">🇪🇸 Español</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/fr-FR/README_fr-FR.md">🇫🇷 Français</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/id-ID/README.md">🇮🇩 Indonesia</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/it-IT/README.md">🇮🇹 Italiano</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/ja-JA/README-ja_JA.md">🇯🇵 日本語</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/ko-KR/README-ko_KR.md">🇰🇷 한국어</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/nl-NL/README.md">🇳🇱 Nederlands</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/pl-PL/README.md">🇵🇱 Polski</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/pt-BR/README_pt_BR.md">🇧🇷 Português Brasil</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/ro-RO/README.ro.md">🇷o Română</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/ru-RU/README.md">🇷🇺 Русский</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/sq-KS/README_sq_KS.md">🇽🇰 Shqip</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/th-TH/README-th_TH.md">🇹🇭 ไทย</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/tr-TR/README-tr_TR.md">🇹🇷 Türkçe</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/uk-UA/README.md">🇺🇦 Українська мова</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/vi-VI/README-vi.md">🇻🇳 Tiếng Việt</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/zh-CN/README-zh_CN.md">🇨🇳 简体中文</a></li>
<li><a href="https://github.com/lydiahallie/javascript-questions/blob/master/zh-TW/README_zh-TW.md">🇹🇼 繁體中文</a></li>
</ul>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">1. What's the output?</h6><a id="user-content-1-whats-the-output" aria-label="Permalink: 1. What's the output?" href="#1-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function sayHi() {
  console.log(name);
  console.log(age);
  var name = 'Lydia';
  let age = 21;
}

sayHi();"><pre><span>function</span> <span>sayHi</span><span>(</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>age</span><span>)</span><span>;</span>
  <span>var</span> <span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>
  <span>let</span> <span>age</span> <span>=</span> <span>21</span><span>;</span>
<span>}</span>

<span>sayHi</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Lydia</code> and <code>undefined</code></li>
<li>B: <code>Lydia</code> and <code>ReferenceError</code></li>
<li>C: <code>ReferenceError</code> and <code>21</code></li>
<li>D: <code>undefined</code> and <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d" aria-label="Permalink: Answer: D" href="#answer-d"></a></p>
<p dir="auto">Within the function, we first declare the <code>name</code> variable with the <code>var</code> keyword. This means that the variable gets hoisted (memory space is set up during the creation phase) with the default value of <code>undefined</code>, until we actually get to the line where we define the variable. We haven't defined the variable yet on the line where we try to log the <code>name</code> variable, so it still holds the value of <code>undefined</code>.</p>
<p dir="auto">Variables with the <code>let</code> keyword (and <code>const</code>) are hoisted, but unlike <code>var</code>, don't get <i>initialized</i>. They are not accessible before the line we declare (initialize) them. This is called the "temporal dead zone". When we try to access the variables before they are declared, JavaScript throws a <code>ReferenceError</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">2. What's the output?</h6><a id="user-content-2-whats-the-output" aria-label="Permalink: 2. What's the output?" href="#2-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="for (var i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 1);
}

for (let i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 1);
}"><pre><span>for</span> <span>(</span><span>var</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>3</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>i</span><span>)</span><span>,</span> <span>1</span><span>)</span><span>;</span>
<span>}</span>

<span>for</span> <span>(</span><span>let</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>3</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>i</span><span>)</span><span>,</span> <span>1</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: <code>0 1 2</code> and <code>0 1 2</code></li>
<li>B: <code>0 1 2</code> and <code>3 3 3</code></li>
<li>C: <code>3 3 3</code> and <code>0 1 2</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c" aria-label="Permalink: Answer: C" href="#answer-c"></a></p>
<p dir="auto">Because of the event queue in JavaScript, the <code>setTimeout</code> callback function is called <em>after</em> the loop has been executed. Since the variable <code>i</code> in the first loop was declared using the <code>var</code> keyword, this value was global. During the loop, we incremented the value of <code>i</code> by <code>1</code> each time, using the unary operator <code>++</code>. By the time the <code>setTimeout</code> callback function was invoked, <code>i</code> was equal to <code>3</code> in the first example.</p>
<p dir="auto">In the second loop, the variable <code>i</code> was declared using the <code>let</code> keyword: variables declared with the <code>let</code> (and <code>const</code>) keyword are block-scoped (a block is anything between <code>{ }</code>). During each iteration, <code>i</code> will have a new value, and each value is scoped inside the loop.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">3. What's the output?</h6><a id="user-content-3-whats-the-output" aria-label="Permalink: 3. What's the output?" href="#3-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const shape = {
  radius: 10,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () => 2 * Math.PI * this.radius,
};

console.log(shape.diameter());
console.log(shape.perimeter());"><pre><span>const</span> <span>shape</span> <span>=</span> <span>{</span>
  <span>radius</span>: <span>10</span><span>,</span>
  <span>diameter</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>radius</span> <span>*</span> <span>2</span><span>;</span>
  <span>}</span><span>,</span>
  <span>perimeter</span>: <span>(</span><span>)</span> <span>=&gt;</span> <span>2</span> <span>*</span> <span>Math</span><span>.</span><span>PI</span> <span>*</span> <span>this</span><span>.</span><span>radius</span><span>,</span>
<span>}</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>shape</span><span>.</span><span>diameter</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>shape</span><span>.</span><span>perimeter</span><span>(</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>20</code> and <code>62.83185307179586</code></li>
<li>B: <code>20</code> and <code>NaN</code></li>
<li>C: <code>20</code> and <code>63</code></li>
<li>D: <code>NaN</code> and <code>63</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b" aria-label="Permalink: Answer: B" href="#answer-b"></a></p>
<p dir="auto">Note that the value of <code>diameter</code> is a regular function, whereas the value of <code>perimeter</code> is an arrow function.</p>
<p dir="auto">With arrow functions, the <code>this</code> keyword refers to its current surrounding scope, unlike regular functions! This means that when we call <code>perimeter</code>, it doesn't refer to the shape object, but to its surrounding scope (window for example).</p>
<p dir="auto">Since there is no value <code>radius</code> in the scope of the arrow function, <code>this.radius</code> returns <code>undefined</code> which, when multiplied by <code>2 * Math.PI</code>, results in <code>NaN</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">4. What's the output?</h6><a id="user-content-4-whats-the-output" aria-label="Permalink: 4. What's the output?" href="#4-whats-the-output"></a></p>

<ul dir="auto">
<li>A: <code>1</code> and <code>false</code></li>
<li>B: <code>false</code> and <code>NaN</code></li>
<li>C: <code>false</code> and <code>false</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a" aria-label="Permalink: Answer: A" href="#answer-a"></a></p>
<p dir="auto">The unary plus tries to convert an operand to a number. <code>true</code> is <code>1</code>, and <code>false</code> is <code>0</code>.</p>
<p dir="auto">The string <code>'Lydia'</code> is a truthy value. What we're actually asking, is "Is this truthy value falsy?". This returns <code>false</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">5. Which one is true?</h6><a id="user-content-5-which-one-is-true" aria-label="Permalink: 5. Which one is true?" href="#5-which-one-is-true"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const bird = {
  size: 'small',
};

const mouse = {
  name: 'Mickey',
  small: true,
};"><pre><span>const</span> <span>bird</span> <span>=</span> <span>{</span>
  <span>size</span>: <span>'small'</span><span>,</span>
<span>}</span><span>;</span>

<span>const</span> <span>mouse</span> <span>=</span> <span>{</span>
  <span>name</span>: <span>'Mickey'</span><span>,</span>
  <span>small</span>: <span>true</span><span>,</span>
<span>}</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>mouse.bird.size</code> is not valid</li>
<li>B: <code>mouse[bird.size]</code> is not valid</li>
<li>C: <code>mouse[bird["size"]]</code> is not valid</li>
<li>D: All of them are valid</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-1" aria-label="Permalink: Answer: A" href="#answer-a-1"></a></p>
<p dir="auto">In JavaScript, all object keys are strings (unless it's a Symbol). Even though we might not <em>type</em> them as strings, they are always converted into strings under the hood.</p>
<p dir="auto">JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket <code>[</code> and keeps going until it finds the closing bracket <code>]</code>. Only then, it will evaluate the statement.</p>
<p dir="auto"><code>mouse[bird.size]</code>: First it evaluates <code>bird.size</code>, which is <code>"small"</code>. <code>mouse["small"]</code> returns <code>true</code></p>
<p dir="auto">However, with dot notation, this doesn't happen. <code>mouse</code> does not have a key called <code>bird</code>, which means that <code>mouse.bird</code> is <code>undefined</code>. Then, we ask for the <code>size</code> using dot notation: <code>mouse.bird.size</code>. Since <code>mouse.bird</code> is <code>undefined</code>, we're actually asking <code>undefined.size</code>. This isn't valid, and will throw an error similar to <code>Cannot read property "size" of undefined</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">6. What's the output?</h6><a id="user-content-6-whats-the-output" aria-label="Permalink: 6. What's the output?" href="#6-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let c = { greeting: 'Hey!' };
let d;

d = c;
c.greeting = 'Hello';
console.log(d.greeting);"><pre><span>let</span> <span>c</span> <span>=</span> <span>{</span> <span>greeting</span>: <span>'Hey!'</span> <span>}</span><span>;</span>
<span>let</span> <span>d</span><span>;</span>

<span>d</span> <span>=</span> <span>c</span><span>;</span>
<span>c</span><span>.</span><span>greeting</span> <span>=</span> <span>'Hello'</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>d</span><span>.</span><span>greeting</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Hello</code></li>
<li>B: <code>Hey!</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
<li>E: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-2" aria-label="Permalink: Answer: A" href="#answer-a-2"></a></p>
<p dir="auto">In JavaScript, all objects interact by <em>reference</em> when setting them equal to each other.</p>
<p dir="auto">First, variable <code>c</code> holds a value to an object. Later, we assign <code>d</code> with the same reference that <code>c</code> has to the object.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/90d7e0a800f423e8e042a55252a744a59cafe8d976d3126da45e0ffa8259078d/68747470733a2f2f692e696d6775722e636f6d2f6b6f356b3066732e706e67"><img src="https://camo.githubusercontent.com/90d7e0a800f423e8e042a55252a744a59cafe8d976d3126da45e0ffa8259078d/68747470733a2f2f692e696d6775722e636f6d2f6b6f356b3066732e706e67" width="200" data-canonical-src="https://i.imgur.com/ko5k0fs.png"></a>
<p dir="auto">When you change one object, you change all of them.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">7. What's the output?</h6><a id="user-content-7-whats-the-output" aria-label="Permalink: 7. What's the output?" href="#7-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let a = 3;
let b = new Number(3);
let c = 3;

console.log(a == b);
console.log(a === b);
console.log(b === c);"><pre><span>let</span> <span>a</span> <span>=</span> <span>3</span><span>;</span>
<span>let</span> <span>b</span> <span>=</span> <span>new</span> <span>Number</span><span>(</span><span>3</span><span>)</span><span>;</span>
<span>let</span> <span>c</span> <span>=</span> <span>3</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>a</span> <span>==</span> <span>b</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>a</span> <span>===</span> <span>b</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>b</span> <span>===</span> <span>c</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>true</code> <code>false</code> <code>true</code></li>
<li>B: <code>false</code> <code>false</code> <code>true</code></li>
<li>C: <code>true</code> <code>false</code> <code>false</code></li>
<li>D: <code>false</code> <code>true</code> <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-1" aria-label="Permalink: Answer: C" href="#answer-c-1"></a></p>
<p dir="auto"><code>new Number()</code> is a built-in function constructor. Although it looks like a number, it's not really a number: it has a bunch of extra features and is an object.</p>
<p dir="auto">When we use the <code>==</code> operator (Equality operator), it only checks whether it has the same <em>value</em>. They both have the value of <code>3</code>, so it returns <code>true</code>.</p>
<p dir="auto">However, when we use the <code>===</code> operator (Strict equality operator), both value <em>and</em> type should be the same. It's not: <code>new Number()</code> is not a number, it's an <strong>object</strong>. Both return <code>false.</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">8. What's the output?</h6><a id="user-content-8-whats-the-output" aria-label="Permalink: 8. What's the output?" href="#8-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="class Chameleon {
  static colorChange(newColor) {
    this.newColor = newColor;
    return this.newColor;
  }

  constructor({ newColor = 'green' } = {}) {
    this.newColor = newColor;
  }
}

const freddie = new Chameleon({ newColor: 'purple' });
console.log(freddie.colorChange('orange'));"><pre><span>class</span> <span>Chameleon</span> <span>{</span>
  <span>static</span> <span>colorChange</span><span>(</span><span>newColor</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>newColor</span> <span>=</span> <span>newColor</span><span>;</span>
    <span>return</span> <span>this</span><span>.</span><span>newColor</span><span>;</span>
  <span>}</span>

  <span>constructor</span><span>(</span><span>{</span> newColor <span>=</span> <span>'green'</span> <span>}</span> <span>=</span> <span>{</span><span>}</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>newColor</span> <span>=</span> <span>newColor</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>const</span> <span>freddie</span> <span>=</span> <span>new</span> <span>Chameleon</span><span>(</span><span>{</span> <span>newColor</span>: <span>'purple'</span> <span>}</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>freddie</span><span>.</span><span>colorChange</span><span>(</span><span>'orange'</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>orange</code></li>
<li>B: <code>purple</code></li>
<li>C: <code>green</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-1" aria-label="Permalink: Answer: D" href="#answer-d-1"></a></p>
<p dir="auto">The <code>colorChange</code> function is static. Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children or called upon class instances. Since <code>freddie</code> is an instance of class Chameleon, the function cannot be called upon it. A <code>TypeError</code> is thrown.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">9. What's the output?</h6><a id="user-content-9-whats-the-output" aria-label="Permalink: 9. What's the output?" href="#9-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let greeting;
greetign = {}; // Typo!
console.log(greetign);"><pre><span>let</span> <span>greeting</span><span>;</span>
<span>greetign</span> <span>=</span> <span>{</span><span>}</span><span>;</span> <span>// Typo!</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>greetign</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{}</code></li>
<li>B: <code>ReferenceError: greetign is not defined</code></li>
<li>C: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-3" aria-label="Permalink: Answer: A" href="#answer-a-3"></a></p>
<p dir="auto">It logs the object, because we just created an empty object on the global object! When we mistyped <code>greeting</code> as <code>greetign</code>, the JS interpreter actually saw this as:</p>
<ol dir="auto">
<li><code>global.greetign = {}</code> in Node.js</li>
<li><code>window.greetign = {}</code>, <code>frames.greetign = {}</code> and <code>self.greetign</code> in browsers.</li>
<li><code>self.greetign</code> in web workers.</li>
<li><code>globalThis.greetign</code> in all environments.</li>
</ol>
<p dir="auto">In order to avoid this, we can use <code>"use strict"</code>. This makes sure that you have declared a variable before setting it equal to anything.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">10. What happens when we do this?</h6><a id="user-content-10-what-happens-when-we-do-this" aria-label="Permalink: 10. What happens when we do this?" href="#10-what-happens-when-we-do-this"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function bark() {
  console.log('Woof!');
}

bark.animal = 'dog';"><pre><span>function</span> <span>bark</span><span>(</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>'Woof!'</span><span>)</span><span>;</span>
<span>}</span>

<span>bark</span><span>.</span><span>animal</span> <span>=</span> <span>'dog'</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: Nothing, this is totally fine!</li>
<li>B: <code>SyntaxError</code>. You cannot add properties to a function this way.</li>
<li>C: <code>"Woof"</code> gets logged.</li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-4" aria-label="Permalink: Answer: A" href="#answer-a-4"></a></p>
<p dir="auto">This is possible in JavaScript, because functions are objects! (Everything besides primitive types are objects)</p>
<p dir="auto">A function is a special type of object. The code you write yourself isn't the actual function. The function is an object with properties. This property is invocable.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">11. What's the output?</h6><a id="user-content-11-whats-the-output" aria-label="Permalink: 11. What's the output?" href="#11-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

const member = new Person('Lydia', 'Hallie');
Person.getFullName = function() {
  return `${this.firstName} ${this.lastName}`;
};

console.log(member.getFullName());"><pre><span>function</span> <span>Person</span><span>(</span><span>firstName</span><span>,</span> <span>lastName</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>firstName</span> <span>=</span> <span>firstName</span><span>;</span>
  <span>this</span><span>.</span><span>lastName</span> <span>=</span> <span>lastName</span><span>;</span>
<span>}</span>

<span>const</span> <span>member</span> <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>'Lydia'</span><span>,</span> <span>'Hallie'</span><span>)</span><span>;</span>
<span>Person</span><span>.</span><span>getFullName</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>`<span><span>${</span><span>this</span><span>.</span><span>firstName</span><span>}</span></span> <span><span>${</span><span>this</span><span>.</span><span>lastName</span><span>}</span></span>`</span><span>;</span>
<span>}</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>member</span><span>.</span><span>getFullName</span><span>(</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>TypeError</code></li>
<li>B: <code>SyntaxError</code></li>
<li>C: <code>Lydia Hallie</code></li>
<li>D: <code>undefined</code> <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-5" aria-label="Permalink: Answer: A" href="#answer-a-5"></a></p>
<p dir="auto">In JavaScript, functions are objects, and therefore, the method <code>getFullName</code> gets added to the constructor function object itself. For that reason, we can call <code>Person.getFullName()</code>, but <code>member.getFullName</code> throws a <code>TypeError</code>.</p>
<p dir="auto">If you want a method to be available to all object instances, you have to add it to the prototype property:</p>
<div dir="auto" data-snippet-clipboard-copy-content="Person.prototype.getFullName = function() {
  return `${this.firstName} ${this.lastName}`;
};"><pre><span>Person</span><span>.</span><span>prototype</span><span>.</span><span>getFullName</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>`<span><span>${</span><span>this</span><span>.</span><span>firstName</span><span>}</span></span> <span><span>${</span><span>this</span><span>.</span><span>lastName</span><span>}</span></span>`</span><span>;</span>
<span>}</span><span>;</span></pre></div>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">12. What's the output?</h6><a id="user-content-12-whats-the-output" aria-label="Permalink: 12. What's the output?" href="#12-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

const lydia = new Person('Lydia', 'Hallie');
const sarah = Person('Sarah', 'Smith');

console.log(lydia);
console.log(sarah);"><pre><span>function</span> <span>Person</span><span>(</span><span>firstName</span><span>,</span> <span>lastName</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>firstName</span> <span>=</span> <span>firstName</span><span>;</span>
  <span>this</span><span>.</span><span>lastName</span> <span>=</span> <span>lastName</span><span>;</span>
<span>}</span>

<span>const</span> <span>lydia</span> <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>'Lydia'</span><span>,</span> <span>'Hallie'</span><span>)</span><span>;</span>
<span>const</span> <span>sarah</span> <span>=</span> <span>Person</span><span>(</span><span>'Sarah'</span><span>,</span> <span>'Smith'</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>lydia</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>sarah</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Person {firstName: "Lydia", lastName: "Hallie"}</code> and <code>undefined</code></li>
<li>B: <code>Person {firstName: "Lydia", lastName: "Hallie"}</code> and <code>Person {firstName: "Sarah", lastName: "Smith"}</code></li>
<li>C: <code>Person {firstName: "Lydia", lastName: "Hallie"}</code> and <code>{}</code></li>
<li>D: <code>Person {firstName: "Lydia", lastName: "Hallie"}</code> and <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-6" aria-label="Permalink: Answer: A" href="#answer-a-6"></a></p>
<p dir="auto">For <code>sarah</code>, we didn't use the <code>new</code> keyword. When using <code>new</code>, <code>this</code> refers to the new empty object we create. However, if you don't add <code>new</code>, <code>this</code> refers to the <strong>global object</strong>!</p>
<p dir="auto">We said that <code>this.firstName</code> equals <code>"Sarah"</code> and <code>this.lastName</code> equals <code>"Smith"</code>. What we actually did, is defining <code>global.firstName = 'Sarah'</code> and <code>global.lastName = 'Smith'</code>. <code>sarah</code> itself is left <code>undefined</code>, since we don't return a value from the <code>Person</code> function.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">13. What are the three phases of event propagation?</h6><a id="user-content-13-what-are-the-three-phases-of-event-propagation" aria-label="Permalink: 13. What are the three phases of event propagation?" href="#13-what-are-the-three-phases-of-event-propagation"></a></p>
<ul dir="auto">
<li>A: Target &gt; Capturing &gt; Bubbling</li>
<li>B: Bubbling &gt; Target &gt; Capturing</li>
<li>C: Target &gt; Bubbling &gt; Capturing</li>
<li>D: Capturing &gt; Target &gt; Bubbling</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-2" aria-label="Permalink: Answer: D" href="#answer-d-2"></a></p>
<p dir="auto">During the <strong>capturing</strong> phase, the event goes through the ancestor elements down to the target element. It then reaches the <strong>target</strong> element, and <strong>bubbling</strong> begins.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/b302f8396d6e312bb45dce44b610d3bb03210420d43b32480893c9786a4427e5/68747470733a2f2f692e696d6775722e636f6d2f4e31386f5267642e706e67"><img src="https://camo.githubusercontent.com/b302f8396d6e312bb45dce44b610d3bb03210420d43b32480893c9786a4427e5/68747470733a2f2f692e696d6775722e636f6d2f4e31386f5267642e706e67" width="200" data-canonical-src="https://i.imgur.com/N18oRgd.png"></a>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">14. All object have prototypes.</h6><a id="user-content-14-all-object-have-prototypes" aria-label="Permalink: 14. All object have prototypes." href="#14-all-object-have-prototypes"></a></p>
<ul dir="auto">
<li>A: true</li>
<li>B: false</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-1" aria-label="Permalink: Answer: B" href="#answer-b-1"></a></p>
<p dir="auto">All objects have prototypes, except for the <strong>base object</strong>. The base object is the object created by the user, or an object that is created using the <code>new</code> keyword. The base object has access to some methods and properties, such as <code>.toString</code>. This is the reason why you can use built-in JavaScript methods! All of such methods are available on the prototype. Although JavaScript can't find it directly on your object, it goes down the prototype chain and finds it there, which makes it accessible for you.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">15. What's the output?</h6><a id="user-content-15-whats-the-output" aria-label="Permalink: 15. What's the output?" href="#15-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function sum(a, b) {
  return a + b;
}

sum(1, '2');"><pre><span>function</span> <span>sum</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>{</span>
  <span>return</span> <span>a</span> <span>+</span> <span>b</span><span>;</span>
<span>}</span>

<span>sum</span><span>(</span><span>1</span><span>,</span> <span>'2'</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>NaN</code></li>
<li>B: <code>TypeError</code></li>
<li>C: <code>"12"</code></li>
<li>D: <code>3</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-2" aria-label="Permalink: Answer: C" href="#answer-c-2"></a></p>
<p dir="auto">JavaScript is a <strong>dynamically typed language</strong>: we don't specify what types certain variables are. Values can automatically be converted into another type without you knowing, which is called <em>implicit type coercion</em>. <strong>Coercion</strong> is converting from one type into another.</p>
<p dir="auto">In this example, JavaScript converts the number <code>1</code> into a string, in order for the function to make sense and return a value. During the addition of a numeric type (<code>1</code>) and a string type (<code>'2'</code>), the number is treated as a string. We can concatenate strings like <code>"Hello" + "World"</code>, so what's happening here is <code>"1" + "2"</code> which returns <code>"12"</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">16. What's the output?</h6><a id="user-content-16-whats-the-output" aria-label="Permalink: 16. What's the output?" href="#16-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let number = 0;
console.log(number++);
console.log(++number);
console.log(number);"><pre><span>let</span> <span>number</span> <span>=</span> <span>0</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>number</span><span>++</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>++</span><span>number</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>number</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>1</code> <code>1</code> <code>2</code></li>
<li>B: <code>1</code> <code>2</code> <code>2</code></li>
<li>C: <code>0</code> <code>2</code> <code>2</code></li>
<li>D: <code>0</code> <code>1</code> <code>2</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-3" aria-label="Permalink: Answer: C" href="#answer-c-3"></a></p>
<p dir="auto">The <strong>postfix</strong> unary operator <code>++</code>:</p>
<ol dir="auto">
<li>Returns the value (this returns <code>0</code>)</li>
<li>Increments the value (number is now <code>1</code>)</li>
</ol>
<p dir="auto">The <strong>prefix</strong> unary operator <code>++</code>:</p>
<ol dir="auto">
<li>Increments the value (number is now <code>2</code>)</li>
<li>Returns the value (this returns <code>2</code>)</li>
</ol>
<p dir="auto">This returns <code>0 2 2</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">17. What's the output?</h6><a id="user-content-17-whats-the-output" aria-label="Permalink: 17. What's the output?" href="#17-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function getPersonInfo(one, two, three) {
  console.log(one);
  console.log(two);
  console.log(three);
}

const person = 'Lydia';
const age = 21;

getPersonInfo`${person} is ${age} years old`;"><pre><span>function</span> <span>getPersonInfo</span><span>(</span><span>one</span><span>,</span> <span>two</span><span>,</span> <span>three</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>one</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>two</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>three</span><span>)</span><span>;</span>
<span>}</span>

<span>const</span> <span>person</span> <span>=</span> <span>'Lydia'</span><span>;</span>
<span>const</span> <span>age</span> <span>=</span> <span>21</span><span>;</span>

<span>getPersonInfo</span><span>`<span><span>${</span><span>person</span><span>}</span></span> is <span><span>${</span><span>age</span><span>}</span></span> years old`</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"Lydia"</code> <code>21</code> <code>["", " is ", " years old"]</code></li>
<li>B: <code>["", " is ", " years old"]</code> <code>"Lydia"</code> <code>21</code></li>
<li>C: <code>"Lydia"</code> <code>["", " is ", " years old"]</code> <code>21</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-2" aria-label="Permalink: Answer: B" href="#answer-b-2"></a></p>
<p dir="auto">If you use tagged template literals, the value of the first argument is always an array of the string values. The remaining arguments get the values of the passed expressions!</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">18. What's the output?</h6><a id="user-content-18-whats-the-output" aria-label="Permalink: 18. What's the output?" href="#18-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function checkAge(data) {
  if (data === { age: 18 }) {
    console.log('You are an adult!');
  } else if (data == { age: 18 }) {
    console.log('You are still an adult.');
  } else {
    console.log(`Hmm.. You don't have an age I guess`);
  }
}

checkAge({ age: 18 });"><pre><span>function</span> <span>checkAge</span><span>(</span><span>data</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>data</span> <span>===</span> <span>{</span> <span>age</span>: <span>18</span> <span>}</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'You are an adult!'</span><span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>data</span> <span>==</span> <span>{</span> <span>age</span>: <span>18</span> <span>}</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'You are still an adult.'</span><span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>`Hmm.. You don't have an age I guess`</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>checkAge</span><span>(</span><span>{</span> <span>age</span>: <span>18</span> <span>}</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>You are an adult!</code></li>
<li>B: <code>You are still an adult.</code></li>
<li>C: <code>Hmm.. You don't have an age I guess</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-4" aria-label="Permalink: Answer: C" href="#answer-c-4"></a></p>
<p dir="auto">When testing equality, primitives are compared by their <em>value</em>, while objects are compared by their <em>reference</em>. JavaScript checks if the objects have a reference to the same location in memory.</p>
<p dir="auto">The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.</p>
<p dir="auto">This is why both <code>{ age: 18 } === { age: 18 }</code> and <code>{ age: 18 } == { age: 18 }</code> return <code>false</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">19. What's the output?</h6><a id="user-content-19-whats-the-output" aria-label="Permalink: 19. What's the output?" href="#19-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function getAge(...args) {
  console.log(typeof args);
}

getAge(21);"><pre><span>function</span> <span>getAge</span><span>(</span>...<span>args</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>typeof</span> <span>args</span><span>)</span><span>;</span>
<span>}</span>

<span>getAge</span><span>(</span><span>21</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"number"</code></li>
<li>B: <code>"array"</code></li>
<li>C: <code>"object"</code></li>
<li>D: <code>"NaN"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-5" aria-label="Permalink: Answer: C" href="#answer-c-5"></a></p>
<p dir="auto">The rest parameter (<code>...args</code>) lets us "collect" all remaining arguments into an array. An array is an object, so <code>typeof args</code> returns <code>"object"</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">20. What's the output?</h6><a id="user-content-20-whats-the-output" aria-label="Permalink: 20. What's the output?" href="#20-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function getAge() {
  'use strict';
  age = 21;
  console.log(age);
}

getAge();"><pre><span>function</span> <span>getAge</span><span>(</span><span>)</span> <span>{</span>
  <span>'use strict'</span><span>;</span>
  <span>age</span> <span>=</span> <span>21</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>age</span><span>)</span><span>;</span>
<span>}</span>

<span>getAge</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>21</code></li>
<li>B: <code>undefined</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-6" aria-label="Permalink: Answer: C" href="#answer-c-6"></a></p>
<p dir="auto">With <code>"use strict"</code>, you can make sure that you don't accidentally declare global variables. We never declared the variable <code>age</code>, and since we use <code>"use strict"</code>, it will throw a reference error. If we didn't use <code>"use strict"</code>, it would have worked, since the property <code>age</code> would have gotten added to the global object.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">21. What's the value of <code>sum</code>?</h6><a id="user-content-21-whats-the-value-of-sum" aria-label="Permalink: 21. What's the value of sum?" href="#21-whats-the-value-of-sum"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const sum = eval('10*10+5');"><pre><span>const</span> <span>sum</span> <span>=</span> <span>eval</span><span>(</span><span>'10*10+5'</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>105</code></li>
<li>B: <code>"105"</code></li>
<li>C: <code>TypeError</code></li>
<li>D: <code>"10*10+5"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-7" aria-label="Permalink: Answer: A" href="#answer-a-7"></a></p>
<p dir="auto"><code>eval</code> evaluates code that's passed as a string. If it's an expression, like in this case, it evaluates the expression. The expression is <code>10 * 10 + 5</code>. This returns the number <code>105</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">22. How long is cool_secret accessible?</h6><a id="user-content-22-how-long-is-cool_secret-accessible" aria-label="Permalink: 22. How long is cool_secret accessible?" href="#22-how-long-is-cool_secret-accessible"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="sessionStorage.setItem('cool_secret', 123);"><pre><span>sessionStorage</span><span>.</span><span>setItem</span><span>(</span><span>'cool_secret'</span><span>,</span> <span>123</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: Forever, the data doesn't get lost.</li>
<li>B: When the user closes the tab.</li>
<li>C: When the user closes the entire browser, not only the tab.</li>
<li>D: When the user shuts off their computer.</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-3" aria-label="Permalink: Answer: B" href="#answer-b-3"></a></p>
<p dir="auto">The data stored in <code>sessionStorage</code> is removed after closing the <em>tab</em>.</p>
<p dir="auto">If you used <code>localStorage</code>, the data would've been there forever, unless for example <code>localStorage.clear()</code> is invoked.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">23. What's the output?</h6><a id="user-content-23-whats-the-output" aria-label="Permalink: 23. What's the output?" href="#23-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="var num = 8;
var num = 10;

console.log(num);"><pre><span>var</span> <span>num</span> <span>=</span> <span>8</span><span>;</span>
<span>var</span> <span>num</span> <span>=</span> <span>10</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>num</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>8</code></li>
<li>B: <code>10</code></li>
<li>C: <code>SyntaxError</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-4" aria-label="Permalink: Answer: B" href="#answer-b-4"></a></p>
<p dir="auto">With the <code>var</code> keyword, you can declare multiple variables with the same name. The variable will then hold the latest value.</p>
<p dir="auto">You cannot do this with <code>let</code> or <code>const</code> since they're block-scoped and therefore can't be redeclared.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">24. What's the output?</h6><a id="user-content-24-whats-the-output" aria-label="Permalink: 24. What's the output?" href="#24-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const obj = { 1: 'a', 2: 'b', 3: 'c' };
const set = new Set([1, 2, 3, 4, 5]);

obj.hasOwnProperty('1');
obj.hasOwnProperty(1);
set.has('1');
set.has(1);"><pre><span>const</span> <span>obj</span> <span>=</span> <span>{</span> <span>1</span>: <span>'a'</span><span>,</span> <span>2</span>: <span>'b'</span><span>,</span> <span>3</span>: <span>'c'</span> <span>}</span><span>;</span>
<span>const</span> <span>set</span> <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>)</span><span>;</span>

<span>obj</span><span>.</span><span>hasOwnProperty</span><span>(</span><span>'1'</span><span>)</span><span>;</span>
<span>obj</span><span>.</span><span>hasOwnProperty</span><span>(</span><span>1</span><span>)</span><span>;</span>
<span>set</span><span>.</span><span>has</span><span>(</span><span>'1'</span><span>)</span><span>;</span>
<span>set</span><span>.</span><span>has</span><span>(</span><span>1</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li>
<li>B: <code>false</code> <code>true</code> <code>true</code> <code>true</code></li>
<li>C: <code>true</code> <code>true</code> <code>false</code> <code>true</code></li>
<li>D: <code>true</code> <code>true</code> <code>true</code> <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-7" aria-label="Permalink: Answer: C" href="#answer-c-7"></a></p>
<p dir="auto">All object keys (excluding Symbols) are strings under the hood, even if you don't type it yourself as a string. This is why <code>obj.hasOwnProperty('1')</code> also returns true.</p>
<p dir="auto">It doesn't work that way for a set. There is no <code>'1'</code> in our set: <code>set.has('1')</code> returns <code>false</code>. It has the numeric type <code>1</code>, <code>set.has(1)</code> returns <code>true</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">25. What's the output?</h6><a id="user-content-25-whats-the-output" aria-label="Permalink: 25. What's the output?" href="#25-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const obj = { a: 'one', b: 'two', a: 'three' };
console.log(obj);"><pre><span>const</span> <span>obj</span> <span>=</span> <span>{</span> <span>a</span>: <span>'one'</span><span>,</span> <span>b</span>: <span>'two'</span><span>,</span> <span>a</span>: <span>'three'</span> <span>}</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>obj</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{ a: "one", b: "two" }</code></li>
<li>B: <code>{ b: "two", a: "three" }</code></li>
<li>C: <code>{ a: "three", b: "two" }</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-8" aria-label="Permalink: Answer: C" href="#answer-c-8"></a></p>
<p dir="auto">If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">26. The JavaScript global execution context creates two things for you: the global object, and the "this" keyword.</h6><a id="user-content-26-the-javascript-global-execution-context-creates-two-things-for-you-the-global-object-and-the-this-keyword" aria-label="Permalink: 26. The JavaScript global execution context creates two things for you: the global object, and the &quot;this&quot; keyword." href="#26-the-javascript-global-execution-context-creates-two-things-for-you-the-global-object-and-the-this-keyword"></a></p>
<ul dir="auto">
<li>A: true</li>
<li>B: false</li>
<li>C: it depends</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-8" aria-label="Permalink: Answer: A" href="#answer-a-8"></a></p>
<p dir="auto">The base execution context is the global execution context: it's what's accessible everywhere in your code.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">27. What's the output?</h6><a id="user-content-27-whats-the-output" aria-label="Permalink: 27. What's the output?" href="#27-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="for (let i = 1; i < 5; i++) {
  if (i === 3) continue;
  console.log(i);
}"><pre><span>for</span> <span>(</span><span>let</span> <span>i</span> <span>=</span> <span>1</span><span>;</span> <span>i</span> <span>&lt;</span> <span>5</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>i</span> <span>===</span> <span>3</span><span>)</span> <span>continue</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>i</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: <code>1</code> <code>2</code></li>
<li>B: <code>1</code> <code>2</code> <code>3</code></li>
<li>C: <code>1</code> <code>2</code> <code>4</code></li>
<li>D: <code>1</code> <code>3</code> <code>4</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-9" aria-label="Permalink: Answer: C" href="#answer-c-9"></a></p>
<p dir="auto">The <code>continue</code> statement skips an iteration if a certain condition returns <code>true</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">28. What's the output?</h6><a id="user-content-28-whats-the-output" aria-label="Permalink: 28. What's the output?" href="#28-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="String.prototype.giveLydiaPizza = () => {
  return 'Just give Lydia pizza already!';
};

const name = 'Lydia';

console.log(name.giveLydiaPizza())"><pre><span>String</span><span>.</span><span>prototype</span><span>.</span><span>giveLydiaPizza</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>return</span> <span>'Just give Lydia pizza already!'</span><span>;</span>
<span>}</span><span>;</span>

<span>const</span> <span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>.</span><span>giveLydiaPizza</span><span>(</span><span>)</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>"Just give Lydia pizza already!"</code></li>
<li>B: <code>TypeError: not a function</code></li>
<li>C: <code>SyntaxError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-9" aria-label="Permalink: Answer: A" href="#answer-a-9"></a></p>
<p dir="auto"><code>String</code> is a built-in constructor, that we can add properties to. I just added a method to its prototype. Primitive strings are automatically converted into a string object, generated by the string prototype function. So, all strings (string objects) have access to that method!</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">29. What's the output?</h6><a id="user-content-29-whats-the-output" aria-label="Permalink: 29. What's the output?" href="#29-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const a = {};
const b = { key: 'b' };
const c = { key: 'c' };

a[b] = 123;
a[c] = 456;

console.log(a[b]);"><pre><span>const</span> <span>a</span> <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>const</span> <span>b</span> <span>=</span> <span>{</span> <span>key</span>: <span>'b'</span> <span>}</span><span>;</span>
<span>const</span> <span>c</span> <span>=</span> <span>{</span> <span>key</span>: <span>'c'</span> <span>}</span><span>;</span>

<span>a</span><span>[</span><span>b</span><span>]</span> <span>=</span> <span>123</span><span>;</span>
<span>a</span><span>[</span><span>c</span><span>]</span> <span>=</span> <span>456</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>a</span><span>[</span><span>b</span><span>]</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>123</code></li>
<li>B: <code>456</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-5" aria-label="Permalink: Answer: B" href="#answer-b-5"></a></p>
<p dir="auto">Object keys are automatically converted into strings. We are trying to set an object as a key to object <code>a</code>, with the value of <code>123</code>.</p>
<p dir="auto">However, when we stringify an object, it becomes <code>"[object Object]"</code>. So what we are saying here, is that <code>a["[object Object]"] = 123</code>. Then, we can try to do the same again. <code>c</code> is another object that we are implicitly stringifying. So then, <code>a["[object Object]"] = 456</code>.</p>
<p dir="auto">Then, we log <code>a[b]</code>, which is actually <code>a["[object Object]"]</code>. We just set that to <code>456</code>, so it returns <code>456</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">30. What's the output?</h6><a id="user-content-30-whats-the-output" aria-label="Permalink: 30. What's the output?" href="#30-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const foo = () => console.log('First');
const bar = () => setTimeout(() => console.log('Second'));
const baz = () => console.log('Third');

bar();
foo();
baz();"><pre><span>const</span> <span>foo</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'First'</span><span>)</span><span>;</span>
<span>const</span> <span>bar</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'Second'</span><span>)</span><span>)</span><span>;</span>
<span>const</span> <span>baz</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'Third'</span><span>)</span><span>;</span>

<span>bar</span><span>(</span><span>)</span><span>;</span>
<span>foo</span><span>(</span><span>)</span><span>;</span>
<span>baz</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>First</code> <code>Second</code> <code>Third</code></li>
<li>B: <code>First</code> <code>Third</code> <code>Second</code></li>
<li>C: <code>Second</code> <code>First</code> <code>Third</code></li>
<li>D: <code>Second</code> <code>Third</code> <code>First</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-6" aria-label="Permalink: Answer: B" href="#answer-b-6"></a></p>
<p dir="auto">We have a <code>setTimeout</code> function and invoked it first. Yet, it was logged last.</p>
<p dir="auto">This is because in browsers, we don't just have the runtime engine, we also have something called a <code>WebAPI</code>. The <code>WebAPI</code> gives us the <code>setTimeout</code> function to start with, and for example the DOM.</p>
<p dir="auto">After the <em>callback</em> is pushed to the WebAPI, the <code>setTimeout</code> function itself (but not the callback!) is popped off the stack.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3fb6829734d4f143e7b0e65777fb0fa797477b1099d5bf80dfff487dbf8d58ea/68747470733a2f2f692e696d6775722e636f6d2f58357773484f672e706e67"><img src="https://camo.githubusercontent.com/3fb6829734d4f143e7b0e65777fb0fa797477b1099d5bf80dfff487dbf8d58ea/68747470733a2f2f692e696d6775722e636f6d2f58357773484f672e706e67" width="200" data-canonical-src="https://i.imgur.com/X5wsHOg.png"></a>
<p dir="auto">Now, <code>foo</code> gets invoked, and <code>"First"</code> is being logged.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/67039fb1a1de6555795f4a4d935902970273a9ecedbd4db0d704c890d4cc104d/68747470733a2f2f692e696d6775722e636f6d2f507663306447712e706e67"><img src="https://camo.githubusercontent.com/67039fb1a1de6555795f4a4d935902970273a9ecedbd4db0d704c890d4cc104d/68747470733a2f2f692e696d6775722e636f6d2f507663306447712e706e67" width="200" data-canonical-src="https://i.imgur.com/Pvc0dGq.png"></a>
<p dir="auto"><code>foo</code> is popped off the stack, and <code>baz</code> gets invoked. <code>"Third"</code> gets logged.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/3cc29283d12de4212d526a805190866349c3db20bf4b51e1fae5f08e318bad16/68747470733a2f2f692e696d6775722e636f6d2f576841326243502e706e67"><img src="https://camo.githubusercontent.com/3cc29283d12de4212d526a805190866349c3db20bf4b51e1fae5f08e318bad16/68747470733a2f2f692e696d6775722e636f6d2f576841326243502e706e67" width="200" data-canonical-src="https://i.imgur.com/WhA2bCP.png"></a>
<p dir="auto">The WebAPI can't just add stuff to the stack whenever it's ready. Instead, it pushes the callback function to something called the <em>queue</em>.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/ac7d6708d80a2f40ef6887fd10e09b9921bb76b74024debb3b0a9fdc41f42d52/68747470733a2f2f692e696d6775722e636f6d2f4e536e445a6d552e706e67"><img src="https://camo.githubusercontent.com/ac7d6708d80a2f40ef6887fd10e09b9921bb76b74024debb3b0a9fdc41f42d52/68747470733a2f2f692e696d6775722e636f6d2f4e536e445a6d552e706e67" width="200" data-canonical-src="https://i.imgur.com/NSnDZmU.png"></a>
<p dir="auto">This is where an event loop starts to work. An <strong>event loop</strong> looks at the stack and task queue. If the stack is empty, it takes the first thing on the queue and pushes it onto the stack.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/22adea15940091bf25f18f9003d56b64b45ef2ac6038166ba1bae08c32eb4570/68747470733a2f2f692e696d6775722e636f6d2f757969536341492e706e67"><img src="https://camo.githubusercontent.com/22adea15940091bf25f18f9003d56b64b45ef2ac6038166ba1bae08c32eb4570/68747470733a2f2f692e696d6775722e636f6d2f757969536341492e706e67" width="200" data-canonical-src="https://i.imgur.com/uyiScAI.png"></a>
<p dir="auto"><code>bar</code> gets invoked, <code>"Second"</code> gets logged, and it's popped off the stack.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">31. What is the event.target when clicking the button?</h6><a id="user-content-31-what-is-the-eventtarget-when-clicking-the-button" aria-label="Permalink: 31. What is the event.target when clicking the button?" href="#31-what-is-the-eventtarget-when-clicking-the-button"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<div onclick=&quot;console.log('first div')&quot;>
  <div onclick=&quot;console.log('second div')&quot;>
    <button onclick=&quot;console.log('button')&quot;>
      Click!
    </button>
  </div>
</div>"><pre><span>&lt;</span><span>div</span> <span>onclick</span>="<span>console.log('first div')</span>"<span>&gt;</span>
  <span>&lt;</span><span>div</span> <span>onclick</span>="<span>console.log('second div')</span>"<span>&gt;</span>
    <span>&lt;</span><span>button</span> <span>onclick</span>="<span>console.log('button')</span>"<span>&gt;</span>
      Click!
    <span>&lt;/</span><span>button</span><span>&gt;</span>
  <span>&lt;/</span><span>div</span><span>&gt;</span>
<span>&lt;/</span><span>div</span><span>&gt;</span></pre></div>
<ul dir="auto">
<li>A: Outer <code>div</code></li>
<li>B: Inner <code>div</code></li>
<li>C: <code>button</code></li>
<li>D: An array of all nested elements.</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-10" aria-label="Permalink: Answer: C" href="#answer-c-10"></a></p>
<p dir="auto">The deepest nested element that caused the event is the target of the event. You can stop bubbling by <code>event.stopPropagation</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">32. When you click the paragraph, what's the logged output?</h6><a id="user-content-32-when-you-click-the-paragraph-whats-the-logged-output" aria-label="Permalink: 32. When you click the paragraph, what's the logged output?" href="#32-when-you-click-the-paragraph-whats-the-logged-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="<div onclick=&quot;console.log('div')&quot;>
  <p onclick=&quot;console.log('p')&quot;>
    Click here!
  </p>
</div>"><pre><span>&lt;</span><span>div</span> <span>onclick</span>="<span>console.log('div')</span>"<span>&gt;</span>
  <span>&lt;</span><span>p</span> <span>onclick</span>="<span>console.log('p')</span>"<span>&gt;</span>
    Click here!
  <span>&lt;/</span><span>p</span><span>&gt;</span>
<span>&lt;/</span><span>div</span><span>&gt;</span></pre></div>
<ul dir="auto">
<li>A: <code>p</code> <code>div</code></li>
<li>B: <code>div</code> <code>p</code></li>
<li>C: <code>p</code></li>
<li>D: <code>div</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-10" aria-label="Permalink: Answer: A" href="#answer-a-10"></a></p>
<p dir="auto">If we click <code>p</code>, we see two logs: <code>p</code> and <code>div</code>. During event propagation, there are 3 phases: capturing, targeting, and bubbling. By default, event handlers are executed in the bubbling phase (unless you set <code>useCapture</code> to <code>true</code>). It goes from the deepest nested element outwards.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">33. What's the output?</h6><a id="user-content-33-whats-the-output" aria-label="Permalink: 33. What's the output?" href="#33-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = { name: 'Lydia' };

function sayHi(age) {
  return `${this.name} is ${age}`;
}

console.log(sayHi.call(person, 21));
console.log(sayHi.bind(person, 21));"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span> <span>name</span>: <span>'Lydia'</span> <span>}</span><span>;</span>

<span>function</span> <span>sayHi</span><span>(</span><span>age</span><span>)</span> <span>{</span>
  <span>return</span> <span>`<span><span>${</span><span>this</span><span>.</span><span>name</span><span>}</span></span> is <span><span>${</span><span>age</span><span>}</span></span>`</span><span>;</span>
<span>}</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>sayHi</span><span>.</span><span>call</span><span>(</span><span>person</span><span>,</span> <span>21</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>sayHi</span><span>.</span><span>bind</span><span>(</span><span>person</span><span>,</span> <span>21</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>undefined is 21</code> <code>Lydia is 21</code></li>
<li>B: <code>function</code> <code>function</code></li>
<li>C: <code>Lydia is 21</code> <code>Lydia is 21</code></li>
<li>D: <code>Lydia is 21</code> <code>function</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-3" aria-label="Permalink: Answer: D" href="#answer-d-3"></a></p>
<p dir="auto">With both, we can pass the object to which we want the <code>this</code> keyword to refer to. However, <code>.call</code> is also <em>executed immediately</em>!</p>
<p dir="auto"><code>.bind.</code> returns a <em>copy</em> of the function, but with a bound context! It is not executed immediately.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">34. What's the output?</h6><a id="user-content-34-whats-the-output" aria-label="Permalink: 34. What's the output?" href="#34-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function sayHi() {
  return (() => 0)();
}

console.log(typeof sayHi());"><pre><span>function</span> <span>sayHi</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>0</span><span>)</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>typeof</span> <span>sayHi</span><span>(</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"object"</code></li>
<li>B: <code>"number"</code></li>
<li>C: <code>"function"</code></li>
<li>D: <code>"undefined"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-7" aria-label="Permalink: Answer: B" href="#answer-b-7"></a></p>
<p dir="auto">The <code>sayHi</code> function returns the returned value of the immediately invoked function expression (IIFE). This function returned <code>0</code>, which is type <code>"number"</code>.</p>
<p dir="auto">FYI: <code>typeof</code> can return the following list of values: <code>undefined</code>, <code>boolean</code>, <code>number</code>, <code>bigint</code>, <code>string</code>, <code>symbol</code>, <code>function</code> and <code>object</code>. Note that <code>typeof null</code> returns <code>"object"</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">35. Which of these values are falsy?</h6><a id="user-content-35-which-of-these-values-are-falsy" aria-label="Permalink: 35. Which of these values are falsy?" href="#35-which-of-these-values-are-falsy"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="0;
new Number(0);
('');
(' ');
new Boolean(false);
undefined;"><pre><span>0</span><span>;</span>
<span>new</span> <span>Number</span><span>(</span><span>0</span><span>)</span><span>;</span>
<span>(</span><span>''</span><span>)</span><span>;</span>
<span>(</span><span>' '</span><span>)</span><span>;</span>
<span>new</span> <span>Boolean</span><span>(</span><span>false</span><span>)</span><span>;</span>
<span>undefined</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>0</code>, <code>''</code>, <code>undefined</code></li>
<li>B: <code>0</code>, <code>new Number(0)</code>, <code>''</code>, <code>new Boolean(false)</code>, <code>undefined</code></li>
<li>C: <code>0</code>, <code>''</code>, <code>new Boolean(false)</code>, <code>undefined</code></li>
<li>D: All of them are falsy</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-11" aria-label="Permalink: Answer: A" href="#answer-a-11"></a></p>
<p dir="auto">There are 8 falsy values:</p>
<ul dir="auto">
<li><code>undefined</code></li>
<li><code>null</code></li>
<li><code>NaN</code></li>
<li><code>false</code></li>
<li><code>''</code> (empty string)</li>
<li><code>0</code></li>
<li><code>-0</code></li>
<li><code>0n</code> (BigInt(0))</li>
</ul>
<p dir="auto">Function constructors, like <code>new Number</code> and <code>new Boolean</code> are truthy.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">36. What's the output?</h6><a id="user-content-36-whats-the-output" aria-label="Permalink: 36. What's the output?" href="#36-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log(typeof typeof 1);"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>typeof</span> <span>typeof</span> <span>1</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"number"</code></li>
<li>B: <code>"string"</code></li>
<li>C: <code>"object"</code></li>
<li>D: <code>"undefined"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-8" aria-label="Permalink: Answer: B" href="#answer-b-8"></a></p>
<p dir="auto"><code>typeof 1</code> returns <code>"number"</code>.
<code>typeof "number"</code> returns <code>"string"</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">37. What's the output?</h6><a id="user-content-37-whats-the-output" aria-label="Permalink: 37. What's the output?" href="#37-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const numbers = [1, 2, 3];
numbers[10] = 11;
console.log(numbers);"><pre><span>const</span> <span>numbers</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>
<span>numbers</span><span>[</span><span>10</span><span>]</span> <span>=</span> <span>11</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>numbers</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>[1, 2, 3, null x 7, 11]</code></li>
<li>B: <code>[1, 2, 3, 11]</code></li>
<li>C: <code>[1, 2, 3, empty x 7, 11]</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-11" aria-label="Permalink: Answer: C" href="#answer-c-11"></a></p>
<p dir="auto">When you set a value to an element in an array that exceeds the length of the array, JavaScript creates something called "empty slots". These actually have the value of <code>undefined</code>, but you will see something like:</p>
<p dir="auto"><code>[1, 2, 3, empty x 7, 11]</code></p>
<p dir="auto">depending on where you run it (it's different for every browser, node, etc.)</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">38. What's the output?</h6><a id="user-content-38-whats-the-output" aria-label="Permalink: 38. What's the output?" href="#38-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="(() => {
  let x, y;
  try {
    throw new Error();
  } catch (x) {
    (x = 1), (y = 2);
    console.log(x);
  }
  console.log(x);
  console.log(y);
})();"><pre><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>let</span> <span>x</span><span>,</span> <span>y</span><span>;</span>
  <span>try</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>)</span><span>;</span>
  <span>}</span> <span>catch</span> <span>(</span><span>x</span><span>)</span> <span>{</span>
    <span>(</span><span>x</span> <span>=</span> <span>1</span><span>)</span><span>,</span> <span>(</span><span>y</span> <span>=</span> <span>2</span><span>)</span><span>;</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>)</span><span>;</span>
  <span>}</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>y</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>1</code> <code>undefined</code> <code>2</code></li>
<li>B: <code>undefined</code> <code>undefined</code> <code>undefined</code></li>
<li>C: <code>1</code> <code>1</code> <code>2</code></li>
<li>D: <code>1</code> <code>undefined</code> <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-12" aria-label="Permalink: Answer: A" href="#answer-a-12"></a></p>
<p dir="auto">The <code>catch</code> block receives the argument <code>x</code>. This is not the same <code>x</code> as the variable when we pass arguments. This variable <code>x</code> is block-scoped.</p>
<p dir="auto">Later, we set this block-scoped variable equal to <code>1</code>, and set the value of the variable <code>y</code>. Now, we log the block-scoped variable <code>x</code>, which is equal to <code>1</code>.</p>
<p dir="auto">Outside of the <code>catch</code> block, <code>x</code> is still <code>undefined</code>, and <code>y</code> is <code>2</code>. When we want to <code>console.log(x)</code> outside of the <code>catch</code> block, it returns <code>undefined</code>, and <code>y</code> returns <code>2</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">39. Everything in JavaScript is either a...</h6><a id="user-content-39-everything-in-javascript-is-either-a" aria-label="Permalink: 39. Everything in JavaScript is either a..." href="#39-everything-in-javascript-is-either-a"></a></p>
<ul dir="auto">
<li>A: primitive or object</li>
<li>B: function or object</li>
<li>C: trick question! only objects</li>
<li>D: number or object</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-13" aria-label="Permalink: Answer: A" href="#answer-a-13"></a></p>
<p dir="auto">JavaScript only has primitive types and objects.</p>
<p dir="auto">Primitive types are <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>bigint</code>, <code>number</code>, <code>string</code>, and <code>symbol</code>.</p>
<p dir="auto">What differentiates a primitive from an object is that primitives do not have any properties or methods; however, you'll note that <code>'foo'.toUpperCase()</code> evaluates to <code>'FOO'</code> and does not result in a <code>TypeError</code>. This is because when you try to access a property or method on a primitive like a string, JavaScript will implicitly wrap the primitive type using one of the wrapper classes, i.e. <code>String</code>, and then immediately discard the wrapper after the expression evaluates. All primitives except for <code>null</code> and <code>undefined</code> exhibit this behavior.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">40. What's the output?</h6><a id="user-content-40-whats-the-output" aria-label="Permalink: 40. What's the output?" href="#40-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="[[0, 1], [2, 3]].reduce(
  (acc, cur) => {
    return acc.concat(cur);
  },
  [1, 2],
);"><pre><span>[</span><span>[</span><span>0</span><span>,</span> <span>1</span><span>]</span><span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>]</span><span>]</span><span>.</span><span>reduce</span><span>(</span>
  <span>(</span><span>acc</span><span>,</span> <span>cur</span><span>)</span> <span>=&gt;</span> <span>{</span>
    <span>return</span> <span>acc</span><span>.</span><span>concat</span><span>(</span><span>cur</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
  <span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>,</span>
<span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>[0, 1, 2, 3, 1, 2]</code></li>
<li>B: <code>[6, 1, 2]</code></li>
<li>C: <code>[1, 2, 0, 1, 2, 3]</code></li>
<li>D: <code>[1, 2, 6]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-12" aria-label="Permalink: Answer: C" href="#answer-c-12"></a></p>
<p dir="auto"><code>[1, 2]</code> is our initial value. This is the value we start with, and the value of the very first <code>acc</code>. During the first round, <code>acc</code> is <code>[1,2]</code>, and <code>cur</code> is <code>[0, 1]</code>. We concatenate them, which results in <code>[1, 2, 0, 1]</code>.</p>
<p dir="auto">Then, <code>[1, 2, 0, 1]</code> is <code>acc</code> and <code>[2, 3]</code> is <code>cur</code>. We concatenate them, and get <code>[1, 2, 0, 1, 2, 3]</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">41. What's the output?</h6><a id="user-content-41-whats-the-output" aria-label="Permalink: 41. What's the output?" href="#41-whats-the-output"></a></p>

<ul dir="auto">
<li>A: <code>false</code> <code>true</code> <code>false</code></li>
<li>B: <code>false</code> <code>false</code> <code>true</code></li>
<li>C: <code>false</code> <code>true</code> <code>true</code></li>
<li>D: <code>true</code> <code>true</code> <code>false</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-9" aria-label="Permalink: Answer: B" href="#answer-b-9"></a></p>
<p dir="auto"><code>null</code> is falsy. <code>!null</code> returns <code>true</code>. <code>!true</code> returns <code>false</code>.</p>
<p dir="auto"><code>""</code> is falsy. <code>!""</code> returns <code>true</code>. <code>!true</code> returns <code>false</code>.</p>
<p dir="auto"><code>1</code> is truthy. <code>!1</code> returns <code>false</code>. <code>!false</code> returns <code>true</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">42. What does the <code>setInterval</code> method return in the browser?</h6><a id="user-content-42-what-does-the-setinterval-method-return-in-the-browser" aria-label="Permalink: 42. What does the setInterval method return in the browser?" href="#42-what-does-the-setinterval-method-return-in-the-browser"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="setInterval(() => console.log('Hi'), 1000);"><pre><span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'Hi'</span><span>)</span><span>,</span> <span>1000</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: a unique id</li>
<li>B: the amount of milliseconds specified</li>
<li>C: the passed function</li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-14" aria-label="Permalink: Answer: A" href="#answer-a-14"></a></p>
<p dir="auto">It returns a unique id. This id can be used to clear that interval with the <code>clearInterval()</code> function.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">43. What does this return?</h6><a id="user-content-43-what-does-this-return" aria-label="Permalink: 43. What does this return?" href="#43-what-does-this-return"></a></p>

<ul dir="auto">
<li>A: <code>["L", "y", "d", "i", "a"]</code></li>
<li>B: <code>["Lydia"]</code></li>
<li>C: <code>[[], "Lydia"]</code></li>
<li>D: <code>[["L", "y", "d", "i", "a"]]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-15" aria-label="Permalink: Answer: A" href="#answer-a-15"></a></p>
<p dir="auto">A string is an iterable. The spread operator maps every character of an iterable to one element.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">44. What's the output?</h6><a id="user-content-44-whats-the-output" aria-label="Permalink: 44. What's the output?" href="#44-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function* generator(i) {
  yield i;
  yield i * 2;
}

const gen = generator(10);

console.log(gen.next().value);
console.log(gen.next().value);"><pre><span>function</span><span>*</span> <span>generator</span><span>(</span><span>i</span><span>)</span> <span>{</span>
  <span>yield</span> <span>i</span><span>;</span>
  <span>yield</span> <span>i</span> <span>*</span> <span>2</span><span>;</span>
<span>}</span>

<span>const</span> <span>gen</span> <span>=</span> <span>generator</span><span>(</span><span>10</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>gen</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>gen</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>[0, 10], [10, 20]</code></li>
<li>B: <code>20, 20</code></li>
<li>C: <code>10, 20</code></li>
<li>D: <code>0, 10 and 10, 20</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-13" aria-label="Permalink: Answer: C" href="#answer-c-13"></a></p>
<p dir="auto">Regular functions cannot be stopped mid-way after invocation. However, a generator function can be "stopped" midway, and later continue from where it stopped. Every time a generator function encounters a <code>yield</code> keyword, the function yields the value specified after it. Note that the generator function in that case doesn’t <em>return</em> the value, it <em>yields</em> the value.</p>
<p dir="auto">First, we initialize the generator function with <code>i</code> equal to <code>10</code>. We invoke the generator function using the <code>next()</code> method. The first time we invoke the generator function, <code>i</code> is equal to <code>10</code>. It encounters the first <code>yield</code> keyword: it yields the value of <code>i</code>. The generator is now "paused", and <code>10</code> gets logged.</p>
<p dir="auto">Then, we invoke the function again with the <code>next()</code> method. It starts to continue where it stopped previously, still with <code>i</code> equal to <code>10</code>. Now, it encounters the next <code>yield</code> keyword, and yields <code>i * 2</code>. <code>i</code> is equal to <code>10</code>, so it returns <code>10 * 2</code>, which is <code>20</code>. This results in <code>10, 20</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">45. What does this return?</h6><a id="user-content-45-what-does-this-return" aria-label="Permalink: 45. What does this return?" href="#45-what-does-this-return"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const firstPromise = new Promise((res, rej) => {
  setTimeout(res, 500, 'one');
});

const secondPromise = new Promise((res, rej) => {
  setTimeout(res, 100, 'two');
});

Promise.race([firstPromise, secondPromise]).then(res => console.log(res));"><pre><span>const</span> <span>firstPromise</span> <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>res</span><span>,</span> <span>rej</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>res</span><span>,</span> <span>500</span><span>,</span> <span>'one'</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>const</span> <span>secondPromise</span> <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>res</span><span>,</span> <span>rej</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>res</span><span>,</span> <span>100</span><span>,</span> <span>'two'</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>Promise</span><span>.</span><span>race</span><span>(</span><span>[</span><span>firstPromise</span><span>,</span> <span>secondPromise</span><span>]</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>res</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"one"</code></li>
<li>B: <code>"two"</code></li>
<li>C: <code>"two" "one"</code></li>
<li>D: <code>"one" "two"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-10" aria-label="Permalink: Answer: B" href="#answer-b-10"></a></p>
<p dir="auto">When we pass multiple promises to the <code>Promise.race</code> method, it resolves/rejects the <em>first</em> promise that resolves/rejects. To the <code>setTimeout</code> method, we pass a timer: 500ms for the first promise (<code>firstPromise</code>), and 100ms for the second promise (<code>secondPromise</code>). This means that the <code>secondPromise</code> resolves first with the value of <code>'two'</code>. <code>res</code> now holds the value of <code>'two'</code>, which gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">46. What's the output?</h6><a id="user-content-46-whats-the-output" aria-label="Permalink: 46. What's the output?" href="#46-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let person = { name: 'Lydia' };
const members = [person];
person = null;

console.log(members);"><pre><span>let</span> <span>person</span> <span>=</span> <span>{</span> <span>name</span>: <span>'Lydia'</span> <span>}</span><span>;</span>
<span>const</span> <span>members</span> <span>=</span> <span>[</span><span>person</span><span>]</span><span>;</span>
<span>person</span> <span>=</span> <span>null</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>members</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>null</code></li>
<li>B: <code>[null]</code></li>
<li>C: <code>[{}]</code></li>
<li>D: <code>[{ name: "Lydia" }]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-4" aria-label="Permalink: Answer: D" href="#answer-d-4"></a></p>
<p dir="auto">First, we declare a variable <code>person</code> with the value of an object that has a <code>name</code> property.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/0354f2de42a6883901ffee576d298d6695b3e892bdb1aa34222d28d22a2ae4ac/68747470733a2f2f692e696d6775722e636f6d2f544d4c314d62532e706e67"><img src="https://camo.githubusercontent.com/0354f2de42a6883901ffee576d298d6695b3e892bdb1aa34222d28d22a2ae4ac/68747470733a2f2f692e696d6775722e636f6d2f544d4c314d62532e706e67" width="200" data-canonical-src="https://i.imgur.com/TML1MbS.png"></a>
<p dir="auto">Then, we declare a variable called <code>members</code>. We set the first element of that array equal to the value of the <code>person</code> variable. Objects interact by <em>reference</em> when setting them equal to each other. When you assign a reference from one variable to another, you make a <em>copy</em> of that reference. (note that they don't have the <em>same</em> reference!)</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/db6a6b5701fabef09480083f86184664eaa5ee76be47421c312ff6e619dbe0a8/68747470733a2f2f692e696d6775722e636f6d2f465347354b33462e706e67"><img src="https://camo.githubusercontent.com/db6a6b5701fabef09480083f86184664eaa5ee76be47421c312ff6e619dbe0a8/68747470733a2f2f692e696d6775722e636f6d2f465347354b33462e706e67" width="300" data-canonical-src="https://i.imgur.com/FSG5K3F.png"></a>
<p dir="auto">Then, we set the variable <code>person</code> equal to <code>null</code>.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/a531ccbf6cd1aab6e8523e6bf0e9b38a72c8924025e0c261b8ca533a689f13b0/68747470733a2f2f692e696d6775722e636f6d2f73596a63734d542e706e67"><img src="https://camo.githubusercontent.com/a531ccbf6cd1aab6e8523e6bf0e9b38a72c8924025e0c261b8ca533a689f13b0/68747470733a2f2f692e696d6775722e636f6d2f73596a63734d542e706e67" width="300" data-canonical-src="https://i.imgur.com/sYjcsMT.png"></a>
<p dir="auto">We are only modifying the value of the <code>person</code> variable, and not the first element in the array, since that element has a different (copied) reference to the object. The first element in <code>members</code> still holds its reference to the original object. When we log the <code>members</code> array, the first element still holds the value of the object, which gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">47. What's the output?</h6><a id="user-content-47-whats-the-output" aria-label="Permalink: 47. What's the output?" href="#47-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = {
  name: 'Lydia',
  age: 21,
};

for (const item in person) {
  console.log(item);
}"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span>
  <span>name</span>: <span>'Lydia'</span><span>,</span>
  <span>age</span>: <span>21</span><span>,</span>
<span>}</span><span>;</span>

<span>for</span> <span>(</span><span>const</span> <span>item</span> <span>in</span> <span>person</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>item</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: <code>{ name: "Lydia" }, { age: 21 }</code></li>
<li>B: <code>"name", "age"</code></li>
<li>C: <code>"Lydia", 21</code></li>
<li>D: <code>["name", "Lydia"], ["age", 21]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-11" aria-label="Permalink: Answer: B" href="#answer-b-11"></a></p>
<p dir="auto">With a <code>for-in</code> loop, we can iterate through object keys, in this case <code>name</code> and <code>age</code>. Under the hood, object keys are strings (if they're not a Symbol). On every loop, we set the value of <code>item</code> equal to the current key it’s iterating over. First, <code>item</code> is equal to <code>name</code>, and gets logged. Then, <code>item</code> is equal to <code>age</code>, which gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">48. What's the output?</h6><a id="user-content-48-whats-the-output" aria-label="Permalink: 48. What's the output?" href="#48-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log(3 + 4 + '5');"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>3</span> <span>+</span> <span>4</span> <span>+</span> <span>'5'</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"345"</code></li>
<li>B: <code>"75"</code></li>
<li>C: <code>12</code></li>
<li>D: <code>"12"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-12" aria-label="Permalink: Answer: B" href="#answer-b-12"></a></p>
<p dir="auto">Operator associativity is the order in which the compiler evaluates the expressions, either left-to-right or right-to-left. This only happens if all operators have the <em>same</em> precedence. We only have one type of operator: <code>+</code>. For addition, the associativity is left-to-right.</p>
<p dir="auto"><code>3 + 4</code> gets evaluated first. This results in the number <code>7</code>.</p>
<p dir="auto"><code>7 + '5'</code> results in <code>"75"</code> because of coercion. JavaScript converts the number <code>7</code> into a string, see question 15. We can concatenate two strings using the <code>+</code>operator. <code>"7" + "5"</code> results in <code>"75"</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">49. What's the value of <code>num</code>?</h6><a id="user-content-49-whats-the-value-of-num" aria-label="Permalink: 49. What's the value of num?" href="#49-whats-the-value-of-num"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const num = parseInt('7*6', 10);"><pre><span>const</span> <span>num</span> <span>=</span> <span>parseInt</span><span>(</span><span>'7*6'</span><span>,</span> <span>10</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>42</code></li>
<li>B: <code>"42"</code></li>
<li>C: <code>7</code></li>
<li>D: <code>NaN</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-14" aria-label="Permalink: Answer: C" href="#answer-c-14"></a></p>
<p dir="auto">Only the first number in the string is returned. Based on the <em>radix</em> (the second argument in order to specify what type of number we want to parse it to: base 10, hexadecimal, octal, binary, etc.), the <code>parseInt</code> checks whether the characters in the string are valid. Once it encounters a character that isn't a valid number in the radix, it stops parsing and ignores the following characters.</p>
<p dir="auto"><code>*</code> is not a valid number. It only parses <code>"7"</code> into the decimal <code>7</code>. <code>num</code> now holds the value of <code>7</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">50. What's the output?</h6><a id="user-content-50-whats-the-output" aria-label="Permalink: 50. What's the output?" href="#50-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="[1, 2, 3].map(num => {
  if (typeof num === 'number') return;
  return num * 2;
});"><pre><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>map</span><span>(</span><span>num</span> <span>=&gt;</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> <span>num</span> <span>===</span> <span>'number'</span><span>)</span> <span>return</span><span>;</span>
  <span>return</span> <span>num</span> <span>*</span> <span>2</span><span>;</span>
<span>}</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>[]</code></li>
<li>B: <code>[null, null, null]</code></li>
<li>C: <code>[undefined, undefined, undefined]</code></li>
<li>D: <code>[ 3 x empty ]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-15" aria-label="Permalink: Answer: C" href="#answer-c-15"></a></p>
<p dir="auto">When mapping over the array, the value of <code>num</code> is equal to the element it’s currently looping over. In this case, the elements are numbers, so the condition of the if statement <code>typeof num === "number"</code> returns <code>true</code>. The map function creates a new array and inserts the values returned from the function.</p>
<p dir="auto">However, we don’t return a value. When we don’t return a value from the function, the function returns <code>undefined</code>. For every element in the array, the function block gets called, so for each element we return <code>undefined</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">51. What's the output?</h6><a id="user-content-51-whats-the-output" aria-label="Permalink: 51. What's the output?" href="#51-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function getInfo(member, year) {
  member.name = 'Lydia';
  year = '1998';
}

const person = { name: 'Sarah' };
const birthYear = '1997';

getInfo(person, birthYear);

console.log(person, birthYear);"><pre><span>function</span> <span>getInfo</span><span>(</span><span>member</span><span>,</span> <span>year</span><span>)</span> <span>{</span>
  <span>member</span><span>.</span><span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>
  <span>year</span> <span>=</span> <span>'1998'</span><span>;</span>
<span>}</span>

<span>const</span> <span>person</span> <span>=</span> <span>{</span> <span>name</span>: <span>'Sarah'</span> <span>}</span><span>;</span>
<span>const</span> <span>birthYear</span> <span>=</span> <span>'1997'</span><span>;</span>

<span>getInfo</span><span>(</span><span>person</span><span>,</span> <span>birthYear</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>person</span><span>,</span> <span>birthYear</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{ name: "Lydia" }, "1997"</code></li>
<li>B: <code>{ name: "Sarah" }, "1998"</code></li>
<li>C: <code>{ name: "Lydia" }, "1998"</code></li>
<li>D: <code>{ name: "Sarah" }, "1997"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-16" aria-label="Permalink: Answer: A" href="#answer-a-16"></a></p>
<p dir="auto">Arguments are passed by <em>value</em>, unless their value is an object, then they're passed by <em>reference</em>. <code>birthYear</code> is passed by value, since it's a string, not an object. When we pass arguments by value, a <em>copy</em> of that value is created (see question 46).</p>
<p dir="auto">The variable <code>birthYear</code> has a reference to the value <code>"1997"</code>. The argument <code>year</code> also has a reference to the value <code>"1997"</code>, but it's not the same value as <code>birthYear</code> has a reference to. When we update the value of <code>year</code> by setting <code>year</code> equal to <code>"1998"</code>, we are only updating the value of <code>year</code>. <code>birthYear</code> is still equal to <code>"1997"</code>.</p>
<p dir="auto">The value of <code>person</code> is an object. The argument <code>member</code> has a (copied) reference to the <em>same</em> object. When we modify a property of the object <code>member</code> has a reference to, the value of <code>person</code> will also be modified, since they both have a reference to the same object. <code>person</code>'s <code>name</code> property is now equal to the value <code>"Lydia"</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">52. What's the output?</h6><a id="user-content-52-whats-the-output" aria-label="Permalink: 52. What's the output?" href="#52-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function greeting() {
  throw 'Hello world!';
}

function sayHi() {
  try {
    const data = greeting();
    console.log('It worked!', data);
  } catch (e) {
    console.log('Oh no an error:', e);
  }
}

sayHi();"><pre><span>function</span> <span>greeting</span><span>(</span><span>)</span> <span>{</span>
  <span>throw</span> <span>'Hello world!'</span><span>;</span>
<span>}</span>

<span>function</span> <span>sayHi</span><span>(</span><span>)</span> <span>{</span>
  <span>try</span> <span>{</span>
    <span>const</span> <span>data</span> <span>=</span> <span>greeting</span><span>(</span><span>)</span><span>;</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'It worked!'</span><span>,</span> <span>data</span><span>)</span><span>;</span>
  <span>}</span> <span>catch</span> <span>(</span><span>e</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'Oh no an error:'</span><span>,</span> <span>e</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>sayHi</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>It worked! Hello world!</code></li>
<li>B: <code>Oh no an error: undefined</code></li>
<li>C: <code>SyntaxError: can only throw Error objects</code></li>
<li>D: <code>Oh no an error: Hello world!</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-5" aria-label="Permalink: Answer: D" href="#answer-d-5"></a></p>
<p dir="auto">With the <code>throw</code> statement, we can create custom errors. With this statement, you can throw exceptions. An exception can be a <b>string</b>, a <b>number</b>, a <b>boolean</b> or an <b>object</b>. In this case, our exception is the string <code>'Hello world!'</code>.</p>
<p dir="auto">With the <code>catch</code> statement, we can specify what to do if an exception is thrown in the <code>try</code> block. An exception is thrown: the string <code>'Hello world!'</code>. <code>e</code> is now equal to that string, which we log. This results in <code>'Oh an error: Hello world!'</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">53. What's the output?</h6><a id="user-content-53-whats-the-output" aria-label="Permalink: 53. What's the output?" href="#53-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function Car() {
  this.make = 'Lamborghini';
  return { make: 'Maserati' };
}

const myCar = new Car();
console.log(myCar.make);"><pre><span>function</span> <span>Car</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>make</span> <span>=</span> <span>'Lamborghini'</span><span>;</span>
  <span>return</span> <span>{</span> <span>make</span>: <span>'Maserati'</span> <span>}</span><span>;</span>
<span>}</span>

<span>const</span> <span>myCar</span> <span>=</span> <span>new</span> <span>Car</span><span>(</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>myCar</span><span>.</span><span>make</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"Lamborghini"</code></li>
<li>B: <code>"Maserati"</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-13" aria-label="Permalink: Answer: B" href="#answer-b-13"></a></p>
<p dir="auto">When a constructor function is called with the <code>new</code> keyword, it creates an object and sets the <code>this</code> keyword to refer to that object. By default, if the constructor function doesn't explicitly return anything, it will return the newly created object.</p>
<p dir="auto">In this case, the constructor function <code>Car</code> explicitly returns a new object with <code>make</code> set to <code>"Maserati"</code>, which overrides the default behavior. Therefore, when <code>new Car()</code> is called, the <em>returned</em> object is assigned to <code>myCar</code>, resulting in the output being <code>"Maserati"</code> when <code>myCar.make</code> is accessed.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">54. What's the output?</h6><a id="user-content-54-whats-the-output" aria-label="Permalink: 54. What's the output?" href="#54-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="(() => {
  let x = (y = 10);
})();

console.log(typeof x);
console.log(typeof y);"><pre><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>let</span> <span>x</span> <span>=</span> <span>(</span><span>y</span> <span>=</span> <span>10</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>typeof</span> <span>x</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>typeof</span> <span>y</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"undefined", "number"</code></li>
<li>B: <code>"number", "number"</code></li>
<li>C: <code>"object", "number"</code></li>
<li>D: <code>"number", "undefined"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-17" aria-label="Permalink: Answer: A" href="#answer-a-17"></a></p>
<p dir="auto"><code>let x = (y = 10);</code> is actually shorthand for:</p>

<p dir="auto">When we set <code>y</code> equal to <code>10</code>, we actually add a property <code>y</code> to the global object (<code>window</code> in the browser, <code>global</code> in Node). In a browser, <code>window.y</code> is now equal to <code>10</code>.</p>
<p dir="auto">Then, we declare a variable <code>x</code> with the value of <code>y</code>, which is <code>10</code>. Variables declared with the <code>let</code> keyword are <em>block scoped</em>, they are only defined within the block they're declared in; the immediately invoked function expression (IIFE) in this case. When we use the <code>typeof</code> operator, the operand <code>x</code> is not defined: we are trying to access <code>x</code> outside of the block it's declared in. This means that <code>x</code> is not defined. Values who haven't been assigned a value or declared are of type <code>"undefined"</code>. <code>console.log(typeof x)</code> returns <code>"undefined"</code>.</p>
<p dir="auto">However, we created a global variable <code>y</code> when setting <code>y</code> equal to <code>10</code>. This value is accessible anywhere in our code. <code>y</code> is defined, and holds a value of type <code>"number"</code>. <code>console.log(typeof y)</code> returns <code>"number"</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">55. What's the output?</h6><a id="user-content-55-whats-the-output" aria-label="Permalink: 55. What's the output?" href="#55-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="class Dog {
  constructor(name) {
    this.name = name;
  }
}

Dog.prototype.bark = function() {
  console.log(`Woof I am ${this.name}`);
};

const pet = new Dog('Mara');

pet.bark();

delete Dog.prototype.bark;

pet.bark();"><pre><span>class</span> <span>Dog</span> <span>{</span>
  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>name</span> <span>=</span> <span>name</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>Dog</span><span>.</span><span>prototype</span><span>.</span><span>bark</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>`Woof I am <span><span>${</span><span>this</span><span>.</span><span>name</span><span>}</span></span>`</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>const</span> <span>pet</span> <span>=</span> <span>new</span> <span>Dog</span><span>(</span><span>'Mara'</span><span>)</span><span>;</span>

<span>pet</span><span>.</span><span>bark</span><span>(</span><span>)</span><span>;</span>

<span>delete</span> <span>Dog</span><span>.</span><span>prototype</span><span>.</span><span>bark</span><span>;</span>

<span>pet</span><span>.</span><span>bark</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"Woof I am Mara"</code>, <code>TypeError</code></li>
<li>B: <code>"Woof I am Mara"</code>, <code>"Woof I am Mara"</code></li>
<li>C: <code>"Woof I am Mara"</code>, <code>undefined</code></li>
<li>D: <code>TypeError</code>, <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-18" aria-label="Permalink: Answer: A" href="#answer-a-18"></a></p>
<p dir="auto">We can delete properties from objects using the <code>delete</code> keyword, also on the prototype. By deleting a property on the prototype, it is not available anymore in the prototype chain. In this case, the <code>bark</code> function is not available anymore on the prototype after <code>delete Dog.prototype.bark</code>, yet we still try to access it.</p>
<p dir="auto">When we try to invoke something that is not a function, a <code>TypeError</code> is thrown. In this case <code>TypeError: pet.bark is not a function</code>, since <code>pet.bark</code> is <code>undefined</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">56. What's the output?</h6><a id="user-content-56-whats-the-output" aria-label="Permalink: 56. What's the output?" href="#56-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const set = new Set([1, 1, 2, 3, 4]);

console.log(set);"><pre><span>const</span> <span>set</span> <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>set</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>[1, 1, 2, 3, 4]</code></li>
<li>B: <code>[1, 2, 3, 4]</code></li>
<li>C: <code>{1, 1, 2, 3, 4}</code></li>
<li>D: <code>{1, 2, 3, 4}</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-6" aria-label="Permalink: Answer: D" href="#answer-d-6"></a></p>
<p dir="auto">The <code>Set</code> object is a collection of <em>unique</em> values: a value can only occur once in a set.</p>
<p dir="auto">We passed the iterable <code>[1, 1, 2, 3, 4]</code> with a duplicate value <code>1</code>. Since we cannot have two of the same values in a set, one of them is removed. This results in <code>{1, 2, 3, 4}</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">57. What's the output?</h6><a id="user-content-57-whats-the-output" aria-label="Permalink: 57. What's the output?" href="#57-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="// counter.js
let counter = 10;
export default counter;"><pre><span>// counter.js</span>
<span>let</span> <span>counter</span> <span>=</span> <span>10</span><span>;</span>
<span>export</span> <span>default</span> <span>counter</span><span>;</span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="// index.js
import myCounter from './counter';

myCounter += 1;

console.log(myCounter);"><pre><span>// index.js</span>
<span>import</span> <span>myCounter</span> <span>from</span> <span>'./counter'</span><span>;</span>

<span>myCounter</span> <span>+=</span> <span>1</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>myCounter</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>10</code></li>
<li>B: <code>11</code></li>
<li>C: <code>Error</code></li>
<li>D: <code>NaN</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-16" aria-label="Permalink: Answer: C" href="#answer-c-16"></a></p>
<p dir="auto">An imported module is <em>read-only</em>: you cannot modify the imported module. Only the module that exports them can change its value.</p>
<p dir="auto">When we try to increment the value of <code>myCounter</code>, it throws an error: <code>myCounter</code> is read-only and cannot be modified.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">58. What's the output?</h6><a id="user-content-58-whats-the-output" aria-label="Permalink: 58. What's the output?" href="#58-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const name = 'Lydia';
age = 21;

console.log(delete name);
console.log(delete age);"><pre><span>const</span> <span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>
<span>age</span> <span>=</span> <span>21</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>delete</span> <span>name</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>delete</span> <span>age</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>false</code>, <code>true</code></li>
<li>B: <code>"Lydia"</code>, <code>21</code></li>
<li>C: <code>true</code>, <code>true</code></li>
<li>D: <code>undefined</code>, <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-19" aria-label="Permalink: Answer: A" href="#answer-a-19"></a></p>
<p dir="auto">The <code>delete</code> operator returns a boolean value: <code>true</code> on a successful deletion, else it'll return <code>false</code>. However, variables declared with the <code>var</code>, <code>const</code>, or <code>let</code> keywords cannot be deleted using the <code>delete</code> operator.</p>
<p dir="auto">The <code>name</code> variable was declared with a <code>const</code> keyword, so its deletion is not successful: <code>false</code> is returned. When we set <code>age</code> equal to <code>21</code>, we actually added a property called <code>age</code> to the global object. You can successfully delete properties from objects this way, also the global object, so <code>delete age</code> returns <code>true</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">59. What's the output?</h6><a id="user-content-59-whats-the-output" aria-label="Permalink: 59. What's the output?" href="#59-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const numbers = [1, 2, 3, 4, 5];
const [y] = numbers;

console.log(y);"><pre><span>const</span> <span>numbers</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>;</span>
<span>const</span> <span>[</span><span>y</span><span>]</span> <span>=</span> <span>numbers</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>y</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>[[1, 2, 3, 4, 5]]</code></li>
<li>B: <code>[1, 2, 3, 4, 5]</code></li>
<li>C: <code>1</code></li>
<li>D: <code>[1]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-17" aria-label="Permalink: Answer: C" href="#answer-c-17"></a></p>
<p dir="auto">We can unpack values from arrays or properties from objects through destructuring. For example:</p>

<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/1d080a7e86e34703ef69dfdeae38d6c7a888923a62ee7a4f34c748b8baf6e850/68747470733a2f2f692e696d6775722e636f6d2f41444670566f702e706e67"><img src="https://camo.githubusercontent.com/1d080a7e86e34703ef69dfdeae38d6c7a888923a62ee7a4f34c748b8baf6e850/68747470733a2f2f692e696d6775722e636f6d2f41444670566f702e706e67" width="200" data-canonical-src="https://i.imgur.com/ADFpVop.png"></a>
<p dir="auto">The value of <code>a</code> is now <code>1</code>, and the value of <code>b</code> is now <code>2</code>. What we actually did in the question, is:</p>

<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/c9ef7f0415dde444c3a74d5e26db819c19935b87dc9c1a05a02f5ba1587b2788/68747470733a2f2f692e696d6775722e636f6d2f4e7a476b4d4e6b2e706e67"><img src="https://camo.githubusercontent.com/c9ef7f0415dde444c3a74d5e26db819c19935b87dc9c1a05a02f5ba1587b2788/68747470733a2f2f692e696d6775722e636f6d2f4e7a476b4d4e6b2e706e67" width="200" data-canonical-src="https://i.imgur.com/NzGkMNk.png"></a>
<p dir="auto">This means that the value of <code>y</code> is equal to the first value in the array, which is the number <code>1</code>. When we log <code>y</code>, <code>1</code> is returned.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">60. What's the output?</h6><a id="user-content-60-whats-the-output" aria-label="Permalink: 60. What's the output?" href="#60-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const user = { name: 'Lydia', age: 21 };
const admin = { admin: true, ...user };

console.log(admin);"><pre><span>const</span> <span>user</span> <span>=</span> <span>{</span> <span>name</span>: <span>'Lydia'</span><span>,</span> <span>age</span>: <span>21</span> <span>}</span><span>;</span>
<span>const</span> <span>admin</span> <span>=</span> <span>{</span> <span>admin</span>: <span>true</span><span>,</span> ...<span>user</span> <span>}</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>admin</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{ admin: true, user: { name: "Lydia", age: 21 } }</code></li>
<li>B: <code>{ admin: true, name: "Lydia", age: 21 }</code></li>
<li>C: <code>{ admin: true, user: ["Lydia", 21] }</code></li>
<li>D: <code>{ admin: true }</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-14" aria-label="Permalink: Answer: B" href="#answer-b-14"></a></p>
<p dir="auto">It's possible to combine objects using the spread operator <code>...</code>. It lets you create copies of the key/value pairs of one object, and add them to another object. In this case, we create copies of the <code>user</code> object, and add them to the <code>admin</code> object. The <code>admin</code> object now contains the copied key/value pairs, which results in <code>{ admin: true, name: "Lydia", age: 21 }</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">61. What's the output?</h6><a id="user-content-61-whats-the-output" aria-label="Permalink: 61. What's the output?" href="#61-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = { name: 'Lydia' };

Object.defineProperty(person, 'age', { value: 21 });

console.log(person);
console.log(Object.keys(person));"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span> <span>name</span>: <span>'Lydia'</span> <span>}</span><span>;</span>

<span>Object</span><span>.</span><span>defineProperty</span><span>(</span><span>person</span><span>,</span> <span>'age'</span><span>,</span> <span>{</span> <span>value</span>: <span>21</span> <span>}</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>person</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>Object</span><span>.</span><span>keys</span><span>(</span><span>person</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{ name: "Lydia", age: 21 }</code>, <code>["name", "age"]</code></li>
<li>B: <code>{ name: "Lydia", age: 21 }</code>, <code>["name"]</code></li>
<li>C: <code>{ name: "Lydia"}</code>, <code>["name", "age"]</code></li>
<li>D: <code>{ name: "Lydia"}</code>, <code>["age"]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-15" aria-label="Permalink: Answer: B" href="#answer-b-15"></a></p>
<p dir="auto">With the <code>defineProperty</code> method, we can add new properties to an object, or modify existing ones. When we add a property to an object using the <code>defineProperty</code> method, they are by default <em>not enumerable</em>. The <code>Object.keys</code> method returns all <em>enumerable</em> property names from an object, in this case only <code>"name"</code>.</p>
<p dir="auto">Properties added using the <code>defineProperty</code> method are immutable by default. You can override this behavior using the <code>writable</code>, <code>configurable</code> and <code>enumerable</code> properties. This way, the <code>defineProperty</code> method gives you a lot more control over the properties you're adding to an object.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">62. What's the output?</h6><a id="user-content-62-whats-the-output" aria-label="Permalink: 62. What's the output?" href="#62-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const settings = {
  username: 'lydiahallie',
  level: 19,
  health: 90,
};

const data = JSON.stringify(settings, ['level', 'health']);
console.log(data);"><pre><span>const</span> <span>settings</span> <span>=</span> <span>{</span>
  <span>username</span>: <span>'lydiahallie'</span><span>,</span>
  <span>level</span>: <span>19</span><span>,</span>
  <span>health</span>: <span>90</span><span>,</span>
<span>}</span><span>;</span>

<span>const</span> <span>data</span> <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>settings</span><span>,</span> <span>[</span><span>'level'</span><span>,</span> <span>'health'</span><span>]</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>data</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"{"level":19, "health":90}"</code></li>
<li>B: <code>"{"username": "lydiahallie"}"</code></li>
<li>C: <code>"["level", "health"]"</code></li>
<li>D: <code>"{"username": "lydiahallie", "level":19, "health":90}"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-20" aria-label="Permalink: Answer: A" href="#answer-a-20"></a></p>
<p dir="auto">The second argument of <code>JSON.stringify</code> is the <em>replacer</em>. The replacer can either be a function or an array, and lets you control what and how the values should be stringified.</p>
<p dir="auto">If the replacer is an <em>array</em>, only the property names included in the array will be added to the JSON string. In this case, only the properties with the names <code>"level"</code> and <code>"health"</code> are included, <code>"username"</code> is excluded. <code>data</code> is now equal to <code>"{"level":19, "health":90}"</code>.</p>
<p dir="auto">If the replacer is a <em>function</em>, this function gets called on every property in the object you're stringifying. The value returned from this function will be the value of the property when it's added to the JSON string. If the value is <code>undefined</code>, this property is excluded from the JSON string.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">63. What's the output?</h6><a id="user-content-63-whats-the-output" aria-label="Permalink: 63. What's the output?" href="#63-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let num = 10;

const increaseNumber = () => num++;
const increasePassedNumber = number => number++;

const num1 = increaseNumber();
const num2 = increasePassedNumber(num1);

console.log(num1);
console.log(num2);"><pre><span>let</span> <span>num</span> <span>=</span> <span>10</span><span>;</span>

<span>const</span> <span>increaseNumber</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>num</span><span>++</span><span>;</span>
<span>const</span> <span>increasePassedNumber</span> <span>=</span> <span>number</span> <span>=&gt;</span> <span>number</span><span>++</span><span>;</span>

<span>const</span> <span>num1</span> <span>=</span> <span>increaseNumber</span><span>(</span><span>)</span><span>;</span>
<span>const</span> <span>num2</span> <span>=</span> <span>increasePassedNumber</span><span>(</span><span>num1</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>num1</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>num2</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>10</code>, <code>10</code></li>
<li>B: <code>10</code>, <code>11</code></li>
<li>C: <code>11</code>, <code>11</code></li>
<li>D: <code>11</code>, <code>12</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-21" aria-label="Permalink: Answer: A" href="#answer-a-21"></a></p>
<p dir="auto">The unary operator <code>++</code> <em>first returns</em> the value of the operand, <em>then increments</em> the value of the operand. The value of <code>num1</code> is <code>10</code>, since the <code>increaseNumber</code> function first returns the value of <code>num</code>, which is <code>10</code>, and only increments the value of <code>num</code> afterward.</p>
<p dir="auto"><code>num2</code> is <code>10</code>, since we passed <code>num1</code> to the <code>increasePassedNumber</code>. <code>number</code> is equal to <code>10</code>(the value of <code>num1</code>). Again, the unary operator <code>++</code> <em>first returns</em> the value of the operand, <em>then increments</em> the value of the operand. The value of <code>number</code> is <code>10</code>, so <code>num2</code> is equal to <code>10</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">64. What's the output?</h6><a id="user-content-64-whats-the-output" aria-label="Permalink: 64. What's the output?" href="#64-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const value = { number: 10 };

const multiply = (x = { ...value }) => {
  console.log((x.number *= 2));
};

multiply();
multiply();
multiply(value);
multiply(value);"><pre><span>const</span> <span>value</span> <span>=</span> <span>{</span> <span>number</span>: <span>10</span> <span>}</span><span>;</span>

<span>const</span> <span>multiply</span> <span>=</span> <span>(</span><span>x</span> <span>=</span> <span>{</span> ...<span>value</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>(</span><span>x</span><span>.</span><span>number</span> <span>*=</span> <span>2</span><span>)</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>multiply</span><span>(</span><span>)</span><span>;</span>
<span>multiply</span><span>(</span><span>)</span><span>;</span>
<span>multiply</span><span>(</span><span>value</span><span>)</span><span>;</span>
<span>multiply</span><span>(</span><span>value</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>20</code>, <code>40</code>, <code>80</code>, <code>160</code></li>
<li>B: <code>20</code>, <code>40</code>, <code>20</code>, <code>40</code></li>
<li>C: <code>20</code>, <code>20</code>, <code>20</code>, <code>40</code></li>
<li>D: <code>NaN</code>, <code>NaN</code>, <code>20</code>, <code>40</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-18" aria-label="Permalink: Answer: C" href="#answer-c-18"></a></p>
<p dir="auto">In ES6, we can initialize parameters with a default value. The value of the parameter will be the default value, if no other value has been passed to the function, or if the value of the parameter is <code>"undefined"</code>. In this case, we spread the properties of the <code>value</code> object into a new object, so <code>x</code> has the default value of <code>{ number: 10 }</code>.</p>
<p dir="auto">The default argument is evaluated at <em>call time</em>! Every time we call the function, a <em>new</em> object is created. We invoke the <code>multiply</code> function the first two times without passing a value: <code>x</code> has the default value of <code>{ number: 10 }</code>. We then log the multiplied value of that number, which is <code>20</code>.</p>
<p dir="auto">The third time we invoke multiply, we do pass an argument: the object called <code>value</code>. The <code>*=</code> operator is actually shorthand for <code>x.number = x.number * 2</code>: we modify the value of <code>x.number</code>, and log the multiplied value <code>20</code>.</p>
<p dir="auto">The fourth time, we pass the <code>value</code> object again. <code>x.number</code> was previously modified to <code>20</code>, so <code>x.number *= 2</code> logs <code>40</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">65. What's the output?</h6><a id="user-content-65-whats-the-output" aria-label="Permalink: 65. What's the output?" href="#65-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="[1, 2, 3, 4].reduce((x, y) => console.log(x, y));"><pre><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>1</code> <code>2</code> and <code>3</code> <code>3</code> and <code>6</code> <code>4</code></li>
<li>B: <code>1</code> <code>2</code> and <code>2</code> <code>3</code> and <code>3</code> <code>4</code></li>
<li>C: <code>1</code> <code>undefined</code> and <code>2</code> <code>undefined</code> and <code>3</code> <code>undefined</code> and <code>4</code> <code>undefined</code></li>
<li>D: <code>1</code> <code>2</code> and <code>undefined</code> <code>3</code> and <code>undefined</code> <code>4</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-7" aria-label="Permalink: Answer: D" href="#answer-d-7"></a></p>
<p dir="auto">The first argument that the <code>reduce</code> method receives is the <em>accumulator</em>, <code>x</code> in this case. The second argument is the <em>current value</em>, <code>y</code>. With the reduce method, we execute a callback function on every element in the array, which could ultimately result in one single value.</p>
<p dir="auto">In this example, we are not returning any values, we are simply logging the values of the accumulator and the current value.</p>
<p dir="auto">The value of the accumulator is equal to the previously returned value of the callback function. If you don't pass the optional <code>initialValue</code> argument to the <code>reduce</code> method, the accumulator is equal to the first element on the first call.</p>
<p dir="auto">On the first call, the accumulator (<code>x</code>) is <code>1</code>, and the current value (<code>y</code>) is <code>2</code>. We don't return from the callback function, we log the accumulator, and the current values: <code>1</code> and <code>2</code> get logged.</p>
<p dir="auto">If you don't return a value from a function, it returns <code>undefined</code>. On the next call, the accumulator is <code>undefined</code>, and the current value is <code>3</code>. <code>undefined</code> and <code>3</code> get logged.</p>
<p dir="auto">On the fourth call, we again don't return from the callback function. The accumulator is again <code>undefined</code>, and the current value is <code>4</code>. <code>undefined</code> and <code>4</code> get logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">66. With which constructor can we successfully extend the <code>Dog</code> class?</h6><a id="user-content-66-with-which-constructor-can-we-successfully-extend-the-dog-class" aria-label="Permalink: 66. With which constructor can we successfully extend the Dog class?" href="#66-with-which-constructor-can-we-successfully-extend-the-dog-class"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="class Dog {
  constructor(name) {
    this.name = name;
  }
};

class Labrador extends Dog {
  // 1
  constructor(name, size) {
    this.size = size;
  }
  // 2
  constructor(name, size) {
    super(name);
    this.size = size;
  }
  // 3
  constructor(size) {
    super(name);
    this.size = size;
  }
  // 4
  constructor(name, size) {
    this.name = name;
    this.size = size;
  }

};"><pre><span>class</span> <span>Dog</span> <span>{</span>
  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>name</span> <span>=</span> <span>name</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>class</span> <span>Labrador</span> <span>extends</span> <span>Dog</span> <span>{</span>
  <span>// 1</span>
  <span>constructor</span><span>(</span><span>name</span><span>,</span> <span>size</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>size</span> <span>=</span> <span>size</span><span>;</span>
  <span>}</span>
  <span>// 2</span>
  <span>constructor</span><span>(</span><span>name</span><span>,</span> <span>size</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span><span>name</span><span>)</span><span>;</span>
    <span>this</span><span>.</span><span>size</span> <span>=</span> <span>size</span><span>;</span>
  <span>}</span>
  <span>// 3</span>
  <span>constructor</span><span>(</span><span>size</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span><span>name</span><span>)</span><span>;</span>
    <span>this</span><span>.</span><span>size</span> <span>=</span> <span>size</span><span>;</span>
  <span>}</span>
  <span>// 4</span>
  <span>constructor</span><span>(</span><span>name</span><span>,</span> <span>size</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>name</span> <span>=</span> <span>name</span><span>;</span>
    <span>this</span><span>.</span><span>size</span> <span>=</span> <span>size</span><span>;</span>
  <span>}</span>

<span>}</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: 1</li>
<li>B: 2</li>
<li>C: 3</li>
<li>D: 4</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-16" aria-label="Permalink: Answer: B" href="#answer-b-16"></a></p>
<p dir="auto">In a derived class, you cannot access the <code>this</code> keyword before calling <code>super</code>. If you try to do that, it will throw a ReferenceError: 1 and 4 would throw a reference error.</p>
<p dir="auto">With the <code>super</code> keyword, we call that parent class's constructor with the given arguments. The parent's constructor receives the <code>name</code> argument, so we need to pass <code>name</code> to <code>super</code>.</p>
<p dir="auto">The <code>Labrador</code> class receives two arguments, <code>name</code> since it extends <code>Dog</code>, and <code>size</code> as an extra property on the <code>Labrador</code> class. They both need to be passed to the constructor function on <code>Labrador</code>, which is done correctly using constructor 2.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">67. What's the output?</h6><a id="user-content-67-whats-the-output" aria-label="Permalink: 67. What's the output?" href="#67-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="// index.js
console.log('running index.js');
import { sum } from './sum.js';
console.log(sum(1, 2));

// sum.js
console.log('running sum.js');
export const sum = (a, b) => a + b;"><pre><span>// index.js</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>'running index.js'</span><span>)</span><span>;</span>
<span>import</span> <span>{</span> <span>sum</span> <span>}</span> <span>from</span> <span>'./sum.js'</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>sum</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>)</span><span>;</span>

<span>// sum.js</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>'running sum.js'</span><span>)</span><span>;</span>
<span>export</span> <span>const</span> <span>sum</span> <span>=</span> <span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>=&gt;</span> <span>a</span> <span>+</span> <span>b</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>running index.js</code>, <code>running sum.js</code>, <code>3</code></li>
<li>B: <code>running sum.js</code>, <code>running index.js</code>, <code>3</code></li>
<li>C: <code>running sum.js</code>, <code>3</code>, <code>running index.js</code></li>
<li>D: <code>running index.js</code>, <code>undefined</code>, <code>running sum.js</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-17" aria-label="Permalink: Answer: B" href="#answer-b-17"></a></p>
<p dir="auto">With the <code>import</code> keyword, all imported modules are <em>pre-parsed</em>. This means that the imported modules get run <em>first</em>, and the code in the file that imports the module gets executed <em>after</em>.</p>
<p dir="auto">This is a difference between <code>require()</code> in CommonJS and <code>import</code>! With <code>require()</code>, you can load dependencies on demand while the code is being run. If we had used <code>require</code> instead of <code>import</code>, <code>running index.js</code>, <code>running sum.js</code>, <code>3</code> would have been logged to the console.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">68. What's the output?</h6><a id="user-content-68-whats-the-output" aria-label="Permalink: 68. What's the output?" href="#68-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log(Number(2) === Number(2));
console.log(Boolean(false) === Boolean(false));
console.log(Symbol('foo') === Symbol('foo'));"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>Number</span><span>(</span><span>2</span><span>)</span> <span>===</span> <span>Number</span><span>(</span><span>2</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>Boolean</span><span>(</span><span>false</span><span>)</span> <span>===</span> <span>Boolean</span><span>(</span><span>false</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>Symbol</span><span>(</span><span>'foo'</span><span>)</span> <span>===</span> <span>Symbol</span><span>(</span><span>'foo'</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>true</code>, <code>true</code>, <code>false</code></li>
<li>B: <code>false</code>, <code>true</code>, <code>false</code></li>
<li>C: <code>true</code>, <code>false</code>, <code>true</code></li>
<li>D: <code>true</code>, <code>true</code>, <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-22" aria-label="Permalink: Answer: A" href="#answer-a-22"></a></p>
<p dir="auto">Every Symbol is entirely unique. The purpose of the argument passed to the Symbol is to give the Symbol a description. The value of the Symbol is not dependent on the passed argument. As we test equality, we are creating two entirely new symbols: the first <code>Symbol('foo')</code>, and the second <code>Symbol('foo')</code>. These two values are unique and not equal to each other, <code>Symbol('foo') === Symbol('foo')</code> returns <code>false</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">69. What's the output?</h6><a id="user-content-69-whats-the-output" aria-label="Permalink: 69. What's the output?" href="#69-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const name = 'Lydia Hallie';
console.log(name.padStart(13));
console.log(name.padStart(2));"><pre><span>const</span> <span>name</span> <span>=</span> <span>'Lydia Hallie'</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>.</span><span>padStart</span><span>(</span><span>13</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>.</span><span>padStart</span><span>(</span><span>2</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"Lydia Hallie"</code>, <code>"Lydia Hallie"</code></li>
<li>B: <code>" Lydia Hallie"</code>, <code>" Lydia Hallie"</code> (<code>"[13x whitespace]Lydia Hallie"</code>, <code>"[2x whitespace]Lydia Hallie"</code>)</li>
<li>C: <code>" Lydia Hallie"</code>, <code>"Lydia Hallie"</code> (<code>"[1x whitespace]Lydia Hallie"</code>, <code>"Lydia Hallie"</code>)</li>
<li>D: <code>"Lydia Hallie"</code>, <code>"Lyd"</code>,</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-19" aria-label="Permalink: Answer: C" href="#answer-c-19"></a></p>
<p dir="auto">With the <code>padStart</code> method, we can add padding to the beginning of a string. The value passed to this method is the <em>total</em> length of the string together with the padding. The string <code>"Lydia Hallie"</code> has a length of <code>12</code>. <code>name.padStart(13)</code> inserts 1 space at the start of the string, because 12 + 1 is 13.</p>
<p dir="auto">If the argument passed to the <code>padStart</code> method is smaller than the length of the array, no padding will be added.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">70. What's the output?</h6><a id="user-content-70-whats-the-output" aria-label="Permalink: 70. What's the output?" href="#70-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log('🥑' + '💻');"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>'🥑'</span> <span>+</span> <span>'💻'</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"🥑💻"</code></li>
<li>B: <code>257548</code></li>
<li>C: A string containing their code points</li>
<li>D: Error</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-23" aria-label="Permalink: Answer: A" href="#answer-a-23"></a></p>
<p dir="auto">With the <code>+</code> operator, you can concatenate strings. In this case, we are concatenating the string <code>"🥑"</code> with the string <code>"💻"</code>, resulting in <code>"🥑💻"</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">71. How can we log the values that are commented out after the console.log statement?</h6><a id="user-content-71-how-can-we-log-the-values-that-are-commented-out-after-the-consolelog-statement" aria-label="Permalink: 71. How can we log the values that are commented out after the console.log statement?" href="#71-how-can-we-log-the-values-that-are-commented-out-after-the-consolelog-statement"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function* startGame() {
  const answer = yield 'Do you love JavaScript?';
  if (answer !== 'Yes') {
    return &quot;Oh wow... Guess we're done here&quot;;
  }
  return 'JavaScript loves you back ❤️';
}

const game = startGame();
console.log(/* 1 */); // Do you love JavaScript?
console.log(/* 2 */); // JavaScript loves you back ❤️"><pre><span>function</span><span>*</span> <span>startGame</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>answer</span> <span>=</span> <span>yield</span> <span>'Do you love JavaScript?'</span><span>;</span>
  <span>if</span> <span>(</span><span>answer</span> <span>!==</span> <span>'Yes'</span><span>)</span> <span>{</span>
    <span>return</span> <span>"Oh wow... Guess we're done here"</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>'JavaScript loves you back ❤️'</span><span>;</span>
<span>}</span>

<span>const</span> <span>game</span> <span>=</span> <span>startGame</span><span>(</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>/* 1 */</span><span>)</span><span>;</span> <span>// Do you love JavaScript?</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>/* 2 */</span><span>)</span><span>;</span> <span>// JavaScript loves you back ❤️</span></pre></div>
<ul dir="auto">
<li>A: <code>game.next("Yes").value</code> and <code>game.next().value</code></li>
<li>B: <code>game.next.value("Yes")</code> and <code>game.next.value()</code></li>
<li>C: <code>game.next().value</code> and <code>game.next("Yes").value</code></li>
<li>D: <code>game.next.value()</code> and <code>game.next.value("Yes")</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-20" aria-label="Permalink: Answer: C" href="#answer-c-20"></a></p>
<p dir="auto">A generator function "pauses" its execution when it sees the <code>yield</code> keyword. First, we have to let the function yield the string "Do you love JavaScript?", which can be done by calling <code>game.next().value</code>.</p>
<p dir="auto">Every line is executed, until it finds the first <code>yield</code> keyword. There is a <code>yield</code> keyword on the first line within the function: the execution stops with the first yield! <em>This means that the variable <code>answer</code> is not defined yet!</em></p>
<p dir="auto">When we call <code>game.next("Yes").value</code>, the previous <code>yield</code> is replaced with the value of the parameters passed to the <code>next()</code> function, <code>"Yes"</code> in this case. The value of the variable <code>answer</code> is now equal to <code>"Yes"</code>. The condition of the if-statement returns <code>false</code>, and <code>JavaScript loves you back ❤️</code> gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">72. What's the output?</h6><a id="user-content-72-whats-the-output" aria-label="Permalink: 72. What's the output?" href="#72-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log(String.raw`Hello\nworld`);"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>String</span><span>.</span><span>raw</span><span>`Hello\nworld`</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Hello world!</code></li>
<li>B: <code>Hello</code> <br>&nbsp; &nbsp; &nbsp;<code>world</code></li>
<li>C: <code>Hello\nworld</code></li>
<li>D: <code>Hello\n</code> <br> &nbsp; &nbsp; &nbsp;<code>world</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-21" aria-label="Permalink: Answer: C" href="#answer-c-21"></a></p>
<p dir="auto"><code>String.raw</code> returns a string where the escapes (<code>\n</code>, <code>\v</code>, <code>\t</code> etc.) are ignored! Backslashes can be an issue since you could end up with something like:</p>
<p dir="auto"><code>const path = `C:\Documents\Projects\table.html`</code></p>
<p dir="auto">Which would result in:</p>
<p dir="auto"><code>"C:DocumentsProjects able.html"</code></p>
<p dir="auto">With <code>String.raw</code>, it would simply ignore the escape and print:</p>
<p dir="auto"><code>C:\Documents\Projects\table.html</code></p>
<p dir="auto">In this case, the string is <code>Hello\nworld</code>, which gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">73. What's the output?</h6><a id="user-content-73-whats-the-output" aria-label="Permalink: 73. What's the output?" href="#73-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="async function getData() {
  return await Promise.resolve('I made it!');
}

const data = getData();
console.log(data);"><pre><span>async</span> <span>function</span> <span>getData</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>await</span> <span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>'I made it!'</span><span>)</span><span>;</span>
<span>}</span>

<span>const</span> <span>data</span> <span>=</span> <span>getData</span><span>(</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>data</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"I made it!"</code></li>
<li>B: <code>Promise {&lt;resolved&gt;: "I made it!"}</code></li>
<li>C: <code>Promise {&lt;pending&gt;}</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-22" aria-label="Permalink: Answer: C" href="#answer-c-22"></a></p>
<p dir="auto">An async function always returns a promise. The <code>await</code> still has to wait for the promise to resolve: a pending promise gets returned when we call <code>getData()</code> in order to set <code>data</code> equal to it.</p>
<p dir="auto">If we wanted to get access to the resolved value <code>"I made it"</code>, we could have used the <code>.then()</code> method on <code>data</code>:</p>
<p dir="auto"><code>data.then(res =&gt; console.log(res))</code></p>
<p dir="auto">This would've logged <code>"I made it!"</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">74. What's the output?</h6><a id="user-content-74-whats-the-output" aria-label="Permalink: 74. What's the output?" href="#74-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function addToList(item, list) {
  return list.push(item);
}

const result = addToList('apple', ['banana']);
console.log(result);"><pre><span>function</span> <span>addToList</span><span>(</span><span>item</span><span>,</span> <span>list</span><span>)</span> <span>{</span>
  <span>return</span> <span>list</span><span>.</span><span>push</span><span>(</span><span>item</span><span>)</span><span>;</span>
<span>}</span>

<span>const</span> <span>result</span> <span>=</span> <span>addToList</span><span>(</span><span>'apple'</span><span>,</span> <span>[</span><span>'banana'</span><span>]</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>result</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>['apple', 'banana']</code></li>
<li>B: <code>2</code></li>
<li>C: <code>true</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-18" aria-label="Permalink: Answer: B" href="#answer-b-18"></a></p>
<p dir="auto">The <code>.push()</code> method returns the <em>length</em> of the new array! Previously, the array contained one element (the string <code>"banana"</code>) and had a length of <code>1</code>. After adding the string <code>"apple"</code> to the array, the array contains two elements, and has a length of <code>2</code>. This gets returned from the <code>addToList</code> function.</p>
<p dir="auto">The <code>push</code> method modifies the original array. If you wanted to return the <em>array</em> from the function rather than the <em>length of the array</em>, you should have returned <code>list</code> after pushing <code>item</code> to it.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">75. What's the output?</h6><a id="user-content-75-whats-the-output" aria-label="Permalink: 75. What's the output?" href="#75-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const box = { x: 10, y: 20 };

Object.freeze(box);

const shape = box;
shape.x = 100;

console.log(shape);"><pre><span>const</span> <span>box</span> <span>=</span> <span>{</span> <span>x</span>: <span>10</span><span>,</span> <span>y</span>: <span>20</span> <span>}</span><span>;</span>

<span>Object</span><span>.</span><span>freeze</span><span>(</span><span>box</span><span>)</span><span>;</span>

<span>const</span> <span>shape</span> <span>=</span> <span>box</span><span>;</span>
<span>shape</span><span>.</span><span>x</span> <span>=</span> <span>100</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>shape</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{ x: 100, y: 20 }</code></li>
<li>B: <code>{ x: 10, y: 20 }</code></li>
<li>C: <code>{ x: 100 }</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-19" aria-label="Permalink: Answer: B" href="#answer-b-19"></a></p>
<p dir="auto"><code>Object.freeze</code> makes it impossible to add, remove, or modify properties of an object (unless the property's value is another object).</p>
<p dir="auto">When we create the variable <code>shape</code> and set it equal to the frozen object <code>box</code>, <code>shape</code> also refers to a frozen object. You can check whether an object is frozen by using <code>Object.isFrozen</code>. In this case, <code>Object.isFrozen(shape)</code> would return true, since the variable <code>shape</code> has a reference to a frozen object.</p>
<p dir="auto">Since <code>shape</code> is frozen, and since the value of <code>x</code> is not an object, we cannot modify the property <code>x</code>. <code>x</code> is still equal to <code>10</code>, and <code>{ x: 10, y: 20 }</code> gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">76. What's the output?</h6><a id="user-content-76-whats-the-output" aria-label="Permalink: 76. What's the output?" href="#76-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const { firstName: myName } = { firstName: 'Lydia' };

console.log(firstName);"><pre><span>const</span> <span>{</span> <span>firstName</span>: <span>myName</span> <span>}</span> <span>=</span> <span>{</span> <span>firstName</span>: <span>'Lydia'</span> <span>}</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>firstName</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"Lydia"</code></li>
<li>B: <code>"myName"</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-8" aria-label="Permalink: Answer: D" href="#answer-d-8"></a></p>
<p dir="auto">By using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow">destructuring assignment</a> syntax we can unpack values from arrays, or properties from objects, into distinct variables:</p>
<div dir="auto" data-snippet-clipboard-copy-content="const { firstName } = { firstName: 'Lydia' };
// ES5 version:
// var firstName = { firstName: 'Lydia' }.firstName;

console.log(firstName); // &quot;Lydia&quot;"><pre><span>const</span> <span>{</span> firstName <span>}</span> <span>=</span> <span>{</span> <span>firstName</span>: <span>'Lydia'</span> <span>}</span><span>;</span>
<span>// ES5 version:</span>
<span>// var firstName = { firstName: 'Lydia' }.firstName;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>firstName</span><span>)</span><span>;</span> <span>// "Lydia"</span></pre></div>
<p dir="auto">Also, a property can be unpacked from an object and assigned to a variable with a different name than the object property:</p>
<div dir="auto" data-snippet-clipboard-copy-content="const { firstName: myName } = { firstName: 'Lydia' };
// ES5 version:
// var myName = { firstName: 'Lydia' }.firstName;

console.log(myName); // &quot;Lydia&quot;
console.log(firstName); // Uncaught ReferenceError: firstName is not defined"><pre><span>const</span> <span>{</span> <span>firstName</span>: <span>myName</span> <span>}</span> <span>=</span> <span>{</span> <span>firstName</span>: <span>'Lydia'</span> <span>}</span><span>;</span>
<span>// ES5 version:</span>
<span>// var myName = { firstName: 'Lydia' }.firstName;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>myName</span><span>)</span><span>;</span> <span>// "Lydia"</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>firstName</span><span>)</span><span>;</span> <span>// Uncaught ReferenceError: firstName is not defined</span></pre></div>
<p dir="auto">Therefore, <code>firstName</code> does not exist as a variable, thus attempting to access its value will raise a <code>ReferenceError</code>.</p>
<p dir="auto"><strong>Note:</strong> Be aware of the <code>global scope</code> properties:</p>
<div dir="auto" data-snippet-clipboard-copy-content="const { name: myName } = { name: 'Lydia' };

console.log(myName); // &quot;lydia&quot;
console.log(name); // &quot;&quot; ----- Browser e.g. Chrome
console.log(name); // ReferenceError: name is not defined  ----- NodeJS
"><pre><span>const</span> <span>{</span> <span>name</span>: <span>myName</span> <span>}</span> <span>=</span> <span>{</span> <span>name</span>: <span>'Lydia'</span> <span>}</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>myName</span><span>)</span><span>;</span> <span>// "lydia"</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>)</span><span>;</span> <span>// "" ----- Browser e.g. Chrome</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>)</span><span>;</span> <span>// ReferenceError: name is not defined  ----- NodeJS</span></pre></div>
<p dir="auto">Whenever Javascript is unable to find a variable within the <em>current scope</em>, it climbs up the <a href="https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch3.md">Scope chain</a> and searches for it and if it reaches the top-level scope, aka <strong>Global scope</strong>, and still doesn't find it, it will throw a <code>ReferenceError</code>.</p>
<ul dir="auto">
<li>
<p dir="auto">In <strong>Browsers</strong> such as <em>Chrome</em>, <code>name</code> is a <em>deprecated global scope property</em>. In this example, the code is running inside <em>global scope</em> and there is no user-defined local variable for <code>name</code>, therefore it searches the predefined <em>variables/properties</em> in the global scope which is in the case of browsers, it searches through <code>window</code> object and it will extract the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/name" rel="nofollow">window.name</a> value which is equal to an <strong>empty string</strong>.</p>
</li>
<li>
<p dir="auto">In <strong>NodeJS</strong>, there is no such property on the <code>global</code> object, thus attempting to access a non-existent variable will raise a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined" rel="nofollow">ReferenceError</a>.</p>
</li>
</ul>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">77. Is this a pure function?</h6><a id="user-content-77-is-this-a-pure-function" aria-label="Permalink: 77. Is this a pure function?" href="#77-is-this-a-pure-function"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function sum(a, b) {
  return a + b;
}"><pre><span>function</span> <span>sum</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>{</span>
  <span>return</span> <span>a</span> <span>+</span> <span>b</span><span>;</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: Yes</li>
<li>B: No</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-24" aria-label="Permalink: Answer: A" href="#answer-a-24"></a></p>
<p dir="auto">A pure function is a function that <em>always</em> returns the same result, if the same arguments are passed.</p>
<p dir="auto">The <code>sum</code> function always returns the same result. If we pass <code>1</code> and <code>2</code>, it will <em>always</em> return <code>3</code> without side effects. If we pass <code>5</code> and <code>10</code>, it will <em>always</em> return <code>15</code>, and so on. This is the definition of a pure function.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">78. What is the output?</h6><a id="user-content-78-what-is-the-output" aria-label="Permalink: 78. What is the output?" href="#78-what-is-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const add = () => {
  const cache = {};
  return num => {
    if (num in cache) {
      return `From cache! ${cache[num]}`;
    } else {
      const result = num + 10;
      cache[num] = result;
      return `Calculated! ${result}`;
    }
  };
};

const addFunction = add();
console.log(addFunction(10));
console.log(addFunction(10));
console.log(addFunction(5 * 2));"><pre><span>const</span> <span>add</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>const</span> <span>cache</span> <span>=</span> <span>{</span><span>}</span><span>;</span>
  <span>return</span> <span>num</span> <span>=&gt;</span> <span>{</span>
    <span>if</span> <span>(</span><span>num</span> <span>in</span> <span>cache</span><span>)</span> <span>{</span>
      <span>return</span> <span>`From cache! <span><span>${</span><span>cache</span><span>[</span><span>num</span><span>]</span><span>}</span></span>`</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>const</span> <span>result</span> <span>=</span> <span>num</span> <span>+</span> <span>10</span><span>;</span>
      <span>cache</span><span>[</span><span>num</span><span>]</span> <span>=</span> <span>result</span><span>;</span>
      <span>return</span> <span>`Calculated! <span><span>${</span><span>result</span><span>}</span></span>`</span><span>;</span>
    <span>}</span>
  <span>}</span><span>;</span>
<span>}</span><span>;</span>

<span>const</span> <span>addFunction</span> <span>=</span> <span>add</span><span>(</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>addFunction</span><span>(</span><span>10</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>addFunction</span><span>(</span><span>10</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>addFunction</span><span>(</span><span>5</span> <span>*</span> <span>2</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Calculated! 20</code> <code>Calculated! 20</code> <code>Calculated! 20</code></li>
<li>B: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Calculated! 20</code></li>
<li>C: <code>Calculated! 20</code> <code>From cache! 20</code> <code>From cache! 20</code></li>
<li>D: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Error</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-23" aria-label="Permalink: Answer: C" href="#answer-c-23"></a></p>
<p dir="auto">The <code>add</code> function is a <em>memoized</em> function. With memoization, we can cache the results of a function in order to speed up its execution. In this case, we create a <code>cache</code> object that stores the previously returned values.</p>
<p dir="auto">If we call the <code>addFunction</code> function again with the same argument, it first checks whether it has already gotten that value in its cache. If that's the case, the cache value will be returned, which saves execution time. Otherwise, if it's not cached, it will calculate the value and store it afterward.</p>
<p dir="auto">We call the <code>addFunction</code> function three times with the same value: on the first invocation, the value of the function when <code>num</code> is equal to <code>10</code> isn't cached yet. The condition of the if-statement <code>num in cache</code> returns <code>false</code>, and the else block gets executed: <code>Calculated! 20</code> gets logged, and the value of the result gets added to the cache object. <code>cache</code> now looks like <code>{ 10: 20 }</code>.</p>
<p dir="auto">The second time, the <code>cache</code> object contains the value that gets returned for <code>10</code>. The condition of the if-statement <code>num in cache</code> returns <code>true</code>, and <code>'From cache! 20'</code> gets logged.</p>
<p dir="auto">The third time, we pass <code>5 * 2</code> to the function which gets evaluated to <code>10</code>. The <code>cache</code> object contains the value that gets returned for <code>10</code>. The condition of the if-statement <code>num in cache</code> returns <code>true</code>, and <code>'From cache! 20'</code> gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">79. What is the output?</h6><a id="user-content-79-what-is-the-output" aria-label="Permalink: 79. What is the output?" href="#79-what-is-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const myLifeSummedUp = ['☕', '💻', '🍷', '🍫'];

for (let item in myLifeSummedUp) {
  console.log(item);
}

for (let item of myLifeSummedUp) {
  console.log(item);
}"><pre><span>const</span> <span>myLifeSummedUp</span> <span>=</span> <span>[</span><span>'☕'</span><span>,</span> <span>'💻'</span><span>,</span> <span>'🍷'</span><span>,</span> <span>'🍫'</span><span>]</span><span>;</span>

<span>for</span> <span>(</span><span>let</span> <span>item</span> <span>in</span> <span>myLifeSummedUp</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>item</span><span>)</span><span>;</span>
<span>}</span>

<span>for</span> <span>(</span><span>let</span> <span>item</span> <span>of</span> <span>myLifeSummedUp</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>item</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>"☕"</code> <code>"💻"</code> <code>"🍷"</code> <code>"🍫"</code></li>
<li>B: <code>"☕"</code> <code>"💻"</code> <code>"🍷"</code> <code>"🍫"</code> and <code>"☕"</code> <code>"💻"</code> <code>"🍷"</code> <code>"🍫"</code></li>
<li>C: <code>"☕"</code> <code>"💻"</code> <code>"🍷"</code> <code>"🍫"</code> and <code>0</code> <code>1</code> <code>2</code> <code>3</code></li>
<li>D: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>{0: "☕", 1: "💻", 2: "🍷", 3: "🍫"}</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-25" aria-label="Permalink: Answer: A" href="#answer-a-25"></a></p>
<p dir="auto">With a <em>for-in</em> loop, we can iterate over <strong>enumerable</strong> properties. In an array, the enumerable properties are the "keys" of array elements, which are actually their indexes. You could see an array as:</p>
<p dir="auto"><code>{0: "☕", 1: "💻", 2: "🍷", 3: "🍫"}</code></p>
<p dir="auto">Where the keys are the enumerable properties. <code>0</code> <code>1</code> <code>2</code> <code>3</code> get logged.</p>
<p dir="auto">With a <em>for-of</em> loop, we can iterate over <strong>iterables</strong>. An array is an iterable. When we iterate over the array, the variable "item" is equal to the element it's currently iterating over, <code>"☕"</code> <code>"💻"</code> <code>"🍷"</code> <code>"🍫"</code> get logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">80. What is the output?</h6><a id="user-content-80-what-is-the-output" aria-label="Permalink: 80. What is the output?" href="#80-what-is-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const list = [1 + 2, 1 * 2, 1 / 2];
console.log(list);"><pre><span>const</span> <span>list</span> <span>=</span> <span>[</span><span>1</span> <span>+</span> <span>2</span><span>,</span> <span>1</span> <span>*</span> <span>2</span><span>,</span> <span>1</span> <span>/</span> <span>2</span><span>]</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>list</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>["1 + 2", "1 * 2", "1 / 2"]</code></li>
<li>B: <code>["12", 2, 0.5]</code></li>
<li>C: <code>[3, 2, 0.5]</code></li>
<li>D: <code>[1, 1, 1]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-24" aria-label="Permalink: Answer: C" href="#answer-c-24"></a></p>
<p dir="auto">Array elements can hold any value. Numbers, strings, objects, other arrays, null, boolean values, undefined, and other expressions such as dates, functions, and calculations.</p>
<p dir="auto">The element will be equal to the returned value. <code>1 + 2</code> returns <code>3</code>, <code>1 * 2</code> returns <code>2</code>, and <code>1 / 2</code> returns <code>0.5</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">81. What is the output?</h6><a id="user-content-81-what-is-the-output" aria-label="Permalink: 81. What is the output?" href="#81-what-is-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function sayHi(name) {
  return `Hi there, ${name}`;
}

console.log(sayHi());"><pre><span>function</span> <span>sayHi</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>return</span> <span>`Hi there, <span><span>${</span><span>name</span><span>}</span></span>`</span><span>;</span>
<span>}</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>sayHi</span><span>(</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Hi there,</code></li>
<li>B: <code>Hi there, undefined</code></li>
<li>C: <code>Hi there, null</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-20" aria-label="Permalink: Answer: B" href="#answer-b-20"></a></p>
<p dir="auto">By default, arguments have the value of <code>undefined</code>, unless a value has been passed to the function. In this case, we didn't pass a value for the <code>name</code> argument. <code>name</code> is equal to <code>undefined</code> which gets logged.</p>
<p dir="auto">In ES6, we can overwrite this default <code>undefined</code> value with default parameters. For example:</p>
<p dir="auto"><code>function sayHi(name = "Lydia") { ... }</code></p>
<p dir="auto">In this case, if we didn't pass a value or if we passed <code>undefined</code>, <code>name</code> would always be equal to the string <code>Lydia</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">82. What is the output?</h6><a id="user-content-82-what-is-the-output" aria-label="Permalink: 82. What is the output?" href="#82-what-is-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="var status = '😎';

setTimeout(() => {
  const status = '😍';

  const data = {
    status: '🥑',
    getStatus() {
      return this.status;
    },
  };

  console.log(data.getStatus());
  console.log(data.getStatus.call(this));
}, 0);"><pre><span>var</span> <span>status</span> <span>=</span> <span>'😎'</span><span>;</span>

<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>const</span> <span>status</span> <span>=</span> <span>'😍'</span><span>;</span>

  <span>const</span> <span>data</span> <span>=</span> <span>{</span>
    <span>status</span>: <span>'🥑'</span><span>,</span>
    <span>getStatus</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> <span>this</span><span>.</span><span>status</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span><span>;</span>

  <span>console</span><span>.</span><span>log</span><span>(</span><span>data</span><span>.</span><span>getStatus</span><span>(</span><span>)</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>data</span><span>.</span><span>getStatus</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span><span>)</span><span>;</span>
<span>}</span><span>,</span> <span>0</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"🥑"</code> and <code>"😍"</code></li>
<li>B: <code>"🥑"</code> and <code>"😎"</code></li>
<li>C: <code>"😍"</code> and <code>"😎"</code></li>
<li>D: <code>"😎"</code> and <code>"😎"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-21" aria-label="Permalink: Answer: B" href="#answer-b-21"></a></p>
<p dir="auto">The value of the <code>this</code> keyword is dependent on where you use it. In a <strong>method</strong>, like the <code>getStatus</code> method, the <code>this</code> keyword refers to <em>the object that the method belongs to</em>. The method belongs to the <code>data</code> object, so <code>this</code> refers to the <code>data</code> object. When we log <code>this.status</code>, the <code>status</code> property on the <code>data</code> object gets logged, which is <code>"🥑"</code>.</p>
<p dir="auto">With the <code>call</code> method, we can change the object to which the <code>this</code> keyword refers. In <strong>functions</strong>, the <code>this</code> keyword refers to the <em>the object that the function belongs to</em>. We declared the <code>setTimeout</code> function on the <em>global object</em>, so within the <code>setTimeout</code> function, the <code>this</code> keyword refers to the <em>global object</em>. On the global object, there is a variable called <em>status</em> with the value of <code>"😎"</code>. When logging <code>this.status</code>, <code>"😎"</code> gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">83. What is the output?</h6><a id="user-content-83-what-is-the-output" aria-label="Permalink: 83. What is the output?" href="#83-what-is-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = {
  name: 'Lydia',
  age: 21,
};

let city = person.city;
city = 'Amsterdam';

console.log(person);"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span>
  <span>name</span>: <span>'Lydia'</span><span>,</span>
  <span>age</span>: <span>21</span><span>,</span>
<span>}</span><span>;</span>

<span>let</span> <span>city</span> <span>=</span> <span>person</span><span>.</span><span>city</span><span>;</span>
<span>city</span> <span>=</span> <span>'Amsterdam'</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>person</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{ name: "Lydia", age: 21 }</code></li>
<li>B: <code>{ name: "Lydia", age: 21, city: "Amsterdam" }</code></li>
<li>C: <code>{ name: "Lydia", age: 21, city: undefined }</code></li>
<li>D: <code>"Amsterdam"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-26" aria-label="Permalink: Answer: A" href="#answer-a-26"></a></p>
<p dir="auto">We set the variable <code>city</code> equal to the value of the property called <code>city</code> on the <code>person</code> object. There is no property on this object called <code>city</code>, so the variable <code>city</code> has the value of <code>undefined</code>.</p>
<p dir="auto">Note that we are <em>not</em> referencing the <code>person</code> object itself! We simply set the variable <code>city</code> equal to the current value of the <code>city</code> property on the <code>person</code> object.</p>
<p dir="auto">Then, we set <code>city</code> equal to the string <code>"Amsterdam"</code>. This doesn't change the person object: there is no reference to that object.</p>
<p dir="auto">When logging the <code>person</code> object, the unmodified object gets returned.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">84. What is the output?</h6><a id="user-content-84-what-is-the-output" aria-label="Permalink: 84. What is the output?" href="#84-what-is-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function checkAge(age) {
  if (age < 18) {
    const message = &quot;Sorry, you're too young.&quot;;
  } else {
    const message = &quot;Yay! You're old enough!&quot;;
  }

  return message;
}

console.log(checkAge(21));"><pre><span>function</span> <span>checkAge</span><span>(</span><span>age</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>age</span> <span>&lt;</span> <span>18</span><span>)</span> <span>{</span>
    <span>const</span> <span>message</span> <span>=</span> <span>"Sorry, you're too young."</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>const</span> <span>message</span> <span>=</span> <span>"Yay! You're old enough!"</span><span>;</span>
  <span>}</span>

  <span>return</span> <span>message</span><span>;</span>
<span>}</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>checkAge</span><span>(</span><span>21</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"Sorry, you're too young."</code></li>
<li>B: <code>"Yay! You're old enough!"</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-25" aria-label="Permalink: Answer: C" href="#answer-c-25"></a></p>
<p dir="auto">Variables with the <code>const</code> and <code>let</code> keywords are <em>block-scoped</em>. A block is anything between curly brackets (<code>{ }</code>). In this case, the curly brackets of the if/else statements. You cannot reference a variable outside of the block it's declared in, a ReferenceError gets thrown.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">85. What kind of information would get logged?</h6><a id="user-content-85-what-kind-of-information-would-get-logged" aria-label="Permalink: 85. What kind of information would get logged?" href="#85-what-kind-of-information-would-get-logged"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="fetch('https://www.website.com/api/user/1')
  .then(res => res.json())
  .then(res => console.log(res));"><pre><span>fetch</span><span>(</span><span>'https://www.website.com/api/user/1'</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>res</span> <span>=&gt;</span> <span>res</span><span>.</span><span>json</span><span>(</span><span>)</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>res</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>res</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: The result of the <code>fetch</code> method.</li>
<li>B: The result of the second invocation of the <code>fetch</code> method.</li>
<li>C: The result of the callback in the previous <code>.then()</code>.</li>
<li>D: It would always be undefined.</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-26" aria-label="Permalink: Answer: C" href="#answer-c-26"></a></p>
<p dir="auto">The value of <code>res</code> in the second <code>.then</code> is equal to the returned value of the previous <code>.then</code>. You can keep chaining <code>.then</code>s like this, where the value is passed to the next handler.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">86. Which option is a way to set <code>hasName</code> equal to <code>true</code>, provided you cannot pass <code>true</code> as an argument?</h6><a id="user-content-86-which-option-is-a-way-to-set-hasname-equal-to-true-provided-you-cannot-pass-true-as-an-argument" aria-label="Permalink: 86. Which option is a way to set hasName equal to true, provided you cannot pass true as an argument?" href="#86-which-option-is-a-way-to-set-hasname-equal-to-true-provided-you-cannot-pass-true-as-an-argument"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function getName(name) {
  const hasName = //
}"><pre><span>function</span> <span>getName</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>const</span> <span>hasName</span> <span>=</span> <span>//</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: <code>!!name</code></li>
<li>B: <code>name</code></li>
<li>C: <code>new Boolean(name)</code></li>
<li>D: <code>name.length</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-27" aria-label="Permalink: Answer: A" href="#answer-a-27"></a></p>
<p dir="auto">With <code>!!name</code>, we determine whether the value of <code>name</code> is truthy or falsy. If the name is truthy, which we want to test for, <code>!name</code> returns <code>false</code>. <code>!false</code> (which is what <code>!!name</code> practically is) returns <code>true</code>.</p>
<p dir="auto">By setting <code>hasName</code> equal to <code>name</code>, you set <code>hasName</code> equal to whatever value you passed to the <code>getName</code> function, not the boolean value <code>true</code>.</p>
<p dir="auto"><code>new Boolean(true)</code> returns an object wrapper, not the boolean value itself.</p>
<p dir="auto"><code>name.length</code> returns the length of the passed argument, not whether it's <code>true</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">87. What's the output?</h6><a id="user-content-87-whats-the-output" aria-label="Permalink: 87. What's the output?" href="#87-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log('I want pizza'[0]);"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>'I want pizza'</span><span>[</span><span>0</span><span>]</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"""</code></li>
<li>B: <code>"I"</code></li>
<li>C: <code>SyntaxError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-22" aria-label="Permalink: Answer: B" href="#answer-b-22"></a></p>
<p dir="auto">In order to get a character at a specific index of a string, you can use bracket notation. The first character in the string has index 0, and so on. In this case, we want to get the element with index 0, the character <code>"I'</code>, which gets logged.</p>
<p dir="auto">Note that this method is not supported in IE7 and below. In that case, use <code>.charAt()</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">88. What's the output?</h6><a id="user-content-88-whats-the-output" aria-label="Permalink: 88. What's the output?" href="#88-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function sum(num1, num2 = num1) {
  console.log(num1 + num2);
}

sum(10);"><pre><span>function</span> <span>sum</span><span>(</span><span>num1</span><span>,</span> <span>num2</span> <span>=</span> <span>num1</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>num1</span> <span>+</span> <span>num2</span><span>)</span><span>;</span>
<span>}</span>

<span>sum</span><span>(</span><span>10</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>NaN</code></li>
<li>B: <code>20</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-23" aria-label="Permalink: Answer: B" href="#answer-b-23"></a></p>
<p dir="auto">You can set a default parameter's value equal to another parameter of the function, as long as they've been defined <em>before</em> the default parameter. We pass the value <code>10</code> to the <code>sum</code> function. If the <code>sum</code> function only receives 1 argument, it means that the value for <code>num2</code> is not passed, and the value of <code>num1</code> is equal to the passed value <code>10</code> in this case. The default value of <code>num2</code> is the value of <code>num1</code>, which is <code>10</code>. <code>num1 + num2</code> returns <code>20</code>.</p>
<p dir="auto">If you're trying to set a default parameter's value equal to a parameter that is defined <em>after</em> (to the right), the parameter's value hasn't been initialized yet, which will throw an error.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">89. What's the output?</h6><a id="user-content-89-whats-the-output" aria-label="Permalink: 89. What's the output?" href="#89-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="// module.js
export default () => 'Hello world';
export const name = 'Lydia';

// index.js
import * as data from './module';

console.log(data);"><pre><span>// module.js</span>
<span>export</span> <span>default</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>'Hello world'</span><span>;</span>
<span>export</span> <span>const</span> <span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>

<span>// index.js</span>
<span>import</span> <span>*</span> <span>as</span> <span>data</span> <span>from</span> <span>'./module'</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>data</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{ default: function default(), name: "Lydia" }</code></li>
<li>B: <code>{ default: function default() }</code></li>
<li>C: <code>{ default: "Hello world", name: "Lydia" }</code></li>
<li>D: Global object of <code>module.js</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-28" aria-label="Permalink: Answer: A" href="#answer-a-28"></a></p>
<p dir="auto">With the <code>import * as name</code> syntax, we import <em>all exports</em> from the <code>module.js</code> file into the <code>index.js</code> file as a new object called <code>data</code> is created. In the <code>module.js</code> file, there are two exports: the default export, and a named export. The default export is a function that returns the string <code>"Hello World"</code>, and the named export is a variable called <code>name</code> which has the value of the string <code>"Lydia"</code>.</p>
<p dir="auto">The <code>data</code> object has a <code>default</code> property for the default export, other properties have the names of the named exports and their corresponding values.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">90. What's the output?</h6><a id="user-content-90-whats-the-output" aria-label="Permalink: 90. What's the output?" href="#90-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="class Person {
  constructor(name) {
    this.name = name;
  }
}

const member = new Person('John');
console.log(typeof member);"><pre><span>class</span> <span>Person</span> <span>{</span>
  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>name</span> <span>=</span> <span>name</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>const</span> <span>member</span> <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>'John'</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>typeof</span> <span>member</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"class"</code></li>
<li>B: <code>"function"</code></li>
<li>C: <code>"object"</code></li>
<li>D: <code>"string"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-27" aria-label="Permalink: Answer: C" href="#answer-c-27"></a></p>
<p dir="auto">Classes are syntactical sugar for function constructors. The equivalent of the <code>Person</code> class as a function constructor would be:</p>
<div dir="auto" data-snippet-clipboard-copy-content="function Person(name) {
  this.name = name;
}"><pre><span>function</span> <span>Person</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>name</span> <span>=</span> <span>name</span><span>;</span>
<span>}</span></pre></div>
<p dir="auto">Calling a function constructor with <code>new</code> results in the creation of an instance of <code>Person</code>, <code>typeof</code> keyword returns <code>"object"</code> for an instance. <code>typeof member</code> returns <code>"object"</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">91. What's the output?</h6><a id="user-content-91-whats-the-output" aria-label="Permalink: 91. What's the output?" href="#91-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let newList = [1, 2, 3].push(4);

console.log(newList.push(5));"><pre><span>let</span> <span>newList</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>push</span><span>(</span><span>4</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>newList</span><span>.</span><span>push</span><span>(</span><span>5</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>[1, 2, 3, 4, 5]</code></li>
<li>B: <code>[1, 2, 3, 5]</code></li>
<li>C: <code>[1, 2, 3, 4]</code></li>
<li>D: <code>Error</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-9" aria-label="Permalink: Answer: D" href="#answer-d-9"></a></p>
<p dir="auto">The <code>.push</code> method returns the <em>new length</em> of the array, not the array itself! By setting <code>newList</code> equal to <code>[1, 2, 3].push(4)</code>, we set <code>newList</code> equal to the new length of the array: <code>4</code>.</p>
<p dir="auto">Then, we try to use the <code>.push</code> method on <code>newList</code>. Since <code>newList</code> is the numerical value <code>4</code>, we cannot use the <code>.push</code> method: a TypeError is thrown.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">92. What's the output?</h6><a id="user-content-92-whats-the-output" aria-label="Permalink: 92. What's the output?" href="#92-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function giveLydiaPizza() {
  return 'Here is pizza!';
}

const giveLydiaChocolate = () =>
  &quot;Here's chocolate... now go hit the gym already.&quot;;

console.log(giveLydiaPizza.prototype);
console.log(giveLydiaChocolate.prototype);"><pre><span>function</span> <span>giveLydiaPizza</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>'Here is pizza!'</span><span>;</span>
<span>}</span>

<span>const</span> <span>giveLydiaChocolate</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span>
  <span>"Here's chocolate... now go hit the gym already."</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>giveLydiaPizza</span><span>.</span><span>prototype</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>giveLydiaChocolate</span><span>.</span><span>prototype</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{ constructor: ...}</code> <code>{ constructor: ...}</code></li>
<li>B: <code>{}</code> <code>{ constructor: ...}</code></li>
<li>C: <code>{ constructor: ...}</code> <code>{}</code></li>
<li>D: <code>{ constructor: ...}</code> <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-10" aria-label="Permalink: Answer: D" href="#answer-d-10"></a></p>
<p dir="auto">Regular functions, such as the <code>giveLydiaPizza</code> function, have a <code>prototype</code> property, which is an object (prototype object) with a <code>constructor</code> property. Arrow functions however, such as the <code>giveLydiaChocolate</code> function, do not have this <code>prototype</code> property. <code>undefined</code> gets returned when trying to access the <code>prototype</code> property using <code>giveLydiaChocolate.prototype</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">93. What's the output?</h6><a id="user-content-93-whats-the-output" aria-label="Permalink: 93. What's the output?" href="#93-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = {
  name: 'Lydia',
  age: 21,
};

for (const [x, y] of Object.entries(person)) {
  console.log(x, y);
}"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span>
  <span>name</span>: <span>'Lydia'</span><span>,</span>
  <span>age</span>: <span>21</span><span>,</span>
<span>}</span><span>;</span>

<span>for</span> <span>(</span><span>const</span> <span>[</span><span>x</span><span>,</span> <span>y</span><span>]</span> <span>of</span> <span>Object</span><span>.</span><span>entries</span><span>(</span><span>person</span><span>)</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: <code>name</code> <code>Lydia</code> and <code>age</code> <code>21</code></li>
<li>B: <code>["name", "Lydia"]</code> and <code>["age", 21]</code></li>
<li>C: <code>["name", "age"]</code> and <code>undefined</code></li>
<li>D: <code>Error</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-29" aria-label="Permalink: Answer: A" href="#answer-a-29"></a></p>
<p dir="auto"><code>Object.entries(person)</code> returns an array of nested arrays, containing the keys and objects:</p>
<p dir="auto"><code>[ [ 'name', 'Lydia' ], [ 'age', 21 ] ]</code></p>
<p dir="auto">Using the <code>for-of</code> loop, we can iterate over each element in the array, the subarrays in this case. We can destructure the subarrays instantly in the for-of loop, using <code>const [x, y]</code>. <code>x</code> is equal to the first element in the subarray, <code>y</code> is equal to the second element in the subarray.</p>
<p dir="auto">The first subarray is <code>[ "name", "Lydia" ]</code>, with <code>x</code> equal to <code>"name"</code>, and <code>y</code> equal to <code>"Lydia"</code>, which get logged.
The second subarray is <code>[ "age", 21 ]</code>, with <code>x</code> equal to <code>"age"</code>, and <code>y</code> equal to <code>21</code>, which get logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">94. What's the output?</h6><a id="user-content-94-whats-the-output" aria-label="Permalink: 94. What's the output?" href="#94-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function getItems(fruitList, ...args, favoriteFruit) {
  return [...fruitList, ...args, favoriteFruit]
}

getItems([&quot;banana&quot;, &quot;apple&quot;], &quot;pear&quot;, &quot;orange&quot;)"><pre><span>function</span> <span>getItems</span><span>(</span><span>fruitList</span><span>,</span> ...<span>args</span><span>,</span> <span>favoriteFruit</span><span>)</span> <span>{</span>
  <span>return</span> <span>[</span>...<span>fruitList</span><span>,</span> ...<span>args</span><span>,</span> <span>favoriteFruit</span><span>]</span>
<span>}</span>

<span>getItems</span><span>(</span><span>[</span><span>"banana"</span><span>,</span> <span>"apple"</span><span>]</span><span>,</span> <span>"pear"</span><span>,</span> <span>"orange"</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>["banana", "apple", "pear", "orange"]</code></li>
<li>B: <code>[["banana", "apple"], "pear", "orange"]</code></li>
<li>C: <code>["banana", "apple", ["pear"], "orange"]</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-11" aria-label="Permalink: Answer: D" href="#answer-d-11"></a></p>
<p dir="auto"><code>...args</code> is a rest parameter. The rest parameter's value is an array containing all remaining arguments, <strong>and can only be the last parameter</strong>! In this example, the rest parameter was the second parameter. This is not possible, and will throw a syntax error.</p>
<div dir="auto" data-snippet-clipboard-copy-content="function getItems(fruitList, favoriteFruit, ...args) {
  return [...fruitList, ...args, favoriteFruit];
}

getItems(['banana', 'apple'], 'pear', 'orange');"><pre><span>function</span> <span>getItems</span><span>(</span><span>fruitList</span><span>,</span> <span>favoriteFruit</span><span>,</span> ...<span>args</span><span>)</span> <span>{</span>
  <span>return</span> <span>[</span>...<span>fruitList</span><span>,</span> ...<span>args</span><span>,</span> <span>favoriteFruit</span><span>]</span><span>;</span>
<span>}</span>

<span>getItems</span><span>(</span><span>[</span><span>'banana'</span><span>,</span> <span>'apple'</span><span>]</span><span>,</span> <span>'pear'</span><span>,</span> <span>'orange'</span><span>)</span><span>;</span></pre></div>
<p dir="auto">The above example works. This returns the array <code>[ 'banana', 'apple', 'orange', 'pear' ]</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">95. What's the output?</h6><a id="user-content-95-whats-the-output" aria-label="Permalink: 95. What's the output?" href="#95-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function nums(a, b) {
  if (a > b) console.log('a is bigger');
  else console.log('b is bigger');
  return
  a + b;
}

console.log(nums(4, 2));
console.log(nums(1, 2));"><pre><span>function</span> <span>nums</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>a</span> <span>&gt;</span> <span>b</span><span>)</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'a is bigger'</span><span>)</span><span>;</span>
  <span>else</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'b is bigger'</span><span>)</span><span>;</span>
  <span>return</span>
  <span>a</span> <span>+</span> <span>b</span><span>;</span>
<span>}</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>nums</span><span>(</span><span>4</span><span>,</span> <span>2</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>nums</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>a is bigger</code>, <code>6</code> and <code>b is bigger</code>, <code>3</code></li>
<li>B: <code>a is bigger</code>, <code>undefined</code> and <code>b is bigger</code>, <code>undefined</code></li>
<li>C: <code>undefined</code> and <code>undefined</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-24" aria-label="Permalink: Answer: B" href="#answer-b-24"></a></p>
<p dir="auto">In JavaScript, we don't <em>have</em> to write the semicolon (<code>;</code>) explicitly, however the JavaScript engine still adds them after statements. This is called <strong>Automatic Semicolon Insertion</strong>. A statement can for example be variables, or keywords like <code>throw</code>, <code>return</code>, <code>break</code>, etc.</p>
<p dir="auto">Here, we wrote a <code>return</code> statement, and another value <code>a + b</code> on a <em>new line</em>. However, since it's a new line, the engine doesn't know that it's actually the value that we wanted to return. Instead, it automatically added a semicolon after <code>return</code>. You could see this as:</p>

<p dir="auto">This means that <code>a + b</code> is never reached, since a function stops running after the <code>return</code> keyword. If no value gets returned, like here, the function returns <code>undefined</code>. Note that there is no automatic insertion after <code>if/else</code> statements!</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">96. What's the output?</h6><a id="user-content-96-whats-the-output" aria-label="Permalink: 96. What's the output?" href="#96-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="class Person {
  constructor() {
    this.name = 'Lydia';
  }
}

Person = class AnotherPerson {
  constructor() {
    this.name = 'Sarah';
  }
};

const member = new Person();
console.log(member.name);"><pre><span>class</span> <span>Person</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>Person</span> <span>=</span> <span>class</span> <span>AnotherPerson</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>name</span> <span>=</span> <span>'Sarah'</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>const</span> <span>member</span> <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>member</span><span>.</span><span>name</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"Lydia"</code></li>
<li>B: <code>"Sarah"</code></li>
<li>C: <code>Error: cannot redeclare Person</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-25" aria-label="Permalink: Answer: B" href="#answer-b-25"></a></p>
<p dir="auto">We can set classes equal to other classes/function constructors. In this case, we set <code>Person</code> equal to <code>AnotherPerson</code>. The name on this constructor is <code>Sarah</code>, so the name property on the new <code>Person</code> instance <code>member</code> is <code>"Sarah"</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">97. What's the output?</h6><a id="user-content-97-whats-the-output" aria-label="Permalink: 97. What's the output?" href="#97-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const info = {
  [Symbol('a')]: 'b',
};

console.log(info);
console.log(Object.keys(info));"><pre><span>const</span> <span>info</span> <span>=</span> <span>{</span>
  <span>[</span><span>Symbol</span><span>(</span><span>'a'</span><span>)</span><span>]</span>: <span>'b'</span><span>,</span>
<span>}</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>info</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>Object</span><span>.</span><span>keys</span><span>(</span><span>info</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{Symbol('a'): 'b'}</code> and <code>["{Symbol('a')"]</code></li>
<li>B: <code>{}</code> and <code>[]</code></li>
<li>C: <code>{ a: "b" }</code> and <code>["a"]</code></li>
<li>D: <code>{Symbol('a'): 'b'}</code> and <code>[]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-12" aria-label="Permalink: Answer: D" href="#answer-d-12"></a></p>
<p dir="auto">A Symbol is not <em>enumerable</em>. The Object.keys method returns all <em>enumerable</em> key properties on an object. The Symbol won't be visible, and an empty array is returned. When logging the entire object, all properties will be visible, even non-enumerable ones.</p>
<p dir="auto">This is one of the many qualities of a symbol: besides representing an entirely unique value (which prevents accidental name collision on objects, for example when working with 2 libraries that want to add properties to the same object), you can also "hide" properties on objects this way (although not entirely. You can still access symbols using the <code>Object.getOwnPropertySymbols()</code> method).</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">98. What's the output?</h6><a id="user-content-98-whats-the-output" aria-label="Permalink: 98. What's the output?" href="#98-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const getList = ([x, ...y]) => [x, y]
const getUser = user => { name: user.name, age: user.age }

const list = [1, 2, 3, 4]
const user = { name: &quot;Lydia&quot;, age: 21 }

console.log(getList(list))
console.log(getUser(user))"><pre><span>const</span> <span>getList</span> <span>=</span> <span>(</span><span>[</span><span>x</span><span>,</span> ...<span>y</span><span>]</span><span>)</span> <span>=&gt;</span> <span>[</span><span>x</span><span>,</span> <span>y</span><span>]</span>
<span>const</span> <span>getUser</span> <span>=</span> <span>user</span> <span>=&gt;</span> <span>{</span> <span>name</span>: <span>user</span><span>.</span><span>name</span><span>,</span> <span>age</span>: <span>user</span><span>.</span><span>age</span> <span>}</span>

<span>const</span> <span>list</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span>
<span>const</span> <span>user</span> <span>=</span> <span>{</span> <span>name</span>: <span>"Lydia"</span><span>,</span> <span>age</span>: <span>21</span> <span>}</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>getList</span><span>(</span><span>list</span><span>)</span><span>)</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>getUser</span><span>(</span><span>user</span><span>)</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>[1, [2, 3, 4]]</code> and <code>SyntaxError</code></li>
<li>B: <code>[1, [2, 3, 4]]</code> and <code>{ name: "Lydia", age: 21 }</code></li>
<li>C: <code>[1, 2, 3, 4]</code> and <code>{ name: "Lydia", age: 21 }</code></li>
<li>D: <code>Error</code> and <code>{ name: "Lydia", age: 21 }</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-30" aria-label="Permalink: Answer: A" href="#answer-a-30"></a></p>
<p dir="auto">The <code>getList</code> function receives an array as its argument. Between the parentheses of the <code>getList</code> function, we destructure this array right away. You could see this as:</p>
<p dir="auto"><code>[x, ...y] = [1, 2, 3, 4]</code></p>
<p dir="auto">With the rest parameter <code>...y</code>, we put all "remaining" arguments in an array. The remaining arguments are <code>2</code>, <code>3</code> and <code>4</code> in this case. The value of <code>y</code> is an array, containing all the rest parameters. The value of <code>x</code> is equal to <code>1</code> in this case, so when we log <code>[x, y]</code>, <code>[1, [2, 3, 4]]</code> gets logged.</p>
<p dir="auto">The <code>getUser</code> function receives an object. With arrow functions, we don't <em>have</em> to write curly brackets if we just return one value. However, if you want to instantly return an <em>object</em> from an arrow function, you have to write it between parentheses, otherwise everything between the two braces will be interpreted as a block statement. In this case the code between the braces is not a valid JavaScript code, so a <code>SyntaxError</code> gets thrown.</p>
<p dir="auto">The following function would have returned an object:</p>
<p dir="auto"><code>const getUser = user =&gt; ({ name: user.name, age: user.age })</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">99. What's the output?</h6><a id="user-content-99-whats-the-output" aria-label="Permalink: 99. What's the output?" href="#99-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const name = 'Lydia';

console.log(name());"><pre><span>const</span> <span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>(</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>SyntaxError</code></li>
<li>B: <code>ReferenceError</code></li>
<li>C: <code>TypeError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-28" aria-label="Permalink: Answer: C" href="#answer-c-28"></a></p>
<p dir="auto">The variable <code>name</code> holds the value of a string, which is not a function, and thus cannot be invoked.</p>
<p dir="auto">TypeErrors get thrown when a value is not of the expected type. JavaScript expected <code>name</code> to be a function since we're trying to invoke it. It was a string however, so a TypeError gets thrown: name is not a function!</p>
<p dir="auto">SyntaxErrors get thrown when you've written something that isn't valid JavaScript, for example when you've written the word <code>return</code> as <code>retrun</code>.
ReferenceErrors get thrown when JavaScript isn't able to find a reference to a value that you're trying to access.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">100. What's the value of output?</h6><a id="user-content-100-whats-the-value-of-output" aria-label="Permalink: 100. What's the value of output?" href="#100-whats-the-value-of-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="// 🎉✨ This is my 100th question! ✨🎉

const output = `${[] &amp;&amp; 'Im'}possible!
You should${'' &amp;&amp; `n't`} see a therapist after so much JavaScript lol`;"><pre><span>// 🎉✨ This is my 100th question! ✨🎉</span>

<span>const</span> <span>output</span> <span>=</span> <span>`<span><span>${</span><span>[</span><span>]</span> <span>&amp;&amp;</span> <span>'Im'</span><span>}</span></span>possible!</span>
<span>You should<span><span>${</span><span>''</span> <span>&amp;&amp;</span> <span>`n't`</span><span>}</span></span> see a therapist after so much JavaScript lol`</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>possible! You should see a therapist after so much JavaScript lol</code></li>
<li>B: <code>Impossible! You should see a therapist after so much JavaScript lol</code></li>
<li>C: <code>possible! You shouldn't see a therapist after so much JavaScript lol</code></li>
<li>D: <code>Impossible! You shouldn't see a therapist after so much JavaScript lol</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-26" aria-label="Permalink: Answer: B" href="#answer-b-26"></a></p>
<p dir="auto"><code>[]</code> is a truthy value. With the <code>&amp;&amp;</code> operator, the right-hand value will be returned if the left-hand value is a truthy value. In this case, the left-hand value <code>[]</code> is a truthy value, so <code>"Im'</code> gets returned.</p>
<p dir="auto"><code>""</code> is a falsy value. If the left-hand value is falsy, nothing gets returned. <code>n't</code> doesn't get returned.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">101. What's the value of output?</h6><a id="user-content-101-whats-the-value-of-output" aria-label="Permalink: 101. What's the value of output?" href="#101-whats-the-value-of-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const one = false || {} || null;
const two = null || false || '';
const three = [] || 0 || true;

console.log(one, two, three);"><pre><span>const</span> <span>one</span> <span>=</span> <span>false</span> <span>||</span> <span>{</span><span>}</span> <span>||</span> <span>null</span><span>;</span>
<span>const</span> <span>two</span> <span>=</span> <span>null</span> <span>||</span> <span>false</span> <span>||</span> <span>''</span><span>;</span>
<span>const</span> <span>three</span> <span>=</span> <span>[</span><span>]</span> <span>||</span> <span>0</span> <span>||</span> <span>true</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>one</span><span>,</span> <span>two</span><span>,</span> <span>three</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>false</code> <code>null</code> <code>[]</code></li>
<li>B: <code>null</code> <code>""</code> <code>true</code></li>
<li>C: <code>{}</code> <code>""</code> <code>[]</code></li>
<li>D: <code>null</code> <code>null</code> <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-29" aria-label="Permalink: Answer: C" href="#answer-c-29"></a></p>
<p dir="auto">With the <code>||</code> operator, we can return the first truthy operand. If all values are falsy, the last operand gets returned.</p>
<p dir="auto"><code>(false || {} || null)</code>: the empty object <code>{}</code> is a truthy value. This is the first (and only) truthy value, which gets returned. <code>one</code> is equal to <code>{}</code>.</p>
<p dir="auto"><code>(null || false || "")</code>: all operands are falsy values. This means that the last operand, <code>""</code> gets returned. <code>two</code> is equal to <code>""</code>.</p>
<p dir="auto"><code>([] || 0 || "")</code>: the empty array<code>[]</code> is a truthy value. This is the first truthy value, which gets returned. <code>three</code> is equal to <code>[]</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">102. What's the value of output?</h6><a id="user-content-102-whats-the-value-of-output" aria-label="Permalink: 102. What's the value of output?" href="#102-whats-the-value-of-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const myPromise = () => Promise.resolve('I have resolved!');

function firstFunction() {
  myPromise().then(res => console.log(res));
  console.log('second');
}

async function secondFunction() {
  console.log(await myPromise());
  console.log('second');
}

firstFunction();
secondFunction();"><pre><span>const</span> <span>myPromise</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>'I have resolved!'</span><span>)</span><span>;</span>

<span>function</span> <span>firstFunction</span><span>(</span><span>)</span> <span>{</span>
  <span>myPromise</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>res</span><span>)</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>'second'</span><span>)</span><span>;</span>
<span>}</span>

<span>async</span> <span>function</span> <span>secondFunction</span><span>(</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>await</span> <span>myPromise</span><span>(</span><span>)</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>'second'</span><span>)</span><span>;</span>
<span>}</span>

<span>firstFunction</span><span>(</span><span>)</span><span>;</span>
<span>secondFunction</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>I have resolved!</code>, <code>second</code> and <code>I have resolved!</code>, <code>second</code></li>
<li>B: <code>second</code>, <code>I have resolved!</code> and <code>second</code>, <code>I have resolved!</code></li>
<li>C: <code>I have resolved!</code>, <code>second</code> and <code>second</code>, <code>I have resolved!</code></li>
<li>D: <code>second</code>, <code>I have resolved!</code> and <code>I have resolved!</code>, <code>second</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-13" aria-label="Permalink: Answer: D" href="#answer-d-13"></a></p>
<p dir="auto">With a promise, we basically say <em>I want to execute this function, but I'll put it aside for now while it's running since this might take a while. Only when a certain value is resolved (or rejected), and when the call stack is empty, I want to use this value.</em></p>
<p dir="auto">We can get this value with both <code>.then</code> and the <code>await</code> keywords in an <code>async</code> function. Although we can get a promise's value with both <code>.then</code> and <code>await</code>, they work a bit differently.</p>
<p dir="auto">In the <code>firstFunction</code>, we (sort of) put the myPromise function aside while it was running, but continued running the other code, which is <code>console.log('second')</code> in this case. Then, the function resolved with the string <code>I have resolved</code>, which then got logged after it saw that the callstack was empty.</p>
<p dir="auto">With the await keyword in <code>secondFunction</code>, we literally pause the execution of an async function until the value has been resolved before moving to the next line.</p>
<p dir="auto">This means that it waited for the <code>myPromise</code> to resolve with the value <code>I have resolved</code>, and only once that happened, we moved to the next line: <code>second</code> got logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">103. What's the value of output?</h6><a id="user-content-103-whats-the-value-of-output" aria-label="Permalink: 103. What's the value of output?" href="#103-whats-the-value-of-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const set = new Set();

set.add(1);
set.add('Lydia');
set.add({ name: 'Lydia' });

for (let item of set) {
  console.log(item + 2);
}"><pre><span>const</span> <span>set</span> <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>;</span>

<span>set</span><span>.</span><span>add</span><span>(</span><span>1</span><span>)</span><span>;</span>
<span>set</span><span>.</span><span>add</span><span>(</span><span>'Lydia'</span><span>)</span><span>;</span>
<span>set</span><span>.</span><span>add</span><span>(</span><span>{</span> <span>name</span>: <span>'Lydia'</span> <span>}</span><span>)</span><span>;</span>

<span>for</span> <span>(</span><span>let</span> <span>item</span> <span>of</span> <span>set</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>item</span> <span>+</span> <span>2</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: <code>3</code>, <code>NaN</code>, <code>NaN</code></li>
<li>B: <code>3</code>, <code>7</code>, <code>NaN</code></li>
<li>C: <code>3</code>, <code>Lydia2</code>, <code>[object Object]2</code></li>
<li>D: <code>"12"</code>, <code>Lydia2</code>, <code>[object Object]2</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-30" aria-label="Permalink: Answer: C" href="#answer-c-30"></a></p>
<p dir="auto">The <code>+</code> operator is not only used for adding numerical values, but we can also use it to concatenate strings. Whenever the JavaScript engine sees that one or more values are not a number, it coerces the number into a string.</p>
<p dir="auto">The first one is <code>1</code>, which is a numerical value. <code>1 + 2</code> returns the number 3.</p>
<p dir="auto">However, the second one is a string <code>"Lydia"</code>. <code>"Lydia"</code> is a string and <code>2</code> is a number: <code>2</code> gets coerced into a string. <code>"Lydia"</code> and <code>"2"</code> get concatenated, which results in the string <code>"Lydia2"</code>.</p>
<p dir="auto"><code>{ name: "Lydia" }</code> is an object. Neither a number nor an object is a string, so it stringifies both. Whenever we stringify a regular object, it becomes <code>"[object Object]"</code>. <code>"[object Object]"</code> concatenated with <code>"2"</code> becomes <code>"[object Object]2"</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">104. What's its value?</h6><a id="user-content-104-whats-its-value" aria-label="Permalink: 104. What's its value?" href="#104-whats-its-value"></a></p>

<ul dir="auto">
<li>A: <code>5</code></li>
<li>B: <code>Promise {&lt;pending&gt;: 5}</code></li>
<li>C: <code>Promise&nbsp;{&lt;fulfilled&gt;: 5}</code></li>
<li>D: <code>Error</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-31" aria-label="Permalink: Answer: C" href="#answer-c-31"></a></p>
<p dir="auto">We can pass any type of value we want to <code>Promise.resolve</code>, either a promise or a non-promise. The method itself returns a promise with the resolved value (<code>&lt;fulfilled&gt;</code>). If you pass a regular function, it'll be a resolved promise with a regular value. If you pass a promise, it'll be a resolved promise with the resolved value of that passed promise.</p>
<p dir="auto">In this case, we just passed the numerical value <code>5</code>. It returns a resolved promise with the value <code>5</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">105. What's its value?</h6><a id="user-content-105-whats-its-value" aria-label="Permalink: 105. What's its value?" href="#105-whats-its-value"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function compareMembers(person1, person2 = person) {
  if (person1 !== person2) {
    console.log('Not the same!');
  } else {
    console.log('They are the same!');
  }
}

const person = { name: 'Lydia' };

compareMembers(person);"><pre><span>function</span> <span>compareMembers</span><span>(</span><span>person1</span><span>,</span> <span>person2</span> <span>=</span> <span>person</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>person1</span> <span>!==</span> <span>person2</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'Not the same!'</span><span>)</span><span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'They are the same!'</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>const</span> <span>person</span> <span>=</span> <span>{</span> <span>name</span>: <span>'Lydia'</span> <span>}</span><span>;</span>

<span>compareMembers</span><span>(</span><span>person</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Not the same!</code></li>
<li>B: <code>They are the same!</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-27" aria-label="Permalink: Answer: B" href="#answer-b-27"></a></p>
<p dir="auto">Objects are passed by reference. When we check objects for strict equality (<code>===</code>), we're comparing their references.</p>
<p dir="auto">We set the default value for <code>person2</code> equal to the <code>person</code> object, and passed the <code>person</code> object as the value for <code>person1</code>.</p>
<p dir="auto">This means that both values have a reference to the same spot in memory, thus they are equal.</p>
<p dir="auto">The code block in the <code>else</code> statement gets run, and <code>They are the same!</code> gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">106. What's its value?</h6><a id="user-content-106-whats-its-value" aria-label="Permalink: 106. What's its value?" href="#106-whats-its-value"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const colorConfig = {
  red: true,
  blue: false,
  green: true,
  black: true,
  yellow: false,
};

const colors = ['pink', 'red', 'blue'];

console.log(colorConfig.colors[1]);"><pre><span>const</span> <span>colorConfig</span> <span>=</span> <span>{</span>
  <span>red</span>: <span>true</span><span>,</span>
  <span>blue</span>: <span>false</span><span>,</span>
  <span>green</span>: <span>true</span><span>,</span>
  <span>black</span>: <span>true</span><span>,</span>
  <span>yellow</span>: <span>false</span><span>,</span>
<span>}</span><span>;</span>

<span>const</span> <span>colors</span> <span>=</span> <span>[</span><span>'pink'</span><span>,</span> <span>'red'</span><span>,</span> <span>'blue'</span><span>]</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>colorConfig</span><span>.</span><span>colors</span><span>[</span><span>1</span><span>]</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>true</code></li>
<li>B: <code>false</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-14" aria-label="Permalink: Answer: D" href="#answer-d-14"></a></p>
<p dir="auto">In JavaScript, we have two ways to access properties on an object: bracket notation, or dot notation. In this example, we use dot notation (<code>colorConfig.colors</code>) instead of bracket notation (<code>colorConfig["colors"]</code>).</p>
<p dir="auto">With dot notation, JavaScript tries to find the property on the object with that exact name. In this example, JavaScript tries to find a property called <code>colors</code> on the <code>colorConfig</code> object. There is no property called <code>colors</code>, so this returns <code>undefined</code>. Then, we try to access the value of the first element by using <code>[1]</code>. We cannot do this on a value that's <code>undefined</code>, so it throws a <code>TypeError</code>: <code>Cannot read property '1' of undefined</code>.</p>
<p dir="auto">JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket <code>[</code> and keeps going until it finds the closing bracket <code>]</code>. Only then, it will evaluate the statement. If we would've used <code>colorConfig[colors[1]]</code>, it would have returned the value of the <code>red</code> property on the <code>colorConfig</code> object.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">107. What's its value?</h6><a id="user-content-107-whats-its-value" aria-label="Permalink: 107. What's its value?" href="#107-whats-its-value"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log('❤️' === '❤️');"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>'❤️'</span> <span>===</span> <span>'❤️'</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>true</code></li>
<li>B: <code>false</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-31" aria-label="Permalink: Answer: A" href="#answer-a-31"></a></p>
<p dir="auto">Under the hood, emojis are unicodes. The unicodes for the heart emoji is <code>"U+2764 U+FE0F"</code>. These are always the same for the same emojis, so we're comparing two equal strings to each other, which returns true.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">108. Which of these methods modifies the original array?</h6><a id="user-content-108-which-of-these-methods-modifies-the-original-array" aria-label="Permalink: 108. Which of these methods modifies the original array?" href="#108-which-of-these-methods-modifies-the-original-array"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const emojis = ['✨', '🥑', '😍'];

emojis.map(x => x + '✨');
emojis.filter(x => x !== '🥑');
emojis.find(x => x !== '🥑');
emojis.reduce((acc, cur) => acc + '✨');
emojis.slice(1, 2, '✨');
emojis.splice(1, 2, '✨');"><pre><span>const</span> <span>emojis</span> <span>=</span> <span>[</span><span>'✨'</span><span>,</span> <span>'🥑'</span><span>,</span> <span>'😍'</span><span>]</span><span>;</span>

<span>emojis</span><span>.</span><span>map</span><span>(</span><span>x</span> <span>=&gt;</span> <span>x</span> <span>+</span> <span>'✨'</span><span>)</span><span>;</span>
<span>emojis</span><span>.</span><span>filter</span><span>(</span><span>x</span> <span>=&gt;</span> <span>x</span> <span>!==</span> <span>'🥑'</span><span>)</span><span>;</span>
<span>emojis</span><span>.</span><span>find</span><span>(</span><span>x</span> <span>=&gt;</span> <span>x</span> <span>!==</span> <span>'🥑'</span><span>)</span><span>;</span>
<span>emojis</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>acc</span><span>,</span> <span>cur</span><span>)</span> <span>=&gt;</span> <span>acc</span> <span>+</span> <span>'✨'</span><span>)</span><span>;</span>
<span>emojis</span><span>.</span><span>slice</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>'✨'</span><span>)</span><span>;</span>
<span>emojis</span><span>.</span><span>splice</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>'✨'</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>All of them</code></li>
<li>B: <code>map</code> <code>reduce</code> <code>slice</code> <code>splice</code></li>
<li>C: <code>map</code> <code>slice</code> <code>splice</code></li>
<li>D: <code>splice</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-15" aria-label="Permalink: Answer: D" href="#answer-d-15"></a></p>
<p dir="auto">With <code>splice</code> method, we modify the original array by deleting, replacing or adding elements. In this case, we removed 2 items from index 1 (we removed <code>'🥑'</code> and <code>'😍'</code>) and added the ✨ emoji instead.</p>
<p dir="auto"><code>map</code>, <code>filter</code> and <code>slice</code> return a new array, <code>find</code> returns an element, and <code>reduce</code> returns a reduced value.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">109. What's the output?</h6><a id="user-content-109-whats-the-output" aria-label="Permalink: 109. What's the output?" href="#109-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const food = ['🍕', '🍫', '🥑', '🍔'];
const info = { favoriteFood: food[0] };

info.favoriteFood = '🍝';

console.log(food);"><pre><span>const</span> <span>food</span> <span>=</span> <span>[</span><span>'🍕'</span><span>,</span> <span>'🍫'</span><span>,</span> <span>'🥑'</span><span>,</span> <span>'🍔'</span><span>]</span><span>;</span>
<span>const</span> <span>info</span> <span>=</span> <span>{</span> <span>favoriteFood</span>: <span>food</span><span>[</span><span>0</span><span>]</span> <span>}</span><span>;</span>

<span>info</span><span>.</span><span>favoriteFood</span> <span>=</span> <span>'🍝'</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>food</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>['🍕', '🍫', '🥑', '🍔']</code></li>
<li>B: <code>['🍝', '🍫', '🥑', '🍔']</code></li>
<li>C: <code>['🍝', '🍕', '🍫', '🥑', '🍔']</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-32" aria-label="Permalink: Answer: A" href="#answer-a-32"></a></p>
<p dir="auto">We set the value of the <code>favoriteFood</code> property on the <code>info</code> object equal to the string with the pizza emoji, <code>'🍕'</code>. A string is a primitive data type. In JavaScript, primitive data types don't interact by reference.</p>
<p dir="auto">In JavaScript, primitive data types (everything that's not an object) interact by <em>value</em>. In this case, we set the value of the <code>favoriteFood</code> property on the <code>info</code> object equal to the value of the first element in the <code>food</code> array, the string with the pizza emoji in this case (<code>'🍕'</code>). A string is a primitive data type, and interact by value (see my <a href="https://www.theavocoder.com/complete-javascript/2018/12/21/by-value-vs-by-reference" rel="nofollow">blogpost</a> if you're interested in learning more)</p>
<p dir="auto">Then, we change the value of the <code>favoriteFood</code> property on the <code>info</code> object. The <code>food</code> array hasn't changed, since the value of <code>favoriteFood</code> was merely a <em>copy</em> of the value of the first element in the array, and doesn't have a reference to the same spot in memory as the element on <code>food[0]</code>. When we log food, it's still the original array, <code>['🍕', '🍫', '🥑', '🍔']</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">110. What does this method do?</h6><a id="user-content-110-what-does-this-method-do" aria-label="Permalink: 110. What does this method do?" href="#110-what-does-this-method-do"></a></p>

<ul dir="auto">
<li>A: Parses JSON to a JavaScript value</li>
<li>B: Parses a JavaScript object to JSON</li>
<li>C: Parses any JavaScript value to JSON</li>
<li>D: Parses JSON to a JavaScript object only</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-33" aria-label="Permalink: Answer: A" href="#answer-a-33"></a></p>
<p dir="auto">With the <code>JSON.parse()</code> method, we can parse JSON string to a JavaScript value.</p>
<div dir="auto" data-snippet-clipboard-copy-content="// Stringifying a number into valid JSON, then parsing the JSON string to a JavaScript value:
const jsonNumber = JSON.stringify(4); // '4'
JSON.parse(jsonNumber); // 4

// Stringifying an array value into valid JSON, then parsing the JSON string to a JavaScript value:
const jsonArray = JSON.stringify([1, 2, 3]); // '[1, 2, 3]'
JSON.parse(jsonArray); // [1, 2, 3]

// Stringifying an object  into valid JSON, then parsing the JSON string to a JavaScript value:
const jsonArray = JSON.stringify({ name: 'Lydia' }); // '{&quot;name&quot;:&quot;Lydia&quot;}'
JSON.parse(jsonArray); // { name: 'Lydia' }"><pre><span>// Stringifying a number into valid JSON, then parsing the JSON string to a JavaScript value:</span>
<span>const</span> <span>jsonNumber</span> <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>4</span><span>)</span><span>;</span> <span>// '4'</span>
<span>JSON</span><span>.</span><span>parse</span><span>(</span><span>jsonNumber</span><span>)</span><span>;</span> <span>// 4</span>

<span>// Stringifying an array value into valid JSON, then parsing the JSON string to a JavaScript value:</span>
<span>const</span> <span>jsonArray</span> <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span><span>;</span> <span>// '[1, 2, 3]'</span>
<span>JSON</span><span>.</span><span>parse</span><span>(</span><span>jsonArray</span><span>)</span><span>;</span> <span>// [1, 2, 3]</span>

<span>// Stringifying an object  into valid JSON, then parsing the JSON string to a JavaScript value:</span>
<span>const</span> <span>jsonArray</span> <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>{</span> <span>name</span>: <span>'Lydia'</span> <span>}</span><span>)</span><span>;</span> <span>// '{"name":"Lydia"}'</span>
<span>JSON</span><span>.</span><span>parse</span><span>(</span><span>jsonArray</span><span>)</span><span>;</span> <span>// { name: 'Lydia' }</span></pre></div>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">111. What's the output?</h6><a id="user-content-111-whats-the-output" aria-label="Permalink: 111. What's the output?" href="#111-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let name = 'Lydia';

function getName() {
  console.log(name);
  let name = 'Sarah';
}

getName();"><pre><span>let</span> <span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>

<span>function</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>)</span><span>;</span>
  <span>let</span> <span>name</span> <span>=</span> <span>'Sarah'</span><span>;</span>
<span>}</span>

<span>getName</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: Lydia</li>
<li>B: Sarah</li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-16" aria-label="Permalink: Answer: D" href="#answer-d-16"></a></p>
<p dir="auto">Each function has its own <em>execution context</em> (or <em>scope</em>). The <code>getName</code> function first looks within its own context (scope) to see if it contains the variable <code>name</code> we're trying to access. In this case, the <code>getName</code> function contains its own <code>name</code> variable: we declare the variable <code>name</code> with the <code>let</code> keyword, and with the value of <code>'Sarah'</code>.</p>
<p dir="auto">Variables with the <code>let</code> keyword (and <code>const</code>) are hoisted, but unlike <code>var</code>, don't get <i>initialized</i>. They are not accessible before the line we declare (initialize) them. This is called the "temporal dead zone". When we try to access the variables before they are declared, JavaScript throws a <code>ReferenceError</code>.</p>
<p dir="auto">If we wouldn't have declared the <code>name</code> variable within the <code>getName</code> function, the javascript engine would've looked down the <em>scope chain</em>. The outer scope has a variable called <code>name</code> with the value of <code>Lydia</code>. In that case, it would've logged <code>Lydia</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="let name = 'Lydia';

function getName() {
  console.log(name);
}

getName(); // Lydia"><pre><span>let</span> <span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>

<span>function</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>)</span><span>;</span>
<span>}</span>

<span>getName</span><span>(</span><span>)</span><span>;</span> <span>// Lydia</span></pre></div>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">112. What's the output?</h6><a id="user-content-112-whats-the-output" aria-label="Permalink: 112. What's the output?" href="#112-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function* generatorOne() {
  yield ['a', 'b', 'c'];
}

function* generatorTwo() {
  yield* ['a', 'b', 'c'];
}

const one = generatorOne();
const two = generatorTwo();

console.log(one.next().value);
console.log(two.next().value);"><pre><span>function</span><span>*</span> <span>generatorOne</span><span>(</span><span>)</span> <span>{</span>
  <span>yield</span> <span>[</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'c'</span><span>]</span><span>;</span>
<span>}</span>

<span>function</span><span>*</span> <span>generatorTwo</span><span>(</span><span>)</span> <span>{</span>
  <span>yield</span><span>*</span> <span>[</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'c'</span><span>]</span><span>;</span>
<span>}</span>

<span>const</span> <span>one</span> <span>=</span> <span>generatorOne</span><span>(</span><span>)</span><span>;</span>
<span>const</span> <span>two</span> <span>=</span> <span>generatorTwo</span><span>(</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>one</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>two</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>a</code> and <code>a</code></li>
<li>B: <code>a</code> and <code>undefined</code></li>
<li>C: <code>['a', 'b', 'c']</code> and <code>a</code></li>
<li>D: <code>a</code> and <code>['a', 'b', 'c']</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-32" aria-label="Permalink: Answer: C" href="#answer-c-32"></a></p>
<p dir="auto">With the <code>yield</code> keyword, we <code>yield</code> values in a generator function. With the <code>yield*</code> keyword, we can yield values from another generator function, or iterable object (for example an array).</p>
<p dir="auto">In <code>generatorOne</code>, we yield the entire array <code>['a', 'b', 'c']</code> using the <code>yield</code> keyword. The value of <code>value</code> property on the object returned by the <code>next</code> method on <code>one</code> (<code>one.next().value</code>) is equal to the entire array <code>['a', 'b', 'c']</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log(one.next().value); // ['a', 'b', 'c']
console.log(one.next().value); // undefined"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>one</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span> <span>// ['a', 'b', 'c']</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>one</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span> <span>// undefined</span></pre></div>
<p dir="auto">In <code>generatorTwo</code>, we use the <code>yield*</code> keyword. This means that the first yielded value of <code>two</code>, is equal to the first yielded value in the iterator. The iterator is the array <code>['a', 'b', 'c']</code>. The first yielded value is <code>a</code>, so the first time we call <code>two.next().value</code>, <code>a</code> is returned.</p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log(two.next().value); // 'a'
console.log(two.next().value); // 'b'
console.log(two.next().value); // 'c'
console.log(two.next().value); // undefined"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>two</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span> <span>// 'a'</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>two</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span> <span>// 'b'</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>two</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span> <span>// 'c'</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>two</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span><span>value</span><span>)</span><span>;</span> <span>// undefined</span></pre></div>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">113. What's the output?</h6><a id="user-content-113-whats-the-output" aria-label="Permalink: 113. What's the output?" href="#113-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="console.log(`${(x => x)('I love')} to program`);"><pre><span>console</span><span>.</span><span>log</span><span>(</span><span>`<span><span>${</span><span>(</span><span>x</span> <span>=&gt;</span> <span>x</span><span>)</span><span>(</span><span>'I love'</span><span>)</span><span>}</span></span> to program`</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>I love to program</code></li>
<li>B: <code>undefined to program</code></li>
<li>C: <code>${(x =&gt; x)('I love') to program</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-34" aria-label="Permalink: Answer: A" href="#answer-a-34"></a></p>
<p dir="auto">Expressions within template literals are evaluated first. This means that the string will contain the returned value of the expression, the immediately invoked function <code>(x =&gt; x)('I love')</code> in this case. We pass the value <code>'I love'</code> as an argument to the <code>x =&gt; x</code> arrow function. <code>x</code> is equal to <code>'I love'</code>, which gets returned. This results in <code>I love to program</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">114. What will happen?</h6><a id="user-content-114-what-will-happen" aria-label="Permalink: 114. What will happen?" href="#114-what-will-happen"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let config = {
  alert: setInterval(() => {
    console.log('Alert!');
  }, 1000),
};

config = null;"><pre><span>let</span> <span>config</span> <span>=</span> <span>{</span>
  <span>alert</span>: <span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'Alert!'</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span><span>,</span>
<span>}</span><span>;</span>

<span>config</span> <span>=</span> <span>null</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: The <code>setInterval</code> callback won't be invoked</li>
<li>B: The <code>setInterval</code> callback gets invoked once</li>
<li>C: The <code>setInterval</code> callback will still be called every second</li>
<li>D: We never invoked <code>config.alert()</code>, config is <code>null</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-33" aria-label="Permalink: Answer: C" href="#answer-c-33"></a></p>
<p dir="auto">Normally when we set objects equal to <code>null</code>, those objects get <em>garbage collected</em> as there is no reference anymore to that object. However, since the callback function within <code>setInterval</code> is an arrow function (thus bound to the <code>config</code> object), the callback function still holds a reference to the <code>config</code> object.
As long as there is a reference, the object won't get garbage collected.
Since this is an interval, setting <code>config</code> to <code>null</code> or <code>delete</code>-ing <code>config.alert</code> won't garbage-collect the interval, so the interval will still be called.
It should be cleared with <code>clearInterval(config.alert)</code> to remove it from memory.
Since it was not cleared, the <code>setInterval</code> callback function will still get invoked every 1000ms (1s).</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">115. Which method(s) will return the value <code>'Hello world!'</code>?</h6><a id="user-content-115-which-methods-will-return-the-value-hello-world" aria-label="Permalink: 115. Which method(s) will return the value 'Hello world!'?" href="#115-which-methods-will-return-the-value-hello-world"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const myMap = new Map();
const myFunc = () => 'greeting';

myMap.set(myFunc, 'Hello world!');

//1
myMap.get('greeting');
//2
myMap.get(myFunc);
//3
myMap.get(() => 'greeting');"><pre><span>const</span> <span>myMap</span> <span>=</span> <span>new</span> <span>Map</span><span>(</span><span>)</span><span>;</span>
<span>const</span> <span>myFunc</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>'greeting'</span><span>;</span>

<span>myMap</span><span>.</span><span>set</span><span>(</span><span>myFunc</span><span>,</span> <span>'Hello world!'</span><span>)</span><span>;</span>

<span>//1</span>
<span>myMap</span><span>.</span><span>get</span><span>(</span><span>'greeting'</span><span>)</span><span>;</span>
<span>//2</span>
<span>myMap</span><span>.</span><span>get</span><span>(</span><span>myFunc</span><span>)</span><span>;</span>
<span>//3</span>
<span>myMap</span><span>.</span><span>get</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>'greeting'</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: 1</li>
<li>B: 2</li>
<li>C: 2 and 3</li>
<li>D: All of them</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-28" aria-label="Permalink: Answer: B" href="#answer-b-28"></a></p>
<p dir="auto">When adding a key/value pair using the <code>set</code> method, the key will be the value of the first argument passed to the <code>set</code> function, and the value will be the second argument passed to the <code>set</code> function. The key is the <em>function</em> <code>() =&gt; 'greeting'</code> in this case, and the value <code>'Hello world'</code>. <code>myMap</code> is now <code>{ () =&gt; 'greeting' =&gt; 'Hello world!' }</code>.</p>
<p dir="auto">1 is wrong, since the key is not <code>'greeting'</code> but <code>() =&gt; 'greeting'</code>.
3 is wrong, since we're creating a new function by passing it as a parameter to the <code>get</code> method. Object interacts by <em>reference</em>. Functions are objects, which is why two functions are never strictly equal, even if they are identical: they have a reference to a different spot in memory.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">116. What's the output?</h6><a id="user-content-116-whats-the-output" aria-label="Permalink: 116. What's the output?" href="#116-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = {
  name: 'Lydia',
  age: 21,
};

const changeAge = (x = { ...person }) => (x.age += 1);
const changeAgeAndName = (x = { ...person }) => {
  x.age += 1;
  x.name = 'Sarah';
};

changeAge(person);
changeAgeAndName();

console.log(person);"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span>
  <span>name</span>: <span>'Lydia'</span><span>,</span>
  <span>age</span>: <span>21</span><span>,</span>
<span>}</span><span>;</span>

<span>const</span> <span>changeAge</span> <span>=</span> <span>(</span><span>x</span> <span>=</span> <span>{</span> ...<span>person</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>(</span><span>x</span><span>.</span><span>age</span> <span>+=</span> <span>1</span><span>)</span><span>;</span>
<span>const</span> <span>changeAgeAndName</span> <span>=</span> <span>(</span><span>x</span> <span>=</span> <span>{</span> ...<span>person</span> <span>}</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>x</span><span>.</span><span>age</span> <span>+=</span> <span>1</span><span>;</span>
  <span>x</span><span>.</span><span>name</span> <span>=</span> <span>'Sarah'</span><span>;</span>
<span>}</span><span>;</span>

<span>changeAge</span><span>(</span><span>person</span><span>)</span><span>;</span>
<span>changeAgeAndName</span><span>(</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>person</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>{name: "Sarah", age: 22}</code></li>
<li>B: <code>{name: "Sarah", age: 23}</code></li>
<li>C: <code>{name: "Lydia", age: 22}</code></li>
<li>D: <code>{name: "Lydia", age: 23}</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-34" aria-label="Permalink: Answer: C" href="#answer-c-34"></a></p>
<p dir="auto">Both the <code>changeAge</code> and <code>changeAgeAndName</code> functions have a default parameter, namely a <em>newly</em> created object <code>{ ...person }</code>. This object has copies of all the key/values in the <code>person</code> object.</p>
<p dir="auto">First, we invoke the <code>changeAge</code> function and pass the <code>person</code> object as its argument. This function increases the value of the <code>age</code> property by 1. <code>person</code> is now <code>{ name: "Lydia", age: 22 }</code>.</p>
<p dir="auto">Then, we invoke the <code>changeAgeAndName</code> function, however we don't pass a parameter. Instead, the value of <code>x</code> is equal to a <em>new</em> object: <code>{ ...person }</code>. Since it's a new object, it doesn't affect the values of the properties on the <code>person</code> object. <code>person</code> is still equal to <code>{ name: "Lydia", age: 22 }</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">117. Which of the following options will return <code>6</code>?</h6><a id="user-content-117-which-of-the-following-options-will-return-6" aria-label="Permalink: 117. Which of the following options will return 6?" href="#117-which-of-the-following-options-will-return-6"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function sumValues(x, y, z) {
  return x + y + z;
}"><pre><span>function</span> <span>sumValues</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>,</span> <span>z</span><span>)</span> <span>{</span>
  <span>return</span> <span>x</span> <span>+</span> <span>y</span> <span>+</span> <span>z</span><span>;</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: <code>sumValues([...1, 2, 3])</code></li>
<li>B: <code>sumValues([...[1, 2, 3]])</code></li>
<li>C: <code>sumValues(...[1, 2, 3])</code></li>
<li>D: <code>sumValues([1, 2, 3])</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-35" aria-label="Permalink: Answer: C" href="#answer-c-35"></a></p>
<p dir="auto">With the spread operator <code>...</code>, we can <em>spread</em> iterables to individual elements. The <code>sumValues</code> function receives three arguments: <code>x</code>, <code>y</code> and <code>z</code>. <code>...[1, 2, 3]</code> will result in <code>1, 2, 3</code>, which we pass to the <code>sumValues</code> function.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">118. What's the output?</h6><a id="user-content-118-whats-the-output" aria-label="Permalink: 118. What's the output?" href="#118-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let num = 1;
const list = ['🥳', '🤠', '🥰', '🤪'];

console.log(list[(num += 1)]);"><pre><span>let</span> <span>num</span> <span>=</span> <span>1</span><span>;</span>
<span>const</span> <span>list</span> <span>=</span> <span>[</span><span>'🥳'</span><span>,</span> <span>'🤠'</span><span>,</span> <span>'🥰'</span><span>,</span> <span>'🤪'</span><span>]</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>list</span><span>[</span><span>(</span><span>num</span> <span>+=</span> <span>1</span><span>)</span><span>]</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>🤠</code></li>
<li>B: <code>🥰</code></li>
<li>C: <code>SyntaxError</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-29" aria-label="Permalink: Answer: B" href="#answer-b-29"></a></p>
<p dir="auto">With the <code>+=</code> operator, we're incrementing the value of <code>num</code> by <code>1</code>. <code>num</code> had the initial value <code>1</code>, so <code>1 + 1</code> is <code>2</code>. The item on the second index in the <code>list</code> array is 🥰, <code>console.log(list[2])</code> prints 🥰.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">119. What's the output?</h6><a id="user-content-119-whats-the-output" aria-label="Permalink: 119. What's the output?" href="#119-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = {
  firstName: 'Lydia',
  lastName: 'Hallie',
  pet: {
    name: 'Mara',
    breed: 'Dutch Tulip Hound',
  },
  getFullName() {
    return `${this.firstName} ${this.lastName}`;
  },
};

console.log(person.pet?.name);
console.log(person.pet?.family?.name);
console.log(person.getFullName?.());
console.log(member.getLastName?.());"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span>
  <span>firstName</span>: <span>'Lydia'</span><span>,</span>
  <span>lastName</span>: <span>'Hallie'</span><span>,</span>
  <span>pet</span>: <span>{</span>
    <span>name</span>: <span>'Mara'</span><span>,</span>
    <span>breed</span>: <span>'Dutch Tulip Hound'</span><span>,</span>
  <span>}</span><span>,</span>
  <span>getFullName</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>`<span><span>${</span><span>this</span><span>.</span><span>firstName</span><span>}</span></span> <span><span>${</span><span>this</span><span>.</span><span>lastName</span><span>}</span></span>`</span><span>;</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>person</span><span>.</span><span>pet</span><span>?.</span><span>name</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>person</span><span>.</span><span>pet</span><span>?.</span><span>family</span><span>?.</span><span>name</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>person</span><span>.</span><span>getFullName</span><span>?.</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>member</span><span>.</span><span>getLastName</span><span>?.</span><span>(</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>undefined</code> <code>undefined</code> <code>undefined</code> <code>undefined</code></li>
<li>B: <code>Mara</code> <code>undefined</code> <code>Lydia Hallie</code> <code>ReferenceError</code></li>
<li>C: <code>Mara</code> <code>null</code> <code>Lydia Hallie</code> <code>null</code></li>
<li>D: <code>null</code> <code>ReferenceError</code> <code>null</code> <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-30" aria-label="Permalink: Answer: B" href="#answer-b-30"></a></p>
<p dir="auto">With the optional chaining operator <code>?.</code>, we no longer have to explicitly check whether the deeper nested values are valid or not. If we're trying to access a property on an <code>undefined</code> or <code>null</code> value (<em>nullish</em>), the expression short-circuits and returns <code>undefined</code>.</p>
<p dir="auto"><code>person.pet?.name</code>: <code>person</code> has a property named <code>pet</code>: <code>person.pet</code> is not nullish. It has a property called <code>name</code>, and returns <code>Mara</code>.
<code>person.pet?.family?.name</code>: <code>person</code> has a property named <code>pet</code>: <code>person.pet</code> is not nullish. <code>pet</code> does <em>not</em> have a property called <code>family</code>, <code>person.pet.family</code> is nullish. The expression returns <code>undefined</code>.
<code>person.getFullName?.()</code>: <code>person</code> has a property named <code>getFullName</code>: <code>person.getFullName()</code> is not nullish and can get invoked, which returns <code>Lydia Hallie</code>.
<code>member.getLastName?.()</code>: variable <code>member</code> is non-existent therefore a <code>ReferenceError</code> gets thrown!</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">120. What's the output?</h6><a id="user-content-120-whats-the-output" aria-label="Permalink: 120. What's the output?" href="#120-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const groceries = ['banana', 'apple', 'peanuts'];

if (groceries.indexOf('banana')) {
  console.log('We have to buy bananas!');
} else {
  console.log(`We don't have to buy bananas!`);
}"><pre><span>const</span> <span>groceries</span> <span>=</span> <span>[</span><span>'banana'</span><span>,</span> <span>'apple'</span><span>,</span> <span>'peanuts'</span><span>]</span><span>;</span>

<span>if</span> <span>(</span><span>groceries</span><span>.</span><span>indexOf</span><span>(</span><span>'banana'</span><span>)</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>'We have to buy bananas!'</span><span>)</span><span>;</span>
<span>}</span> <span>else</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>`We don't have to buy bananas!`</span><span>)</span><span>;</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: We have to buy bananas!</li>
<li>B: We don't have to buy bananas</li>
<li>C: <code>undefined</code></li>
<li>D: <code>1</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-31" aria-label="Permalink: Answer: B" href="#answer-b-31"></a></p>
<p dir="auto">We passed the condition <code>groceries.indexOf("banana")</code> to the if-statement. <code>groceries.indexOf("banana")</code> returns <code>0</code>, which is a falsy value. Since the condition in the if-statement is falsy, the code in the <code>else</code> block runs, and <code>We don't have to buy bananas!</code> gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">121. What's the output?</h6><a id="user-content-121-whats-the-output" aria-label="Permalink: 121. What's the output?" href="#121-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const config = {
  languages: [],
  set language(lang) {
    return this.languages.push(lang);
  },
};

console.log(config.language);"><pre><span>const</span> <span>config</span> <span>=</span> <span>{</span>
  <span>languages</span>: <span>[</span><span>]</span><span>,</span>
  <span>set</span> <span>language</span><span>(</span><span>lang</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>languages</span><span>.</span><span>push</span><span>(</span><span>lang</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>config</span><span>.</span><span>language</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>function language(lang) { this.languages.push(lang }</code></li>
<li>B: <code>0</code></li>
<li>C: <code>[]</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-17" aria-label="Permalink: Answer: D" href="#answer-d-17"></a></p>
<p dir="auto">The <code>language</code> method is a <code>setter</code>. Setters don't hold an actual value, their purpose is to <em>modify</em> properties. When calling a <code>setter</code> method, <code>undefined</code> gets returned.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">122. What's the output?</h6><a id="user-content-122-whats-the-output" aria-label="Permalink: 122. What's the output?" href="#122-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const name = 'Lydia Hallie';

console.log(!typeof name === 'object');
console.log(!typeof name === 'string');"><pre><span>const</span> <span>name</span> <span>=</span> <span>'Lydia Hallie'</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>!</span><span>typeof</span> <span>name</span> <span>===</span> <span>'object'</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>!</span><span>typeof</span> <span>name</span> <span>===</span> <span>'string'</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>false</code> <code>true</code></li>
<li>B: <code>true</code> <code>false</code></li>
<li>C: <code>false</code> <code>false</code></li>
<li>D: <code>true</code> <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-36" aria-label="Permalink: Answer: C" href="#answer-c-36"></a></p>
<p dir="auto"><code>typeof name</code> returns <code>"string"</code>. The string <code>"string"</code> is a truthy value, so <code>!typeof name</code> returns the boolean value <code>false</code>. <code>false === "object"</code> and <code>false === "string"</code> both return<code>false</code>.</p>
<p dir="auto">(If we wanted to check whether the type was (un)equal to a certain type, we should've written <code>!==</code> instead of <code>!typeof</code>)</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">123. What's the output?</h6><a id="user-content-123-whats-the-output" aria-label="Permalink: 123. What's the output?" href="#123-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const add = x => y => z => {
  console.log(x, y, z);
  return x + y + z;
};

add(4)(5)(6);"><pre><span>const</span> <span>add</span> <span>=</span> <span>x</span> <span>=&gt;</span> <span>y</span> <span>=&gt;</span> <span>z</span> <span>=&gt;</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>,</span> <span>z</span><span>)</span><span>;</span>
  <span>return</span> <span>x</span> <span>+</span> <span>y</span> <span>+</span> <span>z</span><span>;</span>
<span>}</span><span>;</span>

<span>add</span><span>(</span><span>4</span><span>)</span><span>(</span><span>5</span><span>)</span><span>(</span><span>6</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>4</code> <code>5</code> <code>6</code></li>
<li>B: <code>6</code> <code>5</code> <code>4</code></li>
<li>C: <code>4</code> <code>function</code> <code>function</code></li>
<li>D: <code>undefined</code> <code>undefined</code> <code>6</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-35" aria-label="Permalink: Answer: A" href="#answer-a-35"></a></p>
<p dir="auto">The <code>add</code> function returns an arrow function, which returns an arrow function, which returns an arrow function (still with me?). The first function receives an argument <code>x</code> with the value of <code>4</code>. We invoke the second function, which receives an argument <code>y</code> with the value <code>5</code>. Then we invoke the third function, which receives an argument <code>z</code> with the value <code>6</code>. When we're trying to access the value <code>x</code>, <code>y</code> and <code>z</code> within the last arrow function, the JS engine goes up the scope chain in order to find the values for <code>x</code> and <code>y</code> accordingly. This returns <code>4</code> <code>5</code> <code>6</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">124. What's the output?</h6><a id="user-content-124-whats-the-output" aria-label="Permalink: 124. What's the output?" href="#124-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="async function* range(start, end) {
  for (let i = start; i <= end; i++) {
    yield Promise.resolve(i);
  }
}

(async () => {
  const gen = range(1, 3);
  for await (const item of gen) {
    console.log(item);
  }
})();"><pre><span>async</span> <span>function</span><span>*</span> <span>range</span><span>(</span><span>start</span><span>,</span> <span>end</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> <span>i</span> <span>=</span> <span>start</span><span>;</span> <span>i</span> <span>&lt;=</span> <span>end</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
    <span>yield</span> <span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>i</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>(</span><span>async</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>const</span> <span>gen</span> <span>=</span> <span>range</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>)</span><span>;</span>
  <span>for</span> <span>await</span> <span>(</span><span>const</span> <span>item</span> <span>of</span> <span>gen</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>item</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Promise {1}</code> <code>Promise {2}</code> <code>Promise {3}</code></li>
<li>B: <code>Promise {&lt;pending&gt;}</code> <code>Promise {&lt;pending&gt;}</code> <code>Promise {&lt;pending&gt;}</code></li>
<li>C: <code>1</code> <code>2</code> <code>3</code></li>
<li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-37" aria-label="Permalink: Answer: C" href="#answer-c-37"></a></p>
<p dir="auto">The generator function <code>range</code> returns an async object with promises for each item in the range we pass: <code>Promise{1}</code>, <code>Promise{2}</code>, <code>Promise{3}</code>. We set the variable <code>gen</code> equal to the async object, after which we loop over it using a <code>for await ... of</code> loop. We set the variable <code>item</code> equal to the returned Promise values: first <code>Promise{1}</code>, then <code>Promise{2}</code>, then <code>Promise{3}</code>. Since we're <em>awaiting</em> the value of <code>item</code>, the resolved promise, the resolved <em>values</em> of the promises get returned: <code>1</code>, <code>2</code>, then <code>3</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">125. What's the output?</h6><a id="user-content-125-whats-the-output" aria-label="Permalink: 125. What's the output?" href="#125-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const myFunc = ({ x, y, z }) => {
  console.log(x, y, z);
};

myFunc(1, 2, 3);"><pre><span>const</span> <span>myFunc</span> <span>=</span> <span>(</span><span>{</span> x<span>,</span> y<span>,</span> z <span>}</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>,</span> <span>z</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>myFunc</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>1</code> <code>2</code> <code>3</code></li>
<li>B: <code>{1: 1}</code> <code>{2: 2}</code> <code>{3: 3}</code></li>
<li>C: <code>{ 1: undefined }</code> <code>undefined</code> <code>undefined</code></li>
<li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-18" aria-label="Permalink: Answer: D" href="#answer-d-18"></a></p>
<p dir="auto"><code>myFunc</code> expects an object with properties <code>x</code>, <code>y</code> and <code>z</code> as its argument. Since we're only passing three separate numeric values (1, 2, 3) instead of one object with properties <code>x</code>, <code>y</code> and <code>z</code> ({x: 1, y: 2, z: 3}), <code>x</code>, <code>y</code> and <code>z</code> have their default value of <code>undefined</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">126. What's the output?</h6><a id="user-content-126-whats-the-output" aria-label="Permalink: 126. What's the output?" href="#126-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function getFine(speed, amount) {
  const formattedSpeed = new Intl.NumberFormat('en-US', {
    style: 'unit',
    unit: 'mile-per-hour'
  }).format(speed);

  const formattedAmount = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);

  return `The driver drove ${formattedSpeed} and has to pay ${formattedAmount}`;
}

console.log(getFine(130, 300))"><pre><span>function</span> <span>getFine</span><span>(</span><span>speed</span><span>,</span> <span>amount</span><span>)</span> <span>{</span>
  <span>const</span> <span>formattedSpeed</span> <span>=</span> <span>new</span> <span>Intl</span><span>.</span><span>NumberFormat</span><span>(</span><span>'en-US'</span><span>,</span> <span>{</span>
    <span>style</span>: <span>'unit'</span><span>,</span>
    <span>unit</span>: <span>'mile-per-hour'</span>
  <span>}</span><span>)</span><span>.</span><span>format</span><span>(</span><span>speed</span><span>)</span><span>;</span>

  <span>const</span> <span>formattedAmount</span> <span>=</span> <span>new</span> <span>Intl</span><span>.</span><span>NumberFormat</span><span>(</span><span>'en-US'</span><span>,</span> <span>{</span>
    <span>style</span>: <span>'currency'</span><span>,</span>
    <span>currency</span>: <span>'USD'</span>
  <span>}</span><span>)</span><span>.</span><span>format</span><span>(</span><span>amount</span><span>)</span><span>;</span>

  <span>return</span> <span>`The driver drove <span><span>${</span><span>formattedSpeed</span><span>}</span></span> and has to pay <span><span>${</span><span>formattedAmount</span><span>}</span></span>`</span><span>;</span>
<span>}</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>getFine</span><span>(</span><span>130</span><span>,</span> <span>300</span><span>)</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: The driver drove 130 and has to pay 300</li>
<li>B: The driver drove 130 mph and has to pay $300.00</li>
<li>C: The driver drove undefined and has to pay undefined</li>
<li>D: The driver drove 130.00 and has to pay 300.00</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-32" aria-label="Permalink: Answer: B" href="#answer-b-32"></a></p>
<p dir="auto">With the <code>Intl.NumberFormat</code> method, we can format numeric values to any locale. We format the numeric value <code>130</code> to the <code>en-US</code> locale as a <code>unit</code> in <code>mile-per-hour</code>, which results in <code>130 mph</code>. The numeric value <code>300</code> to the <code>en-US</code> locale as a <code>currency</code> in <code>USD</code> results in <code>$300.00</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">127. What's the output?</h6><a id="user-content-127-whats-the-output" aria-label="Permalink: 127. What's the output?" href="#127-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const spookyItems = ['👻', '🎃', '🕸'];
({ item: spookyItems[3] } = { item: '💀' });

console.log(spookyItems);"><pre><span>const</span> <span>spookyItems</span> <span>=</span> <span>[</span><span>'👻'</span><span>,</span> <span>'🎃'</span><span>,</span> <span>'🕸'</span><span>]</span><span>;</span>
<span>(</span><span>{</span> <span>item</span>: <span>spookyItems</span><span>[</span><span>3</span><span>]</span> <span>}</span><span></span> <span>=</span> <span>{</span> <span>item</span>: <span>'💀'</span> <span>}</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>spookyItems</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>["👻", "🎃", "🕸"]</code></li>
<li>B: <code>["👻", "🎃", "🕸", "💀"]</code></li>
<li>C: <code>["👻", "🎃", "🕸", { item: "💀" }]</code></li>
<li>D: <code>["👻", "🎃", "🕸", "[object Object]"]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-33" aria-label="Permalink: Answer: B" href="#answer-b-33"></a></p>
<p dir="auto">By destructuring objects, we can unpack values from the right-hand object, and assign the unpacked value to the value of the same property name on the left-hand object. In this case, we're assigning the value "💀" to <code>spookyItems[3]</code>. This means that we're modifying the <code>spookyItems</code> array, we're adding the "💀" to it. When logging <code>spookyItems</code>, <code>["👻", "🎃", "🕸", "💀"]</code> gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">128. What's the output?</h6><a id="user-content-128-whats-the-output" aria-label="Permalink: 128. What's the output?" href="#128-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const name = 'Lydia Hallie';
const age = 21;

console.log(Number.isNaN(name));
console.log(Number.isNaN(age));

console.log(isNaN(name));
console.log(isNaN(age));"><pre><span>const</span> <span>name</span> <span>=</span> <span>'Lydia Hallie'</span><span>;</span>
<span>const</span> <span>age</span> <span>=</span> <span>21</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>Number</span><span>.</span><span>isNaN</span><span>(</span><span>name</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>Number</span><span>.</span><span>isNaN</span><span>(</span><span>age</span><span>)</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>isNaN</span><span>(</span><span>name</span><span>)</span><span>)</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>isNaN</span><span>(</span><span>age</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>true</code> <code>false</code> <code>true</code> <code>false</code></li>
<li>B: <code>true</code> <code>false</code> <code>false</code> <code>false</code></li>
<li>C: <code>false</code> <code>false</code> <code>true</code> <code>false</code></li>
<li>D: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-38" aria-label="Permalink: Answer: C" href="#answer-c-38"></a></p>
<p dir="auto">With the <code>Number.isNaN</code> method, you can check if the value you pass is a <em>numeric value</em> and equal to <code>NaN</code>. <code>name</code> is not a numeric value, so <code>Number.isNaN(name)</code> returns <code>false</code>. <code>age</code> is a numeric value, but is not equal to <code>NaN</code>, so <code>Number.isNaN(age)</code> returns <code>false</code>.</p>
<p dir="auto">With the <code>isNaN</code> method, you can check if the value you pass is not a number. <code>name</code> is not a number, so <code>isNaN(name)</code> returns true. <code>age</code> is a number, so <code>isNaN(age)</code> returns <code>false</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">129. What's the output?</h6><a id="user-content-129-whats-the-output" aria-label="Permalink: 129. What's the output?" href="#129-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const randomValue = 21;

function getInfo() {
  console.log(typeof randomValue);
  const randomValue = 'Lydia Hallie';
}

getInfo();"><pre><span>const</span> <span>randomValue</span> <span>=</span> <span>21</span><span>;</span>

<span>function</span> <span>getInfo</span><span>(</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>typeof</span> <span>randomValue</span><span>)</span><span>;</span>
  <span>const</span> <span>randomValue</span> <span>=</span> <span>'Lydia Hallie'</span><span>;</span>
<span>}</span>

<span>getInfo</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>"number"</code></li>
<li>B: <code>"string"</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-19" aria-label="Permalink: Answer: D" href="#answer-d-19"></a></p>
<p dir="auto">Variables declared with the <code>const</code> keyword are not referenceable before their initialization: this is called the <em>temporal dead zone</em>. In the <code>getInfo</code> function, the variable <code>randomValue</code> is scoped in the functional scope of <code>getInfo</code>. On the line where we want to log the value of <code>typeof randomValue</code>, the variable <code>randomValue</code> isn't initialized yet: a <code>ReferenceError</code> gets thrown! The engine didn't go down the scope chain since we declared the variable <code>randomValue</code> in the <code>getInfo</code> function.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">130. What's the output?</h6><a id="user-content-130-whats-the-output" aria-label="Permalink: 130. What's the output?" href="#130-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const myPromise = Promise.resolve('Woah some cool data');

(async () => {
  try {
    console.log(await myPromise);
  } catch {
    throw new Error(`Oops didn't work`);
  } finally {
    console.log('Oh finally!');
  }
})();"><pre><span>const</span> <span>myPromise</span> <span>=</span> <span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>'Woah some cool data'</span><span>)</span><span>;</span>

<span>(</span><span>async</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
  <span>try</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>await</span> <span>myPromise</span><span>)</span><span>;</span>
  <span>}</span> <span>catch</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>`Oops didn't work`</span><span>)</span><span>;</span>
  <span>}</span> <span>finally</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'Oh finally!'</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Woah some cool data</code></li>
<li>B: <code>Oh finally!</code></li>
<li>C: <code>Woah some cool data</code> <code>Oh finally!</code></li>
<li>D: <code>Oops didn't work</code> <code>Oh finally!</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-39" aria-label="Permalink: Answer: C" href="#answer-c-39"></a></p>
<p dir="auto">In the <code>try</code> block, we're logging the awaited value of the <code>myPromise</code> variable: <code>"Woah some cool data"</code>. Since no errors were thrown in the <code>try</code> block, the code in the <code>catch</code> block doesn't run. The code in the <code>finally</code> block <em>always</em> runs, <code>"Oh finally!"</code> gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">131. What's the output?</h6><a id="user-content-131-whats-the-output" aria-label="Permalink: 131. What's the output?" href="#131-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const emojis = ['🥑', ['✨', '✨', ['🍕', '🍕']]];

console.log(emojis.flat(1));"><pre><span>const</span> <span>emojis</span> <span>=</span> <span>[</span><span>'🥑'</span><span>,</span> <span>[</span><span>'✨'</span><span>,</span> <span>'✨'</span><span>,</span> <span>[</span><span>'🍕'</span><span>,</span> <span>'🍕'</span><span>]</span><span>]</span><span>]</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>emojis</span><span>.</span><span>flat</span><span>(</span><span>1</span><span>)</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>['🥑', ['✨', '✨', ['🍕', '🍕']]]</code></li>
<li>B: <code>['🥑', '✨', '✨', ['🍕', '🍕']]</code></li>
<li>C: <code>['🥑', ['✨', '✨', '🍕', '🍕']]</code></li>
<li>D: <code>['🥑', '✨', '✨', '🍕', '🍕']</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-34" aria-label="Permalink: Answer: B" href="#answer-b-34"></a></p>
<p dir="auto">With the <code>flat</code> method, we can create a new, flattened array. The depth of the flattened array depends on the value that we pass. In this case, we passed the value <code>1</code> (which we didn't have to, that's the default value), meaning that only the arrays on the first depth will be concatenated. <code>['🥑']</code> and <code>['✨', '✨', ['🍕', '🍕']]</code> in this case. Concatenating these two arrays results in <code>['🥑', '✨', '✨', ['🍕', '🍕']]</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">132. What's the output?</h6><a id="user-content-132-whats-the-output" aria-label="Permalink: 132. What's the output?" href="#132-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="class Counter {
  constructor() {
    this.count = 0;
  }

  increment() {
    this.count++;
  }
}

const counterOne = new Counter();
counterOne.increment();
counterOne.increment();

const counterTwo = counterOne;
counterTwo.increment();

console.log(counterOne.count);"><pre><span>class</span> <span>Counter</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>count</span> <span>=</span> <span>0</span><span>;</span>
  <span>}</span>

  <span>increment</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>count</span><span>++</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>const</span> <span>counterOne</span> <span>=</span> <span>new</span> <span>Counter</span><span>(</span><span>)</span><span>;</span>
<span>counterOne</span><span>.</span><span>increment</span><span>(</span><span>)</span><span>;</span>
<span>counterOne</span><span>.</span><span>increment</span><span>(</span><span>)</span><span>;</span>

<span>const</span> <span>counterTwo</span> <span>=</span> <span>counterOne</span><span>;</span>
<span>counterTwo</span><span>.</span><span>increment</span><span>(</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>counterOne</span><span>.</span><span>count</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>0</code></li>
<li>B: <code>1</code></li>
<li>C: <code>2</code></li>
<li>D: <code>3</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-20" aria-label="Permalink: Answer: D" href="#answer-d-20"></a></p>
<p dir="auto"><code>counterOne</code> is an instance of the <code>Counter</code> class. The counter class contains a <code>count</code> property on its constructor, and an <code>increment</code> method. First, we invoked the <code>increment</code> method twice by calling <code>counterOne.increment()</code>. Currently, <code>counterOne.count</code> is <code>2</code>.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5dd8fe8e901cbe6e6451e265db21e3a37df51ed06735121edd177deeedef2d65/68747470733a2f2f692e696d6775722e636f6d2f4b784c6c546d392e706e67"><img src="https://camo.githubusercontent.com/5dd8fe8e901cbe6e6451e265db21e3a37df51ed06735121edd177deeedef2d65/68747470733a2f2f692e696d6775722e636f6d2f4b784c6c546d392e706e67" width="400" data-canonical-src="https://i.imgur.com/KxLlTm9.png"></a>
<p dir="auto">Then, we create a new variable <code>counterTwo</code>, and set it equal to <code>counterOne</code>. Since objects interact by reference, we're just creating a new reference to the same spot in memory that <code>counterOne</code> points to. Since it has the same spot in memory, any changes made to the object that <code>counterTwo</code> has a reference to, also apply to <code>counterOne</code>. Currently, <code>counterTwo.count</code> is <code>2</code>.</p>
<p dir="auto">We invoke <code>counterTwo.increment()</code>, which sets <code>count</code> to <code>3</code>. Then, we log the count on <code>counterOne</code>, which logs <code>3</code>.</p>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/fe95c1437959e5239b4c22d4f32a7dd5dbf9bae5ac5a0e81c37bdb84cdd00af5/68747470733a2f2f692e696d6775722e636f6d2f424e4248586d632e706e67"><img src="https://camo.githubusercontent.com/fe95c1437959e5239b4c22d4f32a7dd5dbf9bae5ac5a0e81c37bdb84cdd00af5/68747470733a2f2f692e696d6775722e636f6d2f424e4248586d632e706e67" width="400" data-canonical-src="https://i.imgur.com/BNBHXmc.png"></a>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">133. What's the output?</h6><a id="user-content-133-whats-the-output" aria-label="Permalink: 133. What's the output?" href="#133-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const myPromise = Promise.resolve(Promise.resolve('Promise'));

function funcOne() {
  setTimeout(() => console.log('Timeout 1!'), 0);
  myPromise.then(res => res).then(res => console.log(`${res} 1!`));
  console.log('Last line 1!');
}

async function funcTwo() {
  const res = await myPromise;
  console.log(`${res} 2!`)
  setTimeout(() => console.log('Timeout 2!'), 0);
  console.log('Last line 2!');
}

funcOne();
funcTwo();"><pre><span>const</span> <span>myPromise</span> <span>=</span> <span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>'Promise'</span><span>)</span><span>)</span><span>;</span>

<span>function</span> <span>funcOne</span><span>(</span><span>)</span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'Timeout 1!'</span><span>)</span><span>,</span> <span>0</span><span>)</span><span>;</span>
  <span>myPromise</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=&gt;</span> <span>res</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>`<span><span>${</span><span>res</span><span>}</span></span> 1!`</span><span>)</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>'Last line 1!'</span><span>)</span><span>;</span>
<span>}</span>

<span>async</span> <span>function</span> <span>funcTwo</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>res</span> <span>=</span> <span>await</span> <span>myPromise</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>`<span><span>${</span><span>res</span><span>}</span></span> 2!`</span><span>)</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'Timeout 2!'</span><span>)</span><span>,</span> <span>0</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>'Last line 2!'</span><span>)</span><span>;</span>
<span>}</span>

<span>funcOne</span><span>(</span><span>)</span><span>;</span>
<span>funcTwo</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Promise 1! Last line 1! Promise 2! Last line 2! Timeout 1! Timeout 2!</code></li>
<li>B: <code>Last line 1! Timeout 1! Promise 1! Last line 2! Promise2! Timeout 2! </code></li>
<li>C: <code>Last line 1! Promise 2! Last line 2! Promise 1! Timeout 1! Timeout 2!</code></li>
<li>D: <code>Timeout 1! Promise 1! Last line 1! Promise 2! Timeout 2! Last line 2!</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-40" aria-label="Permalink: Answer: C" href="#answer-c-40"></a></p>
<p dir="auto">First, we invoke <code>funcOne</code>. On the first line of <code>funcOne</code>, we call the <em>asynchronous</em> <code>setTimeout</code> function, from which the callback is sent to the Web API. (see my article on the event loop <a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif" rel="nofollow">here</a>.)</p>
<p dir="auto">Then we call the <code>myPromise</code> promise, which is an <em>asynchronous</em> operation. Pay attention, that now only the first then clause was added to the microtask queue.</p>
<p dir="auto">Both the promise and the timeout are asynchronous operations, the function keeps on running while it's busy completing the promise and handling the <code>setTimeout</code> callback. This means that <code>Last line 1!</code> gets logged first, since this is not an asynchonous operation.</p>
<p dir="auto">Since the callstack is not empty yet, the <code>setTimeout</code> function and promise in <code>funcOne</code> cannot get added to the callstack yet.</p>
<p dir="auto">In <code>funcTwo</code>, the variable <code>res</code> gets <code>Promise</code> because <code>Promise.resolve(Promise.resolve('Promise'))</code> is equivalent to <code>Promise.resolve('Promise')</code> since resolving a promise just resolves it's value. The <code>await</code> in this line stops the execution of the function until it receives the resolution of the promise and then keeps on running synchronously until completion, so <code>Promise 2!</code> and then <code>Last line 2!</code> are logged and the <code>setTimeout</code> is sent to the Web API. If the first then clause in <code>funcOne</code> had its own log statement, it would be printed before <code>Promise 2!</code>. Howewer, it executed silently and put the second then clause in microtask queue. So, the second clause will be printed after <code>Promise 2!</code>.</p>
<p dir="auto">Then the call stack is empty. Promises are <em>microtasks</em> so they are resolved first when the call stack is empty so <code>Promise 1!</code> gets to be logged.</p>
<p dir="auto">Now, since <code>funcTwo</code> popped off the call stack, the call stack is empty. The callbacks waiting in the queue (<code>() =&gt; console.log("Timeout 1!")</code> from <code>funcOne</code>, and <code>() =&gt; console.log("Timeout 2!")</code> from <code>funcTwo</code>) get added to the call stack one by one. The first callback logs <code>Timeout 1!</code>, and gets popped off the stack. Then, the second callback logs <code>Timeout 2!</code>, and gets popped off the stack.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">134. How can we invoke <code>sum</code> in <code>sum.js</code> from <code>index.js?</code></h6><a id="user-content-134-how-can-we-invoke-sum-in-sumjs-from-indexjs" aria-label="Permalink: 134. How can we invoke sum in sum.js from index.js?" href="#134-how-can-we-invoke-sum-in-sumjs-from-indexjs"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="// sum.js
export default function sum(x) {
  return x + x;
}

// index.js
import * as sum from './sum';"><pre><span>// sum.js</span>
<span>export</span> <span>default</span> <span>function</span> <span>sum</span><span>(</span><span>x</span><span>)</span> <span>{</span>
  <span>return</span> <span>x</span> <span>+</span> <span>x</span><span>;</span>
<span>}</span>

<span>// index.js</span>
<span>import</span> <span>*</span> <span>as</span> <span>sum</span> <span>from</span> <span>'./sum'</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>sum(4)</code></li>
<li>B: <code>sum.sum(4)</code></li>
<li>C: <code>sum.default(4)</code></li>
<li>D: Default aren't imported with <code>*</code>, only named exports</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-41" aria-label="Permalink: Answer: C" href="#answer-c-41"></a></p>
<p dir="auto">With the asterisk <code>*</code>, we import all exported values from that file, both default and named. If we had the following file:</p>
<div dir="auto" data-snippet-clipboard-copy-content="// info.js
export const name = 'Lydia';
export const age = 21;
export default 'I love JavaScript';

// index.js
import * as info from './info';
console.log(info);"><pre><span>// info.js</span>
<span>export</span> <span>const</span> <span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>
<span>export</span> <span>const</span> <span>age</span> <span>=</span> <span>21</span><span>;</span>
<span>export</span> <span>default</span> <span>'I love JavaScript'</span><span>;</span>

<span>// index.js</span>
<span>import</span> <span>*</span> <span>as</span> <span>info</span> <span>from</span> <span>'./info'</span><span>;</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>info</span><span>)</span><span>;</span></pre></div>
<p dir="auto">The following would get logged:</p>
<div dir="auto" data-snippet-clipboard-copy-content="{
  default: &quot;I love JavaScript&quot;,
  name: &quot;Lydia&quot;,
  age: 21
}"><pre><span>{</span>
  <span>default</span>: <span>"I love JavaScript"</span><span>,</span>
  <span>name</span>: <span>"Lydia"</span><span>,</span>
  <span>age</span>: <span>21</span>
<span>}</span></pre></div>
<p dir="auto">For the <code>sum</code> example, it means that the imported value <code>sum</code> looks like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="{ default: function sum(x) { return x + x } }"><pre><span>{</span> <span>default</span>: <span>function</span> <span>sum</span><span>(</span><span>x</span><span>)</span> <span>{</span> <span>return</span> <span>x</span> <span>+</span> <span>x</span> <span>}</span> <span>}</span></pre></div>
<p dir="auto">We can invoke this function, by calling <code>sum.default</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">135. What's the output?</h6><a id="user-content-135-whats-the-output" aria-label="Permalink: 135. What's the output?" href="#135-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const handler = {
  set: () => console.log('Added a new property!'),
  get: () => console.log('Accessed a property!'),
};

const person = new Proxy({}, handler);

person.name = 'Lydia';
person.name;"><pre><span>const</span> <span>handler</span> <span>=</span> <span>{</span>
  <span>set</span>: <span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'Added a new property!'</span><span>)</span><span>,</span>
  <span>get</span>: <span>(</span><span>)</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>'Accessed a property!'</span><span>)</span><span>,</span>
<span>}</span><span>;</span>

<span>const</span> <span>person</span> <span>=</span> <span>new</span> <span>Proxy</span><span>(</span><span>{</span><span>}</span><span>,</span> <span>handler</span><span>)</span><span>;</span>

<span>person</span><span>.</span><span>name</span> <span>=</span> <span>'Lydia'</span><span>;</span>
<span>person</span><span>.</span><span>name</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>Added a new property!</code></li>
<li>B: <code>Accessed a property!</code></li>
<li>C: <code>Added a new property!</code> <code>Accessed a property!</code></li>
<li>D: Nothing gets logged</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-42" aria-label="Permalink: Answer: C" href="#answer-c-42"></a></p>
<p dir="auto">With a Proxy object, we can add custom behavior to an object that we pass to it as the second argument. In this case, we pass the <code>handler</code> object which contains two properties: <code>set</code> and <code>get</code>. <code>set</code> gets invoked whenever we <em>set</em> property values, and <code>get</code> gets invoked whenever we <em>get</em> (access) property values.</p>
<p dir="auto">The first argument is an empty object <code>{}</code>, which is the value of <code>person</code>. To this object, the custom behavior specified in the <code>handler</code> object gets added. If we add a property to the <code>person</code> object, <code>set</code> will get invoked. If we access a property on the <code>person</code> object, <code>get</code> gets invoked.</p>
<p dir="auto">First, we added a new property <code>name</code> to the proxy object (<code>person.name = "Lydia"</code>). <code>set</code> gets invoked, and logs <code>"Added a new property!"</code>.</p>
<p dir="auto">Then, we access a property value on the proxy object, and the <code>get</code> property on the handler object is invoked. <code>"Accessed a property!"</code> gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">136. Which of the following will modify the <code>person</code> object?</h6><a id="user-content-136-which-of-the-following-will-modify-the-person-object" aria-label="Permalink: 136. Which of the following will modify the person object?" href="#136-which-of-the-following-will-modify-the-person-object"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = { name: 'Lydia Hallie' };

Object.seal(person);"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span> <span>name</span>: <span>'Lydia Hallie'</span> <span>}</span><span>;</span>

<span>Object</span><span>.</span><span>seal</span><span>(</span><span>person</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>person.name = "Evan Bacon"</code></li>
<li>B: <code>person.age = 21</code></li>
<li>C: <code>delete person.name</code></li>
<li>D: <code>Object.assign(person, { age: 21 })</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-36" aria-label="Permalink: Answer: A" href="#answer-a-36"></a></p>
<p dir="auto">With <code>Object.seal</code> we can prevent new properties from being <em>added</em>, or existing properties to be <em>removed</em>.</p>
<p dir="auto">However, you can still modify the value of existing properties.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">137. Which of the following will modify the <code>person</code> object?</h6><a id="user-content-137-which-of-the-following-will-modify-the-person-object" aria-label="Permalink: 137. Which of the following will modify the person object?" href="#137-which-of-the-following-will-modify-the-person-object"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = {
  name: 'Lydia Hallie',
  address: {
    street: '100 Main St',
  },
};

Object.freeze(person);"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span>
  <span>name</span>: <span>'Lydia Hallie'</span><span>,</span>
  <span>address</span>: <span>{</span>
    <span>street</span>: <span>'100 Main St'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>

<span>Object</span><span>.</span><span>freeze</span><span>(</span><span>person</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>person.name = "Evan Bacon"</code></li>
<li>B: <code>delete person.address</code></li>
<li>C: <code>person.address.street = "101 Main St"</code></li>
<li>D: <code>person.pet = { name: "Mara" }</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-43" aria-label="Permalink: Answer: C" href="#answer-c-43"></a></p>
<p dir="auto">The <code>Object.freeze</code> method <em>freezes</em> an object. No properties can be added, modified, or removed.</p>
<p dir="auto">However, it only <em>shallowly</em> freezes the object, meaning that only <em>direct</em> properties on the object are frozen. If the property is another object, like <code>address</code> in this case, the properties on that object aren't frozen, and can be modified.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">138. What's the output?</h6><a id="user-content-138-whats-the-output" aria-label="Permalink: 138. What's the output?" href="#138-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const add = x => x + x;

function myFunc(num = 2, value = add(num)) {
  console.log(num, value);
}

myFunc();
myFunc(3);"><pre><span>const</span> <span>add</span> <span>=</span> <span>x</span> <span>=&gt;</span> <span>x</span> <span>+</span> <span>x</span><span>;</span>

<span>function</span> <span>myFunc</span><span>(</span><span>num</span> <span>=</span> <span>2</span><span>,</span> <span>value</span> <span>=</span> <span>add</span><span>(</span><span>num</span><span>)</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>num</span><span>,</span> <span>value</span><span>)</span><span>;</span>
<span>}</span>

<span>myFunc</span><span>(</span><span>)</span><span>;</span>
<span>myFunc</span><span>(</span><span>3</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>2</code> <code>4</code> and <code>3</code> <code>6</code></li>
<li>B: <code>2</code> <code>NaN</code> and <code>3</code> <code>NaN</code></li>
<li>C: <code>2</code> <code>Error</code> and <code>3</code> <code>6</code></li>
<li>D: <code>2</code> <code>4</code> and <code>3</code> <code>Error</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-37" aria-label="Permalink: Answer: A" href="#answer-a-37"></a></p>
<p dir="auto">First, we invoked <code>myFunc()</code> without passing any arguments. Since we didn't pass arguments, <code>num</code> and <code>value</code> got their default values: num is <code>2</code>, and <code>value</code> is the returned value of the function <code>add</code>. To the <code>add</code> function, we pass <code>num</code> as an argument, which had the value of <code>2</code>. <code>add</code> returns <code>4</code>, which is the value of <code>value</code>.</p>
<p dir="auto">Then, we invoked <code>myFunc(3)</code> and passed the value <code>3</code> as the value for the argument <code>num</code>. We didn't pass an argument for <code>value</code>. Since we didn't pass a value for the <code>value</code> argument, it got the default value: the returned value of the <code>add</code> function. To <code>add</code>, we pass <code>num</code>, which has the value of <code>3</code>. <code>add</code> returns <code>6</code>, which is the value of <code>value</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">139. What's the output?</h6><a id="user-content-139-whats-the-output" aria-label="Permalink: 139. What's the output?" href="#139-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="class Counter {
  #number = 10

  increment() {
    this.#number++
  }

  getNum() {
    return this.#number
  }
}

const counter = new Counter()
counter.increment()

console.log(counter.#number)"><pre><span>class</span> <span>Counter</span> <span>{</span>
  #<span>number</span> <span>=</span> <span>10</span>

  <span>increment</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>#<span>number</span><span>++</span>
  <span>}</span>

  <span>getNum</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>#<span>number</span>
  <span>}</span>
<span>}</span>

<span>const</span> <span>counter</span> <span>=</span> <span>new</span> <span>Counter</span><span>(</span><span>)</span>
<span>counter</span><span>.</span><span>increment</span><span>(</span><span>)</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>counter</span><span>.</span>#<span>number</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>10</code></li>
<li>B: <code>11</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-21" aria-label="Permalink: Answer: D" href="#answer-d-21"></a></p>
<p dir="auto">In ES2020, we can add private variables in classes by using the <code>#</code>. We cannot access these variables outside of the class. When we try to log <code>counter.#number</code>, a SyntaxError gets thrown: we cannot access it outside the <code>Counter</code> class!</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">140. What's missing?</h6><a id="user-content-140-whats-missing" aria-label="Permalink: 140. What's missing?" href="#140-whats-missing"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const teams = [
  { name: 'Team 1', members: ['Paul', 'Lisa'] },
  { name: 'Team 2', members: ['Laura', 'Tim'] },
];

function* getMembers(members) {
  for (let i = 0; i < members.length; i++) {
    yield members[i];
  }
}

function* getTeams(teams) {
  for (let i = 0; i < teams.length; i++) {
    // ✨ SOMETHING IS MISSING HERE ✨
  }
}

const obj = getTeams(teams);
obj.next(); // { value: &quot;Paul&quot;, done: false }
obj.next(); // { value: &quot;Lisa&quot;, done: false }"><pre><span>const</span> <span>teams</span> <span>=</span> <span>[</span>
  <span>{</span> <span>name</span>: <span>'Team 1'</span><span>,</span> <span>members</span>: <span>[</span><span>'Paul'</span><span>,</span> <span>'Lisa'</span><span>]</span> <span>}</span><span>,</span>
  <span>{</span> <span>name</span>: <span>'Team 2'</span><span>,</span> <span>members</span>: <span>[</span><span>'Laura'</span><span>,</span> <span>'Tim'</span><span>]</span> <span>}</span><span>,</span>
<span>]</span><span>;</span>

<span>function</span><span>*</span> <span>getMembers</span><span>(</span><span>members</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>members</span><span>.</span><span>length</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
    <span>yield</span> <span>members</span><span>[</span><span>i</span><span>]</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>function</span><span>*</span> <span>getTeams</span><span>(</span><span>teams</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>teams</span><span>.</span><span>length</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
    <span>// ✨ SOMETHING IS MISSING HERE ✨</span>
  <span>}</span>
<span>}</span>

<span>const</span> <span>obj</span> <span>=</span> <span>getTeams</span><span>(</span><span>teams</span><span>)</span><span>;</span>
<span>obj</span><span>.</span><span>next</span><span>(</span><span>)</span><span>;</span> <span>// { value: "Paul", done: false }</span>
<span>obj</span><span>.</span><span>next</span><span>(</span><span>)</span><span>;</span> <span>// { value: "Lisa", done: false }</span></pre></div>
<ul dir="auto">
<li>A: <code>yield getMembers(teams[i].members)</code></li>
<li>B: <code>yield* getMembers(teams[i].members)</code></li>
<li>C: <code>return getMembers(teams[i].members)</code></li>
<li>D: <code>return yield getMembers(teams[i].members)</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-35" aria-label="Permalink: Answer: B" href="#answer-b-35"></a></p>
<p dir="auto">In order to iterate over the <code>members</code> in each element in the <code>teams</code> array, we need to pass <code>teams[i].members</code> to the <code>getMembers</code> generator function. The generator function returns a generator object. In order to iterate over each element in this generator object, we need to use <code>yield*</code>.</p>
<p dir="auto">If we would've written <code>yield</code>, <code>return yield</code>, or <code>return</code>, the entire generator function would've gotten returned the first time we called the <code>next</code> method.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">141. What's the output?</h6><a id="user-content-141-whats-the-output" aria-label="Permalink: 141. What's the output?" href="#141-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = {
  name: 'Lydia Hallie',
  hobbies: ['coding'],
};

function addHobby(hobby, hobbies = person.hobbies) {
  hobbies.push(hobby);
  return hobbies;
}

addHobby('running', []);
addHobby('dancing');
addHobby('baking', person.hobbies);

console.log(person.hobbies);"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span>
  <span>name</span>: <span>'Lydia Hallie'</span><span>,</span>
  <span>hobbies</span>: <span>[</span><span>'coding'</span><span>]</span><span>,</span>
<span>}</span><span>;</span>

<span>function</span> <span>addHobby</span><span>(</span><span>hobby</span><span>,</span> <span>hobbies</span> <span>=</span> <span>person</span><span>.</span><span>hobbies</span><span>)</span> <span>{</span>
  <span>hobbies</span><span>.</span><span>push</span><span>(</span><span>hobby</span><span>)</span><span>;</span>
  <span>return</span> <span>hobbies</span><span>;</span>
<span>}</span>

<span>addHobby</span><span>(</span><span>'running'</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>
<span>addHobby</span><span>(</span><span>'dancing'</span><span>)</span><span>;</span>
<span>addHobby</span><span>(</span><span>'baking'</span><span>,</span> <span>person</span><span>.</span><span>hobbies</span><span>)</span><span>;</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>person</span><span>.</span><span>hobbies</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>["coding"]</code></li>
<li>B: <code>["coding", "dancing"]</code></li>
<li>C: <code>["coding", "dancing", "baking"]</code></li>
<li>D: <code>["coding", "running", "dancing", "baking"]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-44" aria-label="Permalink: Answer: C" href="#answer-c-44"></a></p>
<p dir="auto">The <code>addHobby</code> function receives two arguments, <code>hobby</code> and <code>hobbies</code> with the default value of the <code>hobbies</code> array on the <code>person</code> object.</p>
<p dir="auto">First, we invoke the <code>addHobby</code> function, and pass <code>"running"</code> as the value for <code>hobby</code> and an empty array as the value for <code>hobbies</code>. Since we pass an empty array as the value for <code>hobbies</code>, <code>"running"</code> gets added to this empty array.</p>
<p dir="auto">Then, we invoke the <code>addHobby</code> function, and pass <code>"dancing"</code> as the value for <code>hobby</code>. We didn't pass a value for <code>hobbies</code>, so it gets the default value, the <code>hobbies</code> property on the <code>person</code> object. We push the hobby <code>dancing</code> to the <code>person.hobbies</code> array.</p>
<p dir="auto">Last, we invoke the <code>addHobby</code> function, and pass <code>"baking"</code> as the value for <code>hobby</code>, and the <code>person.hobbies</code> array as the value for <code>hobbies</code>. We push the hobby <code>baking</code> to the <code>person.hobbies</code> array.</p>
<p dir="auto">After pushing <code>dancing</code> and <code>baking</code>, the value of <code>person.hobbies</code> is <code>["coding", "dancing", "baking"]</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">142. What's the output?</h6><a id="user-content-142-whats-the-output" aria-label="Permalink: 142. What's the output?" href="#142-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="class Bird {
  constructor() {
    console.log(&quot;I'm a bird. 🦢&quot;);
  }
}

class Flamingo extends Bird {
  constructor() {
    console.log(&quot;I'm pink. 🌸&quot;);
    super();
  }
}

const pet = new Flamingo();"><pre><span>class</span> <span>Bird</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>"I'm a bird. 🦢"</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>Flamingo</span> <span>extends</span> <span>Bird</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>"I'm pink. 🌸"</span><span>)</span><span>;</span>
    <span>super</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>const</span> <span>pet</span> <span>=</span> <span>new</span> <span>Flamingo</span><span>(</span><span>)</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: <code>I'm pink. 🌸</code></li>
<li>B: <code>I'm pink. 🌸</code> <code>I'm a bird. 🦢</code></li>
<li>C: <code>I'm a bird. 🦢</code> <code>I'm pink. 🌸</code></li>
<li>D: Nothing, we didn't call any method</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-36" aria-label="Permalink: Answer: B" href="#answer-b-36"></a></p>
<p dir="auto">We create the variable <code>pet</code> which is an instance of the <code>Flamingo</code> class. When we instantiate this instance, the <code>constructor</code> on <code>Flamingo</code> gets called. First, <code>"I'm pink. 🌸"</code> gets logged, after which we call <code>super()</code>. <code>super()</code> calls the constructor of the parent class, <code>Bird</code>. The constructor in <code>Bird</code> gets called, and logs <code>"I'm a bird. 🦢"</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">143. Which of the options result(s) in an error?</h6><a id="user-content-143-which-of-the-options-results-in-an-error" aria-label="Permalink: 143. Which of the options result(s) in an error?" href="#143-which-of-the-options-results-in-an-error"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const emojis = ['🎄', '🎅🏼', '🎁', '⭐'];

/* 1 */ emojis.push('🦌');
/* 2 */ emojis.splice(0, 2);
/* 3 */ emojis = [...emojis, '🥂'];
/* 4 */ emojis.length = 0;"><pre><span>const</span> <span>emojis</span> <span>=</span> <span>[</span><span>'🎄'</span><span>,</span> <span>'🎅🏼'</span><span>,</span> <span>'🎁'</span><span>,</span> <span>'⭐'</span><span>]</span><span>;</span>

<span>/* 1 */</span> <span>emojis</span><span>.</span><span>push</span><span>(</span><span>'🦌'</span><span>)</span><span>;</span>
<span>/* 2 */</span> <span>emojis</span><span>.</span><span>splice</span><span>(</span><span>0</span><span>,</span> <span>2</span><span>)</span><span>;</span>
<span>/* 3 */</span> <span>emojis</span> <span>=</span> <span>[</span>...<span>emojis</span><span>,</span> <span>'🥂'</span><span>]</span><span>;</span>
<span>/* 4 */</span> <span>emojis</span><span>.</span><span>length</span> <span>=</span> <span>0</span><span>;</span></pre></div>
<ul dir="auto">
<li>A: 1</li>
<li>B: 1 and 2</li>
<li>C: 3 and 4</li>
<li>D: 3</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-22" aria-label="Permalink: Answer: D" href="#answer-d-22"></a></p>
<p dir="auto">The <code>const</code> keyword simply means we cannot <em>redeclare</em> the value of that variable, it's <em>read-only</em>. However, the value itself isn't immutable. The properties on the <code>emojis</code> array can be modified, for example by pushing new values, splicing them, or setting the length of the array to 0.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">144. What do we need to add to the <code>person</code> object to get <code>["Lydia Hallie", 21]</code> as the output of <code>[...person]</code>?</h6><a id="user-content-144-what-do-we-need-to-add-to-the-person-object-to-get-lydia-hallie-21-as-the-output-of-person" aria-label="Permalink: 144. What do we need to add to the person object to get [&quot;Lydia Hallie&quot;, 21] as the output of [...person]?" href="#144-what-do-we-need-to-add-to-the-person-object-to-get-lydia-hallie-21-as-the-output-of-person"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const person = {
  name: &quot;Lydia Hallie&quot;,
  age: 21
}

[...person] // [&quot;Lydia Hallie&quot;, 21]"><pre><span>const</span> <span>person</span> <span>=</span> <span>{</span>
  <span>name</span>: <span>"Lydia Hallie"</span><span>,</span>
  <span>age</span>: <span>21</span>
<span>}</span>

<span>[</span>...<span>person</span><span>]</span> <span>// ["Lydia Hallie", 21]</span></pre></div>
<ul dir="auto">
<li>A: Nothing, object are iterable by default</li>
<li>B: <code>*[Symbol.iterator]() { for (let x in this) yield* this[x] }</code></li>
<li>C: <code>*[Symbol.iterator]() { yield* Object.values(this) }</code></li>
<li>D: <code>*[Symbol.iterator]() { for (let x in this) yield this }</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-45" aria-label="Permalink: Answer: C" href="#answer-c-45"></a></p>
<p dir="auto">Objects aren't iterable by default. An iterable is an iterable if the iterator protocol is present. We can add this manually by adding the iterator symbol <code>[Symbol.iterator]</code>, which has to return a generator object, for example by making it a generator function <code>*[Symbol.iterator]() {}</code>. This generator function has to yield the <code>Object.values</code> of the <code>person</code> object if we want it to return the array <code>["Lydia Hallie", 21]</code>: <code>yield* Object.values(this)</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">145. What's the output?</h6><a id="user-content-145-whats-the-output" aria-label="Permalink: 145. What's the output?" href="#145-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let count = 0;
const nums = [0, 1, 2, 3];

nums.forEach(num => {
	if (num) count += 1
})

console.log(count)"><pre><span>let</span> <span>count</span> <span>=</span> <span>0</span><span>;</span>
<span>const</span> <span>nums</span> <span>=</span> <span>[</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>

<span>nums</span><span>.</span><span>forEach</span><span>(</span><span>num</span> <span>=&gt;</span> <span>{</span>
	<span>if</span> <span>(</span><span>num</span><span>)</span> <span>count</span> <span>+=</span> <span>1</span>
<span>}</span><span>)</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>count</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: 1</li>
<li>B: 2</li>
<li>C: 3</li>
<li>D: 4</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-46" aria-label="Permalink: Answer: C" href="#answer-c-46"></a></p>
<p dir="auto">The <code>if</code> condition within the <code>forEach</code> loop checks whether the value of <code>num</code> is truthy or falsy. Since the first number in the <code>nums</code> array is <code>0</code>, a falsy value, the <code>if</code> statement's code block won't be executed. <code>count</code> only gets incremented for the other 3 numbers in the <code>nums</code> array, <code>1</code>, <code>2</code> and <code>3</code>. Since <code>count</code> gets incremented by <code>1</code> 3 times, the value of <code>count</code> is <code>3</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">146. What's the output?</h6><a id="user-content-146-whats-the-output" aria-label="Permalink: 146. What's the output?" href="#146-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="function getFruit(fruits) {
	console.log(fruits?.[1]?.[1])
}

getFruit([['🍊', '🍌'], ['🍍']])
getFruit()
getFruit([['🍍'], ['🍊', '🍌']])"><pre><span>function</span> <span>getFruit</span><span>(</span><span>fruits</span><span>)</span> <span>{</span>
	<span>console</span><span>.</span><span>log</span><span>(</span><span>fruits</span><span>?.</span><span>[</span><span>1</span><span>]</span><span>?.</span><span>[</span><span>1</span><span>]</span><span>)</span>
<span>}</span>

<span>getFruit</span><span>(</span><span>[</span><span>[</span><span>'🍊'</span><span>,</span> <span>'🍌'</span><span>]</span><span>,</span> <span>[</span><span>'🍍'</span><span>]</span><span>]</span><span>)</span>
<span>getFruit</span><span>(</span><span>)</span>
<span>getFruit</span><span>(</span><span>[</span><span>[</span><span>'🍍'</span><span>]</span><span>,</span> <span>[</span><span>'🍊'</span><span>,</span> <span>'🍌'</span><span>]</span><span>]</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>null</code>, <code>undefined</code>, 🍌</li>
<li>B: <code>[]</code>, <code>null</code>, 🍌</li>
<li>C: <code>[]</code>, <code>[]</code>, 🍌</li>
<li>D: <code>undefined</code>, <code>undefined</code>, 🍌</li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-23" aria-label="Permalink: Answer: D" href="#answer-d-23"></a></p>
<p dir="auto">The <code>?</code> allows us to optionally access deeper nested properties within objects. We're trying to log the item on index <code>1</code> within the subarray that's on index <code>1</code> of the <code>fruits</code> array. If the subarray on index <code>1</code> in the <code>fruits</code> array doesn't exist, it'll simply return <code>undefined</code>. If the subarray on index <code>1</code> in the <code>fruits</code> array exists, but this subarray doesn't have an item on its <code>1</code> index, it'll also return <code>undefined</code>.</p>
<p dir="auto">First, we're trying to log the second item in the <code>['🍍']</code> subarray of <code>[['🍊', '🍌'], ['🍍']]</code>. This subarray only contains one item, which means there is no item on index <code>1</code>, and returns <code>undefined</code>.</p>
<p dir="auto">Then, we're invoking the <code>getFruits</code> function without passing a value as an argument, which means that <code>fruits</code> has a value of <code>undefined</code> by default. Since we're conditionally chaining the item on index <code>1</code> of<code>fruits</code>, it returns <code>undefined</code> since this item on index <code>1</code> does not exist.</p>
<p dir="auto">Lastly, we're trying to log the second item in the <code>['🍊', '🍌']</code> subarray of <code>['🍍'], ['🍊', '🍌']</code>. The item on index <code>1</code> within this subarray is <code>🍌</code>, which gets logged.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">147. What's the output?</h6><a id="user-content-147-whats-the-output" aria-label="Permalink: 147. What's the output?" href="#147-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="class Calc {
	constructor() {
		this.count = 0 
	}

	increase() {
		this.count++
	}
}

const calc = new Calc()
new Calc().increase()

console.log(calc.count)"><pre><span>class</span> <span>Calc</span> <span>{</span>
	<span>constructor</span><span>(</span><span>)</span> <span>{</span>
		<span>this</span><span>.</span><span>count</span> <span>=</span> <span>0</span> 
	<span>}</span>

	<span>increase</span><span>(</span><span>)</span> <span>{</span>
		<span>this</span><span>.</span><span>count</span><span>++</span>
	<span>}</span>
<span>}</span>

<span>const</span> <span>calc</span> <span>=</span> <span>new</span> <span>Calc</span><span>(</span><span>)</span>
<span>new</span> <span>Calc</span><span>(</span><span>)</span><span>.</span><span>increase</span><span>(</span><span>)</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>calc</span><span>.</span><span>count</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>0</code></li>
<li>B: <code>1</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-38" aria-label="Permalink: Answer: A" href="#answer-a-38"></a></p>
<p dir="auto">We set the variable <code>calc</code> equal to a new instance of the <code>Calc</code> class. Then, we instantiate a new instance of <code>Calc</code>, and invoke the <code>increase</code> method on this instance. Since the count property is within the constructor of the <code>Calc</code> class, the count property is not shared on the prototype of <code>Calc</code>. This means that the value of count has not been updated for the instance calc points to, count is still <code>0</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">148. What's the output?</h6><a id="user-content-148-whats-the-output" aria-label="Permalink: 148. What's the output?" href="#148-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const user = {
	email: &quot;e@mail.com&quot;,
	password: &quot;12345&quot;
}

const updateUser = ({ email, password }) => {
	if (email) {
		Object.assign(user, { email })
	}

	if (password) {
		user.password = password
	}

	return user
}

const updatedUser = updateUser({ email: &quot;new@email.com&quot; })

console.log(updatedUser === user)"><pre><span>const</span> <span>user</span> <span>=</span> <span>{</span>
	<span>email</span>: <span>"e@mail.com"</span><span>,</span>
	<span>password</span>: <span>"12345"</span>
<span>}</span>

<span>const</span> <span>updateUser</span> <span>=</span> <span>(</span><span>{</span> email<span>,</span> password <span>}</span><span>)</span> <span>=&gt;</span> <span>{</span>
	<span>if</span> <span>(</span><span>email</span><span>)</span> <span>{</span>
		<span>Object</span><span>.</span><span>assign</span><span>(</span><span>user</span><span>,</span> <span>{</span> email <span>}</span><span>)</span>
	<span>}</span>

	<span>if</span> <span>(</span><span>password</span><span>)</span> <span>{</span>
		<span>user</span><span>.</span><span>password</span> <span>=</span> <span>password</span>
	<span>}</span>

	<span>return</span> <span>user</span>
<span>}</span>

<span>const</span> <span>updatedUser</span> <span>=</span> <span>updateUser</span><span>(</span><span>{</span> <span>email</span>: <span>"new@email.com"</span> <span>}</span><span>)</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>updatedUser</span> <span>===</span> <span>user</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>false</code></li>
<li>B: <code>true</code></li>
<li>C: <code>TypeError</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-37" aria-label="Permalink: Answer: B" href="#answer-b-37"></a></p>
<p dir="auto">The <code>updateUser</code> function updates the values of the <code>email</code> and <code>password</code> properties on user, if their values are passed to the function, after which the function returns the <code>user</code> object. The returned value of the <code>updateUser</code> function is the <code>user</code> object, which means that the value of updatedUser is a reference to the same <code>user</code> object that <code>user</code> points to. <code>updatedUser === user</code> equals <code>true</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">149. What's the output?</h6><a id="user-content-149-whats-the-output" aria-label="Permalink: 149. What's the output?" href="#149-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const fruit = ['🍌', '🍊', '🍎']

fruit.slice(0, 1)
fruit.splice(0, 1)
fruit.unshift('🍇')

console.log(fruit)"><pre><span>const</span> <span>fruit</span> <span>=</span> <span>[</span><span>'🍌'</span><span>,</span> <span>'🍊'</span><span>,</span> <span>'🍎'</span><span>]</span>

<span>fruit</span><span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span>
<span>fruit</span><span>.</span><span>splice</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span>
<span>fruit</span><span>.</span><span>unshift</span><span>(</span><span>'🍇'</span><span>)</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>fruit</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>['🍌', '🍊', '🍎']</code></li>
<li>B: <code>['🍊', '🍎']</code></li>
<li>C: <code>['🍇', '🍊', '🍎']</code></li>
<li>D: <code>['🍇', '🍌', '🍊', '🍎']</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-47" aria-label="Permalink: Answer: C" href="#answer-c-47"></a></p>
<p dir="auto">First, we invoke the <code>slice</code> method on the fruit array. The slice method does not modify the original array, but returns the value that it sliced off the array: the banana emoji.
Then, we invoke the <code>splice</code> method on the fruit array. The splice method does modify the original array, which means that the fruit array now consists of <code>['🍊', '🍎']</code>.
At last, we invoke the <code>unshift</code> method on the <code>fruit</code> array, which modifies the original array by adding the provided value, ‘🍇’ in this case,  as the first element in the array.  The fruit array now consists of <code>['🍇', '🍊', '🍎']</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">150. What's the output?</h6><a id="user-content-150-whats-the-output" aria-label="Permalink: 150. What's the output?" href="#150-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const animals = {};
let dog = { emoji: '🐶' }
let cat = { emoji: '🐈' }

animals[dog] = { ...dog, name: &quot;Mara&quot; }
animals[cat] = { ...cat, name: &quot;Sara&quot; }

console.log(animals[dog])"><pre><span>const</span> <span>animals</span> <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>let</span> <span>dog</span> <span>=</span> <span>{</span> <span>emoji</span>: <span>'🐶'</span> <span>}</span>
<span>let</span> <span>cat</span> <span>=</span> <span>{</span> <span>emoji</span>: <span>'🐈'</span> <span>}</span>

<span>animals</span><span>[</span><span>dog</span><span>]</span> <span>=</span> <span>{</span> ...<span>dog</span><span>,</span> <span>name</span>: <span>"Mara"</span> <span>}</span>
<span>animals</span><span>[</span><span>cat</span><span>]</span> <span>=</span> <span>{</span> ...<span>cat</span><span>,</span> <span>name</span>: <span>"Sara"</span> <span>}</span>

<span>console</span><span>.</span><span>log</span><span>(</span><span>animals</span><span>[</span><span>dog</span><span>]</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>{ emoji: "🐶", name: "Mara" }</code></li>
<li>B: <code>{ emoji: "🐈", name: "Sara" }</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-38" aria-label="Permalink: Answer: B" href="#answer-b-38"></a></p>
<p dir="auto">Object keys are converted to strings.</p>
<p dir="auto">Since the value of  <code>dog</code> is an object,  <code>animals[dog]</code> actually means that we’re creating a new property called <code>"[object Object]"</code> equal to the new object. <code>animals["[object Object]"]</code> is now equal to <code>{ emoji: "🐶", name: "Mara"}</code>.</p>
<p dir="auto"><code>cat</code> is also an object, which means that <code>animals[cat]</code> actually means that we’re overwriting the value of  <code>animals["[object Object]"]</code> with the new cat properties.</p>
<p dir="auto">Logging <code>animals[dog]</code>, or actually <code>animals["[object Object]"]</code> since converting the <code>dog</code> object to a string results <code>"[object Object]"</code>, returns the <code>{ emoji: "🐈", name: "Sara" }</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">151. What's the output?</h6><a id="user-content-151-whats-the-output" aria-label="Permalink: 151. What's the output?" href="#151-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const user = {
	email: &quot;my@email.com&quot;,
	updateEmail: email => {
		this.email = email
	}
}

user.updateEmail(&quot;new@email.com&quot;)
console.log(user.email)"><pre><span>const</span> <span>user</span> <span>=</span> <span>{</span>
	<span>email</span>: <span>"my@email.com"</span><span>,</span>
	<span>updateEmail</span>: <span>email</span> <span>=&gt;</span> <span>{</span>
		<span>this</span><span>.</span><span>email</span> <span>=</span> <span>email</span>
	<span>}</span>
<span>}</span>

<span>user</span><span>.</span><span>updateEmail</span><span>(</span><span>"new@email.com"</span><span>)</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>user</span><span>.</span><span>email</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>my@email.com</code></li>
<li>B: <code>new@email.com</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: A</h4><a id="user-content-answer-a-39" aria-label="Permalink: Answer: A" href="#answer-a-39"></a></p>
<p dir="auto">The <code>updateEmail</code> function is an arrow function, and is not bound to the <code>user</code> object. This means that the <code>this</code> keyword is not referring to the <code>user</code> object, but refers to  the global scope in this case. The value of <code>email</code> within the <code>user</code> object does not get updated. When logging the value of <code>user.email</code>, the original value of <code>my@email.com</code> gets returned.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">152. What's the output?</h6><a id="user-content-152-whats-the-output" aria-label="Permalink: 152. What's the output?" href="#152-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const promise1 = Promise.resolve('First')
const promise2 = Promise.resolve('Second')
const promise3 = Promise.reject('Third')
const promise4 = Promise.resolve('Fourth')

const runPromises = async () => {
	const res1 = await Promise.all([promise1, promise2])
	const res2  = await Promise.all([promise3, promise4])
	return [res1, res2]
}

runPromises()
	.then(res => console.log(res))
	.catch(err => console.log(err))"><pre><span>const</span> <span>promise1</span> <span>=</span> <span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>'First'</span><span>)</span>
<span>const</span> <span>promise2</span> <span>=</span> <span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>'Second'</span><span>)</span>
<span>const</span> <span>promise3</span> <span>=</span> <span>Promise</span><span>.</span><span>reject</span><span>(</span><span>'Third'</span><span>)</span>
<span>const</span> <span>promise4</span> <span>=</span> <span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>'Fourth'</span><span>)</span>

<span>const</span> <span>runPromises</span> <span>=</span> <span>async</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span>
	<span>const</span> <span>res1</span> <span>=</span> <span>await</span> <span>Promise</span><span>.</span><span>all</span><span>(</span><span>[</span><span>promise1</span><span>,</span> <span>promise2</span><span>]</span><span>)</span>
	<span>const</span> <span>res2</span>  <span>=</span> <span>await</span> <span>Promise</span><span>.</span><span>all</span><span>(</span><span>[</span><span>promise3</span><span>,</span> <span>promise4</span><span>]</span><span>)</span>
	<span>return</span> <span>[</span><span>res1</span><span>,</span> <span>res2</span><span>]</span>
<span>}</span>

<span>runPromises</span><span>(</span><span>)</span>
	<span>.</span><span>then</span><span>(</span><span>res</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>res</span><span>)</span><span>)</span>
	<span>.</span><span>catch</span><span>(</span><span>err</span> <span>=&gt;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>err</span><span>)</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>[['First', 'Second'], ['Fourth']]</code></li>
<li>B: <code>[['First', 'Second'], ['Third', 'Fourth']]</code></li>
<li>C: <code>[['First', 'Second']]</code></li>
<li>D: <code>'Third'</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: D</h4><a id="user-content-answer-d-24" aria-label="Permalink: Answer: D" href="#answer-d-24"></a></p>
<p dir="auto">The <code>Promise.all</code> method runs the passed promises in parallel. If one promise fails, the <code>Promise.all</code> method <em>rejects</em> with the value of the rejected promise. In this case, <code>promise3</code> is rejected with the value <code>"Third"</code>. We’re catching the rejected value in the chained <code>catch</code> method on the <code>runPromises</code> invocation to catch any errors  within the <code>runPromises</code> function. Only <code>"Third"</code> gets logged, since <code>promise3</code> is rejected with this value.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">153. What should the value of <code>method</code> be to log <code>{ name: "Lydia", age: 22 }</code>?</h6><a id="user-content-153-what-should-the-value-of-method-be-to-log--name-lydia-age-22-" aria-label="Permalink: 153. What should the value of method be to log { name: &quot;Lydia&quot;, age: 22 }?" href="#153-what-should-the-value-of-method-be-to-log--name-lydia-age-22-"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const keys = [&quot;name&quot;, &quot;age&quot;]
const values = [&quot;Lydia&quot;, 22]

const method = /* ?? */
Object[method](keys.map((_, i) => {
	return [keys[i], values[i]]
})) // { name: &quot;Lydia&quot;, age: 22 }"><pre><span>const</span> <span>keys</span> <span>=</span> <span>[</span><span>"name"</span><span>,</span> <span>"age"</span><span>]</span>
<span>const</span> <span>values</span> <span>=</span> <span>[</span><span>"Lydia"</span><span>,</span> <span>22</span><span>]</span>

<span>const</span> <span>method</span> <span>=</span> <span>/* ?? */</span>
<span>Object</span><span>[</span><span>method</span><span>]</span><span>(</span><span>keys</span><span>.</span><span>map</span><span>(</span><span>(</span><span>_</span><span>,</span> <span>i</span><span>)</span> <span>=&gt;</span> <span>{</span>
	<span>return</span> <span>[</span><span>keys</span><span>[</span><span>i</span><span>]</span><span>,</span> <span>values</span><span>[</span><span>i</span><span>]</span><span>]</span>
<span>}</span><span>)</span><span>)</span> <span>// { name: "Lydia", age: 22 }</span></pre></div>
<ul dir="auto">
<li>A: <code>entries</code></li>
<li>B: <code>values</code></li>
<li>C: <code>fromEntries</code></li>
<li>D: <code>forEach</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-48" aria-label="Permalink: Answer: C" href="#answer-c-48"></a></p>
<p dir="auto">The <code>fromEntries</code> method turns a 2d array into an object. The first element in each subarray will be the key, and the second element in each subarray will be the value. In this case, we’re mapping over the <code>keys</code> array, which returns an array that the first element is the item on the key array on the current index, and the second element is the item of the values array on the current index.</p>
<p dir="auto">This creates an array of subarrays containing the correct keys and values, which results in <code>{ name: "Lydia", age: 22 }</code></p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">154. What's the output?</h6><a id="user-content-154-whats-the-output" aria-label="Permalink: 154. What's the output?" href="#154-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="const createMember = ({ email, address = {}}) => {
	const validEmail = /.+\@.+\..+/.test(email)
	if (!validEmail) throw new Error(&quot;Valid email pls&quot;)

	return {
		email,
		address: address ? address : null
	}
}

const member = createMember({ email: &quot;my@email.com&quot; })
console.log(member)"><pre><span>const</span> <span>createMember</span> <span>=</span> <span>(</span><span>{</span> email<span>,</span> address <span>=</span> <span>{</span><span>}</span><span>}</span><span>)</span> <span>=&gt;</span> <span>{</span>
	<span>const</span> <span>validEmail</span> <span>=</span> <span><span>/</span>.+\@.+\..+<span>/</span></span><span>.</span><span>test</span><span>(</span><span>email</span><span>)</span>
	<span>if</span> <span>(</span><span>!</span><span>validEmail</span><span>)</span> <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>"Valid email pls"</span><span>)</span>

	<span>return</span> <span>{</span>
		email<span>,</span>
		<span>address</span>: <span>address</span> ? <span>address</span> : <span>null</span>
	<span>}</span>
<span>}</span>

<span>const</span> <span>member</span> <span>=</span> <span>createMember</span><span>(</span><span>{</span> <span>email</span>: <span>"my@email.com"</span> <span>}</span><span>)</span>
<span>console</span><span>.</span><span>log</span><span>(</span><span>member</span><span>)</span></pre></div>
<ul dir="auto">
<li>A: <code>{ email: "my@email.com", address: null }</code></li>
<li>B: <code>{ email: "my@email.com" }</code></li>
<li>C: <code>{ email: "my@email.com", address: {} }</code></li>
<li>D: <code>{ email: "my@email.com", address: undefined }</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: C</h4><a id="user-content-answer-c-49" aria-label="Permalink: Answer: C" href="#answer-c-49"></a></p>
<p dir="auto">The default value of <code>address</code> is an empty object <code>{}</code>. When we set the variable <code>member</code> equal to the object returned by the <code>createMember</code> function, we didn't pass a value for the address, which means that the value of the address is the default empty object <code>{}</code>. An empty object is a truthy value, which means that the condition of the <code>address ? address : null</code> conditional returns <code>true</code>. The value of the address is the empty object <code>{}</code>.</p>

</details>
<hr>
<p dir="auto"><h6 tabindex="-1" dir="auto">155. What's the output?</h6><a id="user-content-155-whats-the-output" aria-label="Permalink: 155. What's the output?" href="#155-whats-the-output"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="let randomValue = { name: &quot;Lydia&quot; }
randomValue = 23

if (!typeof randomValue === &quot;string&quot;) {
	console.log(&quot;It's not a string!&quot;)
} else {
	console.log(&quot;Yay it's a string!&quot;)
}"><pre><span>let</span> <span>randomValue</span> <span>=</span> <span>{</span> <span>name</span>: <span>"Lydia"</span> <span>}</span>
<span>randomValue</span> <span>=</span> <span>23</span>

<span>if</span> <span>(</span><span>!</span><span>typeof</span> <span>randomValue</span> <span>===</span> <span>"string"</span><span>)</span> <span>{</span>
	<span>console</span><span>.</span><span>log</span><span>(</span><span>"It's not a string!"</span><span>)</span>
<span>}</span> <span>else</span> <span>{</span>
	<span>console</span><span>.</span><span>log</span><span>(</span><span>"Yay it's a string!"</span><span>)</span>
<span>}</span></pre></div>
<ul dir="auto">
<li>A: <code>It's not a string!</code></li>
<li>B: <code>Yay it's a string!</code></li>
<li>C: <code>TypeError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p dir="auto"><h4 tabindex="-1" dir="auto">Answer: B</h4><a id="user-content-answer-b-39" aria-label="Permalink: Answer: B" href="#answer-b-39"></a></p>
<p dir="auto">The condition within the <code>if</code> statement checks whether the value of <code>!typeof randomValue</code> is equal to <code>"string"</code>. The <code>!</code> operator converts the value to a boolean value. If the value is truthy, the returned value will be <code>false</code>, if the value is falsy, the returned value will be <code>true</code>. In this case, the returned value of <code>typeof randomValue</code> is the truthy value <code>"number"</code>, meaning that the value of <code>!typeof randomValue</code> is the boolean value <code>false</code>.</p>
<p dir="auto"><code>!typeof randomValue === "string"</code> always returns false, since we're actually checking <code>false === "string"</code>. Since the condition returned <code>false</code>, the code block of the <code>else</code> statement gets run, and <code>Yay it's a string!</code> gets logged.</p>

</details>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Online censorship's institutional power (123 pts)]]></title>
            <link>https://madattheinternet.substack.com/p/online-censorships-institutional</link>
            <guid>40382379</guid>
            <pubDate>Thu, 16 May 2024 19:48:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://madattheinternet.substack.com/p/online-censorships-institutional">https://madattheinternet.substack.com/p/online-censorships-institutional</a>, See on <a href="https://news.ycombinator.com/item?id=40382379">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>A person’s most valuable asset is their reputation, and there’s no better place to build one’s cachet than online. For this reason, there is a convergence of extreme wealth, power, and influence building up around the backbone of the Internet like a cancer. Without immediate organization and reaction from the atomized groups considering themselves “anti-censorship”, we will soon live in a less free world with a less open Internet where rich and influential people can dictate their own trustworthiness and slander their opposition with impunity.</p><p>In the 11 years I have managed my forum, the Kiwi Farms, I have seen firsthand the power in allowing people to talk about people. Anyone who is permitted to freely share what they’d like about another is enabled to punch far above their own weight. When a forum organized like the Kiwi Farms hosts stories, media, and documents that never go away, it can become a permanent blight on a diligently maintained reputation belonging to surprisingly important people. When that demerit is made on someone rich and well-connected, they may dedicate years of their life to trying to erase it.</p><p><span>Liz Fong-Jones is a transgender multi-millionaire, formerly employed by Google, but now involved in at least two San Francisco tech startups: Honeycomb and Tall Poppy.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-1-144517985" target="_self" rel="">1</a></span><span> His résumé and portfolio has been leveraged to try and deplatform the Kiwi Farms since 2017. What started with a single email has expanded over seven years into a conspiracy targeting the most sensitive and important components of what makes up the Internet.</span></p><p>The story of Liz Fong-Jones trying to take down the Kiwi Farms is indicative of what will soon be done to all controversial web content if there is not coordinated effort made to make the Internet, and the companies which compose it, more neutral and accountable.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png" width="1100" height="748" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/dbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:748,&quot;width&quot;:1100,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1749020,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdbea1dd3-884e-4b7e-a725-a9ec6df748b3_1100x748.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>On August 18th, 2017, Liz Fong-Jones used his company’s &lt;lizf@google.com&gt; email address to send a complaint. The targeted provider hosted my website’s email service.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-2-144517985" target="_self" rel="">2</a></span><span> At the time, we used Cloudflare’s security services, and a common way to bypass Cloudflare was to look at the mail server. Cloudflare does not protect email, and often the unprotected mail server for websites will be the same server or provider as the actual protected web server. Fong-Jones complained we hosted personal information, hoping that this would cause our website to go down.</span></p><p>The information in question was about Trans LifeLine, a hotline for transgender people in crisis staffed by transgender volunteers. At the time, Trans LifeLine was operated by Greta Gustava and Nina Chabaul. These organizers would post extravagant lifestyle photos on their public Instagrams, meanwhile the Trans LifeLine hotline service rarely had anyone online to accept emergency calls. This led Kiwi Farms users to suspect they were stealing from their charity, so we began documenting both their lifestyle and their hotline’s performance (or lack thereof).</p><p>Documents leaked to us by people who had worked with them showed that there was almost no organization, no internal support structure, and no training. Transgender people recruited by TLL to be call agents would then be put on lines to deal with immediately at-risk suicidal transgender people with scant information on how to actually help. Some callers reported being hung up on. Operators reported trauma from having to answer life-or-death phonecalls without any idea of what to do or say.</p><p><span>Years later, and thanks to information made available only on the Kiwi Farms, they would be ousted from the organization for fraud.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-3-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-3-144517985" target="_self" rel="">3</a></span><span> Trans LifeLine’s operators would later file under penalty of perjury that Greta and Nina had inured hundreds of thousands of dollars.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-4-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-4-144517985" target="_self" rel="">4</a></span><span> Liz Fong-Jones tried to cover this up while it was happening by silencing the only people who were, at this point in time, both aware of and capable of discussing transgender issues in a less-than-flattering way without being banned.</span></p><p><span>This would begin the long trend of transgender activists saying “ignore the bad things on Kiwi Farms, they’re made up” with the punchline being that we’d end up proven right over time, and with damage done that could have been mitigated if we were trusted sooner. It would take Fong-Jones 6 years to admit that Trans LifeLine was a scam at the time he was supporting them. He explains he now only donates money to causes where he can directly influence the way it operates.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-5-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-5-144517985" target="_self" rel="">5</a></span><span> Liz Fong-Jones should be thanking us, but he still holds a vicious grudge because we reported the abuse of his Google work email.</span></p><blockquote><p><span>It's necessary to be non-anonymous to the organisations that intermediate your giving in order to </span><strong>get a seat at the governance table</strong><span> and ensure that funds are being appropriately spent. That was a very very painful lesson I learned from the fiasco that was the </span><strong>early days of Trans Lifeline</strong><span>, where the inexperienced initial board did not meaningfully keep the founders in check / insist on audits, and the major donors (including myself) didn't think to ask for board seats to provide oversight, </span><strong>leading to us all getting defrauded</strong><span>.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-6-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-6-144517985" target="_self" rel="">6</a></span></p></blockquote><p>You will never hear the story of how Kiwi Farms identified fraud in a charity, because it is not written about. There is not a single article from a supposedly trustworthy media source about this scandal. No journalist in the world can catalog what the Kiwi Farms gets right, because the truth is a secondary concern to them, sitting under what is politically expedient.</p><p><span>Fong-Jones would continue working at Google for another 2 years. Anonymous reports regarding internal politics within the company where Fong-Jones worked paint a picture of a continuous menace, always looking for new victims to cause problems for. Fong-Jones even finds himself named in the famous James Damore discrimination lawsuit against Google for discriminatory posts made on internal Google forums.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-7-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-7-144517985" target="_self" rel="">7</a></span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png" width="451" height="445" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:445,&quot;width&quot;:451,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7004df7e-a986-4527-8ad6-86e8e9f22de5_451x445.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>He claims to have resigned in 2019, after the Google Walkout protests he helped organize. Insiders reported that Google does not give severances, unless you are asked to quit. This indicates that Fong-Jones was likely paid to leave, as opposed to his claims he resigned. Trying to fire a person in such a politically protected category, especially when they are as litigious and disruptive as Fong-Jones is, would cost more than the $90,000 he was given just to go away.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg" width="1251" height="376" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:376,&quot;width&quot;:1251,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd45563ec-fdcd-4260-9890-e27f57ee72a5_1251x376.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>A report from tech forum Y-Combinator. That name is important.</figcaption></figure></div><p>During his employment with Google, he had acquired cryptocurrency and stake in the company. It is assumed that Fong-Jones’s net worth is in the millions. Indeed, Fong-Jones has stated he has an interest in finance and wants to make wealth building a part of his career.</p><p><span>After leaving Google, he joined tech startup Honeycomb as Chief Field Technology Officer. Honeycomb is a business-to-business software company that sells ‘solutions’ directly to major tech companies, such as Dropbox and Slack, video game companies including CCP (</span><em>EVE Online</em><span>) and Behaviour (</span><em>Dead by Daylight</em><span>), and finance companies like Vanguard, which is one of the largest investment firms in the world.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png" width="1456" height="412" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:412,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:295661,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2ea080da-f4d9-4573-91fe-771c1624624f_3793x1074.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Honeycomb is extremely progressive and has stood by Liz Fong-Jones for years, even after he inexplicably announced to the world in November 2019 that he had been credibly accused of sexual assault, which he chooses to refer to as a “Consent Accident”.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-8-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-8-144517985" target="_self" rel="">8</a></span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png" width="487" height="363.0652528548124" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:457,&quot;width&quot;:613,&quot;resizeWidth&quot;:487,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F135a8b12-e091-40f7-9675-72af6491f1ba_613x457.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Liz Fong-Jones explaining how he was accused of rape, downplaying it as a misunderstanding about dog hair.</figcaption></figure></div><p>You won’t find any information about this online, no matter which search engine you use. Instead, you will find gushing articles, portfolio websites, Wikipedia entries, and more talking about what a successful, important person Fong-Jones is. How can someone accused of rape simply walk way from this without any of the progressive organizations around them caring?</p><p><span>Search engine optimization (SEO) is one of Liz Fong-Jones’s other personal interests, as he enjoys a perfectly pedicured digital footprint. He is an investor and board member of Tall Poppy, a reputation management company.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-9-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-9-144517985" target="_self" rel="">9</a></span><span> This company is also business-to-business, and advertises itself as “proactive action against online harassment and personal security threats”. The name comes from an expression in Australia and New Zealand, and means that successful people get unfairly criticized: ‘the tall poppy gets cut down’.</span></p><p><span>They have a decent list of investors and advisors,</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-10-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-10-144517985" target="_self" rel="">10</a></span><span> with two names jumping out.</span></p><p><span>Y-Combinator has invested in them. Y-Combinator is the forum which had hosted the negative post about Liz Fong-Jones quoted in this article. This post now exists with Liz Fong-Jones’s name completely redacted, a change which was documented between 23 May and 15 Sep 2023, about 4 years after it was originally created.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-11-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-11-144517985" target="_self" rel="">11</a></span></p><p>Inner Loop Capital is also interesting, as Tall Poppy is outside the usual scope of their portfolio. They list on their website that they invest in “digital infrastructure”, which are generally low-level companies silently contributing to how the Internet runs. These infrastructure companies will be relevant later.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png" width="1456" height="445" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:445,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:205888,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F144e2d6a-60db-458d-929e-f0fdb14c5d46_2925x894.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Tall Poppy boasts its customer list,</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-12-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-12-144517985" target="_self" rel="">12</a></span><span> which includes large companies like Spotify, viciously litigious associations like the Science Fiction &amp; Fantasy Writers of America (SFWA), NGOs like the Global Disinformation Index, and Amazon’s extremely influential streaming platform Twitch.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png" width="1456" height="564" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:564,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:818619,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad3b5550-fbff-40c3-9399-461bfcb019cf_2514x974.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>They have received glowing endorsements from Ellen Pao, former CEO of Reddit, Anita Sarkeesian of GamerGate fame, Katherine Maher, former CEO of Wikimedia, and Liz Lee, who has been involved with Twitter and Morgan Stanley (one of the most powerful wealth management organizations in the United States).</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png" width="1456" height="793" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:793,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1148522,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce69999b-5ab2-4b2c-a8cb-22050135e614_3806x2072.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><strong>Ellen Pao</strong><span> was an interim CEO for Reddit in 2015. She was the head of the company when it decided to ban r/FatPeopleHate. Reddit traditionally had a policy of tolerating free speech, even when upsetting. It may be hard to believe, considering the state of Reddit today, but this was a very unpopular decision. Ellen Pao was even forced to couch these reforms in language like: “we’re banning behavior, not ideas”.</span></p><p><span>There were many changes she made, all unpopular. Her stay at Reddit was very brief. She was removed and Reddit apologized, saying they would make things right. This never happened.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-13-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-13-144517985" target="_self" rel="">13</a></span><span> It was clear that Pao was hired to make sweeping changes, setting the stage for the new Reddit moving forward, then step aside during the outrage so that she would take the fall. Not a single policy Ellen Pao implemented was ever reversed by Reddit’s corporate, and they have since been compounded and expanded upon.</span></p><p>Ellen Pao married an openly gay man, but has been going through a divorce since 2019. Details on this divorce are hard to come by online. It raises questions as to what exactly Ellen Pao has been paying for.</p><p><strong>Katherine Maher</strong><span> is a former Wikimedia CEO and current CEO of NPR.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-14-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-14-144517985" target="_self" rel="">14</a></span><span> She is an avid ideologue whose reputation is so incredibly poisonous that her position on the Signal Foundation has raised serious concerns if the beloved privacy app Signal is fundamentally compromised.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-15-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-15-144517985" target="_self" rel="">15</a></span></p><p><span>This direct connection helps explain how Liz Fong-Jones is able to generate significant positive press for himself, and is permitted to craft narratives on Wikipedia articles he is directly affected by and has incredible conflicts of interests with, including for his company Honeycomb and for the Kiwi Farms. His contributions are made by suggestion only (via the “Talk Pages”),</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-16-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-16-144517985" target="_self" rel="">16</a></span><span> but since he is direct friends with Wikipedia admins who manage these pages, they are always included in as favorable a light to him as possible.</span></p><p>Wikipedia is supposed to be a “free and open” platform for cataloguing the knowledge of mankind. Katherine states here that this is no longer useful, and that “free and open” perpetuates a “White, male, Westernized construct” and is exclusionary to communities “without written tradition”. “These ideas of radical openness … did not live up to the intention”.</p><p>Wikipedia is by no measure a free and open platform. You are only permitted to edit Wikipedia using specific IP addresses, meaning anyone concerned about their privacy may not edit Wikipedia. Since Wikipedia admins and Wikimedia C-Level executives may be friends with people trying to ruin your life, this necessitates de-anonymizing yourself to hostile actors to even create an account.</p><p>Then, you will discover that almost every important Wikipedia page is under special protections, especially controversial pages like the Kiwi Farms, living people such as Liz Fong-Jones, and his companies like Honeycomb. You will need a certain level of reputation within the Wikipedia community to even attempt editing these pages. Protected and high-risk pages like the Kiwi Farms’s are watched for changes by hundreds of bureaucrats continuously. Your edits will be critically scrutinized, whereas the edits of Liz Fong-Jones and his personal Wikipedia admin friends will pass with rubber stamps.</p><p>One major reason your edits may be reverted is for “original research”. Original research is anything extrapolated from a primary resource. This includes government websites and the Kiwi Farms itself, if you’re writing about the Kiwi Farms.</p><p><span>What Wikipedia likes is secondary resources from trusted publications. Trusted publications are explicitly whitelisted news media websites.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-17-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-17-144517985" target="_self" rel="">17</a></span><span> Kiwi Farms users in 2022 asked Wikipedia to start being impartial on the subject and stop trusting biased news articles. This prompted 10-year Wikipedia veteran editor Bilorv to state, “If Wikipedia had existed when expert consensus was that the Earth is flat then we would have asserted that position as fact”.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-18-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-18-144517985" target="_self" rel="">18</a></span><span> The men who burned Giordano Bruno at the stake for discrediting geocentrism now write for Wikipedia. At least Bruno’s executioners got paid; Bilorv’s 38,828 edits were made to Wikipedia for free purely for the self-satisfaction and ego.</span></p><p>So, in practice, Maher’s revolutionary “not free, and not open” Wikipedia means that any wealthy technocrat may buy fluff pieces from legacy news websites, and can request these articles be added to Wikipedia articles by their admin friends, specifically to accomplish political goals.</p><p>Incidentally, the Wikipedia article for the Kiwi Farms is nothing but sloppy accusations citing articles which contain no evidence themselves. Whatever the news writes becomes the truth, and the news writes what Liz Fong-Jones tells them to write. He is often directly contributing to the news articles, or is the subject of favorable interviews with these publications, which he then personally passes through to Wikipedia admins to complement and grow articles in the direction he pleases.</p><p>Wikipedia’s true power comes in its presence on search engines. It is almost always the first result of any search, its contents are fed into the infobox summaries found on search results, and its data is accepted uncritically by AI chatbots. If I ask Google Gemini to describe the Kiwi Farms in a sentence, it tells me “a controversial web forum known for its users' online harassment and stalking campaigns against various individuals and communities”, despite the Kiwi Farms having explicit and enforced rules against contacting people off-site (i.e. harassment). To the average person, Wikipedia is the truth, and whatever is written on Wikipedia is what will be believed.</p><p>Liz Fong-Jones’s reputation management looks like this:</p><ol><li><p>Crafts a media narrative with contacts in the press.</p></li><li><p>Cements this narrative as publicly held truth using his Wikipedia contacts.</p></li><li><p>Sends links to these articles directly to ISPs himself as proof of abuse.</p></li><li><p>Remove from search results, or the Internet completely, any upsetting pages.</p></li></ol><p>In this way, he can “prove” criminal behavior through a line of “reputable sources”, despite no actual evidence for criminal behavior, because no criminal behavior exists.</p><p>This works both to harm websites like mine, and to his benefit in crafting his and his company’s reputation to his liking. It works especially well because he’s very low-profile and not known outside of his fields, where there is no political crossfire to hold Wikipedia accountable. Instead, the only voice identifying this behavior is the Kiwi Farms, which has already been thoroughly maligned.</p><p>This email from Blake Willis of Zayo Paris exemplifies the trust in Wikipedia and the power of Liz Fong-Jones’s connections within the industry. I must stress that the decision to terminate Internet service at the level suggested in this email exchange is unheard of. This is the equivalent of the power company cutting off an abortion clinic or coal mine because they are too controversial. A mere ten years ago, a decision like this would have been completely unthinkable.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png" width="1456" height="1431" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1431,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:214109,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4b3eca-c73e-40b5-8e4e-1230eec50849_1643x1615.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>There is a sentiment I want to overcome: that the Kiwi Farms—as only a moderate sized, niche community that is often times mean-spirited—does not effectively act as a canary in the coal mine for the broader Internet. I will demonstrate that the lessons being learned from this meddling are testing a broader strategy applicable to all.</p><p><span>In 2022, after disgraced fraudster Clara “Keffals” Sorrenti would falsely claim the Kiwi Farms had orchestrated a swatting of his domicile in Canada, Liz Fong-Jones would lend his talents to try and finally destroy the Kiwi Farms. This included Liz Fong-Jones appearing in person at Syndey to protest Cloudflare, which provided security services to us.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-19-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-19-144517985" target="_self" rel="">19</a></span><span> The idea was that by getting our security service to abandon us, we would be opened up to illegal cybersecurity attacks that would bring us down. It worked, and very powerful people took notice.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-20-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-20-144517985" target="_self" rel="">20</a></span></p><p><span>Liz Fong-Jones hoped to achieve total censorship of a community made of tens of thousands of users. His efforts, and his achievements, are now being used as a proof-of-concept for academic research. If Liz Fong-Jones succeeds, the model he is constructing will be applied to easier targets than the Kiwi Farms. I also stress that the Kiwi Farms has been </span><em>unusually</em><span> flexible and able to resist deplatforming, in no small part because I as an individual am very </span><em>unusual</em><span>. Most people would have the good sense to quit and abandon their projects well before it gets to the point it has with the Kiwi Farms. This is doubly true for websites which must operate cash positive as a successful business, whereas the Kiwi Farms lives off cryptocurrency donations, a privilege unique to dedicated communities with very tech-savvy users.</span></p><p><span>Liz Fong-Jones personally gave a presentation at Cambridge, concisely detailing his own efforts to deplatform the Kiwi Farms at every conceivable technical level.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-21-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-21-144517985" target="_self" rel="">21</a></span><span> Shockingly, the most effective targets were the most important to the broader Internet, such as T1 Internet backbone company Cogent, based out of D.C., who to this day will block any of their own customers who allow the Kiwi Farms to use them.</span></p><p>I think even Liz Fong-Jones was surprised at how quickly the Internet backbones began censoring at his request, because it took months for him to even try. Once he realized they would do what he asked, it became his go-to strategy. Why bother with the small, conscientious companies at the bottom when you can threaten to kneecap their entire business out the gate with top-down censorship?</p><p><span>The following Cambridge academic paper was released, which directly follows the deplatforming efforts made against the Kiwi Farms. Interestingly, it also follows the impact on user numbers and post participation in the community using publicly available data. It accurately details how post rates slowed due to low availability. For instance, while we almost always were available on Tor, many users chose not to download special browsers to continue accessing the forum. Cambridge sees that as a win.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-22-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-22-144517985" target="_self" rel="">22</a></span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png" width="584" height="391.91169977924943" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:608,&quot;width&quot;:906,&quot;resizeWidth&quot;:584,&quot;bytes&quot;:186650,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7a06a8b-2369-45e9-814f-7c27c3b6122e_906x608.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>This figure is extrapolated over a very nice timeline figure that outlines precisely the long-lasting, enduring attacks made at every level of infrastructure, including illegal attacks aimed at putting the site offline by directly compromising our software.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png" width="1456" height="570" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/cba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:570,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:220542,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcba8c213-5139-46bd-96d0-2d0dc7b3e338_1831x717.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The Kiwi Farms is so central to these researchers and their work, they have appeared on a cybercrime podcast </span><em>Hackting Out</em><span> to discuss the Kiwi Farms (albeit indirectly). </span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-23-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-23-144517985" target="_self" rel="">23</a></span></p><p><span>They have also delivered this report to the Institute of Electrical and Electronics Engineers (IEEE) just this year.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-24-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-24-144517985" target="_self" rel="">24</a></span></p><p>The IEEE is an incredibly important organization whose members decide international standards for technological development. It works together with, and has significant membership crossover with, the Internet Engineering Task Force (IETF). These groups publish RFCs proposing changes to how the Internet works.</p><p>Liz Fong-Jones and his friends in academia would hope to persuade the IEEE and IETF make the entire world smaller, more centrally organized, more brittle, and easier to break apart. These changes could be implemented at a technical level so innate to how the Internet works, that it would be almost impossible to explain to a layman what has even happened.</p><p>The Cambridge study is oriented to persuade important engineers that they must break the Internet so that mean websites can effectively be removed everywhere, and these studies are being made off where Liz Fong-Jones is currently failing to bring down the Kiwi Farms. Their political pressures conflict with the First Amendment, as we do nothing illegal. Now, they apply pressure inside academics, corporations, and trade organizations to instead circumvent our rights.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png" width="1456" height="816" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:816,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:729763,&quot;alt&quot;:&quot;\&quot;If all else fails, litigate\&quot; citing an article from The Guardian.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="&quot;If all else fails, litigate&quot; citing an article from The Guardian." title="&quot;If all else fails, litigate&quot; citing an article from The Guardian." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff807a01c-e505-489f-a928-f92f9d7566d8_2392x1341.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>A slide from Liz Fong-Jones’s presentation at Cambridge.</figcaption></figure></div><p><span>Liz Fong-Jones sued Vincent Zhen, the owner of Flow Chemical Pty Ltd, in Australia for AU$400,000 for defamation.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-25-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-25-144517985" target="_self" rel="">25</a></span><span> To demonstrate how insane this is, I will chart the distance between Vincent and the posts which Liz Fong-Jones alleges defame him.</span></p><ol><li><p>Vincent, an Australian, owns Flow Chemical, an Australian company.</p></li><li><p>Flow Chemical has IP addresses through APNIC, an Australian non-profit.</p></li><li><p>Flow Chemical leases some IP addresses to 1776 Solutions, LLC in Wyoming.</p></li><li><p>I, a Floridian, own 1776 Solutions, LLC.</p></li><li><p>1776 Solutions, LLC has provided service to my other company, Lolcow LLC.</p></li><li><p>Lolcow LLC  (West Virginia) owns the Kiwi Farms’s assets and licenses for posts.</p></li><li><p>Users of the Kiwi Farms, who are mostly American, made posts about LFJ.</p></li><li><p>LFJ alleges these posts are both untrue and defamatory.</p></li></ol><p>Therefore, the courts believe Vincent personally owes half a million dollars.</p><p>I know Vinny and speak to him maybe four times a year on average. We live on different continents in completely different timezones and it is hard to maintain a friendship over that sort of distance. As a result, Vincent knows almost nothing about the Kiwi Farms or what I do, and has no say in how I use the IP addresses I pay for.</p><p>In affidavits supplied to Australian court, Liz Fong-Jones has promised under penalty of perjury that these IP addresses are critical to the Kiwi Farms’s operations, uptime, and (most importantly) ability to deliver mean posts about him to the world-wide Internet.</p><p>We have not used these IP addresses in a year, and only used them publicly for less than a year. How critical these IP addresses are can be easily determined by the fact that the Kiwi Farms remains available to the world-wide Internet, and that we do not use any Flow Chemical IP addresses in doing so. It would be accurate to say that we enjoy more uptime without using Vinny’s IP addresses, due to very technical reasons that Liz Fong-Jones has learned to exploit — broadly, how to complain to ISPs and get entire networks removed from the Internet.</p><p><span>Vinny is very stubborn. He trusted the Government to recognize the flagrantly spurious and fallacious nature of these accusations and dismiss them on its own, </span><em>sua sponte</em><span>. He also is a busy person who has better things to do with his time and money than be sued by a lunatic. I continually advised him against inaction, perhaps once a month every month, until he was guilty by default.</span></p><p>He is working on the slow and expensive process of overturning the default.</p><p>The real victory of this judgment is that Liz Fong-Jones can now pretend it says the Kiwi Farms is illegal and/or creates civil liability for its hosts. Indeed, it has appeared in numerous articles published by the usual suspects who tend to polish Liz Fong-Jones, and these articles have somehow found their way to the Kiwi Farms’s Wikipedia page, despite zero direct involvement between Kiwi Farms and Flow Chemical or Vincent.</p><p>Liz Fong-Jones is nothing if not incredibly spiteful. The money and resources he has acquired are merely tokens for him to purchase human misery.</p><p><span>Last month, Sony released a video game called </span><em>Stellar Blade</em><span> to the PS5, which had featured a protagonist in very revealing clothing, which the developers had promised would not be modified when released to the West. Sony did end up tailoring her outfits to be less revealing, and this decision prompted outrage. A petition to undo this cosmetic defect accrued 84,000 signatures in two weeks.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-26-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-26-144517985" target="_self" rel="">26</a></span></p><p>Stellar Blade’s petition is the largest outcry against censorship in recent memory, and it has so far failed to get Sony’s decision reversed. This failure highlights to me what I believe should be obvious: public outcry and petitions do not get things done. Money does. Whatever monied power convinced Sony to make these changes outweighs the perceived economic threat of gamers promising not to buy their game.</p><p><span>The anti-censors rallied around this cause </span><em>en masse</em><span>, no doubt thanks to how easy it is to complain on social media and sign a petition. Meanwhile, there is a vine of thorns wrapping around the esophagus of the Internet. Our ability to even communicate is at risk of being destroyed, and the people who intend to destroy them have networked an obscene amount of wealth and power without being noticed. Indeed, the monied powers actively working to destroy the Internet find themselves intertwined with supposedly anti-censorship entities without trouble.</span></p><p>For instance, the closest thing to institutional power online for anti-censorship is Rumble, which has recently started a cloud service that consists of a single datacenter, a single ISP (Cogent), and a single security service (Path).</p><p><span>Rumble highlights, in particular, the anti-censor’s total and complete inability to learn lessons from other anti-censors. I have personally attempted to communicate to Rumble by email, to CEO Chris Pavlovski, and to Head of Product Rick Racela the </span><em>imminent</em><span> and </span><em>urgent</em><span> danger that relying solely on Cogent and Path presents to their companies, and </span><em>all</em><span> of their customers.</span></p><p>Cogent has taken unprecedented, deranged steps to stop the Kiwi Farms from being able to operate, including threatening to disconnect entire datacenters in Poland for allowing us to continue to host there. The decisions to prohibit the Kiwi Farms and my company 1776 Solutions from operating on Cogent networks come from the very top. Two separate sales representatives from Cogent have confirmed to me that a C-level decision was made to stop me from acquiring a hookup with them. I have attempted to call in on Cogent investor meetings during public Q&amp;A and was screened out of the caller pool.</p><p>I stress that, even a few years ago, a T1 ISP making waves to try and censor online content would have been international news, a terrible blow to their reputation within the industry, and no company would possibly trust them with supplying transit.</p><p><span>Path’s CTO is Corey Barnhill (now August Heart), a pedophile. Corey is on record admitting to watching a 9-year-old girl be sodomized.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-27-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-27-144517985" target="_self" rel="">27</a></span><span> His company, Path, has attempted to illegally seize my hard drives by sending fake Canadian court orders to my datacenters. Path proudly advertises they were the first ISP to disconnect the Kiwi Farms at an ISP level, and boasted about this directly to Liz Fong-Jones.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png" width="1296" height="439" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:439,&quot;width&quot;:1296,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:102875,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6caea23f-631a-47cd-8e4d-ae314bf0079a_1296x439.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Despite this, Rumble </span><em>still</em><span> uses them. What’s worse, Rumble’s video site apparently uses Path for application level mitigation as well, which means Path (a mismanaged, near-bankrupt “security” company currently being evicted from datacenters for missing months of payments</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-28-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-28-144517985" target="_self" rel="">28</a></span><span>) is probably the SSL endpoint for Rumble. If true, it means Path &amp; Corey Barnhill can intercept and read all communications to Rumble’s website. I have warned them about this for </span><em>months</em><span>!</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-29-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-29-144517985" target="_self" rel="">29</a></span></p><p>At a very basic and fundamental level, the key players in anti-censorship are fractured and isolated from one another. They do not have cohesive goals and frequently allow irrelevant personal issues divide them. At best, their efforts are split and duplicated, and at worst, they are openly hostile to one another.</p><p>No such issues exist in the pro-censorship crowd. Drowned in capital from megacorporations, which they share between friends like bottles of wine, they plot a web of academic journals, media publications, and presentations at important international organizations to achieve their goals. They live in penthouse suites outside of San Francisco callously deciding which small, atomized, defenseless component of anti-censorship they will tie up in litigation and defame next.</p><p><span>There is </span><strong>no</strong><span> equivalent for anti-censorship. </span><strong>No one</strong><span> stands at the IEEE or IETF and discusses how the Internet is about to collapse into dystopia. The few who do merely cheer it on. Anti-censorship does not network and ignores the lessons already learned. They are too afraid of what will said about them in the media, when the media is already a demonstrably poisoned network of people who can’t wait to strangle the life out of them.</span></p><p><span>The most important anti-censorship organization </span><em>was</em><span> the Electronic Frontier Foundation (EFF). The one time the EFF tried to write in defense of the Kiwi Farms, they had to anonymize their authors because the two women who wrote it were threatened by a transgender mob.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-30-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-30-144517985" target="_self" rel="">30</a></span><span> To this day, the EFF will take the side of the mob who threatens them and hates them, over any organization in genuine need of defense which may lack a favorable Wikipedia article.</span></p><p><span>At the time the Kiwi Farms deplatforming was starting to show cracks in the Internet backbones, the EFF even launched a petititon website called “</span><em>Protect the Stack</em><span>”, dedicated to trying to preserve the neutrality of the Internet.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-31-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-31-144517985" target="_self" rel="">31</a></span><span> They have </span><em>never</em><span> contacted the Kiwi Farms directly to learn about where the stack is in danger, and as a result they have accomplished </span><em>nothing</em><span>! Despite the size, prestige, and financial support of the EFF, </span><em>Protect the Stack</em><span> has accomplished </span><em>nothing</em><span>!</span></p><p><span>It is no wonder, when they are staffed with the likes of Cooper Quinton, a senior security researcher with the EFF</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-32-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-32-144517985" target="_self" rel="">32</a></span><span> whose hobbies include wishing death on users of a website who have openly supported the EFF for years.</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-33-144517985" href="https://madattheinternet.substack.com/p/online-censorships-institutional#footnote-33-144517985" target="_self" rel="">33</a></span><span> Quinton is proof-of-concept that anti-censorship wastes its breath trying to involve itself with the existing, rotting structures of the past’s anti-censorship. Those organizations are subverted and only new ones with renewed purpose can work.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png" width="1196" height="403" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:403,&quot;width&quot;:1196,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:68173,&quot;alt&quot;:&quot;\&quot;I wish everyone involved with kiwi farms a very merry getting hit by a bus.\&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="&quot;I wish everyone involved with kiwi farms a very merry getting hit by a bus.&quot;" title="&quot;I wish everyone involved with kiwi farms a very merry getting hit by a bus.&quot;" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F71892990-0fbd-4bc0-946a-cbd1de07c0fd_1196x403.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png" width="1186" height="780" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:780,&quot;width&quot;:1186,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:428327,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61fa2d6e-1823-4387-8991-0ee3486d298a_1186x780.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I would like to end this article with a call to action. “Here is the problem, here is the solution.” While I would generally encourage intelligent cooperation between Anti-Censorship movements, I have no hope for that. Anti-censorship is inherently individualistic, as those types benefit from freedom the most.</p><p>Some cohesion is necessary. The anti-censorship crowd is mostly preoccupied with lining their own pockets. Every anti-censorship startup seems hellbent on being the first person to “solve” the censorship issue, without any cooperation from others, so that they may take in all the “glory”. There is no conservative think-tank doing what the pro-censorship camps do every day: combining intelligence, power, and money. Instead, we each run our own race, and make less progress overall, falling further behind in our endeavors every day, winning only superficial victories with video games and in local jurisdictions, while pro-censorship wins on the big stage and behind the curtains of the international organizations who actually make decisions.</p><p>There will be no participation trophies at the gallows.</p><p>For those with resources, I emphasize that confederation is required to survive the next decade. There are companies making up the Internet which are toxic and needing to be scraped out, and companies which are principled and needing to be built up. The good is out there, and good people are trying, but they don’t get the attention they need. A serious person with serious aspirations could start a pro-free speech trade organization or coalition, but it needs to be done in earnest and with resources out the gate, and it cannot exclude members and what they would bring to the table simply by the negativity of their Wikipedia article.</p><p>For the average person, instead of asking you to do a specific thing, I ask you to consider something: Every day, Liz Fong-Jones wakes up and dedicates the whole of his existence to making the world a worse place. He decides how he is going to enrich himself, who he is going to exploit, where he’s going to invest his wealth and grow his personal power, and how he’s going to expand his network of nepotistic friends.</p><p>What are you doing? Are you spending your days productively? Are you putting effort into growing your own wealth and improving your own standing? Are you waking up each day to a personal situation that is better than yesterday’s?</p><p>Anti-censorship, in general, appears most sensitive to pop culture changes, like media localization, video game outfits, and movie race swaps. I fear this may be because anti-censorship has become complacent and defeatist. It appears to many that perhaps the only achievable victories are keeping a movie remake’s character White. I think many are spending their time absorbed in media because our real situation seems so dire. The plane is crashing and everyone just wants a nice in-flight movie.</p><p>I ask that everyone makes their every day more productive than Liz Fong-Jones and his friends have made theirs.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[History of the Italian electrical system (122 pts)]]></title>
            <link>https://samuele963.github.io/electrics/history.html</link>
            <guid>40382275</guid>
            <pubDate>Thu, 16 May 2024 19:39:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://samuele963.github.io/electrics/history.html">https://samuele963.github.io/electrics/history.html</a>, See on <a href="https://news.ycombinator.com/item?id=40382275">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
  <p>
    The Italian electrical system has a fairly complicated history; from different voltages and frequencies to the type
    of plugs used, almost everything about it has changed over the last century, or is in the process of changing.
  </p>
  <p>
    While nowadays it's well known that North America uses 120V and Europe (as well as most other places) use 230V,
    this wasn't the case - for decades parts of Europe, such as Italy, also used 120V, either entirely or only for
    certain applications, and switched voltages later on.
  </p>
  <p>
    This page documents this history, specifically regarding the situation in Italy, and the various changes that
    happened over time as the electrical system evolved.
  </p>

  <h3>The beginning</h3>
  <p>
    As with most countries, electrical supplies in the early days of electrification were divided between different
    regions and even across cities, as grids were owned by many small regional power companies; thus, voltages and
    frequencies (42Hz was quite common) could vary a lot between each other.
  </p>
  <p>
    This is made quite evident on this list, taken from the Italian <a href="https://it.wikipedia.org/wiki/Distribuzione_di_energia_elettrica#In_Italia">
    Wikipedia page</a> about electrical distribution, which shows the various voltages in use in major urban centres
    in Italy back in the day.
    Note that some cities are listed twice - this was because of multiple companies operating in the same cities, each
    with their own type of supply.
  </p>
  <p><img src="https://samuele963.github.io/electrics/images/history/old_line_voltages.png" alt="A list of the various line voltages in use in the major towns and cities Italy before their unification. The voltages can vary quite widely, for example Terni is listed as using 120/210V, whereas Frosinone used 150/260V. Additionally, some towns are listed twice, as they were served by two different power companies." height="230"></p><p>
    Later on the smaller companies were acquired by larger ones, and in the 60s a national electric company - ENEL - was
    formed. Part of their goal was to unify the various supplies, and move to a unified standard.
    However, one thing remained for a few more decades...
  </p>

  <h3>The dual tariff system</h3>
  <p>
    During this time, electricity was mainly used for lighting, and later on also simple devices such as fans and
    radios. If you wanted to use any appliances you had to pay for a higher rate of electricity, which was metered and
    taxed differently - the idea was, that if you were rich enough to own, for example, a washing machine (which was
    very expensive at the time), you definitely had enough money to pay for the appliances supply.
  </p>
  <p>
    To prevent people from using the cheaper lighting supply for appliances, this was powered at a different voltage -
    for example, 120 or 150V - and often was also limited to only a few kilowatts. Appliances, on the other hand, used
    a higher voltage, generally 220V (though 260V was also a thing), which also helped with efficiency.
  </p>
  <p><img src="https://samuele963.github.io/electrics/images/history/voltage_selector.jpg" height="110" alt="A voltage selector switch, found on an old tube radio. Taps for many different voltages are present.">
    As a result of this, some electrical devices made back then aren't usable now without a transformer to step down
    the voltage - this is quite common on smaller tube radios and fans which were meant to be used with the lighting
    supply.
    Other devices, instead, had voltage selector taps on the back - some of these were for 120/150V-only, but often
    these also included an option for 220V (for tube radios, this was generally the case for ones with a built-in
    transformer), which makes it possible to use them even today.
  </p>

  <h4>How these supplies worked</h4>
  <p>
    The way this worked was quite simple: 127/220V three-phase transformers were common, which provided 120V
    between one of the phases and neutral, for the lighting supplies, and 220V between phases for the appliances supply.
    So, if you only needed to power lights, you received a single phase and a neutral, while if you also had an
    appliances supply you had two phases (or three phases for industrial applications) and a neutral, and two separate
    power meters.
  </p>
  <p>
    This arrangement is somewhat similar to the electrical supplies used in North America nowadays, where 120V is used
    for most appliances and 240 or 208V is used for heavy appliances, though one major difference is that split phase
    was very uncommon here.
  </p>

  <h4>Two types of plug</h4>
  <p><img src="https://samuele963.github.io/electrics/images/history/plug_size_comparison.jpg" height="120" alt="An overview of the two different sized of Type L plug.">
    Because of these dual supplies, and the two voltages they used, two different types of plug became common, and are
    nowadays both known as type L: a "small" 10A one meant for the lighting supply, and thus generally used for 120V,
    and a "big" 16A one meant for appliances, and thus generally used for 220V.
  </p>
  <p>
    "Big" sockets were incompatible with "small" plugs and viceversa, a useful feature to prevent breaking your precious
    electrical appliances.
  </p>

  <h3>Moving to 220V</h3>
  <p>
    Over time, as electricity became common, more and more people bought electrical appliances and thus most houses
    had two power meters and both 120 and 220V sockets in their home.
    As time moved on, 220V became used for more and more things, and people began wiring up 10A socket for use on 220V
    (which lead to some interesting results when a 120V devices was plugged to a 220V socket); as such, the whole
    structure of "small" sockets being for 120V and "big" ones being for 220V slowly began to fall.
  </p>
  <p>
    Additionally, even lighting supplies began getting migrated to 220V - at that point lighting was mostly the only
    thing a house would have used 120V for - but, even after the migration, dual metering continued to exist for a
    while longer.
    Even by the mid-70s 120V supplies were still in use, necessitating two meters, and houses with 220V only could
    either have one or two meters.
  </p>
  <p><img src="https://samuele963.github.io/electrics/images/history/bipasso_socket.jpg" height="160" alt="A picture of a Bipasso socket, which accepts both 10A and 16A plugs. The line and neutral holes are shaped specifically to be able to accomodate both.">
    Because of these dual supplies, and the two voltages they used, two different types of plug became common, and are
    During this time adaptors to go between the two different types of socket became common, and the purposeful lack
    of intercompatibility between the two went from a useful feature to a growing problem, especially as single-meter
    220V supplies became more common.
  </p>
  <p>
    On these installations, 10A sockets were often also used on the same exact circuits as 16A ones, making the
    separation even more pointless.
    A solution to this came in the form of the <i lang="it">Bipasso</i> sockets, 16A sockets which also accepted 10A
    plugs. These became more common for new installations, starting in the 70s-80s, solving the compatibility problem.
  </p>

  <h3>The legacy</h3>
  <p>
    Nowadays 120V supplies are no longer a thing - the last one was shut down in Lazio in 1999, thus marking the end of
    that era, though by then they had become extremely rare already.
    However, certain elements of that legacy still remain: the most notable part is the use of the two type L plugs,
    as well as Schuko ones.
  </p>
  <p>
    Additionally, some areas still use the old 127/220V transformers; houses in these areas receive two phases, both
    live at 127V with respect to earth. Special care must be taken in buildings fed by those transformers, to make
    sure proper double-pole (2P) breakers are used, to avoid things remaining live accidentally.
  </p>
  <p>
    Unfortunately, some electric car chargers don't like this sort of supply, and will outright refuse to work on it.
    This is apparently a somewhat common problem in parts of Rome, where not all "dual phase" transformers have been
    replaced yet.
    Thankfully, in general, these supplies are quite uncommon in Italy, and will get rarer and rarer as remaining ones
    get phased out as transformers get upgraded.
  </p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Exit Strategy: The Case for Single-Stair Egress (131 pts)]]></title>
            <link>https://www.architecturalrecord.com/articles/16880-exit-strategy-the-case-for-single-stair-egress</link>
            <guid>40382163</guid>
            <pubDate>Thu, 16 May 2024 19:29:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.architecturalrecord.com/articles/16880-exit-strategy-the-case-for-single-stair-egress">https://www.architecturalrecord.com/articles/16880-exit-strategy-the-case-for-single-stair-egress</a>, See on <a href="https://news.ycombinator.com/item?id=40382163">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div id="imageModalBackground" onclick="backgroundClick(event);">
<p>✕</p> 
<p><img alt="Image in modal." src="data:," id="currentImage">
</p></div><p>American land-use reformers intent on addressing present-day housing shortages have, for the last decade, focused their efforts on amending zoning codes—the very rules that gradually downzoned most urban land in the U.S., effectively outlawing <a href="https://www.architecturalrecord.com/topics/2073-multifamily-housing-architecture" target="_blank"> multifamily housing</a>, spurring suburban sprawl, and fanning the current crisis. Recently, however, a group of young architects and planners has brought attention to another code barrier that limits design options for large multifamily buildings: the multiple egress routes mandated by most American building codes. The argument, in short, is to re-legalize single-stair apartment buildings, also known as “point-access blocks”—a typology that was once commonplace and remains so in much of the world, including the European Union, where fireproof single-stair designs are allowed. If combined with zoning reform, such code reform would enable attractive, light-filled multifamily housing to be built cost-effectively on countless urban sites that would otherwise be developed as single-family homes.</p><p>Commentators often wonder why new apartment buildings across the United States tend to look alike, not-so-subtly implicating architects and developers. One key reason is that decisions around organization and massing are prescribed by, or strongly incentivized by, regulations. In the limited areas where zoning codes allow for apartments, these rules have given us the notorious “five over one.” In code lingo, these are a Type V light wood frame of up to five stories built over a single story of Type I fireproof podium (typically steel or concrete), with a double-loaded corridor and a stair at each end. Long, windowless corridors slice through the middle of deep floor plates. Non-corner units only have windows on one side, opposite the entry door—favoring studios and one-bedroom layouts.</p><p>By contrast, single-stair buildings across Europe tend to have shallower floor plates, “floor-through” light on at least two sides of each unit, and a shared central courtyard. Older American cities also feature outstanding examples of these “garden apartments”: New York’s first garden-apartment blocks, in Jackson Heights, Queens, were celebrated in <a href="https://www.architecturalrecord.com/ext/resources/archives/backissues/1920-08.pdf" target="_blank"><em>Architectural Record</em> in 1920 </a> for their array of unit layouts and variety of outdoor spaces. Indeed, single-stair designs deliver more of the light, air, and acoustic privacy typically provided by detached single-family buildings. Light on two or three sides facilitates multibedroom suites even in compact floor plates. These buildings also facilitate community building. In Jackson Heights, for example, whole-block developments are composed of many buildings in series, each governed by its own co-op board, and each, with 20 or so units arranged around a single stair, is small enough for residents to get to know each other. (New York and Seattle are the only two American cities that continued to allow single-stair buildings throughout the 20th century.)</p><div>

<div>
<p><img onclick="showImageModal(this.src);" alt="Operation Number 8." src="https://www.architecturalrecord.com/ext/resources/Issues/2024/05-May/Operation-Number-8-02.webp"></p><p>1</p>
</div>

<div>
<p><img onclick="showImageModal(this.src);" alt="Operation Number 8." src="https://www.architecturalrecord.com/ext/resources/Issues/2024/05-May/Operation-Number-8-03.webp"></p><p>2</p>
</div>

<p>Andrew J. Thomas, the prolific housing architect, was lauded in the August 1920 issue of RECORD for Operation No. 8, a series of apartment buildings in Queens, New York (1, 2,). <em>Images ©</em> Architectural Record</p>

</div><p>Single-stair designs also unlock economically feasible multifamily development on small infill lots. On such sites, two interior stairwells and a corridor would take up so much of the allowable floor plate that multifamily buildings are rendered infeasible unless adjacent lots are acquired. On some large lots, by contrast, the greater floor-plan efficiency of single-stair designs would probably be offset by the higher cost of fireproof construction and the need for a greater number of elevators, as double-loaded corridor designs enable one elevator to serve many units. In these cases, five-over-ones may continue to be built unless construction costs change dramatically. At the same time, developing large lots with multiple single-stair buildings would unlock a unique amenity: park-like shared interior courtyards. If on small lots, single-stair designs compete on both cost and quality, on large lots, they compete on quality.</p><p>Ultimately, building-code reform complements zoning-code reform. A building code allowing single-stair buildings can’t do much if zoning codes still ban multifamily designs in the first place. But allowing multifamily buildings in areas currently zoned for single-family homes may be more palatable to neighbors if they are faced not with the prospect of monolithic, whole-block five-over-ones but rather with narrower, family-friendly buildings. Even at similar height and average density, multiple 20-unit single-stair buildings form more neighborly, less anonymous interior communities than one enormous whole-block apartment building with 100 units sharing a hallway.</p><div>
<p><img onclick="showImageModal(this.src);" alt="Operation No. 8 Queens." src="https://www.architecturalrecord.com/ext/resources/Issues/2024/05-May/Operation-8.webp"></p><p>Operation No. 8, Queens, New York. <br><em>Photo © Architectural Record</em></p>
</div><p>Why, then, did the U.S. embark upon a path so different from Europe’s? Quite simply, there was a radical divergence in fire-safety approaches during the 20th century and insufficient exchange of best practices. As Stephen Smith, director of the North American Center for Building, argues, American approaches aim to make combustible light wood-frame buildings easier to escape by providing multiple paths of egress; European codes, by contrast, require fire-resistant materials and compartmentation to prevent fires from spreading in the first place. Statistically, the evidence is clear: fire-death rates are consistently lower in Europe than in the U.S. and Canada. Nonetheless, it may be prudent to cap the height of single-stair buildings to ensure egress via fire ladder. This is the approach followed both by New York and Seattle, which cap the height of single-stair buildings at six stories while requiring fire-rated structures and sprinklers.</p><p>What outcomes might we expect from allowing six-story point-access blocks throughout the country? Based on evidence from New York and Seattle, double-loaded corridor designs would probably outcompete point-access-block designs for new buildings only on sites where neighborhood amenities and transit access push up land prices to the point that they support building heights beyond the reach of a fire ladder. But these places are exceptional, not typical. Today, the outlook for reform of both zoning and building codes is brightening. Pro-housing coalitions across the United States have won early battles to re-legalize multifamily housing in states like California, Montana, Oregon, Minnesota, and others. Now building-code reform is gaining steam too. Honolulu quietly re-legalized single-stair apartments in 2012, copying Seattle’s code. Last year, California, Oregon, and Washington each successfully legalized single-stair construction, effective in 2025 or 2026. Half a dozen other states are considering enabling legislation. Reform is on the march.</p><p>104 years ago, this publication celebrated the liberation of New York from dark, airless tenements by new point-access blocks. Today, new adaptations of the same typology continue to win design competitions across the European Union. Single-stair construction commands the support of the Fire Department of New York and the Seattle Fire Department, and state governments across the West Coast have acted accordingly to legalize it. Why not do so across the rest of the United States too?</p><div>
<p>Click diagram to enlarge</p>
<p><img onclick="showImageModal(this.src);" alt="Operation Number 8." src="https://www.architecturalrecord.com/ext/resources/Issues/2024/05-May/Maximum-Prescriptive-Height-of-Single-Stair-Buildings-Diagram.jpg"></p><p>A diagram illustrating the maximum prescriptive height of single-stair buildings.<br><em>Image © Conrad Speckert / www.secondegress.ca</em></p>
</div></div><div><p>Alex Armlovich lives in New York and leads the housing-policy team at Niskanen Center, a Washington, D.C.–based think tank.</p></div></div>]]></description>
        </item>
    </channel>
</rss>